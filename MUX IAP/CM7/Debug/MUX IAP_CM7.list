
MUX IAP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e10  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000361c  080120b0  080120b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156cc  080156cc  000170a0  2**0
                  CONTENTS
  4 .ARM          00000008  080156cc  080156cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156d4  080156d4  000170a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156d4  080156d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080156d8  080156d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  24000000  080156dc  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c798  240000a0  0801577c  000170a0  2**2
                  ALLOC
 10 ._user_heap_stack 00030000  2401c838  0801577c  00017838  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00018000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000170a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027239  00000000  00000000  000170ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067b4  00000000  00000000  0003e307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d00  00000000  00000000  00044ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e6  00000000  00000000  000467c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004dbbe  00000000  00000000  00047ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000317fa  00000000  00000000  00095a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b3ff7  00000000  00000000  000c725e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0027b255  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f94  00000000  00000000  0027b298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0028322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012098 	.word	0x08012098

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08012098 	.word	0x08012098

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3f      	ldr	r3, [pc, #252]	@ (8000494 <SystemInit+0x104>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a3e      	ldr	r2, [pc, #248]	@ (8000494 <SystemInit+0x104>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000494 <SystemInit+0x104>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000494 <SystemInit+0x104>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b39      	ldr	r3, [pc, #228]	@ (8000498 <SystemInit+0x108>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b36      	ldr	r3, [pc, #216]	@ (8000498 <SystemInit+0x108>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a34      	ldr	r2, [pc, #208]	@ (8000498 <SystemInit+0x108>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b33      	ldr	r3, [pc, #204]	@ (800049c <SystemInit+0x10c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a32      	ldr	r2, [pc, #200]	@ (800049c <SystemInit+0x10c>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b30      	ldr	r3, [pc, #192]	@ (800049c <SystemInit+0x10c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <SystemInit+0x10c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492e      	ldr	r1, [pc, #184]	@ (800049c <SystemInit+0x10c>)
 80003e4:	4b2e      	ldr	r3, [pc, #184]	@ (80004a0 <SystemInit+0x110>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000498 <SystemInit+0x108>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b28      	ldr	r3, [pc, #160]	@ (8000498 <SystemInit+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a26      	ldr	r2, [pc, #152]	@ (8000498 <SystemInit+0x108>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b25      	ldr	r3, [pc, #148]	@ (800049c <SystemInit+0x10c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b23      	ldr	r3, [pc, #140]	@ (800049c <SystemInit+0x10c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b22      	ldr	r3, [pc, #136]	@ (800049c <SystemInit+0x10c>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b20      	ldr	r3, [pc, #128]	@ (800049c <SystemInit+0x10c>)
 800041a:	4a22      	ldr	r2, [pc, #136]	@ (80004a4 <SystemInit+0x114>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <SystemInit+0x10c>)
 8000420:	4a21      	ldr	r2, [pc, #132]	@ (80004a8 <SystemInit+0x118>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <SystemInit+0x10c>)
 8000426:	4a21      	ldr	r2, [pc, #132]	@ (80004ac <SystemInit+0x11c>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <SystemInit+0x10c>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <SystemInit+0x10c>)
 8000432:	4a1e      	ldr	r2, [pc, #120]	@ (80004ac <SystemInit+0x11c>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b19      	ldr	r3, [pc, #100]	@ (800049c <SystemInit+0x10c>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <SystemInit+0x10c>)
 800043e:	4a1b      	ldr	r2, [pc, #108]	@ (80004ac <SystemInit+0x11c>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b16      	ldr	r3, [pc, #88]	@ (800049c <SystemInit+0x10c>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <SystemInit+0x10c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	@ (800049c <SystemInit+0x10c>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <SystemInit+0x10c>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <SystemInit+0x120>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <SystemInit+0x120>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <SystemInit+0x124>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <SystemInit+0x128>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <SystemInit+0x12c>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <SystemInit+0x130>)
 800047c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000480:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8000482:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <SystemInit+0x104>)
 8000484:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000488:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	52002000 	.word	0x52002000
 800049c:	58024400 	.word	0x58024400
 80004a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80004a4:	02020200 	.word	0x02020200
 80004a8:	01ff0000 	.word	0x01ff0000
 80004ac:	01010280 	.word	0x01010280
 80004b0:	580000c0 	.word	0x580000c0
 80004b4:	5c001000 	.word	0x5c001000
 80004b8:	ffff0000 	.word	0xffff0000
 80004bc:	51008108 	.word	0x51008108
 80004c0:	52004000 	.word	0x52004000

080004c4 <FLASH_If_Init>:
  *         This function is necessary to allow writing to the Flash memory.
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
   printf("Unlocking Flash for write access\n");
 80004c8:	4804      	ldr	r0, [pc, #16]	@ (80004dc <FLASH_If_Init+0x18>)
 80004ca:	f010 fee5 	bl	8011298 <puts>
   HAL_FLASH_Unlock();
 80004ce:	f002 fea1 	bl	8003214 <HAL_FLASH_Unlock>
   printf("Flash unlocked successfully\n");
 80004d2:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <FLASH_If_Init+0x1c>)
 80004d4:	f010 fee0 	bl	8011298 <puts>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	080120b0 	.word	0x080120b0
 80004e0:	080120d4 	.word	0x080120d4

080004e4 <FLASH_If_Erase>:
  * @param  StartSector: The starting address of the flash area to be erased.
  * @retval 0: Flash area successfully erased.
  *         1: Error occurred during the erase operation.
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	@ 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;

  FlashAddress = StartSector;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	627b      	str	r3, [r7, #36]	@ 0x24
  printf("Starting Flash erase from address: 0x%08X\n", FlashAddress);
 80004f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80004f2:	4818      	ldr	r0, [pc, #96]	@ (8000554 <FLASH_If_Erase+0x70>)
 80004f4:	f010 fe68 	bl	80111c8 <iprintf>

  /* Device voltage range is assumed to be [2.7V to 3.6V], the operation will be done by sector */

  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 80004f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004fa:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <FLASH_If_Erase+0x74>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d820      	bhi.n	8000542 <FLASH_If_Erase+0x5e>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]

    // Configure the erase parameters
    FLASH_EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Banks         = FLASH_BANK_2; // Specify Flash Bank 2
 8000508:	2302      	movs	r3, #2
 800050a:	617b      	str	r3, [r7, #20]
    FLASH_EraseInitStruct.Sector        = FLASH_SECTOR_0; // Starting sector in Bank 2
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors     = 7; // Adjust as needed
 8000510:	2307      	movs	r3, #7
 8000512:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000514:	2320      	movs	r3, #32
 8000516:	623b      	str	r3, [r7, #32]

    // Perform the erase operation
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 8000518:	f107 020c 	add.w	r2, r7, #12
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f002 ff76 	bl	8003414 <HAL_FLASHEx_Erase>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d004      	beq.n	8000538 <FLASH_If_Erase+0x54>
    {
      printf("Error erasing Flash\n");
 800052e:	480b      	ldr	r0, [pc, #44]	@ (800055c <FLASH_If_Erase+0x78>)
 8000530:	f010 feb2 	bl	8011298 <puts>
      return (1);
 8000534:	2301      	movs	r3, #1
 8000536:	e009      	b.n	800054c <FLASH_If_Erase+0x68>
    }
    else
    {
      printf("Flash erase completed successfully\n");
 8000538:	4809      	ldr	r0, [pc, #36]	@ (8000560 <FLASH_If_Erase+0x7c>)
 800053a:	f010 fead 	bl	8011298 <puts>
  {
    printf("Flash address out of range: 0x%08X\n", FlashAddress);
    return (1);
  }

  return (0);
 800053e:	2300      	movs	r3, #0
 8000540:	e004      	b.n	800054c <FLASH_If_Erase+0x68>
    printf("Flash address out of range: 0x%08X\n", FlashAddress);
 8000542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000544:	4807      	ldr	r0, [pc, #28]	@ (8000564 <FLASH_If_Erase+0x80>)
 8000546:	f010 fe3f 	bl	80111c8 <iprintf>
    return (1);
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3728      	adds	r7, #40	@ 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	080120f0 	.word	0x080120f0
 8000558:	081e0000 	.word	0x081e0000
 800055c:	0801211c 	.word	0x0801211c
 8000560:	08012130 	.word	0x08012130
 8000564:	08012154 	.word	0x08012154

08000568 <FLASH_If_Write>:
  *         1: Error occurred while writing data to Flash memory.
  *         2: Written data in Flash memory does not match expected value.
  */
#define FLASH_BUF_SIZE 64
static uint8_t flash_buf[FLASH_BUF_SIZE];
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data, uint16_t DataLength) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	4613      	mov	r3, r2
 8000574:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint32_t i;

    // Unlock flash for writing
    status = HAL_FLASH_Unlock();
 8000576:	f002 fe4d 	bl	8003214 <HAL_FLASH_Unlock>
 800057a:	4603      	mov	r3, r0
 800057c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800057e:	7dfb      	ldrb	r3, [r7, #23]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <FLASH_If_Write+0x20>
        return status;
 8000584:	7dfb      	ldrb	r3, [r7, #23]
 8000586:	e040      	b.n	800060a <FLASH_If_Write+0xa2>
    }

    for (i = 0; i < DataLength; i += FLASH_BUF_SIZE / sizeof(uint32_t)) {
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
 800058c:	e036      	b.n	80005fc <FLASH_If_Write+0x94>
        // Determine the number of 32-bit words to copy in this iteration
        uint16_t words_to_copy = (DataLength - i < FLASH_BUF_SIZE / sizeof(uint32_t)) ? (DataLength - i) : (FLASH_BUF_SIZE / sizeof(uint32_t));
 800058e:	88fa      	ldrh	r2, [r7, #6]
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	2b10      	cmp	r3, #16
 8000596:	bf28      	it	cs
 8000598:	2310      	movcs	r3, #16
 800059a:	82bb      	strh	r3, [r7, #20]

        // Copy data to the buffer
        memcpy(flash_buf, &Data[i], words_to_copy * sizeof(uint32_t));
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	18d1      	adds	r1, r2, r3
 80005a4:	8abb      	ldrh	r3, [r7, #20]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	461a      	mov	r2, r3
 80005aa:	481a      	ldr	r0, [pc, #104]	@ (8000614 <FLASH_If_Write+0xac>)
 80005ac:	f010 ffd9 	bl	8011562 <memcpy>

        // Write buffer to flash in aligned blocks
        for (int j = 0; j < words_to_copy; j += 8) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	e01b      	b.n	80005ee <FLASH_If_Write+0x86>
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, *FlashAddress, (uint32_t)(flash_buf + j * sizeof(uint32_t)));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4a15      	ldr	r2, [pc, #84]	@ (8000614 <FLASH_If_Write+0xac>)
 80005c0:	4413      	add	r3, r2
 80005c2:	461a      	mov	r2, r3
 80005c4:	2001      	movs	r0, #1
 80005c6:	f002 fd93 	bl	80030f0 <HAL_FLASH_Program>
 80005ca:	4603      	mov	r3, r0
 80005cc:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d003      	beq.n	80005dc <FLASH_If_Write+0x74>
                HAL_FLASH_Lock();
 80005d4:	f002 fe58 	bl	8003288 <HAL_FLASH_Lock>
                return status; // Return on error
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	e016      	b.n	800060a <FLASH_If_Write+0xa2>
            }
            *FlashAddress += 32; // Move to next aligned address block (8 words = 32 bytes)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f103 0220 	add.w	r2, r3, #32
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < words_to_copy; j += 8) {
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	3308      	adds	r3, #8
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	8abb      	ldrh	r3, [r7, #20]
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbdf      	blt.n	80005b6 <FLASH_If_Write+0x4e>
    for (i = 0; i < DataLength; i += FLASH_BUF_SIZE / sizeof(uint32_t)) {
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3310      	adds	r3, #16
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	69fa      	ldr	r2, [r7, #28]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3c4      	bcc.n	800058e <FLASH_If_Write+0x26>
        }
    }

    // Lock the flash after writing
    HAL_FLASH_Lock();
 8000604:	f002 fe40 	bl	8003288 <HAL_FLASH_Lock>
    return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	240000bc 	.word	0x240000bc

08000618 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000620:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000624:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d013      	beq.n	8000658 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000630:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000634:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000638:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000640:	e000      	b.n	8000644 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000642:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000644:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800064e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000658:	687b      	ldr	r3, [r7, #4]
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <_write>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef  void (*pFunction)(void);
extern struct netif gnetif;
int _write(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e009      	b.n	800068c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffc9 	bl	8000618 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf1      	blt.n	8000678 <_write+0x12>
  }
  return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f000 fadb 	bl	8000c60 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000860 <main+0x1c0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b67      	ldr	r3, [pc, #412]	@ (8000860 <main+0x1c0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b62      	ldr	r3, [pc, #392]	@ (8000860 <main+0x1c0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a61      	ldr	r2, [pc, #388]	@ (8000860 <main+0x1c0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b5b      	ldr	r3, [pc, #364]	@ (8000860 <main+0x1c0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d138      	bne.n	800076e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <main+0x1c0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800070a:	4b55      	ldr	r3, [pc, #340]	@ (8000860 <main+0x1c0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60bb      	str	r3, [r7, #8]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	607b      	str	r3, [r7, #4]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	603b      	str	r3, [r7, #0]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	494a      	ldr	r1, [pc, #296]	@ (8000860 <main+0x1c0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	603a      	str	r2, [r7, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <main+0x1c0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a41      	ldr	r2, [pc, #260]	@ (8000860 <main+0x1c0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e000      	b.n	8000770 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076e:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fec4 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f884 	bl	8000880 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
#define CMM_HW
  MX_GPIO_Init();
 8000778:	f000 f984 	bl	8000a84 <MX_GPIO_Init>
  MX_TIM1_Init();
 800077c:	f000 f92e 	bl	80009dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000780:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000784:	f000 ff16 	bl	80015b4 <HAL_Delay>
  printf("Initializing\n");
 8000788:	4836      	ldr	r0, [pc, #216]	@ (8000864 <main+0x1c4>)
 800078a:	f010 fd85 	bl	8011298 <puts>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000794:	4834      	ldr	r0, [pc, #208]	@ (8000868 <main+0x1c8>)
 8000796:	f003 f977 	bl	8003a88 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800079a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079e:	f000 ff09 	bl	80015b4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a8:	482f      	ldr	r0, [pc, #188]	@ (8000868 <main+0x1c8>)
 80007aa:	f003 f96d 	bl	8003a88 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80007ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b2:	f000 feff 	bl	80015b4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007bc:	482a      	ldr	r0, [pc, #168]	@ (8000868 <main+0x1c8>)
 80007be:	f003 f963 	bl	8003a88 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	  HAL_Delay(100);
  #endif
  #if defined(CMM_HW)
	  HAL_Delay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c6:	f000 fef5 	bl	80015b4 <HAL_Delay>
	  MX_LWIP_Init();
 80007ca:	f004 fef5 	bl	80055b8 <MX_LWIP_Init>
	  HAL_Delay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	f000 feef 	bl	80015b4 <HAL_Delay>
	  ETH_PHY_IO_WriteReg(0, 0, 8448);
 80007d6:	f44f 5204 	mov.w	r2, #8448	@ 0x2100
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f005 fc19 	bl	8006014 <ETH_PHY_IO_WriteReg>
	  HAL_Delay(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e6:	f000 fee5 	bl	80015b4 <HAL_Delay>
  #endif
	  MX_LWIP_Process();
 80007ea:	f005 f949 	bl	8005a80 <MX_LWIP_Process>
  volatile uint32_t *iap_flag_address = (uint32_t *)IAP_FLAG_ADDRESS;
 80007ee:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007f2:	60fb      	str	r3, [r7, #12]
  if (*iap_flag_address == IAP_FLAG_VALUE) {
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <main+0x1cc>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d106      	bne.n	800080c <main+0x16c>
      *iap_flag_address = 0;  // Clear the flag to prevent repeated entry into IAP mode
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
      LWIP_PLATFORM_DIAG(("IAP flag detected. Staying in IAP mode.\n"));
 8000804:	481a      	ldr	r0, [pc, #104]	@ (8000870 <main+0x1d0>)
 8000806:	f010 fd47 	bl	8011298 <puts>
 800080a:	e004      	b.n	8000816 <main+0x176>
  } else {
      LWIP_PLATFORM_DIAG(("No IAP flag detected. Checking for application.\n"));
 800080c:	4819      	ldr	r0, [pc, #100]	@ (8000874 <main+0x1d4>)
 800080e:	f010 fd43 	bl	8011298 <puts>
      CheckAndJumpToApplication();  // Jump to application if valid
 8000812:	f000 fa03 	bl	8000c1c <CheckAndJumpToApplication>
  }
  HAL_Delay(50);
 8000816:	2032      	movs	r0, #50	@ 0x32
 8000818:	f000 fecc 	bl	80015b4 <HAL_Delay>
  printf("Starting TFTP\n");
 800081c:	4816      	ldr	r0, [pc, #88]	@ (8000878 <main+0x1d8>)
 800081e:	f010 fd3b 	bl	8011298 <puts>
  HAL_Delay(50);
 8000822:	2032      	movs	r0, #50	@ 0x32
 8000824:	f000 fec6 	bl	80015b4 <HAL_Delay>
  tftp_init(&my_tftp_ctx);
 8000828:	4814      	ldr	r0, [pc, #80]	@ (800087c <main+0x1dc>)
 800082a:	f00f fd2d 	bl	8010288 <tftp_init>
  HAL_Delay(50);
 800082e:	2032      	movs	r0, #50	@ 0x32
 8000830:	f000 fec0 	bl	80015b4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800083a:	480b      	ldr	r0, [pc, #44]	@ (8000868 <main+0x1c8>)
 800083c:	f003 f924 	bl	8003a88 <HAL_GPIO_WritePin>
	MX_LWIP_Process();
 8000840:	f005 f91e 	bl	8005a80 <MX_LWIP_Process>
	HAL_Delay(50);
 8000844:	2032      	movs	r0, #50	@ 0x32
 8000846:	f000 feb5 	bl	80015b4 <HAL_Delay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <main+0x1c8>)
 8000852:	f003 f919 	bl	8003a88 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000856:	2032      	movs	r0, #50	@ 0x32
 8000858:	f000 feac 	bl	80015b4 <HAL_Delay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800085c:	bf00      	nop
 800085e:	e7e9      	b.n	8000834 <main+0x194>
 8000860:	e000ed00 	.word	0xe000ed00
 8000864:	08012178 	.word	0x08012178
 8000868:	58020c00 	.word	0x58020c00
 800086c:	deadbeef 	.word	0xdeadbeef
 8000870:	08012188 	.word	0x08012188
 8000874:	080121b0 	.word	0x080121b0
 8000878:	080121e0 	.word	0x080121e0
 800087c:	24000008 	.word	0x24000008

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09e      	sub	sp, #120	@ 0x78
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088a:	224c      	movs	r2, #76	@ 0x4c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f010 fdf2 	bl	8011478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f010 fdeb 	bl	8011478 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f003 f90a 	bl	8003abc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <SystemClock_Config+0x150>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b0:	4a47      	ldr	r2, [pc, #284]	@ (80009d0 <SystemClock_Config+0x150>)
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008b8:	4b45      	ldr	r3, [pc, #276]	@ (80009d0 <SystemClock_Config+0x150>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b44      	ldr	r3, [pc, #272]	@ (80009d4 <SystemClock_Config+0x154>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a43      	ldr	r2, [pc, #268]	@ (80009d4 <SystemClock_Config+0x154>)
 80008c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b41      	ldr	r3, [pc, #260]	@ (80009d4 <SystemClock_Config+0x154>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008da:	bf00      	nop
 80008dc:	4b3d      	ldr	r3, [pc, #244]	@ (80009d4 <SystemClock_Config+0x154>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008e8:	d1f8      	bne.n	80008dc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <SystemClock_Config+0x158>)
 80008ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008f0:	4a39      	ldr	r2, [pc, #228]	@ (80009d8 <SystemClock_Config+0x158>)
 80008f2:	f043 0302 	orr.w	r3, r3, #2
 80008f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008fa:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <SystemClock_Config+0x158>)
 80008fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	4b31      	ldr	r3, [pc, #196]	@ (80009d4 <SystemClock_Config+0x154>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a30      	ldr	r2, [pc, #192]	@ (80009d4 <SystemClock_Config+0x154>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b2e      	ldr	r3, [pc, #184]	@ (80009d4 <SystemClock_Config+0x154>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <SystemClock_Config+0x150>)
 8000924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000926:	4a2a      	ldr	r2, [pc, #168]	@ (80009d0 <SystemClock_Config+0x150>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800092e:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <SystemClock_Config+0x150>)
 8000930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093a:	bf00      	nop
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <SystemClock_Config+0x154>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000948:	d1f8      	bne.n	800093c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094a:	2301      	movs	r3, #1
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000954:	2302      	movs	r3, #2
 8000956:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000958:	2302      	movs	r3, #2
 800095a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000968:	2302      	movs	r3, #2
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000970:	230c      	movs	r3, #12
 8000972:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000974:	2300      	movs	r3, #0
 8000976:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000980:	4618      	mov	r0, r3
 8000982:	f003 f8f5 	bl	8003b70 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800098c:	f000 f9cc 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	233f      	movs	r3, #63	@ 0x3f
 8000992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2303      	movs	r3, #3
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009a0:	2340      	movs	r3, #64	@ 0x40
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a4:	2340      	movs	r3, #64	@ 0x40
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2102      	movs	r1, #2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fd33 	bl	8004424 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80009c4:	f000 f9b0 	bl	8000d28 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3778      	adds	r7, #120	@ 0x78
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	58000400 	.word	0x58000400
 80009d4:	58024800 	.word	0x58024800
 80009d8:	58024400 	.word	0x58024400

080009dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 80009fc:	4a20      	ldr	r2, [pc, #128]	@ (8000a80 <MX_TIM1_Init+0xa4>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a02:	223b      	movs	r2, #59	@ 0x3b
 8000a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a26:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a28:	f004 f8b4 	bl	8004b94 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a32:	f000 f979 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a44:	f004 fa7e 	bl	8004f44 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a4e:	f000 f96b 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a64:	f004 fcd2 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a6e:	f000 f95b 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	240000fc 	.word	0x240000fc
 8000a80:	40010000 	.word	0x40010000

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	4a59      	ldr	r2, [pc, #356]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aaa:	4b57      	ldr	r3, [pc, #348]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b53      	ldr	r3, [pc, #332]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	4a52      	ldr	r2, [pc, #328]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a4a      	ldr	r2, [pc, #296]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b48      	ldr	r3, [pc, #288]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af4:	4b44      	ldr	r3, [pc, #272]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	4a43      	ldr	r2, [pc, #268]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b04:	4b40      	ldr	r3, [pc, #256]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b3d      	ldr	r3, [pc, #244]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a3b      	ldr	r2, [pc, #236]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b35      	ldr	r3, [pc, #212]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a34      	ldr	r2, [pc, #208]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TWS_DATA_Pin|MIIM_MDIO_Pin|MIIM_MDC_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8000b54:	482d      	ldr	r0, [pc, #180]	@ (8000c0c <MX_GPIO_Init+0x188>)
 8000b56:	f002 ff97 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TWS_CLK_GPIO_Port, TWS_CLK_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	482c      	ldr	r0, [pc, #176]	@ (8000c10 <MX_GPIO_Init+0x18c>)
 8000b60:	f002 ff92 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6a:	482a      	ldr	r0, [pc, #168]	@ (8000c14 <MX_GPIO_Init+0x190>)
 8000b6c:	f002 ff8c 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TWS_DATA_Pin MIIM_MDIO_Pin */
  GPIO_InitStruct.Pin = TWS_DATA_Pin|MIIM_MDIO_Pin;
 8000b70:	23a0      	movs	r3, #160	@ 0xa0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4821      	ldr	r0, [pc, #132]	@ (8000c0c <MX_GPIO_Init+0x188>)
 8000b88:	f002 fdb6 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIIM_MDC_Pin */
  GPIO_InitStruct.Pin = MIIM_MDC_Pin;
 8000b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b96:	2302      	movs	r3, #2
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MIIM_MDC_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <MX_GPIO_Init+0x188>)
 8000ba6:	f002 fda7 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_SEL_0_Pin IP_SEL_1_Pin IP_SEL_2_Pin IP_SEL_3_Pin
                           IP_SEL_4_Pin */
  GPIO_InitStruct.Pin = IP_SEL_0_Pin|IP_SEL_1_Pin|IP_SEL_2_Pin|IP_SEL_3_Pin
 8000baa:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000bae:	61fb      	str	r3, [r7, #28]
                          |IP_SEL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4816      	ldr	r0, [pc, #88]	@ (8000c18 <MX_GPIO_Init+0x194>)
 8000bc0:	f002 fd9a 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TWS_CLK_Pin */
  GPIO_InitStruct.Pin = TWS_CLK_Pin;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TWS_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_GPIO_Init+0x18c>)
 8000bdc:	f002 fd8c 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <MX_GPIO_Init+0x190>)
 8000bfa:	f002 fd7d 	bl	80036f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020400 	.word	0x58020400
 8000c10:	58020000 	.word	0x58020000
 8000c14:	58020c00 	.word	0x58020c00
 8000c18:	58021400 	.word	0x58021400

08000c1c <CheckAndJumpToApplication>:

/* USER CODE BEGIN 4 */
void CheckAndJumpToApplication(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
    /* Check if there's a valid application in the user Flash area */
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0xFF800000) == 0x24000000) // Check if the stack pointer is within AXI SRAM range
 8000c22:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <CheckAndJumpToApplication+0x3c>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8000c30:	d10e      	bne.n	8000c50 <CheckAndJumpToApplication+0x34>
    {
        /* If valid, set the jump address to the application's reset handler address */
        uint32_t JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <CheckAndJumpToApplication+0x40>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60fb      	str	r3, [r7, #12]
        pFunction JumpToApplication = (pFunction) JumpAddress;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	60bb      	str	r3, [r7, #8]

        /* Initialize the application's Stack Pointer */
        __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c3c:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f383 8808 	msr	MSP, r3
}
 8000c4a:	bf00      	nop

        /* Jump to the user application */
        JumpToApplication();
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4798      	blx	r3
    }
    /* If invalid, remain in bootloader mode (continue with IAP) */
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	ff800000 	.word	0xff800000
 8000c5c:	08100004 	.word	0x08100004

08000c60 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c72:	f000 fddf 	bl	8001834 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c82:	231f      	movs	r3, #31
 8000c84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c86:	2387      	movs	r3, #135	@ 0x87
 8000c88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fdfd 	bl	80018a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MPU_Config+0x9c>)
 8000cb0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fdeb 	bl	80018a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <MPU_Config+0xa0>)
 8000cd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fddb 	bl	80018a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f000 fdb8 	bl	8001864 <HAL_MPU_Enable>

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	30020000 	.word	0x30020000
 8000d00:	30040000 	.word	0x30040000

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 fc2d 	bl	8001574 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_MspInit+0x30>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d40:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x30>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x30>)
 8000d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	58024400 	.word	0x58024400

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10e      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_TIM_Base_MspInit+0x40>)
 8000d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d80:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <HAL_TIM_Base_MspInit+0x40>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_TIM_Base_MspInit+0x40>)
 8000d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40010000 	.word	0x40010000
 8000da8:	58024400 	.word	0x58024400

08000dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	@ 0x40
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	d827      	bhi.n	8000e0a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	2036      	movs	r0, #54	@ 0x36
 8000dc0:	f000 fd0b 	bl	80017da <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc4:	2036      	movs	r0, #54	@ 0x36
 8000dc6:	f000 fd22 	bl	800180e <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000dca:	4a29      	ldr	r2, [pc, #164]	@ (8000e70 <HAL_InitTick+0xc4>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <HAL_InitTick+0xc8>)
 8000dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dd6:	4a27      	ldr	r2, [pc, #156]	@ (8000e74 <HAL_InitTick+0xc8>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <HAL_InitTick+0xc8>)
 8000de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dee:	f107 0210 	add.w	r2, r7, #16
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fe89 	bl	8004b10 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d106      	bne.n	8000e16 <HAL_InitTick+0x6a>
 8000e08:	e001      	b.n	8000e0e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e02b      	b.n	8000e66 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e0e:	f003 fe69 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8000e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e14:	e004      	b.n	8000e20 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e16:	f003 fe65 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e22:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <HAL_InitTick+0xcc>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	0c9b      	lsrs	r3, r3, #18
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e30:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <HAL_InitTick+0xd4>)
 8000e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e50:	f003 fea0 	bl	8004b94 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d104      	bne.n	8000e64 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e5a:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <HAL_InitTick+0xd0>)
 8000e5c:	f003 fef2 	bl	8004c44 <HAL_TIM_Base_Start_IT>
 8000e60:	4603      	mov	r3, r0
 8000e62:	e000      	b.n	8000e66 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3740      	adds	r7, #64	@ 0x40
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2400001c 	.word	0x2400001c
 8000e74:	58024400 	.word	0x58024400
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	2400014c 	.word	0x2400014c
 8000e80:	40001000 	.word	0x40001000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8000ea8:	f000 fcbf 	bl	800182a <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x8>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM6_DAC_IRQHandler+0x10>)
 8000eee:	f003 ff21 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2400014c 	.word	0x2400014c

08000efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_kill>:

int _kill(int pid, int sig)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <_kill+0x20>)
 8000f18:	2216      	movs	r2, #22
 8000f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	2401c828 	.word	0x2401c828

08000f30 <_exit>:

void _exit (int status)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffe5 	bl	8000f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f42:	bf00      	nop
 8000f44:	e7fd      	b.n	8000f42 <_exit+0x12>

08000f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e00a      	b.n	8000f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f58:	f3af 8000 	nop.w
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60ba      	str	r2, [r7, #8]
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf0      	blt.n	8000f58 <_read+0x12>
  }

  return len;
 8000f76:	687b      	ldr	r3, [r7, #4]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_isatty>:

int _isatty(int file)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d205      	bcs.n	8001024 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <_sbrk+0x6c>)
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a06      	ldr	r2, [pc, #24]	@ (800104c <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	24080000 	.word	0x24080000
 8001048:	00020000 	.word	0x00020000
 800104c:	24000198 	.word	0x24000198
 8001050:	2401c838 	.word	0x2401c838
 8001054:	2401c828 	.word	0x2401c828

08001058 <tftp_open>:
  * @param  mode: Mode for the operation (e.g., "octet" for binary).
  * @param  write: Flag indicating if the operation is a write (1) or read (0).
  * @retval void*: A handle to the opened file or memory region.
  *         NULL: If an error occurred during Flash initialization or erasure.
  */
void* tftp_open(const char* fname, const char* mode, u8_t write) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	4613      	mov	r3, r2
 8001064:	71fb      	strb	r3, [r7, #7]
    uint32_t start_address = APPLICATION_ADDRESS; // Define this based on where your application starts in flash
 8001066:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 800106a:	617b      	str	r3, [r7, #20]
    printf("TFTP open: filename=%s, mode=%s, write=%d\n", fname, mode, write);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <tftp_open+0x58>)
 8001074:	f010 f8a8 	bl	80111c8 <iprintf>

    if (write) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00f      	beq.n	800109e <tftp_open+0x46>
        printf("Initializing Flash for write operation.\n");
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <tftp_open+0x5c>)
 8001080:	f010 f90a 	bl	8011298 <puts>
        // Unlock the Flash memory to allow writing
        FLASH_If_Init();
 8001084:	f7ff fa1e 	bl	80004c4 <FLASH_If_Init>
        // Erase the Flash memory before writing new data
        if (FLASH_If_Erase(start_address) != 0) {
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff fa2b 	bl	80004e4 <FLASH_If_Erase>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <tftp_open+0x46>
            printf("Error: Flash erase failed.\n");
 8001094:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <tftp_open+0x60>)
 8001096:	f010 f8ff 	bl	8011298 <puts>
            return NULL; // Return NULL to indicate failure
 800109a:	2300      	movs	r3, #0
 800109c:	e004      	b.n	80010a8 <tftp_open+0x50>
        }
    }
    printf("Returning start address: 0x%08X\n", start_address);
 800109e:	6979      	ldr	r1, [r7, #20]
 80010a0:	4806      	ldr	r0, [pc, #24]	@ (80010bc <tftp_open+0x64>)
 80010a2:	f010 f891 	bl	80111c8 <iprintf>
    return (void*)start_address; // Return the address as the handle for subsequent operations
 80010a6:	697b      	ldr	r3, [r7, #20]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	08012210 	.word	0x08012210
 80010b4:	0801223c 	.word	0x0801223c
 80010b8:	08012264 	.word	0x08012264
 80010bc:	08012280 	.word	0x08012280

080010c0 <tftp_close>:
  * @brief  This function closes the file or memory region.
  *         This is called when the TFTP client closes the file.
  * @param  handle: Handle to the file or memory region being closed.
  * @retval None
  */
void tftp_close(void* handle) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    printf("TFTP close: handle=0x%08X\n", (uint32_t)handle);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <tftp_close+0x20>)
 80010ce:	f010 f87b 	bl	80111c8 <iprintf>
    // No specific operation is required here, but the handle is logged
    // Uncomment this line to jump to the application after TFTP transfer
    CheckAndJumpToApplication();
 80010d2:	f7ff fda3 	bl	8000c1c <CheckAndJumpToApplication>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	080122a4 	.word	0x080122a4

080010e4 <tftp_read>:
  * @param  handle: Handle to the memory region being read.
  * @param  buf: Pointer to the buffer where the data will be stored.
  * @param  bytes: Number of bytes to read from the memory region.
  * @retval int: Number of bytes successfully read and copied to the buffer.
  */
int tftp_read(void* handle, void* buf, int bytes) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
    printf("TFTP read: handle=0x%08X, bytes=%d\n", (uint32_t)handle, bytes);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4809      	ldr	r0, [pc, #36]	@ (800111c <tftp_read+0x38>)
 80010f8:	f010 f866 	bl	80111c8 <iprintf>
    // Copy the requested number of bytes from the Flash memory to the buffer
    memcpy(buf, handle, bytes);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	461a      	mov	r2, r3
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f010 fa2d 	bl	8011562 <memcpy>
    printf("TFTP read complete: copied %d bytes.\n", bytes);
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <tftp_read+0x3c>)
 800110c:	f010 f85c 	bl	80111c8 <iprintf>
    return bytes; // Return the number of bytes read
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	080122c0 	.word	0x080122c0
 8001120:	080122e4 	.word	0x080122e4

08001124 <tftp_write>:
  * @param  handle: Handle to the memory region being written to.
  * @param  p: Pointer to the data buffer containing the data to be written.
  * @retval int: Number of bytes successfully written to Flash memory.
  *         -1: If an error occurred during the write operation.
  */
int tftp_write(void* handle, struct pbuf* p) {
 8001124:	b580      	push	{r7, lr}
 8001126:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800112a:	af00      	add	r7, sp, #0
 800112c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001130:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001134:	6018      	str	r0, [r3, #0]
 8001136:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800113a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800113e:	6019      	str	r1, [r3, #0]
    // Static variable to retain the last written address across function calls
    static uint32_t flash_address = APPLICATION_ADDRESS;
    uint32_t aligned_payload[128];

    printf("TFTP write: flash_address=0x%08X, p->tot_len=%d, p->len=%d\n", flash_address, p->tot_len, p->len);
 8001140:	4b50      	ldr	r3, [pc, #320]	@ (8001284 <tftp_write+0x160>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001148:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	891b      	ldrh	r3, [r3, #8]
 8001150:	461a      	mov	r2, r3
 8001152:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001156:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	895b      	ldrh	r3, [r3, #10]
 800115e:	484a      	ldr	r0, [pc, #296]	@ (8001288 <tftp_write+0x164>)
 8001160:	f010 f832 	bl	80111c8 <iprintf>

    // Check alignment of the payload pointer
    if ((uint32_t)p->payload % 4 != 0) {
 8001164:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001168:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01c      	beq.n	80011b2 <tftp_write+0x8e>
        printf("Aligning payload to 4-byte boundary...\n");
 8001178:	4844      	ldr	r0, [pc, #272]	@ (800128c <tftp_write+0x168>)
 800117a:	f010 f88d 	bl	8011298 <puts>
        memcpy(aligned_payload, p->payload, p->len);
 800117e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001182:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800118e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	895b      	ldrh	r3, [r3, #10]
 8001196:	461a      	mov	r2, r3
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4618      	mov	r0, r3
 800119e:	f010 f9e0 	bl	8011562 <memcpy>
        p->payload = aligned_payload;
 80011a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011a6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f107 020c 	add.w	r2, r7, #12
 80011b0:	605a      	str	r2, [r3, #4]
    }

    printf("Writing to flash, payload=0x%08X, len=%d\n", (uint32_t)p->payload, p->len);
 80011b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011b6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4619      	mov	r1, r3
 80011c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	895b      	ldrh	r3, [r3, #10]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4830      	ldr	r0, [pc, #192]	@ (8001290 <tftp_write+0x16c>)
 80011d0:	f00f fffa 	bl	80111c8 <iprintf>

    // Calculate the number of words (32-bit) to write
    uint16_t word_count = p->len / 4;
 80011d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	895b      	ldrh	r3, [r3, #10]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212

    // Write to Flash in chunks
    uint32_t result = FLASH_If_Write(&flash_address, (uint32_t*)p->payload, word_count);
 80011e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80011ea:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f8b7 2212 	ldrh.w	r2, [r7, #530]	@ 0x212
 80011f6:	4619      	mov	r1, r3
 80011f8:	4822      	ldr	r0, [pc, #136]	@ (8001284 <tftp_write+0x160>)
 80011fa:	f7ff f9b5 	bl	8000568 <FLASH_If_Write>
 80011fe:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
    if (result != HAL_OK) {
 8001202:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <tftp_write+0xf6>
        printf("Error occurred during flash write. Error code: %u\n", result);
 800120a:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 800120e:	4821      	ldr	r0, [pc, #132]	@ (8001294 <tftp_write+0x170>)
 8001210:	f00f ffda 	bl	80111c8 <iprintf>
        return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	e02f      	b.n	800127a <tftp_write+0x156>
    }

    // Verify and print each written word
    for (int i = 0; i < word_count; i++) {
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001220:	e01f      	b.n	8001262 <tftp_write+0x13e>
        printf("Payload[%d] (Address: %p): 0x%08X\n", i, &((uint32_t*)p->payload)[i], ((uint32_t*)p->payload)[i]);
 8001222:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001226:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	18d1      	adds	r1, r2, r3
 8001236:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800123a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	460a      	mov	r2, r1
 800124e:	f8d7 1214 	ldr.w	r1, [r7, #532]	@ 0x214
 8001252:	4811      	ldr	r0, [pc, #68]	@ (8001298 <tftp_write+0x174>)
 8001254:	f00f ffb8 	bl	80111c8 <iprintf>
    for (int i = 0; i < word_count; i++) {
 8001258:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800125c:	3301      	adds	r3, #1
 800125e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001262:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8001266:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800126a:	429a      	cmp	r2, r3
 800126c:	dbd9      	blt.n	8001222 <tftp_write+0xfe>
    }

    return p->len; // Return the number of bytes written
 800126e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001272:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	895b      	ldrh	r3, [r3, #10]
}
 800127a:	4618      	mov	r0, r3
 800127c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24000018 	.word	0x24000018
 8001288:	0801230c 	.word	0x0801230c
 800128c:	08012348 	.word	0x08012348
 8001290:	08012370 	.word	0x08012370
 8001294:	0801239c 	.word	0x0801239c
 8001298:	080123d0 	.word	0x080123d0

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a0:	f7ff f876 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	@ (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	@ (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f010 f923 	bl	8011514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f9e7 	bl	80006a0 <main>
  bx  lr
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012dc:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 80012e0:	080156dc 	.word	0x080156dc
  ldr r2, =_sbss
 80012e4:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 80012e8:	2401c838 	.word	0x2401c838

080012ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC3_IRQHandler>

080012ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <LAN8742_RegisterBusIO+0x28>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <LAN8742_RegisterBusIO+0x28>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <LAN8742_RegisterBusIO+0x28>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e014      	b.n	8001346 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d139      	bne.n	80013e2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2220      	movs	r2, #32
 8001380:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e01c      	b.n	80013c2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	2112      	movs	r1, #18
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	4798      	blx	r3
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	da03      	bge.n	80013a4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800139c:	f06f 0304 	mvn.w	r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80013a2:	e00b      	b.n	80013bc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d105      	bne.n	80013bc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
         break;
 80013ba:	e005      	b.n	80013c8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b1f      	cmp	r3, #31
 80013c6:	d9df      	bls.n	8001388 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b1f      	cmp	r3, #31
 80013ce:	d902      	bls.n	80013d6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013d0:	f06f 0302 	mvn.w	r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80013e2:	693b      	ldr	r3, [r7, #16]
 }
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6810      	ldr	r0, [r2, #0]
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	2101      	movs	r1, #1
 8001406:	4798      	blx	r3
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	da02      	bge.n	8001414 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800140e:	f06f 0304 	mvn.w	r3, #4
 8001412:	e06e      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6810      	ldr	r0, [r2, #0]
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	2101      	movs	r1, #1
 8001422:	4798      	blx	r3
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	da02      	bge.n	8001430 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800142a:	f06f 0304 	mvn.w	r3, #4
 800142e:	e060      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800143a:	2301      	movs	r3, #1
 800143c:	e059      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6810      	ldr	r0, [r2, #0]
 8001446:	f107 020c 	add.w	r2, r7, #12
 800144a:	2100      	movs	r1, #0
 800144c:	4798      	blx	r3
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	da02      	bge.n	800145a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001454:	f06f 0304 	mvn.w	r3, #4
 8001458:	e04b      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d11b      	bne.n	800149c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <LAN8742_GetLinkState+0x90>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001478:	2302      	movs	r3, #2
 800147a:	e03a      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001486:	2303      	movs	r3, #3
 8001488:	e033      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001494:	2304      	movs	r3, #4
 8001496:	e02c      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001498:	2305      	movs	r3, #5
 800149a:	e02a      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6810      	ldr	r0, [r2, #0]
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	211f      	movs	r1, #31
 80014aa:	4798      	blx	r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da02      	bge.n	80014b8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014b2:	f06f 0304 	mvn.w	r3, #4
 80014b6:	e01c      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014c2:	2306      	movs	r3, #6
 80014c4:	e015      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 031c 	and.w	r3, r3, #28
 80014cc:	2b18      	cmp	r3, #24
 80014ce:	d101      	bne.n	80014d4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014d0:	2302      	movs	r3, #2
 80014d2:	e00e      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 031c 	and.w	r3, r3, #28
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d101      	bne.n	80014e2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014de:	2303      	movs	r3, #3
 80014e0:	e007      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 031c 	and.w	r3, r3, #28
 80014e8:	2b14      	cmp	r3, #20
 80014ea:	d101      	bne.n	80014f0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014ec:	2304      	movs	r3, #4
 80014ee:	e000      	b.n	80014f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014f0:	2305      	movs	r3, #5
    }
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
 8001504:	f000 f95e 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001508:	f003 f942 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_Init+0x68>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4913      	ldr	r1, [pc, #76]	@ (8001568 <HAL_Init+0x6c>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <HAL_Init+0x68>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0e      	ldr	r2, [pc, #56]	@ (8001568 <HAL_Init+0x6c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <HAL_Init+0x70>)
 800153e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_Init+0x74>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001546:	200f      	movs	r0, #15
 8001548:	f7ff fc30 	bl	8000dac <HAL_InitTick>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e002      	b.n	800155c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001556:	f7ff fbed 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	58024400 	.word	0x58024400
 8001568:	080154dc 	.word	0x080154dc
 800156c:	24000004 	.word	0x24000004
 8001570:	24000000 	.word	0x24000000

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	24000020 	.word	0x24000020
 8001598:	2400019c 	.word	0x2400019c

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2400019c 	.word	0x2400019c

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000020 	.word	0x24000020

080015fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetREVID+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0c1b      	lsrs	r3, r3, #16
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	5c001000 	.word	0x5c001000

08001614 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001624:	4904      	ldr	r1, [pc, #16]	@ (8001638 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	58000400 	.word	0x58000400

0800163c <__NVIC_SetPriorityGrouping>:
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	4313      	orrs	r3, r2
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	@ (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	05fa0000 	.word	0x05fa0000

08001684 <__NVIC_GetPriorityGrouping>:
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	@ (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	@ (800172c <__NVIC_SetPriority+0x50>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	@ 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <__NVIC_SystemReset>:
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800179c:	f3bf 8f4f 	dsb	sy
}
 80017a0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <__NVIC_SystemReset+0x24>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80017aa:	4904      	ldr	r1, [pc, #16]	@ (80017bc <__NVIC_SystemReset+0x24>)
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_SystemReset+0x28>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80017b2:	f3bf 8f4f 	dsb	sy
}
 80017b6:	bf00      	nop
    __NOP();
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <__NVIC_SystemReset+0x20>
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	05fa0004 	.word	0x05fa0004

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff35 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff9c 	bl	8001730 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff6b 	bl	80016dc <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff3f 	bl	80016a0 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800182e:	f7ff ffb3 	bl	8001798 <__NVIC_SystemReset>
	...

08001834 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001838:	f3bf 8f5f 	dmb	sy
}
 800183c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_MPU_Disable+0x28>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	4a06      	ldr	r2, [pc, #24]	@ (800185c <HAL_MPU_Disable+0x28>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001848:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800184a:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_MPU_Disable+0x2c>)
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00
 8001860:	e000ed90 	.word	0xe000ed90

08001864 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800186c:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_MPU_Enable+0x38>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_MPU_Enable+0x3c>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <HAL_MPU_Enable+0x3c>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001880:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001882:	f3bf 8f4f 	dsb	sy
}
 8001886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001888:	f3bf 8f6f 	isb	sy
}
 800188c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed90 	.word	0xe000ed90
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	785a      	ldrb	r2, [r3, #1]
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_MPU_ConfigRegion+0x7c>)
 80018b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <HAL_MPU_ConfigRegion+0x7c>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <HAL_MPU_ConfigRegion+0x7c>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80018c0:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_MPU_ConfigRegion+0x7c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7b1b      	ldrb	r3, [r3, #12]
 80018cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7adb      	ldrb	r3, [r3, #11]
 80018d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7a9b      	ldrb	r3, [r3, #10]
 80018da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7b5b      	ldrb	r3, [r3, #13]
 80018e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7b9b      	ldrb	r3, [r3, #14]
 80018ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7bdb      	ldrb	r3, [r3, #15]
 80018f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7a5b      	ldrb	r3, [r3, #9]
 80018fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7a1b      	ldrb	r3, [r3, #8]
 8001902:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001904:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800190e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001910:	6113      	str	r3, [r2, #16]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed90 	.word	0xe000ed90

08001924 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0e3      	b.n	8001afe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2223      	movs	r2, #35	@ 0x23
 8001944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f004 fa8b 	bl	8005e64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b08 <HAL_ETH_Init+0x1e4>)
 8001950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001954:	4a6c      	ldr	r2, [pc, #432]	@ (8001b08 <HAL_ETH_Init+0x1e4>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_ETH_Init+0x1e4>)
 8001960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7a1b      	ldrb	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fe4d 	bl	8001614 <HAL_SYSCFG_ETHInterfaceSelect>
 800197a:	e003      	b.n	8001984 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800197c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001980:	f7ff fe48 	bl	8001614 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001984:	4b61      	ldr	r3, [pc, #388]	@ (8001b0c <HAL_ETH_Init+0x1e8>)
 8001986:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800199e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a0:	f7ff fdfc 	bl	800159c <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019a6:	e011      	b.n	80019cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019a8:	f7ff fdf8 	bl	800159c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019b6:	d909      	bls.n	80019cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	22e0      	movs	r2, #224	@ 0xe0
 80019c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e098      	b.n	8001afe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e4      	bne.n	80019a8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fdb4 	bl	800254c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80019e4:	f003 f84e 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a49      	ldr	r2, [pc, #292]	@ (8001b10 <HAL_ETH_Init+0x1ec>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9a      	lsrs	r2, r3, #18
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3a01      	subs	r2, #1
 80019f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 ff97 	bl	8002930 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001a0e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a1e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	22e0      	movs	r2, #224	@ 0xe0
 8001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e05d      	b.n	8001afe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a4e:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <HAL_ETH_Init+0x1f0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6952      	ldr	r2, [r2, #20]
 8001a56:	0051      	lsls	r1, r2, #1
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a62:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 ffff 	bl	8002a6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 f845 	bl	8002afc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	3305      	adds	r3, #5
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021a      	lsls	r2, r3, #8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ab0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001abe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ac0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_ETH_Init+0x1f4>)
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_ETH_Init+0x1f8>)
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2210      	movs	r2, #16
 8001af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58000400 	.word	0x58000400
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	ffff8001 	.word	0xffff8001
 8001b18:	0c020060 	.word	0x0c020060
 8001b1c:	0c20c000 	.word	0x0c20c000

08001b20 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d153      	bne.n	8001bda <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2223      	movs	r2, #35	@ 0x23
 8001b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f9f3 	bl	8001f2c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0202 	orr.w	r2, r2, #2
 8001b54:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b82:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b92:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bba:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001bc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bca:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2223      	movs	r2, #35	@ 0x23
 8001bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
  }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bf2:	2b23      	cmp	r3, #35	@ 0x23
 8001bf4:	d13f      	bne.n	8001c76 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2223      	movs	r2, #35	@ 0x23
 8001bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c16:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c32:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0202 	bic.w	r2, r2, #2
 8001c68:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cb0:	2b23      	cmp	r3, #35	@ 0x23
 8001cb2:	d179      	bne.n	8001da8 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 ff7d 	bl	8002bb8 <ETH_Prepare_Tx_Descriptors>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e068      	b.n	8001daa <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3206      	adds	r2, #6
 8001ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cea:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d904      	bls.n	8001d08 <HAL_ETH_Transmit+0x84>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	1f1a      	subs	r2, r3, #4
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3106      	adds	r1, #6
 8001d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d1c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8001d20:	f7ff fc3c 	bl	800159c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d26:	e039      	b.n	8001d9c <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d30:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d012      	beq.n	8001d62 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	f043 0208 	orr.w	r2, r3, #8
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d54:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e023      	b.n	8001daa <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d018      	beq.n	8001d9c <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff fc17 	bl	800159c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <HAL_ETH_Transmit+0xfc>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10d      	bne.n	8001d9c <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d86:	f043 0204 	orr.w	r2, r3, #4
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001d96:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e006      	b.n	8001daa <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	dbc1      	blt.n	8001d28 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e000      	b.n	8001daa <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b088      	sub	sp, #32
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0a2      	b.n	8001f24 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001de4:	2b23      	cmp	r3, #35	@ 0x23
 8001de6:	d001      	beq.n	8001dec <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e09b      	b.n	8001f24 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	3212      	adds	r2, #18
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e02:	f1c3 0304 	rsb	r3, r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e08:	e064      	b.n	8001ed4 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_ETH_ReadData+0x88>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03a      	beq.n	8001eb0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f004 f99e 	bl	80061d0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d902      	bls.n	8001ec2 <HAL_ETH_ReadData+0x110>
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	3212      	adds	r2, #18
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db06      	blt.n	8001eea <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d202      	bcs.n	8001eea <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d08f      	beq.n	8001e0a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f814 	bl	8001f2c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f40:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	3212      	adds	r2, #18
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f52:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001f54:	e038      	b.n	8001fc8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d112      	bne.n	8001f84 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f904 	bl	8006170 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	74fb      	strb	r3, [r7, #19]
 8001f72:	e007      	b.n	8001f84 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	461a      	mov	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01e      	beq.n	8001fc8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	e003      	b.n	8001fa4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d902      	bls.n	8001fb6 <ETH_UpdateDescriptor+0x8a>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	3212      	adds	r2, #18
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <ETH_UpdateDescriptor+0xa8>
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1c0      	bne.n	8001f56 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d01b      	beq.n	8002016 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001fe8:	f3bf 8f5f 	dmb	sy
}
 8001fec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	18ca      	adds	r2, r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002016:	bf00      	nop
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e03e      	b.n	80020be <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002048:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f043 030c 	orr.w	r3, r3, #12
 800206c:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002080:	f7ff fa8c 	bl	800159c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002086:	e009      	b.n	800209c <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002088:	f7ff fa88 	bl	800159c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002096:	d901      	bls.n	800209c <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e010      	b.n	80020be <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ed      	bne.n	8002088 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e03c      	b.n	8002164 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020f2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	055b      	lsls	r3, r3, #21
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 030c 	bic.w	r3, r3, #12
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_ETH_WritePHYRegister+0xa4>)
 800212a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800212e:	4a0f      	ldr	r2, [pc, #60]	@ (800216c <HAL_ETH_WritePHYRegister+0xa4>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002136:	f7ff fa31 	bl	800159c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800213c:	e009      	b.n	8002152 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800213e:	f7ff fa2d 	bl	800159c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800214c:	d901      	bls.n	8002152 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e008      	b.n	8002164 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ed      	bne.n	800213e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40028000 	.word	0x40028000

08002170 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e1c3      	b.n	800250c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 020c 	and.w	r2, r3, #12
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf14      	ite	ne
 80021e6:	2301      	movne	r3, #1
 80021e8:	2300      	moveq	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80022fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	0e5b      	lsrs	r3, r3, #25
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf0c      	ite	eq
 800242a:	2301      	moveq	r3, #1
 800242c:	2300      	movne	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	b29a      	uxth	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002498:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024a8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80024f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e00b      	b.n	8002544 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002532:	2b10      	cmp	r3, #16
 8002534:	d105      	bne.n	8002542 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f857 	bl	80025ec <ETH_SetMACConfig>

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800255c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002564:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002566:	f002 fa8d 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 800256a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d804      	bhi.n	800257e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e022      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <HAL_ETH_SetMDIOClockRange+0x90>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d204      	bcs.n	8002590 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e019      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d915      	bls.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d804      	bhi.n	80025aa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e00c      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	@ (80025e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d804      	bhi.n	80025bc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e003      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80025c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	02160ebf 	.word	0x02160ebf
 80025dc:	03938700 	.word	0x03938700
 80025e0:	05f5e0ff 	.word	0x05f5e0ff
 80025e4:	08f0d17f 	.word	0x08f0d17f
 80025e8:	0ee6b27f 	.word	0x0ee6b27f

080025ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80025fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7b1b      	ldrb	r3, [r3, #12]
 800260c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800260e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7b5b      	ldrb	r3, [r3, #13]
 8002614:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7b9b      	ldrb	r3, [r3, #14]
 800261c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800261e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	7bdb      	ldrb	r3, [r3, #15]
 8002624:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002626:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	7c12      	ldrb	r2, [r2, #16]
 800262c:	2a00      	cmp	r2, #0
 800262e:	d102      	bne.n	8002636 <ETH_SetMACConfig+0x4a>
 8002630:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002634:	e000      	b.n	8002638 <ETH_SetMACConfig+0x4c>
 8002636:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002638:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	7c52      	ldrb	r2, [r2, #17]
 800263e:	2a00      	cmp	r2, #0
 8002640:	d102      	bne.n	8002648 <ETH_SetMACConfig+0x5c>
 8002642:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002646:	e000      	b.n	800264a <ETH_SetMACConfig+0x5e>
 8002648:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800264a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	7c9b      	ldrb	r3, [r3, #18]
 8002650:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002652:	431a      	orrs	r2, r3
               macconf->Speed |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002658:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800265e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	7f1b      	ldrb	r3, [r3, #28]
 8002664:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	7f5b      	ldrb	r3, [r3, #29]
 800266c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800266e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	7f92      	ldrb	r2, [r2, #30]
 8002674:	2a00      	cmp	r2, #0
 8002676:	d102      	bne.n	800267e <ETH_SetMACConfig+0x92>
 8002678:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800267c:	e000      	b.n	8002680 <ETH_SetMACConfig+0x94>
 800267e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002680:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	7fdb      	ldrb	r3, [r3, #31]
 8002686:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002688:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002690:	2a00      	cmp	r2, #0
 8002692:	d102      	bne.n	800269a <ETH_SetMACConfig+0xae>
 8002694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002698:	e000      	b.n	800269c <ETH_SetMACConfig+0xb0>
 800269a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800269c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80026ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b56      	ldr	r3, [pc, #344]	@ (8002818 <ETH_SetMACConfig+0x22c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80026ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d102      	bne.n	80026fe <ETH_SetMACConfig+0x112>
 80026f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026fc:	e000      	b.n	8002700 <ETH_SetMACConfig+0x114>
 80026fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002700:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4b42      	ldr	r3, [pc, #264]	@ (800281c <ETH_SetMACConfig+0x230>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	430b      	orrs	r3, r1
 800271c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002724:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <ETH_SetMACConfig+0x234>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	430b      	orrs	r3, r1
 8002740:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002748:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800274e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002756:	2a00      	cmp	r2, #0
 8002758:	d101      	bne.n	800275e <ETH_SetMACConfig+0x172>
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0x174>
 800275e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002760:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002766:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002772:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	430b      	orrs	r3, r1
 8002780:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002788:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002790:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	f023 0103 	bic.w	r1, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80027b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	d101      	bne.n	80027da <ETH_SetMACConfig+0x1ee>
 80027d6:	2240      	movs	r2, #64	@ 0x40
 80027d8:	e000      	b.n	80027dc <ETH_SetMACConfig+0x1f0>
 80027da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80027dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80027e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80027ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80027fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	430a      	orrs	r2, r1
 8002808:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	00048083 	.word	0x00048083
 800281c:	c0f88000 	.word	0xc0f88000
 8002820:	fffffef0 	.word	0xfffffef0

08002824 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b38      	ldr	r3, [pc, #224]	@ (800291c <ETH_SetDMAConfig+0xf8>)
 800283a:	4013      	ands	r3, r2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	6811      	ldr	r1, [r2, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800284a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	791b      	ldrb	r3, [r3, #4]
 8002850:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002856:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	7b1b      	ldrb	r3, [r3, #12]
 800285c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <ETH_SetDMAConfig+0xfc>)
 800286e:	4013      	ands	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	430b      	orrs	r3, r1
 8002878:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800287c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7b5b      	ldrb	r3, [r3, #13]
 8002882:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002894:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002898:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <ETH_SetDMAConfig+0x100>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	430b      	orrs	r3, r1
 80028a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	7d1b      	ldrb	r3, [r3, #20]
 80028b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	7f5b      	ldrb	r3, [r3, #29]
 80028bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80028ce:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <ETH_SetDMAConfig+0x104>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	430b      	orrs	r3, r1
 80028da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	7f1b      	ldrb	r3, [r3, #28]
 80028e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <ETH_SetDMAConfig+0x108>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	430b      	orrs	r3, r1
 8002908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800290c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	ffff87fd 	.word	0xffff87fd
 8002920:	ffff2ffe 	.word	0xffff2ffe
 8002924:	fffec000 	.word	0xfffec000
 8002928:	ffc0efef 	.word	0xffc0efef
 800292c:	7fc0ffff 	.word	0x7fc0ffff

08002930 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0a4      	sub	sp, #144	@ 0x90
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800293e:	2300      	movs	r3, #0
 8002940:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800296c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002970:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002978:	2300      	movs	r3, #0
 800297a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002988:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800298c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029aa:	2300      	movs	r3, #0
 80029ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029b2:	2300      	movs	r3, #0
 80029b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029c8:	2320      	movs	r3, #32
 80029ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fde6 	bl	80025ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a24:	2301      	movs	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fee1 	bl	8002824 <ETH_SetDMAConfig>
}
 8002a62:	bf00      	nop
 8002a64:	3790      	adds	r7, #144	@ 0x90
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e01d      	b.n	8002ab4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	3206      	adds	r2, #6
 8002aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d9de      	bls.n	8002a78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2303      	movs	r3, #3
 8002acc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002adc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e023      	b.n	8002b52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	3212      	adds	r2, #18
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d9d8      	bls.n	8002b0a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2303      	movs	r3, #3
 8002b82:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b92:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b091      	sub	sp, #68	@ 0x44
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bfa:	d007      	beq.n	8002c0c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c00:	3304      	adds	r3, #4
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e266      	b.n	80030de <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d044      	beq.n	8002ca6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4b75      	ldr	r3, [pc, #468]	@ (8002df8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c48:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d027      	beq.n	8002ca6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	431a      	orrs	r2, r3
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c94:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	4b51      	ldr	r3, [pc, #324]	@ (8002dfc <ETH_Prepare_Tx_Descriptors+0x244>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	6992      	ldr	r2, [r2, #24]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d036      	beq.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf4:	f3bf 8f5f 	dmb	sy
}
 8002cf8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d04:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d08:	3301      	adds	r3, #1
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d902      	bls.n	8002d18 <ETH_Prepare_Tx_Descriptors+0x160>
 8002d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d14:	3b04      	subs	r3, #4
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d24:	3301      	adds	r3, #1
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d34:	d10f      	bne.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002d40:	f3bf 8f5f 	dmb	sy
}
 8002d44:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	e1c3      	b.n	80030de <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d58:	3301      	adds	r3, #1
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d64:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <ETH_Prepare_Tx_Descriptors+0x244>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9a:	6852      	ldr	r2, [r2, #4]
 8002d9c:	0412      	lsls	r2, r2, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e008      	b.n	8002db8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	2200      	movs	r2, #0
 8002daa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d021      	beq.n	8002e08 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	04db      	lsls	r3, r3, #19
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	69d2      	ldr	r2, [r2, #28]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	e02e      	b.n	8002e56 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002df8:	ffff0000 	.word	0xffff0000
 8002dfc:	ffffc000 	.word	0xffffc000
 8002e00:	c000ffff 	.word	0xc000ffff
 8002e04:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002ffc <ETH_Prepare_Tx_Descriptors+0x444>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e36:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e8c:	f3bf 8f5f 	dmb	sy
}
 8002e90:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80da 	beq.w	8003060 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ebe:	e0cf      	b.n	8003060 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eca:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ece:	3301      	adds	r3, #1
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d902      	bls.n	8002ede <ETH_Prepare_Tx_Descriptors+0x326>
 8002ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eda:	3b04      	subs	r3, #4
 8002edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f00:	d007      	beq.n	8002f12 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f06:	3304      	adds	r3, #4
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d029      	beq.n	8002f66 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f24:	e019      	b.n	8002f5a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f26:	f3bf 8f5f 	dmb	sy
}
 8002f2a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f36:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d902      	bls.n	8002f4a <ETH_Prepare_Tx_Descriptors+0x392>
 8002f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f46:	3b04      	subs	r3, #4
 8002f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f52:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f56:	3301      	adds	r3, #1
 8002f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3e1      	bcc.n	8002f26 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0bb      	b.n	80030de <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	3301      	adds	r3, #1
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f86:	6852      	ldr	r2, [r2, #4]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb0:	6852      	ldr	r2, [r2, #4]
 8002fb2:	0412      	lsls	r2, r2, #16
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	e008      	b.n	8002fce <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fcc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	69d2      	ldr	r2, [r2, #28]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fea:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	e020      	b.n	800303c <ETH_Prepare_Tx_Descriptors+0x484>
 8002ffa:	bf00      	nop
 8002ffc:	ffff8000 	.word	0xffff8000
 8003000:	ffffc000 	.word	0xffffc000
 8003004:	c000ffff 	.word	0xc000ffff
 8003008:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800300c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b36      	ldr	r3, [pc, #216]	@ (80030ec <ETH_Prepare_Tx_Descriptors+0x534>)
 8003012:	4013      	ands	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	431a      	orrs	r2, r3
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	3301      	adds	r3, #1
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003042:	f3bf 8f5f 	dmb	sy
}
 8003046:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003052:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f af2b 	bne.w	8002ec0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	e005      	b.n	800308a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800309a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800309c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309e:	3304      	adds	r3, #4
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030aa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	613b      	str	r3, [r7, #16]
  return(result);
 80030b2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	2301      	movs	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	4413      	add	r3, r2
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f383 8810 	msr	PRIMASK, r3
}
 80030da:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3744      	adds	r7, #68	@ 0x44
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	ffff8000 	.word	0xffff8000

080030f0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	@ 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8003104:	2308      	movs	r3, #8
 8003106:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003108:	4b40      	ldr	r3, [pc, #256]	@ (800320c <HAL_FLASH_Program+0x11c>)
 800310a:	7d1b      	ldrb	r3, [r3, #20]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_FLASH_Program+0x24>
 8003110:	2302      	movs	r3, #2
 8003112:	e076      	b.n	8003202 <HAL_FLASH_Program+0x112>
 8003114:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <HAL_FLASH_Program+0x11c>)
 8003116:	2201      	movs	r2, #1
 8003118:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003120:	d306      	bcc.n	8003130 <HAL_FLASH_Program+0x40>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8003128:	d202      	bcs.n	8003130 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800312e:	e00c      	b.n	800314a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8003136:	d306      	bcc.n	8003146 <HAL_FLASH_Program+0x56>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 800313e:	d202      	bcs.n	8003146 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8003140:	2302      	movs	r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	e001      	b.n	800314a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e05b      	b.n	8003202 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800314a:	4b30      	ldr	r3, [pc, #192]	@ (800320c <HAL_FLASH_Program+0x11c>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003150:	69b9      	ldr	r1, [r7, #24]
 8003152:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003156:	f000 f8c1 	bl	80032dc <FLASH_WaitForLastOperation>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8003160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003164:	2b00      	cmp	r3, #0
 8003166:	d147      	bne.n	80031f8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d106      	bne.n	800317c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800316e:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_FLASH_Program+0x120>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a27      	ldr	r2, [pc, #156]	@ (8003210 <HAL_FLASH_Program+0x120>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	60d3      	str	r3, [r2, #12]
 800317a:	e007      	b.n	800318c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800317c:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <HAL_FLASH_Program+0x120>)
 800317e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_FLASH_Program+0x120>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800318c:	f3bf 8f6f 	isb	sy
}
 8003190:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003192:	f3bf 8f4f 	dsb	sy
}
 8003196:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	3304      	adds	r3, #4
 80031a4:	623b      	str	r3, [r7, #32]
        src_addr++;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	61fb      	str	r3, [r7, #28]
        row_index--;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ef      	bne.n	8003198 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 80031b8:	f3bf 8f6f 	isb	sy
}
 80031bc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80031be:	f3bf 8f4f 	dsb	sy
}
 80031c2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80031ca:	f000 f887 	bl	80032dc <FLASH_WaitForLastOperation>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d106      	bne.n	80031e8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <HAL_FLASH_Program+0x120>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a0c      	ldr	r2, [pc, #48]	@ (8003210 <HAL_FLASH_Program+0x120>)
 80031e0:	f023 0302 	bic.w	r3, r3, #2
 80031e4:	60d3      	str	r3, [r2, #12]
 80031e6:	e007      	b.n	80031f8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_FLASH_Program+0x120>)
 80031ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80031ee:	4a08      	ldr	r2, [pc, #32]	@ (8003210 <HAL_FLASH_Program+0x120>)
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031f8:	4b04      	ldr	r3, [pc, #16]	@ (800320c <HAL_FLASH_Program+0x11c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	751a      	strb	r2, [r3, #20]

  return status;
 80031fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003202:	4618      	mov	r0, r3
 8003204:	3728      	adds	r7, #40	@ 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	240001a0 	.word	0x240001a0
 8003210:	52002000 	.word	0x52002000

08003214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003218:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8003224:	4b15      	ldr	r3, [pc, #84]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 8003226:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <HAL_FLASH_Unlock+0x6c>)
 8003228:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800322a:	4b14      	ldr	r3, [pc, #80]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 800322c:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <HAL_FLASH_Unlock+0x70>)
 800322e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003230:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e018      	b.n	8003272 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8003240:	4b0e      	ldr	r3, [pc, #56]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 8003242:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 8003250:	4a0b      	ldr	r2, [pc, #44]	@ (8003280 <HAL_FLASH_Unlock+0x6c>)
 8003252:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8003256:	4b09      	ldr	r3, [pc, #36]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 8003258:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <HAL_FLASH_Unlock+0x70>)
 800325a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_FLASH_Unlock+0x68>)
 8003260:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	52002000 	.word	0x52002000
 8003280:	45670123 	.word	0x45670123
 8003284:	cdef89ab 	.word	0xcdef89ab

08003288 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800328c:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <HAL_FLASH_Lock+0x50>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a11      	ldr	r2, [pc, #68]	@ (80032d8 <HAL_FLASH_Lock+0x50>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <HAL_FLASH_Lock+0x50>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e011      	b.n	80032cc <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <HAL_FLASH_Lock+0x50>)
 80032aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80032ae:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <HAL_FLASH_Lock+0x50>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80032b8:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <HAL_FLASH_Lock+0x50>)
 80032ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	52002000 	.word	0x52002000

080032dc <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80032e6:	2304      	movs	r3, #4
 80032e8:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80032ee:	f7fe f955 	bl	800159c <HAL_GetTick>
 80032f2:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d113      	bne.n	8003322 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80032fa:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <FLASH_WaitForLastOperation+0x124>)
 80032fc:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80032fe:	e010      	b.n	8003322 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d00c      	beq.n	8003322 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003308:	f7fe f948 	bl	800159c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <FLASH_WaitForLastOperation+0x42>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e06a      	b.n	80033f8 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <FLASH_WaitForLastOperation+0x128>)
 8003326:	4013      	ands	r3, r2
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	429a      	cmp	r2, r3
 800332c:	d10a      	bne.n	8003344 <FLASH_WaitForLastOperation+0x68>
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e00c      	b.n	800335e <FLASH_WaitForLastOperation+0x82>
 8003344:	4b30      	ldr	r3, [pc, #192]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 8003346:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800334a:	43da      	mvns	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4013      	ands	r3, r2
 8003350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ce      	bne.n	8003300 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8003368:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	4b27      	ldr	r3, [pc, #156]	@ (800340c <FLASH_WaitForLastOperation+0x130>)
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e007      	b.n	8003384 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8003374:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 8003376:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800337a:	4b24      	ldr	r3, [pc, #144]	@ (800340c <FLASH_WaitForLastOperation+0x130>)
 800337c:	4013      	ands	r3, r2
 800337e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003382:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800338e:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <FLASH_WaitForLastOperation+0x134>)
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	4a1e      	ldr	r2, [pc, #120]	@ (8003410 <FLASH_WaitForLastOperation+0x134>)
 8003398:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <FLASH_WaitForLastOperation+0x128>)
 800339e:	4013      	ands	r3, r2
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d103      	bne.n	80033ae <FLASH_WaitForLastOperation+0xd2>
 80033a6:	4a18      	ldr	r2, [pc, #96]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6153      	str	r3, [r2, #20]
 80033ac:	e005      	b.n	80033ba <FLASH_WaitForLastOperation+0xde>
 80033ae:	4a16      	ldr	r2, [pc, #88]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e01c      	b.n	80033f8 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10b      	bne.n	80033dc <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80033c4:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d0:	d111      	bne.n	80033f6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 80033d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033d8:	615a      	str	r2, [r3, #20]
 80033da:	e00c      	b.n	80033f6 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 80033dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 80033de:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80033e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ea:	d104      	bne.n	80033f6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <FLASH_WaitForLastOperation+0x12c>)
 80033ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033f2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	80000004 	.word	0x80000004
 8003404:	1fef000f 	.word	0x1fef000f
 8003408:	52002000 	.word	0x52002000
 800340c:	17ee0000 	.word	0x17ee0000
 8003410:	240001a0 	.word	0x240001a0

08003414 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003422:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <HAL_FLASHEx_Erase+0x188>)
 8003424:	7d1b      	ldrb	r3, [r3, #20]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_FLASHEx_Erase+0x1a>
 800342a:	2302      	movs	r3, #2
 800342c:	e0b2      	b.n	8003594 <HAL_FLASHEx_Erase+0x180>
 800342e:	4b5b      	ldr	r3, [pc, #364]	@ (800359c <HAL_FLASHEx_Erase+0x188>)
 8003430:	2201      	movs	r2, #1
 8003432:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_FLASHEx_Erase+0x188>)
 8003436:	2200      	movs	r2, #0
 8003438:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003446:	2101      	movs	r1, #1
 8003448:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800344c:	f7ff ff46 	bl	80032dc <FLASH_WaitForLastOperation>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8003466:	2102      	movs	r1, #2
 8003468:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800346c:	f7ff ff36 	bl	80032dc <FLASH_WaitForLastOperation>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 8085 	bne.w	800358c <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d136      	bne.n	80034f8 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f000 f887 	bl	80035a8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00f      	beq.n	80034c6 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80034a6:	2101      	movs	r1, #1
 80034a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034ac:	f7ff ff16 	bl	80032dc <FLASH_WaitForLastOperation>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80034ba:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4a38      	ldr	r2, [pc, #224]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 80034c0:	f023 0308 	bic.w	r3, r3, #8
 80034c4:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d05c      	beq.n	800358c <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80034d2:	2102      	movs	r1, #2
 80034d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034d8:	f7ff ff00 	bl	80032dc <FLASH_WaitForLastOperation>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 80034e6:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 80034e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80034ec:	4a2c      	ldr	r2, [pc, #176]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 80034f6:	e049      	b.n	800358c <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f04f 32ff 	mov.w	r2, #4294967295
 80034fe:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	e039      	b.n	800357c <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	461a      	mov	r2, r3
 8003512:	68b8      	ldr	r0, [r7, #8]
 8003514:	f000 f8b2 	bl	800367c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00c      	beq.n	800353e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8003524:	2101      	movs	r1, #1
 8003526:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800352a:	f7ff fed7 	bl	80032dc <FLASH_WaitForLastOperation>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003532:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	491a      	ldr	r1, [pc, #104]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 8003538:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_FLASHEx_Erase+0x190>)
 800353a:	4013      	ands	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800354a:	2102      	movs	r1, #2
 800354c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003550:	f7ff fec4 	bl	80032dc <FLASH_WaitForLastOperation>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003558:	4b11      	ldr	r3, [pc, #68]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 800355a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800355e:	4910      	ldr	r1, [pc, #64]	@ (80035a0 <HAL_FLASHEx_Erase+0x18c>)
 8003560:	4b10      	ldr	r3, [pc, #64]	@ (80035a4 <HAL_FLASHEx_Erase+0x190>)
 8003562:	4013      	ands	r3, r2
 8003564:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	601a      	str	r2, [r3, #0]
          break;
 8003574:	e00a      	b.n	800358c <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3301      	adds	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4413      	add	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	d3bd      	bcc.n	8003508 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800358c:	4b03      	ldr	r3, [pc, #12]	@ (800359c <HAL_FLASHEx_Erase+0x188>)
 800358e:	2200      	movs	r2, #0
 8003590:	751a      	strb	r2, [r3, #20]

  return status;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	240001a0 	.word	0x240001a0
 80035a0:	52002000 	.word	0x52002000
 80035a4:	fffff8fb 	.word	0xfffff8fb

080035a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d122      	bne.n	8003602 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80035bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80035c6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80035ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80035d4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80035d8:	4b27      	ldr	r3, [pc, #156]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	4926      	ldr	r1, [pc, #152]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80035e4:	4b24      	ldr	r3, [pc, #144]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80035ea:	4923      	ldr	r1, [pc, #140]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80035f4:	4b20      	ldr	r3, [pc, #128]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003678 <FLASH_MassErase+0xd0>)
 80035fa:	f043 0310 	orr.w	r3, r3, #16
 80035fe:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8003600:	e033      	b.n	800366a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d011      	beq.n	8003630 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800360c:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <FLASH_MassErase+0xd0>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <FLASH_MassErase+0xd0>)
 8003612:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003616:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8003618:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <FLASH_MassErase+0xd0>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4916      	ldr	r1, [pc, #88]	@ (8003678 <FLASH_MassErase+0xd0>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8003624:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <FLASH_MassErase+0xd0>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a13      	ldr	r2, [pc, #76]	@ (8003678 <FLASH_MassErase+0xd0>)
 800362a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800362e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d017      	beq.n	800366a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800363a:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <FLASH_MassErase+0xd0>)
 800363c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003640:	4a0d      	ldr	r2, [pc, #52]	@ (8003678 <FLASH_MassErase+0xd0>)
 8003642:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003646:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <FLASH_MassErase+0xd0>)
 800364c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8003650:	4909      	ldr	r1, [pc, #36]	@ (8003678 <FLASH_MassErase+0xd0>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <FLASH_MassErase+0xd0>)
 800365c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003660:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <FLASH_MassErase+0xd0>)
 8003662:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8003666:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	52002000 	.word	0x52002000

0800367c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8003692:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 8003698:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800369c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800369e:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	0219      	lsls	r1, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 80036ae:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80036b2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d014      	beq.n	80036e8 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 80036c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80036c4:	4a0b      	ldr	r2, [pc, #44]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 80036c6:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80036ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 80036d0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0219      	lsls	r1, r3, #8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	430b      	orrs	r3, r1
 80036dc:	4313      	orrs	r3, r2
 80036de:	4a05      	ldr	r2, [pc, #20]	@ (80036f4 <FLASH_Erase_Sector+0x78>)
 80036e0:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80036e4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	52002000 	.word	0x52002000

080036f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	@ 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003706:	4b89      	ldr	r3, [pc, #548]	@ (800392c <HAL_GPIO_Init+0x234>)
 8003708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800370a:	e194      	b.n	8003a36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8186 	beq.w	8003a30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d005      	beq.n	800373c <HAL_GPIO_Init+0x44>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d130      	bne.n	800379e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003772:	2201      	movs	r2, #1
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0201 	and.w	r2, r3, #1
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d017      	beq.n	80037da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d123      	bne.n	800382e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	69b9      	ldr	r1, [r7, #24]
 800382a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0203 	and.w	r2, r3, #3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80e0 	beq.w	8003a30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003870:	4b2f      	ldr	r3, [pc, #188]	@ (8003930 <HAL_GPIO_Init+0x238>)
 8003872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003876:	4a2e      	ldr	r2, [pc, #184]	@ (8003930 <HAL_GPIO_Init+0x238>)
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003880:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_GPIO_Init+0x238>)
 8003882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800388e:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <HAL_GPIO_Init+0x23c>)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a20      	ldr	r2, [pc, #128]	@ (8003938 <HAL_GPIO_Init+0x240>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d052      	beq.n	8003960 <HAL_GPIO_Init+0x268>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <HAL_GPIO_Init+0x244>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_GPIO_Init+0x22e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003940 <HAL_GPIO_Init+0x248>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <HAL_GPIO_Init+0x22a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <HAL_GPIO_Init+0x24c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d025      	beq.n	800391e <HAL_GPIO_Init+0x226>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <HAL_GPIO_Init+0x250>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <HAL_GPIO_Init+0x222>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	@ (800394c <HAL_GPIO_Init+0x254>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d019      	beq.n	8003916 <HAL_GPIO_Init+0x21e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003950 <HAL_GPIO_Init+0x258>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_GPIO_Init+0x21a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a19      	ldr	r2, [pc, #100]	@ (8003954 <HAL_GPIO_Init+0x25c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00d      	beq.n	800390e <HAL_GPIO_Init+0x216>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <HAL_GPIO_Init+0x260>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <HAL_GPIO_Init+0x212>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a17      	ldr	r2, [pc, #92]	@ (800395c <HAL_GPIO_Init+0x264>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_GPIO_Init+0x20e>
 8003902:	2309      	movs	r3, #9
 8003904:	e02d      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 8003906:	230a      	movs	r3, #10
 8003908:	e02b      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 800390a:	2308      	movs	r3, #8
 800390c:	e029      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 800390e:	2307      	movs	r3, #7
 8003910:	e027      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 8003912:	2306      	movs	r3, #6
 8003914:	e025      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 8003916:	2305      	movs	r3, #5
 8003918:	e023      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 800391a:	2304      	movs	r3, #4
 800391c:	e021      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 800391e:	2303      	movs	r3, #3
 8003920:	e01f      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 8003922:	2302      	movs	r3, #2
 8003924:	e01d      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 8003926:	2301      	movs	r3, #1
 8003928:	e01b      	b.n	8003962 <HAL_GPIO_Init+0x26a>
 800392a:	bf00      	nop
 800392c:	58000080 	.word	0x58000080
 8003930:	58024400 	.word	0x58024400
 8003934:	58000400 	.word	0x58000400
 8003938:	58020000 	.word	0x58020000
 800393c:	58020400 	.word	0x58020400
 8003940:	58020800 	.word	0x58020800
 8003944:	58020c00 	.word	0x58020c00
 8003948:	58021000 	.word	0x58021000
 800394c:	58021400 	.word	0x58021400
 8003950:	58021800 	.word	0x58021800
 8003954:	58021c00 	.word	0x58021c00
 8003958:	58022000 	.word	0x58022000
 800395c:	58022400 	.word	0x58022400
 8003960:	2300      	movs	r3, #0
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	f002 0203 	and.w	r2, r2, #3
 8003968:	0092      	lsls	r2, r2, #2
 800396a:	4093      	lsls	r3, r2
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003972:	4938      	ldr	r1, [pc, #224]	@ (8003a54 <HAL_GPIO_Init+0x35c>)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	3301      	adds	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f ae63 	bne.w	800370c <HAL_GPIO_Init+0x14>
  }
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3724      	adds	r7, #36	@ 0x24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	58000400 	.word	0x58000400

08003a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	e001      	b.n	8003a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003aa4:	e003      	b.n	8003aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	041a      	lsls	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ac4:	4b29      	ldr	r3, [pc, #164]	@ (8003b6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d00a      	beq.n	8003ae6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ad0:	4b26      	ldr	r3, [pc, #152]	@ (8003b6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d001      	beq.n	8003ae2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e040      	b.n	8003b64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e03e      	b.n	8003b64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ae6:	4b21      	ldr	r3, [pc, #132]	@ (8003b6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003aee:	491f      	ldr	r1, [pc, #124]	@ (8003b6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003af6:	f7fd fd51 	bl	800159c <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003afc:	e009      	b.n	8003b12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003afe:	f7fd fd4d 	bl	800159c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b0c:	d901      	bls.n	8003b12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e028      	b.n	8003b64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b12:	4b16      	ldr	r3, [pc, #88]	@ (8003b6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b1e:	d1ee      	bne.n	8003afe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b1e      	cmp	r3, #30
 8003b24:	d008      	beq.n	8003b38 <HAL_PWREx_ConfigSupply+0x7c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b2a:	d005      	beq.n	8003b38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b1d      	cmp	r3, #29
 8003b30:	d002      	beq.n	8003b38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b2d      	cmp	r3, #45	@ 0x2d
 8003b36:	d114      	bne.n	8003b62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b38:	f7fd fd30 	bl	800159c <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b3e:	e009      	b.n	8003b54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b40:	f7fd fd2c 	bl	800159c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b4e:	d901      	bls.n	8003b54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e007      	b.n	8003b64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b60:	d1ee      	bne.n	8003b40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	58024800 	.word	0x58024800

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	@ 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f000 bc48 	b.w	8004414 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8088 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b92:	4b99      	ldr	r3, [pc, #612]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b9c:	4b96      	ldr	r3, [pc, #600]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d007      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x48>
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	2b18      	cmp	r3, #24
 8003bac:	d111      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
 8003bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b8f      	ldr	r3, [pc, #572]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d06d      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x130>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d169      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f000 bc21 	b.w	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x7a>
 8003bdc:	4b86      	ldr	r3, [pc, #536]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a85      	ldr	r2, [pc, #532]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x9c>
 8003bf2:	4b81      	ldr	r3, [pc, #516]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a80      	ldr	r2, [pc, #512]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a7d      	ldr	r2, [pc, #500]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0xc0>
 8003c16:	4b78      	ldr	r3, [pc, #480]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a77      	ldr	r2, [pc, #476]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b75      	ldr	r3, [pc, #468]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a74      	ldr	r2, [pc, #464]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c30:	4b71      	ldr	r3, [pc, #452]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a70      	ldr	r2, [pc, #448]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6d      	ldr	r2, [pc, #436]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fca4 	bl	800159c <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd fca0 	bl	800159c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e3d4      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c6a:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fc90 	bl	800159c <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd fc8c 	bl	800159c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e3c0      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c92:	4b59      	ldr	r3, [pc, #356]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80ca 	beq.w	8003e44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb0:	4b51      	ldr	r3, [pc, #324]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cba:	4b4f      	ldr	r3, [pc, #316]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x166>
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	2b18      	cmp	r3, #24
 8003cca:	d156      	bne.n	8003d7a <HAL_RCC_OscConfig+0x20a>
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d151      	bne.n	8003d7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd6:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x17e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e392      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cee:	4b42      	ldr	r3, [pc, #264]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 0219 	bic.w	r2, r3, #25
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	493f      	ldr	r1, [pc, #252]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fc4c 	bl	800159c <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fd fc48 	bl	800159c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e37c      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d1a:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	f7fd fc69 	bl	80015fc <HAL_GetREVID>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d817      	bhi.n	8003d64 <HAL_RCC_OscConfig+0x1f4>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b40      	cmp	r3, #64	@ 0x40
 8003d3a:	d108      	bne.n	8003d4e <HAL_RCC_OscConfig+0x1de>
 8003d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d44:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	e07a      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	031b      	lsls	r3, r3, #12
 8003d5c:	4926      	ldr	r1, [pc, #152]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d62:	e06f      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b24      	ldr	r3, [pc, #144]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	4921      	ldr	r1, [pc, #132]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d78:	e064      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d047      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d82:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0219 	bic.w	r2, r3, #25
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	491a      	ldr	r1, [pc, #104]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fc02 	bl	800159c <HAL_GetTick>
 8003d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fbfe 	bl	800159c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e332      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dba:	f7fd fc1f 	bl	80015fc <HAL_GetREVID>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d819      	bhi.n	8003dfc <HAL_RCC_OscConfig+0x28c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d108      	bne.n	8003de2 <HAL_RCC_OscConfig+0x272>
 8003dd0:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dde:	6053      	str	r3, [r2, #4]
 8003de0:	e030      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	031b      	lsls	r3, r3, #12
 8003df0:	4901      	ldr	r1, [pc, #4]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
 8003df6:	e025      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	4997      	ldr	r1, [pc, #604]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	e018      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e12:	4b95      	ldr	r3, [pc, #596]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a94      	ldr	r2, [pc, #592]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fbbd 	bl	800159c <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fd fbb9 	bl	800159c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e2ed      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e38:	4b8b      	ldr	r3, [pc, #556]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a9 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e52:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e5c:	4b82      	ldr	r3, [pc, #520]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d007      	beq.n	8003e78 <HAL_RCC_OscConfig+0x308>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b18      	cmp	r3, #24
 8003e6c:	d13a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x374>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d135      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e78:	4b7b      	ldr	r3, [pc, #492]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_OscConfig+0x320>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e2c1      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e90:	f7fd fbb4 	bl	80015fc <HAL_GetREVID>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d817      	bhi.n	8003ece <HAL_RCC_OscConfig+0x35e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d108      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x348>
 8003ea6:	4b70      	ldr	r3, [pc, #448]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003eae:	4a6e      	ldr	r2, [pc, #440]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eb6:	e075      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	4968      	ldr	r1, [pc, #416]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ecc:	e06a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ece:	4b66      	ldr	r3, [pc, #408]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	4962      	ldr	r1, [pc, #392]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ee2:	e05f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d042      	beq.n	8003f72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003eec:	4b5e      	ldr	r3, [pc, #376]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fb50 	bl	800159c <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f00:	f7fd fb4c 	bl	800159c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e280      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f12:	4b55      	ldr	r3, [pc, #340]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f1e:	f7fd fb6d 	bl	80015fc <HAL_GetREVID>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d817      	bhi.n	8003f5c <HAL_RCC_OscConfig+0x3ec>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d108      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3d6>
 8003f34:	4b4c      	ldr	r3, [pc, #304]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f42:	6053      	str	r3, [r2, #4]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
 8003f46:	4b48      	ldr	r3, [pc, #288]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	069b      	lsls	r3, r3, #26
 8003f54:	4944      	ldr	r1, [pc, #272]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
 8003f5a:	e023      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
 8003f5c:	4b42      	ldr	r3, [pc, #264]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	493f      	ldr	r1, [pc, #252]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
 8003f70:	e018      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f72:	4b3d      	ldr	r3, [pc, #244]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a3c      	ldr	r2, [pc, #240]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fb0d 	bl	800159c <HAL_GetTick>
 8003f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f86:	f7fd fb09 	bl	800159c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e23d      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f98:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d036      	beq.n	800401e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d019      	beq.n	8003fec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd faea 	bl	800159c <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fcc:	f7fd fae6 	bl	800159c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e21a      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fde:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x45c>
 8003fea:	e018      	b.n	800401e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fec:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fd fad0 	bl	800159c <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004000:	f7fd facc 	bl	800159c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e200      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004012:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8004014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d039      	beq.n	800409e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01c      	beq.n	800406c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a0c      	ldr	r2, [pc, #48]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8004038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800403c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800403e:	f7fd faad 	bl	800159c <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004046:	f7fd faa9 	bl	800159c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1dd      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004058:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x4d6>
 8004064:	e01b      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800406c:	4b9b      	ldr	r3, [pc, #620]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a9a      	ldr	r2, [pc, #616]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004078:	f7fd fa90 	bl	800159c <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004080:	f7fd fa8c 	bl	800159c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1c0      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004092:	4b92      	ldr	r3, [pc, #584]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8081 	beq.w	80041ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040ac:	4b8c      	ldr	r3, [pc, #560]	@ (80042e0 <HAL_RCC_OscConfig+0x770>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a8b      	ldr	r2, [pc, #556]	@ (80042e0 <HAL_RCC_OscConfig+0x770>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b8:	f7fd fa70 	bl	800159c <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fd fa6c 	bl	800159c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	@ 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1a0      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d2:	4b83      	ldr	r3, [pc, #524]	@ (80042e0 <HAL_RCC_OscConfig+0x770>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x584>
 80040e6:	4b7d      	ldr	r3, [pc, #500]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a7c      	ldr	r2, [pc, #496]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	e02d      	b.n	8004150 <HAL_RCC_OscConfig+0x5e0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_OscConfig+0x5a6>
 80040fc:	4b77      	ldr	r3, [pc, #476]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004100:	4a76      	ldr	r2, [pc, #472]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	@ 0x70
 8004108:	4b74      	ldr	r3, [pc, #464]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410c:	4a73      	ldr	r2, [pc, #460]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800410e:	f023 0304 	bic.w	r3, r3, #4
 8004112:	6713      	str	r3, [r2, #112]	@ 0x70
 8004114:	e01c      	b.n	8004150 <HAL_RCC_OscConfig+0x5e0>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c8>
 800411e:	4b6f      	ldr	r3, [pc, #444]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	4a6e      	ldr	r2, [pc, #440]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	4a6b      	ldr	r2, [pc, #428]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6713      	str	r3, [r2, #112]	@ 0x70
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0x5e0>
 8004138:	4b68      	ldr	r3, [pc, #416]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	4a67      	ldr	r2, [pc, #412]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	@ 0x70
 8004144:	4b65      	ldr	r3, [pc, #404]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004148:	4a64      	ldr	r2, [pc, #400]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800414a:	f023 0304 	bic.w	r3, r3, #4
 800414e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd fa20 	bl	800159c <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd fa1c 	bl	800159c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e14e      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004176:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RCC_OscConfig+0x5f0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fd fa0a 	bl	800159c <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fd fa06 	bl	800159c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e138      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041a2:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 812d 	beq.w	8004412 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041b8:	4b48      	ldr	r3, [pc, #288]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c0:	2b18      	cmp	r3, #24
 80041c2:	f000 80bd 	beq.w	8004340 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	f040 809e 	bne.w	800430c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d0:	4b42      	ldr	r3, [pc, #264]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a41      	ldr	r2, [pc, #260]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd f9de 	bl	800159c <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd f9da 	bl	800159c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e10e      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004202:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004206:	4b37      	ldr	r3, [pc, #220]	@ (80042e4 <HAL_RCC_OscConfig+0x774>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	430a      	orrs	r2, r1
 8004216:	4931      	ldr	r1, [pc, #196]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	628b      	str	r3, [r1, #40]	@ 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	3b01      	subs	r3, #1
 8004222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	3b01      	subs	r3, #1
 800422c:	025b      	lsls	r3, r3, #9
 800422e:	b29b      	uxth	r3, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	3b01      	subs	r3, #1
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800424c:	4923      	ldr	r1, [pc, #140]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004252:	4b22      	ldr	r3, [pc, #136]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800425e:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004262:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <HAL_RCC_OscConfig+0x778>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800426a:	00d2      	lsls	r2, r2, #3
 800426c:	491b      	ldr	r1, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004272:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	f023 020c 	bic.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4917      	ldr	r1, [pc, #92]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004284:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	f023 0202 	bic.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	4912      	ldr	r1, [pc, #72]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004296:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	4a07      	ldr	r2, [pc, #28]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd f963 	bl	800159c <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042d8:	e011      	b.n	80042fe <HAL_RCC_OscConfig+0x78e>
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58024800 	.word	0x58024800
 80042e4:	fffffc0c 	.word	0xfffffc0c
 80042e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd f956 	bl	800159c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e08a      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x77c>
 800430a:	e082      	b.n	8004412 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430c:	4b43      	ldr	r3, [pc, #268]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a42      	ldr	r2, [pc, #264]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fd f940 	bl	800159c <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004320:	f7fd f93c 	bl	800159c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e070      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004332:	4b3a      	ldr	r3, [pc, #232]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x7b0>
 800433e:	e068      	b.n	8004412 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004346:	4b35      	ldr	r3, [pc, #212]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2b01      	cmp	r3, #1
 8004352:	d031      	beq.n	80043b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d12a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d122      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d11a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0a5b      	lsrs	r3, r3, #9
 8004386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d111      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	0c1b      	lsrs	r3, r3, #16
 8004398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d108      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02b      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d01f      	beq.n	8004412 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	4a11      	ldr	r2, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043de:	f7fd f8dd 	bl	800159c <HAL_GetTick>
 80043e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043e4:	bf00      	nop
 80043e6:	f7fd f8d9 	bl	800159c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d0f9      	beq.n	80043e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <HAL_RCC_OscConfig+0x8b0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043fe:	00d2      	lsls	r2, r2, #3
 8004400:	4906      	ldr	r1, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004402:	4313      	orrs	r3, r2
 8004404:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	4a04      	ldr	r2, [pc, #16]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3730      	adds	r7, #48	@ 0x30
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58024400 	.word	0x58024400
 8004420:	ffff0007 	.word	0xffff0007

08004424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e19c      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004438:	4b8a      	ldr	r3, [pc, #552]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d910      	bls.n	8004468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b87      	ldr	r3, [pc, #540]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 020f 	bic.w	r2, r3, #15
 800444e:	4985      	ldr	r1, [pc, #532]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b83      	ldr	r3, [pc, #524]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e184      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	4b7b      	ldr	r3, [pc, #492]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004480:	429a      	cmp	r2, r3
 8004482:	d908      	bls.n	8004496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004484:	4b78      	ldr	r3, [pc, #480]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	4975      	ldr	r1, [pc, #468]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004492:	4313      	orrs	r3, r2
 8004494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	4b70      	ldr	r3, [pc, #448]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d908      	bls.n	80044c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	496a      	ldr	r1, [pc, #424]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	4b64      	ldr	r3, [pc, #400]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044dc:	429a      	cmp	r2, r3
 80044de:	d908      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e0:	4b61      	ldr	r3, [pc, #388]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	495e      	ldr	r1, [pc, #376]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800450a:	429a      	cmp	r2, r3
 800450c:	d908      	bls.n	8004520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800450e:	4b56      	ldr	r3, [pc, #344]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4953      	ldr	r1, [pc, #332]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800451c:	4313      	orrs	r3, r2
 800451e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b4d      	ldr	r3, [pc, #308]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	429a      	cmp	r2, r3
 800453a:	d908      	bls.n	800454e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b4a      	ldr	r3, [pc, #296]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f023 020f 	bic.w	r2, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4947      	ldr	r1, [pc, #284]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800454a:	4313      	orrs	r3, r2
 800454c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d055      	beq.n	8004606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800455a:	4b43      	ldr	r3, [pc, #268]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4940      	ldr	r1, [pc, #256]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004568:	4313      	orrs	r3, r2
 800456a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d107      	bne.n	8004584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004574:	4b3c      	ldr	r3, [pc, #240]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d121      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0f6      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d107      	bne.n	800459c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800458c:	4b36      	ldr	r3, [pc, #216]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d115      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0ea      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045a4:	4b30      	ldr	r3, [pc, #192]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0de      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0d6      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c4:	4b28      	ldr	r3, [pc, #160]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f023 0207 	bic.w	r2, r3, #7
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4925      	ldr	r1, [pc, #148]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d6:	f7fc ffe1 	bl	800159c <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fc ffdd 	bl	800159c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0be      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	429a      	cmp	r2, r3
 8004604:	d1eb      	bne.n	80045de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	4b14      	ldr	r3, [pc, #80]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	429a      	cmp	r2, r3
 8004620:	d208      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f023 020f 	bic.w	r2, r3, #15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	490e      	ldr	r1, [pc, #56]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004630:	4313      	orrs	r3, r2
 8004632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d214      	bcs.n	800466c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 020f 	bic.w	r2, r3, #15
 800464a:	4906      	ldr	r1, [pc, #24]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e086      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
 8004664:	52002000 	.word	0x52002000
 8004668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004684:	429a      	cmp	r2, r3
 8004686:	d208      	bcs.n	800469a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004688:	4b3c      	ldr	r3, [pc, #240]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4939      	ldr	r1, [pc, #228]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004696:	4313      	orrs	r3, r2
 8004698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	4b34      	ldr	r3, [pc, #208]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d208      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046b6:	4b31      	ldr	r3, [pc, #196]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	492e      	ldr	r1, [pc, #184]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	4b28      	ldr	r3, [pc, #160]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d208      	bcs.n	80046f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046e4:	4b25      	ldr	r3, [pc, #148]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4922      	ldr	r1, [pc, #136]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800470e:	429a      	cmp	r2, r3
 8004710:	d208      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004712:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4917      	ldr	r1, [pc, #92]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004720:	4313      	orrs	r3, r2
 8004722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004724:	f000 f834 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	4912      	ldr	r1, [pc, #72]	@ (8004780 <HAL_RCC_ClockConfig+0x35c>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004742:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	4a0d      	ldr	r2, [pc, #52]	@ (8004780 <HAL_RCC_ClockConfig+0x35c>)
 800474c:	5cd3      	ldrb	r3, [r2, r3]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <HAL_RCC_ClockConfig+0x360>)
 800475a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800475c:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <HAL_RCC_ClockConfig+0x364>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_ClockConfig+0x368>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fb20 	bl	8000dac <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	58024400 	.word	0x58024400
 8004780:	080154dc 	.word	0x080154dc
 8004784:	24000004 	.word	0x24000004
 8004788:	24000000 	.word	0x24000000
 800478c:	2400001c 	.word	0x2400001c

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	@ 0x24
 8004794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004796:	4bb3      	ldr	r3, [pc, #716]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800479e:	2b18      	cmp	r3, #24
 80047a0:	f200 8155 	bhi.w	8004a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80047a4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	08004811 	.word	0x08004811
 80047b0:	08004a4f 	.word	0x08004a4f
 80047b4:	08004a4f 	.word	0x08004a4f
 80047b8:	08004a4f 	.word	0x08004a4f
 80047bc:	08004a4f 	.word	0x08004a4f
 80047c0:	08004a4f 	.word	0x08004a4f
 80047c4:	08004a4f 	.word	0x08004a4f
 80047c8:	08004a4f 	.word	0x08004a4f
 80047cc:	08004837 	.word	0x08004837
 80047d0:	08004a4f 	.word	0x08004a4f
 80047d4:	08004a4f 	.word	0x08004a4f
 80047d8:	08004a4f 	.word	0x08004a4f
 80047dc:	08004a4f 	.word	0x08004a4f
 80047e0:	08004a4f 	.word	0x08004a4f
 80047e4:	08004a4f 	.word	0x08004a4f
 80047e8:	08004a4f 	.word	0x08004a4f
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	08004a4f 	.word	0x08004a4f
 80047f4:	08004a4f 	.word	0x08004a4f
 80047f8:	08004a4f 	.word	0x08004a4f
 80047fc:	08004a4f 	.word	0x08004a4f
 8004800:	08004a4f 	.word	0x08004a4f
 8004804:	08004a4f 	.word	0x08004a4f
 8004808:	08004a4f 	.word	0x08004a4f
 800480c:	08004843 	.word	0x08004843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004810:	4b94      	ldr	r3, [pc, #592]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800481c:	4b91      	ldr	r3, [pc, #580]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	4a90      	ldr	r2, [pc, #576]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800482e:	e111      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004830:	4b8d      	ldr	r3, [pc, #564]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004832:	61bb      	str	r3, [r7, #24]
      break;
 8004834:	e10e      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004836:	4b8d      	ldr	r3, [pc, #564]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004838:	61bb      	str	r3, [r7, #24]
      break;
 800483a:	e10b      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800483c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800483e:	61bb      	str	r3, [r7, #24]
      break;
 8004840:	e108      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004842:	4b88      	ldr	r3, [pc, #544]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800484c:	4b85      	ldr	r3, [pc, #532]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004858:	4b82      	ldr	r3, [pc, #520]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004862:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	08db      	lsrs	r3, r3, #3
 8004868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80e1 	beq.w	8004a48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b02      	cmp	r3, #2
 800488a:	f000 8083 	beq.w	8004994 <HAL_RCC_GetSysClockFreq+0x204>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f200 80a1 	bhi.w	80049d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x114>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d056      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80048a2:	e099      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02d      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	08db      	lsrs	r3, r3, #3
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b62      	ldr	r3, [pc, #392]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800490a:	e087      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b51      	ldr	r3, [pc, #324]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004932:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800494e:	e065      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b40      	ldr	r3, [pc, #256]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a02 	vldr	s12, [r7, #8]
 8004976:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004992:	e043      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049d6:	e021      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80049e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80049fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a26:	3301      	adds	r3, #1
 8004a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a40:	ee17 3a90 	vmov	r3, s15
 8004a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a4e:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a50:	61bb      	str	r3, [r7, #24]
      break;
 8004a52:	bf00      	nop
  }

  return sysclockfreq;
 8004a54:	69bb      	ldr	r3, [r7, #24]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	@ 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	03d09000 	.word	0x03d09000
 8004a6c:	003d0900 	.word	0x003d0900
 8004a70:	017d7840 	.word	0x017d7840
 8004a74:	46000000 	.word	0x46000000
 8004a78:	4c742400 	.word	0x4c742400
 8004a7c:	4a742400 	.word	0x4a742400
 8004a80:	4bbebc20 	.word	0x4bbebc20

08004a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a8a:	f7ff fe81 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	4b10      	ldr	r3, [pc, #64]	@ (8004ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	490f      	ldr	r1, [pc, #60]	@ (8004ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a9c:	5ccb      	ldrb	r3, [r1, r3]
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ab2:	5cd3      	ldrb	r3, [r2, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	fa22 f303 	lsr.w	r3, r2, r3
 8004abe:	4a07      	ldr	r2, [pc, #28]	@ (8004adc <HAL_RCC_GetHCLKFreq+0x58>)
 8004ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ac2:	4a07      	ldr	r2, [pc, #28]	@ (8004ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ac8:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <HAL_RCC_GetHCLKFreq+0x58>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	080154dc 	.word	0x080154dc
 8004adc:	24000004 	.word	0x24000004
 8004ae0:	24000000 	.word	0x24000000

08004ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ae8:	f7ff ffcc 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4904      	ldr	r1, [pc, #16]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	080154dc 	.word	0x080154dc

08004b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223f      	movs	r2, #63	@ 0x3f
 8004b1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b20:	4b1a      	ldr	r3, [pc, #104]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0207 	and.w	r2, r3, #7
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004b2c:	4b17      	ldr	r3, [pc, #92]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004b38:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004b50:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004b68:	4b08      	ldr	r3, [pc, #32]	@ (8004b8c <HAL_RCC_GetClockConfig+0x7c>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <HAL_RCC_GetClockConfig+0x80>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	601a      	str	r2, [r3, #0]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	52002000 	.word	0x52002000

08004b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e049      	b.n	8004c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc f8d4 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f000 fad6 	bl	8005184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e054      	b.n	8004d06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a26      	ldr	r2, [pc, #152]	@ (8004d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	@ (8004d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a21      	ldr	r2, [pc, #132]	@ (8004d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x80>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <HAL_TIM_Base_Start_IT+0xe8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d115      	bne.n	8004cf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_TIM_Base_Start_IT+0xec>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d015      	beq.n	8004d02 <HAL_TIM_Base_Start_IT+0xbe>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cdc:	d011      	beq.n	8004d02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e008      	b.n	8004d02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40001800 	.word	0x40001800
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d020      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01b      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0202 	mvn.w	r2, #2
 8004d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9e2 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f9d4 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f9e5 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0204 	mvn.w	r2, #4
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9bc 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9ae 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9bf 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d020      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0208 	mvn.w	r2, #8
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2204      	movs	r2, #4
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f996 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f988 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f999 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01b      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0210 	mvn.w	r2, #16
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2208      	movs	r2, #8
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f970 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f962 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f973 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0201 	mvn.w	r2, #1
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb ff32 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb37 	bl	800553c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00c      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb2f 	bl	8005550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f92d 	bl	8005170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f06f 0220 	mvn.w	r2, #32
 8004f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 faf7 	bl	8005528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e0dc      	b.n	800511a <HAL_TIM_ConfigClockSource+0x1d6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005124 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a64      	ldr	r2, [pc, #400]	@ (8005128 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f000 80a9 	beq.w	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8004f9c:	4a62      	ldr	r2, [pc, #392]	@ (8005128 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f200 80ae 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fa4:	4a61      	ldr	r2, [pc, #388]	@ (800512c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f000 80a1 	beq.w	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8004fac:	4a5f      	ldr	r2, [pc, #380]	@ (800512c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f200 80a6 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8005130 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f000 8099 	beq.w	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8004fbc:	4a5c      	ldr	r2, [pc, #368]	@ (8005130 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f200 809e 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004fc8:	f000 8091 	beq.w	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8004fcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004fd0:	f200 8096 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fd8:	f000 8089 	beq.w	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8004fdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe0:	f200 808e 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe8:	d03e      	beq.n	8005068 <HAL_TIM_ConfigClockSource+0x124>
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fee:	f200 8087 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff6:	f000 8086 	beq.w	8005106 <HAL_TIM_ConfigClockSource+0x1c2>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffe:	d87f      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005000:	2b70      	cmp	r3, #112	@ 0x70
 8005002:	d01a      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xf6>
 8005004:	2b70      	cmp	r3, #112	@ 0x70
 8005006:	d87b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005008:	2b60      	cmp	r3, #96	@ 0x60
 800500a:	d050      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x16a>
 800500c:	2b60      	cmp	r3, #96	@ 0x60
 800500e:	d877      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005010:	2b50      	cmp	r3, #80	@ 0x50
 8005012:	d03c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x14a>
 8005014:	2b50      	cmp	r3, #80	@ 0x50
 8005016:	d873      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005018:	2b40      	cmp	r3, #64	@ 0x40
 800501a:	d058      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x18a>
 800501c:	2b40      	cmp	r3, #64	@ 0x40
 800501e:	d86f      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005020:	2b30      	cmp	r3, #48	@ 0x30
 8005022:	d064      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8005024:	2b30      	cmp	r3, #48	@ 0x30
 8005026:	d86b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d060      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 800502c:	2b20      	cmp	r3, #32
 800502e:	d867      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8005034:	2b10      	cmp	r3, #16
 8005036:	d05a      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x1aa>
 8005038:	e062      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	f000 f9bf 	bl	80053cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800505c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
      break;
 8005066:	e04f      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005078:	f000 f9a8 	bl	80053cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800508a:	609a      	str	r2, [r3, #8]
      break;
 800508c:	e03c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	461a      	mov	r2, r3
 800509c:	f000 f918 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2150      	movs	r1, #80	@ 0x50
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f972 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 80050ac:	e02c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 f937 	bl	800532e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2160      	movs	r1, #96	@ 0x60
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f962 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 80050cc:	e01c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 f8f8 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2140      	movs	r1, #64	@ 0x40
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f952 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e00c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f000 f949 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 80050fe:	e003      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
      break;
 8005104:	e000      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	ffceff88 	.word	0xffceff88
 8005128:	00100040 	.word	0x00100040
 800512c:	00100030 	.word	0x00100030
 8005130:	00100020 	.word	0x00100020

08005134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a46      	ldr	r2, [pc, #280]	@ (80052b0 <TIM_Base_SetConfig+0x12c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d00f      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a43      	ldr	r2, [pc, #268]	@ (80052b4 <TIM_Base_SetConfig+0x130>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a42      	ldr	r2, [pc, #264]	@ (80052b8 <TIM_Base_SetConfig+0x134>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a41      	ldr	r2, [pc, #260]	@ (80052bc <TIM_Base_SetConfig+0x138>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a40      	ldr	r2, [pc, #256]	@ (80052c0 <TIM_Base_SetConfig+0x13c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d108      	bne.n	80051d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a35      	ldr	r2, [pc, #212]	@ (80052b0 <TIM_Base_SetConfig+0x12c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e4:	d01b      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a32      	ldr	r2, [pc, #200]	@ (80052b4 <TIM_Base_SetConfig+0x130>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d017      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a31      	ldr	r2, [pc, #196]	@ (80052b8 <TIM_Base_SetConfig+0x134>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a30      	ldr	r2, [pc, #192]	@ (80052bc <TIM_Base_SetConfig+0x138>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2f      	ldr	r2, [pc, #188]	@ (80052c0 <TIM_Base_SetConfig+0x13c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2e      	ldr	r2, [pc, #184]	@ (80052c4 <TIM_Base_SetConfig+0x140>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2d      	ldr	r2, [pc, #180]	@ (80052c8 <TIM_Base_SetConfig+0x144>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0x9a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <TIM_Base_SetConfig+0x148>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a16      	ldr	r2, [pc, #88]	@ (80052b0 <TIM_Base_SetConfig+0x12c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00f      	beq.n	800527c <TIM_Base_SetConfig+0xf8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a18      	ldr	r2, [pc, #96]	@ (80052c0 <TIM_Base_SetConfig+0x13c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <TIM_Base_SetConfig+0xf8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a17      	ldr	r2, [pc, #92]	@ (80052c4 <TIM_Base_SetConfig+0x140>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_Base_SetConfig+0xf8>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a16      	ldr	r2, [pc, #88]	@ (80052c8 <TIM_Base_SetConfig+0x144>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_Base_SetConfig+0xf8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a15      	ldr	r2, [pc, #84]	@ (80052cc <TIM_Base_SetConfig+0x148>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d103      	bne.n	8005284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f023 0201 	bic.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	611a      	str	r2, [r3, #16]
  }
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40014400 	.word	0x40014400
 80052cc:	40014800 	.word	0x40014800

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 030a 	bic.w	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0210 	bic.w	r2, r3, #16
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4b09      	ldr	r3, [pc, #36]	@ (80053c8 <TIM_ITRx_SetConfig+0x38>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f043 0307 	orr.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	ffcfff8f 	.word	0xffcfff8f

080053cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e06d      	b.n	8005500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a30      	ldr	r2, [pc, #192]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a2f      	ldr	r2, [pc, #188]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d108      	bne.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800545e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005470:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a20      	ldr	r2, [pc, #128]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d022      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005496:	d01d      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1d      	ldr	r2, [pc, #116]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d018      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1a      	ldr	r2, [pc, #104]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a16      	ldr	r2, [pc, #88]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a15      	ldr	r2, [pc, #84]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10c      	bne.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40001800 	.word	0x40001800
 8005524:	40014000 	.word	0x40014000

08005528 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <read_gpio_pin_stable.0>:
  	slot = 31;
  	LWIP_PLATFORM_DIAG(("Configured for CMB_HW: IP 192.168.35.30, Slot 31\n"));

  #elif defined(CMM_HW)
  	// Configuration for CMM_HW with additional slot adjustment based on IP table selection
  	uint8_t read_gpio_pin_stable(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	460b      	mov	r3, r1
 800556e:	817b      	strh	r3, [r7, #10]
 8005570:	f8c7 c004 	str.w	ip, [r7, #4]
  	    uint8_t count = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
  	    for (int i = 0; i < 10; i++) {
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	e00f      	b.n	800559e <read_gpio_pin_stable.0+0x3a>
  	        count += HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	4619      	mov	r1, r3
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7fe fa68 	bl	8003a58 <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	4413      	add	r3, r2
 8005590:	75fb      	strb	r3, [r7, #23]
  	        HAL_Delay(1);  // Small delay between readings
 8005592:	2001      	movs	r0, #1
 8005594:	f7fc f80e 	bl	80015b4 <HAL_Delay>
  	    for (int i = 0; i < 10; i++) {
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3301      	adds	r3, #1
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	ddec      	ble.n	800557e <read_gpio_pin_stable.0+0x1a>
  	    }
  	    // Return 1 if majority reads are high, else 0
  	    return (count > 5) ? 1 : 0;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	bf8c      	ite	hi
 80055aa:	2301      	movhi	r3, #1
 80055ac:	2300      	movls	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
  	}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <MX_LWIP_Init>:
{
 80055b8:	b5b0      	push	{r4, r5, r7, lr}
 80055ba:	b0a6      	sub	sp, #152	@ 0x98
 80055bc:	af04      	add	r7, sp, #16
void MX_LWIP_Init(void)
 80055be:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80055c2:	603b      	str	r3, [r7, #0]
  IP_ADDRESS[0] = 192;
 80055c4:	4b89      	ldr	r3, [pc, #548]	@ (80057ec <MX_LWIP_Init+0x234>)
 80055c6:	22c0      	movs	r2, #192	@ 0xc0
 80055c8:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80055ca:	4b88      	ldr	r3, [pc, #544]	@ (80057ec <MX_LWIP_Init+0x234>)
 80055cc:	22a8      	movs	r2, #168	@ 0xa8
 80055ce:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 35;
 80055d0:	4b86      	ldr	r3, [pc, #536]	@ (80057ec <MX_LWIP_Init+0x234>)
 80055d2:	2223      	movs	r2, #35	@ 0x23
 80055d4:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 5;
 80055d6:	4b85      	ldr	r3, [pc, #532]	@ (80057ec <MX_LWIP_Init+0x234>)
 80055d8:	2205      	movs	r2, #5
 80055da:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80055dc:	4b84      	ldr	r3, [pc, #528]	@ (80057f0 <MX_LWIP_Init+0x238>)
 80055de:	22ff      	movs	r2, #255	@ 0xff
 80055e0:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80055e2:	4b83      	ldr	r3, [pc, #524]	@ (80057f0 <MX_LWIP_Init+0x238>)
 80055e4:	22ff      	movs	r2, #255	@ 0xff
 80055e6:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80055e8:	4b81      	ldr	r3, [pc, #516]	@ (80057f0 <MX_LWIP_Init+0x238>)
 80055ea:	22ff      	movs	r2, #255	@ 0xff
 80055ec:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80055ee:	4b80      	ldr	r3, [pc, #512]	@ (80057f0 <MX_LWIP_Init+0x238>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80055f4:	4b7f      	ldr	r3, [pc, #508]	@ (80057f4 <MX_LWIP_Init+0x23c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80055fa:	4b7e      	ldr	r3, [pc, #504]	@ (80057f4 <MX_LWIP_Init+0x23c>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005600:	4b7c      	ldr	r3, [pc, #496]	@ (80057f4 <MX_LWIP_Init+0x23c>)
 8005602:	2200      	movs	r2, #0
 8005604:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005606:	4b7b      	ldr	r3, [pc, #492]	@ (80057f4 <MX_LWIP_Init+0x23c>)
 8005608:	2200      	movs	r2, #0
 800560a:	70da      	strb	r2, [r3, #3]

  	uint8_t state = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  	state |= (read_gpio_pin_stable(GPIOF, IP_SEL_1_Pin) << 0);
 8005612:	463b      	mov	r3, r7
 8005614:	469c      	mov	ip, r3
 8005616:	2120      	movs	r1, #32
 8005618:	4877      	ldr	r0, [pc, #476]	@ (80057f8 <MX_LWIP_Init+0x240>)
 800561a:	f7ff ffa3 	bl	8005564 <read_gpio_pin_stable.0>
 800561e:	4603      	mov	r3, r0
 8005620:	b25a      	sxtb	r2, r3
 8005622:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8005626:	4313      	orrs	r3, r2
 8005628:	b25b      	sxtb	r3, r3
 800562a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  	state |= (read_gpio_pin_stable(GPIOF, IP_SEL_2_Pin) << 1);
 800562e:	463b      	mov	r3, r7
 8005630:	469c      	mov	ip, r3
 8005632:	2140      	movs	r1, #64	@ 0x40
 8005634:	4870      	ldr	r0, [pc, #448]	@ (80057f8 <MX_LWIP_Init+0x240>)
 8005636:	f7ff ff95 	bl	8005564 <read_gpio_pin_stable.0>
 800563a:	4603      	mov	r3, r0
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	b25a      	sxtb	r2, r3
 8005640:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8005644:	4313      	orrs	r3, r2
 8005646:	b25b      	sxtb	r3, r3
 8005648:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  	state |= (read_gpio_pin_stable(GPIOF, IP_SEL_3_Pin) << 2);
 800564c:	463b      	mov	r3, r7
 800564e:	469c      	mov	ip, r3
 8005650:	2180      	movs	r1, #128	@ 0x80
 8005652:	4869      	ldr	r0, [pc, #420]	@ (80057f8 <MX_LWIP_Init+0x240>)
 8005654:	f7ff ff86 	bl	8005564 <read_gpio_pin_stable.0>
 8005658:	4603      	mov	r3, r0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	b25a      	sxtb	r2, r3
 800565e:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8005662:	4313      	orrs	r3, r2
 8005664:	b25b      	sxtb	r3, r3
 8005666:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  	state |= (read_gpio_pin_stable(GPIOF, IP_SEL_4_Pin) << 3);
 800566a:	463b      	mov	r3, r7
 800566c:	469c      	mov	ip, r3
 800566e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005672:	4861      	ldr	r0, [pc, #388]	@ (80057f8 <MX_LWIP_Init+0x240>)
 8005674:	f7ff ff76 	bl	8005564 <read_gpio_pin_stable.0>
 8005678:	4603      	mov	r3, r0
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	b25a      	sxtb	r2, r3
 800567e:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8005682:	4313      	orrs	r3, r2
 8005684:	b25b      	sxtb	r3, r3
 8005686:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  	slot = state;
 800568a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800568e:	4a5b      	ldr	r2, [pc, #364]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005690:	6013      	str	r3, [r2, #0]
  	printf("Calculated slot number: %d\n", slot);
 8005692:	4b5a      	ldr	r3, [pc, #360]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	4859      	ldr	r0, [pc, #356]	@ (8005800 <MX_LWIP_Init+0x248>)
 800569a:	f00b fd95 	bl	80111c8 <iprintf>

  	// Define the two IP tables (for local and remote IPs)
  	const uint8_t ip_table_0[][4] = {
 800569e:	4b59      	ldr	r3, [pc, #356]	@ (8005804 <MX_LWIP_Init+0x24c>)
 80056a0:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80056a4:	461d      	mov	r5, r3
 80056a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80056b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		{192, 168, 35, 63},  // Slot 13
  		{192, 168, 35, 64},  // Slot 14
  		{192, 168, 35, 65},  // Slot 15
  	};

  	const uint8_t ip_table_1[][4] = {
 80056ba:	4b53      	ldr	r3, [pc, #332]	@ (8005808 <MX_LWIP_Init+0x250>)
 80056bc:	1d3c      	adds	r4, r7, #4
 80056be:	461d      	mov	r5, r3
 80056c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80056d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		{192, 168, 35, 114},  // Slot 14
  		{192, 168, 35, 115},  // Slot 15
  	};

  	// Read the IP_SEL_0 pin and select the correct IP table
  	GPIO_PinState ip_sel_0_state = HAL_GPIO_ReadPin(GPIOF, IP_SEL_0_Pin);
 80056d4:	2110      	movs	r1, #16
 80056d6:	4848      	ldr	r0, [pc, #288]	@ (80057f8 <MX_LWIP_Init+0x240>)
 80056d8:	f7fe f9be 	bl	8003a58 <HAL_GPIO_ReadPin>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  	LWIP_PLATFORM_DIAG(("IP_SEL_0 state: %d\n", ip_sel_0_state));
 80056e2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80056e6:	4619      	mov	r1, r3
 80056e8:	4848      	ldr	r0, [pc, #288]	@ (800580c <MX_LWIP_Init+0x254>)
 80056ea:	f00b fd6d 	bl	80111c8 <iprintf>

  	if (slot < (sizeof(ip_table_0) / sizeof(ip_table_0[0]))) {
 80056ee:	4b43      	ldr	r3, [pc, #268]	@ (80057fc <MX_LWIP_Init+0x244>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	f200 8092 	bhi.w	800581c <MX_LWIP_Init+0x264>
  		if (ip_sel_0_state == GPIO_PIN_SET) {
 80056f8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d13f      	bne.n	8005780 <MX_LWIP_Init+0x1c8>
  			// IP_SEL_0 is high, use ip_table_1 for local IP
  			IP_ADDRESS[0] = ip_table_1[slot][0];
 8005700:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	3388      	adds	r3, #136	@ 0x88
 8005708:	443b      	add	r3, r7
 800570a:	f813 2c84 	ldrb.w	r2, [r3, #-132]
 800570e:	4b37      	ldr	r3, [pc, #220]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005710:	701a      	strb	r2, [r3, #0]
  			IP_ADDRESS[1] = ip_table_1[slot][1];
 8005712:	4b3a      	ldr	r3, [pc, #232]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	3388      	adds	r3, #136	@ 0x88
 800571a:	443b      	add	r3, r7
 800571c:	f813 2c83 	ldrb.w	r2, [r3, #-131]
 8005720:	4b32      	ldr	r3, [pc, #200]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005722:	705a      	strb	r2, [r3, #1]
  			IP_ADDRESS[2] = ip_table_1[slot][2];
 8005724:	4b35      	ldr	r3, [pc, #212]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	3388      	adds	r3, #136	@ 0x88
 800572c:	443b      	add	r3, r7
 800572e:	f813 2c82 	ldrb.w	r2, [r3, #-130]
 8005732:	4b2e      	ldr	r3, [pc, #184]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005734:	709a      	strb	r2, [r3, #2]
  			IP_ADDRESS[3] = ip_table_1[slot][3];
 8005736:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	3388      	adds	r3, #136	@ 0x88
 800573e:	443b      	add	r3, r7
 8005740:	f813 2c81 	ldrb.w	r2, [r3, #-129]
 8005744:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005746:	70da      	strb	r2, [r3, #3]
  			LWIP_PLATFORM_DIAG(("Using ip_table_1 for local IP: %d.%d.%d.%d\n",
 8005748:	4b28      	ldr	r3, [pc, #160]	@ (80057ec <MX_LWIP_Init+0x234>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	461a      	mov	r2, r3
 8005754:	4b25      	ldr	r3, [pc, #148]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005756:	789b      	ldrb	r3, [r3, #2]
 8005758:	4618      	mov	r0, r3
 800575a:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <MX_LWIP_Init+0x234>)
 800575c:	78db      	ldrb	r3, [r3, #3]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4603      	mov	r3, r0
 8005762:	482b      	ldr	r0, [pc, #172]	@ (8005810 <MX_LWIP_Init+0x258>)
 8005764:	f00b fd30 	bl	80111c8 <iprintf>
  								IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]));

  			// Add 15 to slot number as per requirement
  			slot += 15;
 8005768:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <MX_LWIP_Init+0x244>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330f      	adds	r3, #15
 800576e:	4a23      	ldr	r2, [pc, #140]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005770:	6013      	str	r3, [r2, #0]
  			LWIP_PLATFORM_DIAG(("Slot adjusted to: %d\n", slot));
 8005772:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4619      	mov	r1, r3
 8005778:	4826      	ldr	r0, [pc, #152]	@ (8005814 <MX_LWIP_Init+0x25c>)
 800577a:	f00b fd25 	bl	80111c8 <iprintf>
 800577e:	e062      	b.n	8005846 <MX_LWIP_Init+0x28e>
  			// Optionally, set remote server IP from ip_table_0
  			// Example:
  			// udp_set_server_ip(ip_table_0[slot - 15]);
  		} else {
  			// IP_SEL_0 is low, use ip_table_0 for local IP
  			IP_ADDRESS[0] = ip_table_0[slot][0];
 8005780:	4b1e      	ldr	r3, [pc, #120]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	3388      	adds	r3, #136	@ 0x88
 8005788:	443b      	add	r3, r7
 800578a:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800578e:	4b17      	ldr	r3, [pc, #92]	@ (80057ec <MX_LWIP_Init+0x234>)
 8005790:	701a      	strb	r2, [r3, #0]
  			IP_ADDRESS[1] = ip_table_0[slot][1];
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <MX_LWIP_Init+0x244>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	3388      	adds	r3, #136	@ 0x88
 800579a:	443b      	add	r3, r7
 800579c:	f813 2c43 	ldrb.w	r2, [r3, #-67]
 80057a0:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057a2:	705a      	strb	r2, [r3, #1]
  			IP_ADDRESS[2] = ip_table_0[slot][2];
 80057a4:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <MX_LWIP_Init+0x244>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	3388      	adds	r3, #136	@ 0x88
 80057ac:	443b      	add	r3, r7
 80057ae:	f813 2c42 	ldrb.w	r2, [r3, #-66]
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057b4:	709a      	strb	r2, [r3, #2]
  			IP_ADDRESS[3] = ip_table_0[slot][3];
 80057b6:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <MX_LWIP_Init+0x244>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	3388      	adds	r3, #136	@ 0x88
 80057be:	443b      	add	r3, r7
 80057c0:	f813 2c41 	ldrb.w	r2, [r3, #-65]
 80057c4:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057c6:	70da      	strb	r2, [r3, #3]
  			LWIP_PLATFORM_DIAG(("Using ip_table_0 for local IP: %d.%d.%d.%d\n",
 80057c8:	4b08      	ldr	r3, [pc, #32]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	461a      	mov	r2, r3
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057d6:	789b      	ldrb	r3, [r3, #2]
 80057d8:	4618      	mov	r0, r3
 80057da:	4b04      	ldr	r3, [pc, #16]	@ (80057ec <MX_LWIP_Init+0x234>)
 80057dc:	78db      	ldrb	r3, [r3, #3]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4603      	mov	r3, r0
 80057e2:	480d      	ldr	r0, [pc, #52]	@ (8005818 <MX_LWIP_Init+0x260>)
 80057e4:	f00b fcf0 	bl	80111c8 <iprintf>
 80057e8:	e02d      	b.n	8005846 <MX_LWIP_Init+0x28e>
 80057ea:	bf00      	nop
 80057ec:	24000204 	.word	0x24000204
 80057f0:	24000208 	.word	0x24000208
 80057f4:	2400020c 	.word	0x2400020c
 80057f8:	58021400 	.word	0x58021400
 80057fc:	24000148 	.word	0x24000148
 8005800:	080123f4 	.word	0x080123f4
 8005804:	080124b0 	.word	0x080124b0
 8005808:	080124f0 	.word	0x080124f0
 800580c:	08012410 	.word	0x08012410
 8005810:	08012424 	.word	0x08012424
 8005814:	08012450 	.word	0x08012450
 8005818:	08012468 	.word	0x08012468
  			// Example:
  			// udp_set_server_ip(ip_table_1[slot]);
  		}
  	} else {
  		// Handle invalid slot number
  		printf("Invalid slot number: %d\n", slot);
 800581c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a1c <MX_LWIP_Init+0x464>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4619      	mov	r1, r3
 8005822:	487f      	ldr	r0, [pc, #508]	@ (8005a20 <MX_LWIP_Init+0x468>)
 8005824:	f00b fcd0 	bl	80111c8 <iprintf>
  		// Set a default IP address or handle error as needed
  		IP_ADDRESS[0] = 192;
 8005828:	4b7e      	ldr	r3, [pc, #504]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800582a:	22c0      	movs	r2, #192	@ 0xc0
 800582c:	701a      	strb	r2, [r3, #0]
  		IP_ADDRESS[1] = 168;
 800582e:	4b7d      	ldr	r3, [pc, #500]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005830:	22a8      	movs	r2, #168	@ 0xa8
 8005832:	705a      	strb	r2, [r3, #1]
  		IP_ADDRESS[2] = 35;
 8005834:	4b7b      	ldr	r3, [pc, #492]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005836:	2223      	movs	r2, #35	@ 0x23
 8005838:	709a      	strb	r2, [r3, #2]
  		IP_ADDRESS[3] = 50;  // Default IP address
 800583a:	4b7a      	ldr	r3, [pc, #488]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800583c:	2232      	movs	r2, #50	@ 0x32
 800583e:	70da      	strb	r2, [r3, #3]
  		slot = 0;  // Reset slot to default
 8005840:	4b76      	ldr	r3, [pc, #472]	@ (8005a1c <MX_LWIP_Init+0x464>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
  #endif

/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8005846:	f002 f803 	bl	8007850 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800584a:	4b76      	ldr	r3, [pc, #472]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	061a      	lsls	r2, r3, #24
 8005850:	4b74      	ldr	r3, [pc, #464]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	431a      	orrs	r2, r3
 8005858:	4b72      	ldr	r3, [pc, #456]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800585a:	789b      	ldrb	r3, [r3, #2]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	4313      	orrs	r3, r2
 8005860:	4a70      	ldr	r2, [pc, #448]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005862:	78d2      	ldrb	r2, [r2, #3]
 8005864:	4313      	orrs	r3, r2
 8005866:	061a      	lsls	r2, r3, #24
 8005868:	4b6e      	ldr	r3, [pc, #440]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	0619      	lsls	r1, r3, #24
 800586e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	4319      	orrs	r1, r3
 8005876:	4b6b      	ldr	r3, [pc, #428]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005878:	789b      	ldrb	r3, [r3, #2]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	430b      	orrs	r3, r1
 800587e:	4969      	ldr	r1, [pc, #420]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005880:	78c9      	ldrb	r1, [r1, #3]
 8005882:	430b      	orrs	r3, r1
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800588a:	431a      	orrs	r2, r3
 800588c:	4b65      	ldr	r3, [pc, #404]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	0619      	lsls	r1, r3, #24
 8005892:	4b64      	ldr	r3, [pc, #400]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	4319      	orrs	r1, r3
 800589a:	4b62      	ldr	r3, [pc, #392]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 800589c:	789b      	ldrb	r3, [r3, #2]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	430b      	orrs	r3, r1
 80058a2:	4960      	ldr	r1, [pc, #384]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 80058a4:	78c9      	ldrb	r1, [r1, #3]
 80058a6:	430b      	orrs	r3, r1
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80058ae:	431a      	orrs	r2, r3
 80058b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	0619      	lsls	r1, r3, #24
 80058b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	4319      	orrs	r1, r3
 80058be:	4b59      	ldr	r3, [pc, #356]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 80058c0:	789b      	ldrb	r3, [r3, #2]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	430b      	orrs	r3, r1
 80058c6:	4957      	ldr	r1, [pc, #348]	@ (8005a24 <MX_LWIP_Init+0x46c>)
 80058c8:	78c9      	ldrb	r1, [r1, #3]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	0e1b      	lsrs	r3, r3, #24
 80058ce:	4313      	orrs	r3, r2
 80058d0:	4a55      	ldr	r2, [pc, #340]	@ (8005a28 <MX_LWIP_Init+0x470>)
 80058d2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80058d4:	4b55      	ldr	r3, [pc, #340]	@ (8005a2c <MX_LWIP_Init+0x474>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	061a      	lsls	r2, r3, #24
 80058da:	4b54      	ldr	r3, [pc, #336]	@ (8005a2c <MX_LWIP_Init+0x474>)
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	431a      	orrs	r2, r3
 80058e2:	4b52      	ldr	r3, [pc, #328]	@ (8005a2c <MX_LWIP_Init+0x474>)
 80058e4:	789b      	ldrb	r3, [r3, #2]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	4313      	orrs	r3, r2
 80058ea:	4a50      	ldr	r2, [pc, #320]	@ (8005a2c <MX_LWIP_Init+0x474>)
 80058ec:	78d2      	ldrb	r2, [r2, #3]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	061a      	lsls	r2, r3, #24
 80058f2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a2c <MX_LWIP_Init+0x474>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	0619      	lsls	r1, r3, #24
 80058f8:	4b4c      	ldr	r3, [pc, #304]	@ (8005a2c <MX_LWIP_Init+0x474>)
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	4319      	orrs	r1, r3
 8005900:	4b4a      	ldr	r3, [pc, #296]	@ (8005a2c <MX_LWIP_Init+0x474>)
 8005902:	789b      	ldrb	r3, [r3, #2]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	430b      	orrs	r3, r1
 8005908:	4948      	ldr	r1, [pc, #288]	@ (8005a2c <MX_LWIP_Init+0x474>)
 800590a:	78c9      	ldrb	r1, [r1, #3]
 800590c:	430b      	orrs	r3, r1
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005914:	431a      	orrs	r2, r3
 8005916:	4b45      	ldr	r3, [pc, #276]	@ (8005a2c <MX_LWIP_Init+0x474>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	0619      	lsls	r1, r3, #24
 800591c:	4b43      	ldr	r3, [pc, #268]	@ (8005a2c <MX_LWIP_Init+0x474>)
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	4319      	orrs	r1, r3
 8005924:	4b41      	ldr	r3, [pc, #260]	@ (8005a2c <MX_LWIP_Init+0x474>)
 8005926:	789b      	ldrb	r3, [r3, #2]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	430b      	orrs	r3, r1
 800592c:	493f      	ldr	r1, [pc, #252]	@ (8005a2c <MX_LWIP_Init+0x474>)
 800592e:	78c9      	ldrb	r1, [r1, #3]
 8005930:	430b      	orrs	r3, r1
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005938:	431a      	orrs	r2, r3
 800593a:	4b3c      	ldr	r3, [pc, #240]	@ (8005a2c <MX_LWIP_Init+0x474>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	0619      	lsls	r1, r3, #24
 8005940:	4b3a      	ldr	r3, [pc, #232]	@ (8005a2c <MX_LWIP_Init+0x474>)
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	4319      	orrs	r1, r3
 8005948:	4b38      	ldr	r3, [pc, #224]	@ (8005a2c <MX_LWIP_Init+0x474>)
 800594a:	789b      	ldrb	r3, [r3, #2]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	430b      	orrs	r3, r1
 8005950:	4936      	ldr	r1, [pc, #216]	@ (8005a2c <MX_LWIP_Init+0x474>)
 8005952:	78c9      	ldrb	r1, [r1, #3]
 8005954:	430b      	orrs	r3, r1
 8005956:	0e1b      	lsrs	r3, r3, #24
 8005958:	4313      	orrs	r3, r2
 800595a:	4a35      	ldr	r2, [pc, #212]	@ (8005a30 <MX_LWIP_Init+0x478>)
 800595c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800595e:	4b35      	ldr	r3, [pc, #212]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	061a      	lsls	r2, r3, #24
 8005964:	4b33      	ldr	r3, [pc, #204]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	431a      	orrs	r2, r3
 800596c:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 800596e:	789b      	ldrb	r3, [r3, #2]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	4313      	orrs	r3, r2
 8005974:	4a2f      	ldr	r2, [pc, #188]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 8005976:	78d2      	ldrb	r2, [r2, #3]
 8005978:	4313      	orrs	r3, r2
 800597a:	061a      	lsls	r2, r3, #24
 800597c:	4b2d      	ldr	r3, [pc, #180]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	0619      	lsls	r1, r3, #24
 8005982:	4b2c      	ldr	r3, [pc, #176]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	4319      	orrs	r1, r3
 800598a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 800598c:	789b      	ldrb	r3, [r3, #2]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	430b      	orrs	r3, r1
 8005992:	4928      	ldr	r1, [pc, #160]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 8005994:	78c9      	ldrb	r1, [r1, #3]
 8005996:	430b      	orrs	r3, r1
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800599e:	431a      	orrs	r2, r3
 80059a0:	4b24      	ldr	r3, [pc, #144]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	0619      	lsls	r1, r3, #24
 80059a6:	4b23      	ldr	r3, [pc, #140]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	4319      	orrs	r1, r3
 80059ae:	4b21      	ldr	r3, [pc, #132]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059b0:	789b      	ldrb	r3, [r3, #2]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	430b      	orrs	r3, r1
 80059b6:	491f      	ldr	r1, [pc, #124]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059b8:	78c9      	ldrb	r1, [r1, #3]
 80059ba:	430b      	orrs	r3, r1
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059c2:	431a      	orrs	r2, r3
 80059c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	0619      	lsls	r1, r3, #24
 80059ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	4319      	orrs	r1, r3
 80059d2:	4b18      	ldr	r3, [pc, #96]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059d4:	789b      	ldrb	r3, [r3, #2]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	430b      	orrs	r3, r1
 80059da:	4916      	ldr	r1, [pc, #88]	@ (8005a34 <MX_LWIP_Init+0x47c>)
 80059dc:	78c9      	ldrb	r1, [r1, #3]
 80059de:	430b      	orrs	r3, r1
 80059e0:	0e1b      	lsrs	r3, r3, #24
 80059e2:	4313      	orrs	r3, r2
 80059e4:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <MX_LWIP_Init+0x480>)
 80059e6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80059e8:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <MX_LWIP_Init+0x484>)
 80059ea:	9302      	str	r3, [sp, #8]
 80059ec:	4b14      	ldr	r3, [pc, #80]	@ (8005a40 <MX_LWIP_Init+0x488>)
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	2300      	movs	r3, #0
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	4b10      	ldr	r3, [pc, #64]	@ (8005a38 <MX_LWIP_Init+0x480>)
 80059f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a30 <MX_LWIP_Init+0x478>)
 80059f8:	490b      	ldr	r1, [pc, #44]	@ (8005a28 <MX_LWIP_Init+0x470>)
 80059fa:	4812      	ldr	r0, [pc, #72]	@ (8005a44 <MX_LWIP_Init+0x48c>)
 80059fc:	f003 fd20 	bl	8009440 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005a00:	4810      	ldr	r0, [pc, #64]	@ (8005a44 <MX_LWIP_Init+0x48c>)
 8005a02:	f003 fed3 	bl	80097ac <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005a06:	480f      	ldr	r0, [pc, #60]	@ (8005a44 <MX_LWIP_Init+0x48c>)
 8005a08:	f003 fee0 	bl	80097cc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005a0c:	490e      	ldr	r1, [pc, #56]	@ (8005a48 <MX_LWIP_Init+0x490>)
 8005a0e:	480d      	ldr	r0, [pc, #52]	@ (8005a44 <MX_LWIP_Init+0x48c>)
 8005a10:	f003 ffde 	bl	80099d0 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005a14:	bf00      	nop
 8005a16:	3788      	adds	r7, #136	@ 0x88
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1c:	24000148 	.word	0x24000148
 8005a20:	08012494 	.word	0x08012494
 8005a24:	24000204 	.word	0x24000204
 8005a28:	240001f8 	.word	0x240001f8
 8005a2c:	24000208 	.word	0x24000208
 8005a30:	240001fc 	.word	0x240001fc
 8005a34:	2400020c 	.word	0x2400020c
 8005a38:	24000200 	.word	0x24000200
 8005a3c:	080071c5 	.word	0x080071c5
 8005a40:	08005db9 	.word	0x08005db9
 8005a44:	240001c0 	.word	0x240001c0
 8005a48:	08005a9d 	.word	0x08005a9d

08005a4c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005a54:	f7fb fda2 	bl	800159c <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <Ethernet_Link_Periodic_Handle+0x30>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b63      	cmp	r3, #99	@ 0x63
 8005a62:	d907      	bls.n	8005a74 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005a64:	f7fb fd9a 	bl	800159c <HAL_GetTick>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4a04      	ldr	r2, [pc, #16]	@ (8005a7c <Ethernet_Link_Periodic_Handle+0x30>)
 8005a6c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 faf2 	bl	8006058 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	240001bc 	.word	0x240001bc

08005a80 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005a84:	4804      	ldr	r0, [pc, #16]	@ (8005a98 <MX_LWIP_Process+0x18>)
 8005a86:	f000 f977 	bl	8005d78 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005a8a:	f00a fda5 	bl	80105d8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005a8e:	4802      	ldr	r0, [pc, #8]	@ (8005a98 <MX_LWIP_Process+0x18>)
 8005a90:	f7ff ffdc 	bl	8005a4c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005a94:	bf00      	nop
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	240001c0 	.word	0x240001c0

08005a9c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	77fb      	strb	r3, [r7, #31]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005abc:	4b55      	ldr	r3, [pc, #340]	@ (8005c14 <low_level_init+0x164>)
 8005abe:	4a56      	ldr	r2, [pc, #344]	@ (8005c18 <low_level_init+0x168>)
 8005ac0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	763b      	strb	r3, [r7, #24]
  MACAddr[1] = 0x80;
 8005ac6:	2380      	movs	r3, #128	@ 0x80
 8005ac8:	767b      	strb	r3, [r7, #25]
  MACAddr[2] = 0xE1;
 8005aca:	23e1      	movs	r3, #225	@ 0xe1
 8005acc:	76bb      	strb	r3, [r7, #26]
  MACAddr[3] = 0x00;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	76fb      	strb	r3, [r7, #27]
  MACAddr[4] = 0x00;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	773b      	strb	r3, [r7, #28]
  MACAddr[5] = 0x02;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	777b      	strb	r3, [r7, #29]
  heth.Init.MACAddr = &MACAddr[0];
 8005ada:	4a4e      	ldr	r2, [pc, #312]	@ (8005c14 <low_level_init+0x164>)
 8005adc:	f107 0318 	add.w	r3, r7, #24
 8005ae0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8005c14 <low_level_init+0x164>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8005c14 <low_level_init+0x164>)
 8005aea:	4a4c      	ldr	r2, [pc, #304]	@ (8005c1c <low_level_init+0x16c>)
 8005aec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005aee:	4b49      	ldr	r3, [pc, #292]	@ (8005c14 <low_level_init+0x164>)
 8005af0:	4a4b      	ldr	r2, [pc, #300]	@ (8005c20 <low_level_init+0x170>)
 8005af2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005af4:	4b47      	ldr	r3, [pc, #284]	@ (8005c14 <low_level_init+0x164>)
 8005af6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005afa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    // Read the STM32 unique ID (96-bit value)
    uint32_t uid[3];
    uid[0] = *(uint32_t*)0x1FF1E800; // UID[31:0] - Low word (coordinates)
 8005afc:	4b49      	ldr	r3, [pc, #292]	@ (8005c24 <low_level_init+0x174>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
    uid[1] = *(uint32_t*)0x1FF1E804; // UID[63:32] - Middle word (wafer and part of lot number)
 8005b02:	4b49      	ldr	r3, [pc, #292]	@ (8005c28 <low_level_init+0x178>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]
    uid[2] = *(uint32_t*)0x1FF1E808; // UID[95:64] - High word (remaining lot number)
 8005b08:	4b48      	ldr	r3, [pc, #288]	@ (8005c2c <low_level_init+0x17c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	617b      	str	r3, [r7, #20]

    // Construct the MAC address using UID values to reduce duplicates
    MACAddr[0] = 0x00; // OUI - Fixed value
 8005b0e:	2300      	movs	r3, #0
 8005b10:	763b      	strb	r3, [r7, #24]
    MACAddr[1] = 0x80; // OUI - Fixed value
 8005b12:	2380      	movs	r3, #128	@ 0x80
 8005b14:	767b      	strb	r3, [r7, #25]
    MACAddr[2] = 0xE1; // OUI - Fixed value
 8005b16:	23e1      	movs	r3, #225	@ 0xe1
 8005b18:	76bb      	strb	r3, [r7, #26]
    // MACAddr[3]: Combine wafer number (UID[39:32]) with bits from lot number (UID[63:56])
    MACAddr[3] = (uint8_t)((uid[1] & 0xFF) ^ ((uid[2] >> 8) & 0xFF));
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4053      	eors	r3, r2
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	76fb      	strb	r3, [r7, #27]
    // MACAddr[4]: X coordinate (UID[31:16])
    MACAddr[4] = (uint8_t)((uid[0] >> 16) & 0xFF);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	773b      	strb	r3, [r7, #28]
    // MACAddr[5]: Y coordinate (UID[15:0])
    MACAddr[5] = (uint8_t)(uid[0] & 0xFF);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	777b      	strb	r3, [r7, #29]

    heth.Init.MACAddr = &MACAddr[0];
 8005b38:	4a36      	ldr	r2, [pc, #216]	@ (8005c14 <low_level_init+0x164>)
 8005b3a:	f107 0318 	add.w	r3, r7, #24
 8005b3e:	6053      	str	r3, [r2, #4]
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b40:	4834      	ldr	r0, [pc, #208]	@ (8005c14 <low_level_init+0x164>)
 8005b42:	f7fb feef 	bl	8001924 <HAL_ETH_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	77fb      	strb	r3, [r7, #31]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b4a:	2238      	movs	r2, #56	@ 0x38
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4838      	ldr	r0, [pc, #224]	@ (8005c30 <low_level_init+0x180>)
 8005b50:	f00b fc92 	bl	8011478 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b54:	4b36      	ldr	r3, [pc, #216]	@ (8005c30 <low_level_init+0x180>)
 8005b56:	2221      	movs	r2, #33	@ 0x21
 8005b58:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b5a:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <low_level_init+0x180>)
 8005b5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005b60:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b62:	4b33      	ldr	r3, [pc, #204]	@ (8005c30 <low_level_init+0x180>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b68:	4832      	ldr	r0, [pc, #200]	@ (8005c34 <low_level_init+0x184>)
 8005b6a:	f003 fb31 	bl	80091d0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2206      	movs	r2, #6
 8005b72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b76:	4b27      	ldr	r3, [pc, #156]	@ (8005c14 <low_level_init+0x164>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b82:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <low_level_init+0x164>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	785a      	ldrb	r2, [r3, #1]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005b8e:	4b21      	ldr	r3, [pc, #132]	@ (8005c14 <low_level_init+0x164>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	789a      	ldrb	r2, [r3, #2]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c14 <low_level_init+0x164>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	78da      	ldrb	r2, [r3, #3]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c14 <low_level_init+0x164>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	791a      	ldrb	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005bb2:	4b18      	ldr	r3, [pc, #96]	@ (8005c14 <low_level_init+0x164>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	795a      	ldrb	r2, [r3, #5]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005bc4:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005bcc:	f043 030a 	orr.w	r3, r3, #10
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005bd8:	4917      	ldr	r1, [pc, #92]	@ (8005c38 <low_level_init+0x188>)
 8005bda:	4818      	ldr	r0, [pc, #96]	@ (8005c3c <low_level_init+0x18c>)
 8005bdc:	f7fb fb87 	bl	80012ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005be0:	4816      	ldr	r0, [pc, #88]	@ (8005c3c <low_level_init+0x18c>)
 8005be2:	f7fb fbb6 	bl	8001352 <LAN8742_Init>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <low_level_init+0x14a>
  {
    netif_set_link_down(netif);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f003 febf 	bl	8009970 <netif_set_link_down>
    netif_set_down(netif);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f003 fe56 	bl	80098a4 <netif_set_down>
 8005bf8:	e008      	b.n	8005c0c <low_level_init+0x15c>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005bfa:	7ffb      	ldrb	r3, [r7, #31]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d103      	bne.n	8005c08 <low_level_init+0x158>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fa29 	bl	8006058 <ethernet_link_check_state>
 8005c06:	e001      	b.n	8005c0c <low_level_init+0x15c>
  }
  else
  {
    Error_Handler();
 8005c08:	f7fb f88e 	bl	8000d28 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	24000218 	.word	0x24000218
 8005c18:	40028000 	.word	0x40028000
 8005c1c:	30040100 	.word	0x30040100
 8005c20:	30040000 	.word	0x30040000
 8005c24:	1ff1e800 	.word	0x1ff1e800
 8005c28:	1ff1e804 	.word	0x1ff1e804
 8005c2c:	1ff1e808 	.word	0x1ff1e808
 8005c30:	240002c8 	.word	0x240002c8
 8005c34:	080154ec 	.word	0x080154ec
 8005c38:	24000024 	.word	0x24000024
 8005c3c:	24000300 	.word	0x24000300

08005c40 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b092      	sub	sp, #72	@ 0x48
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005c58:	f107 030c 	add.w	r3, r7, #12
 8005c5c:	2230      	movs	r2, #48	@ 0x30
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f00b fc09 	bl	8011478 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	2230      	movs	r2, #48	@ 0x30
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f00b fc02 	bl	8011478 <memset>

  for(q = p; q != NULL; q = q->next)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c78:	e045      	b.n	8005d06 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d902      	bls.n	8005c86 <low_level_output+0x46>
      return ERR_IF;
 8005c80:	f06f 030b 	mvn.w	r3, #11
 8005c84:	e055      	b.n	8005d32 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	3348      	adds	r3, #72	@ 0x48
 8005c96:	443b      	add	r3, r7
 8005c98:	3b3c      	subs	r3, #60	@ 0x3c
 8005c9a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9e:	895b      	ldrh	r3, [r3, #10]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	3348      	adds	r3, #72	@ 0x48
 8005cae:	443b      	add	r3, r7
 8005cb0:	3b38      	subs	r3, #56	@ 0x38
 8005cb2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cbc:	1e5a      	subs	r2, r3, #1
 8005cbe:	f107 000c 	add.w	r0, r7, #12
 8005cc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	440b      	add	r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	18c1      	adds	r1, r0, r3
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	3348      	adds	r3, #72	@ 0x48
 8005cd8:	443b      	add	r3, r7
 8005cda:	3b34      	subs	r3, #52	@ 0x34
 8005cdc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce8:	4613      	mov	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	3348      	adds	r3, #72	@ 0x48
 8005cf2:	443b      	add	r3, r7
 8005cf4:	3b34      	subs	r3, #52	@ 0x34
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1b6      	bne.n	8005c7a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	891b      	ldrh	r3, [r3, #8]
 8005d10:	461a      	mov	r2, r3
 8005d12:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <low_level_output+0xfc>)
 8005d14:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d16:	4a09      	ldr	r2, [pc, #36]	@ (8005d3c <low_level_output+0xfc>)
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d1e:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <low_level_output+0xfc>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005d24:	2214      	movs	r2, #20
 8005d26:	4905      	ldr	r1, [pc, #20]	@ (8005d3c <low_level_output+0xfc>)
 8005d28:	4805      	ldr	r0, [pc, #20]	@ (8005d40 <low_level_output+0x100>)
 8005d2a:	f7fb ffab 	bl	8001c84 <HAL_ETH_Transmit>

  return errval;
 8005d2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3748      	adds	r7, #72	@ 0x48
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	240002c8 	.word	0x240002c8
 8005d40:	24000218 	.word	0x24000218

08005d44 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005d50:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <low_level_input+0x2c>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d105      	bne.n	8005d64 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4805      	ldr	r0, [pc, #20]	@ (8005d74 <low_level_input+0x30>)
 8005d60:	f7fc f827 	bl	8001db2 <HAL_ETH_ReadData>
  }

  return p;
 8005d64:	68fb      	ldr	r3, [r7, #12]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	24000214 	.word	0x24000214
 8005d74:	24000218 	.word	0x24000218

08005d78 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ffdd 	bl	8005d44 <low_level_input>
 8005d8a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	4798      	blx	r3
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f004 f992 	bl	800a0cc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ea      	bne.n	8005d84 <ethernetif_input+0xc>
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <ethernetif_init+0x1c>
 8005dc6:	4b10      	ldr	r3, [pc, #64]	@ (8005e08 <ethernetif_init+0x50>)
 8005dc8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8005dcc:	490f      	ldr	r1, [pc, #60]	@ (8005e0c <ethernetif_init+0x54>)
 8005dce:	4810      	ldr	r0, [pc, #64]	@ (8005e10 <ethernetif_init+0x58>)
 8005dd0:	f00b f9fa 	bl	80111c8 <iprintf>

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e14 <ethernetif_init+0x5c>)
 8005dd8:	625a      	str	r2, [r3, #36]	@ 0x24
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2273      	movs	r2, #115	@ 0x73
 8005dde:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2274      	movs	r2, #116	@ 0x74
 8005de6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <ethernetif_init+0x60>)
 8005dee:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <ethernetif_init+0x64>)
 8005df4:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fe5a 	bl	8005ab0 <low_level_init>

  return ERR_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	08012530 	.word	0x08012530
 8005e0c:	0801254c 	.word	0x0801254c
 8005e10:	0801255c 	.word	0x0801255c
 8005e14:	08012584 	.word	0x08012584
 8005e18:	08006bc5 	.word	0x08006bc5
 8005e1c:	08005c41 	.word	0x08005c41

08005e20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	4807      	ldr	r0, [pc, #28]	@ (8005e4c <pbuf_free_custom+0x2c>)
 8005e30:	f003 fab0 	bl	8009394 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005e34:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <pbuf_free_custom+0x30>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d102      	bne.n	8005e42 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005e3c:	4b04      	ldr	r3, [pc, #16]	@ (8005e50 <pbuf_free_custom+0x30>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
  }
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	080154ec 	.word	0x080154ec
 8005e50:	24000214 	.word	0x24000214

08005e54 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e58:	f7fb fba0 	bl	800159c <HAL_GetTick>
 8005e5c:	4603      	mov	r3, r0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08e      	sub	sp, #56	@ 0x38
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a49      	ldr	r2, [pc, #292]	@ (8005fa8 <HAL_ETH_MspInit+0x144>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f040 808b 	bne.w	8005f9e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005e88:	4b48      	ldr	r3, [pc, #288]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e8e:	4a47      	ldr	r2, [pc, #284]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e98:	4b44      	ldr	r3, [pc, #272]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005ea6:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005eac:	4a3f      	ldr	r2, [pc, #252]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005ec4:	4b39      	ldr	r3, [pc, #228]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005ec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005eca:	4a38      	ldr	r2, [pc, #224]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005ed4:	4b35      	ldr	r3, [pc, #212]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ee2:	4b32      	ldr	r3, [pc, #200]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ee8:	4a30      	ldr	r2, [pc, #192]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f00:	4b2a      	ldr	r3, [pc, #168]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f06:	4a29      	ldr	r2, [pc, #164]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f10:	4b26      	ldr	r3, [pc, #152]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f1e:	4b23      	ldr	r3, [pc, #140]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f24:	4a21      	ldr	r2, [pc, #132]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fac <HAL_ETH_MspInit+0x148>)
 8005f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PA1     ------> ETH_REF_CLK
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_13;
 8005f3c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f42:	2302      	movs	r3, #2
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f4e:	230b      	movs	r3, #11
 8005f50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f56:	4619      	mov	r1, r3
 8005f58:	4815      	ldr	r0, [pc, #84]	@ (8005fb0 <HAL_ETH_MspInit+0x14c>)
 8005f5a:	f7fd fbcd 	bl	80036f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8005f5e:	2332      	movs	r3, #50	@ 0x32
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f62:	2302      	movs	r3, #2
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f6e:	230b      	movs	r3, #11
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f76:	4619      	mov	r1, r3
 8005f78:	480e      	ldr	r0, [pc, #56]	@ (8005fb4 <HAL_ETH_MspInit+0x150>)
 8005f7a:	f7fd fbbd 	bl	80036f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8005f7e:	2386      	movs	r3, #134	@ 0x86
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f82:	2302      	movs	r3, #2
 8005f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f8e:	230b      	movs	r3, #11
 8005f90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f96:	4619      	mov	r1, r3
 8005f98:	4807      	ldr	r0, [pc, #28]	@ (8005fb8 <HAL_ETH_MspInit+0x154>)
 8005f9a:	f7fd fbad 	bl	80036f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3738      	adds	r7, #56	@ 0x38
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40028000 	.word	0x40028000
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	58021800 	.word	0x58021800
 8005fb4:	58020800 	.word	0x58020800
 8005fb8:	58020000 	.word	0x58020000

08005fbc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005fc0:	4802      	ldr	r0, [pc, #8]	@ (8005fcc <ETH_PHY_IO_Init+0x10>)
 8005fc2:	f7fc fac3 	bl	800254c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	24000218 	.word	0x24000218

08005fd0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return 0;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	4807      	ldr	r0, [pc, #28]	@ (8006010 <ETH_PHY_IO_ReadReg+0x30>)
 8005ff4:	f7fc f813 	bl	800201e <HAL_ETH_ReadPHYRegister>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	e000      	b.n	8006006 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	24000218 	.word	0x24000218

08006014 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	4807      	ldr	r0, [pc, #28]	@ (8006044 <ETH_PHY_IO_WriteReg+0x30>)
 8006028:	f7fc f84e 	bl	80020c8 <HAL_ETH_WritePHYRegister>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e000      	b.n	800603a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	24000218 	.word	0x24000218

08006048 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800604c:	f7fb faa6 	bl	800159c <HAL_GetTick>
 8006050:	4603      	mov	r3, r0
}
 8006052:	4618      	mov	r0, r3
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b0a0      	sub	sp, #128	@ 0x80
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	2264      	movs	r2, #100	@ 0x64
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f00b fa05 	bl	8011478 <memset>
  int32_t PHYLinkState = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006076:	2300      	movs	r3, #0
 8006078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800607a:	2300      	movs	r3, #0
 800607c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800607e:	483a      	ldr	r0, [pc, #232]	@ (8006168 <ethernet_link_check_state+0x110>)
 8006080:	f7fb f9b4 	bl	80013ec <LAN8742_GetLinkState>
 8006084:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800608c:	089b      	lsrs	r3, r3, #2
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00c      	beq.n	80060b2 <ethernet_link_check_state+0x5a>
 8006098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800609a:	2b01      	cmp	r3, #1
 800609c:	dc09      	bgt.n	80060b2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800609e:	4833      	ldr	r0, [pc, #204]	@ (800616c <ethernet_link_check_state+0x114>)
 80060a0:	f7fb fda0 	bl	8001be4 <HAL_ETH_Stop>
    netif_set_down(netif);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f003 fbfd 	bl	80098a4 <netif_set_down>
    netif_set_link_down(netif);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f003 fc60 	bl	8009970 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80060b0:	e055      	b.n	800615e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d14e      	bne.n	800615e <ethernet_link_check_state+0x106>
 80060c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	dd4b      	ble.n	800615e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80060c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c8:	3b02      	subs	r3, #2
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d82a      	bhi.n	8006124 <ethernet_link_check_state+0xcc>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <ethernet_link_check_state+0x7c>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060f7 	.word	0x080060f7
 80060dc:	08006107 	.word	0x08006107
 80060e0:	08006117 	.word	0x08006117
      duplex = ETH_FULLDUPLEX_MODE;
 80060e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80060ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060ee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80060f0:	2301      	movs	r3, #1
 80060f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80060f4:	e017      	b.n	8006126 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80060fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060fe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006100:	2301      	movs	r3, #1
 8006102:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006104:	e00f      	b.n	8006126 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800610a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800610c:	2300      	movs	r3, #0
 800610e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006110:	2301      	movs	r3, #1
 8006112:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006114:	e007      	b.n	8006126 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006116:	2300      	movs	r3, #0
 8006118:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800611a:	2300      	movs	r3, #0
 800611c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006122:	e000      	b.n	8006126 <ethernet_link_check_state+0xce>
      break;
 8006124:	bf00      	nop
    if(linkchanged)
 8006126:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d018      	beq.n	800615e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4619      	mov	r1, r3
 8006132:	480e      	ldr	r0, [pc, #56]	@ (800616c <ethernet_link_check_state+0x114>)
 8006134:	f7fc f81c 	bl	8002170 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006138:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800613c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800613e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006140:	f107 030c 	add.w	r3, r7, #12
 8006144:	4619      	mov	r1, r3
 8006146:	4809      	ldr	r0, [pc, #36]	@ (800616c <ethernet_link_check_state+0x114>)
 8006148:	f7fc f9e6 	bl	8002518 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800614c:	4807      	ldr	r0, [pc, #28]	@ (800616c <ethernet_link_check_state+0x114>)
 800614e:	f7fb fce7 	bl	8001b20 <HAL_ETH_Start>
      netif_set_up(netif);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f003 fb3a 	bl	80097cc <netif_set_up>
      netif_set_link_up(netif);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f003 fbd5 	bl	8009908 <netif_set_link_up>
}
 800615e:	bf00      	nop
 8006160:	3780      	adds	r7, #128	@ 0x80
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	24000300 	.word	0x24000300
 800616c:	24000218 	.word	0x24000218

08006170 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006178:	4812      	ldr	r0, [pc, #72]	@ (80061c4 <HAL_ETH_RxAllocateCallback+0x54>)
 800617a:	f003 f89d 	bl	80092b8 <memp_malloc_pool>
 800617e:	60f8      	str	r0, [r7, #12]
  if (p)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d014      	beq.n	80061b0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f103 0220 	add.w	r2, r3, #32
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a0d      	ldr	r2, [pc, #52]	@ (80061c8 <HAL_ETH_RxAllocateCallback+0x58>)
 8006194:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800619e:	9201      	str	r2, [sp, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2241      	movs	r2, #65	@ 0x41
 80061a6:	2100      	movs	r1, #0
 80061a8:	2000      	movs	r0, #0
 80061aa:	f003 fdd7 	bl	8009d5c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80061ae:	e005      	b.n	80061bc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80061b0:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_ETH_RxAllocateCallback+0x5c>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	080154ec 	.word	0x080154ec
 80061c8:	08005e21 	.word	0x08005e21
 80061cc:	24000214 	.word	0x24000214

080061d0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08e      	sub	sp, #56	@ 0x38
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */


  struct pbuf **ppStart = (struct pbuf **)pStart;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3b20      	subs	r3, #32
 80061ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	2200      	movs	r2, #0
 80061fa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	815a      	strh	r2, [r3, #10]
  printf("pStart: %p, pEnd: %p, buff: %p, Length: %d\n", *pStart, *pEnd, buff, Length);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6819      	ldr	r1, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	887b      	ldrh	r3, [r7, #2]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	482c      	ldr	r0, [pc, #176]	@ (80062c4 <HAL_ETH_RxLinkCallback+0xf4>)
 8006212:	f00a ffd9 	bl	80111c8 <iprintf>
  printf("p: %p, p->next: %p, p->tot_len: %d, p->len: %d\n", p, p->next, p->tot_len, p->len);
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621c:	891b      	ldrh	r3, [r3, #8]
 800621e:	4619      	mov	r1, r3
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	895b      	ldrh	r3, [r3, #10]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	460b      	mov	r3, r1
 8006228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800622a:	4827      	ldr	r0, [pc, #156]	@ (80062c8 <HAL_ETH_RxLinkCallback+0xf8>)
 800622c:	f00a ffcc 	bl	80111c8 <iprintf>
  /* Chain the buffer. */
  if (!*ppStart)
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <HAL_ETH_RxLinkCallback+0x70>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e003      	b.n	8006248 <HAL_ETH_RxLinkCallback+0x78>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006246:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624c:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006254:	e009      	b.n	800626a <HAL_ETH_RxLinkCallback+0x9a>
  {
    p->tot_len += Length;
 8006256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006258:	891a      	ldrh	r2, [r3, #8]
 800625a:	887b      	ldrh	r3, [r7, #2]
 800625c:	4413      	add	r3, r2
 800625e:	b29a      	uxth	r2, r3
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800626a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f2      	bne.n	8006256 <HAL_ETH_RxLinkCallback+0x86>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	623a      	str	r2, [r7, #32]
 8006276:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd1d      	ble.n	80062ba <HAL_ETH_RxLinkCallback+0xea>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f003 021f 	and.w	r2, r3, #31
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800628e:	f3bf 8f4f 	dsb	sy
}
 8006292:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006294:	4a0d      	ldr	r2, [pc, #52]	@ (80062cc <HAL_ETH_RxLinkCallback+0xfc>)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	3320      	adds	r3, #32
 80062a0:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	3b20      	subs	r3, #32
 80062a6:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dcf2      	bgt.n	8006294 <HAL_ETH_RxLinkCallback+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 80062ae:	f3bf 8f4f 	dsb	sy
}
 80062b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062b4:	f3bf 8f6f 	isb	sy
}
 80062b8:	bf00      	nop
}
 80062ba:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80062bc:	bf00      	nop
 80062be:	3730      	adds	r7, #48	@ 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	0801258c 	.word	0x0801258c
 80062c8:	080125b8 	.word	0x080125b8
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	b21a      	sxth	r2, r3
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	b29b      	uxth	r3, r3
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	061a      	lsls	r2, r3, #24
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0e1b      	lsrs	r3, r3, #24
 800631e:	4313      	orrs	r3, r2
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006334:	4915      	ldr	r1, [pc, #84]	@ (800638c <etharp_free_entry+0x60>)
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	440b      	add	r3, r1
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d013      	beq.n	8006370 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8006348:	4910      	ldr	r1, [pc, #64]	@ (800638c <etharp_free_entry+0x60>)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4413      	add	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	440b      	add	r3, r1
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f003 feb7 	bl	800a0cc <pbuf_free>
    arp_table[i].q = NULL;
 800635e:	490b      	ldr	r1, [pc, #44]	@ (800638c <etharp_free_entry+0x60>)
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	440b      	add	r3, r1
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006370:	4906      	ldr	r1, [pc, #24]	@ (800638c <etharp_free_entry+0x60>)
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4413      	add	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	440b      	add	r3, r1
 800637e:	3314      	adds	r3, #20
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	24000320 	.word	0x24000320

08006390 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	e096      	b.n	80064ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800639c:	494f      	ldr	r1, [pc, #316]	@ (80064dc <etharp_tmr+0x14c>)
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	440b      	add	r3, r1
 80063aa:	3314      	adds	r3, #20
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8086 	beq.w	80064c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80063b8:	4948      	ldr	r1, [pc, #288]	@ (80064dc <etharp_tmr+0x14c>)
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	440b      	add	r3, r1
 80063c6:	3312      	adds	r3, #18
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	b298      	uxth	r0, r3
 80063ce:	4943      	ldr	r1, [pc, #268]	@ (80064dc <etharp_tmr+0x14c>)
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	3312      	adds	r3, #18
 80063de:	4602      	mov	r2, r0
 80063e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80063e2:	493e      	ldr	r1, [pc, #248]	@ (80064dc <etharp_tmr+0x14c>)
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	4413      	add	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	440b      	add	r3, r1
 80063f0:	3312      	adds	r3, #18
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80063f8:	d215      	bcs.n	8006426 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80063fa:	4938      	ldr	r1, [pc, #224]	@ (80064dc <etharp_tmr+0x14c>)
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	440b      	add	r3, r1
 8006408:	3314      	adds	r3, #20
 800640a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10e      	bne.n	800642e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8006410:	4932      	ldr	r1, [pc, #200]	@ (80064dc <etharp_tmr+0x14c>)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	440b      	add	r3, r1
 800641e:	3312      	adds	r3, #18
 8006420:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006422:	2b04      	cmp	r3, #4
 8006424:	d903      	bls.n	800642e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff ff80 	bl	800632c <etharp_free_entry>
 800642c:	e04a      	b.n	80064c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800642e:	492b      	ldr	r1, [pc, #172]	@ (80064dc <etharp_tmr+0x14c>)
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	440b      	add	r3, r1
 800643c:	3314      	adds	r3, #20
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d10a      	bne.n	800645a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006444:	4925      	ldr	r1, [pc, #148]	@ (80064dc <etharp_tmr+0x14c>)
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	440b      	add	r3, r1
 8006452:	3314      	adds	r3, #20
 8006454:	2204      	movs	r2, #4
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e034      	b.n	80064c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800645a:	4920      	ldr	r1, [pc, #128]	@ (80064dc <etharp_tmr+0x14c>)
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	440b      	add	r3, r1
 8006468:	3314      	adds	r3, #20
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b04      	cmp	r3, #4
 800646e:	d10a      	bne.n	8006486 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006470:	491a      	ldr	r1, [pc, #104]	@ (80064dc <etharp_tmr+0x14c>)
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	440b      	add	r3, r1
 800647e:	3314      	adds	r3, #20
 8006480:	2202      	movs	r2, #2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e01e      	b.n	80064c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006486:	4915      	ldr	r1, [pc, #84]	@ (80064dc <etharp_tmr+0x14c>)
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	4413      	add	r3, r2
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	440b      	add	r3, r1
 8006494:	3314      	adds	r3, #20
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d113      	bne.n	80064c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800649c:	490f      	ldr	r1, [pc, #60]	@ (80064dc <etharp_tmr+0x14c>)
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	4413      	add	r3, r2
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	440b      	add	r3, r1
 80064aa:	3308      	adds	r3, #8
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4a08      	ldr	r2, [pc, #32]	@ (80064dc <etharp_tmr+0x14c>)
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	f000 fe6e 	bl	80071a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3301      	adds	r3, #1
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b09      	cmp	r3, #9
 80064ce:	f77f af65 	ble.w	800639c <etharp_tmr+0xc>
      }
    }
  }
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	24000320 	.word	0x24000320

080064e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	460b      	mov	r3, r1
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80064ee:	230a      	movs	r3, #10
 80064f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80064f2:	230a      	movs	r3, #10
 80064f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80064f6:	230a      	movs	r3, #10
 80064f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80064fe:	230a      	movs	r3, #10
 8006500:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	83bb      	strh	r3, [r7, #28]
 8006506:	2300      	movs	r3, #0
 8006508:	837b      	strh	r3, [r7, #26]
 800650a:	2300      	movs	r3, #0
 800650c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800650e:	2300      	movs	r3, #0
 8006510:	843b      	strh	r3, [r7, #32]
 8006512:	e0ae      	b.n	8006672 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8006514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006518:	49a6      	ldr	r1, [pc, #664]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800651a:	4613      	mov	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4413      	add	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	440b      	add	r3, r1
 8006524:	3314      	adds	r3, #20
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800652a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800652e:	2b0a      	cmp	r3, #10
 8006530:	d105      	bne.n	800653e <etharp_find_entry+0x5e>
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8006538:	8c3b      	ldrh	r3, [r7, #32]
 800653a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800653c:	e095      	b.n	800666a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8092 	beq.w	800666a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d009      	beq.n	8006560 <etharp_find_entry+0x80>
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d806      	bhi.n	8006560 <etharp_find_entry+0x80>
 8006552:	4b99      	ldr	r3, [pc, #612]	@ (80067b8 <etharp_find_entry+0x2d8>)
 8006554:	f240 1223 	movw	r2, #291	@ 0x123
 8006558:	4998      	ldr	r1, [pc, #608]	@ (80067bc <etharp_find_entry+0x2dc>)
 800655a:	4899      	ldr	r0, [pc, #612]	@ (80067c0 <etharp_find_entry+0x2e0>)
 800655c:	f00a fe34 	bl	80111c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d020      	beq.n	80065a8 <etharp_find_entry+0xc8>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800656e:	4891      	ldr	r0, [pc, #580]	@ (80067b4 <etharp_find_entry+0x2d4>)
 8006570:	4613      	mov	r3, r2
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	4413      	add	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4403      	add	r3, r0
 800657a:	3304      	adds	r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4299      	cmp	r1, r3
 8006580:	d112      	bne.n	80065a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00c      	beq.n	80065a2 <etharp_find_entry+0xc2>
 8006588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800658c:	4989      	ldr	r1, [pc, #548]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	440b      	add	r3, r1
 8006598:	3308      	adds	r3, #8
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d102      	bne.n	80065a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80065a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80065a6:	e100      	b.n	80067aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d140      	bne.n	8006630 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80065ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80065b2:	4980      	ldr	r1, [pc, #512]	@ (80067b4 <etharp_find_entry+0x2d4>)
 80065b4:	4613      	mov	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	4413      	add	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	440b      	add	r3, r1
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80065c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80065c8:	497a      	ldr	r1, [pc, #488]	@ (80067b4 <etharp_find_entry+0x2d4>)
 80065ca:	4613      	mov	r3, r2
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	3312      	adds	r3, #18
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	8bba      	ldrh	r2, [r7, #28]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d845      	bhi.n	800666a <etharp_find_entry+0x18a>
            old_queue = i;
 80065de:	8c3b      	ldrh	r3, [r7, #32]
 80065e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80065e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80065e6:	4973      	ldr	r1, [pc, #460]	@ (80067b4 <etharp_find_entry+0x2d4>)
 80065e8:	4613      	mov	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	440b      	add	r3, r1
 80065f2:	3312      	adds	r3, #18
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	83bb      	strh	r3, [r7, #28]
 80065f8:	e037      	b.n	800666a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80065fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80065fe:	496d      	ldr	r1, [pc, #436]	@ (80067b4 <etharp_find_entry+0x2d4>)
 8006600:	4613      	mov	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4413      	add	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	440b      	add	r3, r1
 800660a:	3312      	adds	r3, #18
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	8b7a      	ldrh	r2, [r7, #26]
 8006610:	429a      	cmp	r2, r3
 8006612:	d82a      	bhi.n	800666a <etharp_find_entry+0x18a>
            old_pending = i;
 8006614:	8c3b      	ldrh	r3, [r7, #32]
 8006616:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8006618:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800661c:	4965      	ldr	r1, [pc, #404]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	440b      	add	r3, r1
 8006628:	3312      	adds	r3, #18
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	837b      	strh	r3, [r7, #26]
 800662e:	e01c      	b.n	800666a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d919      	bls.n	800666a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8006636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800663a:	495e      	ldr	r1, [pc, #376]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800663c:	4613      	mov	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4413      	add	r3, r2
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	440b      	add	r3, r1
 8006646:	3312      	adds	r3, #18
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	8b3a      	ldrh	r2, [r7, #24]
 800664c:	429a      	cmp	r2, r3
 800664e:	d80c      	bhi.n	800666a <etharp_find_entry+0x18a>
            old_stable = i;
 8006650:	8c3b      	ldrh	r3, [r7, #32]
 8006652:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8006654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006658:	4956      	ldr	r1, [pc, #344]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800665a:	4613      	mov	r3, r2
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	4413      	add	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	440b      	add	r3, r1
 8006664:	3312      	adds	r3, #18
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800666a:	8c3b      	ldrh	r3, [r7, #32]
 800666c:	3301      	adds	r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	843b      	strh	r3, [r7, #32]
 8006672:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006676:	2b09      	cmp	r3, #9
 8006678:	f77f af4c 	ble.w	8006514 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d108      	bne.n	8006698 <etharp_find_entry+0x1b8>
 8006686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800668a:	2b0a      	cmp	r3, #10
 800668c:	d107      	bne.n	800669e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8006698:	f04f 33ff 	mov.w	r3, #4294967295
 800669c:	e085      	b.n	80067aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800669e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80066a2:	2b09      	cmp	r3, #9
 80066a4:	dc02      	bgt.n	80066ac <etharp_find_entry+0x1cc>
    i = empty;
 80066a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066a8:	843b      	strh	r3, [r7, #32]
 80066aa:	e039      	b.n	8006720 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80066ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80066b0:	2b09      	cmp	r3, #9
 80066b2:	dc14      	bgt.n	80066de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80066b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80066b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80066bc:	493d      	ldr	r1, [pc, #244]	@ (80067b4 <etharp_find_entry+0x2d4>)
 80066be:	4613      	mov	r3, r2
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4413      	add	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	440b      	add	r3, r1
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d018      	beq.n	8006700 <etharp_find_entry+0x220>
 80066ce:	4b3a      	ldr	r3, [pc, #232]	@ (80067b8 <etharp_find_entry+0x2d8>)
 80066d0:	f240 126d 	movw	r2, #365	@ 0x16d
 80066d4:	493b      	ldr	r1, [pc, #236]	@ (80067c4 <etharp_find_entry+0x2e4>)
 80066d6:	483a      	ldr	r0, [pc, #232]	@ (80067c0 <etharp_find_entry+0x2e0>)
 80066d8:	f00a fd76 	bl	80111c8 <iprintf>
 80066dc:	e010      	b.n	8006700 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80066de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80066e2:	2b09      	cmp	r3, #9
 80066e4:	dc02      	bgt.n	80066ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80066e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066e8:	843b      	strh	r3, [r7, #32]
 80066ea:	e009      	b.n	8006700 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80066ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	dc02      	bgt.n	80066fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80066f4:	8bfb      	ldrh	r3, [r7, #30]
 80066f6:	843b      	strh	r3, [r7, #32]
 80066f8:	e002      	b.n	8006700 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295
 80066fe:	e054      	b.n	80067aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8006700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006704:	2b09      	cmp	r3, #9
 8006706:	dd06      	ble.n	8006716 <etharp_find_entry+0x236>
 8006708:	4b2b      	ldr	r3, [pc, #172]	@ (80067b8 <etharp_find_entry+0x2d8>)
 800670a:	f240 127f 	movw	r2, #383	@ 0x17f
 800670e:	492e      	ldr	r1, [pc, #184]	@ (80067c8 <etharp_find_entry+0x2e8>)
 8006710:	482b      	ldr	r0, [pc, #172]	@ (80067c0 <etharp_find_entry+0x2e0>)
 8006712:	f00a fd59 	bl	80111c8 <iprintf>
    etharp_free_entry(i);
 8006716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fe06 	bl	800632c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8006720:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006724:	2b09      	cmp	r3, #9
 8006726:	dd06      	ble.n	8006736 <etharp_find_entry+0x256>
 8006728:	4b23      	ldr	r3, [pc, #140]	@ (80067b8 <etharp_find_entry+0x2d8>)
 800672a:	f240 1283 	movw	r2, #387	@ 0x183
 800672e:	4926      	ldr	r1, [pc, #152]	@ (80067c8 <etharp_find_entry+0x2e8>)
 8006730:	4823      	ldr	r0, [pc, #140]	@ (80067c0 <etharp_find_entry+0x2e0>)
 8006732:	f00a fd49 	bl	80111c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800673a:	491e      	ldr	r1, [pc, #120]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800673c:	4613      	mov	r3, r2
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	4413      	add	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	440b      	add	r3, r1
 8006746:	3314      	adds	r3, #20
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d006      	beq.n	800675c <etharp_find_entry+0x27c>
 800674e:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <etharp_find_entry+0x2d8>)
 8006750:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8006754:	491d      	ldr	r1, [pc, #116]	@ (80067cc <etharp_find_entry+0x2ec>)
 8006756:	481a      	ldr	r0, [pc, #104]	@ (80067c0 <etharp_find_entry+0x2e0>)
 8006758:	f00a fd36 	bl	80111c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006762:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6819      	ldr	r1, [r3, #0]
 800676a:	4812      	ldr	r0, [pc, #72]	@ (80067b4 <etharp_find_entry+0x2d4>)
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4403      	add	r3, r0
 8006776:	3304      	adds	r3, #4
 8006778:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800677a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800677e:	490d      	ldr	r1, [pc, #52]	@ (80067b4 <etharp_find_entry+0x2d4>)
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	440b      	add	r3, r1
 800678a:	3312      	adds	r3, #18
 800678c:	2200      	movs	r2, #0
 800678e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8006790:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006794:	4907      	ldr	r1, [pc, #28]	@ (80067b4 <etharp_find_entry+0x2d4>)
 8006796:	4613      	mov	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	4413      	add	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	440b      	add	r3, r1
 80067a0:	3308      	adds	r3, #8
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80067a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3728      	adds	r7, #40	@ 0x28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	24000320 	.word	0x24000320
 80067b8:	080125e8 	.word	0x080125e8
 80067bc:	0801264c 	.word	0x0801264c
 80067c0:	0801268c 	.word	0x0801268c
 80067c4:	080126b4 	.word	0x080126b4
 80067c8:	080126cc 	.word	0x080126cc
 80067cc:	080126e0 	.word	0x080126e0

080067d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067e4:	2b06      	cmp	r3, #6
 80067e6:	d006      	beq.n	80067f6 <etharp_update_arp_entry+0x26>
 80067e8:	4b48      	ldr	r3, [pc, #288]	@ (800690c <etharp_update_arp_entry+0x13c>)
 80067ea:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80067ee:	4948      	ldr	r1, [pc, #288]	@ (8006910 <etharp_update_arp_entry+0x140>)
 80067f0:	4848      	ldr	r0, [pc, #288]	@ (8006914 <etharp_update_arp_entry+0x144>)
 80067f2:	f00a fce9 	bl	80111c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <etharp_update_arp_entry+0x52>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00e      	beq.n	8006822 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fad8 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8006810:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8006812:	2b00      	cmp	r3, #0
 8006814:	d105      	bne.n	8006822 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800681e:	2be0      	cmp	r3, #224	@ 0xe0
 8006820:	d102      	bne.n	8006828 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8006822:	f06f 030f 	mvn.w	r3, #15
 8006826:	e06c      	b.n	8006902 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4619      	mov	r1, r3
 800682e:	68b8      	ldr	r0, [r7, #8]
 8006830:	f7ff fe56 	bl	80064e0 <etharp_find_entry>
 8006834:	4603      	mov	r3, r0
 8006836:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8006838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da02      	bge.n	8006846 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8006840:	8afb      	ldrh	r3, [r7, #22]
 8006842:	b25b      	sxtb	r3, r3
 8006844:	e05d      	b.n	8006902 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8006846:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800684a:	4933      	ldr	r1, [pc, #204]	@ (8006918 <etharp_update_arp_entry+0x148>)
 800684c:	4613      	mov	r3, r2
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	440b      	add	r3, r1
 8006856:	3314      	adds	r3, #20
 8006858:	2202      	movs	r2, #2
 800685a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800685c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006860:	492d      	ldr	r1, [pc, #180]	@ (8006918 <etharp_update_arp_entry+0x148>)
 8006862:	4613      	mov	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	440b      	add	r3, r1
 800686c:	3308      	adds	r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006872:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	3308      	adds	r3, #8
 8006880:	4a25      	ldr	r2, [pc, #148]	@ (8006918 <etharp_update_arp_entry+0x148>)
 8006882:	4413      	add	r3, r2
 8006884:	3304      	adds	r3, #4
 8006886:	2206      	movs	r2, #6
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	f00a fe69 	bl	8011562 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8006890:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006894:	4920      	ldr	r1, [pc, #128]	@ (8006918 <etharp_update_arp_entry+0x148>)
 8006896:	4613      	mov	r3, r2
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	4413      	add	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	440b      	add	r3, r1
 80068a0:	3312      	adds	r3, #18
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80068a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80068aa:	491b      	ldr	r1, [pc, #108]	@ (8006918 <etharp_update_arp_entry+0x148>)
 80068ac:	4613      	mov	r3, r2
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4413      	add	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	440b      	add	r3, r1
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d021      	beq.n	8006900 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80068bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80068c0:	4915      	ldr	r1, [pc, #84]	@ (8006918 <etharp_update_arp_entry+0x148>)
 80068c2:	4613      	mov	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	4413      	add	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	440b      	add	r3, r1
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80068d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80068d4:	4910      	ldr	r1, [pc, #64]	@ (8006918 <etharp_update_arp_entry+0x148>)
 80068d6:	4613      	mov	r3, r2
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	4413      	add	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	440b      	add	r3, r1
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80068ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6939      	ldr	r1, [r7, #16]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fcf3 	bl	80072e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f003 fbe6 	bl	800a0cc <pbuf_free>
  }
  return ERR_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	080125e8 	.word	0x080125e8
 8006910:	0801270c 	.word	0x0801270c
 8006914:	0801268c 	.word	0x0801268c
 8006918:	24000320 	.word	0x24000320

0800691c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e01e      	b.n	8006968 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800692a:	4913      	ldr	r1, [pc, #76]	@ (8006978 <etharp_cleanup_netif+0x5c>)
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4613      	mov	r3, r2
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	4413      	add	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	440b      	add	r3, r1
 8006938:	3314      	adds	r3, #20
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <etharp_cleanup_netif+0x46>
 8006944:	490c      	ldr	r1, [pc, #48]	@ (8006978 <etharp_cleanup_netif+0x5c>)
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	440b      	add	r3, r1
 8006952:	3308      	adds	r3, #8
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d102      	bne.n	8006962 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fce5 	bl	800632c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b09      	cmp	r3, #9
 800696c:	dddd      	ble.n	800692a <etharp_cleanup_netif+0xe>
    }
  }
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	24000320 	.word	0x24000320

0800697c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800697c:	b5b0      	push	{r4, r5, r7, lr}
 800697e:	b08a      	sub	sp, #40	@ 0x28
 8006980:	af04      	add	r7, sp, #16
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d107      	bne.n	800699c <etharp_input+0x20>
 800698c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a84 <etharp_input+0x108>)
 800698e:	f240 228a 	movw	r2, #650	@ 0x28a
 8006992:	493d      	ldr	r1, [pc, #244]	@ (8006a88 <etharp_input+0x10c>)
 8006994:	483d      	ldr	r0, [pc, #244]	@ (8006a8c <etharp_input+0x110>)
 8006996:	f00a fc17 	bl	80111c8 <iprintf>
 800699a:	e06f      	b.n	8006a7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ac:	d10c      	bne.n	80069c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80069b2:	2b06      	cmp	r3, #6
 80069b4:	d108      	bne.n	80069c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d104      	bne.n	80069c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	885b      	ldrh	r3, [r3, #2]
 80069c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d003      	beq.n	80069d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f003 fb7f 	bl	800a0cc <pbuf_free>
    return;
 80069ce:	e055      	b.n	8006a7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	330e      	adds	r3, #14
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	3318      	adds	r3, #24
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	3304      	adds	r3, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <etharp_input+0x74>
    for_us = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]
 80069ee:	e009      	b.n	8006a04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	3304      	adds	r3, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f103 0208 	add.w	r2, r3, #8
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <etharp_input+0x98>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <etharp_input+0x9a>
 8006a14:	2302      	movs	r3, #2
 8006a16:	f107 010c 	add.w	r1, r7, #12
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f7ff fed8 	bl	80067d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	88db      	ldrh	r3, [r3, #6]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2a:	d003      	beq.n	8006a34 <etharp_input+0xb8>
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a30:	d01e      	beq.n	8006a70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8006a32:	e020      	b.n	8006a76 <etharp_input+0xfa>
      if (for_us) {
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01c      	beq.n	8006a74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8006a54:	2102      	movs	r1, #2
 8006a56:	9103      	str	r1, [sp, #12]
 8006a58:	f107 010c 	add.w	r1, r7, #12
 8006a5c:	9102      	str	r1, [sp, #8]
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	462b      	mov	r3, r5
 8006a64:	4622      	mov	r2, r4
 8006a66:	4601      	mov	r1, r0
 8006a68:	6838      	ldr	r0, [r7, #0]
 8006a6a:	f000 faeb 	bl	8007044 <etharp_raw>
      break;
 8006a6e:	e001      	b.n	8006a74 <etharp_input+0xf8>
      break;
 8006a70:	bf00      	nop
 8006a72:	e000      	b.n	8006a76 <etharp_input+0xfa>
      break;
 8006a74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f003 fb28 	bl	800a0cc <pbuf_free>
}
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bdb0      	pop	{r4, r5, r7, pc}
 8006a82:	bf00      	nop
 8006a84:	080125e8 	.word	0x080125e8
 8006a88:	08012764 	.word	0x08012764
 8006a8c:	0801268c 	.word	0x0801268c

08006a90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006a9e:	79fa      	ldrb	r2, [r7, #7]
 8006aa0:	4944      	ldr	r1, [pc, #272]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	3314      	adds	r3, #20
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d806      	bhi.n	8006ac2 <etharp_output_to_arp_index+0x32>
 8006ab4:	4b40      	ldr	r3, [pc, #256]	@ (8006bb8 <etharp_output_to_arp_index+0x128>)
 8006ab6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8006aba:	4940      	ldr	r1, [pc, #256]	@ (8006bbc <etharp_output_to_arp_index+0x12c>)
 8006abc:	4840      	ldr	r0, [pc, #256]	@ (8006bc0 <etharp_output_to_arp_index+0x130>)
 8006abe:	f00a fb83 	bl	80111c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006ac2:	79fa      	ldrb	r2, [r7, #7]
 8006ac4:	493b      	ldr	r1, [pc, #236]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4413      	add	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	440b      	add	r3, r1
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d153      	bne.n	8006b80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006ad8:	79fa      	ldrb	r2, [r7, #7]
 8006ada:	4936      	ldr	r1, [pc, #216]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3312      	adds	r3, #18
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8006aee:	d919      	bls.n	8006b24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006af0:	79fa      	ldrb	r2, [r7, #7]
 8006af2:	4613      	mov	r3, r2
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4a2e      	ldr	r2, [pc, #184]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006afc:	4413      	add	r3, r2
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fb4c 	bl	80071a0 <etharp_request>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d138      	bne.n	8006b80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006b0e:	79fa      	ldrb	r2, [r7, #7]
 8006b10:	4928      	ldr	r1, [pc, #160]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	2203      	movs	r2, #3
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e02d      	b.n	8006b80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006b24:	79fa      	ldrb	r2, [r7, #7]
 8006b26:	4923      	ldr	r1, [pc, #140]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006b28:	4613      	mov	r3, r2
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	4413      	add	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	440b      	add	r3, r1
 8006b32:	3312      	adds	r3, #18
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006b3a:	d321      	bcc.n	8006b80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006b3c:	79fa      	ldrb	r2, [r7, #7]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	1d19      	adds	r1, r3, #4
 8006b4c:	79fa      	ldrb	r2, [r7, #7]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	4413      	add	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	3308      	adds	r3, #8
 8006b58:	4a16      	ldr	r2, [pc, #88]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fafb 	bl	800715c <etharp_request_dst>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	4911      	ldr	r1, [pc, #68]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	440b      	add	r3, r1
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8006b86:	79fa      	ldrb	r2, [r7, #7]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	3308      	adds	r3, #8
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <etharp_output_to_arp_index+0x124>)
 8006b94:	4413      	add	r3, r2
 8006b96:	3304      	adds	r3, #4
 8006b98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b9c:	9200      	str	r2, [sp, #0]
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fb9c 	bl	80072e0 <ethernet_output>
 8006ba8:	4603      	mov	r3, r0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	24000320 	.word	0x24000320
 8006bb8:	080125e8 	.word	0x080125e8
 8006bbc:	08012784 	.word	0x08012784
 8006bc0:	0801268c 	.word	0x0801268c

08006bc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	@ 0x28
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <etharp_output+0x24>
 8006bda:	4b73      	ldr	r3, [pc, #460]	@ (8006da8 <etharp_output+0x1e4>)
 8006bdc:	f240 321e 	movw	r2, #798	@ 0x31e
 8006be0:	4972      	ldr	r1, [pc, #456]	@ (8006dac <etharp_output+0x1e8>)
 8006be2:	4873      	ldr	r0, [pc, #460]	@ (8006db0 <etharp_output+0x1ec>)
 8006be4:	f00a faf0 	bl	80111c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <etharp_output+0x38>
 8006bee:	4b6e      	ldr	r3, [pc, #440]	@ (8006da8 <etharp_output+0x1e4>)
 8006bf0:	f240 321f 	movw	r2, #799	@ 0x31f
 8006bf4:	496f      	ldr	r1, [pc, #444]	@ (8006db4 <etharp_output+0x1f0>)
 8006bf6:	486e      	ldr	r0, [pc, #440]	@ (8006db0 <etharp_output+0x1ec>)
 8006bf8:	f00a fae6 	bl	80111c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <etharp_output+0x4c>
 8006c02:	4b69      	ldr	r3, [pc, #420]	@ (8006da8 <etharp_output+0x1e4>)
 8006c04:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8006c08:	496b      	ldr	r1, [pc, #428]	@ (8006db8 <etharp_output+0x1f4>)
 8006c0a:	4869      	ldr	r0, [pc, #420]	@ (8006db0 <etharp_output+0x1ec>)
 8006c0c:	f00a fadc 	bl	80111c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68f9      	ldr	r1, [r7, #12]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 f8d2 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8006c22:	4b66      	ldr	r3, [pc, #408]	@ (8006dbc <etharp_output+0x1f8>)
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e0af      	b.n	8006d88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c30:	2be0      	cmp	r3, #224	@ 0xe0
 8006c32:	d118      	bne.n	8006c66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006c34:	2301      	movs	r3, #1
 8006c36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006c3c:	235e      	movs	r3, #94	@ 0x5e
 8006c3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3301      	adds	r3, #1
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3302      	adds	r3, #2
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3303      	adds	r3, #3
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8006c5e:	f107 0310 	add.w	r3, r7, #16
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e090      	b.n	8006d88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	405a      	eors	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3308      	adds	r3, #8
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d012      	beq.n	8006ca4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006c84:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	e002      	b.n	8006ca4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8006c9e:	f06f 0303 	mvn.w	r3, #3
 8006ca2:	e07d      	b.n	8006da0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006ca4:	4b46      	ldr	r3, [pc, #280]	@ (8006dc0 <etharp_output+0x1fc>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4a46      	ldr	r2, [pc, #280]	@ (8006dc4 <etharp_output+0x200>)
 8006cac:	460b      	mov	r3, r1
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	440b      	add	r3, r1
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3314      	adds	r3, #20
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d925      	bls.n	8006d0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8006cbe:	4b40      	ldr	r3, [pc, #256]	@ (8006dc0 <etharp_output+0x1fc>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8006dc4 <etharp_output+0x200>)
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	440b      	add	r3, r1
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4413      	add	r3, r2
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d117      	bne.n	8006d0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b38      	ldr	r3, [pc, #224]	@ (8006dc0 <etharp_output+0x1fc>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	4937      	ldr	r1, [pc, #220]	@ (8006dc4 <etharp_output+0x200>)
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4403      	add	r3, r0
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	440b      	add	r3, r1
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8006cf8:	4b31      	ldr	r3, [pc, #196]	@ (8006dc0 <etharp_output+0x1fc>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff fec5 	bl	8006a90 <etharp_output_to_arp_index>
 8006d06:	4603      	mov	r3, r0
 8006d08:	e04a      	b.n	8006da0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]
 8006d0e:	e031      	b.n	8006d74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006d10:	7dfa      	ldrb	r2, [r7, #23]
 8006d12:	492c      	ldr	r1, [pc, #176]	@ (8006dc4 <etharp_output+0x200>)
 8006d14:	4613      	mov	r3, r2
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3314      	adds	r3, #20
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d923      	bls.n	8006d6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8006d26:	7dfa      	ldrb	r2, [r7, #23]
 8006d28:	4926      	ldr	r1, [pc, #152]	@ (8006dc4 <etharp_output+0x200>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	440b      	add	r3, r1
 8006d34:	3308      	adds	r3, #8
 8006d36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d117      	bne.n	8006d6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	7dfa      	ldrb	r2, [r7, #23]
 8006d44:	481f      	ldr	r0, [pc, #124]	@ (8006dc4 <etharp_output+0x200>)
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4403      	add	r3, r0
 8006d50:	3304      	adds	r3, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d10a      	bne.n	8006d6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8006d58:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <etharp_output+0x1fc>)
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	461a      	mov	r2, r3
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fe93 	bl	8006a90 <etharp_output_to_arp_index>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	e018      	b.n	8006da0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	3301      	adds	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b09      	cmp	r3, #9
 8006d78:	d9ca      	bls.n	8006d10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	69b9      	ldr	r1, [r7, #24]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f822 	bl	8006dc8 <etharp_query>
 8006d84:	4603      	mov	r3, r0
 8006d86:	e00b      	b.n	8006da0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8006d8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 faa1 	bl	80072e0 <ethernet_output>
 8006d9e:	4603      	mov	r3, r0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	080125e8 	.word	0x080125e8
 8006dac:	08012764 	.word	0x08012764
 8006db0:	0801268c 	.word	0x0801268c
 8006db4:	080127b4 	.word	0x080127b4
 8006db8:	08012754 	.word	0x08012754
 8006dbc:	080154f8 	.word	0x080154f8
 8006dc0:	24000410 	.word	0x24000410
 8006dc4:	24000320 	.word	0x24000320

08006dc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	@ 0x30
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	332a      	adds	r3, #42	@ 0x2a
 8006dd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8006dda:	23ff      	movs	r3, #255	@ 0xff
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 ffe8 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10c      	bne.n	8006e10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006dfe:	2be0      	cmp	r3, #224	@ 0xe0
 8006e00:	d006      	beq.n	8006e10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8006e10:	f06f 030f 	mvn.w	r3, #15
 8006e14:	e101      	b.n	800701a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	2101      	movs	r1, #1
 8006e1a:	68b8      	ldr	r0, [r7, #8]
 8006e1c:	f7ff fb60 	bl	80064e0 <etharp_find_entry>
 8006e20:	4603      	mov	r3, r0
 8006e22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8006e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da02      	bge.n	8006e32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8006e2c:	8a7b      	ldrh	r3, [r7, #18]
 8006e2e:	b25b      	sxtb	r3, r3
 8006e30:	e0f3      	b.n	800701a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8006e32:	8a7b      	ldrh	r3, [r7, #18]
 8006e34:	2b7e      	cmp	r3, #126	@ 0x7e
 8006e36:	d906      	bls.n	8006e46 <etharp_query+0x7e>
 8006e38:	4b7a      	ldr	r3, [pc, #488]	@ (8007024 <etharp_query+0x25c>)
 8006e3a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8006e3e:	497a      	ldr	r1, [pc, #488]	@ (8007028 <etharp_query+0x260>)
 8006e40:	487a      	ldr	r0, [pc, #488]	@ (800702c <etharp_query+0x264>)
 8006e42:	f00a f9c1 	bl	80111c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8006e46:	8a7b      	ldrh	r3, [r7, #18]
 8006e48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006e4a:	7c7a      	ldrb	r2, [r7, #17]
 8006e4c:	4978      	ldr	r1, [pc, #480]	@ (8007030 <etharp_query+0x268>)
 8006e4e:	4613      	mov	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4413      	add	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	440b      	add	r3, r1
 8006e58:	3314      	adds	r3, #20
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d115      	bne.n	8006e8c <etharp_query+0xc4>
    is_new_entry = 1;
 8006e60:	2301      	movs	r3, #1
 8006e62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006e64:	7c7a      	ldrb	r2, [r7, #17]
 8006e66:	4972      	ldr	r1, [pc, #456]	@ (8007030 <etharp_query+0x268>)
 8006e68:	4613      	mov	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	4413      	add	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	440b      	add	r3, r1
 8006e72:	3314      	adds	r3, #20
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8006e78:	7c7a      	ldrb	r2, [r7, #17]
 8006e7a:	496d      	ldr	r1, [pc, #436]	@ (8007030 <etharp_query+0x268>)
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4413      	add	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	440b      	add	r3, r1
 8006e86:	3308      	adds	r3, #8
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8006e8c:	7c7a      	ldrb	r2, [r7, #17]
 8006e8e:	4968      	ldr	r1, [pc, #416]	@ (8007030 <etharp_query+0x268>)
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	440b      	add	r3, r1
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d011      	beq.n	8006ec6 <etharp_query+0xfe>
 8006ea2:	7c7a      	ldrb	r2, [r7, #17]
 8006ea4:	4962      	ldr	r1, [pc, #392]	@ (8007030 <etharp_query+0x268>)
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	440b      	add	r3, r1
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d806      	bhi.n	8006ec6 <etharp_query+0xfe>
 8006eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007024 <etharp_query+0x25c>)
 8006eba:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8006ebe:	495d      	ldr	r1, [pc, #372]	@ (8007034 <etharp_query+0x26c>)
 8006ec0:	485a      	ldr	r0, [pc, #360]	@ (800702c <etharp_query+0x264>)
 8006ec2:	f00a f981 	bl	80111c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <etharp_query+0x10a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10c      	bne.n	8006eec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f963 	bl	80071a0 <etharp_request>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <etharp_query+0x124>
      return result;
 8006ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006eea:	e096      	b.n	800701a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <etharp_query+0x138>
 8006ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8007024 <etharp_query+0x25c>)
 8006ef4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8006ef8:	494f      	ldr	r1, [pc, #316]	@ (8007038 <etharp_query+0x270>)
 8006efa:	484c      	ldr	r0, [pc, #304]	@ (800702c <etharp_query+0x264>)
 8006efc:	f00a f964 	bl	80111c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006f00:	7c7a      	ldrb	r2, [r7, #17]
 8006f02:	494b      	ldr	r1, [pc, #300]	@ (8007030 <etharp_query+0x268>)
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	440b      	add	r3, r1
 8006f0e:	3314      	adds	r3, #20
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d917      	bls.n	8006f46 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8006f16:	4a49      	ldr	r2, [pc, #292]	@ (800703c <etharp_query+0x274>)
 8006f18:	7c7b      	ldrb	r3, [r7, #17]
 8006f1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006f1c:	7c7a      	ldrb	r2, [r7, #17]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	4413      	add	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	3308      	adds	r3, #8
 8006f28:	4a41      	ldr	r2, [pc, #260]	@ (8007030 <etharp_query+0x268>)
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f32:	9200      	str	r2, [sp, #0]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 f9d1 	bl	80072e0 <ethernet_output>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006f44:	e067      	b.n	8007016 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006f46:	7c7a      	ldrb	r2, [r7, #17]
 8006f48:	4939      	ldr	r1, [pc, #228]	@ (8007030 <etharp_query+0x268>)
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	440b      	add	r3, r1
 8006f54:	3314      	adds	r3, #20
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d15c      	bne.n	8007016 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	61fb      	str	r3, [r7, #28]
    while (p) {
 8006f64:	e01c      	b.n	8006fa0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	895a      	ldrh	r2, [r3, #10]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	891b      	ldrh	r3, [r3, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d10a      	bne.n	8006f88 <etharp_query+0x1c0>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <etharp_query+0x1c0>
 8006f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8007024 <etharp_query+0x25c>)
 8006f7c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8006f80:	492f      	ldr	r1, [pc, #188]	@ (8007040 <etharp_query+0x278>)
 8006f82:	482a      	ldr	r0, [pc, #168]	@ (800702c <etharp_query+0x264>)
 8006f84:	f00a f920 	bl	80111c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	7b1b      	ldrb	r3, [r3, #12]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <etharp_query+0x1d2>
        copy_needed = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	61bb      	str	r3, [r7, #24]
        break;
 8006f98:	e005      	b.n	8006fa6 <etharp_query+0x1de>
      }
      p = p->next;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1df      	bne.n	8006f66 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8006fb2:	200e      	movs	r0, #14
 8006fb4:	f003 fb20 	bl	800a5f8 <pbuf_clone>
 8006fb8:	61f8      	str	r0, [r7, #28]
 8006fba:	e004      	b.n	8006fc6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8006fc0:	69f8      	ldr	r0, [r7, #28]
 8006fc2:	f003 f923 	bl	800a20c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d021      	beq.n	8007010 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8006fcc:	7c7a      	ldrb	r2, [r7, #17]
 8006fce:	4918      	ldr	r1, [pc, #96]	@ (8007030 <etharp_query+0x268>)
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	440b      	add	r3, r1
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8006fe0:	7c7a      	ldrb	r2, [r7, #17]
 8006fe2:	4913      	ldr	r1, [pc, #76]	@ (8007030 <etharp_query+0x268>)
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	440b      	add	r3, r1
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f003 f86b 	bl	800a0cc <pbuf_free>
      }
      arp_table[i].q = p;
 8006ff6:	7c7a      	ldrb	r2, [r7, #17]
 8006ff8:	490d      	ldr	r1, [pc, #52]	@ (8007030 <etharp_query+0x268>)
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	4413      	add	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	440b      	add	r3, r1
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800700e:	e002      	b.n	8007016 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8007010:	23ff      	movs	r3, #255	@ 0xff
 8007012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8007016:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800701a:	4618      	mov	r0, r3
 800701c:	3728      	adds	r7, #40	@ 0x28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	080125e8 	.word	0x080125e8
 8007028:	080127c0 	.word	0x080127c0
 800702c:	0801268c 	.word	0x0801268c
 8007030:	24000320 	.word	0x24000320
 8007034:	080127d0 	.word	0x080127d0
 8007038:	080127b4 	.word	0x080127b4
 800703c:	24000410 	.word	0x24000410
 8007040:	080127f8 	.word	0x080127f8

08007044 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	@ 0x28
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <etharp_raw+0x26>
 800705c:	4b3a      	ldr	r3, [pc, #232]	@ (8007148 <etharp_raw+0x104>)
 800705e:	f240 4257 	movw	r2, #1111	@ 0x457
 8007062:	493a      	ldr	r1, [pc, #232]	@ (800714c <etharp_raw+0x108>)
 8007064:	483a      	ldr	r0, [pc, #232]	@ (8007150 <etharp_raw+0x10c>)
 8007066:	f00a f8af 	bl	80111c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800706a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800706e:	211c      	movs	r1, #28
 8007070:	200e      	movs	r0, #14
 8007072:	f002 fd49 	bl	8009b08 <pbuf_alloc>
 8007076:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	e05d      	b.n	8007140 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	895b      	ldrh	r3, [r3, #10]
 8007088:	2b1b      	cmp	r3, #27
 800708a:	d806      	bhi.n	800709a <etharp_raw+0x56>
 800708c:	4b2e      	ldr	r3, [pc, #184]	@ (8007148 <etharp_raw+0x104>)
 800708e:	f240 4262 	movw	r2, #1122	@ 0x462
 8007092:	4930      	ldr	r1, [pc, #192]	@ (8007154 <etharp_raw+0x110>)
 8007094:	482e      	ldr	r0, [pc, #184]	@ (8007150 <etharp_raw+0x10c>)
 8007096:	f00a f897 	bl	80111c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80070a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff f914 	bl	80062d0 <lwip_htons>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070b6:	2b06      	cmp	r3, #6
 80070b8:	d006      	beq.n	80070c8 <etharp_raw+0x84>
 80070ba:	4b23      	ldr	r3, [pc, #140]	@ (8007148 <etharp_raw+0x104>)
 80070bc:	f240 4269 	movw	r2, #1129	@ 0x469
 80070c0:	4925      	ldr	r1, [pc, #148]	@ (8007158 <etharp_raw+0x114>)
 80070c2:	4823      	ldr	r0, [pc, #140]	@ (8007150 <etharp_raw+0x10c>)
 80070c4:	f00a f880 	bl	80111c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3308      	adds	r3, #8
 80070cc:	2206      	movs	r2, #6
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f00a fa46 	bl	8011562 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	3312      	adds	r3, #18
 80070da:	2206      	movs	r2, #6
 80070dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070de:	4618      	mov	r0, r3
 80070e0:	f00a fa3f 	bl	8011562 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	330e      	adds	r3, #14
 80070e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3318      	adds	r3, #24
 80070f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2200      	movs	r2, #0
 800710a:	f042 0208 	orr.w	r2, r2, #8
 800710e:	709a      	strb	r2, [r3, #2]
 8007110:	2200      	movs	r2, #0
 8007112:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2206      	movs	r2, #6
 8007118:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2204      	movs	r2, #4
 800711e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8007120:	f640 0306 	movw	r3, #2054	@ 0x806
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	69b9      	ldr	r1, [r7, #24]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f8d7 	bl	80072e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8007132:	69b8      	ldr	r0, [r7, #24]
 8007134:	f002 ffca 	bl	800a0cc <pbuf_free>
  p = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800713c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	080125e8 	.word	0x080125e8
 800714c:	08012764 	.word	0x08012764
 8007150:	0801268c 	.word	0x0801268c
 8007154:	08012814 	.word	0x08012814
 8007158:	08012848 	.word	0x08012848

0800715c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af04      	add	r7, sp, #16
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007178:	2201      	movs	r2, #1
 800717a:	9203      	str	r2, [sp, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	9202      	str	r2, [sp, #8]
 8007180:	4a06      	ldr	r2, [pc, #24]	@ (800719c <etharp_request_dst+0x40>)
 8007182:	9201      	str	r2, [sp, #4]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4603      	mov	r3, r0
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f7ff ff5a 	bl	8007044 <etharp_raw>
 8007190:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	08015500 	.word	0x08015500

080071a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80071aa:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <etharp_request+0x20>)
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff ffd4 	bl	800715c <etharp_request_dst>
 80071b4:	4603      	mov	r3, r0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	080154f8 	.word	0x080154f8

080071c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80071ce:	230e      	movs	r3, #14
 80071d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	895b      	ldrh	r3, [r3, #10]
 80071d6:	2b0e      	cmp	r3, #14
 80071d8:	d96e      	bls.n	80072b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	7bdb      	ldrb	r3, [r3, #15]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071e8:	3301      	adds	r3, #1
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	7b1a      	ldrb	r2, [r3, #12]
 80071fa:	7b5b      	ldrb	r3, [r3, #13]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	4313      	orrs	r3, r2
 8007200:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d023      	beq.n	8007256 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10f      	bne.n	8007236 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d11b      	bne.n	8007256 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8007222:	2b5e      	cmp	r3, #94	@ 0x5e
 8007224:	d117      	bne.n	8007256 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	7b5b      	ldrb	r3, [r3, #13]
 800722a:	f043 0310 	orr.w	r3, r3, #16
 800722e:	b2da      	uxtb	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	735a      	strb	r2, [r3, #13]
 8007234:	e00f      	b.n	8007256 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2206      	movs	r2, #6
 800723a:	4928      	ldr	r1, [pc, #160]	@ (80072dc <ethernet_input+0x118>)
 800723c:	4618      	mov	r0, r3
 800723e:	f00a f90b 	bl	8011458 <memcmp>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7b5b      	ldrb	r3, [r3, #13]
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	b2da      	uxtb	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d003      	beq.n	8007264 <ethernet_input+0xa0>
 800725c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8007260:	d014      	beq.n	800728c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8007262:	e032      	b.n	80072ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d024      	beq.n	80072bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8007272:	8afb      	ldrh	r3, [r7, #22]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f002 fea2 	bl	8009fc0 <pbuf_remove_header>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d11e      	bne.n	80072c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fb93 	bl	80079b0 <ip4_input>
      break;
 800728a:	e013      	b.n	80072b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d014      	beq.n	80072c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800729a:	8afb      	ldrh	r3, [r7, #22]
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f002 fe8e 	bl	8009fc0 <pbuf_remove_header>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10e      	bne.n	80072c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fb65 	bl	800697c <etharp_input>
      break;
 80072b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e00c      	b.n	80072d2 <ethernet_input+0x10e>
    goto free_and_return;
 80072b8:	bf00      	nop
 80072ba:	e006      	b.n	80072ca <ethernet_input+0x106>
        goto free_and_return;
 80072bc:	bf00      	nop
 80072be:	e004      	b.n	80072ca <ethernet_input+0x106>
        goto free_and_return;
 80072c0:	bf00      	nop
 80072c2:	e002      	b.n	80072ca <ethernet_input+0x106>
        goto free_and_return;
 80072c4:	bf00      	nop
 80072c6:	e000      	b.n	80072ca <ethernet_input+0x106>
        goto free_and_return;
 80072c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f002 fefe 	bl	800a0cc <pbuf_free>
  return ERR_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	080154f8 	.word	0x080154f8

080072e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80072ee:	8c3b      	ldrh	r3, [r7, #32]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe ffed 	bl	80062d0 <lwip_htons>
 80072f6:	4603      	mov	r3, r0
 80072f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80072fa:	210e      	movs	r1, #14
 80072fc:	68b8      	ldr	r0, [r7, #8]
 80072fe:	f002 fe4f 	bl	8009fa0 <pbuf_add_header>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d125      	bne.n	8007354 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	8afa      	ldrh	r2, [r7, #22]
 8007312:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2206      	movs	r2, #6
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f00a f921 	bl	8011562 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	3306      	adds	r3, #6
 8007324:	2206      	movs	r2, #6
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	f00a f91a 	bl	8011562 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007334:	2b06      	cmp	r3, #6
 8007336:	d006      	beq.n	8007346 <ethernet_output+0x66>
 8007338:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <ethernet_output+0x84>)
 800733a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800733e:	490a      	ldr	r1, [pc, #40]	@ (8007368 <ethernet_output+0x88>)
 8007340:	480a      	ldr	r0, [pc, #40]	@ (800736c <ethernet_output+0x8c>)
 8007342:	f009 ff41 	bl	80111c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	e002      	b.n	800735a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8007354:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8007356:	f06f 0301 	mvn.w	r3, #1
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	0801288c 	.word	0x0801288c
 8007368:	080128f0 	.word	0x080128f0
 800736c:	08012924 	.word	0x08012924

08007370 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08e      	sub	sp, #56	@ 0x38
 8007374:	af04      	add	r7, sp, #16
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800737a:	4b87      	ldr	r3, [pc, #540]	@ (8007598 <icmp_input+0x228>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	b2db      	uxtb	r3, r3
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	b2db      	uxtb	r3, r3
 800738e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8007390:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007392:	2b13      	cmp	r3, #19
 8007394:	f240 80e8 	bls.w	8007568 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	895b      	ldrh	r3, [r3, #10]
 800739c:	2b03      	cmp	r3, #3
 800739e:	f240 80e5 	bls.w	800756c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80073ac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 80d2 	beq.w	800755a <icmp_input+0x1ea>
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	f040 80d2 	bne.w	8007560 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80073bc:	4b77      	ldr	r3, [pc, #476]	@ (800759c <icmp_input+0x22c>)
 80073be:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80073c0:	4b75      	ldr	r3, [pc, #468]	@ (8007598 <icmp_input+0x228>)
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073c8:	2be0      	cmp	r3, #224	@ 0xe0
 80073ca:	f000 80d6 	beq.w	800757a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80073ce:	4b72      	ldr	r3, [pc, #456]	@ (8007598 <icmp_input+0x228>)
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	4a71      	ldr	r2, [pc, #452]	@ (8007598 <icmp_input+0x228>)
 80073d4:	6812      	ldr	r2, [r2, #0]
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fcf1 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 80cc 	bne.w	800757e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	891b      	ldrh	r3, [r3, #8]
 80073ea:	2b07      	cmp	r3, #7
 80073ec:	f240 80c0 	bls.w	8007570 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f9e0 	bl	80077b6 <inet_chksum_pbuf>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 fe65 	bl	800a0cc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8007402:	e0c5      	b.n	8007590 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007404:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007406:	330e      	adds	r3, #14
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f002 fdc8 	bl	8009fa0 <pbuf_add_header>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d04b      	beq.n	80074ae <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	891a      	ldrh	r2, [r3, #8]
 800741a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800741c:	4413      	add	r3, r2
 800741e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	891b      	ldrh	r3, [r3, #8]
 8007424:	8b7a      	ldrh	r2, [r7, #26]
 8007426:	429a      	cmp	r2, r3
 8007428:	f0c0 80ab 	bcc.w	8007582 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800742c:	8b7b      	ldrh	r3, [r7, #26]
 800742e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8007432:	4619      	mov	r1, r3
 8007434:	200e      	movs	r0, #14
 8007436:	f002 fb67 	bl	8009b08 <pbuf_alloc>
 800743a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80a1 	beq.w	8007586 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	895b      	ldrh	r3, [r3, #10]
 8007448:	461a      	mov	r2, r3
 800744a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800744c:	3308      	adds	r3, #8
 800744e:	429a      	cmp	r2, r3
 8007450:	d203      	bcs.n	800745a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8007452:	6978      	ldr	r0, [r7, #20]
 8007454:	f002 fe3a 	bl	800a0cc <pbuf_free>
          goto icmperr;
 8007458:	e096      	b.n	8007588 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007462:	4618      	mov	r0, r3
 8007464:	f00a f87d 	bl	8011562 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8007468:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800746a:	4619      	mov	r1, r3
 800746c:	6978      	ldr	r0, [r7, #20]
 800746e:	f002 fda7 	bl	8009fc0 <pbuf_remove_header>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8007478:	4b49      	ldr	r3, [pc, #292]	@ (80075a0 <icmp_input+0x230>)
 800747a:	22b6      	movs	r2, #182	@ 0xb6
 800747c:	4949      	ldr	r1, [pc, #292]	@ (80075a4 <icmp_input+0x234>)
 800747e:	484a      	ldr	r0, [pc, #296]	@ (80075a8 <icmp_input+0x238>)
 8007480:	f009 fea2 	bl	80111c8 <iprintf>
          pbuf_free(r);
 8007484:	6978      	ldr	r0, [r7, #20]
 8007486:	f002 fe21 	bl	800a0cc <pbuf_free>
          goto icmperr;
 800748a:	e07d      	b.n	8007588 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	6978      	ldr	r0, [r7, #20]
 8007490:	f002 ff44 	bl	800a31c <pbuf_copy>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f002 fe16 	bl	800a0cc <pbuf_free>
          goto icmperr;
 80074a0:	e072      	b.n	8007588 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f002 fe12 	bl	800a0cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	607b      	str	r3, [r7, #4]
 80074ac:	e00f      	b.n	80074ce <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80074ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80074b0:	330e      	adds	r3, #14
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f002 fd83 	bl	8009fc0 <pbuf_remove_header>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80074c0:	4b37      	ldr	r3, [pc, #220]	@ (80075a0 <icmp_input+0x230>)
 80074c2:	22c7      	movs	r2, #199	@ 0xc7
 80074c4:	4939      	ldr	r1, [pc, #228]	@ (80075ac <icmp_input+0x23c>)
 80074c6:	4838      	ldr	r0, [pc, #224]	@ (80075a8 <icmp_input+0x238>)
 80074c8:	f009 fe7e 	bl	80111c8 <iprintf>
          goto icmperr;
 80074cc:	e05c      	b.n	8007588 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80074d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 fd61 	bl	8009fa0 <pbuf_add_header>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d13c      	bne.n	800755e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80074f2:	4b29      	ldr	r3, [pc, #164]	@ (8007598 <icmp_input+0x228>)
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	885b      	ldrh	r3, [r3, #2]
 8007504:	b29b      	uxth	r3, r3
 8007506:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800750a:	4293      	cmp	r3, r2
 800750c:	d907      	bls.n	800751e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	885b      	ldrh	r3, [r3, #2]
 8007512:	b29b      	uxth	r3, r3
 8007514:	3309      	adds	r3, #9
 8007516:	b29a      	uxth	r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	805a      	strh	r2, [r3, #2]
 800751c:	e006      	b.n	800752c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	b29b      	uxth	r3, r3
 8007524:	3308      	adds	r3, #8
 8007526:	b29a      	uxth	r2, r3
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	22ff      	movs	r2, #255	@ 0xff
 8007530:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	729a      	strb	r2, [r3, #10]
 8007538:	2200      	movs	r2, #0
 800753a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	2301      	movs	r3, #1
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	2300      	movs	r3, #0
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	23ff      	movs	r3, #255	@ 0xff
 800754a:	2200      	movs	r2, #0
 800754c:	69f9      	ldr	r1, [r7, #28]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb5e 	bl	8007c10 <ip4_output_if>
 8007554:	4603      	mov	r3, r0
 8007556:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8007558:	e001      	b.n	800755e <icmp_input+0x1ee>
      break;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <icmp_input+0x1f0>
      break;
 800755e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 fdb3 	bl	800a0cc <pbuf_free>
  return;
 8007566:	e013      	b.n	8007590 <icmp_input+0x220>
    goto lenerr;
 8007568:	bf00      	nop
 800756a:	e002      	b.n	8007572 <icmp_input+0x202>
    goto lenerr;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <icmp_input+0x202>
        goto lenerr;
 8007570:	bf00      	nop
lenerr:
  pbuf_free(p);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f002 fdaa 	bl	800a0cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8007578:	e00a      	b.n	8007590 <icmp_input+0x220>
        goto icmperr;
 800757a:	bf00      	nop
 800757c:	e004      	b.n	8007588 <icmp_input+0x218>
        goto icmperr;
 800757e:	bf00      	nop
 8007580:	e002      	b.n	8007588 <icmp_input+0x218>
          goto icmperr;
 8007582:	bf00      	nop
 8007584:	e000      	b.n	8007588 <icmp_input+0x218>
          goto icmperr;
 8007586:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f002 fd9f 	bl	800a0cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800758e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8007590:	3728      	adds	r7, #40	@ 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	24000414 	.word	0x24000414
 800759c:	24000428 	.word	0x24000428
 80075a0:	0801294c 	.word	0x0801294c
 80075a4:	080129b0 	.word	0x080129b0
 80075a8:	080129e8 	.word	0x080129e8
 80075ac:	08012a10 	.word	0x08012a10

080075b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	461a      	mov	r2, r3
 80075c0:	2103      	movs	r1, #3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f814 	bl	80075f0 <icmp_send_response>
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	461a      	mov	r2, r3
 80075e0:	210b      	movs	r1, #11
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f804 	bl	80075f0 <icmp_send_response>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	@ 0x30
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
 80075fc:	4613      	mov	r3, r2
 80075fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8007600:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8007604:	2124      	movs	r1, #36	@ 0x24
 8007606:	2022      	movs	r0, #34	@ 0x22
 8007608:	f002 fa7e 	bl	8009b08 <pbuf_alloc>
 800760c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d056      	beq.n	80076c2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	895b      	ldrh	r3, [r3, #10]
 8007618:	2b23      	cmp	r3, #35	@ 0x23
 800761a:	d806      	bhi.n	800762a <icmp_send_response+0x3a>
 800761c:	4b2b      	ldr	r3, [pc, #172]	@ (80076cc <icmp_send_response+0xdc>)
 800761e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007622:	492b      	ldr	r1, [pc, #172]	@ (80076d0 <icmp_send_response+0xe0>)
 8007624:	482b      	ldr	r0, [pc, #172]	@ (80076d4 <icmp_send_response+0xe4>)
 8007626:	f009 fdcf 	bl	80111c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	78fa      	ldrb	r2, [r7, #3]
 800763a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	78ba      	ldrb	r2, [r7, #2]
 8007640:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	711a      	strb	r2, [r3, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2200      	movs	r2, #0
 8007650:	719a      	strb	r2, [r3, #6]
 8007652:	2200      	movs	r2, #0
 8007654:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f103 0008 	add.w	r0, r3, #8
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	221c      	movs	r2, #28
 8007664:	4619      	mov	r1, r3
 8007666:	f009 ff7c 	bl	8011562 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8007670:	f107 030c 	add.w	r3, r7, #12
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f901 	bl	800787c <ip4_route>
 800767a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01b      	beq.n	80076ba <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	709a      	strb	r2, [r3, #2]
 8007688:	2200      	movs	r2, #0
 800768a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	895b      	ldrh	r3, [r3, #10]
 8007690:	4619      	mov	r1, r3
 8007692:	6978      	ldr	r0, [r7, #20]
 8007694:	f000 f87d 	bl	8007792 <inet_chksum>
 8007698:	4603      	mov	r3, r0
 800769a:	461a      	mov	r2, r3
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80076a0:	f107 020c 	add.w	r2, r7, #12
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	9302      	str	r3, [sp, #8]
 80076a8:	2301      	movs	r3, #1
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	2300      	movs	r3, #0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	23ff      	movs	r3, #255	@ 0xff
 80076b2:	2100      	movs	r1, #0
 80076b4:	69f8      	ldr	r0, [r7, #28]
 80076b6:	f000 faab 	bl	8007c10 <ip4_output_if>
  }
  pbuf_free(q);
 80076ba:	69f8      	ldr	r0, [r7, #28]
 80076bc:	f002 fd06 	bl	800a0cc <pbuf_free>
 80076c0:	e000      	b.n	80076c4 <icmp_send_response+0xd4>
    return;
 80076c2:	bf00      	nop
}
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	0801294c 	.word	0x0801294c
 80076d0:	08012a44 	.word	0x08012a44
 80076d4:	080129e8 	.word	0x080129e8

080076d8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	@ 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00d      	beq.n	8007718 <lwip_standard_chksum+0x40>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dd0a      	ble.n	8007718 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8007702:	69fa      	ldr	r2, [r7, #28]
 8007704:	1c53      	adds	r3, r2, #1
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	f107 030e 	add.w	r3, r7, #14
 800770c:	3301      	adds	r3, #1
 800770e:	7812      	ldrb	r2, [r2, #0]
 8007710:	701a      	strb	r2, [r3, #0]
    len--;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	3b01      	subs	r3, #1
 8007716:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800771c:	e00a      	b.n	8007734 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	61ba      	str	r2, [r7, #24]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4413      	add	r3, r2
 800772c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	3b02      	subs	r3, #2
 8007732:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b01      	cmp	r3, #1
 8007738:	dcf1      	bgt.n	800771e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd04      	ble.n	800774a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007740:	f107 030e 	add.w	r3, r7, #14
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800774a:	89fb      	ldrh	r3, [r7, #14]
 800774c:	461a      	mov	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	0c1a      	lsrs	r2, r3, #16
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	b29b      	uxth	r3, r3
 800775c:	4413      	add	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	0c1a      	lsrs	r2, r3, #16
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	b29b      	uxth	r3, r3
 8007768:	4413      	add	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	b29a      	uxth	r2, r3
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	b2db      	uxtb	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	b29b      	uxth	r3, r3
}
 8007786:	4618      	mov	r0, r3
 8007788:	3724      	adds	r7, #36	@ 0x24
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff ff98 	bl	80076d8 <lwip_standard_chksum>
 80077a8:	4603      	mov	r3, r0
 80077aa:	43db      	mvns	r3, r3
 80077ac:	b29b      	uxth	r3, r3
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	e02b      	b.n	8007824 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	895b      	ldrh	r3, [r3, #10]
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7ff ff7e 	bl	80076d8 <lwip_standard_chksum>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	4413      	add	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	0c1a      	lsrs	r2, r3, #16
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	895b      	ldrh	r3, [r3, #10]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00e      	beq.n	800781e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	bf0c      	ite	eq
 8007806:	2301      	moveq	r3, #1
 8007808:	2300      	movne	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	b29a      	uxth	r2, r3
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	b2db      	uxtb	r3, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1d0      	bne.n	80077cc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	b29a      	uxth	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	b29b      	uxth	r3, r3
 8007844:	43db      	mvns	r3, r3
 8007846:	b29b      	uxth	r3, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800785a:	f001 f9f5 	bl	8008c48 <mem_init>
  memp_init();
 800785e:	f001 fce7 	bl	8009230 <memp_init>
  pbuf_init();
  netif_init();
 8007862:	f001 fde5 	bl	8009430 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007866:	f008 fef9 	bl	801065c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800786a:	f003 f8a7 	bl	800a9bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800786e:	f008 fe31 	bl	80104d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8007884:	4b33      	ldr	r3, [pc, #204]	@ (8007954 <ip4_route+0xd8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	e036      	b.n	80078fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02b      	beq.n	80078f4 <ip4_route+0x78>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078a2:	089b      	lsrs	r3, r3, #2
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d022      	beq.n	80078f4 <ip4_route+0x78>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3304      	adds	r3, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01d      	beq.n	80078f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3304      	adds	r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	405a      	eors	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3308      	adds	r3, #8
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e038      	b.n	8007946 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d108      	bne.n	80078f4 <ip4_route+0x78>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	330c      	adds	r3, #12
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d101      	bne.n	80078f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	e028      	b.n	8007946 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1c5      	bne.n	800788c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007900:	4b15      	ldr	r3, [pc, #84]	@ (8007958 <ip4_route+0xdc>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01a      	beq.n	800793e <ip4_route+0xc2>
 8007908:	4b13      	ldr	r3, [pc, #76]	@ (8007958 <ip4_route+0xdc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <ip4_route+0xc2>
 8007918:	4b0f      	ldr	r3, [pc, #60]	@ (8007958 <ip4_route+0xdc>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8007928:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <ip4_route+0xdc>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3304      	adds	r3, #4
 800792e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b7f      	cmp	r3, #127	@ 0x7f
 800793c:	d101      	bne.n	8007942 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	e001      	b.n	8007946 <ip4_route+0xca>
  }

  return netif_default;
 8007942:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <ip4_route+0xdc>)
 8007944:	681b      	ldr	r3, [r3, #0]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	2401c658 	.word	0x2401c658
 8007958:	2401c65c 	.word	0x2401c65c

0800795c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d016      	beq.n	80079a2 <ip4_input_accept+0x46>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3304      	adds	r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d011      	beq.n	80079a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800797e:	4b0b      	ldr	r3, [pc, #44]	@ (80079ac <ip4_input_accept+0x50>)
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3304      	adds	r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d008      	beq.n	800799e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800798c:	4b07      	ldr	r3, [pc, #28]	@ (80079ac <ip4_input_accept+0x50>)
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fa14 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8007998:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	24000414 	.word	0x24000414

080079b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	091b      	lsrs	r3, r3, #4
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d004      	beq.n	80079d6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f002 fb7d 	bl	800a0cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e113      	b.n	8007bfe <ip4_input+0x24e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fc6f 	bl	80062d0 <lwip_htons>
 80079f2:	4603      	mov	r3, r0
 80079f4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	891b      	ldrh	r3, [r3, #8]
 80079fa:	89ba      	ldrh	r2, [r7, #12]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d204      	bcs.n	8007a0a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8007a00:	89bb      	ldrh	r3, [r7, #12]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f002 f9dd 	bl	8009dc4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	895b      	ldrh	r3, [r3, #10]
 8007a0e:	89fa      	ldrh	r2, [r7, #14]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d807      	bhi.n	8007a24 <ip4_input+0x74>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	891b      	ldrh	r3, [r3, #8]
 8007a18:	89ba      	ldrh	r2, [r7, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d802      	bhi.n	8007a24 <ip4_input+0x74>
 8007a1e:	89fb      	ldrh	r3, [r7, #14]
 8007a20:	2b13      	cmp	r3, #19
 8007a22:	d804      	bhi.n	8007a2e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f002 fb51 	bl	800a0cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e0e7      	b.n	8007bfe <ip4_input+0x24e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	4a75      	ldr	r2, [pc, #468]	@ (8007c08 <ip4_input+0x258>)
 8007a34:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	4a73      	ldr	r2, [pc, #460]	@ (8007c08 <ip4_input+0x258>)
 8007a3c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007a3e:	4b72      	ldr	r3, [pc, #456]	@ (8007c08 <ip4_input+0x258>)
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a46:	2be0      	cmp	r3, #224	@ 0xe0
 8007a48:	d112      	bne.n	8007a70 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <ip4_input+0xba>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <ip4_input+0xba>
      netif = inp;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e02a      	b.n	8007ac0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	e027      	b.n	8007ac0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8007a70:	6838      	ldr	r0, [r7, #0]
 8007a72:	f7ff ff73 	bl	800795c <ip4_input_accept>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <ip4_input+0xd2>
      netif = inp;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	e01e      	b.n	8007ac0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8007a86:	4b60      	ldr	r3, [pc, #384]	@ (8007c08 <ip4_input+0x258>)
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a8e:	d017      	beq.n	8007ac0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8007a90:	4b5e      	ldr	r3, [pc, #376]	@ (8007c0c <ip4_input+0x25c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	613b      	str	r3, [r7, #16]
 8007a96:	e00e      	b.n	8007ab6 <ip4_input+0x106>
          if (netif == inp) {
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d006      	beq.n	8007aae <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8007aa0:	6938      	ldr	r0, [r7, #16]
 8007aa2:	f7ff ff5b 	bl	800795c <ip4_input_accept>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <ip4_input+0x10e>
 8007aac:	e000      	b.n	8007ab0 <ip4_input+0x100>
            continue;
 8007aae:	bf00      	nop
        NETIF_FOREACH(netif) {
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1ed      	bne.n	8007a98 <ip4_input+0xe8>
 8007abc:	e000      	b.n	8007ac0 <ip4_input+0x110>
            break;
 8007abe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007ac0:	4b51      	ldr	r3, [pc, #324]	@ (8007c08 <ip4_input+0x258>)
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f97a 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8007ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8007c08 <ip4_input+0x258>)
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007ada:	2be0      	cmp	r3, #224	@ 0xe0
 8007adc:	d104      	bne.n	8007ae8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f002 faf4 	bl	800a0cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e08a      	b.n	8007bfe <ip4_input+0x24e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f002 faec 	bl	800a0cc <pbuf_free>
    return ERR_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e082      	b.n	8007bfe <ip4_input+0x24e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	88db      	ldrh	r3, [r3, #6]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8007b04:	4013      	ands	r3, r2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fc9e 	bl	800844c <ip4_reass>
 8007b10:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <ip4_input+0x16c>
      return ERR_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e070      	b.n	8007bfe <ip4_input+0x24e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8007b22:	4a39      	ldr	r2, [pc, #228]	@ (8007c08 <ip4_input+0x258>)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8007b28:	4a37      	ldr	r2, [pc, #220]	@ (8007c08 <ip4_input+0x258>)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8007b2e:	4a36      	ldr	r2, [pc, #216]	@ (8007c08 <ip4_input+0x258>)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	4b30      	ldr	r3, [pc, #192]	@ (8007c08 <ip4_input+0x258>)
 8007b46:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 fe84 	bl	800a858 <raw_input>
 8007b50:	4603      	mov	r3, r0
 8007b52:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d03e      	beq.n	8007bd8 <ip4_input+0x228>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f002 fa2e 	bl	8009fc0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	7a5b      	ldrb	r3, [r3, #9]
 8007b68:	2b11      	cmp	r3, #17
 8007b6a:	d006      	beq.n	8007b7a <ip4_input+0x1ca>
 8007b6c:	2b11      	cmp	r3, #17
 8007b6e:	dc13      	bgt.n	8007b98 <ip4_input+0x1e8>
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d00c      	beq.n	8007b8e <ip4_input+0x1de>
 8007b74:	2b06      	cmp	r3, #6
 8007b76:	d005      	beq.n	8007b84 <ip4_input+0x1d4>
 8007b78:	e00e      	b.n	8007b98 <ip4_input+0x1e8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f008 fe1b 	bl	80107b8 <udp_input>
        break;
 8007b82:	e029      	b.n	8007bd8 <ip4_input+0x228>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f004 fab4 	bl	800c0f4 <tcp_input>
        break;
 8007b8c:	e024      	b.n	8007bd8 <ip4_input+0x228>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fbed 	bl	8007370 <icmp_input>
        break;
 8007b96:	e01f      	b.n	8007bd8 <ip4_input+0x228>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d018      	beq.n	8007bd0 <ip4_input+0x220>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c08 <ip4_input+0x258>)
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	6939      	ldr	r1, [r7, #16]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f90b 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10f      	bne.n	8007bd0 <ip4_input+0x220>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007bb0:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <ip4_input+0x258>)
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007bb8:	2be0      	cmp	r3, #224	@ 0xe0
 8007bba:	d009      	beq.n	8007bd0 <ip4_input+0x220>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8007bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f002 fa6f 	bl	800a0a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8007bc8:	2102      	movs	r1, #2
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff fcf0 	bl	80075b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f002 fa7b 	bl	800a0cc <pbuf_free>
        break;
 8007bd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8007bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c08 <ip4_input+0x258>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8007bde:	4b0a      	ldr	r3, [pc, #40]	@ (8007c08 <ip4_input+0x258>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8007be4:	4b08      	ldr	r3, [pc, #32]	@ (8007c08 <ip4_input+0x258>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <ip4_input+0x258>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <ip4_input+0x258>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8007bf6:	4b04      	ldr	r3, [pc, #16]	@ (8007c08 <ip4_input+0x258>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	24000414 	.word	0x24000414
 8007c0c:	2401c658 	.word	0x2401c658

08007c10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	@ 0x28
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d009      	beq.n	8007c3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <ip4_output_if+0x26>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d102      	bne.n	8007c3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	3304      	adds	r3, #4
 8007c3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6979      	ldr	r1, [r7, #20]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f805 	bl	8007c64 <ip4_output_if_src>
 8007c5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	7b9b      	ldrb	r3, [r3, #14]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d006      	beq.n	8007c88 <ip4_output_if_src+0x24>
 8007c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007da8 <ip4_output_if_src+0x144>)
 8007c7c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8007c80:	494a      	ldr	r1, [pc, #296]	@ (8007dac <ip4_output_if_src+0x148>)
 8007c82:	484b      	ldr	r0, [pc, #300]	@ (8007db0 <ip4_output_if_src+0x14c>)
 8007c84:	f009 faa0 	bl	80111c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d060      	beq.n	8007d50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8007c8e:	2314      	movs	r3, #20
 8007c90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8007c92:	2114      	movs	r1, #20
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f002 f983 	bl	8009fa0 <pbuf_add_header>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007ca0:	f06f 0301 	mvn.w	r3, #1
 8007ca4:	e07c      	b.n	8007da0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	895b      	ldrh	r3, [r3, #10]
 8007cb0:	2b13      	cmp	r3, #19
 8007cb2:	d806      	bhi.n	8007cc2 <ip4_output_if_src+0x5e>
 8007cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8007da8 <ip4_output_if_src+0x144>)
 8007cb6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8007cba:	493e      	ldr	r1, [pc, #248]	@ (8007db4 <ip4_output_if_src+0x150>)
 8007cbc:	483c      	ldr	r0, [pc, #240]	@ (8007db0 <ip4_output_if_src+0x14c>)
 8007cbe:	f009 fa83 	bl	80111c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007cce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8007cd8:	8b7b      	ldrh	r3, [r7, #26]
 8007cda:	089b      	lsrs	r3, r3, #2
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007cf0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	891b      	ldrh	r3, [r3, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe faea 	bl	80062d0 <lwip_htons>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2200      	movs	r2, #0
 8007d08:	719a      	strb	r2, [r3, #6]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007db8 <ip4_output_if_src+0x154>)
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fadc 	bl	80062d0 <lwip_htons>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8007d20:	4b25      	ldr	r3, [pc, #148]	@ (8007db8 <ip4_output_if_src+0x154>)
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	4b23      	ldr	r3, [pc, #140]	@ (8007db8 <ip4_output_if_src+0x154>)
 8007d2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007d32:	4b22      	ldr	r3, [pc, #136]	@ (8007dbc <ip4_output_if_src+0x158>)
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	60da      	str	r2, [r3, #12]
 8007d3a:	e003      	b.n	8007d44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	2200      	movs	r2, #0
 8007d48:	729a      	strb	r2, [r3, #10]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	72da      	strb	r2, [r3, #11]
 8007d4e:	e00f      	b.n	8007d70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	895b      	ldrh	r3, [r3, #10]
 8007d54:	2b13      	cmp	r3, #19
 8007d56:	d802      	bhi.n	8007d5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007d58:	f06f 0301 	mvn.w	r3, #1
 8007d5c:	e020      	b.n	8007da0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8007d6a:	f107 0314 	add.w	r3, r7, #20
 8007d6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00c      	beq.n	8007d92 <ip4_output_if_src+0x12e>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	891a      	ldrh	r2, [r3, #8]
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d906      	bls.n	8007d92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fd53 	bl	8008834 <ip4_frag>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	e006      	b.n	8007da0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	68f9      	ldr	r1, [r7, #12]
 8007d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d9c:	4798      	blx	r3
 8007d9e:	4603      	mov	r3, r0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3720      	adds	r7, #32
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	08012a70 	.word	0x08012a70
 8007dac:	08012ad4 	.word	0x08012ad4
 8007db0:	08012ae0 	.word	0x08012ae0
 8007db4:	08012b08 	.word	0x08012b08
 8007db8:	2400042c 	.word	0x2400042c
 8007dbc:	08015508 	.word	0x08015508

08007dc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d002      	beq.n	8007ddc <ip4_addr_isbroadcast_u32+0x1c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e02a      	b.n	8007e36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	e021      	b.n	8007e36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	3304      	adds	r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d101      	bne.n	8007e02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e019      	b.n	8007e36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	3304      	adds	r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	405a      	eors	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10d      	bne.n	8007e34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	43da      	mvns	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d101      	bne.n	8007e34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8007e34:	2300      	movs	r3, #0
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8007e4e:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <ip_reass_tmr+0x54>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8007e54:	e018      	b.n	8007e88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	7fdb      	ldrb	r3, [r3, #31]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <ip_reass_tmr+0x32>
      r->timer--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	7fdb      	ldrb	r3, [r3, #31]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e008      	b.n	8007e88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f80a 	bl	8007e9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e3      	bne.n	8007e56 <ip_reass_tmr+0x12>
    }
  }
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	24000430 	.word	0x24000430

08007e9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d105      	bne.n	8007ebe <ip_reass_free_complete_datagram+0x22>
 8007eb2:	4b45      	ldr	r3, [pc, #276]	@ (8007fc8 <ip_reass_free_complete_datagram+0x12c>)
 8007eb4:	22ab      	movs	r2, #171	@ 0xab
 8007eb6:	4945      	ldr	r1, [pc, #276]	@ (8007fcc <ip_reass_free_complete_datagram+0x130>)
 8007eb8:	4845      	ldr	r0, [pc, #276]	@ (8007fd0 <ip_reass_free_complete_datagram+0x134>)
 8007eba:	f009 f985 	bl	80111c8 <iprintf>
  if (prev != NULL) {
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d005      	beq.n	8007eda <ip_reass_free_complete_datagram+0x3e>
 8007ece:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc8 <ip_reass_free_complete_datagram+0x12c>)
 8007ed0:	22ad      	movs	r2, #173	@ 0xad
 8007ed2:	4940      	ldr	r1, [pc, #256]	@ (8007fd4 <ip_reass_free_complete_datagram+0x138>)
 8007ed4:	483e      	ldr	r0, [pc, #248]	@ (8007fd0 <ip_reass_free_complete_datagram+0x134>)
 8007ed6:	f009 f977 	bl	80111c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	889b      	ldrh	r3, [r3, #4]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d12a      	bne.n	8007f42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	6858      	ldr	r0, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3308      	adds	r3, #8
 8007f02:	2214      	movs	r2, #20
 8007f04:	4619      	mov	r1, r3
 8007f06:	f009 fb2c 	bl	8011562 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	69b8      	ldr	r0, [r7, #24]
 8007f0e:	f7ff fb5f 	bl	80075d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007f12:	69b8      	ldr	r0, [r7, #24]
 8007f14:	f002 f962 	bl	800a1dc <pbuf_clen>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007f1c:	8bfa      	ldrh	r2, [r7, #30]
 8007f1e:	8a7b      	ldrh	r3, [r7, #18]
 8007f20:	4413      	add	r3, r2
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f26:	db05      	blt.n	8007f34 <ip_reass_free_complete_datagram+0x98>
 8007f28:	4b27      	ldr	r3, [pc, #156]	@ (8007fc8 <ip_reass_free_complete_datagram+0x12c>)
 8007f2a:	22bc      	movs	r2, #188	@ 0xbc
 8007f2c:	492a      	ldr	r1, [pc, #168]	@ (8007fd8 <ip_reass_free_complete_datagram+0x13c>)
 8007f2e:	4828      	ldr	r0, [pc, #160]	@ (8007fd0 <ip_reass_free_complete_datagram+0x134>)
 8007f30:	f009 f94a 	bl	80111c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8007f34:	8bfa      	ldrh	r2, [r7, #30]
 8007f36:	8a7b      	ldrh	r3, [r7, #18]
 8007f38:	4413      	add	r3, r2
 8007f3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8007f3c:	69b8      	ldr	r0, [r7, #24]
 8007f3e:	f002 f8c5 	bl	800a0cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8007f48:	e01f      	b.n	8007f8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f002 f93e 	bl	800a1dc <pbuf_clen>
 8007f60:	4603      	mov	r3, r0
 8007f62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007f64:	8bfa      	ldrh	r2, [r7, #30]
 8007f66:	8a7b      	ldrh	r3, [r7, #18]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f6e:	db05      	blt.n	8007f7c <ip_reass_free_complete_datagram+0xe0>
 8007f70:	4b15      	ldr	r3, [pc, #84]	@ (8007fc8 <ip_reass_free_complete_datagram+0x12c>)
 8007f72:	22cc      	movs	r2, #204	@ 0xcc
 8007f74:	4918      	ldr	r1, [pc, #96]	@ (8007fd8 <ip_reass_free_complete_datagram+0x13c>)
 8007f76:	4816      	ldr	r0, [pc, #88]	@ (8007fd0 <ip_reass_free_complete_datagram+0x134>)
 8007f78:	f009 f926 	bl	80111c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8007f7c:	8bfa      	ldrh	r2, [r7, #30]
 8007f7e:	8a7b      	ldrh	r3, [r7, #18]
 8007f80:	4413      	add	r3, r2
 8007f82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f002 f8a1 	bl	800a0cc <pbuf_free>
  while (p != NULL) {
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1dc      	bne.n	8007f4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f8c2 	bl	800811c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007f98:	4b10      	ldr	r3, [pc, #64]	@ (8007fdc <ip_reass_free_complete_datagram+0x140>)
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	8bfa      	ldrh	r2, [r7, #30]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d905      	bls.n	8007fae <ip_reass_free_complete_datagram+0x112>
 8007fa2:	4b09      	ldr	r3, [pc, #36]	@ (8007fc8 <ip_reass_free_complete_datagram+0x12c>)
 8007fa4:	22d2      	movs	r2, #210	@ 0xd2
 8007fa6:	490e      	ldr	r1, [pc, #56]	@ (8007fe0 <ip_reass_free_complete_datagram+0x144>)
 8007fa8:	4809      	ldr	r0, [pc, #36]	@ (8007fd0 <ip_reass_free_complete_datagram+0x134>)
 8007faa:	f009 f90d 	bl	80111c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <ip_reass_free_complete_datagram+0x140>)
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	8bfb      	ldrh	r3, [r7, #30]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	4b08      	ldr	r3, [pc, #32]	@ (8007fdc <ip_reass_free_complete_datagram+0x140>)
 8007fba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8007fbc:	8bfb      	ldrh	r3, [r7, #30]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	08012b38 	.word	0x08012b38
 8007fcc:	08012ba0 	.word	0x08012ba0
 8007fd0:	08012bac 	.word	0x08012bac
 8007fd4:	08012bd4 	.word	0x08012bd4
 8007fd8:	08012be8 	.word	0x08012be8
 8007fdc:	24000434 	.word	0x24000434
 8007fe0:	08012c08 	.word	0x08012c08

08007fe4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	@ 0x28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8008002:	4b28      	ldr	r3, [pc, #160]	@ (80080a4 <ip_reass_remove_oldest_datagram+0xc0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8008008:	e030      	b.n	800806c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	429a      	cmp	r2, r3
 8008014:	d10c      	bne.n	8008030 <ip_reass_remove_oldest_datagram+0x4c>
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	429a      	cmp	r2, r3
 8008020:	d106      	bne.n	8008030 <ip_reass_remove_oldest_datagram+0x4c>
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	899a      	ldrh	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	889b      	ldrh	r3, [r3, #4]
 800802a:	b29b      	uxth	r3, r3
 800802c:	429a      	cmp	r2, r3
 800802e:	d014      	beq.n	800805a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	3301      	adds	r3, #1
 8008034:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	e009      	b.n	800805a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	7fda      	ldrb	r2, [r3, #31]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	7fdb      	ldrb	r3, [r3, #31]
 800804e:	429a      	cmp	r2, r3
 8008050:	d803      	bhi.n	800805a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1cb      	bne.n	800800a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8008078:	69b9      	ldr	r1, [r7, #24]
 800807a:	6a38      	ldr	r0, [r7, #32]
 800807c:	f7ff ff0e 	bl	8007e9c <ip_reass_free_complete_datagram>
 8008080:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	da02      	bge.n	8008098 <ip_reass_remove_oldest_datagram+0xb4>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b01      	cmp	r3, #1
 8008096:	dcac      	bgt.n	8007ff2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8008098:	697b      	ldr	r3, [r7, #20]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3728      	adds	r7, #40	@ 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	24000430 	.word	0x24000430

080080a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80080b2:	2005      	movs	r0, #5
 80080b4:	f001 f922 	bl	80092fc <memp_malloc>
 80080b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d110      	bne.n	80080e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff ff8e 	bl	8007fe4 <ip_reass_remove_oldest_datagram>
 80080c8:	4602      	mov	r2, r0
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	dc03      	bgt.n	80080d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80080d0:	2005      	movs	r0, #5
 80080d2:	f001 f913 	bl	80092fc <memp_malloc>
 80080d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	e016      	b.n	8008110 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80080e2:	2220      	movs	r2, #32
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f009 f9c6 	bl	8011478 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	220f      	movs	r2, #15
 80080f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80080f2:	4b09      	ldr	r3, [pc, #36]	@ (8008118 <ip_reass_enqueue_new_datagram+0x70>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80080fa:	4a07      	ldr	r2, [pc, #28]	@ (8008118 <ip_reass_enqueue_new_datagram+0x70>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3308      	adds	r3, #8
 8008104:	2214      	movs	r2, #20
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4618      	mov	r0, r3
 800810a:	f009 fa2a 	bl	8011562 <memcpy>
  return ipr;
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	24000430 	.word	0x24000430

0800811c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8008126:	4b10      	ldr	r3, [pc, #64]	@ (8008168 <ip_reass_dequeue_datagram+0x4c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d104      	bne.n	800813a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0c      	ldr	r2, [pc, #48]	@ (8008168 <ip_reass_dequeue_datagram+0x4c>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e00d      	b.n	8008156 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <ip_reass_dequeue_datagram+0x32>
 8008140:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <ip_reass_dequeue_datagram+0x50>)
 8008142:	f240 1245 	movw	r2, #325	@ 0x145
 8008146:	490a      	ldr	r1, [pc, #40]	@ (8008170 <ip_reass_dequeue_datagram+0x54>)
 8008148:	480a      	ldr	r0, [pc, #40]	@ (8008174 <ip_reass_dequeue_datagram+0x58>)
 800814a:	f009 f83d 	bl	80111c8 <iprintf>
    prev->next = ipr->next;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	2005      	movs	r0, #5
 800815a:	f001 f93f 	bl	80093dc <memp_free>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	24000430 	.word	0x24000430
 800816c:	08012b38 	.word	0x08012b38
 8008170:	08012c2c 	.word	0x08012c2c
 8008174:	08012bac 	.word	0x08012bac

08008178 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08c      	sub	sp, #48	@ 0x30
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8008184:	2300      	movs	r3, #0
 8008186:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	885b      	ldrh	r3, [r3, #2]
 8008196:	b29b      	uxth	r3, r3
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe f899 	bl	80062d0 <lwip_htons>
 800819e:	4603      	mov	r3, r0
 80081a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80081b0:	7e7b      	ldrb	r3, [r7, #25]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8b7a      	ldrh	r2, [r7, #26]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d202      	bcs.n	80081c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80081ba:	f04f 33ff 	mov.w	r3, #4294967295
 80081be:	e135      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80081c0:	7e7b      	ldrb	r3, [r7, #25]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	8b7a      	ldrh	r2, [r7, #26]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	88db      	ldrh	r3, [r3, #6]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe f87d 	bl	80062d0 <lwip_htons>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081dc:	b29b      	uxth	r3, r3
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	2200      	movs	r2, #0
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	2200      	movs	r2, #0
 80081f0:	705a      	strb	r2, [r3, #1]
 80081f2:	2200      	movs	r2, #0
 80081f4:	709a      	strb	r2, [r3, #2]
 80081f6:	2200      	movs	r2, #0
 80081f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	8afa      	ldrh	r2, [r7, #22]
 80081fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8008200:	8afa      	ldrh	r2, [r7, #22]
 8008202:	8b7b      	ldrh	r3, [r7, #26]
 8008204:	4413      	add	r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800820c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820e:	88db      	ldrh	r3, [r3, #6]
 8008210:	b29b      	uxth	r3, r3
 8008212:	8afa      	ldrh	r2, [r7, #22]
 8008214:	429a      	cmp	r2, r3
 8008216:	d902      	bls.n	800821e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8008218:	f04f 33ff 	mov.w	r3, #4294967295
 800821c:	e106      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	627b      	str	r3, [r7, #36]	@ 0x24
 8008224:	e068      	b.n	80082f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	889b      	ldrh	r3, [r3, #4]
 8008230:	b29a      	uxth	r2, r3
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	889b      	ldrh	r3, [r3, #4]
 8008236:	b29b      	uxth	r3, r3
 8008238:	429a      	cmp	r2, r3
 800823a:	d235      	bcs.n	80082a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008240:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d020      	beq.n	800828a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8008248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824a:	889b      	ldrh	r3, [r3, #4]
 800824c:	b29a      	uxth	r2, r3
 800824e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008250:	88db      	ldrh	r3, [r3, #6]
 8008252:	b29b      	uxth	r3, r3
 8008254:	429a      	cmp	r2, r3
 8008256:	d307      	bcc.n	8008268 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8008258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825a:	88db      	ldrh	r3, [r3, #6]
 800825c:	b29a      	uxth	r2, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	889b      	ldrh	r3, [r3, #4]
 8008262:	b29b      	uxth	r3, r3
 8008264:	429a      	cmp	r2, r3
 8008266:	d902      	bls.n	800826e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	e0de      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	88db      	ldrh	r3, [r3, #6]
 8008278:	b29a      	uxth	r2, r3
 800827a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	b29b      	uxth	r3, r3
 8008280:	429a      	cmp	r2, r3
 8008282:	d03d      	beq.n	8008300 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8008288:	e03a      	b.n	8008300 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800828a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828c:	88db      	ldrh	r3, [r3, #6]
 800828e:	b29a      	uxth	r2, r3
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	889b      	ldrh	r3, [r3, #4]
 8008294:	b29b      	uxth	r3, r3
 8008296:	429a      	cmp	r2, r3
 8008298:	d902      	bls.n	80082a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295
 800829e:	e0c5      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	605a      	str	r2, [r3, #4]
      break;
 80082a6:	e02b      	b.n	8008300 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80082a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082aa:	889b      	ldrh	r3, [r3, #4]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	889b      	ldrh	r3, [r3, #4]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d102      	bne.n	80082be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295
 80082bc:	e0b6      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d202      	bcs.n	80082d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	e0ab      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80082d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d009      	beq.n	80082ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	88db      	ldrh	r3, [r3, #6]
 80082de:	b29a      	uxth	r2, r3
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	889b      	ldrh	r3, [r3, #4]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d001      	beq.n	80082ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d193      	bne.n	8008226 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80082fe:	e000      	b.n	8008302 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8008300:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d12d      	bne.n	8008364 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d01c      	beq.n	8008348 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	b29a      	uxth	r2, r3
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	889b      	ldrh	r3, [r3, #4]
 8008318:	b29b      	uxth	r3, r3
 800831a:	429a      	cmp	r2, r3
 800831c:	d906      	bls.n	800832c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800831e:	4b45      	ldr	r3, [pc, #276]	@ (8008434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8008320:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8008324:	4944      	ldr	r1, [pc, #272]	@ (8008438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8008326:	4845      	ldr	r0, [pc, #276]	@ (800843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8008328:	f008 ff4e 	bl	80111c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	b29a      	uxth	r2, r3
 8008338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833a:	889b      	ldrh	r3, [r3, #4]
 800833c:	b29b      	uxth	r3, r3
 800833e:	429a      	cmp	r2, r3
 8008340:	d010      	beq.n	8008364 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	623b      	str	r3, [r7, #32]
 8008346:	e00d      	b.n	8008364 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d006      	beq.n	800835e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8008350:	4b38      	ldr	r3, [pc, #224]	@ (8008434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8008352:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8008356:	493a      	ldr	r1, [pc, #232]	@ (8008440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8008358:	4838      	ldr	r0, [pc, #224]	@ (800843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800835a:	f008 ff35 	bl	80111c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	7f9b      	ldrb	r3, [r3, #30]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d059      	beq.n	800842a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d04f      	beq.n	800841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	889b      	ldrh	r3, [r3, #4]
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
 8008396:	e041      	b.n	800841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8008398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800839c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80083a2:	e012      	b.n	80083ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	88db      	ldrh	r3, [r3, #6]
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	889b      	ldrh	r3, [r3, #4]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d002      	beq.n	80083c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	623b      	str	r3, [r7, #32]
            break;
 80083be:	e007      	b.n	80083d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80083c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80083c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e9      	bne.n	80083a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d022      	beq.n	800841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80083de:	4b15      	ldr	r3, [pc, #84]	@ (8008434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80083e0:	f240 12df 	movw	r2, #479	@ 0x1df
 80083e4:	4917      	ldr	r1, [pc, #92]	@ (8008444 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80083e6:	4815      	ldr	r0, [pc, #84]	@ (800843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80083e8:	f008 feee 	bl	80111c8 <iprintf>
          LWIP_ASSERT("sanity check",
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d106      	bne.n	8008406 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80083f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80083fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80083fe:	4911      	ldr	r1, [pc, #68]	@ (8008444 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8008400:	480e      	ldr	r0, [pc, #56]	@ (800843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8008402:	f008 fee1 	bl	80111c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8008406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800840e:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8008410:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8008414:	490c      	ldr	r1, [pc, #48]	@ (8008448 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8008416:	4809      	ldr	r0, [pc, #36]	@ (800843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8008418:	f008 fed6 	bl	80111c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	2b00      	cmp	r3, #0
 8008420:	bf14      	ite	ne
 8008422:	2301      	movne	r3, #1
 8008424:	2300      	moveq	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	e000      	b.n	800842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3730      	adds	r7, #48	@ 0x30
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	08012b38 	.word	0x08012b38
 8008438:	08012c48 	.word	0x08012c48
 800843c:	08012bac 	.word	0x08012bac
 8008440:	08012c68 	.word	0x08012c68
 8008444:	08012ca0 	.word	0x08012ca0
 8008448:	08012cb0 	.word	0x08012cb0

0800844c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	@ 0x38
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800845a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	b2db      	uxtb	r3, r3
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b14      	cmp	r3, #20
 800846a:	f040 8171 	bne.w	8008750 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800846e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008470:	88db      	ldrh	r3, [r3, #6]
 8008472:	b29b      	uxth	r3, r3
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd ff2b 	bl	80062d0 <lwip_htons>
 800847a:	4603      	mov	r3, r0
 800847c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008480:	b29b      	uxth	r3, r3
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	885b      	ldrh	r3, [r3, #2]
 800848a:	b29b      	uxth	r3, r3
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd ff1f 	bl	80062d0 <lwip_htons>
 8008492:	4603      	mov	r3, r0
 8008494:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80084a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80084ae:	429a      	cmp	r2, r3
 80084b0:	f0c0 8150 	bcc.w	8008754 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80084b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fe8b 	bl	800a1dc <pbuf_clen>
 80084c6:	4603      	mov	r3, r0
 80084c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80084ca:	4b8c      	ldr	r3, [pc, #560]	@ (80086fc <ip4_reass+0x2b0>)
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	8c3b      	ldrh	r3, [r7, #32]
 80084d2:	4413      	add	r3, r2
 80084d4:	2b0a      	cmp	r3, #10
 80084d6:	dd10      	ble.n	80084fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80084d8:	8c3b      	ldrh	r3, [r7, #32]
 80084da:	4619      	mov	r1, r3
 80084dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084de:	f7ff fd81 	bl	8007fe4 <ip_reass_remove_oldest_datagram>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8137 	beq.w	8008758 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80084ea:	4b84      	ldr	r3, [pc, #528]	@ (80086fc <ip4_reass+0x2b0>)
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	8c3b      	ldrh	r3, [r7, #32]
 80084f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80084f4:	2b0a      	cmp	r3, #10
 80084f6:	f300 812f 	bgt.w	8008758 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80084fa:	4b81      	ldr	r3, [pc, #516]	@ (8008700 <ip4_reass+0x2b4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008500:	e015      	b.n	800852e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	695a      	ldr	r2, [r3, #20]
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	429a      	cmp	r2, r3
 800850c:	d10c      	bne.n	8008528 <ip4_reass+0xdc>
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	429a      	cmp	r2, r3
 8008518:	d106      	bne.n	8008528 <ip4_reass+0xdc>
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	899a      	ldrh	r2, [r3, #12]
 800851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008520:	889b      	ldrh	r3, [r3, #4]
 8008522:	b29b      	uxth	r3, r3
 8008524:	429a      	cmp	r2, r3
 8008526:	d006      	beq.n	8008536 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	633b      	str	r3, [r7, #48]	@ 0x30
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <ip4_reass+0xb6>
 8008534:	e000      	b.n	8008538 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8008536:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800853e:	8c3b      	ldrh	r3, [r7, #32]
 8008540:	4619      	mov	r1, r3
 8008542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008544:	f7ff fdb0 	bl	80080a8 <ip_reass_enqueue_new_datagram>
 8008548:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	d11c      	bne.n	800858a <ip4_reass+0x13e>
      goto nullreturn;
 8008550:	e105      	b.n	800875e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	b29b      	uxth	r3, r3
 8008558:	4618      	mov	r0, r3
 800855a:	f7fd feb9 	bl	80062d0 <lwip_htons>
 800855e:	4603      	mov	r3, r0
 8008560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008564:	2b00      	cmp	r3, #0
 8008566:	d110      	bne.n	800858a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	89db      	ldrh	r3, [r3, #14]
 800856c:	4618      	mov	r0, r3
 800856e:	f7fd feaf 	bl	80062d0 <lwip_htons>
 8008572:	4603      	mov	r3, r0
 8008574:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8008578:	2b00      	cmp	r3, #0
 800857a:	d006      	beq.n	800858a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	3308      	adds	r3, #8
 8008580:	2214      	movs	r2, #20
 8008582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008584:	4618      	mov	r0, r3
 8008586:	f008 ffec 	bl	8011562 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	88db      	ldrh	r3, [r3, #6]
 800858e:	b29b      	uxth	r3, r3
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b00      	cmp	r3, #0
 8008596:	bf0c      	ite	eq
 8008598:	2301      	moveq	r3, #1
 800859a:	2300      	movne	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00e      	beq.n	80085c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80085a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80085a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085aa:	4413      	add	r3, r2
 80085ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80085ae:	8b7a      	ldrh	r2, [r7, #26]
 80085b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f0c0 80a0 	bcc.w	80086f8 <ip4_reass+0x2ac>
 80085b8:	8b7b      	ldrh	r3, [r7, #26]
 80085ba:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80085be:	4293      	cmp	r3, r2
 80085c0:	f200 809a 	bhi.w	80086f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085ca:	f7ff fdd5 	bl	8008178 <ip_reass_chain_frag_into_datagram_and_validate>
 80085ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	f000 809b 	beq.w	8008710 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80085da:	4b48      	ldr	r3, [pc, #288]	@ (80086fc <ip4_reass+0x2b0>)
 80085dc:	881a      	ldrh	r2, [r3, #0]
 80085de:	8c3b      	ldrh	r3, [r7, #32]
 80085e0:	4413      	add	r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	4b45      	ldr	r3, [pc, #276]	@ (80086fc <ip4_reass+0x2b0>)
 80085e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80085ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80085f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085f2:	4413      	add	r3, r2
 80085f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	8a7a      	ldrh	r2, [r7, #18]
 80085fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	7f9b      	ldrb	r3, [r3, #30]
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	b2da      	uxtb	r2, r3
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d171      	bne.n	80086f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	8b9b      	ldrh	r3, [r3, #28]
 8008614:	3314      	adds	r3, #20
 8008616:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	3308      	adds	r3, #8
 800862e:	2214      	movs	r2, #20
 8008630:	4619      	mov	r1, r3
 8008632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008634:	f008 ff95 	bl	8011562 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8008638:	8a3b      	ldrh	r3, [r7, #16]
 800863a:	4618      	mov	r0, r3
 800863c:	f7fd fe48 	bl	80062d0 <lwip_htons>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	2200      	movs	r2, #0
 800864c:	719a      	strb	r2, [r3, #6]
 800864e:	2200      	movs	r2, #0
 8008650:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8008652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008654:	2200      	movs	r2, #0
 8008656:	729a      	strb	r2, [r3, #10]
 8008658:	2200      	movs	r2, #0
 800865a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8008662:	e00d      	b.n	8008680 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8008664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800866a:	2114      	movs	r1, #20
 800866c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800866e:	f001 fca7 	bl	8009fc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8008672:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fdeb 	bl	800a250 <pbuf_cat>
      r = iprh->next_pbuf;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8008680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1ee      	bne.n	8008664 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8008686:	4b1e      	ldr	r3, [pc, #120]	@ (8008700 <ip4_reass+0x2b4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868c:	429a      	cmp	r2, r3
 800868e:	d102      	bne.n	8008696 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8008690:	2300      	movs	r3, #0
 8008692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008694:	e010      	b.n	80086b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8008696:	4b1a      	ldr	r3, [pc, #104]	@ (8008700 <ip4_reass+0x2b4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800869c:	e007      	b.n	80086ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800869e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d006      	beq.n	80086b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80086a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f4      	bne.n	800869e <ip4_reass+0x252>
 80086b4:	e000      	b.n	80086b8 <ip4_reass+0x26c>
          break;
 80086b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80086b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086bc:	f7ff fd2e 	bl	800811c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fd8b 	bl	800a1dc <pbuf_clen>
 80086c6:	4603      	mov	r3, r0
 80086c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80086ca:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <ip4_reass+0x2b0>)
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	8c3a      	ldrh	r2, [r7, #32]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d906      	bls.n	80086e2 <ip4_reass+0x296>
 80086d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008704 <ip4_reass+0x2b8>)
 80086d6:	f240 229b 	movw	r2, #667	@ 0x29b
 80086da:	490b      	ldr	r1, [pc, #44]	@ (8008708 <ip4_reass+0x2bc>)
 80086dc:	480b      	ldr	r0, [pc, #44]	@ (800870c <ip4_reass+0x2c0>)
 80086de:	f008 fd73 	bl	80111c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80086e2:	4b06      	ldr	r3, [pc, #24]	@ (80086fc <ip4_reass+0x2b0>)
 80086e4:	881a      	ldrh	r2, [r3, #0]
 80086e6:	8c3b      	ldrh	r3, [r7, #32]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	4b03      	ldr	r3, [pc, #12]	@ (80086fc <ip4_reass+0x2b0>)
 80086ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	e038      	b.n	8008766 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	e036      	b.n	8008766 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80086f8:	bf00      	nop
 80086fa:	e00a      	b.n	8008712 <ip4_reass+0x2c6>
 80086fc:	24000434 	.word	0x24000434
 8008700:	24000430 	.word	0x24000430
 8008704:	08012b38 	.word	0x08012b38
 8008708:	08012cd4 	.word	0x08012cd4
 800870c:	08012bac 	.word	0x08012bac
    goto nullreturn_ipr;
 8008710:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <ip4_reass+0x2da>
 8008718:	4b15      	ldr	r3, [pc, #84]	@ (8008770 <ip4_reass+0x324>)
 800871a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800871e:	4915      	ldr	r1, [pc, #84]	@ (8008774 <ip4_reass+0x328>)
 8008720:	4815      	ldr	r0, [pc, #84]	@ (8008778 <ip4_reass+0x32c>)
 8008722:	f008 fd51 	bl	80111c8 <iprintf>
  if (ipr->p == NULL) {
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d116      	bne.n	800875c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800872e:	4b13      	ldr	r3, [pc, #76]	@ (800877c <ip4_reass+0x330>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008734:	429a      	cmp	r2, r3
 8008736:	d006      	beq.n	8008746 <ip4_reass+0x2fa>
 8008738:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <ip4_reass+0x324>)
 800873a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800873e:	4910      	ldr	r1, [pc, #64]	@ (8008780 <ip4_reass+0x334>)
 8008740:	480d      	ldr	r0, [pc, #52]	@ (8008778 <ip4_reass+0x32c>)
 8008742:	f008 fd41 	bl	80111c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8008746:	2100      	movs	r1, #0
 8008748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800874a:	f7ff fce7 	bl	800811c <ip_reass_dequeue_datagram>
 800874e:	e006      	b.n	800875e <ip4_reass+0x312>
    goto nullreturn;
 8008750:	bf00      	nop
 8008752:	e004      	b.n	800875e <ip4_reass+0x312>
    goto nullreturn;
 8008754:	bf00      	nop
 8008756:	e002      	b.n	800875e <ip4_reass+0x312>
      goto nullreturn;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <ip4_reass+0x312>
  }

nullreturn:
 800875c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 fcb4 	bl	800a0cc <pbuf_free>
  return NULL;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3738      	adds	r7, #56	@ 0x38
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	08012b38 	.word	0x08012b38
 8008774:	08012cf0 	.word	0x08012cf0
 8008778:	08012bac 	.word	0x08012bac
 800877c:	24000430 	.word	0x24000430
 8008780:	08012cfc 	.word	0x08012cfc

08008784 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8008788:	2006      	movs	r0, #6
 800878a:	f000 fdb7 	bl	80092fc <memp_malloc>
 800878e:	4603      	mov	r3, r0
}
 8008790:	4618      	mov	r0, r3
 8008792:	bd80      	pop	{r7, pc}

08008794 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80087a2:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80087a4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80087a8:	4906      	ldr	r1, [pc, #24]	@ (80087c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80087aa:	4807      	ldr	r0, [pc, #28]	@ (80087c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80087ac:	f008 fd0c 	bl	80111c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	2006      	movs	r0, #6
 80087b4:	f000 fe12 	bl	80093dc <memp_free>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	08012b38 	.word	0x08012b38
 80087c4:	08012d1c 	.word	0x08012d1c
 80087c8:	08012bac 	.word	0x08012bac

080087cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <ipfrag_free_pbuf_custom+0x20>
 80087de:	4b11      	ldr	r3, [pc, #68]	@ (8008824 <ipfrag_free_pbuf_custom+0x58>)
 80087e0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80087e4:	4910      	ldr	r1, [pc, #64]	@ (8008828 <ipfrag_free_pbuf_custom+0x5c>)
 80087e6:	4811      	ldr	r0, [pc, #68]	@ (800882c <ipfrag_free_pbuf_custom+0x60>)
 80087e8:	f008 fcee 	bl	80111c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d006      	beq.n	8008802 <ipfrag_free_pbuf_custom+0x36>
 80087f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <ipfrag_free_pbuf_custom+0x58>)
 80087f6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80087fa:	490d      	ldr	r1, [pc, #52]	@ (8008830 <ipfrag_free_pbuf_custom+0x64>)
 80087fc:	480b      	ldr	r0, [pc, #44]	@ (800882c <ipfrag_free_pbuf_custom+0x60>)
 80087fe:	f008 fce3 	bl	80111c8 <iprintf>
  if (pcr->original != NULL) {
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fc5c 	bl	800a0cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7ff ffbd 	bl	8008794 <ip_frag_free_pbuf_custom_ref>
}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	08012b38 	.word	0x08012b38
 8008828:	08012d28 	.word	0x08012d28
 800882c:	08012bac 	.word	0x08012bac
 8008830:	08012d34 	.word	0x08012d34

08008834 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b094      	sub	sp, #80	@ 0x50
 8008838:	af02      	add	r7, sp, #8
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800884a:	3b14      	subs	r3, #20
 800884c:	2b00      	cmp	r3, #0
 800884e:	da00      	bge.n	8008852 <ip4_frag+0x1e>
 8008850:	3307      	adds	r3, #7
 8008852:	10db      	asrs	r3, r3, #3
 8008854:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8008856:	2314      	movs	r3, #20
 8008858:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	b2db      	uxtb	r3, r3
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b14      	cmp	r3, #20
 8008874:	d002      	beq.n	800887c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8008876:	f06f 0305 	mvn.w	r3, #5
 800887a:	e110      	b.n	8008a9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	895b      	ldrh	r3, [r3, #10]
 8008880:	2b13      	cmp	r3, #19
 8008882:	d809      	bhi.n	8008898 <ip4_frag+0x64>
 8008884:	4b88      	ldr	r3, [pc, #544]	@ (8008aa8 <ip4_frag+0x274>)
 8008886:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800888a:	4988      	ldr	r1, [pc, #544]	@ (8008aac <ip4_frag+0x278>)
 800888c:	4888      	ldr	r0, [pc, #544]	@ (8008ab0 <ip4_frag+0x27c>)
 800888e:	f008 fc9b 	bl	80111c8 <iprintf>
 8008892:	f06f 0305 	mvn.w	r3, #5
 8008896:	e102      	b.n	8008a9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	88db      	ldrh	r3, [r3, #6]
 800889c:	b29b      	uxth	r3, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fd fd16 	bl	80062d0 <lwip_htons>
 80088a4:	4603      	mov	r3, r0
 80088a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80088a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80088aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80088b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80088b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	891b      	ldrh	r3, [r3, #8]
 80088be:	3b14      	subs	r3, #20
 80088c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80088c4:	e0e1      	b.n	8008a8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80088c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80088d0:	4293      	cmp	r3, r2
 80088d2:	bf28      	it	cs
 80088d4:	4613      	movcs	r3, r2
 80088d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80088d8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80088dc:	2114      	movs	r1, #20
 80088de:	200e      	movs	r0, #14
 80088e0:	f001 f912 	bl	8009b08 <pbuf_alloc>
 80088e4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80d5 	beq.w	8008a98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	895b      	ldrh	r3, [r3, #10]
 80088f2:	2b13      	cmp	r3, #19
 80088f4:	d806      	bhi.n	8008904 <ip4_frag+0xd0>
 80088f6:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa8 <ip4_frag+0x274>)
 80088f8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80088fc:	496d      	ldr	r1, [pc, #436]	@ (8008ab4 <ip4_frag+0x280>)
 80088fe:	486c      	ldr	r0, [pc, #432]	@ (8008ab0 <ip4_frag+0x27c>)
 8008900:	f008 fc62 	bl	80111c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2214      	movs	r2, #20
 800890a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800890c:	4618      	mov	r0, r3
 800890e:	f008 fe28 	bl	8011562 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8008918:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800891a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800891e:	e064      	b.n	80089ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	895a      	ldrh	r2, [r3, #10]
 8008924:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	895b      	ldrh	r3, [r3, #10]
 800892e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8008930:	429a      	cmp	r2, r3
 8008932:	d906      	bls.n	8008942 <ip4_frag+0x10e>
 8008934:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa8 <ip4_frag+0x274>)
 8008936:	f240 322d 	movw	r2, #813	@ 0x32d
 800893a:	495f      	ldr	r1, [pc, #380]	@ (8008ab8 <ip4_frag+0x284>)
 800893c:	485c      	ldr	r0, [pc, #368]	@ (8008ab0 <ip4_frag+0x27c>)
 800893e:	f008 fc43 	bl	80111c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8008942:	8bfa      	ldrh	r2, [r7, #30]
 8008944:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008948:	4293      	cmp	r3, r2
 800894a:	bf28      	it	cs
 800894c:	4613      	movcs	r3, r2
 800894e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8008952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008956:	2b00      	cmp	r3, #0
 8008958:	d105      	bne.n	8008966 <ip4_frag+0x132>
        poff = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
        continue;
 8008964:	e041      	b.n	80089ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8008966:	f7ff ff0d 	bl	8008784 <ip_frag_alloc_pbuf_custom_ref>
 800896a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d103      	bne.n	800897a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8008972:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008974:	f001 fbaa 	bl	800a0cc <pbuf_free>
        goto memerr;
 8008978:	e08f      	b.n	8008a9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800897a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8008980:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008982:	4413      	add	r3, r2
 8008984:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8008988:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800898c:	9201      	str	r2, [sp, #4]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	2241      	movs	r2, #65	@ 0x41
 8008994:	2000      	movs	r0, #0
 8008996:	f001 f9e1 	bl	8009d5c <pbuf_alloced_custom>
 800899a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d106      	bne.n	80089b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80089a2:	69b8      	ldr	r0, [r7, #24]
 80089a4:	f7ff fef6 	bl	8008794 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80089a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089aa:	f001 fb8f 	bl	800a0cc <pbuf_free>
        goto memerr;
 80089ae:	e074      	b.n	8008a9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f001 fc2b 	bl	800a20c <pbuf_ref>
      pcr->original = p;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	4a3f      	ldr	r2, [pc, #252]	@ (8008abc <ip4_frag+0x288>)
 80089c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80089c2:	6979      	ldr	r1, [r7, #20]
 80089c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089c6:	f001 fc43 	bl	800a250 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80089ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80089ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80089d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d004      	beq.n	80089ea <ip4_frag+0x1b6>
        poff = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80089ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d196      	bne.n	8008920 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80089f2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80089f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80089f8:	4413      	add	r3, r2
 80089fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a00:	f1a3 0213 	sub.w	r2, r3, #19
 8008a04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	bfcc      	ite	gt
 8008a0c:	2301      	movgt	r3, #1
 8008a0e:	2300      	movle	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8008a14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a1c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <ip4_frag+0x1f6>
 8008a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8008a2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008a30:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008a32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fd fc4b 	bl	80062d0 <lwip_htons>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008a42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a44:	3314      	adds	r3, #20
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fd fc41 	bl	80062d0 <lwip_htons>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	461a      	mov	r2, r3
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	2200      	movs	r2, #0
 8008a5a:	729a      	strb	r2, [r3, #10]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a68:	68b8      	ldr	r0, [r7, #8]
 8008a6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8008a6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a6e:	f001 fb2d 	bl	800a0cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008a72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008a76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8008a7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008a82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008a84:	4413      	add	r3, r2
 8008a86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8008a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f47f af19 	bne.w	80088c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e002      	b.n	8008a9e <ip4_frag+0x26a>
      goto memerr;
 8008a98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8008a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3748      	adds	r7, #72	@ 0x48
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	08012b38 	.word	0x08012b38
 8008aac:	08012d40 	.word	0x08012d40
 8008ab0:	08012bac 	.word	0x08012bac
 8008ab4:	08012d5c 	.word	0x08012d5c
 8008ab8:	08012d7c 	.word	0x08012d7c
 8008abc:	080087cd 	.word	0x080087cd

08008ac0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8008ac8:	4b04      	ldr	r3, [pc, #16]	@ (8008adc <ptr_to_mem+0x1c>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4413      	add	r3, r2
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	24000438 	.word	0x24000438

08008ae0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008ae8:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <mem_to_ptr+0x1c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	1ad3      	subs	r3, r2, r3
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	24000438 	.word	0x24000438

08008b00 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008b08:	4b45      	ldr	r3, [pc, #276]	@ (8008c20 <plug_holes+0x120>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d206      	bcs.n	8008b20 <plug_holes+0x20>
 8008b12:	4b44      	ldr	r3, [pc, #272]	@ (8008c24 <plug_holes+0x124>)
 8008b14:	f240 12df 	movw	r2, #479	@ 0x1df
 8008b18:	4943      	ldr	r1, [pc, #268]	@ (8008c28 <plug_holes+0x128>)
 8008b1a:	4844      	ldr	r0, [pc, #272]	@ (8008c2c <plug_holes+0x12c>)
 8008b1c:	f008 fb54 	bl	80111c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008b20:	4b43      	ldr	r3, [pc, #268]	@ (8008c30 <plug_holes+0x130>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d306      	bcc.n	8008b38 <plug_holes+0x38>
 8008b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8008c24 <plug_holes+0x124>)
 8008b2c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008b30:	4940      	ldr	r1, [pc, #256]	@ (8008c34 <plug_holes+0x134>)
 8008b32:	483e      	ldr	r0, [pc, #248]	@ (8008c2c <plug_holes+0x12c>)
 8008b34:	f008 fb48 	bl	80111c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7a1b      	ldrb	r3, [r3, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <plug_holes+0x4e>
 8008b40:	4b38      	ldr	r3, [pc, #224]	@ (8008c24 <plug_holes+0x124>)
 8008b42:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008b46:	493c      	ldr	r1, [pc, #240]	@ (8008c38 <plug_holes+0x138>)
 8008b48:	4838      	ldr	r0, [pc, #224]	@ (8008c2c <plug_holes+0x12c>)
 8008b4a:	f008 fb3d 	bl	80111c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a3a      	ldr	r2, [pc, #232]	@ (8008c3c <plug_holes+0x13c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d906      	bls.n	8008b66 <plug_holes+0x66>
 8008b58:	4b32      	ldr	r3, [pc, #200]	@ (8008c24 <plug_holes+0x124>)
 8008b5a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008b5e:	4938      	ldr	r1, [pc, #224]	@ (8008c40 <plug_holes+0x140>)
 8008b60:	4832      	ldr	r0, [pc, #200]	@ (8008c2c <plug_holes+0x12c>)
 8008b62:	f008 fb31 	bl	80111c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff ffa8 	bl	8008ac0 <ptr_to_mem>
 8008b70:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d024      	beq.n	8008bc4 <plug_holes+0xc4>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	7a1b      	ldrb	r3, [r3, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d120      	bne.n	8008bc4 <plug_holes+0xc4>
 8008b82:	4b2b      	ldr	r3, [pc, #172]	@ (8008c30 <plug_holes+0x130>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d01b      	beq.n	8008bc4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c44 <plug_holes+0x144>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d102      	bne.n	8008b9c <plug_holes+0x9c>
      lfree = mem;
 8008b96:	4a2b      	ldr	r2, [pc, #172]	@ (8008c44 <plug_holes+0x144>)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a24      	ldr	r2, [pc, #144]	@ (8008c3c <plug_holes+0x13c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00a      	beq.n	8008bc4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff ff84 	bl	8008ac0 <ptr_to_mem>
 8008bb8:	4604      	mov	r4, r0
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff ff90 	bl	8008ae0 <mem_to_ptr>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff ff79 	bl	8008ac0 <ptr_to_mem>
 8008bce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d01f      	beq.n	8008c18 <plug_holes+0x118>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	7a1b      	ldrb	r3, [r3, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11b      	bne.n	8008c18 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008be0:	4b18      	ldr	r3, [pc, #96]	@ (8008c44 <plug_holes+0x144>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d102      	bne.n	8008bf0 <plug_holes+0xf0>
      lfree = pmem;
 8008bea:	4a16      	ldr	r2, [pc, #88]	@ (8008c44 <plug_holes+0x144>)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8008c3c <plug_holes+0x13c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d00a      	beq.n	8008c18 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff ff5a 	bl	8008ac0 <ptr_to_mem>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	68b8      	ldr	r0, [r7, #8]
 8008c10:	f7ff ff66 	bl	8008ae0 <mem_to_ptr>
 8008c14:	4603      	mov	r3, r0
 8008c16:	6063      	str	r3, [r4, #4]
    }
  }
}
 8008c18:	bf00      	nop
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd90      	pop	{r4, r7, pc}
 8008c20:	24000438 	.word	0x24000438
 8008c24:	08012d8c 	.word	0x08012d8c
 8008c28:	08012de8 	.word	0x08012de8
 8008c2c:	08012e00 	.word	0x08012e00
 8008c30:	2400043c 	.word	0x2400043c
 8008c34:	08012e28 	.word	0x08012e28
 8008c38:	08012e44 	.word	0x08012e44
 8008c3c:	0001ffe8 	.word	0x0001ffe8
 8008c40:	08012e60 	.word	0x08012e60
 8008c44:	24000440 	.word	0x24000440

08008c48 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008c4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ca0 <mem_init+0x58>)
 8008c50:	4a14      	ldr	r2, [pc, #80]	@ (8008ca4 <mem_init+0x5c>)
 8008c52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <mem_init+0x58>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a12      	ldr	r2, [pc, #72]	@ (8008ca8 <mem_init+0x60>)
 8008c5e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008c6c:	480e      	ldr	r0, [pc, #56]	@ (8008ca8 <mem_init+0x60>)
 8008c6e:	f7ff ff27 	bl	8008ac0 <ptr_to_mem>
 8008c72:	4603      	mov	r3, r0
 8008c74:	4a0d      	ldr	r2, [pc, #52]	@ (8008cac <mem_init+0x64>)
 8008c76:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008c78:	4b0c      	ldr	r3, [pc, #48]	@ (8008cac <mem_init+0x64>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <mem_init+0x64>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a08      	ldr	r2, [pc, #32]	@ (8008ca8 <mem_init+0x60>)
 8008c86:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008c88:	4b08      	ldr	r3, [pc, #32]	@ (8008cac <mem_init+0x64>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a06      	ldr	r2, [pc, #24]	@ (8008ca8 <mem_init+0x60>)
 8008c8e:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008c90:	4b03      	ldr	r3, [pc, #12]	@ (8008ca0 <mem_init+0x58>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a06      	ldr	r2, [pc, #24]	@ (8008cb0 <mem_init+0x68>)
 8008c96:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	24000438 	.word	0x24000438
 8008ca4:	30020000 	.word	0x30020000
 8008ca8:	0001ffe8 	.word	0x0001ffe8
 8008cac:	2400043c 	.word	0x2400043c
 8008cb0:	24000440 	.word	0x24000440

08008cb4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff0f 	bl	8008ae0 <mem_to_ptr>
 8008cc2:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff fef9 	bl	8008ac0 <ptr_to_mem>
 8008cce:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff fef3 	bl	8008ac0 <ptr_to_mem>
 8008cda:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a11      	ldr	r2, [pc, #68]	@ (8008d28 <mem_link_valid+0x74>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d818      	bhi.n	8008d18 <mem_link_valid+0x64>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	4a0f      	ldr	r2, [pc, #60]	@ (8008d28 <mem_link_valid+0x74>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d813      	bhi.n	8008d18 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d004      	beq.n	8008d04 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d109      	bne.n	8008d18 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008d04:	4b09      	ldr	r3, [pc, #36]	@ (8008d2c <mem_link_valid+0x78>)
 8008d06:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d006      	beq.n	8008d1c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d001      	beq.n	8008d1c <mem_link_valid+0x68>
    return 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e000      	b.n	8008d1e <mem_link_valid+0x6a>
  }
  return 1;
 8008d1c:	2301      	movs	r3, #1
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	0001ffe8 	.word	0x0001ffe8
 8008d2c:	2400043c 	.word	0x2400043c

08008d30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d04c      	beq.n	8008dd8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f003 0303 	and.w	r3, r3, #3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d007      	beq.n	8008d58 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008d48:	4b25      	ldr	r3, [pc, #148]	@ (8008de0 <mem_free+0xb0>)
 8008d4a:	f240 2273 	movw	r2, #627	@ 0x273
 8008d4e:	4925      	ldr	r1, [pc, #148]	@ (8008de4 <mem_free+0xb4>)
 8008d50:	4825      	ldr	r0, [pc, #148]	@ (8008de8 <mem_free+0xb8>)
 8008d52:	f008 fa39 	bl	80111c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008d56:	e040      	b.n	8008dda <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3b0c      	subs	r3, #12
 8008d5c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008d5e:	4b23      	ldr	r3, [pc, #140]	@ (8008dec <mem_free+0xbc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d306      	bcc.n	8008d76 <mem_free+0x46>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f103 020c 	add.w	r2, r3, #12
 8008d6e:	4b20      	ldr	r3, [pc, #128]	@ (8008df0 <mem_free+0xc0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d907      	bls.n	8008d86 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008d76:	4b1a      	ldr	r3, [pc, #104]	@ (8008de0 <mem_free+0xb0>)
 8008d78:	f240 227f 	movw	r2, #639	@ 0x27f
 8008d7c:	491d      	ldr	r1, [pc, #116]	@ (8008df4 <mem_free+0xc4>)
 8008d7e:	481a      	ldr	r0, [pc, #104]	@ (8008de8 <mem_free+0xb8>)
 8008d80:	f008 fa22 	bl	80111c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008d84:	e029      	b.n	8008dda <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	7a1b      	ldrb	r3, [r3, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d107      	bne.n	8008d9e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008d8e:	4b14      	ldr	r3, [pc, #80]	@ (8008de0 <mem_free+0xb0>)
 8008d90:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008d94:	4918      	ldr	r1, [pc, #96]	@ (8008df8 <mem_free+0xc8>)
 8008d96:	4814      	ldr	r0, [pc, #80]	@ (8008de8 <mem_free+0xb8>)
 8008d98:	f008 fa16 	bl	80111c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008d9c:	e01d      	b.n	8008dda <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7ff ff88 	bl	8008cb4 <mem_link_valid>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d107      	bne.n	8008dba <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008daa:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <mem_free+0xb0>)
 8008dac:	f240 2295 	movw	r2, #661	@ 0x295
 8008db0:	4912      	ldr	r1, [pc, #72]	@ (8008dfc <mem_free+0xcc>)
 8008db2:	480d      	ldr	r0, [pc, #52]	@ (8008de8 <mem_free+0xb8>)
 8008db4:	f008 fa08 	bl	80111c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008db8:	e00f      	b.n	8008dda <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8008dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8008e00 <mem_free+0xd0>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d202      	bcs.n	8008dd0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008dca:	4a0d      	ldr	r2, [pc, #52]	@ (8008e00 <mem_free+0xd0>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fe95 	bl	8008b00 <plug_holes>
 8008dd6:	e000      	b.n	8008dda <mem_free+0xaa>
    return;
 8008dd8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	08012d8c 	.word	0x08012d8c
 8008de4:	08012e8c 	.word	0x08012e8c
 8008de8:	08012e00 	.word	0x08012e00
 8008dec:	24000438 	.word	0x24000438
 8008df0:	2400043c 	.word	0x2400043c
 8008df4:	08012eb0 	.word	0x08012eb0
 8008df8:	08012ecc 	.word	0x08012ecc
 8008dfc:	08012ef4 	.word	0x08012ef4
 8008e00:	24000440 	.word	0x24000440

08008e04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	@ 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	3303      	adds	r3, #3
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	2b0b      	cmp	r3, #11
 8008e1c:	d801      	bhi.n	8008e22 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008e1e:	230c      	movs	r3, #12
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	4a68      	ldr	r2, [pc, #416]	@ (8008fc8 <mem_trim+0x1c4>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d803      	bhi.n	8008e32 <mem_trim+0x2e>
 8008e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d201      	bcs.n	8008e36 <mem_trim+0x32>
    return NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e0c4      	b.n	8008fc0 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008e36:	4b65      	ldr	r3, [pc, #404]	@ (8008fcc <mem_trim+0x1c8>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d304      	bcc.n	8008e4a <mem_trim+0x46>
 8008e40:	4b63      	ldr	r3, [pc, #396]	@ (8008fd0 <mem_trim+0x1cc>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d306      	bcc.n	8008e58 <mem_trim+0x54>
 8008e4a:	4b62      	ldr	r3, [pc, #392]	@ (8008fd4 <mem_trim+0x1d0>)
 8008e4c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008e50:	4961      	ldr	r1, [pc, #388]	@ (8008fd8 <mem_trim+0x1d4>)
 8008e52:	4862      	ldr	r0, [pc, #392]	@ (8008fdc <mem_trim+0x1d8>)
 8008e54:	f008 f9b8 	bl	80111c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008e58:	4b5c      	ldr	r3, [pc, #368]	@ (8008fcc <mem_trim+0x1c8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d304      	bcc.n	8008e6c <mem_trim+0x68>
 8008e62:	4b5b      	ldr	r3, [pc, #364]	@ (8008fd0 <mem_trim+0x1cc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d301      	bcc.n	8008e70 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	e0a7      	b.n	8008fc0 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b0c      	subs	r3, #12
 8008e74:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008e76:	6a38      	ldr	r0, [r7, #32]
 8008e78:	f7ff fe32 	bl	8008ae0 <mem_to_ptr>
 8008e7c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	3b0c      	subs	r3, #12
 8008e88:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d906      	bls.n	8008ea0 <mem_trim+0x9c>
 8008e92:	4b50      	ldr	r3, [pc, #320]	@ (8008fd4 <mem_trim+0x1d0>)
 8008e94:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008e98:	4951      	ldr	r1, [pc, #324]	@ (8008fe0 <mem_trim+0x1dc>)
 8008e9a:	4850      	ldr	r0, [pc, #320]	@ (8008fdc <mem_trim+0x1d8>)
 8008e9c:	f008 f994 	bl	80111c8 <iprintf>
  if (newsize > size) {
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d901      	bls.n	8008eac <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e089      	b.n	8008fc0 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8008eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d101      	bne.n	8008eb8 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	e083      	b.n	8008fc0 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fdff 	bl	8008ac0 <ptr_to_mem>
 8008ec2:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	7a1b      	ldrb	r3, [r3, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d13c      	bne.n	8008f46 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a3d      	ldr	r2, [pc, #244]	@ (8008fc8 <mem_trim+0x1c4>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d106      	bne.n	8008ee4 <mem_trim+0xe0>
 8008ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd4 <mem_trim+0x1d0>)
 8008ed8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008edc:	4941      	ldr	r1, [pc, #260]	@ (8008fe4 <mem_trim+0x1e0>)
 8008ede:	483f      	ldr	r0, [pc, #252]	@ (8008fdc <mem_trim+0x1d8>)
 8008ee0:	f008 f972 	bl	80111c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	4413      	add	r3, r2
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8008ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8008fe8 <mem_trim+0x1e4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d105      	bne.n	8008f0a <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 8008efe:	6938      	ldr	r0, [r7, #16]
 8008f00:	f7ff fdde 	bl	8008ac0 <ptr_to_mem>
 8008f04:	4603      	mov	r3, r0
 8008f06:	4a38      	ldr	r2, [pc, #224]	@ (8008fe8 <mem_trim+0x1e4>)
 8008f08:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	f7ff fdd8 	bl	8008ac0 <ptr_to_mem>
 8008f10:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2200      	movs	r2, #0
 8008f16:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a26      	ldr	r2, [pc, #152]	@ (8008fc8 <mem_trim+0x1c4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d044      	beq.n	8008fbe <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fdc1 	bl	8008ac0 <ptr_to_mem>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	6053      	str	r3, [r2, #4]
 8008f44:	e03b      	b.n	8008fbe <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	3318      	adds	r3, #24
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d336      	bcc.n	8008fbe <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	4413      	add	r3, r2
 8008f56:	330c      	adds	r3, #12
 8008f58:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008fc8 <mem_trim+0x1c4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d106      	bne.n	8008f72 <mem_trim+0x16e>
 8008f64:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd4 <mem_trim+0x1d0>)
 8008f66:	f240 3216 	movw	r2, #790	@ 0x316
 8008f6a:	491e      	ldr	r1, [pc, #120]	@ (8008fe4 <mem_trim+0x1e0>)
 8008f6c:	481b      	ldr	r0, [pc, #108]	@ (8008fdc <mem_trim+0x1d8>)
 8008f6e:	f008 f92b 	bl	80111c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008f72:	6938      	ldr	r0, [r7, #16]
 8008f74:	f7ff fda4 	bl	8008ac0 <ptr_to_mem>
 8008f78:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe8 <mem_trim+0x1e4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d202      	bcs.n	8008f8a <mem_trim+0x186>
      lfree = mem2;
 8008f84:	4a18      	ldr	r2, [pc, #96]	@ (8008fe8 <mem_trim+0x1e4>)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a07      	ldr	r2, [pc, #28]	@ (8008fc8 <mem_trim+0x1c4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d007      	beq.n	8008fbe <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fd84 	bl	8008ac0 <ptr_to_mem>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008fbe:	687b      	ldr	r3, [r7, #4]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3728      	adds	r7, #40	@ 0x28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	0001ffe8 	.word	0x0001ffe8
 8008fcc:	24000438 	.word	0x24000438
 8008fd0:	2400043c 	.word	0x2400043c
 8008fd4:	08012d8c 	.word	0x08012d8c
 8008fd8:	08012f28 	.word	0x08012f28
 8008fdc:	08012e00 	.word	0x08012e00
 8008fe0:	08012f40 	.word	0x08012f40
 8008fe4:	08012f60 	.word	0x08012f60
 8008fe8:	24000440 	.word	0x24000440

08008fec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <mem_malloc+0x12>
    return NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e0d0      	b.n	80091a0 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3303      	adds	r3, #3
 8009002:	f023 0303 	bic.w	r3, r3, #3
 8009006:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	2b0b      	cmp	r3, #11
 800900c:	d801      	bhi.n	8009012 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800900e:	230c      	movs	r3, #12
 8009010:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	4a64      	ldr	r2, [pc, #400]	@ (80091a8 <mem_malloc+0x1bc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d803      	bhi.n	8009022 <mem_malloc+0x36>
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	429a      	cmp	r2, r3
 8009020:	d201      	bcs.n	8009026 <mem_malloc+0x3a>
    return NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	e0bc      	b.n	80091a0 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009026:	4b61      	ldr	r3, [pc, #388]	@ (80091ac <mem_malloc+0x1c0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff fd58 	bl	8008ae0 <mem_to_ptr>
 8009030:	61f8      	str	r0, [r7, #28]
 8009032:	e0ad      	b.n	8009190 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009034:	69f8      	ldr	r0, [r7, #28]
 8009036:	f7ff fd43 	bl	8008ac0 <ptr_to_mem>
 800903a:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	7a1b      	ldrb	r3, [r3, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 809f 	bne.w	8009184 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	429a      	cmp	r2, r3
 8009054:	f200 8096 	bhi.w	8009184 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f1a3 020c 	sub.w	r2, r3, #12
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	3318      	adds	r3, #24
 8009068:	429a      	cmp	r2, r3
 800906a:	d331      	bcc.n	80090d0 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	4413      	add	r3, r2
 8009072:	330c      	adds	r3, #12
 8009074:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4a4b      	ldr	r2, [pc, #300]	@ (80091a8 <mem_malloc+0x1bc>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d106      	bne.n	800908c <mem_malloc+0xa0>
 800907e:	4b4c      	ldr	r3, [pc, #304]	@ (80091b0 <mem_malloc+0x1c4>)
 8009080:	f240 3287 	movw	r2, #903	@ 0x387
 8009084:	494b      	ldr	r1, [pc, #300]	@ (80091b4 <mem_malloc+0x1c8>)
 8009086:	484c      	ldr	r0, [pc, #304]	@ (80091b8 <mem_malloc+0x1cc>)
 8009088:	f008 f89e 	bl	80111c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fd17 	bl	8008ac0 <ptr_to_mem>
 8009092:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2200      	movs	r2, #0
 8009098:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2201      	movs	r2, #1
 80090b2:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a3b      	ldr	r2, [pc, #236]	@ (80091a8 <mem_malloc+0x1bc>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00b      	beq.n	80090d6 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fcfc 	bl	8008ac0 <ptr_to_mem>
 80090c8:	4602      	mov	r2, r0
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6053      	str	r3, [r2, #4]
 80090ce:	e002      	b.n	80090d6 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2201      	movs	r2, #1
 80090d4:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80090d6:	4b35      	ldr	r3, [pc, #212]	@ (80091ac <mem_malloc+0x1c0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d127      	bne.n	8009130 <mem_malloc+0x144>
          struct mem *cur = lfree;
 80090e0:	4b32      	ldr	r3, [pc, #200]	@ (80091ac <mem_malloc+0x1c0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80090e6:	e005      	b.n	80090f4 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff fce7 	bl	8008ac0 <ptr_to_mem>
 80090f2:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	7a1b      	ldrb	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <mem_malloc+0x11a>
 80090fc:	4b2f      	ldr	r3, [pc, #188]	@ (80091bc <mem_malloc+0x1d0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	429a      	cmp	r2, r3
 8009104:	d1f0      	bne.n	80090e8 <mem_malloc+0xfc>
          }
          lfree = cur;
 8009106:	4a29      	ldr	r2, [pc, #164]	@ (80091ac <mem_malloc+0x1c0>)
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800910c:	4b27      	ldr	r3, [pc, #156]	@ (80091ac <mem_malloc+0x1c0>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	4b2a      	ldr	r3, [pc, #168]	@ (80091bc <mem_malloc+0x1d0>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d00b      	beq.n	8009130 <mem_malloc+0x144>
 8009118:	4b24      	ldr	r3, [pc, #144]	@ (80091ac <mem_malloc+0x1c0>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	7a1b      	ldrb	r3, [r3, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d006      	beq.n	8009130 <mem_malloc+0x144>
 8009122:	4b23      	ldr	r3, [pc, #140]	@ (80091b0 <mem_malloc+0x1c4>)
 8009124:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009128:	4925      	ldr	r1, [pc, #148]	@ (80091c0 <mem_malloc+0x1d4>)
 800912a:	4823      	ldr	r0, [pc, #140]	@ (80091b8 <mem_malloc+0x1cc>)
 800912c:	f008 f84c 	bl	80111c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	4413      	add	r3, r2
 8009136:	330c      	adds	r3, #12
 8009138:	4a20      	ldr	r2, [pc, #128]	@ (80091bc <mem_malloc+0x1d0>)
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	4293      	cmp	r3, r2
 800913e:	d906      	bls.n	800914e <mem_malloc+0x162>
 8009140:	4b1b      	ldr	r3, [pc, #108]	@ (80091b0 <mem_malloc+0x1c4>)
 8009142:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009146:	491f      	ldr	r1, [pc, #124]	@ (80091c4 <mem_malloc+0x1d8>)
 8009148:	481b      	ldr	r0, [pc, #108]	@ (80091b8 <mem_malloc+0x1cc>)
 800914a:	f008 f83d 	bl	80111c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d006      	beq.n	8009166 <mem_malloc+0x17a>
 8009158:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <mem_malloc+0x1c4>)
 800915a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800915e:	491a      	ldr	r1, [pc, #104]	@ (80091c8 <mem_malloc+0x1dc>)
 8009160:	4815      	ldr	r0, [pc, #84]	@ (80091b8 <mem_malloc+0x1cc>)
 8009162:	f008 f831 	bl	80111c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f003 0303 	and.w	r3, r3, #3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <mem_malloc+0x192>
 8009170:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <mem_malloc+0x1c4>)
 8009172:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009176:	4915      	ldr	r1, [pc, #84]	@ (80091cc <mem_malloc+0x1e0>)
 8009178:	480f      	ldr	r0, [pc, #60]	@ (80091b8 <mem_malloc+0x1cc>)
 800917a:	f008 f825 	bl	80111c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	330c      	adds	r3, #12
 8009182:	e00d      	b.n	80091a0 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 8009184:	69f8      	ldr	r0, [r7, #28]
 8009186:	f7ff fc9b 	bl	8008ac0 <ptr_to_mem>
 800918a:	4603      	mov	r3, r0
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <mem_malloc+0x1bc>)
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	429a      	cmp	r2, r3
 800919a:	f4ff af4b 	bcc.w	8009034 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	0001ffe8 	.word	0x0001ffe8
 80091ac:	24000440 	.word	0x24000440
 80091b0:	08012d8c 	.word	0x08012d8c
 80091b4:	08012f60 	.word	0x08012f60
 80091b8:	08012e00 	.word	0x08012e00
 80091bc:	2400043c 	.word	0x2400043c
 80091c0:	08012f74 	.word	0x08012f74
 80091c4:	08012f90 	.word	0x08012f90
 80091c8:	08012fc0 	.word	0x08012fc0
 80091cc:	08012ff0 	.word	0x08012ff0

080091d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	3303      	adds	r3, #3
 80091e6:	f023 0303 	bic.w	r3, r3, #3
 80091ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	e011      	b.n	8009216 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	885b      	ldrh	r3, [r3, #2]
 800921a:	461a      	mov	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4293      	cmp	r3, r2
 8009220:	dbe7      	blt.n	80091f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009236:	2300      	movs	r3, #0
 8009238:	80fb      	strh	r3, [r7, #6]
 800923a:	e009      	b.n	8009250 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	4a08      	ldr	r2, [pc, #32]	@ (8009260 <memp_init+0x30>)
 8009240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff ffc3 	bl	80091d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	3301      	adds	r3, #1
 800924e:	80fb      	strh	r3, [r7, #6]
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	2b09      	cmp	r3, #9
 8009254:	d9f2      	bls.n	800923c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	08015584 	.word	0x08015584

08009264 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d006      	beq.n	800929c <do_memp_malloc_pool+0x38>
 800928e:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <do_memp_malloc_pool+0x48>)
 8009290:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009294:	4906      	ldr	r1, [pc, #24]	@ (80092b0 <do_memp_malloc_pool+0x4c>)
 8009296:	4807      	ldr	r0, [pc, #28]	@ (80092b4 <do_memp_malloc_pool+0x50>)
 8009298:	f007 ff96 	bl	80111c8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e000      	b.n	80092a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	08013014 	.word	0x08013014
 80092b0:	08013074 	.word	0x08013074
 80092b4:	08013098 	.word	0x08013098

080092b8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <memp_malloc_pool+0x1c>
 80092c6:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <memp_malloc_pool+0x38>)
 80092c8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80092cc:	4909      	ldr	r1, [pc, #36]	@ (80092f4 <memp_malloc_pool+0x3c>)
 80092ce:	480a      	ldr	r0, [pc, #40]	@ (80092f8 <memp_malloc_pool+0x40>)
 80092d0:	f007 ff7a 	bl	80111c8 <iprintf>
  if (desc == NULL) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <memp_malloc_pool+0x26>
    return NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	e003      	b.n	80092e6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7ff ffc0 	bl	8009264 <do_memp_malloc_pool>
 80092e4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	08013014 	.word	0x08013014
 80092f4:	080130c0 	.word	0x080130c0
 80092f8:	08013098 	.word	0x08013098

080092fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	2b09      	cmp	r3, #9
 800930a:	d908      	bls.n	800931e <memp_malloc+0x22>
 800930c:	4b0a      	ldr	r3, [pc, #40]	@ (8009338 <memp_malloc+0x3c>)
 800930e:	f240 1257 	movw	r2, #343	@ 0x157
 8009312:	490a      	ldr	r1, [pc, #40]	@ (800933c <memp_malloc+0x40>)
 8009314:	480a      	ldr	r0, [pc, #40]	@ (8009340 <memp_malloc+0x44>)
 8009316:	f007 ff57 	bl	80111c8 <iprintf>
 800931a:	2300      	movs	r3, #0
 800931c:	e008      	b.n	8009330 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	4a08      	ldr	r2, [pc, #32]	@ (8009344 <memp_malloc+0x48>)
 8009322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff ff9c 	bl	8009264 <do_memp_malloc_pool>
 800932c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800932e:	68fb      	ldr	r3, [r7, #12]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	08013014 	.word	0x08013014
 800933c:	080130d4 	.word	0x080130d4
 8009340:	08013098 	.word	0x08013098
 8009344:	08015584 	.word	0x08015584

08009348 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d006      	beq.n	800936a <do_memp_free_pool+0x22>
 800935c:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <do_memp_free_pool+0x40>)
 800935e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009362:	490a      	ldr	r1, [pc, #40]	@ (800938c <do_memp_free_pool+0x44>)
 8009364:	480a      	ldr	r0, [pc, #40]	@ (8009390 <do_memp_free_pool+0x48>)
 8009366:	f007 ff2f 	bl	80111c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	08013014 	.word	0x08013014
 800938c:	080130f4 	.word	0x080130f4
 8009390:	08013098 	.word	0x08013098

08009394 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <memp_free_pool+0x1e>
 80093a4:	4b0a      	ldr	r3, [pc, #40]	@ (80093d0 <memp_free_pool+0x3c>)
 80093a6:	f240 1295 	movw	r2, #405	@ 0x195
 80093aa:	490a      	ldr	r1, [pc, #40]	@ (80093d4 <memp_free_pool+0x40>)
 80093ac:	480a      	ldr	r0, [pc, #40]	@ (80093d8 <memp_free_pool+0x44>)
 80093ae:	f007 ff0b 	bl	80111c8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <memp_free_pool+0x34>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ffc1 	bl	8009348 <do_memp_free_pool>
 80093c6:	e000      	b.n	80093ca <memp_free_pool+0x36>
    return;
 80093c8:	bf00      	nop
}
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	08013014 	.word	0x08013014
 80093d4:	080130c0 	.word	0x080130c0
 80093d8:	08013098 	.word	0x08013098

080093dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b09      	cmp	r3, #9
 80093ec:	d907      	bls.n	80093fe <memp_free+0x22>
 80093ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009420 <memp_free+0x44>)
 80093f0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80093f4:	490b      	ldr	r1, [pc, #44]	@ (8009424 <memp_free+0x48>)
 80093f6:	480c      	ldr	r0, [pc, #48]	@ (8009428 <memp_free+0x4c>)
 80093f8:	f007 fee6 	bl	80111c8 <iprintf>
 80093fc:	e00c      	b.n	8009418 <memp_free+0x3c>

  if (mem == NULL) {
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d008      	beq.n	8009416 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	4a09      	ldr	r2, [pc, #36]	@ (800942c <memp_free+0x50>)
 8009408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff ff9a 	bl	8009348 <do_memp_free_pool>
 8009414:	e000      	b.n	8009418 <memp_free+0x3c>
    return;
 8009416:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	08013014 	.word	0x08013014
 8009424:	08013114 	.word	0x08013114
 8009428:	08013098 	.word	0x08013098
 800942c:	08015584 	.word	0x08015584

08009430 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009434:	bf00      	nop
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d108      	bne.n	8009466 <netif_add+0x26>
 8009454:	4b57      	ldr	r3, [pc, #348]	@ (80095b4 <netif_add+0x174>)
 8009456:	f240 1227 	movw	r2, #295	@ 0x127
 800945a:	4957      	ldr	r1, [pc, #348]	@ (80095b8 <netif_add+0x178>)
 800945c:	4857      	ldr	r0, [pc, #348]	@ (80095bc <netif_add+0x17c>)
 800945e:	f007 feb3 	bl	80111c8 <iprintf>
 8009462:	2300      	movs	r3, #0
 8009464:	e0a2      	b.n	80095ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	d108      	bne.n	800947e <netif_add+0x3e>
 800946c:	4b51      	ldr	r3, [pc, #324]	@ (80095b4 <netif_add+0x174>)
 800946e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009472:	4953      	ldr	r1, [pc, #332]	@ (80095c0 <netif_add+0x180>)
 8009474:	4851      	ldr	r0, [pc, #324]	@ (80095bc <netif_add+0x17c>)
 8009476:	f007 fea7 	bl	80111c8 <iprintf>
 800947a:	2300      	movs	r3, #0
 800947c:	e096      	b.n	80095ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009484:	4b4f      	ldr	r3, [pc, #316]	@ (80095c4 <netif_add+0x184>)
 8009486:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800948e:	4b4d      	ldr	r3, [pc, #308]	@ (80095c4 <netif_add+0x184>)
 8009490:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009498:	4b4a      	ldr	r3, [pc, #296]	@ (80095c4 <netif_add+0x184>)
 800949a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a45      	ldr	r2, [pc, #276]	@ (80095c8 <netif_add+0x188>)
 80094b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a3a      	ldr	r2, [r7, #32]
 80094cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80094ce:	4b3f      	ldr	r3, [pc, #252]	@ (80095cc <netif_add+0x18c>)
 80094d0:	781a      	ldrb	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f917 	bl	8009718 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	4798      	blx	r3
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <netif_add+0xba>
    return NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e058      	b.n	80095ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009500:	2bff      	cmp	r3, #255	@ 0xff
 8009502:	d103      	bne.n	800950c <netif_add+0xcc>
        netif->num = 0;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009510:	4b2f      	ldr	r3, [pc, #188]	@ (80095d0 <netif_add+0x190>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e02b      	b.n	8009570 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	429a      	cmp	r2, r3
 800951e:	d106      	bne.n	800952e <netif_add+0xee>
 8009520:	4b24      	ldr	r3, [pc, #144]	@ (80095b4 <netif_add+0x174>)
 8009522:	f240 128b 	movw	r2, #395	@ 0x18b
 8009526:	492b      	ldr	r1, [pc, #172]	@ (80095d4 <netif_add+0x194>)
 8009528:	4824      	ldr	r0, [pc, #144]	@ (80095bc <netif_add+0x17c>)
 800952a:	f007 fe4d 	bl	80111c8 <iprintf>
        num_netifs++;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	3301      	adds	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2bff      	cmp	r3, #255	@ 0xff
 8009538:	dd06      	ble.n	8009548 <netif_add+0x108>
 800953a:	4b1e      	ldr	r3, [pc, #120]	@ (80095b4 <netif_add+0x174>)
 800953c:	f240 128d 	movw	r2, #397	@ 0x18d
 8009540:	4925      	ldr	r1, [pc, #148]	@ (80095d8 <netif_add+0x198>)
 8009542:	481e      	ldr	r0, [pc, #120]	@ (80095bc <netif_add+0x17c>)
 8009544:	f007 fe40 	bl	80111c8 <iprintf>
        if (netif2->num == netif->num) {
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009554:	429a      	cmp	r2, r3
 8009556:	d108      	bne.n	800956a <netif_add+0x12a>
          netif->num++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800955e:	3301      	adds	r3, #1
 8009560:	b2da      	uxtb	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8009568:	e005      	b.n	8009576 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1d0      	bne.n	8009518 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1be      	bne.n	80094fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009582:	2bfe      	cmp	r3, #254	@ 0xfe
 8009584:	d103      	bne.n	800958e <netif_add+0x14e>
    netif_num = 0;
 8009586:	4b11      	ldr	r3, [pc, #68]	@ (80095cc <netif_add+0x18c>)
 8009588:	2200      	movs	r2, #0
 800958a:	701a      	strb	r2, [r3, #0]
 800958c:	e006      	b.n	800959c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009594:	3301      	adds	r3, #1
 8009596:	b2da      	uxtb	r2, r3
 8009598:	4b0c      	ldr	r3, [pc, #48]	@ (80095cc <netif_add+0x18c>)
 800959a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800959c:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <netif_add+0x190>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80095a4:	4a0a      	ldr	r2, [pc, #40]	@ (80095d0 <netif_add+0x190>)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80095aa:	68fb      	ldr	r3, [r7, #12]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	08013130 	.word	0x08013130
 80095b8:	080131f0 	.word	0x080131f0
 80095bc:	080131ac 	.word	0x080131ac
 80095c0:	0801320c 	.word	0x0801320c
 80095c4:	08015508 	.word	0x08015508
 80095c8:	080099f3 	.word	0x080099f3
 80095cc:	2401c660 	.word	0x2401c660
 80095d0:	2401c658 	.word	0x2401c658
 80095d4:	08013230 	.word	0x08013230
 80095d8:	08013244 	.word	0x08013244

080095dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f002 fd31 	bl	800c050 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f007 fcb9 	bl	8010f68 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f9af 	bl	800a95c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d106      	bne.n	8009628 <netif_do_set_ipaddr+0x20>
 800961a:	4b1d      	ldr	r3, [pc, #116]	@ (8009690 <netif_do_set_ipaddr+0x88>)
 800961c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8009620:	491c      	ldr	r1, [pc, #112]	@ (8009694 <netif_do_set_ipaddr+0x8c>)
 8009622:	481d      	ldr	r0, [pc, #116]	@ (8009698 <netif_do_set_ipaddr+0x90>)
 8009624:	f007 fdd0 	bl	80111c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <netif_do_set_ipaddr+0x34>
 800962e:	4b18      	ldr	r3, [pc, #96]	@ (8009690 <netif_do_set_ipaddr+0x88>)
 8009630:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8009634:	4917      	ldr	r1, [pc, #92]	@ (8009694 <netif_do_set_ipaddr+0x8c>)
 8009636:	4818      	ldr	r0, [pc, #96]	@ (8009698 <netif_do_set_ipaddr+0x90>)
 8009638:	f007 fdc6 	bl	80111c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3304      	adds	r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d01c      	beq.n	8009684 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	3304      	adds	r3, #4
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800965a:	f107 0314 	add.w	r3, r7, #20
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff ffbb 	bl	80095dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <netif_do_set_ipaddr+0x6a>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	e000      	b.n	8009674 <netif_do_set_ipaddr+0x6c>
 8009672:	2300      	movs	r3, #0
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009678:	2101      	movs	r1, #1
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f8d2 	bl	8009824 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009680:	2301      	movs	r3, #1
 8009682:	e000      	b.n	8009686 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	08013130 	.word	0x08013130
 8009694:	08013274 	.word	0x08013274
 8009698:	080131ac 	.word	0x080131ac

0800969c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3308      	adds	r3, #8
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d00a      	beq.n	80096cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <netif_do_set_netmask+0x26>
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	e000      	b.n	80096c4 <netif_do_set_netmask+0x28>
 80096c2:	2300      	movs	r3, #0
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80096c8:	2301      	movs	r3, #1
 80096ca:	e000      	b.n	80096ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80096da:	b480      	push	{r7}
 80096dc:	b085      	sub	sp, #20
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	330c      	adds	r3, #12
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d00a      	beq.n	800970a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <netif_do_set_gw+0x26>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	e000      	b.n	8009702 <netif_do_set_gw+0x28>
 8009700:	2300      	movs	r3, #0
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800972a:	2300      	movs	r3, #0
 800972c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009734:	4b1c      	ldr	r3, [pc, #112]	@ (80097a8 <netif_set_addr+0x90>)
 8009736:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <netif_set_addr+0x90>)
 8009740:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009748:	4b17      	ldr	r3, [pc, #92]	@ (80097a8 <netif_set_addr+0x90>)
 800974a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <netif_set_addr+0x42>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <netif_set_addr+0x46>
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <netif_set_addr+0x48>
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d006      	beq.n	8009776 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009768:	f107 0310 	add.w	r3, r7, #16
 800976c:	461a      	mov	r2, r3
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff ff49 	bl	8009608 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009776:	69fa      	ldr	r2, [r7, #28]
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff ff8e 	bl	800969c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff ffa8 	bl	80096da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009790:	f107 0310 	add.w	r3, r7, #16
 8009794:	461a      	mov	r2, r3
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff ff35 	bl	8009608 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800979e:	bf00      	nop
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	08015508 	.word	0x08015508

080097ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80097b4:	4a04      	ldr	r2, [pc, #16]	@ (80097c8 <netif_set_default+0x1c>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	2401c65c 	.word	0x2401c65c

080097cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d107      	bne.n	80097ea <netif_set_up+0x1e>
 80097da:	4b0f      	ldr	r3, [pc, #60]	@ (8009818 <netif_set_up+0x4c>)
 80097dc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80097e0:	490e      	ldr	r1, [pc, #56]	@ (800981c <netif_set_up+0x50>)
 80097e2:	480f      	ldr	r0, [pc, #60]	@ (8009820 <netif_set_up+0x54>)
 80097e4:	f007 fcf0 	bl	80111c8 <iprintf>
 80097e8:	e013      	b.n	8009812 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10c      	bne.n	8009812 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	b2da      	uxtb	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800980a:	2103      	movs	r1, #3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f809 	bl	8009824 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	08013130 	.word	0x08013130
 800981c:	080132e4 	.word	0x080132e4
 8009820:	080131ac 	.word	0x080131ac

08009824 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d106      	bne.n	8009844 <netif_issue_reports+0x20>
 8009836:	4b18      	ldr	r3, [pc, #96]	@ (8009898 <netif_issue_reports+0x74>)
 8009838:	f240 326d 	movw	r2, #877	@ 0x36d
 800983c:	4917      	ldr	r1, [pc, #92]	@ (800989c <netif_issue_reports+0x78>)
 800983e:	4818      	ldr	r0, [pc, #96]	@ (80098a0 <netif_issue_reports+0x7c>)
 8009840:	f007 fcc2 	bl	80111c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01e      	beq.n	8009890 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009858:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800985c:	2b00      	cmp	r3, #0
 800985e:	d017      	beq.n	8009890 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d013      	beq.n	8009892 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3304      	adds	r3, #4
 800986e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00e      	beq.n	8009892 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d007      	beq.n	8009892 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3304      	adds	r3, #4
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7fd fc89 	bl	80071a0 <etharp_request>
 800988e:	e000      	b.n	8009892 <netif_issue_reports+0x6e>
    return;
 8009890:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	08013130 	.word	0x08013130
 800989c:	08013300 	.word	0x08013300
 80098a0:	080131ac 	.word	0x080131ac

080098a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d107      	bne.n	80098c2 <netif_set_down+0x1e>
 80098b2:	4b12      	ldr	r3, [pc, #72]	@ (80098fc <netif_set_down+0x58>)
 80098b4:	f240 329b 	movw	r2, #923	@ 0x39b
 80098b8:	4911      	ldr	r1, [pc, #68]	@ (8009900 <netif_set_down+0x5c>)
 80098ba:	4812      	ldr	r0, [pc, #72]	@ (8009904 <netif_set_down+0x60>)
 80098bc:	f007 fc84 	bl	80111c8 <iprintf>
 80098c0:	e019      	b.n	80098f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d012      	beq.n	80098f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80098e8:	f003 0308 	and.w	r3, r3, #8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7fd f813 	bl	800691c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	08013130 	.word	0x08013130
 8009900:	08013324 	.word	0x08013324
 8009904:	080131ac 	.word	0x080131ac

08009908 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d107      	bne.n	8009926 <netif_set_link_up+0x1e>
 8009916:	4b13      	ldr	r3, [pc, #76]	@ (8009964 <netif_set_link_up+0x5c>)
 8009918:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800991c:	4912      	ldr	r1, [pc, #72]	@ (8009968 <netif_set_link_up+0x60>)
 800991e:	4813      	ldr	r0, [pc, #76]	@ (800996c <netif_set_link_up+0x64>)
 8009920:	f007 fc52 	bl	80111c8 <iprintf>
 8009924:	e01b      	b.n	800995e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d114      	bne.n	800995e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800993a:	f043 0304 	orr.w	r3, r3, #4
 800993e:	b2da      	uxtb	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009946:	2103      	movs	r1, #3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff ff6b 	bl	8009824 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <netif_set_link_up+0x56>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	08013130 	.word	0x08013130
 8009968:	08013344 	.word	0x08013344
 800996c:	080131ac 	.word	0x080131ac

08009970 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d107      	bne.n	800998e <netif_set_link_down+0x1e>
 800997e:	4b11      	ldr	r3, [pc, #68]	@ (80099c4 <netif_set_link_down+0x54>)
 8009980:	f240 4206 	movw	r2, #1030	@ 0x406
 8009984:	4910      	ldr	r1, [pc, #64]	@ (80099c8 <netif_set_link_down+0x58>)
 8009986:	4811      	ldr	r0, [pc, #68]	@ (80099cc <netif_set_link_down+0x5c>)
 8009988:	f007 fc1e 	bl	80111c8 <iprintf>
 800998c:	e017      	b.n	80099be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d010      	beq.n	80099be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80099a2:	f023 0304 	bic.w	r3, r3, #4
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <netif_set_link_down+0x4e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	08013130 	.word	0x08013130
 80099c8:	08013368 	.word	0x08013368
 80099cc:	080131ac 	.word	0x080131ac

080099d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	61da      	str	r2, [r3, #28]
  }
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80099fe:	f06f 030b 	mvn.w	r3, #11
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d013      	beq.n	8009a48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009a20:	4b0d      	ldr	r3, [pc, #52]	@ (8009a58 <netif_get_by_index+0x48>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	e00c      	b.n	8009a42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009a2e:	3301      	adds	r3, #1
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	79fa      	ldrb	r2, [r7, #7]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d101      	bne.n	8009a3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	e006      	b.n	8009a4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1ef      	bne.n	8009a28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	2401c658 	.word	0x2401c658

08009a5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009a62:	4b0c      	ldr	r3, [pc, #48]	@ (8009a94 <pbuf_free_ooseq+0x38>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <pbuf_free_ooseq+0x3c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	607b      	str	r3, [r7, #4]
 8009a6e:	e00a      	b.n	8009a86 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f002 fb27 	bl	800c0cc <tcp_free_ooseq>
      return;
 8009a7e:	e005      	b.n	8009a8c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1f1      	bne.n	8009a70 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	2401c661 	.word	0x2401c661
 8009a98:	2401c674 	.word	0x2401c674

08009a9c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009aa0:	4b03      	ldr	r3, [pc, #12]	@ (8009ab0 <pbuf_pool_is_empty+0x14>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009aa6:	bf00      	nop
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	2401c661 	.word	0x2401c661

08009ab4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	80fb      	strh	r3, [r7, #6]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	88ba      	ldrh	r2, [r7, #4]
 8009ae0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009ae2:	8b3b      	ldrh	r3, [r7, #24]
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	7f3a      	ldrb	r2, [r7, #28]
 8009aee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2201      	movs	r2, #1
 8009af4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	73da      	strb	r2, [r3, #15]
}
 8009afc:	bf00      	nop
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	@ 0x30
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
 8009b12:	460b      	mov	r3, r1
 8009b14:	80bb      	strh	r3, [r7, #4]
 8009b16:	4613      	mov	r3, r2
 8009b18:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009b24:	d07f      	beq.n	8009c26 <pbuf_alloc+0x11e>
 8009b26:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009b2a:	f300 80c7 	bgt.w	8009cbc <pbuf_alloc+0x1b4>
 8009b2e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009b32:	d010      	beq.n	8009b56 <pbuf_alloc+0x4e>
 8009b34:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009b38:	f300 80c0 	bgt.w	8009cbc <pbuf_alloc+0x1b4>
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d002      	beq.n	8009b46 <pbuf_alloc+0x3e>
 8009b40:	2b41      	cmp	r3, #65	@ 0x41
 8009b42:	f040 80bb 	bne.w	8009cbc <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009b46:	887a      	ldrh	r2, [r7, #2]
 8009b48:	88bb      	ldrh	r3, [r7, #4]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f000 f8d1 	bl	8009cf4 <pbuf_alloc_reference>
 8009b52:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009b54:	e0bc      	b.n	8009cd0 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009b5e:	88bb      	ldrh	r3, [r7, #4]
 8009b60:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009b62:	2009      	movs	r0, #9
 8009b64:	f7ff fbca 	bl	80092fc <memp_malloc>
 8009b68:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009b70:	f7ff ff94 	bl	8009a9c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b7c:	f000 faa6 	bl	800a0cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	e0a6      	b.n	8009cd2 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009b84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009b86:	3303      	adds	r3, #3
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	8b7a      	ldrh	r2, [r7, #26]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	bf28      	it	cs
 8009b9c:	4613      	movcs	r3, r2
 8009b9e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009ba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ba2:	3310      	adds	r3, #16
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	3303      	adds	r3, #3
 8009baa:	f023 0303 	bic.w	r3, r3, #3
 8009bae:	4618      	mov	r0, r3
 8009bb0:	89f9      	ldrh	r1, [r7, #14]
 8009bb2:	8b7a      	ldrh	r2, [r7, #26]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	887b      	ldrh	r3, [r7, #2]
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6938      	ldr	r0, [r7, #16]
 8009bc2:	f7ff ff77 	bl	8009ab4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d006      	beq.n	8009be0 <pbuf_alloc+0xd8>
 8009bd2:	4b42      	ldr	r3, [pc, #264]	@ (8009cdc <pbuf_alloc+0x1d4>)
 8009bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bd8:	4941      	ldr	r1, [pc, #260]	@ (8009ce0 <pbuf_alloc+0x1d8>)
 8009bda:	4842      	ldr	r0, [pc, #264]	@ (8009ce4 <pbuf_alloc+0x1dc>)
 8009bdc:	f007 faf4 	bl	80111c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009be0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009be2:	3303      	adds	r3, #3
 8009be4:	f023 0303 	bic.w	r3, r3, #3
 8009be8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009bec:	d106      	bne.n	8009bfc <pbuf_alloc+0xf4>
 8009bee:	4b3b      	ldr	r3, [pc, #236]	@ (8009cdc <pbuf_alloc+0x1d4>)
 8009bf0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8009bf4:	493c      	ldr	r1, [pc, #240]	@ (8009ce8 <pbuf_alloc+0x1e0>)
 8009bf6:	483b      	ldr	r0, [pc, #236]	@ (8009ce4 <pbuf_alloc+0x1dc>)
 8009bf8:	f007 fae6 	bl	80111c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c06:	e002      	b.n	8009c0e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009c12:	8b7a      	ldrh	r2, [r7, #26]
 8009c14:	89fb      	ldrh	r3, [r7, #14]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009c1e:	8b7b      	ldrh	r3, [r7, #26]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d19e      	bne.n	8009b62 <pbuf_alloc+0x5a>
      break;
 8009c24:	e054      	b.n	8009cd0 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009c26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c28:	3303      	adds	r3, #3
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f023 0303 	bic.w	r3, r3, #3
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	88bb      	ldrh	r3, [r7, #4]
 8009c34:	3303      	adds	r3, #3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	f023 0303 	bic.w	r3, r3, #3
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	4413      	add	r3, r2
 8009c40:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009c42:	8b3b      	ldrh	r3, [r7, #24]
 8009c44:	3310      	adds	r3, #16
 8009c46:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009c48:	8b3a      	ldrh	r2, [r7, #24]
 8009c4a:	88bb      	ldrh	r3, [r7, #4]
 8009c4c:	3303      	adds	r3, #3
 8009c4e:	f023 0303 	bic.w	r3, r3, #3
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d306      	bcc.n	8009c64 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009c56:	88bb      	ldrh	r3, [r7, #4]
 8009c58:	3303      	adds	r3, #3
 8009c5a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d201      	bcs.n	8009c68 <pbuf_alloc+0x160>
        return NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	e034      	b.n	8009cd2 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009c68:	6978      	ldr	r0, [r7, #20]
 8009c6a:	f7ff f9bf 	bl	8008fec <mem_malloc>
 8009c6e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8009c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <pbuf_alloc+0x172>
        return NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e02b      	b.n	8009cd2 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009c7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c7c:	3310      	adds	r3, #16
 8009c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c80:	4413      	add	r3, r2
 8009c82:	3303      	adds	r3, #3
 8009c84:	f023 0303 	bic.w	r3, r3, #3
 8009c88:	4618      	mov	r0, r3
 8009c8a:	88b9      	ldrh	r1, [r7, #4]
 8009c8c:	88ba      	ldrh	r2, [r7, #4]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	887b      	ldrh	r3, [r7, #2]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	460b      	mov	r3, r1
 8009c98:	4601      	mov	r1, r0
 8009c9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c9c:	f7ff ff0a 	bl	8009ab4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d010      	beq.n	8009cce <pbuf_alloc+0x1c6>
 8009cac:	4b0b      	ldr	r3, [pc, #44]	@ (8009cdc <pbuf_alloc+0x1d4>)
 8009cae:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009cb2:	490e      	ldr	r1, [pc, #56]	@ (8009cec <pbuf_alloc+0x1e4>)
 8009cb4:	480b      	ldr	r0, [pc, #44]	@ (8009ce4 <pbuf_alloc+0x1dc>)
 8009cb6:	f007 fa87 	bl	80111c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009cba:	e008      	b.n	8009cce <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009cbc:	4b07      	ldr	r3, [pc, #28]	@ (8009cdc <pbuf_alloc+0x1d4>)
 8009cbe:	f240 1227 	movw	r2, #295	@ 0x127
 8009cc2:	490b      	ldr	r1, [pc, #44]	@ (8009cf0 <pbuf_alloc+0x1e8>)
 8009cc4:	4807      	ldr	r0, [pc, #28]	@ (8009ce4 <pbuf_alloc+0x1dc>)
 8009cc6:	f007 fa7f 	bl	80111c8 <iprintf>
      return NULL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e001      	b.n	8009cd2 <pbuf_alloc+0x1ca>
      break;
 8009cce:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3728      	adds	r7, #40	@ 0x28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	0801338c 	.word	0x0801338c
 8009ce0:	080133ec 	.word	0x080133ec
 8009ce4:	0801341c 	.word	0x0801341c
 8009ce8:	08013444 	.word	0x08013444
 8009cec:	08013478 	.word	0x08013478
 8009cf0:	080134a4 	.word	0x080134a4

08009cf4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	807b      	strh	r3, [r7, #2]
 8009d00:	4613      	mov	r3, r2
 8009d02:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009d04:	883b      	ldrh	r3, [r7, #0]
 8009d06:	2b41      	cmp	r3, #65	@ 0x41
 8009d08:	d009      	beq.n	8009d1e <pbuf_alloc_reference+0x2a>
 8009d0a:	883b      	ldrh	r3, [r7, #0]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d006      	beq.n	8009d1e <pbuf_alloc_reference+0x2a>
 8009d10:	4b0f      	ldr	r3, [pc, #60]	@ (8009d50 <pbuf_alloc_reference+0x5c>)
 8009d12:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009d16:	490f      	ldr	r1, [pc, #60]	@ (8009d54 <pbuf_alloc_reference+0x60>)
 8009d18:	480f      	ldr	r0, [pc, #60]	@ (8009d58 <pbuf_alloc_reference+0x64>)
 8009d1a:	f007 fa55 	bl	80111c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009d1e:	2008      	movs	r0, #8
 8009d20:	f7ff faec 	bl	80092fc <memp_malloc>
 8009d24:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e00b      	b.n	8009d48 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009d30:	8879      	ldrh	r1, [r7, #2]
 8009d32:	887a      	ldrh	r2, [r7, #2]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	883b      	ldrh	r3, [r7, #0]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff feb7 	bl	8009ab4 <pbuf_init_alloced_pbuf>
  return p;
 8009d46:	68fb      	ldr	r3, [r7, #12]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	0801338c 	.word	0x0801338c
 8009d54:	080134c0 	.word	0x080134c0
 8009d58:	0801341c 	.word	0x0801341c

08009d5c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	81bb      	strh	r3, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009d74:	8a7b      	ldrh	r3, [r7, #18]
 8009d76:	3303      	adds	r3, #3
 8009d78:	f023 0203 	bic.w	r2, r3, #3
 8009d7c:	89bb      	ldrh	r3, [r7, #12]
 8009d7e:	441a      	add	r2, r3
 8009d80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d901      	bls.n	8009d8a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e018      	b.n	8009dbc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d007      	beq.n	8009da0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009d90:	8a7b      	ldrh	r3, [r7, #18]
 8009d92:	3303      	adds	r3, #3
 8009d94:	f023 0303 	bic.w	r3, r3, #3
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	e001      	b.n	8009da4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	89b9      	ldrh	r1, [r7, #12]
 8009da8:	89ba      	ldrh	r2, [r7, #12]
 8009daa:	2302      	movs	r3, #2
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	897b      	ldrh	r3, [r7, #10]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	460b      	mov	r3, r1
 8009db4:	6979      	ldr	r1, [r7, #20]
 8009db6:	f7ff fe7d 	bl	8009ab4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009dba:	687b      	ldr	r3, [r7, #4]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <pbuf_realloc+0x20>
 8009dd6:	4b39      	ldr	r3, [pc, #228]	@ (8009ebc <pbuf_realloc+0xf8>)
 8009dd8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009ddc:	4938      	ldr	r1, [pc, #224]	@ (8009ec0 <pbuf_realloc+0xfc>)
 8009dde:	4839      	ldr	r0, [pc, #228]	@ (8009ec4 <pbuf_realloc+0x100>)
 8009de0:	f007 f9f2 	bl	80111c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	887a      	ldrh	r2, [r7, #2]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d261      	bcs.n	8009eb2 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	891a      	ldrh	r2, [r3, #8]
 8009df2:	887b      	ldrh	r3, [r7, #2]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009df8:	887b      	ldrh	r3, [r7, #2]
 8009dfa:	817b      	strh	r3, [r7, #10]
  q = p;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009e00:	e018      	b.n	8009e34 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	895b      	ldrh	r3, [r3, #10]
 8009e06:	897a      	ldrh	r2, [r7, #10]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	891a      	ldrh	r2, [r3, #8]
 8009e10:	893b      	ldrh	r3, [r7, #8]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d106      	bne.n	8009e34 <pbuf_realloc+0x70>
 8009e26:	4b25      	ldr	r3, [pc, #148]	@ (8009ebc <pbuf_realloc+0xf8>)
 8009e28:	f240 12af 	movw	r2, #431	@ 0x1af
 8009e2c:	4926      	ldr	r1, [pc, #152]	@ (8009ec8 <pbuf_realloc+0x104>)
 8009e2e:	4825      	ldr	r0, [pc, #148]	@ (8009ec4 <pbuf_realloc+0x100>)
 8009e30:	f007 f9ca 	bl	80111c8 <iprintf>
  while (rem_len > q->len) {
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	895b      	ldrh	r3, [r3, #10]
 8009e38:	897a      	ldrh	r2, [r7, #10]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d8e1      	bhi.n	8009e02 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	7b1b      	ldrb	r3, [r3, #12]
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d11f      	bne.n	8009e8a <pbuf_realloc+0xc6>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	895b      	ldrh	r3, [r3, #10]
 8009e4e:	897a      	ldrh	r2, [r7, #10]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d01a      	beq.n	8009e8a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	7b5b      	ldrb	r3, [r3, #13]
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d114      	bne.n	8009e8a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	1ad2      	subs	r2, r2, r3
 8009e68:	897b      	ldrh	r3, [r7, #10]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7fe ffc8 	bl	8008e04 <mem_trim>
 8009e74:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <pbuf_realloc+0xc6>
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ebc <pbuf_realloc+0xf8>)
 8009e7e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8009e82:	4912      	ldr	r1, [pc, #72]	@ (8009ecc <pbuf_realloc+0x108>)
 8009e84:	480f      	ldr	r0, [pc, #60]	@ (8009ec4 <pbuf_realloc+0x100>)
 8009e86:	f007 f99f 	bl	80111c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	897a      	ldrh	r2, [r7, #10]
 8009e8e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	895a      	ldrh	r2, [r3, #10]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d004      	beq.n	8009eaa <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 f911 	bl	800a0cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e000      	b.n	8009eb4 <pbuf_realloc+0xf0>
    return;
 8009eb2:	bf00      	nop

}
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0801338c 	.word	0x0801338c
 8009ec0:	080134d4 	.word	0x080134d4
 8009ec4:	0801341c 	.word	0x0801341c
 8009ec8:	080134ec 	.word	0x080134ec
 8009ecc:	08013504 	.word	0x08013504

08009ed0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	4613      	mov	r3, r2
 8009edc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d106      	bne.n	8009ef2 <pbuf_add_header_impl+0x22>
 8009ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8009f94 <pbuf_add_header_impl+0xc4>)
 8009ee6:	f240 12df 	movw	r2, #479	@ 0x1df
 8009eea:	492b      	ldr	r1, [pc, #172]	@ (8009f98 <pbuf_add_header_impl+0xc8>)
 8009eec:	482b      	ldr	r0, [pc, #172]	@ (8009f9c <pbuf_add_header_impl+0xcc>)
 8009eee:	f007 f96b 	bl	80111c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <pbuf_add_header_impl+0x30>
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009efe:	d301      	bcc.n	8009f04 <pbuf_add_header_impl+0x34>
    return 1;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e043      	b.n	8009f8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <pbuf_add_header_impl+0x3e>
    return 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e03e      	b.n	8009f8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	891a      	ldrh	r2, [r3, #8]
 8009f16:	8a7b      	ldrh	r3, [r7, #18]
 8009f18:	4413      	add	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	8a7a      	ldrh	r2, [r7, #18]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d901      	bls.n	8009f26 <pbuf_add_header_impl+0x56>
    return 1;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e032      	b.n	8009f8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	7b1b      	ldrb	r3, [r3, #12]
 8009f2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009f2c:	8a3b      	ldrh	r3, [r7, #16]
 8009f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00c      	beq.n	8009f50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	425b      	negs	r3, r3
 8009f3e:	4413      	add	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3310      	adds	r3, #16
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d20d      	bcs.n	8009f68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e01d      	b.n	8009f8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d006      	beq.n	8009f64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	4413      	add	r3, r2
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	e001      	b.n	8009f68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e011      	b.n	8009f8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	895a      	ldrh	r2, [r3, #10]
 8009f72:	8a7b      	ldrh	r3, [r7, #18]
 8009f74:	4413      	add	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	891a      	ldrh	r2, [r3, #8]
 8009f80:	8a7b      	ldrh	r3, [r7, #18]
 8009f82:	4413      	add	r3, r2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	811a      	strh	r2, [r3, #8]


  return 0;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	0801338c 	.word	0x0801338c
 8009f98:	08013520 	.word	0x08013520
 8009f9c:	0801341c 	.word	0x0801341c

08009fa0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009faa:	2200      	movs	r2, #0
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff ff8e 	bl	8009ed0 <pbuf_add_header_impl>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <pbuf_remove_header+0x1e>
 8009fd0:	4b20      	ldr	r3, [pc, #128]	@ (800a054 <pbuf_remove_header+0x94>)
 8009fd2:	f240 224b 	movw	r2, #587	@ 0x24b
 8009fd6:	4920      	ldr	r1, [pc, #128]	@ (800a058 <pbuf_remove_header+0x98>)
 8009fd8:	4820      	ldr	r0, [pc, #128]	@ (800a05c <pbuf_remove_header+0x9c>)
 8009fda:	f007 f8f5 	bl	80111c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <pbuf_remove_header+0x2c>
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fea:	d301      	bcc.n	8009ff0 <pbuf_remove_header+0x30>
    return 1;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e02c      	b.n	800a04a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <pbuf_remove_header+0x3a>
    return 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e027      	b.n	800a04a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	895b      	ldrh	r3, [r3, #10]
 800a002:	89fa      	ldrh	r2, [r7, #14]
 800a004:	429a      	cmp	r2, r3
 800a006:	d908      	bls.n	800a01a <pbuf_remove_header+0x5a>
 800a008:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <pbuf_remove_header+0x94>)
 800a00a:	f240 2255 	movw	r2, #597	@ 0x255
 800a00e:	4914      	ldr	r1, [pc, #80]	@ (800a060 <pbuf_remove_header+0xa0>)
 800a010:	4812      	ldr	r0, [pc, #72]	@ (800a05c <pbuf_remove_header+0x9c>)
 800a012:	f007 f8d9 	bl	80111c8 <iprintf>
 800a016:	2301      	movs	r3, #1
 800a018:	e017      	b.n	800a04a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	441a      	add	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	895a      	ldrh	r2, [r3, #10]
 800a030:	89fb      	ldrh	r3, [r7, #14]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	b29a      	uxth	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	891a      	ldrh	r2, [r3, #8]
 800a03e:	89fb      	ldrh	r3, [r7, #14]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	0801338c 	.word	0x0801338c
 800a058:	08013520 	.word	0x08013520
 800a05c:	0801341c 	.word	0x0801341c
 800a060:	0801352c 	.word	0x0801352c

0800a064 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	807b      	strh	r3, [r7, #2]
 800a070:	4613      	mov	r3, r2
 800a072:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da08      	bge.n	800a08e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a07c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a080:	425b      	negs	r3, r3
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff ff9b 	bl	8009fc0 <pbuf_remove_header>
 800a08a:	4603      	mov	r3, r0
 800a08c:	e007      	b.n	800a09e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a08e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a092:	787a      	ldrb	r2, [r7, #1]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff ff1a 	bl	8009ed0 <pbuf_add_header_impl>
 800a09c:	4603      	mov	r3, r0
  }
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a0b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff ffd2 	bl	800a064 <pbuf_header_impl>
 800a0c0:	4603      	mov	r3, r0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <pbuf_free+0x22>
 800a0e0:	4b38      	ldr	r3, [pc, #224]	@ (800a1c4 <pbuf_free+0xf8>)
 800a0e2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a0e6:	4938      	ldr	r1, [pc, #224]	@ (800a1c8 <pbuf_free+0xfc>)
 800a0e8:	4838      	ldr	r0, [pc, #224]	@ (800a1cc <pbuf_free+0x100>)
 800a0ea:	f007 f86d 	bl	80111c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e063      	b.n	800a1ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a0f6:	e05c      	b.n	800a1b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7b9b      	ldrb	r3, [r3, #14]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d106      	bne.n	800a10e <pbuf_free+0x42>
 800a100:	4b30      	ldr	r3, [pc, #192]	@ (800a1c4 <pbuf_free+0xf8>)
 800a102:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a106:	4932      	ldr	r1, [pc, #200]	@ (800a1d0 <pbuf_free+0x104>)
 800a108:	4830      	ldr	r0, [pc, #192]	@ (800a1cc <pbuf_free+0x100>)
 800a10a:	f007 f85d 	bl	80111c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7b9b      	ldrb	r3, [r3, #14]
 800a112:	3b01      	subs	r3, #1
 800a114:	b2da      	uxtb	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	739a      	strb	r2, [r3, #14]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	7b9b      	ldrb	r3, [r3, #14]
 800a11e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a120:	7dbb      	ldrb	r3, [r7, #22]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d143      	bne.n	800a1ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7b1b      	ldrb	r3, [r3, #12]
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7b5b      	ldrb	r3, [r3, #13]
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d011      	beq.n	800a166 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <pbuf_free+0x90>
 800a14e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c4 <pbuf_free+0xf8>)
 800a150:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a154:	491f      	ldr	r1, [pc, #124]	@ (800a1d4 <pbuf_free+0x108>)
 800a156:	481d      	ldr	r0, [pc, #116]	@ (800a1cc <pbuf_free+0x100>)
 800a158:	f007 f836 	bl	80111c8 <iprintf>
        pc->custom_free_function(p);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
 800a164:	e01d      	b.n	800a1a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d104      	bne.n	800a176 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	2009      	movs	r0, #9
 800a170:	f7ff f934 	bl	80093dc <memp_free>
 800a174:	e015      	b.n	800a1a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d104      	bne.n	800a186 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	2008      	movs	r0, #8
 800a180:	f7ff f92c 	bl	80093dc <memp_free>
 800a184:	e00d      	b.n	800a1a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d103      	bne.n	800a194 <pbuf_free+0xc8>
          mem_free(p);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7fe fdcf 	bl	8008d30 <mem_free>
 800a192:	e006      	b.n	800a1a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a194:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <pbuf_free+0xf8>)
 800a196:	f240 320f 	movw	r2, #783	@ 0x30f
 800a19a:	490f      	ldr	r1, [pc, #60]	@ (800a1d8 <pbuf_free+0x10c>)
 800a19c:	480b      	ldr	r0, [pc, #44]	@ (800a1cc <pbuf_free+0x100>)
 800a19e:	f007 f813 	bl	80111c8 <iprintf>
        }
      }
      count++;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	607b      	str	r3, [r7, #4]
 800a1ac:	e001      	b.n	800a1b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d19f      	bne.n	800a0f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	0801338c 	.word	0x0801338c
 800a1c8:	08013520 	.word	0x08013520
 800a1cc:	0801341c 	.word	0x0801341c
 800a1d0:	0801354c 	.word	0x0801354c
 800a1d4:	08013564 	.word	0x08013564
 800a1d8:	08013588 	.word	0x08013588

0800a1dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a1e8:	e005      	b.n	800a1f6 <pbuf_clen+0x1a>
    ++len;
 800a1ea:	89fb      	ldrh	r3, [r7, #14]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f6      	bne.n	800a1ea <pbuf_clen+0xe>
  }
  return len;
 800a1fc:	89fb      	ldrh	r3, [r7, #14]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d010      	beq.n	800a23c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	7b9b      	ldrb	r3, [r3, #14]
 800a21e:	3301      	adds	r3, #1
 800a220:	b2da      	uxtb	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	7b9b      	ldrb	r3, [r3, #14]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d106      	bne.n	800a23c <pbuf_ref+0x30>
 800a22e:	4b05      	ldr	r3, [pc, #20]	@ (800a244 <pbuf_ref+0x38>)
 800a230:	f240 3242 	movw	r2, #834	@ 0x342
 800a234:	4904      	ldr	r1, [pc, #16]	@ (800a248 <pbuf_ref+0x3c>)
 800a236:	4805      	ldr	r0, [pc, #20]	@ (800a24c <pbuf_ref+0x40>)
 800a238:	f006 ffc6 	bl	80111c8 <iprintf>
  }
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	0801338c 	.word	0x0801338c
 800a248:	0801359c 	.word	0x0801359c
 800a24c:	0801341c 	.word	0x0801341c

0800a250 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <pbuf_cat+0x16>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d107      	bne.n	800a276 <pbuf_cat+0x26>
 800a266:	4b20      	ldr	r3, [pc, #128]	@ (800a2e8 <pbuf_cat+0x98>)
 800a268:	f240 3259 	movw	r2, #857	@ 0x359
 800a26c:	491f      	ldr	r1, [pc, #124]	@ (800a2ec <pbuf_cat+0x9c>)
 800a26e:	4820      	ldr	r0, [pc, #128]	@ (800a2f0 <pbuf_cat+0xa0>)
 800a270:	f006 ffaa 	bl	80111c8 <iprintf>
 800a274:	e034      	b.n	800a2e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e00a      	b.n	800a292 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	891a      	ldrh	r2, [r3, #8]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	891b      	ldrh	r3, [r3, #8]
 800a284:	4413      	add	r3, r2
 800a286:	b29a      	uxth	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f0      	bne.n	800a27c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	891a      	ldrh	r2, [r3, #8]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	895b      	ldrh	r3, [r3, #10]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d006      	beq.n	800a2b4 <pbuf_cat+0x64>
 800a2a6:	4b10      	ldr	r3, [pc, #64]	@ (800a2e8 <pbuf_cat+0x98>)
 800a2a8:	f240 3262 	movw	r2, #866	@ 0x362
 800a2ac:	4911      	ldr	r1, [pc, #68]	@ (800a2f4 <pbuf_cat+0xa4>)
 800a2ae:	4810      	ldr	r0, [pc, #64]	@ (800a2f0 <pbuf_cat+0xa0>)
 800a2b0:	f006 ff8a 	bl	80111c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d006      	beq.n	800a2ca <pbuf_cat+0x7a>
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e8 <pbuf_cat+0x98>)
 800a2be:	f240 3263 	movw	r2, #867	@ 0x363
 800a2c2:	490d      	ldr	r1, [pc, #52]	@ (800a2f8 <pbuf_cat+0xa8>)
 800a2c4:	480a      	ldr	r0, [pc, #40]	@ (800a2f0 <pbuf_cat+0xa0>)
 800a2c6:	f006 ff7f 	bl	80111c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	891a      	ldrh	r2, [r3, #8]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	891b      	ldrh	r3, [r3, #8]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0801338c 	.word	0x0801338c
 800a2ec:	080135b0 	.word	0x080135b0
 800a2f0:	0801341c 	.word	0x0801341c
 800a2f4:	080135e8 	.word	0x080135e8
 800a2f8:	08013618 	.word	0x08013618

0800a2fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ffa1 	bl	800a250 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a30e:	6838      	ldr	r0, [r7, #0]
 800a310:	f7ff ff7c 	bl	800a20c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a326:	2300      	movs	r3, #0
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	2300      	movs	r3, #0
 800a32c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d008      	beq.n	800a346 <pbuf_copy+0x2a>
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <pbuf_copy+0x2a>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	891a      	ldrh	r2, [r3, #8]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	891b      	ldrh	r3, [r3, #8]
 800a342:	429a      	cmp	r2, r3
 800a344:	d209      	bcs.n	800a35a <pbuf_copy+0x3e>
 800a346:	4b57      	ldr	r3, [pc, #348]	@ (800a4a4 <pbuf_copy+0x188>)
 800a348:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800a34c:	4956      	ldr	r1, [pc, #344]	@ (800a4a8 <pbuf_copy+0x18c>)
 800a34e:	4857      	ldr	r0, [pc, #348]	@ (800a4ac <pbuf_copy+0x190>)
 800a350:	f006 ff3a 	bl	80111c8 <iprintf>
 800a354:	f06f 030f 	mvn.w	r3, #15
 800a358:	e09f      	b.n	800a49a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	895b      	ldrh	r3, [r3, #10]
 800a35e:	461a      	mov	r2, r3
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	895b      	ldrh	r3, [r3, #10]
 800a368:	4619      	mov	r1, r3
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	1acb      	subs	r3, r1, r3
 800a36e:	429a      	cmp	r2, r3
 800a370:	d306      	bcc.n	800a380 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	895b      	ldrh	r3, [r3, #10]
 800a376:	461a      	mov	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e005      	b.n	800a38c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	895b      	ldrh	r3, [r3, #10]
 800a384:	461a      	mov	r2, r3
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	18d0      	adds	r0, r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	4413      	add	r3, r2
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	f007 f8df 	bl	8011562 <memcpy>
    offset_to += len;
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	895b      	ldrh	r3, [r3, #10]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d906      	bls.n	800a3ce <pbuf_copy+0xb2>
 800a3c0:	4b38      	ldr	r3, [pc, #224]	@ (800a4a4 <pbuf_copy+0x188>)
 800a3c2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800a3c6:	493a      	ldr	r1, [pc, #232]	@ (800a4b0 <pbuf_copy+0x194>)
 800a3c8:	4838      	ldr	r0, [pc, #224]	@ (800a4ac <pbuf_copy+0x190>)
 800a3ca:	f006 fefd 	bl	80111c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	895b      	ldrh	r3, [r3, #10]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d906      	bls.n	800a3e8 <pbuf_copy+0xcc>
 800a3da:	4b32      	ldr	r3, [pc, #200]	@ (800a4a4 <pbuf_copy+0x188>)
 800a3dc:	f240 32da 	movw	r2, #986	@ 0x3da
 800a3e0:	4934      	ldr	r1, [pc, #208]	@ (800a4b4 <pbuf_copy+0x198>)
 800a3e2:	4832      	ldr	r0, [pc, #200]	@ (800a4ac <pbuf_copy+0x190>)
 800a3e4:	f006 fef0 	bl	80111c8 <iprintf>
    if (offset_from >= p_from->len) {
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	895b      	ldrh	r3, [r3, #10]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d304      	bcc.n	800a3fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	895b      	ldrh	r3, [r3, #10]
 800a402:	461a      	mov	r2, r3
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	4293      	cmp	r3, r2
 800a408:	d114      	bne.n	800a434 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10c      	bne.n	800a434 <pbuf_copy+0x118>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d009      	beq.n	800a434 <pbuf_copy+0x118>
 800a420:	4b20      	ldr	r3, [pc, #128]	@ (800a4a4 <pbuf_copy+0x188>)
 800a422:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800a426:	4924      	ldr	r1, [pc, #144]	@ (800a4b8 <pbuf_copy+0x19c>)
 800a428:	4820      	ldr	r0, [pc, #128]	@ (800a4ac <pbuf_copy+0x190>)
 800a42a:	f006 fecd 	bl	80111c8 <iprintf>
 800a42e:	f06f 030f 	mvn.w	r3, #15
 800a432:	e032      	b.n	800a49a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d013      	beq.n	800a462 <pbuf_copy+0x146>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	895a      	ldrh	r2, [r3, #10]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	891b      	ldrh	r3, [r3, #8]
 800a442:	429a      	cmp	r2, r3
 800a444:	d10d      	bne.n	800a462 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <pbuf_copy+0x146>
 800a44e:	4b15      	ldr	r3, [pc, #84]	@ (800a4a4 <pbuf_copy+0x188>)
 800a450:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a454:	4919      	ldr	r1, [pc, #100]	@ (800a4bc <pbuf_copy+0x1a0>)
 800a456:	4815      	ldr	r0, [pc, #84]	@ (800a4ac <pbuf_copy+0x190>)
 800a458:	f006 feb6 	bl	80111c8 <iprintf>
 800a45c:	f06f 0305 	mvn.w	r3, #5
 800a460:	e01b      	b.n	800a49a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d013      	beq.n	800a490 <pbuf_copy+0x174>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	895a      	ldrh	r2, [r3, #10]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	891b      	ldrh	r3, [r3, #8]
 800a470:	429a      	cmp	r2, r3
 800a472:	d10d      	bne.n	800a490 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <pbuf_copy+0x174>
 800a47c:	4b09      	ldr	r3, [pc, #36]	@ (800a4a4 <pbuf_copy+0x188>)
 800a47e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a482:	490e      	ldr	r1, [pc, #56]	@ (800a4bc <pbuf_copy+0x1a0>)
 800a484:	4809      	ldr	r0, [pc, #36]	@ (800a4ac <pbuf_copy+0x190>)
 800a486:	f006 fe9f 	bl	80111c8 <iprintf>
 800a48a:	f06f 0305 	mvn.w	r3, #5
 800a48e:	e004      	b.n	800a49a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f47f af61 	bne.w	800a35a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	0801338c 	.word	0x0801338c
 800a4a8:	08013664 	.word	0x08013664
 800a4ac:	0801341c 	.word	0x0801341c
 800a4b0:	08013694 	.word	0x08013694
 800a4b4:	080136ac 	.word	0x080136ac
 800a4b8:	080136c8 	.word	0x080136c8
 800a4bc:	080136d8 	.word	0x080136d8

0800a4c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	80fb      	strh	r3, [r7, #6]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d108      	bne.n	800a4f6 <pbuf_copy_partial+0x36>
 800a4e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a594 <pbuf_copy_partial+0xd4>)
 800a4e6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a4ea:	492b      	ldr	r1, [pc, #172]	@ (800a598 <pbuf_copy_partial+0xd8>)
 800a4ec:	482b      	ldr	r0, [pc, #172]	@ (800a59c <pbuf_copy_partial+0xdc>)
 800a4ee:	f006 fe6b 	bl	80111c8 <iprintf>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e04a      	b.n	800a58c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d108      	bne.n	800a50e <pbuf_copy_partial+0x4e>
 800a4fc:	4b25      	ldr	r3, [pc, #148]	@ (800a594 <pbuf_copy_partial+0xd4>)
 800a4fe:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a502:	4927      	ldr	r1, [pc, #156]	@ (800a5a0 <pbuf_copy_partial+0xe0>)
 800a504:	4825      	ldr	r0, [pc, #148]	@ (800a59c <pbuf_copy_partial+0xdc>)
 800a506:	f006 fe5f 	bl	80111c8 <iprintf>
 800a50a:	2300      	movs	r3, #0
 800a50c:	e03e      	b.n	800a58c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	e034      	b.n	800a57e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a514:	88bb      	ldrh	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <pbuf_copy_partial+0x70>
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	895b      	ldrh	r3, [r3, #10]
 800a51e:	88ba      	ldrh	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d305      	bcc.n	800a530 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	895b      	ldrh	r3, [r3, #10]
 800a528:	88ba      	ldrh	r2, [r7, #4]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	80bb      	strh	r3, [r7, #4]
 800a52e:	e023      	b.n	800a578 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	895a      	ldrh	r2, [r3, #10]
 800a534:	88bb      	ldrh	r3, [r7, #4]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a53a:	8b3a      	ldrh	r2, [r7, #24]
 800a53c:	88fb      	ldrh	r3, [r7, #6]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d901      	bls.n	800a546 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a542:	88fb      	ldrh	r3, [r7, #6]
 800a544:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a546:	8b7b      	ldrh	r3, [r7, #26]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	18d0      	adds	r0, r2, r3
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	88bb      	ldrh	r3, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	8b3a      	ldrh	r2, [r7, #24]
 800a556:	4619      	mov	r1, r3
 800a558:	f007 f803 	bl	8011562 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a55c:	8afa      	ldrh	r2, [r7, #22]
 800a55e:	8b3b      	ldrh	r3, [r7, #24]
 800a560:	4413      	add	r3, r2
 800a562:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a564:	8b7a      	ldrh	r2, [r7, #26]
 800a566:	8b3b      	ldrh	r3, [r7, #24]
 800a568:	4413      	add	r3, r2
 800a56a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	8b3b      	ldrh	r3, [r7, #24]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	61fb      	str	r3, [r7, #28]
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <pbuf_copy_partial+0xca>
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1c4      	bne.n	800a514 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a58a:	8afb      	ldrh	r3, [r7, #22]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3720      	adds	r7, #32
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	0801338c 	.word	0x0801338c
 800a598:	08013704 	.word	0x08013704
 800a59c:	0801341c 	.word	0x0801341c
 800a5a0:	08013724 	.word	0x08013724

0800a5a4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800a5b2:	897b      	ldrh	r3, [r7, #10]
 800a5b4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800a5ba:	e007      	b.n	800a5cc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	895b      	ldrh	r3, [r3, #10]
 800a5c0:	8afa      	ldrh	r2, [r7, #22]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d004      	beq.n	800a5dc <pbuf_skip_const+0x38>
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	895b      	ldrh	r3, [r3, #10]
 800a5d6:	8afa      	ldrh	r2, [r7, #22]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d2ef      	bcs.n	800a5bc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d002      	beq.n	800a5e8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	8afa      	ldrh	r2, [r7, #22]
 800a5e6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800a5e8:	693b      	ldr	r3, [r7, #16]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	603a      	str	r2, [r7, #0]
 800a602:	71fb      	strb	r3, [r7, #7]
 800a604:	460b      	mov	r3, r1
 800a606:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	8919      	ldrh	r1, [r3, #8]
 800a60c:	88ba      	ldrh	r2, [r7, #4]
 800a60e:	79fb      	ldrb	r3, [r7, #7]
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fa79 	bl	8009b08 <pbuf_alloc>
 800a616:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <pbuf_clone+0x2a>
    return NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	e011      	b.n	800a646 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fe79 	bl	800a31c <pbuf_copy>
 800a62a:	4603      	mov	r3, r0
 800a62c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a62e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d006      	beq.n	800a644 <pbuf_clone+0x4c>
 800a636:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <pbuf_clone+0x58>)
 800a638:	f240 5224 	movw	r2, #1316	@ 0x524
 800a63c:	4905      	ldr	r1, [pc, #20]	@ (800a654 <pbuf_clone+0x5c>)
 800a63e:	4806      	ldr	r0, [pc, #24]	@ (800a658 <pbuf_clone+0x60>)
 800a640:	f006 fdc2 	bl	80111c8 <iprintf>
  return q;
 800a644:	68fb      	ldr	r3, [r7, #12]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	0801338c 	.word	0x0801338c
 800a654:	08013830 	.word	0x08013830
 800a658:	0801341c 	.word	0x0801341c

0800a65c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800a668:	887b      	ldrh	r3, [r7, #2]
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f80c 	bl	800a68a <pbuf_try_get_at>
 800a672:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	db02      	blt.n	800a680 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	e000      	b.n	800a682 <pbuf_get_at+0x26>
  }
  return 0;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800a696:	f107 020a 	add.w	r2, r7, #10
 800a69a:	887b      	ldrh	r3, [r7, #2]
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff ff80 	bl	800a5a4 <pbuf_skip_const>
 800a6a4:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <pbuf_try_get_at+0x38>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	895a      	ldrh	r2, [r3, #10]
 800a6b0:	897b      	ldrh	r3, [r7, #10]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d905      	bls.n	800a6c2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	897a      	ldrh	r2, [r7, #10]
 800a6bc:	4413      	add	r3, r2
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	e001      	b.n	800a6c6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800a6c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b088      	sub	sp, #32
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	460b      	mov	r3, r1
 800a6dc:	817b      	strh	r3, [r7, #10]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800a6e2:	897b      	ldrh	r3, [r7, #10]
 800a6e4:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	891b      	ldrh	r3, [r3, #8]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	897a      	ldrh	r2, [r7, #10]
 800a6f2:	893b      	ldrh	r3, [r7, #8]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	4299      	cmp	r1, r3
 800a6f8:	da0a      	bge.n	800a710 <pbuf_memcmp+0x42>
    return 0xffff;
 800a6fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6fe:	e037      	b.n	800a770 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	895b      	ldrh	r3, [r3, #10]
 800a704:	8bfa      	ldrh	r2, [r7, #30]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d004      	beq.n	800a720 <pbuf_memcmp+0x52>
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	895b      	ldrh	r3, [r3, #10]
 800a71a:	8bfa      	ldrh	r2, [r7, #30]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d2ef      	bcs.n	800a700 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800a720:	2300      	movs	r3, #0
 800a722:	82fb      	strh	r3, [r7, #22]
 800a724:	e01f      	b.n	800a766 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800a726:	8bfa      	ldrh	r2, [r7, #30]
 800a728:	8afb      	ldrh	r3, [r7, #22]
 800a72a:	4413      	add	r3, r2
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	4619      	mov	r1, r3
 800a730:	69b8      	ldr	r0, [r7, #24]
 800a732:	f7ff ff93 	bl	800a65c <pbuf_get_at>
 800a736:	4603      	mov	r3, r0
 800a738:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800a73a:	8afb      	ldrh	r3, [r7, #22]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	4413      	add	r3, r2
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800a744:	7d7a      	ldrb	r2, [r7, #21]
 800a746:	7d3b      	ldrb	r3, [r7, #20]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d009      	beq.n	800a760 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800a74c:	8afb      	ldrh	r3, [r7, #22]
 800a74e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a752:	4293      	cmp	r3, r2
 800a754:	bf28      	it	cs
 800a756:	4613      	movcs	r3, r2
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3301      	adds	r3, #1
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	e007      	b.n	800a770 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800a760:	8afb      	ldrh	r3, [r7, #22]
 800a762:	3301      	adds	r3, #1
 800a764:	82fb      	strh	r3, [r7, #22]
 800a766:	8afa      	ldrh	r2, [r7, #22]
 800a768:	893b      	ldrh	r3, [r7, #8]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d3db      	bcc.n	800a726 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4611      	mov	r1, r2
 800a784:	461a      	mov	r2, r3
 800a786:	460b      	mov	r3, r1
 800a788:	80fb      	strh	r3, [r7, #6]
 800a78a:	4613      	mov	r3, r2
 800a78c:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	891a      	ldrh	r2, [r3, #8]
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	891b      	ldrh	r3, [r3, #8]
 800a79c:	4619      	mov	r1, r3
 800a79e:	88fa      	ldrh	r2, [r7, #6]
 800a7a0:	88bb      	ldrh	r3, [r7, #4]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4299      	cmp	r1, r3
 800a7a6:	db16      	blt.n	800a7d6 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800a7a8:	88bb      	ldrh	r3, [r7, #4]
 800a7aa:	82fb      	strh	r3, [r7, #22]
 800a7ac:	e00f      	b.n	800a7ce <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800a7ae:	88fb      	ldrh	r3, [r7, #6]
 800a7b0:	8af9      	ldrh	r1, [r7, #22]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff ff8a 	bl	800a6ce <pbuf_memcmp>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800a7be:	8a7b      	ldrh	r3, [r7, #18]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <pbuf_memfind+0x50>
        return i;
 800a7c4:	8afb      	ldrh	r3, [r7, #22]
 800a7c6:	e008      	b.n	800a7da <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800a7c8:	8afb      	ldrh	r3, [r7, #22]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	82fb      	strh	r3, [r7, #22]
 800a7ce:	8afa      	ldrh	r2, [r7, #22]
 800a7d0:	8abb      	ldrh	r3, [r7, #20]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d9eb      	bls.n	800a7ae <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 800a7d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7a1b      	ldrb	r3, [r3, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00b      	beq.n	800a810 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7a1a      	ldrb	r2, [r3, #8]
 800a7fc:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <raw_input_local_match+0x70>)
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a804:	3301      	adds	r3, #1
 800a806:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a808:	429a      	cmp	r2, r3
 800a80a:	d001      	beq.n	800a810 <raw_input_local_match+0x2c>
    return 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	e01b      	b.n	800a848 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d008      	beq.n	800a828 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <raw_input_local_match+0x40>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d110      	bne.n	800a846 <raw_input_local_match+0x62>
          return 1;
 800a824:	2301      	movs	r3, #1
 800a826:	e00f      	b.n	800a848 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d009      	beq.n	800a842 <raw_input_local_match+0x5e>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	4b06      	ldr	r3, [pc, #24]	@ (800a854 <raw_input_local_match+0x70>)
 800a83c:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 800a83e:	429a      	cmp	r2, r3
 800a840:	d101      	bne.n	800a846 <raw_input_local_match+0x62>
        return 1;
 800a842:	2301      	movs	r3, #1
 800a844:	e000      	b.n	800a848 <raw_input_local_match+0x64>
      }
  }

  return 0;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	24000414 	.word	0x24000414

0800a858 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 800a858:	b590      	push	{r4, r7, lr}
 800a85a:	b089      	sub	sp, #36	@ 0x24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 800a862:	2300      	movs	r3, #0
 800a864:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a866:	4b37      	ldr	r3, [pc, #220]	@ (800a944 <raw_input+0xec>)
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	4a36      	ldr	r2, [pc, #216]	@ (800a944 <raw_input+0xec>)
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	4611      	mov	r1, r2
 800a870:	4618      	mov	r0, r3
 800a872:	f7fd faa5 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 800a876:	4603      	mov	r3, r0
 800a878:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	7a5b      	ldrb	r3, [r3, #9]
 800a880:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 800a886:	4b30      	ldr	r3, [pc, #192]	@ (800a948 <raw_input+0xf0>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 800a88c:	e052      	b.n	800a934 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	7c1b      	ldrb	r3, [r3, #16]
 800a892:	461a      	mov	r2, r3
 800a894:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d146      	bne.n	800a92a <raw_input+0xd2>
 800a89c:	7dbb      	ldrb	r3, [r7, #22]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	69f8      	ldr	r0, [r7, #28]
 800a8a2:	f7ff ff9f 	bl	800a7e4 <raw_input_local_match>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d03e      	beq.n	800a92a <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	7c5b      	ldrb	r3, [r3, #17]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b21      	ldr	r3, [pc, #132]	@ (800a944 <raw_input+0xec>)
 800a8be:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d132      	bne.n	800a92a <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d02e      	beq.n	800a92a <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	695c      	ldr	r4, [r3, #20]
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	6998      	ldr	r0, [r3, #24]
 800a8de:	4b1b      	ldr	r3, [pc, #108]	@ (800a94c <raw_input+0xf4>)
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	69f9      	ldr	r1, [r7, #28]
 800a8e4:	47a0      	blx	r4
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d011      	beq.n	800a914 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 800a902:	4b11      	ldr	r3, [pc, #68]	@ (800a948 <raw_input+0xf0>)
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 800a90a:	4a0f      	ldr	r2, [pc, #60]	@ (800a948 <raw_input+0xf0>)
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 800a910:	2301      	movs	r3, #1
 800a912:	e013      	b.n	800a93c <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d005      	beq.n	800a92a <raw_input+0xd2>
 800a91e:	4b0c      	ldr	r3, [pc, #48]	@ (800a950 <raw_input+0xf8>)
 800a920:	22c0      	movs	r2, #192	@ 0xc0
 800a922:	490c      	ldr	r1, [pc, #48]	@ (800a954 <raw_input+0xfc>)
 800a924:	480c      	ldr	r0, [pc, #48]	@ (800a958 <raw_input+0x100>)
 800a926:	f006 fc4f 	bl	80111c8 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1a9      	bne.n	800a88e <raw_input+0x36>
  }
  return ret;
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3724      	adds	r7, #36	@ 0x24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd90      	pop	{r4, r7, pc}
 800a944:	24000414 	.word	0x24000414
 800a948:	2401c664 	.word	0x2401c664
 800a94c:	24000424 	.word	0x24000424
 800a950:	08013844 	.word	0x08013844
 800a954:	080138a0 	.word	0x080138a0
 800a958:	080138ec 	.word	0x080138ec

0800a95c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01e      	beq.n	800a9aa <raw_netif_ip_addr_changed+0x4e>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d01a      	beq.n	800a9aa <raw_netif_ip_addr_changed+0x4e>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d017      	beq.n	800a9aa <raw_netif_ip_addr_changed+0x4e>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d013      	beq.n	800a9aa <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 800a982:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b8 <raw_netif_ip_addr_changed+0x5c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	e00c      	b.n	800a9a4 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d103      	bne.n	800a99e <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1ef      	bne.n	800a98a <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a9aa:	bf00      	nop
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	2401c664 	.word	0x2401c664

0800a9bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a9c0:	f006 fb02 	bl	8010fc8 <rand>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	4b01      	ldr	r3, [pc, #4]	@ (800a9dc <tcp_init+0x20>)
 800a9d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a9d8:	bf00      	nop
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	24000038 	.word	0x24000038

0800a9e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	7d1b      	ldrb	r3, [r3, #20]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d105      	bne.n	800a9fc <tcp_free+0x1c>
 800a9f0:	4b06      	ldr	r3, [pc, #24]	@ (800aa0c <tcp_free+0x2c>)
 800a9f2:	22d4      	movs	r2, #212	@ 0xd4
 800a9f4:	4906      	ldr	r1, [pc, #24]	@ (800aa10 <tcp_free+0x30>)
 800a9f6:	4807      	ldr	r0, [pc, #28]	@ (800aa14 <tcp_free+0x34>)
 800a9f8:	f006 fbe6 	bl	80111c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	2002      	movs	r0, #2
 800aa00:	f7fe fcec 	bl	80093dc <memp_free>
}
 800aa04:	bf00      	nop
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	080139b4 	.word	0x080139b4
 800aa10:	08013a10 	.word	0x08013a10
 800aa14:	08013a24 	.word	0x08013a24

0800aa18 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7d1b      	ldrb	r3, [r3, #20]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d105      	bne.n	800aa34 <tcp_free_listen+0x1c>
 800aa28:	4b06      	ldr	r3, [pc, #24]	@ (800aa44 <tcp_free_listen+0x2c>)
 800aa2a:	22df      	movs	r2, #223	@ 0xdf
 800aa2c:	4906      	ldr	r1, [pc, #24]	@ (800aa48 <tcp_free_listen+0x30>)
 800aa2e:	4807      	ldr	r0, [pc, #28]	@ (800aa4c <tcp_free_listen+0x34>)
 800aa30:	f006 fbca 	bl	80111c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	2003      	movs	r0, #3
 800aa38:	f7fe fcd0 	bl	80093dc <memp_free>
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	080139b4 	.word	0x080139b4
 800aa48:	08013a4c 	.word	0x08013a4c
 800aa4c:	08013a24 	.word	0x08013a24

0800aa50 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aa54:	f000 fea4 	bl	800b7a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aa58:	4b07      	ldr	r3, [pc, #28]	@ (800aa78 <tcp_tmr+0x28>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	4b05      	ldr	r3, [pc, #20]	@ (800aa78 <tcp_tmr+0x28>)
 800aa62:	701a      	strb	r2, [r3, #0]
 800aa64:	4b04      	ldr	r3, [pc, #16]	@ (800aa78 <tcp_tmr+0x28>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800aa70:	f000 fb54 	bl	800b11c <tcp_slowtmr>
  }
}
 800aa74:	bf00      	nop
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	2401c67d 	.word	0x2401c67d

0800aa7c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <tcp_remove_listener+0x1c>
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	@ (800aac4 <tcp_remove_listener+0x48>)
 800aa8e:	22ff      	movs	r2, #255	@ 0xff
 800aa90:	490d      	ldr	r1, [pc, #52]	@ (800aac8 <tcp_remove_listener+0x4c>)
 800aa92:	480e      	ldr	r0, [pc, #56]	@ (800aacc <tcp_remove_listener+0x50>)
 800aa94:	f006 fb98 	bl	80111c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e00a      	b.n	800aab4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d102      	bne.n	800aaae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1f1      	bne.n	800aa9e <tcp_remove_listener+0x22>
    }
  }
}
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	080139b4 	.word	0x080139b4
 800aac8:	08013a68 	.word	0x08013a68
 800aacc:	08013a24 	.word	0x08013a24

0800aad0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <tcp_listen_closed+0x1c>
 800aade:	4b14      	ldr	r3, [pc, #80]	@ (800ab30 <tcp_listen_closed+0x60>)
 800aae0:	f240 1211 	movw	r2, #273	@ 0x111
 800aae4:	4913      	ldr	r1, [pc, #76]	@ (800ab34 <tcp_listen_closed+0x64>)
 800aae6:	4814      	ldr	r0, [pc, #80]	@ (800ab38 <tcp_listen_closed+0x68>)
 800aae8:	f006 fb6e 	bl	80111c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7d1b      	ldrb	r3, [r3, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d006      	beq.n	800ab02 <tcp_listen_closed+0x32>
 800aaf4:	4b0e      	ldr	r3, [pc, #56]	@ (800ab30 <tcp_listen_closed+0x60>)
 800aaf6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800aafa:	4910      	ldr	r1, [pc, #64]	@ (800ab3c <tcp_listen_closed+0x6c>)
 800aafc:	480e      	ldr	r0, [pc, #56]	@ (800ab38 <tcp_listen_closed+0x68>)
 800aafe:	f006 fb63 	bl	80111c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab02:	2301      	movs	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	e00b      	b.n	800ab20 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ab08:	4a0d      	ldr	r2, [pc, #52]	@ (800ab40 <tcp_listen_closed+0x70>)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff ffb1 	bl	800aa7c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d9f0      	bls.n	800ab08 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ab26:	bf00      	nop
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	080139b4 	.word	0x080139b4
 800ab34:	08013a90 	.word	0x08013a90
 800ab38:	08013a24 	.word	0x08013a24
 800ab3c:	08013a9c 	.word	0x08013a9c
 800ab40:	080155c4 	.word	0x080155c4

0800ab44 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ab44:	b5b0      	push	{r4, r5, r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af04      	add	r7, sp, #16
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <tcp_close_shutdown+0x20>
 800ab56:	4b63      	ldr	r3, [pc, #396]	@ (800ace4 <tcp_close_shutdown+0x1a0>)
 800ab58:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ab5c:	4962      	ldr	r1, [pc, #392]	@ (800ace8 <tcp_close_shutdown+0x1a4>)
 800ab5e:	4863      	ldr	r0, [pc, #396]	@ (800acec <tcp_close_shutdown+0x1a8>)
 800ab60:	f006 fb32 	bl	80111c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d066      	beq.n	800ac38 <tcp_close_shutdown+0xf4>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7d1b      	ldrb	r3, [r3, #20]
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d003      	beq.n	800ab7a <tcp_close_shutdown+0x36>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	7d1b      	ldrb	r3, [r3, #20]
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	d15e      	bne.n	800ac38 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d104      	bne.n	800ab8c <tcp_close_shutdown+0x48>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab86:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ab8a:	d055      	beq.n	800ac38 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	8b5b      	ldrh	r3, [r3, #26]
 800ab90:	f003 0310 	and.w	r3, r3, #16
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <tcp_close_shutdown+0x62>
 800ab98:	4b52      	ldr	r3, [pc, #328]	@ (800ace4 <tcp_close_shutdown+0x1a0>)
 800ab9a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ab9e:	4954      	ldr	r1, [pc, #336]	@ (800acf0 <tcp_close_shutdown+0x1ac>)
 800aba0:	4852      	ldr	r0, [pc, #328]	@ (800acec <tcp_close_shutdown+0x1a8>)
 800aba2:	f006 fb11 	bl	80111c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800abae:	687d      	ldr	r5, [r7, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3304      	adds	r3, #4
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	8ad2      	ldrh	r2, [r2, #22]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	8b09      	ldrh	r1, [r1, #24]
 800abbc:	9102      	str	r1, [sp, #8]
 800abbe:	9201      	str	r2, [sp, #4]
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	462b      	mov	r3, r5
 800abc4:	4622      	mov	r2, r4
 800abc6:	4601      	mov	r1, r0
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f004 fe8d 	bl	800f8e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 f8c8 	bl	800bd64 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800abd4:	4b47      	ldr	r3, [pc, #284]	@ (800acf4 <tcp_close_shutdown+0x1b0>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d105      	bne.n	800abea <tcp_close_shutdown+0xa6>
 800abde:	4b45      	ldr	r3, [pc, #276]	@ (800acf4 <tcp_close_shutdown+0x1b0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	4a43      	ldr	r2, [pc, #268]	@ (800acf4 <tcp_close_shutdown+0x1b0>)
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	e013      	b.n	800ac12 <tcp_close_shutdown+0xce>
 800abea:	4b42      	ldr	r3, [pc, #264]	@ (800acf4 <tcp_close_shutdown+0x1b0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	e00c      	b.n	800ac0c <tcp_close_shutdown+0xc8>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d104      	bne.n	800ac06 <tcp_close_shutdown+0xc2>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	60da      	str	r2, [r3, #12]
 800ac04:	e005      	b.n	800ac12 <tcp_close_shutdown+0xce>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1ef      	bne.n	800abf2 <tcp_close_shutdown+0xae>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	60da      	str	r2, [r3, #12]
 800ac18:	4b37      	ldr	r3, [pc, #220]	@ (800acf8 <tcp_close_shutdown+0x1b4>)
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ac1e:	4b37      	ldr	r3, [pc, #220]	@ (800acfc <tcp_close_shutdown+0x1b8>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d102      	bne.n	800ac2e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ac28:	f003 fd5c 	bl	800e6e4 <tcp_trigger_input_pcb_close>
 800ac2c:	e002      	b.n	800ac34 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fed6 	bl	800a9e0 <tcp_free>
      }
      return ERR_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e050      	b.n	800acda <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7d1b      	ldrb	r3, [r3, #20]
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d03b      	beq.n	800acb8 <tcp_close_shutdown+0x174>
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	dc44      	bgt.n	800acce <tcp_close_shutdown+0x18a>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <tcp_close_shutdown+0x10a>
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d02a      	beq.n	800aca2 <tcp_close_shutdown+0x15e>
 800ac4c:	e03f      	b.n	800acce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	8adb      	ldrh	r3, [r3, #22]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d021      	beq.n	800ac9a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac56:	4b2a      	ldr	r3, [pc, #168]	@ (800ad00 <tcp_close_shutdown+0x1bc>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d105      	bne.n	800ac6c <tcp_close_shutdown+0x128>
 800ac60:	4b27      	ldr	r3, [pc, #156]	@ (800ad00 <tcp_close_shutdown+0x1bc>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	4a26      	ldr	r2, [pc, #152]	@ (800ad00 <tcp_close_shutdown+0x1bc>)
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	e013      	b.n	800ac94 <tcp_close_shutdown+0x150>
 800ac6c:	4b24      	ldr	r3, [pc, #144]	@ (800ad00 <tcp_close_shutdown+0x1bc>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60bb      	str	r3, [r7, #8]
 800ac72:	e00c      	b.n	800ac8e <tcp_close_shutdown+0x14a>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d104      	bne.n	800ac88 <tcp_close_shutdown+0x144>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	60da      	str	r2, [r3, #12]
 800ac86:	e005      	b.n	800ac94 <tcp_close_shutdown+0x150>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ef      	bne.n	800ac74 <tcp_close_shutdown+0x130>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fea0 	bl	800a9e0 <tcp_free>
      break;
 800aca0:	e01a      	b.n	800acd8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff ff14 	bl	800aad0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4816      	ldr	r0, [pc, #88]	@ (800ad04 <tcp_close_shutdown+0x1c0>)
 800acac:	f001 f8aa 	bl	800be04 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff feb1 	bl	800aa18 <tcp_free_listen>
      break;
 800acb6:	e00f      	b.n	800acd8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	480e      	ldr	r0, [pc, #56]	@ (800acf4 <tcp_close_shutdown+0x1b0>)
 800acbc:	f001 f8a2 	bl	800be04 <tcp_pcb_remove>
 800acc0:	4b0d      	ldr	r3, [pc, #52]	@ (800acf8 <tcp_close_shutdown+0x1b4>)
 800acc2:	2201      	movs	r2, #1
 800acc4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff fe8a 	bl	800a9e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800accc:	e004      	b.n	800acd8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f81a 	bl	800ad08 <tcp_close_shutdown_fin>
 800acd4:	4603      	mov	r3, r0
 800acd6:	e000      	b.n	800acda <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bdb0      	pop	{r4, r5, r7, pc}
 800ace2:	bf00      	nop
 800ace4:	080139b4 	.word	0x080139b4
 800ace8:	08013ab4 	.word	0x08013ab4
 800acec:	08013a24 	.word	0x08013a24
 800acf0:	08013ad4 	.word	0x08013ad4
 800acf4:	2401c674 	.word	0x2401c674
 800acf8:	2401c67c 	.word	0x2401c67c
 800acfc:	2401c6b4 	.word	0x2401c6b4
 800ad00:	2401c66c 	.word	0x2401c66c
 800ad04:	2401c670 	.word	0x2401c670

0800ad08 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d106      	bne.n	800ad24 <tcp_close_shutdown_fin+0x1c>
 800ad16:	4b2e      	ldr	r3, [pc, #184]	@ (800add0 <tcp_close_shutdown_fin+0xc8>)
 800ad18:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ad1c:	492d      	ldr	r1, [pc, #180]	@ (800add4 <tcp_close_shutdown_fin+0xcc>)
 800ad1e:	482e      	ldr	r0, [pc, #184]	@ (800add8 <tcp_close_shutdown_fin+0xd0>)
 800ad20:	f006 fa52 	bl	80111c8 <iprintf>

  switch (pcb->state) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	7d1b      	ldrb	r3, [r3, #20]
 800ad28:	2b07      	cmp	r3, #7
 800ad2a:	d020      	beq.n	800ad6e <tcp_close_shutdown_fin+0x66>
 800ad2c:	2b07      	cmp	r3, #7
 800ad2e:	dc2b      	bgt.n	800ad88 <tcp_close_shutdown_fin+0x80>
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d002      	beq.n	800ad3a <tcp_close_shutdown_fin+0x32>
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	d00d      	beq.n	800ad54 <tcp_close_shutdown_fin+0x4c>
 800ad38:	e026      	b.n	800ad88 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f003 fee2 	bl	800eb04 <tcp_send_fin>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d11f      	bne.n	800ad8c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2205      	movs	r2, #5
 800ad50:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad52:	e01b      	b.n	800ad8c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f003 fed5 	bl	800eb04 <tcp_send_fin>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d114      	bne.n	800ad90 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2205      	movs	r2, #5
 800ad6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad6c:	e010      	b.n	800ad90 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f003 fec8 	bl	800eb04 <tcp_send_fin>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d109      	bne.n	800ad94 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2209      	movs	r2, #9
 800ad84:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad86:	e005      	b.n	800ad94 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e01c      	b.n	800adc6 <tcp_close_shutdown_fin+0xbe>
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad94:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ad96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d103      	bne.n	800ada6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f003 ffee 	bl	800ed80 <tcp_output>
 800ada4:	e00d      	b.n	800adc2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ada6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d108      	bne.n	800adc2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	8b5b      	ldrh	r3, [r3, #26]
 800adb4:	f043 0308 	orr.w	r3, r3, #8
 800adb8:	b29a      	uxth	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e001      	b.n	800adc6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800adc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	080139b4 	.word	0x080139b4
 800add4:	08013a90 	.word	0x08013a90
 800add8:	08013a24 	.word	0x08013a24

0800addc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <tcp_close+0x22>
 800adea:	4b0f      	ldr	r3, [pc, #60]	@ (800ae28 <tcp_close+0x4c>)
 800adec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800adf0:	490e      	ldr	r1, [pc, #56]	@ (800ae2c <tcp_close+0x50>)
 800adf2:	480f      	ldr	r0, [pc, #60]	@ (800ae30 <tcp_close+0x54>)
 800adf4:	f006 f9e8 	bl	80111c8 <iprintf>
 800adf8:	f06f 030f 	mvn.w	r3, #15
 800adfc:	e00f      	b.n	800ae1e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	7d1b      	ldrb	r3, [r3, #20]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d006      	beq.n	800ae14 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	8b5b      	ldrh	r3, [r3, #26]
 800ae0a:	f043 0310 	orr.w	r3, r3, #16
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ae14:	2101      	movs	r1, #1
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff fe94 	bl	800ab44 <tcp_close_shutdown>
 800ae1c:	4603      	mov	r3, r0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	080139b4 	.word	0x080139b4
 800ae2c:	08013af0 	.word	0x08013af0
 800ae30:	08013a24 	.word	0x08013a24

0800ae34 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08e      	sub	sp, #56	@ 0x38
 800ae38:	af04      	add	r7, sp, #16
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d107      	bne.n	800ae54 <tcp_abandon+0x20>
 800ae44:	4b52      	ldr	r3, [pc, #328]	@ (800af90 <tcp_abandon+0x15c>)
 800ae46:	f240 223d 	movw	r2, #573	@ 0x23d
 800ae4a:	4952      	ldr	r1, [pc, #328]	@ (800af94 <tcp_abandon+0x160>)
 800ae4c:	4852      	ldr	r0, [pc, #328]	@ (800af98 <tcp_abandon+0x164>)
 800ae4e:	f006 f9bb 	bl	80111c8 <iprintf>
 800ae52:	e099      	b.n	800af88 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7d1b      	ldrb	r3, [r3, #20]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d106      	bne.n	800ae6a <tcp_abandon+0x36>
 800ae5c:	4b4c      	ldr	r3, [pc, #304]	@ (800af90 <tcp_abandon+0x15c>)
 800ae5e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ae62:	494e      	ldr	r1, [pc, #312]	@ (800af9c <tcp_abandon+0x168>)
 800ae64:	484c      	ldr	r0, [pc, #304]	@ (800af98 <tcp_abandon+0x164>)
 800ae66:	f006 f9af 	bl	80111c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	7d1b      	ldrb	r3, [r3, #20]
 800ae6e:	2b0a      	cmp	r3, #10
 800ae70:	d107      	bne.n	800ae82 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	484a      	ldr	r0, [pc, #296]	@ (800afa0 <tcp_abandon+0x16c>)
 800ae76:	f000 ffc5 	bl	800be04 <tcp_pcb_remove>
    tcp_free(pcb);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fdb0 	bl	800a9e0 <tcp_free>
 800ae80:	e082      	b.n	800af88 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae8e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae94:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae9c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7d1b      	ldrb	r3, [r3, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d126      	bne.n	800aefa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8adb      	ldrh	r3, [r3, #22]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d02e      	beq.n	800af12 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aeb4:	4b3b      	ldr	r3, [pc, #236]	@ (800afa4 <tcp_abandon+0x170>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d105      	bne.n	800aeca <tcp_abandon+0x96>
 800aebe:	4b39      	ldr	r3, [pc, #228]	@ (800afa4 <tcp_abandon+0x170>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	4a37      	ldr	r2, [pc, #220]	@ (800afa4 <tcp_abandon+0x170>)
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	e013      	b.n	800aef2 <tcp_abandon+0xbe>
 800aeca:	4b36      	ldr	r3, [pc, #216]	@ (800afa4 <tcp_abandon+0x170>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	61fb      	str	r3, [r7, #28]
 800aed0:	e00c      	b.n	800aeec <tcp_abandon+0xb8>
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d104      	bne.n	800aee6 <tcp_abandon+0xb2>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e005      	b.n	800aef2 <tcp_abandon+0xbe>
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	61fb      	str	r3, [r7, #28]
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1ef      	bne.n	800aed2 <tcp_abandon+0x9e>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	60da      	str	r2, [r3, #12]
 800aef8:	e00b      	b.n	800af12 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	8adb      	ldrh	r3, [r3, #22]
 800af02:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	4828      	ldr	r0, [pc, #160]	@ (800afa8 <tcp_abandon+0x174>)
 800af08:	f000 ff7c 	bl	800be04 <tcp_pcb_remove>
 800af0c:	4b27      	ldr	r3, [pc, #156]	@ (800afac <tcp_abandon+0x178>)
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af16:	2b00      	cmp	r3, #0
 800af18:	d004      	beq.n	800af24 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fd1e 	bl	800b960 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fd15 	bl	800b960 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d004      	beq.n	800af48 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fd0c 	bl	800b960 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00e      	beq.n	800af6c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3304      	adds	r3, #4
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	8b12      	ldrh	r2, [r2, #24]
 800af58:	9202      	str	r2, [sp, #8]
 800af5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800af5c:	9201      	str	r2, [sp, #4]
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	460b      	mov	r3, r1
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	69b9      	ldr	r1, [r7, #24]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f004 fcbe 	bl	800f8e8 <tcp_rst>
    }
    last_state = pcb->state;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7d1b      	ldrb	r3, [r3, #20]
 800af70:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff fd34 	bl	800a9e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d004      	beq.n	800af88 <tcp_abandon+0x154>
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f06f 010c 	mvn.w	r1, #12
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	4798      	blx	r3
  }
}
 800af88:	3728      	adds	r7, #40	@ 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	080139b4 	.word	0x080139b4
 800af94:	08013b24 	.word	0x08013b24
 800af98:	08013a24 	.word	0x08013a24
 800af9c:	08013b40 	.word	0x08013b40
 800afa0:	2401c678 	.word	0x2401c678
 800afa4:	2401c66c 	.word	0x2401c66c
 800afa8:	2401c674 	.word	0x2401c674
 800afac:	2401c67c 	.word	0x2401c67c

0800afb0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800afb8:	2101      	movs	r1, #1
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff ff3a 	bl	800ae34 <tcp_abandon>
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d106      	bne.n	800afe4 <tcp_update_rcv_ann_wnd+0x1c>
 800afd6:	4b25      	ldr	r3, [pc, #148]	@ (800b06c <tcp_update_rcv_ann_wnd+0xa4>)
 800afd8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800afdc:	4924      	ldr	r1, [pc, #144]	@ (800b070 <tcp_update_rcv_ann_wnd+0xa8>)
 800afde:	4825      	ldr	r0, [pc, #148]	@ (800b074 <tcp_update_rcv_ann_wnd+0xac>)
 800afe0:	f006 f8f2 	bl	80111c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800afec:	4413      	add	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800aff8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800affc:	bf28      	it	cs
 800affe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800b002:	b292      	uxth	r2, r2
 800b004:	4413      	add	r3, r2
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	db08      	blt.n	800b020 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	e020      	b.n	800b062 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dd03      	ble.n	800b036 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b034:	e014      	b.n	800b060 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b048:	d306      	bcc.n	800b058 <tcp_update_rcv_ann_wnd+0x90>
 800b04a:	4b08      	ldr	r3, [pc, #32]	@ (800b06c <tcp_update_rcv_ann_wnd+0xa4>)
 800b04c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800b050:	4909      	ldr	r1, [pc, #36]	@ (800b078 <tcp_update_rcv_ann_wnd+0xb0>)
 800b052:	4808      	ldr	r0, [pc, #32]	@ (800b074 <tcp_update_rcv_ann_wnd+0xac>)
 800b054:	f006 f8b8 	bl	80111c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800b060:	2300      	movs	r3, #0
  }
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	080139b4 	.word	0x080139b4
 800b070:	08013c3c 	.word	0x08013c3c
 800b074:	08013a24 	.word	0x08013a24
 800b078:	08013c60 	.word	0x08013c60

0800b07c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d107      	bne.n	800b09e <tcp_recved+0x22>
 800b08e:	4b1f      	ldr	r3, [pc, #124]	@ (800b10c <tcp_recved+0x90>)
 800b090:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800b094:	491e      	ldr	r1, [pc, #120]	@ (800b110 <tcp_recved+0x94>)
 800b096:	481f      	ldr	r0, [pc, #124]	@ (800b114 <tcp_recved+0x98>)
 800b098:	f006 f896 	bl	80111c8 <iprintf>
 800b09c:	e032      	b.n	800b104 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7d1b      	ldrb	r3, [r3, #20]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d106      	bne.n	800b0b4 <tcp_recved+0x38>
 800b0a6:	4b19      	ldr	r3, [pc, #100]	@ (800b10c <tcp_recved+0x90>)
 800b0a8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800b0ac:	491a      	ldr	r1, [pc, #104]	@ (800b118 <tcp_recved+0x9c>)
 800b0ae:	4819      	ldr	r0, [pc, #100]	@ (800b114 <tcp_recved+0x98>)
 800b0b0:	f006 f88a 	bl	80111c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b0b8:	887b      	ldrh	r3, [r7, #2]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b0be:	89fb      	ldrh	r3, [r7, #14]
 800b0c0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b0c4:	d804      	bhi.n	800b0d0 <tcp_recved+0x54>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0ca:	89fa      	ldrh	r2, [r7, #14]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d204      	bcs.n	800b0da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b0d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b0d8:	e002      	b.n	800b0e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	89fa      	ldrh	r2, [r7, #14]
 800b0de:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff ff71 	bl	800afc8 <tcp_update_rcv_ann_wnd>
 800b0e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b0ee:	d309      	bcc.n	800b104 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8b5b      	ldrh	r3, [r3, #26]
 800b0f4:	f043 0302 	orr.w	r3, r3, #2
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f003 fe3e 	bl	800ed80 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	080139b4 	.word	0x080139b4
 800b110:	08013c7c 	.word	0x08013c7c
 800b114:	08013a24 	.word	0x08013a24
 800b118:	08013c94 	.word	0x08013c94

0800b11c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b11c:	b5b0      	push	{r4, r5, r7, lr}
 800b11e:	b090      	sub	sp, #64	@ 0x40
 800b120:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800b128:	4b95      	ldr	r3, [pc, #596]	@ (800b380 <tcp_slowtmr+0x264>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3301      	adds	r3, #1
 800b12e:	4a94      	ldr	r2, [pc, #592]	@ (800b380 <tcp_slowtmr+0x264>)
 800b130:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b132:	4b94      	ldr	r3, [pc, #592]	@ (800b384 <tcp_slowtmr+0x268>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	3301      	adds	r3, #1
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	4b92      	ldr	r3, [pc, #584]	@ (800b384 <tcp_slowtmr+0x268>)
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	e000      	b.n	800b142 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800b140:	bf00      	nop
  prev = NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800b146:	4b90      	ldr	r3, [pc, #576]	@ (800b388 <tcp_slowtmr+0x26c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b14c:	e29d      	b.n	800b68a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b150:	7d1b      	ldrb	r3, [r3, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d106      	bne.n	800b164 <tcp_slowtmr+0x48>
 800b156:	4b8d      	ldr	r3, [pc, #564]	@ (800b38c <tcp_slowtmr+0x270>)
 800b158:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b15c:	498c      	ldr	r1, [pc, #560]	@ (800b390 <tcp_slowtmr+0x274>)
 800b15e:	488d      	ldr	r0, [pc, #564]	@ (800b394 <tcp_slowtmr+0x278>)
 800b160:	f006 f832 	bl	80111c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	7d1b      	ldrb	r3, [r3, #20]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d106      	bne.n	800b17a <tcp_slowtmr+0x5e>
 800b16c:	4b87      	ldr	r3, [pc, #540]	@ (800b38c <tcp_slowtmr+0x270>)
 800b16e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b172:	4989      	ldr	r1, [pc, #548]	@ (800b398 <tcp_slowtmr+0x27c>)
 800b174:	4887      	ldr	r0, [pc, #540]	@ (800b394 <tcp_slowtmr+0x278>)
 800b176:	f006 f827 	bl	80111c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17c:	7d1b      	ldrb	r3, [r3, #20]
 800b17e:	2b0a      	cmp	r3, #10
 800b180:	d106      	bne.n	800b190 <tcp_slowtmr+0x74>
 800b182:	4b82      	ldr	r3, [pc, #520]	@ (800b38c <tcp_slowtmr+0x270>)
 800b184:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b188:	4984      	ldr	r1, [pc, #528]	@ (800b39c <tcp_slowtmr+0x280>)
 800b18a:	4882      	ldr	r0, [pc, #520]	@ (800b394 <tcp_slowtmr+0x278>)
 800b18c:	f006 f81c 	bl	80111c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b192:	7f9a      	ldrb	r2, [r3, #30]
 800b194:	4b7b      	ldr	r3, [pc, #492]	@ (800b384 <tcp_slowtmr+0x268>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d105      	bne.n	800b1a8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800b1a6:	e270      	b.n	800b68a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800b1a8:	4b76      	ldr	r3, [pc, #472]	@ (800b384 <tcp_slowtmr+0x268>)
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ae:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1be:	7d1b      	ldrb	r3, [r3, #20]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d10a      	bne.n	800b1da <tcp_slowtmr+0xbe>
 800b1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1ca:	2b05      	cmp	r3, #5
 800b1cc:	d905      	bls.n	800b1da <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1d8:	e11e      	b.n	800b418 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1e0:	2b0b      	cmp	r3, #11
 800b1e2:	d905      	bls.n	800b1f0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800b1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1ee:	e113      	b.n	800b418 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800b1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d075      	beq.n	800b2e6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d006      	beq.n	800b210 <tcp_slowtmr+0xf4>
 800b202:	4b62      	ldr	r3, [pc, #392]	@ (800b38c <tcp_slowtmr+0x270>)
 800b204:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b208:	4965      	ldr	r1, [pc, #404]	@ (800b3a0 <tcp_slowtmr+0x284>)
 800b20a:	4862      	ldr	r0, [pc, #392]	@ (800b394 <tcp_slowtmr+0x278>)
 800b20c:	f005 ffdc 	bl	80111c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d106      	bne.n	800b226 <tcp_slowtmr+0x10a>
 800b218:	4b5c      	ldr	r3, [pc, #368]	@ (800b38c <tcp_slowtmr+0x270>)
 800b21a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b21e:	4961      	ldr	r1, [pc, #388]	@ (800b3a4 <tcp_slowtmr+0x288>)
 800b220:	485c      	ldr	r0, [pc, #368]	@ (800b394 <tcp_slowtmr+0x278>)
 800b222:	f005 ffd1 	bl	80111c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b228:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b22c:	2b0b      	cmp	r3, #11
 800b22e:	d905      	bls.n	800b23c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800b230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b234:	3301      	adds	r3, #1
 800b236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b23a:	e0ed      	b.n	800b418 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b242:	3b01      	subs	r3, #1
 800b244:	4a58      	ldr	r2, [pc, #352]	@ (800b3a8 <tcp_slowtmr+0x28c>)
 800b246:	5cd3      	ldrb	r3, [r2, r3]
 800b248:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b250:	7c7a      	ldrb	r2, [r7, #17]
 800b252:	429a      	cmp	r2, r3
 800b254:	d907      	bls.n	800b266 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b25c:	3301      	adds	r3, #1
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b262:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b268:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b26c:	7c7a      	ldrb	r2, [r7, #17]
 800b26e:	429a      	cmp	r2, r3
 800b270:	f200 80d2 	bhi.w	800b418 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800b274:	2301      	movs	r3, #1
 800b276:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d108      	bne.n	800b294 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b282:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b284:	f004 fc24 	bl	800fad0 <tcp_zero_window_probe>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d014      	beq.n	800b2b8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800b28e:	2300      	movs	r3, #0
 800b290:	623b      	str	r3, [r7, #32]
 800b292:	e011      	b.n	800b2b8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b29a:	4619      	mov	r1, r3
 800b29c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b29e:	f003 fae9 	bl	800e874 <tcp_split_unsent_seg>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d107      	bne.n	800b2b8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800b2a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2aa:	f003 fd69 	bl	800ed80 <tcp_output>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 80ac 	beq.w	800b418 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b2ce:	2b06      	cmp	r3, #6
 800b2d0:	f200 80a2 	bhi.w	800b418 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800b2e4:	e098      	b.n	800b418 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	db0f      	blt.n	800b310 <tcp_slowtmr+0x1f4>
 800b2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b2f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d008      	beq.n	800b310 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800b2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b300:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b304:	b29b      	uxth	r3, r3
 800b306:	3301      	adds	r3, #1
 800b308:	b29b      	uxth	r3, r3
 800b30a:	b21a      	sxth	r2, r3
 800b30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800b316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b318:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b31c:	429a      	cmp	r2, r3
 800b31e:	db7b      	blt.n	800b418 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b320:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b322:	f004 f821 	bl	800f368 <tcp_rexmit_rto_prepare>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d007      	beq.n	800b33c <tcp_slowtmr+0x220>
 800b32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b330:	2b00      	cmp	r3, #0
 800b332:	d171      	bne.n	800b418 <tcp_slowtmr+0x2fc>
 800b334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d06d      	beq.n	800b418 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800b33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33e:	7d1b      	ldrb	r3, [r3, #20]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d03a      	beq.n	800b3ba <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b34a:	2b0c      	cmp	r3, #12
 800b34c:	bf28      	it	cs
 800b34e:	230c      	movcs	r3, #12
 800b350:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b354:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b358:	10db      	asrs	r3, r3, #3
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	461a      	mov	r2, r3
 800b35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b360:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b364:	4413      	add	r3, r2
 800b366:	7efa      	ldrb	r2, [r7, #27]
 800b368:	4910      	ldr	r1, [pc, #64]	@ (800b3ac <tcp_slowtmr+0x290>)
 800b36a:	5c8a      	ldrb	r2, [r1, r2]
 800b36c:	4093      	lsls	r3, r2
 800b36e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800b376:	4293      	cmp	r3, r2
 800b378:	dc1a      	bgt.n	800b3b0 <tcp_slowtmr+0x294>
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	b21a      	sxth	r2, r3
 800b37e:	e019      	b.n	800b3b4 <tcp_slowtmr+0x298>
 800b380:	2401c668 	.word	0x2401c668
 800b384:	2401c67e 	.word	0x2401c67e
 800b388:	2401c674 	.word	0x2401c674
 800b38c:	080139b4 	.word	0x080139b4
 800b390:	08013d24 	.word	0x08013d24
 800b394:	08013a24 	.word	0x08013a24
 800b398:	08013d50 	.word	0x08013d50
 800b39c:	08013d7c 	.word	0x08013d7c
 800b3a0:	08013dac 	.word	0x08013dac
 800b3a4:	08013de0 	.word	0x08013de0
 800b3a8:	080155bc 	.word	0x080155bc
 800b3ac:	080155ac 	.word	0x080155ac
 800b3b0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800b3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3bc:	2200      	movs	r2, #0
 800b3be:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	bf28      	it	cs
 800b3d0:	4613      	movcs	r3, r2
 800b3d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b3d4:	8a7b      	ldrh	r3, [r7, #18]
 800b3d6:	085b      	lsrs	r3, r3, #1
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d206      	bcs.n	800b400 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b406:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b414:	f004 f818 	bl	800f448 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41a:	7d1b      	ldrb	r3, [r3, #20]
 800b41c:	2b06      	cmp	r3, #6
 800b41e:	d111      	bne.n	800b444 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	8b5b      	ldrh	r3, [r3, #26]
 800b424:	f003 0310 	and.w	r3, r3, #16
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b42c:	4b9c      	ldr	r3, [pc, #624]	@ (800b6a0 <tcp_slowtmr+0x584>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	2b28      	cmp	r3, #40	@ 0x28
 800b438:	d904      	bls.n	800b444 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800b43a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b43e:	3301      	adds	r3, #1
 800b440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b446:	7a5b      	ldrb	r3, [r3, #9]
 800b448:	f003 0308 	and.w	r3, r3, #8
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d04a      	beq.n	800b4e6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b454:	2b04      	cmp	r3, #4
 800b456:	d003      	beq.n	800b460 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b45c:	2b07      	cmp	r3, #7
 800b45e:	d142      	bne.n	800b4e6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b460:	4b8f      	ldr	r3, [pc, #572]	@ (800b6a0 <tcp_slowtmr+0x584>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b470:	4b8c      	ldr	r3, [pc, #560]	@ (800b6a4 <tcp_slowtmr+0x588>)
 800b472:	440b      	add	r3, r1
 800b474:	498c      	ldr	r1, [pc, #560]	@ (800b6a8 <tcp_slowtmr+0x58c>)
 800b476:	fba1 1303 	umull	r1, r3, r1, r3
 800b47a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d90a      	bls.n	800b496 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800b480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b484:	3301      	adds	r3, #1
 800b486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800b48a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b48e:	3301      	adds	r3, #1
 800b490:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b494:	e027      	b.n	800b4e6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b496:	4b82      	ldr	r3, [pc, #520]	@ (800b6a0 <tcp_slowtmr+0x584>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	4b7f      	ldr	r3, [pc, #508]	@ (800b6ac <tcp_slowtmr+0x590>)
 800b4b0:	fb00 f303 	mul.w	r3, r0, r3
 800b4b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b4b6:	497c      	ldr	r1, [pc, #496]	@ (800b6a8 <tcp_slowtmr+0x58c>)
 800b4b8:	fba1 1303 	umull	r1, r3, r1, r3
 800b4bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d911      	bls.n	800b4e6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b4c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4c4:	f004 fac4 	bl	800fa50 <tcp_keepalive>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800b4ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d107      	bne.n	800b4e6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b4dc:	3301      	adds	r3, #1
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800b4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d011      	beq.n	800b512 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b4ee:	4b6c      	ldr	r3, [pc, #432]	@ (800b6a0 <tcp_slowtmr+0x584>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	1ad2      	subs	r2, r2, r3
 800b4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b4fe:	4619      	mov	r1, r3
 800b500:	460b      	mov	r3, r1
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	440b      	add	r3, r1
 800b506:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b508:	429a      	cmp	r2, r3
 800b50a:	d302      	bcc.n	800b512 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800b50c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b50e:	f000 fddd 	bl	800c0cc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800b512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b514:	7d1b      	ldrb	r3, [r3, #20]
 800b516:	2b03      	cmp	r3, #3
 800b518:	d10b      	bne.n	800b532 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b51a:	4b61      	ldr	r3, [pc, #388]	@ (800b6a0 <tcp_slowtmr+0x584>)
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	2b28      	cmp	r3, #40	@ 0x28
 800b526:	d904      	bls.n	800b532 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800b528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b52c:	3301      	adds	r3, #1
 800b52e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	7d1b      	ldrb	r3, [r3, #20]
 800b536:	2b09      	cmp	r3, #9
 800b538:	d10b      	bne.n	800b552 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b53a:	4b59      	ldr	r3, [pc, #356]	@ (800b6a0 <tcp_slowtmr+0x584>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	2bf0      	cmp	r3, #240	@ 0xf0
 800b546:	d904      	bls.n	800b552 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b54c:	3301      	adds	r3, #1
 800b54e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800b552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b556:	2b00      	cmp	r3, #0
 800b558:	d060      	beq.n	800b61c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800b55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b560:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800b562:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b564:	f000 fbfe 	bl	800bd64 <tcp_pcb_purge>
      if (prev != NULL) {
 800b568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d010      	beq.n	800b590 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b56e:	4b50      	ldr	r3, [pc, #320]	@ (800b6b0 <tcp_slowtmr+0x594>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b574:	429a      	cmp	r2, r3
 800b576:	d106      	bne.n	800b586 <tcp_slowtmr+0x46a>
 800b578:	4b4e      	ldr	r3, [pc, #312]	@ (800b6b4 <tcp_slowtmr+0x598>)
 800b57a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b57e:	494e      	ldr	r1, [pc, #312]	@ (800b6b8 <tcp_slowtmr+0x59c>)
 800b580:	484e      	ldr	r0, [pc, #312]	@ (800b6bc <tcp_slowtmr+0x5a0>)
 800b582:	f005 fe21 	bl	80111c8 <iprintf>
        prev->next = pcb->next;
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	68da      	ldr	r2, [r3, #12]
 800b58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	e00f      	b.n	800b5b0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b590:	4b47      	ldr	r3, [pc, #284]	@ (800b6b0 <tcp_slowtmr+0x594>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b596:	429a      	cmp	r2, r3
 800b598:	d006      	beq.n	800b5a8 <tcp_slowtmr+0x48c>
 800b59a:	4b46      	ldr	r3, [pc, #280]	@ (800b6b4 <tcp_slowtmr+0x598>)
 800b59c:	f240 5271 	movw	r2, #1393	@ 0x571
 800b5a0:	4947      	ldr	r1, [pc, #284]	@ (800b6c0 <tcp_slowtmr+0x5a4>)
 800b5a2:	4846      	ldr	r0, [pc, #280]	@ (800b6bc <tcp_slowtmr+0x5a0>)
 800b5a4:	f005 fe10 	bl	80111c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	4a40      	ldr	r2, [pc, #256]	@ (800b6b0 <tcp_slowtmr+0x594>)
 800b5ae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800b5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d013      	beq.n	800b5e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5be:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b5c0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800b5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5c8:	8ad2      	ldrh	r2, [r2, #22]
 800b5ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5cc:	8b09      	ldrh	r1, [r1, #24]
 800b5ce:	9102      	str	r1, [sp, #8]
 800b5d0:	9201      	str	r2, [sp, #4]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4601      	mov	r1, r0
 800b5da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5dc:	f004 f984 	bl	800f8e8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800b5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b5f6:	6838      	ldr	r0, [r7, #0]
 800b5f8:	f7ff f9f2 	bl	800a9e0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b5fc:	4b31      	ldr	r3, [pc, #196]	@ (800b6c4 <tcp_slowtmr+0x5a8>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d004      	beq.n	800b612 <tcp_slowtmr+0x4f6>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f06f 010c 	mvn.w	r1, #12
 800b60e:	68b8      	ldr	r0, [r7, #8]
 800b610:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b612:	4b2c      	ldr	r3, [pc, #176]	@ (800b6c4 <tcp_slowtmr+0x5a8>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d037      	beq.n	800b68a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b61a:	e592      	b.n	800b142 <tcp_slowtmr+0x26>
      prev = pcb;
 800b61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800b626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b628:	7f1b      	ldrb	r3, [r3, #28]
 800b62a:	3301      	adds	r3, #1
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b630:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b634:	7f1a      	ldrb	r2, [r3, #28]
 800b636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b638:	7f5b      	ldrb	r3, [r3, #29]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d325      	bcc.n	800b68a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b640:	2200      	movs	r2, #0
 800b642:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800b644:	4b1f      	ldr	r3, [pc, #124]	@ (800b6c4 <tcp_slowtmr+0x5a8>)
 800b646:	2200      	movs	r2, #0
 800b648:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00b      	beq.n	800b66c <tcp_slowtmr+0x550>
 800b654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b65a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b65c:	6912      	ldr	r2, [r2, #16]
 800b65e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	4603      	mov	r3, r0
 800b666:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b66a:	e002      	b.n	800b672 <tcp_slowtmr+0x556>
 800b66c:	2300      	movs	r3, #0
 800b66e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800b672:	4b14      	ldr	r3, [pc, #80]	@ (800b6c4 <tcp_slowtmr+0x5a8>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f47f ad62 	bne.w	800b140 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b67c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b680:	2b00      	cmp	r3, #0
 800b682:	d102      	bne.n	800b68a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b686:	f003 fb7b 	bl	800ed80 <tcp_output>
  while (pcb != NULL) {
 800b68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f47f ad5e 	bne.w	800b14e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800b696:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c8 <tcp_slowtmr+0x5ac>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b69c:	e069      	b.n	800b772 <tcp_slowtmr+0x656>
 800b69e:	bf00      	nop
 800b6a0:	2401c668 	.word	0x2401c668
 800b6a4:	000a4cb8 	.word	0x000a4cb8
 800b6a8:	10624dd3 	.word	0x10624dd3
 800b6ac:	000124f8 	.word	0x000124f8
 800b6b0:	2401c674 	.word	0x2401c674
 800b6b4:	080139b4 	.word	0x080139b4
 800b6b8:	08013e18 	.word	0x08013e18
 800b6bc:	08013a24 	.word	0x08013a24
 800b6c0:	08013e44 	.word	0x08013e44
 800b6c4:	2401c67c 	.word	0x2401c67c
 800b6c8:	2401c678 	.word	0x2401c678
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ce:	7d1b      	ldrb	r3, [r3, #20]
 800b6d0:	2b0a      	cmp	r3, #10
 800b6d2:	d006      	beq.n	800b6e2 <tcp_slowtmr+0x5c6>
 800b6d4:	4b2b      	ldr	r3, [pc, #172]	@ (800b784 <tcp_slowtmr+0x668>)
 800b6d6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b6da:	492b      	ldr	r1, [pc, #172]	@ (800b788 <tcp_slowtmr+0x66c>)
 800b6dc:	482b      	ldr	r0, [pc, #172]	@ (800b78c <tcp_slowtmr+0x670>)
 800b6de:	f005 fd73 	bl	80111c8 <iprintf>
    pcb_remove = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b6e8:	4b29      	ldr	r3, [pc, #164]	@ (800b790 <tcp_slowtmr+0x674>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	2bf0      	cmp	r3, #240	@ 0xf0
 800b6f4:	d904      	bls.n	800b700 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800b6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b704:	2b00      	cmp	r3, #0
 800b706:	d02f      	beq.n	800b768 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b70a:	f000 fb2b 	bl	800bd64 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b710:	2b00      	cmp	r3, #0
 800b712:	d010      	beq.n	800b736 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b714:	4b1f      	ldr	r3, [pc, #124]	@ (800b794 <tcp_slowtmr+0x678>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d106      	bne.n	800b72c <tcp_slowtmr+0x610>
 800b71e:	4b19      	ldr	r3, [pc, #100]	@ (800b784 <tcp_slowtmr+0x668>)
 800b720:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b724:	491c      	ldr	r1, [pc, #112]	@ (800b798 <tcp_slowtmr+0x67c>)
 800b726:	4819      	ldr	r0, [pc, #100]	@ (800b78c <tcp_slowtmr+0x670>)
 800b728:	f005 fd4e 	bl	80111c8 <iprintf>
        prev->next = pcb->next;
 800b72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b732:	60da      	str	r2, [r3, #12]
 800b734:	e00f      	b.n	800b756 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b736:	4b17      	ldr	r3, [pc, #92]	@ (800b794 <tcp_slowtmr+0x678>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d006      	beq.n	800b74e <tcp_slowtmr+0x632>
 800b740:	4b10      	ldr	r3, [pc, #64]	@ (800b784 <tcp_slowtmr+0x668>)
 800b742:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b746:	4915      	ldr	r1, [pc, #84]	@ (800b79c <tcp_slowtmr+0x680>)
 800b748:	4810      	ldr	r0, [pc, #64]	@ (800b78c <tcp_slowtmr+0x670>)
 800b74a:	f005 fd3d 	bl	80111c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	4a10      	ldr	r2, [pc, #64]	@ (800b794 <tcp_slowtmr+0x678>)
 800b754:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b758:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b760:	69f8      	ldr	r0, [r7, #28]
 800b762:	f7ff f93d 	bl	800a9e0 <tcp_free>
 800b766:	e004      	b.n	800b772 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800b768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1a9      	bne.n	800b6cc <tcp_slowtmr+0x5b0>
    }
  }
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	3730      	adds	r7, #48	@ 0x30
 800b77e:	46bd      	mov	sp, r7
 800b780:	bdb0      	pop	{r4, r5, r7, pc}
 800b782:	bf00      	nop
 800b784:	080139b4 	.word	0x080139b4
 800b788:	08013e70 	.word	0x08013e70
 800b78c:	08013a24 	.word	0x08013a24
 800b790:	2401c668 	.word	0x2401c668
 800b794:	2401c678 	.word	0x2401c678
 800b798:	08013ea0 	.word	0x08013ea0
 800b79c:	08013ec8 	.word	0x08013ec8

0800b7a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b7a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b85c <tcp_fasttmr+0xbc>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b85c <tcp_fasttmr+0xbc>)
 800b7b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b7b2:	4b2b      	ldr	r3, [pc, #172]	@ (800b860 <tcp_fasttmr+0xc0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b7b8:	e048      	b.n	800b84c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7f9a      	ldrb	r2, [r3, #30]
 800b7be:	4b27      	ldr	r3, [pc, #156]	@ (800b85c <tcp_fasttmr+0xbc>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d03f      	beq.n	800b846 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b7c6:	4b25      	ldr	r3, [pc, #148]	@ (800b85c <tcp_fasttmr+0xbc>)
 800b7c8:	781a      	ldrb	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	8b5b      	ldrh	r3, [r3, #26]
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d010      	beq.n	800b7fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	8b5b      	ldrh	r3, [r3, #26]
 800b7de:	f043 0302 	orr.w	r3, r3, #2
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f003 fac9 	bl	800ed80 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8b5b      	ldrh	r3, [r3, #26]
 800b7f2:	f023 0303 	bic.w	r3, r3, #3
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	8b5b      	ldrh	r3, [r3, #26]
 800b800:	f003 0308 	and.w	r3, r3, #8
 800b804:	2b00      	cmp	r3, #0
 800b806:	d009      	beq.n	800b81c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	8b5b      	ldrh	r3, [r3, #26]
 800b80c:	f023 0308 	bic.w	r3, r3, #8
 800b810:	b29a      	uxth	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fa76 	bl	800ad08 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00a      	beq.n	800b840 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b82a:	4b0e      	ldr	r3, [pc, #56]	@ (800b864 <tcp_fasttmr+0xc4>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f819 	bl	800b868 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b836:	4b0b      	ldr	r3, [pc, #44]	@ (800b864 <tcp_fasttmr+0xc4>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d000      	beq.n	800b840 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b83e:	e7b8      	b.n	800b7b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	607b      	str	r3, [r7, #4]
 800b844:	e002      	b.n	800b84c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1b3      	bne.n	800b7ba <tcp_fasttmr+0x1a>
    }
  }
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2401c67e 	.word	0x2401c67e
 800b860:	2401c674 	.word	0x2401c674
 800b864:	2401c67c 	.word	0x2401c67c

0800b868 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d109      	bne.n	800b88a <tcp_process_refused_data+0x22>
 800b876:	4b37      	ldr	r3, [pc, #220]	@ (800b954 <tcp_process_refused_data+0xec>)
 800b878:	f240 6209 	movw	r2, #1545	@ 0x609
 800b87c:	4936      	ldr	r1, [pc, #216]	@ (800b958 <tcp_process_refused_data+0xf0>)
 800b87e:	4837      	ldr	r0, [pc, #220]	@ (800b95c <tcp_process_refused_data+0xf4>)
 800b880:	f005 fca2 	bl	80111c8 <iprintf>
 800b884:	f06f 030f 	mvn.w	r3, #15
 800b888:	e060      	b.n	800b94c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b88e:	7b5b      	ldrb	r3, [r3, #13]
 800b890:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b896:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <tcp_process_refused_data+0x58>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6918      	ldr	r0, [r3, #16]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	47a0      	blx	r4
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73fb      	strb	r3, [r7, #15]
 800b8be:	e007      	b.n	800b8d0 <tcp_process_refused_data+0x68>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f000 f8a4 	bl	800ba14 <tcp_recv_null>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d12a      	bne.n	800b92e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d033      	beq.n	800b94a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b8ea:	d005      	beq.n	800b8f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00b      	beq.n	800b91a <tcp_process_refused_data+0xb2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6918      	ldr	r0, [r3, #16]
 800b90c:	2300      	movs	r3, #0
 800b90e:	2200      	movs	r2, #0
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	47a0      	blx	r4
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]
 800b918:	e001      	b.n	800b91e <tcp_process_refused_data+0xb6>
 800b91a:	2300      	movs	r3, #0
 800b91c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b922:	f113 0f0d 	cmn.w	r3, #13
 800b926:	d110      	bne.n	800b94a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b928:	f06f 030c 	mvn.w	r3, #12
 800b92c:	e00e      	b.n	800b94c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b932:	f113 0f0d 	cmn.w	r3, #13
 800b936:	d102      	bne.n	800b93e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b938:	f06f 030c 	mvn.w	r3, #12
 800b93c:	e006      	b.n	800b94c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b944:	f06f 0304 	mvn.w	r3, #4
 800b948:	e000      	b.n	800b94c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	bd90      	pop	{r4, r7, pc}
 800b954:	080139b4 	.word	0x080139b4
 800b958:	08013ef0 	.word	0x08013ef0
 800b95c:	08013a24 	.word	0x08013a24

0800b960 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b968:	e007      	b.n	800b97a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f80a 	bl	800b98a <tcp_seg_free>
    seg = next;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1f4      	bne.n	800b96a <tcp_segs_free+0xa>
  }
}
 800b980:	bf00      	nop
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00c      	beq.n	800b9b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d004      	beq.n	800b9aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe fb91 	bl	800a0cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	2004      	movs	r0, #4
 800b9ae:	f7fd fd15 	bl	80093dc <memp_free>
  }
}
 800b9b2:	bf00      	nop
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <tcp_seg_copy+0x1c>
 800b9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800ba08 <tcp_seg_copy+0x4c>)
 800b9cc:	f240 6282 	movw	r2, #1666	@ 0x682
 800b9d0:	490e      	ldr	r1, [pc, #56]	@ (800ba0c <tcp_seg_copy+0x50>)
 800b9d2:	480f      	ldr	r0, [pc, #60]	@ (800ba10 <tcp_seg_copy+0x54>)
 800b9d4:	f005 fbf8 	bl	80111c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b9d8:	2004      	movs	r0, #4
 800b9da:	f7fd fc8f 	bl	80092fc <memp_malloc>
 800b9de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <tcp_seg_copy+0x2e>
    return NULL;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e00a      	b.n	800ba00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b9ea:	2210      	movs	r2, #16
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f005 fdb7 	bl	8011562 <memcpy>
  pbuf_ref(cseg->p);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fe fc07 	bl	800a20c <pbuf_ref>
  return cseg;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	080139b4 	.word	0x080139b4
 800ba0c:	08013f34 	.word	0x08013f34
 800ba10:	08013a24 	.word	0x08013a24

0800ba14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
 800ba20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d109      	bne.n	800ba3c <tcp_recv_null+0x28>
 800ba28:	4b12      	ldr	r3, [pc, #72]	@ (800ba74 <tcp_recv_null+0x60>)
 800ba2a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ba2e:	4912      	ldr	r1, [pc, #72]	@ (800ba78 <tcp_recv_null+0x64>)
 800ba30:	4812      	ldr	r0, [pc, #72]	@ (800ba7c <tcp_recv_null+0x68>)
 800ba32:	f005 fbc9 	bl	80111c8 <iprintf>
 800ba36:	f06f 030f 	mvn.w	r3, #15
 800ba3a:	e016      	b.n	800ba6a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d009      	beq.n	800ba56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	891b      	ldrh	r3, [r3, #8]
 800ba46:	4619      	mov	r1, r3
 800ba48:	68b8      	ldr	r0, [r7, #8]
 800ba4a:	f7ff fb17 	bl	800b07c <tcp_recved>
    pbuf_free(p);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7fe fb3c 	bl	800a0cc <pbuf_free>
 800ba54:	e008      	b.n	800ba68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ba56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d104      	bne.n	800ba68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ba5e:	68b8      	ldr	r0, [r7, #8]
 800ba60:	f7ff f9bc 	bl	800addc <tcp_close>
 800ba64:	4603      	mov	r3, r0
 800ba66:	e000      	b.n	800ba6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	080139b4 	.word	0x080139b4
 800ba78:	08013f50 	.word	0x08013f50
 800ba7c:	08013a24 	.word	0x08013a24

0800ba80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ba8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	db01      	blt.n	800ba96 <tcp_kill_prio+0x16>
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	e000      	b.n	800ba98 <tcp_kill_prio+0x18>
 800ba96:	237f      	movs	r3, #127	@ 0x7f
 800ba98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ba9a:	7afb      	ldrb	r3, [r7, #11]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d034      	beq.n	800bb0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800baae:	4b19      	ldr	r3, [pc, #100]	@ (800bb14 <tcp_kill_prio+0x94>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	e01f      	b.n	800baf6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	7d5b      	ldrb	r3, [r3, #21]
 800baba:	7afa      	ldrb	r2, [r7, #11]
 800babc:	429a      	cmp	r2, r3
 800babe:	d80c      	bhi.n	800bada <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bac4:	7afa      	ldrb	r2, [r7, #11]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d112      	bne.n	800baf0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800baca:	4b13      	ldr	r3, [pc, #76]	@ (800bb18 <tcp_kill_prio+0x98>)
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d80a      	bhi.n	800baf0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bada:	4b0f      	ldr	r3, [pc, #60]	@ (800bb18 <tcp_kill_prio+0x98>)
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	7d5b      	ldrb	r3, [r3, #21]
 800baee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1dc      	bne.n	800bab6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d004      	beq.n	800bb0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb02:	6938      	ldr	r0, [r7, #16]
 800bb04:	f7ff fa54 	bl	800afb0 <tcp_abort>
 800bb08:	e000      	b.n	800bb0c <tcp_kill_prio+0x8c>
    return;
 800bb0a:	bf00      	nop
  }
}
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	2401c674 	.word	0x2401c674
 800bb18:	2401c668 	.word	0x2401c668

0800bb1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	2b08      	cmp	r3, #8
 800bb2a:	d009      	beq.n	800bb40 <tcp_kill_state+0x24>
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	2b09      	cmp	r3, #9
 800bb30:	d006      	beq.n	800bb40 <tcp_kill_state+0x24>
 800bb32:	4b1a      	ldr	r3, [pc, #104]	@ (800bb9c <tcp_kill_state+0x80>)
 800bb34:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800bb38:	4919      	ldr	r1, [pc, #100]	@ (800bba0 <tcp_kill_state+0x84>)
 800bb3a:	481a      	ldr	r0, [pc, #104]	@ (800bba4 <tcp_kill_state+0x88>)
 800bb3c:	f005 fb44 	bl	80111c8 <iprintf>

  inactivity = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bb44:	2300      	movs	r3, #0
 800bb46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb48:	4b17      	ldr	r3, [pc, #92]	@ (800bba8 <tcp_kill_state+0x8c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	617b      	str	r3, [r7, #20]
 800bb4e:	e017      	b.n	800bb80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	7d1b      	ldrb	r3, [r3, #20]
 800bb54:	79fa      	ldrb	r2, [r7, #7]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d10f      	bne.n	800bb7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb5a:	4b14      	ldr	r3, [pc, #80]	@ (800bbac <tcp_kill_state+0x90>)
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d807      	bhi.n	800bb7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bb6a:	4b10      	ldr	r3, [pc, #64]	@ (800bbac <tcp_kill_state+0x90>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	617b      	str	r3, [r7, #20]
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e4      	bne.n	800bb50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	6938      	ldr	r0, [r7, #16]
 800bb90:	f7ff f950 	bl	800ae34 <tcp_abandon>
  }
}
 800bb94:	bf00      	nop
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	080139b4 	.word	0x080139b4
 800bba0:	08013f6c 	.word	0x08013f6c
 800bba4:	08013a24 	.word	0x08013a24
 800bba8:	2401c674 	.word	0x2401c674
 800bbac:	2401c668 	.word	0x2401c668

0800bbb0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbbe:	4b12      	ldr	r3, [pc, #72]	@ (800bc08 <tcp_kill_timewait+0x58>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e012      	b.n	800bbec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bbc6:	4b11      	ldr	r3, [pc, #68]	@ (800bc0c <tcp_kill_timewait+0x5c>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d807      	bhi.n	800bbe6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bc0c <tcp_kill_timewait+0x5c>)
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	60fb      	str	r3, [r7, #12]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e9      	bne.n	800bbc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bbf8:	68b8      	ldr	r0, [r7, #8]
 800bbfa:	f7ff f9d9 	bl	800afb0 <tcp_abort>
  }
}
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	2401c678 	.word	0x2401c678
 800bc0c:	2401c668 	.word	0x2401c668

0800bc10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bc16:	4b10      	ldr	r3, [pc, #64]	@ (800bc58 <tcp_handle_closepend+0x48>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bc1c:	e014      	b.n	800bc48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	8b5b      	ldrh	r3, [r3, #26]
 800bc28:	f003 0308 	and.w	r3, r3, #8
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	8b5b      	ldrh	r3, [r3, #26]
 800bc34:	f023 0308 	bic.w	r3, r3, #8
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff f862 	bl	800ad08 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e7      	bne.n	800bc1e <tcp_handle_closepend+0xe>
  }
}
 800bc4e:	bf00      	nop
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	2401c674 	.word	0x2401c674

0800bc5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc66:	2002      	movs	r0, #2
 800bc68:	f7fd fb48 	bl	80092fc <memp_malloc>
 800bc6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d126      	bne.n	800bcc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bc74:	f7ff ffcc 	bl	800bc10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bc78:	f7ff ff9a 	bl	800bbb0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc7c:	2002      	movs	r0, #2
 800bc7e:	f7fd fb3d 	bl	80092fc <memp_malloc>
 800bc82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d11b      	bne.n	800bcc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bc8a:	2009      	movs	r0, #9
 800bc8c:	f7ff ff46 	bl	800bb1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc90:	2002      	movs	r0, #2
 800bc92:	f7fd fb33 	bl	80092fc <memp_malloc>
 800bc96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d111      	bne.n	800bcc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bc9e:	2008      	movs	r0, #8
 800bca0:	f7ff ff3c 	bl	800bb1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bca4:	2002      	movs	r0, #2
 800bca6:	f7fd fb29 	bl	80092fc <memp_malloc>
 800bcaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d107      	bne.n	800bcc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bcb2:	79fb      	ldrb	r3, [r7, #7]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fee3 	bl	800ba80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcba:	2002      	movs	r0, #2
 800bcbc:	f7fd fb1e 	bl	80092fc <memp_malloc>
 800bcc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d03f      	beq.n	800bd48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bcc8:	229c      	movs	r2, #156	@ 0x9c
 800bcca:	2100      	movs	r1, #0
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f005 fbd3 	bl	8011478 <memset>
    pcb->prio = prio;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	79fa      	ldrb	r2, [r7, #7]
 800bcd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800bcde:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800bce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	22ff      	movs	r2, #255	@ 0xff
 800bcf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bcfe:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2206      	movs	r2, #6
 800bd04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2206      	movs	r2, #6
 800bd0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd14:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800bd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd54 <tcp_alloc+0xf8>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bd26:	4b0c      	ldr	r3, [pc, #48]	@ (800bd58 <tcp_alloc+0xfc>)
 800bd28:	781a      	ldrb	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800bd34:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4a08      	ldr	r2, [pc, #32]	@ (800bd5c <tcp_alloc+0x100>)
 800bd3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4a07      	ldr	r2, [pc, #28]	@ (800bd60 <tcp_alloc+0x104>)
 800bd44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bd48:	68fb      	ldr	r3, [r7, #12]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	2401c668 	.word	0x2401c668
 800bd58:	2401c67e 	.word	0x2401c67e
 800bd5c:	0800ba15 	.word	0x0800ba15
 800bd60:	006ddd00 	.word	0x006ddd00

0800bd64 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d107      	bne.n	800bd82 <tcp_pcb_purge+0x1e>
 800bd72:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <tcp_pcb_purge+0x94>)
 800bd74:	f640 0251 	movw	r2, #2129	@ 0x851
 800bd78:	4920      	ldr	r1, [pc, #128]	@ (800bdfc <tcp_pcb_purge+0x98>)
 800bd7a:	4821      	ldr	r0, [pc, #132]	@ (800be00 <tcp_pcb_purge+0x9c>)
 800bd7c:	f005 fa24 	bl	80111c8 <iprintf>
 800bd80:	e037      	b.n	800bdf2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	7d1b      	ldrb	r3, [r3, #20]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d033      	beq.n	800bdf2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bd8e:	2b0a      	cmp	r3, #10
 800bd90:	d02f      	beq.n	800bdf2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d02b      	beq.n	800bdf2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d007      	beq.n	800bdb2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe f990 	bl	800a0cc <pbuf_free>
      pcb->refused_data = NULL;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f986 	bl	800c0cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bdc6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff fdc7 	bl	800b960 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fdc2 	bl	800b960 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	080139b4 	.word	0x080139b4
 800bdfc:	0801402c 	.word	0x0801402c
 800be00:	08013a24 	.word	0x08013a24

0800be04 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <tcp_pcb_remove+0x1e>
 800be14:	4b3e      	ldr	r3, [pc, #248]	@ (800bf10 <tcp_pcb_remove+0x10c>)
 800be16:	f640 0283 	movw	r2, #2179	@ 0x883
 800be1a:	493e      	ldr	r1, [pc, #248]	@ (800bf14 <tcp_pcb_remove+0x110>)
 800be1c:	483e      	ldr	r0, [pc, #248]	@ (800bf18 <tcp_pcb_remove+0x114>)
 800be1e:	f005 f9d3 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d106      	bne.n	800be36 <tcp_pcb_remove+0x32>
 800be28:	4b39      	ldr	r3, [pc, #228]	@ (800bf10 <tcp_pcb_remove+0x10c>)
 800be2a:	f640 0284 	movw	r2, #2180	@ 0x884
 800be2e:	493b      	ldr	r1, [pc, #236]	@ (800bf1c <tcp_pcb_remove+0x118>)
 800be30:	4839      	ldr	r0, [pc, #228]	@ (800bf18 <tcp_pcb_remove+0x114>)
 800be32:	f005 f9c9 	bl	80111c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d105      	bne.n	800be4c <tcp_pcb_remove+0x48>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68da      	ldr	r2, [r3, #12]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	601a      	str	r2, [r3, #0]
 800be4a:	e013      	b.n	800be74 <tcp_pcb_remove+0x70>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	e00c      	b.n	800be6e <tcp_pcb_remove+0x6a>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d104      	bne.n	800be68 <tcp_pcb_remove+0x64>
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	68da      	ldr	r2, [r3, #12]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	60da      	str	r2, [r3, #12]
 800be66:	e005      	b.n	800be74 <tcp_pcb_remove+0x70>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1ef      	bne.n	800be54 <tcp_pcb_remove+0x50>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2200      	movs	r2, #0
 800be78:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800be7a:	6838      	ldr	r0, [r7, #0]
 800be7c:	f7ff ff72 	bl	800bd64 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	7d1b      	ldrb	r3, [r3, #20]
 800be84:	2b0a      	cmp	r3, #10
 800be86:	d013      	beq.n	800beb0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d00f      	beq.n	800beb0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	8b5b      	ldrh	r3, [r3, #26]
 800be94:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d009      	beq.n	800beb0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	8b5b      	ldrh	r3, [r3, #26]
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800beaa:	6838      	ldr	r0, [r7, #0]
 800beac:	f002 ff68 	bl	800ed80 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	7d1b      	ldrb	r3, [r3, #20]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d020      	beq.n	800befa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d006      	beq.n	800bece <tcp_pcb_remove+0xca>
 800bec0:	4b13      	ldr	r3, [pc, #76]	@ (800bf10 <tcp_pcb_remove+0x10c>)
 800bec2:	f640 0293 	movw	r2, #2195	@ 0x893
 800bec6:	4916      	ldr	r1, [pc, #88]	@ (800bf20 <tcp_pcb_remove+0x11c>)
 800bec8:	4813      	ldr	r0, [pc, #76]	@ (800bf18 <tcp_pcb_remove+0x114>)
 800beca:	f005 f97d 	bl	80111c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d006      	beq.n	800bee4 <tcp_pcb_remove+0xe0>
 800bed6:	4b0e      	ldr	r3, [pc, #56]	@ (800bf10 <tcp_pcb_remove+0x10c>)
 800bed8:	f640 0294 	movw	r2, #2196	@ 0x894
 800bedc:	4911      	ldr	r1, [pc, #68]	@ (800bf24 <tcp_pcb_remove+0x120>)
 800bede:	480e      	ldr	r0, [pc, #56]	@ (800bf18 <tcp_pcb_remove+0x114>)
 800bee0:	f005 f972 	bl	80111c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d006      	beq.n	800befa <tcp_pcb_remove+0xf6>
 800beec:	4b08      	ldr	r3, [pc, #32]	@ (800bf10 <tcp_pcb_remove+0x10c>)
 800beee:	f640 0296 	movw	r2, #2198	@ 0x896
 800bef2:	490d      	ldr	r1, [pc, #52]	@ (800bf28 <tcp_pcb_remove+0x124>)
 800bef4:	4808      	ldr	r0, [pc, #32]	@ (800bf18 <tcp_pcb_remove+0x114>)
 800bef6:	f005 f967 	bl	80111c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2200      	movs	r2, #0
 800befe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2200      	movs	r2, #0
 800bf04:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bf06:	bf00      	nop
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	080139b4 	.word	0x080139b4
 800bf14:	08014048 	.word	0x08014048
 800bf18:	08013a24 	.word	0x08013a24
 800bf1c:	08014064 	.word	0x08014064
 800bf20:	08014084 	.word	0x08014084
 800bf24:	0801409c 	.word	0x0801409c
 800bf28:	080140b8 	.word	0x080140b8

0800bf2c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d106      	bne.n	800bf48 <tcp_next_iss+0x1c>
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf64 <tcp_next_iss+0x38>)
 800bf3c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800bf40:	4909      	ldr	r1, [pc, #36]	@ (800bf68 <tcp_next_iss+0x3c>)
 800bf42:	480a      	ldr	r0, [pc, #40]	@ (800bf6c <tcp_next_iss+0x40>)
 800bf44:	f005 f940 	bl	80111c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bf48:	4b09      	ldr	r3, [pc, #36]	@ (800bf70 <tcp_next_iss+0x44>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	4b09      	ldr	r3, [pc, #36]	@ (800bf74 <tcp_next_iss+0x48>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4413      	add	r3, r2
 800bf52:	4a07      	ldr	r2, [pc, #28]	@ (800bf70 <tcp_next_iss+0x44>)
 800bf54:	6013      	str	r3, [r2, #0]
  return iss;
 800bf56:	4b06      	ldr	r3, [pc, #24]	@ (800bf70 <tcp_next_iss+0x44>)
 800bf58:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	080139b4 	.word	0x080139b4
 800bf68:	080140d0 	.word	0x080140d0
 800bf6c:	08013a24 	.word	0x08013a24
 800bf70:	2400003c 	.word	0x2400003c
 800bf74:	2401c668 	.word	0x2401c668

0800bf78 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <tcp_eff_send_mss_netif+0x22>
 800bf8c:	4b14      	ldr	r3, [pc, #80]	@ (800bfe0 <tcp_eff_send_mss_netif+0x68>)
 800bf8e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800bf92:	4914      	ldr	r1, [pc, #80]	@ (800bfe4 <tcp_eff_send_mss_netif+0x6c>)
 800bf94:	4814      	ldr	r0, [pc, #80]	@ (800bfe8 <tcp_eff_send_mss_netif+0x70>)
 800bf96:	f005 f917 	bl	80111c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bfa0:	89fb      	ldrh	r3, [r7, #14]
 800bfa2:	e019      	b.n	800bfd8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfa8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bfaa:	8afb      	ldrh	r3, [r7, #22]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d012      	beq.n	800bfd6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bfb0:	2328      	movs	r3, #40	@ 0x28
 800bfb2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bfb4:	8afa      	ldrh	r2, [r7, #22]
 800bfb6:	8abb      	ldrh	r3, [r7, #20]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d904      	bls.n	800bfc6 <tcp_eff_send_mss_netif+0x4e>
 800bfbc:	8afa      	ldrh	r2, [r7, #22]
 800bfbe:	8abb      	ldrh	r3, [r7, #20]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	e000      	b.n	800bfc8 <tcp_eff_send_mss_netif+0x50>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bfca:	8a7a      	ldrh	r2, [r7, #18]
 800bfcc:	89fb      	ldrh	r3, [r7, #14]
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	bf28      	it	cs
 800bfd2:	4613      	movcs	r3, r2
 800bfd4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bfd6:	89fb      	ldrh	r3, [r7, #14]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	080139b4 	.word	0x080139b4
 800bfe4:	080140ec 	.word	0x080140ec
 800bfe8:	08013a24 	.word	0x08013a24

0800bfec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d119      	bne.n	800c034 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c000:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c002:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800c006:	4910      	ldr	r1, [pc, #64]	@ (800c048 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c008:	4810      	ldr	r0, [pc, #64]	@ (800c04c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c00a:	f005 f8dd 	bl	80111c8 <iprintf>

  while (pcb != NULL) {
 800c00e:	e011      	b.n	800c034 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d108      	bne.n	800c02e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7fe ffc4 	bl	800afb0 <tcp_abort>
      pcb = next;
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e002      	b.n	800c034 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1ea      	bne.n	800c010 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c03a:	bf00      	nop
 800c03c:	bf00      	nop
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	080139b4 	.word	0x080139b4
 800c048:	08014114 	.word	0x08014114
 800c04c:	08013a24 	.word	0x08013a24

0800c050 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02a      	beq.n	800c0b6 <tcp_netif_ip_addr_changed+0x66>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d026      	beq.n	800c0b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c068:	4b15      	ldr	r3, [pc, #84]	@ (800c0c0 <tcp_netif_ip_addr_changed+0x70>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff ffbc 	bl	800bfec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c074:	4b13      	ldr	r3, [pc, #76]	@ (800c0c4 <tcp_netif_ip_addr_changed+0x74>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff ffb6 	bl	800bfec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d017      	beq.n	800c0b6 <tcp_netif_ip_addr_changed+0x66>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d013      	beq.n	800c0b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c08e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c8 <tcp_netif_ip_addr_changed+0x78>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	e00c      	b.n	800c0b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d103      	bne.n	800c0aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1ef      	bne.n	800c096 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c0b6:	bf00      	nop
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	2401c674 	.word	0x2401c674
 800c0c4:	2401c66c 	.word	0x2401c66c
 800c0c8:	2401c670 	.word	0x2401c670

0800c0cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fc3d 	bl	800b960 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c0f4:	b590      	push	{r4, r7, lr}
 800c0f6:	b08d      	sub	sp, #52	@ 0x34
 800c0f8:	af04      	add	r7, sp, #16
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d105      	bne.n	800c110 <tcp_input+0x1c>
 800c104:	4b9b      	ldr	r3, [pc, #620]	@ (800c374 <tcp_input+0x280>)
 800c106:	2283      	movs	r2, #131	@ 0x83
 800c108:	499b      	ldr	r1, [pc, #620]	@ (800c378 <tcp_input+0x284>)
 800c10a:	489c      	ldr	r0, [pc, #624]	@ (800c37c <tcp_input+0x288>)
 800c10c:	f005 f85c 	bl	80111c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	4a9a      	ldr	r2, [pc, #616]	@ (800c380 <tcp_input+0x28c>)
 800c116:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	895b      	ldrh	r3, [r3, #10]
 800c11c:	2b13      	cmp	r3, #19
 800c11e:	f240 83d1 	bls.w	800c8c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c122:	4b98      	ldr	r3, [pc, #608]	@ (800c384 <tcp_input+0x290>)
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	4a97      	ldr	r2, [pc, #604]	@ (800c384 <tcp_input+0x290>)
 800c128:	6812      	ldr	r2, [r2, #0]
 800c12a:	4611      	mov	r1, r2
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fb fe47 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	f040 83c7 	bne.w	800c8c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c13a:	4b92      	ldr	r3, [pc, #584]	@ (800c384 <tcp_input+0x290>)
 800c13c:	695b      	ldr	r3, [r3, #20]
 800c13e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c142:	2be0      	cmp	r3, #224	@ 0xe0
 800c144:	f000 83c0 	beq.w	800c8c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c148:	4b8d      	ldr	r3, [pc, #564]	@ (800c380 <tcp_input+0x28c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	899b      	ldrh	r3, [r3, #12]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	4618      	mov	r0, r3
 800c152:	f7fa f8bd 	bl	80062d0 <lwip_htons>
 800c156:	4603      	mov	r3, r0
 800c158:	0b1b      	lsrs	r3, r3, #12
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c162:	7cbb      	ldrb	r3, [r7, #18]
 800c164:	2b13      	cmp	r3, #19
 800c166:	f240 83b1 	bls.w	800c8cc <tcp_input+0x7d8>
 800c16a:	7cbb      	ldrb	r3, [r7, #18]
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	891b      	ldrh	r3, [r3, #8]
 800c172:	429a      	cmp	r2, r3
 800c174:	f200 83aa 	bhi.w	800c8cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c178:	7cbb      	ldrb	r3, [r7, #18]
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	3b14      	subs	r3, #20
 800c17e:	b29a      	uxth	r2, r3
 800c180:	4b81      	ldr	r3, [pc, #516]	@ (800c388 <tcp_input+0x294>)
 800c182:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c184:	4b81      	ldr	r3, [pc, #516]	@ (800c38c <tcp_input+0x298>)
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	895a      	ldrh	r2, [r3, #10]
 800c18e:	7cbb      	ldrb	r3, [r7, #18]
 800c190:	b29b      	uxth	r3, r3
 800c192:	429a      	cmp	r2, r3
 800c194:	d309      	bcc.n	800c1aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c196:	4b7c      	ldr	r3, [pc, #496]	@ (800c388 <tcp_input+0x294>)
 800c198:	881a      	ldrh	r2, [r3, #0]
 800c19a:	4b7d      	ldr	r3, [pc, #500]	@ (800c390 <tcp_input+0x29c>)
 800c19c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c19e:	7cbb      	ldrb	r3, [r7, #18]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7fd ff0c 	bl	8009fc0 <pbuf_remove_header>
 800c1a8:	e04e      	b.n	800c248 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d105      	bne.n	800c1be <tcp_input+0xca>
 800c1b2:	4b70      	ldr	r3, [pc, #448]	@ (800c374 <tcp_input+0x280>)
 800c1b4:	22c2      	movs	r2, #194	@ 0xc2
 800c1b6:	4977      	ldr	r1, [pc, #476]	@ (800c394 <tcp_input+0x2a0>)
 800c1b8:	4870      	ldr	r0, [pc, #448]	@ (800c37c <tcp_input+0x288>)
 800c1ba:	f005 f805 	bl	80111c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c1be:	2114      	movs	r1, #20
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7fd fefd 	bl	8009fc0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	895a      	ldrh	r2, [r3, #10]
 800c1ca:	4b71      	ldr	r3, [pc, #452]	@ (800c390 <tcp_input+0x29c>)
 800c1cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c1ce:	4b6e      	ldr	r3, [pc, #440]	@ (800c388 <tcp_input+0x294>)
 800c1d0:	881a      	ldrh	r2, [r3, #0]
 800c1d2:	4b6f      	ldr	r3, [pc, #444]	@ (800c390 <tcp_input+0x29c>)
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c1da:	4b6d      	ldr	r3, [pc, #436]	@ (800c390 <tcp_input+0x29c>)
 800c1dc:	881b      	ldrh	r3, [r3, #0]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7fd feed 	bl	8009fc0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	895b      	ldrh	r3, [r3, #10]
 800c1ec:	8a3a      	ldrh	r2, [r7, #16]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	f200 836e 	bhi.w	800c8d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	4a64      	ldr	r2, [pc, #400]	@ (800c38c <tcp_input+0x298>)
 800c1fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	8a3a      	ldrh	r2, [r7, #16]
 800c204:	4611      	mov	r1, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7fd feda 	bl	8009fc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	891a      	ldrh	r2, [r3, #8]
 800c210:	8a3b      	ldrh	r3, [r7, #16]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	b29a      	uxth	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	895b      	ldrh	r3, [r3, #10]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d005      	beq.n	800c22e <tcp_input+0x13a>
 800c222:	4b54      	ldr	r3, [pc, #336]	@ (800c374 <tcp_input+0x280>)
 800c224:	22df      	movs	r2, #223	@ 0xdf
 800c226:	495c      	ldr	r1, [pc, #368]	@ (800c398 <tcp_input+0x2a4>)
 800c228:	4854      	ldr	r0, [pc, #336]	@ (800c37c <tcp_input+0x288>)
 800c22a:	f004 ffcd 	bl	80111c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	891a      	ldrh	r2, [r3, #8]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	891b      	ldrh	r3, [r3, #8]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d005      	beq.n	800c248 <tcp_input+0x154>
 800c23c:	4b4d      	ldr	r3, [pc, #308]	@ (800c374 <tcp_input+0x280>)
 800c23e:	22e0      	movs	r2, #224	@ 0xe0
 800c240:	4956      	ldr	r1, [pc, #344]	@ (800c39c <tcp_input+0x2a8>)
 800c242:	484e      	ldr	r0, [pc, #312]	@ (800c37c <tcp_input+0x288>)
 800c244:	f004 ffc0 	bl	80111c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c248:	4b4d      	ldr	r3, [pc, #308]	@ (800c380 <tcp_input+0x28c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	4a4b      	ldr	r2, [pc, #300]	@ (800c380 <tcp_input+0x28c>)
 800c252:	6814      	ldr	r4, [r2, #0]
 800c254:	4618      	mov	r0, r3
 800c256:	f7fa f83b 	bl	80062d0 <lwip_htons>
 800c25a:	4603      	mov	r3, r0
 800c25c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c25e:	4b48      	ldr	r3, [pc, #288]	@ (800c380 <tcp_input+0x28c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	885b      	ldrh	r3, [r3, #2]
 800c264:	b29b      	uxth	r3, r3
 800c266:	4a46      	ldr	r2, [pc, #280]	@ (800c380 <tcp_input+0x28c>)
 800c268:	6814      	ldr	r4, [r2, #0]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fa f830 	bl	80062d0 <lwip_htons>
 800c270:	4603      	mov	r3, r0
 800c272:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c274:	4b42      	ldr	r3, [pc, #264]	@ (800c380 <tcp_input+0x28c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	4a41      	ldr	r2, [pc, #260]	@ (800c380 <tcp_input+0x28c>)
 800c27c:	6814      	ldr	r4, [r2, #0]
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fa f83b 	bl	80062fa <lwip_htonl>
 800c284:	4603      	mov	r3, r0
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	6863      	ldr	r3, [r4, #4]
 800c28a:	4a45      	ldr	r2, [pc, #276]	@ (800c3a0 <tcp_input+0x2ac>)
 800c28c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c28e:	4b3c      	ldr	r3, [pc, #240]	@ (800c380 <tcp_input+0x28c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	4a3a      	ldr	r2, [pc, #232]	@ (800c380 <tcp_input+0x28c>)
 800c296:	6814      	ldr	r4, [r2, #0]
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fa f82e 	bl	80062fa <lwip_htonl>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	60a3      	str	r3, [r4, #8]
 800c2a2:	68a3      	ldr	r3, [r4, #8]
 800c2a4:	4a3f      	ldr	r2, [pc, #252]	@ (800c3a4 <tcp_input+0x2b0>)
 800c2a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c2a8:	4b35      	ldr	r3, [pc, #212]	@ (800c380 <tcp_input+0x28c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	89db      	ldrh	r3, [r3, #14]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4a33      	ldr	r2, [pc, #204]	@ (800c380 <tcp_input+0x28c>)
 800c2b2:	6814      	ldr	r4, [r2, #0]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7fa f80b 	bl	80062d0 <lwip_htons>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c2be:	4b30      	ldr	r3, [pc, #192]	@ (800c380 <tcp_input+0x28c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	899b      	ldrh	r3, [r3, #12]
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fa f802 	bl	80062d0 <lwip_htons>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	4b34      	ldr	r3, [pc, #208]	@ (800c3a8 <tcp_input+0x2b4>)
 800c2d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	891a      	ldrh	r2, [r3, #8]
 800c2de:	4b33      	ldr	r3, [pc, #204]	@ (800c3ac <tcp_input+0x2b8>)
 800c2e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c2e2:	4b31      	ldr	r3, [pc, #196]	@ (800c3a8 <tcp_input+0x2b4>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	f003 0303 	and.w	r3, r3, #3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00c      	beq.n	800c308 <tcp_input+0x214>
    tcplen++;
 800c2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800c3ac <tcp_input+0x2b8>)
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	4b2d      	ldr	r3, [pc, #180]	@ (800c3ac <tcp_input+0x2b8>)
 800c2f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	891a      	ldrh	r2, [r3, #8]
 800c2fe:	4b2b      	ldr	r3, [pc, #172]	@ (800c3ac <tcp_input+0x2b8>)
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	429a      	cmp	r2, r3
 800c304:	f200 82e6 	bhi.w	800c8d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c30c:	4b28      	ldr	r3, [pc, #160]	@ (800c3b0 <tcp_input+0x2bc>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	61fb      	str	r3, [r7, #28]
 800c312:	e09d      	b.n	800c450 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	7d1b      	ldrb	r3, [r3, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d105      	bne.n	800c328 <tcp_input+0x234>
 800c31c:	4b15      	ldr	r3, [pc, #84]	@ (800c374 <tcp_input+0x280>)
 800c31e:	22fb      	movs	r2, #251	@ 0xfb
 800c320:	4924      	ldr	r1, [pc, #144]	@ (800c3b4 <tcp_input+0x2c0>)
 800c322:	4816      	ldr	r0, [pc, #88]	@ (800c37c <tcp_input+0x288>)
 800c324:	f004 ff50 	bl	80111c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	7d1b      	ldrb	r3, [r3, #20]
 800c32c:	2b0a      	cmp	r3, #10
 800c32e:	d105      	bne.n	800c33c <tcp_input+0x248>
 800c330:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <tcp_input+0x280>)
 800c332:	22fc      	movs	r2, #252	@ 0xfc
 800c334:	4920      	ldr	r1, [pc, #128]	@ (800c3b8 <tcp_input+0x2c4>)
 800c336:	4811      	ldr	r0, [pc, #68]	@ (800c37c <tcp_input+0x288>)
 800c338:	f004 ff46 	bl	80111c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	7d1b      	ldrb	r3, [r3, #20]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d105      	bne.n	800c350 <tcp_input+0x25c>
 800c344:	4b0b      	ldr	r3, [pc, #44]	@ (800c374 <tcp_input+0x280>)
 800c346:	22fd      	movs	r2, #253	@ 0xfd
 800c348:	491c      	ldr	r1, [pc, #112]	@ (800c3bc <tcp_input+0x2c8>)
 800c34a:	480c      	ldr	r0, [pc, #48]	@ (800c37c <tcp_input+0x288>)
 800c34c:	f004 ff3c 	bl	80111c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	7a1b      	ldrb	r3, [r3, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d033      	beq.n	800c3c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	7a1a      	ldrb	r2, [r3, #8]
 800c35c:	4b09      	ldr	r3, [pc, #36]	@ (800c384 <tcp_input+0x290>)
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c364:	3301      	adds	r3, #1
 800c366:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c368:	429a      	cmp	r2, r3
 800c36a:	d029      	beq.n	800c3c0 <tcp_input+0x2cc>
      prev = pcb;
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	61bb      	str	r3, [r7, #24]
      continue;
 800c370:	e06b      	b.n	800c44a <tcp_input+0x356>
 800c372:	bf00      	nop
 800c374:	08014148 	.word	0x08014148
 800c378:	080141a8 	.word	0x080141a8
 800c37c:	080141c0 	.word	0x080141c0
 800c380:	2401c690 	.word	0x2401c690
 800c384:	24000414 	.word	0x24000414
 800c388:	2401c694 	.word	0x2401c694
 800c38c:	2401c698 	.word	0x2401c698
 800c390:	2401c696 	.word	0x2401c696
 800c394:	080141e8 	.word	0x080141e8
 800c398:	080141f8 	.word	0x080141f8
 800c39c:	08014204 	.word	0x08014204
 800c3a0:	2401c6a0 	.word	0x2401c6a0
 800c3a4:	2401c6a4 	.word	0x2401c6a4
 800c3a8:	2401c6ac 	.word	0x2401c6ac
 800c3ac:	2401c6aa 	.word	0x2401c6aa
 800c3b0:	2401c674 	.word	0x2401c674
 800c3b4:	08014224 	.word	0x08014224
 800c3b8:	0801424c 	.word	0x0801424c
 800c3bc:	08014278 	.word	0x08014278
    }

    if (pcb->remote_port == tcphdr->src &&
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	8b1a      	ldrh	r2, [r3, #24]
 800c3c4:	4b72      	ldr	r3, [pc, #456]	@ (800c590 <tcp_input+0x49c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d13a      	bne.n	800c446 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	8ada      	ldrh	r2, [r3, #22]
 800c3d4:	4b6e      	ldr	r3, [pc, #440]	@ (800c590 <tcp_input+0x49c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	885b      	ldrh	r3, [r3, #2]
 800c3da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d132      	bne.n	800c446 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	4b6b      	ldr	r3, [pc, #428]	@ (800c594 <tcp_input+0x4a0>)
 800c3e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d12c      	bne.n	800c446 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	4b68      	ldr	r3, [pc, #416]	@ (800c594 <tcp_input+0x4a0>)
 800c3f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d126      	bne.n	800c446 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	69fa      	ldr	r2, [r7, #28]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d106      	bne.n	800c410 <tcp_input+0x31c>
 800c402:	4b65      	ldr	r3, [pc, #404]	@ (800c598 <tcp_input+0x4a4>)
 800c404:	f240 120d 	movw	r2, #269	@ 0x10d
 800c408:	4964      	ldr	r1, [pc, #400]	@ (800c59c <tcp_input+0x4a8>)
 800c40a:	4865      	ldr	r0, [pc, #404]	@ (800c5a0 <tcp_input+0x4ac>)
 800c40c:	f004 fedc 	bl	80111c8 <iprintf>
      if (prev != NULL) {
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <tcp_input+0x338>
        prev->next = pcb->next;
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c41e:	4b61      	ldr	r3, [pc, #388]	@ (800c5a4 <tcp_input+0x4b0>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c426:	4a5f      	ldr	r2, [pc, #380]	@ (800c5a4 <tcp_input+0x4b0>)
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	69fa      	ldr	r2, [r7, #28]
 800c432:	429a      	cmp	r2, r3
 800c434:	d111      	bne.n	800c45a <tcp_input+0x366>
 800c436:	4b58      	ldr	r3, [pc, #352]	@ (800c598 <tcp_input+0x4a4>)
 800c438:	f240 1215 	movw	r2, #277	@ 0x115
 800c43c:	495a      	ldr	r1, [pc, #360]	@ (800c5a8 <tcp_input+0x4b4>)
 800c43e:	4858      	ldr	r0, [pc, #352]	@ (800c5a0 <tcp_input+0x4ac>)
 800c440:	f004 fec2 	bl	80111c8 <iprintf>
      break;
 800c444:	e009      	b.n	800c45a <tcp_input+0x366>
    }
    prev = pcb;
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	61fb      	str	r3, [r7, #28]
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f47f af5e 	bne.w	800c314 <tcp_input+0x220>
 800c458:	e000      	b.n	800c45c <tcp_input+0x368>
      break;
 800c45a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f040 80aa 	bne.w	800c5b8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c464:	4b51      	ldr	r3, [pc, #324]	@ (800c5ac <tcp_input+0x4b8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	61fb      	str	r3, [r7, #28]
 800c46a:	e03f      	b.n	800c4ec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	7d1b      	ldrb	r3, [r3, #20]
 800c470:	2b0a      	cmp	r3, #10
 800c472:	d006      	beq.n	800c482 <tcp_input+0x38e>
 800c474:	4b48      	ldr	r3, [pc, #288]	@ (800c598 <tcp_input+0x4a4>)
 800c476:	f240 121f 	movw	r2, #287	@ 0x11f
 800c47a:	494d      	ldr	r1, [pc, #308]	@ (800c5b0 <tcp_input+0x4bc>)
 800c47c:	4848      	ldr	r0, [pc, #288]	@ (800c5a0 <tcp_input+0x4ac>)
 800c47e:	f004 fea3 	bl	80111c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	7a1b      	ldrb	r3, [r3, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d009      	beq.n	800c49e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	7a1a      	ldrb	r2, [r3, #8]
 800c48e:	4b41      	ldr	r3, [pc, #260]	@ (800c594 <tcp_input+0x4a0>)
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c496:	3301      	adds	r3, #1
 800c498:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d122      	bne.n	800c4e4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	8b1a      	ldrh	r2, [r3, #24]
 800c4a2:	4b3b      	ldr	r3, [pc, #236]	@ (800c590 <tcp_input+0x49c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d11b      	bne.n	800c4e6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	8ada      	ldrh	r2, [r3, #22]
 800c4b2:	4b37      	ldr	r3, [pc, #220]	@ (800c590 <tcp_input+0x49c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	885b      	ldrh	r3, [r3, #2]
 800c4b8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d113      	bne.n	800c4e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	4b34      	ldr	r3, [pc, #208]	@ (800c594 <tcp_input+0x4a0>)
 800c4c4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d10d      	bne.n	800c4e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	4b31      	ldr	r3, [pc, #196]	@ (800c594 <tcp_input+0x4a0>)
 800c4d0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d107      	bne.n	800c4e6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c4d6:	69f8      	ldr	r0, [r7, #28]
 800c4d8:	f000 fb56 	bl	800cb88 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7fd fdf5 	bl	800a0cc <pbuf_free>
        return;
 800c4e2:	e1fd      	b.n	800c8e0 <tcp_input+0x7ec>
        continue;
 800c4e4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	61fb      	str	r3, [r7, #28]
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1bc      	bne.n	800c46c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c4f6:	4b2f      	ldr	r3, [pc, #188]	@ (800c5b4 <tcp_input+0x4c0>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	e02a      	b.n	800c554 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	7a1b      	ldrb	r3, [r3, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00c      	beq.n	800c520 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	7a1a      	ldrb	r2, [r3, #8]
 800c50a:	4b22      	ldr	r3, [pc, #136]	@ (800c594 <tcp_input+0x4a0>)
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c512:	3301      	adds	r3, #1
 800c514:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c516:	429a      	cmp	r2, r3
 800c518:	d002      	beq.n	800c520 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	61bb      	str	r3, [r7, #24]
        continue;
 800c51e:	e016      	b.n	800c54e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	8ada      	ldrh	r2, [r3, #22]
 800c524:	4b1a      	ldr	r3, [pc, #104]	@ (800c590 <tcp_input+0x49c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	885b      	ldrh	r3, [r3, #2]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d10c      	bne.n	800c54a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	4b17      	ldr	r3, [pc, #92]	@ (800c594 <tcp_input+0x4a0>)
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d00f      	beq.n	800c55c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00d      	beq.n	800c55e <tcp_input+0x46a>
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d009      	beq.n	800c55e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	617b      	str	r3, [r7, #20]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1d1      	bne.n	800c4fe <tcp_input+0x40a>
 800c55a:	e000      	b.n	800c55e <tcp_input+0x46a>
            break;
 800c55c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d029      	beq.n	800c5b8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	68da      	ldr	r2, [r3, #12]
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c572:	4b10      	ldr	r3, [pc, #64]	@ (800c5b4 <tcp_input+0x4c0>)
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c57a:	4a0e      	ldr	r2, [pc, #56]	@ (800c5b4 <tcp_input+0x4c0>)
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c580:	6978      	ldr	r0, [r7, #20]
 800c582:	f000 fa03 	bl	800c98c <tcp_listen_input>
      }
      pbuf_free(p);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7fd fda0 	bl	800a0cc <pbuf_free>
      return;
 800c58c:	e1a8      	b.n	800c8e0 <tcp_input+0x7ec>
 800c58e:	bf00      	nop
 800c590:	2401c690 	.word	0x2401c690
 800c594:	24000414 	.word	0x24000414
 800c598:	08014148 	.word	0x08014148
 800c59c:	080142a0 	.word	0x080142a0
 800c5a0:	080141c0 	.word	0x080141c0
 800c5a4:	2401c674 	.word	0x2401c674
 800c5a8:	080142cc 	.word	0x080142cc
 800c5ac:	2401c678 	.word	0x2401c678
 800c5b0:	080142f8 	.word	0x080142f8
 800c5b4:	2401c670 	.word	0x2401c670
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 8158 	beq.w	800c870 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c5c0:	4b95      	ldr	r3, [pc, #596]	@ (800c818 <tcp_input+0x724>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	891a      	ldrh	r2, [r3, #8]
 800c5ca:	4b93      	ldr	r3, [pc, #588]	@ (800c818 <tcp_input+0x724>)
 800c5cc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c5ce:	4a92      	ldr	r2, [pc, #584]	@ (800c818 <tcp_input+0x724>)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c5d4:	4b91      	ldr	r3, [pc, #580]	@ (800c81c <tcp_input+0x728>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a8f      	ldr	r2, [pc, #572]	@ (800c818 <tcp_input+0x724>)
 800c5da:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c5dc:	4b90      	ldr	r3, [pc, #576]	@ (800c820 <tcp_input+0x72c>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c5e2:	4b90      	ldr	r3, [pc, #576]	@ (800c824 <tcp_input+0x730>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c5e8:	4b8f      	ldr	r3, [pc, #572]	@ (800c828 <tcp_input+0x734>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c5ee:	4b8f      	ldr	r3, [pc, #572]	@ (800c82c <tcp_input+0x738>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	f003 0308 	and.w	r3, r3, #8
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	7b5b      	ldrb	r3, [r3, #13]
 800c5fe:	f043 0301 	orr.w	r3, r3, #1
 800c602:	b2da      	uxtb	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d017      	beq.n	800c640 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c610:	69f8      	ldr	r0, [r7, #28]
 800c612:	f7ff f929 	bl	800b868 <tcp_process_refused_data>
 800c616:	4603      	mov	r3, r0
 800c618:	f113 0f0d 	cmn.w	r3, #13
 800c61c:	d007      	beq.n	800c62e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00c      	beq.n	800c640 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c626:	4b82      	ldr	r3, [pc, #520]	@ (800c830 <tcp_input+0x73c>)
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d008      	beq.n	800c640 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c632:	2b00      	cmp	r3, #0
 800c634:	f040 80e3 	bne.w	800c7fe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c638:	69f8      	ldr	r0, [r7, #28]
 800c63a:	f003 f9a7 	bl	800f98c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c63e:	e0de      	b.n	800c7fe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c640:	4a7c      	ldr	r2, [pc, #496]	@ (800c834 <tcp_input+0x740>)
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c646:	69f8      	ldr	r0, [r7, #28]
 800c648:	f000 fb18 	bl	800cc7c <tcp_process>
 800c64c:	4603      	mov	r3, r0
 800c64e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c654:	f113 0f0d 	cmn.w	r3, #13
 800c658:	f000 80d3 	beq.w	800c802 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c65c:	4b71      	ldr	r3, [pc, #452]	@ (800c824 <tcp_input+0x730>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b00      	cmp	r3, #0
 800c666:	d015      	beq.n	800c694 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d008      	beq.n	800c684 <tcp_input+0x590>
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	6912      	ldr	r2, [r2, #16]
 800c67c:	f06f 010d 	mvn.w	r1, #13
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c684:	69f9      	ldr	r1, [r7, #28]
 800c686:	486c      	ldr	r0, [pc, #432]	@ (800c838 <tcp_input+0x744>)
 800c688:	f7ff fbbc 	bl	800be04 <tcp_pcb_remove>
        tcp_free(pcb);
 800c68c:	69f8      	ldr	r0, [r7, #28]
 800c68e:	f7fe f9a7 	bl	800a9e0 <tcp_free>
 800c692:	e0da      	b.n	800c84a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c698:	4b63      	ldr	r3, [pc, #396]	@ (800c828 <tcp_input+0x734>)
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01d      	beq.n	800c6dc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c6a0:	4b61      	ldr	r3, [pc, #388]	@ (800c828 <tcp_input+0x734>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00a      	beq.n	800c6c6 <tcp_input+0x5d2>
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	6910      	ldr	r0, [r2, #16]
 800c6ba:	89fa      	ldrh	r2, [r7, #14]
 800c6bc:	69f9      	ldr	r1, [r7, #28]
 800c6be:	4798      	blx	r3
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	74fb      	strb	r3, [r7, #19]
 800c6c4:	e001      	b.n	800c6ca <tcp_input+0x5d6>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c6ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6ce:	f113 0f0d 	cmn.w	r3, #13
 800c6d2:	f000 8098 	beq.w	800c806 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c6d6:	4b54      	ldr	r3, [pc, #336]	@ (800c828 <tcp_input+0x734>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c6dc:	69f8      	ldr	r0, [r7, #28]
 800c6de:	f000 f915 	bl	800c90c <tcp_input_delayed_close>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f040 8090 	bne.w	800c80a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c6ea:	4b4d      	ldr	r3, [pc, #308]	@ (800c820 <tcp_input+0x72c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d041      	beq.n	800c776 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d006      	beq.n	800c708 <tcp_input+0x614>
 800c6fa:	4b50      	ldr	r3, [pc, #320]	@ (800c83c <tcp_input+0x748>)
 800c6fc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c700:	494f      	ldr	r1, [pc, #316]	@ (800c840 <tcp_input+0x74c>)
 800c702:	4850      	ldr	r0, [pc, #320]	@ (800c844 <tcp_input+0x750>)
 800c704:	f004 fd60 	bl	80111c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	8b5b      	ldrh	r3, [r3, #26]
 800c70c:	f003 0310 	and.w	r3, r3, #16
 800c710:	2b00      	cmp	r3, #0
 800c712:	d008      	beq.n	800c726 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c714:	4b42      	ldr	r3, [pc, #264]	@ (800c820 <tcp_input+0x72c>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fd fcd7 	bl	800a0cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c71e:	69f8      	ldr	r0, [r7, #28]
 800c720:	f7fe fc46 	bl	800afb0 <tcp_abort>
            goto aborted;
 800c724:	e091      	b.n	800c84a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00c      	beq.n	800c74a <tcp_input+0x656>
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	6918      	ldr	r0, [r3, #16]
 800c73a:	4b39      	ldr	r3, [pc, #228]	@ (800c820 <tcp_input+0x72c>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	2300      	movs	r3, #0
 800c740:	69f9      	ldr	r1, [r7, #28]
 800c742:	47a0      	blx	r4
 800c744:	4603      	mov	r3, r0
 800c746:	74fb      	strb	r3, [r7, #19]
 800c748:	e008      	b.n	800c75c <tcp_input+0x668>
 800c74a:	4b35      	ldr	r3, [pc, #212]	@ (800c820 <tcp_input+0x72c>)
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	69f9      	ldr	r1, [r7, #28]
 800c752:	2000      	movs	r0, #0
 800c754:	f7ff f95e 	bl	800ba14 <tcp_recv_null>
 800c758:	4603      	mov	r3, r0
 800c75a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c75c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c760:	f113 0f0d 	cmn.w	r3, #13
 800c764:	d053      	beq.n	800c80e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c766:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d003      	beq.n	800c776 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c76e:	4b2c      	ldr	r3, [pc, #176]	@ (800c820 <tcp_input+0x72c>)
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c776:	4b2b      	ldr	r3, [pc, #172]	@ (800c824 <tcp_input+0x730>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	f003 0320 	and.w	r3, r3, #32
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d030      	beq.n	800c7e4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c786:	2b00      	cmp	r3, #0
 800c788:	d009      	beq.n	800c79e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c78e:	7b5a      	ldrb	r2, [r3, #13]
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c794:	f042 0220 	orr.w	r2, r2, #32
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	735a      	strb	r2, [r3, #13]
 800c79c:	e022      	b.n	800c7e4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7a2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c7a6:	d005      	beq.n	800c7b4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <tcp_input+0x6e2>
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	6918      	ldr	r0, [r3, #16]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	69f9      	ldr	r1, [r7, #28]
 800c7ce:	47a0      	blx	r4
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	74fb      	strb	r3, [r7, #19]
 800c7d4:	e001      	b.n	800c7da <tcp_input+0x6e6>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c7da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7de:	f113 0f0d 	cmn.w	r3, #13
 800c7e2:	d016      	beq.n	800c812 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c7e4:	4b13      	ldr	r3, [pc, #76]	@ (800c834 <tcp_input+0x740>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c7ea:	69f8      	ldr	r0, [r7, #28]
 800c7ec:	f000 f88e 	bl	800c90c <tcp_input_delayed_close>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d128      	bne.n	800c848 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c7f6:	69f8      	ldr	r0, [r7, #28]
 800c7f8:	f002 fac2 	bl	800ed80 <tcp_output>
 800c7fc:	e025      	b.n	800c84a <tcp_input+0x756>
        goto aborted;
 800c7fe:	bf00      	nop
 800c800:	e023      	b.n	800c84a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c802:	bf00      	nop
 800c804:	e021      	b.n	800c84a <tcp_input+0x756>
              goto aborted;
 800c806:	bf00      	nop
 800c808:	e01f      	b.n	800c84a <tcp_input+0x756>
          goto aborted;
 800c80a:	bf00      	nop
 800c80c:	e01d      	b.n	800c84a <tcp_input+0x756>
            goto aborted;
 800c80e:	bf00      	nop
 800c810:	e01b      	b.n	800c84a <tcp_input+0x756>
              goto aborted;
 800c812:	bf00      	nop
 800c814:	e019      	b.n	800c84a <tcp_input+0x756>
 800c816:	bf00      	nop
 800c818:	2401c680 	.word	0x2401c680
 800c81c:	2401c690 	.word	0x2401c690
 800c820:	2401c6b0 	.word	0x2401c6b0
 800c824:	2401c6ad 	.word	0x2401c6ad
 800c828:	2401c6a8 	.word	0x2401c6a8
 800c82c:	2401c6ac 	.word	0x2401c6ac
 800c830:	2401c6aa 	.word	0x2401c6aa
 800c834:	2401c6b4 	.word	0x2401c6b4
 800c838:	2401c674 	.word	0x2401c674
 800c83c:	08014148 	.word	0x08014148
 800c840:	08014328 	.word	0x08014328
 800c844:	080141c0 	.word	0x080141c0
          goto aborted;
 800c848:	bf00      	nop
    tcp_input_pcb = NULL;
 800c84a:	4b27      	ldr	r3, [pc, #156]	@ (800c8e8 <tcp_input+0x7f4>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c850:	4b26      	ldr	r3, [pc, #152]	@ (800c8ec <tcp_input+0x7f8>)
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c856:	4b26      	ldr	r3, [pc, #152]	@ (800c8f0 <tcp_input+0x7fc>)
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d03f      	beq.n	800c8de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c85e:	4b24      	ldr	r3, [pc, #144]	@ (800c8f0 <tcp_input+0x7fc>)
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	4618      	mov	r0, r3
 800c864:	f7fd fc32 	bl	800a0cc <pbuf_free>
      inseg.p = NULL;
 800c868:	4b21      	ldr	r3, [pc, #132]	@ (800c8f0 <tcp_input+0x7fc>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c86e:	e036      	b.n	800c8de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c870:	4b20      	ldr	r3, [pc, #128]	@ (800c8f4 <tcp_input+0x800>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	b29b      	uxth	r3, r3
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f9 fd29 	bl	80062d0 <lwip_htons>
 800c87e:	4603      	mov	r3, r0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	f003 0304 	and.w	r3, r3, #4
 800c886:	2b00      	cmp	r3, #0
 800c888:	d118      	bne.n	800c8bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c88a:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f8 <tcp_input+0x804>)
 800c88c:	6819      	ldr	r1, [r3, #0]
 800c88e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8fc <tcp_input+0x808>)
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	4b1a      	ldr	r3, [pc, #104]	@ (800c900 <tcp_input+0x80c>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c89a:	4b16      	ldr	r3, [pc, #88]	@ (800c8f4 <tcp_input+0x800>)
 800c89c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c89e:	885b      	ldrh	r3, [r3, #2]
 800c8a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8a2:	4a14      	ldr	r2, [pc, #80]	@ (800c8f4 <tcp_input+0x800>)
 800c8a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8a6:	8812      	ldrh	r2, [r2, #0]
 800c8a8:	b292      	uxth	r2, r2
 800c8aa:	9202      	str	r2, [sp, #8]
 800c8ac:	9301      	str	r3, [sp, #4]
 800c8ae:	4b15      	ldr	r3, [pc, #84]	@ (800c904 <tcp_input+0x810>)
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	4b15      	ldr	r3, [pc, #84]	@ (800c908 <tcp_input+0x814>)
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	f003 f816 	bl	800f8e8 <tcp_rst>
    pbuf_free(p);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7fd fc05 	bl	800a0cc <pbuf_free>
  return;
 800c8c2:	e00c      	b.n	800c8de <tcp_input+0x7ea>
    goto dropped;
 800c8c4:	bf00      	nop
 800c8c6:	e006      	b.n	800c8d6 <tcp_input+0x7e2>
    goto dropped;
 800c8c8:	bf00      	nop
 800c8ca:	e004      	b.n	800c8d6 <tcp_input+0x7e2>
    goto dropped;
 800c8cc:	bf00      	nop
 800c8ce:	e002      	b.n	800c8d6 <tcp_input+0x7e2>
      goto dropped;
 800c8d0:	bf00      	nop
 800c8d2:	e000      	b.n	800c8d6 <tcp_input+0x7e2>
      goto dropped;
 800c8d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7fd fbf8 	bl	800a0cc <pbuf_free>
 800c8dc:	e000      	b.n	800c8e0 <tcp_input+0x7ec>
  return;
 800c8de:	bf00      	nop
}
 800c8e0:	3724      	adds	r7, #36	@ 0x24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd90      	pop	{r4, r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	2401c6b4 	.word	0x2401c6b4
 800c8ec:	2401c6b0 	.word	0x2401c6b0
 800c8f0:	2401c680 	.word	0x2401c680
 800c8f4:	2401c690 	.word	0x2401c690
 800c8f8:	2401c6a4 	.word	0x2401c6a4
 800c8fc:	2401c6aa 	.word	0x2401c6aa
 800c900:	2401c6a0 	.word	0x2401c6a0
 800c904:	24000424 	.word	0x24000424
 800c908:	24000428 	.word	0x24000428

0800c90c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d106      	bne.n	800c928 <tcp_input_delayed_close+0x1c>
 800c91a:	4b17      	ldr	r3, [pc, #92]	@ (800c978 <tcp_input_delayed_close+0x6c>)
 800c91c:	f240 225a 	movw	r2, #602	@ 0x25a
 800c920:	4916      	ldr	r1, [pc, #88]	@ (800c97c <tcp_input_delayed_close+0x70>)
 800c922:	4817      	ldr	r0, [pc, #92]	@ (800c980 <tcp_input_delayed_close+0x74>)
 800c924:	f004 fc50 	bl	80111c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c928:	4b16      	ldr	r3, [pc, #88]	@ (800c984 <tcp_input_delayed_close+0x78>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	f003 0310 	and.w	r3, r3, #16
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01c      	beq.n	800c96e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8b5b      	ldrh	r3, [r3, #26]
 800c938:	f003 0310 	and.w	r3, r3, #16
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10d      	bne.n	800c95c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c946:	2b00      	cmp	r3, #0
 800c948:	d008      	beq.n	800c95c <tcp_input_delayed_close+0x50>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	6912      	ldr	r2, [r2, #16]
 800c954:	f06f 010e 	mvn.w	r1, #14
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c95c:	6879      	ldr	r1, [r7, #4]
 800c95e:	480a      	ldr	r0, [pc, #40]	@ (800c988 <tcp_input_delayed_close+0x7c>)
 800c960:	f7ff fa50 	bl	800be04 <tcp_pcb_remove>
    tcp_free(pcb);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7fe f83b 	bl	800a9e0 <tcp_free>
    return 1;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e000      	b.n	800c970 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	08014148 	.word	0x08014148
 800c97c:	08014344 	.word	0x08014344
 800c980:	080141c0 	.word	0x080141c0
 800c984:	2401c6ad 	.word	0x2401c6ad
 800c988:	2401c674 	.word	0x2401c674

0800c98c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c98c:	b590      	push	{r4, r7, lr}
 800c98e:	b08b      	sub	sp, #44	@ 0x2c
 800c990:	af04      	add	r7, sp, #16
 800c992:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c994:	4b6f      	ldr	r3, [pc, #444]	@ (800cb54 <tcp_listen_input+0x1c8>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f040 80d2 	bne.w	800cb46 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <tcp_listen_input+0x2a>
 800c9a8:	4b6b      	ldr	r3, [pc, #428]	@ (800cb58 <tcp_listen_input+0x1cc>)
 800c9aa:	f240 2281 	movw	r2, #641	@ 0x281
 800c9ae:	496b      	ldr	r1, [pc, #428]	@ (800cb5c <tcp_listen_input+0x1d0>)
 800c9b0:	486b      	ldr	r0, [pc, #428]	@ (800cb60 <tcp_listen_input+0x1d4>)
 800c9b2:	f004 fc09 	bl	80111c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c9b6:	4b67      	ldr	r3, [pc, #412]	@ (800cb54 <tcp_listen_input+0x1c8>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	f003 0310 	and.w	r3, r3, #16
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d019      	beq.n	800c9f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9c2:	4b68      	ldr	r3, [pc, #416]	@ (800cb64 <tcp_listen_input+0x1d8>)
 800c9c4:	6819      	ldr	r1, [r3, #0]
 800c9c6:	4b68      	ldr	r3, [pc, #416]	@ (800cb68 <tcp_listen_input+0x1dc>)
 800c9c8:	881b      	ldrh	r3, [r3, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4b67      	ldr	r3, [pc, #412]	@ (800cb6c <tcp_listen_input+0x1e0>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9d2:	4b67      	ldr	r3, [pc, #412]	@ (800cb70 <tcp_listen_input+0x1e4>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9d6:	885b      	ldrh	r3, [r3, #2]
 800c9d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9da:	4a65      	ldr	r2, [pc, #404]	@ (800cb70 <tcp_listen_input+0x1e4>)
 800c9dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9de:	8812      	ldrh	r2, [r2, #0]
 800c9e0:	b292      	uxth	r2, r2
 800c9e2:	9202      	str	r2, [sp, #8]
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	4b63      	ldr	r3, [pc, #396]	@ (800cb74 <tcp_listen_input+0x1e8>)
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	4b63      	ldr	r3, [pc, #396]	@ (800cb78 <tcp_listen_input+0x1ec>)
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f002 ff7a 	bl	800f8e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c9f4:	e0a9      	b.n	800cb4a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c9f6:	4b57      	ldr	r3, [pc, #348]	@ (800cb54 <tcp_listen_input+0x1c8>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80a3 	beq.w	800cb4a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	7d5b      	ldrb	r3, [r3, #21]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff f927 	bl	800bc5c <tcp_alloc>
 800ca0e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d111      	bne.n	800ca3a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00a      	beq.n	800ca34 <tcp_listen_input+0xa8>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	6910      	ldr	r0, [r2, #16]
 800ca26:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	4798      	blx	r3
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73bb      	strb	r3, [r7, #14]
      return;
 800ca32:	e08b      	b.n	800cb4c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca34:	23f0      	movs	r3, #240	@ 0xf0
 800ca36:	73bb      	strb	r3, [r7, #14]
      return;
 800ca38:	e088      	b.n	800cb4c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ca3a:	4b50      	ldr	r3, [pc, #320]	@ (800cb7c <tcp_listen_input+0x1f0>)
 800ca3c:	695a      	ldr	r2, [r3, #20]
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ca42:	4b4e      	ldr	r3, [pc, #312]	@ (800cb7c <tcp_listen_input+0x1f0>)
 800ca44:	691a      	ldr	r2, [r3, #16]
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	8ada      	ldrh	r2, [r3, #22]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ca52:	4b47      	ldr	r3, [pc, #284]	@ (800cb70 <tcp_listen_input+0x1e4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2203      	movs	r2, #3
 800ca62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ca64:	4b41      	ldr	r3, [pc, #260]	@ (800cb6c <tcp_listen_input+0x1e0>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ca76:	6978      	ldr	r0, [r7, #20]
 800ca78:	f7ff fa58 	bl	800bf2c <tcp_next_iss>
 800ca7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	693a      	ldr	r2, [r7, #16]
 800ca94:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ca96:	4b35      	ldr	r3, [pc, #212]	@ (800cb6c <tcp_listen_input+0x1e0>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	1e5a      	subs	r2, r3, #1
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	691a      	ldr	r2, [r3, #16]
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	7a5b      	ldrb	r3, [r3, #9]
 800cab2:	f003 030c 	and.w	r3, r3, #12
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7a1a      	ldrb	r2, [r3, #8]
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cac4:	4b2e      	ldr	r3, [pc, #184]	@ (800cb80 <tcp_listen_input+0x1f4>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	60da      	str	r2, [r3, #12]
 800cacc:	4a2c      	ldr	r2, [pc, #176]	@ (800cb80 <tcp_listen_input+0x1f4>)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	f003 fc3f 	bl	8010354 <tcp_timer_needed>
 800cad6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb84 <tcp_listen_input+0x1f8>)
 800cad8:	2201      	movs	r2, #1
 800cada:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cadc:	6978      	ldr	r0, [r7, #20]
 800cade:	f001 fd8b 	bl	800e5f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cae2:	4b23      	ldr	r3, [pc, #140]	@ (800cb70 <tcp_listen_input+0x1e4>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	89db      	ldrh	r3, [r3, #14]
 800cae8:	b29a      	uxth	r2, r3
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	3304      	adds	r3, #4
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fa feb9 	bl	800787c <ip4_route>
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	461a      	mov	r2, r3
 800cb12:	4620      	mov	r0, r4
 800cb14:	f7ff fa30 	bl	800bf78 <tcp_eff_send_mss_netif>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cb20:	2112      	movs	r1, #18
 800cb22:	6978      	ldr	r0, [r7, #20]
 800cb24:	f002 f83e 	bl	800eba4 <tcp_enqueue_flags>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cb2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d004      	beq.n	800cb3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cb34:	2100      	movs	r1, #0
 800cb36:	6978      	ldr	r0, [r7, #20]
 800cb38:	f7fe f97c 	bl	800ae34 <tcp_abandon>
      return;
 800cb3c:	e006      	b.n	800cb4c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cb3e:	6978      	ldr	r0, [r7, #20]
 800cb40:	f002 f91e 	bl	800ed80 <tcp_output>
  return;
 800cb44:	e001      	b.n	800cb4a <tcp_listen_input+0x1be>
    return;
 800cb46:	bf00      	nop
 800cb48:	e000      	b.n	800cb4c <tcp_listen_input+0x1c0>
  return;
 800cb4a:	bf00      	nop
}
 800cb4c:	371c      	adds	r7, #28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd90      	pop	{r4, r7, pc}
 800cb52:	bf00      	nop
 800cb54:	2401c6ac 	.word	0x2401c6ac
 800cb58:	08014148 	.word	0x08014148
 800cb5c:	0801436c 	.word	0x0801436c
 800cb60:	080141c0 	.word	0x080141c0
 800cb64:	2401c6a4 	.word	0x2401c6a4
 800cb68:	2401c6aa 	.word	0x2401c6aa
 800cb6c:	2401c6a0 	.word	0x2401c6a0
 800cb70:	2401c690 	.word	0x2401c690
 800cb74:	24000424 	.word	0x24000424
 800cb78:	24000428 	.word	0x24000428
 800cb7c:	24000414 	.word	0x24000414
 800cb80:	2401c674 	.word	0x2401c674
 800cb84:	2401c67c 	.word	0x2401c67c

0800cb88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af04      	add	r7, sp, #16
 800cb8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cb90:	4b2f      	ldr	r3, [pc, #188]	@ (800cc50 <tcp_timewait_input+0xc8>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d153      	bne.n	800cc44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_timewait_input+0x28>
 800cba2:	4b2c      	ldr	r3, [pc, #176]	@ (800cc54 <tcp_timewait_input+0xcc>)
 800cba4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cba8:	492b      	ldr	r1, [pc, #172]	@ (800cc58 <tcp_timewait_input+0xd0>)
 800cbaa:	482c      	ldr	r0, [pc, #176]	@ (800cc5c <tcp_timewait_input+0xd4>)
 800cbac:	f004 fb0c 	bl	80111c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cbb0:	4b27      	ldr	r3, [pc, #156]	@ (800cc50 <tcp_timewait_input+0xc8>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	f003 0302 	and.w	r3, r3, #2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d02a      	beq.n	800cc12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cbbc:	4b28      	ldr	r3, [pc, #160]	@ (800cc60 <tcp_timewait_input+0xd8>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	db2d      	blt.n	800cc26 <tcp_timewait_input+0x9e>
 800cbca:	4b25      	ldr	r3, [pc, #148]	@ (800cc60 <tcp_timewait_input+0xd8>)
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd2:	6879      	ldr	r1, [r7, #4]
 800cbd4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cbd6:	440b      	add	r3, r1
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dc23      	bgt.n	800cc26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbde:	4b21      	ldr	r3, [pc, #132]	@ (800cc64 <tcp_timewait_input+0xdc>)
 800cbe0:	6819      	ldr	r1, [r3, #0]
 800cbe2:	4b21      	ldr	r3, [pc, #132]	@ (800cc68 <tcp_timewait_input+0xe0>)
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4b1d      	ldr	r3, [pc, #116]	@ (800cc60 <tcp_timewait_input+0xd8>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbee:	4b1f      	ldr	r3, [pc, #124]	@ (800cc6c <tcp_timewait_input+0xe4>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbf2:	885b      	ldrh	r3, [r3, #2]
 800cbf4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbf6:	4a1d      	ldr	r2, [pc, #116]	@ (800cc6c <tcp_timewait_input+0xe4>)
 800cbf8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	b292      	uxth	r2, r2
 800cbfe:	9202      	str	r2, [sp, #8]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	4b1b      	ldr	r3, [pc, #108]	@ (800cc70 <tcp_timewait_input+0xe8>)
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	4b1b      	ldr	r3, [pc, #108]	@ (800cc74 <tcp_timewait_input+0xec>)
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f002 fe6c 	bl	800f8e8 <tcp_rst>
      return;
 800cc10:	e01b      	b.n	800cc4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cc12:	4b0f      	ldr	r3, [pc, #60]	@ (800cc50 <tcp_timewait_input+0xc8>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	f003 0301 	and.w	r3, r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cc1e:	4b16      	ldr	r3, [pc, #88]	@ (800cc78 <tcp_timewait_input+0xf0>)
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cc26:	4b10      	ldr	r3, [pc, #64]	@ (800cc68 <tcp_timewait_input+0xe0>)
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00c      	beq.n	800cc48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	8b5b      	ldrh	r3, [r3, #26]
 800cc32:	f043 0302 	orr.w	r3, r3, #2
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f002 f89f 	bl	800ed80 <tcp_output>
  }
  return;
 800cc42:	e001      	b.n	800cc48 <tcp_timewait_input+0xc0>
    return;
 800cc44:	bf00      	nop
 800cc46:	e000      	b.n	800cc4a <tcp_timewait_input+0xc2>
  return;
 800cc48:	bf00      	nop
}
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	2401c6ac 	.word	0x2401c6ac
 800cc54:	08014148 	.word	0x08014148
 800cc58:	0801438c 	.word	0x0801438c
 800cc5c:	080141c0 	.word	0x080141c0
 800cc60:	2401c6a0 	.word	0x2401c6a0
 800cc64:	2401c6a4 	.word	0x2401c6a4
 800cc68:	2401c6aa 	.word	0x2401c6aa
 800cc6c:	2401c690 	.word	0x2401c690
 800cc70:	24000424 	.word	0x24000424
 800cc74:	24000428 	.word	0x24000428
 800cc78:	2401c668 	.word	0x2401c668

0800cc7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cc7c:	b590      	push	{r4, r7, lr}
 800cc7e:	b08d      	sub	sp, #52	@ 0x34
 800cc80:	af04      	add	r7, sp, #16
 800cc82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <tcp_process+0x24>
 800cc92:	4b9d      	ldr	r3, [pc, #628]	@ (800cf08 <tcp_process+0x28c>)
 800cc94:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cc98:	499c      	ldr	r1, [pc, #624]	@ (800cf0c <tcp_process+0x290>)
 800cc9a:	489d      	ldr	r0, [pc, #628]	@ (800cf10 <tcp_process+0x294>)
 800cc9c:	f004 fa94 	bl	80111c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cca0:	4b9c      	ldr	r3, [pc, #624]	@ (800cf14 <tcp_process+0x298>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	f003 0304 	and.w	r3, r3, #4
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d04e      	beq.n	800cd4a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	7d1b      	ldrb	r3, [r3, #20]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d108      	bne.n	800ccc6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccb8:	4b97      	ldr	r3, [pc, #604]	@ (800cf18 <tcp_process+0x29c>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d123      	bne.n	800cd08 <tcp_process+0x8c>
        acceptable = 1;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	76fb      	strb	r3, [r7, #27]
 800ccc4:	e020      	b.n	800cd08 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccca:	4b94      	ldr	r3, [pc, #592]	@ (800cf1c <tcp_process+0x2a0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d102      	bne.n	800ccd8 <tcp_process+0x5c>
        acceptable = 1;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	76fb      	strb	r3, [r7, #27]
 800ccd6:	e017      	b.n	800cd08 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ccd8:	4b90      	ldr	r3, [pc, #576]	@ (800cf1c <tcp_process+0x2a0>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	db10      	blt.n	800cd08 <tcp_process+0x8c>
 800cce6:	4b8d      	ldr	r3, [pc, #564]	@ (800cf1c <tcp_process+0x2a0>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ccf2:	440b      	add	r3, r1
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dc06      	bgt.n	800cd08 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	8b5b      	ldrh	r3, [r3, #26]
 800ccfe:	f043 0302 	orr.w	r3, r3, #2
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cd08:	7efb      	ldrb	r3, [r7, #27]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d01b      	beq.n	800cd46 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7d1b      	ldrb	r3, [r3, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d106      	bne.n	800cd24 <tcp_process+0xa8>
 800cd16:	4b7c      	ldr	r3, [pc, #496]	@ (800cf08 <tcp_process+0x28c>)
 800cd18:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800cd1c:	4980      	ldr	r1, [pc, #512]	@ (800cf20 <tcp_process+0x2a4>)
 800cd1e:	487c      	ldr	r0, [pc, #496]	@ (800cf10 <tcp_process+0x294>)
 800cd20:	f004 fa52 	bl	80111c8 <iprintf>
      recv_flags |= TF_RESET;
 800cd24:	4b7f      	ldr	r3, [pc, #508]	@ (800cf24 <tcp_process+0x2a8>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f043 0308 	orr.w	r3, r3, #8
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	4b7d      	ldr	r3, [pc, #500]	@ (800cf24 <tcp_process+0x2a8>)
 800cd30:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	8b5b      	ldrh	r3, [r3, #26]
 800cd36:	f023 0301 	bic.w	r3, r3, #1
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cd40:	f06f 030d 	mvn.w	r3, #13
 800cd44:	e37a      	b.n	800d43c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	e378      	b.n	800d43c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cd4a:	4b72      	ldr	r3, [pc, #456]	@ (800cf14 <tcp_process+0x298>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f003 0302 	and.w	r3, r3, #2
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d010      	beq.n	800cd78 <tcp_process+0xfc>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7d1b      	ldrb	r3, [r3, #20]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d00c      	beq.n	800cd78 <tcp_process+0xfc>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	7d1b      	ldrb	r3, [r3, #20]
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d008      	beq.n	800cd78 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	8b5b      	ldrh	r3, [r3, #26]
 800cd6a:	f043 0302 	orr.w	r3, r3, #2
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e361      	b.n	800d43c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8b5b      	ldrh	r3, [r3, #26]
 800cd7c:	f003 0310 	and.w	r3, r3, #16
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cd84:	4b68      	ldr	r3, [pc, #416]	@ (800cf28 <tcp_process+0x2ac>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f001 fc2b 	bl	800e5f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	7d1b      	ldrb	r3, [r3, #20]
 800cda6:	3b02      	subs	r3, #2
 800cda8:	2b07      	cmp	r3, #7
 800cdaa:	f200 8337 	bhi.w	800d41c <tcp_process+0x7a0>
 800cdae:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb4 <tcp_process+0x138>)
 800cdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb4:	0800cdd5 	.word	0x0800cdd5
 800cdb8:	0800d005 	.word	0x0800d005
 800cdbc:	0800d17d 	.word	0x0800d17d
 800cdc0:	0800d1a7 	.word	0x0800d1a7
 800cdc4:	0800d2cb 	.word	0x0800d2cb
 800cdc8:	0800d17d 	.word	0x0800d17d
 800cdcc:	0800d357 	.word	0x0800d357
 800cdd0:	0800d3e7 	.word	0x0800d3e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cdd4:	4b4f      	ldr	r3, [pc, #316]	@ (800cf14 <tcp_process+0x298>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	f003 0310 	and.w	r3, r3, #16
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 80e4 	beq.w	800cfaa <tcp_process+0x32e>
 800cde2:	4b4c      	ldr	r3, [pc, #304]	@ (800cf14 <tcp_process+0x298>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 80dd 	beq.w	800cfaa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	4b48      	ldr	r3, [pc, #288]	@ (800cf18 <tcp_process+0x29c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	f040 80d5 	bne.w	800cfaa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ce00:	4b46      	ldr	r3, [pc, #280]	@ (800cf1c <tcp_process+0x2a0>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ce12:	4b41      	ldr	r3, [pc, #260]	@ (800cf18 <tcp_process+0x29c>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ce1a:	4b44      	ldr	r3, [pc, #272]	@ (800cf2c <tcp_process+0x2b0>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	89db      	ldrh	r3, [r3, #14]
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ce34:	4b39      	ldr	r3, [pc, #228]	@ (800cf1c <tcp_process+0x2a0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	1e5a      	subs	r2, r3, #1
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2204      	movs	r2, #4
 800ce42:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fa fd15 	bl	800787c <ip4_route>
 800ce52:	4601      	mov	r1, r0
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3304      	adds	r3, #4
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f7ff f88c 	bl	800bf78 <tcp_eff_send_mss_netif>
 800ce60:	4603      	mov	r3, r0
 800ce62:	461a      	mov	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce6c:	009a      	lsls	r2, r3, #2
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ce78:	428b      	cmp	r3, r1
 800ce7a:	bf38      	it	cc
 800ce7c:	460b      	movcc	r3, r1
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d204      	bcs.n	800ce8c <tcp_process+0x210>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	e00d      	b.n	800cea8 <tcp_process+0x22c>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d904      	bls.n	800cea4 <tcp_process+0x228>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	e001      	b.n	800cea8 <tcp_process+0x22c>
 800cea4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <tcp_process+0x24a>
 800ceb8:	4b13      	ldr	r3, [pc, #76]	@ (800cf08 <tcp_process+0x28c>)
 800ceba:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800cebe:	491c      	ldr	r1, [pc, #112]	@ (800cf30 <tcp_process+0x2b4>)
 800cec0:	4813      	ldr	r0, [pc, #76]	@ (800cf10 <tcp_process+0x294>)
 800cec2:	f004 f981 	bl	80111c8 <iprintf>
        --pcb->snd_queuelen;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cecc:	3b01      	subs	r3, #1
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceda:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d12a      	bne.n	800cf38 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cee6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d106      	bne.n	800cefc <tcp_process+0x280>
 800ceee:	4b06      	ldr	r3, [pc, #24]	@ (800cf08 <tcp_process+0x28c>)
 800cef0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800cef4:	490f      	ldr	r1, [pc, #60]	@ (800cf34 <tcp_process+0x2b8>)
 800cef6:	4806      	ldr	r0, [pc, #24]	@ (800cf10 <tcp_process+0x294>)
 800cef8:	f004 f966 	bl	80111c8 <iprintf>
          pcb->unsent = rseg->next;
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cf04:	e01c      	b.n	800cf40 <tcp_process+0x2c4>
 800cf06:	bf00      	nop
 800cf08:	08014148 	.word	0x08014148
 800cf0c:	080143ac 	.word	0x080143ac
 800cf10:	080141c0 	.word	0x080141c0
 800cf14:	2401c6ac 	.word	0x2401c6ac
 800cf18:	2401c6a4 	.word	0x2401c6a4
 800cf1c:	2401c6a0 	.word	0x2401c6a0
 800cf20:	080143c8 	.word	0x080143c8
 800cf24:	2401c6ad 	.word	0x2401c6ad
 800cf28:	2401c668 	.word	0x2401c668
 800cf2c:	2401c690 	.word	0x2401c690
 800cf30:	080143e8 	.word	0x080143e8
 800cf34:	08014400 	.word	0x08014400
        } else {
          pcb->unacked = rseg->next;
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800cf40:	69f8      	ldr	r0, [r7, #28]
 800cf42:	f7fe fd22 	bl	800b98a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d104      	bne.n	800cf58 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf54:	861a      	strh	r2, [r3, #48]	@ 0x30
 800cf56:	e006      	b.n	800cf66 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00a      	beq.n	800cf86 <tcp_process+0x30a>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6910      	ldr	r0, [r2, #16]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	4798      	blx	r3
 800cf80:	4603      	mov	r3, r0
 800cf82:	76bb      	strb	r3, [r7, #26]
 800cf84:	e001      	b.n	800cf8a <tcp_process+0x30e>
 800cf86:	2300      	movs	r3, #0
 800cf88:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800cf8a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cf8e:	f113 0f0d 	cmn.w	r3, #13
 800cf92:	d102      	bne.n	800cf9a <tcp_process+0x31e>
          return ERR_ABRT;
 800cf94:	f06f 030c 	mvn.w	r3, #12
 800cf98:	e250      	b.n	800d43c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	8b5b      	ldrh	r3, [r3, #26]
 800cf9e:	f043 0302 	orr.w	r3, r3, #2
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cfa8:	e23a      	b.n	800d420 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cfaa:	4b98      	ldr	r3, [pc, #608]	@ (800d20c <tcp_process+0x590>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	f003 0310 	and.w	r3, r3, #16
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 8234 	beq.w	800d420 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfb8:	4b95      	ldr	r3, [pc, #596]	@ (800d210 <tcp_process+0x594>)
 800cfba:	6819      	ldr	r1, [r3, #0]
 800cfbc:	4b95      	ldr	r3, [pc, #596]	@ (800d214 <tcp_process+0x598>)
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	4b95      	ldr	r3, [pc, #596]	@ (800d218 <tcp_process+0x59c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfc8:	4b94      	ldr	r3, [pc, #592]	@ (800d21c <tcp_process+0x5a0>)
 800cfca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfcc:	885b      	ldrh	r3, [r3, #2]
 800cfce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfd0:	4a92      	ldr	r2, [pc, #584]	@ (800d21c <tcp_process+0x5a0>)
 800cfd2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfd4:	8812      	ldrh	r2, [r2, #0]
 800cfd6:	b292      	uxth	r2, r2
 800cfd8:	9202      	str	r2, [sp, #8]
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	4b90      	ldr	r3, [pc, #576]	@ (800d220 <tcp_process+0x5a4>)
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	4b90      	ldr	r3, [pc, #576]	@ (800d224 <tcp_process+0x5a8>)
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f002 fc7f 	bl	800f8e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cff0:	2b05      	cmp	r3, #5
 800cff2:	f200 8215 	bhi.w	800d420 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f002 fa4b 	bl	800f498 <tcp_rexmit_rto>
      break;
 800d002:	e20d      	b.n	800d420 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d004:	4b81      	ldr	r3, [pc, #516]	@ (800d20c <tcp_process+0x590>)
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	f003 0310 	and.w	r3, r3, #16
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80a1 	beq.w	800d154 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d012:	4b7f      	ldr	r3, [pc, #508]	@ (800d210 <tcp_process+0x594>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	3b01      	subs	r3, #1
 800d01e:	2b00      	cmp	r3, #0
 800d020:	db7e      	blt.n	800d120 <tcp_process+0x4a4>
 800d022:	4b7b      	ldr	r3, [pc, #492]	@ (800d210 <tcp_process+0x594>)
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dc77      	bgt.n	800d120 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2204      	movs	r2, #4
 800d034:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d102      	bne.n	800d044 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d03e:	23fa      	movs	r3, #250	@ 0xfa
 800d040:	76bb      	strb	r3, [r7, #26]
 800d042:	e01d      	b.n	800d080 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d106      	bne.n	800d05c <tcp_process+0x3e0>
 800d04e:	4b76      	ldr	r3, [pc, #472]	@ (800d228 <tcp_process+0x5ac>)
 800d050:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d054:	4975      	ldr	r1, [pc, #468]	@ (800d22c <tcp_process+0x5b0>)
 800d056:	4876      	ldr	r0, [pc, #472]	@ (800d230 <tcp_process+0x5b4>)
 800d058:	f004 f8b6 	bl	80111c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <tcp_process+0x400>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	6910      	ldr	r0, [r2, #16]
 800d070:	2200      	movs	r2, #0
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4798      	blx	r3
 800d076:	4603      	mov	r3, r0
 800d078:	76bb      	strb	r3, [r7, #26]
 800d07a:	e001      	b.n	800d080 <tcp_process+0x404>
 800d07c:	23f0      	movs	r3, #240	@ 0xf0
 800d07e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d080:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00a      	beq.n	800d09e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d088:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d08c:	f113 0f0d 	cmn.w	r3, #13
 800d090:	d002      	beq.n	800d098 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7fd ff8c 	bl	800afb0 <tcp_abort>
            }
            return ERR_ABRT;
 800d098:	f06f 030c 	mvn.w	r3, #12
 800d09c:	e1ce      	b.n	800d43c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 fae0 	bl	800d664 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d0a4:	4b63      	ldr	r3, [pc, #396]	@ (800d234 <tcp_process+0x5b8>)
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <tcp_process+0x43c>
            recv_acked--;
 800d0ac:	4b61      	ldr	r3, [pc, #388]	@ (800d234 <tcp_process+0x5b8>)
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	4b5f      	ldr	r3, [pc, #380]	@ (800d234 <tcp_process+0x5b8>)
 800d0b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0bc:	009a      	lsls	r2, r3, #2
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d0c8:	428b      	cmp	r3, r1
 800d0ca:	bf38      	it	cc
 800d0cc:	460b      	movcc	r3, r1
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d204      	bcs.n	800d0dc <tcp_process+0x460>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	e00d      	b.n	800d0f8 <tcp_process+0x47c>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d904      	bls.n	800d0f4 <tcp_process+0x478>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	e001      	b.n	800d0f8 <tcp_process+0x47c>
 800d0f4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d0fe:	4b4e      	ldr	r3, [pc, #312]	@ (800d238 <tcp_process+0x5bc>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f003 0320 	and.w	r3, r3, #32
 800d106:	2b00      	cmp	r3, #0
 800d108:	d037      	beq.n	800d17a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	8b5b      	ldrh	r3, [r3, #26]
 800d10e:	f043 0302 	orr.w	r3, r3, #2
 800d112:	b29a      	uxth	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2207      	movs	r2, #7
 800d11c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d11e:	e02c      	b.n	800d17a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d120:	4b3b      	ldr	r3, [pc, #236]	@ (800d210 <tcp_process+0x594>)
 800d122:	6819      	ldr	r1, [r3, #0]
 800d124:	4b3b      	ldr	r3, [pc, #236]	@ (800d214 <tcp_process+0x598>)
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	461a      	mov	r2, r3
 800d12a:	4b3b      	ldr	r3, [pc, #236]	@ (800d218 <tcp_process+0x59c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d130:	4b3a      	ldr	r3, [pc, #232]	@ (800d21c <tcp_process+0x5a0>)
 800d132:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d134:	885b      	ldrh	r3, [r3, #2]
 800d136:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d138:	4a38      	ldr	r2, [pc, #224]	@ (800d21c <tcp_process+0x5a0>)
 800d13a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d13c:	8812      	ldrh	r2, [r2, #0]
 800d13e:	b292      	uxth	r2, r2
 800d140:	9202      	str	r2, [sp, #8]
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	4b36      	ldr	r3, [pc, #216]	@ (800d220 <tcp_process+0x5a4>)
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4b36      	ldr	r3, [pc, #216]	@ (800d224 <tcp_process+0x5a8>)
 800d14a:	4602      	mov	r2, r0
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f002 fbcb 	bl	800f8e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d152:	e167      	b.n	800d424 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d154:	4b2d      	ldr	r3, [pc, #180]	@ (800d20c <tcp_process+0x590>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	f003 0302 	and.w	r3, r3, #2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 8161 	beq.w	800d424 <tcp_process+0x7a8>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d166:	1e5a      	subs	r2, r3, #1
 800d168:	4b2b      	ldr	r3, [pc, #172]	@ (800d218 <tcp_process+0x59c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	f040 8159 	bne.w	800d424 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f002 f9b2 	bl	800f4dc <tcp_rexmit>
      break;
 800d178:	e154      	b.n	800d424 <tcp_process+0x7a8>
 800d17a:	e153      	b.n	800d424 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fa71 	bl	800d664 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d182:	4b2d      	ldr	r3, [pc, #180]	@ (800d238 <tcp_process+0x5bc>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	f003 0320 	and.w	r3, r3, #32
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 814c 	beq.w	800d428 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8b5b      	ldrh	r3, [r3, #26]
 800d194:	f043 0302 	orr.w	r3, r3, #2
 800d198:	b29a      	uxth	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2207      	movs	r2, #7
 800d1a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d1a4:	e140      	b.n	800d428 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fa5c 	bl	800d664 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d1ac:	4b22      	ldr	r3, [pc, #136]	@ (800d238 <tcp_process+0x5bc>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	f003 0320 	and.w	r3, r3, #32
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d071      	beq.n	800d29c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1b8:	4b14      	ldr	r3, [pc, #80]	@ (800d20c <tcp_process+0x590>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f003 0310 	and.w	r3, r3, #16
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d060      	beq.n	800d286 <tcp_process+0x60a>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1c8:	4b11      	ldr	r3, [pc, #68]	@ (800d210 <tcp_process+0x594>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d15a      	bne.n	800d286 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d156      	bne.n	800d286 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	8b5b      	ldrh	r3, [r3, #26]
 800d1dc:	f043 0302 	orr.w	r3, r3, #2
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7fe fdbc 	bl	800bd64 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d1ec:	4b13      	ldr	r3, [pc, #76]	@ (800d23c <tcp_process+0x5c0>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d105      	bne.n	800d202 <tcp_process+0x586>
 800d1f6:	4b11      	ldr	r3, [pc, #68]	@ (800d23c <tcp_process+0x5c0>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	4a0f      	ldr	r2, [pc, #60]	@ (800d23c <tcp_process+0x5c0>)
 800d1fe:	6013      	str	r3, [r2, #0]
 800d200:	e02e      	b.n	800d260 <tcp_process+0x5e4>
 800d202:	4b0e      	ldr	r3, [pc, #56]	@ (800d23c <tcp_process+0x5c0>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	617b      	str	r3, [r7, #20]
 800d208:	e027      	b.n	800d25a <tcp_process+0x5de>
 800d20a:	bf00      	nop
 800d20c:	2401c6ac 	.word	0x2401c6ac
 800d210:	2401c6a4 	.word	0x2401c6a4
 800d214:	2401c6aa 	.word	0x2401c6aa
 800d218:	2401c6a0 	.word	0x2401c6a0
 800d21c:	2401c690 	.word	0x2401c690
 800d220:	24000424 	.word	0x24000424
 800d224:	24000428 	.word	0x24000428
 800d228:	08014148 	.word	0x08014148
 800d22c:	08014414 	.word	0x08014414
 800d230:	080141c0 	.word	0x080141c0
 800d234:	2401c6a8 	.word	0x2401c6a8
 800d238:	2401c6ad 	.word	0x2401c6ad
 800d23c:	2401c674 	.word	0x2401c674
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	429a      	cmp	r2, r3
 800d248:	d104      	bne.n	800d254 <tcp_process+0x5d8>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68da      	ldr	r2, [r3, #12]
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	60da      	str	r2, [r3, #12]
 800d252:	e005      	b.n	800d260 <tcp_process+0x5e4>
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1ef      	bne.n	800d240 <tcp_process+0x5c4>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	60da      	str	r2, [r3, #12]
 800d266:	4b77      	ldr	r3, [pc, #476]	@ (800d444 <tcp_process+0x7c8>)
 800d268:	2201      	movs	r2, #1
 800d26a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	220a      	movs	r2, #10
 800d270:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d272:	4b75      	ldr	r3, [pc, #468]	@ (800d448 <tcp_process+0x7cc>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	60da      	str	r2, [r3, #12]
 800d27a:	4a73      	ldr	r2, [pc, #460]	@ (800d448 <tcp_process+0x7cc>)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	f003 f868 	bl	8010354 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d284:	e0d2      	b.n	800d42c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	8b5b      	ldrh	r3, [r3, #26]
 800d28a:	f043 0302 	orr.w	r3, r3, #2
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2208      	movs	r2, #8
 800d298:	751a      	strb	r2, [r3, #20]
      break;
 800d29a:	e0c7      	b.n	800d42c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d29c:	4b6b      	ldr	r3, [pc, #428]	@ (800d44c <tcp_process+0x7d0>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 80c1 	beq.w	800d42c <tcp_process+0x7b0>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d2ae:	4b68      	ldr	r3, [pc, #416]	@ (800d450 <tcp_process+0x7d4>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	f040 80ba 	bne.w	800d42c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f040 80b5 	bne.w	800d42c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2206      	movs	r2, #6
 800d2c6:	751a      	strb	r2, [r3, #20]
      break;
 800d2c8:	e0b0      	b.n	800d42c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f9ca 	bl	800d664 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d2d0:	4b60      	ldr	r3, [pc, #384]	@ (800d454 <tcp_process+0x7d8>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	f003 0320 	and.w	r3, r3, #32
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 80a9 	beq.w	800d430 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	8b5b      	ldrh	r3, [r3, #26]
 800d2e2:	f043 0302 	orr.w	r3, r3, #2
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7fe fd39 	bl	800bd64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d2f2:	4b59      	ldr	r3, [pc, #356]	@ (800d458 <tcp_process+0x7dc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d105      	bne.n	800d308 <tcp_process+0x68c>
 800d2fc:	4b56      	ldr	r3, [pc, #344]	@ (800d458 <tcp_process+0x7dc>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	4a55      	ldr	r2, [pc, #340]	@ (800d458 <tcp_process+0x7dc>)
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	e013      	b.n	800d330 <tcp_process+0x6b4>
 800d308:	4b53      	ldr	r3, [pc, #332]	@ (800d458 <tcp_process+0x7dc>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	613b      	str	r3, [r7, #16]
 800d30e:	e00c      	b.n	800d32a <tcp_process+0x6ae>
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	429a      	cmp	r2, r3
 800d318:	d104      	bne.n	800d324 <tcp_process+0x6a8>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68da      	ldr	r2, [r3, #12]
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	60da      	str	r2, [r3, #12]
 800d322:	e005      	b.n	800d330 <tcp_process+0x6b4>
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	613b      	str	r3, [r7, #16]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1ef      	bne.n	800d310 <tcp_process+0x694>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	60da      	str	r2, [r3, #12]
 800d336:	4b43      	ldr	r3, [pc, #268]	@ (800d444 <tcp_process+0x7c8>)
 800d338:	2201      	movs	r2, #1
 800d33a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	220a      	movs	r2, #10
 800d340:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d342:	4b41      	ldr	r3, [pc, #260]	@ (800d448 <tcp_process+0x7cc>)
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	60da      	str	r2, [r3, #12]
 800d34a:	4a3f      	ldr	r2, [pc, #252]	@ (800d448 <tcp_process+0x7cc>)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6013      	str	r3, [r2, #0]
 800d350:	f003 f800 	bl	8010354 <tcp_timer_needed>
      }
      break;
 800d354:	e06c      	b.n	800d430 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f984 	bl	800d664 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d35c:	4b3b      	ldr	r3, [pc, #236]	@ (800d44c <tcp_process+0x7d0>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	2b00      	cmp	r3, #0
 800d366:	d065      	beq.n	800d434 <tcp_process+0x7b8>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d36c:	4b38      	ldr	r3, [pc, #224]	@ (800d450 <tcp_process+0x7d4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	d15f      	bne.n	800d434 <tcp_process+0x7b8>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d15b      	bne.n	800d434 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f7fe fcf1 	bl	800bd64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d382:	4b35      	ldr	r3, [pc, #212]	@ (800d458 <tcp_process+0x7dc>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d105      	bne.n	800d398 <tcp_process+0x71c>
 800d38c:	4b32      	ldr	r3, [pc, #200]	@ (800d458 <tcp_process+0x7dc>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	4a31      	ldr	r2, [pc, #196]	@ (800d458 <tcp_process+0x7dc>)
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	e013      	b.n	800d3c0 <tcp_process+0x744>
 800d398:	4b2f      	ldr	r3, [pc, #188]	@ (800d458 <tcp_process+0x7dc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e00c      	b.n	800d3ba <tcp_process+0x73e>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d104      	bne.n	800d3b4 <tcp_process+0x738>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68da      	ldr	r2, [r3, #12]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	60da      	str	r2, [r3, #12]
 800d3b2:	e005      	b.n	800d3c0 <tcp_process+0x744>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1ef      	bne.n	800d3a0 <tcp_process+0x724>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	60da      	str	r2, [r3, #12]
 800d3c6:	4b1f      	ldr	r3, [pc, #124]	@ (800d444 <tcp_process+0x7c8>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	220a      	movs	r2, #10
 800d3d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d3d2:	4b1d      	ldr	r3, [pc, #116]	@ (800d448 <tcp_process+0x7cc>)
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	60da      	str	r2, [r3, #12]
 800d3da:	4a1b      	ldr	r2, [pc, #108]	@ (800d448 <tcp_process+0x7cc>)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	f002 ffb8 	bl	8010354 <tcp_timer_needed>
      }
      break;
 800d3e4:	e026      	b.n	800d434 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f93c 	bl	800d664 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d3ec:	4b17      	ldr	r3, [pc, #92]	@ (800d44c <tcp_process+0x7d0>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 0310 	and.w	r3, r3, #16
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01f      	beq.n	800d438 <tcp_process+0x7bc>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3fc:	4b14      	ldr	r3, [pc, #80]	@ (800d450 <tcp_process+0x7d4>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d119      	bne.n	800d438 <tcp_process+0x7bc>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d115      	bne.n	800d438 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d40c:	4b11      	ldr	r3, [pc, #68]	@ (800d454 <tcp_process+0x7d8>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	f043 0310 	orr.w	r3, r3, #16
 800d414:	b2da      	uxtb	r2, r3
 800d416:	4b0f      	ldr	r3, [pc, #60]	@ (800d454 <tcp_process+0x7d8>)
 800d418:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d41a:	e00d      	b.n	800d438 <tcp_process+0x7bc>
    default:
      break;
 800d41c:	bf00      	nop
 800d41e:	e00c      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d420:	bf00      	nop
 800d422:	e00a      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d424:	bf00      	nop
 800d426:	e008      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d428:	bf00      	nop
 800d42a:	e006      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d42c:	bf00      	nop
 800d42e:	e004      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d430:	bf00      	nop
 800d432:	e002      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d434:	bf00      	nop
 800d436:	e000      	b.n	800d43a <tcp_process+0x7be>
      break;
 800d438:	bf00      	nop
  }
  return ERR_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3724      	adds	r7, #36	@ 0x24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd90      	pop	{r4, r7, pc}
 800d444:	2401c67c 	.word	0x2401c67c
 800d448:	2401c678 	.word	0x2401c678
 800d44c:	2401c6ac 	.word	0x2401c6ac
 800d450:	2401c6a4 	.word	0x2401c6a4
 800d454:	2401c6ad 	.word	0x2401c6ad
 800d458:	2401c674 	.word	0x2401c674

0800d45c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d45c:	b590      	push	{r4, r7, lr}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d106      	bne.n	800d47a <tcp_oos_insert_segment+0x1e>
 800d46c:	4b3b      	ldr	r3, [pc, #236]	@ (800d55c <tcp_oos_insert_segment+0x100>)
 800d46e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800d472:	493b      	ldr	r1, [pc, #236]	@ (800d560 <tcp_oos_insert_segment+0x104>)
 800d474:	483b      	ldr	r0, [pc, #236]	@ (800d564 <tcp_oos_insert_segment+0x108>)
 800d476:	f003 fea7 	bl	80111c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	899b      	ldrh	r3, [r3, #12]
 800d480:	b29b      	uxth	r3, r3
 800d482:	4618      	mov	r0, r3
 800d484:	f7f8 ff24 	bl	80062d0 <lwip_htons>
 800d488:	4603      	mov	r3, r0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	f003 0301 	and.w	r3, r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	d028      	beq.n	800d4e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d494:	6838      	ldr	r0, [r7, #0]
 800d496:	f7fe fa63 	bl	800b960 <tcp_segs_free>
    next = NULL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	603b      	str	r3, [r7, #0]
 800d49e:	e056      	b.n	800d54e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	899b      	ldrh	r3, [r3, #12]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f8 ff11 	bl	80062d0 <lwip_htons>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00d      	beq.n	800d4d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	899b      	ldrh	r3, [r3, #12]
 800d4c0:	b29c      	uxth	r4, r3
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	f7f8 ff04 	bl	80062d0 <lwip_htons>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	4322      	orrs	r2, r4
 800d4d2:	b292      	uxth	r2, r2
 800d4d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f7fe fa52 	bl	800b98a <tcp_seg_free>
    while (next &&
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00e      	beq.n	800d50a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	891b      	ldrh	r3, [r3, #8]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d568 <tcp_oos_insert_segment+0x10c>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	441a      	add	r2, r3
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	8909      	ldrh	r1, [r1, #8]
 800d502:	440b      	add	r3, r1
 800d504:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d506:	2b00      	cmp	r3, #0
 800d508:	daca      	bge.n	800d4a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d01e      	beq.n	800d54e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	891b      	ldrh	r3, [r3, #8]
 800d514:	461a      	mov	r2, r3
 800d516:	4b14      	ldr	r3, [pc, #80]	@ (800d568 <tcp_oos_insert_segment+0x10c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	441a      	add	r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d524:	2b00      	cmp	r3, #0
 800d526:	dd12      	ble.n	800d54e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	b29a      	uxth	r2, r3
 800d530:	4b0d      	ldr	r3, [pc, #52]	@ (800d568 <tcp_oos_insert_segment+0x10c>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	b29b      	uxth	r3, r3
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	b29a      	uxth	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	891b      	ldrh	r3, [r3, #8]
 800d546:	4619      	mov	r1, r3
 800d548:	4610      	mov	r0, r2
 800d54a:	f7fc fc3b 	bl	8009dc4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	683a      	ldr	r2, [r7, #0]
 800d552:	601a      	str	r2, [r3, #0]
}
 800d554:	bf00      	nop
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd90      	pop	{r4, r7, pc}
 800d55c:	08014148 	.word	0x08014148
 800d560:	08014434 	.word	0x08014434
 800d564:	080141c0 	.word	0x080141c0
 800d568:	2401c6a0 	.word	0x2401c6a0

0800d56c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d56c:	b5b0      	push	{r4, r5, r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d57a:	e03e      	b.n	800d5fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fc fe26 	bl	800a1dc <pbuf_clen>
 800d590:	4603      	mov	r3, r0
 800d592:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d59a:	8a7a      	ldrh	r2, [r7, #18]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d906      	bls.n	800d5ae <tcp_free_acked_segments+0x42>
 800d5a0:	4b2a      	ldr	r3, [pc, #168]	@ (800d64c <tcp_free_acked_segments+0xe0>)
 800d5a2:	f240 4257 	movw	r2, #1111	@ 0x457
 800d5a6:	492a      	ldr	r1, [pc, #168]	@ (800d650 <tcp_free_acked_segments+0xe4>)
 800d5a8:	482a      	ldr	r0, [pc, #168]	@ (800d654 <tcp_free_acked_segments+0xe8>)
 800d5aa:	f003 fe0d 	bl	80111c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800d5b4:	8a7b      	ldrh	r3, [r7, #18]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	891a      	ldrh	r2, [r3, #8]
 800d5c4:	4b24      	ldr	r3, [pc, #144]	@ (800d658 <tcp_free_acked_segments+0xec>)
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	4b22      	ldr	r3, [pc, #136]	@ (800d658 <tcp_free_acked_segments+0xec>)
 800d5ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d5d0:	6978      	ldr	r0, [r7, #20]
 800d5d2:	f7fe f9da 	bl	800b98a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00c      	beq.n	800d5fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d109      	bne.n	800d5fa <tcp_free_acked_segments+0x8e>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d106      	bne.n	800d5fa <tcp_free_acked_segments+0x8e>
 800d5ec:	4b17      	ldr	r3, [pc, #92]	@ (800d64c <tcp_free_acked_segments+0xe0>)
 800d5ee:	f240 4261 	movw	r2, #1121	@ 0x461
 800d5f2:	491a      	ldr	r1, [pc, #104]	@ (800d65c <tcp_free_acked_segments+0xf0>)
 800d5f4:	4817      	ldr	r0, [pc, #92]	@ (800d654 <tcp_free_acked_segments+0xe8>)
 800d5f6:	f003 fde7 	bl	80111c8 <iprintf>
  while (seg_list != NULL &&
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d020      	beq.n	800d642 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	4618      	mov	r0, r3
 800d608:	f7f8 fe77 	bl	80062fa <lwip_htonl>
 800d60c:	4604      	mov	r4, r0
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	891b      	ldrh	r3, [r3, #8]
 800d612:	461d      	mov	r5, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	899b      	ldrh	r3, [r3, #12]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7f8 fe57 	bl	80062d0 <lwip_htons>
 800d622:	4603      	mov	r3, r0
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f003 0303 	and.w	r3, r3, #3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <tcp_free_acked_segments+0xc6>
 800d62e:	2301      	movs	r3, #1
 800d630:	e000      	b.n	800d634 <tcp_free_acked_segments+0xc8>
 800d632:	2300      	movs	r3, #0
 800d634:	442b      	add	r3, r5
 800d636:	18e2      	adds	r2, r4, r3
 800d638:	4b09      	ldr	r3, [pc, #36]	@ (800d660 <tcp_free_acked_segments+0xf4>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dd9c      	ble.n	800d57c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d642:	68bb      	ldr	r3, [r7, #8]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3718      	adds	r7, #24
 800d648:	46bd      	mov	sp, r7
 800d64a:	bdb0      	pop	{r4, r5, r7, pc}
 800d64c:	08014148 	.word	0x08014148
 800d650:	0801445c 	.word	0x0801445c
 800d654:	080141c0 	.word	0x080141c0
 800d658:	2401c6a8 	.word	0x2401c6a8
 800d65c:	08014484 	.word	0x08014484
 800d660:	2401c6a4 	.word	0x2401c6a4

0800d664 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d664:	b5b0      	push	{r4, r5, r7, lr}
 800d666:	b094      	sub	sp, #80	@ 0x50
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <tcp_receive+0x20>
 800d676:	4b91      	ldr	r3, [pc, #580]	@ (800d8bc <tcp_receive+0x258>)
 800d678:	f240 427b 	movw	r2, #1147	@ 0x47b
 800d67c:	4990      	ldr	r1, [pc, #576]	@ (800d8c0 <tcp_receive+0x25c>)
 800d67e:	4891      	ldr	r0, [pc, #580]	@ (800d8c4 <tcp_receive+0x260>)
 800d680:	f003 fda2 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	7d1b      	ldrb	r3, [r3, #20]
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d806      	bhi.n	800d69a <tcp_receive+0x36>
 800d68c:	4b8b      	ldr	r3, [pc, #556]	@ (800d8bc <tcp_receive+0x258>)
 800d68e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800d692:	498d      	ldr	r1, [pc, #564]	@ (800d8c8 <tcp_receive+0x264>)
 800d694:	488b      	ldr	r0, [pc, #556]	@ (800d8c4 <tcp_receive+0x260>)
 800d696:	f003 fd97 	bl	80111c8 <iprintf>

  if (flags & TCP_ACK) {
 800d69a:	4b8c      	ldr	r3, [pc, #560]	@ (800d8cc <tcp_receive+0x268>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	f003 0310 	and.w	r3, r3, #16
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f000 8264 	beq.w	800db70 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6b4:	4413      	add	r3, r2
 800d6b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6bc:	4b84      	ldr	r3, [pc, #528]	@ (800d8d0 <tcp_receive+0x26c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	db1b      	blt.n	800d6fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6ca:	4b81      	ldr	r3, [pc, #516]	@ (800d8d0 <tcp_receive+0x26c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d106      	bne.n	800d6e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d6d6:	4b7f      	ldr	r3, [pc, #508]	@ (800d8d4 <tcp_receive+0x270>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	db0e      	blt.n	800d6fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d6e4:	4b7b      	ldr	r3, [pc, #492]	@ (800d8d4 <tcp_receive+0x270>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d125      	bne.n	800d738 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d6ec:	4b7a      	ldr	r3, [pc, #488]	@ (800d8d8 <tcp_receive+0x274>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	89db      	ldrh	r3, [r3, #14]
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d91c      	bls.n	800d738 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d6fe:	4b76      	ldr	r3, [pc, #472]	@ (800d8d8 <tcp_receive+0x274>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	89db      	ldrh	r3, [r3, #14]
 800d704:	b29a      	uxth	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d718:	429a      	cmp	r2, r3
 800d71a:	d205      	bcs.n	800d728 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d728:	4b69      	ldr	r3, [pc, #420]	@ (800d8d0 <tcp_receive+0x26c>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d730:	4b68      	ldr	r3, [pc, #416]	@ (800d8d4 <tcp_receive+0x270>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d738:	4b66      	ldr	r3, [pc, #408]	@ (800d8d4 <tcp_receive+0x270>)
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	dc58      	bgt.n	800d7f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d746:	4b65      	ldr	r3, [pc, #404]	@ (800d8dc <tcp_receive+0x278>)
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d14b      	bne.n	800d7e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d758:	4413      	add	r3, r2
 800d75a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d142      	bne.n	800d7e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d766:	2b00      	cmp	r3, #0
 800d768:	db3d      	blt.n	800d7e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d76e:	4b59      	ldr	r3, [pc, #356]	@ (800d8d4 <tcp_receive+0x270>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	429a      	cmp	r2, r3
 800d774:	d137      	bne.n	800d7e6 <tcp_receive+0x182>
              found_dupack = 1;
 800d776:	2301      	movs	r3, #1
 800d778:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d780:	2bff      	cmp	r3, #255	@ 0xff
 800d782:	d007      	beq.n	800d794 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d78a:	3301      	adds	r3, #1
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d91b      	bls.n	800d7d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7a8:	4413      	add	r3, r2
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d30a      	bcc.n	800d7cc <tcp_receive+0x168>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7c0:	4413      	add	r3, r2
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d7ca:	e004      	b.n	800d7d6 <tcp_receive+0x172>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	d902      	bls.n	800d7e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 fee7 	bl	800f5b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d7e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f040 8161 	bne.w	800dab0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d7f6:	e15b      	b.n	800dab0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7f8:	4b36      	ldr	r3, [pc, #216]	@ (800d8d4 <tcp_receive+0x270>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	3b01      	subs	r3, #1
 800d804:	2b00      	cmp	r3, #0
 800d806:	f2c0 814e 	blt.w	800daa6 <tcp_receive+0x442>
 800d80a:	4b32      	ldr	r3, [pc, #200]	@ (800d8d4 <tcp_receive+0x270>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2b00      	cmp	r3, #0
 800d816:	f300 8146 	bgt.w	800daa6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	8b5b      	ldrh	r3, [r3, #26]
 800d81e:	f003 0304 	and.w	r3, r3, #4
 800d822:	2b00      	cmp	r3, #0
 800d824:	d010      	beq.n	800d848 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	8b5b      	ldrh	r3, [r3, #26]
 800d82a:	f023 0304 	bic.w	r3, r3, #4
 800d82e:	b29a      	uxth	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d856:	10db      	asrs	r3, r3, #3
 800d858:	b21b      	sxth	r3, r3
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d862:	b29b      	uxth	r3, r3
 800d864:	4413      	add	r3, r2
 800d866:	b29b      	uxth	r3, r3
 800d868:	b21a      	sxth	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d870:	4b18      	ldr	r3, [pc, #96]	@ (800d8d4 <tcp_receive+0x270>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	b29a      	uxth	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d888:	4b12      	ldr	r3, [pc, #72]	@ (800d8d4 <tcp_receive+0x270>)
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7d1b      	ldrb	r3, [r3, #20]
 800d894:	2b03      	cmp	r3, #3
 800d896:	f240 8097 	bls.w	800d9c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d245      	bcs.n	800d936 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	8b5b      	ldrh	r3, [r3, #26]
 800d8ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d014      	beq.n	800d8e0 <tcp_receive+0x27c>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e013      	b.n	800d8e2 <tcp_receive+0x27e>
 800d8ba:	bf00      	nop
 800d8bc:	08014148 	.word	0x08014148
 800d8c0:	080144a4 	.word	0x080144a4
 800d8c4:	080141c0 	.word	0x080141c0
 800d8c8:	080144c0 	.word	0x080144c0
 800d8cc:	2401c6ac 	.word	0x2401c6ac
 800d8d0:	2401c6a0 	.word	0x2401c6a0
 800d8d4:	2401c6a4 	.word	0x2401c6a4
 800d8d8:	2401c690 	.word	0x2401c690
 800d8dc:	2401c6aa 	.word	0x2401c6aa
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d8e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d8f0:	fb12 f303 	smulbb	r3, r2, r3
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	bf28      	it	cs
 800d8fc:	4613      	movcs	r3, r2
 800d8fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d906:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d908:	4413      	add	r3, r2
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d912:	429a      	cmp	r2, r3
 800d914:	d309      	bcc.n	800d92a <tcp_receive+0x2c6>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d91c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d91e:	4413      	add	r3, r2
 800d920:	b29a      	uxth	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d928:	e04e      	b.n	800d9c8 <tcp_receive+0x364>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d930:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d934:	e048      	b.n	800d9c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d93c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d93e:	4413      	add	r3, r2
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d948:	429a      	cmp	r2, r3
 800d94a:	d309      	bcc.n	800d960 <tcp_receive+0x2fc>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d952:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d954:	4413      	add	r3, r2
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d95e:	e004      	b.n	800d96a <tcp_receive+0x306>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d966:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d976:	429a      	cmp	r2, r3
 800d978:	d326      	bcc.n	800d9c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	b29a      	uxth	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d99a:	4413      	add	r3, r2
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d30a      	bcc.n	800d9be <tcp_receive+0x35a>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9b2:	4413      	add	r3, r2
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d9bc:	e004      	b.n	800d9c8 <tcp_receive+0x364>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9d0:	4a98      	ldr	r2, [pc, #608]	@ (800dc34 <tcp_receive+0x5d0>)
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fdca 	bl	800d56c <tcp_free_acked_segments>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9e6:	4a94      	ldr	r2, [pc, #592]	@ (800dc38 <tcp_receive+0x5d4>)
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff fdbf 	bl	800d56c <tcp_free_acked_segments>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d104      	bne.n	800da06 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da02:	861a      	strh	r2, [r3, #48]	@ 0x30
 800da04:	e002      	b.n	800da0c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d103      	bne.n	800da22 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800da28:	4b84      	ldr	r3, [pc, #528]	@ (800dc3c <tcp_receive+0x5d8>)
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	4413      	add	r3, r2
 800da2e:	b29a      	uxth	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8b5b      	ldrh	r3, [r3, #26]
 800da3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d035      	beq.n	800daae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da46:	2b00      	cmp	r3, #0
 800da48:	d118      	bne.n	800da7c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00c      	beq.n	800da6c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f8 fc4b 	bl	80062fa <lwip_htonl>
 800da64:	4603      	mov	r3, r0
 800da66:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc20      	bgt.n	800daae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	8b5b      	ldrh	r3, [r3, #26]
 800da70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da7a:	e018      	b.n	800daae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f8 fc36 	bl	80062fa <lwip_htonl>
 800da8e:	4603      	mov	r3, r0
 800da90:	1ae3      	subs	r3, r4, r3
 800da92:	2b00      	cmp	r3, #0
 800da94:	dc0b      	bgt.n	800daae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	8b5b      	ldrh	r3, [r3, #26]
 800da9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800daa4:	e003      	b.n	800daae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f001 ff70 	bl	800f98c <tcp_send_empty_ack>
 800daac:	e000      	b.n	800dab0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800daae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d05b      	beq.n	800db70 <tcp_receive+0x50c>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dabc:	4b60      	ldr	r3, [pc, #384]	@ (800dc40 <tcp_receive+0x5dc>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	da54      	bge.n	800db70 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dac6:	4b5f      	ldr	r3, [pc, #380]	@ (800dc44 <tcp_receive+0x5e0>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	b29a      	uxth	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dada:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dae4:	10db      	asrs	r3, r3, #3
 800dae6:	b21b      	sxth	r3, r3
 800dae8:	b29b      	uxth	r3, r3
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29b      	uxth	r3, r3
 800daee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dafe:	4413      	add	r3, r2
 800db00:	b29b      	uxth	r3, r3
 800db02:	b21a      	sxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800db08:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	da05      	bge.n	800db1c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800db10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800db14:	425b      	negs	r3, r3
 800db16:	b29b      	uxth	r3, r3
 800db18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800db1c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800db26:	109b      	asrs	r3, r3, #2
 800db28:	b21b      	sxth	r3, r3
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	b29b      	uxth	r3, r3
 800db30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800db40:	4413      	add	r3, r2
 800db42:	b29b      	uxth	r3, r3
 800db44:	b21a      	sxth	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800db50:	10db      	asrs	r3, r3, #3
 800db52:	b21b      	sxth	r3, r3
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	4413      	add	r3, r2
 800db60:	b29b      	uxth	r3, r3
 800db62:	b21a      	sxth	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800db70:	4b35      	ldr	r3, [pc, #212]	@ (800dc48 <tcp_receive+0x5e4>)
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 84df 	beq.w	800e538 <tcp_receive+0xed4>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	7d1b      	ldrb	r3, [r3, #20]
 800db7e:	2b06      	cmp	r3, #6
 800db80:	f200 84da 	bhi.w	800e538 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db88:	4b30      	ldr	r3, [pc, #192]	@ (800dc4c <tcp_receive+0x5e8>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	3b01      	subs	r3, #1
 800db90:	2b00      	cmp	r3, #0
 800db92:	f2c0 808f 	blt.w	800dcb4 <tcp_receive+0x650>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db9a:	4b2b      	ldr	r3, [pc, #172]	@ (800dc48 <tcp_receive+0x5e4>)
 800db9c:	881b      	ldrh	r3, [r3, #0]
 800db9e:	4619      	mov	r1, r3
 800dba0:	4b2a      	ldr	r3, [pc, #168]	@ (800dc4c <tcp_receive+0x5e8>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	440b      	add	r3, r1
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	3301      	adds	r3, #1
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f300 8082 	bgt.w	800dcb4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dbb0:	4b27      	ldr	r3, [pc, #156]	@ (800dc50 <tcp_receive+0x5ec>)
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbba:	4b24      	ldr	r3, [pc, #144]	@ (800dc4c <tcp_receive+0x5e8>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dbc2:	4b23      	ldr	r3, [pc, #140]	@ (800dc50 <tcp_receive+0x5ec>)
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <tcp_receive+0x574>
 800dbca:	4b22      	ldr	r3, [pc, #136]	@ (800dc54 <tcp_receive+0x5f0>)
 800dbcc:	f240 5294 	movw	r2, #1428	@ 0x594
 800dbd0:	4921      	ldr	r1, [pc, #132]	@ (800dc58 <tcp_receive+0x5f4>)
 800dbd2:	4822      	ldr	r0, [pc, #136]	@ (800dc5c <tcp_receive+0x5f8>)
 800dbd4:	f003 faf8 	bl	80111c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d906      	bls.n	800dbf0 <tcp_receive+0x58c>
 800dbe2:	4b1c      	ldr	r3, [pc, #112]	@ (800dc54 <tcp_receive+0x5f0>)
 800dbe4:	f240 5295 	movw	r2, #1429	@ 0x595
 800dbe8:	491d      	ldr	r1, [pc, #116]	@ (800dc60 <tcp_receive+0x5fc>)
 800dbea:	481c      	ldr	r0, [pc, #112]	@ (800dc5c <tcp_receive+0x5f8>)
 800dbec:	f003 faec 	bl	80111c8 <iprintf>
      off = (u16_t)off32;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dbf6:	4b16      	ldr	r3, [pc, #88]	@ (800dc50 <tcp_receive+0x5ec>)
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	891b      	ldrh	r3, [r3, #8]
 800dbfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d906      	bls.n	800dc12 <tcp_receive+0x5ae>
 800dc04:	4b13      	ldr	r3, [pc, #76]	@ (800dc54 <tcp_receive+0x5f0>)
 800dc06:	f240 5297 	movw	r2, #1431	@ 0x597
 800dc0a:	4916      	ldr	r1, [pc, #88]	@ (800dc64 <tcp_receive+0x600>)
 800dc0c:	4813      	ldr	r0, [pc, #76]	@ (800dc5c <tcp_receive+0x5f8>)
 800dc0e:	f003 fadb 	bl	80111c8 <iprintf>
      inseg.len -= off;
 800dc12:	4b0f      	ldr	r3, [pc, #60]	@ (800dc50 <tcp_receive+0x5ec>)
 800dc14:	891a      	ldrh	r2, [r3, #8]
 800dc16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc50 <tcp_receive+0x5ec>)
 800dc20:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dc22:	4b0b      	ldr	r3, [pc, #44]	@ (800dc50 <tcp_receive+0x5ec>)
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	891a      	ldrh	r2, [r3, #8]
 800dc28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800dc30:	e02a      	b.n	800dc88 <tcp_receive+0x624>
 800dc32:	bf00      	nop
 800dc34:	080144dc 	.word	0x080144dc
 800dc38:	080144e4 	.word	0x080144e4
 800dc3c:	2401c6a8 	.word	0x2401c6a8
 800dc40:	2401c6a4 	.word	0x2401c6a4
 800dc44:	2401c668 	.word	0x2401c668
 800dc48:	2401c6aa 	.word	0x2401c6aa
 800dc4c:	2401c6a0 	.word	0x2401c6a0
 800dc50:	2401c680 	.word	0x2401c680
 800dc54:	08014148 	.word	0x08014148
 800dc58:	080144ec 	.word	0x080144ec
 800dc5c:	080141c0 	.word	0x080141c0
 800dc60:	080144fc 	.word	0x080144fc
 800dc64:	0801450c 	.word	0x0801450c
        off -= p->len;
 800dc68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc6a:	895b      	ldrh	r3, [r3, #10]
 800dc6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dc76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc78:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dc7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dc7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc7e:	2200      	movs	r2, #0
 800dc80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dc82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800dc88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc8a:	895b      	ldrh	r3, [r3, #10]
 800dc8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d8e9      	bhi.n	800dc68 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dc94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dc9c:	f7fc f990 	bl	8009fc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca4:	4a90      	ldr	r2, [pc, #576]	@ (800dee8 <tcp_receive+0x884>)
 800dca6:	6013      	str	r3, [r2, #0]
 800dca8:	4b90      	ldr	r3, [pc, #576]	@ (800deec <tcp_receive+0x888>)
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	4a8e      	ldr	r2, [pc, #568]	@ (800dee8 <tcp_receive+0x884>)
 800dcae:	6812      	ldr	r2, [r2, #0]
 800dcb0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dcb2:	e00d      	b.n	800dcd0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dcb4:	4b8c      	ldr	r3, [pc, #560]	@ (800dee8 <tcp_receive+0x884>)
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	da06      	bge.n	800dcd0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	8b5b      	ldrh	r3, [r3, #26]
 800dcc6:	f043 0302 	orr.w	r3, r3, #2
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dcd0:	4b85      	ldr	r3, [pc, #532]	@ (800dee8 <tcp_receive+0x884>)
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f2c0 8427 	blt.w	800e52e <tcp_receive+0xeca>
 800dce0:	4b81      	ldr	r3, [pc, #516]	@ (800dee8 <tcp_receive+0x884>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce8:	6879      	ldr	r1, [r7, #4]
 800dcea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dcec:	440b      	add	r3, r1
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f300 841b 	bgt.w	800e52e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcfc:	4b7a      	ldr	r3, [pc, #488]	@ (800dee8 <tcp_receive+0x884>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	f040 8298 	bne.w	800e236 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dd06:	4b79      	ldr	r3, [pc, #484]	@ (800deec <tcp_receive+0x888>)
 800dd08:	891c      	ldrh	r4, [r3, #8]
 800dd0a:	4b78      	ldr	r3, [pc, #480]	@ (800deec <tcp_receive+0x888>)
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	899b      	ldrh	r3, [r3, #12]
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7f8 fadc 	bl	80062d0 <lwip_htons>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f003 0303 	and.w	r3, r3, #3
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <tcp_receive+0x6c4>
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <tcp_receive+0x6c6>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4423      	add	r3, r4
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	4b70      	ldr	r3, [pc, #448]	@ (800def0 <tcp_receive+0x88c>)
 800dd30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dd36:	4b6e      	ldr	r3, [pc, #440]	@ (800def0 <tcp_receive+0x88c>)
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d274      	bcs.n	800de28 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd3e:	4b6b      	ldr	r3, [pc, #428]	@ (800deec <tcp_receive+0x888>)
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	899b      	ldrh	r3, [r3, #12]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7f8 fac2 	bl	80062d0 <lwip_htons>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d01e      	beq.n	800dd96 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dd58:	4b64      	ldr	r3, [pc, #400]	@ (800deec <tcp_receive+0x888>)
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	899b      	ldrh	r3, [r3, #12]
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	b21b      	sxth	r3, r3
 800dd62:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dd66:	b21c      	sxth	r4, r3
 800dd68:	4b60      	ldr	r3, [pc, #384]	@ (800deec <tcp_receive+0x888>)
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	899b      	ldrh	r3, [r3, #12]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f8 faad 	bl	80062d0 <lwip_htons>
 800dd76:	4603      	mov	r3, r0
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f8 faa5 	bl	80062d0 <lwip_htons>
 800dd86:	4603      	mov	r3, r0
 800dd88:	b21b      	sxth	r3, r3
 800dd8a:	4323      	orrs	r3, r4
 800dd8c:	b21a      	sxth	r2, r3
 800dd8e:	4b57      	ldr	r3, [pc, #348]	@ (800deec <tcp_receive+0x888>)
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	b292      	uxth	r2, r2
 800dd94:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dd9a:	4b54      	ldr	r3, [pc, #336]	@ (800deec <tcp_receive+0x888>)
 800dd9c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dd9e:	4b53      	ldr	r3, [pc, #332]	@ (800deec <tcp_receive+0x888>)
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	899b      	ldrh	r3, [r3, #12]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f8 fa92 	bl	80062d0 <lwip_htons>
 800ddac:	4603      	mov	r3, r0
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d005      	beq.n	800ddc4 <tcp_receive+0x760>
            inseg.len -= 1;
 800ddb8:	4b4c      	ldr	r3, [pc, #304]	@ (800deec <tcp_receive+0x888>)
 800ddba:	891b      	ldrh	r3, [r3, #8]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	4b4a      	ldr	r3, [pc, #296]	@ (800deec <tcp_receive+0x888>)
 800ddc2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ddc4:	4b49      	ldr	r3, [pc, #292]	@ (800deec <tcp_receive+0x888>)
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	4a48      	ldr	r2, [pc, #288]	@ (800deec <tcp_receive+0x888>)
 800ddca:	8912      	ldrh	r2, [r2, #8]
 800ddcc:	4611      	mov	r1, r2
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fb fff8 	bl	8009dc4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ddd4:	4b45      	ldr	r3, [pc, #276]	@ (800deec <tcp_receive+0x888>)
 800ddd6:	891c      	ldrh	r4, [r3, #8]
 800ddd8:	4b44      	ldr	r3, [pc, #272]	@ (800deec <tcp_receive+0x888>)
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	899b      	ldrh	r3, [r3, #12]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7f8 fa75 	bl	80062d0 <lwip_htons>
 800dde6:	4603      	mov	r3, r0
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	f003 0303 	and.w	r3, r3, #3
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <tcp_receive+0x792>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e000      	b.n	800ddf8 <tcp_receive+0x794>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4423      	add	r3, r4
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	4b3c      	ldr	r3, [pc, #240]	@ (800def0 <tcp_receive+0x88c>)
 800ddfe:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800de00:	4b3b      	ldr	r3, [pc, #236]	@ (800def0 <tcp_receive+0x88c>)
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	461a      	mov	r2, r3
 800de06:	4b38      	ldr	r3, [pc, #224]	@ (800dee8 <tcp_receive+0x884>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	441a      	add	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800de14:	440b      	add	r3, r1
 800de16:	429a      	cmp	r2, r3
 800de18:	d006      	beq.n	800de28 <tcp_receive+0x7c4>
 800de1a:	4b36      	ldr	r3, [pc, #216]	@ (800def4 <tcp_receive+0x890>)
 800de1c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800de20:	4935      	ldr	r1, [pc, #212]	@ (800def8 <tcp_receive+0x894>)
 800de22:	4836      	ldr	r0, [pc, #216]	@ (800defc <tcp_receive+0x898>)
 800de24:	f003 f9d0 	bl	80111c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 80e6 	beq.w	800dffe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de32:	4b2e      	ldr	r3, [pc, #184]	@ (800deec <tcp_receive+0x888>)
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	899b      	ldrh	r3, [r3, #12]
 800de38:	b29b      	uxth	r3, r3
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7f8 fa48 	bl	80062d0 <lwip_htons>
 800de40:	4603      	mov	r3, r0
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d010      	beq.n	800de6e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800de4c:	e00a      	b.n	800de64 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de52:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7fd fd93 	bl	800b98a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1f0      	bne.n	800de4e <tcp_receive+0x7ea>
 800de6c:	e0c7      	b.n	800dffe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de72:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800de74:	e051      	b.n	800df1a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800de76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	899b      	ldrh	r3, [r3, #12]
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f8 fa26 	bl	80062d0 <lwip_htons>
 800de84:	4603      	mov	r3, r0
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d03c      	beq.n	800df0a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800de90:	4b16      	ldr	r3, [pc, #88]	@ (800deec <tcp_receive+0x888>)
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	899b      	ldrh	r3, [r3, #12]
 800de96:	b29b      	uxth	r3, r3
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f8 fa19 	bl	80062d0 <lwip_htons>
 800de9e:	4603      	mov	r3, r0
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d12f      	bne.n	800df0a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800deaa:	4b10      	ldr	r3, [pc, #64]	@ (800deec <tcp_receive+0x888>)
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	899b      	ldrh	r3, [r3, #12]
 800deb0:	b29c      	uxth	r4, r3
 800deb2:	2001      	movs	r0, #1
 800deb4:	f7f8 fa0c 	bl	80062d0 <lwip_htons>
 800deb8:	4603      	mov	r3, r0
 800deba:	461a      	mov	r2, r3
 800debc:	4b0b      	ldr	r3, [pc, #44]	@ (800deec <tcp_receive+0x888>)
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	4322      	orrs	r2, r4
 800dec2:	b292      	uxth	r2, r2
 800dec4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dec6:	4b09      	ldr	r3, [pc, #36]	@ (800deec <tcp_receive+0x888>)
 800dec8:	891c      	ldrh	r4, [r3, #8]
 800deca:	4b08      	ldr	r3, [pc, #32]	@ (800deec <tcp_receive+0x888>)
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	899b      	ldrh	r3, [r3, #12]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f8 f9fc 	bl	80062d0 <lwip_htons>
 800ded8:	4603      	mov	r3, r0
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	f003 0303 	and.w	r3, r3, #3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00d      	beq.n	800df00 <tcp_receive+0x89c>
 800dee4:	2301      	movs	r3, #1
 800dee6:	e00c      	b.n	800df02 <tcp_receive+0x89e>
 800dee8:	2401c6a0 	.word	0x2401c6a0
 800deec:	2401c680 	.word	0x2401c680
 800def0:	2401c6aa 	.word	0x2401c6aa
 800def4:	08014148 	.word	0x08014148
 800def8:	0801451c 	.word	0x0801451c
 800defc:	080141c0 	.word	0x080141c0
 800df00:	2300      	movs	r3, #0
 800df02:	4423      	add	r3, r4
 800df04:	b29a      	uxth	r2, r3
 800df06:	4b98      	ldr	r3, [pc, #608]	@ (800e168 <tcp_receive+0xb04>)
 800df08:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800df0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df0c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800df0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800df14:	6938      	ldr	r0, [r7, #16]
 800df16:	f7fd fd38 	bl	800b98a <tcp_seg_free>
            while (next &&
 800df1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00e      	beq.n	800df3e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800df20:	4b91      	ldr	r3, [pc, #580]	@ (800e168 <tcp_receive+0xb04>)
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	461a      	mov	r2, r3
 800df26:	4b91      	ldr	r3, [pc, #580]	@ (800e16c <tcp_receive+0xb08>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	441a      	add	r2, r3
 800df2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df34:	8909      	ldrh	r1, [r1, #8]
 800df36:	440b      	add	r3, r1
 800df38:	1ad3      	subs	r3, r2, r3
            while (next &&
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	da9b      	bge.n	800de76 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800df3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df40:	2b00      	cmp	r3, #0
 800df42:	d059      	beq.n	800dff8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800df44:	4b88      	ldr	r3, [pc, #544]	@ (800e168 <tcp_receive+0xb04>)
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	461a      	mov	r2, r3
 800df4a:	4b88      	ldr	r3, [pc, #544]	@ (800e16c <tcp_receive+0xb08>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	441a      	add	r2, r3
 800df50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	1ad3      	subs	r3, r2, r3
            if (next &&
 800df58:	2b00      	cmp	r3, #0
 800df5a:	dd4d      	ble.n	800dff8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800df5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	b29a      	uxth	r2, r3
 800df64:	4b81      	ldr	r3, [pc, #516]	@ (800e16c <tcp_receive+0xb08>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	4b80      	ldr	r3, [pc, #512]	@ (800e170 <tcp_receive+0xb0c>)
 800df70:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800df72:	4b7f      	ldr	r3, [pc, #508]	@ (800e170 <tcp_receive+0xb0c>)
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	899b      	ldrh	r3, [r3, #12]
 800df78:	b29b      	uxth	r3, r3
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7f8 f9a8 	bl	80062d0 <lwip_htons>
 800df80:	4603      	mov	r3, r0
 800df82:	b2db      	uxtb	r3, r3
 800df84:	f003 0302 	and.w	r3, r3, #2
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d005      	beq.n	800df98 <tcp_receive+0x934>
                inseg.len -= 1;
 800df8c:	4b78      	ldr	r3, [pc, #480]	@ (800e170 <tcp_receive+0xb0c>)
 800df8e:	891b      	ldrh	r3, [r3, #8]
 800df90:	3b01      	subs	r3, #1
 800df92:	b29a      	uxth	r2, r3
 800df94:	4b76      	ldr	r3, [pc, #472]	@ (800e170 <tcp_receive+0xb0c>)
 800df96:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800df98:	4b75      	ldr	r3, [pc, #468]	@ (800e170 <tcp_receive+0xb0c>)
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	4a74      	ldr	r2, [pc, #464]	@ (800e170 <tcp_receive+0xb0c>)
 800df9e:	8912      	ldrh	r2, [r2, #8]
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fb ff0e 	bl	8009dc4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dfa8:	4b71      	ldr	r3, [pc, #452]	@ (800e170 <tcp_receive+0xb0c>)
 800dfaa:	891c      	ldrh	r4, [r3, #8]
 800dfac:	4b70      	ldr	r3, [pc, #448]	@ (800e170 <tcp_receive+0xb0c>)
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	899b      	ldrh	r3, [r3, #12]
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7f8 f98b 	bl	80062d0 <lwip_htons>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	f003 0303 	and.w	r3, r3, #3
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <tcp_receive+0x966>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e000      	b.n	800dfcc <tcp_receive+0x968>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4423      	add	r3, r4
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	4b65      	ldr	r3, [pc, #404]	@ (800e168 <tcp_receive+0xb04>)
 800dfd2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dfd4:	4b64      	ldr	r3, [pc, #400]	@ (800e168 <tcp_receive+0xb04>)
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4b64      	ldr	r3, [pc, #400]	@ (800e16c <tcp_receive+0xb08>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	441a      	add	r2, r3
 800dfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d006      	beq.n	800dff8 <tcp_receive+0x994>
 800dfea:	4b62      	ldr	r3, [pc, #392]	@ (800e174 <tcp_receive+0xb10>)
 800dfec:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800dff0:	4961      	ldr	r1, [pc, #388]	@ (800e178 <tcp_receive+0xb14>)
 800dff2:	4862      	ldr	r0, [pc, #392]	@ (800e17c <tcp_receive+0xb18>)
 800dff4:	f003 f8e8 	bl	80111c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dffc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dffe:	4b5a      	ldr	r3, [pc, #360]	@ (800e168 <tcp_receive+0xb04>)
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	461a      	mov	r2, r3
 800e004:	4b59      	ldr	r3, [pc, #356]	@ (800e16c <tcp_receive+0xb08>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	441a      	add	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e012:	4b55      	ldr	r3, [pc, #340]	@ (800e168 <tcp_receive+0xb04>)
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	429a      	cmp	r2, r3
 800e018:	d206      	bcs.n	800e028 <tcp_receive+0x9c4>
 800e01a:	4b56      	ldr	r3, [pc, #344]	@ (800e174 <tcp_receive+0xb10>)
 800e01c:	f240 6207 	movw	r2, #1543	@ 0x607
 800e020:	4957      	ldr	r1, [pc, #348]	@ (800e180 <tcp_receive+0xb1c>)
 800e022:	4856      	ldr	r0, [pc, #344]	@ (800e17c <tcp_receive+0xb18>)
 800e024:	f003 f8d0 	bl	80111c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e02c:	4b4e      	ldr	r3, [pc, #312]	@ (800e168 <tcp_receive+0xb04>)
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	b29a      	uxth	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7fc ffc5 	bl	800afc8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e03e:	4b4c      	ldr	r3, [pc, #304]	@ (800e170 <tcp_receive+0xb0c>)
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	891b      	ldrh	r3, [r3, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d006      	beq.n	800e056 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e048:	4b49      	ldr	r3, [pc, #292]	@ (800e170 <tcp_receive+0xb0c>)
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	4a4d      	ldr	r2, [pc, #308]	@ (800e184 <tcp_receive+0xb20>)
 800e04e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e050:	4b47      	ldr	r3, [pc, #284]	@ (800e170 <tcp_receive+0xb0c>)
 800e052:	2200      	movs	r2, #0
 800e054:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e056:	4b46      	ldr	r3, [pc, #280]	@ (800e170 <tcp_receive+0xb0c>)
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	899b      	ldrh	r3, [r3, #12]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	4618      	mov	r0, r3
 800e060:	f7f8 f936 	bl	80062d0 <lwip_htons>
 800e064:	4603      	mov	r3, r0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	f003 0301 	and.w	r3, r3, #1
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 80b8 	beq.w	800e1e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e072:	4b45      	ldr	r3, [pc, #276]	@ (800e188 <tcp_receive+0xb24>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	f043 0320 	orr.w	r3, r3, #32
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	4b42      	ldr	r3, [pc, #264]	@ (800e188 <tcp_receive+0xb24>)
 800e07e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e080:	e0af      	b.n	800e1e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e086:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	4a36      	ldr	r2, [pc, #216]	@ (800e16c <tcp_receive+0xb08>)
 800e092:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	891b      	ldrh	r3, [r3, #8]
 800e098:	461c      	mov	r4, r3
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	899b      	ldrh	r3, [r3, #12]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f8 f914 	bl	80062d0 <lwip_htons>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f003 0303 	and.w	r3, r3, #3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <tcp_receive+0xa54>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e000      	b.n	800e0ba <tcp_receive+0xa56>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	191a      	adds	r2, r3, r4
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c0:	441a      	add	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0ca:	461c      	mov	r4, r3
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	891b      	ldrh	r3, [r3, #8]
 800e0d0:	461d      	mov	r5, r3
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	899b      	ldrh	r3, [r3, #12]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f8 f8f8 	bl	80062d0 <lwip_htons>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0303 	and.w	r3, r3, #3
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <tcp_receive+0xa8c>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e000      	b.n	800e0f2 <tcp_receive+0xa8e>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	442b      	add	r3, r5
 800e0f4:	429c      	cmp	r4, r3
 800e0f6:	d206      	bcs.n	800e106 <tcp_receive+0xaa2>
 800e0f8:	4b1e      	ldr	r3, [pc, #120]	@ (800e174 <tcp_receive+0xb10>)
 800e0fa:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e0fe:	4923      	ldr	r1, [pc, #140]	@ (800e18c <tcp_receive+0xb28>)
 800e100:	481e      	ldr	r0, [pc, #120]	@ (800e17c <tcp_receive+0xb18>)
 800e102:	f003 f861 	bl	80111c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	891b      	ldrh	r3, [r3, #8]
 800e10a:	461c      	mov	r4, r3
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	899b      	ldrh	r3, [r3, #12]
 800e112:	b29b      	uxth	r3, r3
 800e114:	4618      	mov	r0, r3
 800e116:	f7f8 f8db 	bl	80062d0 <lwip_htons>
 800e11a:	4603      	mov	r3, r0
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	f003 0303 	and.w	r3, r3, #3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <tcp_receive+0xac6>
 800e126:	2301      	movs	r3, #1
 800e128:	e000      	b.n	800e12c <tcp_receive+0xac8>
 800e12a:	2300      	movs	r3, #0
 800e12c:	1919      	adds	r1, r3, r4
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e132:	b28b      	uxth	r3, r1
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	b29a      	uxth	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7fc ff43 	bl	800afc8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	891b      	ldrh	r3, [r3, #8]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d028      	beq.n	800e19e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e14c:	4b0d      	ldr	r3, [pc, #52]	@ (800e184 <tcp_receive+0xb20>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d01d      	beq.n	800e190 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e154:	4b0b      	ldr	r3, [pc, #44]	@ (800e184 <tcp_receive+0xb20>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	4619      	mov	r1, r3
 800e15e:	4610      	mov	r0, r2
 800e160:	f7fc f876 	bl	800a250 <pbuf_cat>
 800e164:	e018      	b.n	800e198 <tcp_receive+0xb34>
 800e166:	bf00      	nop
 800e168:	2401c6aa 	.word	0x2401c6aa
 800e16c:	2401c6a0 	.word	0x2401c6a0
 800e170:	2401c680 	.word	0x2401c680
 800e174:	08014148 	.word	0x08014148
 800e178:	08014554 	.word	0x08014554
 800e17c:	080141c0 	.word	0x080141c0
 800e180:	08014590 	.word	0x08014590
 800e184:	2401c6b0 	.word	0x2401c6b0
 800e188:	2401c6ad 	.word	0x2401c6ad
 800e18c:	080145b0 	.word	0x080145b0
            } else {
              recv_data = cseg->p;
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	4a70      	ldr	r2, [pc, #448]	@ (800e358 <tcp_receive+0xcf4>)
 800e196:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	2200      	movs	r2, #0
 800e19c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	899b      	ldrh	r3, [r3, #12]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7f8 f892 	bl	80062d0 <lwip_htons>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0301 	and.w	r3, r3, #1
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00d      	beq.n	800e1d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e1b8:	4b68      	ldr	r3, [pc, #416]	@ (800e35c <tcp_receive+0xcf8>)
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f043 0320 	orr.w	r3, r3, #32
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	4b66      	ldr	r3, [pc, #408]	@ (800e35c <tcp_receive+0xcf8>)
 800e1c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	7d1b      	ldrb	r3, [r3, #20]
 800e1ca:	2b04      	cmp	r3, #4
 800e1cc:	d102      	bne.n	800e1d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2207      	movs	r2, #7
 800e1d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e1dc:	68b8      	ldr	r0, [r7, #8]
 800e1de:	f7fd fbd4 	bl	800b98a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d008      	beq.n	800e1fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	685a      	ldr	r2, [r3, #4]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	f43f af43 	beq.w	800e082 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	8b5b      	ldrh	r3, [r3, #26]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00e      	beq.n	800e226 <tcp_receive+0xbc2>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	8b5b      	ldrh	r3, [r3, #26]
 800e20c:	f023 0301 	bic.w	r3, r3, #1
 800e210:	b29a      	uxth	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	835a      	strh	r2, [r3, #26]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	8b5b      	ldrh	r3, [r3, #26]
 800e21a:	f043 0302 	orr.w	r3, r3, #2
 800e21e:	b29a      	uxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e224:	e187      	b.n	800e536 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	8b5b      	ldrh	r3, [r3, #26]
 800e22a:	f043 0301 	orr.w	r3, r3, #1
 800e22e:	b29a      	uxth	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e234:	e17f      	b.n	800e536 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e23e:	4848      	ldr	r0, [pc, #288]	@ (800e360 <tcp_receive+0xcfc>)
 800e240:	f7fd fbbc 	bl	800b9bc <tcp_seg_copy>
 800e244:	4602      	mov	r2, r0
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	675a      	str	r2, [r3, #116]	@ 0x74
 800e24a:	e16c      	b.n	800e526 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e24c:	2300      	movs	r3, #0
 800e24e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e254:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e256:	e156      	b.n	800e506 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	4b41      	ldr	r3, [pc, #260]	@ (800e364 <tcp_receive+0xd00>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	429a      	cmp	r2, r3
 800e264:	d11d      	bne.n	800e2a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e266:	4b3e      	ldr	r3, [pc, #248]	@ (800e360 <tcp_receive+0xcfc>)
 800e268:	891a      	ldrh	r2, [r3, #8]
 800e26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26c:	891b      	ldrh	r3, [r3, #8]
 800e26e:	429a      	cmp	r2, r3
 800e270:	f240 814e 	bls.w	800e510 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e274:	483a      	ldr	r0, [pc, #232]	@ (800e360 <tcp_receive+0xcfc>)
 800e276:	f7fd fba1 	bl	800b9bc <tcp_seg_copy>
 800e27a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 8148 	beq.w	800e514 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800e284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e286:	2b00      	cmp	r3, #0
 800e288:	d003      	beq.n	800e292 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e002      	b.n	800e298 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	697a      	ldr	r2, [r7, #20]
 800e296:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e298:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e29a:	6978      	ldr	r0, [r7, #20]
 800e29c:	f7ff f8de 	bl	800d45c <tcp_oos_insert_segment>
                }
                break;
 800e2a0:	e138      	b.n	800e514 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d117      	bne.n	800e2d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e2a8:	4b2e      	ldr	r3, [pc, #184]	@ (800e364 <tcp_receive+0xd00>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	da57      	bge.n	800e368 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e2b8:	4829      	ldr	r0, [pc, #164]	@ (800e360 <tcp_receive+0xcfc>)
 800e2ba:	f7fd fb7f 	bl	800b9bc <tcp_seg_copy>
 800e2be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 8128 	beq.w	800e518 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	69ba      	ldr	r2, [r7, #24]
 800e2cc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e2ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e2d0:	69b8      	ldr	r0, [r7, #24]
 800e2d2:	f7ff f8c3 	bl	800d45c <tcp_oos_insert_segment>
                  }
                  break;
 800e2d6:	e11f      	b.n	800e518 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e2d8:	4b22      	ldr	r3, [pc, #136]	@ (800e364 <tcp_receive+0xd00>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	db3e      	blt.n	800e368 <tcp_receive+0xd04>
 800e2ea:	4b1e      	ldr	r3, [pc, #120]	@ (800e364 <tcp_receive+0xd00>)
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	dc35      	bgt.n	800e368 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e2fc:	4818      	ldr	r0, [pc, #96]	@ (800e360 <tcp_receive+0xcfc>)
 800e2fe:	f7fd fb5d 	bl	800b9bc <tcp_seg_copy>
 800e302:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f000 8108 	beq.w	800e51c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e314:	8912      	ldrh	r2, [r2, #8]
 800e316:	441a      	add	r2, r3
 800e318:	4b12      	ldr	r3, [pc, #72]	@ (800e364 <tcp_receive+0xd00>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	dd12      	ble.n	800e348 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e322:	4b10      	ldr	r3, [pc, #64]	@ (800e364 <tcp_receive+0xd00>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	b29a      	uxth	r2, r3
 800e328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	b29a      	uxth	r2, r3
 800e334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e336:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e33e:	891b      	ldrh	r3, [r3, #8]
 800e340:	4619      	mov	r1, r3
 800e342:	4610      	mov	r0, r2
 800e344:	f7fb fd3e 	bl	8009dc4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34a:	69fa      	ldr	r2, [r7, #28]
 800e34c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e34e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e350:	69f8      	ldr	r0, [r7, #28]
 800e352:	f7ff f883 	bl	800d45c <tcp_oos_insert_segment>
                  }
                  break;
 800e356:	e0e1      	b.n	800e51c <tcp_receive+0xeb8>
 800e358:	2401c6b0 	.word	0x2401c6b0
 800e35c:	2401c6ad 	.word	0x2401c6ad
 800e360:	2401c680 	.word	0x2401c680
 800e364:	2401c6a0 	.word	0x2401c6a0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	f040 80c5 	bne.w	800e500 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e376:	4b7f      	ldr	r3, [pc, #508]	@ (800e574 <tcp_receive+0xf10>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e382:	2b00      	cmp	r3, #0
 800e384:	f340 80bc 	ble.w	800e500 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	899b      	ldrh	r3, [r3, #12]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	4618      	mov	r0, r3
 800e392:	f7f7 ff9d 	bl	80062d0 <lwip_htons>
 800e396:	4603      	mov	r3, r0
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	f003 0301 	and.w	r3, r3, #1
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f040 80be 	bne.w	800e520 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e3a4:	4874      	ldr	r0, [pc, #464]	@ (800e578 <tcp_receive+0xf14>)
 800e3a6:	f7fd fb09 	bl	800b9bc <tcp_seg_copy>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f000 80b5 	beq.w	800e524 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3c2:	8912      	ldrh	r2, [r2, #8]
 800e3c4:	441a      	add	r2, r3
 800e3c6:	4b6b      	ldr	r3, [pc, #428]	@ (800e574 <tcp_receive+0xf10>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dd12      	ble.n	800e3f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e3d0:	4b68      	ldr	r3, [pc, #416]	@ (800e574 <tcp_receive+0xf10>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ec:	891b      	ldrh	r3, [r3, #8]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	f7fb fce7 	bl	8009dc4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e3f6:	4b61      	ldr	r3, [pc, #388]	@ (800e57c <tcp_receive+0xf18>)
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4b5d      	ldr	r3, [pc, #372]	@ (800e574 <tcp_receive+0xf10>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	441a      	add	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e40a:	440b      	add	r3, r1
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f340 8088 	ble.w	800e524 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	899b      	ldrh	r3, [r3, #12]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f7 ff56 	bl	80062d0 <lwip_htons>
 800e424:	4603      	mov	r3, r0
 800e426:	b2db      	uxtb	r3, r3
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d021      	beq.n	800e474 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	899b      	ldrh	r3, [r3, #12]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	b21b      	sxth	r3, r3
 800e43c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e440:	b21c      	sxth	r4, r3
 800e442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	899b      	ldrh	r3, [r3, #12]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f7 ff3f 	bl	80062d0 <lwip_htons>
 800e452:	4603      	mov	r3, r0
 800e454:	b2db      	uxtb	r3, r3
 800e456:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7f7 ff37 	bl	80062d0 <lwip_htons>
 800e462:	4603      	mov	r3, r0
 800e464:	b21b      	sxth	r3, r3
 800e466:	4323      	orrs	r3, r4
 800e468:	b21a      	sxth	r2, r3
 800e46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	b292      	uxth	r2, r2
 800e472:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e47e:	4413      	add	r3, r2
 800e480:	b299      	uxth	r1, r3
 800e482:	4b3c      	ldr	r3, [pc, #240]	@ (800e574 <tcp_receive+0xf10>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	b29a      	uxth	r2, r3
 800e488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	1a8a      	subs	r2, r1, r2
 800e48e:	b292      	uxth	r2, r2
 800e490:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	891b      	ldrh	r3, [r3, #8]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	f7fb fc8f 	bl	8009dc4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	891c      	ldrh	r4, [r3, #8]
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	899b      	ldrh	r3, [r3, #12]
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7f7 ff0a 	bl	80062d0 <lwip_htons>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	f003 0303 	and.w	r3, r3, #3
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <tcp_receive+0xe68>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e000      	b.n	800e4ce <tcp_receive+0xe6a>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	4423      	add	r3, r4
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	4b2a      	ldr	r3, [pc, #168]	@ (800e57c <tcp_receive+0xf18>)
 800e4d4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e4d6:	4b29      	ldr	r3, [pc, #164]	@ (800e57c <tcp_receive+0xf18>)
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4b25      	ldr	r3, [pc, #148]	@ (800e574 <tcp_receive+0xf10>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	441a      	add	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e6:	6879      	ldr	r1, [r7, #4]
 800e4e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e4ea:	440b      	add	r3, r1
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d019      	beq.n	800e524 <tcp_receive+0xec0>
 800e4f0:	4b23      	ldr	r3, [pc, #140]	@ (800e580 <tcp_receive+0xf1c>)
 800e4f2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e4f6:	4923      	ldr	r1, [pc, #140]	@ (800e584 <tcp_receive+0xf20>)
 800e4f8:	4823      	ldr	r0, [pc, #140]	@ (800e588 <tcp_receive+0xf24>)
 800e4fa:	f002 fe65 	bl	80111c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e4fe:	e011      	b.n	800e524 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f47f aea5 	bne.w	800e258 <tcp_receive+0xbf4>
 800e50e:	e00a      	b.n	800e526 <tcp_receive+0xec2>
                break;
 800e510:	bf00      	nop
 800e512:	e008      	b.n	800e526 <tcp_receive+0xec2>
                break;
 800e514:	bf00      	nop
 800e516:	e006      	b.n	800e526 <tcp_receive+0xec2>
                  break;
 800e518:	bf00      	nop
 800e51a:	e004      	b.n	800e526 <tcp_receive+0xec2>
                  break;
 800e51c:	bf00      	nop
 800e51e:	e002      	b.n	800e526 <tcp_receive+0xec2>
                  break;
 800e520:	bf00      	nop
 800e522:	e000      	b.n	800e526 <tcp_receive+0xec2>
                break;
 800e524:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f001 fa30 	bl	800f98c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e52c:	e003      	b.n	800e536 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f001 fa2c 	bl	800f98c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e534:	e01a      	b.n	800e56c <tcp_receive+0xf08>
 800e536:	e019      	b.n	800e56c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e538:	4b0e      	ldr	r3, [pc, #56]	@ (800e574 <tcp_receive+0xf10>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	db0a      	blt.n	800e55c <tcp_receive+0xef8>
 800e546:	4b0b      	ldr	r3, [pc, #44]	@ (800e574 <tcp_receive+0xf10>)
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e54e:	6879      	ldr	r1, [r7, #4]
 800e550:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e552:	440b      	add	r3, r1
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	3301      	adds	r3, #1
 800e558:	2b00      	cmp	r3, #0
 800e55a:	dd07      	ble.n	800e56c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	8b5b      	ldrh	r3, [r3, #26]
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	b29a      	uxth	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e56a:	e7ff      	b.n	800e56c <tcp_receive+0xf08>
 800e56c:	bf00      	nop
 800e56e:	3750      	adds	r7, #80	@ 0x50
 800e570:	46bd      	mov	sp, r7
 800e572:	bdb0      	pop	{r4, r5, r7, pc}
 800e574:	2401c6a0 	.word	0x2401c6a0
 800e578:	2401c680 	.word	0x2401c680
 800e57c:	2401c6aa 	.word	0x2401c6aa
 800e580:	08014148 	.word	0x08014148
 800e584:	0801451c 	.word	0x0801451c
 800e588:	080141c0 	.word	0x080141c0

0800e58c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e592:	4b15      	ldr	r3, [pc, #84]	@ (800e5e8 <tcp_get_next_optbyte+0x5c>)
 800e594:	881b      	ldrh	r3, [r3, #0]
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	b291      	uxth	r1, r2
 800e59a:	4a13      	ldr	r2, [pc, #76]	@ (800e5e8 <tcp_get_next_optbyte+0x5c>)
 800e59c:	8011      	strh	r1, [r2, #0]
 800e59e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e5a0:	4b12      	ldr	r3, [pc, #72]	@ (800e5ec <tcp_get_next_optbyte+0x60>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d004      	beq.n	800e5b2 <tcp_get_next_optbyte+0x26>
 800e5a8:	4b11      	ldr	r3, [pc, #68]	@ (800e5f0 <tcp_get_next_optbyte+0x64>)
 800e5aa:	881b      	ldrh	r3, [r3, #0]
 800e5ac:	88fa      	ldrh	r2, [r7, #6]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d208      	bcs.n	800e5c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e5b2:	4b10      	ldr	r3, [pc, #64]	@ (800e5f4 <tcp_get_next_optbyte+0x68>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3314      	adds	r3, #20
 800e5b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e5ba:	88fb      	ldrh	r3, [r7, #6]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	4413      	add	r3, r2
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	e00b      	b.n	800e5dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e5c4:	88fb      	ldrh	r3, [r7, #6]
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	4b09      	ldr	r3, [pc, #36]	@ (800e5f0 <tcp_get_next_optbyte+0x64>)
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e5d2:	4b06      	ldr	r3, [pc, #24]	@ (800e5ec <tcp_get_next_optbyte+0x60>)
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	797b      	ldrb	r3, [r7, #5]
 800e5d8:	4413      	add	r3, r2
 800e5da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr
 800e5e8:	2401c69c 	.word	0x2401c69c
 800e5ec:	2401c698 	.word	0x2401c698
 800e5f0:	2401c696 	.word	0x2401c696
 800e5f4:	2401c690 	.word	0x2401c690

0800e5f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <tcp_parseopt+0x1c>
 800e606:	4b32      	ldr	r3, [pc, #200]	@ (800e6d0 <tcp_parseopt+0xd8>)
 800e608:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e60c:	4931      	ldr	r1, [pc, #196]	@ (800e6d4 <tcp_parseopt+0xdc>)
 800e60e:	4832      	ldr	r0, [pc, #200]	@ (800e6d8 <tcp_parseopt+0xe0>)
 800e610:	f002 fdda 	bl	80111c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e614:	4b31      	ldr	r3, [pc, #196]	@ (800e6dc <tcp_parseopt+0xe4>)
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d056      	beq.n	800e6ca <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e61c:	4b30      	ldr	r3, [pc, #192]	@ (800e6e0 <tcp_parseopt+0xe8>)
 800e61e:	2200      	movs	r2, #0
 800e620:	801a      	strh	r2, [r3, #0]
 800e622:	e046      	b.n	800e6b2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800e624:	f7ff ffb2 	bl	800e58c <tcp_get_next_optbyte>
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d006      	beq.n	800e640 <tcp_parseopt+0x48>
 800e632:	2b02      	cmp	r3, #2
 800e634:	dc2a      	bgt.n	800e68c <tcp_parseopt+0x94>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d042      	beq.n	800e6c0 <tcp_parseopt+0xc8>
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d038      	beq.n	800e6b0 <tcp_parseopt+0xb8>
 800e63e:	e025      	b.n	800e68c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e640:	f7ff ffa4 	bl	800e58c <tcp_get_next_optbyte>
 800e644:	4603      	mov	r3, r0
 800e646:	2b04      	cmp	r3, #4
 800e648:	d13c      	bne.n	800e6c4 <tcp_parseopt+0xcc>
 800e64a:	4b25      	ldr	r3, [pc, #148]	@ (800e6e0 <tcp_parseopt+0xe8>)
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	3301      	adds	r3, #1
 800e650:	4a22      	ldr	r2, [pc, #136]	@ (800e6dc <tcp_parseopt+0xe4>)
 800e652:	8812      	ldrh	r2, [r2, #0]
 800e654:	4293      	cmp	r3, r2
 800e656:	da35      	bge.n	800e6c4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e658:	f7ff ff98 	bl	800e58c <tcp_get_next_optbyte>
 800e65c:	4603      	mov	r3, r0
 800e65e:	021b      	lsls	r3, r3, #8
 800e660:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e662:	f7ff ff93 	bl	800e58c <tcp_get_next_optbyte>
 800e666:	4603      	mov	r3, r0
 800e668:	461a      	mov	r2, r3
 800e66a:	89bb      	ldrh	r3, [r7, #12]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e670:	89bb      	ldrh	r3, [r7, #12]
 800e672:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e676:	d804      	bhi.n	800e682 <tcp_parseopt+0x8a>
 800e678:	89bb      	ldrh	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <tcp_parseopt+0x8a>
 800e67e:	89ba      	ldrh	r2, [r7, #12]
 800e680:	e001      	b.n	800e686 <tcp_parseopt+0x8e>
 800e682:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800e68a:	e012      	b.n	800e6b2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e68c:	f7ff ff7e 	bl	800e58c <tcp_get_next_optbyte>
 800e690:	4603      	mov	r3, r0
 800e692:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e694:	7afb      	ldrb	r3, [r7, #11]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d916      	bls.n	800e6c8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e69a:	7afb      	ldrb	r3, [r7, #11]
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	4b10      	ldr	r3, [pc, #64]	@ (800e6e0 <tcp_parseopt+0xe8>)
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	3b02      	subs	r3, #2
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e0 <tcp_parseopt+0xe8>)
 800e6ac:	801a      	strh	r2, [r3, #0]
 800e6ae:	e000      	b.n	800e6b2 <tcp_parseopt+0xba>
          break;
 800e6b0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e0 <tcp_parseopt+0xe8>)
 800e6b4:	881a      	ldrh	r2, [r3, #0]
 800e6b6:	4b09      	ldr	r3, [pc, #36]	@ (800e6dc <tcp_parseopt+0xe4>)
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d3b2      	bcc.n	800e624 <tcp_parseopt+0x2c>
 800e6be:	e004      	b.n	800e6ca <tcp_parseopt+0xd2>
          return;
 800e6c0:	bf00      	nop
 800e6c2:	e002      	b.n	800e6ca <tcp_parseopt+0xd2>
            return;
 800e6c4:	bf00      	nop
 800e6c6:	e000      	b.n	800e6ca <tcp_parseopt+0xd2>
            return;
 800e6c8:	bf00      	nop
      }
    }
  }
}
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	08014148 	.word	0x08014148
 800e6d4:	080145d8 	.word	0x080145d8
 800e6d8:	080141c0 	.word	0x080141c0
 800e6dc:	2401c694 	.word	0x2401c694
 800e6e0:	2401c69c 	.word	0x2401c69c

0800e6e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e6e8:	4b05      	ldr	r3, [pc, #20]	@ (800e700 <tcp_trigger_input_pcb_close+0x1c>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f043 0310 	orr.w	r3, r3, #16
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	4b03      	ldr	r3, [pc, #12]	@ (800e700 <tcp_trigger_input_pcb_close+0x1c>)
 800e6f4:	701a      	strb	r2, [r3, #0]
}
 800e6f6:	bf00      	nop
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	2401c6ad 	.word	0x2401c6ad

0800e704 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <tcp_route+0x28>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	7a1b      	ldrb	r3, [r3, #8]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d006      	beq.n	800e72c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	7a1b      	ldrb	r3, [r3, #8]
 800e722:	4618      	mov	r0, r3
 800e724:	f7fb f974 	bl	8009a10 <netif_get_by_index>
 800e728:	4603      	mov	r3, r0
 800e72a:	e003      	b.n	800e734 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7f9 f8a5 	bl	800787c <ip4_route>
 800e732:	4603      	mov	r3, r0
  }
}
 800e734:	4618      	mov	r0, r3
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b087      	sub	sp, #28
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	603b      	str	r3, [r7, #0]
 800e748:	4613      	mov	r3, r2
 800e74a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d105      	bne.n	800e75e <tcp_create_segment+0x22>
 800e752:	4b43      	ldr	r3, [pc, #268]	@ (800e860 <tcp_create_segment+0x124>)
 800e754:	22a3      	movs	r2, #163	@ 0xa3
 800e756:	4943      	ldr	r1, [pc, #268]	@ (800e864 <tcp_create_segment+0x128>)
 800e758:	4843      	ldr	r0, [pc, #268]	@ (800e868 <tcp_create_segment+0x12c>)
 800e75a:	f002 fd35 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d105      	bne.n	800e770 <tcp_create_segment+0x34>
 800e764:	4b3e      	ldr	r3, [pc, #248]	@ (800e860 <tcp_create_segment+0x124>)
 800e766:	22a4      	movs	r2, #164	@ 0xa4
 800e768:	4940      	ldr	r1, [pc, #256]	@ (800e86c <tcp_create_segment+0x130>)
 800e76a:	483f      	ldr	r0, [pc, #252]	@ (800e868 <tcp_create_segment+0x12c>)
 800e76c:	f002 fd2c 	bl	80111c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e770:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 0304 	and.w	r3, r3, #4
 800e77c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e77e:	2004      	movs	r0, #4
 800e780:	f7fa fdbc 	bl	80092fc <memp_malloc>
 800e784:	6138      	str	r0, [r7, #16]
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d104      	bne.n	800e796 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e78c:	68b8      	ldr	r0, [r7, #8]
 800e78e:	f7fb fc9d 	bl	800a0cc <pbuf_free>
    return NULL;
 800e792:	2300      	movs	r3, #0
 800e794:	e060      	b.n	800e858 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e79c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	891a      	ldrh	r2, [r3, #8]
 800e7ae:	7dfb      	ldrb	r3, [r7, #23]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d205      	bcs.n	800e7c2 <tcp_create_segment+0x86>
 800e7b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e860 <tcp_create_segment+0x124>)
 800e7b8:	22b0      	movs	r2, #176	@ 0xb0
 800e7ba:	492d      	ldr	r1, [pc, #180]	@ (800e870 <tcp_create_segment+0x134>)
 800e7bc:	482a      	ldr	r0, [pc, #168]	@ (800e868 <tcp_create_segment+0x12c>)
 800e7be:	f002 fd03 	bl	80111c8 <iprintf>
  seg->len = p->tot_len - optlen;
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	891a      	ldrh	r2, [r3, #8]
 800e7c6:	7dfb      	ldrb	r3, [r7, #23]
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	1ad3      	subs	r3, r2, r3
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e7d2:	2114      	movs	r1, #20
 800e7d4:	68b8      	ldr	r0, [r7, #8]
 800e7d6:	f7fb fbe3 	bl	8009fa0 <pbuf_add_header>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d004      	beq.n	800e7ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e7e0:	6938      	ldr	r0, [r7, #16]
 800e7e2:	f7fd f8d2 	bl	800b98a <tcp_seg_free>
    return NULL;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e036      	b.n	800e858 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8ada      	ldrh	r2, [r3, #22]
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	68dc      	ldr	r4, [r3, #12]
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	f7f7 fd67 	bl	80062d0 <lwip_htons>
 800e802:	4603      	mov	r3, r0
 800e804:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	8b1a      	ldrh	r2, [r3, #24]
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	68dc      	ldr	r4, [r3, #12]
 800e80e:	4610      	mov	r0, r2
 800e810:	f7f7 fd5e 	bl	80062d0 <lwip_htons>
 800e814:	4603      	mov	r3, r0
 800e816:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	68dc      	ldr	r4, [r3, #12]
 800e81c:	6838      	ldr	r0, [r7, #0]
 800e81e:	f7f7 fd6c 	bl	80062fa <lwip_htonl>
 800e822:	4603      	mov	r3, r0
 800e824:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	089b      	lsrs	r3, r3, #2
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	3305      	adds	r3, #5
 800e82e:	b29b      	uxth	r3, r3
 800e830:	031b      	lsls	r3, r3, #12
 800e832:	b29a      	uxth	r2, r3
 800e834:	79fb      	ldrb	r3, [r7, #7]
 800e836:	b29b      	uxth	r3, r3
 800e838:	4313      	orrs	r3, r2
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	68dc      	ldr	r4, [r3, #12]
 800e840:	4610      	mov	r0, r2
 800e842:	f7f7 fd45 	bl	80062d0 <lwip_htons>
 800e846:	4603      	mov	r3, r0
 800e848:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	749a      	strb	r2, [r3, #18]
 800e852:	2200      	movs	r2, #0
 800e854:	74da      	strb	r2, [r3, #19]
  return seg;
 800e856:	693b      	ldr	r3, [r7, #16]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	371c      	adds	r7, #28
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd90      	pop	{r4, r7, pc}
 800e860:	080145f4 	.word	0x080145f4
 800e864:	08014654 	.word	0x08014654
 800e868:	08014674 	.word	0x08014674
 800e86c:	0801469c 	.word	0x0801469c
 800e870:	080146c0 	.word	0x080146c0

0800e874 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b08b      	sub	sp, #44	@ 0x2c
 800e878:	af02      	add	r7, sp, #8
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	460b      	mov	r3, r1
 800e87e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e880:	2300      	movs	r3, #0
 800e882:	61fb      	str	r3, [r7, #28]
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e888:	2300      	movs	r3, #0
 800e88a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d106      	bne.n	800e8a0 <tcp_split_unsent_seg+0x2c>
 800e892:	4b95      	ldr	r3, [pc, #596]	@ (800eae8 <tcp_split_unsent_seg+0x274>)
 800e894:	f240 324b 	movw	r2, #843	@ 0x34b
 800e898:	4994      	ldr	r1, [pc, #592]	@ (800eaec <tcp_split_unsent_seg+0x278>)
 800e89a:	4895      	ldr	r0, [pc, #596]	@ (800eaf0 <tcp_split_unsent_seg+0x27c>)
 800e89c:	f002 fc94 	bl	80111c8 <iprintf>

  useg = pcb->unsent;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d102      	bne.n	800e8b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b0:	e116      	b.n	800eae0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e8b2:	887b      	ldrh	r3, [r7, #2]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d109      	bne.n	800e8cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e8b8:	4b8b      	ldr	r3, [pc, #556]	@ (800eae8 <tcp_split_unsent_seg+0x274>)
 800e8ba:	f240 3253 	movw	r2, #851	@ 0x353
 800e8be:	498d      	ldr	r1, [pc, #564]	@ (800eaf4 <tcp_split_unsent_seg+0x280>)
 800e8c0:	488b      	ldr	r0, [pc, #556]	@ (800eaf0 <tcp_split_unsent_seg+0x27c>)
 800e8c2:	f002 fc81 	bl	80111c8 <iprintf>
    return ERR_VAL;
 800e8c6:	f06f 0305 	mvn.w	r3, #5
 800e8ca:	e109      	b.n	800eae0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	891b      	ldrh	r3, [r3, #8]
 800e8d0:	887a      	ldrh	r2, [r7, #2]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d301      	bcc.n	800e8da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	e102      	b.n	800eae0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8de:	887a      	ldrh	r2, [r7, #2]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d906      	bls.n	800e8f2 <tcp_split_unsent_seg+0x7e>
 800e8e4:	4b80      	ldr	r3, [pc, #512]	@ (800eae8 <tcp_split_unsent_seg+0x274>)
 800e8e6:	f240 325b 	movw	r2, #859	@ 0x35b
 800e8ea:	4983      	ldr	r1, [pc, #524]	@ (800eaf8 <tcp_split_unsent_seg+0x284>)
 800e8ec:	4880      	ldr	r0, [pc, #512]	@ (800eaf0 <tcp_split_unsent_seg+0x27c>)
 800e8ee:	f002 fc6b 	bl	80111c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	891b      	ldrh	r3, [r3, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <tcp_split_unsent_seg+0x94>
 800e8fa:	4b7b      	ldr	r3, [pc, #492]	@ (800eae8 <tcp_split_unsent_seg+0x274>)
 800e8fc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e900:	497e      	ldr	r1, [pc, #504]	@ (800eafc <tcp_split_unsent_seg+0x288>)
 800e902:	487b      	ldr	r0, [pc, #492]	@ (800eaf0 <tcp_split_unsent_seg+0x27c>)
 800e904:	f002 fc60 	bl	80111c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	7a9b      	ldrb	r3, [r3, #10]
 800e90c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	b2db      	uxtb	r3, r3
 800e914:	f003 0304 	and.w	r3, r3, #4
 800e918:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	891a      	ldrh	r2, [r3, #8]
 800e91e:	887b      	ldrh	r3, [r7, #2]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e924:	7bbb      	ldrb	r3, [r7, #14]
 800e926:	b29a      	uxth	r2, r3
 800e928:	89bb      	ldrh	r3, [r7, #12]
 800e92a:	4413      	add	r3, r2
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e932:	4619      	mov	r1, r3
 800e934:	2036      	movs	r0, #54	@ 0x36
 800e936:	f7fb f8e7 	bl	8009b08 <pbuf_alloc>
 800e93a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 80b7 	beq.w	800eab2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	891a      	ldrh	r2, [r3, #8]
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	891b      	ldrh	r3, [r3, #8]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	b29a      	uxth	r2, r3
 800e952:	887b      	ldrh	r3, [r7, #2]
 800e954:	4413      	add	r3, r2
 800e956:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	6858      	ldr	r0, [r3, #4]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	685a      	ldr	r2, [r3, #4]
 800e960:	7bbb      	ldrb	r3, [r7, #14]
 800e962:	18d1      	adds	r1, r2, r3
 800e964:	897b      	ldrh	r3, [r7, #10]
 800e966:	89ba      	ldrh	r2, [r7, #12]
 800e968:	f7fb fdaa 	bl	800a4c0 <pbuf_copy_partial>
 800e96c:	4603      	mov	r3, r0
 800e96e:	461a      	mov	r2, r3
 800e970:	89bb      	ldrh	r3, [r7, #12]
 800e972:	4293      	cmp	r3, r2
 800e974:	f040 809f 	bne.w	800eab6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	899b      	ldrh	r3, [r3, #12]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	4618      	mov	r0, r3
 800e982:	f7f7 fca5 	bl	80062d0 <lwip_htons>
 800e986:	4603      	mov	r3, r0
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e98e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e990:	2300      	movs	r3, #0
 800e992:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e994:	7efb      	ldrb	r3, [r7, #27]
 800e996:	f003 0308 	and.w	r3, r3, #8
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d007      	beq.n	800e9ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e99e:	7efb      	ldrb	r3, [r7, #27]
 800e9a0:	f023 0308 	bic.w	r3, r3, #8
 800e9a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e9a6:	7ebb      	ldrb	r3, [r7, #26]
 800e9a8:	f043 0308 	orr.w	r3, r3, #8
 800e9ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e9ae:	7efb      	ldrb	r3, [r7, #27]
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d007      	beq.n	800e9c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e9b8:	7efb      	ldrb	r3, [r7, #27]
 800e9ba:	f023 0301 	bic.w	r3, r3, #1
 800e9be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e9c0:	7ebb      	ldrb	r3, [r7, #26]
 800e9c2:	f043 0301 	orr.w	r3, r3, #1
 800e9c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f7 fc93 	bl	80062fa <lwip_htonl>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	887b      	ldrh	r3, [r7, #2]
 800e9d8:	18d1      	adds	r1, r2, r3
 800e9da:	7eba      	ldrb	r2, [r7, #26]
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	6939      	ldr	r1, [r7, #16]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff fea9 	bl	800e73c <tcp_create_segment>
 800e9ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d063      	beq.n	800eaba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fb fbf0 	bl	800a1dc <pbuf_clen>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461a      	mov	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea06:	1a9b      	subs	r3, r3, r2
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	6858      	ldr	r0, [r3, #4]
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	891a      	ldrh	r2, [r3, #8]
 800ea1a:	89bb      	ldrh	r3, [r7, #12]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	4619      	mov	r1, r3
 800ea22:	f7fb f9cf 	bl	8009dc4 <pbuf_realloc>
  useg->len -= remainder;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	891a      	ldrh	r2, [r3, #8]
 800ea2a:	89bb      	ldrh	r3, [r7, #12]
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	b29c      	uxth	r4, r3
 800ea3c:	7efb      	ldrb	r3, [r7, #27]
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7f7 fc45 	bl	80062d0 <lwip_htons>
 800ea46:	4603      	mov	r3, r0
 800ea48:	461a      	mov	r2, r3
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	4322      	orrs	r2, r4
 800ea50:	b292      	uxth	r2, r2
 800ea52:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fb fbbf 	bl	800a1dc <pbuf_clen>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	461a      	mov	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea68:	4413      	add	r3, r2
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fb fbb0 	bl	800a1dc <pbuf_clen>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea86:	4413      	add	r3, r2
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d103      	bne.n	800eaae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e016      	b.n	800eae0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800eab2:	bf00      	nop
 800eab4:	e002      	b.n	800eabc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eab6:	bf00      	nop
 800eab8:	e000      	b.n	800eabc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eaba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d006      	beq.n	800ead0 <tcp_split_unsent_seg+0x25c>
 800eac2:	4b09      	ldr	r3, [pc, #36]	@ (800eae8 <tcp_split_unsent_seg+0x274>)
 800eac4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800eac8:	490d      	ldr	r1, [pc, #52]	@ (800eb00 <tcp_split_unsent_seg+0x28c>)
 800eaca:	4809      	ldr	r0, [pc, #36]	@ (800eaf0 <tcp_split_unsent_seg+0x27c>)
 800eacc:	f002 fb7c 	bl	80111c8 <iprintf>
  if (p != NULL) {
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ead6:	6938      	ldr	r0, [r7, #16]
 800ead8:	f7fb faf8 	bl	800a0cc <pbuf_free>
  }

  return ERR_MEM;
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3724      	adds	r7, #36	@ 0x24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd90      	pop	{r4, r7, pc}
 800eae8:	080145f4 	.word	0x080145f4
 800eaec:	080149b4 	.word	0x080149b4
 800eaf0:	08014674 	.word	0x08014674
 800eaf4:	080149d8 	.word	0x080149d8
 800eaf8:	080149fc 	.word	0x080149fc
 800eafc:	08014a0c 	.word	0x08014a0c
 800eb00:	08014a1c 	.word	0x08014a1c

0800eb04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eb04:	b590      	push	{r4, r7, lr}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d106      	bne.n	800eb20 <tcp_send_fin+0x1c>
 800eb12:	4b21      	ldr	r3, [pc, #132]	@ (800eb98 <tcp_send_fin+0x94>)
 800eb14:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800eb18:	4920      	ldr	r1, [pc, #128]	@ (800eb9c <tcp_send_fin+0x98>)
 800eb1a:	4821      	ldr	r0, [pc, #132]	@ (800eba0 <tcp_send_fin+0x9c>)
 800eb1c:	f002 fb54 	bl	80111c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d02e      	beq.n	800eb86 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb2c:	60fb      	str	r3, [r7, #12]
 800eb2e:	e002      	b.n	800eb36 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1f8      	bne.n	800eb30 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	899b      	ldrh	r3, [r3, #12]
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7f7 fbc2 	bl	80062d0 <lwip_htons>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 0307 	and.w	r3, r3, #7
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d116      	bne.n	800eb86 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	899b      	ldrh	r3, [r3, #12]
 800eb5e:	b29c      	uxth	r4, r3
 800eb60:	2001      	movs	r0, #1
 800eb62:	f7f7 fbb5 	bl	80062d0 <lwip_htons>
 800eb66:	4603      	mov	r3, r0
 800eb68:	461a      	mov	r2, r3
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	4322      	orrs	r2, r4
 800eb70:	b292      	uxth	r2, r2
 800eb72:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	8b5b      	ldrh	r3, [r3, #26]
 800eb78:	f043 0320 	orr.w	r3, r3, #32
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	e004      	b.n	800eb90 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800eb86:	2101      	movs	r1, #1
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f80b 	bl	800eba4 <tcp_enqueue_flags>
 800eb8e:	4603      	mov	r3, r0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3714      	adds	r7, #20
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd90      	pop	{r4, r7, pc}
 800eb98:	080145f4 	.word	0x080145f4
 800eb9c:	08014a28 	.word	0x08014a28
 800eba0:	08014674 	.word	0x08014674

0800eba4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08a      	sub	sp, #40	@ 0x28
 800eba8:	af02      	add	r7, sp, #8
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ebb8:	78fb      	ldrb	r3, [r7, #3]
 800ebba:	f003 0303 	and.w	r3, r3, #3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d106      	bne.n	800ebd0 <tcp_enqueue_flags+0x2c>
 800ebc2:	4b67      	ldr	r3, [pc, #412]	@ (800ed60 <tcp_enqueue_flags+0x1bc>)
 800ebc4:	f240 4211 	movw	r2, #1041	@ 0x411
 800ebc8:	4966      	ldr	r1, [pc, #408]	@ (800ed64 <tcp_enqueue_flags+0x1c0>)
 800ebca:	4867      	ldr	r0, [pc, #412]	@ (800ed68 <tcp_enqueue_flags+0x1c4>)
 800ebcc:	f002 fafc 	bl	80111c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <tcp_enqueue_flags+0x40>
 800ebd6:	4b62      	ldr	r3, [pc, #392]	@ (800ed60 <tcp_enqueue_flags+0x1bc>)
 800ebd8:	f240 4213 	movw	r2, #1043	@ 0x413
 800ebdc:	4963      	ldr	r1, [pc, #396]	@ (800ed6c <tcp_enqueue_flags+0x1c8>)
 800ebde:	4862      	ldr	r0, [pc, #392]	@ (800ed68 <tcp_enqueue_flags+0x1c4>)
 800ebe0:	f002 faf2 	bl	80111c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ebe4:	78fb      	ldrb	r3, [r7, #3]
 800ebe6:	f003 0302 	and.w	r3, r3, #2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d001      	beq.n	800ebf2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ebf2:	7ffb      	ldrb	r3, [r7, #31]
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	f003 0304 	and.w	r3, r3, #4
 800ebfc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec06:	4619      	mov	r1, r3
 800ec08:	2036      	movs	r0, #54	@ 0x36
 800ec0a:	f7fa ff7d 	bl	8009b08 <pbuf_alloc>
 800ec0e:	6138      	str	r0, [r7, #16]
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d109      	bne.n	800ec2a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	8b5b      	ldrh	r3, [r3, #26]
 800ec1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ec24:	f04f 33ff 	mov.w	r3, #4294967295
 800ec28:	e095      	b.n	800ed56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	895a      	ldrh	r2, [r3, #10]
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d206      	bcs.n	800ec44 <tcp_enqueue_flags+0xa0>
 800ec36:	4b4a      	ldr	r3, [pc, #296]	@ (800ed60 <tcp_enqueue_flags+0x1bc>)
 800ec38:	f240 4239 	movw	r2, #1081	@ 0x439
 800ec3c:	494c      	ldr	r1, [pc, #304]	@ (800ed70 <tcp_enqueue_flags+0x1cc>)
 800ec3e:	484a      	ldr	r0, [pc, #296]	@ (800ed68 <tcp_enqueue_flags+0x1c4>)
 800ec40:	f002 fac2 	bl	80111c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ec48:	78fa      	ldrb	r2, [r7, #3]
 800ec4a:	7ffb      	ldrb	r3, [r7, #31]
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	460b      	mov	r3, r1
 800ec50:	6939      	ldr	r1, [r7, #16]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff fd72 	bl	800e73c <tcp_create_segment>
 800ec58:	60f8      	str	r0, [r7, #12]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d109      	bne.n	800ec74 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	8b5b      	ldrh	r3, [r3, #26]
 800ec64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ec6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec72:	e070      	b.n	800ed56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	f003 0303 	and.w	r3, r3, #3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d006      	beq.n	800ec8e <tcp_enqueue_flags+0xea>
 800ec80:	4b37      	ldr	r3, [pc, #220]	@ (800ed60 <tcp_enqueue_flags+0x1bc>)
 800ec82:	f240 4242 	movw	r2, #1090	@ 0x442
 800ec86:	493b      	ldr	r1, [pc, #236]	@ (800ed74 <tcp_enqueue_flags+0x1d0>)
 800ec88:	4837      	ldr	r0, [pc, #220]	@ (800ed68 <tcp_enqueue_flags+0x1c4>)
 800ec8a:	f002 fa9d 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	891b      	ldrh	r3, [r3, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d006      	beq.n	800eca4 <tcp_enqueue_flags+0x100>
 800ec96:	4b32      	ldr	r3, [pc, #200]	@ (800ed60 <tcp_enqueue_flags+0x1bc>)
 800ec98:	f240 4243 	movw	r2, #1091	@ 0x443
 800ec9c:	4936      	ldr	r1, [pc, #216]	@ (800ed78 <tcp_enqueue_flags+0x1d4>)
 800ec9e:	4832      	ldr	r0, [pc, #200]	@ (800ed68 <tcp_enqueue_flags+0x1c4>)
 800eca0:	f002 fa92 	bl	80111c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d103      	bne.n	800ecb4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecb2:	e00d      	b.n	800ecd0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	e002      	b.n	800ecc2 <tcp_enqueue_flags+0x11e>
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	61bb      	str	r3, [r7, #24]
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1f8      	bne.n	800ecbc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ecd8:	78fb      	ldrb	r3, [r7, #3]
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d104      	bne.n	800ecec <tcp_enqueue_flags+0x148>
 800ece2:	78fb      	ldrb	r3, [r7, #3]
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	f003 0301 	and.w	r3, r3, #1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d006      	beq.n	800ed0e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	8b5b      	ldrh	r3, [r3, #26]
 800ed04:	f043 0320 	orr.w	r3, r3, #32
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fb fa62 	bl	800a1dc <pbuf_clen>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ed22:	4413      	add	r3, r2
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00e      	beq.n	800ed54 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <tcp_enqueue_flags+0x1b0>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <tcp_enqueue_flags+0x1b0>
 800ed46:	4b06      	ldr	r3, [pc, #24]	@ (800ed60 <tcp_enqueue_flags+0x1bc>)
 800ed48:	f240 4265 	movw	r2, #1125	@ 0x465
 800ed4c:	490b      	ldr	r1, [pc, #44]	@ (800ed7c <tcp_enqueue_flags+0x1d8>)
 800ed4e:	4806      	ldr	r0, [pc, #24]	@ (800ed68 <tcp_enqueue_flags+0x1c4>)
 800ed50:	f002 fa3a 	bl	80111c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3720      	adds	r7, #32
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	080145f4 	.word	0x080145f4
 800ed64:	08014a44 	.word	0x08014a44
 800ed68:	08014674 	.word	0x08014674
 800ed6c:	08014a9c 	.word	0x08014a9c
 800ed70:	08014abc 	.word	0x08014abc
 800ed74:	08014af8 	.word	0x08014af8
 800ed78:	08014b10 	.word	0x08014b10
 800ed7c:	08014b3c 	.word	0x08014b3c

0800ed80 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ed80:	b5b0      	push	{r4, r5, r7, lr}
 800ed82:	b08a      	sub	sp, #40	@ 0x28
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d106      	bne.n	800ed9c <tcp_output+0x1c>
 800ed8e:	4b8a      	ldr	r3, [pc, #552]	@ (800efb8 <tcp_output+0x238>)
 800ed90:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ed94:	4989      	ldr	r1, [pc, #548]	@ (800efbc <tcp_output+0x23c>)
 800ed96:	488a      	ldr	r0, [pc, #552]	@ (800efc0 <tcp_output+0x240>)
 800ed98:	f002 fa16 	bl	80111c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7d1b      	ldrb	r3, [r3, #20]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d106      	bne.n	800edb2 <tcp_output+0x32>
 800eda4:	4b84      	ldr	r3, [pc, #528]	@ (800efb8 <tcp_output+0x238>)
 800eda6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800edaa:	4986      	ldr	r1, [pc, #536]	@ (800efc4 <tcp_output+0x244>)
 800edac:	4884      	ldr	r0, [pc, #528]	@ (800efc0 <tcp_output+0x240>)
 800edae:	f002 fa0b 	bl	80111c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800edb2:	4b85      	ldr	r3, [pc, #532]	@ (800efc8 <tcp_output+0x248>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d101      	bne.n	800edc0 <tcp_output+0x40>
    return ERR_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	e1ce      	b.n	800f15e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edcc:	4293      	cmp	r3, r2
 800edce:	bf28      	it	cs
 800edd0:	4613      	movcs	r3, r2
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800eddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10b      	bne.n	800edfa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	8b5b      	ldrh	r3, [r3, #26]
 800ede6:	f003 0302 	and.w	r3, r3, #2
 800edea:	2b00      	cmp	r3, #0
 800edec:	f000 81aa 	beq.w	800f144 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fdcb 	bl	800f98c <tcp_send_empty_ack>
 800edf6:	4603      	mov	r3, r0
 800edf8:	e1b1      	b.n	800f15e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800edfa:	6879      	ldr	r1, [r7, #4]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	3304      	adds	r3, #4
 800ee00:	461a      	mov	r2, r3
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff fc7e 	bl	800e704 <tcp_route>
 800ee08:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d102      	bne.n	800ee16 <tcp_output+0x96>
    return ERR_RTE;
 800ee10:	f06f 0303 	mvn.w	r3, #3
 800ee14:	e1a3      	b.n	800f15e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <tcp_output+0xa4>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d111      	bne.n	800ee48 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d002      	beq.n	800ee30 <tcp_output+0xb0>
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	e000      	b.n	800ee32 <tcp_output+0xb2>
 800ee30:	2300      	movs	r3, #0
 800ee32:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <tcp_output+0xc0>
      return ERR_RTE;
 800ee3a:	f06f 0303 	mvn.w	r3, #3
 800ee3e:	e18e      	b.n	800f15e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ee48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7f7 fa53 	bl	80062fa <lwip_htonl>
 800ee54:	4602      	mov	r2, r0
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee5a:	1ad3      	subs	r3, r2, r3
 800ee5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee5e:	8912      	ldrh	r2, [r2, #8]
 800ee60:	4413      	add	r3, r2
 800ee62:	69ba      	ldr	r2, [r7, #24]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d227      	bcs.n	800eeb8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee6e:	461a      	mov	r2, r3
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d114      	bne.n	800eea0 <tcp_output+0x120>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d110      	bne.n	800eea0 <tcp_output+0x120>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10b      	bne.n	800eea0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	8b5b      	ldrh	r3, [r3, #26]
 800eea4:	f003 0302 	and.w	r3, r3, #2
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 814d 	beq.w	800f148 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 fd6c 	bl	800f98c <tcp_send_empty_ack>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	e152      	b.n	800f15e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eec4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800eec6:	6a3b      	ldr	r3, [r7, #32]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f000 811c 	beq.w	800f106 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800eece:	e002      	b.n	800eed6 <tcp_output+0x156>
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	623b      	str	r3, [r7, #32]
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1f8      	bne.n	800eed0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800eede:	e112      	b.n	800f106 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800eee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	899b      	ldrh	r3, [r3, #12]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7f7 f9f1 	bl	80062d0 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	f003 0304 	and.w	r3, r3, #4
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d006      	beq.n	800ef08 <tcp_output+0x188>
 800eefa:	4b2f      	ldr	r3, [pc, #188]	@ (800efb8 <tcp_output+0x238>)
 800eefc:	f240 5236 	movw	r2, #1334	@ 0x536
 800ef00:	4932      	ldr	r1, [pc, #200]	@ (800efcc <tcp_output+0x24c>)
 800ef02:	482f      	ldr	r0, [pc, #188]	@ (800efc0 <tcp_output+0x240>)
 800ef04:	f002 f960 	bl	80111c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d01f      	beq.n	800ef50 <tcp_output+0x1d0>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	8b5b      	ldrh	r3, [r3, #26]
 800ef14:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d119      	bne.n	800ef50 <tcp_output+0x1d0>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00b      	beq.n	800ef3c <tcp_output+0x1bc>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d110      	bne.n	800ef50 <tcp_output+0x1d0>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef32:	891a      	ldrh	r2, [r3, #8]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d209      	bcs.n	800ef50 <tcp_output+0x1d0>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d004      	beq.n	800ef50 <tcp_output+0x1d0>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ef4c:	2b08      	cmp	r3, #8
 800ef4e:	d901      	bls.n	800ef54 <tcp_output+0x1d4>
 800ef50:	2301      	movs	r3, #1
 800ef52:	e000      	b.n	800ef56 <tcp_output+0x1d6>
 800ef54:	2300      	movs	r3, #0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	8b5b      	ldrh	r3, [r3, #26]
 800ef5e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 80e4 	beq.w	800f130 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	7d1b      	ldrb	r3, [r3, #20]
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d00d      	beq.n	800ef8c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ef70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	899b      	ldrh	r3, [r3, #12]
 800ef76:	b29c      	uxth	r4, r3
 800ef78:	2010      	movs	r0, #16
 800ef7a:	f7f7 f9a9 	bl	80062d0 <lwip_htons>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	461a      	mov	r2, r3
 800ef82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	4322      	orrs	r2, r4
 800ef88:	b292      	uxth	r2, r2
 800ef8a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ef8c:	697a      	ldr	r2, [r7, #20]
 800ef8e:	6879      	ldr	r1, [r7, #4]
 800ef90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef92:	f000 f909 	bl	800f1a8 <tcp_output_segment>
 800ef96:	4603      	mov	r3, r0
 800ef98:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ef9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d016      	beq.n	800efd0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	8b5b      	ldrh	r3, [r3, #26]
 800efa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	835a      	strh	r2, [r3, #26]
      return err;
 800efb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb4:	e0d3      	b.n	800f15e <tcp_output+0x3de>
 800efb6:	bf00      	nop
 800efb8:	080145f4 	.word	0x080145f4
 800efbc:	08014b64 	.word	0x08014b64
 800efc0:	08014674 	.word	0x08014674
 800efc4:	08014b7c 	.word	0x08014b7c
 800efc8:	2401c6b4 	.word	0x2401c6b4
 800efcc:	08014ba4 	.word	0x08014ba4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800efd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7d1b      	ldrb	r3, [r3, #20]
 800efdc:	2b02      	cmp	r3, #2
 800efde:	d006      	beq.n	800efee <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	8b5b      	ldrh	r3, [r3, #26]
 800efe4:	f023 0303 	bic.w	r3, r3, #3
 800efe8:	b29a      	uxth	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800efee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7f7 f980 	bl	80062fa <lwip_htonl>
 800effa:	4604      	mov	r4, r0
 800effc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effe:	891b      	ldrh	r3, [r3, #8]
 800f000:	461d      	mov	r5, r3
 800f002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	899b      	ldrh	r3, [r3, #12]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f7 f960 	bl	80062d0 <lwip_htons>
 800f010:	4603      	mov	r3, r0
 800f012:	b2db      	uxtb	r3, r3
 800f014:	f003 0303 	and.w	r3, r3, #3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d001      	beq.n	800f020 <tcp_output+0x2a0>
 800f01c:	2301      	movs	r3, #1
 800f01e:	e000      	b.n	800f022 <tcp_output+0x2a2>
 800f020:	2300      	movs	r3, #0
 800f022:	442b      	add	r3, r5
 800f024:	4423      	add	r3, r4
 800f026:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	1ad3      	subs	r3, r2, r3
 800f030:	2b00      	cmp	r3, #0
 800f032:	da02      	bge.n	800f03a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03c:	891b      	ldrh	r3, [r3, #8]
 800f03e:	461c      	mov	r4, r3
 800f040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	899b      	ldrh	r3, [r3, #12]
 800f046:	b29b      	uxth	r3, r3
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f7 f941 	bl	80062d0 <lwip_htons>
 800f04e:	4603      	mov	r3, r0
 800f050:	b2db      	uxtb	r3, r3
 800f052:	f003 0303 	and.w	r3, r3, #3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <tcp_output+0x2de>
 800f05a:	2301      	movs	r3, #1
 800f05c:	e000      	b.n	800f060 <tcp_output+0x2e0>
 800f05e:	2300      	movs	r3, #0
 800f060:	4423      	add	r3, r4
 800f062:	2b00      	cmp	r3, #0
 800f064:	d049      	beq.n	800f0fa <tcp_output+0x37a>
      seg->next = NULL;
 800f066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f068:	2200      	movs	r2, #0
 800f06a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f070:	2b00      	cmp	r3, #0
 800f072:	d105      	bne.n	800f080 <tcp_output+0x300>
        pcb->unacked = seg;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f078:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800f07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07c:	623b      	str	r3, [r7, #32]
 800f07e:	e03f      	b.n	800f100 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	4618      	mov	r0, r3
 800f088:	f7f7 f937 	bl	80062fa <lwip_htonl>
 800f08c:	4604      	mov	r4, r0
 800f08e:	6a3b      	ldr	r3, [r7, #32]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	4618      	mov	r0, r3
 800f096:	f7f7 f930 	bl	80062fa <lwip_htonl>
 800f09a:	4603      	mov	r3, r0
 800f09c:	1ae3      	subs	r3, r4, r3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	da24      	bge.n	800f0ec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	3370      	adds	r3, #112	@ 0x70
 800f0a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f0a8:	e002      	b.n	800f0b0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f0b0:	69fb      	ldr	r3, [r7, #28]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d011      	beq.n	800f0dc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7f7 f91a 	bl	80062fa <lwip_htonl>
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ca:	68db      	ldr	r3, [r3, #12]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7f7 f913 	bl	80062fa <lwip_htonl>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	dbe6      	blt.n	800f0aa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	e009      	b.n	800f100 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f0ec:	6a3b      	ldr	r3, [r7, #32]
 800f0ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f0f2:	6a3b      	ldr	r3, [r7, #32]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	623b      	str	r3, [r7, #32]
 800f0f8:	e002      	b.n	800f100 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f0fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0fc:	f7fc fc45 	bl	800b98a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f104:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d012      	beq.n	800f132 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	4618      	mov	r0, r3
 800f114:	f7f7 f8f1 	bl	80062fa <lwip_htonl>
 800f118:	4602      	mov	r2, r0
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f122:	8912      	ldrh	r2, [r2, #8]
 800f124:	4413      	add	r3, r2
  while (seg != NULL &&
 800f126:	69ba      	ldr	r2, [r7, #24]
 800f128:	429a      	cmp	r2, r3
 800f12a:	f4bf aed9 	bcs.w	800eee0 <tcp_output+0x160>
 800f12e:	e000      	b.n	800f132 <tcp_output+0x3b2>
      break;
 800f130:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f136:	2b00      	cmp	r3, #0
 800f138:	d108      	bne.n	800f14c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800f142:	e004      	b.n	800f14e <tcp_output+0x3ce>
    goto output_done;
 800f144:	bf00      	nop
 800f146:	e002      	b.n	800f14e <tcp_output+0x3ce>
    goto output_done;
 800f148:	bf00      	nop
 800f14a:	e000      	b.n	800f14e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f14c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	8b5b      	ldrh	r3, [r3, #26]
 800f152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3728      	adds	r7, #40	@ 0x28
 800f162:	46bd      	mov	sp, r7
 800f164:	bdb0      	pop	{r4, r5, r7, pc}
 800f166:	bf00      	nop

0800f168 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d106      	bne.n	800f184 <tcp_output_segment_busy+0x1c>
 800f176:	4b09      	ldr	r3, [pc, #36]	@ (800f19c <tcp_output_segment_busy+0x34>)
 800f178:	f240 529a 	movw	r2, #1434	@ 0x59a
 800f17c:	4908      	ldr	r1, [pc, #32]	@ (800f1a0 <tcp_output_segment_busy+0x38>)
 800f17e:	4809      	ldr	r0, [pc, #36]	@ (800f1a4 <tcp_output_segment_busy+0x3c>)
 800f180:	f002 f822 	bl	80111c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	7b9b      	ldrb	r3, [r3, #14]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d001      	beq.n	800f192 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f18e:	2301      	movs	r3, #1
 800f190:	e000      	b.n	800f194 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	080145f4 	.word	0x080145f4
 800f1a0:	08014bbc 	.word	0x08014bbc
 800f1a4:	08014674 	.word	0x08014674

0800f1a8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f1a8:	b5b0      	push	{r4, r5, r7, lr}
 800f1aa:	b08c      	sub	sp, #48	@ 0x30
 800f1ac:	af04      	add	r7, sp, #16
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d106      	bne.n	800f1c8 <tcp_output_segment+0x20>
 800f1ba:	4b64      	ldr	r3, [pc, #400]	@ (800f34c <tcp_output_segment+0x1a4>)
 800f1bc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800f1c0:	4963      	ldr	r1, [pc, #396]	@ (800f350 <tcp_output_segment+0x1a8>)
 800f1c2:	4864      	ldr	r0, [pc, #400]	@ (800f354 <tcp_output_segment+0x1ac>)
 800f1c4:	f002 f800 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d106      	bne.n	800f1dc <tcp_output_segment+0x34>
 800f1ce:	4b5f      	ldr	r3, [pc, #380]	@ (800f34c <tcp_output_segment+0x1a4>)
 800f1d0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800f1d4:	4960      	ldr	r1, [pc, #384]	@ (800f358 <tcp_output_segment+0x1b0>)
 800f1d6:	485f      	ldr	r0, [pc, #380]	@ (800f354 <tcp_output_segment+0x1ac>)
 800f1d8:	f001 fff6 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d106      	bne.n	800f1f0 <tcp_output_segment+0x48>
 800f1e2:	4b5a      	ldr	r3, [pc, #360]	@ (800f34c <tcp_output_segment+0x1a4>)
 800f1e4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800f1e8:	495c      	ldr	r1, [pc, #368]	@ (800f35c <tcp_output_segment+0x1b4>)
 800f1ea:	485a      	ldr	r0, [pc, #360]	@ (800f354 <tcp_output_segment+0x1ac>)
 800f1ec:	f001 ffec 	bl	80111c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f7ff ffb9 	bl	800f168 <tcp_output_segment_busy>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	e0a1      	b.n	800f344 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	68dc      	ldr	r4, [r3, #12]
 800f208:	4610      	mov	r0, r2
 800f20a:	f7f7 f876 	bl	80062fa <lwip_htonl>
 800f20e:	4603      	mov	r3, r0
 800f210:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	68dc      	ldr	r4, [r3, #12]
 800f21a:	4610      	mov	r0, r2
 800f21c:	f7f7 f858 	bl	80062d0 <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f22c:	441a      	add	r2, r3
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	3314      	adds	r3, #20
 800f238:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	7a9b      	ldrb	r3, [r3, #10]
 800f23e:	f003 0301 	and.w	r3, r3, #1
 800f242:	2b00      	cmp	r3, #0
 800f244:	d015      	beq.n	800f272 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	3304      	adds	r3, #4
 800f24a:	461a      	mov	r2, r3
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800f252:	f7fc fe91 	bl	800bf78 <tcp_eff_send_mss_netif>
 800f256:	4603      	mov	r3, r0
 800f258:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f25a:	8b7b      	ldrh	r3, [r7, #26]
 800f25c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800f260:	4618      	mov	r0, r3
 800f262:	f7f7 f84a 	bl	80062fa <lwip_htonl>
 800f266:	4602      	mov	r2, r0
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	3304      	adds	r3, #4
 800f270:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f278:	2b00      	cmp	r3, #0
 800f27a:	da02      	bge.n	800f282 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	2200      	movs	r2, #0
 800f280:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10c      	bne.n	800f2a4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f28a:	4b35      	ldr	r3, [pc, #212]	@ (800f360 <tcp_output_segment+0x1b8>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	4618      	mov	r0, r3
 800f29a:	f7f7 f82e 	bl	80062fa <lwip_htonl>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	68da      	ldr	r2, [r3, #12]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	8959      	ldrh	r1, [r3, #10]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	8b3a      	ldrh	r2, [r7, #24]
 800f2be:	1a8a      	subs	r2, r1, r2
 800f2c0:	b292      	uxth	r2, r2
 800f2c2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	8919      	ldrh	r1, [r3, #8]
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	8b3a      	ldrh	r2, [r7, #24]
 800f2d0:	1a8a      	subs	r2, r1, r2
 800f2d2:	b292      	uxth	r2, r2
 800f2d4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	68fa      	ldr	r2, [r7, #12]
 800f2dc:	68d2      	ldr	r2, [r2, #12]
 800f2de:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	741a      	strb	r2, [r3, #16]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	68da      	ldr	r2, [r3, #12]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	7a9b      	ldrb	r3, [r3, #10]
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <tcp_output_segment+0x158>
 800f2fc:	2318      	movs	r3, #24
 800f2fe:	e000      	b.n	800f302 <tcp_output_segment+0x15a>
 800f300:	2314      	movs	r3, #20
 800f302:	4413      	add	r3, r2
 800f304:	69fa      	ldr	r2, [r7, #28]
 800f306:	429a      	cmp	r2, r3
 800f308:	d006      	beq.n	800f318 <tcp_output_segment+0x170>
 800f30a:	4b10      	ldr	r3, [pc, #64]	@ (800f34c <tcp_output_segment+0x1a4>)
 800f30c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800f310:	4914      	ldr	r1, [pc, #80]	@ (800f364 <tcp_output_segment+0x1bc>)
 800f312:	4810      	ldr	r0, [pc, #64]	@ (800f354 <tcp_output_segment+0x1ac>)
 800f314:	f001 ff58 	bl	80111c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6858      	ldr	r0, [r3, #4]
 800f31c:	68b9      	ldr	r1, [r7, #8]
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	1d1c      	adds	r4, r3, #4
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	7add      	ldrb	r5, [r3, #11]
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	7a9b      	ldrb	r3, [r3, #10]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	9202      	str	r2, [sp, #8]
 800f32e:	2206      	movs	r2, #6
 800f330:	9201      	str	r2, [sp, #4]
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	462b      	mov	r3, r5
 800f336:	4622      	mov	r2, r4
 800f338:	f7f8 fc6a 	bl	8007c10 <ip4_output_if>
 800f33c:	4603      	mov	r3, r0
 800f33e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f340:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3720      	adds	r7, #32
 800f348:	46bd      	mov	sp, r7
 800f34a:	bdb0      	pop	{r4, r5, r7, pc}
 800f34c:	080145f4 	.word	0x080145f4
 800f350:	08014be4 	.word	0x08014be4
 800f354:	08014674 	.word	0x08014674
 800f358:	08014c04 	.word	0x08014c04
 800f35c:	08014c24 	.word	0x08014c24
 800f360:	2401c668 	.word	0x2401c668
 800f364:	08014c48 	.word	0x08014c48

0800f368 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f368:	b5b0      	push	{r4, r5, r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <tcp_rexmit_rto_prepare+0x1c>
 800f376:	4b31      	ldr	r3, [pc, #196]	@ (800f43c <tcp_rexmit_rto_prepare+0xd4>)
 800f378:	f240 6263 	movw	r2, #1635	@ 0x663
 800f37c:	4930      	ldr	r1, [pc, #192]	@ (800f440 <tcp_rexmit_rto_prepare+0xd8>)
 800f37e:	4831      	ldr	r0, [pc, #196]	@ (800f444 <tcp_rexmit_rto_prepare+0xdc>)
 800f380:	f001 ff22 	bl	80111c8 <iprintf>

  if (pcb->unacked == NULL) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f38c:	f06f 0305 	mvn.w	r3, #5
 800f390:	e050      	b.n	800f434 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f396:	60fb      	str	r3, [r7, #12]
 800f398:	e00b      	b.n	800f3b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f7ff fee4 	bl	800f168 <tcp_output_segment_busy>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f3a6:	f06f 0305 	mvn.w	r3, #5
 800f3aa:	e043      	b.n	800f434 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	60fb      	str	r3, [r7, #12]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1ef      	bne.n	800f39a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	f7ff fed4 	bl	800f168 <tcp_output_segment_busy>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f3c6:	f06f 0305 	mvn.w	r3, #5
 800f3ca:	e033      	b.n	800f434 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8b5b      	ldrh	r3, [r3, #26]
 800f3e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7f6 ff7f 	bl	80062fa <lwip_htonl>
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	891b      	ldrh	r3, [r3, #8]
 800f402:	461d      	mov	r5, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	899b      	ldrh	r3, [r3, #12]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7f6 ff5f 	bl	80062d0 <lwip_htons>
 800f412:	4603      	mov	r3, r0
 800f414:	b2db      	uxtb	r3, r3
 800f416:	f003 0303 	and.w	r3, r3, #3
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <tcp_rexmit_rto_prepare+0xba>
 800f41e:	2301      	movs	r3, #1
 800f420:	e000      	b.n	800f424 <tcp_rexmit_rto_prepare+0xbc>
 800f422:	2300      	movs	r3, #0
 800f424:	442b      	add	r3, r5
 800f426:	18e2      	adds	r2, r4, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	3710      	adds	r7, #16
 800f438:	46bd      	mov	sp, r7
 800f43a:	bdb0      	pop	{r4, r5, r7, pc}
 800f43c:	080145f4 	.word	0x080145f4
 800f440:	08014c5c 	.word	0x08014c5c
 800f444:	08014674 	.word	0x08014674

0800f448 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d106      	bne.n	800f464 <tcp_rexmit_rto_commit+0x1c>
 800f456:	4b0d      	ldr	r3, [pc, #52]	@ (800f48c <tcp_rexmit_rto_commit+0x44>)
 800f458:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f45c:	490c      	ldr	r1, [pc, #48]	@ (800f490 <tcp_rexmit_rto_commit+0x48>)
 800f45e:	480d      	ldr	r0, [pc, #52]	@ (800f494 <tcp_rexmit_rto_commit+0x4c>)
 800f460:	f001 feb2 	bl	80111c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f46a:	2bff      	cmp	r3, #255	@ 0xff
 800f46c:	d007      	beq.n	800f47e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f474:	3301      	adds	r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff fc7e 	bl	800ed80 <tcp_output>
}
 800f484:	bf00      	nop
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	080145f4 	.word	0x080145f4
 800f490:	08014c80 	.word	0x08014c80
 800f494:	08014674 	.word	0x08014674

0800f498 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <tcp_rexmit_rto+0x1c>
 800f4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f4d0 <tcp_rexmit_rto+0x38>)
 800f4a8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800f4ac:	4909      	ldr	r1, [pc, #36]	@ (800f4d4 <tcp_rexmit_rto+0x3c>)
 800f4ae:	480a      	ldr	r0, [pc, #40]	@ (800f4d8 <tcp_rexmit_rto+0x40>)
 800f4b0:	f001 fe8a 	bl	80111c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff ff57 	bl	800f368 <tcp_rexmit_rto_prepare>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d102      	bne.n	800f4c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ffc1 	bl	800f448 <tcp_rexmit_rto_commit>
  }
}
 800f4c6:	bf00      	nop
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	080145f4 	.word	0x080145f4
 800f4d4:	08014ca4 	.word	0x08014ca4
 800f4d8:	08014674 	.word	0x08014674

0800f4dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f4dc:	b590      	push	{r4, r7, lr}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d106      	bne.n	800f4f8 <tcp_rexmit+0x1c>
 800f4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800f5a8 <tcp_rexmit+0xcc>)
 800f4ec:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800f4f0:	492e      	ldr	r1, [pc, #184]	@ (800f5ac <tcp_rexmit+0xd0>)
 800f4f2:	482f      	ldr	r0, [pc, #188]	@ (800f5b0 <tcp_rexmit+0xd4>)
 800f4f4:	f001 fe68 	bl	80111c8 <iprintf>

  if (pcb->unacked == NULL) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d102      	bne.n	800f506 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f500:	f06f 0305 	mvn.w	r3, #5
 800f504:	e04c      	b.n	800f5a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f50a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f50c:	68b8      	ldr	r0, [r7, #8]
 800f50e:	f7ff fe2b 	bl	800f168 <tcp_output_segment_busy>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d002      	beq.n	800f51e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f518:	f06f 0305 	mvn.w	r3, #5
 800f51c:	e040      	b.n	800f5a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	336c      	adds	r3, #108	@ 0x6c
 800f52a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f52c:	e002      	b.n	800f534 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d011      	beq.n	800f560 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4618      	mov	r0, r3
 800f546:	f7f6 fed8 	bl	80062fa <lwip_htonl>
 800f54a:	4604      	mov	r4, r0
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	4618      	mov	r0, r3
 800f554:	f7f6 fed1 	bl	80062fa <lwip_htonl>
 800f558:	4603      	mov	r3, r0
 800f55a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	dbe6      	blt.n	800f52e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d103      	bne.n	800f57e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2200      	movs	r2, #0
 800f57a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f584:	2bff      	cmp	r3, #255	@ 0xff
 800f586:	d007      	beq.n	800f598 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f58e:	3301      	adds	r3, #1
 800f590:	b2da      	uxtb	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f59e:	2300      	movs	r3, #0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd90      	pop	{r4, r7, pc}
 800f5a8:	080145f4 	.word	0x080145f4
 800f5ac:	08014cc0 	.word	0x08014cc0
 800f5b0:	08014674 	.word	0x08014674

0800f5b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <tcp_rexmit_fast+0x1c>
 800f5c2:	4b2a      	ldr	r3, [pc, #168]	@ (800f66c <tcp_rexmit_fast+0xb8>)
 800f5c4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800f5c8:	4929      	ldr	r1, [pc, #164]	@ (800f670 <tcp_rexmit_fast+0xbc>)
 800f5ca:	482a      	ldr	r0, [pc, #168]	@ (800f674 <tcp_rexmit_fast+0xc0>)
 800f5cc:	f001 fdfc 	bl	80111c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d045      	beq.n	800f664 <tcp_rexmit_fast+0xb0>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	8b5b      	ldrh	r3, [r3, #26]
 800f5dc:	f003 0304 	and.w	r3, r3, #4
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d13f      	bne.n	800f664 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff ff79 	bl	800f4dc <tcp_rexmit>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d139      	bne.n	800f664 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	bf28      	it	cs
 800f600:	4613      	movcs	r3, r2
 800f602:	b29b      	uxth	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	da00      	bge.n	800f60a <tcp_rexmit_fast+0x56>
 800f608:	3301      	adds	r3, #1
 800f60a:	105b      	asrs	r3, r3, #1
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f61a:	461a      	mov	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	429a      	cmp	r2, r3
 800f624:	d206      	bcs.n	800f634 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f63e:	4619      	mov	r1, r3
 800f640:	0049      	lsls	r1, r1, #1
 800f642:	440b      	add	r3, r1
 800f644:	b29b      	uxth	r3, r3
 800f646:	4413      	add	r3, r2
 800f648:	b29a      	uxth	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8b5b      	ldrh	r3, [r3, #26]
 800f654:	f043 0304 	orr.w	r3, r3, #4
 800f658:	b29a      	uxth	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	080145f4 	.word	0x080145f4
 800f670:	08014cd8 	.word	0x08014cd8
 800f674:	08014674 	.word	0x08014674

0800f678 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	607b      	str	r3, [r7, #4]
 800f682:	460b      	mov	r3, r1
 800f684:	817b      	strh	r3, [r7, #10]
 800f686:	4613      	mov	r3, r2
 800f688:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f68a:	897a      	ldrh	r2, [r7, #10]
 800f68c:	893b      	ldrh	r3, [r7, #8]
 800f68e:	4413      	add	r3, r2
 800f690:	b29b      	uxth	r3, r3
 800f692:	3314      	adds	r3, #20
 800f694:	b29b      	uxth	r3, r3
 800f696:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f69a:	4619      	mov	r1, r3
 800f69c:	2022      	movs	r0, #34	@ 0x22
 800f69e:	f7fa fa33 	bl	8009b08 <pbuf_alloc>
 800f6a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d04d      	beq.n	800f746 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f6aa:	897b      	ldrh	r3, [r7, #10]
 800f6ac:	3313      	adds	r3, #19
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	8952      	ldrh	r2, [r2, #10]
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	db06      	blt.n	800f6c4 <tcp_output_alloc_header_common+0x4c>
 800f6b6:	4b26      	ldr	r3, [pc, #152]	@ (800f750 <tcp_output_alloc_header_common+0xd8>)
 800f6b8:	f240 7223 	movw	r2, #1827	@ 0x723
 800f6bc:	4925      	ldr	r1, [pc, #148]	@ (800f754 <tcp_output_alloc_header_common+0xdc>)
 800f6be:	4826      	ldr	r0, [pc, #152]	@ (800f758 <tcp_output_alloc_header_common+0xe0>)
 800f6c0:	f001 fd82 	bl	80111c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f6ca:	8c3b      	ldrh	r3, [r7, #32]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f6 fdff 	bl	80062d0 <lwip_htons>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f6da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7f6 fdf7 	bl	80062d0 <lwip_htons>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7f6 fe02 	bl	80062fa <lwip_htonl>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f6fc:	897b      	ldrh	r3, [r7, #10]
 800f6fe:	089b      	lsrs	r3, r3, #2
 800f700:	b29b      	uxth	r3, r3
 800f702:	3305      	adds	r3, #5
 800f704:	b29b      	uxth	r3, r3
 800f706:	031b      	lsls	r3, r3, #12
 800f708:	b29a      	uxth	r2, r3
 800f70a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4313      	orrs	r3, r2
 800f712:	b29b      	uxth	r3, r3
 800f714:	4618      	mov	r0, r3
 800f716:	f7f6 fddb 	bl	80062d0 <lwip_htons>
 800f71a:	4603      	mov	r3, r0
 800f71c:	461a      	mov	r2, r3
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f722:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f724:	4618      	mov	r0, r3
 800f726:	f7f6 fdd3 	bl	80062d0 <lwip_htons>
 800f72a:	4603      	mov	r3, r0
 800f72c:	461a      	mov	r2, r3
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	2200      	movs	r2, #0
 800f736:	741a      	strb	r2, [r3, #16]
 800f738:	2200      	movs	r2, #0
 800f73a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	2200      	movs	r2, #0
 800f740:	749a      	strb	r2, [r3, #18]
 800f742:	2200      	movs	r2, #0
 800f744:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f746:	697b      	ldr	r3, [r7, #20]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	080145f4 	.word	0x080145f4
 800f754:	08014cf8 	.word	0x08014cf8
 800f758:	08014674 	.word	0x08014674

0800f75c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f75c:	b5b0      	push	{r4, r5, r7, lr}
 800f75e:	b08a      	sub	sp, #40	@ 0x28
 800f760:	af04      	add	r7, sp, #16
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	607b      	str	r3, [r7, #4]
 800f766:	460b      	mov	r3, r1
 800f768:	817b      	strh	r3, [r7, #10]
 800f76a:	4613      	mov	r3, r2
 800f76c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d106      	bne.n	800f782 <tcp_output_alloc_header+0x26>
 800f774:	4b15      	ldr	r3, [pc, #84]	@ (800f7cc <tcp_output_alloc_header+0x70>)
 800f776:	f240 7242 	movw	r2, #1858	@ 0x742
 800f77a:	4915      	ldr	r1, [pc, #84]	@ (800f7d0 <tcp_output_alloc_header+0x74>)
 800f77c:	4815      	ldr	r0, [pc, #84]	@ (800f7d4 <tcp_output_alloc_header+0x78>)
 800f77e:	f001 fd23 	bl	80111c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	8adb      	ldrh	r3, [r3, #22]
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	8b12      	ldrh	r2, [r2, #24]
 800f78e:	68f9      	ldr	r1, [r7, #12]
 800f790:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800f792:	893d      	ldrh	r5, [r7, #8]
 800f794:	897c      	ldrh	r4, [r7, #10]
 800f796:	9103      	str	r1, [sp, #12]
 800f798:	2110      	movs	r1, #16
 800f79a:	9102      	str	r1, [sp, #8]
 800f79c:	9201      	str	r2, [sp, #4]
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	462a      	mov	r2, r5
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	f7ff ff67 	bl	800f678 <tcp_output_alloc_header_common>
 800f7aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d006      	beq.n	800f7c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f7ba:	441a      	add	r2, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800f7c0:	697b      	ldr	r3, [r7, #20]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3718      	adds	r7, #24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	080145f4 	.word	0x080145f4
 800f7d0:	08014d28 	.word	0x08014d28
 800f7d4:	08014674 	.word	0x08014674

0800f7d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	4611      	mov	r1, r2
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	71fb      	strb	r3, [r7, #7]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d106      	bne.n	800f806 <tcp_output_fill_options+0x2e>
 800f7f8:	4b12      	ldr	r3, [pc, #72]	@ (800f844 <tcp_output_fill_options+0x6c>)
 800f7fa:	f240 7256 	movw	r2, #1878	@ 0x756
 800f7fe:	4912      	ldr	r1, [pc, #72]	@ (800f848 <tcp_output_fill_options+0x70>)
 800f800:	4812      	ldr	r0, [pc, #72]	@ (800f84c <tcp_output_fill_options+0x74>)
 800f802:	f001 fce1 	bl	80111c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	3314      	adds	r3, #20
 800f810:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f812:	8bfb      	ldrh	r3, [r7, #30]
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	461a      	mov	r2, r3
 800f818:	79fb      	ldrb	r3, [r7, #7]
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	f003 0304 	and.w	r3, r3, #4
 800f820:	4413      	add	r3, r2
 800f822:	3314      	adds	r3, #20
 800f824:	69ba      	ldr	r2, [r7, #24]
 800f826:	4413      	add	r3, r2
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d006      	beq.n	800f83c <tcp_output_fill_options+0x64>
 800f82e:	4b05      	ldr	r3, [pc, #20]	@ (800f844 <tcp_output_fill_options+0x6c>)
 800f830:	f240 7275 	movw	r2, #1909	@ 0x775
 800f834:	4906      	ldr	r1, [pc, #24]	@ (800f850 <tcp_output_fill_options+0x78>)
 800f836:	4805      	ldr	r0, [pc, #20]	@ (800f84c <tcp_output_fill_options+0x74>)
 800f838:	f001 fcc6 	bl	80111c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f83c:	bf00      	nop
 800f83e:	3720      	adds	r7, #32
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	080145f4 	.word	0x080145f4
 800f848:	08014d50 	.word	0x08014d50
 800f84c:	08014674 	.word	0x08014674
 800f850:	08014c48 	.word	0x08014c48

0800f854 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b08a      	sub	sp, #40	@ 0x28
 800f858:	af04      	add	r7, sp, #16
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
 800f860:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d106      	bne.n	800f876 <tcp_output_control_segment+0x22>
 800f868:	4b1c      	ldr	r3, [pc, #112]	@ (800f8dc <tcp_output_control_segment+0x88>)
 800f86a:	f240 7287 	movw	r2, #1927	@ 0x787
 800f86e:	491c      	ldr	r1, [pc, #112]	@ (800f8e0 <tcp_output_control_segment+0x8c>)
 800f870:	481c      	ldr	r0, [pc, #112]	@ (800f8e4 <tcp_output_control_segment+0x90>)
 800f872:	f001 fca9 	bl	80111c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f876:	683a      	ldr	r2, [r7, #0]
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7fe ff42 	bl	800e704 <tcp_route>
 800f880:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d102      	bne.n	800f88e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f888:	23fc      	movs	r3, #252	@ 0xfc
 800f88a:	75fb      	strb	r3, [r7, #23]
 800f88c:	e01c      	b.n	800f8c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d006      	beq.n	800f8a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	7adb      	ldrb	r3, [r3, #11]
 800f898:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	7a9b      	ldrb	r3, [r3, #10]
 800f89e:	757b      	strb	r3, [r7, #21]
 800f8a0:	e003      	b.n	800f8aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f8a2:	23ff      	movs	r3, #255	@ 0xff
 800f8a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f8aa:	7dba      	ldrb	r2, [r7, #22]
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	9302      	str	r3, [sp, #8]
 800f8b0:	2306      	movs	r3, #6
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	7d7b      	ldrb	r3, [r7, #21]
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	683a      	ldr	r2, [r7, #0]
 800f8bc:	6879      	ldr	r1, [r7, #4]
 800f8be:	68b8      	ldr	r0, [r7, #8]
 800f8c0:	f7f8 f9a6 	bl	8007c10 <ip4_output_if>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f8c8:	68b8      	ldr	r0, [r7, #8]
 800f8ca:	f7fa fbff 	bl	800a0cc <pbuf_free>
  return err;
 800f8ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3718      	adds	r7, #24
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	080145f4 	.word	0x080145f4
 800f8e0:	08014d78 	.word	0x08014d78
 800f8e4:	08014674 	.word	0x08014674

0800f8e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f8e8:	b590      	push	{r4, r7, lr}
 800f8ea:	b08b      	sub	sp, #44	@ 0x2c
 800f8ec:	af04      	add	r7, sp, #16
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d106      	bne.n	800f90a <tcp_rst+0x22>
 800f8fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f97c <tcp_rst+0x94>)
 800f8fe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f902:	491f      	ldr	r1, [pc, #124]	@ (800f980 <tcp_rst+0x98>)
 800f904:	481f      	ldr	r0, [pc, #124]	@ (800f984 <tcp_rst+0x9c>)
 800f906:	f001 fc5f 	bl	80111c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d106      	bne.n	800f91e <tcp_rst+0x36>
 800f910:	4b1a      	ldr	r3, [pc, #104]	@ (800f97c <tcp_rst+0x94>)
 800f912:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f916:	491c      	ldr	r1, [pc, #112]	@ (800f988 <tcp_rst+0xa0>)
 800f918:	481a      	ldr	r0, [pc, #104]	@ (800f984 <tcp_rst+0x9c>)
 800f91a:	f001 fc55 	bl	80111c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f91e:	2300      	movs	r3, #0
 800f920:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f922:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f926:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f928:	7dfb      	ldrb	r3, [r7, #23]
 800f92a:	b29c      	uxth	r4, r3
 800f92c:	68b8      	ldr	r0, [r7, #8]
 800f92e:	f7f6 fce4 	bl	80062fa <lwip_htonl>
 800f932:	4602      	mov	r2, r0
 800f934:	8abb      	ldrh	r3, [r7, #20]
 800f936:	9303      	str	r3, [sp, #12]
 800f938:	2314      	movs	r3, #20
 800f93a:	9302      	str	r3, [sp, #8]
 800f93c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f93e:	9301      	str	r3, [sp, #4]
 800f940:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	4613      	mov	r3, r2
 800f946:	2200      	movs	r2, #0
 800f948:	4621      	mov	r1, r4
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f7ff fe94 	bl	800f678 <tcp_output_alloc_header_common>
 800f950:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00c      	beq.n	800f972 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f958:	7dfb      	ldrb	r3, [r7, #23]
 800f95a:	2200      	movs	r2, #0
 800f95c:	6939      	ldr	r1, [r7, #16]
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	f7ff ff3a 	bl	800f7d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	6939      	ldr	r1, [r7, #16]
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f7ff ff72 	bl	800f854 <tcp_output_control_segment>
 800f970:	e000      	b.n	800f974 <tcp_rst+0x8c>
    return;
 800f972:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f974:	371c      	adds	r7, #28
 800f976:	46bd      	mov	sp, r7
 800f978:	bd90      	pop	{r4, r7, pc}
 800f97a:	bf00      	nop
 800f97c:	080145f4 	.word	0x080145f4
 800f980:	08014da4 	.word	0x08014da4
 800f984:	08014674 	.word	0x08014674
 800f988:	08014dc0 	.word	0x08014dc0

0800f98c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f98c:	b590      	push	{r4, r7, lr}
 800f98e:	b087      	sub	sp, #28
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <tcp_send_empty_ack+0x24>
 800f9a2:	4b28      	ldr	r3, [pc, #160]	@ (800fa44 <tcp_send_empty_ack+0xb8>)
 800f9a4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f9a8:	4927      	ldr	r1, [pc, #156]	@ (800fa48 <tcp_send_empty_ack+0xbc>)
 800f9aa:	4828      	ldr	r0, [pc, #160]	@ (800fa4c <tcp_send_empty_ack+0xc0>)
 800f9ac:	f001 fc0c 	bl	80111c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f9b0:	7dfb      	ldrb	r3, [r7, #23]
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f9bc:	7d7b      	ldrb	r3, [r7, #21]
 800f9be:	b29c      	uxth	r4, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7f6 fc98 	bl	80062fa <lwip_htonl>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff fec3 	bl	800f75c <tcp_output_alloc_header>
 800f9d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d109      	bne.n	800f9f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	8b5b      	ldrh	r3, [r3, #26]
 800f9e2:	f043 0303 	orr.w	r3, r3, #3
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f9ec:	f06f 0301 	mvn.w	r3, #1
 800f9f0:	e023      	b.n	800fa3a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f9f2:	7dbb      	ldrb	r3, [r7, #22]
 800f9f4:	7dfa      	ldrb	r2, [r7, #23]
 800f9f6:	6939      	ldr	r1, [r7, #16]
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff feed 	bl	800f7d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3304      	adds	r3, #4
 800fa04:	6939      	ldr	r1, [r7, #16]
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f7ff ff24 	bl	800f854 <tcp_output_control_segment>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fa10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d007      	beq.n	800fa28 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8b5b      	ldrh	r3, [r3, #26]
 800fa1c:	f043 0303 	orr.w	r3, r3, #3
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	835a      	strh	r2, [r3, #26]
 800fa26:	e006      	b.n	800fa36 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	8b5b      	ldrh	r3, [r3, #26]
 800fa2c:	f023 0303 	bic.w	r3, r3, #3
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fa36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	080145f4 	.word	0x080145f4
 800fa48:	08014ddc 	.word	0x08014ddc
 800fa4c:	08014674 	.word	0x08014674

0800fa50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fa50:	b590      	push	{r4, r7, lr}
 800fa52:	b087      	sub	sp, #28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa58:	2300      	movs	r3, #0
 800fa5a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d106      	bne.n	800fa70 <tcp_keepalive+0x20>
 800fa62:	4b18      	ldr	r3, [pc, #96]	@ (800fac4 <tcp_keepalive+0x74>)
 800fa64:	f640 0224 	movw	r2, #2084	@ 0x824
 800fa68:	4917      	ldr	r1, [pc, #92]	@ (800fac8 <tcp_keepalive+0x78>)
 800fa6a:	4818      	ldr	r0, [pc, #96]	@ (800facc <tcp_keepalive+0x7c>)
 800fa6c:	f001 fbac 	bl	80111c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fa70:	7dfb      	ldrb	r3, [r7, #23]
 800fa72:	b29c      	uxth	r4, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7f6 fc3d 	bl	80062fa <lwip_htonl>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2200      	movs	r2, #0
 800fa84:	4621      	mov	r1, r4
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7ff fe68 	bl	800f75c <tcp_output_alloc_header>
 800fa8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d102      	bne.n	800fa9a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fa94:	f04f 33ff 	mov.w	r3, #4294967295
 800fa98:	e010      	b.n	800fabc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	6939      	ldr	r1, [r7, #16]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff fe99 	bl	800f7d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3304      	adds	r3, #4
 800faac:	6939      	ldr	r1, [r7, #16]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff fed0 	bl	800f854 <tcp_output_control_segment>
 800fab4:	4603      	mov	r3, r0
 800fab6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	371c      	adds	r7, #28
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd90      	pop	{r4, r7, pc}
 800fac4:	080145f4 	.word	0x080145f4
 800fac8:	08014dfc 	.word	0x08014dfc
 800facc:	08014674 	.word	0x08014674

0800fad0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fad0:	b590      	push	{r4, r7, lr}
 800fad2:	b08b      	sub	sp, #44	@ 0x2c
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fad8:	2300      	movs	r3, #0
 800fada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d106      	bne.n	800faf2 <tcp_zero_window_probe+0x22>
 800fae4:	4b4c      	ldr	r3, [pc, #304]	@ (800fc18 <tcp_zero_window_probe+0x148>)
 800fae6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800faea:	494c      	ldr	r1, [pc, #304]	@ (800fc1c <tcp_zero_window_probe+0x14c>)
 800faec:	484c      	ldr	r0, [pc, #304]	@ (800fc20 <tcp_zero_window_probe+0x150>)
 800faee:	f001 fb6b 	bl	80111c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faf6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800faf8:	6a3b      	ldr	r3, [r7, #32]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d101      	bne.n	800fb02 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	e086      	b.n	800fc10 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fb08:	2bff      	cmp	r3, #255	@ 0xff
 800fb0a:	d007      	beq.n	800fb1c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fb12:	3301      	adds	r3, #1
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	899b      	ldrh	r3, [r3, #12]
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7f6 fbd3 	bl	80062d0 <lwip_htons>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	f003 0301 	and.w	r3, r3, #1
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d005      	beq.n	800fb42 <tcp_zero_window_probe+0x72>
 800fb36:	6a3b      	ldr	r3, [r7, #32]
 800fb38:	891b      	ldrh	r3, [r3, #8]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <tcp_zero_window_probe+0x72>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <tcp_zero_window_probe+0x74>
 800fb42:	2300      	movs	r3, #0
 800fb44:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fb46:	7ffb      	ldrb	r3, [r7, #31]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	bf0c      	ite	eq
 800fb4c:	2301      	moveq	r3, #1
 800fb4e:	2300      	movne	r3, #0
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fb54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb58:	b299      	uxth	r1, r3
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	8bba      	ldrh	r2, [r7, #28]
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7ff fdfa 	bl	800f75c <tcp_output_alloc_header>
 800fb68:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d102      	bne.n	800fb76 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fb70:	f04f 33ff 	mov.w	r3, #4294967295
 800fb74:	e04c      	b.n	800fc10 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fb7c:	7ffb      	ldrb	r3, [r7, #31]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d011      	beq.n	800fba6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	899b      	ldrh	r3, [r3, #12]
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	b21b      	sxth	r3, r3
 800fb8a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fb8e:	b21c      	sxth	r4, r3
 800fb90:	2011      	movs	r0, #17
 800fb92:	f7f6 fb9d 	bl	80062d0 <lwip_htons>
 800fb96:	4603      	mov	r3, r0
 800fb98:	b21b      	sxth	r3, r3
 800fb9a:	4323      	orrs	r3, r4
 800fb9c:	b21b      	sxth	r3, r3
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	819a      	strh	r2, [r3, #12]
 800fba4:	e010      	b.n	800fbc8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	3314      	adds	r3, #20
 800fbac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	6858      	ldr	r0, [r3, #4]
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	891a      	ldrh	r2, [r3, #8]
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
 800fbba:	891b      	ldrh	r3, [r3, #8]
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	6939      	ldr	r1, [r7, #16]
 800fbc4:	f7fa fc7c 	bl	800a4c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fbc8:	6a3b      	ldr	r3, [r7, #32]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7f6 fb93 	bl	80062fa <lwip_htonl>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	1ad3      	subs	r3, r2, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	da02      	bge.n	800fbec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	69b9      	ldr	r1, [r7, #24]
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff fdef 	bl	800f7d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	3304      	adds	r3, #4
 800fc00:	69b9      	ldr	r1, [r7, #24]
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f7ff fe26 	bl	800f854 <tcp_output_control_segment>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fc0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	372c      	adds	r7, #44	@ 0x2c
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd90      	pop	{r4, r7, pc}
 800fc18:	080145f4 	.word	0x080145f4
 800fc1c:	08014e18 	.word	0x08014e18
 800fc20:	08014674 	.word	0x08014674

0800fc24 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	af00      	add	r7, sp, #0
  tftp_state.port = 0;
 800fc28:	4b12      	ldr	r3, [pc, #72]	@ (800fc74 <close_handle+0x50>)
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	829a      	strh	r2, [r3, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 800fc2e:	4b11      	ldr	r3, [pc, #68]	@ (800fc74 <close_handle+0x50>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	611a      	str	r2, [r3, #16]

  if (tftp_state.last_data != NULL) {
 800fc34:	4b0f      	ldr	r3, [pc, #60]	@ (800fc74 <close_handle+0x50>)
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d007      	beq.n	800fc4c <close_handle+0x28>
    pbuf_free(tftp_state.last_data);
 800fc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc74 <close_handle+0x50>)
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fa fa43 	bl	800a0cc <pbuf_free>
    tftp_state.last_data = NULL;
 800fc46:	4b0b      	ldr	r3, [pc, #44]	@ (800fc74 <close_handle+0x50>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	609a      	str	r2, [r3, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	480a      	ldr	r0, [pc, #40]	@ (800fc78 <close_handle+0x54>)
 800fc50:	f000 fc88 	bl	8010564 <sys_untimeout>

  if (tftp_state.handle) {
 800fc54:	4b07      	ldr	r3, [pc, #28]	@ (800fc74 <close_handle+0x50>)
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d009      	beq.n	800fc70 <close_handle+0x4c>
    tftp_state.ctx->close(tftp_state.handle);
 800fc5c:	4b05      	ldr	r3, [pc, #20]	@ (800fc74 <close_handle+0x50>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	4a04      	ldr	r2, [pc, #16]	@ (800fc74 <close_handle+0x50>)
 800fc64:	6852      	ldr	r2, [r2, #4]
 800fc66:	4610      	mov	r0, r2
 800fc68:	4798      	blx	r3
    tftp_state.handle = NULL;
 800fc6a:	4b02      	ldr	r3, [pc, #8]	@ (800fc74 <close_handle+0x50>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	605a      	str	r2, [r3, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 800fc70:	bf00      	nop
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	2401c6b8 	.word	0x2401c6b8
 800fc78:	08010215 	.word	0x08010215

0800fc7c <send_error>:

static void
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
{
 800fc7c:	b590      	push	{r4, r7, lr}
 800fc7e:	b089      	sub	sp, #36	@ 0x24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	607b      	str	r3, [r7, #4]
 800fc86:	460b      	mov	r3, r1
 800fc88:	817b      	strh	r3, [r7, #10]
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	727b      	strb	r3, [r7, #9]
  int str_length = strlen(str);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7f0 fb26 	bl	80002e0 <strlen>
 800fc94:	4603      	mov	r3, r0
 800fc96:	61fb      	str	r3, [r7, #28]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + str_length + 1), PBUF_RAM);
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	3305      	adds	r3, #5
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fca4:	4619      	mov	r1, r3
 800fca6:	2036      	movs	r0, #54	@ 0x36
 800fca8:	f7f9 ff2e 	bl	8009b08 <pbuf_alloc>
 800fcac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d022      	beq.n	800fcfa <send_error+0x7e>
    return;
  }

  payload = (u16_t *) p->payload;
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	617b      	str	r3, [r7, #20]
  payload[0] = PP_HTONS(TFTP_ERROR);
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800fcc0:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(code);
 800fcc2:	7a7b      	ldrb	r3, [r7, #9]
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	1c9c      	adds	r4, r3, #2
 800fcca:	4610      	mov	r0, r2
 800fccc:	f7f6 fb00 	bl	80062d0 <lwip_htons>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	8023      	strh	r3, [r4, #0]
  MEMCPY(&payload[2], str, str_length + 1);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	1d18      	adds	r0, r3, #4
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	461a      	mov	r2, r3
 800fcde:	6879      	ldr	r1, [r7, #4]
 800fce0:	f001 fc3f 	bl	8011562 <memcpy>

  udp_sendto(tftp_state.upcb, p, addr, port);
 800fce4:	4b07      	ldr	r3, [pc, #28]	@ (800fd04 <send_error+0x88>)
 800fce6:	68d8      	ldr	r0, [r3, #12]
 800fce8:	897b      	ldrh	r3, [r7, #10]
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	69b9      	ldr	r1, [r7, #24]
 800fcee:	f000 fe77 	bl	80109e0 <udp_sendto>
  pbuf_free(p);
 800fcf2:	69b8      	ldr	r0, [r7, #24]
 800fcf4:	f7fa f9ea 	bl	800a0cc <pbuf_free>
 800fcf8:	e000      	b.n	800fcfc <send_error+0x80>
    return;
 800fcfa:	bf00      	nop
}
 800fcfc:	3724      	adds	r7, #36	@ 0x24
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd90      	pop	{r4, r7, pc}
 800fd02:	bf00      	nop
 800fd04:	2401c6b8 	.word	0x2401c6b8

0800fd08 <send_ack>:

static void
send_ack(u16_t blknum)
{
 800fd08:	b590      	push	{r4, r7, lr}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH, PBUF_RAM);
 800fd12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd16:	2104      	movs	r1, #4
 800fd18:	2036      	movs	r0, #54	@ 0x36
 800fd1a:	f7f9 fef5 	bl	8009b08 <pbuf_alloc>
 800fd1e:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d01a      	beq.n	800fd5c <send_ack+0x54>
    return;
  }
  payload = (u16_t *) p->payload;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	60bb      	str	r3, [r7, #8]

  payload[0] = PP_HTONS(TFTP_ACK);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fd32:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(blknum);
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	1c9c      	adds	r4, r3, #2
 800fd38:	88fb      	ldrh	r3, [r7, #6]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7f6 fac8 	bl	80062d0 <lwip_htons>
 800fd40:	4603      	mov	r3, r0
 800fd42:	8023      	strh	r3, [r4, #0]
  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 800fd44:	4b07      	ldr	r3, [pc, #28]	@ (800fd64 <send_ack+0x5c>)
 800fd46:	68d8      	ldr	r0, [r3, #12]
 800fd48:	4b06      	ldr	r3, [pc, #24]	@ (800fd64 <send_ack+0x5c>)
 800fd4a:	8a9b      	ldrh	r3, [r3, #20]
 800fd4c:	4a06      	ldr	r2, [pc, #24]	@ (800fd68 <send_ack+0x60>)
 800fd4e:	68f9      	ldr	r1, [r7, #12]
 800fd50:	f000 fe46 	bl	80109e0 <udp_sendto>
  pbuf_free(p);
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f7fa f9b9 	bl	800a0cc <pbuf_free>
 800fd5a:	e000      	b.n	800fd5e <send_ack+0x56>
    return;
 800fd5c:	bf00      	nop
}
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd90      	pop	{r4, r7, pc}
 800fd64:	2401c6b8 	.word	0x2401c6b8
 800fd68:	2401c6c8 	.word	0x2401c6c8

0800fd6c <resend_data>:

static void
resend_data(void)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 800fd72:	4b15      	ldr	r3, [pc, #84]	@ (800fdc8 <resend_data+0x5c>)
 800fd74:	689b      	ldr	r3, [r3, #8]
 800fd76:	895b      	ldrh	r3, [r3, #10]
 800fd78:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	2036      	movs	r0, #54	@ 0x36
 800fd80:	f7f9 fec2 	bl	8009b08 <pbuf_alloc>
 800fd84:	6078      	str	r0, [r7, #4]
  if (p == NULL) {
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d018      	beq.n	800fdbe <resend_data+0x52>
    return;
  }

  if (pbuf_copy(p, tftp_state.last_data) != ERR_OK) {
 800fd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800fdc8 <resend_data+0x5c>)
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	4619      	mov	r1, r3
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7fa fac2 	bl	800a31c <pbuf_copy>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <resend_data+0x3a>
    pbuf_free(p);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7fa f994 	bl	800a0cc <pbuf_free>
    return;
 800fda4:	e00c      	b.n	800fdc0 <resend_data+0x54>
  }

  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 800fda6:	4b08      	ldr	r3, [pc, #32]	@ (800fdc8 <resend_data+0x5c>)
 800fda8:	68d8      	ldr	r0, [r3, #12]
 800fdaa:	4b07      	ldr	r3, [pc, #28]	@ (800fdc8 <resend_data+0x5c>)
 800fdac:	8a9b      	ldrh	r3, [r3, #20]
 800fdae:	4a07      	ldr	r2, [pc, #28]	@ (800fdcc <resend_data+0x60>)
 800fdb0:	6879      	ldr	r1, [r7, #4]
 800fdb2:	f000 fe15 	bl	80109e0 <udp_sendto>
  pbuf_free(p);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7fa f988 	bl	800a0cc <pbuf_free>
 800fdbc:	e000      	b.n	800fdc0 <resend_data+0x54>
    return;
 800fdbe:	bf00      	nop
}
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	2401c6b8 	.word	0x2401c6b8
 800fdcc:	2401c6c8 	.word	0x2401c6c8

0800fdd0 <send_data>:

static void
send_data(void)
{
 800fdd0:	b590      	push	{r4, r7, lr}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
  u16_t *payload;
  int ret;

  if (tftp_state.last_data != NULL) {
 800fdd6:	4b28      	ldr	r3, [pc, #160]	@ (800fe78 <send_data+0xa8>)
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d004      	beq.n	800fde8 <send_data+0x18>
    pbuf_free(tftp_state.last_data);
 800fdde:	4b26      	ldr	r3, [pc, #152]	@ (800fe78 <send_data+0xa8>)
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fa f972 	bl	800a0cc <pbuf_free>
  }

  tftp_state.last_data = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH + TFTP_MAX_PAYLOAD_SIZE, PBUF_RAM);
 800fde8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fdec:	f44f 7101 	mov.w	r1, #516	@ 0x204
 800fdf0:	2036      	movs	r0, #54	@ 0x36
 800fdf2:	f7f9 fe89 	bl	8009b08 <pbuf_alloc>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	4a1f      	ldr	r2, [pc, #124]	@ (800fe78 <send_data+0xa8>)
 800fdfa:	6093      	str	r3, [r2, #8]
  if (tftp_state.last_data == NULL) {
 800fdfc:	4b1e      	ldr	r3, [pc, #120]	@ (800fe78 <send_data+0xa8>)
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d035      	beq.n	800fe70 <send_data+0xa0>
    return;
  }

  payload = (u16_t *) tftp_state.last_data->payload;
 800fe04:	4b1c      	ldr	r3, [pc, #112]	@ (800fe78 <send_data+0xa8>)
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	607b      	str	r3, [r7, #4]
  payload[0] = PP_HTONS(TFTP_DATA);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800fe12:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(tftp_state.blknum);
 800fe14:	4b18      	ldr	r3, [pc, #96]	@ (800fe78 <send_data+0xa8>)
 800fe16:	8c1a      	ldrh	r2, [r3, #32]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	1c9c      	adds	r4, r3, #2
 800fe1c:	4610      	mov	r0, r2
 800fe1e:	f7f6 fa57 	bl	80062d0 <lwip_htons>
 800fe22:	4603      	mov	r3, r0
 800fe24:	8023      	strh	r3, [r4, #0]

  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 800fe26:	4b14      	ldr	r3, [pc, #80]	@ (800fe78 <send_data+0xa8>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	4a12      	ldr	r2, [pc, #72]	@ (800fe78 <send_data+0xa8>)
 800fe2e:	6850      	ldr	r0, [r2, #4]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	1d11      	adds	r1, r2, #4
 800fe34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe38:	4798      	blx	r3
 800fe3a:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	da09      	bge.n	800fe56 <send_data+0x86>
    send_error(&tftp_state.addr, tftp_state.port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 800fe42:	4b0d      	ldr	r3, [pc, #52]	@ (800fe78 <send_data+0xa8>)
 800fe44:	8a99      	ldrh	r1, [r3, #20]
 800fe46:	4b0d      	ldr	r3, [pc, #52]	@ (800fe7c <send_data+0xac>)
 800fe48:	2202      	movs	r2, #2
 800fe4a:	480d      	ldr	r0, [pc, #52]	@ (800fe80 <send_data+0xb0>)
 800fe4c:	f7ff ff16 	bl	800fc7c <send_error>
    close_handle();
 800fe50:	f7ff fee8 	bl	800fc24 <close_handle>
    return;
 800fe54:	e00d      	b.n	800fe72 <send_data+0xa2>
  }

  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 800fe56:	4b08      	ldr	r3, [pc, #32]	@ (800fe78 <send_data+0xa8>)
 800fe58:	689a      	ldr	r2, [r3, #8]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	3304      	adds	r3, #4
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	4619      	mov	r1, r3
 800fe64:	4610      	mov	r0, r2
 800fe66:	f7f9 ffad 	bl	8009dc4 <pbuf_realloc>
  resend_data();
 800fe6a:	f7ff ff7f 	bl	800fd6c <resend_data>
 800fe6e:	e000      	b.n	800fe72 <send_data+0xa2>
    return;
 800fe70:	bf00      	nop
}
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd90      	pop	{r4, r7, pc}
 800fe78:	2401c6b8 	.word	0x2401c6b8
 800fe7c:	08014e3c 	.word	0x08014e3c
 800fe80:	2401c6c8 	.word	0x2401c6c8

0800fe84 <recv>:

static void
recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b092      	sub	sp, #72	@ 0x48
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
 800fe90:	603b      	str	r3, [r7, #0]
  u16_t *sbuf = (u16_t *) p->payload;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	643b      	str	r3, [r7, #64]	@ 0x40
  int opcode;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(upcb);

  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800fe98:	4ba1      	ldr	r3, [pc, #644]	@ (8010120 <recv+0x29c>)
 800fe9a:	8a9b      	ldrh	r3, [r3, #20]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d005      	beq.n	800feac <recv+0x28>
 800fea0:	4b9f      	ldr	r3, [pc, #636]	@ (8010120 <recv+0x29c>)
 800fea2:	8a9b      	ldrh	r3, [r3, #20]
 800fea4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d109      	bne.n	800fec0 <recv+0x3c>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800feac:	4b9c      	ldr	r3, [pc, #624]	@ (8010120 <recv+0x29c>)
 800feae:	691b      	ldr	r3, [r3, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d010      	beq.n	800fed6 <recv+0x52>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800feb4:	4b9a      	ldr	r3, [pc, #616]	@ (8010120 <recv+0x29c>)
 800feb6:	691a      	ldr	r2, [r3, #16]
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	429a      	cmp	r2, r3
 800febe:	d00a      	beq.n	800fed6 <recv+0x52>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800fec0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800fec4:	4b97      	ldr	r3, [pc, #604]	@ (8010124 <recv+0x2a0>)
 800fec6:	2202      	movs	r2, #2
 800fec8:	6838      	ldr	r0, [r7, #0]
 800feca:	f7ff fed7 	bl	800fc7c <send_error>
    pbuf_free(p);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7fa f8fc 	bl	800a0cc <pbuf_free>
    return;
 800fed4:	e190      	b.n	80101f8 <recv+0x374>
  }

  opcode = sbuf[0];
 800fed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	63fb      	str	r3, [r7, #60]	@ 0x3c

  tftp_state.last_pkt = tftp_state.timer;
 800fedc:	4b90      	ldr	r3, [pc, #576]	@ (8010120 <recv+0x29c>)
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	4a8f      	ldr	r2, [pc, #572]	@ (8010120 <recv+0x29c>)
 800fee2:	61d3      	str	r3, [r2, #28]
  tftp_state.retries = 0;
 800fee4:	4b8e      	ldr	r3, [pc, #568]	@ (8010120 <recv+0x29c>)
 800fee6:	2200      	movs	r2, #0
 800fee8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  switch (opcode) {
 800feec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fef2:	f000 8129 	beq.w	8010148 <recv+0x2c4>
 800fef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fefc:	f300 8171 	bgt.w	80101e2 <recv+0x35e>
 800ff00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff06:	f000 80a3 	beq.w	8010050 <recv+0x1cc>
 800ff0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff10:	f300 8167 	bgt.w	80101e2 <recv+0x35e>
 800ff14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff1a:	d004      	beq.n	800ff26 <recv+0xa2>
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff22:	f040 815e 	bne.w	80101e2 <recv+0x35e>
    case PP_HTONS(TFTP_RRQ): /* fall through */
    case PP_HTONS(TFTP_WRQ): {
      const char tftp_null = 0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      char filename[TFTP_MAX_FILENAME_LEN + 1];
      char mode[TFTP_MAX_MODE_LEN + 1];
      u16_t filename_end_offset;
      u16_t mode_end_offset;

      if (tftp_state.handle != NULL) {
 800ff2c:	4b7c      	ldr	r3, [pc, #496]	@ (8010120 <recv+0x29c>)
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d007      	beq.n	800ff44 <recv+0xc0>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800ff34:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800ff38:	4b7a      	ldr	r3, [pc, #488]	@ (8010124 <recv+0x2a0>)
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	6838      	ldr	r0, [r7, #0]
 800ff3e:	f7ff fe9d 	bl	800fc7c <send_error>
        break;
 800ff42:	e156      	b.n	80101f2 <recv+0x36e>
      }

      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800ff44:	2200      	movs	r2, #0
 800ff46:	4978      	ldr	r1, [pc, #480]	@ (8010128 <recv+0x2a4>)
 800ff48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ff4c:	f000 fae4 	bl	8010518 <sys_timeout>

      /* find \0 in pbuf -> end of filename string */
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800ff50:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 800ff54:	2302      	movs	r3, #2
 800ff56:	2201      	movs	r2, #1
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7fa fc0d 	bl	800a778 <pbuf_memfind>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	867b      	strh	r3, [r7, #50]	@ 0x32
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 800ff62:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ff64:	3b01      	subs	r3, #1
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	2b15      	cmp	r3, #21
 800ff6a:	d907      	bls.n	800ff7c <recv+0xf8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 800ff6c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800ff70:	4b6e      	ldr	r3, [pc, #440]	@ (801012c <recv+0x2a8>)
 800ff72:	2202      	movs	r2, #2
 800ff74:	6838      	ldr	r0, [r7, #0]
 800ff76:	f7ff fe81 	bl	800fc7c <send_error>
        break;
 800ff7a:	e13a      	b.n	80101f2 <recv+0x36e>
      }
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 800ff7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	f107 0118 	add.w	r1, r7, #24
 800ff86:	2302      	movs	r3, #2
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7fa fa99 	bl	800a4c0 <pbuf_copy_partial>

      /* find \0 in pbuf -> end of mode string */
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 800ff8e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ff90:	3301      	adds	r3, #1
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 800ff98:	2201      	movs	r2, #1
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7fa fbec 	bl	800a778 <pbuf_memfind>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	863b      	strh	r3, [r7, #48]	@ 0x30
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 800ffa4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800ffa6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ffa8:	1ad3      	subs	r3, r2, r3
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	2b08      	cmp	r3, #8
 800ffae:	d907      	bls.n	800ffc0 <recv+0x13c>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 800ffb0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800ffb4:	4b5e      	ldr	r3, [pc, #376]	@ (8010130 <recv+0x2ac>)
 800ffb6:	2202      	movs	r2, #2
 800ffb8:	6838      	ldr	r0, [r7, #0]
 800ffba:	f7ff fe5f 	bl	800fc7c <send_error>
        break;
 800ffbe:	e118      	b.n	80101f2 <recv+0x36e>
      }
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 800ffc0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800ffc2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ffca:	3301      	adds	r3, #1
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	f107 0110 	add.w	r1, r7, #16
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7fa fa74 	bl	800a4c0 <pbuf_copy_partial>

      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 800ffd8:	4b51      	ldr	r3, [pc, #324]	@ (8010120 <recv+0x29c>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ffe0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800ffe4:	bf0c      	ite	eq
 800ffe6:	2201      	moveq	r2, #1
 800ffe8:	2200      	movne	r2, #0
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	f107 0110 	add.w	r1, r7, #16
 800fff0:	f107 0018 	add.w	r0, r7, #24
 800fff4:	4798      	blx	r3
 800fff6:	4603      	mov	r3, r0
 800fff8:	4a49      	ldr	r2, [pc, #292]	@ (8010120 <recv+0x29c>)
 800fffa:	6053      	str	r3, [r2, #4]
      tftp_state.blknum = 1;
 800fffc:	4b48      	ldr	r3, [pc, #288]	@ (8010120 <recv+0x29c>)
 800fffe:	2201      	movs	r2, #1
 8010000:	841a      	strh	r2, [r3, #32]

      if (!tftp_state.handle) {
 8010002:	4b47      	ldr	r3, [pc, #284]	@ (8010120 <recv+0x29c>)
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d107      	bne.n	801001a <recv+0x196>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 801000a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 801000e:	4b49      	ldr	r3, [pc, #292]	@ (8010134 <recv+0x2b0>)
 8010010:	2201      	movs	r2, #1
 8010012:	6838      	ldr	r0, [r7, #0]
 8010014:	f7ff fe32 	bl	800fc7c <send_error>
        break;
 8010018:	e0eb      	b.n	80101f2 <recv+0x36e>

      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: %s request from ", (opcode == PP_HTONS(TFTP_WRQ)) ? "write" : "read"));
      ip_addr_debug_print(TFTP_DEBUG | LWIP_DBG_STATE, addr);
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, (" for '%s' mode '%s'\n", filename, mode));

      ip_addr_copy(tftp_state.addr, *addr);
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a40      	ldr	r2, [pc, #256]	@ (8010120 <recv+0x29c>)
 8010020:	6113      	str	r3, [r2, #16]
      tftp_state.port = port;
 8010022:	4a3f      	ldr	r2, [pc, #252]	@ (8010120 <recv+0x29c>)
 8010024:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8010028:	8293      	strh	r3, [r2, #20]

      if (opcode == PP_HTONS(TFTP_WRQ)) {
 801002a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801002c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010030:	d107      	bne.n	8010042 <recv+0x1be>
        tftp_state.mode_write = 1;
 8010032:	4b3b      	ldr	r3, [pc, #236]	@ (8010120 <recv+0x29c>)
 8010034:	2201      	movs	r2, #1
 8010036:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        send_ack(0);
 801003a:	2000      	movs	r0, #0
 801003c:	f7ff fe64 	bl	800fd08 <send_ack>
      } else {
        tftp_state.mode_write = 0;
        send_data();
      }

      break;
 8010040:	e0d7      	b.n	80101f2 <recv+0x36e>
        tftp_state.mode_write = 0;
 8010042:	4b37      	ldr	r3, [pc, #220]	@ (8010120 <recv+0x29c>)
 8010044:	2200      	movs	r2, #0
 8010046:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        send_data();
 801004a:	f7ff fec1 	bl	800fdd0 <send_data>
      break;
 801004e:	e0d0      	b.n	80101f2 <recv+0x36e>

    case PP_HTONS(TFTP_DATA): {
      int ret;
      u16_t blknum;

      if (tftp_state.handle == NULL) {
 8010050:	4b33      	ldr	r3, [pc, #204]	@ (8010120 <recv+0x29c>)
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d107      	bne.n	8010068 <recv+0x1e4>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 8010058:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 801005c:	4b36      	ldr	r3, [pc, #216]	@ (8010138 <recv+0x2b4>)
 801005e:	2202      	movs	r2, #2
 8010060:	6838      	ldr	r0, [r7, #0]
 8010062:	f7ff fe0b 	bl	800fc7c <send_error>
        break;
 8010066:	e0c4      	b.n	80101f2 <recv+0x36e>
      }

      if (tftp_state.mode_write != 1) {
 8010068:	4b2d      	ldr	r3, [pc, #180]	@ (8010120 <recv+0x29c>)
 801006a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801006e:	2b01      	cmp	r3, #1
 8010070:	d007      	beq.n	8010082 <recv+0x1fe>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 8010072:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8010076:	4b31      	ldr	r3, [pc, #196]	@ (801013c <recv+0x2b8>)
 8010078:	2202      	movs	r2, #2
 801007a:	6838      	ldr	r0, [r7, #0]
 801007c:	f7ff fdfe 	bl	800fc7c <send_error>
        break;
 8010080:	e0b7      	b.n	80101f2 <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 8010082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010084:	3302      	adds	r3, #2
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	4618      	mov	r0, r3
 801008a:	f7f6 f921 	bl	80062d0 <lwip_htons>
 801008e:	4603      	mov	r3, r0
 8010090:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (blknum == tftp_state.blknum) {
 8010092:	4b23      	ldr	r3, [pc, #140]	@ (8010120 <recv+0x29c>)
 8010094:	8c1b      	ldrh	r3, [r3, #32]
 8010096:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8010098:	429a      	cmp	r2, r3
 801009a:	d12c      	bne.n	80100f6 <recv+0x272>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 801009c:	2104      	movs	r1, #4
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f7f9 ff8e 	bl	8009fc0 <pbuf_remove_header>

        ret = tftp_state.ctx->write(tftp_state.handle, p);
 80100a4:	4b1e      	ldr	r3, [pc, #120]	@ (8010120 <recv+0x29c>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	4a1d      	ldr	r2, [pc, #116]	@ (8010120 <recv+0x29c>)
 80100ac:	6852      	ldr	r2, [r2, #4]
 80100ae:	6879      	ldr	r1, [r7, #4]
 80100b0:	4610      	mov	r0, r2
 80100b2:	4798      	blx	r3
 80100b4:	6378      	str	r0, [r7, #52]	@ 0x34
        if (ret < 0) {
 80100b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	da09      	bge.n	80100d0 <recv+0x24c>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 80100bc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 80100c0:	4b1f      	ldr	r3, [pc, #124]	@ (8010140 <recv+0x2bc>)
 80100c2:	2202      	movs	r2, #2
 80100c4:	6838      	ldr	r0, [r7, #0]
 80100c6:	f7ff fdd9 	bl	800fc7c <send_error>
          close_handle();
 80100ca:	f7ff fdab 	bl	800fc24 <close_handle>
 80100ce:	e003      	b.n	80100d8 <recv+0x254>
        } else {
          send_ack(blknum);
 80100d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fe18 	bl	800fd08 <send_ack>
        }

        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	891b      	ldrh	r3, [r3, #8]
 80100dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100e0:	d202      	bcs.n	80100e8 <recv+0x264>
          close_handle();
 80100e2:	f7ff fd9f 	bl	800fc24 <close_handle>
        /* retransmit of previous block, ack again (casting to u16_t to care for overflow) */
        send_ack(blknum);
      } else {
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
      }
      break;
 80100e6:	e084      	b.n	80101f2 <recv+0x36e>
          tftp_state.blknum++;
 80100e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010120 <recv+0x29c>)
 80100ea:	8c1b      	ldrh	r3, [r3, #32]
 80100ec:	3301      	adds	r3, #1
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010120 <recv+0x29c>)
 80100f2:	841a      	strh	r2, [r3, #32]
      break;
 80100f4:	e07d      	b.n	80101f2 <recv+0x36e>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 80100f6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80100f8:	3301      	adds	r3, #1
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	4b08      	ldr	r3, [pc, #32]	@ (8010120 <recv+0x29c>)
 80100fe:	8c1b      	ldrh	r3, [r3, #32]
 8010100:	429a      	cmp	r2, r3
 8010102:	d104      	bne.n	801010e <recv+0x28a>
        send_ack(blknum);
 8010104:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff fdfe 	bl	800fd08 <send_ack>
      break;
 801010c:	e071      	b.n	80101f2 <recv+0x36e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 801010e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8010112:	4b0c      	ldr	r3, [pc, #48]	@ (8010144 <recv+0x2c0>)
 8010114:	2205      	movs	r2, #5
 8010116:	6838      	ldr	r0, [r7, #0]
 8010118:	f7ff fdb0 	bl	800fc7c <send_error>
      break;
 801011c:	e069      	b.n	80101f2 <recv+0x36e>
 801011e:	bf00      	nop
 8010120:	2401c6b8 	.word	0x2401c6b8
 8010124:	08014e64 	.word	0x08014e64
 8010128:	08010215 	.word	0x08010215
 801012c:	08014e90 	.word	0x08014e90
 8010130:	08014eb8 	.word	0x08014eb8
 8010134:	08014edc 	.word	0x08014edc
 8010138:	08014efc 	.word	0x08014efc
 801013c:	08014f0c 	.word	0x08014f0c
 8010140:	08014f24 	.word	0x08014f24
 8010144:	08014f38 	.word	0x08014f38

    case PP_HTONS(TFTP_ACK): {
      u16_t blknum;
      int lastpkt;

      if (tftp_state.handle == NULL) {
 8010148:	4b2d      	ldr	r3, [pc, #180]	@ (8010200 <recv+0x37c>)
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d107      	bne.n	8010160 <recv+0x2dc>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 8010150:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8010154:	4b2b      	ldr	r3, [pc, #172]	@ (8010204 <recv+0x380>)
 8010156:	2202      	movs	r2, #2
 8010158:	6838      	ldr	r0, [r7, #0]
 801015a:	f7ff fd8f 	bl	800fc7c <send_error>
        break;
 801015e:	e048      	b.n	80101f2 <recv+0x36e>
      }

      if (tftp_state.mode_write != 0) {
 8010160:	4b27      	ldr	r3, [pc, #156]	@ (8010200 <recv+0x37c>)
 8010162:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8010166:	2b00      	cmp	r3, #0
 8010168:	d007      	beq.n	801017a <recv+0x2f6>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 801016a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 801016e:	4b26      	ldr	r3, [pc, #152]	@ (8010208 <recv+0x384>)
 8010170:	2202      	movs	r2, #2
 8010172:	6838      	ldr	r0, [r7, #0]
 8010174:	f7ff fd82 	bl	800fc7c <send_error>
        break;
 8010178:	e03b      	b.n	80101f2 <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 801017a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801017c:	3302      	adds	r3, #2
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	4618      	mov	r0, r3
 8010182:	f7f6 f8a5 	bl	80062d0 <lwip_htons>
 8010186:	4603      	mov	r3, r0
 8010188:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (blknum != tftp_state.blknum) {
 801018a:	4b1d      	ldr	r3, [pc, #116]	@ (8010200 <recv+0x37c>)
 801018c:	8c1b      	ldrh	r3, [r3, #32]
 801018e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010190:	429a      	cmp	r2, r3
 8010192:	d007      	beq.n	80101a4 <recv+0x320>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 8010194:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8010198:	4b1c      	ldr	r3, [pc, #112]	@ (801020c <recv+0x388>)
 801019a:	2205      	movs	r2, #5
 801019c:	6838      	ldr	r0, [r7, #0]
 801019e:	f7ff fd6d 	bl	800fc7c <send_error>
        break;
 80101a2:	e026      	b.n	80101f2 <recv+0x36e>
      }

      lastpkt = 0;
 80101a4:	2300      	movs	r3, #0
 80101a6:	647b      	str	r3, [r7, #68]	@ 0x44

      if (tftp_state.last_data != NULL) {
 80101a8:	4b15      	ldr	r3, [pc, #84]	@ (8010200 <recv+0x37c>)
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d009      	beq.n	80101c4 <recv+0x340>
        lastpkt = tftp_state.last_data->tot_len != (TFTP_MAX_PAYLOAD_SIZE + TFTP_HEADER_LENGTH);
 80101b0:	4b13      	ldr	r3, [pc, #76]	@ (8010200 <recv+0x37c>)
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	891b      	ldrh	r3, [r3, #8]
 80101b6:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 80101ba:	bf14      	ite	ne
 80101bc:	2301      	movne	r3, #1
 80101be:	2300      	moveq	r3, #0
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	647b      	str	r3, [r7, #68]	@ 0x44
      }

      if (!lastpkt) {
 80101c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d108      	bne.n	80101dc <recv+0x358>
        tftp_state.blknum++;
 80101ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010200 <recv+0x37c>)
 80101cc:	8c1b      	ldrh	r3, [r3, #32]
 80101ce:	3301      	adds	r3, #1
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	4b0b      	ldr	r3, [pc, #44]	@ (8010200 <recv+0x37c>)
 80101d4:	841a      	strh	r2, [r3, #32]
        send_data();
 80101d6:	f7ff fdfb 	bl	800fdd0 <send_data>
      } else {
        close_handle();
      }

      break;
 80101da:	e00a      	b.n	80101f2 <recv+0x36e>
        close_handle();
 80101dc:	f7ff fd22 	bl	800fc24 <close_handle>
      break;
 80101e0:	e007      	b.n	80101f2 <recv+0x36e>
    }

    default:
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 80101e2:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 80101e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010210 <recv+0x38c>)
 80101e8:	2204      	movs	r2, #4
 80101ea:	6838      	ldr	r0, [r7, #0]
 80101ec:	f7ff fd46 	bl	800fc7c <send_error>
      break;
 80101f0:	bf00      	nop
  }

  pbuf_free(p);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7f9 ff6a 	bl	800a0cc <pbuf_free>
}
 80101f8:	3748      	adds	r7, #72	@ 0x48
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	2401c6b8 	.word	0x2401c6b8
 8010204:	08014efc 	.word	0x08014efc
 8010208:	08014f4c 	.word	0x08014f4c
 801020c:	08014f38 	.word	0x08014f38
 8010210:	08014f64 	.word	0x08014f64

08010214 <tftp_tmr>:

static void
tftp_tmr(void *arg)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 801021c:	4b18      	ldr	r3, [pc, #96]	@ (8010280 <tftp_tmr+0x6c>)
 801021e:	699b      	ldr	r3, [r3, #24]
 8010220:	3301      	adds	r3, #1
 8010222:	4a17      	ldr	r2, [pc, #92]	@ (8010280 <tftp_tmr+0x6c>)
 8010224:	6193      	str	r3, [r2, #24]

  if (tftp_state.handle == NULL) {
 8010226:	4b16      	ldr	r3, [pc, #88]	@ (8010280 <tftp_tmr+0x6c>)
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d023      	beq.n	8010276 <tftp_tmr+0x62>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 801022e:	2200      	movs	r2, #0
 8010230:	4914      	ldr	r1, [pc, #80]	@ (8010284 <tftp_tmr+0x70>)
 8010232:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010236:	f000 f96f 	bl	8010518 <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 801023a:	4b11      	ldr	r3, [pc, #68]	@ (8010280 <tftp_tmr+0x6c>)
 801023c:	699a      	ldr	r2, [r3, #24]
 801023e:	4b10      	ldr	r3, [pc, #64]	@ (8010280 <tftp_tmr+0x6c>)
 8010240:	69db      	ldr	r3, [r3, #28]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	2b0a      	cmp	r3, #10
 8010246:	dd17      	ble.n	8010278 <tftp_tmr+0x64>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 8010248:	4b0d      	ldr	r3, [pc, #52]	@ (8010280 <tftp_tmr+0x6c>)
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d00f      	beq.n	8010270 <tftp_tmr+0x5c>
 8010250:	4b0b      	ldr	r3, [pc, #44]	@ (8010280 <tftp_tmr+0x6c>)
 8010252:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8010256:	2b04      	cmp	r3, #4
 8010258:	d80a      	bhi.n	8010270 <tftp_tmr+0x5c>
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout, retrying\n"));
      resend_data();
 801025a:	f7ff fd87 	bl	800fd6c <resend_data>
      tftp_state.retries++;
 801025e:	4b08      	ldr	r3, [pc, #32]	@ (8010280 <tftp_tmr+0x6c>)
 8010260:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8010264:	3301      	adds	r3, #1
 8010266:	b2da      	uxtb	r2, r3
 8010268:	4b05      	ldr	r3, [pc, #20]	@ (8010280 <tftp_tmr+0x6c>)
 801026a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801026e:	e003      	b.n	8010278 <tftp_tmr+0x64>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
 8010270:	f7ff fcd8 	bl	800fc24 <close_handle>
 8010274:	e000      	b.n	8010278 <tftp_tmr+0x64>
    return;
 8010276:	bf00      	nop
    }
  }
}
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	2401c6b8 	.word	0x2401c6b8
 8010284:	08010215 	.word	0x08010215

08010288 <tftp_init>:
 * Initialize TFTP server.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init(const struct tftp_context *ctx)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8010290:	202e      	movs	r0, #46	@ 0x2e
 8010292:	f000 fe5c 	bl	8010f4e <udp_new_ip_type>
 8010296:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d102      	bne.n	80102a4 <tftp_init+0x1c>
    return ERR_MEM;
 801029e:	f04f 33ff 	mov.w	r3, #4294967295
 80102a2:	e028      	b.n	80102f6 <tftp_init+0x6e>
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 80102a4:	2245      	movs	r2, #69	@ 0x45
 80102a6:	4916      	ldr	r1, [pc, #88]	@ (8010300 <tftp_init+0x78>)
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f000 fd4f 	bl	8010d4c <udp_bind>
 80102ae:	4603      	mov	r3, r0
 80102b0:	72fb      	strb	r3, [r7, #11]
  if (ret != ERR_OK) {
 80102b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d005      	beq.n	80102c6 <tftp_init+0x3e>
    udp_remove(pcb);
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f000 fdee 	bl	8010e9c <udp_remove>
    return ret;
 80102c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80102c4:	e017      	b.n	80102f6 <tftp_init+0x6e>
  }

  tftp_state.handle    = NULL;
 80102c6:	4b0f      	ldr	r3, [pc, #60]	@ (8010304 <tftp_init+0x7c>)
 80102c8:	2200      	movs	r2, #0
 80102ca:	605a      	str	r2, [r3, #4]
  tftp_state.port      = 0;
 80102cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010304 <tftp_init+0x7c>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	829a      	strh	r2, [r3, #20]
  tftp_state.ctx       = ctx;
 80102d2:	4a0c      	ldr	r2, [pc, #48]	@ (8010304 <tftp_init+0x7c>)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6013      	str	r3, [r2, #0]
  tftp_state.timer     = 0;
 80102d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010304 <tftp_init+0x7c>)
 80102da:	2200      	movs	r2, #0
 80102dc:	619a      	str	r2, [r3, #24]
  tftp_state.last_data = NULL;
 80102de:	4b09      	ldr	r3, [pc, #36]	@ (8010304 <tftp_init+0x7c>)
 80102e0:	2200      	movs	r2, #0
 80102e2:	609a      	str	r2, [r3, #8]
  tftp_state.upcb      = pcb;
 80102e4:	4a07      	ldr	r2, [pc, #28]	@ (8010304 <tftp_init+0x7c>)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	60d3      	str	r3, [r2, #12]

  udp_recv(pcb, recv, NULL);
 80102ea:	2200      	movs	r2, #0
 80102ec:	4906      	ldr	r1, [pc, #24]	@ (8010308 <tftp_init+0x80>)
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f000 fdb4 	bl	8010e5c <udp_recv>

  return ERR_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	08015508 	.word	0x08015508
 8010304:	2401c6b8 	.word	0x2401c6b8
 8010308:	0800fe85 	.word	0x0800fe85

0801030c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010314:	f7fa fb9c 	bl	800aa50 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010318:	4b0a      	ldr	r3, [pc, #40]	@ (8010344 <tcpip_tcp_timer+0x38>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d103      	bne.n	8010328 <tcpip_tcp_timer+0x1c>
 8010320:	4b09      	ldr	r3, [pc, #36]	@ (8010348 <tcpip_tcp_timer+0x3c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d005      	beq.n	8010334 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010328:	2200      	movs	r2, #0
 801032a:	4908      	ldr	r1, [pc, #32]	@ (801034c <tcpip_tcp_timer+0x40>)
 801032c:	20fa      	movs	r0, #250	@ 0xfa
 801032e:	f000 f8f3 	bl	8010518 <sys_timeout>
 8010332:	e003      	b.n	801033c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010334:	4b06      	ldr	r3, [pc, #24]	@ (8010350 <tcpip_tcp_timer+0x44>)
 8010336:	2200      	movs	r2, #0
 8010338:	601a      	str	r2, [r3, #0]
  }
}
 801033a:	bf00      	nop
 801033c:	bf00      	nop
 801033e:	3708      	adds	r7, #8
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	2401c674 	.word	0x2401c674
 8010348:	2401c678 	.word	0x2401c678
 801034c:	0801030d 	.word	0x0801030d
 8010350:	2401c6e4 	.word	0x2401c6e4

08010354 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010358:	4b0a      	ldr	r3, [pc, #40]	@ (8010384 <tcp_timer_needed+0x30>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10f      	bne.n	8010380 <tcp_timer_needed+0x2c>
 8010360:	4b09      	ldr	r3, [pc, #36]	@ (8010388 <tcp_timer_needed+0x34>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d103      	bne.n	8010370 <tcp_timer_needed+0x1c>
 8010368:	4b08      	ldr	r3, [pc, #32]	@ (801038c <tcp_timer_needed+0x38>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d007      	beq.n	8010380 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010370:	4b04      	ldr	r3, [pc, #16]	@ (8010384 <tcp_timer_needed+0x30>)
 8010372:	2201      	movs	r2, #1
 8010374:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010376:	2200      	movs	r2, #0
 8010378:	4905      	ldr	r1, [pc, #20]	@ (8010390 <tcp_timer_needed+0x3c>)
 801037a:	20fa      	movs	r0, #250	@ 0xfa
 801037c:	f000 f8cc 	bl	8010518 <sys_timeout>
  }
}
 8010380:	bf00      	nop
 8010382:	bd80      	pop	{r7, pc}
 8010384:	2401c6e4 	.word	0x2401c6e4
 8010388:	2401c674 	.word	0x2401c674
 801038c:	2401c678 	.word	0x2401c678
 8010390:	0801030d 	.word	0x0801030d

08010394 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80103a0:	2007      	movs	r0, #7
 80103a2:	f7f8 ffab 	bl	80092fc <memp_malloc>
 80103a6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d109      	bne.n	80103c2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d151      	bne.n	8010458 <sys_timeout_abs+0xc4>
 80103b4:	4b2a      	ldr	r3, [pc, #168]	@ (8010460 <sys_timeout_abs+0xcc>)
 80103b6:	22be      	movs	r2, #190	@ 0xbe
 80103b8:	492a      	ldr	r1, [pc, #168]	@ (8010464 <sys_timeout_abs+0xd0>)
 80103ba:	482b      	ldr	r0, [pc, #172]	@ (8010468 <sys_timeout_abs+0xd4>)
 80103bc:	f000 ff04 	bl	80111c8 <iprintf>
    return;
 80103c0:	e04a      	b.n	8010458 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	2200      	movs	r2, #0
 80103c6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80103da:	4b24      	ldr	r3, [pc, #144]	@ (801046c <sys_timeout_abs+0xd8>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d103      	bne.n	80103ea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80103e2:	4a22      	ldr	r2, [pc, #136]	@ (801046c <sys_timeout_abs+0xd8>)
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	6013      	str	r3, [r2, #0]
    return;
 80103e8:	e037      	b.n	801045a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	685a      	ldr	r2, [r3, #4]
 80103ee:	4b1f      	ldr	r3, [pc, #124]	@ (801046c <sys_timeout_abs+0xd8>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	0fdb      	lsrs	r3, r3, #31
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d007      	beq.n	8010412 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010402:	4b1a      	ldr	r3, [pc, #104]	@ (801046c <sys_timeout_abs+0xd8>)
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801040a:	4a18      	ldr	r2, [pc, #96]	@ (801046c <sys_timeout_abs+0xd8>)
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	6013      	str	r3, [r2, #0]
 8010410:	e023      	b.n	801045a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010412:	4b16      	ldr	r3, [pc, #88]	@ (801046c <sys_timeout_abs+0xd8>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	617b      	str	r3, [r7, #20]
 8010418:	e01a      	b.n	8010450 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <sys_timeout_abs+0xa6>
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	685a      	ldr	r2, [r3, #4]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	0fdb      	lsrs	r3, r3, #31
 8010430:	f003 0301 	and.w	r3, r3, #1
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d007      	beq.n	801044a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	693a      	ldr	r2, [r7, #16]
 8010446:	601a      	str	r2, [r3, #0]
        break;
 8010448:	e007      	b.n	801045a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	617b      	str	r3, [r7, #20]
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1e1      	bne.n	801041a <sys_timeout_abs+0x86>
 8010456:	e000      	b.n	801045a <sys_timeout_abs+0xc6>
    return;
 8010458:	bf00      	nop
      }
    }
  }
}
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	08015034 	.word	0x08015034
 8010464:	08015098 	.word	0x08015098
 8010468:	080150d8 	.word	0x080150d8
 801046c:	2401c6dc 	.word	0x2401c6dc

08010470 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	4798      	blx	r3

  now = sys_now();
 8010482:	f7f5 fce7 	bl	8005e54 <sys_now>
 8010486:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	4b0f      	ldr	r3, [pc, #60]	@ (80104cc <lwip_cyclic_timer+0x5c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4413      	add	r3, r2
 8010492:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	0fdb      	lsrs	r3, r3, #31
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d009      	beq.n	80104ba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	4413      	add	r3, r2
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	4907      	ldr	r1, [pc, #28]	@ (80104d0 <lwip_cyclic_timer+0x60>)
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff ff6e 	bl	8010394 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80104b8:	e004      	b.n	80104c4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	4904      	ldr	r1, [pc, #16]	@ (80104d0 <lwip_cyclic_timer+0x60>)
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f7ff ff68 	bl	8010394 <sys_timeout_abs>
}
 80104c4:	bf00      	nop
 80104c6:	3718      	adds	r7, #24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	2401c6e0 	.word	0x2401c6e0
 80104d0:	08010471 	.word	0x08010471

080104d4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80104da:	2301      	movs	r3, #1
 80104dc:	607b      	str	r3, [r7, #4]
 80104de:	e00e      	b.n	80104fe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80104e0:	4a0b      	ldr	r2, [pc, #44]	@ (8010510 <sys_timeouts_init+0x3c>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	00db      	lsls	r3, r3, #3
 80104ec:	4a08      	ldr	r2, [pc, #32]	@ (8010510 <sys_timeouts_init+0x3c>)
 80104ee:	4413      	add	r3, r2
 80104f0:	461a      	mov	r2, r3
 80104f2:	4908      	ldr	r1, [pc, #32]	@ (8010514 <sys_timeouts_init+0x40>)
 80104f4:	f000 f810 	bl	8010518 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	3301      	adds	r3, #1
 80104fc:	607b      	str	r3, [r7, #4]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d9ed      	bls.n	80104e0 <sys_timeouts_init+0xc>
  }
}
 8010504:	bf00      	nop
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	080155d4 	.word	0x080155d4
 8010514:	08010471 	.word	0x08010471

08010518 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801052a:	d306      	bcc.n	801053a <sys_timeout+0x22>
 801052c:	4b0a      	ldr	r3, [pc, #40]	@ (8010558 <sys_timeout+0x40>)
 801052e:	f240 1229 	movw	r2, #297	@ 0x129
 8010532:	490a      	ldr	r1, [pc, #40]	@ (801055c <sys_timeout+0x44>)
 8010534:	480a      	ldr	r0, [pc, #40]	@ (8010560 <sys_timeout+0x48>)
 8010536:	f000 fe47 	bl	80111c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801053a:	f7f5 fc8b 	bl	8005e54 <sys_now>
 801053e:	4602      	mov	r2, r0
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4413      	add	r3, r2
 8010544:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	68b9      	ldr	r1, [r7, #8]
 801054a:	6978      	ldr	r0, [r7, #20]
 801054c:	f7ff ff22 	bl	8010394 <sys_timeout_abs>
#endif
}
 8010550:	bf00      	nop
 8010552:	3718      	adds	r7, #24
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	08015034 	.word	0x08015034
 801055c:	08015100 	.word	0x08015100
 8010560:	080150d8 	.word	0x080150d8

08010564 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801056e:	4b19      	ldr	r3, [pc, #100]	@ (80105d4 <sys_untimeout+0x70>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d029      	beq.n	80105ca <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8010576:	4b17      	ldr	r3, [pc, #92]	@ (80105d4 <sys_untimeout+0x70>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	60bb      	str	r3, [r7, #8]
 801057c:	2300      	movs	r3, #0
 801057e:	60fb      	str	r3, [r7, #12]
 8010580:	e01f      	b.n	80105c2 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	429a      	cmp	r2, r3
 801058a:	d115      	bne.n	80105b8 <sys_untimeout+0x54>
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	683a      	ldr	r2, [r7, #0]
 8010592:	429a      	cmp	r2, r3
 8010594:	d110      	bne.n	80105b8 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d104      	bne.n	80105a6 <sys_untimeout+0x42>
        next_timeout = t->next;
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a0c      	ldr	r2, [pc, #48]	@ (80105d4 <sys_untimeout+0x70>)
 80105a2:	6013      	str	r3, [r2, #0]
 80105a4:	e003      	b.n	80105ae <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80105ae:	68b9      	ldr	r1, [r7, #8]
 80105b0:	2007      	movs	r0, #7
 80105b2:	f7f8 ff13 	bl	80093dc <memp_free>
      return;
 80105b6:	e009      	b.n	80105cc <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	60fb      	str	r3, [r7, #12]
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	60bb      	str	r3, [r7, #8]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d1dc      	bne.n	8010582 <sys_untimeout+0x1e>
    }
  }
  return;
 80105c8:	e000      	b.n	80105cc <sys_untimeout+0x68>
    return;
 80105ca:	bf00      	nop
}
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	2401c6dc 	.word	0x2401c6dc

080105d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80105de:	f7f5 fc39 	bl	8005e54 <sys_now>
 80105e2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80105e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010650 <sys_check_timeouts+0x78>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <sys_check_timeouts+0x1a>
 80105ee:	f7f9 fa35 	bl	8009a5c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80105f2:	4b18      	ldr	r3, [pc, #96]	@ (8010654 <sys_check_timeouts+0x7c>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d022      	beq.n	8010644 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	0fdb      	lsrs	r3, r3, #31
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d11a      	bne.n	8010648 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4a0f      	ldr	r2, [pc, #60]	@ (8010654 <sys_check_timeouts+0x7c>)
 8010618:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	4a0b      	ldr	r2, [pc, #44]	@ (8010658 <sys_check_timeouts+0x80>)
 801062c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801062e:	68b9      	ldr	r1, [r7, #8]
 8010630:	2007      	movs	r0, #7
 8010632:	f7f8 fed3 	bl	80093dc <memp_free>
    if (handler != NULL) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d0d3      	beq.n	80105e4 <sys_check_timeouts+0xc>
      handler(arg);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6838      	ldr	r0, [r7, #0]
 8010640:	4798      	blx	r3
  do {
 8010642:	e7cf      	b.n	80105e4 <sys_check_timeouts+0xc>
      return;
 8010644:	bf00      	nop
 8010646:	e000      	b.n	801064a <sys_check_timeouts+0x72>
      return;
 8010648:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	2401c661 	.word	0x2401c661
 8010654:	2401c6dc 	.word	0x2401c6dc
 8010658:	2401c6e0 	.word	0x2401c6e0

0801065c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010660:	f000 fcb2 	bl	8010fc8 <rand>
 8010664:	4603      	mov	r3, r0
 8010666:	b29b      	uxth	r3, r3
 8010668:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801066c:	b29b      	uxth	r3, r3
 801066e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010672:	b29a      	uxth	r2, r3
 8010674:	4b01      	ldr	r3, [pc, #4]	@ (801067c <udp_init+0x20>)
 8010676:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010678:	bf00      	nop
 801067a:	bd80      	pop	{r7, pc}
 801067c:	24000040 	.word	0x24000040

08010680 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801068a:	4b17      	ldr	r3, [pc, #92]	@ (80106e8 <udp_new_port+0x68>)
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	b291      	uxth	r1, r2
 8010692:	4a15      	ldr	r2, [pc, #84]	@ (80106e8 <udp_new_port+0x68>)
 8010694:	8011      	strh	r1, [r2, #0]
 8010696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801069a:	4293      	cmp	r3, r2
 801069c:	d103      	bne.n	80106a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801069e:	4b12      	ldr	r3, [pc, #72]	@ (80106e8 <udp_new_port+0x68>)
 80106a0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80106a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80106a6:	4b11      	ldr	r3, [pc, #68]	@ (80106ec <udp_new_port+0x6c>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	e011      	b.n	80106d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	8a5a      	ldrh	r2, [r3, #18]
 80106b2:	4b0d      	ldr	r3, [pc, #52]	@ (80106e8 <udp_new_port+0x68>)
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d108      	bne.n	80106cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80106ba:	88fb      	ldrh	r3, [r7, #6]
 80106bc:	3301      	adds	r3, #1
 80106be:	80fb      	strh	r3, [r7, #6]
 80106c0:	88fb      	ldrh	r3, [r7, #6]
 80106c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80106c6:	d3e0      	bcc.n	801068a <udp_new_port+0xa>
        return 0;
 80106c8:	2300      	movs	r3, #0
 80106ca:	e007      	b.n	80106dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	603b      	str	r3, [r7, #0]
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1ea      	bne.n	80106ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80106d8:	4b03      	ldr	r3, [pc, #12]	@ (80106e8 <udp_new_port+0x68>)
 80106da:	881b      	ldrh	r3, [r3, #0]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	24000040 	.word	0x24000040
 80106ec:	2401c6e8 	.word	0x2401c6e8

080106f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d105      	bne.n	8010710 <udp_input_local_match+0x20>
 8010704:	4b27      	ldr	r3, [pc, #156]	@ (80107a4 <udp_input_local_match+0xb4>)
 8010706:	2287      	movs	r2, #135	@ 0x87
 8010708:	4927      	ldr	r1, [pc, #156]	@ (80107a8 <udp_input_local_match+0xb8>)
 801070a:	4828      	ldr	r0, [pc, #160]	@ (80107ac <udp_input_local_match+0xbc>)
 801070c:	f000 fd5c 	bl	80111c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d105      	bne.n	8010722 <udp_input_local_match+0x32>
 8010716:	4b23      	ldr	r3, [pc, #140]	@ (80107a4 <udp_input_local_match+0xb4>)
 8010718:	2288      	movs	r2, #136	@ 0x88
 801071a:	4925      	ldr	r1, [pc, #148]	@ (80107b0 <udp_input_local_match+0xc0>)
 801071c:	4823      	ldr	r0, [pc, #140]	@ (80107ac <udp_input_local_match+0xbc>)
 801071e:	f000 fd53 	bl	80111c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	7a1b      	ldrb	r3, [r3, #8]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00b      	beq.n	8010742 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	7a1a      	ldrb	r2, [r3, #8]
 801072e:	4b21      	ldr	r3, [pc, #132]	@ (80107b4 <udp_input_local_match+0xc4>)
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010736:	3301      	adds	r3, #1
 8010738:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801073a:	429a      	cmp	r2, r3
 801073c:	d001      	beq.n	8010742 <udp_input_local_match+0x52>
    return 0;
 801073e:	2300      	movs	r3, #0
 8010740:	e02b      	b.n	801079a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010742:	79fb      	ldrb	r3, [r7, #7]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d018      	beq.n	801077a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d013      	beq.n	8010776 <udp_input_local_match+0x86>
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00f      	beq.n	8010776 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010756:	4b17      	ldr	r3, [pc, #92]	@ (80107b4 <udp_input_local_match+0xc4>)
 8010758:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801075a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801075e:	d00a      	beq.n	8010776 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	4b13      	ldr	r3, [pc, #76]	@ (80107b4 <udp_input_local_match+0xc4>)
 8010766:	695b      	ldr	r3, [r3, #20]
 8010768:	405a      	eors	r2, r3
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	3308      	adds	r3, #8
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010772:	2b00      	cmp	r3, #0
 8010774:	d110      	bne.n	8010798 <udp_input_local_match+0xa8>
          return 1;
 8010776:	2301      	movs	r3, #1
 8010778:	e00f      	b.n	801079a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d009      	beq.n	8010794 <udp_input_local_match+0xa4>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d005      	beq.n	8010794 <udp_input_local_match+0xa4>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	4b09      	ldr	r3, [pc, #36]	@ (80107b4 <udp_input_local_match+0xc4>)
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	429a      	cmp	r2, r3
 8010792:	d101      	bne.n	8010798 <udp_input_local_match+0xa8>
        return 1;
 8010794:	2301      	movs	r3, #1
 8010796:	e000      	b.n	801079a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	0801514c 	.word	0x0801514c
 80107a8:	080151a8 	.word	0x080151a8
 80107ac:	080151cc 	.word	0x080151cc
 80107b0:	080151f4 	.word	0x080151f4
 80107b4:	24000414 	.word	0x24000414

080107b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80107b8:	b590      	push	{r4, r7, lr}
 80107ba:	b08d      	sub	sp, #52	@ 0x34
 80107bc:	af02      	add	r7, sp, #8
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d105      	bne.n	80107d8 <udp_input+0x20>
 80107cc:	4b7c      	ldr	r3, [pc, #496]	@ (80109c0 <udp_input+0x208>)
 80107ce:	22cf      	movs	r2, #207	@ 0xcf
 80107d0:	497c      	ldr	r1, [pc, #496]	@ (80109c4 <udp_input+0x20c>)
 80107d2:	487d      	ldr	r0, [pc, #500]	@ (80109c8 <udp_input+0x210>)
 80107d4:	f000 fcf8 	bl	80111c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d105      	bne.n	80107ea <udp_input+0x32>
 80107de:	4b78      	ldr	r3, [pc, #480]	@ (80109c0 <udp_input+0x208>)
 80107e0:	22d0      	movs	r2, #208	@ 0xd0
 80107e2:	497a      	ldr	r1, [pc, #488]	@ (80109cc <udp_input+0x214>)
 80107e4:	4878      	ldr	r0, [pc, #480]	@ (80109c8 <udp_input+0x210>)
 80107e6:	f000 fcef 	bl	80111c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	895b      	ldrh	r3, [r3, #10]
 80107ee:	2b07      	cmp	r3, #7
 80107f0:	d803      	bhi.n	80107fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f7f9 fc6a 	bl	800a0cc <pbuf_free>
    goto end;
 80107f8:	e0de      	b.n	80109b8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010800:	4b73      	ldr	r3, [pc, #460]	@ (80109d0 <udp_input+0x218>)
 8010802:	695b      	ldr	r3, [r3, #20]
 8010804:	4a72      	ldr	r2, [pc, #456]	@ (80109d0 <udp_input+0x218>)
 8010806:	6812      	ldr	r2, [r2, #0]
 8010808:	4611      	mov	r1, r2
 801080a:	4618      	mov	r0, r3
 801080c:	f7f7 fad8 	bl	8007dc0 <ip4_addr_isbroadcast_u32>
 8010810:	4603      	mov	r3, r0
 8010812:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	b29b      	uxth	r3, r3
 801081a:	4618      	mov	r0, r3
 801081c:	f7f5 fd58 	bl	80062d0 <lwip_htons>
 8010820:	4603      	mov	r3, r0
 8010822:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	885b      	ldrh	r3, [r3, #2]
 8010828:	b29b      	uxth	r3, r3
 801082a:	4618      	mov	r0, r3
 801082c:	f7f5 fd50 	bl	80062d0 <lwip_htons>
 8010830:	4603      	mov	r3, r0
 8010832:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010834:	2300      	movs	r3, #0
 8010836:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8010838:	2300      	movs	r3, #0
 801083a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801083c:	2300      	movs	r3, #0
 801083e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010840:	4b64      	ldr	r3, [pc, #400]	@ (80109d4 <udp_input+0x21c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	627b      	str	r3, [r7, #36]	@ 0x24
 8010846:	e054      	b.n	80108f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801084a:	8a5b      	ldrh	r3, [r3, #18]
 801084c:	89fa      	ldrh	r2, [r7, #14]
 801084e:	429a      	cmp	r2, r3
 8010850:	d14a      	bne.n	80108e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010852:	7cfb      	ldrb	r3, [r7, #19]
 8010854:	461a      	mov	r2, r3
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801085a:	f7ff ff49 	bl	80106f0 <udp_input_local_match>
 801085e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010860:	2b00      	cmp	r3, #0
 8010862:	d041      	beq.n	80108e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010866:	7c1b      	ldrb	r3, [r3, #16]
 8010868:	f003 0304 	and.w	r3, r3, #4
 801086c:	2b00      	cmp	r3, #0
 801086e:	d11d      	bne.n	80108ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d102      	bne.n	801087c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010878:	61fb      	str	r3, [r7, #28]
 801087a:	e017      	b.n	80108ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801087c:	7cfb      	ldrb	r3, [r7, #19]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d014      	beq.n	80108ac <udp_input+0xf4>
 8010882:	4b53      	ldr	r3, [pc, #332]	@ (80109d0 <udp_input+0x218>)
 8010884:	695b      	ldr	r3, [r3, #20]
 8010886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801088a:	d10f      	bne.n	80108ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	3304      	adds	r3, #4
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	429a      	cmp	r2, r3
 8010898:	d008      	beq.n	80108ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	3304      	adds	r3, #4
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d101      	bne.n	80108ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80108a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80108ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ae:	8a9b      	ldrh	r3, [r3, #20]
 80108b0:	8a3a      	ldrh	r2, [r7, #16]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d118      	bne.n	80108e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80108b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d005      	beq.n	80108ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80108be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c0:	685a      	ldr	r2, [r3, #4]
 80108c2:	4b43      	ldr	r3, [pc, #268]	@ (80109d0 <udp_input+0x218>)
 80108c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d10e      	bne.n	80108e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80108ca:	6a3b      	ldr	r3, [r7, #32]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d014      	beq.n	80108fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80108d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d2:	68da      	ldr	r2, [r3, #12]
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80108d8:	4b3e      	ldr	r3, [pc, #248]	@ (80109d4 <udp_input+0x21c>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80108e0:	4a3c      	ldr	r2, [pc, #240]	@ (80109d4 <udp_input+0x21c>)
 80108e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80108e6:	e008      	b.n	80108fa <udp_input+0x142>
      }
    }

    prev = pcb;
 80108e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80108f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d1a7      	bne.n	8010848 <udp_input+0x90>
 80108f8:	e000      	b.n	80108fc <udp_input+0x144>
        break;
 80108fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80108fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <udp_input+0x15a>
    for_us = 1;
 801090c:	2301      	movs	r3, #1
 801090e:	76fb      	strb	r3, [r7, #27]
 8010910:	e00a      	b.n	8010928 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	3304      	adds	r3, #4
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	4b2d      	ldr	r3, [pc, #180]	@ (80109d0 <udp_input+0x218>)
 801091a:	695b      	ldr	r3, [r3, #20]
 801091c:	429a      	cmp	r2, r3
 801091e:	bf0c      	ite	eq
 8010920:	2301      	moveq	r3, #1
 8010922:	2300      	movne	r3, #0
 8010924:	b2db      	uxtb	r3, r3
 8010926:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010928:	7efb      	ldrb	r3, [r7, #27]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d041      	beq.n	80109b2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801092e:	2108      	movs	r1, #8
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7f9 fb45 	bl	8009fc0 <pbuf_remove_header>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00a      	beq.n	8010952 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801093c:	4b20      	ldr	r3, [pc, #128]	@ (80109c0 <udp_input+0x208>)
 801093e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010942:	4925      	ldr	r1, [pc, #148]	@ (80109d8 <udp_input+0x220>)
 8010944:	4820      	ldr	r0, [pc, #128]	@ (80109c8 <udp_input+0x210>)
 8010946:	f000 fc3f 	bl	80111c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7f9 fbbe 	bl	800a0cc <pbuf_free>
      goto end;
 8010950:	e032      	b.n	80109b8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010954:	2b00      	cmp	r3, #0
 8010956:	d012      	beq.n	801097e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095a:	699b      	ldr	r3, [r3, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00a      	beq.n	8010976 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010962:	699c      	ldr	r4, [r3, #24]
 8010964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010966:	69d8      	ldr	r0, [r3, #28]
 8010968:	8a3b      	ldrh	r3, [r7, #16]
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	4b1b      	ldr	r3, [pc, #108]	@ (80109dc <udp_input+0x224>)
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010972:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010974:	e021      	b.n	80109ba <udp_input+0x202>
        pbuf_free(p);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7f9 fba8 	bl	800a0cc <pbuf_free>
        goto end;
 801097c:	e01c      	b.n	80109b8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801097e:	7cfb      	ldrb	r3, [r7, #19]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d112      	bne.n	80109aa <udp_input+0x1f2>
 8010984:	4b12      	ldr	r3, [pc, #72]	@ (80109d0 <udp_input+0x218>)
 8010986:	695b      	ldr	r3, [r3, #20]
 8010988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801098c:	2be0      	cmp	r3, #224	@ 0xe0
 801098e:	d00c      	beq.n	80109aa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010990:	4b0f      	ldr	r3, [pc, #60]	@ (80109d0 <udp_input+0x218>)
 8010992:	899b      	ldrh	r3, [r3, #12]
 8010994:	3308      	adds	r3, #8
 8010996:	b29b      	uxth	r3, r3
 8010998:	b21b      	sxth	r3, r3
 801099a:	4619      	mov	r1, r3
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7f9 fb82 	bl	800a0a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80109a2:	2103      	movs	r1, #3
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7f6 fe03 	bl	80075b0 <icmp_dest_unreach>
      pbuf_free(p);
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7f9 fb8e 	bl	800a0cc <pbuf_free>
  return;
 80109b0:	e003      	b.n	80109ba <udp_input+0x202>
    pbuf_free(p);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7f9 fb8a 	bl	800a0cc <pbuf_free>
  return;
 80109b8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80109ba:	372c      	adds	r7, #44	@ 0x2c
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd90      	pop	{r4, r7, pc}
 80109c0:	0801514c 	.word	0x0801514c
 80109c4:	0801521c 	.word	0x0801521c
 80109c8:	080151cc 	.word	0x080151cc
 80109cc:	08015234 	.word	0x08015234
 80109d0:	24000414 	.word	0x24000414
 80109d4:	2401c6e8 	.word	0x2401c6e8
 80109d8:	08015250 	.word	0x08015250
 80109dc:	24000424 	.word	0x24000424

080109e0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b088      	sub	sp, #32
 80109e4:	af02      	add	r7, sp, #8
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
 80109ec:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d109      	bne.n	8010a08 <udp_sendto+0x28>
 80109f4:	4b23      	ldr	r3, [pc, #140]	@ (8010a84 <udp_sendto+0xa4>)
 80109f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80109fa:	4923      	ldr	r1, [pc, #140]	@ (8010a88 <udp_sendto+0xa8>)
 80109fc:	4823      	ldr	r0, [pc, #140]	@ (8010a8c <udp_sendto+0xac>)
 80109fe:	f000 fbe3 	bl	80111c8 <iprintf>
 8010a02:	f06f 030f 	mvn.w	r3, #15
 8010a06:	e038      	b.n	8010a7a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d109      	bne.n	8010a22 <udp_sendto+0x42>
 8010a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8010a84 <udp_sendto+0xa4>)
 8010a10:	f240 2219 	movw	r2, #537	@ 0x219
 8010a14:	491e      	ldr	r1, [pc, #120]	@ (8010a90 <udp_sendto+0xb0>)
 8010a16:	481d      	ldr	r0, [pc, #116]	@ (8010a8c <udp_sendto+0xac>)
 8010a18:	f000 fbd6 	bl	80111c8 <iprintf>
 8010a1c:	f06f 030f 	mvn.w	r3, #15
 8010a20:	e02b      	b.n	8010a7a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d109      	bne.n	8010a3c <udp_sendto+0x5c>
 8010a28:	4b16      	ldr	r3, [pc, #88]	@ (8010a84 <udp_sendto+0xa4>)
 8010a2a:	f240 221a 	movw	r2, #538	@ 0x21a
 8010a2e:	4919      	ldr	r1, [pc, #100]	@ (8010a94 <udp_sendto+0xb4>)
 8010a30:	4816      	ldr	r0, [pc, #88]	@ (8010a8c <udp_sendto+0xac>)
 8010a32:	f000 fbc9 	bl	80111c8 <iprintf>
 8010a36:	f06f 030f 	mvn.w	r3, #15
 8010a3a:	e01e      	b.n	8010a7a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	7a1b      	ldrb	r3, [r3, #8]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d006      	beq.n	8010a52 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	7a1b      	ldrb	r3, [r3, #8]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f8 ffe1 	bl	8009a10 <netif_get_by_index>
 8010a4e:	6178      	str	r0, [r7, #20]
 8010a50:	e003      	b.n	8010a5a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7f6 ff12 	bl	800787c <ip4_route>
 8010a58:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d102      	bne.n	8010a66 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010a60:	f06f 0303 	mvn.w	r3, #3
 8010a64:	e009      	b.n	8010a7a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010a66:	887a      	ldrh	r2, [r7, #2]
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	68b9      	ldr	r1, [r7, #8]
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	f000 f810 	bl	8010a98 <udp_sendto_if>
 8010a78:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	0801514c 	.word	0x0801514c
 8010a88:	0801529c 	.word	0x0801529c
 8010a8c:	080151cc 	.word	0x080151cc
 8010a90:	080152b4 	.word	0x080152b4
 8010a94:	080152d0 	.word	0x080152d0

08010a98 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b088      	sub	sp, #32
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d109      	bne.n	8010ac0 <udp_sendto_if+0x28>
 8010aac:	4b2e      	ldr	r3, [pc, #184]	@ (8010b68 <udp_sendto_if+0xd0>)
 8010aae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ab2:	492e      	ldr	r1, [pc, #184]	@ (8010b6c <udp_sendto_if+0xd4>)
 8010ab4:	482e      	ldr	r0, [pc, #184]	@ (8010b70 <udp_sendto_if+0xd8>)
 8010ab6:	f000 fb87 	bl	80111c8 <iprintf>
 8010aba:	f06f 030f 	mvn.w	r3, #15
 8010abe:	e04f      	b.n	8010b60 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d109      	bne.n	8010ada <udp_sendto_if+0x42>
 8010ac6:	4b28      	ldr	r3, [pc, #160]	@ (8010b68 <udp_sendto_if+0xd0>)
 8010ac8:	f240 2281 	movw	r2, #641	@ 0x281
 8010acc:	4929      	ldr	r1, [pc, #164]	@ (8010b74 <udp_sendto_if+0xdc>)
 8010ace:	4828      	ldr	r0, [pc, #160]	@ (8010b70 <udp_sendto_if+0xd8>)
 8010ad0:	f000 fb7a 	bl	80111c8 <iprintf>
 8010ad4:	f06f 030f 	mvn.w	r3, #15
 8010ad8:	e042      	b.n	8010b60 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d109      	bne.n	8010af4 <udp_sendto_if+0x5c>
 8010ae0:	4b21      	ldr	r3, [pc, #132]	@ (8010b68 <udp_sendto_if+0xd0>)
 8010ae2:	f240 2282 	movw	r2, #642	@ 0x282
 8010ae6:	4924      	ldr	r1, [pc, #144]	@ (8010b78 <udp_sendto_if+0xe0>)
 8010ae8:	4821      	ldr	r0, [pc, #132]	@ (8010b70 <udp_sendto_if+0xd8>)
 8010aea:	f000 fb6d 	bl	80111c8 <iprintf>
 8010aee:	f06f 030f 	mvn.w	r3, #15
 8010af2:	e035      	b.n	8010b60 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010af4:	6a3b      	ldr	r3, [r7, #32]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d109      	bne.n	8010b0e <udp_sendto_if+0x76>
 8010afa:	4b1b      	ldr	r3, [pc, #108]	@ (8010b68 <udp_sendto_if+0xd0>)
 8010afc:	f240 2283 	movw	r2, #643	@ 0x283
 8010b00:	491e      	ldr	r1, [pc, #120]	@ (8010b7c <udp_sendto_if+0xe4>)
 8010b02:	481b      	ldr	r0, [pc, #108]	@ (8010b70 <udp_sendto_if+0xd8>)
 8010b04:	f000 fb60 	bl	80111c8 <iprintf>
 8010b08:	f06f 030f 	mvn.w	r3, #15
 8010b0c:	e028      	b.n	8010b60 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d009      	beq.n	8010b28 <udp_sendto_if+0x90>
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d005      	beq.n	8010b28 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010b24:	2be0      	cmp	r3, #224	@ 0xe0
 8010b26:	d103      	bne.n	8010b30 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	3304      	adds	r3, #4
 8010b2c:	617b      	str	r3, [r7, #20]
 8010b2e:	e00b      	b.n	8010b48 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	6a3b      	ldr	r3, [r7, #32]
 8010b36:	3304      	adds	r3, #4
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d002      	beq.n	8010b44 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010b3e:	f06f 0303 	mvn.w	r3, #3
 8010b42:	e00d      	b.n	8010b60 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010b48:	887a      	ldrh	r2, [r7, #2]
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	6a3b      	ldr	r3, [r7, #32]
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	4613      	mov	r3, r2
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	68b9      	ldr	r1, [r7, #8]
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f000 f811 	bl	8010b80 <udp_sendto_if_src>
 8010b5e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	0801514c 	.word	0x0801514c
 8010b6c:	080152ec 	.word	0x080152ec
 8010b70:	080151cc 	.word	0x080151cc
 8010b74:	08015308 	.word	0x08015308
 8010b78:	08015324 	.word	0x08015324
 8010b7c:	08015344 	.word	0x08015344

08010b80 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08c      	sub	sp, #48	@ 0x30
 8010b84:	af04      	add	r7, sp, #16
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
 8010b8c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d109      	bne.n	8010ba8 <udp_sendto_if_src+0x28>
 8010b94:	4b65      	ldr	r3, [pc, #404]	@ (8010d2c <udp_sendto_if_src+0x1ac>)
 8010b96:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010b9a:	4965      	ldr	r1, [pc, #404]	@ (8010d30 <udp_sendto_if_src+0x1b0>)
 8010b9c:	4865      	ldr	r0, [pc, #404]	@ (8010d34 <udp_sendto_if_src+0x1b4>)
 8010b9e:	f000 fb13 	bl	80111c8 <iprintf>
 8010ba2:	f06f 030f 	mvn.w	r3, #15
 8010ba6:	e0bc      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d109      	bne.n	8010bc2 <udp_sendto_if_src+0x42>
 8010bae:	4b5f      	ldr	r3, [pc, #380]	@ (8010d2c <udp_sendto_if_src+0x1ac>)
 8010bb0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8010bb4:	4960      	ldr	r1, [pc, #384]	@ (8010d38 <udp_sendto_if_src+0x1b8>)
 8010bb6:	485f      	ldr	r0, [pc, #380]	@ (8010d34 <udp_sendto_if_src+0x1b4>)
 8010bb8:	f000 fb06 	bl	80111c8 <iprintf>
 8010bbc:	f06f 030f 	mvn.w	r3, #15
 8010bc0:	e0af      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d109      	bne.n	8010bdc <udp_sendto_if_src+0x5c>
 8010bc8:	4b58      	ldr	r3, [pc, #352]	@ (8010d2c <udp_sendto_if_src+0x1ac>)
 8010bca:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8010bce:	495b      	ldr	r1, [pc, #364]	@ (8010d3c <udp_sendto_if_src+0x1bc>)
 8010bd0:	4858      	ldr	r0, [pc, #352]	@ (8010d34 <udp_sendto_if_src+0x1b4>)
 8010bd2:	f000 faf9 	bl	80111c8 <iprintf>
 8010bd6:	f06f 030f 	mvn.w	r3, #15
 8010bda:	e0a2      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d109      	bne.n	8010bf6 <udp_sendto_if_src+0x76>
 8010be2:	4b52      	ldr	r3, [pc, #328]	@ (8010d2c <udp_sendto_if_src+0x1ac>)
 8010be4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8010be8:	4955      	ldr	r1, [pc, #340]	@ (8010d40 <udp_sendto_if_src+0x1c0>)
 8010bea:	4852      	ldr	r0, [pc, #328]	@ (8010d34 <udp_sendto_if_src+0x1b4>)
 8010bec:	f000 faec 	bl	80111c8 <iprintf>
 8010bf0:	f06f 030f 	mvn.w	r3, #15
 8010bf4:	e095      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d109      	bne.n	8010c10 <udp_sendto_if_src+0x90>
 8010bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8010d2c <udp_sendto_if_src+0x1ac>)
 8010bfe:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8010c02:	4950      	ldr	r1, [pc, #320]	@ (8010d44 <udp_sendto_if_src+0x1c4>)
 8010c04:	484b      	ldr	r0, [pc, #300]	@ (8010d34 <udp_sendto_if_src+0x1b4>)
 8010c06:	f000 fadf 	bl	80111c8 <iprintf>
 8010c0a:	f06f 030f 	mvn.w	r3, #15
 8010c0e:	e088      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	8a5b      	ldrh	r3, [r3, #18]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d10f      	bne.n	8010c38 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010c18:	68f9      	ldr	r1, [r7, #12]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	8a5b      	ldrh	r3, [r3, #18]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f000 f893 	bl	8010d4c <udp_bind>
 8010c26:	4603      	mov	r3, r0
 8010c28:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010c2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d002      	beq.n	8010c38 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010c32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010c36:	e074      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	891b      	ldrh	r3, [r3, #8]
 8010c3c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d902      	bls.n	8010c4a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010c44:	f04f 33ff 	mov.w	r3, #4294967295
 8010c48:	e06b      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010c4a:	2108      	movs	r1, #8
 8010c4c:	68b8      	ldr	r0, [r7, #8]
 8010c4e:	f7f9 f9a7 	bl	8009fa0 <pbuf_add_header>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d015      	beq.n	8010c84 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010c58:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010c5c:	2108      	movs	r1, #8
 8010c5e:	2022      	movs	r0, #34	@ 0x22
 8010c60:	f7f8 ff52 	bl	8009b08 <pbuf_alloc>
 8010c64:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c70:	e057      	b.n	8010d22 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	891b      	ldrh	r3, [r3, #8]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d006      	beq.n	8010c88 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010c7a:	68b9      	ldr	r1, [r7, #8]
 8010c7c:	69f8      	ldr	r0, [r7, #28]
 8010c7e:	f7f9 fb3d 	bl	800a2fc <pbuf_chain>
 8010c82:	e001      	b.n	8010c88 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	895b      	ldrh	r3, [r3, #10]
 8010c8c:	2b07      	cmp	r3, #7
 8010c8e:	d806      	bhi.n	8010c9e <udp_sendto_if_src+0x11e>
 8010c90:	4b26      	ldr	r3, [pc, #152]	@ (8010d2c <udp_sendto_if_src+0x1ac>)
 8010c92:	f240 320d 	movw	r2, #781	@ 0x30d
 8010c96:	492c      	ldr	r1, [pc, #176]	@ (8010d48 <udp_sendto_if_src+0x1c8>)
 8010c98:	4826      	ldr	r0, [pc, #152]	@ (8010d34 <udp_sendto_if_src+0x1b4>)
 8010c9a:	f000 fa95 	bl	80111c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	8a5b      	ldrh	r3, [r3, #18]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f5 fb11 	bl	80062d0 <lwip_htons>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010cb6:	887b      	ldrh	r3, [r7, #2]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7f5 fb09 	bl	80062d0 <lwip_htons>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	719a      	strb	r2, [r3, #6]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	891b      	ldrh	r3, [r3, #8]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7f5 fafb 	bl	80062d0 <lwip_htons>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	461a      	mov	r2, r3
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010ce2:	2311      	movs	r3, #17
 8010ce4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	7adb      	ldrb	r3, [r3, #11]
 8010cea:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	7a9b      	ldrb	r3, [r3, #10]
 8010cf0:	7cb9      	ldrb	r1, [r7, #18]
 8010cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cf4:	9202      	str	r2, [sp, #8]
 8010cf6:	7cfa      	ldrb	r2, [r7, #19]
 8010cf8:	9201      	str	r2, [sp, #4]
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d02:	69f8      	ldr	r0, [r7, #28]
 8010d04:	f7f6 ffae 	bl	8007c64 <ip4_output_if_src>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010d0c:	69fa      	ldr	r2, [r7, #28]
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d004      	beq.n	8010d1e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010d14:	69f8      	ldr	r0, [r7, #28]
 8010d16:	f7f9 f9d9 	bl	800a0cc <pbuf_free>
    q = NULL;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010d1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3720      	adds	r7, #32
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	0801514c 	.word	0x0801514c
 8010d30:	08015364 	.word	0x08015364
 8010d34:	080151cc 	.word	0x080151cc
 8010d38:	08015384 	.word	0x08015384
 8010d3c:	080153a4 	.word	0x080153a4
 8010d40:	080153c8 	.word	0x080153c8
 8010d44:	080153ec 	.word	0x080153ec
 8010d48:	08015410 	.word	0x08015410

08010d4c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b086      	sub	sp, #24
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	4613      	mov	r3, r2
 8010d58:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d101      	bne.n	8010d64 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010d60:	4b39      	ldr	r3, [pc, #228]	@ (8010e48 <udp_bind+0xfc>)
 8010d62:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d109      	bne.n	8010d7e <udp_bind+0x32>
 8010d6a:	4b38      	ldr	r3, [pc, #224]	@ (8010e4c <udp_bind+0x100>)
 8010d6c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8010d70:	4937      	ldr	r1, [pc, #220]	@ (8010e50 <udp_bind+0x104>)
 8010d72:	4838      	ldr	r0, [pc, #224]	@ (8010e54 <udp_bind+0x108>)
 8010d74:	f000 fa28 	bl	80111c8 <iprintf>
 8010d78:	f06f 030f 	mvn.w	r3, #15
 8010d7c:	e060      	b.n	8010e40 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d82:	4b35      	ldr	r3, [pc, #212]	@ (8010e58 <udp_bind+0x10c>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	617b      	str	r3, [r7, #20]
 8010d88:	e009      	b.n	8010d9e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d102      	bne.n	8010d98 <udp_bind+0x4c>
      rebind = 1;
 8010d92:	2301      	movs	r3, #1
 8010d94:	74fb      	strb	r3, [r7, #19]
      break;
 8010d96:	e005      	b.n	8010da4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	617b      	str	r3, [r7, #20]
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d1f2      	bne.n	8010d8a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010da4:	88fb      	ldrh	r3, [r7, #6]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d109      	bne.n	8010dbe <udp_bind+0x72>
    port = udp_new_port();
 8010daa:	f7ff fc69 	bl	8010680 <udp_new_port>
 8010dae:	4603      	mov	r3, r0
 8010db0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010db2:	88fb      	ldrh	r3, [r7, #6]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d12c      	bne.n	8010e12 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010db8:	f06f 0307 	mvn.w	r3, #7
 8010dbc:	e040      	b.n	8010e40 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010dbe:	4b26      	ldr	r3, [pc, #152]	@ (8010e58 <udp_bind+0x10c>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	617b      	str	r3, [r7, #20]
 8010dc4:	e022      	b.n	8010e0c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010dc6:	68fa      	ldr	r2, [r7, #12]
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d01b      	beq.n	8010e06 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	8a5b      	ldrh	r3, [r3, #18]
 8010dd2:	88fa      	ldrh	r2, [r7, #6]
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d116      	bne.n	8010e06 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d00d      	beq.n	8010e00 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00a      	beq.n	8010e00 <udp_bind+0xb4>
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d006      	beq.n	8010e00 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010df2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d003      	beq.n	8010e00 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d102      	bne.n	8010e06 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010e00:	f06f 0307 	mvn.w	r3, #7
 8010e04:	e01c      	b.n	8010e40 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	617b      	str	r3, [r7, #20]
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d1d9      	bne.n	8010dc6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <udp_bind+0xd2>
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	e000      	b.n	8010e20 <udp_bind+0xd4>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	88fa      	ldrh	r2, [r7, #6]
 8010e28:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010e2a:	7cfb      	ldrb	r3, [r7, #19]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d106      	bne.n	8010e3e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010e30:	4b09      	ldr	r3, [pc, #36]	@ (8010e58 <udp_bind+0x10c>)
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010e38:	4a07      	ldr	r2, [pc, #28]	@ (8010e58 <udp_bind+0x10c>)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3718      	adds	r7, #24
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	08015508 	.word	0x08015508
 8010e4c:	0801514c 	.word	0x0801514c
 8010e50:	08015440 	.word	0x08015440
 8010e54:	080151cc 	.word	0x080151cc
 8010e58:	2401c6e8 	.word	0x2401c6e8

08010e5c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d107      	bne.n	8010e7e <udp_recv+0x22>
 8010e6e:	4b08      	ldr	r3, [pc, #32]	@ (8010e90 <udp_recv+0x34>)
 8010e70:	f240 428a 	movw	r2, #1162	@ 0x48a
 8010e74:	4907      	ldr	r1, [pc, #28]	@ (8010e94 <udp_recv+0x38>)
 8010e76:	4808      	ldr	r0, [pc, #32]	@ (8010e98 <udp_recv+0x3c>)
 8010e78:	f000 f9a6 	bl	80111c8 <iprintf>
 8010e7c:	e005      	b.n	8010e8a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	61da      	str	r2, [r3, #28]
}
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	0801514c 	.word	0x0801514c
 8010e94:	080154ac 	.word	0x080154ac
 8010e98:	080151cc 	.word	0x080151cc

08010e9c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d107      	bne.n	8010eba <udp_remove+0x1e>
 8010eaa:	4b19      	ldr	r3, [pc, #100]	@ (8010f10 <udp_remove+0x74>)
 8010eac:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8010eb0:	4918      	ldr	r1, [pc, #96]	@ (8010f14 <udp_remove+0x78>)
 8010eb2:	4819      	ldr	r0, [pc, #100]	@ (8010f18 <udp_remove+0x7c>)
 8010eb4:	f000 f988 	bl	80111c8 <iprintf>
 8010eb8:	e026      	b.n	8010f08 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010eba:	4b18      	ldr	r3, [pc, #96]	@ (8010f1c <udp_remove+0x80>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d105      	bne.n	8010ed0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010ec4:	4b15      	ldr	r3, [pc, #84]	@ (8010f1c <udp_remove+0x80>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	4a14      	ldr	r2, [pc, #80]	@ (8010f1c <udp_remove+0x80>)
 8010ecc:	6013      	str	r3, [r2, #0]
 8010ece:	e017      	b.n	8010f00 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010ed0:	4b12      	ldr	r3, [pc, #72]	@ (8010f1c <udp_remove+0x80>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	60fb      	str	r3, [r7, #12]
 8010ed6:	e010      	b.n	8010efa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d009      	beq.n	8010ef4 <udp_remove+0x58>
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d104      	bne.n	8010ef4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	68da      	ldr	r2, [r3, #12]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	60da      	str	r2, [r3, #12]
        break;
 8010ef2:	e005      	b.n	8010f00 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	60fb      	str	r3, [r7, #12]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d1eb      	bne.n	8010ed8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010f00:	6879      	ldr	r1, [r7, #4]
 8010f02:	2001      	movs	r0, #1
 8010f04:	f7f8 fa6a 	bl	80093dc <memp_free>
}
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	0801514c 	.word	0x0801514c
 8010f14:	080154c4 	.word	0x080154c4
 8010f18:	080151cc 	.word	0x080151cc
 8010f1c:	2401c6e8 	.word	0x2401c6e8

08010f20 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010f26:	2001      	movs	r0, #1
 8010f28:	f7f8 f9e8 	bl	80092fc <memp_malloc>
 8010f2c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d007      	beq.n	8010f44 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010f34:	2220      	movs	r2, #32
 8010f36:	2100      	movs	r1, #0
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 fa9d 	bl	8011478 <memset>
    pcb->ttl = UDP_TTL;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	22ff      	movs	r2, #255	@ 0xff
 8010f42:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010f44:	687b      	ldr	r3, [r7, #4]
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b084      	sub	sp, #16
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	4603      	mov	r3, r0
 8010f56:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8010f58:	f7ff ffe2 	bl	8010f20 <udp_new>
 8010f5c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d01e      	beq.n	8010fb6 <udp_netif_ip_addr_changed+0x4e>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d01a      	beq.n	8010fb6 <udp_netif_ip_addr_changed+0x4e>
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d017      	beq.n	8010fb6 <udp_netif_ip_addr_changed+0x4e>
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d013      	beq.n	8010fb6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8010fc4 <udp_netif_ip_addr_changed+0x5c>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	60fb      	str	r3, [r7, #12]
 8010f94:	e00c      	b.n	8010fb0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d103      	bne.n	8010faa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	60fb      	str	r3, [r7, #12]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1ef      	bne.n	8010f96 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010fb6:	bf00      	nop
 8010fb8:	3714      	adds	r7, #20
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	2401c6e8 	.word	0x2401c6e8

08010fc8 <rand>:
 8010fc8:	4b16      	ldr	r3, [pc, #88]	@ (8011024 <rand+0x5c>)
 8010fca:	b510      	push	{r4, lr}
 8010fcc:	681c      	ldr	r4, [r3, #0]
 8010fce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fd0:	b9b3      	cbnz	r3, 8011000 <rand+0x38>
 8010fd2:	2018      	movs	r0, #24
 8010fd4:	f000 fb3c 	bl	8011650 <malloc>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	6320      	str	r0, [r4, #48]	@ 0x30
 8010fdc:	b920      	cbnz	r0, 8010fe8 <rand+0x20>
 8010fde:	4b12      	ldr	r3, [pc, #72]	@ (8011028 <rand+0x60>)
 8010fe0:	4812      	ldr	r0, [pc, #72]	@ (801102c <rand+0x64>)
 8010fe2:	2152      	movs	r1, #82	@ 0x52
 8010fe4:	f000 facc 	bl	8011580 <__assert_func>
 8010fe8:	4911      	ldr	r1, [pc, #68]	@ (8011030 <rand+0x68>)
 8010fea:	4b12      	ldr	r3, [pc, #72]	@ (8011034 <rand+0x6c>)
 8010fec:	e9c0 1300 	strd	r1, r3, [r0]
 8010ff0:	4b11      	ldr	r3, [pc, #68]	@ (8011038 <rand+0x70>)
 8010ff2:	6083      	str	r3, [r0, #8]
 8010ff4:	230b      	movs	r3, #11
 8010ff6:	8183      	strh	r3, [r0, #12]
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	2001      	movs	r0, #1
 8010ffc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011000:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011002:	480e      	ldr	r0, [pc, #56]	@ (801103c <rand+0x74>)
 8011004:	690b      	ldr	r3, [r1, #16]
 8011006:	694c      	ldr	r4, [r1, #20]
 8011008:	4a0d      	ldr	r2, [pc, #52]	@ (8011040 <rand+0x78>)
 801100a:	4358      	muls	r0, r3
 801100c:	fb02 0004 	mla	r0, r2, r4, r0
 8011010:	fba3 3202 	umull	r3, r2, r3, r2
 8011014:	3301      	adds	r3, #1
 8011016:	eb40 0002 	adc.w	r0, r0, r2
 801101a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801101e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011022:	bd10      	pop	{r4, pc}
 8011024:	24000050 	.word	0x24000050
 8011028:	080155ec 	.word	0x080155ec
 801102c:	08015603 	.word	0x08015603
 8011030:	abcd330e 	.word	0xabcd330e
 8011034:	e66d1234 	.word	0xe66d1234
 8011038:	0005deec 	.word	0x0005deec
 801103c:	5851f42d 	.word	0x5851f42d
 8011040:	4c957f2d 	.word	0x4c957f2d

08011044 <std>:
 8011044:	2300      	movs	r3, #0
 8011046:	b510      	push	{r4, lr}
 8011048:	4604      	mov	r4, r0
 801104a:	e9c0 3300 	strd	r3, r3, [r0]
 801104e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011052:	6083      	str	r3, [r0, #8]
 8011054:	8181      	strh	r1, [r0, #12]
 8011056:	6643      	str	r3, [r0, #100]	@ 0x64
 8011058:	81c2      	strh	r2, [r0, #14]
 801105a:	6183      	str	r3, [r0, #24]
 801105c:	4619      	mov	r1, r3
 801105e:	2208      	movs	r2, #8
 8011060:	305c      	adds	r0, #92	@ 0x5c
 8011062:	f000 fa09 	bl	8011478 <memset>
 8011066:	4b0d      	ldr	r3, [pc, #52]	@ (801109c <std+0x58>)
 8011068:	6263      	str	r3, [r4, #36]	@ 0x24
 801106a:	4b0d      	ldr	r3, [pc, #52]	@ (80110a0 <std+0x5c>)
 801106c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801106e:	4b0d      	ldr	r3, [pc, #52]	@ (80110a4 <std+0x60>)
 8011070:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011072:	4b0d      	ldr	r3, [pc, #52]	@ (80110a8 <std+0x64>)
 8011074:	6323      	str	r3, [r4, #48]	@ 0x30
 8011076:	4b0d      	ldr	r3, [pc, #52]	@ (80110ac <std+0x68>)
 8011078:	6224      	str	r4, [r4, #32]
 801107a:	429c      	cmp	r4, r3
 801107c:	d006      	beq.n	801108c <std+0x48>
 801107e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011082:	4294      	cmp	r4, r2
 8011084:	d002      	beq.n	801108c <std+0x48>
 8011086:	33d0      	adds	r3, #208	@ 0xd0
 8011088:	429c      	cmp	r4, r3
 801108a:	d105      	bne.n	8011098 <std+0x54>
 801108c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011094:	f000 ba62 	b.w	801155c <__retarget_lock_init_recursive>
 8011098:	bd10      	pop	{r4, pc}
 801109a:	bf00      	nop
 801109c:	080112a9 	.word	0x080112a9
 80110a0:	080112cb 	.word	0x080112cb
 80110a4:	08011303 	.word	0x08011303
 80110a8:	08011327 	.word	0x08011327
 80110ac:	2401c6ec 	.word	0x2401c6ec

080110b0 <stdio_exit_handler>:
 80110b0:	4a02      	ldr	r2, [pc, #8]	@ (80110bc <stdio_exit_handler+0xc>)
 80110b2:	4903      	ldr	r1, [pc, #12]	@ (80110c0 <stdio_exit_handler+0x10>)
 80110b4:	4803      	ldr	r0, [pc, #12]	@ (80110c4 <stdio_exit_handler+0x14>)
 80110b6:	f000 b869 	b.w	801118c <_fwalk_sglue>
 80110ba:	bf00      	nop
 80110bc:	24000044 	.word	0x24000044
 80110c0:	08011e65 	.word	0x08011e65
 80110c4:	24000054 	.word	0x24000054

080110c8 <cleanup_stdio>:
 80110c8:	6841      	ldr	r1, [r0, #4]
 80110ca:	4b0c      	ldr	r3, [pc, #48]	@ (80110fc <cleanup_stdio+0x34>)
 80110cc:	4299      	cmp	r1, r3
 80110ce:	b510      	push	{r4, lr}
 80110d0:	4604      	mov	r4, r0
 80110d2:	d001      	beq.n	80110d8 <cleanup_stdio+0x10>
 80110d4:	f000 fec6 	bl	8011e64 <_fflush_r>
 80110d8:	68a1      	ldr	r1, [r4, #8]
 80110da:	4b09      	ldr	r3, [pc, #36]	@ (8011100 <cleanup_stdio+0x38>)
 80110dc:	4299      	cmp	r1, r3
 80110de:	d002      	beq.n	80110e6 <cleanup_stdio+0x1e>
 80110e0:	4620      	mov	r0, r4
 80110e2:	f000 febf 	bl	8011e64 <_fflush_r>
 80110e6:	68e1      	ldr	r1, [r4, #12]
 80110e8:	4b06      	ldr	r3, [pc, #24]	@ (8011104 <cleanup_stdio+0x3c>)
 80110ea:	4299      	cmp	r1, r3
 80110ec:	d004      	beq.n	80110f8 <cleanup_stdio+0x30>
 80110ee:	4620      	mov	r0, r4
 80110f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110f4:	f000 beb6 	b.w	8011e64 <_fflush_r>
 80110f8:	bd10      	pop	{r4, pc}
 80110fa:	bf00      	nop
 80110fc:	2401c6ec 	.word	0x2401c6ec
 8011100:	2401c754 	.word	0x2401c754
 8011104:	2401c7bc 	.word	0x2401c7bc

08011108 <global_stdio_init.part.0>:
 8011108:	b510      	push	{r4, lr}
 801110a:	4b0b      	ldr	r3, [pc, #44]	@ (8011138 <global_stdio_init.part.0+0x30>)
 801110c:	4c0b      	ldr	r4, [pc, #44]	@ (801113c <global_stdio_init.part.0+0x34>)
 801110e:	4a0c      	ldr	r2, [pc, #48]	@ (8011140 <global_stdio_init.part.0+0x38>)
 8011110:	601a      	str	r2, [r3, #0]
 8011112:	4620      	mov	r0, r4
 8011114:	2200      	movs	r2, #0
 8011116:	2104      	movs	r1, #4
 8011118:	f7ff ff94 	bl	8011044 <std>
 801111c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011120:	2201      	movs	r2, #1
 8011122:	2109      	movs	r1, #9
 8011124:	f7ff ff8e 	bl	8011044 <std>
 8011128:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801112c:	2202      	movs	r2, #2
 801112e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011132:	2112      	movs	r1, #18
 8011134:	f7ff bf86 	b.w	8011044 <std>
 8011138:	2401c824 	.word	0x2401c824
 801113c:	2401c6ec 	.word	0x2401c6ec
 8011140:	080110b1 	.word	0x080110b1

08011144 <__sfp_lock_acquire>:
 8011144:	4801      	ldr	r0, [pc, #4]	@ (801114c <__sfp_lock_acquire+0x8>)
 8011146:	f000 ba0a 	b.w	801155e <__retarget_lock_acquire_recursive>
 801114a:	bf00      	nop
 801114c:	2401c82d 	.word	0x2401c82d

08011150 <__sfp_lock_release>:
 8011150:	4801      	ldr	r0, [pc, #4]	@ (8011158 <__sfp_lock_release+0x8>)
 8011152:	f000 ba05 	b.w	8011560 <__retarget_lock_release_recursive>
 8011156:	bf00      	nop
 8011158:	2401c82d 	.word	0x2401c82d

0801115c <__sinit>:
 801115c:	b510      	push	{r4, lr}
 801115e:	4604      	mov	r4, r0
 8011160:	f7ff fff0 	bl	8011144 <__sfp_lock_acquire>
 8011164:	6a23      	ldr	r3, [r4, #32]
 8011166:	b11b      	cbz	r3, 8011170 <__sinit+0x14>
 8011168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801116c:	f7ff bff0 	b.w	8011150 <__sfp_lock_release>
 8011170:	4b04      	ldr	r3, [pc, #16]	@ (8011184 <__sinit+0x28>)
 8011172:	6223      	str	r3, [r4, #32]
 8011174:	4b04      	ldr	r3, [pc, #16]	@ (8011188 <__sinit+0x2c>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1f5      	bne.n	8011168 <__sinit+0xc>
 801117c:	f7ff ffc4 	bl	8011108 <global_stdio_init.part.0>
 8011180:	e7f2      	b.n	8011168 <__sinit+0xc>
 8011182:	bf00      	nop
 8011184:	080110c9 	.word	0x080110c9
 8011188:	2401c824 	.word	0x2401c824

0801118c <_fwalk_sglue>:
 801118c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011190:	4607      	mov	r7, r0
 8011192:	4688      	mov	r8, r1
 8011194:	4614      	mov	r4, r2
 8011196:	2600      	movs	r6, #0
 8011198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801119c:	f1b9 0901 	subs.w	r9, r9, #1
 80111a0:	d505      	bpl.n	80111ae <_fwalk_sglue+0x22>
 80111a2:	6824      	ldr	r4, [r4, #0]
 80111a4:	2c00      	cmp	r4, #0
 80111a6:	d1f7      	bne.n	8011198 <_fwalk_sglue+0xc>
 80111a8:	4630      	mov	r0, r6
 80111aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ae:	89ab      	ldrh	r3, [r5, #12]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d907      	bls.n	80111c4 <_fwalk_sglue+0x38>
 80111b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111b8:	3301      	adds	r3, #1
 80111ba:	d003      	beq.n	80111c4 <_fwalk_sglue+0x38>
 80111bc:	4629      	mov	r1, r5
 80111be:	4638      	mov	r0, r7
 80111c0:	47c0      	blx	r8
 80111c2:	4306      	orrs	r6, r0
 80111c4:	3568      	adds	r5, #104	@ 0x68
 80111c6:	e7e9      	b.n	801119c <_fwalk_sglue+0x10>

080111c8 <iprintf>:
 80111c8:	b40f      	push	{r0, r1, r2, r3}
 80111ca:	b507      	push	{r0, r1, r2, lr}
 80111cc:	4906      	ldr	r1, [pc, #24]	@ (80111e8 <iprintf+0x20>)
 80111ce:	ab04      	add	r3, sp, #16
 80111d0:	6808      	ldr	r0, [r1, #0]
 80111d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80111d6:	6881      	ldr	r1, [r0, #8]
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	f000 fb19 	bl	8011810 <_vfiprintf_r>
 80111de:	b003      	add	sp, #12
 80111e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80111e4:	b004      	add	sp, #16
 80111e6:	4770      	bx	lr
 80111e8:	24000050 	.word	0x24000050

080111ec <_puts_r>:
 80111ec:	6a03      	ldr	r3, [r0, #32]
 80111ee:	b570      	push	{r4, r5, r6, lr}
 80111f0:	6884      	ldr	r4, [r0, #8]
 80111f2:	4605      	mov	r5, r0
 80111f4:	460e      	mov	r6, r1
 80111f6:	b90b      	cbnz	r3, 80111fc <_puts_r+0x10>
 80111f8:	f7ff ffb0 	bl	801115c <__sinit>
 80111fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111fe:	07db      	lsls	r3, r3, #31
 8011200:	d405      	bmi.n	801120e <_puts_r+0x22>
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	0598      	lsls	r0, r3, #22
 8011206:	d402      	bmi.n	801120e <_puts_r+0x22>
 8011208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801120a:	f000 f9a8 	bl	801155e <__retarget_lock_acquire_recursive>
 801120e:	89a3      	ldrh	r3, [r4, #12]
 8011210:	0719      	lsls	r1, r3, #28
 8011212:	d502      	bpl.n	801121a <_puts_r+0x2e>
 8011214:	6923      	ldr	r3, [r4, #16]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d135      	bne.n	8011286 <_puts_r+0x9a>
 801121a:	4621      	mov	r1, r4
 801121c:	4628      	mov	r0, r5
 801121e:	f000 f8c5 	bl	80113ac <__swsetup_r>
 8011222:	b380      	cbz	r0, 8011286 <_puts_r+0x9a>
 8011224:	f04f 35ff 	mov.w	r5, #4294967295
 8011228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801122a:	07da      	lsls	r2, r3, #31
 801122c:	d405      	bmi.n	801123a <_puts_r+0x4e>
 801122e:	89a3      	ldrh	r3, [r4, #12]
 8011230:	059b      	lsls	r3, r3, #22
 8011232:	d402      	bmi.n	801123a <_puts_r+0x4e>
 8011234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011236:	f000 f993 	bl	8011560 <__retarget_lock_release_recursive>
 801123a:	4628      	mov	r0, r5
 801123c:	bd70      	pop	{r4, r5, r6, pc}
 801123e:	2b00      	cmp	r3, #0
 8011240:	da04      	bge.n	801124c <_puts_r+0x60>
 8011242:	69a2      	ldr	r2, [r4, #24]
 8011244:	429a      	cmp	r2, r3
 8011246:	dc17      	bgt.n	8011278 <_puts_r+0x8c>
 8011248:	290a      	cmp	r1, #10
 801124a:	d015      	beq.n	8011278 <_puts_r+0x8c>
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	1c5a      	adds	r2, r3, #1
 8011250:	6022      	str	r2, [r4, #0]
 8011252:	7019      	strb	r1, [r3, #0]
 8011254:	68a3      	ldr	r3, [r4, #8]
 8011256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801125a:	3b01      	subs	r3, #1
 801125c:	60a3      	str	r3, [r4, #8]
 801125e:	2900      	cmp	r1, #0
 8011260:	d1ed      	bne.n	801123e <_puts_r+0x52>
 8011262:	2b00      	cmp	r3, #0
 8011264:	da11      	bge.n	801128a <_puts_r+0x9e>
 8011266:	4622      	mov	r2, r4
 8011268:	210a      	movs	r1, #10
 801126a:	4628      	mov	r0, r5
 801126c:	f000 f85f 	bl	801132e <__swbuf_r>
 8011270:	3001      	adds	r0, #1
 8011272:	d0d7      	beq.n	8011224 <_puts_r+0x38>
 8011274:	250a      	movs	r5, #10
 8011276:	e7d7      	b.n	8011228 <_puts_r+0x3c>
 8011278:	4622      	mov	r2, r4
 801127a:	4628      	mov	r0, r5
 801127c:	f000 f857 	bl	801132e <__swbuf_r>
 8011280:	3001      	adds	r0, #1
 8011282:	d1e7      	bne.n	8011254 <_puts_r+0x68>
 8011284:	e7ce      	b.n	8011224 <_puts_r+0x38>
 8011286:	3e01      	subs	r6, #1
 8011288:	e7e4      	b.n	8011254 <_puts_r+0x68>
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	1c5a      	adds	r2, r3, #1
 801128e:	6022      	str	r2, [r4, #0]
 8011290:	220a      	movs	r2, #10
 8011292:	701a      	strb	r2, [r3, #0]
 8011294:	e7ee      	b.n	8011274 <_puts_r+0x88>
	...

08011298 <puts>:
 8011298:	4b02      	ldr	r3, [pc, #8]	@ (80112a4 <puts+0xc>)
 801129a:	4601      	mov	r1, r0
 801129c:	6818      	ldr	r0, [r3, #0]
 801129e:	f7ff bfa5 	b.w	80111ec <_puts_r>
 80112a2:	bf00      	nop
 80112a4:	24000050 	.word	0x24000050

080112a8 <__sread>:
 80112a8:	b510      	push	{r4, lr}
 80112aa:	460c      	mov	r4, r1
 80112ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b0:	f000 f90c 	bl	80114cc <_read_r>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	bfab      	itete	ge
 80112b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80112ba:	89a3      	ldrhlt	r3, [r4, #12]
 80112bc:	181b      	addge	r3, r3, r0
 80112be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80112c2:	bfac      	ite	ge
 80112c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80112c6:	81a3      	strhlt	r3, [r4, #12]
 80112c8:	bd10      	pop	{r4, pc}

080112ca <__swrite>:
 80112ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ce:	461f      	mov	r7, r3
 80112d0:	898b      	ldrh	r3, [r1, #12]
 80112d2:	05db      	lsls	r3, r3, #23
 80112d4:	4605      	mov	r5, r0
 80112d6:	460c      	mov	r4, r1
 80112d8:	4616      	mov	r6, r2
 80112da:	d505      	bpl.n	80112e8 <__swrite+0x1e>
 80112dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112e0:	2302      	movs	r3, #2
 80112e2:	2200      	movs	r2, #0
 80112e4:	f000 f8e0 	bl	80114a8 <_lseek_r>
 80112e8:	89a3      	ldrh	r3, [r4, #12]
 80112ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80112f2:	81a3      	strh	r3, [r4, #12]
 80112f4:	4632      	mov	r2, r6
 80112f6:	463b      	mov	r3, r7
 80112f8:	4628      	mov	r0, r5
 80112fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112fe:	f000 b8f7 	b.w	80114f0 <_write_r>

08011302 <__sseek>:
 8011302:	b510      	push	{r4, lr}
 8011304:	460c      	mov	r4, r1
 8011306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801130a:	f000 f8cd 	bl	80114a8 <_lseek_r>
 801130e:	1c43      	adds	r3, r0, #1
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	bf15      	itete	ne
 8011314:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011316:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801131a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801131e:	81a3      	strheq	r3, [r4, #12]
 8011320:	bf18      	it	ne
 8011322:	81a3      	strhne	r3, [r4, #12]
 8011324:	bd10      	pop	{r4, pc}

08011326 <__sclose>:
 8011326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801132a:	f000 b8ad 	b.w	8011488 <_close_r>

0801132e <__swbuf_r>:
 801132e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011330:	460e      	mov	r6, r1
 8011332:	4614      	mov	r4, r2
 8011334:	4605      	mov	r5, r0
 8011336:	b118      	cbz	r0, 8011340 <__swbuf_r+0x12>
 8011338:	6a03      	ldr	r3, [r0, #32]
 801133a:	b90b      	cbnz	r3, 8011340 <__swbuf_r+0x12>
 801133c:	f7ff ff0e 	bl	801115c <__sinit>
 8011340:	69a3      	ldr	r3, [r4, #24]
 8011342:	60a3      	str	r3, [r4, #8]
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	071a      	lsls	r2, r3, #28
 8011348:	d501      	bpl.n	801134e <__swbuf_r+0x20>
 801134a:	6923      	ldr	r3, [r4, #16]
 801134c:	b943      	cbnz	r3, 8011360 <__swbuf_r+0x32>
 801134e:	4621      	mov	r1, r4
 8011350:	4628      	mov	r0, r5
 8011352:	f000 f82b 	bl	80113ac <__swsetup_r>
 8011356:	b118      	cbz	r0, 8011360 <__swbuf_r+0x32>
 8011358:	f04f 37ff 	mov.w	r7, #4294967295
 801135c:	4638      	mov	r0, r7
 801135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011360:	6823      	ldr	r3, [r4, #0]
 8011362:	6922      	ldr	r2, [r4, #16]
 8011364:	1a98      	subs	r0, r3, r2
 8011366:	6963      	ldr	r3, [r4, #20]
 8011368:	b2f6      	uxtb	r6, r6
 801136a:	4283      	cmp	r3, r0
 801136c:	4637      	mov	r7, r6
 801136e:	dc05      	bgt.n	801137c <__swbuf_r+0x4e>
 8011370:	4621      	mov	r1, r4
 8011372:	4628      	mov	r0, r5
 8011374:	f000 fd76 	bl	8011e64 <_fflush_r>
 8011378:	2800      	cmp	r0, #0
 801137a:	d1ed      	bne.n	8011358 <__swbuf_r+0x2a>
 801137c:	68a3      	ldr	r3, [r4, #8]
 801137e:	3b01      	subs	r3, #1
 8011380:	60a3      	str	r3, [r4, #8]
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	6022      	str	r2, [r4, #0]
 8011388:	701e      	strb	r6, [r3, #0]
 801138a:	6962      	ldr	r2, [r4, #20]
 801138c:	1c43      	adds	r3, r0, #1
 801138e:	429a      	cmp	r2, r3
 8011390:	d004      	beq.n	801139c <__swbuf_r+0x6e>
 8011392:	89a3      	ldrh	r3, [r4, #12]
 8011394:	07db      	lsls	r3, r3, #31
 8011396:	d5e1      	bpl.n	801135c <__swbuf_r+0x2e>
 8011398:	2e0a      	cmp	r6, #10
 801139a:	d1df      	bne.n	801135c <__swbuf_r+0x2e>
 801139c:	4621      	mov	r1, r4
 801139e:	4628      	mov	r0, r5
 80113a0:	f000 fd60 	bl	8011e64 <_fflush_r>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d0d9      	beq.n	801135c <__swbuf_r+0x2e>
 80113a8:	e7d6      	b.n	8011358 <__swbuf_r+0x2a>
	...

080113ac <__swsetup_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4b29      	ldr	r3, [pc, #164]	@ (8011454 <__swsetup_r+0xa8>)
 80113b0:	4605      	mov	r5, r0
 80113b2:	6818      	ldr	r0, [r3, #0]
 80113b4:	460c      	mov	r4, r1
 80113b6:	b118      	cbz	r0, 80113c0 <__swsetup_r+0x14>
 80113b8:	6a03      	ldr	r3, [r0, #32]
 80113ba:	b90b      	cbnz	r3, 80113c0 <__swsetup_r+0x14>
 80113bc:	f7ff fece 	bl	801115c <__sinit>
 80113c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113c4:	0719      	lsls	r1, r3, #28
 80113c6:	d422      	bmi.n	801140e <__swsetup_r+0x62>
 80113c8:	06da      	lsls	r2, r3, #27
 80113ca:	d407      	bmi.n	80113dc <__swsetup_r+0x30>
 80113cc:	2209      	movs	r2, #9
 80113ce:	602a      	str	r2, [r5, #0]
 80113d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113d4:	81a3      	strh	r3, [r4, #12]
 80113d6:	f04f 30ff 	mov.w	r0, #4294967295
 80113da:	e033      	b.n	8011444 <__swsetup_r+0x98>
 80113dc:	0758      	lsls	r0, r3, #29
 80113de:	d512      	bpl.n	8011406 <__swsetup_r+0x5a>
 80113e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113e2:	b141      	cbz	r1, 80113f6 <__swsetup_r+0x4a>
 80113e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113e8:	4299      	cmp	r1, r3
 80113ea:	d002      	beq.n	80113f2 <__swsetup_r+0x46>
 80113ec:	4628      	mov	r0, r5
 80113ee:	f000 f8e5 	bl	80115bc <_free_r>
 80113f2:	2300      	movs	r3, #0
 80113f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80113f6:	89a3      	ldrh	r3, [r4, #12]
 80113f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113fc:	81a3      	strh	r3, [r4, #12]
 80113fe:	2300      	movs	r3, #0
 8011400:	6063      	str	r3, [r4, #4]
 8011402:	6923      	ldr	r3, [r4, #16]
 8011404:	6023      	str	r3, [r4, #0]
 8011406:	89a3      	ldrh	r3, [r4, #12]
 8011408:	f043 0308 	orr.w	r3, r3, #8
 801140c:	81a3      	strh	r3, [r4, #12]
 801140e:	6923      	ldr	r3, [r4, #16]
 8011410:	b94b      	cbnz	r3, 8011426 <__swsetup_r+0x7a>
 8011412:	89a3      	ldrh	r3, [r4, #12]
 8011414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801141c:	d003      	beq.n	8011426 <__swsetup_r+0x7a>
 801141e:	4621      	mov	r1, r4
 8011420:	4628      	mov	r0, r5
 8011422:	f000 fd7f 	bl	8011f24 <__smakebuf_r>
 8011426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801142a:	f013 0201 	ands.w	r2, r3, #1
 801142e:	d00a      	beq.n	8011446 <__swsetup_r+0x9a>
 8011430:	2200      	movs	r2, #0
 8011432:	60a2      	str	r2, [r4, #8]
 8011434:	6962      	ldr	r2, [r4, #20]
 8011436:	4252      	negs	r2, r2
 8011438:	61a2      	str	r2, [r4, #24]
 801143a:	6922      	ldr	r2, [r4, #16]
 801143c:	b942      	cbnz	r2, 8011450 <__swsetup_r+0xa4>
 801143e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011442:	d1c5      	bne.n	80113d0 <__swsetup_r+0x24>
 8011444:	bd38      	pop	{r3, r4, r5, pc}
 8011446:	0799      	lsls	r1, r3, #30
 8011448:	bf58      	it	pl
 801144a:	6962      	ldrpl	r2, [r4, #20]
 801144c:	60a2      	str	r2, [r4, #8]
 801144e:	e7f4      	b.n	801143a <__swsetup_r+0x8e>
 8011450:	2000      	movs	r0, #0
 8011452:	e7f7      	b.n	8011444 <__swsetup_r+0x98>
 8011454:	24000050 	.word	0x24000050

08011458 <memcmp>:
 8011458:	b510      	push	{r4, lr}
 801145a:	3901      	subs	r1, #1
 801145c:	4402      	add	r2, r0
 801145e:	4290      	cmp	r0, r2
 8011460:	d101      	bne.n	8011466 <memcmp+0xe>
 8011462:	2000      	movs	r0, #0
 8011464:	e005      	b.n	8011472 <memcmp+0x1a>
 8011466:	7803      	ldrb	r3, [r0, #0]
 8011468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801146c:	42a3      	cmp	r3, r4
 801146e:	d001      	beq.n	8011474 <memcmp+0x1c>
 8011470:	1b18      	subs	r0, r3, r4
 8011472:	bd10      	pop	{r4, pc}
 8011474:	3001      	adds	r0, #1
 8011476:	e7f2      	b.n	801145e <memcmp+0x6>

08011478 <memset>:
 8011478:	4402      	add	r2, r0
 801147a:	4603      	mov	r3, r0
 801147c:	4293      	cmp	r3, r2
 801147e:	d100      	bne.n	8011482 <memset+0xa>
 8011480:	4770      	bx	lr
 8011482:	f803 1b01 	strb.w	r1, [r3], #1
 8011486:	e7f9      	b.n	801147c <memset+0x4>

08011488 <_close_r>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	4d06      	ldr	r5, [pc, #24]	@ (80114a4 <_close_r+0x1c>)
 801148c:	2300      	movs	r3, #0
 801148e:	4604      	mov	r4, r0
 8011490:	4608      	mov	r0, r1
 8011492:	602b      	str	r3, [r5, #0]
 8011494:	f7ef fd74 	bl	8000f80 <_close>
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	d102      	bne.n	80114a2 <_close_r+0x1a>
 801149c:	682b      	ldr	r3, [r5, #0]
 801149e:	b103      	cbz	r3, 80114a2 <_close_r+0x1a>
 80114a0:	6023      	str	r3, [r4, #0]
 80114a2:	bd38      	pop	{r3, r4, r5, pc}
 80114a4:	2401c828 	.word	0x2401c828

080114a8 <_lseek_r>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	4d07      	ldr	r5, [pc, #28]	@ (80114c8 <_lseek_r+0x20>)
 80114ac:	4604      	mov	r4, r0
 80114ae:	4608      	mov	r0, r1
 80114b0:	4611      	mov	r1, r2
 80114b2:	2200      	movs	r2, #0
 80114b4:	602a      	str	r2, [r5, #0]
 80114b6:	461a      	mov	r2, r3
 80114b8:	f7ef fd89 	bl	8000fce <_lseek>
 80114bc:	1c43      	adds	r3, r0, #1
 80114be:	d102      	bne.n	80114c6 <_lseek_r+0x1e>
 80114c0:	682b      	ldr	r3, [r5, #0]
 80114c2:	b103      	cbz	r3, 80114c6 <_lseek_r+0x1e>
 80114c4:	6023      	str	r3, [r4, #0]
 80114c6:	bd38      	pop	{r3, r4, r5, pc}
 80114c8:	2401c828 	.word	0x2401c828

080114cc <_read_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	4d07      	ldr	r5, [pc, #28]	@ (80114ec <_read_r+0x20>)
 80114d0:	4604      	mov	r4, r0
 80114d2:	4608      	mov	r0, r1
 80114d4:	4611      	mov	r1, r2
 80114d6:	2200      	movs	r2, #0
 80114d8:	602a      	str	r2, [r5, #0]
 80114da:	461a      	mov	r2, r3
 80114dc:	f7ef fd33 	bl	8000f46 <_read>
 80114e0:	1c43      	adds	r3, r0, #1
 80114e2:	d102      	bne.n	80114ea <_read_r+0x1e>
 80114e4:	682b      	ldr	r3, [r5, #0]
 80114e6:	b103      	cbz	r3, 80114ea <_read_r+0x1e>
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
 80114ec:	2401c828 	.word	0x2401c828

080114f0 <_write_r>:
 80114f0:	b538      	push	{r3, r4, r5, lr}
 80114f2:	4d07      	ldr	r5, [pc, #28]	@ (8011510 <_write_r+0x20>)
 80114f4:	4604      	mov	r4, r0
 80114f6:	4608      	mov	r0, r1
 80114f8:	4611      	mov	r1, r2
 80114fa:	2200      	movs	r2, #0
 80114fc:	602a      	str	r2, [r5, #0]
 80114fe:	461a      	mov	r2, r3
 8011500:	f7ef f8b1 	bl	8000666 <_write>
 8011504:	1c43      	adds	r3, r0, #1
 8011506:	d102      	bne.n	801150e <_write_r+0x1e>
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	b103      	cbz	r3, 801150e <_write_r+0x1e>
 801150c:	6023      	str	r3, [r4, #0]
 801150e:	bd38      	pop	{r3, r4, r5, pc}
 8011510:	2401c828 	.word	0x2401c828

08011514 <__libc_init_array>:
 8011514:	b570      	push	{r4, r5, r6, lr}
 8011516:	4d0d      	ldr	r5, [pc, #52]	@ (801154c <__libc_init_array+0x38>)
 8011518:	4c0d      	ldr	r4, [pc, #52]	@ (8011550 <__libc_init_array+0x3c>)
 801151a:	1b64      	subs	r4, r4, r5
 801151c:	10a4      	asrs	r4, r4, #2
 801151e:	2600      	movs	r6, #0
 8011520:	42a6      	cmp	r6, r4
 8011522:	d109      	bne.n	8011538 <__libc_init_array+0x24>
 8011524:	4d0b      	ldr	r5, [pc, #44]	@ (8011554 <__libc_init_array+0x40>)
 8011526:	4c0c      	ldr	r4, [pc, #48]	@ (8011558 <__libc_init_array+0x44>)
 8011528:	f000 fdb6 	bl	8012098 <_init>
 801152c:	1b64      	subs	r4, r4, r5
 801152e:	10a4      	asrs	r4, r4, #2
 8011530:	2600      	movs	r6, #0
 8011532:	42a6      	cmp	r6, r4
 8011534:	d105      	bne.n	8011542 <__libc_init_array+0x2e>
 8011536:	bd70      	pop	{r4, r5, r6, pc}
 8011538:	f855 3b04 	ldr.w	r3, [r5], #4
 801153c:	4798      	blx	r3
 801153e:	3601      	adds	r6, #1
 8011540:	e7ee      	b.n	8011520 <__libc_init_array+0xc>
 8011542:	f855 3b04 	ldr.w	r3, [r5], #4
 8011546:	4798      	blx	r3
 8011548:	3601      	adds	r6, #1
 801154a:	e7f2      	b.n	8011532 <__libc_init_array+0x1e>
 801154c:	080156d4 	.word	0x080156d4
 8011550:	080156d4 	.word	0x080156d4
 8011554:	080156d4 	.word	0x080156d4
 8011558:	080156d8 	.word	0x080156d8

0801155c <__retarget_lock_init_recursive>:
 801155c:	4770      	bx	lr

0801155e <__retarget_lock_acquire_recursive>:
 801155e:	4770      	bx	lr

08011560 <__retarget_lock_release_recursive>:
 8011560:	4770      	bx	lr

08011562 <memcpy>:
 8011562:	440a      	add	r2, r1
 8011564:	4291      	cmp	r1, r2
 8011566:	f100 33ff 	add.w	r3, r0, #4294967295
 801156a:	d100      	bne.n	801156e <memcpy+0xc>
 801156c:	4770      	bx	lr
 801156e:	b510      	push	{r4, lr}
 8011570:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011578:	4291      	cmp	r1, r2
 801157a:	d1f9      	bne.n	8011570 <memcpy+0xe>
 801157c:	bd10      	pop	{r4, pc}
	...

08011580 <__assert_func>:
 8011580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011582:	4614      	mov	r4, r2
 8011584:	461a      	mov	r2, r3
 8011586:	4b09      	ldr	r3, [pc, #36]	@ (80115ac <__assert_func+0x2c>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4605      	mov	r5, r0
 801158c:	68d8      	ldr	r0, [r3, #12]
 801158e:	b954      	cbnz	r4, 80115a6 <__assert_func+0x26>
 8011590:	4b07      	ldr	r3, [pc, #28]	@ (80115b0 <__assert_func+0x30>)
 8011592:	461c      	mov	r4, r3
 8011594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011598:	9100      	str	r1, [sp, #0]
 801159a:	462b      	mov	r3, r5
 801159c:	4905      	ldr	r1, [pc, #20]	@ (80115b4 <__assert_func+0x34>)
 801159e:	f000 fc89 	bl	8011eb4 <fiprintf>
 80115a2:	f000 fd2d 	bl	8012000 <abort>
 80115a6:	4b04      	ldr	r3, [pc, #16]	@ (80115b8 <__assert_func+0x38>)
 80115a8:	e7f4      	b.n	8011594 <__assert_func+0x14>
 80115aa:	bf00      	nop
 80115ac:	24000050 	.word	0x24000050
 80115b0:	08015696 	.word	0x08015696
 80115b4:	08015668 	.word	0x08015668
 80115b8:	0801565b 	.word	0x0801565b

080115bc <_free_r>:
 80115bc:	b538      	push	{r3, r4, r5, lr}
 80115be:	4605      	mov	r5, r0
 80115c0:	2900      	cmp	r1, #0
 80115c2:	d041      	beq.n	8011648 <_free_r+0x8c>
 80115c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115c8:	1f0c      	subs	r4, r1, #4
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	bfb8      	it	lt
 80115ce:	18e4      	addlt	r4, r4, r3
 80115d0:	f000 f8e8 	bl	80117a4 <__malloc_lock>
 80115d4:	4a1d      	ldr	r2, [pc, #116]	@ (801164c <_free_r+0x90>)
 80115d6:	6813      	ldr	r3, [r2, #0]
 80115d8:	b933      	cbnz	r3, 80115e8 <_free_r+0x2c>
 80115da:	6063      	str	r3, [r4, #4]
 80115dc:	6014      	str	r4, [r2, #0]
 80115de:	4628      	mov	r0, r5
 80115e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115e4:	f000 b8e4 	b.w	80117b0 <__malloc_unlock>
 80115e8:	42a3      	cmp	r3, r4
 80115ea:	d908      	bls.n	80115fe <_free_r+0x42>
 80115ec:	6820      	ldr	r0, [r4, #0]
 80115ee:	1821      	adds	r1, r4, r0
 80115f0:	428b      	cmp	r3, r1
 80115f2:	bf01      	itttt	eq
 80115f4:	6819      	ldreq	r1, [r3, #0]
 80115f6:	685b      	ldreq	r3, [r3, #4]
 80115f8:	1809      	addeq	r1, r1, r0
 80115fa:	6021      	streq	r1, [r4, #0]
 80115fc:	e7ed      	b.n	80115da <_free_r+0x1e>
 80115fe:	461a      	mov	r2, r3
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	b10b      	cbz	r3, 8011608 <_free_r+0x4c>
 8011604:	42a3      	cmp	r3, r4
 8011606:	d9fa      	bls.n	80115fe <_free_r+0x42>
 8011608:	6811      	ldr	r1, [r2, #0]
 801160a:	1850      	adds	r0, r2, r1
 801160c:	42a0      	cmp	r0, r4
 801160e:	d10b      	bne.n	8011628 <_free_r+0x6c>
 8011610:	6820      	ldr	r0, [r4, #0]
 8011612:	4401      	add	r1, r0
 8011614:	1850      	adds	r0, r2, r1
 8011616:	4283      	cmp	r3, r0
 8011618:	6011      	str	r1, [r2, #0]
 801161a:	d1e0      	bne.n	80115de <_free_r+0x22>
 801161c:	6818      	ldr	r0, [r3, #0]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	6053      	str	r3, [r2, #4]
 8011622:	4408      	add	r0, r1
 8011624:	6010      	str	r0, [r2, #0]
 8011626:	e7da      	b.n	80115de <_free_r+0x22>
 8011628:	d902      	bls.n	8011630 <_free_r+0x74>
 801162a:	230c      	movs	r3, #12
 801162c:	602b      	str	r3, [r5, #0]
 801162e:	e7d6      	b.n	80115de <_free_r+0x22>
 8011630:	6820      	ldr	r0, [r4, #0]
 8011632:	1821      	adds	r1, r4, r0
 8011634:	428b      	cmp	r3, r1
 8011636:	bf04      	itt	eq
 8011638:	6819      	ldreq	r1, [r3, #0]
 801163a:	685b      	ldreq	r3, [r3, #4]
 801163c:	6063      	str	r3, [r4, #4]
 801163e:	bf04      	itt	eq
 8011640:	1809      	addeq	r1, r1, r0
 8011642:	6021      	streq	r1, [r4, #0]
 8011644:	6054      	str	r4, [r2, #4]
 8011646:	e7ca      	b.n	80115de <_free_r+0x22>
 8011648:	bd38      	pop	{r3, r4, r5, pc}
 801164a:	bf00      	nop
 801164c:	2401c834 	.word	0x2401c834

08011650 <malloc>:
 8011650:	4b02      	ldr	r3, [pc, #8]	@ (801165c <malloc+0xc>)
 8011652:	4601      	mov	r1, r0
 8011654:	6818      	ldr	r0, [r3, #0]
 8011656:	f000 b825 	b.w	80116a4 <_malloc_r>
 801165a:	bf00      	nop
 801165c:	24000050 	.word	0x24000050

08011660 <sbrk_aligned>:
 8011660:	b570      	push	{r4, r5, r6, lr}
 8011662:	4e0f      	ldr	r6, [pc, #60]	@ (80116a0 <sbrk_aligned+0x40>)
 8011664:	460c      	mov	r4, r1
 8011666:	6831      	ldr	r1, [r6, #0]
 8011668:	4605      	mov	r5, r0
 801166a:	b911      	cbnz	r1, 8011672 <sbrk_aligned+0x12>
 801166c:	f000 fcb8 	bl	8011fe0 <_sbrk_r>
 8011670:	6030      	str	r0, [r6, #0]
 8011672:	4621      	mov	r1, r4
 8011674:	4628      	mov	r0, r5
 8011676:	f000 fcb3 	bl	8011fe0 <_sbrk_r>
 801167a:	1c43      	adds	r3, r0, #1
 801167c:	d103      	bne.n	8011686 <sbrk_aligned+0x26>
 801167e:	f04f 34ff 	mov.w	r4, #4294967295
 8011682:	4620      	mov	r0, r4
 8011684:	bd70      	pop	{r4, r5, r6, pc}
 8011686:	1cc4      	adds	r4, r0, #3
 8011688:	f024 0403 	bic.w	r4, r4, #3
 801168c:	42a0      	cmp	r0, r4
 801168e:	d0f8      	beq.n	8011682 <sbrk_aligned+0x22>
 8011690:	1a21      	subs	r1, r4, r0
 8011692:	4628      	mov	r0, r5
 8011694:	f000 fca4 	bl	8011fe0 <_sbrk_r>
 8011698:	3001      	adds	r0, #1
 801169a:	d1f2      	bne.n	8011682 <sbrk_aligned+0x22>
 801169c:	e7ef      	b.n	801167e <sbrk_aligned+0x1e>
 801169e:	bf00      	nop
 80116a0:	2401c830 	.word	0x2401c830

080116a4 <_malloc_r>:
 80116a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116a8:	1ccd      	adds	r5, r1, #3
 80116aa:	f025 0503 	bic.w	r5, r5, #3
 80116ae:	3508      	adds	r5, #8
 80116b0:	2d0c      	cmp	r5, #12
 80116b2:	bf38      	it	cc
 80116b4:	250c      	movcc	r5, #12
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	4606      	mov	r6, r0
 80116ba:	db01      	blt.n	80116c0 <_malloc_r+0x1c>
 80116bc:	42a9      	cmp	r1, r5
 80116be:	d904      	bls.n	80116ca <_malloc_r+0x26>
 80116c0:	230c      	movs	r3, #12
 80116c2:	6033      	str	r3, [r6, #0]
 80116c4:	2000      	movs	r0, #0
 80116c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80117a0 <_malloc_r+0xfc>
 80116ce:	f000 f869 	bl	80117a4 <__malloc_lock>
 80116d2:	f8d8 3000 	ldr.w	r3, [r8]
 80116d6:	461c      	mov	r4, r3
 80116d8:	bb44      	cbnz	r4, 801172c <_malloc_r+0x88>
 80116da:	4629      	mov	r1, r5
 80116dc:	4630      	mov	r0, r6
 80116de:	f7ff ffbf 	bl	8011660 <sbrk_aligned>
 80116e2:	1c43      	adds	r3, r0, #1
 80116e4:	4604      	mov	r4, r0
 80116e6:	d158      	bne.n	801179a <_malloc_r+0xf6>
 80116e8:	f8d8 4000 	ldr.w	r4, [r8]
 80116ec:	4627      	mov	r7, r4
 80116ee:	2f00      	cmp	r7, #0
 80116f0:	d143      	bne.n	801177a <_malloc_r+0xd6>
 80116f2:	2c00      	cmp	r4, #0
 80116f4:	d04b      	beq.n	801178e <_malloc_r+0xea>
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	4639      	mov	r1, r7
 80116fa:	4630      	mov	r0, r6
 80116fc:	eb04 0903 	add.w	r9, r4, r3
 8011700:	f000 fc6e 	bl	8011fe0 <_sbrk_r>
 8011704:	4581      	cmp	r9, r0
 8011706:	d142      	bne.n	801178e <_malloc_r+0xea>
 8011708:	6821      	ldr	r1, [r4, #0]
 801170a:	1a6d      	subs	r5, r5, r1
 801170c:	4629      	mov	r1, r5
 801170e:	4630      	mov	r0, r6
 8011710:	f7ff ffa6 	bl	8011660 <sbrk_aligned>
 8011714:	3001      	adds	r0, #1
 8011716:	d03a      	beq.n	801178e <_malloc_r+0xea>
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	442b      	add	r3, r5
 801171c:	6023      	str	r3, [r4, #0]
 801171e:	f8d8 3000 	ldr.w	r3, [r8]
 8011722:	685a      	ldr	r2, [r3, #4]
 8011724:	bb62      	cbnz	r2, 8011780 <_malloc_r+0xdc>
 8011726:	f8c8 7000 	str.w	r7, [r8]
 801172a:	e00f      	b.n	801174c <_malloc_r+0xa8>
 801172c:	6822      	ldr	r2, [r4, #0]
 801172e:	1b52      	subs	r2, r2, r5
 8011730:	d420      	bmi.n	8011774 <_malloc_r+0xd0>
 8011732:	2a0b      	cmp	r2, #11
 8011734:	d917      	bls.n	8011766 <_malloc_r+0xc2>
 8011736:	1961      	adds	r1, r4, r5
 8011738:	42a3      	cmp	r3, r4
 801173a:	6025      	str	r5, [r4, #0]
 801173c:	bf18      	it	ne
 801173e:	6059      	strne	r1, [r3, #4]
 8011740:	6863      	ldr	r3, [r4, #4]
 8011742:	bf08      	it	eq
 8011744:	f8c8 1000 	streq.w	r1, [r8]
 8011748:	5162      	str	r2, [r4, r5]
 801174a:	604b      	str	r3, [r1, #4]
 801174c:	4630      	mov	r0, r6
 801174e:	f000 f82f 	bl	80117b0 <__malloc_unlock>
 8011752:	f104 000b 	add.w	r0, r4, #11
 8011756:	1d23      	adds	r3, r4, #4
 8011758:	f020 0007 	bic.w	r0, r0, #7
 801175c:	1ac2      	subs	r2, r0, r3
 801175e:	bf1c      	itt	ne
 8011760:	1a1b      	subne	r3, r3, r0
 8011762:	50a3      	strne	r3, [r4, r2]
 8011764:	e7af      	b.n	80116c6 <_malloc_r+0x22>
 8011766:	6862      	ldr	r2, [r4, #4]
 8011768:	42a3      	cmp	r3, r4
 801176a:	bf0c      	ite	eq
 801176c:	f8c8 2000 	streq.w	r2, [r8]
 8011770:	605a      	strne	r2, [r3, #4]
 8011772:	e7eb      	b.n	801174c <_malloc_r+0xa8>
 8011774:	4623      	mov	r3, r4
 8011776:	6864      	ldr	r4, [r4, #4]
 8011778:	e7ae      	b.n	80116d8 <_malloc_r+0x34>
 801177a:	463c      	mov	r4, r7
 801177c:	687f      	ldr	r7, [r7, #4]
 801177e:	e7b6      	b.n	80116ee <_malloc_r+0x4a>
 8011780:	461a      	mov	r2, r3
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	42a3      	cmp	r3, r4
 8011786:	d1fb      	bne.n	8011780 <_malloc_r+0xdc>
 8011788:	2300      	movs	r3, #0
 801178a:	6053      	str	r3, [r2, #4]
 801178c:	e7de      	b.n	801174c <_malloc_r+0xa8>
 801178e:	230c      	movs	r3, #12
 8011790:	6033      	str	r3, [r6, #0]
 8011792:	4630      	mov	r0, r6
 8011794:	f000 f80c 	bl	80117b0 <__malloc_unlock>
 8011798:	e794      	b.n	80116c4 <_malloc_r+0x20>
 801179a:	6005      	str	r5, [r0, #0]
 801179c:	e7d6      	b.n	801174c <_malloc_r+0xa8>
 801179e:	bf00      	nop
 80117a0:	2401c834 	.word	0x2401c834

080117a4 <__malloc_lock>:
 80117a4:	4801      	ldr	r0, [pc, #4]	@ (80117ac <__malloc_lock+0x8>)
 80117a6:	f7ff beda 	b.w	801155e <__retarget_lock_acquire_recursive>
 80117aa:	bf00      	nop
 80117ac:	2401c82c 	.word	0x2401c82c

080117b0 <__malloc_unlock>:
 80117b0:	4801      	ldr	r0, [pc, #4]	@ (80117b8 <__malloc_unlock+0x8>)
 80117b2:	f7ff bed5 	b.w	8011560 <__retarget_lock_release_recursive>
 80117b6:	bf00      	nop
 80117b8:	2401c82c 	.word	0x2401c82c

080117bc <__sfputc_r>:
 80117bc:	6893      	ldr	r3, [r2, #8]
 80117be:	3b01      	subs	r3, #1
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	b410      	push	{r4}
 80117c4:	6093      	str	r3, [r2, #8]
 80117c6:	da08      	bge.n	80117da <__sfputc_r+0x1e>
 80117c8:	6994      	ldr	r4, [r2, #24]
 80117ca:	42a3      	cmp	r3, r4
 80117cc:	db01      	blt.n	80117d2 <__sfputc_r+0x16>
 80117ce:	290a      	cmp	r1, #10
 80117d0:	d103      	bne.n	80117da <__sfputc_r+0x1e>
 80117d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117d6:	f7ff bdaa 	b.w	801132e <__swbuf_r>
 80117da:	6813      	ldr	r3, [r2, #0]
 80117dc:	1c58      	adds	r0, r3, #1
 80117de:	6010      	str	r0, [r2, #0]
 80117e0:	7019      	strb	r1, [r3, #0]
 80117e2:	4608      	mov	r0, r1
 80117e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117e8:	4770      	bx	lr

080117ea <__sfputs_r>:
 80117ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ec:	4606      	mov	r6, r0
 80117ee:	460f      	mov	r7, r1
 80117f0:	4614      	mov	r4, r2
 80117f2:	18d5      	adds	r5, r2, r3
 80117f4:	42ac      	cmp	r4, r5
 80117f6:	d101      	bne.n	80117fc <__sfputs_r+0x12>
 80117f8:	2000      	movs	r0, #0
 80117fa:	e007      	b.n	801180c <__sfputs_r+0x22>
 80117fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011800:	463a      	mov	r2, r7
 8011802:	4630      	mov	r0, r6
 8011804:	f7ff ffda 	bl	80117bc <__sfputc_r>
 8011808:	1c43      	adds	r3, r0, #1
 801180a:	d1f3      	bne.n	80117f4 <__sfputs_r+0xa>
 801180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011810 <_vfiprintf_r>:
 8011810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011814:	460d      	mov	r5, r1
 8011816:	b09d      	sub	sp, #116	@ 0x74
 8011818:	4614      	mov	r4, r2
 801181a:	4698      	mov	r8, r3
 801181c:	4606      	mov	r6, r0
 801181e:	b118      	cbz	r0, 8011828 <_vfiprintf_r+0x18>
 8011820:	6a03      	ldr	r3, [r0, #32]
 8011822:	b90b      	cbnz	r3, 8011828 <_vfiprintf_r+0x18>
 8011824:	f7ff fc9a 	bl	801115c <__sinit>
 8011828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801182a:	07d9      	lsls	r1, r3, #31
 801182c:	d405      	bmi.n	801183a <_vfiprintf_r+0x2a>
 801182e:	89ab      	ldrh	r3, [r5, #12]
 8011830:	059a      	lsls	r2, r3, #22
 8011832:	d402      	bmi.n	801183a <_vfiprintf_r+0x2a>
 8011834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011836:	f7ff fe92 	bl	801155e <__retarget_lock_acquire_recursive>
 801183a:	89ab      	ldrh	r3, [r5, #12]
 801183c:	071b      	lsls	r3, r3, #28
 801183e:	d501      	bpl.n	8011844 <_vfiprintf_r+0x34>
 8011840:	692b      	ldr	r3, [r5, #16]
 8011842:	b99b      	cbnz	r3, 801186c <_vfiprintf_r+0x5c>
 8011844:	4629      	mov	r1, r5
 8011846:	4630      	mov	r0, r6
 8011848:	f7ff fdb0 	bl	80113ac <__swsetup_r>
 801184c:	b170      	cbz	r0, 801186c <_vfiprintf_r+0x5c>
 801184e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011850:	07dc      	lsls	r4, r3, #31
 8011852:	d504      	bpl.n	801185e <_vfiprintf_r+0x4e>
 8011854:	f04f 30ff 	mov.w	r0, #4294967295
 8011858:	b01d      	add	sp, #116	@ 0x74
 801185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185e:	89ab      	ldrh	r3, [r5, #12]
 8011860:	0598      	lsls	r0, r3, #22
 8011862:	d4f7      	bmi.n	8011854 <_vfiprintf_r+0x44>
 8011864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011866:	f7ff fe7b 	bl	8011560 <__retarget_lock_release_recursive>
 801186a:	e7f3      	b.n	8011854 <_vfiprintf_r+0x44>
 801186c:	2300      	movs	r3, #0
 801186e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011870:	2320      	movs	r3, #32
 8011872:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011876:	f8cd 800c 	str.w	r8, [sp, #12]
 801187a:	2330      	movs	r3, #48	@ 0x30
 801187c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011a2c <_vfiprintf_r+0x21c>
 8011880:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011884:	f04f 0901 	mov.w	r9, #1
 8011888:	4623      	mov	r3, r4
 801188a:	469a      	mov	sl, r3
 801188c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011890:	b10a      	cbz	r2, 8011896 <_vfiprintf_r+0x86>
 8011892:	2a25      	cmp	r2, #37	@ 0x25
 8011894:	d1f9      	bne.n	801188a <_vfiprintf_r+0x7a>
 8011896:	ebba 0b04 	subs.w	fp, sl, r4
 801189a:	d00b      	beq.n	80118b4 <_vfiprintf_r+0xa4>
 801189c:	465b      	mov	r3, fp
 801189e:	4622      	mov	r2, r4
 80118a0:	4629      	mov	r1, r5
 80118a2:	4630      	mov	r0, r6
 80118a4:	f7ff ffa1 	bl	80117ea <__sfputs_r>
 80118a8:	3001      	adds	r0, #1
 80118aa:	f000 80a7 	beq.w	80119fc <_vfiprintf_r+0x1ec>
 80118ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118b0:	445a      	add	r2, fp
 80118b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80118b4:	f89a 3000 	ldrb.w	r3, [sl]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 809f 	beq.w	80119fc <_vfiprintf_r+0x1ec>
 80118be:	2300      	movs	r3, #0
 80118c0:	f04f 32ff 	mov.w	r2, #4294967295
 80118c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118c8:	f10a 0a01 	add.w	sl, sl, #1
 80118cc:	9304      	str	r3, [sp, #16]
 80118ce:	9307      	str	r3, [sp, #28]
 80118d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80118d6:	4654      	mov	r4, sl
 80118d8:	2205      	movs	r2, #5
 80118da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118de:	4853      	ldr	r0, [pc, #332]	@ (8011a2c <_vfiprintf_r+0x21c>)
 80118e0:	f7ee fd06 	bl	80002f0 <memchr>
 80118e4:	9a04      	ldr	r2, [sp, #16]
 80118e6:	b9d8      	cbnz	r0, 8011920 <_vfiprintf_r+0x110>
 80118e8:	06d1      	lsls	r1, r2, #27
 80118ea:	bf44      	itt	mi
 80118ec:	2320      	movmi	r3, #32
 80118ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118f2:	0713      	lsls	r3, r2, #28
 80118f4:	bf44      	itt	mi
 80118f6:	232b      	movmi	r3, #43	@ 0x2b
 80118f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011900:	2b2a      	cmp	r3, #42	@ 0x2a
 8011902:	d015      	beq.n	8011930 <_vfiprintf_r+0x120>
 8011904:	9a07      	ldr	r2, [sp, #28]
 8011906:	4654      	mov	r4, sl
 8011908:	2000      	movs	r0, #0
 801190a:	f04f 0c0a 	mov.w	ip, #10
 801190e:	4621      	mov	r1, r4
 8011910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011914:	3b30      	subs	r3, #48	@ 0x30
 8011916:	2b09      	cmp	r3, #9
 8011918:	d94b      	bls.n	80119b2 <_vfiprintf_r+0x1a2>
 801191a:	b1b0      	cbz	r0, 801194a <_vfiprintf_r+0x13a>
 801191c:	9207      	str	r2, [sp, #28]
 801191e:	e014      	b.n	801194a <_vfiprintf_r+0x13a>
 8011920:	eba0 0308 	sub.w	r3, r0, r8
 8011924:	fa09 f303 	lsl.w	r3, r9, r3
 8011928:	4313      	orrs	r3, r2
 801192a:	9304      	str	r3, [sp, #16]
 801192c:	46a2      	mov	sl, r4
 801192e:	e7d2      	b.n	80118d6 <_vfiprintf_r+0xc6>
 8011930:	9b03      	ldr	r3, [sp, #12]
 8011932:	1d19      	adds	r1, r3, #4
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	9103      	str	r1, [sp, #12]
 8011938:	2b00      	cmp	r3, #0
 801193a:	bfbb      	ittet	lt
 801193c:	425b      	neglt	r3, r3
 801193e:	f042 0202 	orrlt.w	r2, r2, #2
 8011942:	9307      	strge	r3, [sp, #28]
 8011944:	9307      	strlt	r3, [sp, #28]
 8011946:	bfb8      	it	lt
 8011948:	9204      	strlt	r2, [sp, #16]
 801194a:	7823      	ldrb	r3, [r4, #0]
 801194c:	2b2e      	cmp	r3, #46	@ 0x2e
 801194e:	d10a      	bne.n	8011966 <_vfiprintf_r+0x156>
 8011950:	7863      	ldrb	r3, [r4, #1]
 8011952:	2b2a      	cmp	r3, #42	@ 0x2a
 8011954:	d132      	bne.n	80119bc <_vfiprintf_r+0x1ac>
 8011956:	9b03      	ldr	r3, [sp, #12]
 8011958:	1d1a      	adds	r2, r3, #4
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	9203      	str	r2, [sp, #12]
 801195e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011962:	3402      	adds	r4, #2
 8011964:	9305      	str	r3, [sp, #20]
 8011966:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a3c <_vfiprintf_r+0x22c>
 801196a:	7821      	ldrb	r1, [r4, #0]
 801196c:	2203      	movs	r2, #3
 801196e:	4650      	mov	r0, sl
 8011970:	f7ee fcbe 	bl	80002f0 <memchr>
 8011974:	b138      	cbz	r0, 8011986 <_vfiprintf_r+0x176>
 8011976:	9b04      	ldr	r3, [sp, #16]
 8011978:	eba0 000a 	sub.w	r0, r0, sl
 801197c:	2240      	movs	r2, #64	@ 0x40
 801197e:	4082      	lsls	r2, r0
 8011980:	4313      	orrs	r3, r2
 8011982:	3401      	adds	r4, #1
 8011984:	9304      	str	r3, [sp, #16]
 8011986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801198a:	4829      	ldr	r0, [pc, #164]	@ (8011a30 <_vfiprintf_r+0x220>)
 801198c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011990:	2206      	movs	r2, #6
 8011992:	f7ee fcad 	bl	80002f0 <memchr>
 8011996:	2800      	cmp	r0, #0
 8011998:	d03f      	beq.n	8011a1a <_vfiprintf_r+0x20a>
 801199a:	4b26      	ldr	r3, [pc, #152]	@ (8011a34 <_vfiprintf_r+0x224>)
 801199c:	bb1b      	cbnz	r3, 80119e6 <_vfiprintf_r+0x1d6>
 801199e:	9b03      	ldr	r3, [sp, #12]
 80119a0:	3307      	adds	r3, #7
 80119a2:	f023 0307 	bic.w	r3, r3, #7
 80119a6:	3308      	adds	r3, #8
 80119a8:	9303      	str	r3, [sp, #12]
 80119aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119ac:	443b      	add	r3, r7
 80119ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80119b0:	e76a      	b.n	8011888 <_vfiprintf_r+0x78>
 80119b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80119b6:	460c      	mov	r4, r1
 80119b8:	2001      	movs	r0, #1
 80119ba:	e7a8      	b.n	801190e <_vfiprintf_r+0xfe>
 80119bc:	2300      	movs	r3, #0
 80119be:	3401      	adds	r4, #1
 80119c0:	9305      	str	r3, [sp, #20]
 80119c2:	4619      	mov	r1, r3
 80119c4:	f04f 0c0a 	mov.w	ip, #10
 80119c8:	4620      	mov	r0, r4
 80119ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119ce:	3a30      	subs	r2, #48	@ 0x30
 80119d0:	2a09      	cmp	r2, #9
 80119d2:	d903      	bls.n	80119dc <_vfiprintf_r+0x1cc>
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d0c6      	beq.n	8011966 <_vfiprintf_r+0x156>
 80119d8:	9105      	str	r1, [sp, #20]
 80119da:	e7c4      	b.n	8011966 <_vfiprintf_r+0x156>
 80119dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80119e0:	4604      	mov	r4, r0
 80119e2:	2301      	movs	r3, #1
 80119e4:	e7f0      	b.n	80119c8 <_vfiprintf_r+0x1b8>
 80119e6:	ab03      	add	r3, sp, #12
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	462a      	mov	r2, r5
 80119ec:	4b12      	ldr	r3, [pc, #72]	@ (8011a38 <_vfiprintf_r+0x228>)
 80119ee:	a904      	add	r1, sp, #16
 80119f0:	4630      	mov	r0, r6
 80119f2:	f3af 8000 	nop.w
 80119f6:	4607      	mov	r7, r0
 80119f8:	1c78      	adds	r0, r7, #1
 80119fa:	d1d6      	bne.n	80119aa <_vfiprintf_r+0x19a>
 80119fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119fe:	07d9      	lsls	r1, r3, #31
 8011a00:	d405      	bmi.n	8011a0e <_vfiprintf_r+0x1fe>
 8011a02:	89ab      	ldrh	r3, [r5, #12]
 8011a04:	059a      	lsls	r2, r3, #22
 8011a06:	d402      	bmi.n	8011a0e <_vfiprintf_r+0x1fe>
 8011a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a0a:	f7ff fda9 	bl	8011560 <__retarget_lock_release_recursive>
 8011a0e:	89ab      	ldrh	r3, [r5, #12]
 8011a10:	065b      	lsls	r3, r3, #25
 8011a12:	f53f af1f 	bmi.w	8011854 <_vfiprintf_r+0x44>
 8011a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a18:	e71e      	b.n	8011858 <_vfiprintf_r+0x48>
 8011a1a:	ab03      	add	r3, sp, #12
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	462a      	mov	r2, r5
 8011a20:	4b05      	ldr	r3, [pc, #20]	@ (8011a38 <_vfiprintf_r+0x228>)
 8011a22:	a904      	add	r1, sp, #16
 8011a24:	4630      	mov	r0, r6
 8011a26:	f000 f879 	bl	8011b1c <_printf_i>
 8011a2a:	e7e4      	b.n	80119f6 <_vfiprintf_r+0x1e6>
 8011a2c:	08015697 	.word	0x08015697
 8011a30:	080156a1 	.word	0x080156a1
 8011a34:	00000000 	.word	0x00000000
 8011a38:	080117eb 	.word	0x080117eb
 8011a3c:	0801569d 	.word	0x0801569d

08011a40 <_printf_common>:
 8011a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a44:	4616      	mov	r6, r2
 8011a46:	4698      	mov	r8, r3
 8011a48:	688a      	ldr	r2, [r1, #8]
 8011a4a:	690b      	ldr	r3, [r1, #16]
 8011a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a50:	4293      	cmp	r3, r2
 8011a52:	bfb8      	it	lt
 8011a54:	4613      	movlt	r3, r2
 8011a56:	6033      	str	r3, [r6, #0]
 8011a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011a5c:	4607      	mov	r7, r0
 8011a5e:	460c      	mov	r4, r1
 8011a60:	b10a      	cbz	r2, 8011a66 <_printf_common+0x26>
 8011a62:	3301      	adds	r3, #1
 8011a64:	6033      	str	r3, [r6, #0]
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	0699      	lsls	r1, r3, #26
 8011a6a:	bf42      	ittt	mi
 8011a6c:	6833      	ldrmi	r3, [r6, #0]
 8011a6e:	3302      	addmi	r3, #2
 8011a70:	6033      	strmi	r3, [r6, #0]
 8011a72:	6825      	ldr	r5, [r4, #0]
 8011a74:	f015 0506 	ands.w	r5, r5, #6
 8011a78:	d106      	bne.n	8011a88 <_printf_common+0x48>
 8011a7a:	f104 0a19 	add.w	sl, r4, #25
 8011a7e:	68e3      	ldr	r3, [r4, #12]
 8011a80:	6832      	ldr	r2, [r6, #0]
 8011a82:	1a9b      	subs	r3, r3, r2
 8011a84:	42ab      	cmp	r3, r5
 8011a86:	dc26      	bgt.n	8011ad6 <_printf_common+0x96>
 8011a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011a8c:	6822      	ldr	r2, [r4, #0]
 8011a8e:	3b00      	subs	r3, #0
 8011a90:	bf18      	it	ne
 8011a92:	2301      	movne	r3, #1
 8011a94:	0692      	lsls	r2, r2, #26
 8011a96:	d42b      	bmi.n	8011af0 <_printf_common+0xb0>
 8011a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011a9c:	4641      	mov	r1, r8
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	47c8      	blx	r9
 8011aa2:	3001      	adds	r0, #1
 8011aa4:	d01e      	beq.n	8011ae4 <_printf_common+0xa4>
 8011aa6:	6823      	ldr	r3, [r4, #0]
 8011aa8:	6922      	ldr	r2, [r4, #16]
 8011aaa:	f003 0306 	and.w	r3, r3, #6
 8011aae:	2b04      	cmp	r3, #4
 8011ab0:	bf02      	ittt	eq
 8011ab2:	68e5      	ldreq	r5, [r4, #12]
 8011ab4:	6833      	ldreq	r3, [r6, #0]
 8011ab6:	1aed      	subeq	r5, r5, r3
 8011ab8:	68a3      	ldr	r3, [r4, #8]
 8011aba:	bf0c      	ite	eq
 8011abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ac0:	2500      	movne	r5, #0
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	bfc4      	itt	gt
 8011ac6:	1a9b      	subgt	r3, r3, r2
 8011ac8:	18ed      	addgt	r5, r5, r3
 8011aca:	2600      	movs	r6, #0
 8011acc:	341a      	adds	r4, #26
 8011ace:	42b5      	cmp	r5, r6
 8011ad0:	d11a      	bne.n	8011b08 <_printf_common+0xc8>
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	e008      	b.n	8011ae8 <_printf_common+0xa8>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	4652      	mov	r2, sl
 8011ada:	4641      	mov	r1, r8
 8011adc:	4638      	mov	r0, r7
 8011ade:	47c8      	blx	r9
 8011ae0:	3001      	adds	r0, #1
 8011ae2:	d103      	bne.n	8011aec <_printf_common+0xac>
 8011ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aec:	3501      	adds	r5, #1
 8011aee:	e7c6      	b.n	8011a7e <_printf_common+0x3e>
 8011af0:	18e1      	adds	r1, r4, r3
 8011af2:	1c5a      	adds	r2, r3, #1
 8011af4:	2030      	movs	r0, #48	@ 0x30
 8011af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011afa:	4422      	add	r2, r4
 8011afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011b04:	3302      	adds	r3, #2
 8011b06:	e7c7      	b.n	8011a98 <_printf_common+0x58>
 8011b08:	2301      	movs	r3, #1
 8011b0a:	4622      	mov	r2, r4
 8011b0c:	4641      	mov	r1, r8
 8011b0e:	4638      	mov	r0, r7
 8011b10:	47c8      	blx	r9
 8011b12:	3001      	adds	r0, #1
 8011b14:	d0e6      	beq.n	8011ae4 <_printf_common+0xa4>
 8011b16:	3601      	adds	r6, #1
 8011b18:	e7d9      	b.n	8011ace <_printf_common+0x8e>
	...

08011b1c <_printf_i>:
 8011b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b20:	7e0f      	ldrb	r7, [r1, #24]
 8011b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b24:	2f78      	cmp	r7, #120	@ 0x78
 8011b26:	4691      	mov	r9, r2
 8011b28:	4680      	mov	r8, r0
 8011b2a:	460c      	mov	r4, r1
 8011b2c:	469a      	mov	sl, r3
 8011b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011b32:	d807      	bhi.n	8011b44 <_printf_i+0x28>
 8011b34:	2f62      	cmp	r7, #98	@ 0x62
 8011b36:	d80a      	bhi.n	8011b4e <_printf_i+0x32>
 8011b38:	2f00      	cmp	r7, #0
 8011b3a:	f000 80d2 	beq.w	8011ce2 <_printf_i+0x1c6>
 8011b3e:	2f58      	cmp	r7, #88	@ 0x58
 8011b40:	f000 80b9 	beq.w	8011cb6 <_printf_i+0x19a>
 8011b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011b4c:	e03a      	b.n	8011bc4 <_printf_i+0xa8>
 8011b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011b52:	2b15      	cmp	r3, #21
 8011b54:	d8f6      	bhi.n	8011b44 <_printf_i+0x28>
 8011b56:	a101      	add	r1, pc, #4	@ (adr r1, 8011b5c <_printf_i+0x40>)
 8011b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b5c:	08011bb5 	.word	0x08011bb5
 8011b60:	08011bc9 	.word	0x08011bc9
 8011b64:	08011b45 	.word	0x08011b45
 8011b68:	08011b45 	.word	0x08011b45
 8011b6c:	08011b45 	.word	0x08011b45
 8011b70:	08011b45 	.word	0x08011b45
 8011b74:	08011bc9 	.word	0x08011bc9
 8011b78:	08011b45 	.word	0x08011b45
 8011b7c:	08011b45 	.word	0x08011b45
 8011b80:	08011b45 	.word	0x08011b45
 8011b84:	08011b45 	.word	0x08011b45
 8011b88:	08011cc9 	.word	0x08011cc9
 8011b8c:	08011bf3 	.word	0x08011bf3
 8011b90:	08011c83 	.word	0x08011c83
 8011b94:	08011b45 	.word	0x08011b45
 8011b98:	08011b45 	.word	0x08011b45
 8011b9c:	08011ceb 	.word	0x08011ceb
 8011ba0:	08011b45 	.word	0x08011b45
 8011ba4:	08011bf3 	.word	0x08011bf3
 8011ba8:	08011b45 	.word	0x08011b45
 8011bac:	08011b45 	.word	0x08011b45
 8011bb0:	08011c8b 	.word	0x08011c8b
 8011bb4:	6833      	ldr	r3, [r6, #0]
 8011bb6:	1d1a      	adds	r2, r3, #4
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	6032      	str	r2, [r6, #0]
 8011bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e09d      	b.n	8011d04 <_printf_i+0x1e8>
 8011bc8:	6833      	ldr	r3, [r6, #0]
 8011bca:	6820      	ldr	r0, [r4, #0]
 8011bcc:	1d19      	adds	r1, r3, #4
 8011bce:	6031      	str	r1, [r6, #0]
 8011bd0:	0606      	lsls	r6, r0, #24
 8011bd2:	d501      	bpl.n	8011bd8 <_printf_i+0xbc>
 8011bd4:	681d      	ldr	r5, [r3, #0]
 8011bd6:	e003      	b.n	8011be0 <_printf_i+0xc4>
 8011bd8:	0645      	lsls	r5, r0, #25
 8011bda:	d5fb      	bpl.n	8011bd4 <_printf_i+0xb8>
 8011bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011be0:	2d00      	cmp	r5, #0
 8011be2:	da03      	bge.n	8011bec <_printf_i+0xd0>
 8011be4:	232d      	movs	r3, #45	@ 0x2d
 8011be6:	426d      	negs	r5, r5
 8011be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bec:	4859      	ldr	r0, [pc, #356]	@ (8011d54 <_printf_i+0x238>)
 8011bee:	230a      	movs	r3, #10
 8011bf0:	e011      	b.n	8011c16 <_printf_i+0xfa>
 8011bf2:	6821      	ldr	r1, [r4, #0]
 8011bf4:	6833      	ldr	r3, [r6, #0]
 8011bf6:	0608      	lsls	r0, r1, #24
 8011bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8011bfc:	d402      	bmi.n	8011c04 <_printf_i+0xe8>
 8011bfe:	0649      	lsls	r1, r1, #25
 8011c00:	bf48      	it	mi
 8011c02:	b2ad      	uxthmi	r5, r5
 8011c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8011c06:	4853      	ldr	r0, [pc, #332]	@ (8011d54 <_printf_i+0x238>)
 8011c08:	6033      	str	r3, [r6, #0]
 8011c0a:	bf14      	ite	ne
 8011c0c:	230a      	movne	r3, #10
 8011c0e:	2308      	moveq	r3, #8
 8011c10:	2100      	movs	r1, #0
 8011c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c16:	6866      	ldr	r6, [r4, #4]
 8011c18:	60a6      	str	r6, [r4, #8]
 8011c1a:	2e00      	cmp	r6, #0
 8011c1c:	bfa2      	ittt	ge
 8011c1e:	6821      	ldrge	r1, [r4, #0]
 8011c20:	f021 0104 	bicge.w	r1, r1, #4
 8011c24:	6021      	strge	r1, [r4, #0]
 8011c26:	b90d      	cbnz	r5, 8011c2c <_printf_i+0x110>
 8011c28:	2e00      	cmp	r6, #0
 8011c2a:	d04b      	beq.n	8011cc4 <_printf_i+0x1a8>
 8011c2c:	4616      	mov	r6, r2
 8011c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c32:	fb03 5711 	mls	r7, r3, r1, r5
 8011c36:	5dc7      	ldrb	r7, [r0, r7]
 8011c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c3c:	462f      	mov	r7, r5
 8011c3e:	42bb      	cmp	r3, r7
 8011c40:	460d      	mov	r5, r1
 8011c42:	d9f4      	bls.n	8011c2e <_printf_i+0x112>
 8011c44:	2b08      	cmp	r3, #8
 8011c46:	d10b      	bne.n	8011c60 <_printf_i+0x144>
 8011c48:	6823      	ldr	r3, [r4, #0]
 8011c4a:	07df      	lsls	r7, r3, #31
 8011c4c:	d508      	bpl.n	8011c60 <_printf_i+0x144>
 8011c4e:	6923      	ldr	r3, [r4, #16]
 8011c50:	6861      	ldr	r1, [r4, #4]
 8011c52:	4299      	cmp	r1, r3
 8011c54:	bfde      	ittt	le
 8011c56:	2330      	movle	r3, #48	@ 0x30
 8011c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011c60:	1b92      	subs	r2, r2, r6
 8011c62:	6122      	str	r2, [r4, #16]
 8011c64:	f8cd a000 	str.w	sl, [sp]
 8011c68:	464b      	mov	r3, r9
 8011c6a:	aa03      	add	r2, sp, #12
 8011c6c:	4621      	mov	r1, r4
 8011c6e:	4640      	mov	r0, r8
 8011c70:	f7ff fee6 	bl	8011a40 <_printf_common>
 8011c74:	3001      	adds	r0, #1
 8011c76:	d14a      	bne.n	8011d0e <_printf_i+0x1f2>
 8011c78:	f04f 30ff 	mov.w	r0, #4294967295
 8011c7c:	b004      	add	sp, #16
 8011c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	f043 0320 	orr.w	r3, r3, #32
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	4833      	ldr	r0, [pc, #204]	@ (8011d58 <_printf_i+0x23c>)
 8011c8c:	2778      	movs	r7, #120	@ 0x78
 8011c8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	6831      	ldr	r1, [r6, #0]
 8011c96:	061f      	lsls	r7, r3, #24
 8011c98:	f851 5b04 	ldr.w	r5, [r1], #4
 8011c9c:	d402      	bmi.n	8011ca4 <_printf_i+0x188>
 8011c9e:	065f      	lsls	r7, r3, #25
 8011ca0:	bf48      	it	mi
 8011ca2:	b2ad      	uxthmi	r5, r5
 8011ca4:	6031      	str	r1, [r6, #0]
 8011ca6:	07d9      	lsls	r1, r3, #31
 8011ca8:	bf44      	itt	mi
 8011caa:	f043 0320 	orrmi.w	r3, r3, #32
 8011cae:	6023      	strmi	r3, [r4, #0]
 8011cb0:	b11d      	cbz	r5, 8011cba <_printf_i+0x19e>
 8011cb2:	2310      	movs	r3, #16
 8011cb4:	e7ac      	b.n	8011c10 <_printf_i+0xf4>
 8011cb6:	4827      	ldr	r0, [pc, #156]	@ (8011d54 <_printf_i+0x238>)
 8011cb8:	e7e9      	b.n	8011c8e <_printf_i+0x172>
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	f023 0320 	bic.w	r3, r3, #32
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	e7f6      	b.n	8011cb2 <_printf_i+0x196>
 8011cc4:	4616      	mov	r6, r2
 8011cc6:	e7bd      	b.n	8011c44 <_printf_i+0x128>
 8011cc8:	6833      	ldr	r3, [r6, #0]
 8011cca:	6825      	ldr	r5, [r4, #0]
 8011ccc:	6961      	ldr	r1, [r4, #20]
 8011cce:	1d18      	adds	r0, r3, #4
 8011cd0:	6030      	str	r0, [r6, #0]
 8011cd2:	062e      	lsls	r6, r5, #24
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	d501      	bpl.n	8011cdc <_printf_i+0x1c0>
 8011cd8:	6019      	str	r1, [r3, #0]
 8011cda:	e002      	b.n	8011ce2 <_printf_i+0x1c6>
 8011cdc:	0668      	lsls	r0, r5, #25
 8011cde:	d5fb      	bpl.n	8011cd8 <_printf_i+0x1bc>
 8011ce0:	8019      	strh	r1, [r3, #0]
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	6123      	str	r3, [r4, #16]
 8011ce6:	4616      	mov	r6, r2
 8011ce8:	e7bc      	b.n	8011c64 <_printf_i+0x148>
 8011cea:	6833      	ldr	r3, [r6, #0]
 8011cec:	1d1a      	adds	r2, r3, #4
 8011cee:	6032      	str	r2, [r6, #0]
 8011cf0:	681e      	ldr	r6, [r3, #0]
 8011cf2:	6862      	ldr	r2, [r4, #4]
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f7ee fafa 	bl	80002f0 <memchr>
 8011cfc:	b108      	cbz	r0, 8011d02 <_printf_i+0x1e6>
 8011cfe:	1b80      	subs	r0, r0, r6
 8011d00:	6060      	str	r0, [r4, #4]
 8011d02:	6863      	ldr	r3, [r4, #4]
 8011d04:	6123      	str	r3, [r4, #16]
 8011d06:	2300      	movs	r3, #0
 8011d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d0c:	e7aa      	b.n	8011c64 <_printf_i+0x148>
 8011d0e:	6923      	ldr	r3, [r4, #16]
 8011d10:	4632      	mov	r2, r6
 8011d12:	4649      	mov	r1, r9
 8011d14:	4640      	mov	r0, r8
 8011d16:	47d0      	blx	sl
 8011d18:	3001      	adds	r0, #1
 8011d1a:	d0ad      	beq.n	8011c78 <_printf_i+0x15c>
 8011d1c:	6823      	ldr	r3, [r4, #0]
 8011d1e:	079b      	lsls	r3, r3, #30
 8011d20:	d413      	bmi.n	8011d4a <_printf_i+0x22e>
 8011d22:	68e0      	ldr	r0, [r4, #12]
 8011d24:	9b03      	ldr	r3, [sp, #12]
 8011d26:	4298      	cmp	r0, r3
 8011d28:	bfb8      	it	lt
 8011d2a:	4618      	movlt	r0, r3
 8011d2c:	e7a6      	b.n	8011c7c <_printf_i+0x160>
 8011d2e:	2301      	movs	r3, #1
 8011d30:	4632      	mov	r2, r6
 8011d32:	4649      	mov	r1, r9
 8011d34:	4640      	mov	r0, r8
 8011d36:	47d0      	blx	sl
 8011d38:	3001      	adds	r0, #1
 8011d3a:	d09d      	beq.n	8011c78 <_printf_i+0x15c>
 8011d3c:	3501      	adds	r5, #1
 8011d3e:	68e3      	ldr	r3, [r4, #12]
 8011d40:	9903      	ldr	r1, [sp, #12]
 8011d42:	1a5b      	subs	r3, r3, r1
 8011d44:	42ab      	cmp	r3, r5
 8011d46:	dcf2      	bgt.n	8011d2e <_printf_i+0x212>
 8011d48:	e7eb      	b.n	8011d22 <_printf_i+0x206>
 8011d4a:	2500      	movs	r5, #0
 8011d4c:	f104 0619 	add.w	r6, r4, #25
 8011d50:	e7f5      	b.n	8011d3e <_printf_i+0x222>
 8011d52:	bf00      	nop
 8011d54:	080156a8 	.word	0x080156a8
 8011d58:	080156b9 	.word	0x080156b9

08011d5c <__sflush_r>:
 8011d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d64:	0716      	lsls	r6, r2, #28
 8011d66:	4605      	mov	r5, r0
 8011d68:	460c      	mov	r4, r1
 8011d6a:	d454      	bmi.n	8011e16 <__sflush_r+0xba>
 8011d6c:	684b      	ldr	r3, [r1, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	dc02      	bgt.n	8011d78 <__sflush_r+0x1c>
 8011d72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	dd48      	ble.n	8011e0a <__sflush_r+0xae>
 8011d78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d7a:	2e00      	cmp	r6, #0
 8011d7c:	d045      	beq.n	8011e0a <__sflush_r+0xae>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011d84:	682f      	ldr	r7, [r5, #0]
 8011d86:	6a21      	ldr	r1, [r4, #32]
 8011d88:	602b      	str	r3, [r5, #0]
 8011d8a:	d030      	beq.n	8011dee <__sflush_r+0x92>
 8011d8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d8e:	89a3      	ldrh	r3, [r4, #12]
 8011d90:	0759      	lsls	r1, r3, #29
 8011d92:	d505      	bpl.n	8011da0 <__sflush_r+0x44>
 8011d94:	6863      	ldr	r3, [r4, #4]
 8011d96:	1ad2      	subs	r2, r2, r3
 8011d98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011d9a:	b10b      	cbz	r3, 8011da0 <__sflush_r+0x44>
 8011d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d9e:	1ad2      	subs	r2, r2, r3
 8011da0:	2300      	movs	r3, #0
 8011da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011da4:	6a21      	ldr	r1, [r4, #32]
 8011da6:	4628      	mov	r0, r5
 8011da8:	47b0      	blx	r6
 8011daa:	1c43      	adds	r3, r0, #1
 8011dac:	89a3      	ldrh	r3, [r4, #12]
 8011dae:	d106      	bne.n	8011dbe <__sflush_r+0x62>
 8011db0:	6829      	ldr	r1, [r5, #0]
 8011db2:	291d      	cmp	r1, #29
 8011db4:	d82b      	bhi.n	8011e0e <__sflush_r+0xb2>
 8011db6:	4a2a      	ldr	r2, [pc, #168]	@ (8011e60 <__sflush_r+0x104>)
 8011db8:	410a      	asrs	r2, r1
 8011dba:	07d6      	lsls	r6, r2, #31
 8011dbc:	d427      	bmi.n	8011e0e <__sflush_r+0xb2>
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	6062      	str	r2, [r4, #4]
 8011dc2:	04d9      	lsls	r1, r3, #19
 8011dc4:	6922      	ldr	r2, [r4, #16]
 8011dc6:	6022      	str	r2, [r4, #0]
 8011dc8:	d504      	bpl.n	8011dd4 <__sflush_r+0x78>
 8011dca:	1c42      	adds	r2, r0, #1
 8011dcc:	d101      	bne.n	8011dd2 <__sflush_r+0x76>
 8011dce:	682b      	ldr	r3, [r5, #0]
 8011dd0:	b903      	cbnz	r3, 8011dd4 <__sflush_r+0x78>
 8011dd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dd6:	602f      	str	r7, [r5, #0]
 8011dd8:	b1b9      	cbz	r1, 8011e0a <__sflush_r+0xae>
 8011dda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dde:	4299      	cmp	r1, r3
 8011de0:	d002      	beq.n	8011de8 <__sflush_r+0x8c>
 8011de2:	4628      	mov	r0, r5
 8011de4:	f7ff fbea 	bl	80115bc <_free_r>
 8011de8:	2300      	movs	r3, #0
 8011dea:	6363      	str	r3, [r4, #52]	@ 0x34
 8011dec:	e00d      	b.n	8011e0a <__sflush_r+0xae>
 8011dee:	2301      	movs	r3, #1
 8011df0:	4628      	mov	r0, r5
 8011df2:	47b0      	blx	r6
 8011df4:	4602      	mov	r2, r0
 8011df6:	1c50      	adds	r0, r2, #1
 8011df8:	d1c9      	bne.n	8011d8e <__sflush_r+0x32>
 8011dfa:	682b      	ldr	r3, [r5, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d0c6      	beq.n	8011d8e <__sflush_r+0x32>
 8011e00:	2b1d      	cmp	r3, #29
 8011e02:	d001      	beq.n	8011e08 <__sflush_r+0xac>
 8011e04:	2b16      	cmp	r3, #22
 8011e06:	d11e      	bne.n	8011e46 <__sflush_r+0xea>
 8011e08:	602f      	str	r7, [r5, #0]
 8011e0a:	2000      	movs	r0, #0
 8011e0c:	e022      	b.n	8011e54 <__sflush_r+0xf8>
 8011e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e12:	b21b      	sxth	r3, r3
 8011e14:	e01b      	b.n	8011e4e <__sflush_r+0xf2>
 8011e16:	690f      	ldr	r7, [r1, #16]
 8011e18:	2f00      	cmp	r7, #0
 8011e1a:	d0f6      	beq.n	8011e0a <__sflush_r+0xae>
 8011e1c:	0793      	lsls	r3, r2, #30
 8011e1e:	680e      	ldr	r6, [r1, #0]
 8011e20:	bf08      	it	eq
 8011e22:	694b      	ldreq	r3, [r1, #20]
 8011e24:	600f      	str	r7, [r1, #0]
 8011e26:	bf18      	it	ne
 8011e28:	2300      	movne	r3, #0
 8011e2a:	eba6 0807 	sub.w	r8, r6, r7
 8011e2e:	608b      	str	r3, [r1, #8]
 8011e30:	f1b8 0f00 	cmp.w	r8, #0
 8011e34:	dde9      	ble.n	8011e0a <__sflush_r+0xae>
 8011e36:	6a21      	ldr	r1, [r4, #32]
 8011e38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e3a:	4643      	mov	r3, r8
 8011e3c:	463a      	mov	r2, r7
 8011e3e:	4628      	mov	r0, r5
 8011e40:	47b0      	blx	r6
 8011e42:	2800      	cmp	r0, #0
 8011e44:	dc08      	bgt.n	8011e58 <__sflush_r+0xfc>
 8011e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e58:	4407      	add	r7, r0
 8011e5a:	eba8 0800 	sub.w	r8, r8, r0
 8011e5e:	e7e7      	b.n	8011e30 <__sflush_r+0xd4>
 8011e60:	dfbffffe 	.word	0xdfbffffe

08011e64 <_fflush_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	690b      	ldr	r3, [r1, #16]
 8011e68:	4605      	mov	r5, r0
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	b913      	cbnz	r3, 8011e74 <_fflush_r+0x10>
 8011e6e:	2500      	movs	r5, #0
 8011e70:	4628      	mov	r0, r5
 8011e72:	bd38      	pop	{r3, r4, r5, pc}
 8011e74:	b118      	cbz	r0, 8011e7e <_fflush_r+0x1a>
 8011e76:	6a03      	ldr	r3, [r0, #32]
 8011e78:	b90b      	cbnz	r3, 8011e7e <_fflush_r+0x1a>
 8011e7a:	f7ff f96f 	bl	801115c <__sinit>
 8011e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d0f3      	beq.n	8011e6e <_fflush_r+0xa>
 8011e86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011e88:	07d0      	lsls	r0, r2, #31
 8011e8a:	d404      	bmi.n	8011e96 <_fflush_r+0x32>
 8011e8c:	0599      	lsls	r1, r3, #22
 8011e8e:	d402      	bmi.n	8011e96 <_fflush_r+0x32>
 8011e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e92:	f7ff fb64 	bl	801155e <__retarget_lock_acquire_recursive>
 8011e96:	4628      	mov	r0, r5
 8011e98:	4621      	mov	r1, r4
 8011e9a:	f7ff ff5f 	bl	8011d5c <__sflush_r>
 8011e9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ea0:	07da      	lsls	r2, r3, #31
 8011ea2:	4605      	mov	r5, r0
 8011ea4:	d4e4      	bmi.n	8011e70 <_fflush_r+0xc>
 8011ea6:	89a3      	ldrh	r3, [r4, #12]
 8011ea8:	059b      	lsls	r3, r3, #22
 8011eaa:	d4e1      	bmi.n	8011e70 <_fflush_r+0xc>
 8011eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eae:	f7ff fb57 	bl	8011560 <__retarget_lock_release_recursive>
 8011eb2:	e7dd      	b.n	8011e70 <_fflush_r+0xc>

08011eb4 <fiprintf>:
 8011eb4:	b40e      	push	{r1, r2, r3}
 8011eb6:	b503      	push	{r0, r1, lr}
 8011eb8:	4601      	mov	r1, r0
 8011eba:	ab03      	add	r3, sp, #12
 8011ebc:	4805      	ldr	r0, [pc, #20]	@ (8011ed4 <fiprintf+0x20>)
 8011ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ec2:	6800      	ldr	r0, [r0, #0]
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	f7ff fca3 	bl	8011810 <_vfiprintf_r>
 8011eca:	b002      	add	sp, #8
 8011ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ed0:	b003      	add	sp, #12
 8011ed2:	4770      	bx	lr
 8011ed4:	24000050 	.word	0x24000050

08011ed8 <__swhatbuf_r>:
 8011ed8:	b570      	push	{r4, r5, r6, lr}
 8011eda:	460c      	mov	r4, r1
 8011edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee0:	2900      	cmp	r1, #0
 8011ee2:	b096      	sub	sp, #88	@ 0x58
 8011ee4:	4615      	mov	r5, r2
 8011ee6:	461e      	mov	r6, r3
 8011ee8:	da0d      	bge.n	8011f06 <__swhatbuf_r+0x2e>
 8011eea:	89a3      	ldrh	r3, [r4, #12]
 8011eec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ef0:	f04f 0100 	mov.w	r1, #0
 8011ef4:	bf14      	ite	ne
 8011ef6:	2340      	movne	r3, #64	@ 0x40
 8011ef8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011efc:	2000      	movs	r0, #0
 8011efe:	6031      	str	r1, [r6, #0]
 8011f00:	602b      	str	r3, [r5, #0]
 8011f02:	b016      	add	sp, #88	@ 0x58
 8011f04:	bd70      	pop	{r4, r5, r6, pc}
 8011f06:	466a      	mov	r2, sp
 8011f08:	f000 f848 	bl	8011f9c <_fstat_r>
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	dbec      	blt.n	8011eea <__swhatbuf_r+0x12>
 8011f10:	9901      	ldr	r1, [sp, #4]
 8011f12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f1a:	4259      	negs	r1, r3
 8011f1c:	4159      	adcs	r1, r3
 8011f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f22:	e7eb      	b.n	8011efc <__swhatbuf_r+0x24>

08011f24 <__smakebuf_r>:
 8011f24:	898b      	ldrh	r3, [r1, #12]
 8011f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f28:	079d      	lsls	r5, r3, #30
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460c      	mov	r4, r1
 8011f2e:	d507      	bpl.n	8011f40 <__smakebuf_r+0x1c>
 8011f30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	6123      	str	r3, [r4, #16]
 8011f38:	2301      	movs	r3, #1
 8011f3a:	6163      	str	r3, [r4, #20]
 8011f3c:	b003      	add	sp, #12
 8011f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f40:	ab01      	add	r3, sp, #4
 8011f42:	466a      	mov	r2, sp
 8011f44:	f7ff ffc8 	bl	8011ed8 <__swhatbuf_r>
 8011f48:	9f00      	ldr	r7, [sp, #0]
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	4639      	mov	r1, r7
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f7ff fba8 	bl	80116a4 <_malloc_r>
 8011f54:	b948      	cbnz	r0, 8011f6a <__smakebuf_r+0x46>
 8011f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f5a:	059a      	lsls	r2, r3, #22
 8011f5c:	d4ee      	bmi.n	8011f3c <__smakebuf_r+0x18>
 8011f5e:	f023 0303 	bic.w	r3, r3, #3
 8011f62:	f043 0302 	orr.w	r3, r3, #2
 8011f66:	81a3      	strh	r3, [r4, #12]
 8011f68:	e7e2      	b.n	8011f30 <__smakebuf_r+0xc>
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	6020      	str	r0, [r4, #0]
 8011f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f72:	81a3      	strh	r3, [r4, #12]
 8011f74:	9b01      	ldr	r3, [sp, #4]
 8011f76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f7a:	b15b      	cbz	r3, 8011f94 <__smakebuf_r+0x70>
 8011f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f80:	4630      	mov	r0, r6
 8011f82:	f000 f81d 	bl	8011fc0 <_isatty_r>
 8011f86:	b128      	cbz	r0, 8011f94 <__smakebuf_r+0x70>
 8011f88:	89a3      	ldrh	r3, [r4, #12]
 8011f8a:	f023 0303 	bic.w	r3, r3, #3
 8011f8e:	f043 0301 	orr.w	r3, r3, #1
 8011f92:	81a3      	strh	r3, [r4, #12]
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	431d      	orrs	r5, r3
 8011f98:	81a5      	strh	r5, [r4, #12]
 8011f9a:	e7cf      	b.n	8011f3c <__smakebuf_r+0x18>

08011f9c <_fstat_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4d07      	ldr	r5, [pc, #28]	@ (8011fbc <_fstat_r+0x20>)
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	602b      	str	r3, [r5, #0]
 8011faa:	f7ee fff5 	bl	8000f98 <_fstat>
 8011fae:	1c43      	adds	r3, r0, #1
 8011fb0:	d102      	bne.n	8011fb8 <_fstat_r+0x1c>
 8011fb2:	682b      	ldr	r3, [r5, #0]
 8011fb4:	b103      	cbz	r3, 8011fb8 <_fstat_r+0x1c>
 8011fb6:	6023      	str	r3, [r4, #0]
 8011fb8:	bd38      	pop	{r3, r4, r5, pc}
 8011fba:	bf00      	nop
 8011fbc:	2401c828 	.word	0x2401c828

08011fc0 <_isatty_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4d06      	ldr	r5, [pc, #24]	@ (8011fdc <_isatty_r+0x1c>)
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	602b      	str	r3, [r5, #0]
 8011fcc:	f7ee fff4 	bl	8000fb8 <_isatty>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_isatty_r+0x1a>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_isatty_r+0x1a>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	2401c828 	.word	0x2401c828

08011fe0 <_sbrk_r>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	4d06      	ldr	r5, [pc, #24]	@ (8011ffc <_sbrk_r+0x1c>)
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	4608      	mov	r0, r1
 8011fea:	602b      	str	r3, [r5, #0]
 8011fec:	f7ee fffc 	bl	8000fe8 <_sbrk>
 8011ff0:	1c43      	adds	r3, r0, #1
 8011ff2:	d102      	bne.n	8011ffa <_sbrk_r+0x1a>
 8011ff4:	682b      	ldr	r3, [r5, #0]
 8011ff6:	b103      	cbz	r3, 8011ffa <_sbrk_r+0x1a>
 8011ff8:	6023      	str	r3, [r4, #0]
 8011ffa:	bd38      	pop	{r3, r4, r5, pc}
 8011ffc:	2401c828 	.word	0x2401c828

08012000 <abort>:
 8012000:	b508      	push	{r3, lr}
 8012002:	2006      	movs	r0, #6
 8012004:	f000 f82c 	bl	8012060 <raise>
 8012008:	2001      	movs	r0, #1
 801200a:	f7ee ff91 	bl	8000f30 <_exit>

0801200e <_raise_r>:
 801200e:	291f      	cmp	r1, #31
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	4605      	mov	r5, r0
 8012014:	460c      	mov	r4, r1
 8012016:	d904      	bls.n	8012022 <_raise_r+0x14>
 8012018:	2316      	movs	r3, #22
 801201a:	6003      	str	r3, [r0, #0]
 801201c:	f04f 30ff 	mov.w	r0, #4294967295
 8012020:	bd38      	pop	{r3, r4, r5, pc}
 8012022:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012024:	b112      	cbz	r2, 801202c <_raise_r+0x1e>
 8012026:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801202a:	b94b      	cbnz	r3, 8012040 <_raise_r+0x32>
 801202c:	4628      	mov	r0, r5
 801202e:	f000 f831 	bl	8012094 <_getpid_r>
 8012032:	4622      	mov	r2, r4
 8012034:	4601      	mov	r1, r0
 8012036:	4628      	mov	r0, r5
 8012038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801203c:	f000 b818 	b.w	8012070 <_kill_r>
 8012040:	2b01      	cmp	r3, #1
 8012042:	d00a      	beq.n	801205a <_raise_r+0x4c>
 8012044:	1c59      	adds	r1, r3, #1
 8012046:	d103      	bne.n	8012050 <_raise_r+0x42>
 8012048:	2316      	movs	r3, #22
 801204a:	6003      	str	r3, [r0, #0]
 801204c:	2001      	movs	r0, #1
 801204e:	e7e7      	b.n	8012020 <_raise_r+0x12>
 8012050:	2100      	movs	r1, #0
 8012052:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012056:	4620      	mov	r0, r4
 8012058:	4798      	blx	r3
 801205a:	2000      	movs	r0, #0
 801205c:	e7e0      	b.n	8012020 <_raise_r+0x12>
	...

08012060 <raise>:
 8012060:	4b02      	ldr	r3, [pc, #8]	@ (801206c <raise+0xc>)
 8012062:	4601      	mov	r1, r0
 8012064:	6818      	ldr	r0, [r3, #0]
 8012066:	f7ff bfd2 	b.w	801200e <_raise_r>
 801206a:	bf00      	nop
 801206c:	24000050 	.word	0x24000050

08012070 <_kill_r>:
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	4d07      	ldr	r5, [pc, #28]	@ (8012090 <_kill_r+0x20>)
 8012074:	2300      	movs	r3, #0
 8012076:	4604      	mov	r4, r0
 8012078:	4608      	mov	r0, r1
 801207a:	4611      	mov	r1, r2
 801207c:	602b      	str	r3, [r5, #0]
 801207e:	f7ee ff45 	bl	8000f0c <_kill>
 8012082:	1c43      	adds	r3, r0, #1
 8012084:	d102      	bne.n	801208c <_kill_r+0x1c>
 8012086:	682b      	ldr	r3, [r5, #0]
 8012088:	b103      	cbz	r3, 801208c <_kill_r+0x1c>
 801208a:	6023      	str	r3, [r4, #0]
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	bf00      	nop
 8012090:	2401c828 	.word	0x2401c828

08012094 <_getpid_r>:
 8012094:	f7ee bf32 	b.w	8000efc <_getpid>

08012098 <_init>:
 8012098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801209a:	bf00      	nop
 801209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801209e:	bc08      	pop	{r3}
 80120a0:	469e      	mov	lr, r3
 80120a2:	4770      	bx	lr

080120a4 <_fini>:
 80120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a6:	bf00      	nop
 80120a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120aa:	bc08      	pop	{r3}
 80120ac:	469e      	mov	lr, r3
 80120ae:	4770      	bx	lr
