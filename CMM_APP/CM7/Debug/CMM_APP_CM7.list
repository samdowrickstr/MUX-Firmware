
CMM_APP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023e98  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d04  08124138  08124138  00025138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08128e3c  08128e3c  0002a21c  2**0
                  CONTENTS
  4 .ARM          00000008  08128e3c  08128e3c  00029e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08128e44  08128e44  0002a21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08128e44  08128e44  00029e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08128e48  08128e48  00029e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  24000000  08128e4c  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012640  2400021c  08129068  0002a21c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2401285c  08129068  0002a85c  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  0002b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002a21c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046d3e  00000000  00000000  0002a24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009ab0  00000000  00000000  00070f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fe8  00000000  00000000  0007aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002602  00000000  00000000  0007da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003228d  00000000  00000000  00080022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000113f9  00000000  00000000  000b22af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000c36a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d88c  00000000  00000000  000c3730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d0fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	2400021c 	.word	0x2400021c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08124120 	.word	0x08124120

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	24000220 	.word	0x24000220
 81002dc:	08124120 	.word	0x08124120

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <strlen>:
 81003a0:	4603      	mov	r3, r0
 81003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81003a6:	2a00      	cmp	r2, #0
 81003a8:	d1fb      	bne.n	81003a2 <strlen+0x2>
 81003aa:	1a18      	subs	r0, r3, r0
 81003ac:	3801      	subs	r0, #1
 81003ae:	4770      	bx	lr

081003b0 <__aeabi_uldivmod>:
 81003b0:	b953      	cbnz	r3, 81003c8 <__aeabi_uldivmod+0x18>
 81003b2:	b94a      	cbnz	r2, 81003c8 <__aeabi_uldivmod+0x18>
 81003b4:	2900      	cmp	r1, #0
 81003b6:	bf08      	it	eq
 81003b8:	2800      	cmpeq	r0, #0
 81003ba:	bf1c      	itt	ne
 81003bc:	f04f 31ff 	movne.w	r1, #4294967295
 81003c0:	f04f 30ff 	movne.w	r0, #4294967295
 81003c4:	f000 b96a 	b.w	810069c <__aeabi_idiv0>
 81003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003d0:	f000 f806 	bl	81003e0 <__udivmoddi4>
 81003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003dc:	b004      	add	sp, #16
 81003de:	4770      	bx	lr

081003e0 <__udivmoddi4>:
 81003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003e4:	9d08      	ldr	r5, [sp, #32]
 81003e6:	460c      	mov	r4, r1
 81003e8:	2b00      	cmp	r3, #0
 81003ea:	d14e      	bne.n	810048a <__udivmoddi4+0xaa>
 81003ec:	4694      	mov	ip, r2
 81003ee:	458c      	cmp	ip, r1
 81003f0:	4686      	mov	lr, r0
 81003f2:	fab2 f282 	clz	r2, r2
 81003f6:	d962      	bls.n	81004be <__udivmoddi4+0xde>
 81003f8:	b14a      	cbz	r2, 810040e <__udivmoddi4+0x2e>
 81003fa:	f1c2 0320 	rsb	r3, r2, #32
 81003fe:	4091      	lsls	r1, r2
 8100400:	fa20 f303 	lsr.w	r3, r0, r3
 8100404:	fa0c fc02 	lsl.w	ip, ip, r2
 8100408:	4319      	orrs	r1, r3
 810040a:	fa00 fe02 	lsl.w	lr, r0, r2
 810040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100412:	fa1f f68c 	uxth.w	r6, ip
 8100416:	fbb1 f4f7 	udiv	r4, r1, r7
 810041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 810041e:	fb07 1114 	mls	r1, r7, r4, r1
 8100422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100426:	fb04 f106 	mul.w	r1, r4, r6
 810042a:	4299      	cmp	r1, r3
 810042c:	d90a      	bls.n	8100444 <__udivmoddi4+0x64>
 810042e:	eb1c 0303 	adds.w	r3, ip, r3
 8100432:	f104 30ff 	add.w	r0, r4, #4294967295
 8100436:	f080 8112 	bcs.w	810065e <__udivmoddi4+0x27e>
 810043a:	4299      	cmp	r1, r3
 810043c:	f240 810f 	bls.w	810065e <__udivmoddi4+0x27e>
 8100440:	3c02      	subs	r4, #2
 8100442:	4463      	add	r3, ip
 8100444:	1a59      	subs	r1, r3, r1
 8100446:	fa1f f38e 	uxth.w	r3, lr
 810044a:	fbb1 f0f7 	udiv	r0, r1, r7
 810044e:	fb07 1110 	mls	r1, r7, r0, r1
 8100452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100456:	fb00 f606 	mul.w	r6, r0, r6
 810045a:	429e      	cmp	r6, r3
 810045c:	d90a      	bls.n	8100474 <__udivmoddi4+0x94>
 810045e:	eb1c 0303 	adds.w	r3, ip, r3
 8100462:	f100 31ff 	add.w	r1, r0, #4294967295
 8100466:	f080 80fc 	bcs.w	8100662 <__udivmoddi4+0x282>
 810046a:	429e      	cmp	r6, r3
 810046c:	f240 80f9 	bls.w	8100662 <__udivmoddi4+0x282>
 8100470:	4463      	add	r3, ip
 8100472:	3802      	subs	r0, #2
 8100474:	1b9b      	subs	r3, r3, r6
 8100476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810047a:	2100      	movs	r1, #0
 810047c:	b11d      	cbz	r5, 8100486 <__udivmoddi4+0xa6>
 810047e:	40d3      	lsrs	r3, r2
 8100480:	2200      	movs	r2, #0
 8100482:	e9c5 3200 	strd	r3, r2, [r5]
 8100486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810048a:	428b      	cmp	r3, r1
 810048c:	d905      	bls.n	810049a <__udivmoddi4+0xba>
 810048e:	b10d      	cbz	r5, 8100494 <__udivmoddi4+0xb4>
 8100490:	e9c5 0100 	strd	r0, r1, [r5]
 8100494:	2100      	movs	r1, #0
 8100496:	4608      	mov	r0, r1
 8100498:	e7f5      	b.n	8100486 <__udivmoddi4+0xa6>
 810049a:	fab3 f183 	clz	r1, r3
 810049e:	2900      	cmp	r1, #0
 81004a0:	d146      	bne.n	8100530 <__udivmoddi4+0x150>
 81004a2:	42a3      	cmp	r3, r4
 81004a4:	d302      	bcc.n	81004ac <__udivmoddi4+0xcc>
 81004a6:	4290      	cmp	r0, r2
 81004a8:	f0c0 80f0 	bcc.w	810068c <__udivmoddi4+0x2ac>
 81004ac:	1a86      	subs	r6, r0, r2
 81004ae:	eb64 0303 	sbc.w	r3, r4, r3
 81004b2:	2001      	movs	r0, #1
 81004b4:	2d00      	cmp	r5, #0
 81004b6:	d0e6      	beq.n	8100486 <__udivmoddi4+0xa6>
 81004b8:	e9c5 6300 	strd	r6, r3, [r5]
 81004bc:	e7e3      	b.n	8100486 <__udivmoddi4+0xa6>
 81004be:	2a00      	cmp	r2, #0
 81004c0:	f040 8090 	bne.w	81005e4 <__udivmoddi4+0x204>
 81004c4:	eba1 040c 	sub.w	r4, r1, ip
 81004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004cc:	fa1f f78c 	uxth.w	r7, ip
 81004d0:	2101      	movs	r1, #1
 81004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004da:	fb08 4416 	mls	r4, r8, r6, r4
 81004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004e2:	fb07 f006 	mul.w	r0, r7, r6
 81004e6:	4298      	cmp	r0, r3
 81004e8:	d908      	bls.n	81004fc <__udivmoddi4+0x11c>
 81004ea:	eb1c 0303 	adds.w	r3, ip, r3
 81004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 81004f2:	d202      	bcs.n	81004fa <__udivmoddi4+0x11a>
 81004f4:	4298      	cmp	r0, r3
 81004f6:	f200 80cd 	bhi.w	8100694 <__udivmoddi4+0x2b4>
 81004fa:	4626      	mov	r6, r4
 81004fc:	1a1c      	subs	r4, r3, r0
 81004fe:	fa1f f38e 	uxth.w	r3, lr
 8100502:	fbb4 f0f8 	udiv	r0, r4, r8
 8100506:	fb08 4410 	mls	r4, r8, r0, r4
 810050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810050e:	fb00 f707 	mul.w	r7, r0, r7
 8100512:	429f      	cmp	r7, r3
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x148>
 8100516:	eb1c 0303 	adds.w	r3, ip, r3
 810051a:	f100 34ff 	add.w	r4, r0, #4294967295
 810051e:	d202      	bcs.n	8100526 <__udivmoddi4+0x146>
 8100520:	429f      	cmp	r7, r3
 8100522:	f200 80b0 	bhi.w	8100686 <__udivmoddi4+0x2a6>
 8100526:	4620      	mov	r0, r4
 8100528:	1bdb      	subs	r3, r3, r7
 810052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810052e:	e7a5      	b.n	810047c <__udivmoddi4+0x9c>
 8100530:	f1c1 0620 	rsb	r6, r1, #32
 8100534:	408b      	lsls	r3, r1
 8100536:	fa22 f706 	lsr.w	r7, r2, r6
 810053a:	431f      	orrs	r7, r3
 810053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100540:	fa04 f301 	lsl.w	r3, r4, r1
 8100544:	ea43 030c 	orr.w	r3, r3, ip
 8100548:	40f4      	lsrs	r4, r6
 810054a:	fa00 f801 	lsl.w	r8, r0, r1
 810054e:	0c38      	lsrs	r0, r7, #16
 8100550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100554:	fbb4 fef0 	udiv	lr, r4, r0
 8100558:	fa1f fc87 	uxth.w	ip, r7
 810055c:	fb00 441e 	mls	r4, r0, lr, r4
 8100560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100564:	fb0e f90c 	mul.w	r9, lr, ip
 8100568:	45a1      	cmp	r9, r4
 810056a:	fa02 f201 	lsl.w	r2, r2, r1
 810056e:	d90a      	bls.n	8100586 <__udivmoddi4+0x1a6>
 8100570:	193c      	adds	r4, r7, r4
 8100572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100576:	f080 8084 	bcs.w	8100682 <__udivmoddi4+0x2a2>
 810057a:	45a1      	cmp	r9, r4
 810057c:	f240 8081 	bls.w	8100682 <__udivmoddi4+0x2a2>
 8100580:	f1ae 0e02 	sub.w	lr, lr, #2
 8100584:	443c      	add	r4, r7
 8100586:	eba4 0409 	sub.w	r4, r4, r9
 810058a:	fa1f f983 	uxth.w	r9, r3
 810058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100592:	fb00 4413 	mls	r4, r0, r3, r4
 8100596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810059a:	fb03 fc0c 	mul.w	ip, r3, ip
 810059e:	45a4      	cmp	ip, r4
 81005a0:	d907      	bls.n	81005b2 <__udivmoddi4+0x1d2>
 81005a2:	193c      	adds	r4, r7, r4
 81005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 81005a8:	d267      	bcs.n	810067a <__udivmoddi4+0x29a>
 81005aa:	45a4      	cmp	ip, r4
 81005ac:	d965      	bls.n	810067a <__udivmoddi4+0x29a>
 81005ae:	3b02      	subs	r3, #2
 81005b0:	443c      	add	r4, r7
 81005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81005b6:	fba0 9302 	umull	r9, r3, r0, r2
 81005ba:	eba4 040c 	sub.w	r4, r4, ip
 81005be:	429c      	cmp	r4, r3
 81005c0:	46ce      	mov	lr, r9
 81005c2:	469c      	mov	ip, r3
 81005c4:	d351      	bcc.n	810066a <__udivmoddi4+0x28a>
 81005c6:	d04e      	beq.n	8100666 <__udivmoddi4+0x286>
 81005c8:	b155      	cbz	r5, 81005e0 <__udivmoddi4+0x200>
 81005ca:	ebb8 030e 	subs.w	r3, r8, lr
 81005ce:	eb64 040c 	sbc.w	r4, r4, ip
 81005d2:	fa04 f606 	lsl.w	r6, r4, r6
 81005d6:	40cb      	lsrs	r3, r1
 81005d8:	431e      	orrs	r6, r3
 81005da:	40cc      	lsrs	r4, r1
 81005dc:	e9c5 6400 	strd	r6, r4, [r5]
 81005e0:	2100      	movs	r1, #0
 81005e2:	e750      	b.n	8100486 <__udivmoddi4+0xa6>
 81005e4:	f1c2 0320 	rsb	r3, r2, #32
 81005e8:	fa20 f103 	lsr.w	r1, r0, r3
 81005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 81005f0:	fa24 f303 	lsr.w	r3, r4, r3
 81005f4:	4094      	lsls	r4, r2
 81005f6:	430c      	orrs	r4, r1
 81005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8100600:	fa1f f78c 	uxth.w	r7, ip
 8100604:	fbb3 f0f8 	udiv	r0, r3, r8
 8100608:	fb08 3110 	mls	r1, r8, r0, r3
 810060c:	0c23      	lsrs	r3, r4, #16
 810060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100612:	fb00 f107 	mul.w	r1, r0, r7
 8100616:	4299      	cmp	r1, r3
 8100618:	d908      	bls.n	810062c <__udivmoddi4+0x24c>
 810061a:	eb1c 0303 	adds.w	r3, ip, r3
 810061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8100622:	d22c      	bcs.n	810067e <__udivmoddi4+0x29e>
 8100624:	4299      	cmp	r1, r3
 8100626:	d92a      	bls.n	810067e <__udivmoddi4+0x29e>
 8100628:	3802      	subs	r0, #2
 810062a:	4463      	add	r3, ip
 810062c:	1a5b      	subs	r3, r3, r1
 810062e:	b2a4      	uxth	r4, r4
 8100630:	fbb3 f1f8 	udiv	r1, r3, r8
 8100634:	fb08 3311 	mls	r3, r8, r1, r3
 8100638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810063c:	fb01 f307 	mul.w	r3, r1, r7
 8100640:	42a3      	cmp	r3, r4
 8100642:	d908      	bls.n	8100656 <__udivmoddi4+0x276>
 8100644:	eb1c 0404 	adds.w	r4, ip, r4
 8100648:	f101 36ff 	add.w	r6, r1, #4294967295
 810064c:	d213      	bcs.n	8100676 <__udivmoddi4+0x296>
 810064e:	42a3      	cmp	r3, r4
 8100650:	d911      	bls.n	8100676 <__udivmoddi4+0x296>
 8100652:	3902      	subs	r1, #2
 8100654:	4464      	add	r4, ip
 8100656:	1ae4      	subs	r4, r4, r3
 8100658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810065c:	e739      	b.n	81004d2 <__udivmoddi4+0xf2>
 810065e:	4604      	mov	r4, r0
 8100660:	e6f0      	b.n	8100444 <__udivmoddi4+0x64>
 8100662:	4608      	mov	r0, r1
 8100664:	e706      	b.n	8100474 <__udivmoddi4+0x94>
 8100666:	45c8      	cmp	r8, r9
 8100668:	d2ae      	bcs.n	81005c8 <__udivmoddi4+0x1e8>
 810066a:	ebb9 0e02 	subs.w	lr, r9, r2
 810066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100672:	3801      	subs	r0, #1
 8100674:	e7a8      	b.n	81005c8 <__udivmoddi4+0x1e8>
 8100676:	4631      	mov	r1, r6
 8100678:	e7ed      	b.n	8100656 <__udivmoddi4+0x276>
 810067a:	4603      	mov	r3, r0
 810067c:	e799      	b.n	81005b2 <__udivmoddi4+0x1d2>
 810067e:	4630      	mov	r0, r6
 8100680:	e7d4      	b.n	810062c <__udivmoddi4+0x24c>
 8100682:	46d6      	mov	lr, sl
 8100684:	e77f      	b.n	8100586 <__udivmoddi4+0x1a6>
 8100686:	4463      	add	r3, ip
 8100688:	3802      	subs	r0, #2
 810068a:	e74d      	b.n	8100528 <__udivmoddi4+0x148>
 810068c:	4606      	mov	r6, r0
 810068e:	4623      	mov	r3, r4
 8100690:	4608      	mov	r0, r1
 8100692:	e70f      	b.n	81004b4 <__udivmoddi4+0xd4>
 8100694:	3e02      	subs	r6, #2
 8100696:	4463      	add	r3, ip
 8100698:	e730      	b.n	81004fc <__udivmoddi4+0x11c>
 810069a:	bf00      	nop

0810069c <__aeabi_idiv0>:
 810069c:	4770      	bx	lr
 810069e:	bf00      	nop

081006a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a0:	b480      	push	{r7}
 81006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006a4:	4b3d      	ldr	r3, [pc, #244]	@ (810079c <SystemInit+0xfc>)
 81006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81006aa:	4a3c      	ldr	r2, [pc, #240]	@ (810079c <SystemInit+0xfc>)
 81006ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81006b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006b4:	4b39      	ldr	r3, [pc, #228]	@ (810079c <SystemInit+0xfc>)
 81006b6:	691b      	ldr	r3, [r3, #16]
 81006b8:	4a38      	ldr	r2, [pc, #224]	@ (810079c <SystemInit+0xfc>)
 81006ba:	f043 0310 	orr.w	r3, r3, #16
 81006be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 81006c0:	4b37      	ldr	r3, [pc, #220]	@ (81007a0 <SystemInit+0x100>)
 81006c2:	681b      	ldr	r3, [r3, #0]
 81006c4:	f003 030f 	and.w	r3, r3, #15
 81006c8:	2b06      	cmp	r3, #6
 81006ca:	d807      	bhi.n	81006dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 81006cc:	4b34      	ldr	r3, [pc, #208]	@ (81007a0 <SystemInit+0x100>)
 81006ce:	681b      	ldr	r3, [r3, #0]
 81006d0:	f023 030f 	bic.w	r3, r3, #15
 81006d4:	4a32      	ldr	r2, [pc, #200]	@ (81007a0 <SystemInit+0x100>)
 81006d6:	f043 0307 	orr.w	r3, r3, #7
 81006da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 81006dc:	4b31      	ldr	r3, [pc, #196]	@ (81007a4 <SystemInit+0x104>)
 81006de:	681b      	ldr	r3, [r3, #0]
 81006e0:	4a30      	ldr	r2, [pc, #192]	@ (81007a4 <SystemInit+0x104>)
 81006e2:	f043 0301 	orr.w	r3, r3, #1
 81006e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 81006e8:	4b2e      	ldr	r3, [pc, #184]	@ (81007a4 <SystemInit+0x104>)
 81006ea:	2200      	movs	r2, #0
 81006ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 81006ee:	4b2d      	ldr	r3, [pc, #180]	@ (81007a4 <SystemInit+0x104>)
 81006f0:	681a      	ldr	r2, [r3, #0]
 81006f2:	492c      	ldr	r1, [pc, #176]	@ (81007a4 <SystemInit+0x104>)
 81006f4:	4b2c      	ldr	r3, [pc, #176]	@ (81007a8 <SystemInit+0x108>)
 81006f6:	4013      	ands	r3, r2
 81006f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 81006fa:	4b29      	ldr	r3, [pc, #164]	@ (81007a0 <SystemInit+0x100>)
 81006fc:	681b      	ldr	r3, [r3, #0]
 81006fe:	f003 0308 	and.w	r3, r3, #8
 8100702:	2b00      	cmp	r3, #0
 8100704:	d007      	beq.n	8100716 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8100706:	4b26      	ldr	r3, [pc, #152]	@ (81007a0 <SystemInit+0x100>)
 8100708:	681b      	ldr	r3, [r3, #0]
 810070a:	f023 030f 	bic.w	r3, r3, #15
 810070e:	4a24      	ldr	r2, [pc, #144]	@ (81007a0 <SystemInit+0x100>)
 8100710:	f043 0307 	orr.w	r3, r3, #7
 8100714:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8100716:	4b23      	ldr	r3, [pc, #140]	@ (81007a4 <SystemInit+0x104>)
 8100718:	2200      	movs	r2, #0
 810071a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 810071c:	4b21      	ldr	r3, [pc, #132]	@ (81007a4 <SystemInit+0x104>)
 810071e:	2200      	movs	r2, #0
 8100720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8100722:	4b20      	ldr	r3, [pc, #128]	@ (81007a4 <SystemInit+0x104>)
 8100724:	2200      	movs	r2, #0
 8100726:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8100728:	4b1e      	ldr	r3, [pc, #120]	@ (81007a4 <SystemInit+0x104>)
 810072a:	4a20      	ldr	r2, [pc, #128]	@ (81007ac <SystemInit+0x10c>)
 810072c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 810072e:	4b1d      	ldr	r3, [pc, #116]	@ (81007a4 <SystemInit+0x104>)
 8100730:	4a1f      	ldr	r2, [pc, #124]	@ (81007b0 <SystemInit+0x110>)
 8100732:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8100734:	4b1b      	ldr	r3, [pc, #108]	@ (81007a4 <SystemInit+0x104>)
 8100736:	4a1f      	ldr	r2, [pc, #124]	@ (81007b4 <SystemInit+0x114>)
 8100738:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 810073a:	4b1a      	ldr	r3, [pc, #104]	@ (81007a4 <SystemInit+0x104>)
 810073c:	2200      	movs	r2, #0
 810073e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8100740:	4b18      	ldr	r3, [pc, #96]	@ (81007a4 <SystemInit+0x104>)
 8100742:	4a1c      	ldr	r2, [pc, #112]	@ (81007b4 <SystemInit+0x114>)
 8100744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8100746:	4b17      	ldr	r3, [pc, #92]	@ (81007a4 <SystemInit+0x104>)
 8100748:	2200      	movs	r2, #0
 810074a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 810074c:	4b15      	ldr	r3, [pc, #84]	@ (81007a4 <SystemInit+0x104>)
 810074e:	4a19      	ldr	r2, [pc, #100]	@ (81007b4 <SystemInit+0x114>)
 8100750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8100752:	4b14      	ldr	r3, [pc, #80]	@ (81007a4 <SystemInit+0x104>)
 8100754:	2200      	movs	r2, #0
 8100756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8100758:	4b12      	ldr	r3, [pc, #72]	@ (81007a4 <SystemInit+0x104>)
 810075a:	681b      	ldr	r3, [r3, #0]
 810075c:	4a11      	ldr	r2, [pc, #68]	@ (81007a4 <SystemInit+0x104>)
 810075e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8100762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8100764:	4b0f      	ldr	r3, [pc, #60]	@ (81007a4 <SystemInit+0x104>)
 8100766:	2200      	movs	r2, #0
 8100768:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 810076a:	4b13      	ldr	r3, [pc, #76]	@ (81007b8 <SystemInit+0x118>)
 810076c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810076e:	4a12      	ldr	r2, [pc, #72]	@ (81007b8 <SystemInit+0x118>)
 8100770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100774:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8100776:	4b11      	ldr	r3, [pc, #68]	@ (81007bc <SystemInit+0x11c>)
 8100778:	681a      	ldr	r2, [r3, #0]
 810077a:	4b11      	ldr	r3, [pc, #68]	@ (81007c0 <SystemInit+0x120>)
 810077c:	4013      	ands	r3, r2
 810077e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8100782:	d202      	bcs.n	810078a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8100784:	4b0f      	ldr	r3, [pc, #60]	@ (81007c4 <SystemInit+0x124>)
 8100786:	2201      	movs	r2, #1
 8100788:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 810078a:	4b0f      	ldr	r3, [pc, #60]	@ (81007c8 <SystemInit+0x128>)
 810078c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8100790:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100792:	bf00      	nop
 8100794:	46bd      	mov	sp, r7
 8100796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810079a:	4770      	bx	lr
 810079c:	e000ed00 	.word	0xe000ed00
 81007a0:	52002000 	.word	0x52002000
 81007a4:	58024400 	.word	0x58024400
 81007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 81007ac:	02020200 	.word	0x02020200
 81007b0:	01ff0000 	.word	0x01ff0000
 81007b4:	01010280 	.word	0x01010280
 81007b8:	580000c0 	.word	0x580000c0
 81007bc:	5c001000 	.word	0x5c001000
 81007c0:	ffff0000 	.word	0xffff0000
 81007c4:	51008108 	.word	0x51008108
 81007c8:	52004000 	.word	0x52004000

081007cc <mqtt_incoming_data_cb>:
  * @param  data: Pointer to the data received.
  * @param  len: Length of the data received.
  * @param  flags: Flags indicating additional information about the data.
  * @retval None
  */
static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags) {
 81007cc:	b580      	push	{r7, lr}
 81007ce:	b086      	sub	sp, #24
 81007d0:	af00      	add	r7, sp, #0
 81007d2:	60f8      	str	r0, [r7, #12]
 81007d4:	60b9      	str	r1, [r7, #8]
 81007d6:	4611      	mov	r1, r2
 81007d8:	461a      	mov	r2, r3
 81007da:	460b      	mov	r3, r1
 81007dc:	80fb      	strh	r3, [r7, #6]
 81007de:	4613      	mov	r3, r2
 81007e0:	717b      	strb	r3, [r7, #5]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 81007e2:	68fb      	ldr	r3, [r7, #12]
 81007e4:	617b      	str	r3, [r7, #20]
    LWIP_UNUSED_ARG(flags);

//    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" data cb: len %d\n", client_info->client_id, (int)len));

    // Call the topic handler function with the current topic and data
    handle_incoming_topic_data(current_topic, (const char *)data, len);
 81007e6:	88fb      	ldrh	r3, [r7, #6]
 81007e8:	461a      	mov	r2, r3
 81007ea:	68b9      	ldr	r1, [r7, #8]
 81007ec:	4803      	ldr	r0, [pc, #12]	@ (81007fc <mqtt_incoming_data_cb+0x30>)
 81007ee:	f000 fb9f 	bl	8100f30 <handle_incoming_topic_data>
}
 81007f2:	bf00      	nop
 81007f4:	3718      	adds	r7, #24
 81007f6:	46bd      	mov	sp, r7
 81007f8:	bd80      	pop	{r7, pc}
 81007fa:	bf00      	nop
 81007fc:	2400023c 	.word	0x2400023c

08100800 <mqtt_incoming_publish_cb>:
  * @param  arg: User-defined argument, in this case, the client information structure.
  * @param  topic: The topic on which the message was published.
  * @param  tot_len: The total length of the message.
  * @retval None
  */
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len) {
 8100800:	b580      	push	{r7, lr}
 8100802:	b086      	sub	sp, #24
 8100804:	af00      	add	r7, sp, #0
 8100806:	60f8      	str	r0, [r7, #12]
 8100808:	60b9      	str	r1, [r7, #8]
 810080a:	607a      	str	r2, [r7, #4]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 810080c:	68fb      	ldr	r3, [r7, #12]
 810080e:	617b      	str	r3, [r7, #20]

//    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" publish cb: topic %s, len %d\n", client_info->client_id, topic, (int)tot_len));

    // Store the topic for use in data callback
    strncpy(current_topic, topic, sizeof(current_topic) - 1);
 8100810:	22ff      	movs	r2, #255	@ 0xff
 8100812:	68b9      	ldr	r1, [r7, #8]
 8100814:	4805      	ldr	r0, [pc, #20]	@ (810082c <mqtt_incoming_publish_cb+0x2c>)
 8100816:	f021 fc75 	bl	8122104 <strncpy>
    current_topic[sizeof(current_topic) - 1] = '\0'; // Ensure null-termination
 810081a:	4b04      	ldr	r3, [pc, #16]	@ (810082c <mqtt_incoming_publish_cb+0x2c>)
 810081c:	2200      	movs	r2, #0
 810081e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 8100822:	bf00      	nop
 8100824:	3718      	adds	r7, #24
 8100826:	46bd      	mov	sp, r7
 8100828:	bd80      	pop	{r7, pc}
 810082a:	bf00      	nop
 810082c:	2400023c 	.word	0x2400023c

08100830 <mqtt_request_cb>:
  * @brief  Callback function for publish/subscribe/unsubscribe requests.
  * @param  arg: User-defined argument, in this case, the client information structure.
  * @param  err: The error status of the request.
  * @retval None
  */
void mqtt_request_cb(void *arg, err_t err) {
 8100830:	b480      	push	{r7}
 8100832:	b085      	sub	sp, #20
 8100834:	af00      	add	r7, sp, #0
 8100836:	6078      	str	r0, [r7, #4]
 8100838:	460b      	mov	r3, r1
 810083a:	70fb      	strb	r3, [r7, #3]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 810083c:	687b      	ldr	r3, [r7, #4]
 810083e:	60fb      	str	r3, [r7, #12]

    if (err != ERR_OK) {
        // Implement error handling logic here
//        LWIP_PLATFORM_DIAG(("Request failed for client \"%s\" with error %d\n", client_info->client_id, err));
    }
}
 8100840:	bf00      	nop
 8100842:	3714      	adds	r7, #20
 8100844:	46bd      	mov	sp, r7
 8100846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810084a:	4770      	bx	lr

0810084c <mqtt_connection_cb>:
  * @param  client: Pointer to the MQTT client instance.
  * @param  arg: User-defined argument, in this case, the client information structure.
  * @param  status: Connection status of the MQTT client.
  * @retval None
  */
static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status) {
 810084c:	b580      	push	{r7, lr}
 810084e:	b0ac      	sub	sp, #176	@ 0xb0
 8100850:	af04      	add	r7, sp, #16
 8100852:	60f8      	str	r0, [r7, #12]
 8100854:	60b9      	str	r1, [r7, #8]
 8100856:	4613      	mov	r3, r2
 8100858:	80fb      	strh	r3, [r7, #6]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 810085a:	68bb      	ldr	r3, [r7, #8]
 810085c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    LWIP_UNUSED_ARG(client);

//    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" connection cb: status %d\n", client_info->client_id, (int)status));

    if (status == MQTT_CONNECT_ACCEPTED) {
 8100860:	88fb      	ldrh	r3, [r7, #6]
 8100862:	2b00      	cmp	r3, #0
 8100864:	d12d      	bne.n	81008c2 <mqtt_connection_cb+0x76>
        // Subscribe to topics upon successful connection
        mqtt_subscribe_to_topics(client, client_info, slot);
 8100866:	4b20      	ldr	r3, [pc, #128]	@ (81008e8 <mqtt_connection_cb+0x9c>)
 8100868:	681b      	ldr	r3, [r3, #0]
 810086a:	461a      	mov	r2, r3
 810086c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8100870:	68f8      	ldr	r0, [r7, #12]
 8100872:	f000 fc5f 	bl	8101134 <mqtt_subscribe_to_topics>

        // Publish a message upon connection
        const char *connect_message = "Online";
 8100876:	4b1d      	ldr	r3, [pc, #116]	@ (81008ec <mqtt_connection_cb+0xa0>)
 8100878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        char topic[128];
        snprintf(topic, sizeof(topic), "CMM/slot%d/status", slot); // Use the slot number in the status topic
 810087c:	4b1a      	ldr	r3, [pc, #104]	@ (81008e8 <mqtt_connection_cb+0x9c>)
 810087e:	681b      	ldr	r3, [r3, #0]
 8100880:	f107 0014 	add.w	r0, r7, #20
 8100884:	4a1a      	ldr	r2, [pc, #104]	@ (81008f0 <mqtt_connection_cb+0xa4>)
 8100886:	2180      	movs	r1, #128	@ 0x80
 8100888:	f021 faec 	bl	8121e64 <sniprintf>
        err_t err = mqtt_publish(client,
                           topic,                   // Topic
                           connect_message,         // Message
                           strlen(connect_message), // Message length
 810088c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8100890:	f7ff fd86 	bl	81003a0 <strlen>
 8100894:	4603      	mov	r3, r0
        err_t err = mqtt_publish(client,
 8100896:	b29a      	uxth	r2, r3
 8100898:	f107 0114 	add.w	r1, r7, #20
 810089c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 81008a0:	9303      	str	r3, [sp, #12]
 81008a2:	4b14      	ldr	r3, [pc, #80]	@ (81008f4 <mqtt_connection_cb+0xa8>)
 81008a4:	9302      	str	r3, [sp, #8]
 81008a6:	2301      	movs	r3, #1
 81008a8:	9301      	str	r3, [sp, #4]
 81008aa:	2301      	movs	r3, #1
 81008ac:	9300      	str	r3, [sp, #0]
 81008ae:	4613      	mov	r3, r2
 81008b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 81008b4:	68f8      	ldr	r0, [r7, #12]
 81008b6:	f017 fc35 	bl	8118124 <mqtt_publish>
 81008ba:	4603      	mov	r3, r0
 81008bc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        osDelay(100);            // Delay before attempting reconnection
        mqtt_client_free(client);
        osDelay(1000);            // Delay before attempting reconnection
        mqtt_example_init();      // Reinitialize the client
    }
}
 81008c0:	e00e      	b.n	81008e0 <mqtt_connection_cb+0x94>
        mqtt_disconnect(client);  // Clean up before reconnecting
 81008c2:	68f8      	ldr	r0, [r7, #12]
 81008c4:	f018 f8be 	bl	8118a44 <mqtt_disconnect>
        osDelay(100);            // Delay before attempting reconnection
 81008c8:	2064      	movs	r0, #100	@ 0x64
 81008ca:	f00f fbfc 	bl	81100c6 <osDelay>
        mqtt_client_free(client);
 81008ce:	68f8      	ldr	r0, [r7, #12]
 81008d0:	f017 fe1e 	bl	8118510 <mqtt_client_free>
        osDelay(1000);            // Delay before attempting reconnection
 81008d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81008d8:	f00f fbf5 	bl	81100c6 <osDelay>
        mqtt_example_init();      // Reinitialize the client
 81008dc:	f000 f80c 	bl	81008f8 <mqtt_example_init>
}
 81008e0:	bf00      	nop
 81008e2:	37a0      	adds	r7, #160	@ 0xa0
 81008e4:	46bd      	mov	sp, r7
 81008e6:	bd80      	pop	{r7, pc}
 81008e8:	24000654 	.word	0x24000654
 81008ec:	08124140 	.word	0x08124140
 81008f0:	08124148 	.word	0x08124148
 81008f4:	08100831 	.word	0x08100831

081008f8 <mqtt_example_init>:
/**
  * @brief  Initialization function for the MQTT client.
  *         Sets up the MQTT client instance and connects to the broker.
  * @retval None
  */
void mqtt_example_init(void) {
 81008f8:	b580      	push	{r7, lr}
 81008fa:	b082      	sub	sp, #8
 81008fc:	af02      	add	r7, sp, #8
    #if LWIP_TCP
	osDelay(20);
 81008fe:	2014      	movs	r0, #20
 8100900:	f00f fbe1 	bl	81100c6 <osDelay>
    mqtt_client = mqtt_client_new();
 8100904:	f017 fdf8 	bl	81184f8 <mqtt_client_new>
 8100908:	4603      	mov	r3, r0
 810090a:	4a1e      	ldr	r2, [pc, #120]	@ (8100984 <mqtt_example_init+0x8c>)
 810090c:	6013      	str	r3, [r2, #0]
	osDelay(20);
 810090e:	2014      	movs	r0, #20
 8100910:	f00f fbd9 	bl	81100c6 <osDelay>

    if (mqtt_client == NULL) {
 8100914:	4b1b      	ldr	r3, [pc, #108]	@ (8100984 <mqtt_example_init+0x8c>)
 8100916:	681b      	ldr	r3, [r3, #0]
 8100918:	2b00      	cmp	r3, #0
 810091a:	d030      	beq.n	810097e <mqtt_example_init+0x86>
//        LWIP_PLATFORM_DIAG(("Failed to create MQTT client\n"));
        return;
    }

    // Generate the unique client ID and Will topic based on slot number
    snprintf(mqtt_client_id, sizeof(mqtt_client_id), "CMM%d", slot);
 810091c:	4b1a      	ldr	r3, [pc, #104]	@ (8100988 <mqtt_example_init+0x90>)
 810091e:	681b      	ldr	r3, [r3, #0]
 8100920:	4a1a      	ldr	r2, [pc, #104]	@ (810098c <mqtt_example_init+0x94>)
 8100922:	2114      	movs	r1, #20
 8100924:	481a      	ldr	r0, [pc, #104]	@ (8100990 <mqtt_example_init+0x98>)
 8100926:	f021 fa9d 	bl	8121e64 <sniprintf>
    snprintf(mqtt_will_topic, sizeof(mqtt_will_topic), "CMM/slot%d/status", slot);
 810092a:	4b17      	ldr	r3, [pc, #92]	@ (8100988 <mqtt_example_init+0x90>)
 810092c:	681b      	ldr	r3, [r3, #0]
 810092e:	4a19      	ldr	r2, [pc, #100]	@ (8100994 <mqtt_example_init+0x9c>)
 8100930:	2132      	movs	r1, #50	@ 0x32
 8100932:	4819      	ldr	r0, [pc, #100]	@ (8100998 <mqtt_example_init+0xa0>)
 8100934:	f021 fa96 	bl	8121e64 <sniprintf>
	osDelay(200);
 8100938:	20c8      	movs	r0, #200	@ 0xc8
 810093a:	f00f fbc4 	bl	81100c6 <osDelay>
    mqtt_client_info.client_id = mqtt_client_id;  // Assign unique Client ID
 810093e:	4b17      	ldr	r3, [pc, #92]	@ (810099c <mqtt_example_init+0xa4>)
 8100940:	4a13      	ldr	r2, [pc, #76]	@ (8100990 <mqtt_example_init+0x98>)
 8100942:	601a      	str	r2, [r3, #0]
    mqtt_client_info.will_topic = mqtt_will_topic;  // Assign unique Will topic
 8100944:	4b15      	ldr	r3, [pc, #84]	@ (810099c <mqtt_example_init+0xa4>)
 8100946:	4a14      	ldr	r2, [pc, #80]	@ (8100998 <mqtt_example_init+0xa0>)
 8100948:	611a      	str	r2, [r3, #16]
	osDelay(200);
 810094a:	20c8      	movs	r0, #200	@ 0xc8
 810094c:	f00f fbbb 	bl	81100c6 <osDelay>
    mqtt_client_connect(mqtt_client,
 8100950:	4b0c      	ldr	r3, [pc, #48]	@ (8100984 <mqtt_example_init+0x8c>)
 8100952:	6818      	ldr	r0, [r3, #0]
 8100954:	4b11      	ldr	r3, [pc, #68]	@ (810099c <mqtt_example_init+0xa4>)
 8100956:	9301      	str	r3, [sp, #4]
 8100958:	4b10      	ldr	r3, [pc, #64]	@ (810099c <mqtt_example_init+0xa4>)
 810095a:	9300      	str	r3, [sp, #0]
 810095c:	4b10      	ldr	r3, [pc, #64]	@ (81009a0 <mqtt_example_init+0xa8>)
 810095e:	f240 725b 	movw	r2, #1883	@ 0x75b
 8100962:	4910      	ldr	r1, [pc, #64]	@ (81009a4 <mqtt_example_init+0xac>)
 8100964:	f017 fde0 	bl	8118528 <mqtt_client_connect>
                        &mqtt_ip, MQTT_PORT,
                        mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
                        &mqtt_client_info);

    mqtt_set_inpub_callback(mqtt_client,
 8100968:	4b06      	ldr	r3, [pc, #24]	@ (8100984 <mqtt_example_init+0x8c>)
 810096a:	6818      	ldr	r0, [r3, #0]
 810096c:	4b0b      	ldr	r3, [pc, #44]	@ (810099c <mqtt_example_init+0xa4>)
 810096e:	4a0e      	ldr	r2, [pc, #56]	@ (81009a8 <mqtt_example_init+0xb0>)
 8100970:	490e      	ldr	r1, [pc, #56]	@ (81009ac <mqtt_example_init+0xb4>)
 8100972:	f017 fd97 	bl	81184a4 <mqtt_set_inpub_callback>
                            mqtt_incoming_publish_cb,
                            mqtt_incoming_data_cb,
                            LWIP_CONST_CAST(void*, &mqtt_client_info));
	osDelay(100);
 8100976:	2064      	movs	r0, #100	@ 0x64
 8100978:	f00f fba5 	bl	81100c6 <osDelay>
 810097c:	e000      	b.n	8100980 <mqtt_example_init+0x88>
        return;
 810097e:	bf00      	nop
    #endif /* LWIP_TCP */
}
 8100980:	46bd      	mov	sp, r7
 8100982:	bd80      	pop	{r7, pc}
 8100984:	24000238 	.word	0x24000238
 8100988:	24000654 	.word	0x24000654
 810098c:	0812415c 	.word	0x0812415c
 8100990:	24000370 	.word	0x24000370
 8100994:	08124148 	.word	0x08124148
 8100998:	2400033c 	.word	0x2400033c
 810099c:	2400000c 	.word	0x2400000c
 81009a0:	0810084d 	.word	0x0810084d
 81009a4:	24000008 	.word	0x24000008
 81009a8:	081007cd 	.word	0x081007cd
 81009ac:	08100801 	.word	0x08100801

081009b0 <publish_ethernet_link_status>:
  * @param  client_info: Pointer to the client-specific information.
  * @param  slot: Slot number for the topic.
  * @param  is_up: 1 if the link is up, 0 if the link is down.
  * @retval None
  */
void publish_ethernet_link_status(mqtt_client_t *client, const struct mqtt_connect_client_info_t* client_info, int slot, int is_up) {
 81009b0:	b580      	push	{r7, lr}
 81009b2:	b0aa      	sub	sp, #168	@ 0xa8
 81009b4:	af04      	add	r7, sp, #16
 81009b6:	60f8      	str	r0, [r7, #12]
 81009b8:	60b9      	str	r1, [r7, #8]
 81009ba:	607a      	str	r2, [r7, #4]
 81009bc:	603b      	str	r3, [r7, #0]
    char topic[128];
    const char *status_message = is_up ? "up" : "down";
 81009be:	683b      	ldr	r3, [r7, #0]
 81009c0:	2b00      	cmp	r3, #0
 81009c2:	d001      	beq.n	81009c8 <publish_ethernet_link_status+0x18>
 81009c4:	4b20      	ldr	r3, [pc, #128]	@ (8100a48 <publish_ethernet_link_status+0x98>)
 81009c6:	e000      	b.n	81009ca <publish_ethernet_link_status+0x1a>
 81009c8:	4b20      	ldr	r3, [pc, #128]	@ (8100a4c <publish_ethernet_link_status+0x9c>)
 81009ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    // Build the topic string dynamically
    snprintf(topic, sizeof(topic), "CMM/slot%d/status/ethernet/link", slot);
 81009ce:	f107 0010 	add.w	r0, r7, #16
 81009d2:	687b      	ldr	r3, [r7, #4]
 81009d4:	4a1e      	ldr	r2, [pc, #120]	@ (8100a50 <publish_ethernet_link_status+0xa0>)
 81009d6:	2180      	movs	r1, #128	@ 0x80
 81009d8:	f021 fa44 	bl	8121e64 <sniprintf>

    // Publish the status message
    LOCK_TCPIP_CORE();
 81009dc:	f00f f9d2 	bl	810fd84 <sys_lock_tcpip_core>
    err_t err = mqtt_publish(client, topic, status_message, strlen(status_message), 1, 0, mqtt_request_cb, LWIP_CONST_CAST(void*, client_info));
 81009e0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 81009e4:	f7ff fcdc 	bl	81003a0 <strlen>
 81009e8:	4603      	mov	r3, r0
 81009ea:	b29a      	uxth	r2, r3
 81009ec:	f107 0110 	add.w	r1, r7, #16
 81009f0:	68bb      	ldr	r3, [r7, #8]
 81009f2:	9303      	str	r3, [sp, #12]
 81009f4:	4b17      	ldr	r3, [pc, #92]	@ (8100a54 <publish_ethernet_link_status+0xa4>)
 81009f6:	9302      	str	r3, [sp, #8]
 81009f8:	2300      	movs	r3, #0
 81009fa:	9301      	str	r3, [sp, #4]
 81009fc:	2301      	movs	r3, #1
 81009fe:	9300      	str	r3, [sp, #0]
 8100a00:	4613      	mov	r3, r2
 8100a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8100a06:	68f8      	ldr	r0, [r7, #12]
 8100a08:	f017 fb8c 	bl	8118124 <mqtt_publish>
 8100a0c:	4603      	mov	r3, r0
 8100a0e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    if (err != ERR_OK) {
 8100a12:	f997 3093 	ldrsb.w	r3, [r7, #147]	@ 0x93
 8100a16:	2b00      	cmp	r3, #0
 8100a18:	d008      	beq.n	8100a2c <publish_ethernet_link_status+0x7c>
        LWIP_PLATFORM_DIAG(("Failed to publish Ethernet link status to %s, error %d\n", topic, err));
 8100a1a:	f997 2093 	ldrsb.w	r2, [r7, #147]	@ 0x93
 8100a1e:	f107 0310 	add.w	r3, r7, #16
 8100a22:	4619      	mov	r1, r3
 8100a24:	480c      	ldr	r0, [pc, #48]	@ (8100a58 <publish_ethernet_link_status+0xa8>)
 8100a26:	f021 f9ad 	bl	8121d84 <iprintf>
 8100a2a:	e007      	b.n	8100a3c <publish_ethernet_link_status+0x8c>
    } else {
        LWIP_PLATFORM_DIAG(("Published Ethernet link status (%s) to %s\n", status_message, topic));
 8100a2c:	f107 0310 	add.w	r3, r7, #16
 8100a30:	461a      	mov	r2, r3
 8100a32:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8100a36:	4809      	ldr	r0, [pc, #36]	@ (8100a5c <publish_ethernet_link_status+0xac>)
 8100a38:	f021 f9a4 	bl	8121d84 <iprintf>
    }
    UNLOCK_TCPIP_CORE();
 8100a3c:	f00f f9b2 	bl	810fda4 <sys_unlock_tcpip_core>

}
 8100a40:	bf00      	nop
 8100a42:	3798      	adds	r7, #152	@ 0x98
 8100a44:	46bd      	mov	sp, r7
 8100a46:	bd80      	pop	{r7, pc}
 8100a48:	08124164 	.word	0x08124164
 8100a4c:	08124168 	.word	0x08124168
 8100a50:	08124170 	.word	0x08124170
 8100a54:	08100831 	.word	0x08100831
 8100a58:	08124190 	.word	0x08124190
 8100a5c:	081241c8 	.word	0x081241c8

08100a60 <handle_trigger_state>:
  * @brief  Handle the trigger state message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_trigger_state(const char *message, size_t len) {
 8100a60:	b580      	push	{r7, lr}
 8100a62:	b082      	sub	sp, #8
 8100a64:	af00      	add	r7, sp, #0
 8100a66:	6078      	str	r0, [r7, #4]
 8100a68:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling trigger state: %.*s\n", (int)len, message));
 8100a6a:	683b      	ldr	r3, [r7, #0]
 8100a6c:	687a      	ldr	r2, [r7, #4]
 8100a6e:	4619      	mov	r1, r3
 8100a70:	4803      	ldr	r0, [pc, #12]	@ (8100a80 <handle_trigger_state+0x20>)
 8100a72:	f021 f987 	bl	8121d84 <iprintf>
    // Add logic here
}
 8100a76:	bf00      	nop
 8100a78:	3708      	adds	r7, #8
 8100a7a:	46bd      	mov	sp, r7
 8100a7c:	bd80      	pop	{r7, pc}
 8100a7e:	bf00      	nop
 8100a80:	081241f4 	.word	0x081241f4

08100a84 <handle_serial_protocol>:
  * @brief  Handle the serial protocol message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_protocol(const char *message, size_t len) {
 8100a84:	b580      	push	{r7, lr}
 8100a86:	b082      	sub	sp, #8
 8100a88:	af00      	add	r7, sp, #0
 8100a8a:	6078      	str	r0, [r7, #4]
 8100a8c:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial protocol: %.*s\n", (int)len, message));
 8100a8e:	683b      	ldr	r3, [r7, #0]
 8100a90:	687a      	ldr	r2, [r7, #4]
 8100a92:	4619      	mov	r1, r3
 8100a94:	4815      	ldr	r0, [pc, #84]	@ (8100aec <handle_serial_protocol+0x68>)
 8100a96:	f021 f975 	bl	8121d84 <iprintf>

    // Compare message with supported protocols
    if (strncmp(message, "RS232", len) == 0) {
 8100a9a:	683a      	ldr	r2, [r7, #0]
 8100a9c:	4914      	ldr	r1, [pc, #80]	@ (8100af0 <handle_serial_protocol+0x6c>)
 8100a9e:	6878      	ldr	r0, [r7, #4]
 8100aa0:	f021 fb1e 	bl	81220e0 <strncmp>
 8100aa4:	4603      	mov	r3, r0
 8100aa6:	2b00      	cmp	r3, #0
 8100aa8:	d106      	bne.n	8100ab8 <handle_serial_protocol+0x34>
        Switch_RS_Mode(RS232_MODE);
 8100aaa:	2000      	movs	r0, #0
 8100aac:	f001 f9a2 	bl	8101df4 <Switch_RS_Mode>
        LWIP_PLATFORM_DIAG(("Switched to RS232 mode\n"));
 8100ab0:	4810      	ldr	r0, [pc, #64]	@ (8100af4 <handle_serial_protocol+0x70>)
 8100ab2:	f021 f9cf 	bl	8121e54 <puts>
        Switch_RS_Mode(RS485_MODE);
        LWIP_PLATFORM_DIAG(("Switched to RS485 mode\n"));
    } else {
        LWIP_PLATFORM_DIAG(("Unknown serial protocol: %.*s\n", (int)len, message));
    }
}
 8100ab6:	e014      	b.n	8100ae2 <handle_serial_protocol+0x5e>
    } else if (strncmp(message, "RS485", len) == 0) {
 8100ab8:	683a      	ldr	r2, [r7, #0]
 8100aba:	490f      	ldr	r1, [pc, #60]	@ (8100af8 <handle_serial_protocol+0x74>)
 8100abc:	6878      	ldr	r0, [r7, #4]
 8100abe:	f021 fb0f 	bl	81220e0 <strncmp>
 8100ac2:	4603      	mov	r3, r0
 8100ac4:	2b00      	cmp	r3, #0
 8100ac6:	d106      	bne.n	8100ad6 <handle_serial_protocol+0x52>
        Switch_RS_Mode(RS485_MODE);
 8100ac8:	2001      	movs	r0, #1
 8100aca:	f001 f993 	bl	8101df4 <Switch_RS_Mode>
        LWIP_PLATFORM_DIAG(("Switched to RS485 mode\n"));
 8100ace:	480b      	ldr	r0, [pc, #44]	@ (8100afc <handle_serial_protocol+0x78>)
 8100ad0:	f021 f9c0 	bl	8121e54 <puts>
}
 8100ad4:	e005      	b.n	8100ae2 <handle_serial_protocol+0x5e>
        LWIP_PLATFORM_DIAG(("Unknown serial protocol: %.*s\n", (int)len, message));
 8100ad6:	683b      	ldr	r3, [r7, #0]
 8100ad8:	687a      	ldr	r2, [r7, #4]
 8100ada:	4619      	mov	r1, r3
 8100adc:	4808      	ldr	r0, [pc, #32]	@ (8100b00 <handle_serial_protocol+0x7c>)
 8100ade:	f021 f951 	bl	8121d84 <iprintf>
}
 8100ae2:	bf00      	nop
 8100ae4:	3708      	adds	r7, #8
 8100ae6:	46bd      	mov	sp, r7
 8100ae8:	bd80      	pop	{r7, pc}
 8100aea:	bf00      	nop
 8100aec:	08124214 	.word	0x08124214
 8100af0:	08124234 	.word	0x08124234
 8100af4:	0812423c 	.word	0x0812423c
 8100af8:	08124254 	.word	0x08124254
 8100afc:	0812425c 	.word	0x0812425c
 8100b00:	08124274 	.word	0x08124274

08100b04 <handle_serial_baudrate>:
  * @brief  Handle the serial baudrate message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_baudrate(const char *message, size_t len) {
 8100b04:	b580      	push	{r7, lr}
 8100b06:	b088      	sub	sp, #32
 8100b08:	af00      	add	r7, sp, #0
 8100b0a:	6078      	str	r0, [r7, #4]
 8100b0c:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial baudrate: %.*s\n", (int)len, message));
 8100b0e:	683b      	ldr	r3, [r7, #0]
 8100b10:	687a      	ldr	r2, [r7, #4]
 8100b12:	4619      	mov	r1, r3
 8100b14:	4827      	ldr	r0, [pc, #156]	@ (8100bb4 <handle_serial_baudrate+0xb0>)
 8100b16:	f021 f935 	bl	8121d84 <iprintf>

    // Create a temporary buffer to store the message and ensure null-termination
    char baudrate_str[16];  // Adjust the size as necessary for your use case
    if (len < sizeof(baudrate_str)) {
 8100b1a:	683b      	ldr	r3, [r7, #0]
 8100b1c:	2b0f      	cmp	r3, #15
 8100b1e:	d816      	bhi.n	8100b4e <handle_serial_baudrate+0x4a>
        memcpy(baudrate_str, message, len);
 8100b20:	f107 030c 	add.w	r3, r7, #12
 8100b24:	683a      	ldr	r2, [r7, #0]
 8100b26:	6879      	ldr	r1, [r7, #4]
 8100b28:	4618      	mov	r0, r3
 8100b2a:	f021 fbcc 	bl	81222c6 <memcpy>
        baudrate_str[len] = '\0';  // Null-terminate the string
 8100b2e:	f107 020c 	add.w	r2, r7, #12
 8100b32:	683b      	ldr	r3, [r7, #0]
 8100b34:	4413      	add	r3, r2
 8100b36:	2200      	movs	r2, #0
 8100b38:	701a      	strb	r2, [r3, #0]
        LWIP_PLATFORM_DIAG(("Baudrate message too long\n"));
        return;
    }

    // Convert message to an integer (baudrate)
    int new_baudrate = atoi(baudrate_str);
 8100b3a:	f107 030c 	add.w	r3, r7, #12
 8100b3e:	4618      	mov	r0, r3
 8100b40:	f020 fb62 	bl	8121208 <atoi>
 8100b44:	61f8      	str	r0, [r7, #28]

    if (new_baudrate > 0) {
 8100b46:	69fb      	ldr	r3, [r7, #28]
 8100b48:	2b00      	cmp	r3, #0
 8100b4a:	dd29      	ble.n	8100ba0 <handle_serial_baudrate+0x9c>
 8100b4c:	e003      	b.n	8100b56 <handle_serial_baudrate+0x52>
        LWIP_PLATFORM_DIAG(("Baudrate message too long\n"));
 8100b4e:	481a      	ldr	r0, [pc, #104]	@ (8100bb8 <handle_serial_baudrate+0xb4>)
 8100b50:	f021 f980 	bl	8121e54 <puts>
 8100b54:	e02a      	b.n	8100bac <handle_serial_baudrate+0xa8>
        // Update the baud rate dynamically for USART2 (RS232)
        huart2.Init.BaudRate = new_baudrate;
 8100b56:	69fb      	ldr	r3, [r7, #28]
 8100b58:	4a18      	ldr	r2, [pc, #96]	@ (8100bbc <handle_serial_baudrate+0xb8>)
 8100b5a:	6053      	str	r3, [r2, #4]
        if (HAL_UART_Init(&huart2) != HAL_OK) {
 8100b5c:	4817      	ldr	r0, [pc, #92]	@ (8100bbc <handle_serial_baudrate+0xb8>)
 8100b5e:	f00c fb5d 	bl	810d21c <HAL_UART_Init>
 8100b62:	4603      	mov	r3, r0
 8100b64:	2b00      	cmp	r3, #0
 8100b66:	d004      	beq.n	8100b72 <handle_serial_baudrate+0x6e>
            LWIP_PLATFORM_DIAG(("Failed to set baudrate for USART2 (RS232): %d\n", new_baudrate));
 8100b68:	69f9      	ldr	r1, [r7, #28]
 8100b6a:	4815      	ldr	r0, [pc, #84]	@ (8100bc0 <handle_serial_baudrate+0xbc>)
 8100b6c:	f021 f90a 	bl	8121d84 <iprintf>
 8100b70:	e003      	b.n	8100b7a <handle_serial_baudrate+0x76>
        } else {
            LWIP_PLATFORM_DIAG(("Baudrate for USART2 (RS232) set to %d\n", new_baudrate));
 8100b72:	69f9      	ldr	r1, [r7, #28]
 8100b74:	4813      	ldr	r0, [pc, #76]	@ (8100bc4 <handle_serial_baudrate+0xc0>)
 8100b76:	f021 f905 	bl	8121d84 <iprintf>
        }

        // Update the baud rate dynamically for USART3 (RS485)
        huart3.Init.BaudRate = new_baudrate;
 8100b7a:	69fb      	ldr	r3, [r7, #28]
 8100b7c:	4a12      	ldr	r2, [pc, #72]	@ (8100bc8 <handle_serial_baudrate+0xc4>)
 8100b7e:	6053      	str	r3, [r2, #4]
        if (HAL_UART_Init(&huart3) != HAL_OK) {
 8100b80:	4811      	ldr	r0, [pc, #68]	@ (8100bc8 <handle_serial_baudrate+0xc4>)
 8100b82:	f00c fb4b 	bl	810d21c <HAL_UART_Init>
 8100b86:	4603      	mov	r3, r0
 8100b88:	2b00      	cmp	r3, #0
 8100b8a:	d004      	beq.n	8100b96 <handle_serial_baudrate+0x92>
            LWIP_PLATFORM_DIAG(("Failed to set baudrate for USART3 (RS485): %d\n", new_baudrate));
 8100b8c:	69f9      	ldr	r1, [r7, #28]
 8100b8e:	480f      	ldr	r0, [pc, #60]	@ (8100bcc <handle_serial_baudrate+0xc8>)
 8100b90:	f021 f8f8 	bl	8121d84 <iprintf>
 8100b94:	e00a      	b.n	8100bac <handle_serial_baudrate+0xa8>
        } else {
            LWIP_PLATFORM_DIAG(("Baudrate for USART3 (RS485) set to %d\n", new_baudrate));
 8100b96:	69f9      	ldr	r1, [r7, #28]
 8100b98:	480d      	ldr	r0, [pc, #52]	@ (8100bd0 <handle_serial_baudrate+0xcc>)
 8100b9a:	f021 f8f3 	bl	8121d84 <iprintf>
 8100b9e:	e005      	b.n	8100bac <handle_serial_baudrate+0xa8>

        // Adjust the buffer and UDP packet size based on the new baud rate
//        update_buffer_and_udp_size(new_baudrate);

    } else {
        LWIP_PLATFORM_DIAG(("Invalid baudrate: %.*s\n", (int)len, message));
 8100ba0:	683b      	ldr	r3, [r7, #0]
 8100ba2:	687a      	ldr	r2, [r7, #4]
 8100ba4:	4619      	mov	r1, r3
 8100ba6:	480b      	ldr	r0, [pc, #44]	@ (8100bd4 <handle_serial_baudrate+0xd0>)
 8100ba8:	f021 f8ec 	bl	8121d84 <iprintf>
    }
}
 8100bac:	3720      	adds	r7, #32
 8100bae:	46bd      	mov	sp, r7
 8100bb0:	bd80      	pop	{r7, pc}
 8100bb2:	bf00      	nop
 8100bb4:	08124294 	.word	0x08124294
 8100bb8:	081242b4 	.word	0x081242b4
 8100bbc:	24000434 	.word	0x24000434
 8100bc0:	081242d0 	.word	0x081242d0
 8100bc4:	08124300 	.word	0x08124300
 8100bc8:	240004c8 	.word	0x240004c8
 8100bcc:	08124328 	.word	0x08124328
 8100bd0:	08124358 	.word	0x08124358
 8100bd4:	08124380 	.word	0x08124380

08100bd8 <handle_serial_flowcontrol>:
  * @brief  Handle the serial flow control message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_flowcontrol(const char *message, size_t len) {
 8100bd8:	b580      	push	{r7, lr}
 8100bda:	b082      	sub	sp, #8
 8100bdc:	af00      	add	r7, sp, #0
 8100bde:	6078      	str	r0, [r7, #4]
 8100be0:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial flow control: %.*s\n", (int)len, message));
 8100be2:	683b      	ldr	r3, [r7, #0]
 8100be4:	687a      	ldr	r2, [r7, #4]
 8100be6:	4619      	mov	r1, r3
 8100be8:	4803      	ldr	r0, [pc, #12]	@ (8100bf8 <handle_serial_flowcontrol+0x20>)
 8100bea:	f021 f8cb 	bl	8121d84 <iprintf>
    // Add logic here
}
 8100bee:	bf00      	nop
 8100bf0:	3708      	adds	r7, #8
 8100bf2:	46bd      	mov	sp, r7
 8100bf4:	bd80      	pop	{r7, pc}
 8100bf6:	bf00      	nop
 8100bf8:	08124398 	.word	0x08124398

08100bfc <handle_serial_databits>:
  * @brief  Handle the serial data bits message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_databits(const char *message, size_t len) {
 8100bfc:	b580      	push	{r7, lr}
 8100bfe:	b082      	sub	sp, #8
 8100c00:	af00      	add	r7, sp, #0
 8100c02:	6078      	str	r0, [r7, #4]
 8100c04:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial data bits: %.*s\n", (int)len, message));
 8100c06:	683b      	ldr	r3, [r7, #0]
 8100c08:	687a      	ldr	r2, [r7, #4]
 8100c0a:	4619      	mov	r1, r3
 8100c0c:	481f      	ldr	r0, [pc, #124]	@ (8100c8c <handle_serial_databits+0x90>)
 8100c0e:	f021 f8b9 	bl	8121d84 <iprintf>

    if (strncmp(message, "7", len) == 0) {
 8100c12:	683a      	ldr	r2, [r7, #0]
 8100c14:	491e      	ldr	r1, [pc, #120]	@ (8100c90 <handle_serial_databits+0x94>)
 8100c16:	6878      	ldr	r0, [r7, #4]
 8100c18:	f021 fa62 	bl	81220e0 <strncmp>
 8100c1c:	4603      	mov	r3, r0
 8100c1e:	2b00      	cmp	r3, #0
 8100c20:	d104      	bne.n	8100c2c <handle_serial_databits+0x30>
        huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8100c22:	4b1c      	ldr	r3, [pc, #112]	@ (8100c94 <handle_serial_databits+0x98>)
 8100c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100c28:	609a      	str	r2, [r3, #8]
 8100c2a:	e01f      	b.n	8100c6c <handle_serial_databits+0x70>
    } else if (strncmp(message, "8", len) == 0) {
 8100c2c:	683a      	ldr	r2, [r7, #0]
 8100c2e:	491a      	ldr	r1, [pc, #104]	@ (8100c98 <handle_serial_databits+0x9c>)
 8100c30:	6878      	ldr	r0, [r7, #4]
 8100c32:	f021 fa55 	bl	81220e0 <strncmp>
 8100c36:	4603      	mov	r3, r0
 8100c38:	2b00      	cmp	r3, #0
 8100c3a:	d103      	bne.n	8100c44 <handle_serial_databits+0x48>
        huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8100c3c:	4b15      	ldr	r3, [pc, #84]	@ (8100c94 <handle_serial_databits+0x98>)
 8100c3e:	2200      	movs	r2, #0
 8100c40:	609a      	str	r2, [r3, #8]
 8100c42:	e013      	b.n	8100c6c <handle_serial_databits+0x70>
    } else if (strncmp(message, "9", len) == 0) {
 8100c44:	683a      	ldr	r2, [r7, #0]
 8100c46:	4915      	ldr	r1, [pc, #84]	@ (8100c9c <handle_serial_databits+0xa0>)
 8100c48:	6878      	ldr	r0, [r7, #4]
 8100c4a:	f021 fa49 	bl	81220e0 <strncmp>
 8100c4e:	4603      	mov	r3, r0
 8100c50:	2b00      	cmp	r3, #0
 8100c52:	d104      	bne.n	8100c5e <handle_serial_databits+0x62>
        huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8100c54:	4b0f      	ldr	r3, [pc, #60]	@ (8100c94 <handle_serial_databits+0x98>)
 8100c56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100c5a:	609a      	str	r2, [r3, #8]
 8100c5c:	e006      	b.n	8100c6c <handle_serial_databits+0x70>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown data bits: %.*s\n", (int)len, message));
 8100c5e:	683b      	ldr	r3, [r7, #0]
 8100c60:	687a      	ldr	r2, [r7, #4]
 8100c62:	4619      	mov	r1, r3
 8100c64:	480e      	ldr	r0, [pc, #56]	@ (8100ca0 <handle_serial_databits+0xa4>)
 8100c66:	f021 f88d 	bl	8121d84 <iprintf>
        return;
 8100c6a:	e00c      	b.n	8100c86 <handle_serial_databits+0x8a>
    }

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8100c6c:	4809      	ldr	r0, [pc, #36]	@ (8100c94 <handle_serial_databits+0x98>)
 8100c6e:	f00c fad5 	bl	810d21c <HAL_UART_Init>
 8100c72:	4603      	mov	r3, r0
 8100c74:	2b00      	cmp	r3, #0
 8100c76:	d003      	beq.n	8100c80 <handle_serial_databits+0x84>
        LWIP_PLATFORM_DIAG(("Failed to set data bits\n"));
 8100c78:	480a      	ldr	r0, [pc, #40]	@ (8100ca4 <handle_serial_databits+0xa8>)
 8100c7a:	f021 f8eb 	bl	8121e54 <puts>
 8100c7e:	e002      	b.n	8100c86 <handle_serial_databits+0x8a>
    } else {
        LWIP_PLATFORM_DIAG(("Data bits set successfully\n"));
 8100c80:	4809      	ldr	r0, [pc, #36]	@ (8100ca8 <handle_serial_databits+0xac>)
 8100c82:	f021 f8e7 	bl	8121e54 <puts>
    }
}
 8100c86:	3708      	adds	r7, #8
 8100c88:	46bd      	mov	sp, r7
 8100c8a:	bd80      	pop	{r7, pc}
 8100c8c:	081243bc 	.word	0x081243bc
 8100c90:	081243e0 	.word	0x081243e0
 8100c94:	24000434 	.word	0x24000434
 8100c98:	081243e4 	.word	0x081243e4
 8100c9c:	081243e8 	.word	0x081243e8
 8100ca0:	081243ec 	.word	0x081243ec
 8100ca4:	08124408 	.word	0x08124408
 8100ca8:	08124420 	.word	0x08124420

08100cac <handle_serial_parity>:
  * @brief  Handle the serial parity message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_parity(const char *message, size_t len) {
 8100cac:	b580      	push	{r7, lr}
 8100cae:	b082      	sub	sp, #8
 8100cb0:	af00      	add	r7, sp, #0
 8100cb2:	6078      	str	r0, [r7, #4]
 8100cb4:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial parity: %.*s\n", (int)len, message));
 8100cb6:	683b      	ldr	r3, [r7, #0]
 8100cb8:	687a      	ldr	r2, [r7, #4]
 8100cba:	4619      	mov	r1, r3
 8100cbc:	481f      	ldr	r0, [pc, #124]	@ (8100d3c <handle_serial_parity+0x90>)
 8100cbe:	f021 f861 	bl	8121d84 <iprintf>

    if (strncmp(message, "NONE", len) == 0) {
 8100cc2:	683a      	ldr	r2, [r7, #0]
 8100cc4:	491e      	ldr	r1, [pc, #120]	@ (8100d40 <handle_serial_parity+0x94>)
 8100cc6:	6878      	ldr	r0, [r7, #4]
 8100cc8:	f021 fa0a 	bl	81220e0 <strncmp>
 8100ccc:	4603      	mov	r3, r0
 8100cce:	2b00      	cmp	r3, #0
 8100cd0:	d103      	bne.n	8100cda <handle_serial_parity+0x2e>
        huart2.Init.Parity = UART_PARITY_NONE;
 8100cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8100d44 <handle_serial_parity+0x98>)
 8100cd4:	2200      	movs	r2, #0
 8100cd6:	611a      	str	r2, [r3, #16]
 8100cd8:	e020      	b.n	8100d1c <handle_serial_parity+0x70>
    } else if (strncmp(message, "EVEN", len) == 0) {
 8100cda:	683a      	ldr	r2, [r7, #0]
 8100cdc:	491a      	ldr	r1, [pc, #104]	@ (8100d48 <handle_serial_parity+0x9c>)
 8100cde:	6878      	ldr	r0, [r7, #4]
 8100ce0:	f021 f9fe 	bl	81220e0 <strncmp>
 8100ce4:	4603      	mov	r3, r0
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	d104      	bne.n	8100cf4 <handle_serial_parity+0x48>
        huart2.Init.Parity = UART_PARITY_EVEN;
 8100cea:	4b16      	ldr	r3, [pc, #88]	@ (8100d44 <handle_serial_parity+0x98>)
 8100cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8100cf0:	611a      	str	r2, [r3, #16]
 8100cf2:	e013      	b.n	8100d1c <handle_serial_parity+0x70>
    } else if (strncmp(message, "ODD", len) == 0) {
 8100cf4:	683a      	ldr	r2, [r7, #0]
 8100cf6:	4915      	ldr	r1, [pc, #84]	@ (8100d4c <handle_serial_parity+0xa0>)
 8100cf8:	6878      	ldr	r0, [r7, #4]
 8100cfa:	f021 f9f1 	bl	81220e0 <strncmp>
 8100cfe:	4603      	mov	r3, r0
 8100d00:	2b00      	cmp	r3, #0
 8100d02:	d104      	bne.n	8100d0e <handle_serial_parity+0x62>
        huart2.Init.Parity = UART_PARITY_ODD;
 8100d04:	4b0f      	ldr	r3, [pc, #60]	@ (8100d44 <handle_serial_parity+0x98>)
 8100d06:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8100d0a:	611a      	str	r2, [r3, #16]
 8100d0c:	e006      	b.n	8100d1c <handle_serial_parity+0x70>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown parity: %.*s\n", (int)len, message));
 8100d0e:	683b      	ldr	r3, [r7, #0]
 8100d10:	687a      	ldr	r2, [r7, #4]
 8100d12:	4619      	mov	r1, r3
 8100d14:	480e      	ldr	r0, [pc, #56]	@ (8100d50 <handle_serial_parity+0xa4>)
 8100d16:	f021 f835 	bl	8121d84 <iprintf>
        return;
 8100d1a:	e00c      	b.n	8100d36 <handle_serial_parity+0x8a>
    }

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8100d1c:	4809      	ldr	r0, [pc, #36]	@ (8100d44 <handle_serial_parity+0x98>)
 8100d1e:	f00c fa7d 	bl	810d21c <HAL_UART_Init>
 8100d22:	4603      	mov	r3, r0
 8100d24:	2b00      	cmp	r3, #0
 8100d26:	d003      	beq.n	8100d30 <handle_serial_parity+0x84>
        LWIP_PLATFORM_DIAG(("Failed to set parity\n"));
 8100d28:	480a      	ldr	r0, [pc, #40]	@ (8100d54 <handle_serial_parity+0xa8>)
 8100d2a:	f021 f893 	bl	8121e54 <puts>
 8100d2e:	e002      	b.n	8100d36 <handle_serial_parity+0x8a>
    } else {
        LWIP_PLATFORM_DIAG(("Parity set successfully\n"));
 8100d30:	4809      	ldr	r0, [pc, #36]	@ (8100d58 <handle_serial_parity+0xac>)
 8100d32:	f021 f88f 	bl	8121e54 <puts>
    }
}
 8100d36:	3708      	adds	r7, #8
 8100d38:	46bd      	mov	sp, r7
 8100d3a:	bd80      	pop	{r7, pc}
 8100d3c:	0812443c 	.word	0x0812443c
 8100d40:	0812445c 	.word	0x0812445c
 8100d44:	24000434 	.word	0x24000434
 8100d48:	08124464 	.word	0x08124464
 8100d4c:	0812446c 	.word	0x0812446c
 8100d50:	08124470 	.word	0x08124470
 8100d54:	08124488 	.word	0x08124488
 8100d58:	081244a0 	.word	0x081244a0

08100d5c <handle_serial_stopbits>:
  * @brief  Handle the serial stop bits message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_stopbits(const char *message, size_t len) {
 8100d5c:	b580      	push	{r7, lr}
 8100d5e:	b082      	sub	sp, #8
 8100d60:	af00      	add	r7, sp, #0
 8100d62:	6078      	str	r0, [r7, #4]
 8100d64:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial stop bits: %.*s\n", (int)len, message));
 8100d66:	683b      	ldr	r3, [r7, #0]
 8100d68:	687a      	ldr	r2, [r7, #4]
 8100d6a:	4619      	mov	r1, r3
 8100d6c:	4826      	ldr	r0, [pc, #152]	@ (8100e08 <handle_serial_stopbits+0xac>)
 8100d6e:	f021 f809 	bl	8121d84 <iprintf>

    if (strncmp(message, "0.5", len) == 0) {
 8100d72:	683a      	ldr	r2, [r7, #0]
 8100d74:	4925      	ldr	r1, [pc, #148]	@ (8100e0c <handle_serial_stopbits+0xb0>)
 8100d76:	6878      	ldr	r0, [r7, #4]
 8100d78:	f021 f9b2 	bl	81220e0 <strncmp>
 8100d7c:	4603      	mov	r3, r0
 8100d7e:	2b00      	cmp	r3, #0
 8100d80:	d104      	bne.n	8100d8c <handle_serial_stopbits+0x30>
        huart2.Init.StopBits = UART_STOPBITS_0_5;
 8100d82:	4b23      	ldr	r3, [pc, #140]	@ (8100e10 <handle_serial_stopbits+0xb4>)
 8100d84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100d88:	60da      	str	r2, [r3, #12]
 8100d8a:	e02c      	b.n	8100de6 <handle_serial_stopbits+0x8a>
    } else if (strncmp(message, "1", len) == 0) {
 8100d8c:	683a      	ldr	r2, [r7, #0]
 8100d8e:	4921      	ldr	r1, [pc, #132]	@ (8100e14 <handle_serial_stopbits+0xb8>)
 8100d90:	6878      	ldr	r0, [r7, #4]
 8100d92:	f021 f9a5 	bl	81220e0 <strncmp>
 8100d96:	4603      	mov	r3, r0
 8100d98:	2b00      	cmp	r3, #0
 8100d9a:	d103      	bne.n	8100da4 <handle_serial_stopbits+0x48>
        huart2.Init.StopBits = UART_STOPBITS_1;
 8100d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8100e10 <handle_serial_stopbits+0xb4>)
 8100d9e:	2200      	movs	r2, #0
 8100da0:	60da      	str	r2, [r3, #12]
 8100da2:	e020      	b.n	8100de6 <handle_serial_stopbits+0x8a>
    } else if (strncmp(message, "1.5", len) == 0) {
 8100da4:	683a      	ldr	r2, [r7, #0]
 8100da6:	491c      	ldr	r1, [pc, #112]	@ (8100e18 <handle_serial_stopbits+0xbc>)
 8100da8:	6878      	ldr	r0, [r7, #4]
 8100daa:	f021 f999 	bl	81220e0 <strncmp>
 8100dae:	4603      	mov	r3, r0
 8100db0:	2b00      	cmp	r3, #0
 8100db2:	d104      	bne.n	8100dbe <handle_serial_stopbits+0x62>
        huart2.Init.StopBits = UART_STOPBITS_1_5;
 8100db4:	4b16      	ldr	r3, [pc, #88]	@ (8100e10 <handle_serial_stopbits+0xb4>)
 8100db6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8100dba:	60da      	str	r2, [r3, #12]
 8100dbc:	e013      	b.n	8100de6 <handle_serial_stopbits+0x8a>
    } else if (strncmp(message, "2", len) == 0) {
 8100dbe:	683a      	ldr	r2, [r7, #0]
 8100dc0:	4916      	ldr	r1, [pc, #88]	@ (8100e1c <handle_serial_stopbits+0xc0>)
 8100dc2:	6878      	ldr	r0, [r7, #4]
 8100dc4:	f021 f98c 	bl	81220e0 <strncmp>
 8100dc8:	4603      	mov	r3, r0
 8100dca:	2b00      	cmp	r3, #0
 8100dcc:	d104      	bne.n	8100dd8 <handle_serial_stopbits+0x7c>
        huart2.Init.StopBits = UART_STOPBITS_2;
 8100dce:	4b10      	ldr	r3, [pc, #64]	@ (8100e10 <handle_serial_stopbits+0xb4>)
 8100dd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100dd4:	60da      	str	r2, [r3, #12]
 8100dd6:	e006      	b.n	8100de6 <handle_serial_stopbits+0x8a>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown stop bits: %.*s\n", (int)len, message));
 8100dd8:	683b      	ldr	r3, [r7, #0]
 8100dda:	687a      	ldr	r2, [r7, #4]
 8100ddc:	4619      	mov	r1, r3
 8100dde:	4810      	ldr	r0, [pc, #64]	@ (8100e20 <handle_serial_stopbits+0xc4>)
 8100de0:	f020 ffd0 	bl	8121d84 <iprintf>
        return;
 8100de4:	e00c      	b.n	8100e00 <handle_serial_stopbits+0xa4>
    }

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8100de6:	480a      	ldr	r0, [pc, #40]	@ (8100e10 <handle_serial_stopbits+0xb4>)
 8100de8:	f00c fa18 	bl	810d21c <HAL_UART_Init>
 8100dec:	4603      	mov	r3, r0
 8100dee:	2b00      	cmp	r3, #0
 8100df0:	d003      	beq.n	8100dfa <handle_serial_stopbits+0x9e>
        LWIP_PLATFORM_DIAG(("Failed to set stop bits\n"));
 8100df2:	480c      	ldr	r0, [pc, #48]	@ (8100e24 <handle_serial_stopbits+0xc8>)
 8100df4:	f021 f82e 	bl	8121e54 <puts>
 8100df8:	e002      	b.n	8100e00 <handle_serial_stopbits+0xa4>
    } else {
        LWIP_PLATFORM_DIAG(("Stop bits set successfully\n"));
 8100dfa:	480b      	ldr	r0, [pc, #44]	@ (8100e28 <handle_serial_stopbits+0xcc>)
 8100dfc:	f021 f82a 	bl	8121e54 <puts>
    }
}
 8100e00:	3708      	adds	r7, #8
 8100e02:	46bd      	mov	sp, r7
 8100e04:	bd80      	pop	{r7, pc}
 8100e06:	bf00      	nop
 8100e08:	081244b8 	.word	0x081244b8
 8100e0c:	081244dc 	.word	0x081244dc
 8100e10:	24000434 	.word	0x24000434
 8100e14:	081244e0 	.word	0x081244e0
 8100e18:	081244e4 	.word	0x081244e4
 8100e1c:	081244e8 	.word	0x081244e8
 8100e20:	081244ec 	.word	0x081244ec
 8100e24:	08124508 	.word	0x08124508
 8100e28:	08124520 	.word	0x08124520

08100e2c <handle_ethernet_speed>:
  * @brief  Handle the Ethernet speed message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_ethernet_speed(const char *message, size_t len) {
 8100e2c:	b580      	push	{r7, lr}
 8100e2e:	b082      	sub	sp, #8
 8100e30:	af00      	add	r7, sp, #0
 8100e32:	6078      	str	r0, [r7, #4]
 8100e34:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling Ethernet speed: %.*s\n", (int)len, message));
 8100e36:	683b      	ldr	r3, [r7, #0]
 8100e38:	687a      	ldr	r2, [r7, #4]
 8100e3a:	4619      	mov	r1, r3
 8100e3c:	4803      	ldr	r0, [pc, #12]	@ (8100e4c <handle_ethernet_speed+0x20>)
 8100e3e:	f020 ffa1 	bl	8121d84 <iprintf>
    // Add logic here
}
 8100e42:	bf00      	nop
 8100e44:	3708      	adds	r7, #8
 8100e46:	46bd      	mov	sp, r7
 8100e48:	bd80      	pop	{r7, pc}
 8100e4a:	bf00      	nop
 8100e4c:	0812453c 	.word	0x0812453c

08100e50 <handle_enable_iap>:
  *         jumping to the IAP code located at address 0x08000000.
  * @param  message: The received MQTT message indicating the IAP action.
  * @param  len: Length of the received message.
  * @retval None
  */
void handle_enable_iap(const char *message, size_t len) {
 8100e50:	b580      	push	{r7, lr}
 8100e52:	b084      	sub	sp, #16
 8100e54:	af00      	add	r7, sp, #0
 8100e56:	6078      	str	r0, [r7, #4]
 8100e58:	6039      	str	r1, [r7, #0]
    // Print the received message for debugging
    LWIP_PLATFORM_DIAG(("Handling enable IAP: %.*s\n", (int)len, message));
 8100e5a:	683b      	ldr	r3, [r7, #0]
 8100e5c:	687a      	ldr	r2, [r7, #4]
 8100e5e:	4619      	mov	r1, r3
 8100e60:	4813      	ldr	r0, [pc, #76]	@ (8100eb0 <handle_enable_iap+0x60>)
 8100e62:	f020 ff8f 	bl	8121d84 <iprintf>

    if (strncmp(message, "ENABLE", len) == 0) {
 8100e66:	683a      	ldr	r2, [r7, #0]
 8100e68:	4912      	ldr	r1, [pc, #72]	@ (8100eb4 <handle_enable_iap+0x64>)
 8100e6a:	6878      	ldr	r0, [r7, #4]
 8100e6c:	f021 f938 	bl	81220e0 <strncmp>
 8100e70:	4603      	mov	r3, r0
 8100e72:	2b00      	cmp	r3, #0
 8100e74:	d112      	bne.n	8100e9c <handle_enable_iap+0x4c>
        // Write the IAP flag to SRAM4
        volatile uint32_t *iap_flag_address = (uint32_t *)IAP_FLAG_ADDRESS;
 8100e76:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8100e7a:	60fb      	str	r3, [r7, #12]
        *iap_flag_address = IAP_FLAG_VALUE;
 8100e7c:	68fb      	ldr	r3, [r7, #12]
 8100e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8100eb8 <handle_enable_iap+0x68>)
 8100e80:	601a      	str	r2, [r3, #0]
        LWIP_PLATFORM_DIAG(("IAP flag set at address 0x%08X with value 0x%08X\n", (unsigned int)IAP_FLAG_ADDRESS, IAP_FLAG_VALUE));
 8100e82:	4a0d      	ldr	r2, [pc, #52]	@ (8100eb8 <handle_enable_iap+0x68>)
 8100e84:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8100e88:	480c      	ldr	r0, [pc, #48]	@ (8100ebc <handle_enable_iap+0x6c>)
 8100e8a:	f020 ff7b 	bl	8121d84 <iprintf>

        // Add a small delay to ensure the flag is written
        HAL_Delay(500);
 8100e8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100e92:	f001 fd57 	bl	8102944 <HAL_Delay>

        // Reset the system to jump to IAP
        HAL_NVIC_SystemReset();
 8100e96:	f003 f8d2 	bl	810403e <HAL_NVIC_SystemReset>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown IAP command: %.*s\n", (int)len, message));
    }
}
 8100e9a:	e005      	b.n	8100ea8 <handle_enable_iap+0x58>
        LWIP_PLATFORM_DIAG(("Unknown IAP command: %.*s\n", (int)len, message));
 8100e9c:	683b      	ldr	r3, [r7, #0]
 8100e9e:	687a      	ldr	r2, [r7, #4]
 8100ea0:	4619      	mov	r1, r3
 8100ea2:	4807      	ldr	r0, [pc, #28]	@ (8100ec0 <handle_enable_iap+0x70>)
 8100ea4:	f020 ff6e 	bl	8121d84 <iprintf>
}
 8100ea8:	bf00      	nop
 8100eaa:	3710      	adds	r7, #16
 8100eac:	46bd      	mov	sp, r7
 8100eae:	bd80      	pop	{r7, pc}
 8100eb0:	0812455c 	.word	0x0812455c
 8100eb4:	08124578 	.word	0x08124578
 8100eb8:	deadbeef 	.word	0xdeadbeef
 8100ebc:	08124580 	.word	0x08124580
 8100ec0:	081245b4 	.word	0x081245b4

08100ec4 <ethernet_get_link_status>:

int ethernet_get_link_status() {
 8100ec4:	b480      	push	{r7}
 8100ec6:	af00      	add	r7, sp, #0
    return (netif_is_link_up(netif_default) ? 1 : 0);
 8100ec8:	4b05      	ldr	r3, [pc, #20]	@ (8100ee0 <ethernet_get_link_status+0x1c>)
 8100eca:	681b      	ldr	r3, [r3, #0]
 8100ecc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8100ed0:	089b      	lsrs	r3, r3, #2
 8100ed2:	f003 0301 	and.w	r3, r3, #1
}
 8100ed6:	4618      	mov	r0, r3
 8100ed8:	46bd      	mov	sp, r7
 8100eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ede:	4770      	bx	lr
 8100ee0:	24012694 	.word	0x24012694

08100ee4 <handle_status_ethernet_link>:
  * @param  client: Pointer to the MQTT client.
  * @param  client_info: Pointer to the client-specific information.
  * @param  slot: Slot number for the topic.
  * @retval None
  */
void handle_status_ethernet_link(mqtt_client_t *client, const struct mqtt_connect_client_info_t* client_info, int slot) {
 8100ee4:	b580      	push	{r7, lr}
 8100ee6:	b086      	sub	sp, #24
 8100ee8:	af00      	add	r7, sp, #0
 8100eea:	60f8      	str	r0, [r7, #12]
 8100eec:	60b9      	str	r1, [r7, #8]
 8100eee:	607a      	str	r2, [r7, #4]
    // Get the current link status (replace with actual function for your hardware)
    int is_up = ethernet_get_link_status(); // Returns 1 for link up, 0 for link down
 8100ef0:	f7ff ffe8 	bl	8100ec4 <ethernet_get_link_status>
 8100ef4:	6178      	str	r0, [r7, #20]
    // Publish the Ethernet link status
    publish_ethernet_link_status(client, client_info, slot, is_up);
 8100ef6:	697b      	ldr	r3, [r7, #20]
 8100ef8:	687a      	ldr	r2, [r7, #4]
 8100efa:	68b9      	ldr	r1, [r7, #8]
 8100efc:	68f8      	ldr	r0, [r7, #12]
 8100efe:	f7ff fd57 	bl	81009b0 <publish_ethernet_link_status>
}
 8100f02:	bf00      	nop
 8100f04:	3718      	adds	r7, #24
 8100f06:	46bd      	mov	sp, r7
 8100f08:	bd80      	pop	{r7, pc}
	...

08100f0c <handle_status_ethernet_activity>:
  * @brief  Handle the Ethernet activity status message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_status_ethernet_activity(const char *message, size_t len) {
 8100f0c:	b580      	push	{r7, lr}
 8100f0e:	b082      	sub	sp, #8
 8100f10:	af00      	add	r7, sp, #0
 8100f12:	6078      	str	r0, [r7, #4]
 8100f14:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling Ethernet activity status: %.*s\n", (int)len, message));
 8100f16:	683b      	ldr	r3, [r7, #0]
 8100f18:	687a      	ldr	r2, [r7, #4]
 8100f1a:	4619      	mov	r1, r3
 8100f1c:	4803      	ldr	r0, [pc, #12]	@ (8100f2c <handle_status_ethernet_activity+0x20>)
 8100f1e:	f020 ff31 	bl	8121d84 <iprintf>
    // Add logic here
}
 8100f22:	bf00      	nop
 8100f24:	3708      	adds	r7, #8
 8100f26:	46bd      	mov	sp, r7
 8100f28:	bd80      	pop	{r7, pc}
 8100f2a:	bf00      	nop
 8100f2c:	081245d0 	.word	0x081245d0

08100f30 <handle_incoming_topic_data>:
void handle_status_slot_number(const char *message, size_t len) {
    LWIP_PLATFORM_DIAG(("Handling slot number status: %.*s\n", (int)len, message));
    // Add logic here
}

void handle_incoming_topic_data(const char *topic, const char *data, size_t len) {
 8100f30:	b580      	push	{r7, lr}
 8100f32:	b0a4      	sub	sp, #144	@ 0x90
 8100f34:	af00      	add	r7, sp, #0
 8100f36:	60f8      	str	r0, [r7, #12]
 8100f38:	60b9      	str	r1, [r7, #8]
 8100f3a:	607a      	str	r2, [r7, #4]
    char topic_buffer[128];  // Buffer to hold the dynamically generated topic strings

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/trigger/state", slot);
 8100f3c:	4b71      	ldr	r3, [pc, #452]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8100f3e:	681b      	ldr	r3, [r3, #0]
 8100f40:	f107 0010 	add.w	r0, r7, #16
 8100f44:	4a70      	ldr	r2, [pc, #448]	@ (8101108 <handle_incoming_topic_data+0x1d8>)
 8100f46:	2180      	movs	r1, #128	@ 0x80
 8100f48:	f020 ff8c 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8100f4c:	f107 0310 	add.w	r3, r7, #16
 8100f50:	4619      	mov	r1, r3
 8100f52:	68f8      	ldr	r0, [r7, #12]
 8100f54:	f7ff f9c4 	bl	81002e0 <strcmp>
 8100f58:	4603      	mov	r3, r0
 8100f5a:	2b00      	cmp	r3, #0
 8100f5c:	d104      	bne.n	8100f68 <handle_incoming_topic_data+0x38>
        handle_trigger_state(data, len);
 8100f5e:	6879      	ldr	r1, [r7, #4]
 8100f60:	68b8      	ldr	r0, [r7, #8]
 8100f62:	f7ff fd7d 	bl	8100a60 <handle_trigger_state>
        return;
 8100f66:	e0c9      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/serial/protocol", slot);
 8100f68:	4b66      	ldr	r3, [pc, #408]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8100f6a:	681b      	ldr	r3, [r3, #0]
 8100f6c:	f107 0010 	add.w	r0, r7, #16
 8100f70:	4a66      	ldr	r2, [pc, #408]	@ (810110c <handle_incoming_topic_data+0x1dc>)
 8100f72:	2180      	movs	r1, #128	@ 0x80
 8100f74:	f020 ff76 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8100f78:	f107 0310 	add.w	r3, r7, #16
 8100f7c:	4619      	mov	r1, r3
 8100f7e:	68f8      	ldr	r0, [r7, #12]
 8100f80:	f7ff f9ae 	bl	81002e0 <strcmp>
 8100f84:	4603      	mov	r3, r0
 8100f86:	2b00      	cmp	r3, #0
 8100f88:	d104      	bne.n	8100f94 <handle_incoming_topic_data+0x64>
        handle_serial_protocol(data, len);
 8100f8a:	6879      	ldr	r1, [r7, #4]
 8100f8c:	68b8      	ldr	r0, [r7, #8]
 8100f8e:	f7ff fd79 	bl	8100a84 <handle_serial_protocol>
        return;
 8100f92:	e0b3      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/serial/baudrate", slot);
 8100f94:	4b5b      	ldr	r3, [pc, #364]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8100f96:	681b      	ldr	r3, [r3, #0]
 8100f98:	f107 0010 	add.w	r0, r7, #16
 8100f9c:	4a5c      	ldr	r2, [pc, #368]	@ (8101110 <handle_incoming_topic_data+0x1e0>)
 8100f9e:	2180      	movs	r1, #128	@ 0x80
 8100fa0:	f020 ff60 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8100fa4:	f107 0310 	add.w	r3, r7, #16
 8100fa8:	4619      	mov	r1, r3
 8100faa:	68f8      	ldr	r0, [r7, #12]
 8100fac:	f7ff f998 	bl	81002e0 <strcmp>
 8100fb0:	4603      	mov	r3, r0
 8100fb2:	2b00      	cmp	r3, #0
 8100fb4:	d104      	bne.n	8100fc0 <handle_incoming_topic_data+0x90>
        handle_serial_baudrate(data, len);
 8100fb6:	6879      	ldr	r1, [r7, #4]
 8100fb8:	68b8      	ldr	r0, [r7, #8]
 8100fba:	f7ff fda3 	bl	8100b04 <handle_serial_baudrate>
        return;
 8100fbe:	e09d      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/serial/flowcontrol", slot);
 8100fc0:	4b50      	ldr	r3, [pc, #320]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	f107 0010 	add.w	r0, r7, #16
 8100fc8:	4a52      	ldr	r2, [pc, #328]	@ (8101114 <handle_incoming_topic_data+0x1e4>)
 8100fca:	2180      	movs	r1, #128	@ 0x80
 8100fcc:	f020 ff4a 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8100fd0:	f107 0310 	add.w	r3, r7, #16
 8100fd4:	4619      	mov	r1, r3
 8100fd6:	68f8      	ldr	r0, [r7, #12]
 8100fd8:	f7ff f982 	bl	81002e0 <strcmp>
 8100fdc:	4603      	mov	r3, r0
 8100fde:	2b00      	cmp	r3, #0
 8100fe0:	d104      	bne.n	8100fec <handle_incoming_topic_data+0xbc>
        handle_serial_flowcontrol(data, len);
 8100fe2:	6879      	ldr	r1, [r7, #4]
 8100fe4:	68b8      	ldr	r0, [r7, #8]
 8100fe6:	f7ff fdf7 	bl	8100bd8 <handle_serial_flowcontrol>
        return;
 8100fea:	e087      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/serial/databits", slot);
 8100fec:	4b45      	ldr	r3, [pc, #276]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8100fee:	681b      	ldr	r3, [r3, #0]
 8100ff0:	f107 0010 	add.w	r0, r7, #16
 8100ff4:	4a48      	ldr	r2, [pc, #288]	@ (8101118 <handle_incoming_topic_data+0x1e8>)
 8100ff6:	2180      	movs	r1, #128	@ 0x80
 8100ff8:	f020 ff34 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8100ffc:	f107 0310 	add.w	r3, r7, #16
 8101000:	4619      	mov	r1, r3
 8101002:	68f8      	ldr	r0, [r7, #12]
 8101004:	f7ff f96c 	bl	81002e0 <strcmp>
 8101008:	4603      	mov	r3, r0
 810100a:	2b00      	cmp	r3, #0
 810100c:	d104      	bne.n	8101018 <handle_incoming_topic_data+0xe8>
        handle_serial_databits(data, len);
 810100e:	6879      	ldr	r1, [r7, #4]
 8101010:	68b8      	ldr	r0, [r7, #8]
 8101012:	f7ff fdf3 	bl	8100bfc <handle_serial_databits>
        return;
 8101016:	e071      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/serial/parity", slot);
 8101018:	4b3a      	ldr	r3, [pc, #232]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 810101a:	681b      	ldr	r3, [r3, #0]
 810101c:	f107 0010 	add.w	r0, r7, #16
 8101020:	4a3e      	ldr	r2, [pc, #248]	@ (810111c <handle_incoming_topic_data+0x1ec>)
 8101022:	2180      	movs	r1, #128	@ 0x80
 8101024:	f020 ff1e 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8101028:	f107 0310 	add.w	r3, r7, #16
 810102c:	4619      	mov	r1, r3
 810102e:	68f8      	ldr	r0, [r7, #12]
 8101030:	f7ff f956 	bl	81002e0 <strcmp>
 8101034:	4603      	mov	r3, r0
 8101036:	2b00      	cmp	r3, #0
 8101038:	d104      	bne.n	8101044 <handle_incoming_topic_data+0x114>
        handle_serial_parity(data, len);
 810103a:	6879      	ldr	r1, [r7, #4]
 810103c:	68b8      	ldr	r0, [r7, #8]
 810103e:	f7ff fe35 	bl	8100cac <handle_serial_parity>
        return;
 8101042:	e05b      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/serial/stopbits", slot);
 8101044:	4b2f      	ldr	r3, [pc, #188]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8101046:	681b      	ldr	r3, [r3, #0]
 8101048:	f107 0010 	add.w	r0, r7, #16
 810104c:	4a34      	ldr	r2, [pc, #208]	@ (8101120 <handle_incoming_topic_data+0x1f0>)
 810104e:	2180      	movs	r1, #128	@ 0x80
 8101050:	f020 ff08 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8101054:	f107 0310 	add.w	r3, r7, #16
 8101058:	4619      	mov	r1, r3
 810105a:	68f8      	ldr	r0, [r7, #12]
 810105c:	f7ff f940 	bl	81002e0 <strcmp>
 8101060:	4603      	mov	r3, r0
 8101062:	2b00      	cmp	r3, #0
 8101064:	d104      	bne.n	8101070 <handle_incoming_topic_data+0x140>
        handle_serial_stopbits(data, len);
 8101066:	6879      	ldr	r1, [r7, #4]
 8101068:	68b8      	ldr	r0, [r7, #8]
 810106a:	f7ff fe77 	bl	8100d5c <handle_serial_stopbits>
        return;
 810106e:	e045      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/ethernet/speed", slot);
 8101070:	4b24      	ldr	r3, [pc, #144]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 8101072:	681b      	ldr	r3, [r3, #0]
 8101074:	f107 0010 	add.w	r0, r7, #16
 8101078:	4a2a      	ldr	r2, [pc, #168]	@ (8101124 <handle_incoming_topic_data+0x1f4>)
 810107a:	2180      	movs	r1, #128	@ 0x80
 810107c:	f020 fef2 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8101080:	f107 0310 	add.w	r3, r7, #16
 8101084:	4619      	mov	r1, r3
 8101086:	68f8      	ldr	r0, [r7, #12]
 8101088:	f7ff f92a 	bl	81002e0 <strcmp>
 810108c:	4603      	mov	r3, r0
 810108e:	2b00      	cmp	r3, #0
 8101090:	d104      	bne.n	810109c <handle_incoming_topic_data+0x16c>
        handle_ethernet_speed(data, len);
 8101092:	6879      	ldr	r1, [r7, #4]
 8101094:	68b8      	ldr	r0, [r7, #8]
 8101096:	f7ff fec9 	bl	8100e2c <handle_ethernet_speed>
        return;
 810109a:	e02f      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/control/iap", slot);
 810109c:	4b19      	ldr	r3, [pc, #100]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	f107 0010 	add.w	r0, r7, #16
 81010a4:	4a20      	ldr	r2, [pc, #128]	@ (8101128 <handle_incoming_topic_data+0x1f8>)
 81010a6:	2180      	movs	r1, #128	@ 0x80
 81010a8:	f020 fedc 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 81010ac:	f107 0310 	add.w	r3, r7, #16
 81010b0:	4619      	mov	r1, r3
 81010b2:	68f8      	ldr	r0, [r7, #12]
 81010b4:	f7ff f914 	bl	81002e0 <strcmp>
 81010b8:	4603      	mov	r3, r0
 81010ba:	2b00      	cmp	r3, #0
 81010bc:	d104      	bne.n	81010c8 <handle_incoming_topic_data+0x198>
        handle_enable_iap(data, len);
 81010be:	6879      	ldr	r1, [r7, #4]
 81010c0:	68b8      	ldr	r0, [r7, #8]
 81010c2:	f7ff fec5 	bl	8100e50 <handle_enable_iap>
        return;
 81010c6:	e019      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMM/slot%d/status/ethernet/activity", slot);
 81010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8101104 <handle_incoming_topic_data+0x1d4>)
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	f107 0010 	add.w	r0, r7, #16
 81010d0:	4a16      	ldr	r2, [pc, #88]	@ (810112c <handle_incoming_topic_data+0x1fc>)
 81010d2:	2180      	movs	r1, #128	@ 0x80
 81010d4:	f020 fec6 	bl	8121e64 <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 81010d8:	f107 0310 	add.w	r3, r7, #16
 81010dc:	4619      	mov	r1, r3
 81010de:	68f8      	ldr	r0, [r7, #12]
 81010e0:	f7ff f8fe 	bl	81002e0 <strcmp>
 81010e4:	4603      	mov	r3, r0
 81010e6:	2b00      	cmp	r3, #0
 81010e8:	d104      	bne.n	81010f4 <handle_incoming_topic_data+0x1c4>
        handle_status_ethernet_activity(data, len);
 81010ea:	6879      	ldr	r1, [r7, #4]
 81010ec:	68b8      	ldr	r0, [r7, #8]
 81010ee:	f7ff ff0d 	bl	8100f0c <handle_status_ethernet_activity>
        return;
 81010f2:	e003      	b.n	81010fc <handle_incoming_topic_data+0x1cc>
    }

    LWIP_PLATFORM_DIAG(("Unknown topic: %s\n", topic));
 81010f4:	68f9      	ldr	r1, [r7, #12]
 81010f6:	480e      	ldr	r0, [pc, #56]	@ (8101130 <handle_incoming_topic_data+0x200>)
 81010f8:	f020 fe44 	bl	8121d84 <iprintf>
}
 81010fc:	3790      	adds	r7, #144	@ 0x90
 81010fe:	46bd      	mov	sp, r7
 8101100:	bd80      	pop	{r7, pc}
 8101102:	bf00      	nop
 8101104:	24000654 	.word	0x24000654
 8101108:	08124620 	.word	0x08124620
 810110c:	08124644 	.word	0x08124644
 8101110:	08124668 	.word	0x08124668
 8101114:	0812468c 	.word	0x0812468c
 8101118:	081246b4 	.word	0x081246b4
 810111c:	081246d8 	.word	0x081246d8
 8101120:	081246fc 	.word	0x081246fc
 8101124:	08124720 	.word	0x08124720
 8101128:	08124744 	.word	0x08124744
 810112c:	0812475c 	.word	0x0812475c
 8101130:	08124780 	.word	0x08124780

08101134 <mqtt_subscribe_to_topics>:
  * @param  client: Pointer to the MQTT client.
  * @param  client_info: Pointer to the client-specific information.
  * @param  slot: Slot number for topic subscription.
  * @retval None
  */
void mqtt_subscribe_to_topics(mqtt_client_t *client, const struct mqtt_connect_client_info_t* client_info, int slot) {
 8101134:	b5b0      	push	{r4, r5, r7, lr}
 8101136:	b0b4      	sub	sp, #208	@ 0xd0
 8101138:	af02      	add	r7, sp, #8
 810113a:	60f8      	str	r0, [r7, #12]
 810113c:	60b9      	str	r1, [r7, #8]
 810113e:	607a      	str	r2, [r7, #4]
    err_t err;
    char topic[128];

    // List of all the topics to subscribe to
    const char* topics[] = {
 8101140:	4b26      	ldr	r3, [pc, #152]	@ (81011dc <mqtt_subscribe_to_topics+0xa8>)
 8101142:	f107 0414 	add.w	r4, r7, #20
 8101146:	461d      	mov	r5, r3
 8101148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        "status/ethernet/link",
        "status/ethernet/activity",
    };

    // Subscribe to each topic in the list with QoS 1
    for (size_t i = 0; i < sizeof(topics) / sizeof(topics[0]); i++) {
 8101158:	2300      	movs	r3, #0
 810115a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810115e:	e034      	b.n	81011ca <mqtt_subscribe_to_topics+0x96>
        snprintf(topic, sizeof(topic), "CMM/slot%d/%s", slot, topics[i]); // Build the topic string with slot
 8101160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8101164:	009b      	lsls	r3, r3, #2
 8101166:	33c8      	adds	r3, #200	@ 0xc8
 8101168:	443b      	add	r3, r7
 810116a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 810116e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8101172:	9300      	str	r3, [sp, #0]
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	4a1a      	ldr	r2, [pc, #104]	@ (81011e0 <mqtt_subscribe_to_topics+0xac>)
 8101178:	2180      	movs	r1, #128	@ 0x80
 810117a:	f020 fe73 	bl	8121e64 <sniprintf>
        err = mqtt_sub_unsub(client, topic, 1, mqtt_request_cb, LWIP_CONST_CAST(void*, client_info), 1);
 810117e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8101182:	2301      	movs	r3, #1
 8101184:	9301      	str	r3, [sp, #4]
 8101186:	68bb      	ldr	r3, [r7, #8]
 8101188:	9300      	str	r3, [sp, #0]
 810118a:	4b16      	ldr	r3, [pc, #88]	@ (81011e4 <mqtt_subscribe_to_topics+0xb0>)
 810118c:	2201      	movs	r2, #1
 810118e:	68f8      	ldr	r0, [r7, #12]
 8101190:	f017 f8a8 	bl	81182e4 <mqtt_sub_unsub>
 8101194:	4603      	mov	r3, r0
 8101196:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (err != ERR_OK) {
 810119a:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
 810119e:	2b00      	cmp	r3, #0
 81011a0:	d008      	beq.n	81011b4 <mqtt_subscribe_to_topics+0x80>
            LWIP_PLATFORM_DIAG(("Failed to subscribe to %s, error %d\n", topic, err));
 81011a2:	f997 20c3 	ldrsb.w	r2, [r7, #195]	@ 0xc3
 81011a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81011aa:	4619      	mov	r1, r3
 81011ac:	480e      	ldr	r0, [pc, #56]	@ (81011e8 <mqtt_subscribe_to_topics+0xb4>)
 81011ae:	f020 fde9 	bl	8121d84 <iprintf>
 81011b2:	e005      	b.n	81011c0 <mqtt_subscribe_to_topics+0x8c>
        } else {
            LWIP_PLATFORM_DIAG(("Successfully subscribed to %s\n", topic));
 81011b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81011b8:	4619      	mov	r1, r3
 81011ba:	480c      	ldr	r0, [pc, #48]	@ (81011ec <mqtt_subscribe_to_topics+0xb8>)
 81011bc:	f020 fde2 	bl	8121d84 <iprintf>
    for (size_t i = 0; i < sizeof(topics) / sizeof(topics[0]); i++) {
 81011c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 81011c4:	3301      	adds	r3, #1
 81011c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81011ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 81011ce:	2b0a      	cmp	r3, #10
 81011d0:	d9c6      	bls.n	8101160 <mqtt_subscribe_to_topics+0x2c>
        }
    }
}
 81011d2:	bf00      	nop
 81011d4:	bf00      	nop
 81011d6:	37c8      	adds	r7, #200	@ 0xc8
 81011d8:	46bd      	mov	sp, r7
 81011da:	bdb0      	pop	{r4, r5, r7, pc}
 81011dc:	081248f0 	.word	0x081248f0
 81011e0:	08124794 	.word	0x08124794
 81011e4:	08100831 	.word	0x08100831
 81011e8:	081247a4 	.word	0x081247a4
 81011ec:	081247cc 	.word	0x081247cc

081011f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 81011f0:	b480      	push	{r7}
 81011f2:	b083      	sub	sp, #12
 81011f4:	af00      	add	r7, sp, #0
 81011f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 81011f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 81011fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8101200:	f003 0301 	and.w	r3, r3, #1
 8101204:	2b00      	cmp	r3, #0
 8101206:	d013      	beq.n	8101230 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8101208:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 810120c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8101210:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8101214:	2b00      	cmp	r3, #0
 8101216:	d00b      	beq.n	8101230 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8101218:	e000      	b.n	810121c <ITM_SendChar+0x2c>
    {
      __NOP();
 810121a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 810121c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8101220:	681b      	ldr	r3, [r3, #0]
 8101222:	2b00      	cmp	r3, #0
 8101224:	d0f9      	beq.n	810121a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8101226:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 810122a:	687a      	ldr	r2, [r7, #4]
 810122c:	b2d2      	uxtb	r2, r2
 810122e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8101230:	687b      	ldr	r3, [r7, #4]
}
 8101232:	4618      	mov	r0, r3
 8101234:	370c      	adds	r7, #12
 8101236:	46bd      	mov	sp, r7
 8101238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810123c:	4770      	bx	lr

0810123e <_write>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern mqtt_client_t* mqtt_client;  // Declare the external MQTT client instance
int _write(int file, char *ptr, int len)
{
 810123e:	b580      	push	{r7, lr}
 8101240:	b086      	sub	sp, #24
 8101242:	af00      	add	r7, sp, #0
 8101244:	60f8      	str	r0, [r7, #12]
 8101246:	60b9      	str	r1, [r7, #8]
 8101248:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810124a:	2300      	movs	r3, #0
 810124c:	617b      	str	r3, [r7, #20]
 810124e:	e009      	b.n	8101264 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8101250:	68bb      	ldr	r3, [r7, #8]
 8101252:	1c5a      	adds	r2, r3, #1
 8101254:	60ba      	str	r2, [r7, #8]
 8101256:	781b      	ldrb	r3, [r3, #0]
 8101258:	4618      	mov	r0, r3
 810125a:	f7ff ffc9 	bl	81011f0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810125e:	697b      	ldr	r3, [r7, #20]
 8101260:	3301      	adds	r3, #1
 8101262:	617b      	str	r3, [r7, #20]
 8101264:	697a      	ldr	r2, [r7, #20]
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	429a      	cmp	r2, r3
 810126a:	dbf1      	blt.n	8101250 <_write+0x12>
  }
  return len;
 810126c:	687b      	ldr	r3, [r7, #4]
}
 810126e:	4618      	mov	r0, r3
 8101270:	3718      	adds	r7, #24
 8101272:	46bd      	mov	sp, r7
 8101274:	bd80      	pop	{r7, pc}
	...

08101278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101278:	b580      	push	{r7, lr}
 810127a:	b084      	sub	sp, #16
 810127c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 810127e:	f000 fceb 	bl	8101c58 <MPU_Config>

  /* Enable the CPU Cache */
  SCB->VTOR = 0x08100000;
 8101282:	4b49      	ldr	r3, [pc, #292]	@ (81013a8 <main+0x130>)
 8101284:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8101288:	609a      	str	r2, [r3, #8]
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 810128a:	4b47      	ldr	r3, [pc, #284]	@ (81013a8 <main+0x130>)
 810128c:	695b      	ldr	r3, [r3, #20]
 810128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101292:	2b00      	cmp	r3, #0
 8101294:	d11b      	bne.n	81012ce <main+0x56>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101296:	f3bf 8f4f 	dsb	sy
}
 810129a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810129c:	f3bf 8f6f 	isb	sy
}
 81012a0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 81012a2:	4b41      	ldr	r3, [pc, #260]	@ (81013a8 <main+0x130>)
 81012a4:	2200      	movs	r2, #0
 81012a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 81012aa:	f3bf 8f4f 	dsb	sy
}
 81012ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81012b0:	f3bf 8f6f 	isb	sy
}
 81012b4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 81012b6:	4b3c      	ldr	r3, [pc, #240]	@ (81013a8 <main+0x130>)
 81012b8:	695b      	ldr	r3, [r3, #20]
 81012ba:	4a3b      	ldr	r2, [pc, #236]	@ (81013a8 <main+0x130>)
 81012bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81012c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 81012c2:	f3bf 8f4f 	dsb	sy
}
 81012c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81012c8:	f3bf 8f6f 	isb	sy
}
 81012cc:	e000      	b.n	81012d0 <main+0x58>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 81012ce:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 81012d0:	4b35      	ldr	r3, [pc, #212]	@ (81013a8 <main+0x130>)
 81012d2:	695b      	ldr	r3, [r3, #20]
 81012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81012d8:	2b00      	cmp	r3, #0
 81012da:	d138      	bne.n	810134e <main+0xd6>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 81012dc:	4b32      	ldr	r3, [pc, #200]	@ (81013a8 <main+0x130>)
 81012de:	2200      	movs	r2, #0
 81012e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 81012e4:	f3bf 8f4f 	dsb	sy
}
 81012e8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 81012ea:	4b2f      	ldr	r3, [pc, #188]	@ (81013a8 <main+0x130>)
 81012ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81012f0:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 81012f2:	68fb      	ldr	r3, [r7, #12]
 81012f4:	0b5b      	lsrs	r3, r3, #13
 81012f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81012fa:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 81012fc:	68fb      	ldr	r3, [r7, #12]
 81012fe:	08db      	lsrs	r3, r3, #3
 8101300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8101304:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8101306:	68bb      	ldr	r3, [r7, #8]
 8101308:	015a      	lsls	r2, r3, #5
 810130a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 810130e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8101310:	687a      	ldr	r2, [r7, #4]
 8101312:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8101314:	4924      	ldr	r1, [pc, #144]	@ (81013a8 <main+0x130>)
 8101316:	4313      	orrs	r3, r2
 8101318:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	1e5a      	subs	r2, r3, #1
 8101320:	607a      	str	r2, [r7, #4]
 8101322:	2b00      	cmp	r3, #0
 8101324:	d1ef      	bne.n	8101306 <main+0x8e>
    } while(sets-- != 0U);
 8101326:	68bb      	ldr	r3, [r7, #8]
 8101328:	1e5a      	subs	r2, r3, #1
 810132a:	60ba      	str	r2, [r7, #8]
 810132c:	2b00      	cmp	r3, #0
 810132e:	d1e5      	bne.n	81012fc <main+0x84>
  __ASM volatile ("dsb 0xF":::"memory");
 8101330:	f3bf 8f4f 	dsb	sy
}
 8101334:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8101336:	4b1c      	ldr	r3, [pc, #112]	@ (81013a8 <main+0x130>)
 8101338:	695b      	ldr	r3, [r3, #20]
 810133a:	4a1b      	ldr	r2, [pc, #108]	@ (81013a8 <main+0x130>)
 810133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101340:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8101342:	f3bf 8f4f 	dsb	sy
}
 8101346:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101348:	f3bf 8f6f 	isb	sy
}
 810134c:	e000      	b.n	8101350 <main+0xd8>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 810134e:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101350:	f001 fa9c 	bl	810288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8101354:	f000 f838 	bl	81013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101358:	f000 fa74 	bl	8101844 <MX_GPIO_Init>
  MX_DMA_Init();
 810135c:	f000 fa4a 	bl	81017f4 <MX_DMA_Init>
  MX_TIM1_Init();
 8101360:	f000 f95c 	bl	810161c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8101364:	f000 f9ae 	bl	81016c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8101368:	f000 f9f8 	bl	810175c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 810136c:	f000 f8e6 	bl	810153c <MX_ADC3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8101370:	f000 f8d8 	bl	8101524 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("Initializing\n");
 8101374:	480d      	ldr	r0, [pc, #52]	@ (81013ac <main+0x134>)
 8101376:	f020 fd6d 	bl	8121e54 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 810137a:	f00e fda7 	bl	810fecc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810137e:	4a0c      	ldr	r2, [pc, #48]	@ (81013b0 <main+0x138>)
 8101380:	2100      	movs	r1, #0
 8101382:	480c      	ldr	r0, [pc, #48]	@ (81013b4 <main+0x13c>)
 8101384:	f00e fe01 	bl	810ff8a <osThreadNew>
 8101388:	4603      	mov	r3, r0
 810138a:	4a0b      	ldr	r2, [pc, #44]	@ (81013b8 <main+0x140>)
 810138c:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(StartBlinkTask, NULL, &blinkTask_attributes);
 810138e:	4a0b      	ldr	r2, [pc, #44]	@ (81013bc <main+0x144>)
 8101390:	2100      	movs	r1, #0
 8101392:	480b      	ldr	r0, [pc, #44]	@ (81013c0 <main+0x148>)
 8101394:	f00e fdf9 	bl	810ff8a <osThreadNew>
 8101398:	4603      	mov	r3, r0
 810139a:	4a0a      	ldr	r2, [pc, #40]	@ (81013c4 <main+0x14c>)
 810139c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 810139e:	f00e fdb9 	bl	810ff14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81013a2:	bf00      	nop
 81013a4:	e7fd      	b.n	81013a2 <main+0x12a>
 81013a6:	bf00      	nop
 81013a8:	e000ed00 	.word	0xe000ed00
 81013ac:	08124934 	.word	0x08124934
 81013b0:	081288cc 	.word	0x081288cc
 81013b4:	08101a71 	.word	0x08101a71
 81013b8:	2400064c 	.word	0x2400064c
 81013bc:	081288f0 	.word	0x081288f0
 81013c0:	08101c21 	.word	0x08101c21
 81013c4:	24000650 	.word	0x24000650

081013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 81013c8:	b580      	push	{r7, lr}
 81013ca:	b09e      	sub	sp, #120	@ 0x78
 81013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 81013ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013d2:	224c      	movs	r2, #76	@ 0x4c
 81013d4:	2100      	movs	r1, #0
 81013d6:	4618      	mov	r0, r3
 81013d8:	f020 fe7a 	bl	81220d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 81013dc:	f107 030c 	add.w	r3, r7, #12
 81013e0:	2220      	movs	r2, #32
 81013e2:	2100      	movs	r1, #0
 81013e4:	4618      	mov	r0, r3
 81013e6:	f020 fe73 	bl	81220d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 81013ea:	2002      	movs	r0, #2
 81013ec:	f007 fc6e 	bl	8108ccc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 81013f0:	2300      	movs	r3, #0
 81013f2:	60bb      	str	r3, [r7, #8]
 81013f4:	4b48      	ldr	r3, [pc, #288]	@ (8101518 <SystemClock_Config+0x150>)
 81013f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81013f8:	4a47      	ldr	r2, [pc, #284]	@ (8101518 <SystemClock_Config+0x150>)
 81013fa:	f023 0301 	bic.w	r3, r3, #1
 81013fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8101400:	4b45      	ldr	r3, [pc, #276]	@ (8101518 <SystemClock_Config+0x150>)
 8101402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101404:	f003 0301 	and.w	r3, r3, #1
 8101408:	60bb      	str	r3, [r7, #8]
 810140a:	4b44      	ldr	r3, [pc, #272]	@ (810151c <SystemClock_Config+0x154>)
 810140c:	699b      	ldr	r3, [r3, #24]
 810140e:	4a43      	ldr	r2, [pc, #268]	@ (810151c <SystemClock_Config+0x154>)
 8101410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8101414:	6193      	str	r3, [r2, #24]
 8101416:	4b41      	ldr	r3, [pc, #260]	@ (810151c <SystemClock_Config+0x154>)
 8101418:	699b      	ldr	r3, [r3, #24]
 810141a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 810141e:	60bb      	str	r3, [r7, #8]
 8101420:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8101422:	bf00      	nop
 8101424:	4b3d      	ldr	r3, [pc, #244]	@ (810151c <SystemClock_Config+0x154>)
 8101426:	699b      	ldr	r3, [r3, #24]
 8101428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810142c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101430:	d1f8      	bne.n	8101424 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101432:	4b3b      	ldr	r3, [pc, #236]	@ (8101520 <SystemClock_Config+0x158>)
 8101434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101438:	4a39      	ldr	r2, [pc, #228]	@ (8101520 <SystemClock_Config+0x158>)
 810143a:	f043 0302 	orr.w	r3, r3, #2
 810143e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101442:	4b37      	ldr	r3, [pc, #220]	@ (8101520 <SystemClock_Config+0x158>)
 8101444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101448:	f003 0302 	and.w	r3, r3, #2
 810144c:	607b      	str	r3, [r7, #4]
 810144e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8101450:	2300      	movs	r3, #0
 8101452:	603b      	str	r3, [r7, #0]
 8101454:	4b31      	ldr	r3, [pc, #196]	@ (810151c <SystemClock_Config+0x154>)
 8101456:	699b      	ldr	r3, [r3, #24]
 8101458:	4a30      	ldr	r2, [pc, #192]	@ (810151c <SystemClock_Config+0x154>)
 810145a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 810145e:	6193      	str	r3, [r2, #24]
 8101460:	4b2e      	ldr	r3, [pc, #184]	@ (810151c <SystemClock_Config+0x154>)
 8101462:	699b      	ldr	r3, [r3, #24]
 8101464:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8101468:	603b      	str	r3, [r7, #0]
 810146a:	4b2b      	ldr	r3, [pc, #172]	@ (8101518 <SystemClock_Config+0x150>)
 810146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810146e:	4a2a      	ldr	r2, [pc, #168]	@ (8101518 <SystemClock_Config+0x150>)
 8101470:	f043 0301 	orr.w	r3, r3, #1
 8101474:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8101476:	4b28      	ldr	r3, [pc, #160]	@ (8101518 <SystemClock_Config+0x150>)
 8101478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810147a:	f003 0301 	and.w	r3, r3, #1
 810147e:	603b      	str	r3, [r7, #0]
 8101480:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8101482:	bf00      	nop
 8101484:	4b25      	ldr	r3, [pc, #148]	@ (810151c <SystemClock_Config+0x154>)
 8101486:	699b      	ldr	r3, [r3, #24]
 8101488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810148c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101490:	d1f8      	bne.n	8101484 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8101492:	2301      	movs	r3, #1
 8101494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8101496:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 810149a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 810149c:	2302      	movs	r3, #2
 810149e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 81014a0:	2302      	movs	r3, #2
 81014a2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 81014a4:	2302      	movs	r3, #2
 81014a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 81014a8:	2340      	movs	r3, #64	@ 0x40
 81014aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 4;
 81014ac:	2304      	movs	r3, #4
 81014ae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 81014b0:	2302      	movs	r3, #2
 81014b2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 4;
 81014b4:	2304      	movs	r3, #4
 81014b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 81014b8:	230c      	movs	r3, #12
 81014ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 81014bc:	2300      	movs	r3, #0
 81014be:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 81014c0:	2300      	movs	r3, #0
 81014c2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 81014c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81014c8:	4618      	mov	r0, r3
 81014ca:	f007 fc59 	bl	8108d80 <HAL_RCC_OscConfig>
 81014ce:	4603      	mov	r3, r0
 81014d0:	2b00      	cmp	r3, #0
 81014d2:	d001      	beq.n	81014d8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 81014d4:	f000 fc24 	bl	8101d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 81014d8:	233f      	movs	r3, #63	@ 0x3f
 81014da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 81014dc:	2303      	movs	r3, #3
 81014de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 81014e0:	2300      	movs	r3, #0
 81014e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 81014e4:	2300      	movs	r3, #0
 81014e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 81014e8:	2340      	movs	r3, #64	@ 0x40
 81014ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 81014ec:	2340      	movs	r3, #64	@ 0x40
 81014ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 81014f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 81014f6:	2340      	movs	r3, #64	@ 0x40
 81014f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 81014fa:	f107 030c 	add.w	r3, r7, #12
 81014fe:	2102      	movs	r1, #2
 8101500:	4618      	mov	r0, r3
 8101502:	f008 f897 	bl	8109634 <HAL_RCC_ClockConfig>
 8101506:	4603      	mov	r3, r0
 8101508:	2b00      	cmp	r3, #0
 810150a:	d001      	beq.n	8101510 <SystemClock_Config+0x148>
  {
    Error_Handler();
 810150c:	f000 fc08 	bl	8101d20 <Error_Handler>
  }
}
 8101510:	bf00      	nop
 8101512:	3778      	adds	r7, #120	@ 0x78
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}
 8101518:	58000400 	.word	0x58000400
 810151c:	58024800 	.word	0x58024800
 8101520:	58024400 	.word	0x58024400

08101524 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8101528:	2200      	movs	r2, #0
 810152a:	2105      	movs	r1, #5
 810152c:	2006      	movs	r0, #6
 810152e:	f002 fd5e 	bl	8103fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8101532:	2006      	movs	r0, #6
 8101534:	f002 fd75 	bl	8104022 <HAL_NVIC_EnableIRQ>
}
 8101538:	bf00      	nop
 810153a:	bd80      	pop	{r7, pc}

0810153c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 810153c:	b580      	push	{r7, lr}
 810153e:	b088      	sub	sp, #32
 8101540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8101542:	1d3b      	adds	r3, r7, #4
 8101544:	2200      	movs	r2, #0
 8101546:	601a      	str	r2, [r3, #0]
 8101548:	605a      	str	r2, [r3, #4]
 810154a:	609a      	str	r2, [r3, #8]
 810154c:	60da      	str	r2, [r3, #12]
 810154e:	611a      	str	r2, [r3, #16]
 8101550:	615a      	str	r2, [r3, #20]
 8101552:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8101554:	4b2e      	ldr	r3, [pc, #184]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101556:	4a2f      	ldr	r2, [pc, #188]	@ (8101614 <MX_ADC3_Init+0xd8>)
 8101558:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810155a:	4b2d      	ldr	r3, [pc, #180]	@ (8101610 <MX_ADC3_Init+0xd4>)
 810155c:	2200      	movs	r2, #0
 810155e:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101560:	4b2b      	ldr	r3, [pc, #172]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101562:	2200      	movs	r2, #0
 8101564:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101566:	4b2a      	ldr	r3, [pc, #168]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101568:	2204      	movs	r2, #4
 810156a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810156c:	4b28      	ldr	r3, [pc, #160]	@ (8101610 <MX_ADC3_Init+0xd4>)
 810156e:	2200      	movs	r2, #0
 8101570:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8101572:	4b27      	ldr	r3, [pc, #156]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101574:	2200      	movs	r2, #0
 8101576:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8101578:	4b25      	ldr	r3, [pc, #148]	@ (8101610 <MX_ADC3_Init+0xd4>)
 810157a:	2201      	movs	r2, #1
 810157c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810157e:	4b24      	ldr	r3, [pc, #144]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101580:	2200      	movs	r2, #0
 8101582:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101584:	4b22      	ldr	r3, [pc, #136]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101586:	2200      	movs	r2, #0
 8101588:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810158a:	4b21      	ldr	r3, [pc, #132]	@ (8101610 <MX_ADC3_Init+0xd4>)
 810158c:	2200      	movs	r2, #0
 810158e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101590:	4b1f      	ldr	r3, [pc, #124]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101592:	2200      	movs	r2, #0
 8101594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101596:	4b1e      	ldr	r3, [pc, #120]	@ (8101610 <MX_ADC3_Init+0xd4>)
 8101598:	2200      	movs	r2, #0
 810159a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810159c:	4b1c      	ldr	r3, [pc, #112]	@ (8101610 <MX_ADC3_Init+0xd4>)
 810159e:	2200      	movs	r2, #0
 81015a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 81015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8101610 <MX_ADC3_Init+0xd4>)
 81015a4:	2200      	movs	r2, #0
 81015a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 81015aa:	4b19      	ldr	r3, [pc, #100]	@ (8101610 <MX_ADC3_Init+0xd4>)
 81015ac:	2201      	movs	r2, #1
 81015ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81015b0:	4817      	ldr	r0, [pc, #92]	@ (8101610 <MX_ADC3_Init+0xd4>)
 81015b2:	f001 fbed 	bl	8102d90 <HAL_ADC_Init>
 81015b6:	4603      	mov	r3, r0
 81015b8:	2b00      	cmp	r3, #0
 81015ba:	d001      	beq.n	81015c0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 81015bc:	f000 fbb0 	bl	8101d20 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81015c0:	4b13      	ldr	r3, [pc, #76]	@ (8101610 <MX_ADC3_Init+0xd4>)
 81015c2:	2200      	movs	r2, #0
 81015c4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81015c6:	4812      	ldr	r0, [pc, #72]	@ (8101610 <MX_ADC3_Init+0xd4>)
 81015c8:	f001 fbe2 	bl	8102d90 <HAL_ADC_Init>
 81015cc:	4603      	mov	r3, r0
 81015ce:	2b00      	cmp	r3, #0
 81015d0:	d001      	beq.n	81015d6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 81015d2:	f000 fba5 	bl	8101d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 81015d6:	4b10      	ldr	r3, [pc, #64]	@ (8101618 <MX_ADC3_Init+0xdc>)
 81015d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81015da:	2306      	movs	r3, #6
 81015dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 81015de:	2307      	movs	r3, #7
 81015e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81015e2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81015e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81015e8:	2304      	movs	r3, #4
 81015ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81015ec:	2300      	movs	r3, #0
 81015ee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81015f0:	2300      	movs	r3, #0
 81015f2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81015f4:	1d3b      	adds	r3, r7, #4
 81015f6:	4619      	mov	r1, r3
 81015f8:	4805      	ldr	r0, [pc, #20]	@ (8101610 <MX_ADC3_Init+0xd4>)
 81015fa:	f001 ff37 	bl	810346c <HAL_ADC_ConfigChannel>
 81015fe:	4603      	mov	r3, r0
 8101600:	2b00      	cmp	r3, #0
 8101602:	d001      	beq.n	8101608 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8101604:	f000 fb8c 	bl	8101d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8101608:	bf00      	nop
 810160a:	3720      	adds	r7, #32
 810160c:	46bd      	mov	sp, r7
 810160e:	bd80      	pop	{r7, pc}
 8101610:	24000384 	.word	0x24000384
 8101614:	58026000 	.word	0x58026000
 8101618:	cb840000 	.word	0xcb840000

0810161c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 810161c:	b580      	push	{r7, lr}
 810161e:	b088      	sub	sp, #32
 8101620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101622:	f107 0310 	add.w	r3, r7, #16
 8101626:	2200      	movs	r2, #0
 8101628:	601a      	str	r2, [r3, #0]
 810162a:	605a      	str	r2, [r3, #4]
 810162c:	609a      	str	r2, [r3, #8]
 810162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101630:	1d3b      	adds	r3, r7, #4
 8101632:	2200      	movs	r2, #0
 8101634:	601a      	str	r2, [r3, #0]
 8101636:	605a      	str	r2, [r3, #4]
 8101638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 810163a:	4b20      	ldr	r3, [pc, #128]	@ (81016bc <MX_TIM1_Init+0xa0>)
 810163c:	4a20      	ldr	r2, [pc, #128]	@ (81016c0 <MX_TIM1_Init+0xa4>)
 810163e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 8101640:	4b1e      	ldr	r3, [pc, #120]	@ (81016bc <MX_TIM1_Init+0xa0>)
 8101642:	223b      	movs	r2, #59	@ 0x3b
 8101644:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101646:	4b1d      	ldr	r3, [pc, #116]	@ (81016bc <MX_TIM1_Init+0xa0>)
 8101648:	2200      	movs	r2, #0
 810164a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 810164c:	4b1b      	ldr	r3, [pc, #108]	@ (81016bc <MX_TIM1_Init+0xa0>)
 810164e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8101652:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101654:	4b19      	ldr	r3, [pc, #100]	@ (81016bc <MX_TIM1_Init+0xa0>)
 8101656:	2200      	movs	r2, #0
 8101658:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 810165a:	4b18      	ldr	r3, [pc, #96]	@ (81016bc <MX_TIM1_Init+0xa0>)
 810165c:	2200      	movs	r2, #0
 810165e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8101660:	4b16      	ldr	r3, [pc, #88]	@ (81016bc <MX_TIM1_Init+0xa0>)
 8101662:	2280      	movs	r2, #128	@ 0x80
 8101664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101666:	4815      	ldr	r0, [pc, #84]	@ (81016bc <MX_TIM1_Init+0xa0>)
 8101668:	f00b f8f0 	bl	810c84c <HAL_TIM_Base_Init>
 810166c:	4603      	mov	r3, r0
 810166e:	2b00      	cmp	r3, #0
 8101670:	d001      	beq.n	8101676 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8101672:	f000 fb55 	bl	8101d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810167a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810167c:	f107 0310 	add.w	r3, r7, #16
 8101680:	4619      	mov	r1, r3
 8101682:	480e      	ldr	r0, [pc, #56]	@ (81016bc <MX_TIM1_Init+0xa0>)
 8101684:	f00b faba 	bl	810cbfc <HAL_TIM_ConfigClockSource>
 8101688:	4603      	mov	r3, r0
 810168a:	2b00      	cmp	r3, #0
 810168c:	d001      	beq.n	8101692 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 810168e:	f000 fb47 	bl	8101d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101692:	2300      	movs	r3, #0
 8101694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101696:	2300      	movs	r3, #0
 8101698:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810169a:	2300      	movs	r3, #0
 810169c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810169e:	1d3b      	adds	r3, r7, #4
 81016a0:	4619      	mov	r1, r3
 81016a2:	4806      	ldr	r0, [pc, #24]	@ (81016bc <MX_TIM1_Init+0xa0>)
 81016a4:	f00b fd0e 	bl	810d0c4 <HAL_TIMEx_MasterConfigSynchronization>
 81016a8:	4603      	mov	r3, r0
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d001      	beq.n	81016b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 81016ae:	f000 fb37 	bl	8101d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 81016b2:	bf00      	nop
 81016b4:	3720      	adds	r7, #32
 81016b6:	46bd      	mov	sp, r7
 81016b8:	bd80      	pop	{r7, pc}
 81016ba:	bf00      	nop
 81016bc:	240003e8 	.word	0x240003e8
 81016c0:	40010000 	.word	0x40010000

081016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 81016c4:	b580      	push	{r7, lr}
 81016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 81016c8:	4b22      	ldr	r3, [pc, #136]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016ca:	4a23      	ldr	r2, [pc, #140]	@ (8101758 <MX_USART2_UART_Init+0x94>)
 81016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 81016ce:	4b21      	ldr	r3, [pc, #132]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 81016d6:	4b1f      	ldr	r3, [pc, #124]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016d8:	2200      	movs	r2, #0
 81016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 81016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016de:	2200      	movs	r2, #0
 81016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 81016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016e4:	2200      	movs	r2, #0
 81016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 81016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016ea:	220c      	movs	r2, #12
 81016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81016ee:	4b19      	ldr	r3, [pc, #100]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016f0:	2200      	movs	r2, #0
 81016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 81016f4:	4b17      	ldr	r3, [pc, #92]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016f6:	2200      	movs	r2, #0
 81016f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81016fa:	4b16      	ldr	r3, [pc, #88]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 81016fc:	2200      	movs	r2, #0
 81016fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101700:	4b14      	ldr	r3, [pc, #80]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 8101702:	2200      	movs	r2, #0
 8101704:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101706:	4b13      	ldr	r3, [pc, #76]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 8101708:	2200      	movs	r2, #0
 810170a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 810170c:	4811      	ldr	r0, [pc, #68]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 810170e:	f00b fd85 	bl	810d21c <HAL_UART_Init>
 8101712:	4603      	mov	r3, r0
 8101714:	2b00      	cmp	r3, #0
 8101716:	d001      	beq.n	810171c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8101718:	f000 fb02 	bl	8101d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810171c:	2100      	movs	r1, #0
 810171e:	480d      	ldr	r0, [pc, #52]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 8101720:	f00d fbed 	bl	810eefe <HAL_UARTEx_SetTxFifoThreshold>
 8101724:	4603      	mov	r3, r0
 8101726:	2b00      	cmp	r3, #0
 8101728:	d001      	beq.n	810172e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 810172a:	f000 faf9 	bl	8101d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810172e:	2100      	movs	r1, #0
 8101730:	4808      	ldr	r0, [pc, #32]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 8101732:	f00d fc22 	bl	810ef7a <HAL_UARTEx_SetRxFifoThreshold>
 8101736:	4603      	mov	r3, r0
 8101738:	2b00      	cmp	r3, #0
 810173a:	d001      	beq.n	8101740 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 810173c:	f000 faf0 	bl	8101d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8101740:	4804      	ldr	r0, [pc, #16]	@ (8101754 <MX_USART2_UART_Init+0x90>)
 8101742:	f00d fba3 	bl	810ee8c <HAL_UARTEx_DisableFifoMode>
 8101746:	4603      	mov	r3, r0
 8101748:	2b00      	cmp	r3, #0
 810174a:	d001      	beq.n	8101750 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 810174c:	f000 fae8 	bl	8101d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8101750:	bf00      	nop
 8101752:	bd80      	pop	{r7, pc}
 8101754:	24000434 	.word	0x24000434
 8101758:	40004400 	.word	0x40004400

0810175c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 810175c:	b580      	push	{r7, lr}
 810175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101760:	4b22      	ldr	r3, [pc, #136]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101762:	4a23      	ldr	r2, [pc, #140]	@ (81017f0 <MX_USART3_UART_Init+0x94>)
 8101764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101766:	4b21      	ldr	r3, [pc, #132]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 810176c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810176e:	4b1f      	ldr	r3, [pc, #124]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101770:	2200      	movs	r2, #0
 8101772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101774:	4b1d      	ldr	r3, [pc, #116]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101776:	2200      	movs	r2, #0
 8101778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810177a:	4b1c      	ldr	r3, [pc, #112]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 810177c:	2200      	movs	r2, #0
 810177e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8101780:	4b1a      	ldr	r3, [pc, #104]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101782:	2204      	movs	r2, #4
 8101784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101786:	4b19      	ldr	r3, [pc, #100]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101788:	2200      	movs	r2, #0
 810178a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810178c:	4b17      	ldr	r3, [pc, #92]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 810178e:	2200      	movs	r2, #0
 8101790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101792:	4b16      	ldr	r3, [pc, #88]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 8101794:	2200      	movs	r2, #0
 8101796:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101798:	4b14      	ldr	r3, [pc, #80]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 810179a:	2200      	movs	r2, #0
 810179c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810179e:	4b13      	ldr	r3, [pc, #76]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 81017a0:	2200      	movs	r2, #0
 81017a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81017a4:	4811      	ldr	r0, [pc, #68]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 81017a6:	f00b fd39 	bl	810d21c <HAL_UART_Init>
 81017aa:	4603      	mov	r3, r0
 81017ac:	2b00      	cmp	r3, #0
 81017ae:	d001      	beq.n	81017b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81017b0:	f000 fab6 	bl	8101d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81017b4:	2100      	movs	r1, #0
 81017b6:	480d      	ldr	r0, [pc, #52]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 81017b8:	f00d fba1 	bl	810eefe <HAL_UARTEx_SetTxFifoThreshold>
 81017bc:	4603      	mov	r3, r0
 81017be:	2b00      	cmp	r3, #0
 81017c0:	d001      	beq.n	81017c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81017c2:	f000 faad 	bl	8101d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81017c6:	2100      	movs	r1, #0
 81017c8:	4808      	ldr	r0, [pc, #32]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 81017ca:	f00d fbd6 	bl	810ef7a <HAL_UARTEx_SetRxFifoThreshold>
 81017ce:	4603      	mov	r3, r0
 81017d0:	2b00      	cmp	r3, #0
 81017d2:	d001      	beq.n	81017d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81017d4:	f000 faa4 	bl	8101d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81017d8:	4804      	ldr	r0, [pc, #16]	@ (81017ec <MX_USART3_UART_Init+0x90>)
 81017da:	f00d fb57 	bl	810ee8c <HAL_UARTEx_DisableFifoMode>
 81017de:	4603      	mov	r3, r0
 81017e0:	2b00      	cmp	r3, #0
 81017e2:	d001      	beq.n	81017e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81017e4:	f000 fa9c 	bl	8101d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81017e8:	bf00      	nop
 81017ea:	bd80      	pop	{r7, pc}
 81017ec:	240004c8 	.word	0x240004c8
 81017f0:	40004800 	.word	0x40004800

081017f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81017f4:	b580      	push	{r7, lr}
 81017f6:	b082      	sub	sp, #8
 81017f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81017fa:	4b11      	ldr	r3, [pc, #68]	@ (8101840 <MX_DMA_Init+0x4c>)
 81017fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101800:	4a0f      	ldr	r2, [pc, #60]	@ (8101840 <MX_DMA_Init+0x4c>)
 8101802:	f043 0301 	orr.w	r3, r3, #1
 8101806:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810180a:	4b0d      	ldr	r3, [pc, #52]	@ (8101840 <MX_DMA_Init+0x4c>)
 810180c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101810:	f003 0301 	and.w	r3, r3, #1
 8101814:	607b      	str	r3, [r7, #4]
 8101816:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101818:	2200      	movs	r2, #0
 810181a:	2105      	movs	r1, #5
 810181c:	200b      	movs	r0, #11
 810181e:	f002 fbe6 	bl	8103fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101822:	200b      	movs	r0, #11
 8101824:	f002 fbfd 	bl	8104022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8101828:	2200      	movs	r2, #0
 810182a:	2105      	movs	r1, #5
 810182c:	200c      	movs	r0, #12
 810182e:	f002 fbde 	bl	8103fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101832:	200c      	movs	r0, #12
 8101834:	f002 fbf5 	bl	8104022 <HAL_NVIC_EnableIRQ>

}
 8101838:	bf00      	nop
 810183a:	3708      	adds	r7, #8
 810183c:	46bd      	mov	sp, r7
 810183e:	bd80      	pop	{r7, pc}
 8101840:	58024400 	.word	0x58024400

08101844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101844:	b580      	push	{r7, lr}
 8101846:	b08c      	sub	sp, #48	@ 0x30
 8101848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810184a:	f107 031c 	add.w	r3, r7, #28
 810184e:	2200      	movs	r2, #0
 8101850:	601a      	str	r2, [r3, #0]
 8101852:	605a      	str	r2, [r3, #4]
 8101854:	609a      	str	r2, [r3, #8]
 8101856:	60da      	str	r2, [r3, #12]
 8101858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810185a:	4b6e      	ldr	r3, [pc, #440]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 810185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101860:	4a6c      	ldr	r2, [pc, #432]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101862:	f043 0301 	orr.w	r3, r3, #1
 8101866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810186a:	4b6a      	ldr	r3, [pc, #424]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 810186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101870:	f003 0301 	and.w	r3, r3, #1
 8101874:	61bb      	str	r3, [r7, #24]
 8101876:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101878:	4b66      	ldr	r3, [pc, #408]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 810187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810187e:	4a65      	ldr	r2, [pc, #404]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101880:	f043 0308 	orr.w	r3, r3, #8
 8101884:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101888:	4b62      	ldr	r3, [pc, #392]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 810188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810188e:	f003 0308 	and.w	r3, r3, #8
 8101892:	617b      	str	r3, [r7, #20]
 8101894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101896:	4b5f      	ldr	r3, [pc, #380]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810189c:	4a5d      	ldr	r2, [pc, #372]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 810189e:	f043 0302 	orr.w	r3, r3, #2
 81018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018a6:	4b5b      	ldr	r3, [pc, #364]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018ac:	f003 0302 	and.w	r3, r3, #2
 81018b0:	613b      	str	r3, [r7, #16]
 81018b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81018b4:	4b57      	ldr	r3, [pc, #348]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018ba:	4a56      	ldr	r2, [pc, #344]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018bc:	f043 0304 	orr.w	r3, r3, #4
 81018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018c4:	4b53      	ldr	r3, [pc, #332]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018ca:	f003 0304 	and.w	r3, r3, #4
 81018ce:	60fb      	str	r3, [r7, #12]
 81018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81018d2:	4b50      	ldr	r3, [pc, #320]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018d8:	4a4e      	ldr	r2, [pc, #312]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018da:	f043 0310 	orr.w	r3, r3, #16
 81018de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018e2:	4b4c      	ldr	r3, [pc, #304]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018e8:	f003 0310 	and.w	r3, r3, #16
 81018ec:	60bb      	str	r3, [r7, #8]
 81018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81018f0:	4b48      	ldr	r3, [pc, #288]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018f6:	4a47      	ldr	r2, [pc, #284]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 81018f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101900:	4b44      	ldr	r3, [pc, #272]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810190a:	607b      	str	r3, [r7, #4]
 810190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810190e:	4b41      	ldr	r3, [pc, #260]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101914:	4a3f      	ldr	r2, [pc, #252]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101916:	f043 0320 	orr.w	r3, r3, #32
 810191a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810191e:	4b3d      	ldr	r3, [pc, #244]	@ (8101a14 <MX_GPIO_Init+0x1d0>)
 8101920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101924:	f003 0320 	and.w	r3, r3, #32
 8101928:	603b      	str	r3, [r7, #0]
 810192a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MIIM_MDIO_Pin|MIIM_MDC_Pin, GPIO_PIN_RESET);
 810192c:	2200      	movs	r2, #0
 810192e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8101932:	4839      	ldr	r0, [pc, #228]	@ (8101a18 <MX_GPIO_Init+0x1d4>)
 8101934:	f007 f996 	bl	8108c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_DE_RE_Pin|RS_MODE_SELECT_Pin|LED_Pin|TRIGGER_OUT_Pin, GPIO_PIN_RESET);
 8101938:	2200      	movs	r2, #0
 810193a:	f244 4114 	movw	r1, #17428	@ 0x4414
 810193e:	4837      	ldr	r0, [pc, #220]	@ (8101a1c <MX_GPIO_Init+0x1d8>)
 8101940:	f007 f990 	bl	8108c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MIIM_MDIO_Pin */
  GPIO_InitStruct.Pin = MIIM_MDIO_Pin;
 8101944:	2380      	movs	r3, #128	@ 0x80
 8101946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101948:	2301      	movs	r3, #1
 810194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810194c:	2300      	movs	r3, #0
 810194e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101950:	2303      	movs	r3, #3
 8101952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MIIM_MDIO_GPIO_Port, &GPIO_InitStruct);
 8101954:	f107 031c 	add.w	r3, r7, #28
 8101958:	4619      	mov	r1, r3
 810195a:	482f      	ldr	r0, [pc, #188]	@ (8101a18 <MX_GPIO_Init+0x1d4>)
 810195c:	f006 ffba 	bl	81088d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_IN_Pin */
  GPIO_InitStruct.Pin = TRIGGER_IN_Pin;
 8101960:	2301      	movs	r3, #1
 8101962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8101964:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8101968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810196a:	2300      	movs	r3, #0
 810196c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIGGER_IN_GPIO_Port, &GPIO_InitStruct);
 810196e:	f107 031c 	add.w	r3, r7, #28
 8101972:	4619      	mov	r1, r3
 8101974:	482a      	ldr	r0, [pc, #168]	@ (8101a20 <MX_GPIO_Init+0x1dc>)
 8101976:	f006 ffad 	bl	81088d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIIM_MDC_Pin */
  GPIO_InitStruct.Pin = MIIM_MDC_Pin;
 810197a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101980:	2301      	movs	r3, #1
 8101982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8101984:	2302      	movs	r3, #2
 8101986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101988:	2303      	movs	r3, #3
 810198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MIIM_MDC_GPIO_Port, &GPIO_InitStruct);
 810198c:	f107 031c 	add.w	r3, r7, #28
 8101990:	4619      	mov	r1, r3
 8101992:	4821      	ldr	r0, [pc, #132]	@ (8101a18 <MX_GPIO_Init+0x1d4>)
 8101994:	f006 ff9e 	bl	81088d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_DE_RE_Pin RS_MODE_SELECT_Pin */
  GPIO_InitStruct.Pin = RS485_DE_RE_Pin|RS_MODE_SELECT_Pin;
 8101998:	2314      	movs	r3, #20
 810199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810199c:	2301      	movs	r3, #1
 810199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81019a0:	2302      	movs	r3, #2
 81019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019a4:	2300      	movs	r3, #0
 81019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81019a8:	f107 031c 	add.w	r3, r7, #28
 81019ac:	4619      	mov	r1, r3
 81019ae:	481b      	ldr	r0, [pc, #108]	@ (8101a1c <MX_GPIO_Init+0x1d8>)
 81019b0:	f006 ff90 	bl	81088d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_SEL_0_Pin IP_SEL_1_Pin IP_SEL_2_Pin IP_SEL_3_Pin
                           IP_SEL_4_Pin */
  GPIO_InitStruct.Pin = IP_SEL_0_Pin|IP_SEL_1_Pin|IP_SEL_2_Pin|IP_SEL_3_Pin
 81019b4:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 81019b8:	61fb      	str	r3, [r7, #28]
                          |IP_SEL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81019ba:	2300      	movs	r3, #0
 81019bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81019be:	2302      	movs	r3, #2
 81019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81019c2:	f107 031c 	add.w	r3, r7, #28
 81019c6:	4619      	mov	r1, r3
 81019c8:	4816      	ldr	r0, [pc, #88]	@ (8101a24 <MX_GPIO_Init+0x1e0>)
 81019ca:	f006 ff83 	bl	81088d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 81019ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81019d4:	2301      	movs	r3, #1
 81019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019d8:	2300      	movs	r3, #0
 81019da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019dc:	2300      	movs	r3, #0
 81019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 81019e0:	f107 031c 	add.w	r3, r7, #28
 81019e4:	4619      	mov	r1, r3
 81019e6:	480d      	ldr	r0, [pc, #52]	@ (8101a1c <MX_GPIO_Init+0x1d8>)
 81019e8:	f006 ff74 	bl	81088d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_OUT_Pin */
  GPIO_InitStruct.Pin = TRIGGER_OUT_Pin;
 81019ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81019f2:	2301      	movs	r3, #1
 81019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81019f6:	2302      	movs	r3, #2
 81019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81019fa:	2303      	movs	r3, #3
 81019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIGGER_OUT_GPIO_Port, &GPIO_InitStruct);
 81019fe:	f107 031c 	add.w	r3, r7, #28
 8101a02:	4619      	mov	r1, r3
 8101a04:	4805      	ldr	r0, [pc, #20]	@ (8101a1c <MX_GPIO_Init+0x1d8>)
 8101a06:	f006 ff65 	bl	81088d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8101a0a:	bf00      	nop
 8101a0c:	3730      	adds	r7, #48	@ 0x30
 8101a0e:	46bd      	mov	sp, r7
 8101a10:	bd80      	pop	{r7, pc}
 8101a12:	bf00      	nop
 8101a14:	58024400 	.word	0x58024400
 8101a18:	58020400 	.word	0x58020400
 8101a1c:	58020c00 	.word	0x58020c00
 8101a20:	58021000 	.word	0x58021000
 8101a24:	58021400 	.word	0x58021400

08101a28 <HAL_GPIO_EXTI_Callback>:
  * @brief  GPIO EXTI callback
  * @param  GPIO_Pin: Specifies the pins connected to EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8101a28:	b580      	push	{r7, lr}
 8101a2a:	b084      	sub	sp, #16
 8101a2c:	af00      	add	r7, sp, #0
 8101a2e:	4603      	mov	r3, r0
 8101a30:	80fb      	strh	r3, [r7, #6]
    // Check if the interrupt is triggered by TRIGGER_IN_Pin
    if (GPIO_Pin == TRIGGER_IN_Pin)
 8101a32:	88fb      	ldrh	r3, [r7, #6]
 8101a34:	2b01      	cmp	r3, #1
 8101a36:	d111      	bne.n	8101a5c <HAL_GPIO_EXTI_Callback+0x34>
    {
        // Read the state of the pin
        GPIO_PinState pinState = HAL_GPIO_ReadPin(TRIGGER_IN_GPIO_Port, TRIGGER_IN_Pin);
 8101a38:	2101      	movs	r1, #1
 8101a3a:	480a      	ldr	r0, [pc, #40]	@ (8101a64 <HAL_GPIO_EXTI_Callback+0x3c>)
 8101a3c:	f007 f8fa 	bl	8108c34 <HAL_GPIO_ReadPin>
 8101a40:	4603      	mov	r3, r0
 8101a42:	73fb      	strb	r3, [r7, #15]

        // Send UDP message based on the pin state
        if (pinState == GPIO_PIN_RESET)
 8101a44:	7bfb      	ldrb	r3, [r7, #15]
 8101a46:	2b00      	cmp	r3, #0
 8101a48:	d104      	bne.n	8101a54 <HAL_GPIO_EXTI_Callback+0x2c>
        {
//            HAL_GPIO_WritePin(TRIGGER_OUT_GPIO_Port, TRIGGER_OUT_Pin, GPIO_PIN_SET);
        	udpsend_trigger("1", 1); // For trigger data
 8101a4a:	2101      	movs	r1, #1
 8101a4c:	4806      	ldr	r0, [pc, #24]	@ (8101a68 <HAL_GPIO_EXTI_Callback+0x40>)
 8101a4e:	f000 fd57 	bl	8102500 <udpsend_trigger>
        {
//            HAL_GPIO_WritePin(TRIGGER_OUT_GPIO_Port, TRIGGER_OUT_Pin, GPIO_PIN_RESET);
        	udpsend_trigger("0", 1); // For trigger data
        }
    }
}
 8101a52:	e003      	b.n	8101a5c <HAL_GPIO_EXTI_Callback+0x34>
        	udpsend_trigger("0", 1); // For trigger data
 8101a54:	2101      	movs	r1, #1
 8101a56:	4805      	ldr	r0, [pc, #20]	@ (8101a6c <HAL_GPIO_EXTI_Callback+0x44>)
 8101a58:	f000 fd52 	bl	8102500 <udpsend_trigger>
}
 8101a5c:	bf00      	nop
 8101a5e:	3710      	adds	r7, #16
 8101a60:	46bd      	mov	sp, r7
 8101a62:	bd80      	pop	{r7, pc}
 8101a64:	58021000 	.word	0x58021000
 8101a68:	08124944 	.word	0x08124944
 8101a6c:	08124948 	.word	0x08124948

08101a70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8101a70:	b590      	push	{r4, r7, lr}
 8101a72:	b0b5      	sub	sp, #212	@ 0xd4
 8101a74:	af04      	add	r7, sp, #16
 8101a76:	6078      	str	r0, [r7, #4]
	  osDelay(500);
 8101a78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8101a7c:	f00e fb23 	bl	81100c6 <osDelay>
  /* init code for LWIP */
	  MX_LWIP_Init();
 8101a80:	f00d fb08 	bl	810f094 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	  osDelay(500);
 8101a84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8101a88:	f00e fb1d 	bl	81100c6 <osDelay>
	  ETH_PHY_IO_WriteReg(0, 0, 8448);
 8101a8c:	f44f 5204 	mov.w	r2, #8448	@ 0x2100
 8101a90:	2100      	movs	r1, #0
 8101a92:	2000      	movs	r0, #0
 8101a94:	f00e f81c 	bl	810fad0 <ETH_PHY_IO_WriteReg>
	  osDelay(500);
 8101a98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8101a9c:	f00e fb13 	bl	81100c6 <osDelay>
    // Variable to store ADC values and temperature
    uint32_t adc_value;
    float temperature;

    // Get the calibration values from memory
    uint16_t ts_cal1 = *TS_CAL1_ADDR;
 8101aa0:	4b51      	ldr	r3, [pc, #324]	@ (8101be8 <StartDefaultTask+0x178>)
 8101aa2:	881b      	ldrh	r3, [r3, #0]
 8101aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    uint16_t ts_cal2 = *TS_CAL2_ADDR;
 8101aa8:	4b50      	ldr	r3, [pc, #320]	@ (8101bec <StartDefaultTask+0x17c>)
 8101aaa:	881b      	ldrh	r3, [r3, #0]
 8101aac:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc

    const float TS_CAL1_TEMP = 30.0f;
 8101ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8101bf0 <StartDefaultTask+0x180>)
 8101ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    const float TS_CAL2_TEMP = 110.0f;
 8101ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8101bf4 <StartDefaultTask+0x184>)
 8101ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    // Topic for publishing temperature updates
    char temperature_topic[128];
    snprintf(temperature_topic, sizeof(temperature_topic), "CMM/slot%d/status/temperature", slot);
 8101abc:	4b4e      	ldr	r3, [pc, #312]	@ (8101bf8 <StartDefaultTask+0x188>)
 8101abe:	681b      	ldr	r3, [r3, #0]
 8101ac0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8101ac4:	4a4d      	ldr	r2, [pc, #308]	@ (8101bfc <StartDefaultTask+0x18c>)
 8101ac6:	2180      	movs	r1, #128	@ 0x80
 8101ac8:	f020 f9cc 	bl	8121e64 <sniprintf>
    extern struct mqtt_connect_client_info_t mqtt_client_info;
    osDelay(1000);
 8101acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8101ad0:	f00e faf9 	bl	81100c6 <osDelay>
    mqtt_example_init();  // Initial MQTT connection
 8101ad4:	f7fe ff10 	bl	81008f8 <mqtt_example_init>
    osDelay(50);
 8101ad8:	2032      	movs	r0, #50	@ 0x32
 8101ada:	f00e faf4 	bl	81100c6 <osDelay>

    for (;;)
    {
        // Check if MQTT client is connected
        if (mqtt_client_is_connected(mqtt_client)) {
 8101ade:	4b48      	ldr	r3, [pc, #288]	@ (8101c00 <StartDefaultTask+0x190>)
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4618      	mov	r0, r3
 8101ae4:	f016 ffd4 	bl	8118a90 <mqtt_client_is_connected>
 8101ae8:	4603      	mov	r3, r0
 8101aea:	2b00      	cmp	r3, #0
 8101aec:	d072      	beq.n	8101bd4 <StartDefaultTask+0x164>
            // MQTT client is connected, proceed to read sensor and publish data
        	handle_status_ethernet_link(mqtt_client, &mqtt_client_info, slot);
 8101aee:	4b44      	ldr	r3, [pc, #272]	@ (8101c00 <StartDefaultTask+0x190>)
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	4a41      	ldr	r2, [pc, #260]	@ (8101bf8 <StartDefaultTask+0x188>)
 8101af4:	6812      	ldr	r2, [r2, #0]
 8101af6:	4943      	ldr	r1, [pc, #268]	@ (8101c04 <StartDefaultTask+0x194>)
 8101af8:	4618      	mov	r0, r3
 8101afa:	f7ff f9f3 	bl	8100ee4 <handle_status_ethernet_link>
            // Start ADC conversion for temperature
            HAL_ADC_Start(&hadc3);
 8101afe:	4842      	ldr	r0, [pc, #264]	@ (8101c08 <StartDefaultTask+0x198>)
 8101b00:	f001 fae8 	bl	81030d4 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8101b04:	f04f 31ff 	mov.w	r1, #4294967295
 8101b08:	483f      	ldr	r0, [pc, #252]	@ (8101c08 <StartDefaultTask+0x198>)
 8101b0a:	f001 fbad 	bl	8103268 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 8101b0e:	483e      	ldr	r0, [pc, #248]	@ (8101c08 <StartDefaultTask+0x198>)
 8101b10:	f001 fc9e 	bl	8103450 <HAL_ADC_GetValue>
 8101b14:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

            // Calculate temperature
            temperature = ((float)(adc_value - ts_cal1) * (TS_CAL2_TEMP - TS_CAL1_TEMP) / (float)(ts_cal2 - ts_cal1)) + TS_CAL1_TEMP;
 8101b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8101b1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8101b20:	1ad3      	subs	r3, r2, r3
 8101b22:	ee07 3a90 	vmov	s15, r3
 8101b26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101b2a:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8101b2e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8101b32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101b36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8101b3a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8101b3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8101b42:	1ad3      	subs	r3, r2, r3
 8101b44:	ee07 3a90 	vmov	s15, r3
 8101b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b50:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8101b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101b58:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

            // Print and publish the temperature
            printf("Temperature: %.2f°C\n", temperature);
 8101b5c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8101b60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8101b64:	ec53 2b17 	vmov	r2, r3, d7
 8101b68:	4828      	ldr	r0, [pc, #160]	@ (8101c0c <StartDefaultTask+0x19c>)
 8101b6a:	f020 f90b 	bl	8121d84 <iprintf>

            // Publish temperature data to the MQTT broker
            char temperature_message[32];
            snprintf(temperature_message, sizeof(temperature_message), "%.2f", temperature);
 8101b6e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8101b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8101b76:	f107 0308 	add.w	r3, r7, #8
 8101b7a:	ed8d 7b00 	vstr	d7, [sp]
 8101b7e:	4a24      	ldr	r2, [pc, #144]	@ (8101c10 <StartDefaultTask+0x1a0>)
 8101b80:	2120      	movs	r1, #32
 8101b82:	4618      	mov	r0, r3
 8101b84:	f020 f96e 	bl	8121e64 <sniprintf>

            err_t err = mqtt_publish(mqtt_client,
 8101b88:	4b1d      	ldr	r3, [pc, #116]	@ (8101c00 <StartDefaultTask+0x190>)
 8101b8a:	681c      	ldr	r4, [r3, #0]
                                     temperature_topic,          // Topic
                                     temperature_message,        // Message
                                     strlen(temperature_message),// Message length
 8101b8c:	f107 0308 	add.w	r3, r7, #8
 8101b90:	4618      	mov	r0, r3
 8101b92:	f7fe fc05 	bl	81003a0 <strlen>
 8101b96:	4603      	mov	r3, r0
            err_t err = mqtt_publish(mqtt_client,
 8101b98:	b29b      	uxth	r3, r3
 8101b9a:	f107 0208 	add.w	r2, r7, #8
 8101b9e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8101ba2:	4818      	ldr	r0, [pc, #96]	@ (8101c04 <StartDefaultTask+0x194>)
 8101ba4:	9003      	str	r0, [sp, #12]
 8101ba6:	481b      	ldr	r0, [pc, #108]	@ (8101c14 <StartDefaultTask+0x1a4>)
 8101ba8:	9002      	str	r0, [sp, #8]
 8101baa:	2000      	movs	r0, #0
 8101bac:	9001      	str	r0, [sp, #4]
 8101bae:	2001      	movs	r0, #1
 8101bb0:	9000      	str	r0, [sp, #0]
 8101bb2:	4620      	mov	r0, r4
 8101bb4:	f016 fab6 	bl	8118124 <mqtt_publish>
 8101bb8:	4603      	mov	r3, r0
 8101bba:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                                     1,                          // QoS level
                                     0,                          // Retain flag
                                     mqtt_request_cb,            // Callback function
                                     LWIP_CONST_CAST(void*, &mqtt_client_info)); // Callback argument

            if (err != ERR_OK) {
 8101bbe:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8101bc2:	2b00      	cmp	r3, #0
 8101bc4:	d00b      	beq.n	8101bde <StartDefaultTask+0x16e>
                LWIP_PLATFORM_DIAG(("Failed to publish temperature, error %d\n", err));
 8101bc6:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8101bca:	4619      	mov	r1, r3
 8101bcc:	4812      	ldr	r0, [pc, #72]	@ (8101c18 <StartDefaultTask+0x1a8>)
 8101bce:	f020 f8d9 	bl	8121d84 <iprintf>
 8101bd2:	e004      	b.n	8101bde <StartDefaultTask+0x16e>
            }
        } else {
            // MQTT client is not connected, attempt to reconnect
            LWIP_PLATFORM_DIAG(("MQTT client not connected, attempting to reconnect...\n"));
 8101bd4:	4811      	ldr	r0, [pc, #68]	@ (8101c1c <StartDefaultTask+0x1ac>)
 8101bd6:	f020 f93d 	bl	8121e54 <puts>
            mqtt_example_init();  // Attempt to reconnect
 8101bda:	f7fe fe8d 	bl	81008f8 <mqtt_example_init>
        }

        // Delay for 2 seconds
        osDelay(2000);
 8101bde:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8101be2:	f00e fa70 	bl	81100c6 <osDelay>
        if (mqtt_client_is_connected(mqtt_client)) {
 8101be6:	e77a      	b.n	8101ade <StartDefaultTask+0x6e>
 8101be8:	1ff1e820 	.word	0x1ff1e820
 8101bec:	1ff1e840 	.word	0x1ff1e840
 8101bf0:	41f00000 	.word	0x41f00000
 8101bf4:	42dc0000 	.word	0x42dc0000
 8101bf8:	24000654 	.word	0x24000654
 8101bfc:	0812494c 	.word	0x0812494c
 8101c00:	24000238 	.word	0x24000238
 8101c04:	2400000c 	.word	0x2400000c
 8101c08:	24000384 	.word	0x24000384
 8101c0c:	0812496c 	.word	0x0812496c
 8101c10:	08124984 	.word	0x08124984
 8101c14:	08100831 	.word	0x08100831
 8101c18:	0812498c 	.word	0x0812498c
 8101c1c:	081249b8 	.word	0x081249b8

08101c20 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void *argument)
{
 8101c20:	b580      	push	{r7, lr}
 8101c22:	b082      	sub	sp, #8
 8101c24:	af00      	add	r7, sp, #0
 8101c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8101c28:	2200      	movs	r2, #0
 8101c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8101c2e:	4809      	ldr	r0, [pc, #36]	@ (8101c54 <StartBlinkTask+0x34>)
 8101c30:	f007 f818 	bl	8108c64 <HAL_GPIO_WritePin>
	osDelay(500);
 8101c34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8101c38:	f00e fa45 	bl	81100c6 <osDelay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8101c3c:	2201      	movs	r2, #1
 8101c3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8101c42:	4804      	ldr	r0, [pc, #16]	@ (8101c54 <StartBlinkTask+0x34>)
 8101c44:	f007 f80e 	bl	8108c64 <HAL_GPIO_WritePin>
	osDelay(500);
 8101c48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8101c4c:	f00e fa3b 	bl	81100c6 <osDelay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8101c50:	bf00      	nop
 8101c52:	e7e9      	b.n	8101c28 <StartBlinkTask+0x8>
 8101c54:	58020c00 	.word	0x58020c00

08101c58 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8101c58:	b580      	push	{r7, lr}
 8101c5a:	b084      	sub	sp, #16
 8101c5c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8101c5e:	463b      	mov	r3, r7
 8101c60:	2200      	movs	r2, #0
 8101c62:	601a      	str	r2, [r3, #0]
 8101c64:	605a      	str	r2, [r3, #4]
 8101c66:	609a      	str	r2, [r3, #8]
 8101c68:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8101c6a:	f002 f9ed 	bl	8104048 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8101c6e:	2301      	movs	r3, #1
 8101c70:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8101c72:	2300      	movs	r3, #0
 8101c74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8101c76:	2300      	movs	r3, #0
 8101c78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8101c7a:	231f      	movs	r3, #31
 8101c7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8101c7e:	2387      	movs	r3, #135	@ 0x87
 8101c80:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8101c82:	2300      	movs	r3, #0
 8101c84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8101c86:	2300      	movs	r3, #0
 8101c88:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8101c8a:	2301      	movs	r3, #1
 8101c8c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8101c8e:	2301      	movs	r3, #1
 8101c90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8101c92:	2300      	movs	r3, #0
 8101c94:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8101c96:	2300      	movs	r3, #0
 8101c98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8101c9a:	463b      	mov	r3, r7
 8101c9c:	4618      	mov	r0, r3
 8101c9e:	f002 fa0b 	bl	81040b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8101ca2:	2301      	movs	r3, #1
 8101ca4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8101ca6:	4b13      	ldr	r3, [pc, #76]	@ (8101cf4 <MPU_Config+0x9c>)
 8101ca8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8101caa:	2310      	movs	r3, #16
 8101cac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8101cae:	2300      	movs	r3, #0
 8101cb0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8101cb2:	2301      	movs	r3, #1
 8101cb4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8101cb6:	2303      	movs	r3, #3
 8101cb8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8101cba:	2300      	movs	r3, #0
 8101cbc:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8101cbe:	463b      	mov	r3, r7
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f002 f9f9 	bl	81040b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8101cc6:	2302      	movs	r3, #2
 8101cc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8101cca:	4b0b      	ldr	r3, [pc, #44]	@ (8101cf8 <MPU_Config+0xa0>)
 8101ccc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8101cce:	2308      	movs	r3, #8
 8101cd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8101cd2:	2300      	movs	r3, #0
 8101cd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8101cd6:	2301      	movs	r3, #1
 8101cd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8101cda:	2301      	movs	r3, #1
 8101cdc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8101cde:	463b      	mov	r3, r7
 8101ce0:	4618      	mov	r0, r3
 8101ce2:	f002 f9e9 	bl	81040b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8101ce6:	2004      	movs	r0, #4
 8101ce8:	f002 f9c6 	bl	8104078 <HAL_MPU_Enable>

}
 8101cec:	bf00      	nop
 8101cee:	3710      	adds	r7, #16
 8101cf0:	46bd      	mov	sp, r7
 8101cf2:	bd80      	pop	{r7, pc}
 8101cf4:	30020000 	.word	0x30020000
 8101cf8:	30040000 	.word	0x30040000

08101cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101cfc:	b580      	push	{r7, lr}
 8101cfe:	b082      	sub	sp, #8
 8101d00:	af00      	add	r7, sp, #0
 8101d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a04      	ldr	r2, [pc, #16]	@ (8101d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101d0a:	4293      	cmp	r3, r2
 8101d0c:	d101      	bne.n	8101d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101d0e:	f000 fdf9 	bl	8102904 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101d12:	bf00      	nop
 8101d14:	3708      	adds	r7, #8
 8101d16:	46bd      	mov	sp, r7
 8101d18:	bd80      	pop	{r7, pc}
 8101d1a:	bf00      	nop
 8101d1c:	40001000 	.word	0x40001000

08101d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101d20:	b480      	push	{r7}
 8101d22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101d24:	b672      	cpsid	i
}
 8101d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101d28:	bf00      	nop
 8101d2a:	e7fd      	b.n	8101d28 <Error_Handler+0x8>

08101d2c <HAL_UART_RxCpltCallback>:
/**
  * @brief  Callback function when DMA transfer is complete or half-complete.
  *         This function processes the data and sends it over UDP.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8101d2c:	b580      	push	{r7, lr}
 8101d2e:	b082      	sub	sp, #8
 8101d30:	af00      	add	r7, sp, #0
 8101d32:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)  // RS485
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	681b      	ldr	r3, [r3, #0]
 8101d38:	4a0a      	ldr	r2, [pc, #40]	@ (8101d64 <HAL_UART_RxCpltCallback+0x38>)
 8101d3a:	4293      	cmp	r3, r2
 8101d3c:	d104      	bne.n	8101d48 <HAL_UART_RxCpltCallback+0x1c>
    {
        // Process received RS485 data (entire buffer received)
        Process_DMA_RxData(RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);
 8101d3e:	211e      	movs	r1, #30
 8101d40:	4809      	ldr	r0, [pc, #36]	@ (8101d68 <HAL_UART_RxCpltCallback+0x3c>)
 8101d42:	f000 f83b 	bl	8101dbc <Process_DMA_RxData>
    else if (huart->Instance == USART2)  // RS232
    {
        // Process received RS232 data (entire buffer received)
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);
    }
}
 8101d46:	e008      	b.n	8101d5a <HAL_UART_RxCpltCallback+0x2e>
    else if (huart->Instance == USART2)  // RS232
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	4a07      	ldr	r2, [pc, #28]	@ (8101d6c <HAL_UART_RxCpltCallback+0x40>)
 8101d4e:	4293      	cmp	r3, r2
 8101d50:	d103      	bne.n	8101d5a <HAL_UART_RxCpltCallback+0x2e>
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);
 8101d52:	211e      	movs	r1, #30
 8101d54:	4806      	ldr	r0, [pc, #24]	@ (8101d70 <HAL_UART_RxCpltCallback+0x44>)
 8101d56:	f000 f831 	bl	8101dbc <Process_DMA_RxData>
}
 8101d5a:	bf00      	nop
 8101d5c:	3708      	adds	r7, #8
 8101d5e:	46bd      	mov	sp, r7
 8101d60:	bd80      	pop	{r7, pc}
 8101d62:	bf00      	nop
 8101d64:	40004800 	.word	0x40004800
 8101d68:	24000678 	.word	0x24000678
 8101d6c:	40004400 	.word	0x40004400
 8101d70:	24000658 	.word	0x24000658

08101d74 <HAL_UART_RxHalfCpltCallback>:
/**
  * @brief  Callback function when DMA half-transfer is complete.
  *         This function processes half of the data.
  */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	b082      	sub	sp, #8
 8101d78:	af00      	add	r7, sp, #0
 8101d7a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)  // RS485
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	4a0a      	ldr	r2, [pc, #40]	@ (8101dac <HAL_UART_RxHalfCpltCallback+0x38>)
 8101d82:	4293      	cmp	r3, r2
 8101d84:	d104      	bne.n	8101d90 <HAL_UART_RxHalfCpltCallback+0x1c>
    {
        // Process the first half of the RS485 buffer
        Process_DMA_RxData(RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE / 2);
 8101d86:	210f      	movs	r1, #15
 8101d88:	4809      	ldr	r0, [pc, #36]	@ (8101db0 <HAL_UART_RxHalfCpltCallback+0x3c>)
 8101d8a:	f000 f817 	bl	8101dbc <Process_DMA_RxData>
    else if (huart->Instance == USART2)  // RS232
    {
        // Process the first half of the RS232 buffer
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE / 2);
    }
}
 8101d8e:	e008      	b.n	8101da2 <HAL_UART_RxHalfCpltCallback+0x2e>
    else if (huart->Instance == USART2)  // RS232
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	4a07      	ldr	r2, [pc, #28]	@ (8101db4 <HAL_UART_RxHalfCpltCallback+0x40>)
 8101d96:	4293      	cmp	r3, r2
 8101d98:	d103      	bne.n	8101da2 <HAL_UART_RxHalfCpltCallback+0x2e>
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE / 2);
 8101d9a:	210f      	movs	r1, #15
 8101d9c:	4806      	ldr	r0, [pc, #24]	@ (8101db8 <HAL_UART_RxHalfCpltCallback+0x44>)
 8101d9e:	f000 f80d 	bl	8101dbc <Process_DMA_RxData>
}
 8101da2:	bf00      	nop
 8101da4:	3708      	adds	r7, #8
 8101da6:	46bd      	mov	sp, r7
 8101da8:	bd80      	pop	{r7, pc}
 8101daa:	bf00      	nop
 8101dac:	40004800 	.word	0x40004800
 8101db0:	24000678 	.word	0x24000678
 8101db4:	40004400 	.word	0x40004400
 8101db8:	24000658 	.word	0x24000658

08101dbc <Process_DMA_RxData>:
  * @brief  Processes the received UART data from DMA buffer and sends it over UDP.
  * @param  data: Pointer to the DMA buffer containing received data.
  * @param  len: Length of the received data to process.
  */
void Process_DMA_RxData(uint8_t *data, uint16_t len)
{
 8101dbc:	b580      	push	{r7, lr}
 8101dbe:	b084      	sub	sp, #16
 8101dc0:	af00      	add	r7, sp, #0
 8101dc2:	6078      	str	r0, [r7, #4]
 8101dc4:	460b      	mov	r3, r1
 8101dc6:	807b      	strh	r3, [r7, #2]
    // Iterate through the received data and send each byte over UDP
    for (uint16_t i = 0; i < len; i++)
 8101dc8:	2300      	movs	r3, #0
 8101dca:	81fb      	strh	r3, [r7, #14]
 8101dcc:	e009      	b.n	8101de2 <Process_DMA_RxData+0x26>
    {
        udpsend_serial((const char *)&data[i], 1);  // Send each byte as a separate UDP packet
 8101dce:	89fb      	ldrh	r3, [r7, #14]
 8101dd0:	687a      	ldr	r2, [r7, #4]
 8101dd2:	4413      	add	r3, r2
 8101dd4:	2101      	movs	r1, #1
 8101dd6:	4618      	mov	r0, r3
 8101dd8:	f000 fbd6 	bl	8102588 <udpsend_serial>
    for (uint16_t i = 0; i < len; i++)
 8101ddc:	89fb      	ldrh	r3, [r7, #14]
 8101dde:	3301      	adds	r3, #1
 8101de0:	81fb      	strh	r3, [r7, #14]
 8101de2:	89fa      	ldrh	r2, [r7, #14]
 8101de4:	887b      	ldrh	r3, [r7, #2]
 8101de6:	429a      	cmp	r2, r3
 8101de8:	d3f1      	bcc.n	8101dce <Process_DMA_RxData+0x12>
    }
}
 8101dea:	bf00      	nop
 8101dec:	bf00      	nop
 8101dee:	3710      	adds	r7, #16
 8101df0:	46bd      	mov	sp, r7
 8101df2:	bd80      	pop	{r7, pc}

08101df4 <Switch_RS_Mode>:
/**
  * @brief  Switches the mode of serial communication between RS232 and RS485.
  * @param  RS_Mode: Mode to switch to (RS232_MODE or RS485_MODE).
  */
void Switch_RS_Mode(uint8_t RS_Mode)
{
 8101df4:	b580      	push	{r7, lr}
 8101df6:	b082      	sub	sp, #8
 8101df8:	af00      	add	r7, sp, #0
 8101dfa:	4603      	mov	r3, r0
 8101dfc:	71fb      	strb	r3, [r7, #7]
    mode = RS_Mode;  // Set the global mode variable
 8101dfe:	4a14      	ldr	r2, [pc, #80]	@ (8101e50 <Switch_RS_Mode+0x5c>)
 8101e00:	79fb      	ldrb	r3, [r7, #7]
 8101e02:	7013      	strb	r3, [r2, #0]

    if (RS_Mode == RS232_MODE)
 8101e04:	79fb      	ldrb	r3, [r7, #7]
 8101e06:	2b00      	cmp	r3, #0
 8101e08:	d10d      	bne.n	8101e26 <Switch_RS_Mode+0x32>
    {
        HAL_GPIO_WritePin(RS_MODE_SELECT_GPIO_Port, RS_MODE_SELECT_Pin, GPIO_PIN_RESET);  // Switch to RS232
 8101e0a:	2200      	movs	r2, #0
 8101e0c:	2104      	movs	r1, #4
 8101e0e:	4811      	ldr	r0, [pc, #68]	@ (8101e54 <Switch_RS_Mode+0x60>)
 8101e10:	f006 ff28 	bl	8108c64 <HAL_GPIO_WritePin>
        HAL_UART_Receive_DMA(&huart2, RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);  // Restart DMA reception for RS232
 8101e14:	221e      	movs	r2, #30
 8101e16:	4910      	ldr	r1, [pc, #64]	@ (8101e58 <Switch_RS_Mode+0x64>)
 8101e18:	4810      	ldr	r0, [pc, #64]	@ (8101e5c <Switch_RS_Mode+0x68>)
 8101e1a:	f00b fa4f 	bl	810d2bc <HAL_UART_Receive_DMA>
        printf("Switched to RS232 mode\n");
 8101e1e:	4810      	ldr	r0, [pc, #64]	@ (8101e60 <Switch_RS_Mode+0x6c>)
 8101e20:	f020 f818 	bl	8121e54 <puts>
    {
        HAL_GPIO_WritePin(RS_MODE_SELECT_GPIO_Port, RS_MODE_SELECT_Pin, GPIO_PIN_SET);  // Switch to RS485
        HAL_UART_Receive_DMA(&huart3, RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);  // Restart DMA reception for RS485
        printf("Switched to RS485 mode\n");
    }
}
 8101e24:	e00f      	b.n	8101e46 <Switch_RS_Mode+0x52>
    else if (RS_Mode == RS485_MODE)
 8101e26:	79fb      	ldrb	r3, [r7, #7]
 8101e28:	2b01      	cmp	r3, #1
 8101e2a:	d10c      	bne.n	8101e46 <Switch_RS_Mode+0x52>
        HAL_GPIO_WritePin(RS_MODE_SELECT_GPIO_Port, RS_MODE_SELECT_Pin, GPIO_PIN_SET);  // Switch to RS485
 8101e2c:	2201      	movs	r2, #1
 8101e2e:	2104      	movs	r1, #4
 8101e30:	4808      	ldr	r0, [pc, #32]	@ (8101e54 <Switch_RS_Mode+0x60>)
 8101e32:	f006 ff17 	bl	8108c64 <HAL_GPIO_WritePin>
        HAL_UART_Receive_DMA(&huart3, RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);  // Restart DMA reception for RS485
 8101e36:	221e      	movs	r2, #30
 8101e38:	490a      	ldr	r1, [pc, #40]	@ (8101e64 <Switch_RS_Mode+0x70>)
 8101e3a:	480b      	ldr	r0, [pc, #44]	@ (8101e68 <Switch_RS_Mode+0x74>)
 8101e3c:	f00b fa3e 	bl	810d2bc <HAL_UART_Receive_DMA>
        printf("Switched to RS485 mode\n");
 8101e40:	480a      	ldr	r0, [pc, #40]	@ (8101e6c <Switch_RS_Mode+0x78>)
 8101e42:	f020 f807 	bl	8121e54 <puts>
}
 8101e46:	bf00      	nop
 8101e48:	3708      	adds	r7, #8
 8101e4a:	46bd      	mov	sp, r7
 8101e4c:	bd80      	pop	{r7, pc}
 8101e4e:	bf00      	nop
 8101e50:	24000696 	.word	0x24000696
 8101e54:	58020c00 	.word	0x58020c00
 8101e58:	24000658 	.word	0x24000658
 8101e5c:	24000434 	.word	0x24000434
 8101e60:	081249f0 	.word	0x081249f0
 8101e64:	24000678 	.word	0x24000678
 8101e68:	240004c8 	.word	0x240004c8
 8101e6c:	08124a08 	.word	0x08124a08

08101e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101e70:	b580      	push	{r7, lr}
 8101e72:	b082      	sub	sp, #8
 8101e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101e76:	4b0c      	ldr	r3, [pc, #48]	@ (8101ea8 <HAL_MspInit+0x38>)
 8101e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8101ea8 <HAL_MspInit+0x38>)
 8101e7e:	f043 0302 	orr.w	r3, r3, #2
 8101e82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101e86:	4b08      	ldr	r3, [pc, #32]	@ (8101ea8 <HAL_MspInit+0x38>)
 8101e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101e8c:	f003 0302 	and.w	r3, r3, #2
 8101e90:	607b      	str	r3, [r7, #4]
 8101e92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101e94:	2200      	movs	r2, #0
 8101e96:	210f      	movs	r1, #15
 8101e98:	f06f 0001 	mvn.w	r0, #1
 8101e9c:	f002 f8a7 	bl	8103fee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101ea0:	bf00      	nop
 8101ea2:	3708      	adds	r7, #8
 8101ea4:	46bd      	mov	sp, r7
 8101ea6:	bd80      	pop	{r7, pc}
 8101ea8:	58024400 	.word	0x58024400

08101eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101eac:	b580      	push	{r7, lr}
 8101eae:	b0b6      	sub	sp, #216	@ 0xd8
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101eb4:	f107 0310 	add.w	r3, r7, #16
 8101eb8:	22c8      	movs	r2, #200	@ 0xc8
 8101eba:	2100      	movs	r1, #0
 8101ebc:	4618      	mov	r0, r3
 8101ebe:	f020 f907 	bl	81220d0 <memset>
  if(hadc->Instance==ADC3)
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8101f38 <HAL_ADC_MspInit+0x8c>)
 8101ec8:	4293      	cmp	r3, r2
 8101eca:	d131      	bne.n	8101f30 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101ecc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8101ed0:	f04f 0300 	mov.w	r3, #0
 8101ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8101ed8:	2302      	movs	r3, #2
 8101eda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 64;
 8101edc:	2340      	movs	r3, #64	@ 0x40
 8101ede:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 16;
 8101ee0:	2310      	movs	r3, #16
 8101ee2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101ee4:	2302      	movs	r3, #2
 8101ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101ee8:	2302      	movs	r3, #2
 8101eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101eec:	23c0      	movs	r3, #192	@ 0xc0
 8101eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8101ef0:	2300      	movs	r3, #0
 8101ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101ef4:	2300      	movs	r3, #0
 8101ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101efe:	f107 0310 	add.w	r3, r7, #16
 8101f02:	4618      	mov	r0, r3
 8101f04:	f007 ff64 	bl	8109dd0 <HAL_RCCEx_PeriphCLKConfig>
 8101f08:	4603      	mov	r3, r0
 8101f0a:	2b00      	cmp	r3, #0
 8101f0c:	d001      	beq.n	8101f12 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8101f0e:	f7ff ff07 	bl	8101d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101f12:	4b0a      	ldr	r3, [pc, #40]	@ (8101f3c <HAL_ADC_MspInit+0x90>)
 8101f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f18:	4a08      	ldr	r2, [pc, #32]	@ (8101f3c <HAL_ADC_MspInit+0x90>)
 8101f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f22:	4b06      	ldr	r3, [pc, #24]	@ (8101f3c <HAL_ADC_MspInit+0x90>)
 8101f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101f2c:	60fb      	str	r3, [r7, #12]
 8101f2e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8101f30:	bf00      	nop
 8101f32:	37d8      	adds	r7, #216	@ 0xd8
 8101f34:	46bd      	mov	sp, r7
 8101f36:	bd80      	pop	{r7, pc}
 8101f38:	58026000 	.word	0x58026000
 8101f3c:	58024400 	.word	0x58024400

08101f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101f40:	b480      	push	{r7}
 8101f42:	b085      	sub	sp, #20
 8101f44:	af00      	add	r7, sp, #0
 8101f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	681b      	ldr	r3, [r3, #0]
 8101f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8101f7c <HAL_TIM_Base_MspInit+0x3c>)
 8101f4e:	4293      	cmp	r3, r2
 8101f50:	d10e      	bne.n	8101f70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101f52:	4b0b      	ldr	r3, [pc, #44]	@ (8101f80 <HAL_TIM_Base_MspInit+0x40>)
 8101f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f58:	4a09      	ldr	r2, [pc, #36]	@ (8101f80 <HAL_TIM_Base_MspInit+0x40>)
 8101f5a:	f043 0301 	orr.w	r3, r3, #1
 8101f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101f62:	4b07      	ldr	r3, [pc, #28]	@ (8101f80 <HAL_TIM_Base_MspInit+0x40>)
 8101f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f68:	f003 0301 	and.w	r3, r3, #1
 8101f6c:	60fb      	str	r3, [r7, #12]
 8101f6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8101f70:	bf00      	nop
 8101f72:	3714      	adds	r7, #20
 8101f74:	46bd      	mov	sp, r7
 8101f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7a:	4770      	bx	lr
 8101f7c:	40010000 	.word	0x40010000
 8101f80:	58024400 	.word	0x58024400

08101f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101f84:	b580      	push	{r7, lr}
 8101f86:	b0be      	sub	sp, #248	@ 0xf8
 8101f88:	af00      	add	r7, sp, #0
 8101f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101f90:	2200      	movs	r2, #0
 8101f92:	601a      	str	r2, [r3, #0]
 8101f94:	605a      	str	r2, [r3, #4]
 8101f96:	609a      	str	r2, [r3, #8]
 8101f98:	60da      	str	r2, [r3, #12]
 8101f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f9c:	f107 0318 	add.w	r3, r7, #24
 8101fa0:	22c8      	movs	r2, #200	@ 0xc8
 8101fa2:	2100      	movs	r1, #0
 8101fa4:	4618      	mov	r0, r3
 8101fa6:	f020 f893 	bl	81220d0 <memset>
  if(huart->Instance==USART2)
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	681b      	ldr	r3, [r3, #0]
 8101fae:	4a8f      	ldr	r2, [pc, #572]	@ (81021ec <HAL_UART_MspInit+0x268>)
 8101fb0:	4293      	cmp	r3, r2
 8101fb2:	f040 8088 	bne.w	81020c6 <HAL_UART_MspInit+0x142>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8101fb6:	f04f 0202 	mov.w	r2, #2
 8101fba:	f04f 0300 	mov.w	r3, #0
 8101fbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101fc2:	2300      	movs	r3, #0
 8101fc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fc8:	f107 0318 	add.w	r3, r7, #24
 8101fcc:	4618      	mov	r0, r3
 8101fce:	f007 feff 	bl	8109dd0 <HAL_RCCEx_PeriphCLKConfig>
 8101fd2:	4603      	mov	r3, r0
 8101fd4:	2b00      	cmp	r3, #0
 8101fd6:	d001      	beq.n	8101fdc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8101fd8:	f7ff fea2 	bl	8101d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8101fdc:	4b84      	ldr	r3, [pc, #528]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8101fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101fe2:	4a83      	ldr	r2, [pc, #524]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8101fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101fec:	4b80      	ldr	r3, [pc, #512]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8101fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101ff6:	617b      	str	r3, [r7, #20]
 8101ff8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ffa:	4b7d      	ldr	r3, [pc, #500]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8101ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102000:	4a7b      	ldr	r2, [pc, #492]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8102002:	f043 0308 	orr.w	r3, r3, #8
 8102006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810200a:	4b79      	ldr	r3, [pc, #484]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 810200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102010:	f003 0308 	and.w	r3, r3, #8
 8102014:	613b      	str	r3, [r7, #16]
 8102016:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8102018:	2360      	movs	r3, #96	@ 0x60
 810201a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810201e:	2302      	movs	r3, #2
 8102020:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102024:	2300      	movs	r3, #0
 8102026:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810202a:	2300      	movs	r3, #0
 810202c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8102030:	2307      	movs	r3, #7
 8102032:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102036:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810203a:	4619      	mov	r1, r3
 810203c:	486d      	ldr	r0, [pc, #436]	@ (81021f4 <HAL_UART_MspInit+0x270>)
 810203e:	f006 fc49 	bl	81088d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8102042:	4b6d      	ldr	r3, [pc, #436]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102044:	4a6d      	ldr	r2, [pc, #436]	@ (81021fc <HAL_UART_MspInit+0x278>)
 8102046:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8102048:	4b6b      	ldr	r3, [pc, #428]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 810204a:	222b      	movs	r2, #43	@ 0x2b
 810204c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810204e:	4b6a      	ldr	r3, [pc, #424]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102050:	2200      	movs	r2, #0
 8102052:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102054:	4b68      	ldr	r3, [pc, #416]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102056:	2200      	movs	r2, #0
 8102058:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 810205a:	4b67      	ldr	r3, [pc, #412]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 810205c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102060:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102062:	4b65      	ldr	r3, [pc, #404]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102064:	2200      	movs	r2, #0
 8102066:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102068:	4b63      	ldr	r3, [pc, #396]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 810206a:	2200      	movs	r2, #0
 810206c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 810206e:	4b62      	ldr	r3, [pc, #392]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102074:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102076:	4b60      	ldr	r3, [pc, #384]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102078:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810207c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 810207e:	4b5e      	ldr	r3, [pc, #376]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102080:	2204      	movs	r2, #4
 8102082:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8102084:	4b5c      	ldr	r3, [pc, #368]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102086:	2200      	movs	r2, #0
 8102088:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 810208a:	4b5b      	ldr	r3, [pc, #364]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 810208c:	2200      	movs	r2, #0
 810208e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8102090:	4b59      	ldr	r3, [pc, #356]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102092:	2200      	movs	r2, #0
 8102094:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8102096:	4858      	ldr	r0, [pc, #352]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 8102098:	f002 f862 	bl	8104160 <HAL_DMA_Init>
 810209c:	4603      	mov	r3, r0
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d001      	beq.n	81020a6 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 81020a2:	f7ff fe3d 	bl	8101d20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	4a53      	ldr	r2, [pc, #332]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 81020aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 81020ae:	4a52      	ldr	r2, [pc, #328]	@ (81021f8 <HAL_UART_MspInit+0x274>)
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 81020b4:	2200      	movs	r2, #0
 81020b6:	2105      	movs	r1, #5
 81020b8:	2026      	movs	r0, #38	@ 0x26
 81020ba:	f001 ff98 	bl	8103fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 81020be:	2026      	movs	r0, #38	@ 0x26
 81020c0:	f001 ffaf 	bl	8104022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81020c4:	e08d      	b.n	81021e2 <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART3)
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	4a4d      	ldr	r2, [pc, #308]	@ (8102200 <HAL_UART_MspInit+0x27c>)
 81020cc:	4293      	cmp	r3, r2
 81020ce:	f040 8088 	bne.w	81021e2 <HAL_UART_MspInit+0x25e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81020d2:	f04f 0202 	mov.w	r2, #2
 81020d6:	f04f 0300 	mov.w	r3, #0
 81020da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81020de:	2300      	movs	r3, #0
 81020e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81020e4:	f107 0318 	add.w	r3, r7, #24
 81020e8:	4618      	mov	r0, r3
 81020ea:	f007 fe71 	bl	8109dd0 <HAL_RCCEx_PeriphCLKConfig>
 81020ee:	4603      	mov	r3, r0
 81020f0:	2b00      	cmp	r3, #0
 81020f2:	d001      	beq.n	81020f8 <HAL_UART_MspInit+0x174>
      Error_Handler();
 81020f4:	f7ff fe14 	bl	8101d20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81020f8:	4b3d      	ldr	r3, [pc, #244]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 81020fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81020fe:	4a3c      	ldr	r2, [pc, #240]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8102100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8102104:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102108:	4b39      	ldr	r3, [pc, #228]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 810210a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810210e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102112:	60fb      	str	r3, [r7, #12]
 8102114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102116:	4b36      	ldr	r3, [pc, #216]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8102118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810211c:	4a34      	ldr	r2, [pc, #208]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 810211e:	f043 0304 	orr.w	r3, r3, #4
 8102122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102126:	4b32      	ldr	r3, [pc, #200]	@ (81021f0 <HAL_UART_MspInit+0x26c>)
 8102128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810212c:	f003 0304 	and.w	r3, r3, #4
 8102130:	60bb      	str	r3, [r7, #8]
 8102132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8102134:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8102138:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810213c:	2302      	movs	r3, #2
 810213e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102142:	2300      	movs	r3, #0
 8102144:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102148:	2300      	movs	r3, #0
 810214a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810214e:	2307      	movs	r3, #7
 8102150:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102154:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8102158:	4619      	mov	r1, r3
 810215a:	482a      	ldr	r0, [pc, #168]	@ (8102204 <HAL_UART_MspInit+0x280>)
 810215c:	f006 fbba 	bl	81088d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8102160:	4b29      	ldr	r3, [pc, #164]	@ (8102208 <HAL_UART_MspInit+0x284>)
 8102162:	4a2a      	ldr	r2, [pc, #168]	@ (810220c <HAL_UART_MspInit+0x288>)
 8102164:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102166:	4b28      	ldr	r3, [pc, #160]	@ (8102208 <HAL_UART_MspInit+0x284>)
 8102168:	222d      	movs	r2, #45	@ 0x2d
 810216a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810216c:	4b26      	ldr	r3, [pc, #152]	@ (8102208 <HAL_UART_MspInit+0x284>)
 810216e:	2200      	movs	r2, #0
 8102170:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102172:	4b25      	ldr	r3, [pc, #148]	@ (8102208 <HAL_UART_MspInit+0x284>)
 8102174:	2200      	movs	r2, #0
 8102176:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102178:	4b23      	ldr	r3, [pc, #140]	@ (8102208 <HAL_UART_MspInit+0x284>)
 810217a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810217e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102180:	4b21      	ldr	r3, [pc, #132]	@ (8102208 <HAL_UART_MspInit+0x284>)
 8102182:	2200      	movs	r2, #0
 8102184:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102186:	4b20      	ldr	r3, [pc, #128]	@ (8102208 <HAL_UART_MspInit+0x284>)
 8102188:	2200      	movs	r2, #0
 810218a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 810218c:	4b1e      	ldr	r3, [pc, #120]	@ (8102208 <HAL_UART_MspInit+0x284>)
 810218e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102192:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102194:	4b1c      	ldr	r3, [pc, #112]	@ (8102208 <HAL_UART_MspInit+0x284>)
 8102196:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810219a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 810219c:	4b1a      	ldr	r3, [pc, #104]	@ (8102208 <HAL_UART_MspInit+0x284>)
 810219e:	2204      	movs	r2, #4
 81021a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 81021a2:	4b19      	ldr	r3, [pc, #100]	@ (8102208 <HAL_UART_MspInit+0x284>)
 81021a4:	2200      	movs	r2, #0
 81021a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 81021a8:	4b17      	ldr	r3, [pc, #92]	@ (8102208 <HAL_UART_MspInit+0x284>)
 81021aa:	2200      	movs	r2, #0
 81021ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 81021ae:	4b16      	ldr	r3, [pc, #88]	@ (8102208 <HAL_UART_MspInit+0x284>)
 81021b0:	2200      	movs	r2, #0
 81021b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81021b4:	4814      	ldr	r0, [pc, #80]	@ (8102208 <HAL_UART_MspInit+0x284>)
 81021b6:	f001 ffd3 	bl	8104160 <HAL_DMA_Init>
 81021ba:	4603      	mov	r3, r0
 81021bc:	2b00      	cmp	r3, #0
 81021be:	d001      	beq.n	81021c4 <HAL_UART_MspInit+0x240>
      Error_Handler();
 81021c0:	f7ff fdae 	bl	8101d20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	4a10      	ldr	r2, [pc, #64]	@ (8102208 <HAL_UART_MspInit+0x284>)
 81021c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 81021cc:	4a0e      	ldr	r2, [pc, #56]	@ (8102208 <HAL_UART_MspInit+0x284>)
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 81021d2:	2200      	movs	r2, #0
 81021d4:	2105      	movs	r1, #5
 81021d6:	2027      	movs	r0, #39	@ 0x27
 81021d8:	f001 ff09 	bl	8103fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 81021dc:	2027      	movs	r0, #39	@ 0x27
 81021de:	f001 ff20 	bl	8104022 <HAL_NVIC_EnableIRQ>
}
 81021e2:	bf00      	nop
 81021e4:	37f8      	adds	r7, #248	@ 0xf8
 81021e6:	46bd      	mov	sp, r7
 81021e8:	bd80      	pop	{r7, pc}
 81021ea:	bf00      	nop
 81021ec:	40004400 	.word	0x40004400
 81021f0:	58024400 	.word	0x58024400
 81021f4:	58020c00 	.word	0x58020c00
 81021f8:	2400055c 	.word	0x2400055c
 81021fc:	40020028 	.word	0x40020028
 8102200:	40004800 	.word	0x40004800
 8102204:	58020800 	.word	0x58020800
 8102208:	240005d4 	.word	0x240005d4
 810220c:	40020010 	.word	0x40020010

08102210 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102210:	b580      	push	{r7, lr}
 8102212:	b090      	sub	sp, #64	@ 0x40
 8102214:	af00      	add	r7, sp, #0
 8102216:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	2b0f      	cmp	r3, #15
 810221c:	d827      	bhi.n	810226e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 810221e:	2200      	movs	r2, #0
 8102220:	6879      	ldr	r1, [r7, #4]
 8102222:	2036      	movs	r0, #54	@ 0x36
 8102224:	f001 fee3 	bl	8103fee <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8102228:	2036      	movs	r0, #54	@ 0x36
 810222a:	f001 fefa 	bl	8104022 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810222e:	4a29      	ldr	r2, [pc, #164]	@ (81022d4 <HAL_InitTick+0xc4>)
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8102234:	4b28      	ldr	r3, [pc, #160]	@ (81022d8 <HAL_InitTick+0xc8>)
 8102236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810223a:	4a27      	ldr	r2, [pc, #156]	@ (81022d8 <HAL_InitTick+0xc8>)
 810223c:	f043 0310 	orr.w	r3, r3, #16
 8102240:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102244:	4b24      	ldr	r3, [pc, #144]	@ (81022d8 <HAL_InitTick+0xc8>)
 8102246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810224a:	f003 0310 	and.w	r3, r3, #16
 810224e:	60fb      	str	r3, [r7, #12]
 8102250:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8102252:	f107 0210 	add.w	r2, r7, #16
 8102256:	f107 0314 	add.w	r3, r7, #20
 810225a:	4611      	mov	r1, r2
 810225c:	4618      	mov	r0, r3
 810225e:	f007 fd75 	bl	8109d4c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8102262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102264:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102268:	2b00      	cmp	r3, #0
 810226a:	d106      	bne.n	810227a <HAL_InitTick+0x6a>
 810226c:	e001      	b.n	8102272 <HAL_InitTick+0x62>
    return HAL_ERROR;
 810226e:	2301      	movs	r3, #1
 8102270:	e02b      	b.n	81022ca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8102272:	f007 fd3f 	bl	8109cf4 <HAL_RCC_GetPCLK1Freq>
 8102276:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102278:	e004      	b.n	8102284 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810227a:	f007 fd3b 	bl	8109cf4 <HAL_RCC_GetPCLK1Freq>
 810227e:	4603      	mov	r3, r0
 8102280:	005b      	lsls	r3, r3, #1
 8102282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102286:	4a15      	ldr	r2, [pc, #84]	@ (81022dc <HAL_InitTick+0xcc>)
 8102288:	fba2 2303 	umull	r2, r3, r2, r3
 810228c:	0c9b      	lsrs	r3, r3, #18
 810228e:	3b01      	subs	r3, #1
 8102290:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8102292:	4b13      	ldr	r3, [pc, #76]	@ (81022e0 <HAL_InitTick+0xd0>)
 8102294:	4a13      	ldr	r2, [pc, #76]	@ (81022e4 <HAL_InitTick+0xd4>)
 8102296:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8102298:	4b11      	ldr	r3, [pc, #68]	@ (81022e0 <HAL_InitTick+0xd0>)
 810229a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810229e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 81022a0:	4a0f      	ldr	r2, [pc, #60]	@ (81022e0 <HAL_InitTick+0xd0>)
 81022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81022a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 81022a6:	4b0e      	ldr	r3, [pc, #56]	@ (81022e0 <HAL_InitTick+0xd0>)
 81022a8:	2200      	movs	r2, #0
 81022aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022ac:	4b0c      	ldr	r3, [pc, #48]	@ (81022e0 <HAL_InitTick+0xd0>)
 81022ae:	2200      	movs	r2, #0
 81022b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 81022b2:	480b      	ldr	r0, [pc, #44]	@ (81022e0 <HAL_InitTick+0xd0>)
 81022b4:	f00a faca 	bl	810c84c <HAL_TIM_Base_Init>
 81022b8:	4603      	mov	r3, r0
 81022ba:	2b00      	cmp	r3, #0
 81022bc:	d104      	bne.n	81022c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 81022be:	4808      	ldr	r0, [pc, #32]	@ (81022e0 <HAL_InitTick+0xd0>)
 81022c0:	f00a fb1c 	bl	810c8fc <HAL_TIM_Base_Start_IT>
 81022c4:	4603      	mov	r3, r0
 81022c6:	e000      	b.n	81022ca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81022c8:	2301      	movs	r3, #1
}
 81022ca:	4618      	mov	r0, r3
 81022cc:	3740      	adds	r7, #64	@ 0x40
 81022ce:	46bd      	mov	sp, r7
 81022d0:	bd80      	pop	{r7, pc}
 81022d2:	bf00      	nop
 81022d4:	24000028 	.word	0x24000028
 81022d8:	58024400 	.word	0x58024400
 81022dc:	431bde83 	.word	0x431bde83
 81022e0:	24000698 	.word	0x24000698
 81022e4:	40001000 	.word	0x40001000

081022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81022e8:	b480      	push	{r7}
 81022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81022ec:	bf00      	nop
 81022ee:	e7fd      	b.n	81022ec <NMI_Handler+0x4>

081022f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81022f0:	b480      	push	{r7}
 81022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81022f4:	bf00      	nop
 81022f6:	e7fd      	b.n	81022f4 <HardFault_Handler+0x4>

081022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81022f8:	b480      	push	{r7}
 81022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81022fc:	bf00      	nop
 81022fe:	e7fd      	b.n	81022fc <MemManage_Handler+0x4>

08102300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102300:	b480      	push	{r7}
 8102302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102304:	bf00      	nop
 8102306:	e7fd      	b.n	8102304 <BusFault_Handler+0x4>

08102308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102308:	b480      	push	{r7}
 810230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810230c:	bf00      	nop
 810230e:	e7fd      	b.n	810230c <UsageFault_Handler+0x4>

08102310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102310:	b480      	push	{r7}
 8102312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102314:	bf00      	nop
 8102316:	46bd      	mov	sp, r7
 8102318:	f85d 7b04 	ldr.w	r7, [sp], #4
 810231c:	4770      	bx	lr

0810231e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 810231e:	b580      	push	{r7, lr}
 8102320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIGGER_IN_Pin);
 8102322:	2001      	movs	r0, #1
 8102324:	f006 fcb7 	bl	8108c96 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8102328:	bf00      	nop
 810232a:	bd80      	pop	{r7, pc}

0810232c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 810232c:	b580      	push	{r7, lr}
 810232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102330:	4802      	ldr	r0, [pc, #8]	@ (810233c <DMA1_Stream0_IRQHandler+0x10>)
 8102332:	f003 fa3f 	bl	81057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102336:	bf00      	nop
 8102338:	bd80      	pop	{r7, pc}
 810233a:	bf00      	nop
 810233c:	240005d4 	.word	0x240005d4

08102340 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102340:	b580      	push	{r7, lr}
 8102342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8102344:	4802      	ldr	r0, [pc, #8]	@ (8102350 <DMA1_Stream1_IRQHandler+0x10>)
 8102346:	f003 fa35 	bl	81057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810234a:	bf00      	nop
 810234c:	bd80      	pop	{r7, pc}
 810234e:	bf00      	nop
 8102350:	2400055c 	.word	0x2400055c

08102354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8102354:	b580      	push	{r7, lr}
 8102356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8102358:	4802      	ldr	r0, [pc, #8]	@ (8102364 <USART2_IRQHandler+0x10>)
 810235a:	f00a fffb 	bl	810d354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 810235e:	bf00      	nop
 8102360:	bd80      	pop	{r7, pc}
 8102362:	bf00      	nop
 8102364:	24000434 	.word	0x24000434

08102368 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102368:	b580      	push	{r7, lr}
 810236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 810236c:	4802      	ldr	r0, [pc, #8]	@ (8102378 <USART3_IRQHandler+0x10>)
 810236e:	f00a fff1 	bl	810d354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8102372:	bf00      	nop
 8102374:	bd80      	pop	{r7, pc}
 8102376:	bf00      	nop
 8102378:	240004c8 	.word	0x240004c8

0810237c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 810237c:	b580      	push	{r7, lr}
 810237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8102380:	4802      	ldr	r0, [pc, #8]	@ (810238c <TIM6_DAC_IRQHandler+0x10>)
 8102382:	f00a fb33 	bl	810c9ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8102386:	bf00      	nop
 8102388:	bd80      	pop	{r7, pc}
 810238a:	bf00      	nop
 810238c:	24000698 	.word	0x24000698

08102390 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8102390:	b580      	push	{r7, lr}
 8102392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8102394:	4802      	ldr	r0, [pc, #8]	@ (81023a0 <ETH_IRQHandler+0x10>)
 8102396:	f005 f8f3 	bl	8107580 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 810239a:	bf00      	nop
 810239c:	bd80      	pop	{r7, pc}
 810239e:	bf00      	nop
 81023a0:	24000778 	.word	0x24000778

081023a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81023a4:	b480      	push	{r7}
 81023a6:	af00      	add	r7, sp, #0
  return 1;
 81023a8:	2301      	movs	r3, #1
}
 81023aa:	4618      	mov	r0, r3
 81023ac:	46bd      	mov	sp, r7
 81023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023b2:	4770      	bx	lr

081023b4 <_kill>:

int _kill(int pid, int sig)
{
 81023b4:	b480      	push	{r7}
 81023b6:	b083      	sub	sp, #12
 81023b8:	af00      	add	r7, sp, #0
 81023ba:	6078      	str	r0, [r7, #4]
 81023bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81023be:	4b05      	ldr	r3, [pc, #20]	@ (81023d4 <_kill+0x20>)
 81023c0:	2216      	movs	r2, #22
 81023c2:	601a      	str	r2, [r3, #0]
  return -1;
 81023c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81023c8:	4618      	mov	r0, r3
 81023ca:	370c      	adds	r7, #12
 81023cc:	46bd      	mov	sp, r7
 81023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023d2:	4770      	bx	lr
 81023d4:	2401284c 	.word	0x2401284c

081023d8 <_exit>:

void _exit (int status)
{
 81023d8:	b580      	push	{r7, lr}
 81023da:	b082      	sub	sp, #8
 81023dc:	af00      	add	r7, sp, #0
 81023de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81023e0:	f04f 31ff 	mov.w	r1, #4294967295
 81023e4:	6878      	ldr	r0, [r7, #4]
 81023e6:	f7ff ffe5 	bl	81023b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 81023ea:	bf00      	nop
 81023ec:	e7fd      	b.n	81023ea <_exit+0x12>

081023ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81023ee:	b580      	push	{r7, lr}
 81023f0:	b086      	sub	sp, #24
 81023f2:	af00      	add	r7, sp, #0
 81023f4:	60f8      	str	r0, [r7, #12]
 81023f6:	60b9      	str	r1, [r7, #8]
 81023f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81023fa:	2300      	movs	r3, #0
 81023fc:	617b      	str	r3, [r7, #20]
 81023fe:	e00a      	b.n	8102416 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102400:	f3af 8000 	nop.w
 8102404:	4601      	mov	r1, r0
 8102406:	68bb      	ldr	r3, [r7, #8]
 8102408:	1c5a      	adds	r2, r3, #1
 810240a:	60ba      	str	r2, [r7, #8]
 810240c:	b2ca      	uxtb	r2, r1
 810240e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102410:	697b      	ldr	r3, [r7, #20]
 8102412:	3301      	adds	r3, #1
 8102414:	617b      	str	r3, [r7, #20]
 8102416:	697a      	ldr	r2, [r7, #20]
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	429a      	cmp	r2, r3
 810241c:	dbf0      	blt.n	8102400 <_read+0x12>
  }

  return len;
 810241e:	687b      	ldr	r3, [r7, #4]
}
 8102420:	4618      	mov	r0, r3
 8102422:	3718      	adds	r7, #24
 8102424:	46bd      	mov	sp, r7
 8102426:	bd80      	pop	{r7, pc}

08102428 <_close>:
  }
  return len;
}

int _close(int file)
{
 8102428:	b480      	push	{r7}
 810242a:	b083      	sub	sp, #12
 810242c:	af00      	add	r7, sp, #0
 810242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102434:	4618      	mov	r0, r3
 8102436:	370c      	adds	r7, #12
 8102438:	46bd      	mov	sp, r7
 810243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810243e:	4770      	bx	lr

08102440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102440:	b480      	push	{r7}
 8102442:	b083      	sub	sp, #12
 8102444:	af00      	add	r7, sp, #0
 8102446:	6078      	str	r0, [r7, #4]
 8102448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810244a:	683b      	ldr	r3, [r7, #0]
 810244c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8102450:	605a      	str	r2, [r3, #4]
  return 0;
 8102452:	2300      	movs	r3, #0
}
 8102454:	4618      	mov	r0, r3
 8102456:	370c      	adds	r7, #12
 8102458:	46bd      	mov	sp, r7
 810245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810245e:	4770      	bx	lr

08102460 <_isatty>:

int _isatty(int file)
{
 8102460:	b480      	push	{r7}
 8102462:	b083      	sub	sp, #12
 8102464:	af00      	add	r7, sp, #0
 8102466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102468:	2301      	movs	r3, #1
}
 810246a:	4618      	mov	r0, r3
 810246c:	370c      	adds	r7, #12
 810246e:	46bd      	mov	sp, r7
 8102470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102474:	4770      	bx	lr

08102476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102476:	b480      	push	{r7}
 8102478:	b085      	sub	sp, #20
 810247a:	af00      	add	r7, sp, #0
 810247c:	60f8      	str	r0, [r7, #12]
 810247e:	60b9      	str	r1, [r7, #8]
 8102480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102482:	2300      	movs	r3, #0
}
 8102484:	4618      	mov	r0, r3
 8102486:	3714      	adds	r7, #20
 8102488:	46bd      	mov	sp, r7
 810248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810248e:	4770      	bx	lr

08102490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102490:	b480      	push	{r7}
 8102492:	b087      	sub	sp, #28
 8102494:	af00      	add	r7, sp, #0
 8102496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102498:	4a14      	ldr	r2, [pc, #80]	@ (81024ec <_sbrk+0x5c>)
 810249a:	4b15      	ldr	r3, [pc, #84]	@ (81024f0 <_sbrk+0x60>)
 810249c:	1ad3      	subs	r3, r2, r3
 810249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81024a0:	697b      	ldr	r3, [r7, #20]
 81024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81024a4:	4b13      	ldr	r3, [pc, #76]	@ (81024f4 <_sbrk+0x64>)
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	2b00      	cmp	r3, #0
 81024aa:	d102      	bne.n	81024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81024ac:	4b11      	ldr	r3, [pc, #68]	@ (81024f4 <_sbrk+0x64>)
 81024ae:	4a12      	ldr	r2, [pc, #72]	@ (81024f8 <_sbrk+0x68>)
 81024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81024b2:	4b10      	ldr	r3, [pc, #64]	@ (81024f4 <_sbrk+0x64>)
 81024b4:	681a      	ldr	r2, [r3, #0]
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	4413      	add	r3, r2
 81024ba:	693a      	ldr	r2, [r7, #16]
 81024bc:	429a      	cmp	r2, r3
 81024be:	d205      	bcs.n	81024cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 81024c0:	4b0e      	ldr	r3, [pc, #56]	@ (81024fc <_sbrk+0x6c>)
 81024c2:	220c      	movs	r2, #12
 81024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81024c6:	f04f 33ff 	mov.w	r3, #4294967295
 81024ca:	e009      	b.n	81024e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 81024cc:	4b09      	ldr	r3, [pc, #36]	@ (81024f4 <_sbrk+0x64>)
 81024ce:	681b      	ldr	r3, [r3, #0]
 81024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81024d2:	4b08      	ldr	r3, [pc, #32]	@ (81024f4 <_sbrk+0x64>)
 81024d4:	681a      	ldr	r2, [r3, #0]
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	4413      	add	r3, r2
 81024da:	4a06      	ldr	r2, [pc, #24]	@ (81024f4 <_sbrk+0x64>)
 81024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81024de:	68fb      	ldr	r3, [r7, #12]
}
 81024e0:	4618      	mov	r0, r3
 81024e2:	371c      	adds	r7, #28
 81024e4:	46bd      	mov	sp, r7
 81024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ea:	4770      	bx	lr
 81024ec:	24080000 	.word	0x24080000
 81024f0:	00000400 	.word	0x00000400
 81024f4:	240006e4 	.word	0x240006e4
 81024f8:	24012860 	.word	0x24012860
 81024fc:	2401284c 	.word	0x2401284c

08102500 <udpsend_trigger>:
  * @param  data: Pointer to the data to be sent.
  * @param  len: Length of the data.
  * @retval None
  */
void udpsend_trigger(const char *data, size_t len)
{
 8102500:	b580      	push	{r7, lr}
 8102502:	b084      	sub	sp, #16
 8102504:	af00      	add	r7, sp, #0
 8102506:	6078      	str	r0, [r7, #4]
 8102508:	6039      	str	r1, [r7, #0]
    err_t err;
    struct netbuf *buf = netbuf_new();
 810250a:	f016 fae3 	bl	8118ad4 <netbuf_new>
 810250e:	60f8      	str	r0, [r7, #12]

    if (buf == NULL)
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	2b00      	cmp	r3, #0
 8102514:	d103      	bne.n	810251e <udpsend_trigger+0x1e>
    {
        printf("Failed to create netbuf for trigger data\n");
 8102516:	4817      	ldr	r0, [pc, #92]	@ (8102574 <udpsend_trigger+0x74>)
 8102518:	f01f fc9c 	bl	8121e54 <puts>
        return;
 810251c:	e027      	b.n	810256e <udpsend_trigger+0x6e>
    }

    /* Reference the data directly without copying */
    if (netbuf_ref(buf, data, len) != ERR_OK)
 810251e:	683b      	ldr	r3, [r7, #0]
 8102520:	b29b      	uxth	r3, r3
 8102522:	461a      	mov	r2, r3
 8102524:	6879      	ldr	r1, [r7, #4]
 8102526:	68f8      	ldr	r0, [r7, #12]
 8102528:	f016 fb52 	bl	8118bd0 <netbuf_ref>
 810252c:	4603      	mov	r3, r0
 810252e:	2b00      	cmp	r3, #0
 8102530:	d006      	beq.n	8102540 <udpsend_trigger+0x40>
    {
        printf("Failed to reference trigger data\n");
 8102532:	4811      	ldr	r0, [pc, #68]	@ (8102578 <udpsend_trigger+0x78>)
 8102534:	f01f fc8e 	bl	8121e54 <puts>
        netbuf_delete(buf);
 8102538:	68f8      	ldr	r0, [r7, #12]
 810253a:	f016 fadf 	bl	8118afc <netbuf_delete>
        return;
 810253e:	e016      	b.n	810256e <udpsend_trigger+0x6e>
    }

    /* Send trigger data to the server's IP on the receiving port */
    err = netconn_sendto(conn_send_trigger, buf, &server_addr, LOCAL_PORT_RECV);
 8102540:	4b0e      	ldr	r3, [pc, #56]	@ (810257c <udpsend_trigger+0x7c>)
 8102542:	6818      	ldr	r0, [r3, #0]
 8102544:	f241 338e 	movw	r3, #5006	@ 0x138e
 8102548:	4a0d      	ldr	r2, [pc, #52]	@ (8102580 <udpsend_trigger+0x80>)
 810254a:	68f9      	ldr	r1, [r7, #12]
 810254c:	f011 fb15 	bl	8113b7a <netconn_sendto>
 8102550:	4603      	mov	r3, r0
 8102552:	72fb      	strb	r3, [r7, #11]
    if (err != ERR_OK)
 8102554:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8102558:	2b00      	cmp	r3, #0
 810255a:	d005      	beq.n	8102568 <udpsend_trigger+0x68>
    {
        printf("Failed to send trigger data: %d\n", err);
 810255c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8102560:	4619      	mov	r1, r3
 8102562:	4808      	ldr	r0, [pc, #32]	@ (8102584 <udpsend_trigger+0x84>)
 8102564:	f01f fc0e 	bl	8121d84 <iprintf>
    }

    netbuf_delete(buf);
 8102568:	68f8      	ldr	r0, [r7, #12]
 810256a:	f016 fac7 	bl	8118afc <netbuf_delete>
}
 810256e:	3710      	adds	r7, #16
 8102570:	46bd      	mov	sp, r7
 8102572:	bd80      	pop	{r7, pc}
 8102574:	08124a84 	.word	0x08124a84
 8102578:	08124ab0 	.word	0x08124ab0
 810257c:	240006e8 	.word	0x240006e8
 8102580:	240006f0 	.word	0x240006f0
 8102584:	08124ad4 	.word	0x08124ad4

08102588 <udpsend_serial>:
  * @param  data: Pointer to the data to be sent.
  * @param  len: Length of the data.
  * @retval None
  */
void udpsend_serial(const char *data, size_t len)
{
 8102588:	b580      	push	{r7, lr}
 810258a:	b086      	sub	sp, #24
 810258c:	af00      	add	r7, sp, #0
 810258e:	6078      	str	r0, [r7, #4]
 8102590:	6039      	str	r1, [r7, #0]
    err_t err;
    struct netbuf *buf = netbuf_new();
 8102592:	f016 fa9f 	bl	8118ad4 <netbuf_new>
 8102596:	6178      	str	r0, [r7, #20]

    if (buf == NULL)
 8102598:	697b      	ldr	r3, [r7, #20]
 810259a:	2b00      	cmp	r3, #0
 810259c:	d103      	bne.n	81025a6 <udpsend_serial+0x1e>
    {
        printf("Failed to create netbuf for serial data\n");
 810259e:	481d      	ldr	r0, [pc, #116]	@ (8102614 <udpsend_serial+0x8c>)
 81025a0:	f01f fc58 	bl	8121e54 <puts>
        return;
 81025a4:	e032      	b.n	810260c <udpsend_serial+0x84>
    }

    // Allocate space and copy the single byte (or data of size `len`)
    char *udp_data = (char*)netbuf_alloc(buf, len);
 81025a6:	683b      	ldr	r3, [r7, #0]
 81025a8:	b29b      	uxth	r3, r3
 81025aa:	4619      	mov	r1, r3
 81025ac:	6978      	ldr	r0, [r7, #20]
 81025ae:	f016 fac5 	bl	8118b3c <netbuf_alloc>
 81025b2:	6138      	str	r0, [r7, #16]
    if (udp_data == NULL)
 81025b4:	693b      	ldr	r3, [r7, #16]
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d106      	bne.n	81025c8 <udpsend_serial+0x40>
    {
        printf("Failed to allocate space for serial data\n");
 81025ba:	4817      	ldr	r0, [pc, #92]	@ (8102618 <udpsend_serial+0x90>)
 81025bc:	f01f fc4a 	bl	8121e54 <puts>
        netbuf_delete(buf);
 81025c0:	6978      	ldr	r0, [r7, #20]
 81025c2:	f016 fa9b 	bl	8118afc <netbuf_delete>
        return;
 81025c6:	e021      	b.n	810260c <udpsend_serial+0x84>
    }

    memcpy(udp_data, data, len);  // Copy the data (usually 1 byte)
 81025c8:	683a      	ldr	r2, [r7, #0]
 81025ca:	6879      	ldr	r1, [r7, #4]
 81025cc:	6938      	ldr	r0, [r7, #16]
 81025ce:	f01f fe7a 	bl	81222c6 <memcpy>

    // Debugging: Log the byte being sent
    printf("Sending serial byte: %.*s\n", (int)len, udp_data);
 81025d2:	683b      	ldr	r3, [r7, #0]
 81025d4:	693a      	ldr	r2, [r7, #16]
 81025d6:	4619      	mov	r1, r3
 81025d8:	4810      	ldr	r0, [pc, #64]	@ (810261c <udpsend_serial+0x94>)
 81025da:	f01f fbd3 	bl	8121d84 <iprintf>

    // Send the byte to the server's IP on the receiving port
    err = netconn_sendto(conn_send_serial, buf, &server_addr, LOCAL_PORT_RECV);
 81025de:	4b10      	ldr	r3, [pc, #64]	@ (8102620 <udpsend_serial+0x98>)
 81025e0:	6818      	ldr	r0, [r3, #0]
 81025e2:	f241 338e 	movw	r3, #5006	@ 0x138e
 81025e6:	4a0f      	ldr	r2, [pc, #60]	@ (8102624 <udpsend_serial+0x9c>)
 81025e8:	6979      	ldr	r1, [r7, #20]
 81025ea:	f011 fac6 	bl	8113b7a <netconn_sendto>
 81025ee:	4603      	mov	r3, r0
 81025f0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK)
 81025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d005      	beq.n	8102606 <udpsend_serial+0x7e>
    {
        printf("Failed to send serial data: %d\n", err);
 81025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81025fe:	4619      	mov	r1, r3
 8102600:	4809      	ldr	r0, [pc, #36]	@ (8102628 <udpsend_serial+0xa0>)
 8102602:	f01f fbbf 	bl	8121d84 <iprintf>
    }

    netbuf_delete(buf);
 8102606:	6978      	ldr	r0, [r7, #20]
 8102608:	f016 fa78 	bl	8118afc <netbuf_delete>
}
 810260c:	3718      	adds	r7, #24
 810260e:	46bd      	mov	sp, r7
 8102610:	bd80      	pop	{r7, pc}
 8102612:	bf00      	nop
 8102614:	08124af8 	.word	0x08124af8
 8102618:	08124b20 	.word	0x08124b20
 810261c:	08124b4c 	.word	0x08124b4c
 8102620:	240006ec 	.word	0x240006ec
 8102624:	240006f0 	.word	0x240006f0
 8102628:	08124b68 	.word	0x08124b68

0810262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810262c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8102664 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102630:	f7fe f836 	bl	81006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102634:	480c      	ldr	r0, [pc, #48]	@ (8102668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102636:	490d      	ldr	r1, [pc, #52]	@ (810266c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102638:	4a0d      	ldr	r2, [pc, #52]	@ (8102670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810263a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810263c:	e002      	b.n	8102644 <LoopCopyDataInit>

0810263e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810263e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102642:	3304      	adds	r3, #4

08102644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102648:	d3f9      	bcc.n	810263e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810264a:	4a0a      	ldr	r2, [pc, #40]	@ (8102674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810264c:	4c0a      	ldr	r4, [pc, #40]	@ (8102678 <LoopFillZerobss+0x22>)
  movs r3, #0
 810264e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102650:	e001      	b.n	8102656 <LoopFillZerobss>

08102652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102654:	3204      	adds	r2, #4

08102656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102658:	d3fb      	bcc.n	8102652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810265a:	f01f fe0d 	bl	8122278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810265e:	f7fe fe0b 	bl	8101278 <main>
  bx  lr
 8102662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102664:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8102668:	24000000 	.word	0x24000000
  ldr r1, =_edata
 810266c:	2400021c 	.word	0x2400021c
  ldr r2, =_sidata
 8102670:	08128e4c 	.word	0x08128e4c
  ldr r2, =_sbss
 8102674:	2400021c 	.word	0x2400021c
  ldr r4, =_ebss
 8102678:	2401285c 	.word	0x2401285c

0810267c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810267c:	e7fe      	b.n	810267c <ADC3_IRQHandler>

0810267e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 810267e:	b480      	push	{r7}
 8102680:	b083      	sub	sp, #12
 8102682:	af00      	add	r7, sp, #0
 8102684:	6078      	str	r0, [r7, #4]
 8102686:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	2b00      	cmp	r3, #0
 810268c:	d00b      	beq.n	81026a6 <LAN8742_RegisterBusIO+0x28>
 810268e:	683b      	ldr	r3, [r7, #0]
 8102690:	68db      	ldr	r3, [r3, #12]
 8102692:	2b00      	cmp	r3, #0
 8102694:	d007      	beq.n	81026a6 <LAN8742_RegisterBusIO+0x28>
 8102696:	683b      	ldr	r3, [r7, #0]
 8102698:	689b      	ldr	r3, [r3, #8]
 810269a:	2b00      	cmp	r3, #0
 810269c:	d003      	beq.n	81026a6 <LAN8742_RegisterBusIO+0x28>
 810269e:	683b      	ldr	r3, [r7, #0]
 81026a0:	691b      	ldr	r3, [r3, #16]
 81026a2:	2b00      	cmp	r3, #0
 81026a4:	d102      	bne.n	81026ac <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 81026a6:	f04f 33ff 	mov.w	r3, #4294967295
 81026aa:	e014      	b.n	81026d6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 81026ac:	683b      	ldr	r3, [r7, #0]
 81026ae:	681a      	ldr	r2, [r3, #0]
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 81026b4:	683b      	ldr	r3, [r7, #0]
 81026b6:	685a      	ldr	r2, [r3, #4]
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 81026bc:	683b      	ldr	r3, [r7, #0]
 81026be:	68da      	ldr	r2, [r3, #12]
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 81026c4:	683b      	ldr	r3, [r7, #0]
 81026c6:	689a      	ldr	r2, [r3, #8]
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 81026cc:	683b      	ldr	r3, [r7, #0]
 81026ce:	691a      	ldr	r2, [r3, #16]
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 81026d4:	2300      	movs	r3, #0
}
 81026d6:	4618      	mov	r0, r3
 81026d8:	370c      	adds	r7, #12
 81026da:	46bd      	mov	sp, r7
 81026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e0:	4770      	bx	lr

081026e2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 81026e2:	b580      	push	{r7, lr}
 81026e4:	b086      	sub	sp, #24
 81026e6:	af00      	add	r7, sp, #0
 81026e8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 81026ea:	2300      	movs	r3, #0
 81026ec:	60fb      	str	r3, [r7, #12]
 81026ee:	2300      	movs	r3, #0
 81026f0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 81026f2:	2300      	movs	r3, #0
 81026f4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	685b      	ldr	r3, [r3, #4]
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d139      	bne.n	8102772 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	689b      	ldr	r3, [r3, #8]
 8102702:	2b00      	cmp	r3, #0
 8102704:	d002      	beq.n	810270c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	689b      	ldr	r3, [r3, #8]
 810270a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	2220      	movs	r2, #32
 8102710:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8102712:	2300      	movs	r3, #0
 8102714:	617b      	str	r3, [r7, #20]
 8102716:	e01c      	b.n	8102752 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	695b      	ldr	r3, [r3, #20]
 810271c:	f107 020c 	add.w	r2, r7, #12
 8102720:	2112      	movs	r1, #18
 8102722:	6978      	ldr	r0, [r7, #20]
 8102724:	4798      	blx	r3
 8102726:	4603      	mov	r3, r0
 8102728:	2b00      	cmp	r3, #0
 810272a:	da03      	bge.n	8102734 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 810272c:	f06f 0304 	mvn.w	r3, #4
 8102730:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8102732:	e00b      	b.n	810274c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8102734:	68fb      	ldr	r3, [r7, #12]
 8102736:	f003 031f 	and.w	r3, r3, #31
 810273a:	697a      	ldr	r2, [r7, #20]
 810273c:	429a      	cmp	r2, r3
 810273e:	d105      	bne.n	810274c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	697a      	ldr	r2, [r7, #20]
 8102744:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8102746:	2300      	movs	r3, #0
 8102748:	613b      	str	r3, [r7, #16]
         break;
 810274a:	e005      	b.n	8102758 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810274c:	697b      	ldr	r3, [r7, #20]
 810274e:	3301      	adds	r3, #1
 8102750:	617b      	str	r3, [r7, #20]
 8102752:	697b      	ldr	r3, [r7, #20]
 8102754:	2b1f      	cmp	r3, #31
 8102756:	d9df      	bls.n	8102718 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	2b1f      	cmp	r3, #31
 810275e:	d902      	bls.n	8102766 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8102760:	f06f 0302 	mvn.w	r3, #2
 8102764:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8102766:	693b      	ldr	r3, [r7, #16]
 8102768:	2b00      	cmp	r3, #0
 810276a:	d102      	bne.n	8102772 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	2201      	movs	r2, #1
 8102770:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8102772:	693b      	ldr	r3, [r7, #16]
 }
 8102774:	4618      	mov	r0, r3
 8102776:	3718      	adds	r7, #24
 8102778:	46bd      	mov	sp, r7
 810277a:	bd80      	pop	{r7, pc}

0810277c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 810277c:	b580      	push	{r7, lr}
 810277e:	b084      	sub	sp, #16
 8102780:	af00      	add	r7, sp, #0
 8102782:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8102784:	2300      	movs	r3, #0
 8102786:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	695b      	ldr	r3, [r3, #20]
 810278c:	687a      	ldr	r2, [r7, #4]
 810278e:	6810      	ldr	r0, [r2, #0]
 8102790:	f107 020c 	add.w	r2, r7, #12
 8102794:	2101      	movs	r1, #1
 8102796:	4798      	blx	r3
 8102798:	4603      	mov	r3, r0
 810279a:	2b00      	cmp	r3, #0
 810279c:	da02      	bge.n	81027a4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810279e:	f06f 0304 	mvn.w	r3, #4
 81027a2:	e06e      	b.n	8102882 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	695b      	ldr	r3, [r3, #20]
 81027a8:	687a      	ldr	r2, [r7, #4]
 81027aa:	6810      	ldr	r0, [r2, #0]
 81027ac:	f107 020c 	add.w	r2, r7, #12
 81027b0:	2101      	movs	r1, #1
 81027b2:	4798      	blx	r3
 81027b4:	4603      	mov	r3, r0
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	da02      	bge.n	81027c0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 81027ba:	f06f 0304 	mvn.w	r3, #4
 81027be:	e060      	b.n	8102882 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	f003 0304 	and.w	r3, r3, #4
 81027c6:	2b00      	cmp	r3, #0
 81027c8:	d101      	bne.n	81027ce <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 81027ca:	2301      	movs	r3, #1
 81027cc:	e059      	b.n	8102882 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	695b      	ldr	r3, [r3, #20]
 81027d2:	687a      	ldr	r2, [r7, #4]
 81027d4:	6810      	ldr	r0, [r2, #0]
 81027d6:	f107 020c 	add.w	r2, r7, #12
 81027da:	2100      	movs	r1, #0
 81027dc:	4798      	blx	r3
 81027de:	4603      	mov	r3, r0
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	da02      	bge.n	81027ea <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 81027e4:	f06f 0304 	mvn.w	r3, #4
 81027e8:	e04b      	b.n	8102882 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 81027ea:	68fb      	ldr	r3, [r7, #12]
 81027ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81027f0:	2b00      	cmp	r3, #0
 81027f2:	d11b      	bne.n	810282c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 81027f4:	68fb      	ldr	r3, [r7, #12]
 81027f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d006      	beq.n	810280c <LAN8742_GetLinkState+0x90>
 81027fe:	68fb      	ldr	r3, [r7, #12]
 8102800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102804:	2b00      	cmp	r3, #0
 8102806:	d001      	beq.n	810280c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8102808:	2302      	movs	r3, #2
 810280a:	e03a      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810280c:	68fb      	ldr	r3, [r7, #12]
 810280e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102812:	2b00      	cmp	r3, #0
 8102814:	d001      	beq.n	810281a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8102816:	2303      	movs	r3, #3
 8102818:	e033      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102820:	2b00      	cmp	r3, #0
 8102822:	d001      	beq.n	8102828 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8102824:	2304      	movs	r3, #4
 8102826:	e02c      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8102828:	2305      	movs	r3, #5
 810282a:	e02a      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	695b      	ldr	r3, [r3, #20]
 8102830:	687a      	ldr	r2, [r7, #4]
 8102832:	6810      	ldr	r0, [r2, #0]
 8102834:	f107 020c 	add.w	r2, r7, #12
 8102838:	211f      	movs	r1, #31
 810283a:	4798      	blx	r3
 810283c:	4603      	mov	r3, r0
 810283e:	2b00      	cmp	r3, #0
 8102840:	da02      	bge.n	8102848 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8102842:	f06f 0304 	mvn.w	r3, #4
 8102846:	e01c      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810284e:	2b00      	cmp	r3, #0
 8102850:	d101      	bne.n	8102856 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8102852:	2306      	movs	r3, #6
 8102854:	e015      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8102856:	68fb      	ldr	r3, [r7, #12]
 8102858:	f003 031c 	and.w	r3, r3, #28
 810285c:	2b18      	cmp	r3, #24
 810285e:	d101      	bne.n	8102864 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8102860:	2302      	movs	r3, #2
 8102862:	e00e      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8102864:	68fb      	ldr	r3, [r7, #12]
 8102866:	f003 031c 	and.w	r3, r3, #28
 810286a:	2b08      	cmp	r3, #8
 810286c:	d101      	bne.n	8102872 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810286e:	2303      	movs	r3, #3
 8102870:	e007      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8102872:	68fb      	ldr	r3, [r7, #12]
 8102874:	f003 031c 	and.w	r3, r3, #28
 8102878:	2b14      	cmp	r3, #20
 810287a:	d101      	bne.n	8102880 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810287c:	2304      	movs	r3, #4
 810287e:	e000      	b.n	8102882 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8102880:	2305      	movs	r3, #5
    }
  }
}
 8102882:	4618      	mov	r0, r3
 8102884:	3710      	adds	r7, #16
 8102886:	46bd      	mov	sp, r7
 8102888:	bd80      	pop	{r7, pc}
	...

0810288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810288c:	b580      	push	{r7, lr}
 810288e:	b082      	sub	sp, #8
 8102890:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102892:	2003      	movs	r0, #3
 8102894:	f001 fba0 	bl	8103fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102898:	f007 f882 	bl	81099a0 <HAL_RCC_GetSysClockFreq>
 810289c:	4602      	mov	r2, r0
 810289e:	4b15      	ldr	r3, [pc, #84]	@ (81028f4 <HAL_Init+0x68>)
 81028a0:	699b      	ldr	r3, [r3, #24]
 81028a2:	0a1b      	lsrs	r3, r3, #8
 81028a4:	f003 030f 	and.w	r3, r3, #15
 81028a8:	4913      	ldr	r1, [pc, #76]	@ (81028f8 <HAL_Init+0x6c>)
 81028aa:	5ccb      	ldrb	r3, [r1, r3]
 81028ac:	f003 031f 	and.w	r3, r3, #31
 81028b0:	fa22 f303 	lsr.w	r3, r2, r3
 81028b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81028b6:	4b0f      	ldr	r3, [pc, #60]	@ (81028f4 <HAL_Init+0x68>)
 81028b8:	699b      	ldr	r3, [r3, #24]
 81028ba:	f003 030f 	and.w	r3, r3, #15
 81028be:	4a0e      	ldr	r2, [pc, #56]	@ (81028f8 <HAL_Init+0x6c>)
 81028c0:	5cd3      	ldrb	r3, [r2, r3]
 81028c2:	f003 031f 	and.w	r3, r3, #31
 81028c6:	687a      	ldr	r2, [r7, #4]
 81028c8:	fa22 f303 	lsr.w	r3, r2, r3
 81028cc:	4a0b      	ldr	r2, [pc, #44]	@ (81028fc <HAL_Init+0x70>)
 81028ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 81028d0:	4a0b      	ldr	r2, [pc, #44]	@ (8102900 <HAL_Init+0x74>)
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81028d6:	200f      	movs	r0, #15
 81028d8:	f7ff fc9a 	bl	8102210 <HAL_InitTick>
 81028dc:	4603      	mov	r3, r0
 81028de:	2b00      	cmp	r3, #0
 81028e0:	d001      	beq.n	81028e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 81028e2:	2301      	movs	r3, #1
 81028e4:	e002      	b.n	81028ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81028e6:	f7ff fac3 	bl	8101e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81028ea:	2300      	movs	r3, #0
}
 81028ec:	4618      	mov	r0, r3
 81028ee:	3708      	adds	r7, #8
 81028f0:	46bd      	mov	sp, r7
 81028f2:	bd80      	pop	{r7, pc}
 81028f4:	58024400 	.word	0x58024400
 81028f8:	081288bc 	.word	0x081288bc
 81028fc:	24000004 	.word	0x24000004
 8102900:	24000000 	.word	0x24000000

08102904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102904:	b480      	push	{r7}
 8102906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102908:	4b06      	ldr	r3, [pc, #24]	@ (8102924 <HAL_IncTick+0x20>)
 810290a:	781b      	ldrb	r3, [r3, #0]
 810290c:	461a      	mov	r2, r3
 810290e:	4b06      	ldr	r3, [pc, #24]	@ (8102928 <HAL_IncTick+0x24>)
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	4413      	add	r3, r2
 8102914:	4a04      	ldr	r2, [pc, #16]	@ (8102928 <HAL_IncTick+0x24>)
 8102916:	6013      	str	r3, [r2, #0]
}
 8102918:	bf00      	nop
 810291a:	46bd      	mov	sp, r7
 810291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102920:	4770      	bx	lr
 8102922:	bf00      	nop
 8102924:	2400002c 	.word	0x2400002c
 8102928:	240006f4 	.word	0x240006f4

0810292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810292c:	b480      	push	{r7}
 810292e:	af00      	add	r7, sp, #0
  return uwTick;
 8102930:	4b03      	ldr	r3, [pc, #12]	@ (8102940 <HAL_GetTick+0x14>)
 8102932:	681b      	ldr	r3, [r3, #0]
}
 8102934:	4618      	mov	r0, r3
 8102936:	46bd      	mov	sp, r7
 8102938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810293c:	4770      	bx	lr
 810293e:	bf00      	nop
 8102940:	240006f4 	.word	0x240006f4

08102944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102944:	b580      	push	{r7, lr}
 8102946:	b084      	sub	sp, #16
 8102948:	af00      	add	r7, sp, #0
 810294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810294c:	f7ff ffee 	bl	810292c <HAL_GetTick>
 8102950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102956:	68fb      	ldr	r3, [r7, #12]
 8102958:	f1b3 3fff 	cmp.w	r3, #4294967295
 810295c:	d005      	beq.n	810296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810295e:	4b0a      	ldr	r3, [pc, #40]	@ (8102988 <HAL_Delay+0x44>)
 8102960:	781b      	ldrb	r3, [r3, #0]
 8102962:	461a      	mov	r2, r3
 8102964:	68fb      	ldr	r3, [r7, #12]
 8102966:	4413      	add	r3, r2
 8102968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810296a:	bf00      	nop
 810296c:	f7ff ffde 	bl	810292c <HAL_GetTick>
 8102970:	4602      	mov	r2, r0
 8102972:	68bb      	ldr	r3, [r7, #8]
 8102974:	1ad3      	subs	r3, r2, r3
 8102976:	68fa      	ldr	r2, [r7, #12]
 8102978:	429a      	cmp	r2, r3
 810297a:	d8f7      	bhi.n	810296c <HAL_Delay+0x28>
  {
  }
}
 810297c:	bf00      	nop
 810297e:	bf00      	nop
 8102980:	3710      	adds	r7, #16
 8102982:	46bd      	mov	sp, r7
 8102984:	bd80      	pop	{r7, pc}
 8102986:	bf00      	nop
 8102988:	2400002c 	.word	0x2400002c

0810298c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810298c:	b480      	push	{r7}
 810298e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102990:	4b03      	ldr	r3, [pc, #12]	@ (81029a0 <HAL_GetREVID+0x14>)
 8102992:	681b      	ldr	r3, [r3, #0]
 8102994:	0c1b      	lsrs	r3, r3, #16
}
 8102996:	4618      	mov	r0, r3
 8102998:	46bd      	mov	sp, r7
 810299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810299e:	4770      	bx	lr
 81029a0:	5c001000 	.word	0x5c001000

081029a4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81029a4:	b480      	push	{r7}
 81029a6:	b083      	sub	sp, #12
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 81029ac:	4b06      	ldr	r3, [pc, #24]	@ (81029c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81029ae:	685b      	ldr	r3, [r3, #4]
 81029b0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 81029b4:	4904      	ldr	r1, [pc, #16]	@ (81029c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	4313      	orrs	r3, r2
 81029ba:	604b      	str	r3, [r1, #4]
}
 81029bc:	bf00      	nop
 81029be:	370c      	adds	r7, #12
 81029c0:	46bd      	mov	sp, r7
 81029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c6:	4770      	bx	lr
 81029c8:	58000400 	.word	0x58000400

081029cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81029cc:	b480      	push	{r7}
 81029ce:	b083      	sub	sp, #12
 81029d0:	af00      	add	r7, sp, #0
 81029d2:	6078      	str	r0, [r7, #4]
 81029d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	689b      	ldr	r3, [r3, #8]
 81029da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81029de:	683b      	ldr	r3, [r7, #0]
 81029e0:	431a      	orrs	r2, r3
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	609a      	str	r2, [r3, #8]
}
 81029e6:	bf00      	nop
 81029e8:	370c      	adds	r7, #12
 81029ea:	46bd      	mov	sp, r7
 81029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029f0:	4770      	bx	lr

081029f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81029f2:	b480      	push	{r7}
 81029f4:	b083      	sub	sp, #12
 81029f6:	af00      	add	r7, sp, #0
 81029f8:	6078      	str	r0, [r7, #4]
 81029fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	689b      	ldr	r3, [r3, #8]
 8102a00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8102a04:	683b      	ldr	r3, [r7, #0]
 8102a06:	431a      	orrs	r2, r3
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	609a      	str	r2, [r3, #8]
}
 8102a0c:	bf00      	nop
 8102a0e:	370c      	adds	r7, #12
 8102a10:	46bd      	mov	sp, r7
 8102a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a16:	4770      	bx	lr

08102a18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102a18:	b480      	push	{r7}
 8102a1a:	b083      	sub	sp, #12
 8102a1c:	af00      	add	r7, sp, #0
 8102a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	689b      	ldr	r3, [r3, #8]
 8102a24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102a28:	4618      	mov	r0, r3
 8102a2a:	370c      	adds	r7, #12
 8102a2c:	46bd      	mov	sp, r7
 8102a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a32:	4770      	bx	lr

08102a34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102a34:	b480      	push	{r7}
 8102a36:	b087      	sub	sp, #28
 8102a38:	af00      	add	r7, sp, #0
 8102a3a:	60f8      	str	r0, [r7, #12]
 8102a3c:	60b9      	str	r1, [r7, #8]
 8102a3e:	607a      	str	r2, [r7, #4]
 8102a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102a42:	68fb      	ldr	r3, [r7, #12]
 8102a44:	3360      	adds	r3, #96	@ 0x60
 8102a46:	461a      	mov	r2, r3
 8102a48:	68bb      	ldr	r3, [r7, #8]
 8102a4a:	009b      	lsls	r3, r3, #2
 8102a4c:	4413      	add	r3, r2
 8102a4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102a50:	697b      	ldr	r3, [r7, #20]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102a5e:	683b      	ldr	r3, [r7, #0]
 8102a60:	430b      	orrs	r3, r1
 8102a62:	431a      	orrs	r2, r3
 8102a64:	697b      	ldr	r3, [r7, #20]
 8102a66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102a68:	bf00      	nop
 8102a6a:	371c      	adds	r7, #28
 8102a6c:	46bd      	mov	sp, r7
 8102a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a72:	4770      	bx	lr

08102a74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102a74:	b480      	push	{r7}
 8102a76:	b085      	sub	sp, #20
 8102a78:	af00      	add	r7, sp, #0
 8102a7a:	60f8      	str	r0, [r7, #12]
 8102a7c:	60b9      	str	r1, [r7, #8]
 8102a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102a80:	68fb      	ldr	r3, [r7, #12]
 8102a82:	691b      	ldr	r3, [r3, #16]
 8102a84:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102a88:	68bb      	ldr	r3, [r7, #8]
 8102a8a:	f003 031f 	and.w	r3, r3, #31
 8102a8e:	6879      	ldr	r1, [r7, #4]
 8102a90:	fa01 f303 	lsl.w	r3, r1, r3
 8102a94:	431a      	orrs	r2, r3
 8102a96:	68fb      	ldr	r3, [r7, #12]
 8102a98:	611a      	str	r2, [r3, #16]
}
 8102a9a:	bf00      	nop
 8102a9c:	3714      	adds	r7, #20
 8102a9e:	46bd      	mov	sp, r7
 8102aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aa4:	4770      	bx	lr

08102aa6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102aa6:	b480      	push	{r7}
 8102aa8:	b087      	sub	sp, #28
 8102aaa:	af00      	add	r7, sp, #0
 8102aac:	60f8      	str	r0, [r7, #12]
 8102aae:	60b9      	str	r1, [r7, #8]
 8102ab0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102ab2:	68fb      	ldr	r3, [r7, #12]
 8102ab4:	3360      	adds	r3, #96	@ 0x60
 8102ab6:	461a      	mov	r2, r3
 8102ab8:	68bb      	ldr	r3, [r7, #8]
 8102aba:	009b      	lsls	r3, r3, #2
 8102abc:	4413      	add	r3, r2
 8102abe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102ac0:	697b      	ldr	r3, [r7, #20]
 8102ac2:	681b      	ldr	r3, [r3, #0]
 8102ac4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	431a      	orrs	r2, r3
 8102acc:	697b      	ldr	r3, [r7, #20]
 8102ace:	601a      	str	r2, [r3, #0]
  }
}
 8102ad0:	bf00      	nop
 8102ad2:	371c      	adds	r7, #28
 8102ad4:	46bd      	mov	sp, r7
 8102ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ada:	4770      	bx	lr

08102adc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102adc:	b480      	push	{r7}
 8102ade:	b083      	sub	sp, #12
 8102ae0:	af00      	add	r7, sp, #0
 8102ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	68db      	ldr	r3, [r3, #12]
 8102ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	d101      	bne.n	8102af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102af0:	2301      	movs	r3, #1
 8102af2:	e000      	b.n	8102af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102af4:	2300      	movs	r3, #0
}
 8102af6:	4618      	mov	r0, r3
 8102af8:	370c      	adds	r7, #12
 8102afa:	46bd      	mov	sp, r7
 8102afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b00:	4770      	bx	lr

08102b02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102b02:	b480      	push	{r7}
 8102b04:	b087      	sub	sp, #28
 8102b06:	af00      	add	r7, sp, #0
 8102b08:	60f8      	str	r0, [r7, #12]
 8102b0a:	60b9      	str	r1, [r7, #8]
 8102b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102b0e:	68fb      	ldr	r3, [r7, #12]
 8102b10:	3330      	adds	r3, #48	@ 0x30
 8102b12:	461a      	mov	r2, r3
 8102b14:	68bb      	ldr	r3, [r7, #8]
 8102b16:	0a1b      	lsrs	r3, r3, #8
 8102b18:	009b      	lsls	r3, r3, #2
 8102b1a:	f003 030c 	and.w	r3, r3, #12
 8102b1e:	4413      	add	r3, r2
 8102b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102b22:	697b      	ldr	r3, [r7, #20]
 8102b24:	681a      	ldr	r2, [r3, #0]
 8102b26:	68bb      	ldr	r3, [r7, #8]
 8102b28:	f003 031f 	and.w	r3, r3, #31
 8102b2c:	211f      	movs	r1, #31
 8102b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8102b32:	43db      	mvns	r3, r3
 8102b34:	401a      	ands	r2, r3
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	0e9b      	lsrs	r3, r3, #26
 8102b3a:	f003 011f 	and.w	r1, r3, #31
 8102b3e:	68bb      	ldr	r3, [r7, #8]
 8102b40:	f003 031f 	and.w	r3, r3, #31
 8102b44:	fa01 f303 	lsl.w	r3, r1, r3
 8102b48:	431a      	orrs	r2, r3
 8102b4a:	697b      	ldr	r3, [r7, #20]
 8102b4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102b4e:	bf00      	nop
 8102b50:	371c      	adds	r7, #28
 8102b52:	46bd      	mov	sp, r7
 8102b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b58:	4770      	bx	lr

08102b5a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102b5a:	b480      	push	{r7}
 8102b5c:	b087      	sub	sp, #28
 8102b5e:	af00      	add	r7, sp, #0
 8102b60:	60f8      	str	r0, [r7, #12]
 8102b62:	60b9      	str	r1, [r7, #8]
 8102b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102b66:	68fb      	ldr	r3, [r7, #12]
 8102b68:	3314      	adds	r3, #20
 8102b6a:	461a      	mov	r2, r3
 8102b6c:	68bb      	ldr	r3, [r7, #8]
 8102b6e:	0e5b      	lsrs	r3, r3, #25
 8102b70:	009b      	lsls	r3, r3, #2
 8102b72:	f003 0304 	and.w	r3, r3, #4
 8102b76:	4413      	add	r3, r2
 8102b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102b7a:	697b      	ldr	r3, [r7, #20]
 8102b7c:	681a      	ldr	r2, [r3, #0]
 8102b7e:	68bb      	ldr	r3, [r7, #8]
 8102b80:	0d1b      	lsrs	r3, r3, #20
 8102b82:	f003 031f 	and.w	r3, r3, #31
 8102b86:	2107      	movs	r1, #7
 8102b88:	fa01 f303 	lsl.w	r3, r1, r3
 8102b8c:	43db      	mvns	r3, r3
 8102b8e:	401a      	ands	r2, r3
 8102b90:	68bb      	ldr	r3, [r7, #8]
 8102b92:	0d1b      	lsrs	r3, r3, #20
 8102b94:	f003 031f 	and.w	r3, r3, #31
 8102b98:	6879      	ldr	r1, [r7, #4]
 8102b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8102b9e:	431a      	orrs	r2, r3
 8102ba0:	697b      	ldr	r3, [r7, #20]
 8102ba2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102ba4:	bf00      	nop
 8102ba6:	371c      	adds	r7, #28
 8102ba8:	46bd      	mov	sp, r7
 8102baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bae:	4770      	bx	lr

08102bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102bb0:	b480      	push	{r7}
 8102bb2:	b085      	sub	sp, #20
 8102bb4:	af00      	add	r7, sp, #0
 8102bb6:	60f8      	str	r0, [r7, #12]
 8102bb8:	60b9      	str	r1, [r7, #8]
 8102bba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102bc2:	68bb      	ldr	r3, [r7, #8]
 8102bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102bc8:	43db      	mvns	r3, r3
 8102bca:	401a      	ands	r2, r3
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	f003 0318 	and.w	r3, r3, #24
 8102bd2:	4908      	ldr	r1, [pc, #32]	@ (8102bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102bd4:	40d9      	lsrs	r1, r3
 8102bd6:	68bb      	ldr	r3, [r7, #8]
 8102bd8:	400b      	ands	r3, r1
 8102bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102bde:	431a      	orrs	r2, r3
 8102be0:	68fb      	ldr	r3, [r7, #12]
 8102be2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102be6:	bf00      	nop
 8102be8:	3714      	adds	r7, #20
 8102bea:	46bd      	mov	sp, r7
 8102bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf0:	4770      	bx	lr
 8102bf2:	bf00      	nop
 8102bf4:	000fffff 	.word	0x000fffff

08102bf8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102bf8:	b480      	push	{r7}
 8102bfa:	b083      	sub	sp, #12
 8102bfc:	af00      	add	r7, sp, #0
 8102bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	689b      	ldr	r3, [r3, #8]
 8102c04:	f003 031f 	and.w	r3, r3, #31
}
 8102c08:	4618      	mov	r0, r3
 8102c0a:	370c      	adds	r7, #12
 8102c0c:	46bd      	mov	sp, r7
 8102c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c12:	4770      	bx	lr

08102c14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102c14:	b480      	push	{r7}
 8102c16:	b083      	sub	sp, #12
 8102c18:	af00      	add	r7, sp, #0
 8102c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	689b      	ldr	r3, [r3, #8]
 8102c20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8102c24:	4618      	mov	r0, r3
 8102c26:	370c      	adds	r7, #12
 8102c28:	46bd      	mov	sp, r7
 8102c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c2e:	4770      	bx	lr

08102c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102c30:	b480      	push	{r7}
 8102c32:	b083      	sub	sp, #12
 8102c34:	af00      	add	r7, sp, #0
 8102c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	689a      	ldr	r2, [r3, #8]
 8102c3c:	4b04      	ldr	r3, [pc, #16]	@ (8102c50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8102c3e:	4013      	ands	r3, r2
 8102c40:	687a      	ldr	r2, [r7, #4]
 8102c42:	6093      	str	r3, [r2, #8]
}
 8102c44:	bf00      	nop
 8102c46:	370c      	adds	r7, #12
 8102c48:	46bd      	mov	sp, r7
 8102c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c4e:	4770      	bx	lr
 8102c50:	5fffffc0 	.word	0x5fffffc0

08102c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102c54:	b480      	push	{r7}
 8102c56:	b083      	sub	sp, #12
 8102c58:	af00      	add	r7, sp, #0
 8102c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	689b      	ldr	r3, [r3, #8]
 8102c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c68:	d101      	bne.n	8102c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102c6a:	2301      	movs	r3, #1
 8102c6c:	e000      	b.n	8102c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102c6e:	2300      	movs	r3, #0
}
 8102c70:	4618      	mov	r0, r3
 8102c72:	370c      	adds	r7, #12
 8102c74:	46bd      	mov	sp, r7
 8102c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c7a:	4770      	bx	lr

08102c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102c7c:	b480      	push	{r7}
 8102c7e:	b083      	sub	sp, #12
 8102c80:	af00      	add	r7, sp, #0
 8102c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	689a      	ldr	r2, [r3, #8]
 8102c88:	4b05      	ldr	r3, [pc, #20]	@ (8102ca0 <LL_ADC_EnableInternalRegulator+0x24>)
 8102c8a:	4013      	ands	r3, r2
 8102c8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102c94:	bf00      	nop
 8102c96:	370c      	adds	r7, #12
 8102c98:	46bd      	mov	sp, r7
 8102c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c9e:	4770      	bx	lr
 8102ca0:	6fffffc0 	.word	0x6fffffc0

08102ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102ca4:	b480      	push	{r7}
 8102ca6:	b083      	sub	sp, #12
 8102ca8:	af00      	add	r7, sp, #0
 8102caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	689b      	ldr	r3, [r3, #8]
 8102cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102cb8:	d101      	bne.n	8102cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102cba:	2301      	movs	r3, #1
 8102cbc:	e000      	b.n	8102cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102cbe:	2300      	movs	r3, #0
}
 8102cc0:	4618      	mov	r0, r3
 8102cc2:	370c      	adds	r7, #12
 8102cc4:	46bd      	mov	sp, r7
 8102cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cca:	4770      	bx	lr

08102ccc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8102ccc:	b480      	push	{r7}
 8102cce:	b083      	sub	sp, #12
 8102cd0:	af00      	add	r7, sp, #0
 8102cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	689a      	ldr	r2, [r3, #8]
 8102cd8:	4b05      	ldr	r3, [pc, #20]	@ (8102cf0 <LL_ADC_Enable+0x24>)
 8102cda:	4013      	ands	r3, r2
 8102cdc:	f043 0201 	orr.w	r2, r3, #1
 8102ce0:	687b      	ldr	r3, [r7, #4]
 8102ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102ce4:	bf00      	nop
 8102ce6:	370c      	adds	r7, #12
 8102ce8:	46bd      	mov	sp, r7
 8102cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cee:	4770      	bx	lr
 8102cf0:	7fffffc0 	.word	0x7fffffc0

08102cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102cf4:	b480      	push	{r7}
 8102cf6:	b083      	sub	sp, #12
 8102cf8:	af00      	add	r7, sp, #0
 8102cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	689b      	ldr	r3, [r3, #8]
 8102d00:	f003 0301 	and.w	r3, r3, #1
 8102d04:	2b01      	cmp	r3, #1
 8102d06:	d101      	bne.n	8102d0c <LL_ADC_IsEnabled+0x18>
 8102d08:	2301      	movs	r3, #1
 8102d0a:	e000      	b.n	8102d0e <LL_ADC_IsEnabled+0x1a>
 8102d0c:	2300      	movs	r3, #0
}
 8102d0e:	4618      	mov	r0, r3
 8102d10:	370c      	adds	r7, #12
 8102d12:	46bd      	mov	sp, r7
 8102d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d18:	4770      	bx	lr
	...

08102d1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8102d1c:	b480      	push	{r7}
 8102d1e:	b083      	sub	sp, #12
 8102d20:	af00      	add	r7, sp, #0
 8102d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	689a      	ldr	r2, [r3, #8]
 8102d28:	4b05      	ldr	r3, [pc, #20]	@ (8102d40 <LL_ADC_REG_StartConversion+0x24>)
 8102d2a:	4013      	ands	r3, r2
 8102d2c:	f043 0204 	orr.w	r2, r3, #4
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8102d34:	bf00      	nop
 8102d36:	370c      	adds	r7, #12
 8102d38:	46bd      	mov	sp, r7
 8102d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d3e:	4770      	bx	lr
 8102d40:	7fffffc0 	.word	0x7fffffc0

08102d44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102d44:	b480      	push	{r7}
 8102d46:	b083      	sub	sp, #12
 8102d48:	af00      	add	r7, sp, #0
 8102d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	689b      	ldr	r3, [r3, #8]
 8102d50:	f003 0304 	and.w	r3, r3, #4
 8102d54:	2b04      	cmp	r3, #4
 8102d56:	d101      	bne.n	8102d5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8102d58:	2301      	movs	r3, #1
 8102d5a:	e000      	b.n	8102d5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102d5c:	2300      	movs	r3, #0
}
 8102d5e:	4618      	mov	r0, r3
 8102d60:	370c      	adds	r7, #12
 8102d62:	46bd      	mov	sp, r7
 8102d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d68:	4770      	bx	lr

08102d6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102d6a:	b480      	push	{r7}
 8102d6c:	b083      	sub	sp, #12
 8102d6e:	af00      	add	r7, sp, #0
 8102d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	689b      	ldr	r3, [r3, #8]
 8102d76:	f003 0308 	and.w	r3, r3, #8
 8102d7a:	2b08      	cmp	r3, #8
 8102d7c:	d101      	bne.n	8102d82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102d7e:	2301      	movs	r3, #1
 8102d80:	e000      	b.n	8102d84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102d82:	2300      	movs	r3, #0
}
 8102d84:	4618      	mov	r0, r3
 8102d86:	370c      	adds	r7, #12
 8102d88:	46bd      	mov	sp, r7
 8102d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d8e:	4770      	bx	lr

08102d90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102d90:	b590      	push	{r4, r7, lr}
 8102d92:	b089      	sub	sp, #36	@ 0x24
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102d98:	2300      	movs	r3, #0
 8102d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102d9c:	2300      	movs	r3, #0
 8102d9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d101      	bne.n	8102daa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102da6:	2301      	movs	r3, #1
 8102da8:	e18f      	b.n	81030ca <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	68db      	ldr	r3, [r3, #12]
 8102dae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d109      	bne.n	8102dcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102db8:	6878      	ldr	r0, [r7, #4]
 8102dba:	f7ff f877 	bl	8101eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	2200      	movs	r2, #0
 8102dc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	2200      	movs	r2, #0
 8102dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4618      	mov	r0, r3
 8102dd2:	f7ff ff3f 	bl	8102c54 <LL_ADC_IsDeepPowerDownEnabled>
 8102dd6:	4603      	mov	r3, r0
 8102dd8:	2b00      	cmp	r3, #0
 8102dda:	d004      	beq.n	8102de6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4618      	mov	r0, r3
 8102de2:	f7ff ff25 	bl	8102c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	4618      	mov	r0, r3
 8102dec:	f7ff ff5a 	bl	8102ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8102df0:	4603      	mov	r3, r0
 8102df2:	2b00      	cmp	r3, #0
 8102df4:	d114      	bne.n	8102e20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	4618      	mov	r0, r3
 8102dfc:	f7ff ff3e 	bl	8102c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102e00:	4b87      	ldr	r3, [pc, #540]	@ (8103020 <HAL_ADC_Init+0x290>)
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	099b      	lsrs	r3, r3, #6
 8102e06:	4a87      	ldr	r2, [pc, #540]	@ (8103024 <HAL_ADC_Init+0x294>)
 8102e08:	fba2 2303 	umull	r2, r3, r2, r3
 8102e0c:	099b      	lsrs	r3, r3, #6
 8102e0e:	3301      	adds	r3, #1
 8102e10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102e12:	e002      	b.n	8102e1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102e14:	68bb      	ldr	r3, [r7, #8]
 8102e16:	3b01      	subs	r3, #1
 8102e18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102e1a:	68bb      	ldr	r3, [r7, #8]
 8102e1c:	2b00      	cmp	r3, #0
 8102e1e:	d1f9      	bne.n	8102e14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	4618      	mov	r0, r3
 8102e26:	f7ff ff3d 	bl	8102ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8102e2a:	4603      	mov	r3, r0
 8102e2c:	2b00      	cmp	r3, #0
 8102e2e:	d10d      	bne.n	8102e4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e34:	f043 0210 	orr.w	r2, r3, #16
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e40:	f043 0201 	orr.w	r2, r3, #1
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8102e48:	2301      	movs	r3, #1
 8102e4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	4618      	mov	r0, r3
 8102e52:	f7ff ff77 	bl	8102d44 <LL_ADC_REG_IsConversionOngoing>
 8102e56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e5c:	f003 0310 	and.w	r3, r3, #16
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	f040 8129 	bne.w	81030b8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102e66:	697b      	ldr	r3, [r7, #20]
 8102e68:	2b00      	cmp	r3, #0
 8102e6a:	f040 8125 	bne.w	81030b8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e72:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8102e76:	f043 0202 	orr.w	r2, r3, #2
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	4618      	mov	r0, r3
 8102e84:	f7ff ff36 	bl	8102cf4 <LL_ADC_IsEnabled>
 8102e88:	4603      	mov	r3, r0
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d136      	bne.n	8102efc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	4a65      	ldr	r2, [pc, #404]	@ (8103028 <HAL_ADC_Init+0x298>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d004      	beq.n	8102ea2 <HAL_ADC_Init+0x112>
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a63      	ldr	r2, [pc, #396]	@ (810302c <HAL_ADC_Init+0x29c>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d10e      	bne.n	8102ec0 <HAL_ADC_Init+0x130>
 8102ea2:	4861      	ldr	r0, [pc, #388]	@ (8103028 <HAL_ADC_Init+0x298>)
 8102ea4:	f7ff ff26 	bl	8102cf4 <LL_ADC_IsEnabled>
 8102ea8:	4604      	mov	r4, r0
 8102eaa:	4860      	ldr	r0, [pc, #384]	@ (810302c <HAL_ADC_Init+0x29c>)
 8102eac:	f7ff ff22 	bl	8102cf4 <LL_ADC_IsEnabled>
 8102eb0:	4603      	mov	r3, r0
 8102eb2:	4323      	orrs	r3, r4
 8102eb4:	2b00      	cmp	r3, #0
 8102eb6:	bf0c      	ite	eq
 8102eb8:	2301      	moveq	r3, #1
 8102eba:	2300      	movne	r3, #0
 8102ebc:	b2db      	uxtb	r3, r3
 8102ebe:	e008      	b.n	8102ed2 <HAL_ADC_Init+0x142>
 8102ec0:	485b      	ldr	r0, [pc, #364]	@ (8103030 <HAL_ADC_Init+0x2a0>)
 8102ec2:	f7ff ff17 	bl	8102cf4 <LL_ADC_IsEnabled>
 8102ec6:	4603      	mov	r3, r0
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	bf0c      	ite	eq
 8102ecc:	2301      	moveq	r3, #1
 8102ece:	2300      	movne	r3, #0
 8102ed0:	b2db      	uxtb	r3, r3
 8102ed2:	2b00      	cmp	r3, #0
 8102ed4:	d012      	beq.n	8102efc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	681b      	ldr	r3, [r3, #0]
 8102eda:	4a53      	ldr	r2, [pc, #332]	@ (8103028 <HAL_ADC_Init+0x298>)
 8102edc:	4293      	cmp	r3, r2
 8102ede:	d004      	beq.n	8102eea <HAL_ADC_Init+0x15a>
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	4a51      	ldr	r2, [pc, #324]	@ (810302c <HAL_ADC_Init+0x29c>)
 8102ee6:	4293      	cmp	r3, r2
 8102ee8:	d101      	bne.n	8102eee <HAL_ADC_Init+0x15e>
 8102eea:	4a52      	ldr	r2, [pc, #328]	@ (8103034 <HAL_ADC_Init+0x2a4>)
 8102eec:	e000      	b.n	8102ef0 <HAL_ADC_Init+0x160>
 8102eee:	4a52      	ldr	r2, [pc, #328]	@ (8103038 <HAL_ADC_Init+0x2a8>)
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	685b      	ldr	r3, [r3, #4]
 8102ef4:	4619      	mov	r1, r3
 8102ef6:	4610      	mov	r0, r2
 8102ef8:	f7ff fd68 	bl	81029cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102efc:	f7ff fd46 	bl	810298c <HAL_GetREVID>
 8102f00:	4603      	mov	r3, r0
 8102f02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d914      	bls.n	8102f34 <HAL_ADC_Init+0x1a4>
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	689b      	ldr	r3, [r3, #8]
 8102f0e:	2b10      	cmp	r3, #16
 8102f10:	d110      	bne.n	8102f34 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	7d5b      	ldrb	r3, [r3, #21]
 8102f16:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f1c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102f22:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	7f1b      	ldrb	r3, [r3, #28]
 8102f28:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102f2a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f2c:	f043 030c 	orr.w	r3, r3, #12
 8102f30:	61bb      	str	r3, [r7, #24]
 8102f32:	e00d      	b.n	8102f50 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	7d5b      	ldrb	r3, [r3, #21]
 8102f38:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f3e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102f44:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	7f1b      	ldrb	r3, [r3, #28]
 8102f4a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f4c:	4313      	orrs	r3, r2
 8102f4e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	7f1b      	ldrb	r3, [r3, #28]
 8102f54:	2b01      	cmp	r3, #1
 8102f56:	d106      	bne.n	8102f66 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	6a1b      	ldr	r3, [r3, #32]
 8102f5c:	3b01      	subs	r3, #1
 8102f5e:	045b      	lsls	r3, r3, #17
 8102f60:	69ba      	ldr	r2, [r7, #24]
 8102f62:	4313      	orrs	r3, r2
 8102f64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102f66:	687b      	ldr	r3, [r7, #4]
 8102f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f6a:	2b00      	cmp	r3, #0
 8102f6c:	d009      	beq.n	8102f82 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f72:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102f7c:	69ba      	ldr	r2, [r7, #24]
 8102f7e:	4313      	orrs	r3, r2
 8102f80:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	681b      	ldr	r3, [r3, #0]
 8102f86:	68da      	ldr	r2, [r3, #12]
 8102f88:	4b2c      	ldr	r3, [pc, #176]	@ (810303c <HAL_ADC_Init+0x2ac>)
 8102f8a:	4013      	ands	r3, r2
 8102f8c:	687a      	ldr	r2, [r7, #4]
 8102f8e:	6812      	ldr	r2, [r2, #0]
 8102f90:	69b9      	ldr	r1, [r7, #24]
 8102f92:	430b      	orrs	r3, r1
 8102f94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f7ff fed2 	bl	8102d44 <LL_ADC_REG_IsConversionOngoing>
 8102fa0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	4618      	mov	r0, r3
 8102fa8:	f7ff fedf 	bl	8102d6a <LL_ADC_INJ_IsConversionOngoing>
 8102fac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102fae:	693b      	ldr	r3, [r7, #16]
 8102fb0:	2b00      	cmp	r3, #0
 8102fb2:	d15f      	bne.n	8103074 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102fb4:	68fb      	ldr	r3, [r7, #12]
 8102fb6:	2b00      	cmp	r3, #0
 8102fb8:	d15c      	bne.n	8103074 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	7d1b      	ldrb	r3, [r3, #20]
 8102fbe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8102fc4:	4313      	orrs	r3, r2
 8102fc6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	68da      	ldr	r2, [r3, #12]
 8102fce:	4b1c      	ldr	r3, [pc, #112]	@ (8103040 <HAL_ADC_Init+0x2b0>)
 8102fd0:	4013      	ands	r3, r2
 8102fd2:	687a      	ldr	r2, [r7, #4]
 8102fd4:	6812      	ldr	r2, [r2, #0]
 8102fd6:	69b9      	ldr	r1, [r7, #24]
 8102fd8:	430b      	orrs	r3, r1
 8102fda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8102fe2:	2b01      	cmp	r3, #1
 8102fe4:	d130      	bne.n	8103048 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102fea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	691a      	ldr	r2, [r3, #16]
 8102ff2:	4b14      	ldr	r3, [pc, #80]	@ (8103044 <HAL_ADC_Init+0x2b4>)
 8102ff4:	4013      	ands	r3, r2
 8102ff6:	687a      	ldr	r2, [r7, #4]
 8102ff8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8102ffa:	3a01      	subs	r2, #1
 8102ffc:	0411      	lsls	r1, r2, #16
 8102ffe:	687a      	ldr	r2, [r7, #4]
 8103000:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8103002:	4311      	orrs	r1, r2
 8103004:	687a      	ldr	r2, [r7, #4]
 8103006:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103008:	4311      	orrs	r1, r2
 810300a:	687a      	ldr	r2, [r7, #4]
 810300c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810300e:	430a      	orrs	r2, r1
 8103010:	431a      	orrs	r2, r3
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	f042 0201 	orr.w	r2, r2, #1
 810301a:	611a      	str	r2, [r3, #16]
 810301c:	e01c      	b.n	8103058 <HAL_ADC_Init+0x2c8>
 810301e:	bf00      	nop
 8103020:	24000000 	.word	0x24000000
 8103024:	053e2d63 	.word	0x053e2d63
 8103028:	40022000 	.word	0x40022000
 810302c:	40022100 	.word	0x40022100
 8103030:	58026000 	.word	0x58026000
 8103034:	40022300 	.word	0x40022300
 8103038:	58026300 	.word	0x58026300
 810303c:	fff0c003 	.word	0xfff0c003
 8103040:	ffffbffc 	.word	0xffffbffc
 8103044:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	691a      	ldr	r2, [r3, #16]
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	f022 0201 	bic.w	r2, r2, #1
 8103056:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	691b      	ldr	r3, [r3, #16]
 810305e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	430a      	orrs	r2, r1
 810306c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810306e:	6878      	ldr	r0, [r7, #4]
 8103070:	f000 fde2 	bl	8103c38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	68db      	ldr	r3, [r3, #12]
 8103078:	2b01      	cmp	r3, #1
 810307a:	d10c      	bne.n	8103096 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103082:	f023 010f 	bic.w	r1, r3, #15
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	699b      	ldr	r3, [r3, #24]
 810308a:	1e5a      	subs	r2, r3, #1
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	430a      	orrs	r2, r1
 8103092:	631a      	str	r2, [r3, #48]	@ 0x30
 8103094:	e007      	b.n	81030a6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	f022 020f 	bic.w	r2, r2, #15
 81030a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030aa:	f023 0303 	bic.w	r3, r3, #3
 81030ae:	f043 0201 	orr.w	r2, r3, #1
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	655a      	str	r2, [r3, #84]	@ 0x54
 81030b6:	e007      	b.n	81030c8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030bc:	f043 0210 	orr.w	r2, r3, #16
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81030c4:	2301      	movs	r3, #1
 81030c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81030c8:	7ffb      	ldrb	r3, [r7, #31]
}
 81030ca:	4618      	mov	r0, r3
 81030cc:	3724      	adds	r7, #36	@ 0x24
 81030ce:	46bd      	mov	sp, r7
 81030d0:	bd90      	pop	{r4, r7, pc}
 81030d2:	bf00      	nop

081030d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81030d4:	b580      	push	{r7, lr}
 81030d6:	b086      	sub	sp, #24
 81030d8:	af00      	add	r7, sp, #0
 81030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	4a5c      	ldr	r2, [pc, #368]	@ (8103254 <HAL_ADC_Start+0x180>)
 81030e2:	4293      	cmp	r3, r2
 81030e4:	d004      	beq.n	81030f0 <HAL_ADC_Start+0x1c>
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	4a5b      	ldr	r2, [pc, #364]	@ (8103258 <HAL_ADC_Start+0x184>)
 81030ec:	4293      	cmp	r3, r2
 81030ee:	d101      	bne.n	81030f4 <HAL_ADC_Start+0x20>
 81030f0:	4b5a      	ldr	r3, [pc, #360]	@ (810325c <HAL_ADC_Start+0x188>)
 81030f2:	e000      	b.n	81030f6 <HAL_ADC_Start+0x22>
 81030f4:	4b5a      	ldr	r3, [pc, #360]	@ (8103260 <HAL_ADC_Start+0x18c>)
 81030f6:	4618      	mov	r0, r3
 81030f8:	f7ff fd7e 	bl	8102bf8 <LL_ADC_GetMultimode>
 81030fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4618      	mov	r0, r3
 8103104:	f7ff fe1e 	bl	8102d44 <LL_ADC_REG_IsConversionOngoing>
 8103108:	4603      	mov	r3, r0
 810310a:	2b00      	cmp	r3, #0
 810310c:	f040 809a 	bne.w	8103244 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103116:	2b01      	cmp	r3, #1
 8103118:	d101      	bne.n	810311e <HAL_ADC_Start+0x4a>
 810311a:	2302      	movs	r3, #2
 810311c:	e095      	b.n	810324a <HAL_ADC_Start+0x176>
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	2201      	movs	r2, #1
 8103122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8103126:	6878      	ldr	r0, [r7, #4]
 8103128:	f000 fcfc 	bl	8103b24 <ADC_Enable>
 810312c:	4603      	mov	r3, r0
 810312e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8103130:	7dfb      	ldrb	r3, [r7, #23]
 8103132:	2b00      	cmp	r3, #0
 8103134:	f040 8081 	bne.w	810323a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810313c:	4b49      	ldr	r3, [pc, #292]	@ (8103264 <HAL_ADC_Start+0x190>)
 810313e:	4013      	ands	r3, r2
 8103140:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	4a42      	ldr	r2, [pc, #264]	@ (8103258 <HAL_ADC_Start+0x184>)
 810314e:	4293      	cmp	r3, r2
 8103150:	d002      	beq.n	8103158 <HAL_ADC_Start+0x84>
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	e000      	b.n	810315a <HAL_ADC_Start+0x86>
 8103158:	4b3e      	ldr	r3, [pc, #248]	@ (8103254 <HAL_ADC_Start+0x180>)
 810315a:	687a      	ldr	r2, [r7, #4]
 810315c:	6812      	ldr	r2, [r2, #0]
 810315e:	4293      	cmp	r3, r2
 8103160:	d002      	beq.n	8103168 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103162:	693b      	ldr	r3, [r7, #16]
 8103164:	2b00      	cmp	r3, #0
 8103166:	d105      	bne.n	8103174 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810316c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810317c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103180:	d106      	bne.n	8103190 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103186:	f023 0206 	bic.w	r2, r3, #6
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	659a      	str	r2, [r3, #88]	@ 0x58
 810318e:	e002      	b.n	8103196 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	2200      	movs	r2, #0
 8103194:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	221c      	movs	r2, #28
 810319c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	2200      	movs	r2, #0
 81031a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8103258 <HAL_ADC_Start+0x184>)
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d002      	beq.n	81031b6 <HAL_ADC_Start+0xe2>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	e000      	b.n	81031b8 <HAL_ADC_Start+0xe4>
 81031b6:	4b27      	ldr	r3, [pc, #156]	@ (8103254 <HAL_ADC_Start+0x180>)
 81031b8:	687a      	ldr	r2, [r7, #4]
 81031ba:	6812      	ldr	r2, [r2, #0]
 81031bc:	4293      	cmp	r3, r2
 81031be:	d008      	beq.n	81031d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81031c0:	693b      	ldr	r3, [r7, #16]
 81031c2:	2b00      	cmp	r3, #0
 81031c4:	d005      	beq.n	81031d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81031c6:	693b      	ldr	r3, [r7, #16]
 81031c8:	2b05      	cmp	r3, #5
 81031ca:	d002      	beq.n	81031d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81031cc:	693b      	ldr	r3, [r7, #16]
 81031ce:	2b09      	cmp	r3, #9
 81031d0:	d114      	bne.n	81031fc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	68db      	ldr	r3, [r3, #12]
 81031d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81031dc:	2b00      	cmp	r3, #0
 81031de:	d007      	beq.n	81031f0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81031e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 81031e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	4618      	mov	r0, r3
 81031f6:	f7ff fd91 	bl	8102d1c <LL_ADC_REG_StartConversion>
 81031fa:	e025      	b.n	8103248 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103200:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	4a12      	ldr	r2, [pc, #72]	@ (8103258 <HAL_ADC_Start+0x184>)
 810320e:	4293      	cmp	r3, r2
 8103210:	d002      	beq.n	8103218 <HAL_ADC_Start+0x144>
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	e000      	b.n	810321a <HAL_ADC_Start+0x146>
 8103218:	4b0e      	ldr	r3, [pc, #56]	@ (8103254 <HAL_ADC_Start+0x180>)
 810321a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810321c:	68fb      	ldr	r3, [r7, #12]
 810321e:	68db      	ldr	r3, [r3, #12]
 8103220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103224:	2b00      	cmp	r3, #0
 8103226:	d00f      	beq.n	8103248 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810322c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103230:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	655a      	str	r2, [r3, #84]	@ 0x54
 8103238:	e006      	b.n	8103248 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	2200      	movs	r2, #0
 810323e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8103242:	e001      	b.n	8103248 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8103244:	2302      	movs	r3, #2
 8103246:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8103248:	7dfb      	ldrb	r3, [r7, #23]
}
 810324a:	4618      	mov	r0, r3
 810324c:	3718      	adds	r7, #24
 810324e:	46bd      	mov	sp, r7
 8103250:	bd80      	pop	{r7, pc}
 8103252:	bf00      	nop
 8103254:	40022000 	.word	0x40022000
 8103258:	40022100 	.word	0x40022100
 810325c:	40022300 	.word	0x40022300
 8103260:	58026300 	.word	0x58026300
 8103264:	fffff0fe 	.word	0xfffff0fe

08103268 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8103268:	b580      	push	{r7, lr}
 810326a:	b088      	sub	sp, #32
 810326c:	af00      	add	r7, sp, #0
 810326e:	6078      	str	r0, [r7, #4]
 8103270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a72      	ldr	r2, [pc, #456]	@ (8103440 <HAL_ADC_PollForConversion+0x1d8>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d004      	beq.n	8103286 <HAL_ADC_PollForConversion+0x1e>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a70      	ldr	r2, [pc, #448]	@ (8103444 <HAL_ADC_PollForConversion+0x1dc>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d101      	bne.n	810328a <HAL_ADC_PollForConversion+0x22>
 8103286:	4b70      	ldr	r3, [pc, #448]	@ (8103448 <HAL_ADC_PollForConversion+0x1e0>)
 8103288:	e000      	b.n	810328c <HAL_ADC_PollForConversion+0x24>
 810328a:	4b70      	ldr	r3, [pc, #448]	@ (810344c <HAL_ADC_PollForConversion+0x1e4>)
 810328c:	4618      	mov	r0, r3
 810328e:	f7ff fcb3 	bl	8102bf8 <LL_ADC_GetMultimode>
 8103292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	691b      	ldr	r3, [r3, #16]
 8103298:	2b08      	cmp	r3, #8
 810329a:	d102      	bne.n	81032a2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 810329c:	2308      	movs	r3, #8
 810329e:	61fb      	str	r3, [r7, #28]
 81032a0:	e037      	b.n	8103312 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81032a2:	697b      	ldr	r3, [r7, #20]
 81032a4:	2b00      	cmp	r3, #0
 81032a6:	d005      	beq.n	81032b4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81032a8:	697b      	ldr	r3, [r7, #20]
 81032aa:	2b05      	cmp	r3, #5
 81032ac:	d002      	beq.n	81032b4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81032ae:	697b      	ldr	r3, [r7, #20]
 81032b0:	2b09      	cmp	r3, #9
 81032b2:	d111      	bne.n	81032d8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	68db      	ldr	r3, [r3, #12]
 81032ba:	f003 0301 	and.w	r3, r3, #1
 81032be:	2b00      	cmp	r3, #0
 81032c0:	d007      	beq.n	81032d2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81032c6:	f043 0220 	orr.w	r2, r3, #32
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 81032ce:	2301      	movs	r3, #1
 81032d0:	e0b1      	b.n	8103436 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81032d2:	2304      	movs	r3, #4
 81032d4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 81032d6:	e01c      	b.n	8103312 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	681b      	ldr	r3, [r3, #0]
 81032dc:	4a58      	ldr	r2, [pc, #352]	@ (8103440 <HAL_ADC_PollForConversion+0x1d8>)
 81032de:	4293      	cmp	r3, r2
 81032e0:	d004      	beq.n	81032ec <HAL_ADC_PollForConversion+0x84>
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	4a57      	ldr	r2, [pc, #348]	@ (8103444 <HAL_ADC_PollForConversion+0x1dc>)
 81032e8:	4293      	cmp	r3, r2
 81032ea:	d101      	bne.n	81032f0 <HAL_ADC_PollForConversion+0x88>
 81032ec:	4b56      	ldr	r3, [pc, #344]	@ (8103448 <HAL_ADC_PollForConversion+0x1e0>)
 81032ee:	e000      	b.n	81032f2 <HAL_ADC_PollForConversion+0x8a>
 81032f0:	4b56      	ldr	r3, [pc, #344]	@ (810344c <HAL_ADC_PollForConversion+0x1e4>)
 81032f2:	4618      	mov	r0, r3
 81032f4:	f7ff fc8e 	bl	8102c14 <LL_ADC_GetMultiDMATransfer>
 81032f8:	4603      	mov	r3, r0
 81032fa:	2b00      	cmp	r3, #0
 81032fc:	d007      	beq.n	810330e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103302:	f043 0220 	orr.w	r2, r3, #32
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 810330a:	2301      	movs	r3, #1
 810330c:	e093      	b.n	8103436 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 810330e:	2304      	movs	r3, #4
 8103310:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8103312:	f7ff fb0b 	bl	810292c <HAL_GetTick>
 8103316:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8103318:	e021      	b.n	810335e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 810331a:	683b      	ldr	r3, [r7, #0]
 810331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103320:	d01d      	beq.n	810335e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8103322:	f7ff fb03 	bl	810292c <HAL_GetTick>
 8103326:	4602      	mov	r2, r0
 8103328:	693b      	ldr	r3, [r7, #16]
 810332a:	1ad3      	subs	r3, r2, r3
 810332c:	683a      	ldr	r2, [r7, #0]
 810332e:	429a      	cmp	r2, r3
 8103330:	d302      	bcc.n	8103338 <HAL_ADC_PollForConversion+0xd0>
 8103332:	683b      	ldr	r3, [r7, #0]
 8103334:	2b00      	cmp	r3, #0
 8103336:	d112      	bne.n	810335e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	681a      	ldr	r2, [r3, #0]
 810333e:	69fb      	ldr	r3, [r7, #28]
 8103340:	4013      	ands	r3, r2
 8103342:	2b00      	cmp	r3, #0
 8103344:	d10b      	bne.n	810335e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810334a:	f043 0204 	orr.w	r2, r3, #4
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	2200      	movs	r2, #0
 8103356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 810335a:	2303      	movs	r3, #3
 810335c:	e06b      	b.n	8103436 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	681a      	ldr	r2, [r3, #0]
 8103364:	69fb      	ldr	r3, [r7, #28]
 8103366:	4013      	ands	r3, r2
 8103368:	2b00      	cmp	r3, #0
 810336a:	d0d6      	beq.n	810331a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810336c:	687b      	ldr	r3, [r7, #4]
 810336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103370:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	4618      	mov	r0, r3
 810337e:	f7ff fbad 	bl	8102adc <LL_ADC_REG_IsTriggerSourceSWStart>
 8103382:	4603      	mov	r3, r0
 8103384:	2b00      	cmp	r3, #0
 8103386:	d01c      	beq.n	81033c2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8103388:	687b      	ldr	r3, [r7, #4]
 810338a:	7d5b      	ldrb	r3, [r3, #21]
 810338c:	2b00      	cmp	r3, #0
 810338e:	d118      	bne.n	81033c2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	f003 0308 	and.w	r3, r3, #8
 810339a:	2b08      	cmp	r3, #8
 810339c:	d111      	bne.n	81033c2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81033b2:	2b00      	cmp	r3, #0
 81033b4:	d105      	bne.n	81033c2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033ba:	f043 0201 	orr.w	r2, r3, #1
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	4a1f      	ldr	r2, [pc, #124]	@ (8103444 <HAL_ADC_PollForConversion+0x1dc>)
 81033c8:	4293      	cmp	r3, r2
 81033ca:	d002      	beq.n	81033d2 <HAL_ADC_PollForConversion+0x16a>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	e000      	b.n	81033d4 <HAL_ADC_PollForConversion+0x16c>
 81033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8103440 <HAL_ADC_PollForConversion+0x1d8>)
 81033d4:	687a      	ldr	r2, [r7, #4]
 81033d6:	6812      	ldr	r2, [r2, #0]
 81033d8:	4293      	cmp	r3, r2
 81033da:	d008      	beq.n	81033ee <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81033dc:	697b      	ldr	r3, [r7, #20]
 81033de:	2b00      	cmp	r3, #0
 81033e0:	d005      	beq.n	81033ee <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81033e2:	697b      	ldr	r3, [r7, #20]
 81033e4:	2b05      	cmp	r3, #5
 81033e6:	d002      	beq.n	81033ee <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81033e8:	697b      	ldr	r3, [r7, #20]
 81033ea:	2b09      	cmp	r3, #9
 81033ec:	d104      	bne.n	81033f8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	681b      	ldr	r3, [r3, #0]
 81033f2:	68db      	ldr	r3, [r3, #12]
 81033f4:	61bb      	str	r3, [r7, #24]
 81033f6:	e00c      	b.n	8103412 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	4a11      	ldr	r2, [pc, #68]	@ (8103444 <HAL_ADC_PollForConversion+0x1dc>)
 81033fe:	4293      	cmp	r3, r2
 8103400:	d002      	beq.n	8103408 <HAL_ADC_PollForConversion+0x1a0>
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	e000      	b.n	810340a <HAL_ADC_PollForConversion+0x1a2>
 8103408:	4b0d      	ldr	r3, [pc, #52]	@ (8103440 <HAL_ADC_PollForConversion+0x1d8>)
 810340a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 810340c:	68fb      	ldr	r3, [r7, #12]
 810340e:	68db      	ldr	r3, [r3, #12]
 8103410:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8103412:	69fb      	ldr	r3, [r7, #28]
 8103414:	2b08      	cmp	r3, #8
 8103416:	d104      	bne.n	8103422 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	2208      	movs	r2, #8
 810341e:	601a      	str	r2, [r3, #0]
 8103420:	e008      	b.n	8103434 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8103422:	69bb      	ldr	r3, [r7, #24]
 8103424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103428:	2b00      	cmp	r3, #0
 810342a:	d103      	bne.n	8103434 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	220c      	movs	r2, #12
 8103432:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8103434:	2300      	movs	r3, #0
}
 8103436:	4618      	mov	r0, r3
 8103438:	3720      	adds	r7, #32
 810343a:	46bd      	mov	sp, r7
 810343c:	bd80      	pop	{r7, pc}
 810343e:	bf00      	nop
 8103440:	40022000 	.word	0x40022000
 8103444:	40022100 	.word	0x40022100
 8103448:	40022300 	.word	0x40022300
 810344c:	58026300 	.word	0x58026300

08103450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8103450:	b480      	push	{r7}
 8103452:	b083      	sub	sp, #12
 8103454:	af00      	add	r7, sp, #0
 8103456:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 810345e:	4618      	mov	r0, r3
 8103460:	370c      	adds	r7, #12
 8103462:	46bd      	mov	sp, r7
 8103464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103468:	4770      	bx	lr
	...

0810346c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810346c:	b590      	push	{r4, r7, lr}
 810346e:	b0a1      	sub	sp, #132	@ 0x84
 8103470:	af00      	add	r7, sp, #0
 8103472:	6078      	str	r0, [r7, #4]
 8103474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103476:	2300      	movs	r3, #0
 8103478:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810347c:	2300      	movs	r3, #0
 810347e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103480:	683b      	ldr	r3, [r7, #0]
 8103482:	68db      	ldr	r3, [r3, #12]
 8103484:	4a65      	ldr	r2, [pc, #404]	@ (810361c <HAL_ADC_ConfigChannel+0x1b0>)
 8103486:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810348e:	2b01      	cmp	r3, #1
 8103490:	d101      	bne.n	8103496 <HAL_ADC_ConfigChannel+0x2a>
 8103492:	2302      	movs	r3, #2
 8103494:	e32e      	b.n	8103af4 <HAL_ADC_ConfigChannel+0x688>
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	2201      	movs	r2, #1
 810349a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	4618      	mov	r0, r3
 81034a4:	f7ff fc4e 	bl	8102d44 <LL_ADC_REG_IsConversionOngoing>
 81034a8:	4603      	mov	r3, r0
 81034aa:	2b00      	cmp	r3, #0
 81034ac:	f040 8313 	bne.w	8103ad6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 81034b0:	683b      	ldr	r3, [r7, #0]
 81034b2:	681b      	ldr	r3, [r3, #0]
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	db2c      	blt.n	8103512 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81034b8:	683b      	ldr	r3, [r7, #0]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81034c0:	2b00      	cmp	r3, #0
 81034c2:	d108      	bne.n	81034d6 <HAL_ADC_ConfigChannel+0x6a>
 81034c4:	683b      	ldr	r3, [r7, #0]
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	0e9b      	lsrs	r3, r3, #26
 81034ca:	f003 031f 	and.w	r3, r3, #31
 81034ce:	2201      	movs	r2, #1
 81034d0:	fa02 f303 	lsl.w	r3, r2, r3
 81034d4:	e016      	b.n	8103504 <HAL_ADC_ConfigChannel+0x98>
 81034d6:	683b      	ldr	r3, [r7, #0]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81034dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81034de:	fa93 f3a3 	rbit	r3, r3
 81034e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81034e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81034e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81034e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d101      	bne.n	81034f2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81034ee:	2320      	movs	r3, #32
 81034f0:	e003      	b.n	81034fa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81034f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81034f4:	fab3 f383 	clz	r3, r3
 81034f8:	b2db      	uxtb	r3, r3
 81034fa:	f003 031f 	and.w	r3, r3, #31
 81034fe:	2201      	movs	r2, #1
 8103500:	fa02 f303 	lsl.w	r3, r2, r3
 8103504:	687a      	ldr	r2, [r7, #4]
 8103506:	6812      	ldr	r2, [r2, #0]
 8103508:	69d1      	ldr	r1, [r2, #28]
 810350a:	687a      	ldr	r2, [r7, #4]
 810350c:	6812      	ldr	r2, [r2, #0]
 810350e:	430b      	orrs	r3, r1
 8103510:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	6818      	ldr	r0, [r3, #0]
 8103516:	683b      	ldr	r3, [r7, #0]
 8103518:	6859      	ldr	r1, [r3, #4]
 810351a:	683b      	ldr	r3, [r7, #0]
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	461a      	mov	r2, r3
 8103520:	f7ff faef 	bl	8102b02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	4618      	mov	r0, r3
 810352a:	f7ff fc0b 	bl	8102d44 <LL_ADC_REG_IsConversionOngoing>
 810352e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4618      	mov	r0, r3
 8103536:	f7ff fc18 	bl	8102d6a <LL_ADC_INJ_IsConversionOngoing>
 810353a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810353c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810353e:	2b00      	cmp	r3, #0
 8103540:	f040 80b8 	bne.w	81036b4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8103546:	2b00      	cmp	r3, #0
 8103548:	f040 80b4 	bne.w	81036b4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	6818      	ldr	r0, [r3, #0]
 8103550:	683b      	ldr	r3, [r7, #0]
 8103552:	6819      	ldr	r1, [r3, #0]
 8103554:	683b      	ldr	r3, [r7, #0]
 8103556:	689b      	ldr	r3, [r3, #8]
 8103558:	461a      	mov	r2, r3
 810355a:	f7ff fafe 	bl	8102b5a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810355e:	4b30      	ldr	r3, [pc, #192]	@ (8103620 <HAL_ADC_ConfigChannel+0x1b4>)
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8103566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810356a:	d10b      	bne.n	8103584 <HAL_ADC_ConfigChannel+0x118>
 810356c:	683b      	ldr	r3, [r7, #0]
 810356e:	695a      	ldr	r2, [r3, #20]
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	68db      	ldr	r3, [r3, #12]
 8103576:	089b      	lsrs	r3, r3, #2
 8103578:	f003 0307 	and.w	r3, r3, #7
 810357c:	005b      	lsls	r3, r3, #1
 810357e:	fa02 f303 	lsl.w	r3, r2, r3
 8103582:	e01d      	b.n	81035c0 <HAL_ADC_ConfigChannel+0x154>
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	681b      	ldr	r3, [r3, #0]
 8103588:	68db      	ldr	r3, [r3, #12]
 810358a:	f003 0310 	and.w	r3, r3, #16
 810358e:	2b00      	cmp	r3, #0
 8103590:	d10b      	bne.n	81035aa <HAL_ADC_ConfigChannel+0x13e>
 8103592:	683b      	ldr	r3, [r7, #0]
 8103594:	695a      	ldr	r2, [r3, #20]
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	68db      	ldr	r3, [r3, #12]
 810359c:	089b      	lsrs	r3, r3, #2
 810359e:	f003 0307 	and.w	r3, r3, #7
 81035a2:	005b      	lsls	r3, r3, #1
 81035a4:	fa02 f303 	lsl.w	r3, r2, r3
 81035a8:	e00a      	b.n	81035c0 <HAL_ADC_ConfigChannel+0x154>
 81035aa:	683b      	ldr	r3, [r7, #0]
 81035ac:	695a      	ldr	r2, [r3, #20]
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	68db      	ldr	r3, [r3, #12]
 81035b4:	089b      	lsrs	r3, r3, #2
 81035b6:	f003 0304 	and.w	r3, r3, #4
 81035ba:	005b      	lsls	r3, r3, #1
 81035bc:	fa02 f303 	lsl.w	r3, r2, r3
 81035c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81035c2:	683b      	ldr	r3, [r7, #0]
 81035c4:	691b      	ldr	r3, [r3, #16]
 81035c6:	2b04      	cmp	r3, #4
 81035c8:	d02c      	beq.n	8103624 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	6818      	ldr	r0, [r3, #0]
 81035ce:	683b      	ldr	r3, [r7, #0]
 81035d0:	6919      	ldr	r1, [r3, #16]
 81035d2:	683b      	ldr	r3, [r7, #0]
 81035d4:	681a      	ldr	r2, [r3, #0]
 81035d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81035d8:	f7ff fa2c 	bl	8102a34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	6818      	ldr	r0, [r3, #0]
 81035e0:	683b      	ldr	r3, [r7, #0]
 81035e2:	6919      	ldr	r1, [r3, #16]
 81035e4:	683b      	ldr	r3, [r7, #0]
 81035e6:	7e5b      	ldrb	r3, [r3, #25]
 81035e8:	2b01      	cmp	r3, #1
 81035ea:	d102      	bne.n	81035f2 <HAL_ADC_ConfigChannel+0x186>
 81035ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81035f0:	e000      	b.n	81035f4 <HAL_ADC_ConfigChannel+0x188>
 81035f2:	2300      	movs	r3, #0
 81035f4:	461a      	mov	r2, r3
 81035f6:	f7ff fa56 	bl	8102aa6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	6818      	ldr	r0, [r3, #0]
 81035fe:	683b      	ldr	r3, [r7, #0]
 8103600:	6919      	ldr	r1, [r3, #16]
 8103602:	683b      	ldr	r3, [r7, #0]
 8103604:	7e1b      	ldrb	r3, [r3, #24]
 8103606:	2b01      	cmp	r3, #1
 8103608:	d102      	bne.n	8103610 <HAL_ADC_ConfigChannel+0x1a4>
 810360a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810360e:	e000      	b.n	8103612 <HAL_ADC_ConfigChannel+0x1a6>
 8103610:	2300      	movs	r3, #0
 8103612:	461a      	mov	r2, r3
 8103614:	f7ff fa2e 	bl	8102a74 <LL_ADC_SetDataRightShift>
 8103618:	e04c      	b.n	81036b4 <HAL_ADC_ConfigChannel+0x248>
 810361a:	bf00      	nop
 810361c:	47ff0000 	.word	0x47ff0000
 8103620:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810362a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810362e:	683b      	ldr	r3, [r7, #0]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	069b      	lsls	r3, r3, #26
 8103634:	429a      	cmp	r2, r3
 8103636:	d107      	bne.n	8103648 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103646:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810364e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103652:	683b      	ldr	r3, [r7, #0]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	069b      	lsls	r3, r3, #26
 8103658:	429a      	cmp	r2, r3
 810365a:	d107      	bne.n	810366c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810366a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103672:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103676:	683b      	ldr	r3, [r7, #0]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	069b      	lsls	r3, r3, #26
 810367c:	429a      	cmp	r2, r3
 810367e:	d107      	bne.n	8103690 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810368e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103696:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810369a:	683b      	ldr	r3, [r7, #0]
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	069b      	lsls	r3, r3, #26
 81036a0:	429a      	cmp	r2, r3
 81036a2:	d107      	bne.n	81036b4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	681b      	ldr	r3, [r3, #0]
 81036a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81036b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	4618      	mov	r0, r3
 81036ba:	f7ff fb1b 	bl	8102cf4 <LL_ADC_IsEnabled>
 81036be:	4603      	mov	r3, r0
 81036c0:	2b00      	cmp	r3, #0
 81036c2:	f040 8211 	bne.w	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	6818      	ldr	r0, [r3, #0]
 81036ca:	683b      	ldr	r3, [r7, #0]
 81036cc:	6819      	ldr	r1, [r3, #0]
 81036ce:	683b      	ldr	r3, [r7, #0]
 81036d0:	68db      	ldr	r3, [r3, #12]
 81036d2:	461a      	mov	r2, r3
 81036d4:	f7ff fa6c 	bl	8102bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81036d8:	683b      	ldr	r3, [r7, #0]
 81036da:	68db      	ldr	r3, [r3, #12]
 81036dc:	4aa1      	ldr	r2, [pc, #644]	@ (8103964 <HAL_ADC_ConfigChannel+0x4f8>)
 81036de:	4293      	cmp	r3, r2
 81036e0:	f040 812e 	bne.w	8103940 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81036e8:	683b      	ldr	r3, [r7, #0]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	d10b      	bne.n	810370c <HAL_ADC_ConfigChannel+0x2a0>
 81036f4:	683b      	ldr	r3, [r7, #0]
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	0e9b      	lsrs	r3, r3, #26
 81036fa:	3301      	adds	r3, #1
 81036fc:	f003 031f 	and.w	r3, r3, #31
 8103700:	2b09      	cmp	r3, #9
 8103702:	bf94      	ite	ls
 8103704:	2301      	movls	r3, #1
 8103706:	2300      	movhi	r3, #0
 8103708:	b2db      	uxtb	r3, r3
 810370a:	e019      	b.n	8103740 <HAL_ADC_ConfigChannel+0x2d4>
 810370c:	683b      	ldr	r3, [r7, #0]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8103714:	fa93 f3a3 	rbit	r3, r3
 8103718:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 810371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810371c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 810371e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8103720:	2b00      	cmp	r3, #0
 8103722:	d101      	bne.n	8103728 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8103724:	2320      	movs	r3, #32
 8103726:	e003      	b.n	8103730 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8103728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810372a:	fab3 f383 	clz	r3, r3
 810372e:	b2db      	uxtb	r3, r3
 8103730:	3301      	adds	r3, #1
 8103732:	f003 031f 	and.w	r3, r3, #31
 8103736:	2b09      	cmp	r3, #9
 8103738:	bf94      	ite	ls
 810373a:	2301      	movls	r3, #1
 810373c:	2300      	movhi	r3, #0
 810373e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103740:	2b00      	cmp	r3, #0
 8103742:	d079      	beq.n	8103838 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103744:	683b      	ldr	r3, [r7, #0]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810374c:	2b00      	cmp	r3, #0
 810374e:	d107      	bne.n	8103760 <HAL_ADC_ConfigChannel+0x2f4>
 8103750:	683b      	ldr	r3, [r7, #0]
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	0e9b      	lsrs	r3, r3, #26
 8103756:	3301      	adds	r3, #1
 8103758:	069b      	lsls	r3, r3, #26
 810375a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810375e:	e015      	b.n	810378c <HAL_ADC_ConfigChannel+0x320>
 8103760:	683b      	ldr	r3, [r7, #0]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8103768:	fa93 f3a3 	rbit	r3, r3
 810376c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810376e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103770:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8103772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8103774:	2b00      	cmp	r3, #0
 8103776:	d101      	bne.n	810377c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8103778:	2320      	movs	r3, #32
 810377a:	e003      	b.n	8103784 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 810377c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810377e:	fab3 f383 	clz	r3, r3
 8103782:	b2db      	uxtb	r3, r3
 8103784:	3301      	adds	r3, #1
 8103786:	069b      	lsls	r3, r3, #26
 8103788:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810378c:	683b      	ldr	r3, [r7, #0]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103794:	2b00      	cmp	r3, #0
 8103796:	d109      	bne.n	81037ac <HAL_ADC_ConfigChannel+0x340>
 8103798:	683b      	ldr	r3, [r7, #0]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	0e9b      	lsrs	r3, r3, #26
 810379e:	3301      	adds	r3, #1
 81037a0:	f003 031f 	and.w	r3, r3, #31
 81037a4:	2101      	movs	r1, #1
 81037a6:	fa01 f303 	lsl.w	r3, r1, r3
 81037aa:	e017      	b.n	81037dc <HAL_ADC_ConfigChannel+0x370>
 81037ac:	683b      	ldr	r3, [r7, #0]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81037b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81037b4:	fa93 f3a3 	rbit	r3, r3
 81037b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 81037ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81037bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 81037be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81037c0:	2b00      	cmp	r3, #0
 81037c2:	d101      	bne.n	81037c8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 81037c4:	2320      	movs	r3, #32
 81037c6:	e003      	b.n	81037d0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 81037c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81037ca:	fab3 f383 	clz	r3, r3
 81037ce:	b2db      	uxtb	r3, r3
 81037d0:	3301      	adds	r3, #1
 81037d2:	f003 031f 	and.w	r3, r3, #31
 81037d6:	2101      	movs	r1, #1
 81037d8:	fa01 f303 	lsl.w	r3, r1, r3
 81037dc:	ea42 0103 	orr.w	r1, r2, r3
 81037e0:	683b      	ldr	r3, [r7, #0]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d10a      	bne.n	8103802 <HAL_ADC_ConfigChannel+0x396>
 81037ec:	683b      	ldr	r3, [r7, #0]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	0e9b      	lsrs	r3, r3, #26
 81037f2:	3301      	adds	r3, #1
 81037f4:	f003 021f 	and.w	r2, r3, #31
 81037f8:	4613      	mov	r3, r2
 81037fa:	005b      	lsls	r3, r3, #1
 81037fc:	4413      	add	r3, r2
 81037fe:	051b      	lsls	r3, r3, #20
 8103800:	e018      	b.n	8103834 <HAL_ADC_ConfigChannel+0x3c8>
 8103802:	683b      	ldr	r3, [r7, #0]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810380a:	fa93 f3a3 	rbit	r3, r3
 810380e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8103810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103812:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8103814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103816:	2b00      	cmp	r3, #0
 8103818:	d101      	bne.n	810381e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 810381a:	2320      	movs	r3, #32
 810381c:	e003      	b.n	8103826 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 810381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103820:	fab3 f383 	clz	r3, r3
 8103824:	b2db      	uxtb	r3, r3
 8103826:	3301      	adds	r3, #1
 8103828:	f003 021f 	and.w	r2, r3, #31
 810382c:	4613      	mov	r3, r2
 810382e:	005b      	lsls	r3, r3, #1
 8103830:	4413      	add	r3, r2
 8103832:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103834:	430b      	orrs	r3, r1
 8103836:	e07e      	b.n	8103936 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103838:	683b      	ldr	r3, [r7, #0]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103840:	2b00      	cmp	r3, #0
 8103842:	d107      	bne.n	8103854 <HAL_ADC_ConfigChannel+0x3e8>
 8103844:	683b      	ldr	r3, [r7, #0]
 8103846:	681b      	ldr	r3, [r3, #0]
 8103848:	0e9b      	lsrs	r3, r3, #26
 810384a:	3301      	adds	r3, #1
 810384c:	069b      	lsls	r3, r3, #26
 810384e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103852:	e015      	b.n	8103880 <HAL_ADC_ConfigChannel+0x414>
 8103854:	683b      	ldr	r3, [r7, #0]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810385c:	fa93 f3a3 	rbit	r3, r3
 8103860:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8103862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8103866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103868:	2b00      	cmp	r3, #0
 810386a:	d101      	bne.n	8103870 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 810386c:	2320      	movs	r3, #32
 810386e:	e003      	b.n	8103878 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8103870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103872:	fab3 f383 	clz	r3, r3
 8103876:	b2db      	uxtb	r3, r3
 8103878:	3301      	adds	r3, #1
 810387a:	069b      	lsls	r3, r3, #26
 810387c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103880:	683b      	ldr	r3, [r7, #0]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103888:	2b00      	cmp	r3, #0
 810388a:	d109      	bne.n	81038a0 <HAL_ADC_ConfigChannel+0x434>
 810388c:	683b      	ldr	r3, [r7, #0]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	0e9b      	lsrs	r3, r3, #26
 8103892:	3301      	adds	r3, #1
 8103894:	f003 031f 	and.w	r3, r3, #31
 8103898:	2101      	movs	r1, #1
 810389a:	fa01 f303 	lsl.w	r3, r1, r3
 810389e:	e017      	b.n	81038d0 <HAL_ADC_ConfigChannel+0x464>
 81038a0:	683b      	ldr	r3, [r7, #0]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81038a6:	69fb      	ldr	r3, [r7, #28]
 81038a8:	fa93 f3a3 	rbit	r3, r3
 81038ac:	61bb      	str	r3, [r7, #24]
  return result;
 81038ae:	69bb      	ldr	r3, [r7, #24]
 81038b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81038b2:	6a3b      	ldr	r3, [r7, #32]
 81038b4:	2b00      	cmp	r3, #0
 81038b6:	d101      	bne.n	81038bc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 81038b8:	2320      	movs	r3, #32
 81038ba:	e003      	b.n	81038c4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 81038bc:	6a3b      	ldr	r3, [r7, #32]
 81038be:	fab3 f383 	clz	r3, r3
 81038c2:	b2db      	uxtb	r3, r3
 81038c4:	3301      	adds	r3, #1
 81038c6:	f003 031f 	and.w	r3, r3, #31
 81038ca:	2101      	movs	r1, #1
 81038cc:	fa01 f303 	lsl.w	r3, r1, r3
 81038d0:	ea42 0103 	orr.w	r1, r2, r3
 81038d4:	683b      	ldr	r3, [r7, #0]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81038dc:	2b00      	cmp	r3, #0
 81038de:	d10d      	bne.n	81038fc <HAL_ADC_ConfigChannel+0x490>
 81038e0:	683b      	ldr	r3, [r7, #0]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	0e9b      	lsrs	r3, r3, #26
 81038e6:	3301      	adds	r3, #1
 81038e8:	f003 021f 	and.w	r2, r3, #31
 81038ec:	4613      	mov	r3, r2
 81038ee:	005b      	lsls	r3, r3, #1
 81038f0:	4413      	add	r3, r2
 81038f2:	3b1e      	subs	r3, #30
 81038f4:	051b      	lsls	r3, r3, #20
 81038f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81038fa:	e01b      	b.n	8103934 <HAL_ADC_ConfigChannel+0x4c8>
 81038fc:	683b      	ldr	r3, [r7, #0]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103902:	693b      	ldr	r3, [r7, #16]
 8103904:	fa93 f3a3 	rbit	r3, r3
 8103908:	60fb      	str	r3, [r7, #12]
  return result;
 810390a:	68fb      	ldr	r3, [r7, #12]
 810390c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810390e:	697b      	ldr	r3, [r7, #20]
 8103910:	2b00      	cmp	r3, #0
 8103912:	d101      	bne.n	8103918 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8103914:	2320      	movs	r3, #32
 8103916:	e003      	b.n	8103920 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8103918:	697b      	ldr	r3, [r7, #20]
 810391a:	fab3 f383 	clz	r3, r3
 810391e:	b2db      	uxtb	r3, r3
 8103920:	3301      	adds	r3, #1
 8103922:	f003 021f 	and.w	r2, r3, #31
 8103926:	4613      	mov	r3, r2
 8103928:	005b      	lsls	r3, r3, #1
 810392a:	4413      	add	r3, r2
 810392c:	3b1e      	subs	r3, #30
 810392e:	051b      	lsls	r3, r3, #20
 8103930:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103934:	430b      	orrs	r3, r1
 8103936:	683a      	ldr	r2, [r7, #0]
 8103938:	6892      	ldr	r2, [r2, #8]
 810393a:	4619      	mov	r1, r3
 810393c:	f7ff f90d 	bl	8102b5a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103940:	683b      	ldr	r3, [r7, #0]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	2b00      	cmp	r3, #0
 8103946:	f280 80cf 	bge.w	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	4a06      	ldr	r2, [pc, #24]	@ (8103968 <HAL_ADC_ConfigChannel+0x4fc>)
 8103950:	4293      	cmp	r3, r2
 8103952:	d004      	beq.n	810395e <HAL_ADC_ConfigChannel+0x4f2>
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	4a04      	ldr	r2, [pc, #16]	@ (810396c <HAL_ADC_ConfigChannel+0x500>)
 810395a:	4293      	cmp	r3, r2
 810395c:	d10a      	bne.n	8103974 <HAL_ADC_ConfigChannel+0x508>
 810395e:	4b04      	ldr	r3, [pc, #16]	@ (8103970 <HAL_ADC_ConfigChannel+0x504>)
 8103960:	e009      	b.n	8103976 <HAL_ADC_ConfigChannel+0x50a>
 8103962:	bf00      	nop
 8103964:	47ff0000 	.word	0x47ff0000
 8103968:	40022000 	.word	0x40022000
 810396c:	40022100 	.word	0x40022100
 8103970:	40022300 	.word	0x40022300
 8103974:	4b61      	ldr	r3, [pc, #388]	@ (8103afc <HAL_ADC_ConfigChannel+0x690>)
 8103976:	4618      	mov	r0, r3
 8103978:	f7ff f84e 	bl	8102a18 <LL_ADC_GetCommonPathInternalCh>
 810397c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	4a5f      	ldr	r2, [pc, #380]	@ (8103b00 <HAL_ADC_ConfigChannel+0x694>)
 8103984:	4293      	cmp	r3, r2
 8103986:	d004      	beq.n	8103992 <HAL_ADC_ConfigChannel+0x526>
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	4a5d      	ldr	r2, [pc, #372]	@ (8103b04 <HAL_ADC_ConfigChannel+0x698>)
 810398e:	4293      	cmp	r3, r2
 8103990:	d10e      	bne.n	81039b0 <HAL_ADC_ConfigChannel+0x544>
 8103992:	485b      	ldr	r0, [pc, #364]	@ (8103b00 <HAL_ADC_ConfigChannel+0x694>)
 8103994:	f7ff f9ae 	bl	8102cf4 <LL_ADC_IsEnabled>
 8103998:	4604      	mov	r4, r0
 810399a:	485a      	ldr	r0, [pc, #360]	@ (8103b04 <HAL_ADC_ConfigChannel+0x698>)
 810399c:	f7ff f9aa 	bl	8102cf4 <LL_ADC_IsEnabled>
 81039a0:	4603      	mov	r3, r0
 81039a2:	4323      	orrs	r3, r4
 81039a4:	2b00      	cmp	r3, #0
 81039a6:	bf0c      	ite	eq
 81039a8:	2301      	moveq	r3, #1
 81039aa:	2300      	movne	r3, #0
 81039ac:	b2db      	uxtb	r3, r3
 81039ae:	e008      	b.n	81039c2 <HAL_ADC_ConfigChannel+0x556>
 81039b0:	4855      	ldr	r0, [pc, #340]	@ (8103b08 <HAL_ADC_ConfigChannel+0x69c>)
 81039b2:	f7ff f99f 	bl	8102cf4 <LL_ADC_IsEnabled>
 81039b6:	4603      	mov	r3, r0
 81039b8:	2b00      	cmp	r3, #0
 81039ba:	bf0c      	ite	eq
 81039bc:	2301      	moveq	r3, #1
 81039be:	2300      	movne	r3, #0
 81039c0:	b2db      	uxtb	r3, r3
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	d07d      	beq.n	8103ac2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81039c6:	683b      	ldr	r3, [r7, #0]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	4a50      	ldr	r2, [pc, #320]	@ (8103b0c <HAL_ADC_ConfigChannel+0x6a0>)
 81039cc:	4293      	cmp	r3, r2
 81039ce:	d130      	bne.n	8103a32 <HAL_ADC_ConfigChannel+0x5c6>
 81039d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81039d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d12b      	bne.n	8103a32 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	4a4a      	ldr	r2, [pc, #296]	@ (8103b08 <HAL_ADC_ConfigChannel+0x69c>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	f040 8081 	bne.w	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	4a45      	ldr	r2, [pc, #276]	@ (8103b00 <HAL_ADC_ConfigChannel+0x694>)
 81039ec:	4293      	cmp	r3, r2
 81039ee:	d004      	beq.n	81039fa <HAL_ADC_ConfigChannel+0x58e>
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	4a43      	ldr	r2, [pc, #268]	@ (8103b04 <HAL_ADC_ConfigChannel+0x698>)
 81039f6:	4293      	cmp	r3, r2
 81039f8:	d101      	bne.n	81039fe <HAL_ADC_ConfigChannel+0x592>
 81039fa:	4a45      	ldr	r2, [pc, #276]	@ (8103b10 <HAL_ADC_ConfigChannel+0x6a4>)
 81039fc:	e000      	b.n	8103a00 <HAL_ADC_ConfigChannel+0x594>
 81039fe:	4a3f      	ldr	r2, [pc, #252]	@ (8103afc <HAL_ADC_ConfigChannel+0x690>)
 8103a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103a02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103a06:	4619      	mov	r1, r3
 8103a08:	4610      	mov	r0, r2
 8103a0a:	f7fe fff2 	bl	81029f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103a0e:	4b41      	ldr	r3, [pc, #260]	@ (8103b14 <HAL_ADC_ConfigChannel+0x6a8>)
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	099b      	lsrs	r3, r3, #6
 8103a14:	4a40      	ldr	r2, [pc, #256]	@ (8103b18 <HAL_ADC_ConfigChannel+0x6ac>)
 8103a16:	fba2 2303 	umull	r2, r3, r2, r3
 8103a1a:	099b      	lsrs	r3, r3, #6
 8103a1c:	3301      	adds	r3, #1
 8103a1e:	005b      	lsls	r3, r3, #1
 8103a20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103a22:	e002      	b.n	8103a2a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8103a24:	68bb      	ldr	r3, [r7, #8]
 8103a26:	3b01      	subs	r3, #1
 8103a28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103a2a:	68bb      	ldr	r3, [r7, #8]
 8103a2c:	2b00      	cmp	r3, #0
 8103a2e:	d1f9      	bne.n	8103a24 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103a30:	e05a      	b.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103a32:	683b      	ldr	r3, [r7, #0]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4a39      	ldr	r2, [pc, #228]	@ (8103b1c <HAL_ADC_ConfigChannel+0x6b0>)
 8103a38:	4293      	cmp	r3, r2
 8103a3a:	d11e      	bne.n	8103a7a <HAL_ADC_ConfigChannel+0x60e>
 8103a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103a3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8103a42:	2b00      	cmp	r3, #0
 8103a44:	d119      	bne.n	8103a7a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8103b08 <HAL_ADC_ConfigChannel+0x69c>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	d14b      	bne.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	4a2a      	ldr	r2, [pc, #168]	@ (8103b00 <HAL_ADC_ConfigChannel+0x694>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d004      	beq.n	8103a64 <HAL_ADC_ConfigChannel+0x5f8>
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a29      	ldr	r2, [pc, #164]	@ (8103b04 <HAL_ADC_ConfigChannel+0x698>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d101      	bne.n	8103a68 <HAL_ADC_ConfigChannel+0x5fc>
 8103a64:	4a2a      	ldr	r2, [pc, #168]	@ (8103b10 <HAL_ADC_ConfigChannel+0x6a4>)
 8103a66:	e000      	b.n	8103a6a <HAL_ADC_ConfigChannel+0x5fe>
 8103a68:	4a24      	ldr	r2, [pc, #144]	@ (8103afc <HAL_ADC_ConfigChannel+0x690>)
 8103a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103a6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103a70:	4619      	mov	r1, r3
 8103a72:	4610      	mov	r0, r2
 8103a74:	f7fe ffbd 	bl	81029f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103a78:	e036      	b.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103a7a:	683b      	ldr	r3, [r7, #0]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	4a28      	ldr	r2, [pc, #160]	@ (8103b20 <HAL_ADC_ConfigChannel+0x6b4>)
 8103a80:	4293      	cmp	r3, r2
 8103a82:	d131      	bne.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
 8103a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d12c      	bne.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	4a1d      	ldr	r2, [pc, #116]	@ (8103b08 <HAL_ADC_ConfigChannel+0x69c>)
 8103a94:	4293      	cmp	r3, r2
 8103a96:	d127      	bne.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	4a18      	ldr	r2, [pc, #96]	@ (8103b00 <HAL_ADC_ConfigChannel+0x694>)
 8103a9e:	4293      	cmp	r3, r2
 8103aa0:	d004      	beq.n	8103aac <HAL_ADC_ConfigChannel+0x640>
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	4a17      	ldr	r2, [pc, #92]	@ (8103b04 <HAL_ADC_ConfigChannel+0x698>)
 8103aa8:	4293      	cmp	r3, r2
 8103aaa:	d101      	bne.n	8103ab0 <HAL_ADC_ConfigChannel+0x644>
 8103aac:	4a18      	ldr	r2, [pc, #96]	@ (8103b10 <HAL_ADC_ConfigChannel+0x6a4>)
 8103aae:	e000      	b.n	8103ab2 <HAL_ADC_ConfigChannel+0x646>
 8103ab0:	4a12      	ldr	r2, [pc, #72]	@ (8103afc <HAL_ADC_ConfigChannel+0x690>)
 8103ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103ab8:	4619      	mov	r1, r3
 8103aba:	4610      	mov	r0, r2
 8103abc:	f7fe ff99 	bl	81029f2 <LL_ADC_SetCommonPathInternalCh>
 8103ac0:	e012      	b.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ac6:	f043 0220 	orr.w	r2, r3, #32
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8103ace:	2301      	movs	r3, #1
 8103ad0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8103ad4:	e008      	b.n	8103ae8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ada:	f043 0220 	orr.w	r2, r3, #32
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103ae2:	2301      	movs	r3, #1
 8103ae4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	2200      	movs	r2, #0
 8103aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103af0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8103af4:	4618      	mov	r0, r3
 8103af6:	3784      	adds	r7, #132	@ 0x84
 8103af8:	46bd      	mov	sp, r7
 8103afa:	bd90      	pop	{r4, r7, pc}
 8103afc:	58026300 	.word	0x58026300
 8103b00:	40022000 	.word	0x40022000
 8103b04:	40022100 	.word	0x40022100
 8103b08:	58026000 	.word	0x58026000
 8103b0c:	cb840000 	.word	0xcb840000
 8103b10:	40022300 	.word	0x40022300
 8103b14:	24000000 	.word	0x24000000
 8103b18:	053e2d63 	.word	0x053e2d63
 8103b1c:	c7520000 	.word	0xc7520000
 8103b20:	cfb80000 	.word	0xcfb80000

08103b24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8103b24:	b580      	push	{r7, lr}
 8103b26:	b084      	sub	sp, #16
 8103b28:	af00      	add	r7, sp, #0
 8103b2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4618      	mov	r0, r3
 8103b32:	f7ff f8df 	bl	8102cf4 <LL_ADC_IsEnabled>
 8103b36:	4603      	mov	r3, r0
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d16e      	bne.n	8103c1a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	689a      	ldr	r2, [r3, #8]
 8103b42:	4b38      	ldr	r3, [pc, #224]	@ (8103c24 <ADC_Enable+0x100>)
 8103b44:	4013      	ands	r3, r2
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d00d      	beq.n	8103b66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b4e:	f043 0210 	orr.w	r2, r3, #16
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b5a:	f043 0201 	orr.w	r2, r3, #1
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8103b62:	2301      	movs	r3, #1
 8103b64:	e05a      	b.n	8103c1c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	4618      	mov	r0, r3
 8103b6c:	f7ff f8ae 	bl	8102ccc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103b70:	f7fe fedc 	bl	810292c <HAL_GetTick>
 8103b74:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8103c28 <ADC_Enable+0x104>)
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	d004      	beq.n	8103b8a <ADC_Enable+0x66>
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	4a29      	ldr	r2, [pc, #164]	@ (8103c2c <ADC_Enable+0x108>)
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d101      	bne.n	8103b8e <ADC_Enable+0x6a>
 8103b8a:	4b29      	ldr	r3, [pc, #164]	@ (8103c30 <ADC_Enable+0x10c>)
 8103b8c:	e000      	b.n	8103b90 <ADC_Enable+0x6c>
 8103b8e:	4b29      	ldr	r3, [pc, #164]	@ (8103c34 <ADC_Enable+0x110>)
 8103b90:	4618      	mov	r0, r3
 8103b92:	f7ff f831 	bl	8102bf8 <LL_ADC_GetMultimode>
 8103b96:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	4a23      	ldr	r2, [pc, #140]	@ (8103c2c <ADC_Enable+0x108>)
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d002      	beq.n	8103ba8 <ADC_Enable+0x84>
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	681b      	ldr	r3, [r3, #0]
 8103ba6:	e000      	b.n	8103baa <ADC_Enable+0x86>
 8103ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8103c28 <ADC_Enable+0x104>)
 8103baa:	687a      	ldr	r2, [r7, #4]
 8103bac:	6812      	ldr	r2, [r2, #0]
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d02c      	beq.n	8103c0c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103bb2:	68bb      	ldr	r3, [r7, #8]
 8103bb4:	2b00      	cmp	r3, #0
 8103bb6:	d130      	bne.n	8103c1a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103bb8:	e028      	b.n	8103c0c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	4618      	mov	r0, r3
 8103bc0:	f7ff f898 	bl	8102cf4 <LL_ADC_IsEnabled>
 8103bc4:	4603      	mov	r3, r0
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d104      	bne.n	8103bd4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f7ff f87c 	bl	8102ccc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8103bd4:	f7fe feaa 	bl	810292c <HAL_GetTick>
 8103bd8:	4602      	mov	r2, r0
 8103bda:	68fb      	ldr	r3, [r7, #12]
 8103bdc:	1ad3      	subs	r3, r2, r3
 8103bde:	2b02      	cmp	r3, #2
 8103be0:	d914      	bls.n	8103c0c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	f003 0301 	and.w	r3, r3, #1
 8103bec:	2b01      	cmp	r3, #1
 8103bee:	d00d      	beq.n	8103c0c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103bf4:	f043 0210 	orr.w	r2, r3, #16
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103c00:	f043 0201 	orr.w	r2, r3, #1
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8103c08:	2301      	movs	r3, #1
 8103c0a:	e007      	b.n	8103c1c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	f003 0301 	and.w	r3, r3, #1
 8103c16:	2b01      	cmp	r3, #1
 8103c18:	d1cf      	bne.n	8103bba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8103c1a:	2300      	movs	r3, #0
}
 8103c1c:	4618      	mov	r0, r3
 8103c1e:	3710      	adds	r7, #16
 8103c20:	46bd      	mov	sp, r7
 8103c22:	bd80      	pop	{r7, pc}
 8103c24:	8000003f 	.word	0x8000003f
 8103c28:	40022000 	.word	0x40022000
 8103c2c:	40022100 	.word	0x40022100
 8103c30:	40022300 	.word	0x40022300
 8103c34:	58026300 	.word	0x58026300

08103c38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103c38:	b580      	push	{r7, lr}
 8103c3a:	b084      	sub	sp, #16
 8103c3c:	af00      	add	r7, sp, #0
 8103c3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a7a      	ldr	r2, [pc, #488]	@ (8103e30 <ADC_ConfigureBoostMode+0x1f8>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d004      	beq.n	8103c54 <ADC_ConfigureBoostMode+0x1c>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a79      	ldr	r2, [pc, #484]	@ (8103e34 <ADC_ConfigureBoostMode+0x1fc>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d109      	bne.n	8103c68 <ADC_ConfigureBoostMode+0x30>
 8103c54:	4b78      	ldr	r3, [pc, #480]	@ (8103e38 <ADC_ConfigureBoostMode+0x200>)
 8103c56:	689b      	ldr	r3, [r3, #8]
 8103c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103c5c:	2b00      	cmp	r3, #0
 8103c5e:	bf14      	ite	ne
 8103c60:	2301      	movne	r3, #1
 8103c62:	2300      	moveq	r3, #0
 8103c64:	b2db      	uxtb	r3, r3
 8103c66:	e008      	b.n	8103c7a <ADC_ConfigureBoostMode+0x42>
 8103c68:	4b74      	ldr	r3, [pc, #464]	@ (8103e3c <ADC_ConfigureBoostMode+0x204>)
 8103c6a:	689b      	ldr	r3, [r3, #8]
 8103c6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103c70:	2b00      	cmp	r3, #0
 8103c72:	bf14      	ite	ne
 8103c74:	2301      	movne	r3, #1
 8103c76:	2300      	moveq	r3, #0
 8103c78:	b2db      	uxtb	r3, r3
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d01c      	beq.n	8103cb8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103c7e:	f006 f809 	bl	8109c94 <HAL_RCC_GetHCLKFreq>
 8103c82:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	685b      	ldr	r3, [r3, #4]
 8103c88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103c8c:	d010      	beq.n	8103cb0 <ADC_ConfigureBoostMode+0x78>
 8103c8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103c92:	d873      	bhi.n	8103d7c <ADC_ConfigureBoostMode+0x144>
 8103c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c98:	d002      	beq.n	8103ca0 <ADC_ConfigureBoostMode+0x68>
 8103c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c9e:	d16d      	bne.n	8103d7c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	685b      	ldr	r3, [r3, #4]
 8103ca4:	0c1b      	lsrs	r3, r3, #16
 8103ca6:	68fa      	ldr	r2, [r7, #12]
 8103ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8103cac:	60fb      	str	r3, [r7, #12]
        break;
 8103cae:	e068      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	089b      	lsrs	r3, r3, #2
 8103cb4:	60fb      	str	r3, [r7, #12]
        break;
 8103cb6:	e064      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103cb8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8103cbc:	f04f 0100 	mov.w	r1, #0
 8103cc0:	f007 fad0 	bl	810b264 <HAL_RCCEx_GetPeriphCLKFreq>
 8103cc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	685b      	ldr	r3, [r3, #4]
 8103cca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103cce:	d051      	beq.n	8103d74 <ADC_ConfigureBoostMode+0x13c>
 8103cd0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103cd4:	d854      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103cd6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103cda:	d047      	beq.n	8103d6c <ADC_ConfigureBoostMode+0x134>
 8103cdc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103ce0:	d84e      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103ce2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103ce6:	d03d      	beq.n	8103d64 <ADC_ConfigureBoostMode+0x12c>
 8103ce8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103cec:	d848      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103cf2:	d033      	beq.n	8103d5c <ADC_ConfigureBoostMode+0x124>
 8103cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103cf8:	d842      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103cfa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103cfe:	d029      	beq.n	8103d54 <ADC_ConfigureBoostMode+0x11c>
 8103d00:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103d04:	d83c      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103d06:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103d0a:	d01a      	beq.n	8103d42 <ADC_ConfigureBoostMode+0x10a>
 8103d0c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103d10:	d836      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103d12:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103d16:	d014      	beq.n	8103d42 <ADC_ConfigureBoostMode+0x10a>
 8103d18:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103d1c:	d830      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103d22:	d00e      	beq.n	8103d42 <ADC_ConfigureBoostMode+0x10a>
 8103d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103d28:	d82a      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103d2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103d2e:	d008      	beq.n	8103d42 <ADC_ConfigureBoostMode+0x10a>
 8103d30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103d34:	d824      	bhi.n	8103d80 <ADC_ConfigureBoostMode+0x148>
 8103d36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103d3a:	d002      	beq.n	8103d42 <ADC_ConfigureBoostMode+0x10a>
 8103d3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103d40:	d11e      	bne.n	8103d80 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	685b      	ldr	r3, [r3, #4]
 8103d46:	0c9b      	lsrs	r3, r3, #18
 8103d48:	005b      	lsls	r3, r3, #1
 8103d4a:	68fa      	ldr	r2, [r7, #12]
 8103d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103d50:	60fb      	str	r3, [r7, #12]
        break;
 8103d52:	e016      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103d54:	68fb      	ldr	r3, [r7, #12]
 8103d56:	091b      	lsrs	r3, r3, #4
 8103d58:	60fb      	str	r3, [r7, #12]
        break;
 8103d5a:	e012      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103d5c:	68fb      	ldr	r3, [r7, #12]
 8103d5e:	095b      	lsrs	r3, r3, #5
 8103d60:	60fb      	str	r3, [r7, #12]
        break;
 8103d62:	e00e      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103d64:	68fb      	ldr	r3, [r7, #12]
 8103d66:	099b      	lsrs	r3, r3, #6
 8103d68:	60fb      	str	r3, [r7, #12]
        break;
 8103d6a:	e00a      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103d6c:	68fb      	ldr	r3, [r7, #12]
 8103d6e:	09db      	lsrs	r3, r3, #7
 8103d70:	60fb      	str	r3, [r7, #12]
        break;
 8103d72:	e006      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103d74:	68fb      	ldr	r3, [r7, #12]
 8103d76:	0a1b      	lsrs	r3, r3, #8
 8103d78:	60fb      	str	r3, [r7, #12]
        break;
 8103d7a:	e002      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103d7c:	bf00      	nop
 8103d7e:	e000      	b.n	8103d82 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103d80:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103d82:	f7fe fe03 	bl	810298c <HAL_GetREVID>
 8103d86:	4603      	mov	r3, r0
 8103d88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103d8c:	4293      	cmp	r3, r2
 8103d8e:	d815      	bhi.n	8103dbc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103d90:	68fb      	ldr	r3, [r7, #12]
 8103d92:	4a2b      	ldr	r2, [pc, #172]	@ (8103e40 <ADC_ConfigureBoostMode+0x208>)
 8103d94:	4293      	cmp	r3, r2
 8103d96:	d908      	bls.n	8103daa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	689a      	ldr	r2, [r3, #8]
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103da6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103da8:	e03e      	b.n	8103e28 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	681b      	ldr	r3, [r3, #0]
 8103dae:	689a      	ldr	r2, [r3, #8]
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103db8:	609a      	str	r2, [r3, #8]
}
 8103dba:	e035      	b.n	8103e28 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	085b      	lsrs	r3, r3, #1
 8103dc0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103dc2:	68fb      	ldr	r3, [r7, #12]
 8103dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8103e44 <ADC_ConfigureBoostMode+0x20c>)
 8103dc6:	4293      	cmp	r3, r2
 8103dc8:	d808      	bhi.n	8103ddc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	689a      	ldr	r2, [r3, #8]
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8103dd8:	609a      	str	r2, [r3, #8]
}
 8103dda:	e025      	b.n	8103e28 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103ddc:	68fb      	ldr	r3, [r7, #12]
 8103dde:	4a1a      	ldr	r2, [pc, #104]	@ (8103e48 <ADC_ConfigureBoostMode+0x210>)
 8103de0:	4293      	cmp	r3, r2
 8103de2:	d80a      	bhi.n	8103dfa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	689b      	ldr	r3, [r3, #8]
 8103dea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103df6:	609a      	str	r2, [r3, #8]
}
 8103df8:	e016      	b.n	8103e28 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103dfa:	68fb      	ldr	r3, [r7, #12]
 8103dfc:	4a13      	ldr	r2, [pc, #76]	@ (8103e4c <ADC_ConfigureBoostMode+0x214>)
 8103dfe:	4293      	cmp	r3, r2
 8103e00:	d80a      	bhi.n	8103e18 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	689b      	ldr	r3, [r3, #8]
 8103e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103e14:	609a      	str	r2, [r3, #8]
}
 8103e16:	e007      	b.n	8103e28 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	689a      	ldr	r2, [r3, #8]
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8103e26:	609a      	str	r2, [r3, #8]
}
 8103e28:	bf00      	nop
 8103e2a:	3710      	adds	r7, #16
 8103e2c:	46bd      	mov	sp, r7
 8103e2e:	bd80      	pop	{r7, pc}
 8103e30:	40022000 	.word	0x40022000
 8103e34:	40022100 	.word	0x40022100
 8103e38:	40022300 	.word	0x40022300
 8103e3c:	58026300 	.word	0x58026300
 8103e40:	01312d00 	.word	0x01312d00
 8103e44:	005f5e10 	.word	0x005f5e10
 8103e48:	00bebc20 	.word	0x00bebc20
 8103e4c:	017d7840 	.word	0x017d7840

08103e50 <__NVIC_SetPriorityGrouping>:
{
 8103e50:	b480      	push	{r7}
 8103e52:	b085      	sub	sp, #20
 8103e54:	af00      	add	r7, sp, #0
 8103e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	f003 0307 	and.w	r3, r3, #7
 8103e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103e60:	4b0b      	ldr	r3, [pc, #44]	@ (8103e90 <__NVIC_SetPriorityGrouping+0x40>)
 8103e62:	68db      	ldr	r3, [r3, #12]
 8103e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103e66:	68ba      	ldr	r2, [r7, #8]
 8103e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103e6c:	4013      	ands	r3, r2
 8103e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103e70:	68fb      	ldr	r3, [r7, #12]
 8103e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103e74:	68bb      	ldr	r3, [r7, #8]
 8103e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8103e78:	4b06      	ldr	r3, [pc, #24]	@ (8103e94 <__NVIC_SetPriorityGrouping+0x44>)
 8103e7a:	4313      	orrs	r3, r2
 8103e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103e7e:	4a04      	ldr	r2, [pc, #16]	@ (8103e90 <__NVIC_SetPriorityGrouping+0x40>)
 8103e80:	68bb      	ldr	r3, [r7, #8]
 8103e82:	60d3      	str	r3, [r2, #12]
}
 8103e84:	bf00      	nop
 8103e86:	3714      	adds	r7, #20
 8103e88:	46bd      	mov	sp, r7
 8103e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e8e:	4770      	bx	lr
 8103e90:	e000ed00 	.word	0xe000ed00
 8103e94:	05fa0000 	.word	0x05fa0000

08103e98 <__NVIC_GetPriorityGrouping>:
{
 8103e98:	b480      	push	{r7}
 8103e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103e9c:	4b04      	ldr	r3, [pc, #16]	@ (8103eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8103e9e:	68db      	ldr	r3, [r3, #12]
 8103ea0:	0a1b      	lsrs	r3, r3, #8
 8103ea2:	f003 0307 	and.w	r3, r3, #7
}
 8103ea6:	4618      	mov	r0, r3
 8103ea8:	46bd      	mov	sp, r7
 8103eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eae:	4770      	bx	lr
 8103eb0:	e000ed00 	.word	0xe000ed00

08103eb4 <__NVIC_EnableIRQ>:
{
 8103eb4:	b480      	push	{r7}
 8103eb6:	b083      	sub	sp, #12
 8103eb8:	af00      	add	r7, sp, #0
 8103eba:	4603      	mov	r3, r0
 8103ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	db0b      	blt.n	8103ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103ec6:	88fb      	ldrh	r3, [r7, #6]
 8103ec8:	f003 021f 	and.w	r2, r3, #31
 8103ecc:	4907      	ldr	r1, [pc, #28]	@ (8103eec <__NVIC_EnableIRQ+0x38>)
 8103ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103ed2:	095b      	lsrs	r3, r3, #5
 8103ed4:	2001      	movs	r0, #1
 8103ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8103eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8103ede:	bf00      	nop
 8103ee0:	370c      	adds	r7, #12
 8103ee2:	46bd      	mov	sp, r7
 8103ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ee8:	4770      	bx	lr
 8103eea:	bf00      	nop
 8103eec:	e000e100 	.word	0xe000e100

08103ef0 <__NVIC_SetPriority>:
{
 8103ef0:	b480      	push	{r7}
 8103ef2:	b083      	sub	sp, #12
 8103ef4:	af00      	add	r7, sp, #0
 8103ef6:	4603      	mov	r3, r0
 8103ef8:	6039      	str	r1, [r7, #0]
 8103efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f00:	2b00      	cmp	r3, #0
 8103f02:	db0a      	blt.n	8103f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103f04:	683b      	ldr	r3, [r7, #0]
 8103f06:	b2da      	uxtb	r2, r3
 8103f08:	490c      	ldr	r1, [pc, #48]	@ (8103f3c <__NVIC_SetPriority+0x4c>)
 8103f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f0e:	0112      	lsls	r2, r2, #4
 8103f10:	b2d2      	uxtb	r2, r2
 8103f12:	440b      	add	r3, r1
 8103f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8103f18:	e00a      	b.n	8103f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103f1a:	683b      	ldr	r3, [r7, #0]
 8103f1c:	b2da      	uxtb	r2, r3
 8103f1e:	4908      	ldr	r1, [pc, #32]	@ (8103f40 <__NVIC_SetPriority+0x50>)
 8103f20:	88fb      	ldrh	r3, [r7, #6]
 8103f22:	f003 030f 	and.w	r3, r3, #15
 8103f26:	3b04      	subs	r3, #4
 8103f28:	0112      	lsls	r2, r2, #4
 8103f2a:	b2d2      	uxtb	r2, r2
 8103f2c:	440b      	add	r3, r1
 8103f2e:	761a      	strb	r2, [r3, #24]
}
 8103f30:	bf00      	nop
 8103f32:	370c      	adds	r7, #12
 8103f34:	46bd      	mov	sp, r7
 8103f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f3a:	4770      	bx	lr
 8103f3c:	e000e100 	.word	0xe000e100
 8103f40:	e000ed00 	.word	0xe000ed00

08103f44 <NVIC_EncodePriority>:
{
 8103f44:	b480      	push	{r7}
 8103f46:	b089      	sub	sp, #36	@ 0x24
 8103f48:	af00      	add	r7, sp, #0
 8103f4a:	60f8      	str	r0, [r7, #12]
 8103f4c:	60b9      	str	r1, [r7, #8]
 8103f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	f003 0307 	and.w	r3, r3, #7
 8103f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103f58:	69fb      	ldr	r3, [r7, #28]
 8103f5a:	f1c3 0307 	rsb	r3, r3, #7
 8103f5e:	2b04      	cmp	r3, #4
 8103f60:	bf28      	it	cs
 8103f62:	2304      	movcs	r3, #4
 8103f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103f66:	69fb      	ldr	r3, [r7, #28]
 8103f68:	3304      	adds	r3, #4
 8103f6a:	2b06      	cmp	r3, #6
 8103f6c:	d902      	bls.n	8103f74 <NVIC_EncodePriority+0x30>
 8103f6e:	69fb      	ldr	r3, [r7, #28]
 8103f70:	3b03      	subs	r3, #3
 8103f72:	e000      	b.n	8103f76 <NVIC_EncodePriority+0x32>
 8103f74:	2300      	movs	r3, #0
 8103f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103f78:	f04f 32ff 	mov.w	r2, #4294967295
 8103f7c:	69bb      	ldr	r3, [r7, #24]
 8103f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8103f82:	43da      	mvns	r2, r3
 8103f84:	68bb      	ldr	r3, [r7, #8]
 8103f86:	401a      	ands	r2, r3
 8103f88:	697b      	ldr	r3, [r7, #20]
 8103f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8103f90:	697b      	ldr	r3, [r7, #20]
 8103f92:	fa01 f303 	lsl.w	r3, r1, r3
 8103f96:	43d9      	mvns	r1, r3
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103f9c:	4313      	orrs	r3, r2
}
 8103f9e:	4618      	mov	r0, r3
 8103fa0:	3724      	adds	r7, #36	@ 0x24
 8103fa2:	46bd      	mov	sp, r7
 8103fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa8:	4770      	bx	lr
	...

08103fac <__NVIC_SystemReset>:
{
 8103fac:	b480      	push	{r7}
 8103fae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8103fb0:	f3bf 8f4f 	dsb	sy
}
 8103fb4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8103fb6:	4b06      	ldr	r3, [pc, #24]	@ (8103fd0 <__NVIC_SystemReset+0x24>)
 8103fb8:	68db      	ldr	r3, [r3, #12]
 8103fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8103fbe:	4904      	ldr	r1, [pc, #16]	@ (8103fd0 <__NVIC_SystemReset+0x24>)
 8103fc0:	4b04      	ldr	r3, [pc, #16]	@ (8103fd4 <__NVIC_SystemReset+0x28>)
 8103fc2:	4313      	orrs	r3, r2
 8103fc4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8103fc6:	f3bf 8f4f 	dsb	sy
}
 8103fca:	bf00      	nop
    __NOP();
 8103fcc:	bf00      	nop
 8103fce:	e7fd      	b.n	8103fcc <__NVIC_SystemReset+0x20>
 8103fd0:	e000ed00 	.word	0xe000ed00
 8103fd4:	05fa0004 	.word	0x05fa0004

08103fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103fd8:	b580      	push	{r7, lr}
 8103fda:	b082      	sub	sp, #8
 8103fdc:	af00      	add	r7, sp, #0
 8103fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103fe0:	6878      	ldr	r0, [r7, #4]
 8103fe2:	f7ff ff35 	bl	8103e50 <__NVIC_SetPriorityGrouping>
}
 8103fe6:	bf00      	nop
 8103fe8:	3708      	adds	r7, #8
 8103fea:	46bd      	mov	sp, r7
 8103fec:	bd80      	pop	{r7, pc}

08103fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103fee:	b580      	push	{r7, lr}
 8103ff0:	b086      	sub	sp, #24
 8103ff2:	af00      	add	r7, sp, #0
 8103ff4:	4603      	mov	r3, r0
 8103ff6:	60b9      	str	r1, [r7, #8]
 8103ff8:	607a      	str	r2, [r7, #4]
 8103ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103ffc:	f7ff ff4c 	bl	8103e98 <__NVIC_GetPriorityGrouping>
 8104000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104002:	687a      	ldr	r2, [r7, #4]
 8104004:	68b9      	ldr	r1, [r7, #8]
 8104006:	6978      	ldr	r0, [r7, #20]
 8104008:	f7ff ff9c 	bl	8103f44 <NVIC_EncodePriority>
 810400c:	4602      	mov	r2, r0
 810400e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104012:	4611      	mov	r1, r2
 8104014:	4618      	mov	r0, r3
 8104016:	f7ff ff6b 	bl	8103ef0 <__NVIC_SetPriority>
}
 810401a:	bf00      	nop
 810401c:	3718      	adds	r7, #24
 810401e:	46bd      	mov	sp, r7
 8104020:	bd80      	pop	{r7, pc}

08104022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104022:	b580      	push	{r7, lr}
 8104024:	b082      	sub	sp, #8
 8104026:	af00      	add	r7, sp, #0
 8104028:	4603      	mov	r3, r0
 810402a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810402c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104030:	4618      	mov	r0, r3
 8104032:	f7ff ff3f 	bl	8103eb4 <__NVIC_EnableIRQ>
}
 8104036:	bf00      	nop
 8104038:	3708      	adds	r7, #8
 810403a:	46bd      	mov	sp, r7
 810403c:	bd80      	pop	{r7, pc}

0810403e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 810403e:	b580      	push	{r7, lr}
 8104040:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8104042:	f7ff ffb3 	bl	8103fac <__NVIC_SystemReset>
	...

08104048 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8104048:	b480      	push	{r7}
 810404a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 810404c:	f3bf 8f5f 	dmb	sy
}
 8104050:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8104052:	4b07      	ldr	r3, [pc, #28]	@ (8104070 <HAL_MPU_Disable+0x28>)
 8104054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104056:	4a06      	ldr	r2, [pc, #24]	@ (8104070 <HAL_MPU_Disable+0x28>)
 8104058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810405c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 810405e:	4b05      	ldr	r3, [pc, #20]	@ (8104074 <HAL_MPU_Disable+0x2c>)
 8104060:	2200      	movs	r2, #0
 8104062:	605a      	str	r2, [r3, #4]
}
 8104064:	bf00      	nop
 8104066:	46bd      	mov	sp, r7
 8104068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810406c:	4770      	bx	lr
 810406e:	bf00      	nop
 8104070:	e000ed00 	.word	0xe000ed00
 8104074:	e000ed90 	.word	0xe000ed90

08104078 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8104078:	b480      	push	{r7}
 810407a:	b083      	sub	sp, #12
 810407c:	af00      	add	r7, sp, #0
 810407e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8104080:	4a0b      	ldr	r2, [pc, #44]	@ (81040b0 <HAL_MPU_Enable+0x38>)
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	f043 0301 	orr.w	r3, r3, #1
 8104088:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 810408a:	4b0a      	ldr	r3, [pc, #40]	@ (81040b4 <HAL_MPU_Enable+0x3c>)
 810408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810408e:	4a09      	ldr	r2, [pc, #36]	@ (81040b4 <HAL_MPU_Enable+0x3c>)
 8104090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104094:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8104096:	f3bf 8f4f 	dsb	sy
}
 810409a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810409c:	f3bf 8f6f 	isb	sy
}
 81040a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 81040a2:	bf00      	nop
 81040a4:	370c      	adds	r7, #12
 81040a6:	46bd      	mov	sp, r7
 81040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ac:	4770      	bx	lr
 81040ae:	bf00      	nop
 81040b0:	e000ed90 	.word	0xe000ed90
 81040b4:	e000ed00 	.word	0xe000ed00

081040b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 81040b8:	b480      	push	{r7}
 81040ba:	b083      	sub	sp, #12
 81040bc:	af00      	add	r7, sp, #0
 81040be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	785a      	ldrb	r2, [r3, #1]
 81040c4:	4b1b      	ldr	r3, [pc, #108]	@ (8104134 <HAL_MPU_ConfigRegion+0x7c>)
 81040c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 81040c8:	4b1a      	ldr	r3, [pc, #104]	@ (8104134 <HAL_MPU_ConfigRegion+0x7c>)
 81040ca:	691b      	ldr	r3, [r3, #16]
 81040cc:	4a19      	ldr	r2, [pc, #100]	@ (8104134 <HAL_MPU_ConfigRegion+0x7c>)
 81040ce:	f023 0301 	bic.w	r3, r3, #1
 81040d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 81040d4:	4a17      	ldr	r2, [pc, #92]	@ (8104134 <HAL_MPU_ConfigRegion+0x7c>)
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	685b      	ldr	r3, [r3, #4]
 81040da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	7b1b      	ldrb	r3, [r3, #12]
 81040e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	7adb      	ldrb	r3, [r3, #11]
 81040e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81040e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	7a9b      	ldrb	r3, [r3, #10]
 81040ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 81040f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	7b5b      	ldrb	r3, [r3, #13]
 81040f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 81040f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	7b9b      	ldrb	r3, [r3, #14]
 81040fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8104100:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	7bdb      	ldrb	r3, [r3, #15]
 8104106:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8104108:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	7a5b      	ldrb	r3, [r3, #9]
 810410e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8104110:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	7a1b      	ldrb	r3, [r3, #8]
 8104116:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8104118:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 810411a:	687a      	ldr	r2, [r7, #4]
 810411c:	7812      	ldrb	r2, [r2, #0]
 810411e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8104120:	4a04      	ldr	r2, [pc, #16]	@ (8104134 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8104122:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8104124:	6113      	str	r3, [r2, #16]
}
 8104126:	bf00      	nop
 8104128:	370c      	adds	r7, #12
 810412a:	46bd      	mov	sp, r7
 810412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104130:	4770      	bx	lr
 8104132:	bf00      	nop
 8104134:	e000ed90 	.word	0xe000ed90

08104138 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104138:	b480      	push	{r7}
 810413a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810413c:	4b07      	ldr	r3, [pc, #28]	@ (810415c <HAL_GetCurrentCPUID+0x24>)
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	091b      	lsrs	r3, r3, #4
 8104142:	f003 030f 	and.w	r3, r3, #15
 8104146:	2b07      	cmp	r3, #7
 8104148:	d101      	bne.n	810414e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810414a:	2303      	movs	r3, #3
 810414c:	e000      	b.n	8104150 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810414e:	2301      	movs	r3, #1
  }
}
 8104150:	4618      	mov	r0, r3
 8104152:	46bd      	mov	sp, r7
 8104154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104158:	4770      	bx	lr
 810415a:	bf00      	nop
 810415c:	e000ed00 	.word	0xe000ed00

08104160 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8104160:	b580      	push	{r7, lr}
 8104162:	b086      	sub	sp, #24
 8104164:	af00      	add	r7, sp, #0
 8104166:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8104168:	f7fe fbe0 	bl	810292c <HAL_GetTick>
 810416c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	2b00      	cmp	r3, #0
 8104172:	d101      	bne.n	8104178 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8104174:	2301      	movs	r3, #1
 8104176:	e316      	b.n	81047a6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	4a66      	ldr	r2, [pc, #408]	@ (8104318 <HAL_DMA_Init+0x1b8>)
 810417e:	4293      	cmp	r3, r2
 8104180:	d04a      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	4a65      	ldr	r2, [pc, #404]	@ (810431c <HAL_DMA_Init+0x1bc>)
 8104188:	4293      	cmp	r3, r2
 810418a:	d045      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	4a63      	ldr	r2, [pc, #396]	@ (8104320 <HAL_DMA_Init+0x1c0>)
 8104192:	4293      	cmp	r3, r2
 8104194:	d040      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	4a62      	ldr	r2, [pc, #392]	@ (8104324 <HAL_DMA_Init+0x1c4>)
 810419c:	4293      	cmp	r3, r2
 810419e:	d03b      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	4a60      	ldr	r2, [pc, #384]	@ (8104328 <HAL_DMA_Init+0x1c8>)
 81041a6:	4293      	cmp	r3, r2
 81041a8:	d036      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	4a5f      	ldr	r2, [pc, #380]	@ (810432c <HAL_DMA_Init+0x1cc>)
 81041b0:	4293      	cmp	r3, r2
 81041b2:	d031      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	4a5d      	ldr	r2, [pc, #372]	@ (8104330 <HAL_DMA_Init+0x1d0>)
 81041ba:	4293      	cmp	r3, r2
 81041bc:	d02c      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	4a5c      	ldr	r2, [pc, #368]	@ (8104334 <HAL_DMA_Init+0x1d4>)
 81041c4:	4293      	cmp	r3, r2
 81041c6:	d027      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	4a5a      	ldr	r2, [pc, #360]	@ (8104338 <HAL_DMA_Init+0x1d8>)
 81041ce:	4293      	cmp	r3, r2
 81041d0:	d022      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	4a59      	ldr	r2, [pc, #356]	@ (810433c <HAL_DMA_Init+0x1dc>)
 81041d8:	4293      	cmp	r3, r2
 81041da:	d01d      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	681b      	ldr	r3, [r3, #0]
 81041e0:	4a57      	ldr	r2, [pc, #348]	@ (8104340 <HAL_DMA_Init+0x1e0>)
 81041e2:	4293      	cmp	r3, r2
 81041e4:	d018      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	4a56      	ldr	r2, [pc, #344]	@ (8104344 <HAL_DMA_Init+0x1e4>)
 81041ec:	4293      	cmp	r3, r2
 81041ee:	d013      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	4a54      	ldr	r2, [pc, #336]	@ (8104348 <HAL_DMA_Init+0x1e8>)
 81041f6:	4293      	cmp	r3, r2
 81041f8:	d00e      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a53      	ldr	r2, [pc, #332]	@ (810434c <HAL_DMA_Init+0x1ec>)
 8104200:	4293      	cmp	r3, r2
 8104202:	d009      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	4a51      	ldr	r2, [pc, #324]	@ (8104350 <HAL_DMA_Init+0x1f0>)
 810420a:	4293      	cmp	r3, r2
 810420c:	d004      	beq.n	8104218 <HAL_DMA_Init+0xb8>
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	4a50      	ldr	r2, [pc, #320]	@ (8104354 <HAL_DMA_Init+0x1f4>)
 8104214:	4293      	cmp	r3, r2
 8104216:	d101      	bne.n	810421c <HAL_DMA_Init+0xbc>
 8104218:	2301      	movs	r3, #1
 810421a:	e000      	b.n	810421e <HAL_DMA_Init+0xbe>
 810421c:	2300      	movs	r3, #0
 810421e:	2b00      	cmp	r3, #0
 8104220:	f000 813b 	beq.w	810449a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	2202      	movs	r2, #2
 8104228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	2200      	movs	r2, #0
 8104230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	4a37      	ldr	r2, [pc, #220]	@ (8104318 <HAL_DMA_Init+0x1b8>)
 810423a:	4293      	cmp	r3, r2
 810423c:	d04a      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	4a36      	ldr	r2, [pc, #216]	@ (810431c <HAL_DMA_Init+0x1bc>)
 8104244:	4293      	cmp	r3, r2
 8104246:	d045      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	4a34      	ldr	r2, [pc, #208]	@ (8104320 <HAL_DMA_Init+0x1c0>)
 810424e:	4293      	cmp	r3, r2
 8104250:	d040      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	4a33      	ldr	r2, [pc, #204]	@ (8104324 <HAL_DMA_Init+0x1c4>)
 8104258:	4293      	cmp	r3, r2
 810425a:	d03b      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	4a31      	ldr	r2, [pc, #196]	@ (8104328 <HAL_DMA_Init+0x1c8>)
 8104262:	4293      	cmp	r3, r2
 8104264:	d036      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	4a30      	ldr	r2, [pc, #192]	@ (810432c <HAL_DMA_Init+0x1cc>)
 810426c:	4293      	cmp	r3, r2
 810426e:	d031      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	4a2e      	ldr	r2, [pc, #184]	@ (8104330 <HAL_DMA_Init+0x1d0>)
 8104276:	4293      	cmp	r3, r2
 8104278:	d02c      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	4a2d      	ldr	r2, [pc, #180]	@ (8104334 <HAL_DMA_Init+0x1d4>)
 8104280:	4293      	cmp	r3, r2
 8104282:	d027      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	4a2b      	ldr	r2, [pc, #172]	@ (8104338 <HAL_DMA_Init+0x1d8>)
 810428a:	4293      	cmp	r3, r2
 810428c:	d022      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	681b      	ldr	r3, [r3, #0]
 8104292:	4a2a      	ldr	r2, [pc, #168]	@ (810433c <HAL_DMA_Init+0x1dc>)
 8104294:	4293      	cmp	r3, r2
 8104296:	d01d      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	4a28      	ldr	r2, [pc, #160]	@ (8104340 <HAL_DMA_Init+0x1e0>)
 810429e:	4293      	cmp	r3, r2
 81042a0:	d018      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	4a27      	ldr	r2, [pc, #156]	@ (8104344 <HAL_DMA_Init+0x1e4>)
 81042a8:	4293      	cmp	r3, r2
 81042aa:	d013      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	681b      	ldr	r3, [r3, #0]
 81042b0:	4a25      	ldr	r2, [pc, #148]	@ (8104348 <HAL_DMA_Init+0x1e8>)
 81042b2:	4293      	cmp	r3, r2
 81042b4:	d00e      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	4a24      	ldr	r2, [pc, #144]	@ (810434c <HAL_DMA_Init+0x1ec>)
 81042bc:	4293      	cmp	r3, r2
 81042be:	d009      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	4a22      	ldr	r2, [pc, #136]	@ (8104350 <HAL_DMA_Init+0x1f0>)
 81042c6:	4293      	cmp	r3, r2
 81042c8:	d004      	beq.n	81042d4 <HAL_DMA_Init+0x174>
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	681b      	ldr	r3, [r3, #0]
 81042ce:	4a21      	ldr	r2, [pc, #132]	@ (8104354 <HAL_DMA_Init+0x1f4>)
 81042d0:	4293      	cmp	r3, r2
 81042d2:	d108      	bne.n	81042e6 <HAL_DMA_Init+0x186>
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	681a      	ldr	r2, [r3, #0]
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	f022 0201 	bic.w	r2, r2, #1
 81042e2:	601a      	str	r2, [r3, #0]
 81042e4:	e007      	b.n	81042f6 <HAL_DMA_Init+0x196>
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	681a      	ldr	r2, [r3, #0]
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	f022 0201 	bic.w	r2, r2, #1
 81042f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81042f6:	e02f      	b.n	8104358 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81042f8:	f7fe fb18 	bl	810292c <HAL_GetTick>
 81042fc:	4602      	mov	r2, r0
 81042fe:	693b      	ldr	r3, [r7, #16]
 8104300:	1ad3      	subs	r3, r2, r3
 8104302:	2b05      	cmp	r3, #5
 8104304:	d928      	bls.n	8104358 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	2220      	movs	r2, #32
 810430a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	2203      	movs	r2, #3
 8104310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8104314:	2301      	movs	r3, #1
 8104316:	e246      	b.n	81047a6 <HAL_DMA_Init+0x646>
 8104318:	40020010 	.word	0x40020010
 810431c:	40020028 	.word	0x40020028
 8104320:	40020040 	.word	0x40020040
 8104324:	40020058 	.word	0x40020058
 8104328:	40020070 	.word	0x40020070
 810432c:	40020088 	.word	0x40020088
 8104330:	400200a0 	.word	0x400200a0
 8104334:	400200b8 	.word	0x400200b8
 8104338:	40020410 	.word	0x40020410
 810433c:	40020428 	.word	0x40020428
 8104340:	40020440 	.word	0x40020440
 8104344:	40020458 	.word	0x40020458
 8104348:	40020470 	.word	0x40020470
 810434c:	40020488 	.word	0x40020488
 8104350:	400204a0 	.word	0x400204a0
 8104354:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	f003 0301 	and.w	r3, r3, #1
 8104362:	2b00      	cmp	r3, #0
 8104364:	d1c8      	bne.n	81042f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810436e:	697a      	ldr	r2, [r7, #20]
 8104370:	4b83      	ldr	r3, [pc, #524]	@ (8104580 <HAL_DMA_Init+0x420>)
 8104372:	4013      	ands	r3, r2
 8104374:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810437e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	691b      	ldr	r3, [r3, #16]
 8104384:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810438a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	699b      	ldr	r3, [r3, #24]
 8104390:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104396:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	6a1b      	ldr	r3, [r3, #32]
 810439c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810439e:	697a      	ldr	r2, [r7, #20]
 81043a0:	4313      	orrs	r3, r2
 81043a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81043a8:	2b04      	cmp	r3, #4
 81043aa:	d107      	bne.n	81043bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81043b4:	4313      	orrs	r3, r2
 81043b6:	697a      	ldr	r2, [r7, #20]
 81043b8:	4313      	orrs	r3, r2
 81043ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81043bc:	4b71      	ldr	r3, [pc, #452]	@ (8104584 <HAL_DMA_Init+0x424>)
 81043be:	681a      	ldr	r2, [r3, #0]
 81043c0:	4b71      	ldr	r3, [pc, #452]	@ (8104588 <HAL_DMA_Init+0x428>)
 81043c2:	4013      	ands	r3, r2
 81043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81043c8:	d328      	bcc.n	810441c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	685b      	ldr	r3, [r3, #4]
 81043ce:	2b28      	cmp	r3, #40	@ 0x28
 81043d0:	d903      	bls.n	81043da <HAL_DMA_Init+0x27a>
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	685b      	ldr	r3, [r3, #4]
 81043d6:	2b2e      	cmp	r3, #46	@ 0x2e
 81043d8:	d917      	bls.n	810440a <HAL_DMA_Init+0x2aa>
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	685b      	ldr	r3, [r3, #4]
 81043de:	2b3e      	cmp	r3, #62	@ 0x3e
 81043e0:	d903      	bls.n	81043ea <HAL_DMA_Init+0x28a>
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	685b      	ldr	r3, [r3, #4]
 81043e6:	2b42      	cmp	r3, #66	@ 0x42
 81043e8:	d90f      	bls.n	810440a <HAL_DMA_Init+0x2aa>
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	685b      	ldr	r3, [r3, #4]
 81043ee:	2b46      	cmp	r3, #70	@ 0x46
 81043f0:	d903      	bls.n	81043fa <HAL_DMA_Init+0x29a>
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	685b      	ldr	r3, [r3, #4]
 81043f6:	2b48      	cmp	r3, #72	@ 0x48
 81043f8:	d907      	bls.n	810440a <HAL_DMA_Init+0x2aa>
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	685b      	ldr	r3, [r3, #4]
 81043fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8104400:	d905      	bls.n	810440e <HAL_DMA_Init+0x2ae>
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	685b      	ldr	r3, [r3, #4]
 8104406:	2b52      	cmp	r3, #82	@ 0x52
 8104408:	d801      	bhi.n	810440e <HAL_DMA_Init+0x2ae>
 810440a:	2301      	movs	r3, #1
 810440c:	e000      	b.n	8104410 <HAL_DMA_Init+0x2b0>
 810440e:	2300      	movs	r3, #0
 8104410:	2b00      	cmp	r3, #0
 8104412:	d003      	beq.n	810441c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8104414:	697b      	ldr	r3, [r7, #20]
 8104416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810441a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	697a      	ldr	r2, [r7, #20]
 8104422:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	695b      	ldr	r3, [r3, #20]
 810442a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810442c:	697b      	ldr	r3, [r7, #20]
 810442e:	f023 0307 	bic.w	r3, r3, #7
 8104432:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104438:	697a      	ldr	r2, [r7, #20]
 810443a:	4313      	orrs	r3, r2
 810443c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104442:	2b04      	cmp	r3, #4
 8104444:	d117      	bne.n	8104476 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810444a:	697a      	ldr	r2, [r7, #20]
 810444c:	4313      	orrs	r3, r2
 810444e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104454:	2b00      	cmp	r3, #0
 8104456:	d00e      	beq.n	8104476 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8104458:	6878      	ldr	r0, [r7, #4]
 810445a:	f002 fb33 	bl	8106ac4 <DMA_CheckFifoParam>
 810445e:	4603      	mov	r3, r0
 8104460:	2b00      	cmp	r3, #0
 8104462:	d008      	beq.n	8104476 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	2240      	movs	r2, #64	@ 0x40
 8104468:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	2201      	movs	r2, #1
 810446e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8104472:	2301      	movs	r3, #1
 8104474:	e197      	b.n	81047a6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	697a      	ldr	r2, [r7, #20]
 810447c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810447e:	6878      	ldr	r0, [r7, #4]
 8104480:	f002 fa6e 	bl	8106960 <DMA_CalcBaseAndBitshift>
 8104484:	4603      	mov	r3, r0
 8104486:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810448c:	f003 031f 	and.w	r3, r3, #31
 8104490:	223f      	movs	r2, #63	@ 0x3f
 8104492:	409a      	lsls	r2, r3
 8104494:	68bb      	ldr	r3, [r7, #8]
 8104496:	609a      	str	r2, [r3, #8]
 8104498:	e0cd      	b.n	8104636 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	681b      	ldr	r3, [r3, #0]
 810449e:	4a3b      	ldr	r2, [pc, #236]	@ (810458c <HAL_DMA_Init+0x42c>)
 81044a0:	4293      	cmp	r3, r2
 81044a2:	d022      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	681b      	ldr	r3, [r3, #0]
 81044a8:	4a39      	ldr	r2, [pc, #228]	@ (8104590 <HAL_DMA_Init+0x430>)
 81044aa:	4293      	cmp	r3, r2
 81044ac:	d01d      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	4a38      	ldr	r2, [pc, #224]	@ (8104594 <HAL_DMA_Init+0x434>)
 81044b4:	4293      	cmp	r3, r2
 81044b6:	d018      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	4a36      	ldr	r2, [pc, #216]	@ (8104598 <HAL_DMA_Init+0x438>)
 81044be:	4293      	cmp	r3, r2
 81044c0:	d013      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	4a35      	ldr	r2, [pc, #212]	@ (810459c <HAL_DMA_Init+0x43c>)
 81044c8:	4293      	cmp	r3, r2
 81044ca:	d00e      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	4a33      	ldr	r2, [pc, #204]	@ (81045a0 <HAL_DMA_Init+0x440>)
 81044d2:	4293      	cmp	r3, r2
 81044d4:	d009      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	681b      	ldr	r3, [r3, #0]
 81044da:	4a32      	ldr	r2, [pc, #200]	@ (81045a4 <HAL_DMA_Init+0x444>)
 81044dc:	4293      	cmp	r3, r2
 81044de:	d004      	beq.n	81044ea <HAL_DMA_Init+0x38a>
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	4a30      	ldr	r2, [pc, #192]	@ (81045a8 <HAL_DMA_Init+0x448>)
 81044e6:	4293      	cmp	r3, r2
 81044e8:	d101      	bne.n	81044ee <HAL_DMA_Init+0x38e>
 81044ea:	2301      	movs	r3, #1
 81044ec:	e000      	b.n	81044f0 <HAL_DMA_Init+0x390>
 81044ee:	2300      	movs	r3, #0
 81044f0:	2b00      	cmp	r3, #0
 81044f2:	f000 8097 	beq.w	8104624 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a24      	ldr	r2, [pc, #144]	@ (810458c <HAL_DMA_Init+0x42c>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d021      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	4a22      	ldr	r2, [pc, #136]	@ (8104590 <HAL_DMA_Init+0x430>)
 8104506:	4293      	cmp	r3, r2
 8104508:	d01c      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	4a21      	ldr	r2, [pc, #132]	@ (8104594 <HAL_DMA_Init+0x434>)
 8104510:	4293      	cmp	r3, r2
 8104512:	d017      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	4a1f      	ldr	r2, [pc, #124]	@ (8104598 <HAL_DMA_Init+0x438>)
 810451a:	4293      	cmp	r3, r2
 810451c:	d012      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	4a1e      	ldr	r2, [pc, #120]	@ (810459c <HAL_DMA_Init+0x43c>)
 8104524:	4293      	cmp	r3, r2
 8104526:	d00d      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	4a1c      	ldr	r2, [pc, #112]	@ (81045a0 <HAL_DMA_Init+0x440>)
 810452e:	4293      	cmp	r3, r2
 8104530:	d008      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	4a1b      	ldr	r2, [pc, #108]	@ (81045a4 <HAL_DMA_Init+0x444>)
 8104538:	4293      	cmp	r3, r2
 810453a:	d003      	beq.n	8104544 <HAL_DMA_Init+0x3e4>
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	4a19      	ldr	r2, [pc, #100]	@ (81045a8 <HAL_DMA_Init+0x448>)
 8104542:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	2202      	movs	r2, #2
 8104548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	2200      	movs	r2, #0
 8104550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810455c:	697a      	ldr	r2, [r7, #20]
 810455e:	4b13      	ldr	r3, [pc, #76]	@ (81045ac <HAL_DMA_Init+0x44c>)
 8104560:	4013      	ands	r3, r2
 8104562:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	689b      	ldr	r3, [r3, #8]
 8104568:	2b40      	cmp	r3, #64	@ 0x40
 810456a:	d021      	beq.n	81045b0 <HAL_DMA_Init+0x450>
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	689b      	ldr	r3, [r3, #8]
 8104570:	2b80      	cmp	r3, #128	@ 0x80
 8104572:	d102      	bne.n	810457a <HAL_DMA_Init+0x41a>
 8104574:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104578:	e01b      	b.n	81045b2 <HAL_DMA_Init+0x452>
 810457a:	2300      	movs	r3, #0
 810457c:	e019      	b.n	81045b2 <HAL_DMA_Init+0x452>
 810457e:	bf00      	nop
 8104580:	fe10803f 	.word	0xfe10803f
 8104584:	5c001000 	.word	0x5c001000
 8104588:	ffff0000 	.word	0xffff0000
 810458c:	58025408 	.word	0x58025408
 8104590:	5802541c 	.word	0x5802541c
 8104594:	58025430 	.word	0x58025430
 8104598:	58025444 	.word	0x58025444
 810459c:	58025458 	.word	0x58025458
 81045a0:	5802546c 	.word	0x5802546c
 81045a4:	58025480 	.word	0x58025480
 81045a8:	58025494 	.word	0x58025494
 81045ac:	fffe000f 	.word	0xfffe000f
 81045b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81045b2:	687a      	ldr	r2, [r7, #4]
 81045b4:	68d2      	ldr	r2, [r2, #12]
 81045b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81045b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	691b      	ldr	r3, [r3, #16]
 81045be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81045c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	695b      	ldr	r3, [r3, #20]
 81045c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81045c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	699b      	ldr	r3, [r3, #24]
 81045ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81045d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	69db      	ldr	r3, [r3, #28]
 81045d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81045d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	6a1b      	ldr	r3, [r3, #32]
 81045de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81045e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81045e2:	697a      	ldr	r2, [r7, #20]
 81045e4:	4313      	orrs	r3, r2
 81045e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	697a      	ldr	r2, [r7, #20]
 81045ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	461a      	mov	r2, r3
 81045f6:	4b6e      	ldr	r3, [pc, #440]	@ (81047b0 <HAL_DMA_Init+0x650>)
 81045f8:	4413      	add	r3, r2
 81045fa:	4a6e      	ldr	r2, [pc, #440]	@ (81047b4 <HAL_DMA_Init+0x654>)
 81045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8104600:	091b      	lsrs	r3, r3, #4
 8104602:	009a      	lsls	r2, r3, #2
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104608:	6878      	ldr	r0, [r7, #4]
 810460a:	f002 f9a9 	bl	8106960 <DMA_CalcBaseAndBitshift>
 810460e:	4603      	mov	r3, r0
 8104610:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104616:	f003 031f 	and.w	r3, r3, #31
 810461a:	2201      	movs	r2, #1
 810461c:	409a      	lsls	r2, r3
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	605a      	str	r2, [r3, #4]
 8104622:	e008      	b.n	8104636 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	2240      	movs	r2, #64	@ 0x40
 8104628:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	2203      	movs	r2, #3
 810462e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8104632:	2301      	movs	r3, #1
 8104634:	e0b7      	b.n	81047a6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	4a5f      	ldr	r2, [pc, #380]	@ (81047b8 <HAL_DMA_Init+0x658>)
 810463c:	4293      	cmp	r3, r2
 810463e:	d072      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	681b      	ldr	r3, [r3, #0]
 8104644:	4a5d      	ldr	r2, [pc, #372]	@ (81047bc <HAL_DMA_Init+0x65c>)
 8104646:	4293      	cmp	r3, r2
 8104648:	d06d      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a5c      	ldr	r2, [pc, #368]	@ (81047c0 <HAL_DMA_Init+0x660>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d068      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	4a5a      	ldr	r2, [pc, #360]	@ (81047c4 <HAL_DMA_Init+0x664>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d063      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	4a59      	ldr	r2, [pc, #356]	@ (81047c8 <HAL_DMA_Init+0x668>)
 8104664:	4293      	cmp	r3, r2
 8104666:	d05e      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	4a57      	ldr	r2, [pc, #348]	@ (81047cc <HAL_DMA_Init+0x66c>)
 810466e:	4293      	cmp	r3, r2
 8104670:	d059      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	4a56      	ldr	r2, [pc, #344]	@ (81047d0 <HAL_DMA_Init+0x670>)
 8104678:	4293      	cmp	r3, r2
 810467a:	d054      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	4a54      	ldr	r2, [pc, #336]	@ (81047d4 <HAL_DMA_Init+0x674>)
 8104682:	4293      	cmp	r3, r2
 8104684:	d04f      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	4a53      	ldr	r2, [pc, #332]	@ (81047d8 <HAL_DMA_Init+0x678>)
 810468c:	4293      	cmp	r3, r2
 810468e:	d04a      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a51      	ldr	r2, [pc, #324]	@ (81047dc <HAL_DMA_Init+0x67c>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d045      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	4a50      	ldr	r2, [pc, #320]	@ (81047e0 <HAL_DMA_Init+0x680>)
 81046a0:	4293      	cmp	r3, r2
 81046a2:	d040      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a4e      	ldr	r2, [pc, #312]	@ (81047e4 <HAL_DMA_Init+0x684>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d03b      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	4a4d      	ldr	r2, [pc, #308]	@ (81047e8 <HAL_DMA_Init+0x688>)
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d036      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	4a4b      	ldr	r2, [pc, #300]	@ (81047ec <HAL_DMA_Init+0x68c>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d031      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	4a4a      	ldr	r2, [pc, #296]	@ (81047f0 <HAL_DMA_Init+0x690>)
 81046c8:	4293      	cmp	r3, r2
 81046ca:	d02c      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	4a48      	ldr	r2, [pc, #288]	@ (81047f4 <HAL_DMA_Init+0x694>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d027      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a47      	ldr	r2, [pc, #284]	@ (81047f8 <HAL_DMA_Init+0x698>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d022      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a45      	ldr	r2, [pc, #276]	@ (81047fc <HAL_DMA_Init+0x69c>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d01d      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a44      	ldr	r2, [pc, #272]	@ (8104800 <HAL_DMA_Init+0x6a0>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d018      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a42      	ldr	r2, [pc, #264]	@ (8104804 <HAL_DMA_Init+0x6a4>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d013      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a41      	ldr	r2, [pc, #260]	@ (8104808 <HAL_DMA_Init+0x6a8>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d00e      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a3f      	ldr	r2, [pc, #252]	@ (810480c <HAL_DMA_Init+0x6ac>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d009      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a3e      	ldr	r2, [pc, #248]	@ (8104810 <HAL_DMA_Init+0x6b0>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d004      	beq.n	8104726 <HAL_DMA_Init+0x5c6>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a3c      	ldr	r2, [pc, #240]	@ (8104814 <HAL_DMA_Init+0x6b4>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d101      	bne.n	810472a <HAL_DMA_Init+0x5ca>
 8104726:	2301      	movs	r3, #1
 8104728:	e000      	b.n	810472c <HAL_DMA_Init+0x5cc>
 810472a:	2300      	movs	r3, #0
 810472c:	2b00      	cmp	r3, #0
 810472e:	d032      	beq.n	8104796 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8104730:	6878      	ldr	r0, [r7, #4]
 8104732:	f002 fa43 	bl	8106bbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	689b      	ldr	r3, [r3, #8]
 810473a:	2b80      	cmp	r3, #128	@ 0x80
 810473c:	d102      	bne.n	8104744 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	2200      	movs	r2, #0
 8104742:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	685a      	ldr	r2, [r3, #4]
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810474c:	b2d2      	uxtb	r2, r2
 810474e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104754:	687a      	ldr	r2, [r7, #4]
 8104756:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104758:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	685b      	ldr	r3, [r3, #4]
 810475e:	2b00      	cmp	r3, #0
 8104760:	d010      	beq.n	8104784 <HAL_DMA_Init+0x624>
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	685b      	ldr	r3, [r3, #4]
 8104766:	2b08      	cmp	r3, #8
 8104768:	d80c      	bhi.n	8104784 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810476a:	6878      	ldr	r0, [r7, #4]
 810476c:	f002 fac0 	bl	8106cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104774:	2200      	movs	r2, #0
 8104776:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810477c:	687a      	ldr	r2, [r7, #4]
 810477e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8104780:	605a      	str	r2, [r3, #4]
 8104782:	e008      	b.n	8104796 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	2200      	movs	r2, #0
 8104788:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	2200      	movs	r2, #0
 810478e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	2200      	movs	r2, #0
 8104794:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	2200      	movs	r2, #0
 810479a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	2201      	movs	r2, #1
 81047a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 81047a4:	2300      	movs	r3, #0
}
 81047a6:	4618      	mov	r0, r3
 81047a8:	3718      	adds	r7, #24
 81047aa:	46bd      	mov	sp, r7
 81047ac:	bd80      	pop	{r7, pc}
 81047ae:	bf00      	nop
 81047b0:	a7fdabf8 	.word	0xa7fdabf8
 81047b4:	cccccccd 	.word	0xcccccccd
 81047b8:	40020010 	.word	0x40020010
 81047bc:	40020028 	.word	0x40020028
 81047c0:	40020040 	.word	0x40020040
 81047c4:	40020058 	.word	0x40020058
 81047c8:	40020070 	.word	0x40020070
 81047cc:	40020088 	.word	0x40020088
 81047d0:	400200a0 	.word	0x400200a0
 81047d4:	400200b8 	.word	0x400200b8
 81047d8:	40020410 	.word	0x40020410
 81047dc:	40020428 	.word	0x40020428
 81047e0:	40020440 	.word	0x40020440
 81047e4:	40020458 	.word	0x40020458
 81047e8:	40020470 	.word	0x40020470
 81047ec:	40020488 	.word	0x40020488
 81047f0:	400204a0 	.word	0x400204a0
 81047f4:	400204b8 	.word	0x400204b8
 81047f8:	58025408 	.word	0x58025408
 81047fc:	5802541c 	.word	0x5802541c
 8104800:	58025430 	.word	0x58025430
 8104804:	58025444 	.word	0x58025444
 8104808:	58025458 	.word	0x58025458
 810480c:	5802546c 	.word	0x5802546c
 8104810:	58025480 	.word	0x58025480
 8104814:	58025494 	.word	0x58025494

08104818 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104818:	b580      	push	{r7, lr}
 810481a:	b086      	sub	sp, #24
 810481c:	af00      	add	r7, sp, #0
 810481e:	60f8      	str	r0, [r7, #12]
 8104820:	60b9      	str	r1, [r7, #8]
 8104822:	607a      	str	r2, [r7, #4]
 8104824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104826:	2300      	movs	r3, #0
 8104828:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810482a:	68fb      	ldr	r3, [r7, #12]
 810482c:	2b00      	cmp	r3, #0
 810482e:	d101      	bne.n	8104834 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8104830:	2301      	movs	r3, #1
 8104832:	e226      	b.n	8104c82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104834:	68fb      	ldr	r3, [r7, #12]
 8104836:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 810483a:	2b01      	cmp	r3, #1
 810483c:	d101      	bne.n	8104842 <HAL_DMA_Start_IT+0x2a>
 810483e:	2302      	movs	r3, #2
 8104840:	e21f      	b.n	8104c82 <HAL_DMA_Start_IT+0x46a>
 8104842:	68fb      	ldr	r3, [r7, #12]
 8104844:	2201      	movs	r2, #1
 8104846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 810484a:	68fb      	ldr	r3, [r7, #12]
 810484c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8104850:	b2db      	uxtb	r3, r3
 8104852:	2b01      	cmp	r3, #1
 8104854:	f040 820a 	bne.w	8104c6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	2202      	movs	r2, #2
 810485c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104860:	68fb      	ldr	r3, [r7, #12]
 8104862:	2200      	movs	r2, #0
 8104864:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104866:	68fb      	ldr	r3, [r7, #12]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	4a68      	ldr	r2, [pc, #416]	@ (8104a0c <HAL_DMA_Start_IT+0x1f4>)
 810486c:	4293      	cmp	r3, r2
 810486e:	d04a      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 8104870:	68fb      	ldr	r3, [r7, #12]
 8104872:	681b      	ldr	r3, [r3, #0]
 8104874:	4a66      	ldr	r2, [pc, #408]	@ (8104a10 <HAL_DMA_Start_IT+0x1f8>)
 8104876:	4293      	cmp	r3, r2
 8104878:	d045      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	4a65      	ldr	r2, [pc, #404]	@ (8104a14 <HAL_DMA_Start_IT+0x1fc>)
 8104880:	4293      	cmp	r3, r2
 8104882:	d040      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 8104884:	68fb      	ldr	r3, [r7, #12]
 8104886:	681b      	ldr	r3, [r3, #0]
 8104888:	4a63      	ldr	r2, [pc, #396]	@ (8104a18 <HAL_DMA_Start_IT+0x200>)
 810488a:	4293      	cmp	r3, r2
 810488c:	d03b      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 810488e:	68fb      	ldr	r3, [r7, #12]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	4a62      	ldr	r2, [pc, #392]	@ (8104a1c <HAL_DMA_Start_IT+0x204>)
 8104894:	4293      	cmp	r3, r2
 8104896:	d036      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	4a60      	ldr	r2, [pc, #384]	@ (8104a20 <HAL_DMA_Start_IT+0x208>)
 810489e:	4293      	cmp	r3, r2
 81048a0:	d031      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048a2:	68fb      	ldr	r3, [r7, #12]
 81048a4:	681b      	ldr	r3, [r3, #0]
 81048a6:	4a5f      	ldr	r2, [pc, #380]	@ (8104a24 <HAL_DMA_Start_IT+0x20c>)
 81048a8:	4293      	cmp	r3, r2
 81048aa:	d02c      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048ac:	68fb      	ldr	r3, [r7, #12]
 81048ae:	681b      	ldr	r3, [r3, #0]
 81048b0:	4a5d      	ldr	r2, [pc, #372]	@ (8104a28 <HAL_DMA_Start_IT+0x210>)
 81048b2:	4293      	cmp	r3, r2
 81048b4:	d027      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048b6:	68fb      	ldr	r3, [r7, #12]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	4a5c      	ldr	r2, [pc, #368]	@ (8104a2c <HAL_DMA_Start_IT+0x214>)
 81048bc:	4293      	cmp	r3, r2
 81048be:	d022      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048c0:	68fb      	ldr	r3, [r7, #12]
 81048c2:	681b      	ldr	r3, [r3, #0]
 81048c4:	4a5a      	ldr	r2, [pc, #360]	@ (8104a30 <HAL_DMA_Start_IT+0x218>)
 81048c6:	4293      	cmp	r3, r2
 81048c8:	d01d      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048ca:	68fb      	ldr	r3, [r7, #12]
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	4a59      	ldr	r2, [pc, #356]	@ (8104a34 <HAL_DMA_Start_IT+0x21c>)
 81048d0:	4293      	cmp	r3, r2
 81048d2:	d018      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048d4:	68fb      	ldr	r3, [r7, #12]
 81048d6:	681b      	ldr	r3, [r3, #0]
 81048d8:	4a57      	ldr	r2, [pc, #348]	@ (8104a38 <HAL_DMA_Start_IT+0x220>)
 81048da:	4293      	cmp	r3, r2
 81048dc:	d013      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048de:	68fb      	ldr	r3, [r7, #12]
 81048e0:	681b      	ldr	r3, [r3, #0]
 81048e2:	4a56      	ldr	r2, [pc, #344]	@ (8104a3c <HAL_DMA_Start_IT+0x224>)
 81048e4:	4293      	cmp	r3, r2
 81048e6:	d00e      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048e8:	68fb      	ldr	r3, [r7, #12]
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	4a54      	ldr	r2, [pc, #336]	@ (8104a40 <HAL_DMA_Start_IT+0x228>)
 81048ee:	4293      	cmp	r3, r2
 81048f0:	d009      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048f2:	68fb      	ldr	r3, [r7, #12]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	4a53      	ldr	r2, [pc, #332]	@ (8104a44 <HAL_DMA_Start_IT+0x22c>)
 81048f8:	4293      	cmp	r3, r2
 81048fa:	d004      	beq.n	8104906 <HAL_DMA_Start_IT+0xee>
 81048fc:	68fb      	ldr	r3, [r7, #12]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4a51      	ldr	r2, [pc, #324]	@ (8104a48 <HAL_DMA_Start_IT+0x230>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d108      	bne.n	8104918 <HAL_DMA_Start_IT+0x100>
 8104906:	68fb      	ldr	r3, [r7, #12]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	681a      	ldr	r2, [r3, #0]
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	f022 0201 	bic.w	r2, r2, #1
 8104914:	601a      	str	r2, [r3, #0]
 8104916:	e007      	b.n	8104928 <HAL_DMA_Start_IT+0x110>
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	681a      	ldr	r2, [r3, #0]
 810491e:	68fb      	ldr	r3, [r7, #12]
 8104920:	681b      	ldr	r3, [r3, #0]
 8104922:	f022 0201 	bic.w	r2, r2, #1
 8104926:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104928:	683b      	ldr	r3, [r7, #0]
 810492a:	687a      	ldr	r2, [r7, #4]
 810492c:	68b9      	ldr	r1, [r7, #8]
 810492e:	68f8      	ldr	r0, [r7, #12]
 8104930:	f001 fe6a 	bl	8106608 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104934:	68fb      	ldr	r3, [r7, #12]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	4a34      	ldr	r2, [pc, #208]	@ (8104a0c <HAL_DMA_Start_IT+0x1f4>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d04a      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a33      	ldr	r2, [pc, #204]	@ (8104a10 <HAL_DMA_Start_IT+0x1f8>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d045      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 8104948:	68fb      	ldr	r3, [r7, #12]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	4a31      	ldr	r2, [pc, #196]	@ (8104a14 <HAL_DMA_Start_IT+0x1fc>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d040      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	4a30      	ldr	r2, [pc, #192]	@ (8104a18 <HAL_DMA_Start_IT+0x200>)
 8104958:	4293      	cmp	r3, r2
 810495a:	d03b      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	4a2e      	ldr	r2, [pc, #184]	@ (8104a1c <HAL_DMA_Start_IT+0x204>)
 8104962:	4293      	cmp	r3, r2
 8104964:	d036      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 8104966:	68fb      	ldr	r3, [r7, #12]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	4a2d      	ldr	r2, [pc, #180]	@ (8104a20 <HAL_DMA_Start_IT+0x208>)
 810496c:	4293      	cmp	r3, r2
 810496e:	d031      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 8104970:	68fb      	ldr	r3, [r7, #12]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	4a2b      	ldr	r2, [pc, #172]	@ (8104a24 <HAL_DMA_Start_IT+0x20c>)
 8104976:	4293      	cmp	r3, r2
 8104978:	d02c      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 810497a:	68fb      	ldr	r3, [r7, #12]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	4a2a      	ldr	r2, [pc, #168]	@ (8104a28 <HAL_DMA_Start_IT+0x210>)
 8104980:	4293      	cmp	r3, r2
 8104982:	d027      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	4a28      	ldr	r2, [pc, #160]	@ (8104a2c <HAL_DMA_Start_IT+0x214>)
 810498a:	4293      	cmp	r3, r2
 810498c:	d022      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 810498e:	68fb      	ldr	r3, [r7, #12]
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	4a27      	ldr	r2, [pc, #156]	@ (8104a30 <HAL_DMA_Start_IT+0x218>)
 8104994:	4293      	cmp	r3, r2
 8104996:	d01d      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 8104998:	68fb      	ldr	r3, [r7, #12]
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	4a25      	ldr	r2, [pc, #148]	@ (8104a34 <HAL_DMA_Start_IT+0x21c>)
 810499e:	4293      	cmp	r3, r2
 81049a0:	d018      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 81049a2:	68fb      	ldr	r3, [r7, #12]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	4a24      	ldr	r2, [pc, #144]	@ (8104a38 <HAL_DMA_Start_IT+0x220>)
 81049a8:	4293      	cmp	r3, r2
 81049aa:	d013      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	4a22      	ldr	r2, [pc, #136]	@ (8104a3c <HAL_DMA_Start_IT+0x224>)
 81049b2:	4293      	cmp	r3, r2
 81049b4:	d00e      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 81049b6:	68fb      	ldr	r3, [r7, #12]
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	4a21      	ldr	r2, [pc, #132]	@ (8104a40 <HAL_DMA_Start_IT+0x228>)
 81049bc:	4293      	cmp	r3, r2
 81049be:	d009      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 81049c0:	68fb      	ldr	r3, [r7, #12]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	4a1f      	ldr	r2, [pc, #124]	@ (8104a44 <HAL_DMA_Start_IT+0x22c>)
 81049c6:	4293      	cmp	r3, r2
 81049c8:	d004      	beq.n	81049d4 <HAL_DMA_Start_IT+0x1bc>
 81049ca:	68fb      	ldr	r3, [r7, #12]
 81049cc:	681b      	ldr	r3, [r3, #0]
 81049ce:	4a1e      	ldr	r2, [pc, #120]	@ (8104a48 <HAL_DMA_Start_IT+0x230>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d101      	bne.n	81049d8 <HAL_DMA_Start_IT+0x1c0>
 81049d4:	2301      	movs	r3, #1
 81049d6:	e000      	b.n	81049da <HAL_DMA_Start_IT+0x1c2>
 81049d8:	2300      	movs	r3, #0
 81049da:	2b00      	cmp	r3, #0
 81049dc:	d036      	beq.n	8104a4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	f023 021e 	bic.w	r2, r3, #30
 81049e8:	68fb      	ldr	r3, [r7, #12]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	f042 0216 	orr.w	r2, r2, #22
 81049f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81049f6:	2b00      	cmp	r3, #0
 81049f8:	d03e      	beq.n	8104a78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81049fa:	68fb      	ldr	r3, [r7, #12]
 81049fc:	681b      	ldr	r3, [r3, #0]
 81049fe:	681a      	ldr	r2, [r3, #0]
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	f042 0208 	orr.w	r2, r2, #8
 8104a08:	601a      	str	r2, [r3, #0]
 8104a0a:	e035      	b.n	8104a78 <HAL_DMA_Start_IT+0x260>
 8104a0c:	40020010 	.word	0x40020010
 8104a10:	40020028 	.word	0x40020028
 8104a14:	40020040 	.word	0x40020040
 8104a18:	40020058 	.word	0x40020058
 8104a1c:	40020070 	.word	0x40020070
 8104a20:	40020088 	.word	0x40020088
 8104a24:	400200a0 	.word	0x400200a0
 8104a28:	400200b8 	.word	0x400200b8
 8104a2c:	40020410 	.word	0x40020410
 8104a30:	40020428 	.word	0x40020428
 8104a34:	40020440 	.word	0x40020440
 8104a38:	40020458 	.word	0x40020458
 8104a3c:	40020470 	.word	0x40020470
 8104a40:	40020488 	.word	0x40020488
 8104a44:	400204a0 	.word	0x400204a0
 8104a48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	681b      	ldr	r3, [r3, #0]
 8104a52:	f023 020e 	bic.w	r2, r3, #14
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	f042 020a 	orr.w	r2, r2, #10
 8104a5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104a64:	2b00      	cmp	r3, #0
 8104a66:	d007      	beq.n	8104a78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	681a      	ldr	r2, [r3, #0]
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	f042 0204 	orr.w	r2, r2, #4
 8104a76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	4a83      	ldr	r2, [pc, #524]	@ (8104c8c <HAL_DMA_Start_IT+0x474>)
 8104a7e:	4293      	cmp	r3, r2
 8104a80:	d072      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104a82:	68fb      	ldr	r3, [r7, #12]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	4a82      	ldr	r2, [pc, #520]	@ (8104c90 <HAL_DMA_Start_IT+0x478>)
 8104a88:	4293      	cmp	r3, r2
 8104a8a:	d06d      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104a8c:	68fb      	ldr	r3, [r7, #12]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	4a80      	ldr	r2, [pc, #512]	@ (8104c94 <HAL_DMA_Start_IT+0x47c>)
 8104a92:	4293      	cmp	r3, r2
 8104a94:	d068      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104a96:	68fb      	ldr	r3, [r7, #12]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	4a7f      	ldr	r2, [pc, #508]	@ (8104c98 <HAL_DMA_Start_IT+0x480>)
 8104a9c:	4293      	cmp	r3, r2
 8104a9e:	d063      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	4a7d      	ldr	r2, [pc, #500]	@ (8104c9c <HAL_DMA_Start_IT+0x484>)
 8104aa6:	4293      	cmp	r3, r2
 8104aa8:	d05e      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104aaa:	68fb      	ldr	r3, [r7, #12]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	4a7c      	ldr	r2, [pc, #496]	@ (8104ca0 <HAL_DMA_Start_IT+0x488>)
 8104ab0:	4293      	cmp	r3, r2
 8104ab2:	d059      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	4a7a      	ldr	r2, [pc, #488]	@ (8104ca4 <HAL_DMA_Start_IT+0x48c>)
 8104aba:	4293      	cmp	r3, r2
 8104abc:	d054      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	4a79      	ldr	r2, [pc, #484]	@ (8104ca8 <HAL_DMA_Start_IT+0x490>)
 8104ac4:	4293      	cmp	r3, r2
 8104ac6:	d04f      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	4a77      	ldr	r2, [pc, #476]	@ (8104cac <HAL_DMA_Start_IT+0x494>)
 8104ace:	4293      	cmp	r3, r2
 8104ad0:	d04a      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	4a76      	ldr	r2, [pc, #472]	@ (8104cb0 <HAL_DMA_Start_IT+0x498>)
 8104ad8:	4293      	cmp	r3, r2
 8104ada:	d045      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104adc:	68fb      	ldr	r3, [r7, #12]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	4a74      	ldr	r2, [pc, #464]	@ (8104cb4 <HAL_DMA_Start_IT+0x49c>)
 8104ae2:	4293      	cmp	r3, r2
 8104ae4:	d040      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104ae6:	68fb      	ldr	r3, [r7, #12]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	4a73      	ldr	r2, [pc, #460]	@ (8104cb8 <HAL_DMA_Start_IT+0x4a0>)
 8104aec:	4293      	cmp	r3, r2
 8104aee:	d03b      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	4a71      	ldr	r2, [pc, #452]	@ (8104cbc <HAL_DMA_Start_IT+0x4a4>)
 8104af6:	4293      	cmp	r3, r2
 8104af8:	d036      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	681b      	ldr	r3, [r3, #0]
 8104afe:	4a70      	ldr	r2, [pc, #448]	@ (8104cc0 <HAL_DMA_Start_IT+0x4a8>)
 8104b00:	4293      	cmp	r3, r2
 8104b02:	d031      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b04:	68fb      	ldr	r3, [r7, #12]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	4a6e      	ldr	r2, [pc, #440]	@ (8104cc4 <HAL_DMA_Start_IT+0x4ac>)
 8104b0a:	4293      	cmp	r3, r2
 8104b0c:	d02c      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	4a6d      	ldr	r2, [pc, #436]	@ (8104cc8 <HAL_DMA_Start_IT+0x4b0>)
 8104b14:	4293      	cmp	r3, r2
 8104b16:	d027      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b18:	68fb      	ldr	r3, [r7, #12]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8104ccc <HAL_DMA_Start_IT+0x4b4>)
 8104b1e:	4293      	cmp	r3, r2
 8104b20:	d022      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b22:	68fb      	ldr	r3, [r7, #12]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	4a6a      	ldr	r2, [pc, #424]	@ (8104cd0 <HAL_DMA_Start_IT+0x4b8>)
 8104b28:	4293      	cmp	r3, r2
 8104b2a:	d01d      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b2c:	68fb      	ldr	r3, [r7, #12]
 8104b2e:	681b      	ldr	r3, [r3, #0]
 8104b30:	4a68      	ldr	r2, [pc, #416]	@ (8104cd4 <HAL_DMA_Start_IT+0x4bc>)
 8104b32:	4293      	cmp	r3, r2
 8104b34:	d018      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b36:	68fb      	ldr	r3, [r7, #12]
 8104b38:	681b      	ldr	r3, [r3, #0]
 8104b3a:	4a67      	ldr	r2, [pc, #412]	@ (8104cd8 <HAL_DMA_Start_IT+0x4c0>)
 8104b3c:	4293      	cmp	r3, r2
 8104b3e:	d013      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b40:	68fb      	ldr	r3, [r7, #12]
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	4a65      	ldr	r2, [pc, #404]	@ (8104cdc <HAL_DMA_Start_IT+0x4c4>)
 8104b46:	4293      	cmp	r3, r2
 8104b48:	d00e      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b4a:	68fb      	ldr	r3, [r7, #12]
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	4a64      	ldr	r2, [pc, #400]	@ (8104ce0 <HAL_DMA_Start_IT+0x4c8>)
 8104b50:	4293      	cmp	r3, r2
 8104b52:	d009      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	4a62      	ldr	r2, [pc, #392]	@ (8104ce4 <HAL_DMA_Start_IT+0x4cc>)
 8104b5a:	4293      	cmp	r3, r2
 8104b5c:	d004      	beq.n	8104b68 <HAL_DMA_Start_IT+0x350>
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	4a61      	ldr	r2, [pc, #388]	@ (8104ce8 <HAL_DMA_Start_IT+0x4d0>)
 8104b64:	4293      	cmp	r3, r2
 8104b66:	d101      	bne.n	8104b6c <HAL_DMA_Start_IT+0x354>
 8104b68:	2301      	movs	r3, #1
 8104b6a:	e000      	b.n	8104b6e <HAL_DMA_Start_IT+0x356>
 8104b6c:	2300      	movs	r3, #0
 8104b6e:	2b00      	cmp	r3, #0
 8104b70:	d01a      	beq.n	8104ba8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104b7c:	2b00      	cmp	r3, #0
 8104b7e:	d007      	beq.n	8104b90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104b80:	68fb      	ldr	r3, [r7, #12]
 8104b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104b84:	681a      	ldr	r2, [r3, #0]
 8104b86:	68fb      	ldr	r3, [r7, #12]
 8104b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104b8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104b90:	68fb      	ldr	r3, [r7, #12]
 8104b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104b94:	2b00      	cmp	r3, #0
 8104b96:	d007      	beq.n	8104ba8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104b98:	68fb      	ldr	r3, [r7, #12]
 8104b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104b9c:	681a      	ldr	r2, [r3, #0]
 8104b9e:	68fb      	ldr	r3, [r7, #12]
 8104ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104ba6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104ba8:	68fb      	ldr	r3, [r7, #12]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	4a37      	ldr	r2, [pc, #220]	@ (8104c8c <HAL_DMA_Start_IT+0x474>)
 8104bae:	4293      	cmp	r3, r2
 8104bb0:	d04a      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bb2:	68fb      	ldr	r3, [r7, #12]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	4a36      	ldr	r2, [pc, #216]	@ (8104c90 <HAL_DMA_Start_IT+0x478>)
 8104bb8:	4293      	cmp	r3, r2
 8104bba:	d045      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	4a34      	ldr	r2, [pc, #208]	@ (8104c94 <HAL_DMA_Start_IT+0x47c>)
 8104bc2:	4293      	cmp	r3, r2
 8104bc4:	d040      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	4a33      	ldr	r2, [pc, #204]	@ (8104c98 <HAL_DMA_Start_IT+0x480>)
 8104bcc:	4293      	cmp	r3, r2
 8104bce:	d03b      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bd0:	68fb      	ldr	r3, [r7, #12]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	4a31      	ldr	r2, [pc, #196]	@ (8104c9c <HAL_DMA_Start_IT+0x484>)
 8104bd6:	4293      	cmp	r3, r2
 8104bd8:	d036      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bda:	68fb      	ldr	r3, [r7, #12]
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	4a30      	ldr	r2, [pc, #192]	@ (8104ca0 <HAL_DMA_Start_IT+0x488>)
 8104be0:	4293      	cmp	r3, r2
 8104be2:	d031      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	4a2e      	ldr	r2, [pc, #184]	@ (8104ca4 <HAL_DMA_Start_IT+0x48c>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d02c      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bee:	68fb      	ldr	r3, [r7, #12]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8104ca8 <HAL_DMA_Start_IT+0x490>)
 8104bf4:	4293      	cmp	r3, r2
 8104bf6:	d027      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8104cac <HAL_DMA_Start_IT+0x494>)
 8104bfe:	4293      	cmp	r3, r2
 8104c00:	d022      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	4a2a      	ldr	r2, [pc, #168]	@ (8104cb0 <HAL_DMA_Start_IT+0x498>)
 8104c08:	4293      	cmp	r3, r2
 8104c0a:	d01d      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	4a28      	ldr	r2, [pc, #160]	@ (8104cb4 <HAL_DMA_Start_IT+0x49c>)
 8104c12:	4293      	cmp	r3, r2
 8104c14:	d018      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	4a27      	ldr	r2, [pc, #156]	@ (8104cb8 <HAL_DMA_Start_IT+0x4a0>)
 8104c1c:	4293      	cmp	r3, r2
 8104c1e:	d013      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	4a25      	ldr	r2, [pc, #148]	@ (8104cbc <HAL_DMA_Start_IT+0x4a4>)
 8104c26:	4293      	cmp	r3, r2
 8104c28:	d00e      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	4a24      	ldr	r2, [pc, #144]	@ (8104cc0 <HAL_DMA_Start_IT+0x4a8>)
 8104c30:	4293      	cmp	r3, r2
 8104c32:	d009      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c34:	68fb      	ldr	r3, [r7, #12]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	4a22      	ldr	r2, [pc, #136]	@ (8104cc4 <HAL_DMA_Start_IT+0x4ac>)
 8104c3a:	4293      	cmp	r3, r2
 8104c3c:	d004      	beq.n	8104c48 <HAL_DMA_Start_IT+0x430>
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	4a21      	ldr	r2, [pc, #132]	@ (8104cc8 <HAL_DMA_Start_IT+0x4b0>)
 8104c44:	4293      	cmp	r3, r2
 8104c46:	d108      	bne.n	8104c5a <HAL_DMA_Start_IT+0x442>
 8104c48:	68fb      	ldr	r3, [r7, #12]
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	681a      	ldr	r2, [r3, #0]
 8104c4e:	68fb      	ldr	r3, [r7, #12]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	f042 0201 	orr.w	r2, r2, #1
 8104c56:	601a      	str	r2, [r3, #0]
 8104c58:	e012      	b.n	8104c80 <HAL_DMA_Start_IT+0x468>
 8104c5a:	68fb      	ldr	r3, [r7, #12]
 8104c5c:	681b      	ldr	r3, [r3, #0]
 8104c5e:	681a      	ldr	r2, [r3, #0]
 8104c60:	68fb      	ldr	r3, [r7, #12]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	f042 0201 	orr.w	r2, r2, #1
 8104c68:	601a      	str	r2, [r3, #0]
 8104c6a:	e009      	b.n	8104c80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104c6c:	68fb      	ldr	r3, [r7, #12]
 8104c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104c72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	2200      	movs	r2, #0
 8104c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8104c7c:	2301      	movs	r3, #1
 8104c7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8104c82:	4618      	mov	r0, r3
 8104c84:	3718      	adds	r7, #24
 8104c86:	46bd      	mov	sp, r7
 8104c88:	bd80      	pop	{r7, pc}
 8104c8a:	bf00      	nop
 8104c8c:	40020010 	.word	0x40020010
 8104c90:	40020028 	.word	0x40020028
 8104c94:	40020040 	.word	0x40020040
 8104c98:	40020058 	.word	0x40020058
 8104c9c:	40020070 	.word	0x40020070
 8104ca0:	40020088 	.word	0x40020088
 8104ca4:	400200a0 	.word	0x400200a0
 8104ca8:	400200b8 	.word	0x400200b8
 8104cac:	40020410 	.word	0x40020410
 8104cb0:	40020428 	.word	0x40020428
 8104cb4:	40020440 	.word	0x40020440
 8104cb8:	40020458 	.word	0x40020458
 8104cbc:	40020470 	.word	0x40020470
 8104cc0:	40020488 	.word	0x40020488
 8104cc4:	400204a0 	.word	0x400204a0
 8104cc8:	400204b8 	.word	0x400204b8
 8104ccc:	58025408 	.word	0x58025408
 8104cd0:	5802541c 	.word	0x5802541c
 8104cd4:	58025430 	.word	0x58025430
 8104cd8:	58025444 	.word	0x58025444
 8104cdc:	58025458 	.word	0x58025458
 8104ce0:	5802546c 	.word	0x5802546c
 8104ce4:	58025480 	.word	0x58025480
 8104ce8:	58025494 	.word	0x58025494

08104cec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104cec:	b580      	push	{r7, lr}
 8104cee:	b086      	sub	sp, #24
 8104cf0:	af00      	add	r7, sp, #0
 8104cf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104cf4:	f7fd fe1a 	bl	810292c <HAL_GetTick>
 8104cf8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	2b00      	cmp	r3, #0
 8104cfe:	d101      	bne.n	8104d04 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104d00:	2301      	movs	r3, #1
 8104d02:	e2dc      	b.n	81052be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8104d0a:	b2db      	uxtb	r3, r3
 8104d0c:	2b02      	cmp	r3, #2
 8104d0e:	d008      	beq.n	8104d22 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	2280      	movs	r2, #128	@ 0x80
 8104d14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	2200      	movs	r2, #0
 8104d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8104d1e:	2301      	movs	r3, #1
 8104d20:	e2cd      	b.n	81052be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	4a76      	ldr	r2, [pc, #472]	@ (8104f00 <HAL_DMA_Abort+0x214>)
 8104d28:	4293      	cmp	r3, r2
 8104d2a:	d04a      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a74      	ldr	r2, [pc, #464]	@ (8104f04 <HAL_DMA_Abort+0x218>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d045      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	681b      	ldr	r3, [r3, #0]
 8104d3a:	4a73      	ldr	r2, [pc, #460]	@ (8104f08 <HAL_DMA_Abort+0x21c>)
 8104d3c:	4293      	cmp	r3, r2
 8104d3e:	d040      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	4a71      	ldr	r2, [pc, #452]	@ (8104f0c <HAL_DMA_Abort+0x220>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d03b      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	4a70      	ldr	r2, [pc, #448]	@ (8104f10 <HAL_DMA_Abort+0x224>)
 8104d50:	4293      	cmp	r3, r2
 8104d52:	d036      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	4a6e      	ldr	r2, [pc, #440]	@ (8104f14 <HAL_DMA_Abort+0x228>)
 8104d5a:	4293      	cmp	r3, r2
 8104d5c:	d031      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	4a6d      	ldr	r2, [pc, #436]	@ (8104f18 <HAL_DMA_Abort+0x22c>)
 8104d64:	4293      	cmp	r3, r2
 8104d66:	d02c      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	4a6b      	ldr	r2, [pc, #428]	@ (8104f1c <HAL_DMA_Abort+0x230>)
 8104d6e:	4293      	cmp	r3, r2
 8104d70:	d027      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	4a6a      	ldr	r2, [pc, #424]	@ (8104f20 <HAL_DMA_Abort+0x234>)
 8104d78:	4293      	cmp	r3, r2
 8104d7a:	d022      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	4a68      	ldr	r2, [pc, #416]	@ (8104f24 <HAL_DMA_Abort+0x238>)
 8104d82:	4293      	cmp	r3, r2
 8104d84:	d01d      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	4a67      	ldr	r2, [pc, #412]	@ (8104f28 <HAL_DMA_Abort+0x23c>)
 8104d8c:	4293      	cmp	r3, r2
 8104d8e:	d018      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	4a65      	ldr	r2, [pc, #404]	@ (8104f2c <HAL_DMA_Abort+0x240>)
 8104d96:	4293      	cmp	r3, r2
 8104d98:	d013      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	4a64      	ldr	r2, [pc, #400]	@ (8104f30 <HAL_DMA_Abort+0x244>)
 8104da0:	4293      	cmp	r3, r2
 8104da2:	d00e      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	4a62      	ldr	r2, [pc, #392]	@ (8104f34 <HAL_DMA_Abort+0x248>)
 8104daa:	4293      	cmp	r3, r2
 8104dac:	d009      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	4a61      	ldr	r2, [pc, #388]	@ (8104f38 <HAL_DMA_Abort+0x24c>)
 8104db4:	4293      	cmp	r3, r2
 8104db6:	d004      	beq.n	8104dc2 <HAL_DMA_Abort+0xd6>
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8104f3c <HAL_DMA_Abort+0x250>)
 8104dbe:	4293      	cmp	r3, r2
 8104dc0:	d101      	bne.n	8104dc6 <HAL_DMA_Abort+0xda>
 8104dc2:	2301      	movs	r3, #1
 8104dc4:	e000      	b.n	8104dc8 <HAL_DMA_Abort+0xdc>
 8104dc6:	2300      	movs	r3, #0
 8104dc8:	2b00      	cmp	r3, #0
 8104dca:	d013      	beq.n	8104df4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	681b      	ldr	r3, [r3, #0]
 8104dd0:	681a      	ldr	r2, [r3, #0]
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	681b      	ldr	r3, [r3, #0]
 8104dd6:	f022 021e 	bic.w	r2, r2, #30
 8104dda:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	681b      	ldr	r3, [r3, #0]
 8104de0:	695a      	ldr	r2, [r3, #20]
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	681b      	ldr	r3, [r3, #0]
 8104de6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8104dea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	617b      	str	r3, [r7, #20]
 8104df2:	e00a      	b.n	8104e0a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	681a      	ldr	r2, [r3, #0]
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f022 020e 	bic.w	r2, r2, #14
 8104e02:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	681b      	ldr	r3, [r3, #0]
 8104e08:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8104f00 <HAL_DMA_Abort+0x214>)
 8104e10:	4293      	cmp	r3, r2
 8104e12:	d072      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	4a3a      	ldr	r2, [pc, #232]	@ (8104f04 <HAL_DMA_Abort+0x218>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d06d      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a39      	ldr	r2, [pc, #228]	@ (8104f08 <HAL_DMA_Abort+0x21c>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d068      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a37      	ldr	r2, [pc, #220]	@ (8104f0c <HAL_DMA_Abort+0x220>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d063      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a36      	ldr	r2, [pc, #216]	@ (8104f10 <HAL_DMA_Abort+0x224>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d05e      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	4a34      	ldr	r2, [pc, #208]	@ (8104f14 <HAL_DMA_Abort+0x228>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d059      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	4a33      	ldr	r2, [pc, #204]	@ (8104f18 <HAL_DMA_Abort+0x22c>)
 8104e4c:	4293      	cmp	r3, r2
 8104e4e:	d054      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	4a31      	ldr	r2, [pc, #196]	@ (8104f1c <HAL_DMA_Abort+0x230>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d04f      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	4a30      	ldr	r2, [pc, #192]	@ (8104f20 <HAL_DMA_Abort+0x234>)
 8104e60:	4293      	cmp	r3, r2
 8104e62:	d04a      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	4a2e      	ldr	r2, [pc, #184]	@ (8104f24 <HAL_DMA_Abort+0x238>)
 8104e6a:	4293      	cmp	r3, r2
 8104e6c:	d045      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	4a2d      	ldr	r2, [pc, #180]	@ (8104f28 <HAL_DMA_Abort+0x23c>)
 8104e74:	4293      	cmp	r3, r2
 8104e76:	d040      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8104f2c <HAL_DMA_Abort+0x240>)
 8104e7e:	4293      	cmp	r3, r2
 8104e80:	d03b      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	4a2a      	ldr	r2, [pc, #168]	@ (8104f30 <HAL_DMA_Abort+0x244>)
 8104e88:	4293      	cmp	r3, r2
 8104e8a:	d036      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	4a28      	ldr	r2, [pc, #160]	@ (8104f34 <HAL_DMA_Abort+0x248>)
 8104e92:	4293      	cmp	r3, r2
 8104e94:	d031      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	4a27      	ldr	r2, [pc, #156]	@ (8104f38 <HAL_DMA_Abort+0x24c>)
 8104e9c:	4293      	cmp	r3, r2
 8104e9e:	d02c      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	4a25      	ldr	r2, [pc, #148]	@ (8104f3c <HAL_DMA_Abort+0x250>)
 8104ea6:	4293      	cmp	r3, r2
 8104ea8:	d027      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	4a24      	ldr	r2, [pc, #144]	@ (8104f40 <HAL_DMA_Abort+0x254>)
 8104eb0:	4293      	cmp	r3, r2
 8104eb2:	d022      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	4a22      	ldr	r2, [pc, #136]	@ (8104f44 <HAL_DMA_Abort+0x258>)
 8104eba:	4293      	cmp	r3, r2
 8104ebc:	d01d      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	4a21      	ldr	r2, [pc, #132]	@ (8104f48 <HAL_DMA_Abort+0x25c>)
 8104ec4:	4293      	cmp	r3, r2
 8104ec6:	d018      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8104f4c <HAL_DMA_Abort+0x260>)
 8104ece:	4293      	cmp	r3, r2
 8104ed0:	d013      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8104f50 <HAL_DMA_Abort+0x264>)
 8104ed8:	4293      	cmp	r3, r2
 8104eda:	d00e      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8104f54 <HAL_DMA_Abort+0x268>)
 8104ee2:	4293      	cmp	r3, r2
 8104ee4:	d009      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	681b      	ldr	r3, [r3, #0]
 8104eea:	4a1b      	ldr	r2, [pc, #108]	@ (8104f58 <HAL_DMA_Abort+0x26c>)
 8104eec:	4293      	cmp	r3, r2
 8104eee:	d004      	beq.n	8104efa <HAL_DMA_Abort+0x20e>
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	4a19      	ldr	r2, [pc, #100]	@ (8104f5c <HAL_DMA_Abort+0x270>)
 8104ef6:	4293      	cmp	r3, r2
 8104ef8:	d132      	bne.n	8104f60 <HAL_DMA_Abort+0x274>
 8104efa:	2301      	movs	r3, #1
 8104efc:	e031      	b.n	8104f62 <HAL_DMA_Abort+0x276>
 8104efe:	bf00      	nop
 8104f00:	40020010 	.word	0x40020010
 8104f04:	40020028 	.word	0x40020028
 8104f08:	40020040 	.word	0x40020040
 8104f0c:	40020058 	.word	0x40020058
 8104f10:	40020070 	.word	0x40020070
 8104f14:	40020088 	.word	0x40020088
 8104f18:	400200a0 	.word	0x400200a0
 8104f1c:	400200b8 	.word	0x400200b8
 8104f20:	40020410 	.word	0x40020410
 8104f24:	40020428 	.word	0x40020428
 8104f28:	40020440 	.word	0x40020440
 8104f2c:	40020458 	.word	0x40020458
 8104f30:	40020470 	.word	0x40020470
 8104f34:	40020488 	.word	0x40020488
 8104f38:	400204a0 	.word	0x400204a0
 8104f3c:	400204b8 	.word	0x400204b8
 8104f40:	58025408 	.word	0x58025408
 8104f44:	5802541c 	.word	0x5802541c
 8104f48:	58025430 	.word	0x58025430
 8104f4c:	58025444 	.word	0x58025444
 8104f50:	58025458 	.word	0x58025458
 8104f54:	5802546c 	.word	0x5802546c
 8104f58:	58025480 	.word	0x58025480
 8104f5c:	58025494 	.word	0x58025494
 8104f60:	2300      	movs	r3, #0
 8104f62:	2b00      	cmp	r3, #0
 8104f64:	d007      	beq.n	8104f76 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104f6a:	681a      	ldr	r2, [r3, #0]
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8104f76:	687b      	ldr	r3, [r7, #4]
 8104f78:	681b      	ldr	r3, [r3, #0]
 8104f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8105130 <HAL_DMA_Abort+0x444>)
 8104f7c:	4293      	cmp	r3, r2
 8104f7e:	d04a      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	4a6b      	ldr	r2, [pc, #428]	@ (8105134 <HAL_DMA_Abort+0x448>)
 8104f86:	4293      	cmp	r3, r2
 8104f88:	d045      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	681b      	ldr	r3, [r3, #0]
 8104f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8105138 <HAL_DMA_Abort+0x44c>)
 8104f90:	4293      	cmp	r3, r2
 8104f92:	d040      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	4a68      	ldr	r2, [pc, #416]	@ (810513c <HAL_DMA_Abort+0x450>)
 8104f9a:	4293      	cmp	r3, r2
 8104f9c:	d03b      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	4a67      	ldr	r2, [pc, #412]	@ (8105140 <HAL_DMA_Abort+0x454>)
 8104fa4:	4293      	cmp	r3, r2
 8104fa6:	d036      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	4a65      	ldr	r2, [pc, #404]	@ (8105144 <HAL_DMA_Abort+0x458>)
 8104fae:	4293      	cmp	r3, r2
 8104fb0:	d031      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	4a64      	ldr	r2, [pc, #400]	@ (8105148 <HAL_DMA_Abort+0x45c>)
 8104fb8:	4293      	cmp	r3, r2
 8104fba:	d02c      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	4a62      	ldr	r2, [pc, #392]	@ (810514c <HAL_DMA_Abort+0x460>)
 8104fc2:	4293      	cmp	r3, r2
 8104fc4:	d027      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	681b      	ldr	r3, [r3, #0]
 8104fca:	4a61      	ldr	r2, [pc, #388]	@ (8105150 <HAL_DMA_Abort+0x464>)
 8104fcc:	4293      	cmp	r3, r2
 8104fce:	d022      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	681b      	ldr	r3, [r3, #0]
 8104fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8105154 <HAL_DMA_Abort+0x468>)
 8104fd6:	4293      	cmp	r3, r2
 8104fd8:	d01d      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	4a5e      	ldr	r2, [pc, #376]	@ (8105158 <HAL_DMA_Abort+0x46c>)
 8104fe0:	4293      	cmp	r3, r2
 8104fe2:	d018      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	681b      	ldr	r3, [r3, #0]
 8104fe8:	4a5c      	ldr	r2, [pc, #368]	@ (810515c <HAL_DMA_Abort+0x470>)
 8104fea:	4293      	cmp	r3, r2
 8104fec:	d013      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8105160 <HAL_DMA_Abort+0x474>)
 8104ff4:	4293      	cmp	r3, r2
 8104ff6:	d00e      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	4a59      	ldr	r2, [pc, #356]	@ (8105164 <HAL_DMA_Abort+0x478>)
 8104ffe:	4293      	cmp	r3, r2
 8105000:	d009      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	4a58      	ldr	r2, [pc, #352]	@ (8105168 <HAL_DMA_Abort+0x47c>)
 8105008:	4293      	cmp	r3, r2
 810500a:	d004      	beq.n	8105016 <HAL_DMA_Abort+0x32a>
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	4a56      	ldr	r2, [pc, #344]	@ (810516c <HAL_DMA_Abort+0x480>)
 8105012:	4293      	cmp	r3, r2
 8105014:	d108      	bne.n	8105028 <HAL_DMA_Abort+0x33c>
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	681b      	ldr	r3, [r3, #0]
 810501a:	681a      	ldr	r2, [r3, #0]
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	f022 0201 	bic.w	r2, r2, #1
 8105024:	601a      	str	r2, [r3, #0]
 8105026:	e007      	b.n	8105038 <HAL_DMA_Abort+0x34c>
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	681b      	ldr	r3, [r3, #0]
 810502c:	681a      	ldr	r2, [r3, #0]
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	f022 0201 	bic.w	r2, r2, #1
 8105036:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105038:	e013      	b.n	8105062 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810503a:	f7fd fc77 	bl	810292c <HAL_GetTick>
 810503e:	4602      	mov	r2, r0
 8105040:	693b      	ldr	r3, [r7, #16]
 8105042:	1ad3      	subs	r3, r2, r3
 8105044:	2b05      	cmp	r3, #5
 8105046:	d90c      	bls.n	8105062 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	2220      	movs	r2, #32
 810504c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	2203      	movs	r2, #3
 8105052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	2200      	movs	r2, #0
 810505a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 810505e:	2301      	movs	r3, #1
 8105060:	e12d      	b.n	81052be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105062:	697b      	ldr	r3, [r7, #20]
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	f003 0301 	and.w	r3, r3, #1
 810506a:	2b00      	cmp	r3, #0
 810506c:	d1e5      	bne.n	810503a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	4a2f      	ldr	r2, [pc, #188]	@ (8105130 <HAL_DMA_Abort+0x444>)
 8105074:	4293      	cmp	r3, r2
 8105076:	d04a      	beq.n	810510e <HAL_DMA_Abort+0x422>
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	681b      	ldr	r3, [r3, #0]
 810507c:	4a2d      	ldr	r2, [pc, #180]	@ (8105134 <HAL_DMA_Abort+0x448>)
 810507e:	4293      	cmp	r3, r2
 8105080:	d045      	beq.n	810510e <HAL_DMA_Abort+0x422>
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	681b      	ldr	r3, [r3, #0]
 8105086:	4a2c      	ldr	r2, [pc, #176]	@ (8105138 <HAL_DMA_Abort+0x44c>)
 8105088:	4293      	cmp	r3, r2
 810508a:	d040      	beq.n	810510e <HAL_DMA_Abort+0x422>
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	4a2a      	ldr	r2, [pc, #168]	@ (810513c <HAL_DMA_Abort+0x450>)
 8105092:	4293      	cmp	r3, r2
 8105094:	d03b      	beq.n	810510e <HAL_DMA_Abort+0x422>
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	4a29      	ldr	r2, [pc, #164]	@ (8105140 <HAL_DMA_Abort+0x454>)
 810509c:	4293      	cmp	r3, r2
 810509e:	d036      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	4a27      	ldr	r2, [pc, #156]	@ (8105144 <HAL_DMA_Abort+0x458>)
 81050a6:	4293      	cmp	r3, r2
 81050a8:	d031      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4a26      	ldr	r2, [pc, #152]	@ (8105148 <HAL_DMA_Abort+0x45c>)
 81050b0:	4293      	cmp	r3, r2
 81050b2:	d02c      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	4a24      	ldr	r2, [pc, #144]	@ (810514c <HAL_DMA_Abort+0x460>)
 81050ba:	4293      	cmp	r3, r2
 81050bc:	d027      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050be:	687b      	ldr	r3, [r7, #4]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	4a23      	ldr	r2, [pc, #140]	@ (8105150 <HAL_DMA_Abort+0x464>)
 81050c4:	4293      	cmp	r3, r2
 81050c6:	d022      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	4a21      	ldr	r2, [pc, #132]	@ (8105154 <HAL_DMA_Abort+0x468>)
 81050ce:	4293      	cmp	r3, r2
 81050d0:	d01d      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	4a20      	ldr	r2, [pc, #128]	@ (8105158 <HAL_DMA_Abort+0x46c>)
 81050d8:	4293      	cmp	r3, r2
 81050da:	d018      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	4a1e      	ldr	r2, [pc, #120]	@ (810515c <HAL_DMA_Abort+0x470>)
 81050e2:	4293      	cmp	r3, r2
 81050e4:	d013      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	681b      	ldr	r3, [r3, #0]
 81050ea:	4a1d      	ldr	r2, [pc, #116]	@ (8105160 <HAL_DMA_Abort+0x474>)
 81050ec:	4293      	cmp	r3, r2
 81050ee:	d00e      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	681b      	ldr	r3, [r3, #0]
 81050f4:	4a1b      	ldr	r2, [pc, #108]	@ (8105164 <HAL_DMA_Abort+0x478>)
 81050f6:	4293      	cmp	r3, r2
 81050f8:	d009      	beq.n	810510e <HAL_DMA_Abort+0x422>
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	681b      	ldr	r3, [r3, #0]
 81050fe:	4a1a      	ldr	r2, [pc, #104]	@ (8105168 <HAL_DMA_Abort+0x47c>)
 8105100:	4293      	cmp	r3, r2
 8105102:	d004      	beq.n	810510e <HAL_DMA_Abort+0x422>
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	4a18      	ldr	r2, [pc, #96]	@ (810516c <HAL_DMA_Abort+0x480>)
 810510a:	4293      	cmp	r3, r2
 810510c:	d101      	bne.n	8105112 <HAL_DMA_Abort+0x426>
 810510e:	2301      	movs	r3, #1
 8105110:	e000      	b.n	8105114 <HAL_DMA_Abort+0x428>
 8105112:	2300      	movs	r3, #0
 8105114:	2b00      	cmp	r3, #0
 8105116:	d02b      	beq.n	8105170 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810511c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105122:	f003 031f 	and.w	r3, r3, #31
 8105126:	223f      	movs	r2, #63	@ 0x3f
 8105128:	409a      	lsls	r2, r3
 810512a:	68bb      	ldr	r3, [r7, #8]
 810512c:	609a      	str	r2, [r3, #8]
 810512e:	e02a      	b.n	8105186 <HAL_DMA_Abort+0x49a>
 8105130:	40020010 	.word	0x40020010
 8105134:	40020028 	.word	0x40020028
 8105138:	40020040 	.word	0x40020040
 810513c:	40020058 	.word	0x40020058
 8105140:	40020070 	.word	0x40020070
 8105144:	40020088 	.word	0x40020088
 8105148:	400200a0 	.word	0x400200a0
 810514c:	400200b8 	.word	0x400200b8
 8105150:	40020410 	.word	0x40020410
 8105154:	40020428 	.word	0x40020428
 8105158:	40020440 	.word	0x40020440
 810515c:	40020458 	.word	0x40020458
 8105160:	40020470 	.word	0x40020470
 8105164:	40020488 	.word	0x40020488
 8105168:	400204a0 	.word	0x400204a0
 810516c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105174:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810517a:	f003 031f 	and.w	r3, r3, #31
 810517e:	2201      	movs	r2, #1
 8105180:	409a      	lsls	r2, r3
 8105182:	68fb      	ldr	r3, [r7, #12]
 8105184:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	4a4f      	ldr	r2, [pc, #316]	@ (81052c8 <HAL_DMA_Abort+0x5dc>)
 810518c:	4293      	cmp	r3, r2
 810518e:	d072      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	4a4d      	ldr	r2, [pc, #308]	@ (81052cc <HAL_DMA_Abort+0x5e0>)
 8105196:	4293      	cmp	r3, r2
 8105198:	d06d      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	4a4c      	ldr	r2, [pc, #304]	@ (81052d0 <HAL_DMA_Abort+0x5e4>)
 81051a0:	4293      	cmp	r3, r2
 81051a2:	d068      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a4a      	ldr	r2, [pc, #296]	@ (81052d4 <HAL_DMA_Abort+0x5e8>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d063      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a49      	ldr	r2, [pc, #292]	@ (81052d8 <HAL_DMA_Abort+0x5ec>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d05e      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a47      	ldr	r2, [pc, #284]	@ (81052dc <HAL_DMA_Abort+0x5f0>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d059      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	4a46      	ldr	r2, [pc, #280]	@ (81052e0 <HAL_DMA_Abort+0x5f4>)
 81051c8:	4293      	cmp	r3, r2
 81051ca:	d054      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a44      	ldr	r2, [pc, #272]	@ (81052e4 <HAL_DMA_Abort+0x5f8>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d04f      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4a43      	ldr	r2, [pc, #268]	@ (81052e8 <HAL_DMA_Abort+0x5fc>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d04a      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	4a41      	ldr	r2, [pc, #260]	@ (81052ec <HAL_DMA_Abort+0x600>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d045      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	4a40      	ldr	r2, [pc, #256]	@ (81052f0 <HAL_DMA_Abort+0x604>)
 81051f0:	4293      	cmp	r3, r2
 81051f2:	d040      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	4a3e      	ldr	r2, [pc, #248]	@ (81052f4 <HAL_DMA_Abort+0x608>)
 81051fa:	4293      	cmp	r3, r2
 81051fc:	d03b      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	4a3d      	ldr	r2, [pc, #244]	@ (81052f8 <HAL_DMA_Abort+0x60c>)
 8105204:	4293      	cmp	r3, r2
 8105206:	d036      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	4a3b      	ldr	r2, [pc, #236]	@ (81052fc <HAL_DMA_Abort+0x610>)
 810520e:	4293      	cmp	r3, r2
 8105210:	d031      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	4a3a      	ldr	r2, [pc, #232]	@ (8105300 <HAL_DMA_Abort+0x614>)
 8105218:	4293      	cmp	r3, r2
 810521a:	d02c      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	4a38      	ldr	r2, [pc, #224]	@ (8105304 <HAL_DMA_Abort+0x618>)
 8105222:	4293      	cmp	r3, r2
 8105224:	d027      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	4a37      	ldr	r2, [pc, #220]	@ (8105308 <HAL_DMA_Abort+0x61c>)
 810522c:	4293      	cmp	r3, r2
 810522e:	d022      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	4a35      	ldr	r2, [pc, #212]	@ (810530c <HAL_DMA_Abort+0x620>)
 8105236:	4293      	cmp	r3, r2
 8105238:	d01d      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	681b      	ldr	r3, [r3, #0]
 810523e:	4a34      	ldr	r2, [pc, #208]	@ (8105310 <HAL_DMA_Abort+0x624>)
 8105240:	4293      	cmp	r3, r2
 8105242:	d018      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	4a32      	ldr	r2, [pc, #200]	@ (8105314 <HAL_DMA_Abort+0x628>)
 810524a:	4293      	cmp	r3, r2
 810524c:	d013      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	4a31      	ldr	r2, [pc, #196]	@ (8105318 <HAL_DMA_Abort+0x62c>)
 8105254:	4293      	cmp	r3, r2
 8105256:	d00e      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	4a2f      	ldr	r2, [pc, #188]	@ (810531c <HAL_DMA_Abort+0x630>)
 810525e:	4293      	cmp	r3, r2
 8105260:	d009      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	681b      	ldr	r3, [r3, #0]
 8105266:	4a2e      	ldr	r2, [pc, #184]	@ (8105320 <HAL_DMA_Abort+0x634>)
 8105268:	4293      	cmp	r3, r2
 810526a:	d004      	beq.n	8105276 <HAL_DMA_Abort+0x58a>
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	4a2c      	ldr	r2, [pc, #176]	@ (8105324 <HAL_DMA_Abort+0x638>)
 8105272:	4293      	cmp	r3, r2
 8105274:	d101      	bne.n	810527a <HAL_DMA_Abort+0x58e>
 8105276:	2301      	movs	r3, #1
 8105278:	e000      	b.n	810527c <HAL_DMA_Abort+0x590>
 810527a:	2300      	movs	r3, #0
 810527c:	2b00      	cmp	r3, #0
 810527e:	d015      	beq.n	81052ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105284:	687a      	ldr	r2, [r7, #4]
 8105286:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105288:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810528e:	2b00      	cmp	r3, #0
 8105290:	d00c      	beq.n	81052ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105292:	687b      	ldr	r3, [r7, #4]
 8105294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105296:	681a      	ldr	r2, [r3, #0]
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810529c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81052a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81052a6:	687a      	ldr	r2, [r7, #4]
 81052a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 81052aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	2201      	movs	r2, #1
 81052b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	2200      	movs	r2, #0
 81052b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 81052bc:	2300      	movs	r3, #0
}
 81052be:	4618      	mov	r0, r3
 81052c0:	3718      	adds	r7, #24
 81052c2:	46bd      	mov	sp, r7
 81052c4:	bd80      	pop	{r7, pc}
 81052c6:	bf00      	nop
 81052c8:	40020010 	.word	0x40020010
 81052cc:	40020028 	.word	0x40020028
 81052d0:	40020040 	.word	0x40020040
 81052d4:	40020058 	.word	0x40020058
 81052d8:	40020070 	.word	0x40020070
 81052dc:	40020088 	.word	0x40020088
 81052e0:	400200a0 	.word	0x400200a0
 81052e4:	400200b8 	.word	0x400200b8
 81052e8:	40020410 	.word	0x40020410
 81052ec:	40020428 	.word	0x40020428
 81052f0:	40020440 	.word	0x40020440
 81052f4:	40020458 	.word	0x40020458
 81052f8:	40020470 	.word	0x40020470
 81052fc:	40020488 	.word	0x40020488
 8105300:	400204a0 	.word	0x400204a0
 8105304:	400204b8 	.word	0x400204b8
 8105308:	58025408 	.word	0x58025408
 810530c:	5802541c 	.word	0x5802541c
 8105310:	58025430 	.word	0x58025430
 8105314:	58025444 	.word	0x58025444
 8105318:	58025458 	.word	0x58025458
 810531c:	5802546c 	.word	0x5802546c
 8105320:	58025480 	.word	0x58025480
 8105324:	58025494 	.word	0x58025494

08105328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8105328:	b580      	push	{r7, lr}
 810532a:	b084      	sub	sp, #16
 810532c:	af00      	add	r7, sp, #0
 810532e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	2b00      	cmp	r3, #0
 8105334:	d101      	bne.n	810533a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8105336:	2301      	movs	r3, #1
 8105338:	e237      	b.n	81057aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8105340:	b2db      	uxtb	r3, r3
 8105342:	2b02      	cmp	r3, #2
 8105344:	d004      	beq.n	8105350 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	2280      	movs	r2, #128	@ 0x80
 810534a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 810534c:	2301      	movs	r3, #1
 810534e:	e22c      	b.n	81057aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	4a5c      	ldr	r2, [pc, #368]	@ (81054c8 <HAL_DMA_Abort_IT+0x1a0>)
 8105356:	4293      	cmp	r3, r2
 8105358:	d04a      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	4a5b      	ldr	r2, [pc, #364]	@ (81054cc <HAL_DMA_Abort_IT+0x1a4>)
 8105360:	4293      	cmp	r3, r2
 8105362:	d045      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	681b      	ldr	r3, [r3, #0]
 8105368:	4a59      	ldr	r2, [pc, #356]	@ (81054d0 <HAL_DMA_Abort_IT+0x1a8>)
 810536a:	4293      	cmp	r3, r2
 810536c:	d040      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	4a58      	ldr	r2, [pc, #352]	@ (81054d4 <HAL_DMA_Abort_IT+0x1ac>)
 8105374:	4293      	cmp	r3, r2
 8105376:	d03b      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	4a56      	ldr	r2, [pc, #344]	@ (81054d8 <HAL_DMA_Abort_IT+0x1b0>)
 810537e:	4293      	cmp	r3, r2
 8105380:	d036      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	4a55      	ldr	r2, [pc, #340]	@ (81054dc <HAL_DMA_Abort_IT+0x1b4>)
 8105388:	4293      	cmp	r3, r2
 810538a:	d031      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	4a53      	ldr	r2, [pc, #332]	@ (81054e0 <HAL_DMA_Abort_IT+0x1b8>)
 8105392:	4293      	cmp	r3, r2
 8105394:	d02c      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	4a52      	ldr	r2, [pc, #328]	@ (81054e4 <HAL_DMA_Abort_IT+0x1bc>)
 810539c:	4293      	cmp	r3, r2
 810539e:	d027      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	681b      	ldr	r3, [r3, #0]
 81053a4:	4a50      	ldr	r2, [pc, #320]	@ (81054e8 <HAL_DMA_Abort_IT+0x1c0>)
 81053a6:	4293      	cmp	r3, r2
 81053a8:	d022      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	4a4f      	ldr	r2, [pc, #316]	@ (81054ec <HAL_DMA_Abort_IT+0x1c4>)
 81053b0:	4293      	cmp	r3, r2
 81053b2:	d01d      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	4a4d      	ldr	r2, [pc, #308]	@ (81054f0 <HAL_DMA_Abort_IT+0x1c8>)
 81053ba:	4293      	cmp	r3, r2
 81053bc:	d018      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	4a4c      	ldr	r2, [pc, #304]	@ (81054f4 <HAL_DMA_Abort_IT+0x1cc>)
 81053c4:	4293      	cmp	r3, r2
 81053c6:	d013      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	4a4a      	ldr	r2, [pc, #296]	@ (81054f8 <HAL_DMA_Abort_IT+0x1d0>)
 81053ce:	4293      	cmp	r3, r2
 81053d0:	d00e      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	4a49      	ldr	r2, [pc, #292]	@ (81054fc <HAL_DMA_Abort_IT+0x1d4>)
 81053d8:	4293      	cmp	r3, r2
 81053da:	d009      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	4a47      	ldr	r2, [pc, #284]	@ (8105500 <HAL_DMA_Abort_IT+0x1d8>)
 81053e2:	4293      	cmp	r3, r2
 81053e4:	d004      	beq.n	81053f0 <HAL_DMA_Abort_IT+0xc8>
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	4a46      	ldr	r2, [pc, #280]	@ (8105504 <HAL_DMA_Abort_IT+0x1dc>)
 81053ec:	4293      	cmp	r3, r2
 81053ee:	d101      	bne.n	81053f4 <HAL_DMA_Abort_IT+0xcc>
 81053f0:	2301      	movs	r3, #1
 81053f2:	e000      	b.n	81053f6 <HAL_DMA_Abort_IT+0xce>
 81053f4:	2300      	movs	r3, #0
 81053f6:	2b00      	cmp	r3, #0
 81053f8:	f000 8086 	beq.w	8105508 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	2204      	movs	r2, #4
 8105400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	681b      	ldr	r3, [r3, #0]
 8105408:	4a2f      	ldr	r2, [pc, #188]	@ (81054c8 <HAL_DMA_Abort_IT+0x1a0>)
 810540a:	4293      	cmp	r3, r2
 810540c:	d04a      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	681b      	ldr	r3, [r3, #0]
 8105412:	4a2e      	ldr	r2, [pc, #184]	@ (81054cc <HAL_DMA_Abort_IT+0x1a4>)
 8105414:	4293      	cmp	r3, r2
 8105416:	d045      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	681b      	ldr	r3, [r3, #0]
 810541c:	4a2c      	ldr	r2, [pc, #176]	@ (81054d0 <HAL_DMA_Abort_IT+0x1a8>)
 810541e:	4293      	cmp	r3, r2
 8105420:	d040      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	4a2b      	ldr	r2, [pc, #172]	@ (81054d4 <HAL_DMA_Abort_IT+0x1ac>)
 8105428:	4293      	cmp	r3, r2
 810542a:	d03b      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	4a29      	ldr	r2, [pc, #164]	@ (81054d8 <HAL_DMA_Abort_IT+0x1b0>)
 8105432:	4293      	cmp	r3, r2
 8105434:	d036      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	4a28      	ldr	r2, [pc, #160]	@ (81054dc <HAL_DMA_Abort_IT+0x1b4>)
 810543c:	4293      	cmp	r3, r2
 810543e:	d031      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	4a26      	ldr	r2, [pc, #152]	@ (81054e0 <HAL_DMA_Abort_IT+0x1b8>)
 8105446:	4293      	cmp	r3, r2
 8105448:	d02c      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	681b      	ldr	r3, [r3, #0]
 810544e:	4a25      	ldr	r2, [pc, #148]	@ (81054e4 <HAL_DMA_Abort_IT+0x1bc>)
 8105450:	4293      	cmp	r3, r2
 8105452:	d027      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	4a23      	ldr	r2, [pc, #140]	@ (81054e8 <HAL_DMA_Abort_IT+0x1c0>)
 810545a:	4293      	cmp	r3, r2
 810545c:	d022      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	681b      	ldr	r3, [r3, #0]
 8105462:	4a22      	ldr	r2, [pc, #136]	@ (81054ec <HAL_DMA_Abort_IT+0x1c4>)
 8105464:	4293      	cmp	r3, r2
 8105466:	d01d      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	4a20      	ldr	r2, [pc, #128]	@ (81054f0 <HAL_DMA_Abort_IT+0x1c8>)
 810546e:	4293      	cmp	r3, r2
 8105470:	d018      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	681b      	ldr	r3, [r3, #0]
 8105476:	4a1f      	ldr	r2, [pc, #124]	@ (81054f4 <HAL_DMA_Abort_IT+0x1cc>)
 8105478:	4293      	cmp	r3, r2
 810547a:	d013      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	4a1d      	ldr	r2, [pc, #116]	@ (81054f8 <HAL_DMA_Abort_IT+0x1d0>)
 8105482:	4293      	cmp	r3, r2
 8105484:	d00e      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	4a1c      	ldr	r2, [pc, #112]	@ (81054fc <HAL_DMA_Abort_IT+0x1d4>)
 810548c:	4293      	cmp	r3, r2
 810548e:	d009      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	4a1a      	ldr	r2, [pc, #104]	@ (8105500 <HAL_DMA_Abort_IT+0x1d8>)
 8105496:	4293      	cmp	r3, r2
 8105498:	d004      	beq.n	81054a4 <HAL_DMA_Abort_IT+0x17c>
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	681b      	ldr	r3, [r3, #0]
 810549e:	4a19      	ldr	r2, [pc, #100]	@ (8105504 <HAL_DMA_Abort_IT+0x1dc>)
 81054a0:	4293      	cmp	r3, r2
 81054a2:	d108      	bne.n	81054b6 <HAL_DMA_Abort_IT+0x18e>
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	681b      	ldr	r3, [r3, #0]
 81054a8:	681a      	ldr	r2, [r3, #0]
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	f022 0201 	bic.w	r2, r2, #1
 81054b2:	601a      	str	r2, [r3, #0]
 81054b4:	e178      	b.n	81057a8 <HAL_DMA_Abort_IT+0x480>
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	681a      	ldr	r2, [r3, #0]
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	f022 0201 	bic.w	r2, r2, #1
 81054c4:	601a      	str	r2, [r3, #0]
 81054c6:	e16f      	b.n	81057a8 <HAL_DMA_Abort_IT+0x480>
 81054c8:	40020010 	.word	0x40020010
 81054cc:	40020028 	.word	0x40020028
 81054d0:	40020040 	.word	0x40020040
 81054d4:	40020058 	.word	0x40020058
 81054d8:	40020070 	.word	0x40020070
 81054dc:	40020088 	.word	0x40020088
 81054e0:	400200a0 	.word	0x400200a0
 81054e4:	400200b8 	.word	0x400200b8
 81054e8:	40020410 	.word	0x40020410
 81054ec:	40020428 	.word	0x40020428
 81054f0:	40020440 	.word	0x40020440
 81054f4:	40020458 	.word	0x40020458
 81054f8:	40020470 	.word	0x40020470
 81054fc:	40020488 	.word	0x40020488
 8105500:	400204a0 	.word	0x400204a0
 8105504:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	681b      	ldr	r3, [r3, #0]
 810550c:	681a      	ldr	r2, [r3, #0]
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	f022 020e 	bic.w	r2, r2, #14
 8105516:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	4a6c      	ldr	r2, [pc, #432]	@ (81056d0 <HAL_DMA_Abort_IT+0x3a8>)
 810551e:	4293      	cmp	r3, r2
 8105520:	d04a      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	681b      	ldr	r3, [r3, #0]
 8105526:	4a6b      	ldr	r2, [pc, #428]	@ (81056d4 <HAL_DMA_Abort_IT+0x3ac>)
 8105528:	4293      	cmp	r3, r2
 810552a:	d045      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	681b      	ldr	r3, [r3, #0]
 8105530:	4a69      	ldr	r2, [pc, #420]	@ (81056d8 <HAL_DMA_Abort_IT+0x3b0>)
 8105532:	4293      	cmp	r3, r2
 8105534:	d040      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105536:	687b      	ldr	r3, [r7, #4]
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	4a68      	ldr	r2, [pc, #416]	@ (81056dc <HAL_DMA_Abort_IT+0x3b4>)
 810553c:	4293      	cmp	r3, r2
 810553e:	d03b      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	4a66      	ldr	r2, [pc, #408]	@ (81056e0 <HAL_DMA_Abort_IT+0x3b8>)
 8105546:	4293      	cmp	r3, r2
 8105548:	d036      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	4a65      	ldr	r2, [pc, #404]	@ (81056e4 <HAL_DMA_Abort_IT+0x3bc>)
 8105550:	4293      	cmp	r3, r2
 8105552:	d031      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	4a63      	ldr	r2, [pc, #396]	@ (81056e8 <HAL_DMA_Abort_IT+0x3c0>)
 810555a:	4293      	cmp	r3, r2
 810555c:	d02c      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	4a62      	ldr	r2, [pc, #392]	@ (81056ec <HAL_DMA_Abort_IT+0x3c4>)
 8105564:	4293      	cmp	r3, r2
 8105566:	d027      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	4a60      	ldr	r2, [pc, #384]	@ (81056f0 <HAL_DMA_Abort_IT+0x3c8>)
 810556e:	4293      	cmp	r3, r2
 8105570:	d022      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	681b      	ldr	r3, [r3, #0]
 8105576:	4a5f      	ldr	r2, [pc, #380]	@ (81056f4 <HAL_DMA_Abort_IT+0x3cc>)
 8105578:	4293      	cmp	r3, r2
 810557a:	d01d      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	4a5d      	ldr	r2, [pc, #372]	@ (81056f8 <HAL_DMA_Abort_IT+0x3d0>)
 8105582:	4293      	cmp	r3, r2
 8105584:	d018      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	4a5c      	ldr	r2, [pc, #368]	@ (81056fc <HAL_DMA_Abort_IT+0x3d4>)
 810558c:	4293      	cmp	r3, r2
 810558e:	d013      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	4a5a      	ldr	r2, [pc, #360]	@ (8105700 <HAL_DMA_Abort_IT+0x3d8>)
 8105596:	4293      	cmp	r3, r2
 8105598:	d00e      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	4a59      	ldr	r2, [pc, #356]	@ (8105704 <HAL_DMA_Abort_IT+0x3dc>)
 81055a0:	4293      	cmp	r3, r2
 81055a2:	d009      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	681b      	ldr	r3, [r3, #0]
 81055a8:	4a57      	ldr	r2, [pc, #348]	@ (8105708 <HAL_DMA_Abort_IT+0x3e0>)
 81055aa:	4293      	cmp	r3, r2
 81055ac:	d004      	beq.n	81055b8 <HAL_DMA_Abort_IT+0x290>
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	4a56      	ldr	r2, [pc, #344]	@ (810570c <HAL_DMA_Abort_IT+0x3e4>)
 81055b4:	4293      	cmp	r3, r2
 81055b6:	d108      	bne.n	81055ca <HAL_DMA_Abort_IT+0x2a2>
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	681a      	ldr	r2, [r3, #0]
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	f022 0201 	bic.w	r2, r2, #1
 81055c6:	601a      	str	r2, [r3, #0]
 81055c8:	e007      	b.n	81055da <HAL_DMA_Abort_IT+0x2b2>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	681a      	ldr	r2, [r3, #0]
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	f022 0201 	bic.w	r2, r2, #1
 81055d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	681b      	ldr	r3, [r3, #0]
 81055de:	4a3c      	ldr	r2, [pc, #240]	@ (81056d0 <HAL_DMA_Abort_IT+0x3a8>)
 81055e0:	4293      	cmp	r3, r2
 81055e2:	d072      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	4a3a      	ldr	r2, [pc, #232]	@ (81056d4 <HAL_DMA_Abort_IT+0x3ac>)
 81055ea:	4293      	cmp	r3, r2
 81055ec:	d06d      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	4a39      	ldr	r2, [pc, #228]	@ (81056d8 <HAL_DMA_Abort_IT+0x3b0>)
 81055f4:	4293      	cmp	r3, r2
 81055f6:	d068      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	4a37      	ldr	r2, [pc, #220]	@ (81056dc <HAL_DMA_Abort_IT+0x3b4>)
 81055fe:	4293      	cmp	r3, r2
 8105600:	d063      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	4a36      	ldr	r2, [pc, #216]	@ (81056e0 <HAL_DMA_Abort_IT+0x3b8>)
 8105608:	4293      	cmp	r3, r2
 810560a:	d05e      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	4a34      	ldr	r2, [pc, #208]	@ (81056e4 <HAL_DMA_Abort_IT+0x3bc>)
 8105612:	4293      	cmp	r3, r2
 8105614:	d059      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	681b      	ldr	r3, [r3, #0]
 810561a:	4a33      	ldr	r2, [pc, #204]	@ (81056e8 <HAL_DMA_Abort_IT+0x3c0>)
 810561c:	4293      	cmp	r3, r2
 810561e:	d054      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	4a31      	ldr	r2, [pc, #196]	@ (81056ec <HAL_DMA_Abort_IT+0x3c4>)
 8105626:	4293      	cmp	r3, r2
 8105628:	d04f      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	681b      	ldr	r3, [r3, #0]
 810562e:	4a30      	ldr	r2, [pc, #192]	@ (81056f0 <HAL_DMA_Abort_IT+0x3c8>)
 8105630:	4293      	cmp	r3, r2
 8105632:	d04a      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	681b      	ldr	r3, [r3, #0]
 8105638:	4a2e      	ldr	r2, [pc, #184]	@ (81056f4 <HAL_DMA_Abort_IT+0x3cc>)
 810563a:	4293      	cmp	r3, r2
 810563c:	d045      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	681b      	ldr	r3, [r3, #0]
 8105642:	4a2d      	ldr	r2, [pc, #180]	@ (81056f8 <HAL_DMA_Abort_IT+0x3d0>)
 8105644:	4293      	cmp	r3, r2
 8105646:	d040      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	681b      	ldr	r3, [r3, #0]
 810564c:	4a2b      	ldr	r2, [pc, #172]	@ (81056fc <HAL_DMA_Abort_IT+0x3d4>)
 810564e:	4293      	cmp	r3, r2
 8105650:	d03b      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	681b      	ldr	r3, [r3, #0]
 8105656:	4a2a      	ldr	r2, [pc, #168]	@ (8105700 <HAL_DMA_Abort_IT+0x3d8>)
 8105658:	4293      	cmp	r3, r2
 810565a:	d036      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	681b      	ldr	r3, [r3, #0]
 8105660:	4a28      	ldr	r2, [pc, #160]	@ (8105704 <HAL_DMA_Abort_IT+0x3dc>)
 8105662:	4293      	cmp	r3, r2
 8105664:	d031      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	4a27      	ldr	r2, [pc, #156]	@ (8105708 <HAL_DMA_Abort_IT+0x3e0>)
 810566c:	4293      	cmp	r3, r2
 810566e:	d02c      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	681b      	ldr	r3, [r3, #0]
 8105674:	4a25      	ldr	r2, [pc, #148]	@ (810570c <HAL_DMA_Abort_IT+0x3e4>)
 8105676:	4293      	cmp	r3, r2
 8105678:	d027      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	4a24      	ldr	r2, [pc, #144]	@ (8105710 <HAL_DMA_Abort_IT+0x3e8>)
 8105680:	4293      	cmp	r3, r2
 8105682:	d022      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	4a22      	ldr	r2, [pc, #136]	@ (8105714 <HAL_DMA_Abort_IT+0x3ec>)
 810568a:	4293      	cmp	r3, r2
 810568c:	d01d      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	681b      	ldr	r3, [r3, #0]
 8105692:	4a21      	ldr	r2, [pc, #132]	@ (8105718 <HAL_DMA_Abort_IT+0x3f0>)
 8105694:	4293      	cmp	r3, r2
 8105696:	d018      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	681b      	ldr	r3, [r3, #0]
 810569c:	4a1f      	ldr	r2, [pc, #124]	@ (810571c <HAL_DMA_Abort_IT+0x3f4>)
 810569e:	4293      	cmp	r3, r2
 81056a0:	d013      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	681b      	ldr	r3, [r3, #0]
 81056a6:	4a1e      	ldr	r2, [pc, #120]	@ (8105720 <HAL_DMA_Abort_IT+0x3f8>)
 81056a8:	4293      	cmp	r3, r2
 81056aa:	d00e      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	4a1c      	ldr	r2, [pc, #112]	@ (8105724 <HAL_DMA_Abort_IT+0x3fc>)
 81056b2:	4293      	cmp	r3, r2
 81056b4:	d009      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	4a1b      	ldr	r2, [pc, #108]	@ (8105728 <HAL_DMA_Abort_IT+0x400>)
 81056bc:	4293      	cmp	r3, r2
 81056be:	d004      	beq.n	81056ca <HAL_DMA_Abort_IT+0x3a2>
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	681b      	ldr	r3, [r3, #0]
 81056c4:	4a19      	ldr	r2, [pc, #100]	@ (810572c <HAL_DMA_Abort_IT+0x404>)
 81056c6:	4293      	cmp	r3, r2
 81056c8:	d132      	bne.n	8105730 <HAL_DMA_Abort_IT+0x408>
 81056ca:	2301      	movs	r3, #1
 81056cc:	e031      	b.n	8105732 <HAL_DMA_Abort_IT+0x40a>
 81056ce:	bf00      	nop
 81056d0:	40020010 	.word	0x40020010
 81056d4:	40020028 	.word	0x40020028
 81056d8:	40020040 	.word	0x40020040
 81056dc:	40020058 	.word	0x40020058
 81056e0:	40020070 	.word	0x40020070
 81056e4:	40020088 	.word	0x40020088
 81056e8:	400200a0 	.word	0x400200a0
 81056ec:	400200b8 	.word	0x400200b8
 81056f0:	40020410 	.word	0x40020410
 81056f4:	40020428 	.word	0x40020428
 81056f8:	40020440 	.word	0x40020440
 81056fc:	40020458 	.word	0x40020458
 8105700:	40020470 	.word	0x40020470
 8105704:	40020488 	.word	0x40020488
 8105708:	400204a0 	.word	0x400204a0
 810570c:	400204b8 	.word	0x400204b8
 8105710:	58025408 	.word	0x58025408
 8105714:	5802541c 	.word	0x5802541c
 8105718:	58025430 	.word	0x58025430
 810571c:	58025444 	.word	0x58025444
 8105720:	58025458 	.word	0x58025458
 8105724:	5802546c 	.word	0x5802546c
 8105728:	58025480 	.word	0x58025480
 810572c:	58025494 	.word	0x58025494
 8105730:	2300      	movs	r3, #0
 8105732:	2b00      	cmp	r3, #0
 8105734:	d028      	beq.n	8105788 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810573a:	681a      	ldr	r2, [r3, #0]
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105744:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810574a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105750:	f003 031f 	and.w	r3, r3, #31
 8105754:	2201      	movs	r2, #1
 8105756:	409a      	lsls	r2, r3
 8105758:	68fb      	ldr	r3, [r7, #12]
 810575a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105760:	687a      	ldr	r2, [r7, #4]
 8105762:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105764:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810576a:	2b00      	cmp	r3, #0
 810576c:	d00c      	beq.n	8105788 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105772:	681a      	ldr	r2, [r3, #0]
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810577c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105782:	687a      	ldr	r2, [r7, #4]
 8105784:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8105786:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	2201      	movs	r2, #1
 810578c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	2200      	movs	r2, #0
 8105794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810579c:	2b00      	cmp	r3, #0
 810579e:	d003      	beq.n	81057a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81057a4:	6878      	ldr	r0, [r7, #4]
 81057a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81057a8:	2300      	movs	r3, #0
}
 81057aa:	4618      	mov	r0, r3
 81057ac:	3710      	adds	r7, #16
 81057ae:	46bd      	mov	sp, r7
 81057b0:	bd80      	pop	{r7, pc}
 81057b2:	bf00      	nop

081057b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81057b4:	b580      	push	{r7, lr}
 81057b6:	b08a      	sub	sp, #40	@ 0x28
 81057b8:	af00      	add	r7, sp, #0
 81057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81057bc:	2300      	movs	r3, #0
 81057be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81057c0:	4b67      	ldr	r3, [pc, #412]	@ (8105960 <HAL_DMA_IRQHandler+0x1ac>)
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	4a67      	ldr	r2, [pc, #412]	@ (8105964 <HAL_DMA_IRQHandler+0x1b0>)
 81057c6:	fba2 2303 	umull	r2, r3, r2, r3
 81057ca:	0a9b      	lsrs	r3, r3, #10
 81057cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81057da:	6a3b      	ldr	r3, [r7, #32]
 81057dc:	681b      	ldr	r3, [r3, #0]
 81057de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81057e0:	69fb      	ldr	r3, [r7, #28]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	4a5f      	ldr	r2, [pc, #380]	@ (8105968 <HAL_DMA_IRQHandler+0x1b4>)
 81057ec:	4293      	cmp	r3, r2
 81057ee:	d04a      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	4a5d      	ldr	r2, [pc, #372]	@ (810596c <HAL_DMA_IRQHandler+0x1b8>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d045      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a5c      	ldr	r2, [pc, #368]	@ (8105970 <HAL_DMA_IRQHandler+0x1bc>)
 8105800:	4293      	cmp	r3, r2
 8105802:	d040      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	4a5a      	ldr	r2, [pc, #360]	@ (8105974 <HAL_DMA_IRQHandler+0x1c0>)
 810580a:	4293      	cmp	r3, r2
 810580c:	d03b      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	681b      	ldr	r3, [r3, #0]
 8105812:	4a59      	ldr	r2, [pc, #356]	@ (8105978 <HAL_DMA_IRQHandler+0x1c4>)
 8105814:	4293      	cmp	r3, r2
 8105816:	d036      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	4a57      	ldr	r2, [pc, #348]	@ (810597c <HAL_DMA_IRQHandler+0x1c8>)
 810581e:	4293      	cmp	r3, r2
 8105820:	d031      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105822:	687b      	ldr	r3, [r7, #4]
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	4a56      	ldr	r2, [pc, #344]	@ (8105980 <HAL_DMA_IRQHandler+0x1cc>)
 8105828:	4293      	cmp	r3, r2
 810582a:	d02c      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	4a54      	ldr	r2, [pc, #336]	@ (8105984 <HAL_DMA_IRQHandler+0x1d0>)
 8105832:	4293      	cmp	r3, r2
 8105834:	d027      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	681b      	ldr	r3, [r3, #0]
 810583a:	4a53      	ldr	r2, [pc, #332]	@ (8105988 <HAL_DMA_IRQHandler+0x1d4>)
 810583c:	4293      	cmp	r3, r2
 810583e:	d022      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	681b      	ldr	r3, [r3, #0]
 8105844:	4a51      	ldr	r2, [pc, #324]	@ (810598c <HAL_DMA_IRQHandler+0x1d8>)
 8105846:	4293      	cmp	r3, r2
 8105848:	d01d      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	4a50      	ldr	r2, [pc, #320]	@ (8105990 <HAL_DMA_IRQHandler+0x1dc>)
 8105850:	4293      	cmp	r3, r2
 8105852:	d018      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	4a4e      	ldr	r2, [pc, #312]	@ (8105994 <HAL_DMA_IRQHandler+0x1e0>)
 810585a:	4293      	cmp	r3, r2
 810585c:	d013      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	4a4d      	ldr	r2, [pc, #308]	@ (8105998 <HAL_DMA_IRQHandler+0x1e4>)
 8105864:	4293      	cmp	r3, r2
 8105866:	d00e      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	4a4b      	ldr	r2, [pc, #300]	@ (810599c <HAL_DMA_IRQHandler+0x1e8>)
 810586e:	4293      	cmp	r3, r2
 8105870:	d009      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	4a4a      	ldr	r2, [pc, #296]	@ (81059a0 <HAL_DMA_IRQHandler+0x1ec>)
 8105878:	4293      	cmp	r3, r2
 810587a:	d004      	beq.n	8105886 <HAL_DMA_IRQHandler+0xd2>
 810587c:	687b      	ldr	r3, [r7, #4]
 810587e:	681b      	ldr	r3, [r3, #0]
 8105880:	4a48      	ldr	r2, [pc, #288]	@ (81059a4 <HAL_DMA_IRQHandler+0x1f0>)
 8105882:	4293      	cmp	r3, r2
 8105884:	d101      	bne.n	810588a <HAL_DMA_IRQHandler+0xd6>
 8105886:	2301      	movs	r3, #1
 8105888:	e000      	b.n	810588c <HAL_DMA_IRQHandler+0xd8>
 810588a:	2300      	movs	r3, #0
 810588c:	2b00      	cmp	r3, #0
 810588e:	f000 842b 	beq.w	81060e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105896:	f003 031f 	and.w	r3, r3, #31
 810589a:	2208      	movs	r2, #8
 810589c:	409a      	lsls	r2, r3
 810589e:	69bb      	ldr	r3, [r7, #24]
 81058a0:	4013      	ands	r3, r2
 81058a2:	2b00      	cmp	r3, #0
 81058a4:	f000 80a2 	beq.w	81059ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	4a2e      	ldr	r2, [pc, #184]	@ (8105968 <HAL_DMA_IRQHandler+0x1b4>)
 81058ae:	4293      	cmp	r3, r2
 81058b0:	d04a      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	4a2d      	ldr	r2, [pc, #180]	@ (810596c <HAL_DMA_IRQHandler+0x1b8>)
 81058b8:	4293      	cmp	r3, r2
 81058ba:	d045      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	4a2b      	ldr	r2, [pc, #172]	@ (8105970 <HAL_DMA_IRQHandler+0x1bc>)
 81058c2:	4293      	cmp	r3, r2
 81058c4:	d040      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	4a2a      	ldr	r2, [pc, #168]	@ (8105974 <HAL_DMA_IRQHandler+0x1c0>)
 81058cc:	4293      	cmp	r3, r2
 81058ce:	d03b      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	4a28      	ldr	r2, [pc, #160]	@ (8105978 <HAL_DMA_IRQHandler+0x1c4>)
 81058d6:	4293      	cmp	r3, r2
 81058d8:	d036      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	4a27      	ldr	r2, [pc, #156]	@ (810597c <HAL_DMA_IRQHandler+0x1c8>)
 81058e0:	4293      	cmp	r3, r2
 81058e2:	d031      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	681b      	ldr	r3, [r3, #0]
 81058e8:	4a25      	ldr	r2, [pc, #148]	@ (8105980 <HAL_DMA_IRQHandler+0x1cc>)
 81058ea:	4293      	cmp	r3, r2
 81058ec:	d02c      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	681b      	ldr	r3, [r3, #0]
 81058f2:	4a24      	ldr	r2, [pc, #144]	@ (8105984 <HAL_DMA_IRQHandler+0x1d0>)
 81058f4:	4293      	cmp	r3, r2
 81058f6:	d027      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	4a22      	ldr	r2, [pc, #136]	@ (8105988 <HAL_DMA_IRQHandler+0x1d4>)
 81058fe:	4293      	cmp	r3, r2
 8105900:	d022      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	4a21      	ldr	r2, [pc, #132]	@ (810598c <HAL_DMA_IRQHandler+0x1d8>)
 8105908:	4293      	cmp	r3, r2
 810590a:	d01d      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	4a1f      	ldr	r2, [pc, #124]	@ (8105990 <HAL_DMA_IRQHandler+0x1dc>)
 8105912:	4293      	cmp	r3, r2
 8105914:	d018      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	4a1e      	ldr	r2, [pc, #120]	@ (8105994 <HAL_DMA_IRQHandler+0x1e0>)
 810591c:	4293      	cmp	r3, r2
 810591e:	d013      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	4a1c      	ldr	r2, [pc, #112]	@ (8105998 <HAL_DMA_IRQHandler+0x1e4>)
 8105926:	4293      	cmp	r3, r2
 8105928:	d00e      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	4a1b      	ldr	r2, [pc, #108]	@ (810599c <HAL_DMA_IRQHandler+0x1e8>)
 8105930:	4293      	cmp	r3, r2
 8105932:	d009      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	681b      	ldr	r3, [r3, #0]
 8105938:	4a19      	ldr	r2, [pc, #100]	@ (81059a0 <HAL_DMA_IRQHandler+0x1ec>)
 810593a:	4293      	cmp	r3, r2
 810593c:	d004      	beq.n	8105948 <HAL_DMA_IRQHandler+0x194>
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	4a18      	ldr	r2, [pc, #96]	@ (81059a4 <HAL_DMA_IRQHandler+0x1f0>)
 8105944:	4293      	cmp	r3, r2
 8105946:	d12f      	bne.n	81059a8 <HAL_DMA_IRQHandler+0x1f4>
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	681b      	ldr	r3, [r3, #0]
 810594e:	f003 0304 	and.w	r3, r3, #4
 8105952:	2b00      	cmp	r3, #0
 8105954:	bf14      	ite	ne
 8105956:	2301      	movne	r3, #1
 8105958:	2300      	moveq	r3, #0
 810595a:	b2db      	uxtb	r3, r3
 810595c:	e02e      	b.n	81059bc <HAL_DMA_IRQHandler+0x208>
 810595e:	bf00      	nop
 8105960:	24000000 	.word	0x24000000
 8105964:	1b4e81b5 	.word	0x1b4e81b5
 8105968:	40020010 	.word	0x40020010
 810596c:	40020028 	.word	0x40020028
 8105970:	40020040 	.word	0x40020040
 8105974:	40020058 	.word	0x40020058
 8105978:	40020070 	.word	0x40020070
 810597c:	40020088 	.word	0x40020088
 8105980:	400200a0 	.word	0x400200a0
 8105984:	400200b8 	.word	0x400200b8
 8105988:	40020410 	.word	0x40020410
 810598c:	40020428 	.word	0x40020428
 8105990:	40020440 	.word	0x40020440
 8105994:	40020458 	.word	0x40020458
 8105998:	40020470 	.word	0x40020470
 810599c:	40020488 	.word	0x40020488
 81059a0:	400204a0 	.word	0x400204a0
 81059a4:	400204b8 	.word	0x400204b8
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	681b      	ldr	r3, [r3, #0]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	f003 0308 	and.w	r3, r3, #8
 81059b2:	2b00      	cmp	r3, #0
 81059b4:	bf14      	ite	ne
 81059b6:	2301      	movne	r3, #1
 81059b8:	2300      	moveq	r3, #0
 81059ba:	b2db      	uxtb	r3, r3
 81059bc:	2b00      	cmp	r3, #0
 81059be:	d015      	beq.n	81059ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	681b      	ldr	r3, [r3, #0]
 81059c4:	681a      	ldr	r2, [r3, #0]
 81059c6:	687b      	ldr	r3, [r7, #4]
 81059c8:	681b      	ldr	r3, [r3, #0]
 81059ca:	f022 0204 	bic.w	r2, r2, #4
 81059ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81059d4:	f003 031f 	and.w	r3, r3, #31
 81059d8:	2208      	movs	r2, #8
 81059da:	409a      	lsls	r2, r3
 81059dc:	6a3b      	ldr	r3, [r7, #32]
 81059de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81059e0:	687b      	ldr	r3, [r7, #4]
 81059e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81059e4:	f043 0201 	orr.w	r2, r3, #1
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81059f0:	f003 031f 	and.w	r3, r3, #31
 81059f4:	69ba      	ldr	r2, [r7, #24]
 81059f6:	fa22 f303 	lsr.w	r3, r2, r3
 81059fa:	f003 0301 	and.w	r3, r3, #1
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d06e      	beq.n	8105ae0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	4a69      	ldr	r2, [pc, #420]	@ (8105bac <HAL_DMA_IRQHandler+0x3f8>)
 8105a08:	4293      	cmp	r3, r2
 8105a0a:	d04a      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	681b      	ldr	r3, [r3, #0]
 8105a10:	4a67      	ldr	r2, [pc, #412]	@ (8105bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8105a12:	4293      	cmp	r3, r2
 8105a14:	d045      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	4a66      	ldr	r2, [pc, #408]	@ (8105bb4 <HAL_DMA_IRQHandler+0x400>)
 8105a1c:	4293      	cmp	r3, r2
 8105a1e:	d040      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	681b      	ldr	r3, [r3, #0]
 8105a24:	4a64      	ldr	r2, [pc, #400]	@ (8105bb8 <HAL_DMA_IRQHandler+0x404>)
 8105a26:	4293      	cmp	r3, r2
 8105a28:	d03b      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	4a63      	ldr	r2, [pc, #396]	@ (8105bbc <HAL_DMA_IRQHandler+0x408>)
 8105a30:	4293      	cmp	r3, r2
 8105a32:	d036      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	4a61      	ldr	r2, [pc, #388]	@ (8105bc0 <HAL_DMA_IRQHandler+0x40c>)
 8105a3a:	4293      	cmp	r3, r2
 8105a3c:	d031      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	4a60      	ldr	r2, [pc, #384]	@ (8105bc4 <HAL_DMA_IRQHandler+0x410>)
 8105a44:	4293      	cmp	r3, r2
 8105a46:	d02c      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	681b      	ldr	r3, [r3, #0]
 8105a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8105bc8 <HAL_DMA_IRQHandler+0x414>)
 8105a4e:	4293      	cmp	r3, r2
 8105a50:	d027      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	4a5d      	ldr	r2, [pc, #372]	@ (8105bcc <HAL_DMA_IRQHandler+0x418>)
 8105a58:	4293      	cmp	r3, r2
 8105a5a:	d022      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	4a5b      	ldr	r2, [pc, #364]	@ (8105bd0 <HAL_DMA_IRQHandler+0x41c>)
 8105a62:	4293      	cmp	r3, r2
 8105a64:	d01d      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8105bd4 <HAL_DMA_IRQHandler+0x420>)
 8105a6c:	4293      	cmp	r3, r2
 8105a6e:	d018      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	4a58      	ldr	r2, [pc, #352]	@ (8105bd8 <HAL_DMA_IRQHandler+0x424>)
 8105a76:	4293      	cmp	r3, r2
 8105a78:	d013      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	681b      	ldr	r3, [r3, #0]
 8105a7e:	4a57      	ldr	r2, [pc, #348]	@ (8105bdc <HAL_DMA_IRQHandler+0x428>)
 8105a80:	4293      	cmp	r3, r2
 8105a82:	d00e      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	4a55      	ldr	r2, [pc, #340]	@ (8105be0 <HAL_DMA_IRQHandler+0x42c>)
 8105a8a:	4293      	cmp	r3, r2
 8105a8c:	d009      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	4a54      	ldr	r2, [pc, #336]	@ (8105be4 <HAL_DMA_IRQHandler+0x430>)
 8105a94:	4293      	cmp	r3, r2
 8105a96:	d004      	beq.n	8105aa2 <HAL_DMA_IRQHandler+0x2ee>
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	681b      	ldr	r3, [r3, #0]
 8105a9c:	4a52      	ldr	r2, [pc, #328]	@ (8105be8 <HAL_DMA_IRQHandler+0x434>)
 8105a9e:	4293      	cmp	r3, r2
 8105aa0:	d10a      	bne.n	8105ab8 <HAL_DMA_IRQHandler+0x304>
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	695b      	ldr	r3, [r3, #20]
 8105aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105aac:	2b00      	cmp	r3, #0
 8105aae:	bf14      	ite	ne
 8105ab0:	2301      	movne	r3, #1
 8105ab2:	2300      	moveq	r3, #0
 8105ab4:	b2db      	uxtb	r3, r3
 8105ab6:	e003      	b.n	8105ac0 <HAL_DMA_IRQHandler+0x30c>
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	2300      	movs	r3, #0
 8105ac0:	2b00      	cmp	r3, #0
 8105ac2:	d00d      	beq.n	8105ae0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105ac8:	f003 031f 	and.w	r3, r3, #31
 8105acc:	2201      	movs	r2, #1
 8105ace:	409a      	lsls	r2, r3
 8105ad0:	6a3b      	ldr	r3, [r7, #32]
 8105ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ad8:	f043 0202 	orr.w	r2, r3, #2
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105ae4:	f003 031f 	and.w	r3, r3, #31
 8105ae8:	2204      	movs	r2, #4
 8105aea:	409a      	lsls	r2, r3
 8105aec:	69bb      	ldr	r3, [r7, #24]
 8105aee:	4013      	ands	r3, r2
 8105af0:	2b00      	cmp	r3, #0
 8105af2:	f000 808f 	beq.w	8105c14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	4a2c      	ldr	r2, [pc, #176]	@ (8105bac <HAL_DMA_IRQHandler+0x3f8>)
 8105afc:	4293      	cmp	r3, r2
 8105afe:	d04a      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	4a2a      	ldr	r2, [pc, #168]	@ (8105bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8105b06:	4293      	cmp	r3, r2
 8105b08:	d045      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	4a29      	ldr	r2, [pc, #164]	@ (8105bb4 <HAL_DMA_IRQHandler+0x400>)
 8105b10:	4293      	cmp	r3, r2
 8105b12:	d040      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	4a27      	ldr	r2, [pc, #156]	@ (8105bb8 <HAL_DMA_IRQHandler+0x404>)
 8105b1a:	4293      	cmp	r3, r2
 8105b1c:	d03b      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	681b      	ldr	r3, [r3, #0]
 8105b22:	4a26      	ldr	r2, [pc, #152]	@ (8105bbc <HAL_DMA_IRQHandler+0x408>)
 8105b24:	4293      	cmp	r3, r2
 8105b26:	d036      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	681b      	ldr	r3, [r3, #0]
 8105b2c:	4a24      	ldr	r2, [pc, #144]	@ (8105bc0 <HAL_DMA_IRQHandler+0x40c>)
 8105b2e:	4293      	cmp	r3, r2
 8105b30:	d031      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	681b      	ldr	r3, [r3, #0]
 8105b36:	4a23      	ldr	r2, [pc, #140]	@ (8105bc4 <HAL_DMA_IRQHandler+0x410>)
 8105b38:	4293      	cmp	r3, r2
 8105b3a:	d02c      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	681b      	ldr	r3, [r3, #0]
 8105b40:	4a21      	ldr	r2, [pc, #132]	@ (8105bc8 <HAL_DMA_IRQHandler+0x414>)
 8105b42:	4293      	cmp	r3, r2
 8105b44:	d027      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	4a20      	ldr	r2, [pc, #128]	@ (8105bcc <HAL_DMA_IRQHandler+0x418>)
 8105b4c:	4293      	cmp	r3, r2
 8105b4e:	d022      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	681b      	ldr	r3, [r3, #0]
 8105b54:	4a1e      	ldr	r2, [pc, #120]	@ (8105bd0 <HAL_DMA_IRQHandler+0x41c>)
 8105b56:	4293      	cmp	r3, r2
 8105b58:	d01d      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8105bd4 <HAL_DMA_IRQHandler+0x420>)
 8105b60:	4293      	cmp	r3, r2
 8105b62:	d018      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	4a1b      	ldr	r2, [pc, #108]	@ (8105bd8 <HAL_DMA_IRQHandler+0x424>)
 8105b6a:	4293      	cmp	r3, r2
 8105b6c:	d013      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	4a1a      	ldr	r2, [pc, #104]	@ (8105bdc <HAL_DMA_IRQHandler+0x428>)
 8105b74:	4293      	cmp	r3, r2
 8105b76:	d00e      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	4a18      	ldr	r2, [pc, #96]	@ (8105be0 <HAL_DMA_IRQHandler+0x42c>)
 8105b7e:	4293      	cmp	r3, r2
 8105b80:	d009      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	4a17      	ldr	r2, [pc, #92]	@ (8105be4 <HAL_DMA_IRQHandler+0x430>)
 8105b88:	4293      	cmp	r3, r2
 8105b8a:	d004      	beq.n	8105b96 <HAL_DMA_IRQHandler+0x3e2>
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	4a15      	ldr	r2, [pc, #84]	@ (8105be8 <HAL_DMA_IRQHandler+0x434>)
 8105b92:	4293      	cmp	r3, r2
 8105b94:	d12a      	bne.n	8105bec <HAL_DMA_IRQHandler+0x438>
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	f003 0302 	and.w	r3, r3, #2
 8105ba0:	2b00      	cmp	r3, #0
 8105ba2:	bf14      	ite	ne
 8105ba4:	2301      	movne	r3, #1
 8105ba6:	2300      	moveq	r3, #0
 8105ba8:	b2db      	uxtb	r3, r3
 8105baa:	e023      	b.n	8105bf4 <HAL_DMA_IRQHandler+0x440>
 8105bac:	40020010 	.word	0x40020010
 8105bb0:	40020028 	.word	0x40020028
 8105bb4:	40020040 	.word	0x40020040
 8105bb8:	40020058 	.word	0x40020058
 8105bbc:	40020070 	.word	0x40020070
 8105bc0:	40020088 	.word	0x40020088
 8105bc4:	400200a0 	.word	0x400200a0
 8105bc8:	400200b8 	.word	0x400200b8
 8105bcc:	40020410 	.word	0x40020410
 8105bd0:	40020428 	.word	0x40020428
 8105bd4:	40020440 	.word	0x40020440
 8105bd8:	40020458 	.word	0x40020458
 8105bdc:	40020470 	.word	0x40020470
 8105be0:	40020488 	.word	0x40020488
 8105be4:	400204a0 	.word	0x400204a0
 8105be8:	400204b8 	.word	0x400204b8
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	681b      	ldr	r3, [r3, #0]
 8105bf2:	2300      	movs	r3, #0
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d00d      	beq.n	8105c14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105bfc:	f003 031f 	and.w	r3, r3, #31
 8105c00:	2204      	movs	r2, #4
 8105c02:	409a      	lsls	r2, r3
 8105c04:	6a3b      	ldr	r3, [r7, #32]
 8105c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105c0c:	f043 0204 	orr.w	r2, r3, #4
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105c18:	f003 031f 	and.w	r3, r3, #31
 8105c1c:	2210      	movs	r2, #16
 8105c1e:	409a      	lsls	r2, r3
 8105c20:	69bb      	ldr	r3, [r7, #24]
 8105c22:	4013      	ands	r3, r2
 8105c24:	2b00      	cmp	r3, #0
 8105c26:	f000 80a6 	beq.w	8105d76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	4a85      	ldr	r2, [pc, #532]	@ (8105e44 <HAL_DMA_IRQHandler+0x690>)
 8105c30:	4293      	cmp	r3, r2
 8105c32:	d04a      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	4a83      	ldr	r2, [pc, #524]	@ (8105e48 <HAL_DMA_IRQHandler+0x694>)
 8105c3a:	4293      	cmp	r3, r2
 8105c3c:	d045      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	4a82      	ldr	r2, [pc, #520]	@ (8105e4c <HAL_DMA_IRQHandler+0x698>)
 8105c44:	4293      	cmp	r3, r2
 8105c46:	d040      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	4a80      	ldr	r2, [pc, #512]	@ (8105e50 <HAL_DMA_IRQHandler+0x69c>)
 8105c4e:	4293      	cmp	r3, r2
 8105c50:	d03b      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	4a7f      	ldr	r2, [pc, #508]	@ (8105e54 <HAL_DMA_IRQHandler+0x6a0>)
 8105c58:	4293      	cmp	r3, r2
 8105c5a:	d036      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	4a7d      	ldr	r2, [pc, #500]	@ (8105e58 <HAL_DMA_IRQHandler+0x6a4>)
 8105c62:	4293      	cmp	r3, r2
 8105c64:	d031      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	681b      	ldr	r3, [r3, #0]
 8105c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8105e5c <HAL_DMA_IRQHandler+0x6a8>)
 8105c6c:	4293      	cmp	r3, r2
 8105c6e:	d02c      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	4a7a      	ldr	r2, [pc, #488]	@ (8105e60 <HAL_DMA_IRQHandler+0x6ac>)
 8105c76:	4293      	cmp	r3, r2
 8105c78:	d027      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	4a79      	ldr	r2, [pc, #484]	@ (8105e64 <HAL_DMA_IRQHandler+0x6b0>)
 8105c80:	4293      	cmp	r3, r2
 8105c82:	d022      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	4a77      	ldr	r2, [pc, #476]	@ (8105e68 <HAL_DMA_IRQHandler+0x6b4>)
 8105c8a:	4293      	cmp	r3, r2
 8105c8c:	d01d      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	4a76      	ldr	r2, [pc, #472]	@ (8105e6c <HAL_DMA_IRQHandler+0x6b8>)
 8105c94:	4293      	cmp	r3, r2
 8105c96:	d018      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a74      	ldr	r2, [pc, #464]	@ (8105e70 <HAL_DMA_IRQHandler+0x6bc>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d013      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	4a73      	ldr	r2, [pc, #460]	@ (8105e74 <HAL_DMA_IRQHandler+0x6c0>)
 8105ca8:	4293      	cmp	r3, r2
 8105caa:	d00e      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	4a71      	ldr	r2, [pc, #452]	@ (8105e78 <HAL_DMA_IRQHandler+0x6c4>)
 8105cb2:	4293      	cmp	r3, r2
 8105cb4:	d009      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	4a70      	ldr	r2, [pc, #448]	@ (8105e7c <HAL_DMA_IRQHandler+0x6c8>)
 8105cbc:	4293      	cmp	r3, r2
 8105cbe:	d004      	beq.n	8105cca <HAL_DMA_IRQHandler+0x516>
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8105e80 <HAL_DMA_IRQHandler+0x6cc>)
 8105cc6:	4293      	cmp	r3, r2
 8105cc8:	d10a      	bne.n	8105ce0 <HAL_DMA_IRQHandler+0x52c>
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	681b      	ldr	r3, [r3, #0]
 8105cd0:	f003 0308 	and.w	r3, r3, #8
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	bf14      	ite	ne
 8105cd8:	2301      	movne	r3, #1
 8105cda:	2300      	moveq	r3, #0
 8105cdc:	b2db      	uxtb	r3, r3
 8105cde:	e009      	b.n	8105cf4 <HAL_DMA_IRQHandler+0x540>
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	681b      	ldr	r3, [r3, #0]
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	f003 0304 	and.w	r3, r3, #4
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	bf14      	ite	ne
 8105cee:	2301      	movne	r3, #1
 8105cf0:	2300      	moveq	r3, #0
 8105cf2:	b2db      	uxtb	r3, r3
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	d03e      	beq.n	8105d76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105cfc:	f003 031f 	and.w	r3, r3, #31
 8105d00:	2210      	movs	r2, #16
 8105d02:	409a      	lsls	r2, r3
 8105d04:	6a3b      	ldr	r3, [r7, #32]
 8105d06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d018      	beq.n	8105d48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8105d20:	2b00      	cmp	r3, #0
 8105d22:	d108      	bne.n	8105d36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d024      	beq.n	8105d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d30:	6878      	ldr	r0, [r7, #4]
 8105d32:	4798      	blx	r3
 8105d34:	e01f      	b.n	8105d76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105d3a:	2b00      	cmp	r3, #0
 8105d3c:	d01b      	beq.n	8105d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105d42:	6878      	ldr	r0, [r7, #4]
 8105d44:	4798      	blx	r3
 8105d46:	e016      	b.n	8105d76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	d107      	bne.n	8105d66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	681a      	ldr	r2, [r3, #0]
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	f022 0208 	bic.w	r2, r2, #8
 8105d64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d6a:	2b00      	cmp	r3, #0
 8105d6c:	d003      	beq.n	8105d76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d72:	6878      	ldr	r0, [r7, #4]
 8105d74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105d7a:	f003 031f 	and.w	r3, r3, #31
 8105d7e:	2220      	movs	r2, #32
 8105d80:	409a      	lsls	r2, r3
 8105d82:	69bb      	ldr	r3, [r7, #24]
 8105d84:	4013      	ands	r3, r2
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	f000 8110 	beq.w	8105fac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	4a2c      	ldr	r2, [pc, #176]	@ (8105e44 <HAL_DMA_IRQHandler+0x690>)
 8105d92:	4293      	cmp	r3, r2
 8105d94:	d04a      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	681b      	ldr	r3, [r3, #0]
 8105d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8105e48 <HAL_DMA_IRQHandler+0x694>)
 8105d9c:	4293      	cmp	r3, r2
 8105d9e:	d045      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	681b      	ldr	r3, [r3, #0]
 8105da4:	4a29      	ldr	r2, [pc, #164]	@ (8105e4c <HAL_DMA_IRQHandler+0x698>)
 8105da6:	4293      	cmp	r3, r2
 8105da8:	d040      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	4a28      	ldr	r2, [pc, #160]	@ (8105e50 <HAL_DMA_IRQHandler+0x69c>)
 8105db0:	4293      	cmp	r3, r2
 8105db2:	d03b      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	4a26      	ldr	r2, [pc, #152]	@ (8105e54 <HAL_DMA_IRQHandler+0x6a0>)
 8105dba:	4293      	cmp	r3, r2
 8105dbc:	d036      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	4a25      	ldr	r2, [pc, #148]	@ (8105e58 <HAL_DMA_IRQHandler+0x6a4>)
 8105dc4:	4293      	cmp	r3, r2
 8105dc6:	d031      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	681b      	ldr	r3, [r3, #0]
 8105dcc:	4a23      	ldr	r2, [pc, #140]	@ (8105e5c <HAL_DMA_IRQHandler+0x6a8>)
 8105dce:	4293      	cmp	r3, r2
 8105dd0:	d02c      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	681b      	ldr	r3, [r3, #0]
 8105dd6:	4a22      	ldr	r2, [pc, #136]	@ (8105e60 <HAL_DMA_IRQHandler+0x6ac>)
 8105dd8:	4293      	cmp	r3, r2
 8105dda:	d027      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	681b      	ldr	r3, [r3, #0]
 8105de0:	4a20      	ldr	r2, [pc, #128]	@ (8105e64 <HAL_DMA_IRQHandler+0x6b0>)
 8105de2:	4293      	cmp	r3, r2
 8105de4:	d022      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	4a1f      	ldr	r2, [pc, #124]	@ (8105e68 <HAL_DMA_IRQHandler+0x6b4>)
 8105dec:	4293      	cmp	r3, r2
 8105dee:	d01d      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	4a1d      	ldr	r2, [pc, #116]	@ (8105e6c <HAL_DMA_IRQHandler+0x6b8>)
 8105df6:	4293      	cmp	r3, r2
 8105df8:	d018      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8105e70 <HAL_DMA_IRQHandler+0x6bc>)
 8105e00:	4293      	cmp	r3, r2
 8105e02:	d013      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	681b      	ldr	r3, [r3, #0]
 8105e08:	4a1a      	ldr	r2, [pc, #104]	@ (8105e74 <HAL_DMA_IRQHandler+0x6c0>)
 8105e0a:	4293      	cmp	r3, r2
 8105e0c:	d00e      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	4a19      	ldr	r2, [pc, #100]	@ (8105e78 <HAL_DMA_IRQHandler+0x6c4>)
 8105e14:	4293      	cmp	r3, r2
 8105e16:	d009      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	681b      	ldr	r3, [r3, #0]
 8105e1c:	4a17      	ldr	r2, [pc, #92]	@ (8105e7c <HAL_DMA_IRQHandler+0x6c8>)
 8105e1e:	4293      	cmp	r3, r2
 8105e20:	d004      	beq.n	8105e2c <HAL_DMA_IRQHandler+0x678>
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	4a16      	ldr	r2, [pc, #88]	@ (8105e80 <HAL_DMA_IRQHandler+0x6cc>)
 8105e28:	4293      	cmp	r3, r2
 8105e2a:	d12b      	bne.n	8105e84 <HAL_DMA_IRQHandler+0x6d0>
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	f003 0310 	and.w	r3, r3, #16
 8105e36:	2b00      	cmp	r3, #0
 8105e38:	bf14      	ite	ne
 8105e3a:	2301      	movne	r3, #1
 8105e3c:	2300      	moveq	r3, #0
 8105e3e:	b2db      	uxtb	r3, r3
 8105e40:	e02a      	b.n	8105e98 <HAL_DMA_IRQHandler+0x6e4>
 8105e42:	bf00      	nop
 8105e44:	40020010 	.word	0x40020010
 8105e48:	40020028 	.word	0x40020028
 8105e4c:	40020040 	.word	0x40020040
 8105e50:	40020058 	.word	0x40020058
 8105e54:	40020070 	.word	0x40020070
 8105e58:	40020088 	.word	0x40020088
 8105e5c:	400200a0 	.word	0x400200a0
 8105e60:	400200b8 	.word	0x400200b8
 8105e64:	40020410 	.word	0x40020410
 8105e68:	40020428 	.word	0x40020428
 8105e6c:	40020440 	.word	0x40020440
 8105e70:	40020458 	.word	0x40020458
 8105e74:	40020470 	.word	0x40020470
 8105e78:	40020488 	.word	0x40020488
 8105e7c:	400204a0 	.word	0x400204a0
 8105e80:	400204b8 	.word	0x400204b8
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	f003 0302 	and.w	r3, r3, #2
 8105e8e:	2b00      	cmp	r3, #0
 8105e90:	bf14      	ite	ne
 8105e92:	2301      	movne	r3, #1
 8105e94:	2300      	moveq	r3, #0
 8105e96:	b2db      	uxtb	r3, r3
 8105e98:	2b00      	cmp	r3, #0
 8105e9a:	f000 8087 	beq.w	8105fac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105e9e:	687b      	ldr	r3, [r7, #4]
 8105ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105ea2:	f003 031f 	and.w	r3, r3, #31
 8105ea6:	2220      	movs	r2, #32
 8105ea8:	409a      	lsls	r2, r3
 8105eaa:	6a3b      	ldr	r3, [r7, #32]
 8105eac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8105eb4:	b2db      	uxtb	r3, r3
 8105eb6:	2b04      	cmp	r3, #4
 8105eb8:	d139      	bne.n	8105f2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	681a      	ldr	r2, [r3, #0]
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	f022 0216 	bic.w	r2, r2, #22
 8105ec8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105eca:	687b      	ldr	r3, [r7, #4]
 8105ecc:	681b      	ldr	r3, [r3, #0]
 8105ece:	695a      	ldr	r2, [r3, #20]
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8105ed8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d103      	bne.n	8105eea <HAL_DMA_IRQHandler+0x736>
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105ee6:	2b00      	cmp	r3, #0
 8105ee8:	d007      	beq.n	8105efa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	681a      	ldr	r2, [r3, #0]
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	f022 0208 	bic.w	r2, r2, #8
 8105ef8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105efe:	f003 031f 	and.w	r3, r3, #31
 8105f02:	223f      	movs	r2, #63	@ 0x3f
 8105f04:	409a      	lsls	r2, r3
 8105f06:	6a3b      	ldr	r3, [r7, #32]
 8105f08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	2201      	movs	r2, #1
 8105f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	2200      	movs	r2, #0
 8105f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	f000 834a 	beq.w	81065b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f28:	6878      	ldr	r0, [r7, #4]
 8105f2a:	4798      	blx	r3
          }
          return;
 8105f2c:	e344      	b.n	81065b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	d018      	beq.n	8105f6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d108      	bne.n	8105f5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105f4e:	2b00      	cmp	r3, #0
 8105f50:	d02c      	beq.n	8105fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105f56:	6878      	ldr	r0, [r7, #4]
 8105f58:	4798      	blx	r3
 8105f5a:	e027      	b.n	8105fac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105f60:	2b00      	cmp	r3, #0
 8105f62:	d023      	beq.n	8105fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105f68:	6878      	ldr	r0, [r7, #4]
 8105f6a:	4798      	blx	r3
 8105f6c:	e01e      	b.n	8105fac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	681b      	ldr	r3, [r3, #0]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105f78:	2b00      	cmp	r3, #0
 8105f7a:	d10f      	bne.n	8105f9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	681a      	ldr	r2, [r3, #0]
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	681b      	ldr	r3, [r3, #0]
 8105f86:	f022 0210 	bic.w	r2, r2, #16
 8105f8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	2201      	movs	r2, #1
 8105f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	2200      	movs	r2, #0
 8105f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105fa0:	2b00      	cmp	r3, #0
 8105fa2:	d003      	beq.n	8105fac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105fa8:	6878      	ldr	r0, [r7, #4]
 8105faa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105fb0:	2b00      	cmp	r3, #0
 8105fb2:	f000 8306 	beq.w	81065c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105fba:	f003 0301 	and.w	r3, r3, #1
 8105fbe:	2b00      	cmp	r3, #0
 8105fc0:	f000 8088 	beq.w	81060d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	2204      	movs	r2, #4
 8105fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	4a7a      	ldr	r2, [pc, #488]	@ (81061bc <HAL_DMA_IRQHandler+0xa08>)
 8105fd2:	4293      	cmp	r3, r2
 8105fd4:	d04a      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	4a79      	ldr	r2, [pc, #484]	@ (81061c0 <HAL_DMA_IRQHandler+0xa0c>)
 8105fdc:	4293      	cmp	r3, r2
 8105fde:	d045      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	681b      	ldr	r3, [r3, #0]
 8105fe4:	4a77      	ldr	r2, [pc, #476]	@ (81061c4 <HAL_DMA_IRQHandler+0xa10>)
 8105fe6:	4293      	cmp	r3, r2
 8105fe8:	d040      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	681b      	ldr	r3, [r3, #0]
 8105fee:	4a76      	ldr	r2, [pc, #472]	@ (81061c8 <HAL_DMA_IRQHandler+0xa14>)
 8105ff0:	4293      	cmp	r3, r2
 8105ff2:	d03b      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	4a74      	ldr	r2, [pc, #464]	@ (81061cc <HAL_DMA_IRQHandler+0xa18>)
 8105ffa:	4293      	cmp	r3, r2
 8105ffc:	d036      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	681b      	ldr	r3, [r3, #0]
 8106002:	4a73      	ldr	r2, [pc, #460]	@ (81061d0 <HAL_DMA_IRQHandler+0xa1c>)
 8106004:	4293      	cmp	r3, r2
 8106006:	d031      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	4a71      	ldr	r2, [pc, #452]	@ (81061d4 <HAL_DMA_IRQHandler+0xa20>)
 810600e:	4293      	cmp	r3, r2
 8106010:	d02c      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	4a70      	ldr	r2, [pc, #448]	@ (81061d8 <HAL_DMA_IRQHandler+0xa24>)
 8106018:	4293      	cmp	r3, r2
 810601a:	d027      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	4a6e      	ldr	r2, [pc, #440]	@ (81061dc <HAL_DMA_IRQHandler+0xa28>)
 8106022:	4293      	cmp	r3, r2
 8106024:	d022      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	4a6d      	ldr	r2, [pc, #436]	@ (81061e0 <HAL_DMA_IRQHandler+0xa2c>)
 810602c:	4293      	cmp	r3, r2
 810602e:	d01d      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	681b      	ldr	r3, [r3, #0]
 8106034:	4a6b      	ldr	r2, [pc, #428]	@ (81061e4 <HAL_DMA_IRQHandler+0xa30>)
 8106036:	4293      	cmp	r3, r2
 8106038:	d018      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	4a6a      	ldr	r2, [pc, #424]	@ (81061e8 <HAL_DMA_IRQHandler+0xa34>)
 8106040:	4293      	cmp	r3, r2
 8106042:	d013      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	4a68      	ldr	r2, [pc, #416]	@ (81061ec <HAL_DMA_IRQHandler+0xa38>)
 810604a:	4293      	cmp	r3, r2
 810604c:	d00e      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	4a67      	ldr	r2, [pc, #412]	@ (81061f0 <HAL_DMA_IRQHandler+0xa3c>)
 8106054:	4293      	cmp	r3, r2
 8106056:	d009      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	4a65      	ldr	r2, [pc, #404]	@ (81061f4 <HAL_DMA_IRQHandler+0xa40>)
 810605e:	4293      	cmp	r3, r2
 8106060:	d004      	beq.n	810606c <HAL_DMA_IRQHandler+0x8b8>
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	4a64      	ldr	r2, [pc, #400]	@ (81061f8 <HAL_DMA_IRQHandler+0xa44>)
 8106068:	4293      	cmp	r3, r2
 810606a:	d108      	bne.n	810607e <HAL_DMA_IRQHandler+0x8ca>
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	681a      	ldr	r2, [r3, #0]
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	f022 0201 	bic.w	r2, r2, #1
 810607a:	601a      	str	r2, [r3, #0]
 810607c:	e007      	b.n	810608e <HAL_DMA_IRQHandler+0x8da>
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	681b      	ldr	r3, [r3, #0]
 8106082:	681a      	ldr	r2, [r3, #0]
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	681b      	ldr	r3, [r3, #0]
 8106088:	f022 0201 	bic.w	r2, r2, #1
 810608c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810608e:	68fb      	ldr	r3, [r7, #12]
 8106090:	3301      	adds	r3, #1
 8106092:	60fb      	str	r3, [r7, #12]
 8106094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106096:	429a      	cmp	r2, r3
 8106098:	d307      	bcc.n	81060aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	f003 0301 	and.w	r3, r3, #1
 81060a4:	2b00      	cmp	r3, #0
 81060a6:	d1f2      	bne.n	810608e <HAL_DMA_IRQHandler+0x8da>
 81060a8:	e000      	b.n	81060ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 81060aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	f003 0301 	and.w	r3, r3, #1
 81060b6:	2b00      	cmp	r3, #0
 81060b8:	d004      	beq.n	81060c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	2203      	movs	r2, #3
 81060be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 81060c2:	e003      	b.n	81060cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	2201      	movs	r2, #1
 81060c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	2200      	movs	r2, #0
 81060d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81060d8:	2b00      	cmp	r3, #0
 81060da:	f000 8272 	beq.w	81065c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81060e2:	6878      	ldr	r0, [r7, #4]
 81060e4:	4798      	blx	r3
 81060e6:	e26c      	b.n	81065c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	681b      	ldr	r3, [r3, #0]
 81060ec:	4a43      	ldr	r2, [pc, #268]	@ (81061fc <HAL_DMA_IRQHandler+0xa48>)
 81060ee:	4293      	cmp	r3, r2
 81060f0:	d022      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	4a42      	ldr	r2, [pc, #264]	@ (8106200 <HAL_DMA_IRQHandler+0xa4c>)
 81060f8:	4293      	cmp	r3, r2
 81060fa:	d01d      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	4a40      	ldr	r2, [pc, #256]	@ (8106204 <HAL_DMA_IRQHandler+0xa50>)
 8106102:	4293      	cmp	r3, r2
 8106104:	d018      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	4a3f      	ldr	r2, [pc, #252]	@ (8106208 <HAL_DMA_IRQHandler+0xa54>)
 810610c:	4293      	cmp	r3, r2
 810610e:	d013      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	681b      	ldr	r3, [r3, #0]
 8106114:	4a3d      	ldr	r2, [pc, #244]	@ (810620c <HAL_DMA_IRQHandler+0xa58>)
 8106116:	4293      	cmp	r3, r2
 8106118:	d00e      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	4a3c      	ldr	r2, [pc, #240]	@ (8106210 <HAL_DMA_IRQHandler+0xa5c>)
 8106120:	4293      	cmp	r3, r2
 8106122:	d009      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	4a3a      	ldr	r2, [pc, #232]	@ (8106214 <HAL_DMA_IRQHandler+0xa60>)
 810612a:	4293      	cmp	r3, r2
 810612c:	d004      	beq.n	8106138 <HAL_DMA_IRQHandler+0x984>
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	681b      	ldr	r3, [r3, #0]
 8106132:	4a39      	ldr	r2, [pc, #228]	@ (8106218 <HAL_DMA_IRQHandler+0xa64>)
 8106134:	4293      	cmp	r3, r2
 8106136:	d101      	bne.n	810613c <HAL_DMA_IRQHandler+0x988>
 8106138:	2301      	movs	r3, #1
 810613a:	e000      	b.n	810613e <HAL_DMA_IRQHandler+0x98a>
 810613c:	2300      	movs	r3, #0
 810613e:	2b00      	cmp	r3, #0
 8106140:	f000 823f 	beq.w	81065c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	681b      	ldr	r3, [r3, #0]
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106150:	f003 031f 	and.w	r3, r3, #31
 8106154:	2204      	movs	r2, #4
 8106156:	409a      	lsls	r2, r3
 8106158:	697b      	ldr	r3, [r7, #20]
 810615a:	4013      	ands	r3, r2
 810615c:	2b00      	cmp	r3, #0
 810615e:	f000 80cd 	beq.w	81062fc <HAL_DMA_IRQHandler+0xb48>
 8106162:	693b      	ldr	r3, [r7, #16]
 8106164:	f003 0304 	and.w	r3, r3, #4
 8106168:	2b00      	cmp	r3, #0
 810616a:	f000 80c7 	beq.w	81062fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106172:	f003 031f 	and.w	r3, r3, #31
 8106176:	2204      	movs	r2, #4
 8106178:	409a      	lsls	r2, r3
 810617a:	69fb      	ldr	r3, [r7, #28]
 810617c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810617e:	693b      	ldr	r3, [r7, #16]
 8106180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106184:	2b00      	cmp	r3, #0
 8106186:	d049      	beq.n	810621c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106188:	693b      	ldr	r3, [r7, #16]
 810618a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810618e:	2b00      	cmp	r3, #0
 8106190:	d109      	bne.n	81061a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106196:	2b00      	cmp	r3, #0
 8106198:	f000 8210 	beq.w	81065bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81061a0:	6878      	ldr	r0, [r7, #4]
 81061a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81061a4:	e20a      	b.n	81065bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81061aa:	2b00      	cmp	r3, #0
 81061ac:	f000 8206 	beq.w	81065bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81061b4:	6878      	ldr	r0, [r7, #4]
 81061b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81061b8:	e200      	b.n	81065bc <HAL_DMA_IRQHandler+0xe08>
 81061ba:	bf00      	nop
 81061bc:	40020010 	.word	0x40020010
 81061c0:	40020028 	.word	0x40020028
 81061c4:	40020040 	.word	0x40020040
 81061c8:	40020058 	.word	0x40020058
 81061cc:	40020070 	.word	0x40020070
 81061d0:	40020088 	.word	0x40020088
 81061d4:	400200a0 	.word	0x400200a0
 81061d8:	400200b8 	.word	0x400200b8
 81061dc:	40020410 	.word	0x40020410
 81061e0:	40020428 	.word	0x40020428
 81061e4:	40020440 	.word	0x40020440
 81061e8:	40020458 	.word	0x40020458
 81061ec:	40020470 	.word	0x40020470
 81061f0:	40020488 	.word	0x40020488
 81061f4:	400204a0 	.word	0x400204a0
 81061f8:	400204b8 	.word	0x400204b8
 81061fc:	58025408 	.word	0x58025408
 8106200:	5802541c 	.word	0x5802541c
 8106204:	58025430 	.word	0x58025430
 8106208:	58025444 	.word	0x58025444
 810620c:	58025458 	.word	0x58025458
 8106210:	5802546c 	.word	0x5802546c
 8106214:	58025480 	.word	0x58025480
 8106218:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810621c:	693b      	ldr	r3, [r7, #16]
 810621e:	f003 0320 	and.w	r3, r3, #32
 8106222:	2b00      	cmp	r3, #0
 8106224:	d160      	bne.n	81062e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	4a7f      	ldr	r2, [pc, #508]	@ (8106428 <HAL_DMA_IRQHandler+0xc74>)
 810622c:	4293      	cmp	r3, r2
 810622e:	d04a      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	4a7d      	ldr	r2, [pc, #500]	@ (810642c <HAL_DMA_IRQHandler+0xc78>)
 8106236:	4293      	cmp	r3, r2
 8106238:	d045      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 810623a:	687b      	ldr	r3, [r7, #4]
 810623c:	681b      	ldr	r3, [r3, #0]
 810623e:	4a7c      	ldr	r2, [pc, #496]	@ (8106430 <HAL_DMA_IRQHandler+0xc7c>)
 8106240:	4293      	cmp	r3, r2
 8106242:	d040      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	681b      	ldr	r3, [r3, #0]
 8106248:	4a7a      	ldr	r2, [pc, #488]	@ (8106434 <HAL_DMA_IRQHandler+0xc80>)
 810624a:	4293      	cmp	r3, r2
 810624c:	d03b      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 810624e:	687b      	ldr	r3, [r7, #4]
 8106250:	681b      	ldr	r3, [r3, #0]
 8106252:	4a79      	ldr	r2, [pc, #484]	@ (8106438 <HAL_DMA_IRQHandler+0xc84>)
 8106254:	4293      	cmp	r3, r2
 8106256:	d036      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	4a77      	ldr	r2, [pc, #476]	@ (810643c <HAL_DMA_IRQHandler+0xc88>)
 810625e:	4293      	cmp	r3, r2
 8106260:	d031      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	4a76      	ldr	r2, [pc, #472]	@ (8106440 <HAL_DMA_IRQHandler+0xc8c>)
 8106268:	4293      	cmp	r3, r2
 810626a:	d02c      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	4a74      	ldr	r2, [pc, #464]	@ (8106444 <HAL_DMA_IRQHandler+0xc90>)
 8106272:	4293      	cmp	r3, r2
 8106274:	d027      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	681b      	ldr	r3, [r3, #0]
 810627a:	4a73      	ldr	r2, [pc, #460]	@ (8106448 <HAL_DMA_IRQHandler+0xc94>)
 810627c:	4293      	cmp	r3, r2
 810627e:	d022      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	4a71      	ldr	r2, [pc, #452]	@ (810644c <HAL_DMA_IRQHandler+0xc98>)
 8106286:	4293      	cmp	r3, r2
 8106288:	d01d      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	681b      	ldr	r3, [r3, #0]
 810628e:	4a70      	ldr	r2, [pc, #448]	@ (8106450 <HAL_DMA_IRQHandler+0xc9c>)
 8106290:	4293      	cmp	r3, r2
 8106292:	d018      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	681b      	ldr	r3, [r3, #0]
 8106298:	4a6e      	ldr	r2, [pc, #440]	@ (8106454 <HAL_DMA_IRQHandler+0xca0>)
 810629a:	4293      	cmp	r3, r2
 810629c:	d013      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	681b      	ldr	r3, [r3, #0]
 81062a2:	4a6d      	ldr	r2, [pc, #436]	@ (8106458 <HAL_DMA_IRQHandler+0xca4>)
 81062a4:	4293      	cmp	r3, r2
 81062a6:	d00e      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	681b      	ldr	r3, [r3, #0]
 81062ac:	4a6b      	ldr	r2, [pc, #428]	@ (810645c <HAL_DMA_IRQHandler+0xca8>)
 81062ae:	4293      	cmp	r3, r2
 81062b0:	d009      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	681b      	ldr	r3, [r3, #0]
 81062b6:	4a6a      	ldr	r2, [pc, #424]	@ (8106460 <HAL_DMA_IRQHandler+0xcac>)
 81062b8:	4293      	cmp	r3, r2
 81062ba:	d004      	beq.n	81062c6 <HAL_DMA_IRQHandler+0xb12>
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	681b      	ldr	r3, [r3, #0]
 81062c0:	4a68      	ldr	r2, [pc, #416]	@ (8106464 <HAL_DMA_IRQHandler+0xcb0>)
 81062c2:	4293      	cmp	r3, r2
 81062c4:	d108      	bne.n	81062d8 <HAL_DMA_IRQHandler+0xb24>
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	681b      	ldr	r3, [r3, #0]
 81062ca:	681a      	ldr	r2, [r3, #0]
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	681b      	ldr	r3, [r3, #0]
 81062d0:	f022 0208 	bic.w	r2, r2, #8
 81062d4:	601a      	str	r2, [r3, #0]
 81062d6:	e007      	b.n	81062e8 <HAL_DMA_IRQHandler+0xb34>
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	681b      	ldr	r3, [r3, #0]
 81062dc:	681a      	ldr	r2, [r3, #0]
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	f022 0204 	bic.w	r2, r2, #4
 81062e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81062ec:	2b00      	cmp	r3, #0
 81062ee:	f000 8165 	beq.w	81065bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81062f6:	6878      	ldr	r0, [r7, #4]
 81062f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81062fa:	e15f      	b.n	81065bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106300:	f003 031f 	and.w	r3, r3, #31
 8106304:	2202      	movs	r2, #2
 8106306:	409a      	lsls	r2, r3
 8106308:	697b      	ldr	r3, [r7, #20]
 810630a:	4013      	ands	r3, r2
 810630c:	2b00      	cmp	r3, #0
 810630e:	f000 80c5 	beq.w	810649c <HAL_DMA_IRQHandler+0xce8>
 8106312:	693b      	ldr	r3, [r7, #16]
 8106314:	f003 0302 	and.w	r3, r3, #2
 8106318:	2b00      	cmp	r3, #0
 810631a:	f000 80bf 	beq.w	810649c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106322:	f003 031f 	and.w	r3, r3, #31
 8106326:	2202      	movs	r2, #2
 8106328:	409a      	lsls	r2, r3
 810632a:	69fb      	ldr	r3, [r7, #28]
 810632c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810632e:	693b      	ldr	r3, [r7, #16]
 8106330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106334:	2b00      	cmp	r3, #0
 8106336:	d018      	beq.n	810636a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106338:	693b      	ldr	r3, [r7, #16]
 810633a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810633e:	2b00      	cmp	r3, #0
 8106340:	d109      	bne.n	8106356 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106346:	2b00      	cmp	r3, #0
 8106348:	f000 813a 	beq.w	81065c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 810634c:	687b      	ldr	r3, [r7, #4]
 810634e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106350:	6878      	ldr	r0, [r7, #4]
 8106352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106354:	e134      	b.n	81065c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810635a:	2b00      	cmp	r3, #0
 810635c:	f000 8130 	beq.w	81065c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106364:	6878      	ldr	r0, [r7, #4]
 8106366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106368:	e12a      	b.n	81065c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810636a:	693b      	ldr	r3, [r7, #16]
 810636c:	f003 0320 	and.w	r3, r3, #32
 8106370:	2b00      	cmp	r3, #0
 8106372:	f040 8089 	bne.w	8106488 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	4a2b      	ldr	r2, [pc, #172]	@ (8106428 <HAL_DMA_IRQHandler+0xc74>)
 810637c:	4293      	cmp	r3, r2
 810637e:	d04a      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	4a29      	ldr	r2, [pc, #164]	@ (810642c <HAL_DMA_IRQHandler+0xc78>)
 8106386:	4293      	cmp	r3, r2
 8106388:	d045      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	4a28      	ldr	r2, [pc, #160]	@ (8106430 <HAL_DMA_IRQHandler+0xc7c>)
 8106390:	4293      	cmp	r3, r2
 8106392:	d040      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	4a26      	ldr	r2, [pc, #152]	@ (8106434 <HAL_DMA_IRQHandler+0xc80>)
 810639a:	4293      	cmp	r3, r2
 810639c:	d03b      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	681b      	ldr	r3, [r3, #0]
 81063a2:	4a25      	ldr	r2, [pc, #148]	@ (8106438 <HAL_DMA_IRQHandler+0xc84>)
 81063a4:	4293      	cmp	r3, r2
 81063a6:	d036      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063a8:	687b      	ldr	r3, [r7, #4]
 81063aa:	681b      	ldr	r3, [r3, #0]
 81063ac:	4a23      	ldr	r2, [pc, #140]	@ (810643c <HAL_DMA_IRQHandler+0xc88>)
 81063ae:	4293      	cmp	r3, r2
 81063b0:	d031      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	681b      	ldr	r3, [r3, #0]
 81063b6:	4a22      	ldr	r2, [pc, #136]	@ (8106440 <HAL_DMA_IRQHandler+0xc8c>)
 81063b8:	4293      	cmp	r3, r2
 81063ba:	d02c      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	4a20      	ldr	r2, [pc, #128]	@ (8106444 <HAL_DMA_IRQHandler+0xc90>)
 81063c2:	4293      	cmp	r3, r2
 81063c4:	d027      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	4a1f      	ldr	r2, [pc, #124]	@ (8106448 <HAL_DMA_IRQHandler+0xc94>)
 81063cc:	4293      	cmp	r3, r2
 81063ce:	d022      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	4a1d      	ldr	r2, [pc, #116]	@ (810644c <HAL_DMA_IRQHandler+0xc98>)
 81063d6:	4293      	cmp	r3, r2
 81063d8:	d01d      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	4a1c      	ldr	r2, [pc, #112]	@ (8106450 <HAL_DMA_IRQHandler+0xc9c>)
 81063e0:	4293      	cmp	r3, r2
 81063e2:	d018      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	4a1a      	ldr	r2, [pc, #104]	@ (8106454 <HAL_DMA_IRQHandler+0xca0>)
 81063ea:	4293      	cmp	r3, r2
 81063ec:	d013      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	4a19      	ldr	r2, [pc, #100]	@ (8106458 <HAL_DMA_IRQHandler+0xca4>)
 81063f4:	4293      	cmp	r3, r2
 81063f6:	d00e      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	681b      	ldr	r3, [r3, #0]
 81063fc:	4a17      	ldr	r2, [pc, #92]	@ (810645c <HAL_DMA_IRQHandler+0xca8>)
 81063fe:	4293      	cmp	r3, r2
 8106400:	d009      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	4a16      	ldr	r2, [pc, #88]	@ (8106460 <HAL_DMA_IRQHandler+0xcac>)
 8106408:	4293      	cmp	r3, r2
 810640a:	d004      	beq.n	8106416 <HAL_DMA_IRQHandler+0xc62>
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	4a14      	ldr	r2, [pc, #80]	@ (8106464 <HAL_DMA_IRQHandler+0xcb0>)
 8106412:	4293      	cmp	r3, r2
 8106414:	d128      	bne.n	8106468 <HAL_DMA_IRQHandler+0xcb4>
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	681b      	ldr	r3, [r3, #0]
 810641a:	681a      	ldr	r2, [r3, #0]
 810641c:	687b      	ldr	r3, [r7, #4]
 810641e:	681b      	ldr	r3, [r3, #0]
 8106420:	f022 0214 	bic.w	r2, r2, #20
 8106424:	601a      	str	r2, [r3, #0]
 8106426:	e027      	b.n	8106478 <HAL_DMA_IRQHandler+0xcc4>
 8106428:	40020010 	.word	0x40020010
 810642c:	40020028 	.word	0x40020028
 8106430:	40020040 	.word	0x40020040
 8106434:	40020058 	.word	0x40020058
 8106438:	40020070 	.word	0x40020070
 810643c:	40020088 	.word	0x40020088
 8106440:	400200a0 	.word	0x400200a0
 8106444:	400200b8 	.word	0x400200b8
 8106448:	40020410 	.word	0x40020410
 810644c:	40020428 	.word	0x40020428
 8106450:	40020440 	.word	0x40020440
 8106454:	40020458 	.word	0x40020458
 8106458:	40020470 	.word	0x40020470
 810645c:	40020488 	.word	0x40020488
 8106460:	400204a0 	.word	0x400204a0
 8106464:	400204b8 	.word	0x400204b8
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	681b      	ldr	r3, [r3, #0]
 810646c:	681a      	ldr	r2, [r3, #0]
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	f022 020a 	bic.w	r2, r2, #10
 8106476:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	2201      	movs	r2, #1
 810647c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	2200      	movs	r2, #0
 8106484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810648c:	2b00      	cmp	r3, #0
 810648e:	f000 8097 	beq.w	81065c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106496:	6878      	ldr	r0, [r7, #4]
 8106498:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810649a:	e091      	b.n	81065c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81064a0:	f003 031f 	and.w	r3, r3, #31
 81064a4:	2208      	movs	r2, #8
 81064a6:	409a      	lsls	r2, r3
 81064a8:	697b      	ldr	r3, [r7, #20]
 81064aa:	4013      	ands	r3, r2
 81064ac:	2b00      	cmp	r3, #0
 81064ae:	f000 8088 	beq.w	81065c2 <HAL_DMA_IRQHandler+0xe0e>
 81064b2:	693b      	ldr	r3, [r7, #16]
 81064b4:	f003 0308 	and.w	r3, r3, #8
 81064b8:	2b00      	cmp	r3, #0
 81064ba:	f000 8082 	beq.w	81065c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	4a41      	ldr	r2, [pc, #260]	@ (81065c8 <HAL_DMA_IRQHandler+0xe14>)
 81064c4:	4293      	cmp	r3, r2
 81064c6:	d04a      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	4a3f      	ldr	r2, [pc, #252]	@ (81065cc <HAL_DMA_IRQHandler+0xe18>)
 81064ce:	4293      	cmp	r3, r2
 81064d0:	d045      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	4a3e      	ldr	r2, [pc, #248]	@ (81065d0 <HAL_DMA_IRQHandler+0xe1c>)
 81064d8:	4293      	cmp	r3, r2
 81064da:	d040      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	4a3c      	ldr	r2, [pc, #240]	@ (81065d4 <HAL_DMA_IRQHandler+0xe20>)
 81064e2:	4293      	cmp	r3, r2
 81064e4:	d03b      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	4a3b      	ldr	r2, [pc, #236]	@ (81065d8 <HAL_DMA_IRQHandler+0xe24>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d036      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	4a39      	ldr	r2, [pc, #228]	@ (81065dc <HAL_DMA_IRQHandler+0xe28>)
 81064f6:	4293      	cmp	r3, r2
 81064f8:	d031      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	4a38      	ldr	r2, [pc, #224]	@ (81065e0 <HAL_DMA_IRQHandler+0xe2c>)
 8106500:	4293      	cmp	r3, r2
 8106502:	d02c      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	4a36      	ldr	r2, [pc, #216]	@ (81065e4 <HAL_DMA_IRQHandler+0xe30>)
 810650a:	4293      	cmp	r3, r2
 810650c:	d027      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 810650e:	687b      	ldr	r3, [r7, #4]
 8106510:	681b      	ldr	r3, [r3, #0]
 8106512:	4a35      	ldr	r2, [pc, #212]	@ (81065e8 <HAL_DMA_IRQHandler+0xe34>)
 8106514:	4293      	cmp	r3, r2
 8106516:	d022      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	681b      	ldr	r3, [r3, #0]
 810651c:	4a33      	ldr	r2, [pc, #204]	@ (81065ec <HAL_DMA_IRQHandler+0xe38>)
 810651e:	4293      	cmp	r3, r2
 8106520:	d01d      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	681b      	ldr	r3, [r3, #0]
 8106526:	4a32      	ldr	r2, [pc, #200]	@ (81065f0 <HAL_DMA_IRQHandler+0xe3c>)
 8106528:	4293      	cmp	r3, r2
 810652a:	d018      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	681b      	ldr	r3, [r3, #0]
 8106530:	4a30      	ldr	r2, [pc, #192]	@ (81065f4 <HAL_DMA_IRQHandler+0xe40>)
 8106532:	4293      	cmp	r3, r2
 8106534:	d013      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 8106536:	687b      	ldr	r3, [r7, #4]
 8106538:	681b      	ldr	r3, [r3, #0]
 810653a:	4a2f      	ldr	r2, [pc, #188]	@ (81065f8 <HAL_DMA_IRQHandler+0xe44>)
 810653c:	4293      	cmp	r3, r2
 810653e:	d00e      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	4a2d      	ldr	r2, [pc, #180]	@ (81065fc <HAL_DMA_IRQHandler+0xe48>)
 8106546:	4293      	cmp	r3, r2
 8106548:	d009      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	4a2c      	ldr	r2, [pc, #176]	@ (8106600 <HAL_DMA_IRQHandler+0xe4c>)
 8106550:	4293      	cmp	r3, r2
 8106552:	d004      	beq.n	810655e <HAL_DMA_IRQHandler+0xdaa>
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	4a2a      	ldr	r2, [pc, #168]	@ (8106604 <HAL_DMA_IRQHandler+0xe50>)
 810655a:	4293      	cmp	r3, r2
 810655c:	d108      	bne.n	8106570 <HAL_DMA_IRQHandler+0xdbc>
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	681a      	ldr	r2, [r3, #0]
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	f022 021c 	bic.w	r2, r2, #28
 810656c:	601a      	str	r2, [r3, #0]
 810656e:	e007      	b.n	8106580 <HAL_DMA_IRQHandler+0xdcc>
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	681b      	ldr	r3, [r3, #0]
 8106574:	681a      	ldr	r2, [r3, #0]
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	f022 020e 	bic.w	r2, r2, #14
 810657e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106584:	f003 031f 	and.w	r3, r3, #31
 8106588:	2201      	movs	r2, #1
 810658a:	409a      	lsls	r2, r3
 810658c:	69fb      	ldr	r3, [r7, #28]
 810658e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8106590:	687b      	ldr	r3, [r7, #4]
 8106592:	2201      	movs	r2, #1
 8106594:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	2201      	movs	r2, #1
 810659a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	2200      	movs	r2, #0
 81065a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d009      	beq.n	81065c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81065b2:	6878      	ldr	r0, [r7, #4]
 81065b4:	4798      	blx	r3
 81065b6:	e004      	b.n	81065c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81065b8:	bf00      	nop
 81065ba:	e002      	b.n	81065c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81065bc:	bf00      	nop
 81065be:	e000      	b.n	81065c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81065c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81065c2:	3728      	adds	r7, #40	@ 0x28
 81065c4:	46bd      	mov	sp, r7
 81065c6:	bd80      	pop	{r7, pc}
 81065c8:	40020010 	.word	0x40020010
 81065cc:	40020028 	.word	0x40020028
 81065d0:	40020040 	.word	0x40020040
 81065d4:	40020058 	.word	0x40020058
 81065d8:	40020070 	.word	0x40020070
 81065dc:	40020088 	.word	0x40020088
 81065e0:	400200a0 	.word	0x400200a0
 81065e4:	400200b8 	.word	0x400200b8
 81065e8:	40020410 	.word	0x40020410
 81065ec:	40020428 	.word	0x40020428
 81065f0:	40020440 	.word	0x40020440
 81065f4:	40020458 	.word	0x40020458
 81065f8:	40020470 	.word	0x40020470
 81065fc:	40020488 	.word	0x40020488
 8106600:	400204a0 	.word	0x400204a0
 8106604:	400204b8 	.word	0x400204b8

08106608 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8106608:	b480      	push	{r7}
 810660a:	b087      	sub	sp, #28
 810660c:	af00      	add	r7, sp, #0
 810660e:	60f8      	str	r0, [r7, #12]
 8106610:	60b9      	str	r1, [r7, #8]
 8106612:	607a      	str	r2, [r7, #4]
 8106614:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8106616:	68fb      	ldr	r3, [r7, #12]
 8106618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810661a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810661c:	68fb      	ldr	r3, [r7, #12]
 810661e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106620:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106622:	68fb      	ldr	r3, [r7, #12]
 8106624:	681b      	ldr	r3, [r3, #0]
 8106626:	4a7f      	ldr	r2, [pc, #508]	@ (8106824 <DMA_SetConfig+0x21c>)
 8106628:	4293      	cmp	r3, r2
 810662a:	d072      	beq.n	8106712 <DMA_SetConfig+0x10a>
 810662c:	68fb      	ldr	r3, [r7, #12]
 810662e:	681b      	ldr	r3, [r3, #0]
 8106630:	4a7d      	ldr	r2, [pc, #500]	@ (8106828 <DMA_SetConfig+0x220>)
 8106632:	4293      	cmp	r3, r2
 8106634:	d06d      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106636:	68fb      	ldr	r3, [r7, #12]
 8106638:	681b      	ldr	r3, [r3, #0]
 810663a:	4a7c      	ldr	r2, [pc, #496]	@ (810682c <DMA_SetConfig+0x224>)
 810663c:	4293      	cmp	r3, r2
 810663e:	d068      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106640:	68fb      	ldr	r3, [r7, #12]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	4a7a      	ldr	r2, [pc, #488]	@ (8106830 <DMA_SetConfig+0x228>)
 8106646:	4293      	cmp	r3, r2
 8106648:	d063      	beq.n	8106712 <DMA_SetConfig+0x10a>
 810664a:	68fb      	ldr	r3, [r7, #12]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	4a79      	ldr	r2, [pc, #484]	@ (8106834 <DMA_SetConfig+0x22c>)
 8106650:	4293      	cmp	r3, r2
 8106652:	d05e      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106654:	68fb      	ldr	r3, [r7, #12]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	4a77      	ldr	r2, [pc, #476]	@ (8106838 <DMA_SetConfig+0x230>)
 810665a:	4293      	cmp	r3, r2
 810665c:	d059      	beq.n	8106712 <DMA_SetConfig+0x10a>
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	4a76      	ldr	r2, [pc, #472]	@ (810683c <DMA_SetConfig+0x234>)
 8106664:	4293      	cmp	r3, r2
 8106666:	d054      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106668:	68fb      	ldr	r3, [r7, #12]
 810666a:	681b      	ldr	r3, [r3, #0]
 810666c:	4a74      	ldr	r2, [pc, #464]	@ (8106840 <DMA_SetConfig+0x238>)
 810666e:	4293      	cmp	r3, r2
 8106670:	d04f      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106672:	68fb      	ldr	r3, [r7, #12]
 8106674:	681b      	ldr	r3, [r3, #0]
 8106676:	4a73      	ldr	r2, [pc, #460]	@ (8106844 <DMA_SetConfig+0x23c>)
 8106678:	4293      	cmp	r3, r2
 810667a:	d04a      	beq.n	8106712 <DMA_SetConfig+0x10a>
 810667c:	68fb      	ldr	r3, [r7, #12]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	4a71      	ldr	r2, [pc, #452]	@ (8106848 <DMA_SetConfig+0x240>)
 8106682:	4293      	cmp	r3, r2
 8106684:	d045      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106686:	68fb      	ldr	r3, [r7, #12]
 8106688:	681b      	ldr	r3, [r3, #0]
 810668a:	4a70      	ldr	r2, [pc, #448]	@ (810684c <DMA_SetConfig+0x244>)
 810668c:	4293      	cmp	r3, r2
 810668e:	d040      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106690:	68fb      	ldr	r3, [r7, #12]
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	4a6e      	ldr	r2, [pc, #440]	@ (8106850 <DMA_SetConfig+0x248>)
 8106696:	4293      	cmp	r3, r2
 8106698:	d03b      	beq.n	8106712 <DMA_SetConfig+0x10a>
 810669a:	68fb      	ldr	r3, [r7, #12]
 810669c:	681b      	ldr	r3, [r3, #0]
 810669e:	4a6d      	ldr	r2, [pc, #436]	@ (8106854 <DMA_SetConfig+0x24c>)
 81066a0:	4293      	cmp	r3, r2
 81066a2:	d036      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066a4:	68fb      	ldr	r3, [r7, #12]
 81066a6:	681b      	ldr	r3, [r3, #0]
 81066a8:	4a6b      	ldr	r2, [pc, #428]	@ (8106858 <DMA_SetConfig+0x250>)
 81066aa:	4293      	cmp	r3, r2
 81066ac:	d031      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066ae:	68fb      	ldr	r3, [r7, #12]
 81066b0:	681b      	ldr	r3, [r3, #0]
 81066b2:	4a6a      	ldr	r2, [pc, #424]	@ (810685c <DMA_SetConfig+0x254>)
 81066b4:	4293      	cmp	r3, r2
 81066b6:	d02c      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066b8:	68fb      	ldr	r3, [r7, #12]
 81066ba:	681b      	ldr	r3, [r3, #0]
 81066bc:	4a68      	ldr	r2, [pc, #416]	@ (8106860 <DMA_SetConfig+0x258>)
 81066be:	4293      	cmp	r3, r2
 81066c0:	d027      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066c2:	68fb      	ldr	r3, [r7, #12]
 81066c4:	681b      	ldr	r3, [r3, #0]
 81066c6:	4a67      	ldr	r2, [pc, #412]	@ (8106864 <DMA_SetConfig+0x25c>)
 81066c8:	4293      	cmp	r3, r2
 81066ca:	d022      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066cc:	68fb      	ldr	r3, [r7, #12]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	4a65      	ldr	r2, [pc, #404]	@ (8106868 <DMA_SetConfig+0x260>)
 81066d2:	4293      	cmp	r3, r2
 81066d4:	d01d      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066d6:	68fb      	ldr	r3, [r7, #12]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	4a64      	ldr	r2, [pc, #400]	@ (810686c <DMA_SetConfig+0x264>)
 81066dc:	4293      	cmp	r3, r2
 81066de:	d018      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066e0:	68fb      	ldr	r3, [r7, #12]
 81066e2:	681b      	ldr	r3, [r3, #0]
 81066e4:	4a62      	ldr	r2, [pc, #392]	@ (8106870 <DMA_SetConfig+0x268>)
 81066e6:	4293      	cmp	r3, r2
 81066e8:	d013      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066ea:	68fb      	ldr	r3, [r7, #12]
 81066ec:	681b      	ldr	r3, [r3, #0]
 81066ee:	4a61      	ldr	r2, [pc, #388]	@ (8106874 <DMA_SetConfig+0x26c>)
 81066f0:	4293      	cmp	r3, r2
 81066f2:	d00e      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066f4:	68fb      	ldr	r3, [r7, #12]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	4a5f      	ldr	r2, [pc, #380]	@ (8106878 <DMA_SetConfig+0x270>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	d009      	beq.n	8106712 <DMA_SetConfig+0x10a>
 81066fe:	68fb      	ldr	r3, [r7, #12]
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	4a5e      	ldr	r2, [pc, #376]	@ (810687c <DMA_SetConfig+0x274>)
 8106704:	4293      	cmp	r3, r2
 8106706:	d004      	beq.n	8106712 <DMA_SetConfig+0x10a>
 8106708:	68fb      	ldr	r3, [r7, #12]
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	4a5c      	ldr	r2, [pc, #368]	@ (8106880 <DMA_SetConfig+0x278>)
 810670e:	4293      	cmp	r3, r2
 8106710:	d101      	bne.n	8106716 <DMA_SetConfig+0x10e>
 8106712:	2301      	movs	r3, #1
 8106714:	e000      	b.n	8106718 <DMA_SetConfig+0x110>
 8106716:	2300      	movs	r3, #0
 8106718:	2b00      	cmp	r3, #0
 810671a:	d00d      	beq.n	8106738 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810671c:	68fb      	ldr	r3, [r7, #12]
 810671e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106720:	68fa      	ldr	r2, [r7, #12]
 8106722:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106724:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8106726:	68fb      	ldr	r3, [r7, #12]
 8106728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810672a:	2b00      	cmp	r3, #0
 810672c:	d004      	beq.n	8106738 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810672e:	68fb      	ldr	r3, [r7, #12]
 8106730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106732:	68fa      	ldr	r2, [r7, #12]
 8106734:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106736:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106738:	68fb      	ldr	r3, [r7, #12]
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	4a39      	ldr	r2, [pc, #228]	@ (8106824 <DMA_SetConfig+0x21c>)
 810673e:	4293      	cmp	r3, r2
 8106740:	d04a      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 8106742:	68fb      	ldr	r3, [r7, #12]
 8106744:	681b      	ldr	r3, [r3, #0]
 8106746:	4a38      	ldr	r2, [pc, #224]	@ (8106828 <DMA_SetConfig+0x220>)
 8106748:	4293      	cmp	r3, r2
 810674a:	d045      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 810674c:	68fb      	ldr	r3, [r7, #12]
 810674e:	681b      	ldr	r3, [r3, #0]
 8106750:	4a36      	ldr	r2, [pc, #216]	@ (810682c <DMA_SetConfig+0x224>)
 8106752:	4293      	cmp	r3, r2
 8106754:	d040      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 8106756:	68fb      	ldr	r3, [r7, #12]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	4a35      	ldr	r2, [pc, #212]	@ (8106830 <DMA_SetConfig+0x228>)
 810675c:	4293      	cmp	r3, r2
 810675e:	d03b      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 8106760:	68fb      	ldr	r3, [r7, #12]
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	4a33      	ldr	r2, [pc, #204]	@ (8106834 <DMA_SetConfig+0x22c>)
 8106766:	4293      	cmp	r3, r2
 8106768:	d036      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 810676a:	68fb      	ldr	r3, [r7, #12]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	4a32      	ldr	r2, [pc, #200]	@ (8106838 <DMA_SetConfig+0x230>)
 8106770:	4293      	cmp	r3, r2
 8106772:	d031      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 8106774:	68fb      	ldr	r3, [r7, #12]
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	4a30      	ldr	r2, [pc, #192]	@ (810683c <DMA_SetConfig+0x234>)
 810677a:	4293      	cmp	r3, r2
 810677c:	d02c      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 810677e:	68fb      	ldr	r3, [r7, #12]
 8106780:	681b      	ldr	r3, [r3, #0]
 8106782:	4a2f      	ldr	r2, [pc, #188]	@ (8106840 <DMA_SetConfig+0x238>)
 8106784:	4293      	cmp	r3, r2
 8106786:	d027      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 8106788:	68fb      	ldr	r3, [r7, #12]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	4a2d      	ldr	r2, [pc, #180]	@ (8106844 <DMA_SetConfig+0x23c>)
 810678e:	4293      	cmp	r3, r2
 8106790:	d022      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 8106792:	68fb      	ldr	r3, [r7, #12]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	4a2c      	ldr	r2, [pc, #176]	@ (8106848 <DMA_SetConfig+0x240>)
 8106798:	4293      	cmp	r3, r2
 810679a:	d01d      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 810679c:	68fb      	ldr	r3, [r7, #12]
 810679e:	681b      	ldr	r3, [r3, #0]
 81067a0:	4a2a      	ldr	r2, [pc, #168]	@ (810684c <DMA_SetConfig+0x244>)
 81067a2:	4293      	cmp	r3, r2
 81067a4:	d018      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 81067a6:	68fb      	ldr	r3, [r7, #12]
 81067a8:	681b      	ldr	r3, [r3, #0]
 81067aa:	4a29      	ldr	r2, [pc, #164]	@ (8106850 <DMA_SetConfig+0x248>)
 81067ac:	4293      	cmp	r3, r2
 81067ae:	d013      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 81067b0:	68fb      	ldr	r3, [r7, #12]
 81067b2:	681b      	ldr	r3, [r3, #0]
 81067b4:	4a27      	ldr	r2, [pc, #156]	@ (8106854 <DMA_SetConfig+0x24c>)
 81067b6:	4293      	cmp	r3, r2
 81067b8:	d00e      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 81067ba:	68fb      	ldr	r3, [r7, #12]
 81067bc:	681b      	ldr	r3, [r3, #0]
 81067be:	4a26      	ldr	r2, [pc, #152]	@ (8106858 <DMA_SetConfig+0x250>)
 81067c0:	4293      	cmp	r3, r2
 81067c2:	d009      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 81067c4:	68fb      	ldr	r3, [r7, #12]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	4a24      	ldr	r2, [pc, #144]	@ (810685c <DMA_SetConfig+0x254>)
 81067ca:	4293      	cmp	r3, r2
 81067cc:	d004      	beq.n	81067d8 <DMA_SetConfig+0x1d0>
 81067ce:	68fb      	ldr	r3, [r7, #12]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	4a23      	ldr	r2, [pc, #140]	@ (8106860 <DMA_SetConfig+0x258>)
 81067d4:	4293      	cmp	r3, r2
 81067d6:	d101      	bne.n	81067dc <DMA_SetConfig+0x1d4>
 81067d8:	2301      	movs	r3, #1
 81067da:	e000      	b.n	81067de <DMA_SetConfig+0x1d6>
 81067dc:	2300      	movs	r3, #0
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d059      	beq.n	8106896 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81067e2:	68fb      	ldr	r3, [r7, #12]
 81067e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81067e6:	f003 031f 	and.w	r3, r3, #31
 81067ea:	223f      	movs	r2, #63	@ 0x3f
 81067ec:	409a      	lsls	r2, r3
 81067ee:	697b      	ldr	r3, [r7, #20]
 81067f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81067f2:	68fb      	ldr	r3, [r7, #12]
 81067f4:	681b      	ldr	r3, [r3, #0]
 81067f6:	681a      	ldr	r2, [r3, #0]
 81067f8:	68fb      	ldr	r3, [r7, #12]
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8106800:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8106802:	68fb      	ldr	r3, [r7, #12]
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	683a      	ldr	r2, [r7, #0]
 8106808:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810680a:	68fb      	ldr	r3, [r7, #12]
 810680c:	689b      	ldr	r3, [r3, #8]
 810680e:	2b40      	cmp	r3, #64	@ 0x40
 8106810:	d138      	bne.n	8106884 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8106812:	68fb      	ldr	r3, [r7, #12]
 8106814:	681b      	ldr	r3, [r3, #0]
 8106816:	687a      	ldr	r2, [r7, #4]
 8106818:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810681a:	68fb      	ldr	r3, [r7, #12]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	68ba      	ldr	r2, [r7, #8]
 8106820:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106822:	e086      	b.n	8106932 <DMA_SetConfig+0x32a>
 8106824:	40020010 	.word	0x40020010
 8106828:	40020028 	.word	0x40020028
 810682c:	40020040 	.word	0x40020040
 8106830:	40020058 	.word	0x40020058
 8106834:	40020070 	.word	0x40020070
 8106838:	40020088 	.word	0x40020088
 810683c:	400200a0 	.word	0x400200a0
 8106840:	400200b8 	.word	0x400200b8
 8106844:	40020410 	.word	0x40020410
 8106848:	40020428 	.word	0x40020428
 810684c:	40020440 	.word	0x40020440
 8106850:	40020458 	.word	0x40020458
 8106854:	40020470 	.word	0x40020470
 8106858:	40020488 	.word	0x40020488
 810685c:	400204a0 	.word	0x400204a0
 8106860:	400204b8 	.word	0x400204b8
 8106864:	58025408 	.word	0x58025408
 8106868:	5802541c 	.word	0x5802541c
 810686c:	58025430 	.word	0x58025430
 8106870:	58025444 	.word	0x58025444
 8106874:	58025458 	.word	0x58025458
 8106878:	5802546c 	.word	0x5802546c
 810687c:	58025480 	.word	0x58025480
 8106880:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8106884:	68fb      	ldr	r3, [r7, #12]
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	68ba      	ldr	r2, [r7, #8]
 810688a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 810688c:	68fb      	ldr	r3, [r7, #12]
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	687a      	ldr	r2, [r7, #4]
 8106892:	60da      	str	r2, [r3, #12]
}
 8106894:	e04d      	b.n	8106932 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106896:	68fb      	ldr	r3, [r7, #12]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	4a29      	ldr	r2, [pc, #164]	@ (8106940 <DMA_SetConfig+0x338>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d022      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068a0:	68fb      	ldr	r3, [r7, #12]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	4a27      	ldr	r2, [pc, #156]	@ (8106944 <DMA_SetConfig+0x33c>)
 81068a6:	4293      	cmp	r3, r2
 81068a8:	d01d      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068aa:	68fb      	ldr	r3, [r7, #12]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	4a26      	ldr	r2, [pc, #152]	@ (8106948 <DMA_SetConfig+0x340>)
 81068b0:	4293      	cmp	r3, r2
 81068b2:	d018      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068b4:	68fb      	ldr	r3, [r7, #12]
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	4a24      	ldr	r2, [pc, #144]	@ (810694c <DMA_SetConfig+0x344>)
 81068ba:	4293      	cmp	r3, r2
 81068bc:	d013      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068be:	68fb      	ldr	r3, [r7, #12]
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	4a23      	ldr	r2, [pc, #140]	@ (8106950 <DMA_SetConfig+0x348>)
 81068c4:	4293      	cmp	r3, r2
 81068c6:	d00e      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068c8:	68fb      	ldr	r3, [r7, #12]
 81068ca:	681b      	ldr	r3, [r3, #0]
 81068cc:	4a21      	ldr	r2, [pc, #132]	@ (8106954 <DMA_SetConfig+0x34c>)
 81068ce:	4293      	cmp	r3, r2
 81068d0:	d009      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068d2:	68fb      	ldr	r3, [r7, #12]
 81068d4:	681b      	ldr	r3, [r3, #0]
 81068d6:	4a20      	ldr	r2, [pc, #128]	@ (8106958 <DMA_SetConfig+0x350>)
 81068d8:	4293      	cmp	r3, r2
 81068da:	d004      	beq.n	81068e6 <DMA_SetConfig+0x2de>
 81068dc:	68fb      	ldr	r3, [r7, #12]
 81068de:	681b      	ldr	r3, [r3, #0]
 81068e0:	4a1e      	ldr	r2, [pc, #120]	@ (810695c <DMA_SetConfig+0x354>)
 81068e2:	4293      	cmp	r3, r2
 81068e4:	d101      	bne.n	81068ea <DMA_SetConfig+0x2e2>
 81068e6:	2301      	movs	r3, #1
 81068e8:	e000      	b.n	81068ec <DMA_SetConfig+0x2e4>
 81068ea:	2300      	movs	r3, #0
 81068ec:	2b00      	cmp	r3, #0
 81068ee:	d020      	beq.n	8106932 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81068f0:	68fb      	ldr	r3, [r7, #12]
 81068f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81068f4:	f003 031f 	and.w	r3, r3, #31
 81068f8:	2201      	movs	r2, #1
 81068fa:	409a      	lsls	r2, r3
 81068fc:	693b      	ldr	r3, [r7, #16]
 81068fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8106900:	68fb      	ldr	r3, [r7, #12]
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	683a      	ldr	r2, [r7, #0]
 8106906:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106908:	68fb      	ldr	r3, [r7, #12]
 810690a:	689b      	ldr	r3, [r3, #8]
 810690c:	2b40      	cmp	r3, #64	@ 0x40
 810690e:	d108      	bne.n	8106922 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8106910:	68fb      	ldr	r3, [r7, #12]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	687a      	ldr	r2, [r7, #4]
 8106916:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8106918:	68fb      	ldr	r3, [r7, #12]
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	68ba      	ldr	r2, [r7, #8]
 810691e:	60da      	str	r2, [r3, #12]
}
 8106920:	e007      	b.n	8106932 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106922:	68fb      	ldr	r3, [r7, #12]
 8106924:	681b      	ldr	r3, [r3, #0]
 8106926:	68ba      	ldr	r2, [r7, #8]
 8106928:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810692a:	68fb      	ldr	r3, [r7, #12]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	687a      	ldr	r2, [r7, #4]
 8106930:	60da      	str	r2, [r3, #12]
}
 8106932:	bf00      	nop
 8106934:	371c      	adds	r7, #28
 8106936:	46bd      	mov	sp, r7
 8106938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810693c:	4770      	bx	lr
 810693e:	bf00      	nop
 8106940:	58025408 	.word	0x58025408
 8106944:	5802541c 	.word	0x5802541c
 8106948:	58025430 	.word	0x58025430
 810694c:	58025444 	.word	0x58025444
 8106950:	58025458 	.word	0x58025458
 8106954:	5802546c 	.word	0x5802546c
 8106958:	58025480 	.word	0x58025480
 810695c:	58025494 	.word	0x58025494

08106960 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106960:	b480      	push	{r7}
 8106962:	b085      	sub	sp, #20
 8106964:	af00      	add	r7, sp, #0
 8106966:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	681b      	ldr	r3, [r3, #0]
 810696c:	4a42      	ldr	r2, [pc, #264]	@ (8106a78 <DMA_CalcBaseAndBitshift+0x118>)
 810696e:	4293      	cmp	r3, r2
 8106970:	d04a      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	681b      	ldr	r3, [r3, #0]
 8106976:	4a41      	ldr	r2, [pc, #260]	@ (8106a7c <DMA_CalcBaseAndBitshift+0x11c>)
 8106978:	4293      	cmp	r3, r2
 810697a:	d045      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	4a3f      	ldr	r2, [pc, #252]	@ (8106a80 <DMA_CalcBaseAndBitshift+0x120>)
 8106982:	4293      	cmp	r3, r2
 8106984:	d040      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 8106986:	687b      	ldr	r3, [r7, #4]
 8106988:	681b      	ldr	r3, [r3, #0]
 810698a:	4a3e      	ldr	r2, [pc, #248]	@ (8106a84 <DMA_CalcBaseAndBitshift+0x124>)
 810698c:	4293      	cmp	r3, r2
 810698e:	d03b      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	681b      	ldr	r3, [r3, #0]
 8106994:	4a3c      	ldr	r2, [pc, #240]	@ (8106a88 <DMA_CalcBaseAndBitshift+0x128>)
 8106996:	4293      	cmp	r3, r2
 8106998:	d036      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	681b      	ldr	r3, [r3, #0]
 810699e:	4a3b      	ldr	r2, [pc, #236]	@ (8106a8c <DMA_CalcBaseAndBitshift+0x12c>)
 81069a0:	4293      	cmp	r3, r2
 81069a2:	d031      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	681b      	ldr	r3, [r3, #0]
 81069a8:	4a39      	ldr	r2, [pc, #228]	@ (8106a90 <DMA_CalcBaseAndBitshift+0x130>)
 81069aa:	4293      	cmp	r3, r2
 81069ac:	d02c      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	681b      	ldr	r3, [r3, #0]
 81069b2:	4a38      	ldr	r2, [pc, #224]	@ (8106a94 <DMA_CalcBaseAndBitshift+0x134>)
 81069b4:	4293      	cmp	r3, r2
 81069b6:	d027      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	681b      	ldr	r3, [r3, #0]
 81069bc:	4a36      	ldr	r2, [pc, #216]	@ (8106a98 <DMA_CalcBaseAndBitshift+0x138>)
 81069be:	4293      	cmp	r3, r2
 81069c0:	d022      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	4a35      	ldr	r2, [pc, #212]	@ (8106a9c <DMA_CalcBaseAndBitshift+0x13c>)
 81069c8:	4293      	cmp	r3, r2
 81069ca:	d01d      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	4a33      	ldr	r2, [pc, #204]	@ (8106aa0 <DMA_CalcBaseAndBitshift+0x140>)
 81069d2:	4293      	cmp	r3, r2
 81069d4:	d018      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	4a32      	ldr	r2, [pc, #200]	@ (8106aa4 <DMA_CalcBaseAndBitshift+0x144>)
 81069dc:	4293      	cmp	r3, r2
 81069de:	d013      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	4a30      	ldr	r2, [pc, #192]	@ (8106aa8 <DMA_CalcBaseAndBitshift+0x148>)
 81069e6:	4293      	cmp	r3, r2
 81069e8:	d00e      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069ea:	687b      	ldr	r3, [r7, #4]
 81069ec:	681b      	ldr	r3, [r3, #0]
 81069ee:	4a2f      	ldr	r2, [pc, #188]	@ (8106aac <DMA_CalcBaseAndBitshift+0x14c>)
 81069f0:	4293      	cmp	r3, r2
 81069f2:	d009      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	4a2d      	ldr	r2, [pc, #180]	@ (8106ab0 <DMA_CalcBaseAndBitshift+0x150>)
 81069fa:	4293      	cmp	r3, r2
 81069fc:	d004      	beq.n	8106a08 <DMA_CalcBaseAndBitshift+0xa8>
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	4a2c      	ldr	r2, [pc, #176]	@ (8106ab4 <DMA_CalcBaseAndBitshift+0x154>)
 8106a04:	4293      	cmp	r3, r2
 8106a06:	d101      	bne.n	8106a0c <DMA_CalcBaseAndBitshift+0xac>
 8106a08:	2301      	movs	r3, #1
 8106a0a:	e000      	b.n	8106a0e <DMA_CalcBaseAndBitshift+0xae>
 8106a0c:	2300      	movs	r3, #0
 8106a0e:	2b00      	cmp	r3, #0
 8106a10:	d024      	beq.n	8106a5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	b2db      	uxtb	r3, r3
 8106a18:	3b10      	subs	r3, #16
 8106a1a:	4a27      	ldr	r2, [pc, #156]	@ (8106ab8 <DMA_CalcBaseAndBitshift+0x158>)
 8106a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8106a20:	091b      	lsrs	r3, r3, #4
 8106a22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106a24:	68fb      	ldr	r3, [r7, #12]
 8106a26:	f003 0307 	and.w	r3, r3, #7
 8106a2a:	4a24      	ldr	r2, [pc, #144]	@ (8106abc <DMA_CalcBaseAndBitshift+0x15c>)
 8106a2c:	5cd3      	ldrb	r3, [r2, r3]
 8106a2e:	461a      	mov	r2, r3
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8106a34:	68fb      	ldr	r3, [r7, #12]
 8106a36:	2b03      	cmp	r3, #3
 8106a38:	d908      	bls.n	8106a4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	461a      	mov	r2, r3
 8106a40:	4b1f      	ldr	r3, [pc, #124]	@ (8106ac0 <DMA_CalcBaseAndBitshift+0x160>)
 8106a42:	4013      	ands	r3, r2
 8106a44:	1d1a      	adds	r2, r3, #4
 8106a46:	687b      	ldr	r3, [r7, #4]
 8106a48:	659a      	str	r2, [r3, #88]	@ 0x58
 8106a4a:	e00d      	b.n	8106a68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	461a      	mov	r2, r3
 8106a52:	4b1b      	ldr	r3, [pc, #108]	@ (8106ac0 <DMA_CalcBaseAndBitshift+0x160>)
 8106a54:	4013      	ands	r3, r2
 8106a56:	687a      	ldr	r2, [r7, #4]
 8106a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8106a5a:	e005      	b.n	8106a68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8106a68:	687b      	ldr	r3, [r7, #4]
 8106a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8106a6c:	4618      	mov	r0, r3
 8106a6e:	3714      	adds	r7, #20
 8106a70:	46bd      	mov	sp, r7
 8106a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a76:	4770      	bx	lr
 8106a78:	40020010 	.word	0x40020010
 8106a7c:	40020028 	.word	0x40020028
 8106a80:	40020040 	.word	0x40020040
 8106a84:	40020058 	.word	0x40020058
 8106a88:	40020070 	.word	0x40020070
 8106a8c:	40020088 	.word	0x40020088
 8106a90:	400200a0 	.word	0x400200a0
 8106a94:	400200b8 	.word	0x400200b8
 8106a98:	40020410 	.word	0x40020410
 8106a9c:	40020428 	.word	0x40020428
 8106aa0:	40020440 	.word	0x40020440
 8106aa4:	40020458 	.word	0x40020458
 8106aa8:	40020470 	.word	0x40020470
 8106aac:	40020488 	.word	0x40020488
 8106ab0:	400204a0 	.word	0x400204a0
 8106ab4:	400204b8 	.word	0x400204b8
 8106ab8:	aaaaaaab 	.word	0xaaaaaaab
 8106abc:	08128914 	.word	0x08128914
 8106ac0:	fffffc00 	.word	0xfffffc00

08106ac4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106ac4:	b480      	push	{r7}
 8106ac6:	b085      	sub	sp, #20
 8106ac8:	af00      	add	r7, sp, #0
 8106aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106acc:	2300      	movs	r3, #0
 8106ace:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	699b      	ldr	r3, [r3, #24]
 8106ad4:	2b00      	cmp	r3, #0
 8106ad6:	d120      	bne.n	8106b1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106adc:	2b03      	cmp	r3, #3
 8106ade:	d858      	bhi.n	8106b92 <DMA_CheckFifoParam+0xce>
 8106ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8106ae8 <DMA_CheckFifoParam+0x24>)
 8106ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ae6:	bf00      	nop
 8106ae8:	08106af9 	.word	0x08106af9
 8106aec:	08106b0b 	.word	0x08106b0b
 8106af0:	08106af9 	.word	0x08106af9
 8106af4:	08106b93 	.word	0x08106b93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8106b00:	2b00      	cmp	r3, #0
 8106b02:	d048      	beq.n	8106b96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106b04:	2301      	movs	r3, #1
 8106b06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106b08:	e045      	b.n	8106b96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8106b12:	d142      	bne.n	8106b9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106b14:	2301      	movs	r3, #1
 8106b16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106b18:	e03f      	b.n	8106b9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106b1a:	687b      	ldr	r3, [r7, #4]
 8106b1c:	699b      	ldr	r3, [r3, #24]
 8106b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106b22:	d123      	bne.n	8106b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106b28:	2b03      	cmp	r3, #3
 8106b2a:	d838      	bhi.n	8106b9e <DMA_CheckFifoParam+0xda>
 8106b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8106b34 <DMA_CheckFifoParam+0x70>)
 8106b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b32:	bf00      	nop
 8106b34:	08106b45 	.word	0x08106b45
 8106b38:	08106b4b 	.word	0x08106b4b
 8106b3c:	08106b45 	.word	0x08106b45
 8106b40:	08106b5d 	.word	0x08106b5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106b44:	2301      	movs	r3, #1
 8106b46:	73fb      	strb	r3, [r7, #15]
        break;
 8106b48:	e030      	b.n	8106bac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8106b52:	2b00      	cmp	r3, #0
 8106b54:	d025      	beq.n	8106ba2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106b56:	2301      	movs	r3, #1
 8106b58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106b5a:	e022      	b.n	8106ba2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8106b64:	d11f      	bne.n	8106ba6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106b66:	2301      	movs	r3, #1
 8106b68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106b6a:	e01c      	b.n	8106ba6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106b70:	2b02      	cmp	r3, #2
 8106b72:	d902      	bls.n	8106b7a <DMA_CheckFifoParam+0xb6>
 8106b74:	2b03      	cmp	r3, #3
 8106b76:	d003      	beq.n	8106b80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106b78:	e018      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106b7a:	2301      	movs	r3, #1
 8106b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8106b7e:	e015      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8106b88:	2b00      	cmp	r3, #0
 8106b8a:	d00e      	beq.n	8106baa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106b8c:	2301      	movs	r3, #1
 8106b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8106b90:	e00b      	b.n	8106baa <DMA_CheckFifoParam+0xe6>
        break;
 8106b92:	bf00      	nop
 8106b94:	e00a      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        break;
 8106b96:	bf00      	nop
 8106b98:	e008      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        break;
 8106b9a:	bf00      	nop
 8106b9c:	e006      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        break;
 8106b9e:	bf00      	nop
 8106ba0:	e004      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        break;
 8106ba2:	bf00      	nop
 8106ba4:	e002      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
        break;
 8106ba6:	bf00      	nop
 8106ba8:	e000      	b.n	8106bac <DMA_CheckFifoParam+0xe8>
    break;
 8106baa:	bf00      	nop
    }
  }

  return status;
 8106bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8106bae:	4618      	mov	r0, r3
 8106bb0:	3714      	adds	r7, #20
 8106bb2:	46bd      	mov	sp, r7
 8106bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb8:	4770      	bx	lr
 8106bba:	bf00      	nop

08106bbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106bbc:	b480      	push	{r7}
 8106bbe:	b085      	sub	sp, #20
 8106bc0:	af00      	add	r7, sp, #0
 8106bc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	681b      	ldr	r3, [r3, #0]
 8106bc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	681b      	ldr	r3, [r3, #0]
 8106bce:	4a38      	ldr	r2, [pc, #224]	@ (8106cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8106bd0:	4293      	cmp	r3, r2
 8106bd2:	d022      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	4a36      	ldr	r2, [pc, #216]	@ (8106cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8106bda:	4293      	cmp	r3, r2
 8106bdc:	d01d      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	4a35      	ldr	r2, [pc, #212]	@ (8106cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106be4:	4293      	cmp	r3, r2
 8106be6:	d018      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	4a33      	ldr	r2, [pc, #204]	@ (8106cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106bee:	4293      	cmp	r3, r2
 8106bf0:	d013      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	681b      	ldr	r3, [r3, #0]
 8106bf6:	4a32      	ldr	r2, [pc, #200]	@ (8106cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106bf8:	4293      	cmp	r3, r2
 8106bfa:	d00e      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	4a30      	ldr	r2, [pc, #192]	@ (8106cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106c02:	4293      	cmp	r3, r2
 8106c04:	d009      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	681b      	ldr	r3, [r3, #0]
 8106c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8106cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106c0c:	4293      	cmp	r3, r2
 8106c0e:	d004      	beq.n	8106c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	4a2d      	ldr	r2, [pc, #180]	@ (8106ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106c16:	4293      	cmp	r3, r2
 8106c18:	d101      	bne.n	8106c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106c1a:	2301      	movs	r3, #1
 8106c1c:	e000      	b.n	8106c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106c1e:	2300      	movs	r3, #0
 8106c20:	2b00      	cmp	r3, #0
 8106c22:	d01a      	beq.n	8106c5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	b2db      	uxtb	r3, r3
 8106c2a:	3b08      	subs	r3, #8
 8106c2c:	4a28      	ldr	r2, [pc, #160]	@ (8106cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8106c32:	091b      	lsrs	r3, r3, #4
 8106c34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106c36:	68fa      	ldr	r2, [r7, #12]
 8106c38:	4b26      	ldr	r3, [pc, #152]	@ (8106cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106c3a:	4413      	add	r3, r2
 8106c3c:	009b      	lsls	r3, r3, #2
 8106c3e:	461a      	mov	r2, r3
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106c44:	687b      	ldr	r3, [r7, #4]
 8106c46:	4a24      	ldr	r2, [pc, #144]	@ (8106cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106c48:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106c4a:	68fb      	ldr	r3, [r7, #12]
 8106c4c:	f003 031f 	and.w	r3, r3, #31
 8106c50:	2201      	movs	r2, #1
 8106c52:	409a      	lsls	r2, r3
 8106c54:	687b      	ldr	r3, [r7, #4]
 8106c56:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106c58:	e024      	b.n	8106ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	681b      	ldr	r3, [r3, #0]
 8106c5e:	b2db      	uxtb	r3, r3
 8106c60:	3b10      	subs	r3, #16
 8106c62:	4a1e      	ldr	r2, [pc, #120]	@ (8106cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106c64:	fba2 2303 	umull	r2, r3, r2, r3
 8106c68:	091b      	lsrs	r3, r3, #4
 8106c6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106c6c:	68bb      	ldr	r3, [r7, #8]
 8106c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8106ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106c70:	4293      	cmp	r3, r2
 8106c72:	d806      	bhi.n	8106c82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8106c74:	68bb      	ldr	r3, [r7, #8]
 8106c76:	4a1b      	ldr	r2, [pc, #108]	@ (8106ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106c78:	4293      	cmp	r3, r2
 8106c7a:	d902      	bls.n	8106c82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8106c7c:	68fb      	ldr	r3, [r7, #12]
 8106c7e:	3308      	adds	r3, #8
 8106c80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106c82:	68fa      	ldr	r2, [r7, #12]
 8106c84:	4b18      	ldr	r3, [pc, #96]	@ (8106ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106c86:	4413      	add	r3, r2
 8106c88:	009b      	lsls	r3, r3, #2
 8106c8a:	461a      	mov	r2, r3
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	4a16      	ldr	r2, [pc, #88]	@ (8106cec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106c94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106c96:	68fb      	ldr	r3, [r7, #12]
 8106c98:	f003 031f 	and.w	r3, r3, #31
 8106c9c:	2201      	movs	r2, #1
 8106c9e:	409a      	lsls	r2, r3
 8106ca0:	687b      	ldr	r3, [r7, #4]
 8106ca2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8106ca4:	bf00      	nop
 8106ca6:	3714      	adds	r7, #20
 8106ca8:	46bd      	mov	sp, r7
 8106caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cae:	4770      	bx	lr
 8106cb0:	58025408 	.word	0x58025408
 8106cb4:	5802541c 	.word	0x5802541c
 8106cb8:	58025430 	.word	0x58025430
 8106cbc:	58025444 	.word	0x58025444
 8106cc0:	58025458 	.word	0x58025458
 8106cc4:	5802546c 	.word	0x5802546c
 8106cc8:	58025480 	.word	0x58025480
 8106ccc:	58025494 	.word	0x58025494
 8106cd0:	cccccccd 	.word	0xcccccccd
 8106cd4:	16009600 	.word	0x16009600
 8106cd8:	58025880 	.word	0x58025880
 8106cdc:	aaaaaaab 	.word	0xaaaaaaab
 8106ce0:	400204b8 	.word	0x400204b8
 8106ce4:	4002040f 	.word	0x4002040f
 8106ce8:	10008200 	.word	0x10008200
 8106cec:	40020880 	.word	0x40020880

08106cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106cf0:	b480      	push	{r7}
 8106cf2:	b085      	sub	sp, #20
 8106cf4:	af00      	add	r7, sp, #0
 8106cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	685b      	ldr	r3, [r3, #4]
 8106cfc:	b2db      	uxtb	r3, r3
 8106cfe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106d00:	68fb      	ldr	r3, [r7, #12]
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	d04a      	beq.n	8106d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106d06:	68fb      	ldr	r3, [r7, #12]
 8106d08:	2b08      	cmp	r3, #8
 8106d0a:	d847      	bhi.n	8106d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	681b      	ldr	r3, [r3, #0]
 8106d10:	4a25      	ldr	r2, [pc, #148]	@ (8106da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106d12:	4293      	cmp	r3, r2
 8106d14:	d022      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	4a24      	ldr	r2, [pc, #144]	@ (8106dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106d1c:	4293      	cmp	r3, r2
 8106d1e:	d01d      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681b      	ldr	r3, [r3, #0]
 8106d24:	4a22      	ldr	r2, [pc, #136]	@ (8106db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106d26:	4293      	cmp	r3, r2
 8106d28:	d018      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	681b      	ldr	r3, [r3, #0]
 8106d2e:	4a21      	ldr	r2, [pc, #132]	@ (8106db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106d30:	4293      	cmp	r3, r2
 8106d32:	d013      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	681b      	ldr	r3, [r3, #0]
 8106d38:	4a1f      	ldr	r2, [pc, #124]	@ (8106db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106d3a:	4293      	cmp	r3, r2
 8106d3c:	d00e      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	4a1e      	ldr	r2, [pc, #120]	@ (8106dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106d44:	4293      	cmp	r3, r2
 8106d46:	d009      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	681b      	ldr	r3, [r3, #0]
 8106d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8106dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106d4e:	4293      	cmp	r3, r2
 8106d50:	d004      	beq.n	8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106d52:	687b      	ldr	r3, [r7, #4]
 8106d54:	681b      	ldr	r3, [r3, #0]
 8106d56:	4a1b      	ldr	r2, [pc, #108]	@ (8106dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106d58:	4293      	cmp	r3, r2
 8106d5a:	d101      	bne.n	8106d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106d5c:	2301      	movs	r3, #1
 8106d5e:	e000      	b.n	8106d62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106d60:	2300      	movs	r3, #0
 8106d62:	2b00      	cmp	r3, #0
 8106d64:	d00a      	beq.n	8106d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106d66:	68fa      	ldr	r2, [r7, #12]
 8106d68:	4b17      	ldr	r3, [pc, #92]	@ (8106dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106d6a:	4413      	add	r3, r2
 8106d6c:	009b      	lsls	r3, r3, #2
 8106d6e:	461a      	mov	r2, r3
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	4a15      	ldr	r2, [pc, #84]	@ (8106dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106d78:	671a      	str	r2, [r3, #112]	@ 0x70
 8106d7a:	e009      	b.n	8106d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106d7c:	68fa      	ldr	r2, [r7, #12]
 8106d7e:	4b14      	ldr	r3, [pc, #80]	@ (8106dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106d80:	4413      	add	r3, r2
 8106d82:	009b      	lsls	r3, r3, #2
 8106d84:	461a      	mov	r2, r3
 8106d86:	687b      	ldr	r3, [r7, #4]
 8106d88:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	4a11      	ldr	r2, [pc, #68]	@ (8106dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106d8e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106d90:	68fb      	ldr	r3, [r7, #12]
 8106d92:	3b01      	subs	r3, #1
 8106d94:	2201      	movs	r2, #1
 8106d96:	409a      	lsls	r2, r3
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8106d9c:	bf00      	nop
 8106d9e:	3714      	adds	r7, #20
 8106da0:	46bd      	mov	sp, r7
 8106da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106da6:	4770      	bx	lr
 8106da8:	58025408 	.word	0x58025408
 8106dac:	5802541c 	.word	0x5802541c
 8106db0:	58025430 	.word	0x58025430
 8106db4:	58025444 	.word	0x58025444
 8106db8:	58025458 	.word	0x58025458
 8106dbc:	5802546c 	.word	0x5802546c
 8106dc0:	58025480 	.word	0x58025480
 8106dc4:	58025494 	.word	0x58025494
 8106dc8:	1600963f 	.word	0x1600963f
 8106dcc:	58025940 	.word	0x58025940
 8106dd0:	1000823f 	.word	0x1000823f
 8106dd4:	40020940 	.word	0x40020940

08106dd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8106dd8:	b580      	push	{r7, lr}
 8106dda:	b084      	sub	sp, #16
 8106ddc:	af00      	add	r7, sp, #0
 8106dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	2b00      	cmp	r3, #0
 8106de4:	d101      	bne.n	8106dea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8106de6:	2301      	movs	r3, #1
 8106de8:	e0e3      	b.n	8106fb2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106df0:	2b00      	cmp	r3, #0
 8106df2:	d106      	bne.n	8106e02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	2223      	movs	r2, #35	@ 0x23
 8106df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8106dfc:	6878      	ldr	r0, [r7, #4]
 8106dfe:	f008 fd87 	bl	810f910 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106e02:	4b6e      	ldr	r3, [pc, #440]	@ (8106fbc <HAL_ETH_Init+0x1e4>)
 8106e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106e08:	4a6c      	ldr	r2, [pc, #432]	@ (8106fbc <HAL_ETH_Init+0x1e4>)
 8106e0a:	f043 0302 	orr.w	r3, r3, #2
 8106e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106e12:	4b6a      	ldr	r3, [pc, #424]	@ (8106fbc <HAL_ETH_Init+0x1e4>)
 8106e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106e18:	f003 0302 	and.w	r3, r3, #2
 8106e1c:	60bb      	str	r3, [r7, #8]
 8106e1e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	7a1b      	ldrb	r3, [r3, #8]
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d103      	bne.n	8106e30 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8106e28:	2000      	movs	r0, #0
 8106e2a:	f7fb fdbb 	bl	81029a4 <HAL_SYSCFG_ETHInterfaceSelect>
 8106e2e:	e003      	b.n	8106e38 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8106e30:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8106e34:	f7fb fdb6 	bl	81029a4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8106e38:	4b61      	ldr	r3, [pc, #388]	@ (8106fc0 <HAL_ETH_Init+0x1e8>)
 8106e3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8106e3c:	687b      	ldr	r3, [r7, #4]
 8106e3e:	681b      	ldr	r3, [r3, #0]
 8106e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106e44:	681b      	ldr	r3, [r3, #0]
 8106e46:	687a      	ldr	r2, [r7, #4]
 8106e48:	6812      	ldr	r2, [r2, #0]
 8106e4a:	f043 0301 	orr.w	r3, r3, #1
 8106e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8106e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8106e54:	f7fb fd6a 	bl	810292c <HAL_GetTick>
 8106e58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8106e5a:	e011      	b.n	8106e80 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8106e5c:	f7fb fd66 	bl	810292c <HAL_GetTick>
 8106e60:	4602      	mov	r2, r0
 8106e62:	68fb      	ldr	r3, [r7, #12]
 8106e64:	1ad3      	subs	r3, r2, r3
 8106e66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8106e6a:	d909      	bls.n	8106e80 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	2204      	movs	r2, #4
 8106e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8106e74:	687b      	ldr	r3, [r7, #4]
 8106e76:	22e0      	movs	r2, #224	@ 0xe0
 8106e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8106e7c:	2301      	movs	r3, #1
 8106e7e:	e098      	b.n	8106fb2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	681b      	ldr	r3, [r3, #0]
 8106e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106e88:	681b      	ldr	r3, [r3, #0]
 8106e8a:	f003 0301 	and.w	r3, r3, #1
 8106e8e:	2b00      	cmp	r3, #0
 8106e90:	d1e4      	bne.n	8106e5c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8106e92:	6878      	ldr	r0, [r7, #4]
 8106e94:	f000 ff32 	bl	8107cfc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8106e98:	f002 fefc 	bl	8109c94 <HAL_RCC_GetHCLKFreq>
 8106e9c:	4603      	mov	r3, r0
 8106e9e:	4a49      	ldr	r2, [pc, #292]	@ (8106fc4 <HAL_ETH_Init+0x1ec>)
 8106ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8106ea4:	0c9a      	lsrs	r2, r3, #18
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	681b      	ldr	r3, [r3, #0]
 8106eaa:	3a01      	subs	r2, #1
 8106eac:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8106eb0:	6878      	ldr	r0, [r7, #4]
 8106eb2:	f001 f92f 	bl	8108114 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106ebe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8106ec2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8106ec6:	687a      	ldr	r2, [r7, #4]
 8106ec8:	6812      	ldr	r2, [r2, #0]
 8106eca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8106ece:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8106ed2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	695b      	ldr	r3, [r3, #20]
 8106eda:	f003 0303 	and.w	r3, r3, #3
 8106ede:	2b00      	cmp	r3, #0
 8106ee0:	d009      	beq.n	8106ef6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	2201      	movs	r2, #1
 8106ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	22e0      	movs	r2, #224	@ 0xe0
 8106eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8106ef2:	2301      	movs	r3, #1
 8106ef4:	e05d      	b.n	8106fb2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8106ef6:	687b      	ldr	r3, [r7, #4]
 8106ef8:	681b      	ldr	r3, [r3, #0]
 8106efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106efe:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8106f02:	4b31      	ldr	r3, [pc, #196]	@ (8106fc8 <HAL_ETH_Init+0x1f0>)
 8106f04:	4013      	ands	r3, r2
 8106f06:	687a      	ldr	r2, [r7, #4]
 8106f08:	6952      	ldr	r2, [r2, #20]
 8106f0a:	0051      	lsls	r1, r2, #1
 8106f0c:	687a      	ldr	r2, [r7, #4]
 8106f0e:	6812      	ldr	r2, [r2, #0]
 8106f10:	430b      	orrs	r3, r1
 8106f12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8106f16:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8106f1a:	6878      	ldr	r0, [r7, #4]
 8106f1c:	f001 f997 	bl	810824e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8106f20:	6878      	ldr	r0, [r7, #4]
 8106f22:	f001 f9dd 	bl	81082e0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	685b      	ldr	r3, [r3, #4]
 8106f2a:	3305      	adds	r3, #5
 8106f2c:	781b      	ldrb	r3, [r3, #0]
 8106f2e:	021a      	lsls	r2, r3, #8
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	685b      	ldr	r3, [r3, #4]
 8106f34:	3304      	adds	r3, #4
 8106f36:	781b      	ldrb	r3, [r3, #0]
 8106f38:	4619      	mov	r1, r3
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	430a      	orrs	r2, r1
 8106f40:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	685b      	ldr	r3, [r3, #4]
 8106f48:	3303      	adds	r3, #3
 8106f4a:	781b      	ldrb	r3, [r3, #0]
 8106f4c:	061a      	lsls	r2, r3, #24
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	685b      	ldr	r3, [r3, #4]
 8106f52:	3302      	adds	r3, #2
 8106f54:	781b      	ldrb	r3, [r3, #0]
 8106f56:	041b      	lsls	r3, r3, #16
 8106f58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	685b      	ldr	r3, [r3, #4]
 8106f5e:	3301      	adds	r3, #1
 8106f60:	781b      	ldrb	r3, [r3, #0]
 8106f62:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8106f64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	685b      	ldr	r3, [r3, #4]
 8106f6a:	781b      	ldrb	r3, [r3, #0]
 8106f6c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8106f72:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8106f74:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	681a      	ldr	r2, [r3, #0]
 8106f84:	4b11      	ldr	r3, [pc, #68]	@ (8106fcc <HAL_ETH_Init+0x1f4>)
 8106f86:	430b      	orrs	r3, r1
 8106f88:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	681a      	ldr	r2, [r3, #0]
 8106f98:	4b0d      	ldr	r3, [pc, #52]	@ (8106fd0 <HAL_ETH_Init+0x1f8>)
 8106f9a:	430b      	orrs	r3, r1
 8106f9c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	2200      	movs	r2, #0
 8106fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	2210      	movs	r2, #16
 8106fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106fb0:	2300      	movs	r3, #0
}
 8106fb2:	4618      	mov	r0, r3
 8106fb4:	3710      	adds	r7, #16
 8106fb6:	46bd      	mov	sp, r7
 8106fb8:	bd80      	pop	{r7, pc}
 8106fba:	bf00      	nop
 8106fbc:	58024400 	.word	0x58024400
 8106fc0:	58000400 	.word	0x58000400
 8106fc4:	431bde83 	.word	0x431bde83
 8106fc8:	ffff8001 	.word	0xffff8001
 8106fcc:	0c020060 	.word	0x0c020060
 8106fd0:	0c20c000 	.word	0x0c20c000

08106fd4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8106fd4:	b580      	push	{r7, lr}
 8106fd6:	b082      	sub	sp, #8
 8106fd8:	af00      	add	r7, sp, #0
 8106fda:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106fe2:	2b10      	cmp	r3, #16
 8106fe4:	d165      	bne.n	81070b2 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	2223      	movs	r2, #35	@ 0x23
 8106fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	2201      	movs	r2, #1
 8106ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	2204      	movs	r2, #4
 8106ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8106ffa:	6878      	ldr	r0, [r7, #4]
 8106ffc:	f000 f9e4 	bl	81073c8 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107008:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810700c:	687a      	ldr	r2, [r7, #4]
 810700e:	6812      	ldr	r2, [r2, #0]
 8107010:	f043 0301 	orr.w	r3, r3, #1
 8107014:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107018:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107024:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8107028:	687a      	ldr	r2, [r7, #4]
 810702a:	6812      	ldr	r2, [r2, #0]
 810702c:	f043 0301 	orr.w	r3, r3, #1
 8107030:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107034:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	681b      	ldr	r3, [r3, #0]
 810703c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107040:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8107044:	687a      	ldr	r2, [r7, #4]
 8107046:	6812      	ldr	r2, [r2, #0]
 8107048:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 810704c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107050:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	681b      	ldr	r3, [r3, #0]
 8107058:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	681b      	ldr	r3, [r3, #0]
 8107060:	f042 0201 	orr.w	r2, r2, #1
 8107064:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	681a      	ldr	r2, [r3, #0]
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	681b      	ldr	r3, [r3, #0]
 8107072:	f042 0202 	orr.w	r2, r2, #2
 8107076:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	681b      	ldr	r3, [r3, #0]
 810707c:	681a      	ldr	r2, [r3, #0]
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	f042 0201 	orr.w	r2, r2, #1
 8107086:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	681b      	ldr	r3, [r3, #0]
 810708c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107090:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	681a      	ldr	r2, [r3, #0]
 8107098:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 810709c:	430b      	orrs	r3, r1
 810709e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81070a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	2223      	movs	r2, #35	@ 0x23
 81070aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 81070ae:	2300      	movs	r3, #0
 81070b0:	e000      	b.n	81070b4 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 81070b2:	2301      	movs	r3, #1
  }
}
 81070b4:	4618      	mov	r0, r3
 81070b6:	3708      	adds	r7, #8
 81070b8:	46bd      	mov	sp, r7
 81070ba:	bd80      	pop	{r7, pc}

081070bc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 81070bc:	b480      	push	{r7}
 81070be:	b085      	sub	sp, #20
 81070c0:	af00      	add	r7, sp, #0
 81070c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81070ca:	2b23      	cmp	r3, #35	@ 0x23
 81070cc:	d165      	bne.n	810719a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	2223      	movs	r2, #35	@ 0x23
 81070d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	681b      	ldr	r3, [r3, #0]
 81070da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81070de:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681a      	ldr	r2, [r3, #0]
 81070e6:	4b30      	ldr	r3, [pc, #192]	@ (81071a8 <HAL_ETH_Stop_IT+0xec>)
 81070e8:	400b      	ands	r3, r1
 81070ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81070ee:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81070fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81070fe:	687a      	ldr	r2, [r7, #4]
 8107100:	6812      	ldr	r2, [r2, #0]
 8107102:	f023 0301 	bic.w	r3, r3, #1
 8107106:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810710a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107116:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810711a:	687a      	ldr	r2, [r7, #4]
 810711c:	6812      	ldr	r2, [r2, #0]
 810711e:	f023 0301 	bic.w	r3, r3, #1
 8107122:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107126:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	681b      	ldr	r3, [r3, #0]
 810712e:	681a      	ldr	r2, [r3, #0]
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	681b      	ldr	r3, [r3, #0]
 8107134:	f022 0201 	bic.w	r2, r2, #1
 8107138:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	681b      	ldr	r3, [r3, #0]
 810713e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	681b      	ldr	r3, [r3, #0]
 8107146:	f042 0201 	orr.w	r2, r2, #1
 810714a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	681b      	ldr	r3, [r3, #0]
 8107152:	681a      	ldr	r2, [r3, #0]
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	f022 0202 	bic.w	r2, r2, #2
 810715c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810715e:	2300      	movs	r3, #0
 8107160:	60fb      	str	r3, [r7, #12]
 8107162:	e00e      	b.n	8107182 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	68fa      	ldr	r2, [r7, #12]
 8107168:	3212      	adds	r2, #18
 810716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810716e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8107170:	68bb      	ldr	r3, [r7, #8]
 8107172:	68db      	ldr	r3, [r3, #12]
 8107174:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8107178:	68bb      	ldr	r3, [r7, #8]
 810717a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 810717c:	68fb      	ldr	r3, [r7, #12]
 810717e:	3301      	adds	r3, #1
 8107180:	60fb      	str	r3, [r7, #12]
 8107182:	68fb      	ldr	r3, [r7, #12]
 8107184:	2b03      	cmp	r3, #3
 8107186:	d9ed      	bls.n	8107164 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8107188:	687b      	ldr	r3, [r7, #4]
 810718a:	2200      	movs	r2, #0
 810718c:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	2210      	movs	r2, #16
 8107192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8107196:	2300      	movs	r3, #0
 8107198:	e000      	b.n	810719c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 810719a:	2301      	movs	r3, #1
  }
}
 810719c:	4618      	mov	r0, r3
 810719e:	3714      	adds	r7, #20
 81071a0:	46bd      	mov	sp, r7
 81071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071a6:	4770      	bx	lr
 81071a8:	ffff2f3e 	.word	0xffff2f3e

081071ac <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 81071ac:	b580      	push	{r7, lr}
 81071ae:	b082      	sub	sp, #8
 81071b0:	af00      	add	r7, sp, #0
 81071b2:	6078      	str	r0, [r7, #4]
 81071b4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 81071b6:	683b      	ldr	r3, [r7, #0]
 81071b8:	2b00      	cmp	r3, #0
 81071ba:	d109      	bne.n	81071d0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81071c2:	f043 0201 	orr.w	r2, r3, #1
 81071c6:	687b      	ldr	r3, [r7, #4]
 81071c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 81071cc:	2301      	movs	r3, #1
 81071ce:	e03a      	b.n	8107246 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81071d6:	2b23      	cmp	r3, #35	@ 0x23
 81071d8:	d134      	bne.n	8107244 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 81071da:	683b      	ldr	r3, [r7, #0]
 81071dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 81071e2:	2201      	movs	r2, #1
 81071e4:	6839      	ldr	r1, [r7, #0]
 81071e6:	6878      	ldr	r0, [r7, #4]
 81071e8:	f001 f8d8 	bl	810839c <ETH_Prepare_Tx_Descriptors>
 81071ec:	4603      	mov	r3, r0
 81071ee:	2b00      	cmp	r3, #0
 81071f0:	d009      	beq.n	8107206 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81071f8:	f043 0202 	orr.w	r2, r3, #2
 81071fc:	687b      	ldr	r3, [r7, #4]
 81071fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8107202:	2301      	movs	r3, #1
 8107204:	e01f      	b.n	8107246 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8107206:	f3bf 8f4f 	dsb	sy
}
 810720a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107210:	1c5a      	adds	r2, r3, #1
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	629a      	str	r2, [r3, #40]	@ 0x28
 8107216:	687b      	ldr	r3, [r7, #4]
 8107218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810721a:	2b03      	cmp	r3, #3
 810721c:	d904      	bls.n	8107228 <HAL_ETH_Transmit_IT+0x7c>
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107222:	1f1a      	subs	r2, r3, #4
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	681a      	ldr	r2, [r3, #0]
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	3106      	adds	r1, #6
 8107234:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8107238:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810723c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8107240:	2300      	movs	r3, #0
 8107242:	e000      	b.n	8107246 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8107244:	2301      	movs	r3, #1
  }
}
 8107246:	4618      	mov	r0, r3
 8107248:	3708      	adds	r7, #8
 810724a:	46bd      	mov	sp, r7
 810724c:	bd80      	pop	{r7, pc}

0810724e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 810724e:	b580      	push	{r7, lr}
 8107250:	b088      	sub	sp, #32
 8107252:	af00      	add	r7, sp, #0
 8107254:	6078      	str	r0, [r7, #4]
 8107256:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8107258:	2300      	movs	r3, #0
 810725a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 810725c:	2300      	movs	r3, #0
 810725e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8107260:	683b      	ldr	r3, [r7, #0]
 8107262:	2b00      	cmp	r3, #0
 8107264:	d109      	bne.n	810727a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810726c:	f043 0201 	orr.w	r2, r3, #1
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8107276:	2301      	movs	r3, #1
 8107278:	e0a2      	b.n	81073c0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107280:	2b23      	cmp	r3, #35	@ 0x23
 8107282:	d001      	beq.n	8107288 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8107284:	2301      	movs	r3, #1
 8107286:	e09b      	b.n	81073c0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810728c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810728e:	687b      	ldr	r3, [r7, #4]
 8107290:	69fa      	ldr	r2, [r7, #28]
 8107292:	3212      	adds	r2, #18
 8107294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107298:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810729e:	f1c3 0304 	rsb	r3, r3, #4
 81072a2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81072a4:	e064      	b.n	8107370 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 81072a6:	69bb      	ldr	r3, [r7, #24]
 81072a8:	68db      	ldr	r3, [r3, #12]
 81072aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81072ae:	2b00      	cmp	r3, #0
 81072b0:	d007      	beq.n	81072c2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 81072b2:	69bb      	ldr	r3, [r7, #24]
 81072b4:	685a      	ldr	r2, [r3, #4]
 81072b6:	687b      	ldr	r3, [r7, #4]
 81072b8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 81072ba:	69bb      	ldr	r3, [r7, #24]
 81072bc:	681a      	ldr	r2, [r3, #0]
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 81072c2:	69bb      	ldr	r3, [r7, #24]
 81072c4:	68db      	ldr	r3, [r3, #12]
 81072c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d103      	bne.n	81072d6 <HAL_ETH_ReadData+0x88>
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81072d2:	2b00      	cmp	r3, #0
 81072d4:	d03a      	beq.n	810734c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 81072d6:	69bb      	ldr	r3, [r7, #24]
 81072d8:	68db      	ldr	r3, [r3, #12]
 81072da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072de:	2b00      	cmp	r3, #0
 81072e0:	d005      	beq.n	81072ee <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	2200      	movs	r2, #0
 81072e6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	2200      	movs	r2, #0
 81072ec:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 81072ee:	69bb      	ldr	r3, [r7, #24]
 81072f0:	68db      	ldr	r3, [r3, #12]
 81072f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81072fa:	1ad3      	subs	r3, r2, r3
 81072fc:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 81072fe:	69bb      	ldr	r3, [r7, #24]
 8107300:	68db      	ldr	r3, [r3, #12]
 8107302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8107306:	2b00      	cmp	r3, #0
 8107308:	d005      	beq.n	8107316 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 810730a:	69bb      	ldr	r3, [r7, #24]
 810730c:	68da      	ldr	r2, [r3, #12]
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8107312:	2301      	movs	r3, #1
 8107314:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 810731c:	687b      	ldr	r3, [r7, #4]
 810731e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8107322:	69bb      	ldr	r3, [r7, #24]
 8107324:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8107326:	461a      	mov	r2, r3
 8107328:	68bb      	ldr	r3, [r7, #8]
 810732a:	b29b      	uxth	r3, r3
 810732c:	f008 fcb6 	bl	810fc9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107334:	1c5a      	adds	r2, r3, #1
 8107336:	687b      	ldr	r3, [r7, #4]
 8107338:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 810733a:	687b      	ldr	r3, [r7, #4]
 810733c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810733e:	68bb      	ldr	r3, [r7, #8]
 8107340:	441a      	add	r2, r3
 8107342:	687b      	ldr	r3, [r7, #4]
 8107344:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8107346:	69bb      	ldr	r3, [r7, #24]
 8107348:	2200      	movs	r2, #0
 810734a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 810734c:	69fb      	ldr	r3, [r7, #28]
 810734e:	3301      	adds	r3, #1
 8107350:	61fb      	str	r3, [r7, #28]
 8107352:	69fb      	ldr	r3, [r7, #28]
 8107354:	2b03      	cmp	r3, #3
 8107356:	d902      	bls.n	810735e <HAL_ETH_ReadData+0x110>
 8107358:	69fb      	ldr	r3, [r7, #28]
 810735a:	3b04      	subs	r3, #4
 810735c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 810735e:	687b      	ldr	r3, [r7, #4]
 8107360:	69fa      	ldr	r2, [r7, #28]
 8107362:	3212      	adds	r2, #18
 8107364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107368:	61bb      	str	r3, [r7, #24]
    desccnt++;
 810736a:	697b      	ldr	r3, [r7, #20]
 810736c:	3301      	adds	r3, #1
 810736e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8107370:	69bb      	ldr	r3, [r7, #24]
 8107372:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8107374:	2b00      	cmp	r3, #0
 8107376:	db06      	blt.n	8107386 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8107378:	697a      	ldr	r2, [r7, #20]
 810737a:	68fb      	ldr	r3, [r7, #12]
 810737c:	429a      	cmp	r2, r3
 810737e:	d202      	bcs.n	8107386 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8107380:	7cfb      	ldrb	r3, [r7, #19]
 8107382:	2b00      	cmp	r3, #0
 8107384:	d08f      	beq.n	81072a6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810738a:	697b      	ldr	r3, [r7, #20]
 810738c:	441a      	add	r2, r3
 810738e:	687b      	ldr	r3, [r7, #4]
 8107390:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8107392:	687b      	ldr	r3, [r7, #4]
 8107394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107396:	2b00      	cmp	r3, #0
 8107398:	d002      	beq.n	81073a0 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 810739a:	6878      	ldr	r0, [r7, #4]
 810739c:	f000 f814 	bl	81073c8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	69fa      	ldr	r2, [r7, #28]
 81073a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 81073a6:	7cfb      	ldrb	r3, [r7, #19]
 81073a8:	2b01      	cmp	r3, #1
 81073aa:	d108      	bne.n	81073be <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 81073b0:	683b      	ldr	r3, [r7, #0]
 81073b2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	2200      	movs	r2, #0
 81073b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 81073ba:	2300      	movs	r3, #0
 81073bc:	e000      	b.n	81073c0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 81073be:	2301      	movs	r3, #1
}
 81073c0:	4618      	mov	r0, r3
 81073c2:	3720      	adds	r7, #32
 81073c4:	46bd      	mov	sp, r7
 81073c6:	bd80      	pop	{r7, pc}

081073c8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 81073c8:	b580      	push	{r7, lr}
 81073ca:	b088      	sub	sp, #32
 81073cc:	af00      	add	r7, sp, #0
 81073ce:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 81073d0:	2300      	movs	r3, #0
 81073d2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 81073d4:	2301      	movs	r3, #1
 81073d6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 81073d8:	687b      	ldr	r3, [r7, #4]
 81073da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81073dc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	69fa      	ldr	r2, [r7, #28]
 81073e2:	3212      	adds	r2, #18
 81073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81073e8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81073ee:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 81073f0:	e038      	b.n	8107464 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 81073f2:	697b      	ldr	r3, [r7, #20]
 81073f4:	691b      	ldr	r3, [r3, #16]
 81073f6:	2b00      	cmp	r3, #0
 81073f8:	d112      	bne.n	8107420 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 81073fa:	f107 0308 	add.w	r3, r7, #8
 81073fe:	4618      	mov	r0, r3
 8107400:	f008 fc1c 	bl	810fc3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8107404:	68bb      	ldr	r3, [r7, #8]
 8107406:	2b00      	cmp	r3, #0
 8107408:	d102      	bne.n	8107410 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 810740a:	2300      	movs	r3, #0
 810740c:	74fb      	strb	r3, [r7, #19]
 810740e:	e007      	b.n	8107420 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8107410:	68bb      	ldr	r3, [r7, #8]
 8107412:	461a      	mov	r2, r3
 8107414:	697b      	ldr	r3, [r7, #20]
 8107416:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8107418:	68bb      	ldr	r3, [r7, #8]
 810741a:	461a      	mov	r2, r3
 810741c:	697b      	ldr	r3, [r7, #20]
 810741e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8107420:	7cfb      	ldrb	r3, [r7, #19]
 8107422:	2b00      	cmp	r3, #0
 8107424:	d01e      	beq.n	8107464 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8107426:	687b      	ldr	r3, [r7, #4]
 8107428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810742a:	2b00      	cmp	r3, #0
 810742c:	d004      	beq.n	8107438 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 810742e:	697b      	ldr	r3, [r7, #20]
 8107430:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8107434:	60da      	str	r2, [r3, #12]
 8107436:	e003      	b.n	8107440 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8107438:	697b      	ldr	r3, [r7, #20]
 810743a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 810743e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8107440:	69fb      	ldr	r3, [r7, #28]
 8107442:	3301      	adds	r3, #1
 8107444:	61fb      	str	r3, [r7, #28]
 8107446:	69fb      	ldr	r3, [r7, #28]
 8107448:	2b03      	cmp	r3, #3
 810744a:	d902      	bls.n	8107452 <ETH_UpdateDescriptor+0x8a>
 810744c:	69fb      	ldr	r3, [r7, #28]
 810744e:	3b04      	subs	r3, #4
 8107450:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	69fa      	ldr	r2, [r7, #28]
 8107456:	3212      	adds	r2, #18
 8107458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810745c:	617b      	str	r3, [r7, #20]
      desccount--;
 810745e:	69bb      	ldr	r3, [r7, #24]
 8107460:	3b01      	subs	r3, #1
 8107462:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8107464:	69bb      	ldr	r3, [r7, #24]
 8107466:	2b00      	cmp	r3, #0
 8107468:	d002      	beq.n	8107470 <ETH_UpdateDescriptor+0xa8>
 810746a:	7cfb      	ldrb	r3, [r7, #19]
 810746c:	2b00      	cmp	r3, #0
 810746e:	d1c0      	bne.n	81073f2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107474:	69ba      	ldr	r2, [r7, #24]
 8107476:	429a      	cmp	r2, r3
 8107478:	d01b      	beq.n	81074b2 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 810747a:	69fb      	ldr	r3, [r7, #28]
 810747c:	3301      	adds	r3, #1
 810747e:	f003 0303 	and.w	r3, r3, #3
 8107482:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8107484:	f3bf 8f5f 	dmb	sy
}
 8107488:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	6919      	ldr	r1, [r3, #16]
 810748e:	68fa      	ldr	r2, [r7, #12]
 8107490:	4613      	mov	r3, r2
 8107492:	005b      	lsls	r3, r3, #1
 8107494:	4413      	add	r3, r2
 8107496:	00db      	lsls	r3, r3, #3
 8107498:	18ca      	adds	r2, r1, r3
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	681b      	ldr	r3, [r3, #0]
 810749e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81074a2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	69fa      	ldr	r2, [r7, #28]
 81074aa:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 81074ac:	687b      	ldr	r3, [r7, #4]
 81074ae:	69ba      	ldr	r2, [r7, #24]
 81074b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 81074b2:	bf00      	nop
 81074b4:	3720      	adds	r7, #32
 81074b6:	46bd      	mov	sp, r7
 81074b8:	bd80      	pop	{r7, pc}

081074ba <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 81074ba:	b580      	push	{r7, lr}
 81074bc:	b086      	sub	sp, #24
 81074be:	af00      	add	r7, sp, #0
 81074c0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	3318      	adds	r3, #24
 81074c6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 81074c8:	68bb      	ldr	r3, [r7, #8]
 81074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81074cc:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 81074ce:	68bb      	ldr	r3, [r7, #8]
 81074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81074d2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 81074d4:	2301      	movs	r3, #1
 81074d6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 81074d8:	e047      	b.n	810756a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 81074da:	2301      	movs	r3, #1
 81074dc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 81074de:	697b      	ldr	r3, [r7, #20]
 81074e0:	3b01      	subs	r3, #1
 81074e2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 81074e4:	68ba      	ldr	r2, [r7, #8]
 81074e6:	693b      	ldr	r3, [r7, #16]
 81074e8:	3304      	adds	r3, #4
 81074ea:	009b      	lsls	r3, r3, #2
 81074ec:	4413      	add	r3, r2
 81074ee:	685b      	ldr	r3, [r3, #4]
 81074f0:	2b00      	cmp	r3, #0
 81074f2:	d10a      	bne.n	810750a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 81074f4:	693b      	ldr	r3, [r7, #16]
 81074f6:	3301      	adds	r3, #1
 81074f8:	613b      	str	r3, [r7, #16]
 81074fa:	693b      	ldr	r3, [r7, #16]
 81074fc:	2b03      	cmp	r3, #3
 81074fe:	d902      	bls.n	8107506 <HAL_ETH_ReleaseTxPacket+0x4c>
 8107500:	693b      	ldr	r3, [r7, #16]
 8107502:	3b04      	subs	r3, #4
 8107504:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8107506:	2300      	movs	r3, #0
 8107508:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 810750a:	7bbb      	ldrb	r3, [r7, #14]
 810750c:	2b00      	cmp	r3, #0
 810750e:	d02c      	beq.n	810756a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	68d9      	ldr	r1, [r3, #12]
 8107514:	693a      	ldr	r2, [r7, #16]
 8107516:	4613      	mov	r3, r2
 8107518:	005b      	lsls	r3, r3, #1
 810751a:	4413      	add	r3, r2
 810751c:	00db      	lsls	r3, r3, #3
 810751e:	440b      	add	r3, r1
 8107520:	68db      	ldr	r3, [r3, #12]
 8107522:	2b00      	cmp	r3, #0
 8107524:	db1f      	blt.n	8107566 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8107526:	68ba      	ldr	r2, [r7, #8]
 8107528:	693b      	ldr	r3, [r7, #16]
 810752a:	3304      	adds	r3, #4
 810752c:	009b      	lsls	r3, r3, #2
 810752e:	4413      	add	r3, r2
 8107530:	685b      	ldr	r3, [r3, #4]
 8107532:	4618      	mov	r0, r3
 8107534:	f008 fc1a 	bl	810fd6c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8107538:	68ba      	ldr	r2, [r7, #8]
 810753a:	693b      	ldr	r3, [r7, #16]
 810753c:	3304      	adds	r3, #4
 810753e:	009b      	lsls	r3, r3, #2
 8107540:	4413      	add	r3, r2
 8107542:	2200      	movs	r2, #0
 8107544:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8107546:	693b      	ldr	r3, [r7, #16]
 8107548:	3301      	adds	r3, #1
 810754a:	613b      	str	r3, [r7, #16]
 810754c:	693b      	ldr	r3, [r7, #16]
 810754e:	2b03      	cmp	r3, #3
 8107550:	d902      	bls.n	8107558 <HAL_ETH_ReleaseTxPacket+0x9e>
 8107552:	693b      	ldr	r3, [r7, #16]
 8107554:	3b04      	subs	r3, #4
 8107556:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8107558:	68bb      	ldr	r3, [r7, #8]
 810755a:	697a      	ldr	r2, [r7, #20]
 810755c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 810755e:	68bb      	ldr	r3, [r7, #8]
 8107560:	693a      	ldr	r2, [r7, #16]
 8107562:	62da      	str	r2, [r3, #44]	@ 0x2c
 8107564:	e001      	b.n	810756a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8107566:	2300      	movs	r3, #0
 8107568:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 810756a:	697b      	ldr	r3, [r7, #20]
 810756c:	2b00      	cmp	r3, #0
 810756e:	d002      	beq.n	8107576 <HAL_ETH_ReleaseTxPacket+0xbc>
 8107570:	7bfb      	ldrb	r3, [r7, #15]
 8107572:	2b00      	cmp	r3, #0
 8107574:	d1b1      	bne.n	81074da <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8107576:	2300      	movs	r3, #0
}
 8107578:	4618      	mov	r0, r3
 810757a:	3718      	adds	r7, #24
 810757c:	46bd      	mov	sp, r7
 810757e:	bd80      	pop	{r7, pc}

08107580 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8107580:	b580      	push	{r7, lr}
 8107582:	b088      	sub	sp, #32
 8107584:	af00      	add	r7, sp, #0
 8107586:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8107588:	687b      	ldr	r3, [r7, #4]
 810758a:	681b      	ldr	r3, [r3, #0]
 810758c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107590:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	681b      	ldr	r3, [r3, #0]
 8107596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810759a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810759e:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81075a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81075ac:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 81075ae:	4b77      	ldr	r3, [pc, #476]	@ (810778c <HAL_ETH_IRQHandler+0x20c>)
 81075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81075b2:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 81075b4:	4b76      	ldr	r3, [pc, #472]	@ (8107790 <HAL_ETH_IRQHandler+0x210>)
 81075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81075b8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 81075ba:	69bb      	ldr	r3, [r7, #24]
 81075bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81075c0:	2b00      	cmp	r3, #0
 81075c2:	d010      	beq.n	81075e6 <HAL_ETH_IRQHandler+0x66>
 81075c4:	697b      	ldr	r3, [r7, #20]
 81075c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81075ca:	2b00      	cmp	r3, #0
 81075cc:	d00b      	beq.n	81075e6 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	681b      	ldr	r3, [r3, #0]
 81075d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81075d6:	461a      	mov	r2, r3
 81075d8:	f248 0340 	movw	r3, #32832	@ 0x8040
 81075dc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 81075e0:	6878      	ldr	r0, [r7, #4]
 81075e2:	f007 fead 	bl	810f340 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 81075e6:	69bb      	ldr	r3, [r7, #24]
 81075e8:	f003 0301 	and.w	r3, r3, #1
 81075ec:	2b00      	cmp	r3, #0
 81075ee:	d010      	beq.n	8107612 <HAL_ETH_IRQHandler+0x92>
 81075f0:	697b      	ldr	r3, [r7, #20]
 81075f2:	f003 0301 	and.w	r3, r3, #1
 81075f6:	2b00      	cmp	r3, #0
 81075f8:	d00b      	beq.n	8107612 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 81075fa:	687b      	ldr	r3, [r7, #4]
 81075fc:	681b      	ldr	r3, [r3, #0]
 81075fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107602:	461a      	mov	r2, r3
 8107604:	f248 0301 	movw	r3, #32769	@ 0x8001
 8107608:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 810760c:	6878      	ldr	r0, [r7, #4]
 810760e:	f007 fea7 	bl	810f360 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8107612:	69bb      	ldr	r3, [r7, #24]
 8107614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107618:	2b00      	cmp	r3, #0
 810761a:	d047      	beq.n	81076ac <HAL_ETH_IRQHandler+0x12c>
 810761c:	697b      	ldr	r3, [r7, #20]
 810761e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107622:	2b00      	cmp	r3, #0
 8107624:	d042      	beq.n	81076ac <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810762c:	f043 0208 	orr.w	r2, r3, #8
 8107630:	687b      	ldr	r3, [r7, #4]
 8107632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8107636:	69bb      	ldr	r3, [r7, #24]
 8107638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810763c:	2b00      	cmp	r3, #0
 810763e:	d01e      	beq.n	810767e <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	681b      	ldr	r3, [r3, #0]
 8107644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107648:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 810764c:	f241 1302 	movw	r3, #4354	@ 0x1102
 8107650:	4013      	ands	r3, r2
 8107652:	687a      	ldr	r2, [r7, #4]
 8107654:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107660:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8107664:	687a      	ldr	r2, [r7, #4]
 8107666:	6812      	ldr	r2, [r2, #0]
 8107668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 810766c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107670:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8107674:	687b      	ldr	r3, [r7, #4]
 8107676:	22e0      	movs	r2, #224	@ 0xe0
 8107678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 810767c:	e013      	b.n	81076a6 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107686:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810768a:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810769c:	461a      	mov	r2, r3
 810769e:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 81076a2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 81076a6:	6878      	ldr	r0, [r7, #4]
 81076a8:	f007 fe6a 	bl	810f380 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 81076ac:	69fb      	ldr	r3, [r7, #28]
 81076ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81076b2:	2b00      	cmp	r3, #0
 81076b4:	d104      	bne.n	81076c0 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 81076b6:	69fb      	ldr	r3, [r7, #28]
 81076b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 81076bc:	2b00      	cmp	r3, #0
 81076be:	d019      	beq.n	81076f4 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81076c6:	f043 0210 	orr.w	r2, r3, #16
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	681b      	ldr	r3, [r3, #0]
 81076d4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 81076d8:	687b      	ldr	r3, [r7, #4]
 81076da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	22e0      	movs	r2, #224	@ 0xe0
 81076e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 81076e6:	6878      	ldr	r0, [r7, #4]
 81076e8:	f007 fe4a 	bl	810f380 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 81076ec:	687b      	ldr	r3, [r7, #4]
 81076ee:	2200      	movs	r2, #0
 81076f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 81076f4:	69fb      	ldr	r3, [r7, #28]
 81076f6:	f003 0310 	and.w	r3, r3, #16
 81076fa:	2b00      	cmp	r3, #0
 81076fc:	d00f      	beq.n	810771e <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	681b      	ldr	r3, [r3, #0]
 8107702:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8107706:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810770a:	687b      	ldr	r3, [r7, #4]
 810770c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8107710:	6878      	ldr	r0, [r7, #4]
 8107712:	f000 f83f 	bl	8107794 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8107716:	687b      	ldr	r3, [r7, #4]
 8107718:	2200      	movs	r2, #0
 810771a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 810771e:	69fb      	ldr	r3, [r7, #28]
 8107720:	f003 0320 	and.w	r3, r3, #32
 8107724:	2b00      	cmp	r3, #0
 8107726:	d00f      	beq.n	8107748 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	681b      	ldr	r3, [r3, #0]
 810772c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8107730:	f003 020f 	and.w	r2, r3, #15
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 810773a:	6878      	ldr	r0, [r7, #4]
 810773c:	f000 f834 	bl	81077a8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8107740:	687b      	ldr	r3, [r7, #4]
 8107742:	2200      	movs	r2, #0
 8107744:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8107748:	f7fc fcf6 	bl	8104138 <HAL_GetCurrentCPUID>
 810774c:	4603      	mov	r3, r0
 810774e:	2b03      	cmp	r3, #3
 8107750:	d10c      	bne.n	810776c <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8107752:	693b      	ldr	r3, [r7, #16]
 8107754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107758:	2b00      	cmp	r3, #0
 810775a:	d013      	beq.n	8107784 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810775c:	4b0b      	ldr	r3, [pc, #44]	@ (810778c <HAL_ETH_IRQHandler+0x20c>)
 810775e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8107762:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8107764:	6878      	ldr	r0, [r7, #4]
 8107766:	f000 f829 	bl	81077bc <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 810776a:	e00b      	b.n	8107784 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810776c:	68fb      	ldr	r3, [r7, #12]
 810776e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107772:	2b00      	cmp	r3, #0
 8107774:	d006      	beq.n	8107784 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8107776:	4b06      	ldr	r3, [pc, #24]	@ (8107790 <HAL_ETH_IRQHandler+0x210>)
 8107778:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810777c:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 810777e:	6878      	ldr	r0, [r7, #4]
 8107780:	f000 f81c 	bl	81077bc <HAL_ETH_WakeUpCallback>
}
 8107784:	bf00      	nop
 8107786:	3720      	adds	r7, #32
 8107788:	46bd      	mov	sp, r7
 810778a:	bd80      	pop	{r7, pc}
 810778c:	58000080 	.word	0x58000080
 8107790:	580000c0 	.word	0x580000c0

08107794 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8107794:	b480      	push	{r7}
 8107796:	b083      	sub	sp, #12
 8107798:	af00      	add	r7, sp, #0
 810779a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 810779c:	bf00      	nop
 810779e:	370c      	adds	r7, #12
 81077a0:	46bd      	mov	sp, r7
 81077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077a6:	4770      	bx	lr

081077a8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 81077a8:	b480      	push	{r7}
 81077aa:	b083      	sub	sp, #12
 81077ac:	af00      	add	r7, sp, #0
 81077ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 81077b0:	bf00      	nop
 81077b2:	370c      	adds	r7, #12
 81077b4:	46bd      	mov	sp, r7
 81077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077ba:	4770      	bx	lr

081077bc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 81077bc:	b480      	push	{r7}
 81077be:	b083      	sub	sp, #12
 81077c0:	af00      	add	r7, sp, #0
 81077c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 81077c4:	bf00      	nop
 81077c6:	370c      	adds	r7, #12
 81077c8:	46bd      	mov	sp, r7
 81077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077ce:	4770      	bx	lr

081077d0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 81077d0:	b580      	push	{r7, lr}
 81077d2:	b086      	sub	sp, #24
 81077d4:	af00      	add	r7, sp, #0
 81077d6:	60f8      	str	r0, [r7, #12]
 81077d8:	60b9      	str	r1, [r7, #8]
 81077da:	607a      	str	r2, [r7, #4]
 81077dc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 81077de:	68fb      	ldr	r3, [r7, #12]
 81077e0:	681b      	ldr	r3, [r3, #0]
 81077e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81077e6:	f003 0301 	and.w	r3, r3, #1
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d001      	beq.n	81077f2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 81077ee:	2301      	movs	r3, #1
 81077f0:	e03e      	b.n	8107870 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 81077f2:	68fb      	ldr	r3, [r7, #12]
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81077fa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 81077fc:	697b      	ldr	r3, [r7, #20]
 81077fe:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8107802:	68bb      	ldr	r3, [r7, #8]
 8107804:	055b      	lsls	r3, r3, #21
 8107806:	4313      	orrs	r3, r2
 8107808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810780a:	697b      	ldr	r3, [r7, #20]
 810780c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	041b      	lsls	r3, r3, #16
 8107814:	4313      	orrs	r3, r2
 8107816:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8107818:	697b      	ldr	r3, [r7, #20]
 810781a:	f043 030c 	orr.w	r3, r3, #12
 810781e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8107820:	697b      	ldr	r3, [r7, #20]
 8107822:	f043 0301 	orr.w	r3, r3, #1
 8107826:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8107828:	68fb      	ldr	r3, [r7, #12]
 810782a:	681b      	ldr	r3, [r3, #0]
 810782c:	697a      	ldr	r2, [r7, #20]
 810782e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8107832:	f7fb f87b 	bl	810292c <HAL_GetTick>
 8107836:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107838:	e009      	b.n	810784e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810783a:	f7fb f877 	bl	810292c <HAL_GetTick>
 810783e:	4602      	mov	r2, r0
 8107840:	693b      	ldr	r3, [r7, #16]
 8107842:	1ad3      	subs	r3, r2, r3
 8107844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8107848:	d901      	bls.n	810784e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810784a:	2301      	movs	r3, #1
 810784c:	e010      	b.n	8107870 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810784e:	68fb      	ldr	r3, [r7, #12]
 8107850:	681b      	ldr	r3, [r3, #0]
 8107852:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107856:	f003 0301 	and.w	r3, r3, #1
 810785a:	2b00      	cmp	r3, #0
 810785c:	d1ed      	bne.n	810783a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810785e:	68fb      	ldr	r3, [r7, #12]
 8107860:	681b      	ldr	r3, [r3, #0]
 8107862:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8107866:	b29b      	uxth	r3, r3
 8107868:	461a      	mov	r2, r3
 810786a:	683b      	ldr	r3, [r7, #0]
 810786c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810786e:	2300      	movs	r3, #0
}
 8107870:	4618      	mov	r0, r3
 8107872:	3718      	adds	r7, #24
 8107874:	46bd      	mov	sp, r7
 8107876:	bd80      	pop	{r7, pc}

08107878 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8107878:	b580      	push	{r7, lr}
 810787a:	b086      	sub	sp, #24
 810787c:	af00      	add	r7, sp, #0
 810787e:	60f8      	str	r0, [r7, #12]
 8107880:	60b9      	str	r1, [r7, #8]
 8107882:	607a      	str	r2, [r7, #4]
 8107884:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8107886:	68fb      	ldr	r3, [r7, #12]
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810788e:	f003 0301 	and.w	r3, r3, #1
 8107892:	2b00      	cmp	r3, #0
 8107894:	d001      	beq.n	810789a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8107896:	2301      	movs	r3, #1
 8107898:	e03c      	b.n	8107914 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810789a:	68fb      	ldr	r3, [r7, #12]
 810789c:	681b      	ldr	r3, [r3, #0]
 810789e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81078a2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 81078a4:	697b      	ldr	r3, [r7, #20]
 81078a6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 81078aa:	68bb      	ldr	r3, [r7, #8]
 81078ac:	055b      	lsls	r3, r3, #21
 81078ae:	4313      	orrs	r3, r2
 81078b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 81078b2:	697b      	ldr	r3, [r7, #20]
 81078b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 81078b8:	687b      	ldr	r3, [r7, #4]
 81078ba:	041b      	lsls	r3, r3, #16
 81078bc:	4313      	orrs	r3, r2
 81078be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 81078c0:	697b      	ldr	r3, [r7, #20]
 81078c2:	f023 030c 	bic.w	r3, r3, #12
 81078c6:	f043 0304 	orr.w	r3, r3, #4
 81078ca:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 81078cc:	697b      	ldr	r3, [r7, #20]
 81078ce:	f043 0301 	orr.w	r3, r3, #1
 81078d2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 81078d4:	683b      	ldr	r3, [r7, #0]
 81078d6:	b29a      	uxth	r2, r3
 81078d8:	4b10      	ldr	r3, [pc, #64]	@ (810791c <HAL_ETH_WritePHYRegister+0xa4>)
 81078da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 81078de:	4a0f      	ldr	r2, [pc, #60]	@ (810791c <HAL_ETH_WritePHYRegister+0xa4>)
 81078e0:	697b      	ldr	r3, [r7, #20]
 81078e2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 81078e6:	f7fb f821 	bl	810292c <HAL_GetTick>
 81078ea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81078ec:	e009      	b.n	8107902 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 81078ee:	f7fb f81d 	bl	810292c <HAL_GetTick>
 81078f2:	4602      	mov	r2, r0
 81078f4:	693b      	ldr	r3, [r7, #16]
 81078f6:	1ad3      	subs	r3, r2, r3
 81078f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81078fc:	d901      	bls.n	8107902 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 81078fe:	2301      	movs	r3, #1
 8107900:	e008      	b.n	8107914 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107902:	68fb      	ldr	r3, [r7, #12]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810790a:	f003 0301 	and.w	r3, r3, #1
 810790e:	2b00      	cmp	r3, #0
 8107910:	d1ed      	bne.n	81078ee <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8107912:	2300      	movs	r3, #0
}
 8107914:	4618      	mov	r0, r3
 8107916:	3718      	adds	r7, #24
 8107918:	46bd      	mov	sp, r7
 810791a:	bd80      	pop	{r7, pc}
 810791c:	40028000 	.word	0x40028000

08107920 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8107920:	b480      	push	{r7}
 8107922:	b083      	sub	sp, #12
 8107924:	af00      	add	r7, sp, #0
 8107926:	6078      	str	r0, [r7, #4]
 8107928:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810792a:	683b      	ldr	r3, [r7, #0]
 810792c:	2b00      	cmp	r3, #0
 810792e:	d101      	bne.n	8107934 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8107930:	2301      	movs	r3, #1
 8107932:	e1c3      	b.n	8107cbc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8107934:	687b      	ldr	r3, [r7, #4]
 8107936:	681b      	ldr	r3, [r3, #0]
 8107938:	681b      	ldr	r3, [r3, #0]
 810793a:	f003 020c 	and.w	r2, r3, #12
 810793e:	683b      	ldr	r3, [r7, #0]
 8107940:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8107942:	687b      	ldr	r3, [r7, #4]
 8107944:	681b      	ldr	r3, [r3, #0]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	f003 0310 	and.w	r3, r3, #16
 810794c:	2b00      	cmp	r3, #0
 810794e:	bf14      	ite	ne
 8107950:	2301      	movne	r3, #1
 8107952:	2300      	moveq	r3, #0
 8107954:	b2db      	uxtb	r3, r3
 8107956:	461a      	mov	r2, r3
 8107958:	683b      	ldr	r3, [r7, #0]
 810795a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810795e:	687b      	ldr	r3, [r7, #4]
 8107960:	681b      	ldr	r3, [r3, #0]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8107968:	683b      	ldr	r3, [r7, #0]
 810796a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	681b      	ldr	r3, [r3, #0]
 8107970:	681b      	ldr	r3, [r3, #0]
 8107972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107976:	2b00      	cmp	r3, #0
 8107978:	bf0c      	ite	eq
 810797a:	2301      	moveq	r3, #1
 810797c:	2300      	movne	r3, #0
 810797e:	b2db      	uxtb	r3, r3
 8107980:	461a      	mov	r2, r3
 8107982:	683b      	ldr	r3, [r7, #0]
 8107984:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8107988:	687b      	ldr	r3, [r7, #4]
 810798a:	681b      	ldr	r3, [r3, #0]
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8107992:	2b00      	cmp	r3, #0
 8107994:	bf14      	ite	ne
 8107996:	2301      	movne	r3, #1
 8107998:	2300      	moveq	r3, #0
 810799a:	b2db      	uxtb	r3, r3
 810799c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810799e:	683b      	ldr	r3, [r7, #0]
 81079a0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	681b      	ldr	r3, [r3, #0]
 81079a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81079ac:	2b00      	cmp	r3, #0
 81079ae:	bf0c      	ite	eq
 81079b0:	2301      	moveq	r3, #1
 81079b2:	2300      	movne	r3, #0
 81079b4:	b2db      	uxtb	r3, r3
 81079b6:	461a      	mov	r2, r3
 81079b8:	683b      	ldr	r3, [r7, #0]
 81079ba:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81079bc:	687b      	ldr	r3, [r7, #4]
 81079be:	681b      	ldr	r3, [r3, #0]
 81079c0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 81079c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81079c6:	2b00      	cmp	r3, #0
 81079c8:	bf14      	ite	ne
 81079ca:	2301      	movne	r3, #1
 81079cc:	2300      	moveq	r3, #0
 81079ce:	b2db      	uxtb	r3, r3
 81079d0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81079d2:	683b      	ldr	r3, [r7, #0]
 81079d4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 81079d6:	687b      	ldr	r3, [r7, #4]
 81079d8:	681b      	ldr	r3, [r3, #0]
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	bf14      	ite	ne
 81079e4:	2301      	movne	r3, #1
 81079e6:	2300      	moveq	r3, #0
 81079e8:	b2db      	uxtb	r3, r3
 81079ea:	461a      	mov	r2, r3
 81079ec:	683b      	ldr	r3, [r7, #0]
 81079ee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	681b      	ldr	r3, [r3, #0]
 81079f4:	681b      	ldr	r3, [r3, #0]
 81079f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 81079fa:	683b      	ldr	r3, [r7, #0]
 81079fc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	681b      	ldr	r3, [r3, #0]
 8107a02:	681b      	ldr	r3, [r3, #0]
 8107a04:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8107a08:	683b      	ldr	r3, [r7, #0]
 8107a0a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	681b      	ldr	r3, [r3, #0]
 8107a10:	681b      	ldr	r3, [r3, #0]
 8107a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107a16:	2b00      	cmp	r3, #0
 8107a18:	bf14      	ite	ne
 8107a1a:	2301      	movne	r3, #1
 8107a1c:	2300      	moveq	r3, #0
 8107a1e:	b2db      	uxtb	r3, r3
 8107a20:	461a      	mov	r2, r3
 8107a22:	683b      	ldr	r3, [r7, #0]
 8107a24:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107a30:	2b00      	cmp	r3, #0
 8107a32:	bf0c      	ite	eq
 8107a34:	2301      	moveq	r3, #1
 8107a36:	2300      	movne	r3, #0
 8107a38:	b2db      	uxtb	r3, r3
 8107a3a:	461a      	mov	r2, r3
 8107a3c:	683b      	ldr	r3, [r7, #0]
 8107a3e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	681b      	ldr	r3, [r3, #0]
 8107a44:	681b      	ldr	r3, [r3, #0]
 8107a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8107a4a:	2b00      	cmp	r3, #0
 8107a4c:	bf0c      	ite	eq
 8107a4e:	2301      	moveq	r3, #1
 8107a50:	2300      	movne	r3, #0
 8107a52:	b2db      	uxtb	r3, r3
 8107a54:	461a      	mov	r2, r3
 8107a56:	683b      	ldr	r3, [r7, #0]
 8107a58:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	681b      	ldr	r3, [r3, #0]
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8107a64:	2b00      	cmp	r3, #0
 8107a66:	bf14      	ite	ne
 8107a68:	2301      	movne	r3, #1
 8107a6a:	2300      	moveq	r3, #0
 8107a6c:	b2db      	uxtb	r3, r3
 8107a6e:	461a      	mov	r2, r3
 8107a70:	683b      	ldr	r3, [r7, #0]
 8107a72:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	681b      	ldr	r3, [r3, #0]
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	bf14      	ite	ne
 8107a82:	2301      	movne	r3, #1
 8107a84:	2300      	moveq	r3, #0
 8107a86:	b2db      	uxtb	r3, r3
 8107a88:	461a      	mov	r2, r3
 8107a8a:	683b      	ldr	r3, [r7, #0]
 8107a8c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8107a8e:	687b      	ldr	r3, [r7, #4]
 8107a90:	681b      	ldr	r3, [r3, #0]
 8107a92:	681b      	ldr	r3, [r3, #0]
 8107a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107a98:	2b00      	cmp	r3, #0
 8107a9a:	bf14      	ite	ne
 8107a9c:	2301      	movne	r3, #1
 8107a9e:	2300      	moveq	r3, #0
 8107aa0:	b2db      	uxtb	r3, r3
 8107aa2:	461a      	mov	r2, r3
 8107aa4:	683b      	ldr	r3, [r7, #0]
 8107aa6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	681b      	ldr	r3, [r3, #0]
 8107aac:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8107aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8107ab2:	2b00      	cmp	r3, #0
 8107ab4:	bf14      	ite	ne
 8107ab6:	2301      	movne	r3, #1
 8107ab8:	2300      	moveq	r3, #0
 8107aba:	b2db      	uxtb	r3, r3
 8107abc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8107abe:	683b      	ldr	r3, [r7, #0]
 8107ac0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	681b      	ldr	r3, [r3, #0]
 8107ac6:	681b      	ldr	r3, [r3, #0]
 8107ac8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8107acc:	683b      	ldr	r3, [r7, #0]
 8107ace:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	681b      	ldr	r3, [r3, #0]
 8107ad4:	681b      	ldr	r3, [r3, #0]
 8107ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107ada:	2b00      	cmp	r3, #0
 8107adc:	bf14      	ite	ne
 8107ade:	2301      	movne	r3, #1
 8107ae0:	2300      	moveq	r3, #0
 8107ae2:	b2db      	uxtb	r3, r3
 8107ae4:	461a      	mov	r2, r3
 8107ae6:	683b      	ldr	r3, [r7, #0]
 8107ae8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	681b      	ldr	r3, [r3, #0]
 8107af0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8107af4:	683b      	ldr	r3, [r7, #0]
 8107af6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	681b      	ldr	r3, [r3, #0]
 8107afc:	685b      	ldr	r3, [r3, #4]
 8107afe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8107b02:	683b      	ldr	r3, [r7, #0]
 8107b04:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	685b      	ldr	r3, [r3, #4]
 8107b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107b10:	2b00      	cmp	r3, #0
 8107b12:	bf0c      	ite	eq
 8107b14:	2301      	moveq	r3, #1
 8107b16:	2300      	movne	r3, #0
 8107b18:	b2db      	uxtb	r3, r3
 8107b1a:	461a      	mov	r2, r3
 8107b1c:	683b      	ldr	r3, [r7, #0]
 8107b1e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8107b22:	687b      	ldr	r3, [r7, #4]
 8107b24:	681b      	ldr	r3, [r3, #0]
 8107b26:	685b      	ldr	r3, [r3, #4]
 8107b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107b2c:	2b00      	cmp	r3, #0
 8107b2e:	bf14      	ite	ne
 8107b30:	2301      	movne	r3, #1
 8107b32:	2300      	moveq	r3, #0
 8107b34:	b2db      	uxtb	r3, r3
 8107b36:	461a      	mov	r2, r3
 8107b38:	683b      	ldr	r3, [r7, #0]
 8107b3a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	681b      	ldr	r3, [r3, #0]
 8107b42:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8107b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8107b48:	2b00      	cmp	r3, #0
 8107b4a:	bf14      	ite	ne
 8107b4c:	2301      	movne	r3, #1
 8107b4e:	2300      	moveq	r3, #0
 8107b50:	b2db      	uxtb	r3, r3
 8107b52:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8107b54:	683b      	ldr	r3, [r7, #0]
 8107b56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8107b5a:	687b      	ldr	r3, [r7, #4]
 8107b5c:	681b      	ldr	r3, [r3, #0]
 8107b5e:	685b      	ldr	r3, [r3, #4]
 8107b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8107b64:	2b00      	cmp	r3, #0
 8107b66:	bf14      	ite	ne
 8107b68:	2301      	movne	r3, #1
 8107b6a:	2300      	moveq	r3, #0
 8107b6c:	b2db      	uxtb	r3, r3
 8107b6e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8107b70:	683b      	ldr	r3, [r7, #0]
 8107b72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	685b      	ldr	r3, [r3, #4]
 8107b7c:	0e5b      	lsrs	r3, r3, #25
 8107b7e:	f003 021f 	and.w	r2, r3, #31
 8107b82:	683b      	ldr	r3, [r7, #0]
 8107b84:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	681b      	ldr	r3, [r3, #0]
 8107b8a:	68db      	ldr	r3, [r3, #12]
 8107b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107b90:	2b00      	cmp	r3, #0
 8107b92:	bf14      	ite	ne
 8107b94:	2301      	movne	r3, #1
 8107b96:	2300      	moveq	r3, #0
 8107b98:	b2db      	uxtb	r3, r3
 8107b9a:	461a      	mov	r2, r3
 8107b9c:	683b      	ldr	r3, [r7, #0]
 8107b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	68db      	ldr	r3, [r3, #12]
 8107ba8:	f003 020f 	and.w	r2, r3, #15
 8107bac:	683b      	ldr	r3, [r7, #0]
 8107bae:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107bb6:	f003 0302 	and.w	r3, r3, #2
 8107bba:	2b00      	cmp	r3, #0
 8107bbc:	bf14      	ite	ne
 8107bbe:	2301      	movne	r3, #1
 8107bc0:	2300      	moveq	r3, #0
 8107bc2:	b2db      	uxtb	r3, r3
 8107bc4:	461a      	mov	r2, r3
 8107bc6:	683b      	ldr	r3, [r7, #0]
 8107bc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	681b      	ldr	r3, [r3, #0]
 8107bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	bf0c      	ite	eq
 8107bda:	2301      	moveq	r3, #1
 8107bdc:	2300      	movne	r3, #0
 8107bde:	b2db      	uxtb	r3, r3
 8107be0:	461a      	mov	r2, r3
 8107be2:	683b      	ldr	r3, [r7, #0]
 8107be4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	681b      	ldr	r3, [r3, #0]
 8107bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107bee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8107bf2:	683b      	ldr	r3, [r7, #0]
 8107bf4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	681b      	ldr	r3, [r3, #0]
 8107bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107bfc:	0c1b      	lsrs	r3, r3, #16
 8107bfe:	b29a      	uxth	r2, r3
 8107c00:	683b      	ldr	r3, [r7, #0]
 8107c02:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	681b      	ldr	r3, [r3, #0]
 8107c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107c0c:	f003 0301 	and.w	r3, r3, #1
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	bf14      	ite	ne
 8107c14:	2301      	movne	r3, #1
 8107c16:	2300      	moveq	r3, #0
 8107c18:	b2db      	uxtb	r3, r3
 8107c1a:	461a      	mov	r2, r3
 8107c1c:	683b      	ldr	r3, [r7, #0]
 8107c1e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	681b      	ldr	r3, [r3, #0]
 8107c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107c2a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8107c2e:	2b00      	cmp	r3, #0
 8107c30:	bf14      	ite	ne
 8107c32:	2301      	movne	r3, #1
 8107c34:	2300      	moveq	r3, #0
 8107c36:	b2db      	uxtb	r3, r3
 8107c38:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8107c3a:	683b      	ldr	r3, [r7, #0]
 8107c3c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8107c48:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8107c4c:	683b      	ldr	r3, [r7, #0]
 8107c4e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8107c58:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8107c5c:	683b      	ldr	r3, [r7, #0]
 8107c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8107c68:	f003 0308 	and.w	r3, r3, #8
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	bf14      	ite	ne
 8107c70:	2301      	movne	r3, #1
 8107c72:	2300      	moveq	r3, #0
 8107c74:	b2db      	uxtb	r3, r3
 8107c76:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8107c78:	683b      	ldr	r3, [r7, #0]
 8107c7a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	681b      	ldr	r3, [r3, #0]
 8107c82:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8107c86:	f003 0310 	and.w	r3, r3, #16
 8107c8a:	2b00      	cmp	r3, #0
 8107c8c:	bf14      	ite	ne
 8107c8e:	2301      	movne	r3, #1
 8107c90:	2300      	moveq	r3, #0
 8107c92:	b2db      	uxtb	r3, r3
 8107c94:	461a      	mov	r2, r3
 8107c96:	683b      	ldr	r3, [r7, #0]
 8107c98:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8107ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	bf0c      	ite	eq
 8107cac:	2301      	moveq	r3, #1
 8107cae:	2300      	movne	r3, #0
 8107cb0:	b2db      	uxtb	r3, r3
 8107cb2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8107cb4:	683b      	ldr	r3, [r7, #0]
 8107cb6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8107cba:	2300      	movs	r3, #0
}
 8107cbc:	4618      	mov	r0, r3
 8107cbe:	370c      	adds	r7, #12
 8107cc0:	46bd      	mov	sp, r7
 8107cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cc6:	4770      	bx	lr

08107cc8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8107cc8:	b580      	push	{r7, lr}
 8107cca:	b082      	sub	sp, #8
 8107ccc:	af00      	add	r7, sp, #0
 8107cce:	6078      	str	r0, [r7, #4]
 8107cd0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8107cd2:	683b      	ldr	r3, [r7, #0]
 8107cd4:	2b00      	cmp	r3, #0
 8107cd6:	d101      	bne.n	8107cdc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8107cd8:	2301      	movs	r3, #1
 8107cda:	e00b      	b.n	8107cf4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8107cdc:	687b      	ldr	r3, [r7, #4]
 8107cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107ce2:	2b10      	cmp	r3, #16
 8107ce4:	d105      	bne.n	8107cf2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8107ce6:	6839      	ldr	r1, [r7, #0]
 8107ce8:	6878      	ldr	r0, [r7, #4]
 8107cea:	f000 f871 	bl	8107dd0 <ETH_SetMACConfig>

    return HAL_OK;
 8107cee:	2300      	movs	r3, #0
 8107cf0:	e000      	b.n	8107cf4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8107cf2:	2301      	movs	r3, #1
  }
}
 8107cf4:	4618      	mov	r0, r3
 8107cf6:	3708      	adds	r7, #8
 8107cf8:	46bd      	mov	sp, r7
 8107cfa:	bd80      	pop	{r7, pc}

08107cfc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8107cfc:	b580      	push	{r7, lr}
 8107cfe:	b084      	sub	sp, #16
 8107d00:	af00      	add	r7, sp, #0
 8107d02:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	681b      	ldr	r3, [r3, #0]
 8107d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107d0c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8107d0e:	68fb      	ldr	r3, [r7, #12]
 8107d10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107d14:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8107d16:	f001 ffbd 	bl	8109c94 <HAL_RCC_GetHCLKFreq>
 8107d1a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8107d1c:	68bb      	ldr	r3, [r7, #8]
 8107d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8107d88 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8107d20:	4293      	cmp	r3, r2
 8107d22:	d804      	bhi.n	8107d2e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8107d24:	68fb      	ldr	r3, [r7, #12]
 8107d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8107d2a:	60fb      	str	r3, [r7, #12]
 8107d2c:	e022      	b.n	8107d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8107d2e:	68bb      	ldr	r3, [r7, #8]
 8107d30:	4a16      	ldr	r2, [pc, #88]	@ (8107d8c <HAL_ETH_SetMDIOClockRange+0x90>)
 8107d32:	4293      	cmp	r3, r2
 8107d34:	d204      	bcs.n	8107d40 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8107d36:	68fb      	ldr	r3, [r7, #12]
 8107d38:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8107d3c:	60fb      	str	r3, [r7, #12]
 8107d3e:	e019      	b.n	8107d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8107d40:	68bb      	ldr	r3, [r7, #8]
 8107d42:	4a13      	ldr	r2, [pc, #76]	@ (8107d90 <HAL_ETH_SetMDIOClockRange+0x94>)
 8107d44:	4293      	cmp	r3, r2
 8107d46:	d915      	bls.n	8107d74 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8107d48:	68bb      	ldr	r3, [r7, #8]
 8107d4a:	4a12      	ldr	r2, [pc, #72]	@ (8107d94 <HAL_ETH_SetMDIOClockRange+0x98>)
 8107d4c:	4293      	cmp	r3, r2
 8107d4e:	d804      	bhi.n	8107d5a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8107d50:	68fb      	ldr	r3, [r7, #12]
 8107d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107d56:	60fb      	str	r3, [r7, #12]
 8107d58:	e00c      	b.n	8107d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8107d5a:	68bb      	ldr	r3, [r7, #8]
 8107d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8107d98 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8107d5e:	4293      	cmp	r3, r2
 8107d60:	d804      	bhi.n	8107d6c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8107d62:	68fb      	ldr	r3, [r7, #12]
 8107d64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8107d68:	60fb      	str	r3, [r7, #12]
 8107d6a:	e003      	b.n	8107d74 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8107d6c:	68fb      	ldr	r3, [r7, #12]
 8107d6e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8107d72:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	681b      	ldr	r3, [r3, #0]
 8107d78:	68fa      	ldr	r2, [r7, #12]
 8107d7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8107d7e:	bf00      	nop
 8107d80:	3710      	adds	r7, #16
 8107d82:	46bd      	mov	sp, r7
 8107d84:	bd80      	pop	{r7, pc}
 8107d86:	bf00      	nop
 8107d88:	02160ebf 	.word	0x02160ebf
 8107d8c:	03938700 	.word	0x03938700
 8107d90:	05f5e0ff 	.word	0x05f5e0ff
 8107d94:	08f0d17f 	.word	0x08f0d17f
 8107d98:	0ee6b27f 	.word	0x0ee6b27f

08107d9c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8107d9c:	b480      	push	{r7}
 8107d9e:	b083      	sub	sp, #12
 8107da0:	af00      	add	r7, sp, #0
 8107da2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8107daa:	4618      	mov	r0, r3
 8107dac:	370c      	adds	r7, #12
 8107dae:	46bd      	mov	sp, r7
 8107db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107db4:	4770      	bx	lr

08107db6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8107db6:	b480      	push	{r7}
 8107db8:	b083      	sub	sp, #12
 8107dba:	af00      	add	r7, sp, #0
 8107dbc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8107dc4:	4618      	mov	r0, r3
 8107dc6:	370c      	adds	r7, #12
 8107dc8:	46bd      	mov	sp, r7
 8107dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dce:	4770      	bx	lr

08107dd0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8107dd0:	b480      	push	{r7}
 8107dd2:	b085      	sub	sp, #20
 8107dd4:	af00      	add	r7, sp, #0
 8107dd6:	6078      	str	r0, [r7, #4]
 8107dd8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8107dda:	683b      	ldr	r3, [r7, #0]
 8107ddc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8107dde:	683b      	ldr	r3, [r7, #0]
 8107de0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8107de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8107de4:	683b      	ldr	r3, [r7, #0]
 8107de6:	791b      	ldrb	r3, [r3, #4]
 8107de8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8107dea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8107dec:	683b      	ldr	r3, [r7, #0]
 8107dee:	7b1b      	ldrb	r3, [r3, #12]
 8107df0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8107df2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8107df4:	683b      	ldr	r3, [r7, #0]
 8107df6:	7b5b      	ldrb	r3, [r3, #13]
 8107df8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8107dfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8107dfc:	683b      	ldr	r3, [r7, #0]
 8107dfe:	7b9b      	ldrb	r3, [r3, #14]
 8107e00:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8107e02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8107e04:	683b      	ldr	r3, [r7, #0]
 8107e06:	7bdb      	ldrb	r3, [r3, #15]
 8107e08:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8107e0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8107e0c:	683a      	ldr	r2, [r7, #0]
 8107e0e:	7c12      	ldrb	r2, [r2, #16]
 8107e10:	2a00      	cmp	r2, #0
 8107e12:	d102      	bne.n	8107e1a <ETH_SetMACConfig+0x4a>
 8107e14:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8107e18:	e000      	b.n	8107e1c <ETH_SetMACConfig+0x4c>
 8107e1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8107e1c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8107e1e:	683a      	ldr	r2, [r7, #0]
 8107e20:	7c52      	ldrb	r2, [r2, #17]
 8107e22:	2a00      	cmp	r2, #0
 8107e24:	d102      	bne.n	8107e2c <ETH_SetMACConfig+0x5c>
 8107e26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8107e2a:	e000      	b.n	8107e2e <ETH_SetMACConfig+0x5e>
 8107e2c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8107e2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8107e30:	683b      	ldr	r3, [r7, #0]
 8107e32:	7c9b      	ldrb	r3, [r3, #18]
 8107e34:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8107e36:	431a      	orrs	r2, r3
               macconf->Speed |
 8107e38:	683b      	ldr	r3, [r7, #0]
 8107e3a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8107e3c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8107e3e:	683b      	ldr	r3, [r7, #0]
 8107e40:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8107e42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8107e44:	683b      	ldr	r3, [r7, #0]
 8107e46:	7f1b      	ldrb	r3, [r3, #28]
 8107e48:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8107e4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8107e4c:	683b      	ldr	r3, [r7, #0]
 8107e4e:	7f5b      	ldrb	r3, [r3, #29]
 8107e50:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8107e52:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8107e54:	683a      	ldr	r2, [r7, #0]
 8107e56:	7f92      	ldrb	r2, [r2, #30]
 8107e58:	2a00      	cmp	r2, #0
 8107e5a:	d102      	bne.n	8107e62 <ETH_SetMACConfig+0x92>
 8107e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8107e60:	e000      	b.n	8107e64 <ETH_SetMACConfig+0x94>
 8107e62:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8107e64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8107e66:	683b      	ldr	r3, [r7, #0]
 8107e68:	7fdb      	ldrb	r3, [r3, #31]
 8107e6a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8107e6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8107e6e:	683a      	ldr	r2, [r7, #0]
 8107e70:	f892 2020 	ldrb.w	r2, [r2, #32]
 8107e74:	2a00      	cmp	r2, #0
 8107e76:	d102      	bne.n	8107e7e <ETH_SetMACConfig+0xae>
 8107e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107e7c:	e000      	b.n	8107e80 <ETH_SetMACConfig+0xb0>
 8107e7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8107e80:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8107e82:	683b      	ldr	r3, [r7, #0]
 8107e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8107e86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8107e88:	683b      	ldr	r3, [r7, #0]
 8107e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107e8e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8107e90:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8107e92:	683b      	ldr	r3, [r7, #0]
 8107e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8107e96:	4313      	orrs	r3, r2
 8107e98:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	681a      	ldr	r2, [r3, #0]
 8107ea0:	4b56      	ldr	r3, [pc, #344]	@ (8107ffc <ETH_SetMACConfig+0x22c>)
 8107ea2:	4013      	ands	r3, r2
 8107ea4:	687a      	ldr	r2, [r7, #4]
 8107ea6:	6812      	ldr	r2, [r2, #0]
 8107ea8:	68f9      	ldr	r1, [r7, #12]
 8107eaa:	430b      	orrs	r3, r1
 8107eac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8107eae:	683b      	ldr	r3, [r7, #0]
 8107eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107eb2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8107eb4:	683b      	ldr	r3, [r7, #0]
 8107eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8107eba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8107ebc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8107ebe:	683b      	ldr	r3, [r7, #0]
 8107ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8107ec4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8107ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8107ec8:	683b      	ldr	r3, [r7, #0]
 8107eca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8107ece:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8107ed0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8107ed2:	683a      	ldr	r2, [r7, #0]
 8107ed4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8107ed8:	2a00      	cmp	r2, #0
 8107eda:	d102      	bne.n	8107ee2 <ETH_SetMACConfig+0x112>
 8107edc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8107ee0:	e000      	b.n	8107ee4 <ETH_SetMACConfig+0x114>
 8107ee2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8107ee4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8107ee6:	683b      	ldr	r3, [r7, #0]
 8107ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8107eea:	4313      	orrs	r3, r2
 8107eec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	685a      	ldr	r2, [r3, #4]
 8107ef4:	4b42      	ldr	r3, [pc, #264]	@ (8108000 <ETH_SetMACConfig+0x230>)
 8107ef6:	4013      	ands	r3, r2
 8107ef8:	687a      	ldr	r2, [r7, #4]
 8107efa:	6812      	ldr	r2, [r2, #0]
 8107efc:	68f9      	ldr	r1, [r7, #12]
 8107efe:	430b      	orrs	r3, r1
 8107f00:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8107f02:	683b      	ldr	r3, [r7, #0]
 8107f04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107f08:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8107f0a:	683b      	ldr	r3, [r7, #0]
 8107f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8107f0e:	4313      	orrs	r3, r2
 8107f10:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	68da      	ldr	r2, [r3, #12]
 8107f18:	4b3a      	ldr	r3, [pc, #232]	@ (8108004 <ETH_SetMACConfig+0x234>)
 8107f1a:	4013      	ands	r3, r2
 8107f1c:	687a      	ldr	r2, [r7, #4]
 8107f1e:	6812      	ldr	r2, [r2, #0]
 8107f20:	68f9      	ldr	r1, [r7, #12]
 8107f22:	430b      	orrs	r3, r1
 8107f24:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8107f26:	683b      	ldr	r3, [r7, #0]
 8107f28:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8107f2c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8107f2e:	683b      	ldr	r3, [r7, #0]
 8107f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8107f32:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8107f34:	683a      	ldr	r2, [r7, #0]
 8107f36:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8107f3a:	2a00      	cmp	r2, #0
 8107f3c:	d101      	bne.n	8107f42 <ETH_SetMACConfig+0x172>
 8107f3e:	2280      	movs	r2, #128	@ 0x80
 8107f40:	e000      	b.n	8107f44 <ETH_SetMACConfig+0x174>
 8107f42:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8107f44:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8107f46:	683b      	ldr	r3, [r7, #0]
 8107f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107f4a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8107f4c:	4313      	orrs	r3, r2
 8107f4e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8107f50:	687b      	ldr	r3, [r7, #4]
 8107f52:	681b      	ldr	r3, [r3, #0]
 8107f54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8107f56:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8107f5a:	4013      	ands	r3, r2
 8107f5c:	687a      	ldr	r2, [r7, #4]
 8107f5e:	6812      	ldr	r2, [r2, #0]
 8107f60:	68f9      	ldr	r1, [r7, #12]
 8107f62:	430b      	orrs	r3, r1
 8107f64:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8107f66:	683b      	ldr	r3, [r7, #0]
 8107f68:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8107f6c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8107f6e:	683b      	ldr	r3, [r7, #0]
 8107f70:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8107f74:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8107f76:	4313      	orrs	r3, r2
 8107f78:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107f82:	f023 0103 	bic.w	r1, r3, #3
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	68fa      	ldr	r2, [r7, #12]
 8107f8c:	430a      	orrs	r2, r1
 8107f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8107f9a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8107f9e:	683b      	ldr	r3, [r7, #0]
 8107fa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	681b      	ldr	r3, [r3, #0]
 8107fa6:	430a      	orrs	r2, r1
 8107fa8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8107fac:	683b      	ldr	r3, [r7, #0]
 8107fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8107fb0:	683a      	ldr	r2, [r7, #0]
 8107fb2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8107fb6:	2a00      	cmp	r2, #0
 8107fb8:	d101      	bne.n	8107fbe <ETH_SetMACConfig+0x1ee>
 8107fba:	2240      	movs	r2, #64	@ 0x40
 8107fbc:	e000      	b.n	8107fc0 <ETH_SetMACConfig+0x1f0>
 8107fbe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8107fc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8107fc2:	683b      	ldr	r3, [r7, #0]
 8107fc4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8107fc8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8107fca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8107fcc:	683b      	ldr	r3, [r7, #0]
 8107fce:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8107fd2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8107fd4:	4313      	orrs	r3, r2
 8107fd6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8107fe0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	681b      	ldr	r3, [r3, #0]
 8107fe8:	68fa      	ldr	r2, [r7, #12]
 8107fea:	430a      	orrs	r2, r1
 8107fec:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8107ff0:	bf00      	nop
 8107ff2:	3714      	adds	r7, #20
 8107ff4:	46bd      	mov	sp, r7
 8107ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ffa:	4770      	bx	lr
 8107ffc:	00048083 	.word	0x00048083
 8108000:	c0f88000 	.word	0xc0f88000
 8108004:	fffffef0 	.word	0xfffffef0

08108008 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8108008:	b480      	push	{r7}
 810800a:	b085      	sub	sp, #20
 810800c:	af00      	add	r7, sp, #0
 810800e:	6078      	str	r0, [r7, #4]
 8108010:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810801a:	681a      	ldr	r2, [r3, #0]
 810801c:	4b38      	ldr	r3, [pc, #224]	@ (8108100 <ETH_SetDMAConfig+0xf8>)
 810801e:	4013      	ands	r3, r2
 8108020:	683a      	ldr	r2, [r7, #0]
 8108022:	6811      	ldr	r1, [r2, #0]
 8108024:	687a      	ldr	r2, [r7, #4]
 8108026:	6812      	ldr	r2, [r2, #0]
 8108028:	430b      	orrs	r3, r1
 810802a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810802e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8108030:	683b      	ldr	r3, [r7, #0]
 8108032:	791b      	ldrb	r3, [r3, #4]
 8108034:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8108036:	683b      	ldr	r3, [r7, #0]
 8108038:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810803a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810803c:	683b      	ldr	r3, [r7, #0]
 810803e:	7b1b      	ldrb	r3, [r3, #12]
 8108040:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8108042:	4313      	orrs	r3, r2
 8108044:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810804e:	685a      	ldr	r2, [r3, #4]
 8108050:	4b2c      	ldr	r3, [pc, #176]	@ (8108104 <ETH_SetDMAConfig+0xfc>)
 8108052:	4013      	ands	r3, r2
 8108054:	687a      	ldr	r2, [r7, #4]
 8108056:	6812      	ldr	r2, [r2, #0]
 8108058:	68f9      	ldr	r1, [r7, #12]
 810805a:	430b      	orrs	r3, r1
 810805c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108060:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8108062:	683b      	ldr	r3, [r7, #0]
 8108064:	7b5b      	ldrb	r3, [r3, #13]
 8108066:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8108068:	683b      	ldr	r3, [r7, #0]
 810806a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810806c:	4313      	orrs	r3, r2
 810806e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108078:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 810807c:	4b22      	ldr	r3, [pc, #136]	@ (8108108 <ETH_SetDMAConfig+0x100>)
 810807e:	4013      	ands	r3, r2
 8108080:	687a      	ldr	r2, [r7, #4]
 8108082:	6812      	ldr	r2, [r2, #0]
 8108084:	68f9      	ldr	r1, [r7, #12]
 8108086:	430b      	orrs	r3, r1
 8108088:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810808c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8108090:	683b      	ldr	r3, [r7, #0]
 8108092:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8108094:	683b      	ldr	r3, [r7, #0]
 8108096:	7d1b      	ldrb	r3, [r3, #20]
 8108098:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810809a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 810809c:	683b      	ldr	r3, [r7, #0]
 810809e:	7f5b      	ldrb	r3, [r3, #29]
 81080a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81080a2:	4313      	orrs	r3, r2
 81080a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	681b      	ldr	r3, [r3, #0]
 81080aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81080ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 81080b2:	4b16      	ldr	r3, [pc, #88]	@ (810810c <ETH_SetDMAConfig+0x104>)
 81080b4:	4013      	ands	r3, r2
 81080b6:	687a      	ldr	r2, [r7, #4]
 81080b8:	6812      	ldr	r2, [r2, #0]
 81080ba:	68f9      	ldr	r1, [r7, #12]
 81080bc:	430b      	orrs	r3, r1
 81080be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81080c2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81080c6:	683b      	ldr	r3, [r7, #0]
 81080c8:	7f1b      	ldrb	r3, [r3, #28]
 81080ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81080cc:	683b      	ldr	r3, [r7, #0]
 81080ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81080d0:	4313      	orrs	r3, r2
 81080d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	681b      	ldr	r3, [r3, #0]
 81080d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81080dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 81080e0:	4b0b      	ldr	r3, [pc, #44]	@ (8108110 <ETH_SetDMAConfig+0x108>)
 81080e2:	4013      	ands	r3, r2
 81080e4:	687a      	ldr	r2, [r7, #4]
 81080e6:	6812      	ldr	r2, [r2, #0]
 81080e8:	68f9      	ldr	r1, [r7, #12]
 81080ea:	430b      	orrs	r3, r1
 81080ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81080f0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81080f4:	bf00      	nop
 81080f6:	3714      	adds	r7, #20
 81080f8:	46bd      	mov	sp, r7
 81080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080fe:	4770      	bx	lr
 8108100:	ffff87fd 	.word	0xffff87fd
 8108104:	ffff2ffe 	.word	0xffff2ffe
 8108108:	fffec000 	.word	0xfffec000
 810810c:	ffc0efef 	.word	0xffc0efef
 8108110:	7fc0ffff 	.word	0x7fc0ffff

08108114 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8108114:	b580      	push	{r7, lr}
 8108116:	b0a4      	sub	sp, #144	@ 0x90
 8108118:	af00      	add	r7, sp, #0
 810811a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 810811c:	2301      	movs	r3, #1
 810811e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8108122:	2300      	movs	r3, #0
 8108124:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8108126:	2300      	movs	r3, #0
 8108128:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810812c:	2300      	movs	r3, #0
 810812e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8108132:	2301      	movs	r3, #1
 8108134:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8108138:	2301      	movs	r3, #1
 810813a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810813e:	2301      	movs	r3, #1
 8108140:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8108144:	2300      	movs	r3, #0
 8108146:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810814a:	2301      	movs	r3, #1
 810814c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8108150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8108154:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8108156:	2300      	movs	r3, #0
 8108158:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810815c:	2300      	movs	r3, #0
 810815e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8108160:	2300      	movs	r3, #0
 8108162:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8108166:	2300      	movs	r3, #0
 8108168:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810816c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8108170:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8108172:	2300      	movs	r3, #0
 8108174:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8108178:	2300      	movs	r3, #0
 810817a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810817c:	2301      	movs	r3, #1
 810817e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8108182:	2300      	movs	r3, #0
 8108184:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8108188:	2300      	movs	r3, #0
 810818a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810818e:	2300      	movs	r3, #0
 8108190:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8108192:	2300      	movs	r3, #0
 8108194:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8108196:	2300      	movs	r3, #0
 8108198:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810819a:	2300      	movs	r3, #0
 810819c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81081a0:	2300      	movs	r3, #0
 81081a2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81081a6:	2301      	movs	r3, #1
 81081a8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81081ac:	2320      	movs	r3, #32
 81081ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81081b2:	2301      	movs	r3, #1
 81081b4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81081b8:	2300      	movs	r3, #0
 81081ba:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81081be:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 81081c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81081c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81081c8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81081ca:	2300      	movs	r3, #0
 81081cc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81081d0:	2302      	movs	r3, #2
 81081d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81081d6:	2300      	movs	r3, #0
 81081d8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81081dc:	2300      	movs	r3, #0
 81081de:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81081e2:	2300      	movs	r3, #0
 81081e4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81081e8:	2301      	movs	r3, #1
 81081ea:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81081ee:	2300      	movs	r3, #0
 81081f0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81081f2:	2301      	movs	r3, #1
 81081f4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81081f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81081fc:	4619      	mov	r1, r3
 81081fe:	6878      	ldr	r0, [r7, #4]
 8108200:	f7ff fde6 	bl	8107dd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8108204:	2301      	movs	r3, #1
 8108206:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8108208:	2301      	movs	r3, #1
 810820a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 810820c:	2300      	movs	r3, #0
 810820e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8108210:	2300      	movs	r3, #0
 8108212:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8108216:	2300      	movs	r3, #0
 8108218:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 810821a:	2300      	movs	r3, #0
 810821c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810821e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8108222:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8108224:	2300      	movs	r3, #0
 8108226:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8108228:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810822c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810822e:	2300      	movs	r3, #0
 8108230:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8108234:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8108238:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810823a:	f107 0308 	add.w	r3, r7, #8
 810823e:	4619      	mov	r1, r3
 8108240:	6878      	ldr	r0, [r7, #4]
 8108242:	f7ff fee1 	bl	8108008 <ETH_SetDMAConfig>
}
 8108246:	bf00      	nop
 8108248:	3790      	adds	r7, #144	@ 0x90
 810824a:	46bd      	mov	sp, r7
 810824c:	bd80      	pop	{r7, pc}

0810824e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810824e:	b480      	push	{r7}
 8108250:	b085      	sub	sp, #20
 8108252:	af00      	add	r7, sp, #0
 8108254:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8108256:	2300      	movs	r3, #0
 8108258:	60fb      	str	r3, [r7, #12]
 810825a:	e01d      	b.n	8108298 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	68d9      	ldr	r1, [r3, #12]
 8108260:	68fa      	ldr	r2, [r7, #12]
 8108262:	4613      	mov	r3, r2
 8108264:	005b      	lsls	r3, r3, #1
 8108266:	4413      	add	r3, r2
 8108268:	00db      	lsls	r3, r3, #3
 810826a:	440b      	add	r3, r1
 810826c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810826e:	68bb      	ldr	r3, [r7, #8]
 8108270:	2200      	movs	r2, #0
 8108272:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8108274:	68bb      	ldr	r3, [r7, #8]
 8108276:	2200      	movs	r2, #0
 8108278:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810827a:	68bb      	ldr	r3, [r7, #8]
 810827c:	2200      	movs	r2, #0
 810827e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8108280:	68bb      	ldr	r3, [r7, #8]
 8108282:	2200      	movs	r2, #0
 8108284:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8108286:	68b9      	ldr	r1, [r7, #8]
 8108288:	687b      	ldr	r3, [r7, #4]
 810828a:	68fa      	ldr	r2, [r7, #12]
 810828c:	3206      	adds	r2, #6
 810828e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8108292:	68fb      	ldr	r3, [r7, #12]
 8108294:	3301      	adds	r3, #1
 8108296:	60fb      	str	r3, [r7, #12]
 8108298:	68fb      	ldr	r3, [r7, #12]
 810829a:	2b03      	cmp	r3, #3
 810829c:	d9de      	bls.n	810825c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810829e:	687b      	ldr	r3, [r7, #4]
 81082a0:	2200      	movs	r2, #0
 81082a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81082ac:	461a      	mov	r2, r3
 81082ae:	2303      	movs	r3, #3
 81082b0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 81082b4:	687b      	ldr	r3, [r7, #4]
 81082b6:	68da      	ldr	r2, [r3, #12]
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	681b      	ldr	r3, [r3, #0]
 81082bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81082c0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81082c4:	687b      	ldr	r3, [r7, #4]
 81082c6:	68da      	ldr	r2, [r3, #12]
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	681b      	ldr	r3, [r3, #0]
 81082cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81082d0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 81082d4:	bf00      	nop
 81082d6:	3714      	adds	r7, #20
 81082d8:	46bd      	mov	sp, r7
 81082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082de:	4770      	bx	lr

081082e0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81082e0:	b480      	push	{r7}
 81082e2:	b085      	sub	sp, #20
 81082e4:	af00      	add	r7, sp, #0
 81082e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81082e8:	2300      	movs	r3, #0
 81082ea:	60fb      	str	r3, [r7, #12]
 81082ec:	e023      	b.n	8108336 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	6919      	ldr	r1, [r3, #16]
 81082f2:	68fa      	ldr	r2, [r7, #12]
 81082f4:	4613      	mov	r3, r2
 81082f6:	005b      	lsls	r3, r3, #1
 81082f8:	4413      	add	r3, r2
 81082fa:	00db      	lsls	r3, r3, #3
 81082fc:	440b      	add	r3, r1
 81082fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8108300:	68bb      	ldr	r3, [r7, #8]
 8108302:	2200      	movs	r2, #0
 8108304:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8108306:	68bb      	ldr	r3, [r7, #8]
 8108308:	2200      	movs	r2, #0
 810830a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 810830c:	68bb      	ldr	r3, [r7, #8]
 810830e:	2200      	movs	r2, #0
 8108310:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8108312:	68bb      	ldr	r3, [r7, #8]
 8108314:	2200      	movs	r2, #0
 8108316:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8108318:	68bb      	ldr	r3, [r7, #8]
 810831a:	2200      	movs	r2, #0
 810831c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810831e:	68bb      	ldr	r3, [r7, #8]
 8108320:	2200      	movs	r2, #0
 8108322:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8108324:	68b9      	ldr	r1, [r7, #8]
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	68fa      	ldr	r2, [r7, #12]
 810832a:	3212      	adds	r2, #18
 810832c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8108330:	68fb      	ldr	r3, [r7, #12]
 8108332:	3301      	adds	r3, #1
 8108334:	60fb      	str	r3, [r7, #12]
 8108336:	68fb      	ldr	r3, [r7, #12]
 8108338:	2b03      	cmp	r3, #3
 810833a:	d9d8      	bls.n	81082ee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	2200      	movs	r2, #0
 8108340:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	2200      	movs	r2, #0
 8108346:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	2200      	movs	r2, #0
 810834c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810834e:	687b      	ldr	r3, [r7, #4]
 8108350:	2200      	movs	r2, #0
 8108352:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	2200      	movs	r2, #0
 8108358:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108362:	461a      	mov	r2, r3
 8108364:	2303      	movs	r3, #3
 8108366:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	691a      	ldr	r2, [r3, #16]
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108376:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	691b      	ldr	r3, [r3, #16]
 810837e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	681b      	ldr	r3, [r3, #0]
 8108386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810838a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810838e:	bf00      	nop
 8108390:	3714      	adds	r7, #20
 8108392:	46bd      	mov	sp, r7
 8108394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108398:	4770      	bx	lr
	...

0810839c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 810839c:	b480      	push	{r7}
 810839e:	b091      	sub	sp, #68	@ 0x44
 81083a0:	af00      	add	r7, sp, #0
 81083a2:	60f8      	str	r0, [r7, #12]
 81083a4:	60b9      	str	r1, [r7, #8]
 81083a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 81083a8:	68fb      	ldr	r3, [r7, #12]
 81083aa:	3318      	adds	r3, #24
 81083ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 81083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81083b0:	691b      	ldr	r3, [r3, #16]
 81083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 81083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81083b6:	691b      	ldr	r3, [r3, #16]
 81083b8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 81083ba:	2300      	movs	r3, #0
 81083bc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81083c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81083c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81083c6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 81083c8:	68bb      	ldr	r3, [r7, #8]
 81083ca:	689b      	ldr	r3, [r3, #8]
 81083cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 81083ce:	2300      	movs	r3, #0
 81083d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 81083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81083d4:	68db      	ldr	r3, [r3, #12]
 81083d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81083da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81083de:	d007      	beq.n	81083f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 81083e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81083e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81083e4:	3304      	adds	r3, #4
 81083e6:	009b      	lsls	r3, r3, #2
 81083e8:	4413      	add	r3, r2
 81083ea:	685b      	ldr	r3, [r3, #4]
 81083ec:	2b00      	cmp	r3, #0
 81083ee:	d001      	beq.n	81083f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 81083f0:	2302      	movs	r3, #2
 81083f2:	e266      	b.n	81088c2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 81083f4:	68bb      	ldr	r3, [r7, #8]
 81083f6:	681b      	ldr	r3, [r3, #0]
 81083f8:	f003 0304 	and.w	r3, r3, #4
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	d044      	beq.n	810848a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8108400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108402:	68da      	ldr	r2, [r3, #12]
 8108404:	4b75      	ldr	r3, [pc, #468]	@ (81085dc <ETH_Prepare_Tx_Descriptors+0x240>)
 8108406:	4013      	ands	r3, r2
 8108408:	68ba      	ldr	r2, [r7, #8]
 810840a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810840c:	431a      	orrs	r2, r3
 810840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108410:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8108412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108414:	68db      	ldr	r3, [r3, #12]
 8108416:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810841c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 810841e:	68fb      	ldr	r3, [r7, #12]
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8108424:	68fb      	ldr	r3, [r7, #12]
 8108426:	681b      	ldr	r3, [r3, #0]
 8108428:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810842c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 810842e:	68bb      	ldr	r3, [r7, #8]
 8108430:	681b      	ldr	r3, [r3, #0]
 8108432:	f003 0308 	and.w	r3, r3, #8
 8108436:	2b00      	cmp	r3, #0
 8108438:	d027      	beq.n	810848a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 810843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810843c:	689b      	ldr	r3, [r3, #8]
 810843e:	b29a      	uxth	r2, r3
 8108440:	68bb      	ldr	r3, [r7, #8]
 8108442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108444:	041b      	lsls	r3, r3, #16
 8108446:	431a      	orrs	r2, r3
 8108448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810844a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 810844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810844e:	68db      	ldr	r3, [r3, #12]
 8108450:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8108454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108456:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8108458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810845a:	68db      	ldr	r3, [r3, #12]
 810845c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8108460:	68bb      	ldr	r3, [r7, #8]
 8108462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108464:	431a      	orrs	r2, r3
 8108466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108468:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 810846a:	68fb      	ldr	r3, [r7, #12]
 810846c:	681b      	ldr	r3, [r3, #0]
 810846e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8108470:	68fb      	ldr	r3, [r7, #12]
 8108472:	681b      	ldr	r3, [r3, #0]
 8108474:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8108478:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 810847a:	68fb      	ldr	r3, [r7, #12]
 810847c:	681b      	ldr	r3, [r3, #0]
 810847e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8108480:	68fb      	ldr	r3, [r7, #12]
 8108482:	681b      	ldr	r3, [r3, #0]
 8108484:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8108488:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810848a:	68bb      	ldr	r3, [r7, #8]
 810848c:	681b      	ldr	r3, [r3, #0]
 810848e:	f003 0310 	and.w	r3, r3, #16
 8108492:	2b00      	cmp	r3, #0
 8108494:	d00e      	beq.n	81084b4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8108496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108498:	689a      	ldr	r2, [r3, #8]
 810849a:	4b51      	ldr	r3, [pc, #324]	@ (81085e0 <ETH_Prepare_Tx_Descriptors+0x244>)
 810849c:	4013      	ands	r3, r2
 810849e:	68ba      	ldr	r2, [r7, #8]
 81084a0:	6992      	ldr	r2, [r2, #24]
 81084a2:	431a      	orrs	r2, r3
 81084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084a6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 81084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084aa:	68db      	ldr	r3, [r3, #12]
 81084ac:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 81084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084b2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 81084b4:	68bb      	ldr	r3, [r7, #8]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	f003 0304 	and.w	r3, r3, #4
 81084bc:	2b00      	cmp	r3, #0
 81084be:	d105      	bne.n	81084cc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 81084c0:	68bb      	ldr	r3, [r7, #8]
 81084c2:	681b      	ldr	r3, [r3, #0]
 81084c4:	f003 0310 	and.w	r3, r3, #16
 81084c8:	2b00      	cmp	r3, #0
 81084ca:	d036      	beq.n	810853a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 81084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084ce:	68db      	ldr	r3, [r3, #12]
 81084d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 81084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 81084d8:	f3bf 8f5f 	dmb	sy
}
 81084dc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 81084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084e0:	68db      	ldr	r3, [r3, #12]
 81084e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81084e8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 81084ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81084ec:	3301      	adds	r3, #1
 81084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81084f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81084f2:	2b03      	cmp	r3, #3
 81084f4:	d902      	bls.n	81084fc <ETH_Prepare_Tx_Descriptors+0x160>
 81084f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81084f8:	3b04      	subs	r3, #4
 81084fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81084fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108504:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8108506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108508:	3301      	adds	r3, #1
 810850a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810850e:	68db      	ldr	r3, [r3, #12]
 8108510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108518:	d10f      	bne.n	810853a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 810851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810851c:	6a3a      	ldr	r2, [r7, #32]
 810851e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108522:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8108524:	f3bf 8f5f 	dmb	sy
}
 8108528:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810852c:	68db      	ldr	r3, [r3, #12]
 810852e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108534:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8108536:	2302      	movs	r3, #2
 8108538:	e1c3      	b.n	81088c2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 810853a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810853c:	3301      	adds	r3, #1
 810853e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8108540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108542:	681b      	ldr	r3, [r3, #0]
 8108544:	461a      	mov	r2, r3
 8108546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108548:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810854c:	689a      	ldr	r2, [r3, #8]
 810854e:	4b24      	ldr	r3, [pc, #144]	@ (81085e0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8108550:	4013      	ands	r3, r2
 8108552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108554:	6852      	ldr	r2, [r2, #4]
 8108556:	431a      	orrs	r2, r3
 8108558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810855a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 810855c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810855e:	689b      	ldr	r3, [r3, #8]
 8108560:	2b00      	cmp	r3, #0
 8108562:	d012      	beq.n	810858a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8108564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108566:	689b      	ldr	r3, [r3, #8]
 8108568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810856a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810856c:	681b      	ldr	r3, [r3, #0]
 810856e:	461a      	mov	r2, r3
 8108570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108572:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8108574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108576:	689a      	ldr	r2, [r3, #8]
 8108578:	4b1a      	ldr	r3, [pc, #104]	@ (81085e4 <ETH_Prepare_Tx_Descriptors+0x248>)
 810857a:	4013      	ands	r3, r2
 810857c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810857e:	6852      	ldr	r2, [r2, #4]
 8108580:	0412      	lsls	r2, r2, #16
 8108582:	431a      	orrs	r2, r3
 8108584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108586:	609a      	str	r2, [r3, #8]
 8108588:	e008      	b.n	810859c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810858c:	2200      	movs	r2, #0
 810858e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8108590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108592:	689a      	ldr	r2, [r3, #8]
 8108594:	4b13      	ldr	r3, [pc, #76]	@ (81085e4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8108596:	4013      	ands	r3, r2
 8108598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810859a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810859c:	68bb      	ldr	r3, [r7, #8]
 810859e:	681b      	ldr	r3, [r3, #0]
 81085a0:	f003 0310 	and.w	r3, r3, #16
 81085a4:	2b00      	cmp	r3, #0
 81085a6:	d021      	beq.n	81085ec <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 81085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085aa:	68db      	ldr	r3, [r3, #12]
 81085ac:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 81085b0:	68bb      	ldr	r3, [r7, #8]
 81085b2:	6a1b      	ldr	r3, [r3, #32]
 81085b4:	04db      	lsls	r3, r3, #19
 81085b6:	431a      	orrs	r2, r3
 81085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085ba:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 81085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085be:	68da      	ldr	r2, [r3, #12]
 81085c0:	4b09      	ldr	r3, [pc, #36]	@ (81085e8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 81085c2:	4013      	ands	r3, r2
 81085c4:	68ba      	ldr	r2, [r7, #8]
 81085c6:	69d2      	ldr	r2, [r2, #28]
 81085c8:	431a      	orrs	r2, r3
 81085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085cc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 81085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085d0:	68db      	ldr	r3, [r3, #12]
 81085d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 81085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085d8:	60da      	str	r2, [r3, #12]
 81085da:	e02e      	b.n	810863a <ETH_Prepare_Tx_Descriptors+0x29e>
 81085dc:	ffff0000 	.word	0xffff0000
 81085e0:	ffffc000 	.word	0xffffc000
 81085e4:	c000ffff 	.word	0xc000ffff
 81085e8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 81085ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085ee:	68da      	ldr	r2, [r3, #12]
 81085f0:	4b7b      	ldr	r3, [pc, #492]	@ (81087e0 <ETH_Prepare_Tx_Descriptors+0x444>)
 81085f2:	4013      	ands	r3, r2
 81085f4:	68ba      	ldr	r2, [r7, #8]
 81085f6:	6852      	ldr	r2, [r2, #4]
 81085f8:	431a      	orrs	r2, r3
 81085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085fc:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 81085fe:	68bb      	ldr	r3, [r7, #8]
 8108600:	681b      	ldr	r3, [r3, #0]
 8108602:	f003 0301 	and.w	r3, r3, #1
 8108606:	2b00      	cmp	r3, #0
 8108608:	d008      	beq.n	810861c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810860c:	68db      	ldr	r3, [r3, #12]
 810860e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8108612:	68bb      	ldr	r3, [r7, #8]
 8108614:	695b      	ldr	r3, [r3, #20]
 8108616:	431a      	orrs	r2, r3
 8108618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810861a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 810861c:	68bb      	ldr	r3, [r7, #8]
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	f003 0320 	and.w	r3, r3, #32
 8108624:	2b00      	cmp	r3, #0
 8108626:	d008      	beq.n	810863a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8108628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810862a:	68db      	ldr	r3, [r3, #12]
 810862c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8108630:	68bb      	ldr	r3, [r7, #8]
 8108632:	691b      	ldr	r3, [r3, #16]
 8108634:	431a      	orrs	r2, r3
 8108636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108638:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810863a:	68bb      	ldr	r3, [r7, #8]
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	f003 0304 	and.w	r3, r3, #4
 8108642:	2b00      	cmp	r3, #0
 8108644:	d008      	beq.n	8108658 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8108646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108648:	689b      	ldr	r3, [r3, #8]
 810864a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810864e:	68bb      	ldr	r3, [r7, #8]
 8108650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108652:	431a      	orrs	r2, r3
 8108654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108656:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8108658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810865a:	68db      	ldr	r3, [r3, #12]
 810865c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8108660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108662:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8108664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108666:	68db      	ldr	r3, [r3, #12]
 8108668:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810866e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8108670:	f3bf 8f5f 	dmb	sy
}
 8108674:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108678:	68db      	ldr	r3, [r3, #12]
 810867a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108680:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8108682:	68bb      	ldr	r3, [r7, #8]
 8108684:	681b      	ldr	r3, [r3, #0]
 8108686:	f003 0302 	and.w	r3, r3, #2
 810868a:	2b00      	cmp	r3, #0
 810868c:	f000 80da 	beq.w	8108844 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8108690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108692:	68db      	ldr	r3, [r3, #12]
 8108694:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8108698:	68bb      	ldr	r3, [r7, #8]
 810869a:	68db      	ldr	r3, [r3, #12]
 810869c:	431a      	orrs	r2, r3
 810869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086a0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 81086a2:	e0cf      	b.n	8108844 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 81086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086a6:	68db      	ldr	r3, [r3, #12]
 81086a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 81086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086ae:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 81086b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81086b2:	3301      	adds	r3, #1
 81086b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81086b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81086b8:	2b03      	cmp	r3, #3
 81086ba:	d902      	bls.n	81086c2 <ETH_Prepare_Tx_Descriptors+0x326>
 81086bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81086be:	3b04      	subs	r3, #4
 81086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81086c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81086c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81086ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 81086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086ce:	68db      	ldr	r3, [r3, #12]
 81086d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 81086d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086d6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 81086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086da:	68db      	ldr	r3, [r3, #12]
 81086dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81086e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81086e4:	d007      	beq.n	81086f6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 81086e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81086ea:	3304      	adds	r3, #4
 81086ec:	009b      	lsls	r3, r3, #2
 81086ee:	4413      	add	r3, r2
 81086f0:	685b      	ldr	r3, [r3, #4]
 81086f2:	2b00      	cmp	r3, #0
 81086f4:	d029      	beq.n	810874a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 81086f6:	6a3b      	ldr	r3, [r7, #32]
 81086f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81086fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108702:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8108704:	2300      	movs	r3, #0
 8108706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108708:	e019      	b.n	810873e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 810870a:	f3bf 8f5f 	dmb	sy
}
 810870e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108712:	68db      	ldr	r3, [r3, #12]
 8108714:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810871a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 810871c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810871e:	3301      	adds	r3, #1
 8108720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108724:	2b03      	cmp	r3, #3
 8108726:	d902      	bls.n	810872e <ETH_Prepare_Tx_Descriptors+0x392>
 8108728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810872a:	3b04      	subs	r3, #4
 810872c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108730:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108736:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8108738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810873a:	3301      	adds	r3, #1
 810873c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810873e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108742:	429a      	cmp	r2, r3
 8108744:	d3e1      	bcc.n	810870a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8108746:	2302      	movs	r3, #2
 8108748:	e0bb      	b.n	81088c2 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 810874a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810874c:	3301      	adds	r3, #1
 810874e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8108750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108752:	689b      	ldr	r3, [r3, #8]
 8108754:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8108756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108758:	681b      	ldr	r3, [r3, #0]
 810875a:	461a      	mov	r2, r3
 810875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810875e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8108760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108762:	689a      	ldr	r2, [r3, #8]
 8108764:	4b1f      	ldr	r3, [pc, #124]	@ (81087e4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8108766:	4013      	ands	r3, r2
 8108768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810876a:	6852      	ldr	r2, [r2, #4]
 810876c:	431a      	orrs	r2, r3
 810876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108770:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8108772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108774:	689b      	ldr	r3, [r3, #8]
 8108776:	2b00      	cmp	r3, #0
 8108778:	d012      	beq.n	81087a0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 810877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810877c:	689b      	ldr	r3, [r3, #8]
 810877e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8108780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	461a      	mov	r2, r3
 8108786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108788:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810878c:	689a      	ldr	r2, [r3, #8]
 810878e:	4b16      	ldr	r3, [pc, #88]	@ (81087e8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8108790:	4013      	ands	r3, r2
 8108792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108794:	6852      	ldr	r2, [r2, #4]
 8108796:	0412      	lsls	r2, r2, #16
 8108798:	431a      	orrs	r2, r3
 810879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810879c:	609a      	str	r2, [r3, #8]
 810879e:	e008      	b.n	81087b2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 81087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087a2:	2200      	movs	r2, #0
 81087a4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 81087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087a8:	689a      	ldr	r2, [r3, #8]
 81087aa:	4b0f      	ldr	r3, [pc, #60]	@ (81087e8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 81087ac:	4013      	ands	r3, r2
 81087ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81087b0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 81087b2:	68bb      	ldr	r3, [r7, #8]
 81087b4:	681b      	ldr	r3, [r3, #0]
 81087b6:	f003 0310 	and.w	r3, r3, #16
 81087ba:	2b00      	cmp	r3, #0
 81087bc:	d018      	beq.n	81087f0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 81087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087c0:	68da      	ldr	r2, [r3, #12]
 81087c2:	4b0a      	ldr	r3, [pc, #40]	@ (81087ec <ETH_Prepare_Tx_Descriptors+0x450>)
 81087c4:	4013      	ands	r3, r2
 81087c6:	68ba      	ldr	r2, [r7, #8]
 81087c8:	69d2      	ldr	r2, [r2, #28]
 81087ca:	431a      	orrs	r2, r3
 81087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087ce:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 81087d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087d2:	68db      	ldr	r3, [r3, #12]
 81087d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 81087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087da:	60da      	str	r2, [r3, #12]
 81087dc:	e020      	b.n	8108820 <ETH_Prepare_Tx_Descriptors+0x484>
 81087de:	bf00      	nop
 81087e0:	ffff8000 	.word	0xffff8000
 81087e4:	ffffc000 	.word	0xffffc000
 81087e8:	c000ffff 	.word	0xc000ffff
 81087ec:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 81087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087f2:	68da      	ldr	r2, [r3, #12]
 81087f4:	4b36      	ldr	r3, [pc, #216]	@ (81088d0 <ETH_Prepare_Tx_Descriptors+0x534>)
 81087f6:	4013      	ands	r3, r2
 81087f8:	68ba      	ldr	r2, [r7, #8]
 81087fa:	6852      	ldr	r2, [r2, #4]
 81087fc:	431a      	orrs	r2, r3
 81087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108800:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8108802:	68bb      	ldr	r3, [r7, #8]
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	f003 0301 	and.w	r3, r3, #1
 810880a:	2b00      	cmp	r3, #0
 810880c:	d008      	beq.n	8108820 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108810:	68db      	ldr	r3, [r3, #12]
 8108812:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8108816:	68bb      	ldr	r3, [r7, #8]
 8108818:	695b      	ldr	r3, [r3, #20]
 810881a:	431a      	orrs	r2, r3
 810881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810881e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8108820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108822:	3301      	adds	r3, #1
 8108824:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8108826:	f3bf 8f5f 	dmb	sy
}
 810882a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810882e:	68db      	ldr	r3, [r3, #12]
 8108830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108836:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8108838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810883a:	68db      	ldr	r3, [r3, #12]
 810883c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8108840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108842:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8108844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108846:	689b      	ldr	r3, [r3, #8]
 8108848:	2b00      	cmp	r3, #0
 810884a:	f47f af2b 	bne.w	81086a4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	2b00      	cmp	r3, #0
 8108852:	d006      	beq.n	8108862 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8108854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108856:	689b      	ldr	r3, [r3, #8]
 8108858:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810885e:	609a      	str	r2, [r3, #8]
 8108860:	e005      	b.n	810886e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8108862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108864:	689b      	ldr	r3, [r3, #8]
 8108866:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810886c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108870:	68db      	ldr	r3, [r3, #12]
 8108872:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108878:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 810887a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810887c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810887e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108882:	3304      	adds	r3, #4
 8108884:	009b      	lsls	r3, r3, #2
 8108886:	440b      	add	r3, r1
 8108888:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 810888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810888c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810888e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8108890:	f3ef 8310 	mrs	r3, PRIMASK
 8108894:	613b      	str	r3, [r7, #16]
  return(result);
 8108896:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8108898:	61fb      	str	r3, [r7, #28]
 810889a:	2301      	movs	r3, #1
 810889c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810889e:	697b      	ldr	r3, [r7, #20]
 81088a0:	f383 8810 	msr	PRIMASK, r3
}
 81088a4:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 81088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81088a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81088aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81088ac:	4413      	add	r3, r2
 81088ae:	1c5a      	adds	r2, r3, #1
 81088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81088b2:	629a      	str	r2, [r3, #40]	@ 0x28
 81088b4:	69fb      	ldr	r3, [r7, #28]
 81088b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 81088b8:	69bb      	ldr	r3, [r7, #24]
 81088ba:	f383 8810 	msr	PRIMASK, r3
}
 81088be:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 81088c0:	2300      	movs	r3, #0
}
 81088c2:	4618      	mov	r0, r3
 81088c4:	3744      	adds	r7, #68	@ 0x44
 81088c6:	46bd      	mov	sp, r7
 81088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088cc:	4770      	bx	lr
 81088ce:	bf00      	nop
 81088d0:	ffff8000 	.word	0xffff8000

081088d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81088d4:	b480      	push	{r7}
 81088d6:	b089      	sub	sp, #36	@ 0x24
 81088d8:	af00      	add	r7, sp, #0
 81088da:	6078      	str	r0, [r7, #4]
 81088dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81088de:	2300      	movs	r3, #0
 81088e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 81088e2:	4b89      	ldr	r3, [pc, #548]	@ (8108b08 <HAL_GPIO_Init+0x234>)
 81088e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81088e6:	e194      	b.n	8108c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81088e8:	683b      	ldr	r3, [r7, #0]
 81088ea:	681a      	ldr	r2, [r3, #0]
 81088ec:	2101      	movs	r1, #1
 81088ee:	69fb      	ldr	r3, [r7, #28]
 81088f0:	fa01 f303 	lsl.w	r3, r1, r3
 81088f4:	4013      	ands	r3, r2
 81088f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81088f8:	693b      	ldr	r3, [r7, #16]
 81088fa:	2b00      	cmp	r3, #0
 81088fc:	f000 8186 	beq.w	8108c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8108900:	683b      	ldr	r3, [r7, #0]
 8108902:	685b      	ldr	r3, [r3, #4]
 8108904:	f003 0303 	and.w	r3, r3, #3
 8108908:	2b01      	cmp	r3, #1
 810890a:	d005      	beq.n	8108918 <HAL_GPIO_Init+0x44>
 810890c:	683b      	ldr	r3, [r7, #0]
 810890e:	685b      	ldr	r3, [r3, #4]
 8108910:	f003 0303 	and.w	r3, r3, #3
 8108914:	2b02      	cmp	r3, #2
 8108916:	d130      	bne.n	810897a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	689b      	ldr	r3, [r3, #8]
 810891c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810891e:	69fb      	ldr	r3, [r7, #28]
 8108920:	005b      	lsls	r3, r3, #1
 8108922:	2203      	movs	r2, #3
 8108924:	fa02 f303 	lsl.w	r3, r2, r3
 8108928:	43db      	mvns	r3, r3
 810892a:	69ba      	ldr	r2, [r7, #24]
 810892c:	4013      	ands	r3, r2
 810892e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8108930:	683b      	ldr	r3, [r7, #0]
 8108932:	68da      	ldr	r2, [r3, #12]
 8108934:	69fb      	ldr	r3, [r7, #28]
 8108936:	005b      	lsls	r3, r3, #1
 8108938:	fa02 f303 	lsl.w	r3, r2, r3
 810893c:	69ba      	ldr	r2, [r7, #24]
 810893e:	4313      	orrs	r3, r2
 8108940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	69ba      	ldr	r2, [r7, #24]
 8108946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8108948:	687b      	ldr	r3, [r7, #4]
 810894a:	685b      	ldr	r3, [r3, #4]
 810894c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810894e:	2201      	movs	r2, #1
 8108950:	69fb      	ldr	r3, [r7, #28]
 8108952:	fa02 f303 	lsl.w	r3, r2, r3
 8108956:	43db      	mvns	r3, r3
 8108958:	69ba      	ldr	r2, [r7, #24]
 810895a:	4013      	ands	r3, r2
 810895c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810895e:	683b      	ldr	r3, [r7, #0]
 8108960:	685b      	ldr	r3, [r3, #4]
 8108962:	091b      	lsrs	r3, r3, #4
 8108964:	f003 0201 	and.w	r2, r3, #1
 8108968:	69fb      	ldr	r3, [r7, #28]
 810896a:	fa02 f303 	lsl.w	r3, r2, r3
 810896e:	69ba      	ldr	r2, [r7, #24]
 8108970:	4313      	orrs	r3, r2
 8108972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8108974:	687b      	ldr	r3, [r7, #4]
 8108976:	69ba      	ldr	r2, [r7, #24]
 8108978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810897a:	683b      	ldr	r3, [r7, #0]
 810897c:	685b      	ldr	r3, [r3, #4]
 810897e:	f003 0303 	and.w	r3, r3, #3
 8108982:	2b03      	cmp	r3, #3
 8108984:	d017      	beq.n	81089b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	68db      	ldr	r3, [r3, #12]
 810898a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810898c:	69fb      	ldr	r3, [r7, #28]
 810898e:	005b      	lsls	r3, r3, #1
 8108990:	2203      	movs	r2, #3
 8108992:	fa02 f303 	lsl.w	r3, r2, r3
 8108996:	43db      	mvns	r3, r3
 8108998:	69ba      	ldr	r2, [r7, #24]
 810899a:	4013      	ands	r3, r2
 810899c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810899e:	683b      	ldr	r3, [r7, #0]
 81089a0:	689a      	ldr	r2, [r3, #8]
 81089a2:	69fb      	ldr	r3, [r7, #28]
 81089a4:	005b      	lsls	r3, r3, #1
 81089a6:	fa02 f303 	lsl.w	r3, r2, r3
 81089aa:	69ba      	ldr	r2, [r7, #24]
 81089ac:	4313      	orrs	r3, r2
 81089ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81089b0:	687b      	ldr	r3, [r7, #4]
 81089b2:	69ba      	ldr	r2, [r7, #24]
 81089b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81089b6:	683b      	ldr	r3, [r7, #0]
 81089b8:	685b      	ldr	r3, [r3, #4]
 81089ba:	f003 0303 	and.w	r3, r3, #3
 81089be:	2b02      	cmp	r3, #2
 81089c0:	d123      	bne.n	8108a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81089c2:	69fb      	ldr	r3, [r7, #28]
 81089c4:	08da      	lsrs	r2, r3, #3
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	3208      	adds	r2, #8
 81089ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81089ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81089d0:	69fb      	ldr	r3, [r7, #28]
 81089d2:	f003 0307 	and.w	r3, r3, #7
 81089d6:	009b      	lsls	r3, r3, #2
 81089d8:	220f      	movs	r2, #15
 81089da:	fa02 f303 	lsl.w	r3, r2, r3
 81089de:	43db      	mvns	r3, r3
 81089e0:	69ba      	ldr	r2, [r7, #24]
 81089e2:	4013      	ands	r3, r2
 81089e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81089e6:	683b      	ldr	r3, [r7, #0]
 81089e8:	691a      	ldr	r2, [r3, #16]
 81089ea:	69fb      	ldr	r3, [r7, #28]
 81089ec:	f003 0307 	and.w	r3, r3, #7
 81089f0:	009b      	lsls	r3, r3, #2
 81089f2:	fa02 f303 	lsl.w	r3, r2, r3
 81089f6:	69ba      	ldr	r2, [r7, #24]
 81089f8:	4313      	orrs	r3, r2
 81089fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81089fc:	69fb      	ldr	r3, [r7, #28]
 81089fe:	08da      	lsrs	r2, r3, #3
 8108a00:	687b      	ldr	r3, [r7, #4]
 8108a02:	3208      	adds	r2, #8
 8108a04:	69b9      	ldr	r1, [r7, #24]
 8108a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	681b      	ldr	r3, [r3, #0]
 8108a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8108a10:	69fb      	ldr	r3, [r7, #28]
 8108a12:	005b      	lsls	r3, r3, #1
 8108a14:	2203      	movs	r2, #3
 8108a16:	fa02 f303 	lsl.w	r3, r2, r3
 8108a1a:	43db      	mvns	r3, r3
 8108a1c:	69ba      	ldr	r2, [r7, #24]
 8108a1e:	4013      	ands	r3, r2
 8108a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8108a22:	683b      	ldr	r3, [r7, #0]
 8108a24:	685b      	ldr	r3, [r3, #4]
 8108a26:	f003 0203 	and.w	r2, r3, #3
 8108a2a:	69fb      	ldr	r3, [r7, #28]
 8108a2c:	005b      	lsls	r3, r3, #1
 8108a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8108a32:	69ba      	ldr	r2, [r7, #24]
 8108a34:	4313      	orrs	r3, r2
 8108a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	69ba      	ldr	r2, [r7, #24]
 8108a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8108a3e:	683b      	ldr	r3, [r7, #0]
 8108a40:	685b      	ldr	r3, [r3, #4]
 8108a42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108a46:	2b00      	cmp	r3, #0
 8108a48:	f000 80e0 	beq.w	8108c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8108a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8108b0c <HAL_GPIO_Init+0x238>)
 8108a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108a52:	4a2e      	ldr	r2, [pc, #184]	@ (8108b0c <HAL_GPIO_Init+0x238>)
 8108a54:	f043 0302 	orr.w	r3, r3, #2
 8108a58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8108a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8108b0c <HAL_GPIO_Init+0x238>)
 8108a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108a62:	f003 0302 	and.w	r3, r3, #2
 8108a66:	60fb      	str	r3, [r7, #12]
 8108a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8108a6a:	4a29      	ldr	r2, [pc, #164]	@ (8108b10 <HAL_GPIO_Init+0x23c>)
 8108a6c:	69fb      	ldr	r3, [r7, #28]
 8108a6e:	089b      	lsrs	r3, r3, #2
 8108a70:	3302      	adds	r3, #2
 8108a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8108a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8108a78:	69fb      	ldr	r3, [r7, #28]
 8108a7a:	f003 0303 	and.w	r3, r3, #3
 8108a7e:	009b      	lsls	r3, r3, #2
 8108a80:	220f      	movs	r2, #15
 8108a82:	fa02 f303 	lsl.w	r3, r2, r3
 8108a86:	43db      	mvns	r3, r3
 8108a88:	69ba      	ldr	r2, [r7, #24]
 8108a8a:	4013      	ands	r3, r2
 8108a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	4a20      	ldr	r2, [pc, #128]	@ (8108b14 <HAL_GPIO_Init+0x240>)
 8108a92:	4293      	cmp	r3, r2
 8108a94:	d052      	beq.n	8108b3c <HAL_GPIO_Init+0x268>
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	4a1f      	ldr	r2, [pc, #124]	@ (8108b18 <HAL_GPIO_Init+0x244>)
 8108a9a:	4293      	cmp	r3, r2
 8108a9c:	d031      	beq.n	8108b02 <HAL_GPIO_Init+0x22e>
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8108b1c <HAL_GPIO_Init+0x248>)
 8108aa2:	4293      	cmp	r3, r2
 8108aa4:	d02b      	beq.n	8108afe <HAL_GPIO_Init+0x22a>
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8108b20 <HAL_GPIO_Init+0x24c>)
 8108aaa:	4293      	cmp	r3, r2
 8108aac:	d025      	beq.n	8108afa <HAL_GPIO_Init+0x226>
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8108b24 <HAL_GPIO_Init+0x250>)
 8108ab2:	4293      	cmp	r3, r2
 8108ab4:	d01f      	beq.n	8108af6 <HAL_GPIO_Init+0x222>
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8108b28 <HAL_GPIO_Init+0x254>)
 8108aba:	4293      	cmp	r3, r2
 8108abc:	d019      	beq.n	8108af2 <HAL_GPIO_Init+0x21e>
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8108b2c <HAL_GPIO_Init+0x258>)
 8108ac2:	4293      	cmp	r3, r2
 8108ac4:	d013      	beq.n	8108aee <HAL_GPIO_Init+0x21a>
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	4a19      	ldr	r2, [pc, #100]	@ (8108b30 <HAL_GPIO_Init+0x25c>)
 8108aca:	4293      	cmp	r3, r2
 8108acc:	d00d      	beq.n	8108aea <HAL_GPIO_Init+0x216>
 8108ace:	687b      	ldr	r3, [r7, #4]
 8108ad0:	4a18      	ldr	r2, [pc, #96]	@ (8108b34 <HAL_GPIO_Init+0x260>)
 8108ad2:	4293      	cmp	r3, r2
 8108ad4:	d007      	beq.n	8108ae6 <HAL_GPIO_Init+0x212>
 8108ad6:	687b      	ldr	r3, [r7, #4]
 8108ad8:	4a17      	ldr	r2, [pc, #92]	@ (8108b38 <HAL_GPIO_Init+0x264>)
 8108ada:	4293      	cmp	r3, r2
 8108adc:	d101      	bne.n	8108ae2 <HAL_GPIO_Init+0x20e>
 8108ade:	2309      	movs	r3, #9
 8108ae0:	e02d      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108ae2:	230a      	movs	r3, #10
 8108ae4:	e02b      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108ae6:	2308      	movs	r3, #8
 8108ae8:	e029      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108aea:	2307      	movs	r3, #7
 8108aec:	e027      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108aee:	2306      	movs	r3, #6
 8108af0:	e025      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108af2:	2305      	movs	r3, #5
 8108af4:	e023      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108af6:	2304      	movs	r3, #4
 8108af8:	e021      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108afa:	2303      	movs	r3, #3
 8108afc:	e01f      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108afe:	2302      	movs	r3, #2
 8108b00:	e01d      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108b02:	2301      	movs	r3, #1
 8108b04:	e01b      	b.n	8108b3e <HAL_GPIO_Init+0x26a>
 8108b06:	bf00      	nop
 8108b08:	58000080 	.word	0x58000080
 8108b0c:	58024400 	.word	0x58024400
 8108b10:	58000400 	.word	0x58000400
 8108b14:	58020000 	.word	0x58020000
 8108b18:	58020400 	.word	0x58020400
 8108b1c:	58020800 	.word	0x58020800
 8108b20:	58020c00 	.word	0x58020c00
 8108b24:	58021000 	.word	0x58021000
 8108b28:	58021400 	.word	0x58021400
 8108b2c:	58021800 	.word	0x58021800
 8108b30:	58021c00 	.word	0x58021c00
 8108b34:	58022000 	.word	0x58022000
 8108b38:	58022400 	.word	0x58022400
 8108b3c:	2300      	movs	r3, #0
 8108b3e:	69fa      	ldr	r2, [r7, #28]
 8108b40:	f002 0203 	and.w	r2, r2, #3
 8108b44:	0092      	lsls	r2, r2, #2
 8108b46:	4093      	lsls	r3, r2
 8108b48:	69ba      	ldr	r2, [r7, #24]
 8108b4a:	4313      	orrs	r3, r2
 8108b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8108b4e:	4938      	ldr	r1, [pc, #224]	@ (8108c30 <HAL_GPIO_Init+0x35c>)
 8108b50:	69fb      	ldr	r3, [r7, #28]
 8108b52:	089b      	lsrs	r3, r3, #2
 8108b54:	3302      	adds	r3, #2
 8108b56:	69ba      	ldr	r2, [r7, #24]
 8108b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8108b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8108b60:	681b      	ldr	r3, [r3, #0]
 8108b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8108b64:	693b      	ldr	r3, [r7, #16]
 8108b66:	43db      	mvns	r3, r3
 8108b68:	69ba      	ldr	r2, [r7, #24]
 8108b6a:	4013      	ands	r3, r2
 8108b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8108b6e:	683b      	ldr	r3, [r7, #0]
 8108b70:	685b      	ldr	r3, [r3, #4]
 8108b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8108b76:	2b00      	cmp	r3, #0
 8108b78:	d003      	beq.n	8108b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8108b7a:	69ba      	ldr	r2, [r7, #24]
 8108b7c:	693b      	ldr	r3, [r7, #16]
 8108b7e:	4313      	orrs	r3, r2
 8108b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8108b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8108b86:	69bb      	ldr	r3, [r7, #24]
 8108b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8108b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8108b8e:	685b      	ldr	r3, [r3, #4]
 8108b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8108b92:	693b      	ldr	r3, [r7, #16]
 8108b94:	43db      	mvns	r3, r3
 8108b96:	69ba      	ldr	r2, [r7, #24]
 8108b98:	4013      	ands	r3, r2
 8108b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8108b9c:	683b      	ldr	r3, [r7, #0]
 8108b9e:	685b      	ldr	r3, [r3, #4]
 8108ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8108ba4:	2b00      	cmp	r3, #0
 8108ba6:	d003      	beq.n	8108bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8108ba8:	69ba      	ldr	r2, [r7, #24]
 8108baa:	693b      	ldr	r3, [r7, #16]
 8108bac:	4313      	orrs	r3, r2
 8108bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8108bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8108bb4:	69bb      	ldr	r3, [r7, #24]
 8108bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8108bb8:	697b      	ldr	r3, [r7, #20]
 8108bba:	685b      	ldr	r3, [r3, #4]
 8108bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8108bbe:	693b      	ldr	r3, [r7, #16]
 8108bc0:	43db      	mvns	r3, r3
 8108bc2:	69ba      	ldr	r2, [r7, #24]
 8108bc4:	4013      	ands	r3, r2
 8108bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8108bc8:	683b      	ldr	r3, [r7, #0]
 8108bca:	685b      	ldr	r3, [r3, #4]
 8108bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108bd0:	2b00      	cmp	r3, #0
 8108bd2:	d003      	beq.n	8108bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8108bd4:	69ba      	ldr	r2, [r7, #24]
 8108bd6:	693b      	ldr	r3, [r7, #16]
 8108bd8:	4313      	orrs	r3, r2
 8108bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8108bdc:	697b      	ldr	r3, [r7, #20]
 8108bde:	69ba      	ldr	r2, [r7, #24]
 8108be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8108be2:	697b      	ldr	r3, [r7, #20]
 8108be4:	681b      	ldr	r3, [r3, #0]
 8108be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8108be8:	693b      	ldr	r3, [r7, #16]
 8108bea:	43db      	mvns	r3, r3
 8108bec:	69ba      	ldr	r2, [r7, #24]
 8108bee:	4013      	ands	r3, r2
 8108bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8108bf2:	683b      	ldr	r3, [r7, #0]
 8108bf4:	685b      	ldr	r3, [r3, #4]
 8108bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108bfa:	2b00      	cmp	r3, #0
 8108bfc:	d003      	beq.n	8108c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8108bfe:	69ba      	ldr	r2, [r7, #24]
 8108c00:	693b      	ldr	r3, [r7, #16]
 8108c02:	4313      	orrs	r3, r2
 8108c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8108c06:	697b      	ldr	r3, [r7, #20]
 8108c08:	69ba      	ldr	r2, [r7, #24]
 8108c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8108c0c:	69fb      	ldr	r3, [r7, #28]
 8108c0e:	3301      	adds	r3, #1
 8108c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8108c12:	683b      	ldr	r3, [r7, #0]
 8108c14:	681a      	ldr	r2, [r3, #0]
 8108c16:	69fb      	ldr	r3, [r7, #28]
 8108c18:	fa22 f303 	lsr.w	r3, r2, r3
 8108c1c:	2b00      	cmp	r3, #0
 8108c1e:	f47f ae63 	bne.w	81088e8 <HAL_GPIO_Init+0x14>
  }
}
 8108c22:	bf00      	nop
 8108c24:	bf00      	nop
 8108c26:	3724      	adds	r7, #36	@ 0x24
 8108c28:	46bd      	mov	sp, r7
 8108c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c2e:	4770      	bx	lr
 8108c30:	58000400 	.word	0x58000400

08108c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8108c34:	b480      	push	{r7}
 8108c36:	b085      	sub	sp, #20
 8108c38:	af00      	add	r7, sp, #0
 8108c3a:	6078      	str	r0, [r7, #4]
 8108c3c:	460b      	mov	r3, r1
 8108c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	691a      	ldr	r2, [r3, #16]
 8108c44:	887b      	ldrh	r3, [r7, #2]
 8108c46:	4013      	ands	r3, r2
 8108c48:	2b00      	cmp	r3, #0
 8108c4a:	d002      	beq.n	8108c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8108c4c:	2301      	movs	r3, #1
 8108c4e:	73fb      	strb	r3, [r7, #15]
 8108c50:	e001      	b.n	8108c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8108c52:	2300      	movs	r3, #0
 8108c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8108c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8108c58:	4618      	mov	r0, r3
 8108c5a:	3714      	adds	r7, #20
 8108c5c:	46bd      	mov	sp, r7
 8108c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c62:	4770      	bx	lr

08108c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8108c64:	b480      	push	{r7}
 8108c66:	b083      	sub	sp, #12
 8108c68:	af00      	add	r7, sp, #0
 8108c6a:	6078      	str	r0, [r7, #4]
 8108c6c:	460b      	mov	r3, r1
 8108c6e:	807b      	strh	r3, [r7, #2]
 8108c70:	4613      	mov	r3, r2
 8108c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8108c74:	787b      	ldrb	r3, [r7, #1]
 8108c76:	2b00      	cmp	r3, #0
 8108c78:	d003      	beq.n	8108c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8108c7a:	887a      	ldrh	r2, [r7, #2]
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8108c80:	e003      	b.n	8108c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8108c82:	887b      	ldrh	r3, [r7, #2]
 8108c84:	041a      	lsls	r2, r3, #16
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	619a      	str	r2, [r3, #24]
}
 8108c8a:	bf00      	nop
 8108c8c:	370c      	adds	r7, #12
 8108c8e:	46bd      	mov	sp, r7
 8108c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c94:	4770      	bx	lr

08108c96 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8108c96:	b580      	push	{r7, lr}
 8108c98:	b082      	sub	sp, #8
 8108c9a:	af00      	add	r7, sp, #0
 8108c9c:	4603      	mov	r3, r0
 8108c9e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8108ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8108ca4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8108ca8:	88fb      	ldrh	r3, [r7, #6]
 8108caa:	4013      	ands	r3, r2
 8108cac:	2b00      	cmp	r3, #0
 8108cae:	d008      	beq.n	8108cc2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8108cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8108cb4:	88fb      	ldrh	r3, [r7, #6]
 8108cb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8108cba:	88fb      	ldrh	r3, [r7, #6]
 8108cbc:	4618      	mov	r0, r3
 8108cbe:	f7f8 feb3 	bl	8101a28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8108cc2:	bf00      	nop
 8108cc4:	3708      	adds	r7, #8
 8108cc6:	46bd      	mov	sp, r7
 8108cc8:	bd80      	pop	{r7, pc}
	...

08108ccc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8108ccc:	b580      	push	{r7, lr}
 8108cce:	b084      	sub	sp, #16
 8108cd0:	af00      	add	r7, sp, #0
 8108cd2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8108cd4:	4b29      	ldr	r3, [pc, #164]	@ (8108d7c <HAL_PWREx_ConfigSupply+0xb0>)
 8108cd6:	68db      	ldr	r3, [r3, #12]
 8108cd8:	f003 0307 	and.w	r3, r3, #7
 8108cdc:	2b06      	cmp	r3, #6
 8108cde:	d00a      	beq.n	8108cf6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8108ce0:	4b26      	ldr	r3, [pc, #152]	@ (8108d7c <HAL_PWREx_ConfigSupply+0xb0>)
 8108ce2:	68db      	ldr	r3, [r3, #12]
 8108ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108ce8:	687a      	ldr	r2, [r7, #4]
 8108cea:	429a      	cmp	r2, r3
 8108cec:	d001      	beq.n	8108cf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8108cee:	2301      	movs	r3, #1
 8108cf0:	e040      	b.n	8108d74 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8108cf2:	2300      	movs	r3, #0
 8108cf4:	e03e      	b.n	8108d74 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8108cf6:	4b21      	ldr	r3, [pc, #132]	@ (8108d7c <HAL_PWREx_ConfigSupply+0xb0>)
 8108cf8:	68db      	ldr	r3, [r3, #12]
 8108cfa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8108cfe:	491f      	ldr	r1, [pc, #124]	@ (8108d7c <HAL_PWREx_ConfigSupply+0xb0>)
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	4313      	orrs	r3, r2
 8108d04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8108d06:	f7f9 fe11 	bl	810292c <HAL_GetTick>
 8108d0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8108d0c:	e009      	b.n	8108d22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8108d0e:	f7f9 fe0d 	bl	810292c <HAL_GetTick>
 8108d12:	4602      	mov	r2, r0
 8108d14:	68fb      	ldr	r3, [r7, #12]
 8108d16:	1ad3      	subs	r3, r2, r3
 8108d18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108d1c:	d901      	bls.n	8108d22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8108d1e:	2301      	movs	r3, #1
 8108d20:	e028      	b.n	8108d74 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8108d22:	4b16      	ldr	r3, [pc, #88]	@ (8108d7c <HAL_PWREx_ConfigSupply+0xb0>)
 8108d24:	685b      	ldr	r3, [r3, #4]
 8108d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8108d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108d2e:	d1ee      	bne.n	8108d0e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	2b1e      	cmp	r3, #30
 8108d34:	d008      	beq.n	8108d48 <HAL_PWREx_ConfigSupply+0x7c>
 8108d36:	687b      	ldr	r3, [r7, #4]
 8108d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8108d3a:	d005      	beq.n	8108d48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8108d3c:	687b      	ldr	r3, [r7, #4]
 8108d3e:	2b1d      	cmp	r3, #29
 8108d40:	d002      	beq.n	8108d48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	2b2d      	cmp	r3, #45	@ 0x2d
 8108d46:	d114      	bne.n	8108d72 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8108d48:	f7f9 fdf0 	bl	810292c <HAL_GetTick>
 8108d4c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8108d4e:	e009      	b.n	8108d64 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8108d50:	f7f9 fdec 	bl	810292c <HAL_GetTick>
 8108d54:	4602      	mov	r2, r0
 8108d56:	68fb      	ldr	r3, [r7, #12]
 8108d58:	1ad3      	subs	r3, r2, r3
 8108d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108d5e:	d901      	bls.n	8108d64 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8108d60:	2301      	movs	r3, #1
 8108d62:	e007      	b.n	8108d74 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8108d64:	4b05      	ldr	r3, [pc, #20]	@ (8108d7c <HAL_PWREx_ConfigSupply+0xb0>)
 8108d66:	68db      	ldr	r3, [r3, #12]
 8108d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108d70:	d1ee      	bne.n	8108d50 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8108d72:	2300      	movs	r3, #0
}
 8108d74:	4618      	mov	r0, r3
 8108d76:	3710      	adds	r7, #16
 8108d78:	46bd      	mov	sp, r7
 8108d7a:	bd80      	pop	{r7, pc}
 8108d7c:	58024800 	.word	0x58024800

08108d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8108d80:	b580      	push	{r7, lr}
 8108d82:	b08c      	sub	sp, #48	@ 0x30
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	2b00      	cmp	r3, #0
 8108d8c:	d102      	bne.n	8108d94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8108d8e:	2301      	movs	r3, #1
 8108d90:	f000 bc48 	b.w	8109624 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	681b      	ldr	r3, [r3, #0]
 8108d98:	f003 0301 	and.w	r3, r3, #1
 8108d9c:	2b00      	cmp	r3, #0
 8108d9e:	f000 8088 	beq.w	8108eb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8108da2:	4b99      	ldr	r3, [pc, #612]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108da4:	691b      	ldr	r3, [r3, #16]
 8108da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8108dac:	4b96      	ldr	r3, [pc, #600]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8108db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108db4:	2b10      	cmp	r3, #16
 8108db6:	d007      	beq.n	8108dc8 <HAL_RCC_OscConfig+0x48>
 8108db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108dba:	2b18      	cmp	r3, #24
 8108dbc:	d111      	bne.n	8108de2 <HAL_RCC_OscConfig+0x62>
 8108dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108dc0:	f003 0303 	and.w	r3, r3, #3
 8108dc4:	2b02      	cmp	r3, #2
 8108dc6:	d10c      	bne.n	8108de2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8108dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108dca:	681b      	ldr	r3, [r3, #0]
 8108dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108dd0:	2b00      	cmp	r3, #0
 8108dd2:	d06d      	beq.n	8108eb0 <HAL_RCC_OscConfig+0x130>
 8108dd4:	687b      	ldr	r3, [r7, #4]
 8108dd6:	685b      	ldr	r3, [r3, #4]
 8108dd8:	2b00      	cmp	r3, #0
 8108dda:	d169      	bne.n	8108eb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8108ddc:	2301      	movs	r3, #1
 8108dde:	f000 bc21 	b.w	8109624 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8108de2:	687b      	ldr	r3, [r7, #4]
 8108de4:	685b      	ldr	r3, [r3, #4]
 8108de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108dea:	d106      	bne.n	8108dfa <HAL_RCC_OscConfig+0x7a>
 8108dec:	4b86      	ldr	r3, [pc, #536]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	4a85      	ldr	r2, [pc, #532]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8108df6:	6013      	str	r3, [r2, #0]
 8108df8:	e02e      	b.n	8108e58 <HAL_RCC_OscConfig+0xd8>
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	685b      	ldr	r3, [r3, #4]
 8108dfe:	2b00      	cmp	r3, #0
 8108e00:	d10c      	bne.n	8108e1c <HAL_RCC_OscConfig+0x9c>
 8108e02:	4b81      	ldr	r3, [pc, #516]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e04:	681b      	ldr	r3, [r3, #0]
 8108e06:	4a80      	ldr	r2, [pc, #512]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108e0c:	6013      	str	r3, [r2, #0]
 8108e0e:	4b7e      	ldr	r3, [pc, #504]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e10:	681b      	ldr	r3, [r3, #0]
 8108e12:	4a7d      	ldr	r2, [pc, #500]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8108e18:	6013      	str	r3, [r2, #0]
 8108e1a:	e01d      	b.n	8108e58 <HAL_RCC_OscConfig+0xd8>
 8108e1c:	687b      	ldr	r3, [r7, #4]
 8108e1e:	685b      	ldr	r3, [r3, #4]
 8108e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108e24:	d10c      	bne.n	8108e40 <HAL_RCC_OscConfig+0xc0>
 8108e26:	4b78      	ldr	r3, [pc, #480]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e28:	681b      	ldr	r3, [r3, #0]
 8108e2a:	4a77      	ldr	r2, [pc, #476]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8108e30:	6013      	str	r3, [r2, #0]
 8108e32:	4b75      	ldr	r3, [pc, #468]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e34:	681b      	ldr	r3, [r3, #0]
 8108e36:	4a74      	ldr	r2, [pc, #464]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8108e3c:	6013      	str	r3, [r2, #0]
 8108e3e:	e00b      	b.n	8108e58 <HAL_RCC_OscConfig+0xd8>
 8108e40:	4b71      	ldr	r3, [pc, #452]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e42:	681b      	ldr	r3, [r3, #0]
 8108e44:	4a70      	ldr	r2, [pc, #448]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108e4a:	6013      	str	r3, [r2, #0]
 8108e4c:	4b6e      	ldr	r3, [pc, #440]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e4e:	681b      	ldr	r3, [r3, #0]
 8108e50:	4a6d      	ldr	r2, [pc, #436]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8108e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	685b      	ldr	r3, [r3, #4]
 8108e5c:	2b00      	cmp	r3, #0
 8108e5e:	d013      	beq.n	8108e88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108e60:	f7f9 fd64 	bl	810292c <HAL_GetTick>
 8108e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8108e66:	e008      	b.n	8108e7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8108e68:	f7f9 fd60 	bl	810292c <HAL_GetTick>
 8108e6c:	4602      	mov	r2, r0
 8108e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e70:	1ad3      	subs	r3, r2, r3
 8108e72:	2b64      	cmp	r3, #100	@ 0x64
 8108e74:	d901      	bls.n	8108e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8108e76:	2303      	movs	r3, #3
 8108e78:	e3d4      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8108e7a:	4b63      	ldr	r3, [pc, #396]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108e7c:	681b      	ldr	r3, [r3, #0]
 8108e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108e82:	2b00      	cmp	r3, #0
 8108e84:	d0f0      	beq.n	8108e68 <HAL_RCC_OscConfig+0xe8>
 8108e86:	e014      	b.n	8108eb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108e88:	f7f9 fd50 	bl	810292c <HAL_GetTick>
 8108e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8108e8e:	e008      	b.n	8108ea2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8108e90:	f7f9 fd4c 	bl	810292c <HAL_GetTick>
 8108e94:	4602      	mov	r2, r0
 8108e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e98:	1ad3      	subs	r3, r2, r3
 8108e9a:	2b64      	cmp	r3, #100	@ 0x64
 8108e9c:	d901      	bls.n	8108ea2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8108e9e:	2303      	movs	r3, #3
 8108ea0:	e3c0      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8108ea2:	4b59      	ldr	r3, [pc, #356]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108ea4:	681b      	ldr	r3, [r3, #0]
 8108ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108eaa:	2b00      	cmp	r3, #0
 8108eac:	d1f0      	bne.n	8108e90 <HAL_RCC_OscConfig+0x110>
 8108eae:	e000      	b.n	8108eb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8108eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	681b      	ldr	r3, [r3, #0]
 8108eb6:	f003 0302 	and.w	r3, r3, #2
 8108eba:	2b00      	cmp	r3, #0
 8108ebc:	f000 80ca 	beq.w	8109054 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8108ec0:	4b51      	ldr	r3, [pc, #324]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108ec2:	691b      	ldr	r3, [r3, #16]
 8108ec4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108ec8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8108eca:	4b4f      	ldr	r3, [pc, #316]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ece:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8108ed0:	6a3b      	ldr	r3, [r7, #32]
 8108ed2:	2b00      	cmp	r3, #0
 8108ed4:	d007      	beq.n	8108ee6 <HAL_RCC_OscConfig+0x166>
 8108ed6:	6a3b      	ldr	r3, [r7, #32]
 8108ed8:	2b18      	cmp	r3, #24
 8108eda:	d156      	bne.n	8108f8a <HAL_RCC_OscConfig+0x20a>
 8108edc:	69fb      	ldr	r3, [r7, #28]
 8108ede:	f003 0303 	and.w	r3, r3, #3
 8108ee2:	2b00      	cmp	r3, #0
 8108ee4:	d151      	bne.n	8108f8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8108ee6:	4b48      	ldr	r3, [pc, #288]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108ee8:	681b      	ldr	r3, [r3, #0]
 8108eea:	f003 0304 	and.w	r3, r3, #4
 8108eee:	2b00      	cmp	r3, #0
 8108ef0:	d005      	beq.n	8108efe <HAL_RCC_OscConfig+0x17e>
 8108ef2:	687b      	ldr	r3, [r7, #4]
 8108ef4:	68db      	ldr	r3, [r3, #12]
 8108ef6:	2b00      	cmp	r3, #0
 8108ef8:	d101      	bne.n	8108efe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8108efa:	2301      	movs	r3, #1
 8108efc:	e392      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8108efe:	4b42      	ldr	r3, [pc, #264]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f00:	681b      	ldr	r3, [r3, #0]
 8108f02:	f023 0219 	bic.w	r2, r3, #25
 8108f06:	687b      	ldr	r3, [r7, #4]
 8108f08:	68db      	ldr	r3, [r3, #12]
 8108f0a:	493f      	ldr	r1, [pc, #252]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f0c:	4313      	orrs	r3, r2
 8108f0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108f10:	f7f9 fd0c 	bl	810292c <HAL_GetTick>
 8108f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8108f16:	e008      	b.n	8108f2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8108f18:	f7f9 fd08 	bl	810292c <HAL_GetTick>
 8108f1c:	4602      	mov	r2, r0
 8108f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f20:	1ad3      	subs	r3, r2, r3
 8108f22:	2b02      	cmp	r3, #2
 8108f24:	d901      	bls.n	8108f2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8108f26:	2303      	movs	r3, #3
 8108f28:	e37c      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8108f2a:	4b37      	ldr	r3, [pc, #220]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f2c:	681b      	ldr	r3, [r3, #0]
 8108f2e:	f003 0304 	and.w	r3, r3, #4
 8108f32:	2b00      	cmp	r3, #0
 8108f34:	d0f0      	beq.n	8108f18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8108f36:	f7f9 fd29 	bl	810298c <HAL_GetREVID>
 8108f3a:	4603      	mov	r3, r0
 8108f3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8108f40:	4293      	cmp	r3, r2
 8108f42:	d817      	bhi.n	8108f74 <HAL_RCC_OscConfig+0x1f4>
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	691b      	ldr	r3, [r3, #16]
 8108f48:	2b40      	cmp	r3, #64	@ 0x40
 8108f4a:	d108      	bne.n	8108f5e <HAL_RCC_OscConfig+0x1de>
 8108f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f4e:	685b      	ldr	r3, [r3, #4]
 8108f50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8108f54:	4a2c      	ldr	r2, [pc, #176]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108f5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8108f5c:	e07a      	b.n	8109054 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8108f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f60:	685b      	ldr	r3, [r3, #4]
 8108f62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108f66:	687b      	ldr	r3, [r7, #4]
 8108f68:	691b      	ldr	r3, [r3, #16]
 8108f6a:	031b      	lsls	r3, r3, #12
 8108f6c:	4926      	ldr	r1, [pc, #152]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f6e:	4313      	orrs	r3, r2
 8108f70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8108f72:	e06f      	b.n	8109054 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8108f74:	4b24      	ldr	r3, [pc, #144]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f76:	685b      	ldr	r3, [r3, #4]
 8108f78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	691b      	ldr	r3, [r3, #16]
 8108f80:	061b      	lsls	r3, r3, #24
 8108f82:	4921      	ldr	r1, [pc, #132]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f84:	4313      	orrs	r3, r2
 8108f86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8108f88:	e064      	b.n	8109054 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	68db      	ldr	r3, [r3, #12]
 8108f8e:	2b00      	cmp	r3, #0
 8108f90:	d047      	beq.n	8109022 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8108f92:	4b1d      	ldr	r3, [pc, #116]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108f94:	681b      	ldr	r3, [r3, #0]
 8108f96:	f023 0219 	bic.w	r2, r3, #25
 8108f9a:	687b      	ldr	r3, [r7, #4]
 8108f9c:	68db      	ldr	r3, [r3, #12]
 8108f9e:	491a      	ldr	r1, [pc, #104]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108fa0:	4313      	orrs	r3, r2
 8108fa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108fa4:	f7f9 fcc2 	bl	810292c <HAL_GetTick>
 8108fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8108faa:	e008      	b.n	8108fbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8108fac:	f7f9 fcbe 	bl	810292c <HAL_GetTick>
 8108fb0:	4602      	mov	r2, r0
 8108fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108fb4:	1ad3      	subs	r3, r2, r3
 8108fb6:	2b02      	cmp	r3, #2
 8108fb8:	d901      	bls.n	8108fbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8108fba:	2303      	movs	r3, #3
 8108fbc:	e332      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8108fbe:	4b12      	ldr	r3, [pc, #72]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	f003 0304 	and.w	r3, r3, #4
 8108fc6:	2b00      	cmp	r3, #0
 8108fc8:	d0f0      	beq.n	8108fac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8108fca:	f7f9 fcdf 	bl	810298c <HAL_GetREVID>
 8108fce:	4603      	mov	r3, r0
 8108fd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8108fd4:	4293      	cmp	r3, r2
 8108fd6:	d819      	bhi.n	810900c <HAL_RCC_OscConfig+0x28c>
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	691b      	ldr	r3, [r3, #16]
 8108fdc:	2b40      	cmp	r3, #64	@ 0x40
 8108fde:	d108      	bne.n	8108ff2 <HAL_RCC_OscConfig+0x272>
 8108fe0:	4b09      	ldr	r3, [pc, #36]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108fe2:	685b      	ldr	r3, [r3, #4]
 8108fe4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8108fe8:	4a07      	ldr	r2, [pc, #28]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108fee:	6053      	str	r3, [r2, #4]
 8108ff0:	e030      	b.n	8109054 <HAL_RCC_OscConfig+0x2d4>
 8108ff2:	4b05      	ldr	r3, [pc, #20]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8108ff4:	685b      	ldr	r3, [r3, #4]
 8108ff6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	691b      	ldr	r3, [r3, #16]
 8108ffe:	031b      	lsls	r3, r3, #12
 8109000:	4901      	ldr	r1, [pc, #4]	@ (8109008 <HAL_RCC_OscConfig+0x288>)
 8109002:	4313      	orrs	r3, r2
 8109004:	604b      	str	r3, [r1, #4]
 8109006:	e025      	b.n	8109054 <HAL_RCC_OscConfig+0x2d4>
 8109008:	58024400 	.word	0x58024400
 810900c:	4b9a      	ldr	r3, [pc, #616]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810900e:	685b      	ldr	r3, [r3, #4]
 8109010:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8109014:	687b      	ldr	r3, [r7, #4]
 8109016:	691b      	ldr	r3, [r3, #16]
 8109018:	061b      	lsls	r3, r3, #24
 810901a:	4997      	ldr	r1, [pc, #604]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810901c:	4313      	orrs	r3, r2
 810901e:	604b      	str	r3, [r1, #4]
 8109020:	e018      	b.n	8109054 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8109022:	4b95      	ldr	r3, [pc, #596]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109024:	681b      	ldr	r3, [r3, #0]
 8109026:	4a94      	ldr	r2, [pc, #592]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109028:	f023 0301 	bic.w	r3, r3, #1
 810902c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810902e:	f7f9 fc7d 	bl	810292c <HAL_GetTick>
 8109032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8109034:	e008      	b.n	8109048 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8109036:	f7f9 fc79 	bl	810292c <HAL_GetTick>
 810903a:	4602      	mov	r2, r0
 810903c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810903e:	1ad3      	subs	r3, r2, r3
 8109040:	2b02      	cmp	r3, #2
 8109042:	d901      	bls.n	8109048 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8109044:	2303      	movs	r3, #3
 8109046:	e2ed      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8109048:	4b8b      	ldr	r3, [pc, #556]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	f003 0304 	and.w	r3, r3, #4
 8109050:	2b00      	cmp	r3, #0
 8109052:	d1f0      	bne.n	8109036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8109054:	687b      	ldr	r3, [r7, #4]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	f003 0310 	and.w	r3, r3, #16
 810905c:	2b00      	cmp	r3, #0
 810905e:	f000 80a9 	beq.w	81091b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8109062:	4b85      	ldr	r3, [pc, #532]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109064:	691b      	ldr	r3, [r3, #16]
 8109066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810906a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 810906c:	4b82      	ldr	r3, [pc, #520]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810906e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109070:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8109072:	69bb      	ldr	r3, [r7, #24]
 8109074:	2b08      	cmp	r3, #8
 8109076:	d007      	beq.n	8109088 <HAL_RCC_OscConfig+0x308>
 8109078:	69bb      	ldr	r3, [r7, #24]
 810907a:	2b18      	cmp	r3, #24
 810907c:	d13a      	bne.n	81090f4 <HAL_RCC_OscConfig+0x374>
 810907e:	697b      	ldr	r3, [r7, #20]
 8109080:	f003 0303 	and.w	r3, r3, #3
 8109084:	2b01      	cmp	r3, #1
 8109086:	d135      	bne.n	81090f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8109088:	4b7b      	ldr	r3, [pc, #492]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810908a:	681b      	ldr	r3, [r3, #0]
 810908c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109090:	2b00      	cmp	r3, #0
 8109092:	d005      	beq.n	81090a0 <HAL_RCC_OscConfig+0x320>
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	69db      	ldr	r3, [r3, #28]
 8109098:	2b80      	cmp	r3, #128	@ 0x80
 810909a:	d001      	beq.n	81090a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 810909c:	2301      	movs	r3, #1
 810909e:	e2c1      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 81090a0:	f7f9 fc74 	bl	810298c <HAL_GetREVID>
 81090a4:	4603      	mov	r3, r0
 81090a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 81090aa:	4293      	cmp	r3, r2
 81090ac:	d817      	bhi.n	81090de <HAL_RCC_OscConfig+0x35e>
 81090ae:	687b      	ldr	r3, [r7, #4]
 81090b0:	6a1b      	ldr	r3, [r3, #32]
 81090b2:	2b20      	cmp	r3, #32
 81090b4:	d108      	bne.n	81090c8 <HAL_RCC_OscConfig+0x348>
 81090b6:	4b70      	ldr	r3, [pc, #448]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090b8:	685b      	ldr	r3, [r3, #4]
 81090ba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 81090be:	4a6e      	ldr	r2, [pc, #440]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81090c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 81090c6:	e075      	b.n	81091b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 81090c8:	4b6b      	ldr	r3, [pc, #428]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090ca:	685b      	ldr	r3, [r3, #4]
 81090cc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	6a1b      	ldr	r3, [r3, #32]
 81090d4:	069b      	lsls	r3, r3, #26
 81090d6:	4968      	ldr	r1, [pc, #416]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090d8:	4313      	orrs	r3, r2
 81090da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 81090dc:	e06a      	b.n	81091b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 81090de:	4b66      	ldr	r3, [pc, #408]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090e0:	68db      	ldr	r3, [r3, #12]
 81090e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	6a1b      	ldr	r3, [r3, #32]
 81090ea:	061b      	lsls	r3, r3, #24
 81090ec:	4962      	ldr	r1, [pc, #392]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090ee:	4313      	orrs	r3, r2
 81090f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 81090f2:	e05f      	b.n	81091b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 81090f4:	687b      	ldr	r3, [r7, #4]
 81090f6:	69db      	ldr	r3, [r3, #28]
 81090f8:	2b00      	cmp	r3, #0
 81090fa:	d042      	beq.n	8109182 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 81090fc:	4b5e      	ldr	r3, [pc, #376]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81090fe:	681b      	ldr	r3, [r3, #0]
 8109100:	4a5d      	ldr	r2, [pc, #372]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8109106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8109108:	f7f9 fc10 	bl	810292c <HAL_GetTick>
 810910c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 810910e:	e008      	b.n	8109122 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8109110:	f7f9 fc0c 	bl	810292c <HAL_GetTick>
 8109114:	4602      	mov	r2, r0
 8109116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109118:	1ad3      	subs	r3, r2, r3
 810911a:	2b02      	cmp	r3, #2
 810911c:	d901      	bls.n	8109122 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 810911e:	2303      	movs	r3, #3
 8109120:	e280      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8109122:	4b55      	ldr	r3, [pc, #340]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810912a:	2b00      	cmp	r3, #0
 810912c:	d0f0      	beq.n	8109110 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 810912e:	f7f9 fc2d 	bl	810298c <HAL_GetREVID>
 8109132:	4603      	mov	r3, r0
 8109134:	f241 0203 	movw	r2, #4099	@ 0x1003
 8109138:	4293      	cmp	r3, r2
 810913a:	d817      	bhi.n	810916c <HAL_RCC_OscConfig+0x3ec>
 810913c:	687b      	ldr	r3, [r7, #4]
 810913e:	6a1b      	ldr	r3, [r3, #32]
 8109140:	2b20      	cmp	r3, #32
 8109142:	d108      	bne.n	8109156 <HAL_RCC_OscConfig+0x3d6>
 8109144:	4b4c      	ldr	r3, [pc, #304]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109146:	685b      	ldr	r3, [r3, #4]
 8109148:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 810914c:	4a4a      	ldr	r2, [pc, #296]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810914e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8109152:	6053      	str	r3, [r2, #4]
 8109154:	e02e      	b.n	81091b4 <HAL_RCC_OscConfig+0x434>
 8109156:	4b48      	ldr	r3, [pc, #288]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109158:	685b      	ldr	r3, [r3, #4]
 810915a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	6a1b      	ldr	r3, [r3, #32]
 8109162:	069b      	lsls	r3, r3, #26
 8109164:	4944      	ldr	r1, [pc, #272]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109166:	4313      	orrs	r3, r2
 8109168:	604b      	str	r3, [r1, #4]
 810916a:	e023      	b.n	81091b4 <HAL_RCC_OscConfig+0x434>
 810916c:	4b42      	ldr	r3, [pc, #264]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810916e:	68db      	ldr	r3, [r3, #12]
 8109170:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	6a1b      	ldr	r3, [r3, #32]
 8109178:	061b      	lsls	r3, r3, #24
 810917a:	493f      	ldr	r1, [pc, #252]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810917c:	4313      	orrs	r3, r2
 810917e:	60cb      	str	r3, [r1, #12]
 8109180:	e018      	b.n	81091b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8109182:	4b3d      	ldr	r3, [pc, #244]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	4a3c      	ldr	r2, [pc, #240]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810918c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810918e:	f7f9 fbcd 	bl	810292c <HAL_GetTick>
 8109192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8109194:	e008      	b.n	81091a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8109196:	f7f9 fbc9 	bl	810292c <HAL_GetTick>
 810919a:	4602      	mov	r2, r0
 810919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810919e:	1ad3      	subs	r3, r2, r3
 81091a0:	2b02      	cmp	r3, #2
 81091a2:	d901      	bls.n	81091a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 81091a4:	2303      	movs	r3, #3
 81091a6:	e23d      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 81091a8:	4b33      	ldr	r3, [pc, #204]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81091aa:	681b      	ldr	r3, [r3, #0]
 81091ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81091b0:	2b00      	cmp	r3, #0
 81091b2:	d1f0      	bne.n	8109196 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	681b      	ldr	r3, [r3, #0]
 81091b8:	f003 0308 	and.w	r3, r3, #8
 81091bc:	2b00      	cmp	r3, #0
 81091be:	d036      	beq.n	810922e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	695b      	ldr	r3, [r3, #20]
 81091c4:	2b00      	cmp	r3, #0
 81091c6:	d019      	beq.n	81091fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 81091c8:	4b2b      	ldr	r3, [pc, #172]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81091ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81091cc:	4a2a      	ldr	r2, [pc, #168]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81091ce:	f043 0301 	orr.w	r3, r3, #1
 81091d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 81091d4:	f7f9 fbaa 	bl	810292c <HAL_GetTick>
 81091d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 81091da:	e008      	b.n	81091ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 81091dc:	f7f9 fba6 	bl	810292c <HAL_GetTick>
 81091e0:	4602      	mov	r2, r0
 81091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81091e4:	1ad3      	subs	r3, r2, r3
 81091e6:	2b02      	cmp	r3, #2
 81091e8:	d901      	bls.n	81091ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 81091ea:	2303      	movs	r3, #3
 81091ec:	e21a      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 81091ee:	4b22      	ldr	r3, [pc, #136]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81091f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81091f2:	f003 0302 	and.w	r3, r3, #2
 81091f6:	2b00      	cmp	r3, #0
 81091f8:	d0f0      	beq.n	81091dc <HAL_RCC_OscConfig+0x45c>
 81091fa:	e018      	b.n	810922e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 81091fc:	4b1e      	ldr	r3, [pc, #120]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 81091fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109200:	4a1d      	ldr	r2, [pc, #116]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109202:	f023 0301 	bic.w	r3, r3, #1
 8109206:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8109208:	f7f9 fb90 	bl	810292c <HAL_GetTick>
 810920c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 810920e:	e008      	b.n	8109222 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8109210:	f7f9 fb8c 	bl	810292c <HAL_GetTick>
 8109214:	4602      	mov	r2, r0
 8109216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109218:	1ad3      	subs	r3, r2, r3
 810921a:	2b02      	cmp	r3, #2
 810921c:	d901      	bls.n	8109222 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 810921e:	2303      	movs	r3, #3
 8109220:	e200      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8109222:	4b15      	ldr	r3, [pc, #84]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109226:	f003 0302 	and.w	r3, r3, #2
 810922a:	2b00      	cmp	r3, #0
 810922c:	d1f0      	bne.n	8109210 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	f003 0320 	and.w	r3, r3, #32
 8109236:	2b00      	cmp	r3, #0
 8109238:	d039      	beq.n	81092ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	699b      	ldr	r3, [r3, #24]
 810923e:	2b00      	cmp	r3, #0
 8109240:	d01c      	beq.n	810927c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8109242:	4b0d      	ldr	r3, [pc, #52]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	4a0c      	ldr	r2, [pc, #48]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 8109248:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 810924c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 810924e:	f7f9 fb6d 	bl	810292c <HAL_GetTick>
 8109252:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8109254:	e008      	b.n	8109268 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8109256:	f7f9 fb69 	bl	810292c <HAL_GetTick>
 810925a:	4602      	mov	r2, r0
 810925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810925e:	1ad3      	subs	r3, r2, r3
 8109260:	2b02      	cmp	r3, #2
 8109262:	d901      	bls.n	8109268 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8109264:	2303      	movs	r3, #3
 8109266:	e1dd      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8109268:	4b03      	ldr	r3, [pc, #12]	@ (8109278 <HAL_RCC_OscConfig+0x4f8>)
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8109270:	2b00      	cmp	r3, #0
 8109272:	d0f0      	beq.n	8109256 <HAL_RCC_OscConfig+0x4d6>
 8109274:	e01b      	b.n	81092ae <HAL_RCC_OscConfig+0x52e>
 8109276:	bf00      	nop
 8109278:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 810927c:	4b9b      	ldr	r3, [pc, #620]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810927e:	681b      	ldr	r3, [r3, #0]
 8109280:	4a9a      	ldr	r2, [pc, #616]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8109286:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8109288:	f7f9 fb50 	bl	810292c <HAL_GetTick>
 810928c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 810928e:	e008      	b.n	81092a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8109290:	f7f9 fb4c 	bl	810292c <HAL_GetTick>
 8109294:	4602      	mov	r2, r0
 8109296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109298:	1ad3      	subs	r3, r2, r3
 810929a:	2b02      	cmp	r3, #2
 810929c:	d901      	bls.n	81092a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 810929e:	2303      	movs	r3, #3
 81092a0:	e1c0      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 81092a2:	4b92      	ldr	r3, [pc, #584]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81092aa:	2b00      	cmp	r3, #0
 81092ac:	d1f0      	bne.n	8109290 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 81092ae:	687b      	ldr	r3, [r7, #4]
 81092b0:	681b      	ldr	r3, [r3, #0]
 81092b2:	f003 0304 	and.w	r3, r3, #4
 81092b6:	2b00      	cmp	r3, #0
 81092b8:	f000 8081 	beq.w	81093be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 81092bc:	4b8c      	ldr	r3, [pc, #560]	@ (81094f0 <HAL_RCC_OscConfig+0x770>)
 81092be:	681b      	ldr	r3, [r3, #0]
 81092c0:	4a8b      	ldr	r2, [pc, #556]	@ (81094f0 <HAL_RCC_OscConfig+0x770>)
 81092c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81092c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81092c8:	f7f9 fb30 	bl	810292c <HAL_GetTick>
 81092cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81092ce:	e008      	b.n	81092e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81092d0:	f7f9 fb2c 	bl	810292c <HAL_GetTick>
 81092d4:	4602      	mov	r2, r0
 81092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81092d8:	1ad3      	subs	r3, r2, r3
 81092da:	2b64      	cmp	r3, #100	@ 0x64
 81092dc:	d901      	bls.n	81092e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 81092de:	2303      	movs	r3, #3
 81092e0:	e1a0      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81092e2:	4b83      	ldr	r3, [pc, #524]	@ (81094f0 <HAL_RCC_OscConfig+0x770>)
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81092ea:	2b00      	cmp	r3, #0
 81092ec:	d0f0      	beq.n	81092d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	689b      	ldr	r3, [r3, #8]
 81092f2:	2b01      	cmp	r3, #1
 81092f4:	d106      	bne.n	8109304 <HAL_RCC_OscConfig+0x584>
 81092f6:	4b7d      	ldr	r3, [pc, #500]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81092f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81092fa:	4a7c      	ldr	r2, [pc, #496]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81092fc:	f043 0301 	orr.w	r3, r3, #1
 8109300:	6713      	str	r3, [r2, #112]	@ 0x70
 8109302:	e02d      	b.n	8109360 <HAL_RCC_OscConfig+0x5e0>
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	689b      	ldr	r3, [r3, #8]
 8109308:	2b00      	cmp	r3, #0
 810930a:	d10c      	bne.n	8109326 <HAL_RCC_OscConfig+0x5a6>
 810930c:	4b77      	ldr	r3, [pc, #476]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810930e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109310:	4a76      	ldr	r2, [pc, #472]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109312:	f023 0301 	bic.w	r3, r3, #1
 8109316:	6713      	str	r3, [r2, #112]	@ 0x70
 8109318:	4b74      	ldr	r3, [pc, #464]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810931a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810931c:	4a73      	ldr	r2, [pc, #460]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810931e:	f023 0304 	bic.w	r3, r3, #4
 8109322:	6713      	str	r3, [r2, #112]	@ 0x70
 8109324:	e01c      	b.n	8109360 <HAL_RCC_OscConfig+0x5e0>
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	689b      	ldr	r3, [r3, #8]
 810932a:	2b05      	cmp	r3, #5
 810932c:	d10c      	bne.n	8109348 <HAL_RCC_OscConfig+0x5c8>
 810932e:	4b6f      	ldr	r3, [pc, #444]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109332:	4a6e      	ldr	r2, [pc, #440]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109334:	f043 0304 	orr.w	r3, r3, #4
 8109338:	6713      	str	r3, [r2, #112]	@ 0x70
 810933a:	4b6c      	ldr	r3, [pc, #432]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810933c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810933e:	4a6b      	ldr	r2, [pc, #428]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109340:	f043 0301 	orr.w	r3, r3, #1
 8109344:	6713      	str	r3, [r2, #112]	@ 0x70
 8109346:	e00b      	b.n	8109360 <HAL_RCC_OscConfig+0x5e0>
 8109348:	4b68      	ldr	r3, [pc, #416]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810934a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810934c:	4a67      	ldr	r2, [pc, #412]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810934e:	f023 0301 	bic.w	r3, r3, #1
 8109352:	6713      	str	r3, [r2, #112]	@ 0x70
 8109354:	4b65      	ldr	r3, [pc, #404]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109358:	4a64      	ldr	r2, [pc, #400]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810935a:	f023 0304 	bic.w	r3, r3, #4
 810935e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	689b      	ldr	r3, [r3, #8]
 8109364:	2b00      	cmp	r3, #0
 8109366:	d015      	beq.n	8109394 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8109368:	f7f9 fae0 	bl	810292c <HAL_GetTick>
 810936c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810936e:	e00a      	b.n	8109386 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109370:	f7f9 fadc 	bl	810292c <HAL_GetTick>
 8109374:	4602      	mov	r2, r0
 8109376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109378:	1ad3      	subs	r3, r2, r3
 810937a:	f241 3288 	movw	r2, #5000	@ 0x1388
 810937e:	4293      	cmp	r3, r2
 8109380:	d901      	bls.n	8109386 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8109382:	2303      	movs	r3, #3
 8109384:	e14e      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109386:	4b59      	ldr	r3, [pc, #356]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810938a:	f003 0302 	and.w	r3, r3, #2
 810938e:	2b00      	cmp	r3, #0
 8109390:	d0ee      	beq.n	8109370 <HAL_RCC_OscConfig+0x5f0>
 8109392:	e014      	b.n	81093be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8109394:	f7f9 faca 	bl	810292c <HAL_GetTick>
 8109398:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 810939a:	e00a      	b.n	81093b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810939c:	f7f9 fac6 	bl	810292c <HAL_GetTick>
 81093a0:	4602      	mov	r2, r0
 81093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81093a4:	1ad3      	subs	r3, r2, r3
 81093a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 81093aa:	4293      	cmp	r3, r2
 81093ac:	d901      	bls.n	81093b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 81093ae:	2303      	movs	r3, #3
 81093b0:	e138      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 81093b2:	4b4e      	ldr	r3, [pc, #312]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81093b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81093b6:	f003 0302 	and.w	r3, r3, #2
 81093ba:	2b00      	cmp	r3, #0
 81093bc:	d1ee      	bne.n	810939c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 81093be:	687b      	ldr	r3, [r7, #4]
 81093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093c2:	2b00      	cmp	r3, #0
 81093c4:	f000 812d 	beq.w	8109622 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 81093c8:	4b48      	ldr	r3, [pc, #288]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81093ca:	691b      	ldr	r3, [r3, #16]
 81093cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81093d0:	2b18      	cmp	r3, #24
 81093d2:	f000 80bd 	beq.w	8109550 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 81093d6:	687b      	ldr	r3, [r7, #4]
 81093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093da:	2b02      	cmp	r3, #2
 81093dc:	f040 809e 	bne.w	810951c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 81093e0:	4b42      	ldr	r3, [pc, #264]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81093e2:	681b      	ldr	r3, [r3, #0]
 81093e4:	4a41      	ldr	r2, [pc, #260]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81093e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 81093ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81093ec:	f7f9 fa9e 	bl	810292c <HAL_GetTick>
 81093f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 81093f2:	e008      	b.n	8109406 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 81093f4:	f7f9 fa9a 	bl	810292c <HAL_GetTick>
 81093f8:	4602      	mov	r2, r0
 81093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81093fc:	1ad3      	subs	r3, r2, r3
 81093fe:	2b02      	cmp	r3, #2
 8109400:	d901      	bls.n	8109406 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8109402:	2303      	movs	r3, #3
 8109404:	e10e      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8109406:	4b39      	ldr	r3, [pc, #228]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109408:	681b      	ldr	r3, [r3, #0]
 810940a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810940e:	2b00      	cmp	r3, #0
 8109410:	d1f0      	bne.n	81093f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8109412:	4b36      	ldr	r3, [pc, #216]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8109416:	4b37      	ldr	r3, [pc, #220]	@ (81094f4 <HAL_RCC_OscConfig+0x774>)
 8109418:	4013      	ands	r3, r2
 810941a:	687a      	ldr	r2, [r7, #4]
 810941c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 810941e:	687a      	ldr	r2, [r7, #4]
 8109420:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8109422:	0112      	lsls	r2, r2, #4
 8109424:	430a      	orrs	r2, r1
 8109426:	4931      	ldr	r1, [pc, #196]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109428:	4313      	orrs	r3, r2
 810942a:	628b      	str	r3, [r1, #40]	@ 0x28
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109430:	3b01      	subs	r3, #1
 8109432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109436:	687b      	ldr	r3, [r7, #4]
 8109438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810943a:	3b01      	subs	r3, #1
 810943c:	025b      	lsls	r3, r3, #9
 810943e:	b29b      	uxth	r3, r3
 8109440:	431a      	orrs	r2, r3
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109446:	3b01      	subs	r3, #1
 8109448:	041b      	lsls	r3, r3, #16
 810944a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810944e:	431a      	orrs	r2, r3
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109454:	3b01      	subs	r3, #1
 8109456:	061b      	lsls	r3, r3, #24
 8109458:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810945c:	4923      	ldr	r1, [pc, #140]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810945e:	4313      	orrs	r3, r2
 8109460:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8109462:	4b22      	ldr	r3, [pc, #136]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109466:	4a21      	ldr	r2, [pc, #132]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109468:	f023 0301 	bic.w	r3, r3, #1
 810946c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 810946e:	4b1f      	ldr	r3, [pc, #124]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109472:	4b21      	ldr	r3, [pc, #132]	@ (81094f8 <HAL_RCC_OscConfig+0x778>)
 8109474:	4013      	ands	r3, r2
 8109476:	687a      	ldr	r2, [r7, #4]
 8109478:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810947a:	00d2      	lsls	r2, r2, #3
 810947c:	491b      	ldr	r1, [pc, #108]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 810947e:	4313      	orrs	r3, r2
 8109480:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8109482:	4b1a      	ldr	r3, [pc, #104]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109486:	f023 020c 	bic.w	r2, r3, #12
 810948a:	687b      	ldr	r3, [r7, #4]
 810948c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810948e:	4917      	ldr	r1, [pc, #92]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109490:	4313      	orrs	r3, r2
 8109492:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8109494:	4b15      	ldr	r3, [pc, #84]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 8109496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109498:	f023 0202 	bic.w	r2, r3, #2
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81094a0:	4912      	ldr	r1, [pc, #72]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094a2:	4313      	orrs	r3, r2
 81094a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 81094a6:	4b11      	ldr	r3, [pc, #68]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81094aa:	4a10      	ldr	r2, [pc, #64]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81094b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81094b2:	4b0e      	ldr	r3, [pc, #56]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81094b6:	4a0d      	ldr	r2, [pc, #52]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81094bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 81094be:	4b0b      	ldr	r3, [pc, #44]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81094c2:	4a0a      	ldr	r2, [pc, #40]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81094c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 81094ca:	4b08      	ldr	r3, [pc, #32]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81094ce:	4a07      	ldr	r2, [pc, #28]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094d0:	f043 0301 	orr.w	r3, r3, #1
 81094d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 81094d6:	4b05      	ldr	r3, [pc, #20]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094d8:	681b      	ldr	r3, [r3, #0]
 81094da:	4a04      	ldr	r2, [pc, #16]	@ (81094ec <HAL_RCC_OscConfig+0x76c>)
 81094dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81094e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81094e2:	f7f9 fa23 	bl	810292c <HAL_GetTick>
 81094e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 81094e8:	e011      	b.n	810950e <HAL_RCC_OscConfig+0x78e>
 81094ea:	bf00      	nop
 81094ec:	58024400 	.word	0x58024400
 81094f0:	58024800 	.word	0x58024800
 81094f4:	fffffc0c 	.word	0xfffffc0c
 81094f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 81094fc:	f7f9 fa16 	bl	810292c <HAL_GetTick>
 8109500:	4602      	mov	r2, r0
 8109502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109504:	1ad3      	subs	r3, r2, r3
 8109506:	2b02      	cmp	r3, #2
 8109508:	d901      	bls.n	810950e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 810950a:	2303      	movs	r3, #3
 810950c:	e08a      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 810950e:	4b47      	ldr	r3, [pc, #284]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109510:	681b      	ldr	r3, [r3, #0]
 8109512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109516:	2b00      	cmp	r3, #0
 8109518:	d0f0      	beq.n	81094fc <HAL_RCC_OscConfig+0x77c>
 810951a:	e082      	b.n	8109622 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 810951c:	4b43      	ldr	r3, [pc, #268]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 810951e:	681b      	ldr	r3, [r3, #0]
 8109520:	4a42      	ldr	r2, [pc, #264]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8109528:	f7f9 fa00 	bl	810292c <HAL_GetTick>
 810952c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 810952e:	e008      	b.n	8109542 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8109530:	f7f9 f9fc 	bl	810292c <HAL_GetTick>
 8109534:	4602      	mov	r2, r0
 8109536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109538:	1ad3      	subs	r3, r2, r3
 810953a:	2b02      	cmp	r3, #2
 810953c:	d901      	bls.n	8109542 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 810953e:	2303      	movs	r3, #3
 8109540:	e070      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8109542:	4b3a      	ldr	r3, [pc, #232]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109544:	681b      	ldr	r3, [r3, #0]
 8109546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810954a:	2b00      	cmp	r3, #0
 810954c:	d1f0      	bne.n	8109530 <HAL_RCC_OscConfig+0x7b0>
 810954e:	e068      	b.n	8109622 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8109550:	4b36      	ldr	r3, [pc, #216]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109554:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8109556:	4b35      	ldr	r3, [pc, #212]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810955a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 810955c:	687b      	ldr	r3, [r7, #4]
 810955e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109560:	2b01      	cmp	r3, #1
 8109562:	d031      	beq.n	81095c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8109564:	693b      	ldr	r3, [r7, #16]
 8109566:	f003 0203 	and.w	r2, r3, #3
 810956a:	687b      	ldr	r3, [r7, #4]
 810956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 810956e:	429a      	cmp	r2, r3
 8109570:	d12a      	bne.n	81095c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8109572:	693b      	ldr	r3, [r7, #16]
 8109574:	091b      	lsrs	r3, r3, #4
 8109576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 810957e:	429a      	cmp	r2, r3
 8109580:	d122      	bne.n	81095c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8109582:	68fb      	ldr	r3, [r7, #12]
 8109584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810958c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 810958e:	429a      	cmp	r2, r3
 8109590:	d11a      	bne.n	81095c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8109592:	68fb      	ldr	r3, [r7, #12]
 8109594:	0a5b      	lsrs	r3, r3, #9
 8109596:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810959e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 81095a0:	429a      	cmp	r2, r3
 81095a2:	d111      	bne.n	81095c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 81095a4:	68fb      	ldr	r3, [r7, #12]
 81095a6:	0c1b      	lsrs	r3, r3, #16
 81095a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81095b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 81095b2:	429a      	cmp	r2, r3
 81095b4:	d108      	bne.n	81095c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 81095b6:	68fb      	ldr	r3, [r7, #12]
 81095b8:	0e1b      	lsrs	r3, r3, #24
 81095ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81095c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 81095c4:	429a      	cmp	r2, r3
 81095c6:	d001      	beq.n	81095cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 81095c8:	2301      	movs	r3, #1
 81095ca:	e02b      	b.n	8109624 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 81095cc:	4b17      	ldr	r3, [pc, #92]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 81095ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81095d0:	08db      	lsrs	r3, r3, #3
 81095d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81095d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81095dc:	693a      	ldr	r2, [r7, #16]
 81095de:	429a      	cmp	r2, r3
 81095e0:	d01f      	beq.n	8109622 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 81095e2:	4b12      	ldr	r3, [pc, #72]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 81095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81095e6:	4a11      	ldr	r2, [pc, #68]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 81095e8:	f023 0301 	bic.w	r3, r3, #1
 81095ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 81095ee:	f7f9 f99d 	bl	810292c <HAL_GetTick>
 81095f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 81095f4:	bf00      	nop
 81095f6:	f7f9 f999 	bl	810292c <HAL_GetTick>
 81095fa:	4602      	mov	r2, r0
 81095fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81095fe:	4293      	cmp	r3, r2
 8109600:	d0f9      	beq.n	81095f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8109602:	4b0a      	ldr	r3, [pc, #40]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109606:	4b0a      	ldr	r3, [pc, #40]	@ (8109630 <HAL_RCC_OscConfig+0x8b0>)
 8109608:	4013      	ands	r3, r2
 810960a:	687a      	ldr	r2, [r7, #4]
 810960c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810960e:	00d2      	lsls	r2, r2, #3
 8109610:	4906      	ldr	r1, [pc, #24]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109612:	4313      	orrs	r3, r2
 8109614:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8109616:	4b05      	ldr	r3, [pc, #20]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 8109618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810961a:	4a04      	ldr	r2, [pc, #16]	@ (810962c <HAL_RCC_OscConfig+0x8ac>)
 810961c:	f043 0301 	orr.w	r3, r3, #1
 8109620:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8109622:	2300      	movs	r3, #0
}
 8109624:	4618      	mov	r0, r3
 8109626:	3730      	adds	r7, #48	@ 0x30
 8109628:	46bd      	mov	sp, r7
 810962a:	bd80      	pop	{r7, pc}
 810962c:	58024400 	.word	0x58024400
 8109630:	ffff0007 	.word	0xffff0007

08109634 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8109634:	b580      	push	{r7, lr}
 8109636:	b086      	sub	sp, #24
 8109638:	af00      	add	r7, sp, #0
 810963a:	6078      	str	r0, [r7, #4]
 810963c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	2b00      	cmp	r3, #0
 8109642:	d101      	bne.n	8109648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8109644:	2301      	movs	r3, #1
 8109646:	e19c      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8109648:	4b8a      	ldr	r3, [pc, #552]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 810964a:	681b      	ldr	r3, [r3, #0]
 810964c:	f003 030f 	and.w	r3, r3, #15
 8109650:	683a      	ldr	r2, [r7, #0]
 8109652:	429a      	cmp	r2, r3
 8109654:	d910      	bls.n	8109678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8109656:	4b87      	ldr	r3, [pc, #540]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 8109658:	681b      	ldr	r3, [r3, #0]
 810965a:	f023 020f 	bic.w	r2, r3, #15
 810965e:	4985      	ldr	r1, [pc, #532]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 8109660:	683b      	ldr	r3, [r7, #0]
 8109662:	4313      	orrs	r3, r2
 8109664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8109666:	4b83      	ldr	r3, [pc, #524]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 8109668:	681b      	ldr	r3, [r3, #0]
 810966a:	f003 030f 	and.w	r3, r3, #15
 810966e:	683a      	ldr	r2, [r7, #0]
 8109670:	429a      	cmp	r2, r3
 8109672:	d001      	beq.n	8109678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8109674:	2301      	movs	r3, #1
 8109676:	e184      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	f003 0304 	and.w	r3, r3, #4
 8109680:	2b00      	cmp	r3, #0
 8109682:	d010      	beq.n	81096a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8109684:	687b      	ldr	r3, [r7, #4]
 8109686:	691a      	ldr	r2, [r3, #16]
 8109688:	4b7b      	ldr	r3, [pc, #492]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 810968a:	699b      	ldr	r3, [r3, #24]
 810968c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8109690:	429a      	cmp	r2, r3
 8109692:	d908      	bls.n	81096a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8109694:	4b78      	ldr	r3, [pc, #480]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109696:	699b      	ldr	r3, [r3, #24]
 8109698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	691b      	ldr	r3, [r3, #16]
 81096a0:	4975      	ldr	r1, [pc, #468]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096a2:	4313      	orrs	r3, r2
 81096a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 81096a6:	687b      	ldr	r3, [r7, #4]
 81096a8:	681b      	ldr	r3, [r3, #0]
 81096aa:	f003 0308 	and.w	r3, r3, #8
 81096ae:	2b00      	cmp	r3, #0
 81096b0:	d010      	beq.n	81096d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	695a      	ldr	r2, [r3, #20]
 81096b6:	4b70      	ldr	r3, [pc, #448]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096b8:	69db      	ldr	r3, [r3, #28]
 81096ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 81096be:	429a      	cmp	r2, r3
 81096c0:	d908      	bls.n	81096d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 81096c2:	4b6d      	ldr	r3, [pc, #436]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096c4:	69db      	ldr	r3, [r3, #28]
 81096c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	695b      	ldr	r3, [r3, #20]
 81096ce:	496a      	ldr	r1, [pc, #424]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096d0:	4313      	orrs	r3, r2
 81096d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	681b      	ldr	r3, [r3, #0]
 81096d8:	f003 0310 	and.w	r3, r3, #16
 81096dc:	2b00      	cmp	r3, #0
 81096de:	d010      	beq.n	8109702 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	699a      	ldr	r2, [r3, #24]
 81096e4:	4b64      	ldr	r3, [pc, #400]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096e6:	69db      	ldr	r3, [r3, #28]
 81096e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81096ec:	429a      	cmp	r2, r3
 81096ee:	d908      	bls.n	8109702 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 81096f0:	4b61      	ldr	r3, [pc, #388]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096f2:	69db      	ldr	r3, [r3, #28]
 81096f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	699b      	ldr	r3, [r3, #24]
 81096fc:	495e      	ldr	r1, [pc, #376]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81096fe:	4313      	orrs	r3, r2
 8109700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8109702:	687b      	ldr	r3, [r7, #4]
 8109704:	681b      	ldr	r3, [r3, #0]
 8109706:	f003 0320 	and.w	r3, r3, #32
 810970a:	2b00      	cmp	r3, #0
 810970c:	d010      	beq.n	8109730 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	69da      	ldr	r2, [r3, #28]
 8109712:	4b59      	ldr	r3, [pc, #356]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109714:	6a1b      	ldr	r3, [r3, #32]
 8109716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 810971a:	429a      	cmp	r2, r3
 810971c:	d908      	bls.n	8109730 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 810971e:	4b56      	ldr	r3, [pc, #344]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109720:	6a1b      	ldr	r3, [r3, #32]
 8109722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8109726:	687b      	ldr	r3, [r7, #4]
 8109728:	69db      	ldr	r3, [r3, #28]
 810972a:	4953      	ldr	r1, [pc, #332]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 810972c:	4313      	orrs	r3, r2
 810972e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	681b      	ldr	r3, [r3, #0]
 8109734:	f003 0302 	and.w	r3, r3, #2
 8109738:	2b00      	cmp	r3, #0
 810973a:	d010      	beq.n	810975e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	68da      	ldr	r2, [r3, #12]
 8109740:	4b4d      	ldr	r3, [pc, #308]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109742:	699b      	ldr	r3, [r3, #24]
 8109744:	f003 030f 	and.w	r3, r3, #15
 8109748:	429a      	cmp	r2, r3
 810974a:	d908      	bls.n	810975e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 810974c:	4b4a      	ldr	r3, [pc, #296]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 810974e:	699b      	ldr	r3, [r3, #24]
 8109750:	f023 020f 	bic.w	r2, r3, #15
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	68db      	ldr	r3, [r3, #12]
 8109758:	4947      	ldr	r1, [pc, #284]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 810975a:	4313      	orrs	r3, r2
 810975c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 810975e:	687b      	ldr	r3, [r7, #4]
 8109760:	681b      	ldr	r3, [r3, #0]
 8109762:	f003 0301 	and.w	r3, r3, #1
 8109766:	2b00      	cmp	r3, #0
 8109768:	d055      	beq.n	8109816 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 810976a:	4b43      	ldr	r3, [pc, #268]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 810976c:	699b      	ldr	r3, [r3, #24]
 810976e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8109772:	687b      	ldr	r3, [r7, #4]
 8109774:	689b      	ldr	r3, [r3, #8]
 8109776:	4940      	ldr	r1, [pc, #256]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109778:	4313      	orrs	r3, r2
 810977a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	685b      	ldr	r3, [r3, #4]
 8109780:	2b02      	cmp	r3, #2
 8109782:	d107      	bne.n	8109794 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8109784:	4b3c      	ldr	r3, [pc, #240]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109786:	681b      	ldr	r3, [r3, #0]
 8109788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810978c:	2b00      	cmp	r3, #0
 810978e:	d121      	bne.n	81097d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8109790:	2301      	movs	r3, #1
 8109792:	e0f6      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	685b      	ldr	r3, [r3, #4]
 8109798:	2b03      	cmp	r3, #3
 810979a:	d107      	bne.n	81097ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 810979c:	4b36      	ldr	r3, [pc, #216]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 810979e:	681b      	ldr	r3, [r3, #0]
 81097a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81097a4:	2b00      	cmp	r3, #0
 81097a6:	d115      	bne.n	81097d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 81097a8:	2301      	movs	r3, #1
 81097aa:	e0ea      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 81097ac:	687b      	ldr	r3, [r7, #4]
 81097ae:	685b      	ldr	r3, [r3, #4]
 81097b0:	2b01      	cmp	r3, #1
 81097b2:	d107      	bne.n	81097c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 81097b4:	4b30      	ldr	r3, [pc, #192]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81097b6:	681b      	ldr	r3, [r3, #0]
 81097b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81097bc:	2b00      	cmp	r3, #0
 81097be:	d109      	bne.n	81097d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 81097c0:	2301      	movs	r3, #1
 81097c2:	e0de      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 81097c4:	4b2c      	ldr	r3, [pc, #176]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81097c6:	681b      	ldr	r3, [r3, #0]
 81097c8:	f003 0304 	and.w	r3, r3, #4
 81097cc:	2b00      	cmp	r3, #0
 81097ce:	d101      	bne.n	81097d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 81097d0:	2301      	movs	r3, #1
 81097d2:	e0d6      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 81097d4:	4b28      	ldr	r3, [pc, #160]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81097d6:	691b      	ldr	r3, [r3, #16]
 81097d8:	f023 0207 	bic.w	r2, r3, #7
 81097dc:	687b      	ldr	r3, [r7, #4]
 81097de:	685b      	ldr	r3, [r3, #4]
 81097e0:	4925      	ldr	r1, [pc, #148]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 81097e2:	4313      	orrs	r3, r2
 81097e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81097e6:	f7f9 f8a1 	bl	810292c <HAL_GetTick>
 81097ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 81097ec:	e00a      	b.n	8109804 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 81097ee:	f7f9 f89d 	bl	810292c <HAL_GetTick>
 81097f2:	4602      	mov	r2, r0
 81097f4:	697b      	ldr	r3, [r7, #20]
 81097f6:	1ad3      	subs	r3, r2, r3
 81097f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 81097fc:	4293      	cmp	r3, r2
 81097fe:	d901      	bls.n	8109804 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8109800:	2303      	movs	r3, #3
 8109802:	e0be      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8109804:	4b1c      	ldr	r3, [pc, #112]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109806:	691b      	ldr	r3, [r3, #16]
 8109808:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	685b      	ldr	r3, [r3, #4]
 8109810:	00db      	lsls	r3, r3, #3
 8109812:	429a      	cmp	r2, r3
 8109814:	d1eb      	bne.n	81097ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8109816:	687b      	ldr	r3, [r7, #4]
 8109818:	681b      	ldr	r3, [r3, #0]
 810981a:	f003 0302 	and.w	r3, r3, #2
 810981e:	2b00      	cmp	r3, #0
 8109820:	d010      	beq.n	8109844 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8109822:	687b      	ldr	r3, [r7, #4]
 8109824:	68da      	ldr	r2, [r3, #12]
 8109826:	4b14      	ldr	r3, [pc, #80]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109828:	699b      	ldr	r3, [r3, #24]
 810982a:	f003 030f 	and.w	r3, r3, #15
 810982e:	429a      	cmp	r2, r3
 8109830:	d208      	bcs.n	8109844 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8109832:	4b11      	ldr	r3, [pc, #68]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109834:	699b      	ldr	r3, [r3, #24]
 8109836:	f023 020f 	bic.w	r2, r3, #15
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	68db      	ldr	r3, [r3, #12]
 810983e:	490e      	ldr	r1, [pc, #56]	@ (8109878 <HAL_RCC_ClockConfig+0x244>)
 8109840:	4313      	orrs	r3, r2
 8109842:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8109844:	4b0b      	ldr	r3, [pc, #44]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 8109846:	681b      	ldr	r3, [r3, #0]
 8109848:	f003 030f 	and.w	r3, r3, #15
 810984c:	683a      	ldr	r2, [r7, #0]
 810984e:	429a      	cmp	r2, r3
 8109850:	d214      	bcs.n	810987c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8109852:	4b08      	ldr	r3, [pc, #32]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 8109854:	681b      	ldr	r3, [r3, #0]
 8109856:	f023 020f 	bic.w	r2, r3, #15
 810985a:	4906      	ldr	r1, [pc, #24]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 810985c:	683b      	ldr	r3, [r7, #0]
 810985e:	4313      	orrs	r3, r2
 8109860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8109862:	4b04      	ldr	r3, [pc, #16]	@ (8109874 <HAL_RCC_ClockConfig+0x240>)
 8109864:	681b      	ldr	r3, [r3, #0]
 8109866:	f003 030f 	and.w	r3, r3, #15
 810986a:	683a      	ldr	r2, [r7, #0]
 810986c:	429a      	cmp	r2, r3
 810986e:	d005      	beq.n	810987c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8109870:	2301      	movs	r3, #1
 8109872:	e086      	b.n	8109982 <HAL_RCC_ClockConfig+0x34e>
 8109874:	52002000 	.word	0x52002000
 8109878:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 810987c:	687b      	ldr	r3, [r7, #4]
 810987e:	681b      	ldr	r3, [r3, #0]
 8109880:	f003 0304 	and.w	r3, r3, #4
 8109884:	2b00      	cmp	r3, #0
 8109886:	d010      	beq.n	81098aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8109888:	687b      	ldr	r3, [r7, #4]
 810988a:	691a      	ldr	r2, [r3, #16]
 810988c:	4b3f      	ldr	r3, [pc, #252]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 810988e:	699b      	ldr	r3, [r3, #24]
 8109890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8109894:	429a      	cmp	r2, r3
 8109896:	d208      	bcs.n	81098aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8109898:	4b3c      	ldr	r3, [pc, #240]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 810989a:	699b      	ldr	r3, [r3, #24]
 810989c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	691b      	ldr	r3, [r3, #16]
 81098a4:	4939      	ldr	r1, [pc, #228]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 81098a6:	4313      	orrs	r3, r2
 81098a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 81098aa:	687b      	ldr	r3, [r7, #4]
 81098ac:	681b      	ldr	r3, [r3, #0]
 81098ae:	f003 0308 	and.w	r3, r3, #8
 81098b2:	2b00      	cmp	r3, #0
 81098b4:	d010      	beq.n	81098d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	695a      	ldr	r2, [r3, #20]
 81098ba:	4b34      	ldr	r3, [pc, #208]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 81098bc:	69db      	ldr	r3, [r3, #28]
 81098be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 81098c2:	429a      	cmp	r2, r3
 81098c4:	d208      	bcs.n	81098d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 81098c6:	4b31      	ldr	r3, [pc, #196]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 81098c8:	69db      	ldr	r3, [r3, #28]
 81098ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 81098ce:	687b      	ldr	r3, [r7, #4]
 81098d0:	695b      	ldr	r3, [r3, #20]
 81098d2:	492e      	ldr	r1, [pc, #184]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 81098d4:	4313      	orrs	r3, r2
 81098d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 81098d8:	687b      	ldr	r3, [r7, #4]
 81098da:	681b      	ldr	r3, [r3, #0]
 81098dc:	f003 0310 	and.w	r3, r3, #16
 81098e0:	2b00      	cmp	r3, #0
 81098e2:	d010      	beq.n	8109906 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	699a      	ldr	r2, [r3, #24]
 81098e8:	4b28      	ldr	r3, [pc, #160]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 81098ea:	69db      	ldr	r3, [r3, #28]
 81098ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81098f0:	429a      	cmp	r2, r3
 81098f2:	d208      	bcs.n	8109906 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 81098f4:	4b25      	ldr	r3, [pc, #148]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 81098f6:	69db      	ldr	r3, [r3, #28]
 81098f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	699b      	ldr	r3, [r3, #24]
 8109900:	4922      	ldr	r1, [pc, #136]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 8109902:	4313      	orrs	r3, r2
 8109904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8109906:	687b      	ldr	r3, [r7, #4]
 8109908:	681b      	ldr	r3, [r3, #0]
 810990a:	f003 0320 	and.w	r3, r3, #32
 810990e:	2b00      	cmp	r3, #0
 8109910:	d010      	beq.n	8109934 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	69da      	ldr	r2, [r3, #28]
 8109916:	4b1d      	ldr	r3, [pc, #116]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 8109918:	6a1b      	ldr	r3, [r3, #32]
 810991a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 810991e:	429a      	cmp	r2, r3
 8109920:	d208      	bcs.n	8109934 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8109922:	4b1a      	ldr	r3, [pc, #104]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 8109924:	6a1b      	ldr	r3, [r3, #32]
 8109926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	69db      	ldr	r3, [r3, #28]
 810992e:	4917      	ldr	r1, [pc, #92]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 8109930:	4313      	orrs	r3, r2
 8109932:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8109934:	f000 f834 	bl	81099a0 <HAL_RCC_GetSysClockFreq>
 8109938:	4602      	mov	r2, r0
 810993a:	4b14      	ldr	r3, [pc, #80]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 810993c:	699b      	ldr	r3, [r3, #24]
 810993e:	0a1b      	lsrs	r3, r3, #8
 8109940:	f003 030f 	and.w	r3, r3, #15
 8109944:	4912      	ldr	r1, [pc, #72]	@ (8109990 <HAL_RCC_ClockConfig+0x35c>)
 8109946:	5ccb      	ldrb	r3, [r1, r3]
 8109948:	f003 031f 	and.w	r3, r3, #31
 810994c:	fa22 f303 	lsr.w	r3, r2, r3
 8109950:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109952:	4b0e      	ldr	r3, [pc, #56]	@ (810998c <HAL_RCC_ClockConfig+0x358>)
 8109954:	699b      	ldr	r3, [r3, #24]
 8109956:	f003 030f 	and.w	r3, r3, #15
 810995a:	4a0d      	ldr	r2, [pc, #52]	@ (8109990 <HAL_RCC_ClockConfig+0x35c>)
 810995c:	5cd3      	ldrb	r3, [r2, r3]
 810995e:	f003 031f 	and.w	r3, r3, #31
 8109962:	693a      	ldr	r2, [r7, #16]
 8109964:	fa22 f303 	lsr.w	r3, r2, r3
 8109968:	4a0a      	ldr	r2, [pc, #40]	@ (8109994 <HAL_RCC_ClockConfig+0x360>)
 810996a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 810996c:	4a0a      	ldr	r2, [pc, #40]	@ (8109998 <HAL_RCC_ClockConfig+0x364>)
 810996e:	693b      	ldr	r3, [r7, #16]
 8109970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8109972:	4b0a      	ldr	r3, [pc, #40]	@ (810999c <HAL_RCC_ClockConfig+0x368>)
 8109974:	681b      	ldr	r3, [r3, #0]
 8109976:	4618      	mov	r0, r3
 8109978:	f7f8 fc4a 	bl	8102210 <HAL_InitTick>
 810997c:	4603      	mov	r3, r0
 810997e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8109980:	7bfb      	ldrb	r3, [r7, #15]
}
 8109982:	4618      	mov	r0, r3
 8109984:	3718      	adds	r7, #24
 8109986:	46bd      	mov	sp, r7
 8109988:	bd80      	pop	{r7, pc}
 810998a:	bf00      	nop
 810998c:	58024400 	.word	0x58024400
 8109990:	081288bc 	.word	0x081288bc
 8109994:	24000004 	.word	0x24000004
 8109998:	24000000 	.word	0x24000000
 810999c:	24000028 	.word	0x24000028

081099a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81099a0:	b480      	push	{r7}
 81099a2:	b089      	sub	sp, #36	@ 0x24
 81099a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81099a6:	4bb3      	ldr	r3, [pc, #716]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81099a8:	691b      	ldr	r3, [r3, #16]
 81099aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81099ae:	2b18      	cmp	r3, #24
 81099b0:	f200 8155 	bhi.w	8109c5e <HAL_RCC_GetSysClockFreq+0x2be>
 81099b4:	a201      	add	r2, pc, #4	@ (adr r2, 81099bc <HAL_RCC_GetSysClockFreq+0x1c>)
 81099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099ba:	bf00      	nop
 81099bc:	08109a21 	.word	0x08109a21
 81099c0:	08109c5f 	.word	0x08109c5f
 81099c4:	08109c5f 	.word	0x08109c5f
 81099c8:	08109c5f 	.word	0x08109c5f
 81099cc:	08109c5f 	.word	0x08109c5f
 81099d0:	08109c5f 	.word	0x08109c5f
 81099d4:	08109c5f 	.word	0x08109c5f
 81099d8:	08109c5f 	.word	0x08109c5f
 81099dc:	08109a47 	.word	0x08109a47
 81099e0:	08109c5f 	.word	0x08109c5f
 81099e4:	08109c5f 	.word	0x08109c5f
 81099e8:	08109c5f 	.word	0x08109c5f
 81099ec:	08109c5f 	.word	0x08109c5f
 81099f0:	08109c5f 	.word	0x08109c5f
 81099f4:	08109c5f 	.word	0x08109c5f
 81099f8:	08109c5f 	.word	0x08109c5f
 81099fc:	08109a4d 	.word	0x08109a4d
 8109a00:	08109c5f 	.word	0x08109c5f
 8109a04:	08109c5f 	.word	0x08109c5f
 8109a08:	08109c5f 	.word	0x08109c5f
 8109a0c:	08109c5f 	.word	0x08109c5f
 8109a10:	08109c5f 	.word	0x08109c5f
 8109a14:	08109c5f 	.word	0x08109c5f
 8109a18:	08109c5f 	.word	0x08109c5f
 8109a1c:	08109a53 	.word	0x08109a53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109a20:	4b94      	ldr	r3, [pc, #592]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a22:	681b      	ldr	r3, [r3, #0]
 8109a24:	f003 0320 	and.w	r3, r3, #32
 8109a28:	2b00      	cmp	r3, #0
 8109a2a:	d009      	beq.n	8109a40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109a2c:	4b91      	ldr	r3, [pc, #580]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a2e:	681b      	ldr	r3, [r3, #0]
 8109a30:	08db      	lsrs	r3, r3, #3
 8109a32:	f003 0303 	and.w	r3, r3, #3
 8109a36:	4a90      	ldr	r2, [pc, #576]	@ (8109c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109a38:	fa22 f303 	lsr.w	r3, r2, r3
 8109a3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8109a3e:	e111      	b.n	8109c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109a40:	4b8d      	ldr	r3, [pc, #564]	@ (8109c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109a42:	61bb      	str	r3, [r7, #24]
      break;
 8109a44:	e10e      	b.n	8109c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8109a46:	4b8d      	ldr	r3, [pc, #564]	@ (8109c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109a48:	61bb      	str	r3, [r7, #24]
      break;
 8109a4a:	e10b      	b.n	8109c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8109a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8109c80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109a4e:	61bb      	str	r3, [r7, #24]
      break;
 8109a50:	e108      	b.n	8109c64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109a52:	4b88      	ldr	r3, [pc, #544]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109a56:	f003 0303 	and.w	r3, r3, #3
 8109a5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8109a5c:	4b85      	ldr	r3, [pc, #532]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109a60:	091b      	lsrs	r3, r3, #4
 8109a62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109a66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109a68:	4b82      	ldr	r3, [pc, #520]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109a6c:	f003 0301 	and.w	r3, r3, #1
 8109a70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8109a72:	4b80      	ldr	r3, [pc, #512]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109a76:	08db      	lsrs	r3, r3, #3
 8109a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109a7c:	68fa      	ldr	r2, [r7, #12]
 8109a7e:	fb02 f303 	mul.w	r3, r2, r3
 8109a82:	ee07 3a90 	vmov	s15, r3
 8109a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8109a8e:	693b      	ldr	r3, [r7, #16]
 8109a90:	2b00      	cmp	r3, #0
 8109a92:	f000 80e1 	beq.w	8109c58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8109a96:	697b      	ldr	r3, [r7, #20]
 8109a98:	2b02      	cmp	r3, #2
 8109a9a:	f000 8083 	beq.w	8109ba4 <HAL_RCC_GetSysClockFreq+0x204>
 8109a9e:	697b      	ldr	r3, [r7, #20]
 8109aa0:	2b02      	cmp	r3, #2
 8109aa2:	f200 80a1 	bhi.w	8109be8 <HAL_RCC_GetSysClockFreq+0x248>
 8109aa6:	697b      	ldr	r3, [r7, #20]
 8109aa8:	2b00      	cmp	r3, #0
 8109aaa:	d003      	beq.n	8109ab4 <HAL_RCC_GetSysClockFreq+0x114>
 8109aac:	697b      	ldr	r3, [r7, #20]
 8109aae:	2b01      	cmp	r3, #1
 8109ab0:	d056      	beq.n	8109b60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8109ab2:	e099      	b.n	8109be8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ab6:	681b      	ldr	r3, [r3, #0]
 8109ab8:	f003 0320 	and.w	r3, r3, #32
 8109abc:	2b00      	cmp	r3, #0
 8109abe:	d02d      	beq.n	8109b1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ac2:	681b      	ldr	r3, [r3, #0]
 8109ac4:	08db      	lsrs	r3, r3, #3
 8109ac6:	f003 0303 	and.w	r3, r3, #3
 8109aca:	4a6b      	ldr	r2, [pc, #428]	@ (8109c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109acc:	fa22 f303 	lsr.w	r3, r2, r3
 8109ad0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	ee07 3a90 	vmov	s15, r3
 8109ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109adc:	693b      	ldr	r3, [r7, #16]
 8109ade:	ee07 3a90 	vmov	s15, r3
 8109ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109aea:	4b62      	ldr	r3, [pc, #392]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109af2:	ee07 3a90 	vmov	s15, r3
 8109af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8109afe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8109c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109b16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8109b1a:	e087      	b.n	8109c2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109b1c:	693b      	ldr	r3, [r7, #16]
 8109b1e:	ee07 3a90 	vmov	s15, r3
 8109b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8109c88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8109b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109b2e:	4b51      	ldr	r3, [pc, #324]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109b36:	ee07 3a90 	vmov	s15, r3
 8109b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109b42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8109c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109b5e:	e065      	b.n	8109c2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109b60:	693b      	ldr	r3, [r7, #16]
 8109b62:	ee07 3a90 	vmov	s15, r3
 8109b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8109c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8109b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109b72:	4b40      	ldr	r3, [pc, #256]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109b7a:	ee07 3a90 	vmov	s15, r3
 8109b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8109b86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8109c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109ba2:	e043      	b.n	8109c2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109ba4:	693b      	ldr	r3, [r7, #16]
 8109ba6:	ee07 3a90 	vmov	s15, r3
 8109baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109bae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8109c90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8109bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109bbe:	ee07 3a90 	vmov	s15, r3
 8109bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8109bca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8109c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109be6:	e021      	b.n	8109c2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109be8:	693b      	ldr	r3, [r7, #16]
 8109bea:	ee07 3a90 	vmov	s15, r3
 8109bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109bf2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8109c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8109bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109c02:	ee07 3a90 	vmov	s15, r3
 8109c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8109c0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8109c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109c2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8109c2c:	4b11      	ldr	r3, [pc, #68]	@ (8109c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109c30:	0a5b      	lsrs	r3, r3, #9
 8109c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109c36:	3301      	adds	r3, #1
 8109c38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8109c3a:	683b      	ldr	r3, [r7, #0]
 8109c3c:	ee07 3a90 	vmov	s15, r3
 8109c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8109c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109c50:	ee17 3a90 	vmov	r3, s15
 8109c54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8109c56:	e005      	b.n	8109c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8109c58:	2300      	movs	r3, #0
 8109c5a:	61bb      	str	r3, [r7, #24]
      break;
 8109c5c:	e002      	b.n	8109c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8109c5e:	4b07      	ldr	r3, [pc, #28]	@ (8109c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109c60:	61bb      	str	r3, [r7, #24]
      break;
 8109c62:	bf00      	nop
  }

  return sysclockfreq;
 8109c64:	69bb      	ldr	r3, [r7, #24]
}
 8109c66:	4618      	mov	r0, r3
 8109c68:	3724      	adds	r7, #36	@ 0x24
 8109c6a:	46bd      	mov	sp, r7
 8109c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c70:	4770      	bx	lr
 8109c72:	bf00      	nop
 8109c74:	58024400 	.word	0x58024400
 8109c78:	03d09000 	.word	0x03d09000
 8109c7c:	003d0900 	.word	0x003d0900
 8109c80:	017d7840 	.word	0x017d7840
 8109c84:	46000000 	.word	0x46000000
 8109c88:	4c742400 	.word	0x4c742400
 8109c8c:	4a742400 	.word	0x4a742400
 8109c90:	4bbebc20 	.word	0x4bbebc20

08109c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8109c94:	b580      	push	{r7, lr}
 8109c96:	b082      	sub	sp, #8
 8109c98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8109c9a:	f7ff fe81 	bl	81099a0 <HAL_RCC_GetSysClockFreq>
 8109c9e:	4602      	mov	r2, r0
 8109ca0:	4b10      	ldr	r3, [pc, #64]	@ (8109ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8109ca2:	699b      	ldr	r3, [r3, #24]
 8109ca4:	0a1b      	lsrs	r3, r3, #8
 8109ca6:	f003 030f 	and.w	r3, r3, #15
 8109caa:	490f      	ldr	r1, [pc, #60]	@ (8109ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8109cac:	5ccb      	ldrb	r3, [r1, r3]
 8109cae:	f003 031f 	and.w	r3, r3, #31
 8109cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8109cb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8109ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8109cba:	699b      	ldr	r3, [r3, #24]
 8109cbc:	f003 030f 	and.w	r3, r3, #15
 8109cc0:	4a09      	ldr	r2, [pc, #36]	@ (8109ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8109cc2:	5cd3      	ldrb	r3, [r2, r3]
 8109cc4:	f003 031f 	and.w	r3, r3, #31
 8109cc8:	687a      	ldr	r2, [r7, #4]
 8109cca:	fa22 f303 	lsr.w	r3, r2, r3
 8109cce:	4a07      	ldr	r2, [pc, #28]	@ (8109cec <HAL_RCC_GetHCLKFreq+0x58>)
 8109cd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8109cd2:	4a07      	ldr	r2, [pc, #28]	@ (8109cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109cd4:	687b      	ldr	r3, [r7, #4]
 8109cd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8109cd8:	4b04      	ldr	r3, [pc, #16]	@ (8109cec <HAL_RCC_GetHCLKFreq+0x58>)
 8109cda:	681b      	ldr	r3, [r3, #0]
}
 8109cdc:	4618      	mov	r0, r3
 8109cde:	3708      	adds	r7, #8
 8109ce0:	46bd      	mov	sp, r7
 8109ce2:	bd80      	pop	{r7, pc}
 8109ce4:	58024400 	.word	0x58024400
 8109ce8:	081288bc 	.word	0x081288bc
 8109cec:	24000004 	.word	0x24000004
 8109cf0:	24000000 	.word	0x24000000

08109cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8109cf4:	b580      	push	{r7, lr}
 8109cf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8109cf8:	f7ff ffcc 	bl	8109c94 <HAL_RCC_GetHCLKFreq>
 8109cfc:	4602      	mov	r2, r0
 8109cfe:	4b06      	ldr	r3, [pc, #24]	@ (8109d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8109d00:	69db      	ldr	r3, [r3, #28]
 8109d02:	091b      	lsrs	r3, r3, #4
 8109d04:	f003 0307 	and.w	r3, r3, #7
 8109d08:	4904      	ldr	r1, [pc, #16]	@ (8109d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8109d0a:	5ccb      	ldrb	r3, [r1, r3]
 8109d0c:	f003 031f 	and.w	r3, r3, #31
 8109d10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8109d14:	4618      	mov	r0, r3
 8109d16:	bd80      	pop	{r7, pc}
 8109d18:	58024400 	.word	0x58024400
 8109d1c:	081288bc 	.word	0x081288bc

08109d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109d20:	b580      	push	{r7, lr}
 8109d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8109d24:	f7ff ffb6 	bl	8109c94 <HAL_RCC_GetHCLKFreq>
 8109d28:	4602      	mov	r2, r0
 8109d2a:	4b06      	ldr	r3, [pc, #24]	@ (8109d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8109d2c:	69db      	ldr	r3, [r3, #28]
 8109d2e:	0a1b      	lsrs	r3, r3, #8
 8109d30:	f003 0307 	and.w	r3, r3, #7
 8109d34:	4904      	ldr	r1, [pc, #16]	@ (8109d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8109d36:	5ccb      	ldrb	r3, [r1, r3]
 8109d38:	f003 031f 	and.w	r3, r3, #31
 8109d3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109d40:	4618      	mov	r0, r3
 8109d42:	bd80      	pop	{r7, pc}
 8109d44:	58024400 	.word	0x58024400
 8109d48:	081288bc 	.word	0x081288bc

08109d4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8109d4c:	b480      	push	{r7}
 8109d4e:	b083      	sub	sp, #12
 8109d50:	af00      	add	r7, sp, #0
 8109d52:	6078      	str	r0, [r7, #4]
 8109d54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8109d56:	687b      	ldr	r3, [r7, #4]
 8109d58:	223f      	movs	r2, #63	@ 0x3f
 8109d5a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8109d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109d5e:	691b      	ldr	r3, [r3, #16]
 8109d60:	f003 0207 	and.w	r2, r3, #7
 8109d64:	687b      	ldr	r3, [r7, #4]
 8109d66:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8109d68:	4b17      	ldr	r3, [pc, #92]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109d6a:	699b      	ldr	r3, [r3, #24]
 8109d6c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8109d70:	687b      	ldr	r3, [r7, #4]
 8109d72:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8109d74:	4b14      	ldr	r3, [pc, #80]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109d76:	699b      	ldr	r3, [r3, #24]
 8109d78:	f003 020f 	and.w	r2, r3, #15
 8109d7c:	687b      	ldr	r3, [r7, #4]
 8109d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8109d80:	4b11      	ldr	r3, [pc, #68]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109d82:	699b      	ldr	r3, [r3, #24]
 8109d84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8109d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109d8e:	69db      	ldr	r3, [r3, #28]
 8109d90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8109d94:	687b      	ldr	r3, [r7, #4]
 8109d96:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8109d98:	4b0b      	ldr	r3, [pc, #44]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109d9a:	69db      	ldr	r3, [r3, #28]
 8109d9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8109da4:	4b08      	ldr	r3, [pc, #32]	@ (8109dc8 <HAL_RCC_GetClockConfig+0x7c>)
 8109da6:	6a1b      	ldr	r3, [r3, #32]
 8109da8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8109dac:	687b      	ldr	r3, [r7, #4]
 8109dae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8109db0:	4b06      	ldr	r3, [pc, #24]	@ (8109dcc <HAL_RCC_GetClockConfig+0x80>)
 8109db2:	681b      	ldr	r3, [r3, #0]
 8109db4:	f003 020f 	and.w	r2, r3, #15
 8109db8:	683b      	ldr	r3, [r7, #0]
 8109dba:	601a      	str	r2, [r3, #0]
}
 8109dbc:	bf00      	nop
 8109dbe:	370c      	adds	r7, #12
 8109dc0:	46bd      	mov	sp, r7
 8109dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dc6:	4770      	bx	lr
 8109dc8:	58024400 	.word	0x58024400
 8109dcc:	52002000 	.word	0x52002000

08109dd0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8109dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109dd4:	b0cc      	sub	sp, #304	@ 0x130
 8109dd6:	af00      	add	r7, sp, #0
 8109dd8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109ddc:	2300      	movs	r3, #0
 8109dde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8109de2:	2300      	movs	r3, #0
 8109de4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8109de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109df0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8109df4:	2500      	movs	r5, #0
 8109df6:	ea54 0305 	orrs.w	r3, r4, r5
 8109dfa:	d049      	beq.n	8109e90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8109dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109e02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8109e06:	d02f      	beq.n	8109e68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8109e08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8109e0c:	d828      	bhi.n	8109e60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8109e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8109e12:	d01a      	beq.n	8109e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8109e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8109e18:	d822      	bhi.n	8109e60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8109e1a:	2b00      	cmp	r3, #0
 8109e1c:	d003      	beq.n	8109e26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8109e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109e22:	d007      	beq.n	8109e34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8109e24:	e01c      	b.n	8109e60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109e26:	4bb8      	ldr	r3, [pc, #736]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e2a:	4ab7      	ldr	r2, [pc, #732]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8109e32:	e01a      	b.n	8109e6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8109e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109e38:	3308      	adds	r3, #8
 8109e3a:	2102      	movs	r1, #2
 8109e3c:	4618      	mov	r0, r3
 8109e3e:	f002 fba1 	bl	810c584 <RCCEx_PLL2_Config>
 8109e42:	4603      	mov	r3, r0
 8109e44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8109e48:	e00f      	b.n	8109e6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8109e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109e4e:	3328      	adds	r3, #40	@ 0x28
 8109e50:	2102      	movs	r1, #2
 8109e52:	4618      	mov	r0, r3
 8109e54:	f002 fc48 	bl	810c6e8 <RCCEx_PLL3_Config>
 8109e58:	4603      	mov	r3, r0
 8109e5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8109e5e:	e004      	b.n	8109e6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109e60:	2301      	movs	r3, #1
 8109e62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8109e66:	e000      	b.n	8109e6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8109e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109e6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8109e6e:	2b00      	cmp	r3, #0
 8109e70:	d10a      	bne.n	8109e88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8109e72:	4ba5      	ldr	r3, [pc, #660]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109e76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8109e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109e80:	4aa1      	ldr	r2, [pc, #644]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109e82:	430b      	orrs	r3, r1
 8109e84:	6513      	str	r3, [r2, #80]	@ 0x50
 8109e86:	e003      	b.n	8109e90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109e88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8109e8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8109e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109e98:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8109e9c:	f04f 0900 	mov.w	r9, #0
 8109ea0:	ea58 0309 	orrs.w	r3, r8, r9
 8109ea4:	d047      	beq.n	8109f36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8109ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109eac:	2b04      	cmp	r3, #4
 8109eae:	d82a      	bhi.n	8109f06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8109eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8109eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8109eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109eb6:	bf00      	nop
 8109eb8:	08109ecd 	.word	0x08109ecd
 8109ebc:	08109edb 	.word	0x08109edb
 8109ec0:	08109ef1 	.word	0x08109ef1
 8109ec4:	08109f0f 	.word	0x08109f0f
 8109ec8:	08109f0f 	.word	0x08109f0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ecc:	4b8e      	ldr	r3, [pc, #568]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109ed0:	4a8d      	ldr	r2, [pc, #564]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109ed8:	e01a      	b.n	8109f10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109ede:	3308      	adds	r3, #8
 8109ee0:	2100      	movs	r1, #0
 8109ee2:	4618      	mov	r0, r3
 8109ee4:	f002 fb4e 	bl	810c584 <RCCEx_PLL2_Config>
 8109ee8:	4603      	mov	r3, r0
 8109eea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109eee:	e00f      	b.n	8109f10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109ef4:	3328      	adds	r3, #40	@ 0x28
 8109ef6:	2100      	movs	r1, #0
 8109ef8:	4618      	mov	r0, r3
 8109efa:	f002 fbf5 	bl	810c6e8 <RCCEx_PLL3_Config>
 8109efe:	4603      	mov	r3, r0
 8109f00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109f04:	e004      	b.n	8109f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109f06:	2301      	movs	r3, #1
 8109f08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8109f0c:	e000      	b.n	8109f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8109f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109f10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8109f14:	2b00      	cmp	r3, #0
 8109f16:	d10a      	bne.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8109f18:	4b7b      	ldr	r3, [pc, #492]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109f1c:	f023 0107 	bic.w	r1, r3, #7
 8109f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109f26:	4a78      	ldr	r2, [pc, #480]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109f28:	430b      	orrs	r3, r1
 8109f2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8109f2c:	e003      	b.n	8109f36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8109f32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8109f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f3e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8109f42:	f04f 0b00 	mov.w	fp, #0
 8109f46:	ea5a 030b 	orrs.w	r3, sl, fp
 8109f4a:	d04c      	beq.n	8109fe6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8109f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109f56:	d030      	beq.n	8109fba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8109f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109f5c:	d829      	bhi.n	8109fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8109f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8109f60:	d02d      	beq.n	8109fbe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8109f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8109f64:	d825      	bhi.n	8109fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8109f66:	2b80      	cmp	r3, #128	@ 0x80
 8109f68:	d018      	beq.n	8109f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8109f6a:	2b80      	cmp	r3, #128	@ 0x80
 8109f6c:	d821      	bhi.n	8109fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8109f6e:	2b00      	cmp	r3, #0
 8109f70:	d002      	beq.n	8109f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8109f72:	2b40      	cmp	r3, #64	@ 0x40
 8109f74:	d007      	beq.n	8109f86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8109f76:	e01c      	b.n	8109fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109f78:	4b63      	ldr	r3, [pc, #396]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109f7c:	4a62      	ldr	r2, [pc, #392]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109f84:	e01c      	b.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109f8a:	3308      	adds	r3, #8
 8109f8c:	2100      	movs	r1, #0
 8109f8e:	4618      	mov	r0, r3
 8109f90:	f002 faf8 	bl	810c584 <RCCEx_PLL2_Config>
 8109f94:	4603      	mov	r3, r0
 8109f96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109f9a:	e011      	b.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109fa0:	3328      	adds	r3, #40	@ 0x28
 8109fa2:	2100      	movs	r1, #0
 8109fa4:	4618      	mov	r0, r3
 8109fa6:	f002 fb9f 	bl	810c6e8 <RCCEx_PLL3_Config>
 8109faa:	4603      	mov	r3, r0
 8109fac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109fb0:	e006      	b.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109fb2:	2301      	movs	r3, #1
 8109fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8109fb8:	e002      	b.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8109fba:	bf00      	nop
 8109fbc:	e000      	b.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8109fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8109fc4:	2b00      	cmp	r3, #0
 8109fc6:	d10a      	bne.n	8109fde <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8109fc8:	4b4f      	ldr	r3, [pc, #316]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109fcc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8109fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109fd6:	4a4c      	ldr	r2, [pc, #304]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109fd8:	430b      	orrs	r3, r1
 8109fda:	6513      	str	r3, [r2, #80]	@ 0x50
 8109fdc:	e003      	b.n	8109fe6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109fde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8109fe2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8109fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109fee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8109ff2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8109ff6:	2300      	movs	r3, #0
 8109ff8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8109ffc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810a000:	460b      	mov	r3, r1
 810a002:	4313      	orrs	r3, r2
 810a004:	d053      	beq.n	810a0ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810a006:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a00a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a00e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a012:	d035      	beq.n	810a080 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810a014:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a018:	d82e      	bhi.n	810a078 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a01a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a01e:	d031      	beq.n	810a084 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810a020:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a024:	d828      	bhi.n	810a078 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a02a:	d01a      	beq.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810a02c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a030:	d822      	bhi.n	810a078 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a032:	2b00      	cmp	r3, #0
 810a034:	d003      	beq.n	810a03e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810a036:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a03a:	d007      	beq.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810a03c:	e01c      	b.n	810a078 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a03e:	4b32      	ldr	r3, [pc, #200]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a042:	4a31      	ldr	r2, [pc, #196]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a04a:	e01c      	b.n	810a086 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a04c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a050:	3308      	adds	r3, #8
 810a052:	2100      	movs	r1, #0
 810a054:	4618      	mov	r0, r3
 810a056:	f002 fa95 	bl	810c584 <RCCEx_PLL2_Config>
 810a05a:	4603      	mov	r3, r0
 810a05c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a060:	e011      	b.n	810a086 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a066:	3328      	adds	r3, #40	@ 0x28
 810a068:	2100      	movs	r1, #0
 810a06a:	4618      	mov	r0, r3
 810a06c:	f002 fb3c 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a070:	4603      	mov	r3, r0
 810a072:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a076:	e006      	b.n	810a086 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a078:	2301      	movs	r3, #1
 810a07a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a07e:	e002      	b.n	810a086 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a080:	bf00      	nop
 810a082:	e000      	b.n	810a086 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a084:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a08a:	2b00      	cmp	r3, #0
 810a08c:	d10b      	bne.n	810a0a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a08e:	4b1e      	ldr	r3, [pc, #120]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a092:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810a096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a09a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a09e:	4a1a      	ldr	r2, [pc, #104]	@ (810a108 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a0a0:	430b      	orrs	r3, r1
 810a0a2:	6593      	str	r3, [r2, #88]	@ 0x58
 810a0a4:	e003      	b.n	810a0ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a0a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a0aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a0ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810a0ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810a0be:	2300      	movs	r3, #0
 810a0c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810a0c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810a0c8:	460b      	mov	r3, r1
 810a0ca:	4313      	orrs	r3, r2
 810a0cc:	d056      	beq.n	810a17c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810a0ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a0d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a0d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a0da:	d038      	beq.n	810a14e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810a0dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a0e0:	d831      	bhi.n	810a146 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a0e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a0e6:	d034      	beq.n	810a152 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810a0e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a0ec:	d82b      	bhi.n	810a146 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a0ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a0f2:	d01d      	beq.n	810a130 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810a0f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a0f8:	d825      	bhi.n	810a146 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a0fa:	2b00      	cmp	r3, #0
 810a0fc:	d006      	beq.n	810a10c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810a0fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810a102:	d00a      	beq.n	810a11a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a104:	e01f      	b.n	810a146 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a106:	bf00      	nop
 810a108:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a10c:	4ba2      	ldr	r3, [pc, #648]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a110:	4aa1      	ldr	r2, [pc, #644]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a118:	e01c      	b.n	810a154 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a11a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a11e:	3308      	adds	r3, #8
 810a120:	2100      	movs	r1, #0
 810a122:	4618      	mov	r0, r3
 810a124:	f002 fa2e 	bl	810c584 <RCCEx_PLL2_Config>
 810a128:	4603      	mov	r3, r0
 810a12a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a12e:	e011      	b.n	810a154 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a134:	3328      	adds	r3, #40	@ 0x28
 810a136:	2100      	movs	r1, #0
 810a138:	4618      	mov	r0, r3
 810a13a:	f002 fad5 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a13e:	4603      	mov	r3, r0
 810a140:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a144:	e006      	b.n	810a154 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a146:	2301      	movs	r3, #1
 810a148:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a14c:	e002      	b.n	810a154 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a14e:	bf00      	nop
 810a150:	e000      	b.n	810a154 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a152:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a154:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a158:	2b00      	cmp	r3, #0
 810a15a:	d10b      	bne.n	810a174 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a15c:	4b8e      	ldr	r3, [pc, #568]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a15e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a160:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810a164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a16c:	4a8a      	ldr	r2, [pc, #552]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a16e:	430b      	orrs	r3, r1
 810a170:	6593      	str	r3, [r2, #88]	@ 0x58
 810a172:	e003      	b.n	810a17c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a174:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a178:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a17c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a184:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810a188:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810a18c:	2300      	movs	r3, #0
 810a18e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810a192:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810a196:	460b      	mov	r3, r1
 810a198:	4313      	orrs	r3, r2
 810a19a:	d03a      	beq.n	810a212 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810a19c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a1a2:	2b30      	cmp	r3, #48	@ 0x30
 810a1a4:	d01f      	beq.n	810a1e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810a1a6:	2b30      	cmp	r3, #48	@ 0x30
 810a1a8:	d819      	bhi.n	810a1de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a1aa:	2b20      	cmp	r3, #32
 810a1ac:	d00c      	beq.n	810a1c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810a1ae:	2b20      	cmp	r3, #32
 810a1b0:	d815      	bhi.n	810a1de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a1b2:	2b00      	cmp	r3, #0
 810a1b4:	d019      	beq.n	810a1ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810a1b6:	2b10      	cmp	r3, #16
 810a1b8:	d111      	bne.n	810a1de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a1ba:	4b77      	ldr	r3, [pc, #476]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a1be:	4a76      	ldr	r2, [pc, #472]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a1c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a1c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a1c6:	e011      	b.n	810a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a1c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a1cc:	3308      	adds	r3, #8
 810a1ce:	2102      	movs	r1, #2
 810a1d0:	4618      	mov	r0, r3
 810a1d2:	f002 f9d7 	bl	810c584 <RCCEx_PLL2_Config>
 810a1d6:	4603      	mov	r3, r0
 810a1d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a1dc:	e006      	b.n	810a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a1de:	2301      	movs	r3, #1
 810a1e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a1e4:	e002      	b.n	810a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a1e6:	bf00      	nop
 810a1e8:	e000      	b.n	810a1ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a1ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a1ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a1f0:	2b00      	cmp	r3, #0
 810a1f2:	d10a      	bne.n	810a20a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a1f4:	4b68      	ldr	r3, [pc, #416]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a1f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a1f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810a1fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a202:	4a65      	ldr	r2, [pc, #404]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a204:	430b      	orrs	r3, r1
 810a206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a208:	e003      	b.n	810a212 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a20a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a20e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a21a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810a21e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810a222:	2300      	movs	r3, #0
 810a224:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810a228:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810a22c:	460b      	mov	r3, r1
 810a22e:	4313      	orrs	r3, r2
 810a230:	d051      	beq.n	810a2d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810a232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a23c:	d035      	beq.n	810a2aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810a23e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a242:	d82e      	bhi.n	810a2a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a244:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a248:	d031      	beq.n	810a2ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810a24a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a24e:	d828      	bhi.n	810a2a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a254:	d01a      	beq.n	810a28c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810a256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a25a:	d822      	bhi.n	810a2a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a25c:	2b00      	cmp	r3, #0
 810a25e:	d003      	beq.n	810a268 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810a260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a264:	d007      	beq.n	810a276 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810a266:	e01c      	b.n	810a2a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a268:	4b4b      	ldr	r3, [pc, #300]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a26c:	4a4a      	ldr	r2, [pc, #296]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a26e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a274:	e01c      	b.n	810a2b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a27a:	3308      	adds	r3, #8
 810a27c:	2100      	movs	r1, #0
 810a27e:	4618      	mov	r0, r3
 810a280:	f002 f980 	bl	810c584 <RCCEx_PLL2_Config>
 810a284:	4603      	mov	r3, r0
 810a286:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a28a:	e011      	b.n	810a2b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a28c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a290:	3328      	adds	r3, #40	@ 0x28
 810a292:	2100      	movs	r1, #0
 810a294:	4618      	mov	r0, r3
 810a296:	f002 fa27 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a29a:	4603      	mov	r3, r0
 810a29c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a2a0:	e006      	b.n	810a2b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a2a2:	2301      	movs	r3, #1
 810a2a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a2a8:	e002      	b.n	810a2b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a2aa:	bf00      	nop
 810a2ac:	e000      	b.n	810a2b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a2b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a2b4:	2b00      	cmp	r3, #0
 810a2b6:	d10a      	bne.n	810a2ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a2b8:	4b37      	ldr	r3, [pc, #220]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a2ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a2bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810a2c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a2c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a2c6:	4a34      	ldr	r2, [pc, #208]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a2c8:	430b      	orrs	r3, r1
 810a2ca:	6513      	str	r3, [r2, #80]	@ 0x50
 810a2cc:	e003      	b.n	810a2d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a2ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a2d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a2d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810a2e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810a2e6:	2300      	movs	r3, #0
 810a2e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810a2ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810a2f0:	460b      	mov	r3, r1
 810a2f2:	4313      	orrs	r3, r2
 810a2f4:	d056      	beq.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810a2f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a2fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a2fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a300:	d033      	beq.n	810a36a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a302:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a306:	d82c      	bhi.n	810a362 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a308:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a30c:	d02f      	beq.n	810a36e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810a30e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a312:	d826      	bhi.n	810a362 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a314:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a318:	d02b      	beq.n	810a372 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810a31a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a31e:	d820      	bhi.n	810a362 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a324:	d012      	beq.n	810a34c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810a326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a32a:	d81a      	bhi.n	810a362 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a32c:	2b00      	cmp	r3, #0
 810a32e:	d022      	beq.n	810a376 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810a330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a334:	d115      	bne.n	810a362 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a33a:	3308      	adds	r3, #8
 810a33c:	2101      	movs	r1, #1
 810a33e:	4618      	mov	r0, r3
 810a340:	f002 f920 	bl	810c584 <RCCEx_PLL2_Config>
 810a344:	4603      	mov	r3, r0
 810a346:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a34a:	e015      	b.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a34c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a350:	3328      	adds	r3, #40	@ 0x28
 810a352:	2101      	movs	r1, #1
 810a354:	4618      	mov	r0, r3
 810a356:	f002 f9c7 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a35a:	4603      	mov	r3, r0
 810a35c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a360:	e00a      	b.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a362:	2301      	movs	r3, #1
 810a364:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a368:	e006      	b.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a36a:	bf00      	nop
 810a36c:	e004      	b.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a36e:	bf00      	nop
 810a370:	e002      	b.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a372:	bf00      	nop
 810a374:	e000      	b.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a376:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a378:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a37c:	2b00      	cmp	r3, #0
 810a37e:	d10d      	bne.n	810a39c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a380:	4b05      	ldr	r3, [pc, #20]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a384:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810a388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a38c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a38e:	4a02      	ldr	r2, [pc, #8]	@ (810a398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a390:	430b      	orrs	r3, r1
 810a392:	6513      	str	r3, [r2, #80]	@ 0x50
 810a394:	e006      	b.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810a396:	bf00      	nop
 810a398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a39c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a3a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a3a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810a3b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810a3b4:	2300      	movs	r3, #0
 810a3b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810a3ba:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810a3be:	460b      	mov	r3, r1
 810a3c0:	4313      	orrs	r3, r2
 810a3c2:	d055      	beq.n	810a470 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810a3c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a3c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810a3cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a3d0:	d033      	beq.n	810a43a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810a3d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a3d6:	d82c      	bhi.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a3dc:	d02f      	beq.n	810a43e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810a3de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a3e2:	d826      	bhi.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a3e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a3e8:	d02b      	beq.n	810a442 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810a3ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a3ee:	d820      	bhi.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a3f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a3f4:	d012      	beq.n	810a41c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810a3f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a3fa:	d81a      	bhi.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a3fc:	2b00      	cmp	r3, #0
 810a3fe:	d022      	beq.n	810a446 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810a400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a404:	d115      	bne.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a40a:	3308      	adds	r3, #8
 810a40c:	2101      	movs	r1, #1
 810a40e:	4618      	mov	r0, r3
 810a410:	f002 f8b8 	bl	810c584 <RCCEx_PLL2_Config>
 810a414:	4603      	mov	r3, r0
 810a416:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a41a:	e015      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a41c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a420:	3328      	adds	r3, #40	@ 0x28
 810a422:	2101      	movs	r1, #1
 810a424:	4618      	mov	r0, r3
 810a426:	f002 f95f 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a42a:	4603      	mov	r3, r0
 810a42c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a430:	e00a      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810a432:	2301      	movs	r3, #1
 810a434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a438:	e006      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a43a:	bf00      	nop
 810a43c:	e004      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a43e:	bf00      	nop
 810a440:	e002      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a442:	bf00      	nop
 810a444:	e000      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a446:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a44c:	2b00      	cmp	r3, #0
 810a44e:	d10b      	bne.n	810a468 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a450:	4bb6      	ldr	r3, [pc, #728]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a454:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810a458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a45c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810a460:	4ab2      	ldr	r2, [pc, #712]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a462:	430b      	orrs	r3, r1
 810a464:	6593      	str	r3, [r2, #88]	@ 0x58
 810a466:	e003      	b.n	810a470 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a468:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a46c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810a470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a478:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810a47c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810a480:	2300      	movs	r3, #0
 810a482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810a486:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810a48a:	460b      	mov	r3, r1
 810a48c:	4313      	orrs	r3, r2
 810a48e:	d02a      	beq.n	810a4e6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810a490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a496:	2b00      	cmp	r3, #0
 810a498:	d011      	beq.n	810a4be <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810a49a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a49e:	d10a      	bne.n	810a4b6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a4a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4a4:	3308      	adds	r3, #8
 810a4a6:	2101      	movs	r1, #1
 810a4a8:	4618      	mov	r0, r3
 810a4aa:	f002 f86b 	bl	810c584 <RCCEx_PLL2_Config>
 810a4ae:	4603      	mov	r3, r0
 810a4b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810a4b4:	e004      	b.n	810a4c0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a4b6:	2301      	movs	r3, #1
 810a4b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a4bc:	e000      	b.n	810a4c0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810a4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a4c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a4c4:	2b00      	cmp	r3, #0
 810a4c6:	d10a      	bne.n	810a4de <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810a4c8:	4b98      	ldr	r3, [pc, #608]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a4ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a4cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810a4d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a4d6:	4a95      	ldr	r2, [pc, #596]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a4d8:	430b      	orrs	r3, r1
 810a4da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a4dc:	e003      	b.n	810a4e6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a4e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a4e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4ee:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810a4f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810a4f6:	2300      	movs	r3, #0
 810a4f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810a4fc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810a500:	460b      	mov	r3, r1
 810a502:	4313      	orrs	r3, r2
 810a504:	d037      	beq.n	810a576 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810a506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810a50c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a510:	d00e      	beq.n	810a530 <HAL_RCCEx_PeriphCLKConfig+0x760>
 810a512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a516:	d816      	bhi.n	810a546 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810a518:	2b00      	cmp	r3, #0
 810a51a:	d018      	beq.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810a51c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a520:	d111      	bne.n	810a546 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a522:	4b82      	ldr	r3, [pc, #520]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a526:	4a81      	ldr	r2, [pc, #516]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a52c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a52e:	e00f      	b.n	810a550 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a530:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a534:	3308      	adds	r3, #8
 810a536:	2101      	movs	r1, #1
 810a538:	4618      	mov	r0, r3
 810a53a:	f002 f823 	bl	810c584 <RCCEx_PLL2_Config>
 810a53e:	4603      	mov	r3, r0
 810a540:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a544:	e004      	b.n	810a550 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a546:	2301      	movs	r3, #1
 810a548:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a54c:	e000      	b.n	810a550 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810a54e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a550:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a554:	2b00      	cmp	r3, #0
 810a556:	d10a      	bne.n	810a56e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a558:	4b74      	ldr	r3, [pc, #464]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a55c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810a560:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810a566:	4a71      	ldr	r2, [pc, #452]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a568:	430b      	orrs	r3, r1
 810a56a:	6513      	str	r3, [r2, #80]	@ 0x50
 810a56c:	e003      	b.n	810a576 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a56e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a572:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a57e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810a582:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810a586:	2300      	movs	r3, #0
 810a588:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810a58c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810a590:	460b      	mov	r3, r1
 810a592:	4313      	orrs	r3, r2
 810a594:	d03a      	beq.n	810a60c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810a596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a59a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a59c:	2b03      	cmp	r3, #3
 810a59e:	d81d      	bhi.n	810a5dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810a5a0:	a201      	add	r2, pc, #4	@ (adr r2, 810a5a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a5a6:	bf00      	nop
 810a5a8:	0810a5e5 	.word	0x0810a5e5
 810a5ac:	0810a5b9 	.word	0x0810a5b9
 810a5b0:	0810a5c7 	.word	0x0810a5c7
 810a5b4:	0810a5e5 	.word	0x0810a5e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a5b8:	4b5c      	ldr	r3, [pc, #368]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a5bc:	4a5b      	ldr	r2, [pc, #364]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a5be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810a5c4:	e00f      	b.n	810a5e6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a5c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5ca:	3308      	adds	r3, #8
 810a5cc:	2102      	movs	r1, #2
 810a5ce:	4618      	mov	r0, r3
 810a5d0:	f001 ffd8 	bl	810c584 <RCCEx_PLL2_Config>
 810a5d4:	4603      	mov	r3, r0
 810a5d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810a5da:	e004      	b.n	810a5e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a5dc:	2301      	movs	r3, #1
 810a5de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a5e2:	e000      	b.n	810a5e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810a5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a5e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a5ea:	2b00      	cmp	r3, #0
 810a5ec:	d10a      	bne.n	810a604 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810a5ee:	4b4f      	ldr	r3, [pc, #316]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a5f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a5f2:	f023 0103 	bic.w	r1, r3, #3
 810a5f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a5fc:	4a4b      	ldr	r2, [pc, #300]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a5fe:	430b      	orrs	r3, r1
 810a600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a602:	e003      	b.n	810a60c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a604:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a608:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810a60c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a614:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810a618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810a61c:	2300      	movs	r3, #0
 810a61e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810a622:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810a626:	460b      	mov	r3, r1
 810a628:	4313      	orrs	r3, r2
 810a62a:	f000 80a0 	beq.w	810a76e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810a62e:	4b40      	ldr	r3, [pc, #256]	@ (810a730 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a630:	681b      	ldr	r3, [r3, #0]
 810a632:	4a3f      	ldr	r2, [pc, #252]	@ (810a730 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810a63a:	f7f8 f977 	bl	810292c <HAL_GetTick>
 810a63e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a642:	e00b      	b.n	810a65c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810a644:	f7f8 f972 	bl	810292c <HAL_GetTick>
 810a648:	4602      	mov	r2, r0
 810a64a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810a64e:	1ad3      	subs	r3, r2, r3
 810a650:	2b64      	cmp	r3, #100	@ 0x64
 810a652:	d903      	bls.n	810a65c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810a654:	2303      	movs	r3, #3
 810a656:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a65a:	e005      	b.n	810a668 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a65c:	4b34      	ldr	r3, [pc, #208]	@ (810a730 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a65e:	681b      	ldr	r3, [r3, #0]
 810a660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a664:	2b00      	cmp	r3, #0
 810a666:	d0ed      	beq.n	810a644 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810a668:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a66c:	2b00      	cmp	r3, #0
 810a66e:	d17a      	bne.n	810a766 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810a670:	4b2e      	ldr	r3, [pc, #184]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a672:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810a674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a678:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a67c:	4053      	eors	r3, r2
 810a67e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810a682:	2b00      	cmp	r3, #0
 810a684:	d015      	beq.n	810a6b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810a686:	4b29      	ldr	r3, [pc, #164]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a68a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a68e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810a692:	4b26      	ldr	r3, [pc, #152]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a696:	4a25      	ldr	r2, [pc, #148]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810a69c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810a69e:	4b23      	ldr	r3, [pc, #140]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a6a2:	4a22      	ldr	r2, [pc, #136]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a6a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a6a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810a6aa:	4a20      	ldr	r2, [pc, #128]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a6ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810a6b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810a6b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a6be:	d118      	bne.n	810a6f2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810a6c0:	f7f8 f934 	bl	810292c <HAL_GetTick>
 810a6c4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a6c8:	e00d      	b.n	810a6e6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810a6ca:	f7f8 f92f 	bl	810292c <HAL_GetTick>
 810a6ce:	4602      	mov	r2, r0
 810a6d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810a6d4:	1ad2      	subs	r2, r2, r3
 810a6d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 810a6da:	429a      	cmp	r2, r3
 810a6dc:	d903      	bls.n	810a6e6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810a6de:	2303      	movs	r3, #3
 810a6e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810a6e4:	e005      	b.n	810a6f2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a6e6:	4b11      	ldr	r3, [pc, #68]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a6e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a6ea:	f003 0302 	and.w	r3, r3, #2
 810a6ee:	2b00      	cmp	r3, #0
 810a6f0:	d0eb      	beq.n	810a6ca <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810a6f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a6f6:	2b00      	cmp	r3, #0
 810a6f8:	d130      	bne.n	810a75c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810a6fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810a706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a70a:	d115      	bne.n	810a738 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810a70c:	4b07      	ldr	r3, [pc, #28]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a70e:	691b      	ldr	r3, [r3, #16]
 810a710:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810a714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a718:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a71c:	091a      	lsrs	r2, r3, #4
 810a71e:	4b05      	ldr	r3, [pc, #20]	@ (810a734 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810a720:	4013      	ands	r3, r2
 810a722:	4a02      	ldr	r2, [pc, #8]	@ (810a72c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 810a724:	430b      	orrs	r3, r1
 810a726:	6113      	str	r3, [r2, #16]
 810a728:	e00c      	b.n	810a744 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810a72a:	bf00      	nop
 810a72c:	58024400 	.word	0x58024400
 810a730:	58024800 	.word	0x58024800
 810a734:	00ffffcf 	.word	0x00ffffcf
 810a738:	4bd4      	ldr	r3, [pc, #848]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a73a:	691b      	ldr	r3, [r3, #16]
 810a73c:	4ad3      	ldr	r2, [pc, #844]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a73e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810a742:	6113      	str	r3, [r2, #16]
 810a744:	4bd1      	ldr	r3, [pc, #836]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a746:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810a748:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a74c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810a754:	4acd      	ldr	r2, [pc, #820]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a756:	430b      	orrs	r3, r1
 810a758:	6713      	str	r3, [r2, #112]	@ 0x70
 810a75a:	e008      	b.n	810a76e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810a75c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a760:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810a764:	e003      	b.n	810a76e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a766:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a76a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810a76e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a776:	f002 0301 	and.w	r3, r2, #1
 810a77a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810a77e:	2300      	movs	r3, #0
 810a780:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810a784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810a788:	460b      	mov	r3, r1
 810a78a:	4313      	orrs	r3, r2
 810a78c:	f000 808b 	beq.w	810a8a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810a790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810a798:	2b28      	cmp	r3, #40	@ 0x28
 810a79a:	d86b      	bhi.n	810a874 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810a79c:	a201      	add	r2, pc, #4	@ (adr r2, 810a7a4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a7a2:	bf00      	nop
 810a7a4:	0810a87d 	.word	0x0810a87d
 810a7a8:	0810a875 	.word	0x0810a875
 810a7ac:	0810a875 	.word	0x0810a875
 810a7b0:	0810a875 	.word	0x0810a875
 810a7b4:	0810a875 	.word	0x0810a875
 810a7b8:	0810a875 	.word	0x0810a875
 810a7bc:	0810a875 	.word	0x0810a875
 810a7c0:	0810a875 	.word	0x0810a875
 810a7c4:	0810a849 	.word	0x0810a849
 810a7c8:	0810a875 	.word	0x0810a875
 810a7cc:	0810a875 	.word	0x0810a875
 810a7d0:	0810a875 	.word	0x0810a875
 810a7d4:	0810a875 	.word	0x0810a875
 810a7d8:	0810a875 	.word	0x0810a875
 810a7dc:	0810a875 	.word	0x0810a875
 810a7e0:	0810a875 	.word	0x0810a875
 810a7e4:	0810a85f 	.word	0x0810a85f
 810a7e8:	0810a875 	.word	0x0810a875
 810a7ec:	0810a875 	.word	0x0810a875
 810a7f0:	0810a875 	.word	0x0810a875
 810a7f4:	0810a875 	.word	0x0810a875
 810a7f8:	0810a875 	.word	0x0810a875
 810a7fc:	0810a875 	.word	0x0810a875
 810a800:	0810a875 	.word	0x0810a875
 810a804:	0810a87d 	.word	0x0810a87d
 810a808:	0810a875 	.word	0x0810a875
 810a80c:	0810a875 	.word	0x0810a875
 810a810:	0810a875 	.word	0x0810a875
 810a814:	0810a875 	.word	0x0810a875
 810a818:	0810a875 	.word	0x0810a875
 810a81c:	0810a875 	.word	0x0810a875
 810a820:	0810a875 	.word	0x0810a875
 810a824:	0810a87d 	.word	0x0810a87d
 810a828:	0810a875 	.word	0x0810a875
 810a82c:	0810a875 	.word	0x0810a875
 810a830:	0810a875 	.word	0x0810a875
 810a834:	0810a875 	.word	0x0810a875
 810a838:	0810a875 	.word	0x0810a875
 810a83c:	0810a875 	.word	0x0810a875
 810a840:	0810a875 	.word	0x0810a875
 810a844:	0810a87d 	.word	0x0810a87d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a84c:	3308      	adds	r3, #8
 810a84e:	2101      	movs	r1, #1
 810a850:	4618      	mov	r0, r3
 810a852:	f001 fe97 	bl	810c584 <RCCEx_PLL2_Config>
 810a856:	4603      	mov	r3, r0
 810a858:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810a85c:	e00f      	b.n	810a87e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a85e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a862:	3328      	adds	r3, #40	@ 0x28
 810a864:	2101      	movs	r1, #1
 810a866:	4618      	mov	r0, r3
 810a868:	f001 ff3e 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a86c:	4603      	mov	r3, r0
 810a86e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810a872:	e004      	b.n	810a87e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a874:	2301      	movs	r3, #1
 810a876:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a87a:	e000      	b.n	810a87e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810a87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a87e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a882:	2b00      	cmp	r3, #0
 810a884:	d10b      	bne.n	810a89e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810a886:	4b81      	ldr	r3, [pc, #516]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a88a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810a88e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810a896:	4a7d      	ldr	r2, [pc, #500]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a898:	430b      	orrs	r3, r1
 810a89a:	6553      	str	r3, [r2, #84]	@ 0x54
 810a89c:	e003      	b.n	810a8a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a89e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a8a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810a8a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a8ae:	f002 0302 	and.w	r3, r2, #2
 810a8b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810a8b6:	2300      	movs	r3, #0
 810a8b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810a8bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810a8c0:	460b      	mov	r3, r1
 810a8c2:	4313      	orrs	r3, r2
 810a8c4:	d042      	beq.n	810a94c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810a8c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810a8cc:	2b05      	cmp	r3, #5
 810a8ce:	d825      	bhi.n	810a91c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810a8d0:	a201      	add	r2, pc, #4	@ (adr r2, 810a8d8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a8d6:	bf00      	nop
 810a8d8:	0810a925 	.word	0x0810a925
 810a8dc:	0810a8f1 	.word	0x0810a8f1
 810a8e0:	0810a907 	.word	0x0810a907
 810a8e4:	0810a925 	.word	0x0810a925
 810a8e8:	0810a925 	.word	0x0810a925
 810a8ec:	0810a925 	.word	0x0810a925
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a8f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8f4:	3308      	adds	r3, #8
 810a8f6:	2101      	movs	r1, #1
 810a8f8:	4618      	mov	r0, r3
 810a8fa:	f001 fe43 	bl	810c584 <RCCEx_PLL2_Config>
 810a8fe:	4603      	mov	r3, r0
 810a900:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810a904:	e00f      	b.n	810a926 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a90a:	3328      	adds	r3, #40	@ 0x28
 810a90c:	2101      	movs	r1, #1
 810a90e:	4618      	mov	r0, r3
 810a910:	f001 feea 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a914:	4603      	mov	r3, r0
 810a916:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810a91a:	e004      	b.n	810a926 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a91c:	2301      	movs	r3, #1
 810a91e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a922:	e000      	b.n	810a926 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810a924:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a926:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a92a:	2b00      	cmp	r3, #0
 810a92c:	d10a      	bne.n	810a944 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810a92e:	4b57      	ldr	r3, [pc, #348]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a932:	f023 0107 	bic.w	r1, r3, #7
 810a936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a93a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810a93c:	4a53      	ldr	r2, [pc, #332]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a93e:	430b      	orrs	r3, r1
 810a940:	6553      	str	r3, [r2, #84]	@ 0x54
 810a942:	e003      	b.n	810a94c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a944:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a948:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810a94c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a954:	f002 0304 	and.w	r3, r2, #4
 810a958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810a95c:	2300      	movs	r3, #0
 810a95e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810a962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810a966:	460b      	mov	r3, r1
 810a968:	4313      	orrs	r3, r2
 810a96a:	d044      	beq.n	810a9f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810a96c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810a974:	2b05      	cmp	r3, #5
 810a976:	d825      	bhi.n	810a9c4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810a978:	a201      	add	r2, pc, #4	@ (adr r2, 810a980 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a97e:	bf00      	nop
 810a980:	0810a9cd 	.word	0x0810a9cd
 810a984:	0810a999 	.word	0x0810a999
 810a988:	0810a9af 	.word	0x0810a9af
 810a98c:	0810a9cd 	.word	0x0810a9cd
 810a990:	0810a9cd 	.word	0x0810a9cd
 810a994:	0810a9cd 	.word	0x0810a9cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a998:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a99c:	3308      	adds	r3, #8
 810a99e:	2101      	movs	r1, #1
 810a9a0:	4618      	mov	r0, r3
 810a9a2:	f001 fdef 	bl	810c584 <RCCEx_PLL2_Config>
 810a9a6:	4603      	mov	r3, r0
 810a9a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810a9ac:	e00f      	b.n	810a9ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a9ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9b2:	3328      	adds	r3, #40	@ 0x28
 810a9b4:	2101      	movs	r1, #1
 810a9b6:	4618      	mov	r0, r3
 810a9b8:	f001 fe96 	bl	810c6e8 <RCCEx_PLL3_Config>
 810a9bc:	4603      	mov	r3, r0
 810a9be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810a9c2:	e004      	b.n	810a9ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a9c4:	2301      	movs	r3, #1
 810a9c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a9ca:	e000      	b.n	810a9ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810a9cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a9ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a9d2:	2b00      	cmp	r3, #0
 810a9d4:	d10b      	bne.n	810a9ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810a9d6:	4b2d      	ldr	r3, [pc, #180]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a9da:	f023 0107 	bic.w	r1, r3, #7
 810a9de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810a9e6:	4a29      	ldr	r2, [pc, #164]	@ (810aa8c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810a9e8:	430b      	orrs	r3, r1
 810a9ea:	6593      	str	r3, [r2, #88]	@ 0x58
 810a9ec:	e003      	b.n	810a9f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a9f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810a9f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9fe:	f002 0320 	and.w	r3, r2, #32
 810aa02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810aa06:	2300      	movs	r3, #0
 810aa08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810aa0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810aa10:	460b      	mov	r3, r1
 810aa12:	4313      	orrs	r3, r2
 810aa14:	d057      	beq.n	810aac6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810aa16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810aa1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810aa22:	d035      	beq.n	810aa90 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810aa24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810aa28:	d82c      	bhi.n	810aa84 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810aa2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa2e:	d031      	beq.n	810aa94 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810aa30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa34:	d826      	bhi.n	810aa84 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810aa36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810aa3a:	d02d      	beq.n	810aa98 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810aa3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810aa40:	d820      	bhi.n	810aa84 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810aa42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa46:	d012      	beq.n	810aa6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810aa48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa4c:	d81a      	bhi.n	810aa84 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810aa4e:	2b00      	cmp	r3, #0
 810aa50:	d024      	beq.n	810aa9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810aa52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810aa56:	d115      	bne.n	810aa84 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810aa58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa5c:	3308      	adds	r3, #8
 810aa5e:	2100      	movs	r1, #0
 810aa60:	4618      	mov	r0, r3
 810aa62:	f001 fd8f 	bl	810c584 <RCCEx_PLL2_Config>
 810aa66:	4603      	mov	r3, r0
 810aa68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810aa6c:	e017      	b.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810aa6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa72:	3328      	adds	r3, #40	@ 0x28
 810aa74:	2102      	movs	r1, #2
 810aa76:	4618      	mov	r0, r3
 810aa78:	f001 fe36 	bl	810c6e8 <RCCEx_PLL3_Config>
 810aa7c:	4603      	mov	r3, r0
 810aa7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810aa82:	e00c      	b.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810aa84:	2301      	movs	r3, #1
 810aa86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810aa8a:	e008      	b.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810aa8c:	58024400 	.word	0x58024400
        break;
 810aa90:	bf00      	nop
 810aa92:	e004      	b.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810aa94:	bf00      	nop
 810aa96:	e002      	b.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810aa98:	bf00      	nop
 810aa9a:	e000      	b.n	810aa9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810aa9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aa9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aaa2:	2b00      	cmp	r3, #0
 810aaa4:	d10b      	bne.n	810aabe <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810aaa6:	4bc2      	ldr	r3, [pc, #776]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810aaa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aaaa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810aaae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810aab6:	4abe      	ldr	r2, [pc, #760]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810aab8:	430b      	orrs	r3, r1
 810aaba:	6553      	str	r3, [r2, #84]	@ 0x54
 810aabc:	e003      	b.n	810aac6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aabe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aac2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810aac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aace:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810aad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810aad6:	2300      	movs	r3, #0
 810aad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810aadc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810aae0:	460b      	mov	r3, r1
 810aae2:	4313      	orrs	r3, r2
 810aae4:	d055      	beq.n	810ab92 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810aae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aaea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810aaee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810aaf2:	d033      	beq.n	810ab5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810aaf4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810aaf8:	d82c      	bhi.n	810ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810aafa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810aafe:	d02f      	beq.n	810ab60 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810ab00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ab04:	d826      	bhi.n	810ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810ab06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810ab0a:	d02b      	beq.n	810ab64 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810ab0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810ab10:	d820      	bhi.n	810ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810ab12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810ab16:	d012      	beq.n	810ab3e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810ab18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810ab1c:	d81a      	bhi.n	810ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810ab1e:	2b00      	cmp	r3, #0
 810ab20:	d022      	beq.n	810ab68 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810ab22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810ab26:	d115      	bne.n	810ab54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810ab28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab2c:	3308      	adds	r3, #8
 810ab2e:	2100      	movs	r1, #0
 810ab30:	4618      	mov	r0, r3
 810ab32:	f001 fd27 	bl	810c584 <RCCEx_PLL2_Config>
 810ab36:	4603      	mov	r3, r0
 810ab38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810ab3c:	e015      	b.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810ab3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab42:	3328      	adds	r3, #40	@ 0x28
 810ab44:	2102      	movs	r1, #2
 810ab46:	4618      	mov	r0, r3
 810ab48:	f001 fdce 	bl	810c6e8 <RCCEx_PLL3_Config>
 810ab4c:	4603      	mov	r3, r0
 810ab4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810ab52:	e00a      	b.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ab54:	2301      	movs	r3, #1
 810ab56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ab5a:	e006      	b.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810ab5c:	bf00      	nop
 810ab5e:	e004      	b.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810ab60:	bf00      	nop
 810ab62:	e002      	b.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810ab64:	bf00      	nop
 810ab66:	e000      	b.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810ab68:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ab6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ab6e:	2b00      	cmp	r3, #0
 810ab70:	d10b      	bne.n	810ab8a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810ab72:	4b8f      	ldr	r3, [pc, #572]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ab74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ab76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810ab7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810ab82:	4a8b      	ldr	r2, [pc, #556]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ab84:	430b      	orrs	r3, r1
 810ab86:	6593      	str	r3, [r2, #88]	@ 0x58
 810ab88:	e003      	b.n	810ab92 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ab8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ab8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810ab92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab9a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810ab9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810aba2:	2300      	movs	r3, #0
 810aba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810aba8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810abac:	460b      	mov	r3, r1
 810abae:	4313      	orrs	r3, r2
 810abb0:	d055      	beq.n	810ac5e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810abb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810abba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810abbe:	d033      	beq.n	810ac28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810abc0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810abc4:	d82c      	bhi.n	810ac20 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810abc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810abca:	d02f      	beq.n	810ac2c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810abcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810abd0:	d826      	bhi.n	810ac20 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810abd2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810abd6:	d02b      	beq.n	810ac30 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810abd8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810abdc:	d820      	bhi.n	810ac20 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810abde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810abe2:	d012      	beq.n	810ac0a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810abe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810abe8:	d81a      	bhi.n	810ac20 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810abea:	2b00      	cmp	r3, #0
 810abec:	d022      	beq.n	810ac34 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810abee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810abf2:	d115      	bne.n	810ac20 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810abf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abf8:	3308      	adds	r3, #8
 810abfa:	2100      	movs	r1, #0
 810abfc:	4618      	mov	r0, r3
 810abfe:	f001 fcc1 	bl	810c584 <RCCEx_PLL2_Config>
 810ac02:	4603      	mov	r3, r0
 810ac04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810ac08:	e015      	b.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810ac0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac0e:	3328      	adds	r3, #40	@ 0x28
 810ac10:	2102      	movs	r1, #2
 810ac12:	4618      	mov	r0, r3
 810ac14:	f001 fd68 	bl	810c6e8 <RCCEx_PLL3_Config>
 810ac18:	4603      	mov	r3, r0
 810ac1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810ac1e:	e00a      	b.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ac20:	2301      	movs	r3, #1
 810ac22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ac26:	e006      	b.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810ac28:	bf00      	nop
 810ac2a:	e004      	b.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810ac2c:	bf00      	nop
 810ac2e:	e002      	b.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810ac30:	bf00      	nop
 810ac32:	e000      	b.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810ac34:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ac36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ac3a:	2b00      	cmp	r3, #0
 810ac3c:	d10b      	bne.n	810ac56 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810ac3e:	4b5c      	ldr	r3, [pc, #368]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ac40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ac42:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810ac46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810ac4e:	4a58      	ldr	r2, [pc, #352]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ac50:	430b      	orrs	r3, r1
 810ac52:	6593      	str	r3, [r2, #88]	@ 0x58
 810ac54:	e003      	b.n	810ac5e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ac56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ac5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810ac5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac66:	f002 0308 	and.w	r3, r2, #8
 810ac6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810ac6e:	2300      	movs	r3, #0
 810ac70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810ac74:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810ac78:	460b      	mov	r3, r1
 810ac7a:	4313      	orrs	r3, r2
 810ac7c:	d01e      	beq.n	810acbc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810ac7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810ac86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ac8a:	d10c      	bne.n	810aca6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810ac8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac90:	3328      	adds	r3, #40	@ 0x28
 810ac92:	2102      	movs	r1, #2
 810ac94:	4618      	mov	r0, r3
 810ac96:	f001 fd27 	bl	810c6e8 <RCCEx_PLL3_Config>
 810ac9a:	4603      	mov	r3, r0
 810ac9c:	2b00      	cmp	r3, #0
 810ac9e:	d002      	beq.n	810aca6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810aca0:	2301      	movs	r3, #1
 810aca2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810aca6:	4b42      	ldr	r3, [pc, #264]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810aca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810acaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810acae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810acb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810acb6:	4a3e      	ldr	r2, [pc, #248]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810acb8:	430b      	orrs	r3, r1
 810acba:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810acbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acc4:	f002 0310 	and.w	r3, r2, #16
 810acc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810accc:	2300      	movs	r3, #0
 810acce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810acd2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810acd6:	460b      	mov	r3, r1
 810acd8:	4313      	orrs	r3, r2
 810acda:	d01e      	beq.n	810ad1a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810acdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ace0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810ace4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ace8:	d10c      	bne.n	810ad04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810acea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810acee:	3328      	adds	r3, #40	@ 0x28
 810acf0:	2102      	movs	r1, #2
 810acf2:	4618      	mov	r0, r3
 810acf4:	f001 fcf8 	bl	810c6e8 <RCCEx_PLL3_Config>
 810acf8:	4603      	mov	r3, r0
 810acfa:	2b00      	cmp	r3, #0
 810acfc:	d002      	beq.n	810ad04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810acfe:	2301      	movs	r3, #1
 810ad00:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810ad04:	4b2a      	ldr	r3, [pc, #168]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ad06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ad08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810ad0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810ad14:	4a26      	ldr	r2, [pc, #152]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ad16:	430b      	orrs	r3, r1
 810ad18:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810ad1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad22:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810ad26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810ad2a:	2300      	movs	r3, #0
 810ad2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810ad30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810ad34:	460b      	mov	r3, r1
 810ad36:	4313      	orrs	r3, r2
 810ad38:	d040      	beq.n	810adbc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810ad3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810ad42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ad46:	d022      	beq.n	810ad8e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810ad48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ad4c:	d81b      	bhi.n	810ad86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810ad4e:	2b00      	cmp	r3, #0
 810ad50:	d003      	beq.n	810ad5a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810ad52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ad56:	d00b      	beq.n	810ad70 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810ad58:	e015      	b.n	810ad86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810ad5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad5e:	3308      	adds	r3, #8
 810ad60:	2100      	movs	r1, #0
 810ad62:	4618      	mov	r0, r3
 810ad64:	f001 fc0e 	bl	810c584 <RCCEx_PLL2_Config>
 810ad68:	4603      	mov	r3, r0
 810ad6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810ad6e:	e00f      	b.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810ad70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad74:	3328      	adds	r3, #40	@ 0x28
 810ad76:	2102      	movs	r1, #2
 810ad78:	4618      	mov	r0, r3
 810ad7a:	f001 fcb5 	bl	810c6e8 <RCCEx_PLL3_Config>
 810ad7e:	4603      	mov	r3, r0
 810ad80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810ad84:	e004      	b.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ad86:	2301      	movs	r3, #1
 810ad88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ad8c:	e000      	b.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810ad8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ad90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ad94:	2b00      	cmp	r3, #0
 810ad96:	d10d      	bne.n	810adb4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810ad98:	4b05      	ldr	r3, [pc, #20]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ad9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ad9c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810ada0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ada4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810ada8:	4a01      	ldr	r2, [pc, #4]	@ (810adb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810adaa:	430b      	orrs	r3, r1
 810adac:	6593      	str	r3, [r2, #88]	@ 0x58
 810adae:	e005      	b.n	810adbc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810adb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810adb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810adb8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810adbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810adc4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810adc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 810adca:	2300      	movs	r3, #0
 810adcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810adce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810add2:	460b      	mov	r3, r1
 810add4:	4313      	orrs	r3, r2
 810add6:	d03b      	beq.n	810ae50 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810add8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810addc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ade0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810ade4:	d01f      	beq.n	810ae26 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810ade6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810adea:	d818      	bhi.n	810ae1e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810adec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810adf0:	d003      	beq.n	810adfa <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810adf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810adf6:	d007      	beq.n	810ae08 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810adf8:	e011      	b.n	810ae1e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810adfa:	4b64      	ldr	r3, [pc, #400]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810adfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810adfe:	4a63      	ldr	r2, [pc, #396]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810ae00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ae04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810ae06:	e00f      	b.n	810ae28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ae08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ae0c:	3328      	adds	r3, #40	@ 0x28
 810ae0e:	2101      	movs	r1, #1
 810ae10:	4618      	mov	r0, r3
 810ae12:	f001 fc69 	bl	810c6e8 <RCCEx_PLL3_Config>
 810ae16:	4603      	mov	r3, r0
 810ae18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810ae1c:	e004      	b.n	810ae28 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ae1e:	2301      	movs	r3, #1
 810ae20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ae24:	e000      	b.n	810ae28 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810ae26:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ae28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ae2c:	2b00      	cmp	r3, #0
 810ae2e:	d10b      	bne.n	810ae48 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810ae30:	4b56      	ldr	r3, [pc, #344]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810ae32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ae34:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810ae38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ae3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ae40:	4a52      	ldr	r2, [pc, #328]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810ae42:	430b      	orrs	r3, r1
 810ae44:	6553      	str	r3, [r2, #84]	@ 0x54
 810ae46:	e003      	b.n	810ae50 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ae48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ae4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810ae50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae58:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810ae5c:	673b      	str	r3, [r7, #112]	@ 0x70
 810ae5e:	2300      	movs	r3, #0
 810ae60:	677b      	str	r3, [r7, #116]	@ 0x74
 810ae62:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810ae66:	460b      	mov	r3, r1
 810ae68:	4313      	orrs	r3, r2
 810ae6a:	d031      	beq.n	810aed0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810ae6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ae70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ae72:	2b00      	cmp	r3, #0
 810ae74:	d003      	beq.n	810ae7e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810ae76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ae7a:	d007      	beq.n	810ae8c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810ae7c:	e011      	b.n	810aea2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ae7e:	4b43      	ldr	r3, [pc, #268]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ae82:	4a42      	ldr	r2, [pc, #264]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810ae84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ae88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810ae8a:	e00e      	b.n	810aeaa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810ae8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ae90:	3308      	adds	r3, #8
 810ae92:	2102      	movs	r1, #2
 810ae94:	4618      	mov	r0, r3
 810ae96:	f001 fb75 	bl	810c584 <RCCEx_PLL2_Config>
 810ae9a:	4603      	mov	r3, r0
 810ae9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810aea0:	e003      	b.n	810aeaa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810aea2:	2301      	movs	r3, #1
 810aea4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810aea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aeaa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aeae:	2b00      	cmp	r3, #0
 810aeb0:	d10a      	bne.n	810aec8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810aeb2:	4b36      	ldr	r3, [pc, #216]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810aeb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aeb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810aeba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aec0:	4a32      	ldr	r2, [pc, #200]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810aec2:	430b      	orrs	r3, r1
 810aec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810aec6:	e003      	b.n	810aed0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aec8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aecc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810aed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aed8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810aedc:	66bb      	str	r3, [r7, #104]	@ 0x68
 810aede:	2300      	movs	r3, #0
 810aee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810aee2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810aee6:	460b      	mov	r3, r1
 810aee8:	4313      	orrs	r3, r2
 810aeea:	d00c      	beq.n	810af06 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810aeec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aef0:	3328      	adds	r3, #40	@ 0x28
 810aef2:	2102      	movs	r1, #2
 810aef4:	4618      	mov	r0, r3
 810aef6:	f001 fbf7 	bl	810c6e8 <RCCEx_PLL3_Config>
 810aefa:	4603      	mov	r3, r0
 810aefc:	2b00      	cmp	r3, #0
 810aefe:	d002      	beq.n	810af06 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810af00:	2301      	movs	r3, #1
 810af02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810af06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810af12:	663b      	str	r3, [r7, #96]	@ 0x60
 810af14:	2300      	movs	r3, #0
 810af16:	667b      	str	r3, [r7, #100]	@ 0x64
 810af18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810af1c:	460b      	mov	r3, r1
 810af1e:	4313      	orrs	r3, r2
 810af20:	d03a      	beq.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810af22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810af2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810af2e:	d018      	beq.n	810af62 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810af30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810af34:	d811      	bhi.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810af36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810af3a:	d014      	beq.n	810af66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810af3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810af40:	d80b      	bhi.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810af42:	2b00      	cmp	r3, #0
 810af44:	d011      	beq.n	810af6a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810af46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810af4a:	d106      	bne.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810af4c:	4b0f      	ldr	r3, [pc, #60]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810af4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810af50:	4a0e      	ldr	r2, [pc, #56]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810af52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810af56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810af58:	e008      	b.n	810af6c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810af5a:	2301      	movs	r3, #1
 810af5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810af60:	e004      	b.n	810af6c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810af62:	bf00      	nop
 810af64:	e002      	b.n	810af6c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810af66:	bf00      	nop
 810af68:	e000      	b.n	810af6c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810af6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810af6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810af70:	2b00      	cmp	r3, #0
 810af72:	d10d      	bne.n	810af90 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810af74:	4b05      	ldr	r3, [pc, #20]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810af76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810af78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810af7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810af84:	4a01      	ldr	r2, [pc, #4]	@ (810af8c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810af86:	430b      	orrs	r3, r1
 810af88:	6553      	str	r3, [r2, #84]	@ 0x54
 810af8a:	e005      	b.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810af8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810af94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810af98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afa0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810afa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 810afa6:	2300      	movs	r3, #0
 810afa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810afaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810afae:	460b      	mov	r3, r1
 810afb0:	4313      	orrs	r3, r2
 810afb2:	d009      	beq.n	810afc8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810afb4:	4baa      	ldr	r3, [pc, #680]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810afb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810afb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810afbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810afc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810afc2:	4aa7      	ldr	r2, [pc, #668]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810afc4:	430b      	orrs	r3, r1
 810afc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810afc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afd0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810afd4:	653b      	str	r3, [r7, #80]	@ 0x50
 810afd6:	2300      	movs	r3, #0
 810afd8:	657b      	str	r3, [r7, #84]	@ 0x54
 810afda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810afde:	460b      	mov	r3, r1
 810afe0:	4313      	orrs	r3, r2
 810afe2:	d00a      	beq.n	810affa <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810afe4:	4b9e      	ldr	r3, [pc, #632]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810afe6:	691b      	ldr	r3, [r3, #16]
 810afe8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810afec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aff0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810aff4:	4a9a      	ldr	r2, [pc, #616]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810aff6:	430b      	orrs	r3, r1
 810aff8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810affa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b002:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810b006:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b008:	2300      	movs	r3, #0
 810b00a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b00c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810b010:	460b      	mov	r3, r1
 810b012:	4313      	orrs	r3, r2
 810b014:	d009      	beq.n	810b02a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b016:	4b92      	ldr	r3, [pc, #584]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b01a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810b01e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810b024:	4a8e      	ldr	r2, [pc, #568]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b026:	430b      	orrs	r3, r1
 810b028:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b02a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b032:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810b036:	643b      	str	r3, [r7, #64]	@ 0x40
 810b038:	2300      	movs	r3, #0
 810b03a:	647b      	str	r3, [r7, #68]	@ 0x44
 810b03c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810b040:	460b      	mov	r3, r1
 810b042:	4313      	orrs	r3, r2
 810b044:	d00e      	beq.n	810b064 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b046:	4b86      	ldr	r3, [pc, #536]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b048:	691b      	ldr	r3, [r3, #16]
 810b04a:	4a85      	ldr	r2, [pc, #532]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b04c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810b050:	6113      	str	r3, [r2, #16]
 810b052:	4b83      	ldr	r3, [pc, #524]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b054:	6919      	ldr	r1, [r3, #16]
 810b056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b05a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810b05e:	4a80      	ldr	r2, [pc, #512]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b060:	430b      	orrs	r3, r1
 810b062:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b06c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810b070:	63bb      	str	r3, [r7, #56]	@ 0x38
 810b072:	2300      	movs	r3, #0
 810b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b076:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810b07a:	460b      	mov	r3, r1
 810b07c:	4313      	orrs	r3, r2
 810b07e:	d009      	beq.n	810b094 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b080:	4b77      	ldr	r3, [pc, #476]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b084:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810b088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b08e:	4a74      	ldr	r2, [pc, #464]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b090:	430b      	orrs	r3, r1
 810b092:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b09c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810b0a0:	633b      	str	r3, [r7, #48]	@ 0x30
 810b0a2:	2300      	movs	r3, #0
 810b0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 810b0a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810b0aa:	460b      	mov	r3, r1
 810b0ac:	4313      	orrs	r3, r2
 810b0ae:	d00a      	beq.n	810b0c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b0b0:	4b6b      	ldr	r3, [pc, #428]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b0b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810b0b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b0c0:	4a67      	ldr	r2, [pc, #412]	@ (810b260 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b0c2:	430b      	orrs	r3, r1
 810b0c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810b0c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b0ce:	2100      	movs	r1, #0
 810b0d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 810b0d2:	f003 0301 	and.w	r3, r3, #1
 810b0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b0d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810b0dc:	460b      	mov	r3, r1
 810b0de:	4313      	orrs	r3, r2
 810b0e0:	d011      	beq.n	810b106 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b0e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0e6:	3308      	adds	r3, #8
 810b0e8:	2100      	movs	r1, #0
 810b0ea:	4618      	mov	r0, r3
 810b0ec:	f001 fa4a 	bl	810c584 <RCCEx_PLL2_Config>
 810b0f0:	4603      	mov	r3, r0
 810b0f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b0f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b0fa:	2b00      	cmp	r3, #0
 810b0fc:	d003      	beq.n	810b106 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b0fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b102:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810b106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b10e:	2100      	movs	r1, #0
 810b110:	6239      	str	r1, [r7, #32]
 810b112:	f003 0302 	and.w	r3, r3, #2
 810b116:	627b      	str	r3, [r7, #36]	@ 0x24
 810b118:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810b11c:	460b      	mov	r3, r1
 810b11e:	4313      	orrs	r3, r2
 810b120:	d011      	beq.n	810b146 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b126:	3308      	adds	r3, #8
 810b128:	2101      	movs	r1, #1
 810b12a:	4618      	mov	r0, r3
 810b12c:	f001 fa2a 	bl	810c584 <RCCEx_PLL2_Config>
 810b130:	4603      	mov	r3, r0
 810b132:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b136:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b13a:	2b00      	cmp	r3, #0
 810b13c:	d003      	beq.n	810b146 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b13e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b142:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810b146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b14e:	2100      	movs	r1, #0
 810b150:	61b9      	str	r1, [r7, #24]
 810b152:	f003 0304 	and.w	r3, r3, #4
 810b156:	61fb      	str	r3, [r7, #28]
 810b158:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b15c:	460b      	mov	r3, r1
 810b15e:	4313      	orrs	r3, r2
 810b160:	d011      	beq.n	810b186 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b166:	3308      	adds	r3, #8
 810b168:	2102      	movs	r1, #2
 810b16a:	4618      	mov	r0, r3
 810b16c:	f001 fa0a 	bl	810c584 <RCCEx_PLL2_Config>
 810b170:	4603      	mov	r3, r0
 810b172:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b176:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b17a:	2b00      	cmp	r3, #0
 810b17c:	d003      	beq.n	810b186 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b17e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b182:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810b186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b18e:	2100      	movs	r1, #0
 810b190:	6139      	str	r1, [r7, #16]
 810b192:	f003 0308 	and.w	r3, r3, #8
 810b196:	617b      	str	r3, [r7, #20]
 810b198:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b19c:	460b      	mov	r3, r1
 810b19e:	4313      	orrs	r3, r2
 810b1a0:	d011      	beq.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b1a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1a6:	3328      	adds	r3, #40	@ 0x28
 810b1a8:	2100      	movs	r1, #0
 810b1aa:	4618      	mov	r0, r3
 810b1ac:	f001 fa9c 	bl	810c6e8 <RCCEx_PLL3_Config>
 810b1b0:	4603      	mov	r3, r0
 810b1b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810b1b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b1ba:	2b00      	cmp	r3, #0
 810b1bc:	d003      	beq.n	810b1c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b1be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b1c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810b1c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b1ce:	2100      	movs	r1, #0
 810b1d0:	60b9      	str	r1, [r7, #8]
 810b1d2:	f003 0310 	and.w	r3, r3, #16
 810b1d6:	60fb      	str	r3, [r7, #12]
 810b1d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810b1dc:	460b      	mov	r3, r1
 810b1de:	4313      	orrs	r3, r2
 810b1e0:	d011      	beq.n	810b206 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b1e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1e6:	3328      	adds	r3, #40	@ 0x28
 810b1e8:	2101      	movs	r1, #1
 810b1ea:	4618      	mov	r0, r3
 810b1ec:	f001 fa7c 	bl	810c6e8 <RCCEx_PLL3_Config>
 810b1f0:	4603      	mov	r3, r0
 810b1f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b1f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b1fa:	2b00      	cmp	r3, #0
 810b1fc:	d003      	beq.n	810b206 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b1fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b202:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810b206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b20e:	2100      	movs	r1, #0
 810b210:	6039      	str	r1, [r7, #0]
 810b212:	f003 0320 	and.w	r3, r3, #32
 810b216:	607b      	str	r3, [r7, #4]
 810b218:	e9d7 1200 	ldrd	r1, r2, [r7]
 810b21c:	460b      	mov	r3, r1
 810b21e:	4313      	orrs	r3, r2
 810b220:	d011      	beq.n	810b246 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b226:	3328      	adds	r3, #40	@ 0x28
 810b228:	2102      	movs	r1, #2
 810b22a:	4618      	mov	r0, r3
 810b22c:	f001 fa5c 	bl	810c6e8 <RCCEx_PLL3_Config>
 810b230:	4603      	mov	r3, r0
 810b232:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b236:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b23a:	2b00      	cmp	r3, #0
 810b23c:	d003      	beq.n	810b246 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b23e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b242:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810b246:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810b24a:	2b00      	cmp	r3, #0
 810b24c:	d101      	bne.n	810b252 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810b24e:	2300      	movs	r3, #0
 810b250:	e000      	b.n	810b254 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810b252:	2301      	movs	r3, #1
}
 810b254:	4618      	mov	r0, r3
 810b256:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810b25a:	46bd      	mov	sp, r7
 810b25c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b260:	58024400 	.word	0x58024400

0810b264 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810b264:	b580      	push	{r7, lr}
 810b266:	b090      	sub	sp, #64	@ 0x40
 810b268:	af00      	add	r7, sp, #0
 810b26a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810b26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b272:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810b276:	430b      	orrs	r3, r1
 810b278:	f040 8094 	bne.w	810b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810b27c:	4b9e      	ldr	r3, [pc, #632]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b280:	f003 0307 	and.w	r3, r3, #7
 810b284:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b288:	2b04      	cmp	r3, #4
 810b28a:	f200 8087 	bhi.w	810b39c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810b28e:	a201      	add	r2, pc, #4	@ (adr r2, 810b294 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b294:	0810b2a9 	.word	0x0810b2a9
 810b298:	0810b2d1 	.word	0x0810b2d1
 810b29c:	0810b2f9 	.word	0x0810b2f9
 810b2a0:	0810b395 	.word	0x0810b395
 810b2a4:	0810b321 	.word	0x0810b321
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b2a8:	4b93      	ldr	r3, [pc, #588]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b2aa:	681b      	ldr	r3, [r3, #0]
 810b2ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b2b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b2b4:	d108      	bne.n	810b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b2b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b2ba:	4618      	mov	r0, r3
 810b2bc:	f001 f810 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b2c4:	f000 bd45 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b2c8:	2300      	movs	r3, #0
 810b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b2cc:	f000 bd41 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b2d0:	4b89      	ldr	r3, [pc, #548]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b2d2:	681b      	ldr	r3, [r3, #0]
 810b2d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b2d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b2dc:	d108      	bne.n	810b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b2de:	f107 0318 	add.w	r3, r7, #24
 810b2e2:	4618      	mov	r0, r3
 810b2e4:	f000 fd54 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b2e8:	69bb      	ldr	r3, [r7, #24]
 810b2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b2ec:	f000 bd31 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b2f0:	2300      	movs	r3, #0
 810b2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b2f4:	f000 bd2d 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b2f8:	4b7f      	ldr	r3, [pc, #508]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b2fa:	681b      	ldr	r3, [r3, #0]
 810b2fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b304:	d108      	bne.n	810b318 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b306:	f107 030c 	add.w	r3, r7, #12
 810b30a:	4618      	mov	r0, r3
 810b30c:	f000 fe94 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b310:	68fb      	ldr	r3, [r7, #12]
 810b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b314:	f000 bd1d 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b318:	2300      	movs	r3, #0
 810b31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b31c:	f000 bd19 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b320:	4b75      	ldr	r3, [pc, #468]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b324:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b328:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b32a:	4b73      	ldr	r3, [pc, #460]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b32c:	681b      	ldr	r3, [r3, #0]
 810b32e:	f003 0304 	and.w	r3, r3, #4
 810b332:	2b04      	cmp	r3, #4
 810b334:	d10c      	bne.n	810b350 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810b336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b338:	2b00      	cmp	r3, #0
 810b33a:	d109      	bne.n	810b350 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b33c:	4b6e      	ldr	r3, [pc, #440]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b33e:	681b      	ldr	r3, [r3, #0]
 810b340:	08db      	lsrs	r3, r3, #3
 810b342:	f003 0303 	and.w	r3, r3, #3
 810b346:	4a6d      	ldr	r2, [pc, #436]	@ (810b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b348:	fa22 f303 	lsr.w	r3, r2, r3
 810b34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b34e:	e01f      	b.n	810b390 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b350:	4b69      	ldr	r3, [pc, #420]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b352:	681b      	ldr	r3, [r3, #0]
 810b354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b35c:	d106      	bne.n	810b36c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810b35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b364:	d102      	bne.n	810b36c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b366:	4b66      	ldr	r3, [pc, #408]	@ (810b500 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b36a:	e011      	b.n	810b390 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b36c:	4b62      	ldr	r3, [pc, #392]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b36e:	681b      	ldr	r3, [r3, #0]
 810b370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b378:	d106      	bne.n	810b388 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810b37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b37c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b380:	d102      	bne.n	810b388 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b382:	4b60      	ldr	r3, [pc, #384]	@ (810b504 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b386:	e003      	b.n	810b390 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b388:	2300      	movs	r3, #0
 810b38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b38c:	f000 bce1 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b390:	f000 bcdf 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b394:	4b5c      	ldr	r3, [pc, #368]	@ (810b508 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b398:	f000 bcdb 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b39c:	2300      	movs	r3, #0
 810b39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b3a0:	f000 bcd7 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810b3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b3a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 810b3ac:	430b      	orrs	r3, r1
 810b3ae:	f040 80ad 	bne.w	810b50c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810b3b2:	4b51      	ldr	r3, [pc, #324]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b3b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b3b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810b3ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b3c2:	d056      	beq.n	810b472 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810b3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b3ca:	f200 8090 	bhi.w	810b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3d0:	2bc0      	cmp	r3, #192	@ 0xc0
 810b3d2:	f000 8088 	beq.w	810b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3d8:	2bc0      	cmp	r3, #192	@ 0xc0
 810b3da:	f200 8088 	bhi.w	810b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3e0:	2b80      	cmp	r3, #128	@ 0x80
 810b3e2:	d032      	beq.n	810b44a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810b3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3e6:	2b80      	cmp	r3, #128	@ 0x80
 810b3e8:	f200 8081 	bhi.w	810b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3ee:	2b00      	cmp	r3, #0
 810b3f0:	d003      	beq.n	810b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b3f4:	2b40      	cmp	r3, #64	@ 0x40
 810b3f6:	d014      	beq.n	810b422 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810b3f8:	e079      	b.n	810b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b3fa:	4b3f      	ldr	r3, [pc, #252]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b3fc:	681b      	ldr	r3, [r3, #0]
 810b3fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b402:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b406:	d108      	bne.n	810b41a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b40c:	4618      	mov	r0, r3
 810b40e:	f000 ff67 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b416:	f000 bc9c 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b41a:	2300      	movs	r3, #0
 810b41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b41e:	f000 bc98 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b422:	4b35      	ldr	r3, [pc, #212]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b424:	681b      	ldr	r3, [r3, #0]
 810b426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b42a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b42e:	d108      	bne.n	810b442 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b430:	f107 0318 	add.w	r3, r7, #24
 810b434:	4618      	mov	r0, r3
 810b436:	f000 fcab 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b43a:	69bb      	ldr	r3, [r7, #24]
 810b43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b43e:	f000 bc88 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b442:	2300      	movs	r3, #0
 810b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b446:	f000 bc84 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b44a:	4b2b      	ldr	r3, [pc, #172]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b44c:	681b      	ldr	r3, [r3, #0]
 810b44e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b456:	d108      	bne.n	810b46a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b458:	f107 030c 	add.w	r3, r7, #12
 810b45c:	4618      	mov	r0, r3
 810b45e:	f000 fdeb 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b462:	68fb      	ldr	r3, [r7, #12]
 810b464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b466:	f000 bc74 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b46a:	2300      	movs	r3, #0
 810b46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b46e:	f000 bc70 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b472:	4b21      	ldr	r3, [pc, #132]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b47a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b47c:	4b1e      	ldr	r3, [pc, #120]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b47e:	681b      	ldr	r3, [r3, #0]
 810b480:	f003 0304 	and.w	r3, r3, #4
 810b484:	2b04      	cmp	r3, #4
 810b486:	d10c      	bne.n	810b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810b488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b48a:	2b00      	cmp	r3, #0
 810b48c:	d109      	bne.n	810b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b48e:	4b1a      	ldr	r3, [pc, #104]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b490:	681b      	ldr	r3, [r3, #0]
 810b492:	08db      	lsrs	r3, r3, #3
 810b494:	f003 0303 	and.w	r3, r3, #3
 810b498:	4a18      	ldr	r2, [pc, #96]	@ (810b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b49a:	fa22 f303 	lsr.w	r3, r2, r3
 810b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b4a0:	e01f      	b.n	810b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b4a2:	4b15      	ldr	r3, [pc, #84]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b4a4:	681b      	ldr	r3, [r3, #0]
 810b4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b4ae:	d106      	bne.n	810b4be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810b4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b4b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b4b6:	d102      	bne.n	810b4be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b4b8:	4b11      	ldr	r3, [pc, #68]	@ (810b500 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b4bc:	e011      	b.n	810b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b4be:	4b0e      	ldr	r3, [pc, #56]	@ (810b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b4c0:	681b      	ldr	r3, [r3, #0]
 810b4c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b4c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b4ca:	d106      	bne.n	810b4da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 810b4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b4ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b4d2:	d102      	bne.n	810b4da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b4d4:	4b0b      	ldr	r3, [pc, #44]	@ (810b504 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b4d8:	e003      	b.n	810b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b4da:	2300      	movs	r3, #0
 810b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b4de:	f000 bc38 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b4e2:	f000 bc36 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b4e6:	4b08      	ldr	r3, [pc, #32]	@ (810b508 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b4ea:	f000 bc32 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b4ee:	2300      	movs	r3, #0
 810b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b4f2:	f000 bc2e 	b.w	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b4f6:	bf00      	nop
 810b4f8:	58024400 	.word	0x58024400
 810b4fc:	03d09000 	.word	0x03d09000
 810b500:	003d0900 	.word	0x003d0900
 810b504:	017d7840 	.word	0x017d7840
 810b508:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810b50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b510:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810b514:	430b      	orrs	r3, r1
 810b516:	f040 809c 	bne.w	810b652 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810b51a:	4b9e      	ldr	r3, [pc, #632]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b51e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810b522:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b52a:	d054      	beq.n	810b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b52e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b532:	f200 808b 	bhi.w	810b64c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b538:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b53c:	f000 8083 	beq.w	810b646 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810b540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b542:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b546:	f200 8081 	bhi.w	810b64c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b54c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b550:	d02f      	beq.n	810b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b558:	d878      	bhi.n	810b64c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b55c:	2b00      	cmp	r3, #0
 810b55e:	d004      	beq.n	810b56a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b566:	d012      	beq.n	810b58e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810b568:	e070      	b.n	810b64c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b56a:	4b8a      	ldr	r3, [pc, #552]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b56c:	681b      	ldr	r3, [r3, #0]
 810b56e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b576:	d107      	bne.n	810b588 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b57c:	4618      	mov	r0, r3
 810b57e:	f000 feaf 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b586:	e3e4      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b588:	2300      	movs	r3, #0
 810b58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b58c:	e3e1      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b58e:	4b81      	ldr	r3, [pc, #516]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b590:	681b      	ldr	r3, [r3, #0]
 810b592:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b59a:	d107      	bne.n	810b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b59c:	f107 0318 	add.w	r3, r7, #24
 810b5a0:	4618      	mov	r0, r3
 810b5a2:	f000 fbf5 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b5a6:	69bb      	ldr	r3, [r7, #24]
 810b5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b5aa:	e3d2      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b5ac:	2300      	movs	r3, #0
 810b5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b5b0:	e3cf      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b5b2:	4b78      	ldr	r3, [pc, #480]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b5b4:	681b      	ldr	r3, [r3, #0]
 810b5b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b5ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b5be:	d107      	bne.n	810b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b5c0:	f107 030c 	add.w	r3, r7, #12
 810b5c4:	4618      	mov	r0, r3
 810b5c6:	f000 fd37 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b5ca:	68fb      	ldr	r3, [r7, #12]
 810b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b5ce:	e3c0      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b5d0:	2300      	movs	r3, #0
 810b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b5d4:	e3bd      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b5d6:	4b6f      	ldr	r3, [pc, #444]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b5d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b5da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b5de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b5e0:	4b6c      	ldr	r3, [pc, #432]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b5e2:	681b      	ldr	r3, [r3, #0]
 810b5e4:	f003 0304 	and.w	r3, r3, #4
 810b5e8:	2b04      	cmp	r3, #4
 810b5ea:	d10c      	bne.n	810b606 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 810b5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b5ee:	2b00      	cmp	r3, #0
 810b5f0:	d109      	bne.n	810b606 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b5f2:	4b68      	ldr	r3, [pc, #416]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b5f4:	681b      	ldr	r3, [r3, #0]
 810b5f6:	08db      	lsrs	r3, r3, #3
 810b5f8:	f003 0303 	and.w	r3, r3, #3
 810b5fc:	4a66      	ldr	r2, [pc, #408]	@ (810b798 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810b5fe:	fa22 f303 	lsr.w	r3, r2, r3
 810b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b604:	e01e      	b.n	810b644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b606:	4b63      	ldr	r3, [pc, #396]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b608:	681b      	ldr	r3, [r3, #0]
 810b60a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b60e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b612:	d106      	bne.n	810b622 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810b614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b61a:	d102      	bne.n	810b622 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b61c:	4b5f      	ldr	r3, [pc, #380]	@ (810b79c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b620:	e010      	b.n	810b644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b622:	4b5c      	ldr	r3, [pc, #368]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b624:	681b      	ldr	r3, [r3, #0]
 810b626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b62a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b62e:	d106      	bne.n	810b63e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810b630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b636:	d102      	bne.n	810b63e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b638:	4b59      	ldr	r3, [pc, #356]	@ (810b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810b63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b63c:	e002      	b.n	810b644 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b63e:	2300      	movs	r3, #0
 810b640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b642:	e386      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b644:	e385      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b646:	4b57      	ldr	r3, [pc, #348]	@ (810b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b64a:	e382      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810b64c:	2300      	movs	r3, #0
 810b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b650:	e37f      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810b652:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b656:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810b65a:	430b      	orrs	r3, r1
 810b65c:	f040 80a7 	bne.w	810b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810b660:	4b4c      	ldr	r3, [pc, #304]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b664:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810b668:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b66c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810b670:	d055      	beq.n	810b71e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810b672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b674:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810b678:	f200 8096 	bhi.w	810b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810b67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b67e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810b682:	f000 8084 	beq.w	810b78e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810b686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b688:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810b68c:	f200 808c 	bhi.w	810b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810b690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b696:	d030      	beq.n	810b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810b698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b69a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b69e:	f200 8083 	bhi.w	810b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b6a4:	2b00      	cmp	r3, #0
 810b6a6:	d004      	beq.n	810b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b6aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810b6ae:	d012      	beq.n	810b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810b6b0:	e07a      	b.n	810b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b6b2:	4b38      	ldr	r3, [pc, #224]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b6b4:	681b      	ldr	r3, [r3, #0]
 810b6b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b6ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b6be:	d107      	bne.n	810b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b6c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b6c4:	4618      	mov	r0, r3
 810b6c6:	f000 fe0b 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b6ce:	e340      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b6d0:	2300      	movs	r3, #0
 810b6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b6d4:	e33d      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b6d6:	4b2f      	ldr	r3, [pc, #188]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b6d8:	681b      	ldr	r3, [r3, #0]
 810b6da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b6de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b6e2:	d107      	bne.n	810b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b6e4:	f107 0318 	add.w	r3, r7, #24
 810b6e8:	4618      	mov	r0, r3
 810b6ea:	f000 fb51 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b6ee:	69bb      	ldr	r3, [r7, #24]
 810b6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b6f2:	e32e      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b6f4:	2300      	movs	r3, #0
 810b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b6f8:	e32b      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b6fa:	4b26      	ldr	r3, [pc, #152]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b6fc:	681b      	ldr	r3, [r3, #0]
 810b6fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b706:	d107      	bne.n	810b718 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b708:	f107 030c 	add.w	r3, r7, #12
 810b70c:	4618      	mov	r0, r3
 810b70e:	f000 fc93 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b712:	68fb      	ldr	r3, [r7, #12]
 810b714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b716:	e31c      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b718:	2300      	movs	r3, #0
 810b71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b71c:	e319      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b71e:	4b1d      	ldr	r3, [pc, #116]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b722:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b726:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b728:	4b1a      	ldr	r3, [pc, #104]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b72a:	681b      	ldr	r3, [r3, #0]
 810b72c:	f003 0304 	and.w	r3, r3, #4
 810b730:	2b04      	cmp	r3, #4
 810b732:	d10c      	bne.n	810b74e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810b734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b736:	2b00      	cmp	r3, #0
 810b738:	d109      	bne.n	810b74e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b73a:	4b16      	ldr	r3, [pc, #88]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b73c:	681b      	ldr	r3, [r3, #0]
 810b73e:	08db      	lsrs	r3, r3, #3
 810b740:	f003 0303 	and.w	r3, r3, #3
 810b744:	4a14      	ldr	r2, [pc, #80]	@ (810b798 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810b746:	fa22 f303 	lsr.w	r3, r2, r3
 810b74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b74c:	e01e      	b.n	810b78c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b74e:	4b11      	ldr	r3, [pc, #68]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b750:	681b      	ldr	r3, [r3, #0]
 810b752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b75a:	d106      	bne.n	810b76a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810b75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b75e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b762:	d102      	bne.n	810b76a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b764:	4b0d      	ldr	r3, [pc, #52]	@ (810b79c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b768:	e010      	b.n	810b78c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b76a:	4b0a      	ldr	r3, [pc, #40]	@ (810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b76c:	681b      	ldr	r3, [r3, #0]
 810b76e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b776:	d106      	bne.n	810b786 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810b778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b77a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b77e:	d102      	bne.n	810b786 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b780:	4b07      	ldr	r3, [pc, #28]	@ (810b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810b782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b784:	e002      	b.n	810b78c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b786:	2300      	movs	r3, #0
 810b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b78a:	e2e2      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b78c:	e2e1      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b78e:	4b05      	ldr	r3, [pc, #20]	@ (810b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810b790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b792:	e2de      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b794:	58024400 	.word	0x58024400
 810b798:	03d09000 	.word	0x03d09000
 810b79c:	003d0900 	.word	0x003d0900
 810b7a0:	017d7840 	.word	0x017d7840
 810b7a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810b7a8:	2300      	movs	r3, #0
 810b7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b7ac:	e2d1      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810b7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b7b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810b7b6:	430b      	orrs	r3, r1
 810b7b8:	f040 809c 	bne.w	810b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810b7bc:	4b93      	ldr	r3, [pc, #588]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b7c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810b7c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810b7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b7cc:	d054      	beq.n	810b878 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810b7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b7d4:	f200 808b 	bhi.w	810b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810b7de:	f000 8083 	beq.w	810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810b7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810b7e8:	f200 8081 	bhi.w	810b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810b7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b7f2:	d02f      	beq.n	810b854 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b7fa:	d878      	bhi.n	810b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810b7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b7fe:	2b00      	cmp	r3, #0
 810b800:	d004      	beq.n	810b80c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810b802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b808:	d012      	beq.n	810b830 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810b80a:	e070      	b.n	810b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b80c:	4b7f      	ldr	r3, [pc, #508]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b80e:	681b      	ldr	r3, [r3, #0]
 810b810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b818:	d107      	bne.n	810b82a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b81a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b81e:	4618      	mov	r0, r3
 810b820:	f000 fd5e 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b828:	e293      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b82a:	2300      	movs	r3, #0
 810b82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b82e:	e290      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b830:	4b76      	ldr	r3, [pc, #472]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b832:	681b      	ldr	r3, [r3, #0]
 810b834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b83c:	d107      	bne.n	810b84e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b83e:	f107 0318 	add.w	r3, r7, #24
 810b842:	4618      	mov	r0, r3
 810b844:	f000 faa4 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b848:	69bb      	ldr	r3, [r7, #24]
 810b84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b84c:	e281      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b84e:	2300      	movs	r3, #0
 810b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b852:	e27e      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b854:	4b6d      	ldr	r3, [pc, #436]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b856:	681b      	ldr	r3, [r3, #0]
 810b858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b85c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b860:	d107      	bne.n	810b872 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b862:	f107 030c 	add.w	r3, r7, #12
 810b866:	4618      	mov	r0, r3
 810b868:	f000 fbe6 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b86c:	68fb      	ldr	r3, [r7, #12]
 810b86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b870:	e26f      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b872:	2300      	movs	r3, #0
 810b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b876:	e26c      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b878:	4b64      	ldr	r3, [pc, #400]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b87a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b87c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b880:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b882:	4b62      	ldr	r3, [pc, #392]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b884:	681b      	ldr	r3, [r3, #0]
 810b886:	f003 0304 	and.w	r3, r3, #4
 810b88a:	2b04      	cmp	r3, #4
 810b88c:	d10c      	bne.n	810b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810b88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b890:	2b00      	cmp	r3, #0
 810b892:	d109      	bne.n	810b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b894:	4b5d      	ldr	r3, [pc, #372]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b896:	681b      	ldr	r3, [r3, #0]
 810b898:	08db      	lsrs	r3, r3, #3
 810b89a:	f003 0303 	and.w	r3, r3, #3
 810b89e:	4a5c      	ldr	r2, [pc, #368]	@ (810ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810b8a0:	fa22 f303 	lsr.w	r3, r2, r3
 810b8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b8a6:	e01e      	b.n	810b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b8a8:	4b58      	ldr	r3, [pc, #352]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b8aa:	681b      	ldr	r3, [r3, #0]
 810b8ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b8b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b8b4:	d106      	bne.n	810b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810b8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b8b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b8bc:	d102      	bne.n	810b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b8be:	4b55      	ldr	r3, [pc, #340]	@ (810ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810b8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b8c2:	e010      	b.n	810b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b8c4:	4b51      	ldr	r3, [pc, #324]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b8c6:	681b      	ldr	r3, [r3, #0]
 810b8c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b8cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b8d0:	d106      	bne.n	810b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810b8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b8d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b8d8:	d102      	bne.n	810b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b8da:	4b4f      	ldr	r3, [pc, #316]	@ (810ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810b8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b8de:	e002      	b.n	810b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b8e0:	2300      	movs	r3, #0
 810b8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b8e4:	e235      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b8e6:	e234      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b8e8:	4b4c      	ldr	r3, [pc, #304]	@ (810ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b8ec:	e231      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b8ee:	2300      	movs	r3, #0
 810b8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b8f2:	e22e      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810b8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b8f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 810b8fc:	430b      	orrs	r3, r1
 810b8fe:	f040 808f 	bne.w	810ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810b902:	4b42      	ldr	r3, [pc, #264]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b906:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810b90a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 810b90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b90e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810b912:	d06b      	beq.n	810b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b916:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810b91a:	d874      	bhi.n	810ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810b91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b91e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810b922:	d056      	beq.n	810b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810b924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810b92a:	d86c      	bhi.n	810ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810b92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b92e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810b932:	d03b      	beq.n	810b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810b934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b936:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810b93a:	d864      	bhi.n	810ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b93e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b942:	d021      	beq.n	810b988 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810b944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b946:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b94a:	d85c      	bhi.n	810ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b94e:	2b00      	cmp	r3, #0
 810b950:	d004      	beq.n	810b95c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b958:	d004      	beq.n	810b964 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810b95a:	e054      	b.n	810ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810b95c:	f7fe f9ca 	bl	8109cf4 <HAL_RCC_GetPCLK1Freq>
 810b960:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b962:	e1f6      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b964:	4b29      	ldr	r3, [pc, #164]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b966:	681b      	ldr	r3, [r3, #0]
 810b968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b96c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b970:	d107      	bne.n	810b982 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b972:	f107 0318 	add.w	r3, r7, #24
 810b976:	4618      	mov	r0, r3
 810b978:	f000 fa0a 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b97c:	69fb      	ldr	r3, [r7, #28]
 810b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b980:	e1e7      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b982:	2300      	movs	r3, #0
 810b984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b986:	e1e4      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b988:	4b20      	ldr	r3, [pc, #128]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b98a:	681b      	ldr	r3, [r3, #0]
 810b98c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b994:	d107      	bne.n	810b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b996:	f107 030c 	add.w	r3, r7, #12
 810b99a:	4618      	mov	r0, r3
 810b99c:	f000 fb4c 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810b9a0:	693b      	ldr	r3, [r7, #16]
 810b9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9a4:	e1d5      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9a6:	2300      	movs	r3, #0
 810b9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9aa:	e1d2      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810b9ac:	4b17      	ldr	r3, [pc, #92]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b9ae:	681b      	ldr	r3, [r3, #0]
 810b9b0:	f003 0304 	and.w	r3, r3, #4
 810b9b4:	2b04      	cmp	r3, #4
 810b9b6:	d109      	bne.n	810b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b9b8:	4b14      	ldr	r3, [pc, #80]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b9ba:	681b      	ldr	r3, [r3, #0]
 810b9bc:	08db      	lsrs	r3, r3, #3
 810b9be:	f003 0303 	and.w	r3, r3, #3
 810b9c2:	4a13      	ldr	r2, [pc, #76]	@ (810ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810b9c4:	fa22 f303 	lsr.w	r3, r2, r3
 810b9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9ca:	e1c2      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9cc:	2300      	movs	r3, #0
 810b9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9d0:	e1bf      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810b9d2:	4b0e      	ldr	r3, [pc, #56]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b9d4:	681b      	ldr	r3, [r3, #0]
 810b9d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b9da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b9de:	d102      	bne.n	810b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810b9e0:	4b0c      	ldr	r3, [pc, #48]	@ (810ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810b9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9e4:	e1b5      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9e6:	2300      	movs	r3, #0
 810b9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9ea:	e1b2      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b9ec:	4b07      	ldr	r3, [pc, #28]	@ (810ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810b9ee:	681b      	ldr	r3, [r3, #0]
 810b9f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b9f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b9f8:	d102      	bne.n	810ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810b9fa:	4b07      	ldr	r3, [pc, #28]	@ (810ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810b9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9fe:	e1a8      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ba00:	2300      	movs	r3, #0
 810ba02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba04:	e1a5      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810ba06:	2300      	movs	r3, #0
 810ba08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba0a:	e1a2      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ba0c:	58024400 	.word	0x58024400
 810ba10:	03d09000 	.word	0x03d09000
 810ba14:	003d0900 	.word	0x003d0900
 810ba18:	017d7840 	.word	0x017d7840
 810ba1c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810ba20:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ba24:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810ba28:	430b      	orrs	r3, r1
 810ba2a:	d173      	bne.n	810bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810ba2c:	4b9c      	ldr	r3, [pc, #624]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810ba2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ba30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810ba34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810ba36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ba3c:	d02f      	beq.n	810ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810ba3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ba44:	d863      	bhi.n	810bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba48:	2b00      	cmp	r3, #0
 810ba4a:	d004      	beq.n	810ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ba52:	d012      	beq.n	810ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810ba54:	e05b      	b.n	810bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ba56:	4b92      	ldr	r3, [pc, #584]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810ba58:	681b      	ldr	r3, [r3, #0]
 810ba5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ba5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810ba62:	d107      	bne.n	810ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ba64:	f107 0318 	add.w	r3, r7, #24
 810ba68:	4618      	mov	r0, r3
 810ba6a:	f000 f991 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ba6e:	69bb      	ldr	r3, [r7, #24]
 810ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ba72:	e16e      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ba74:	2300      	movs	r3, #0
 810ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba78:	e16b      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ba7a:	4b89      	ldr	r3, [pc, #548]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810ba7c:	681b      	ldr	r3, [r3, #0]
 810ba7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ba82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ba86:	d107      	bne.n	810ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ba88:	f107 030c 	add.w	r3, r7, #12
 810ba8c:	4618      	mov	r0, r3
 810ba8e:	f000 fad3 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810ba92:	697b      	ldr	r3, [r7, #20]
 810ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ba96:	e15c      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ba98:	2300      	movs	r3, #0
 810ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba9c:	e159      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810ba9e:	4b80      	ldr	r3, [pc, #512]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810baa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810baa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810baa6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810baa8:	4b7d      	ldr	r3, [pc, #500]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810baaa:	681b      	ldr	r3, [r3, #0]
 810baac:	f003 0304 	and.w	r3, r3, #4
 810bab0:	2b04      	cmp	r3, #4
 810bab2:	d10c      	bne.n	810bace <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810bab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bab6:	2b00      	cmp	r3, #0
 810bab8:	d109      	bne.n	810bace <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810baba:	4b79      	ldr	r3, [pc, #484]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810babc:	681b      	ldr	r3, [r3, #0]
 810babe:	08db      	lsrs	r3, r3, #3
 810bac0:	f003 0303 	and.w	r3, r3, #3
 810bac4:	4a77      	ldr	r2, [pc, #476]	@ (810bca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810bac6:	fa22 f303 	lsr.w	r3, r2, r3
 810baca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bacc:	e01e      	b.n	810bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bace:	4b74      	ldr	r3, [pc, #464]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bad0:	681b      	ldr	r3, [r3, #0]
 810bad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bada:	d106      	bne.n	810baea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810badc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bae2:	d102      	bne.n	810baea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bae4:	4b70      	ldr	r3, [pc, #448]	@ (810bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bae8:	e010      	b.n	810bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810baea:	4b6d      	ldr	r3, [pc, #436]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810baec:	681b      	ldr	r3, [r3, #0]
 810baee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810baf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810baf6:	d106      	bne.n	810bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810baf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bafa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bafe:	d102      	bne.n	810bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bb00:	4b6a      	ldr	r3, [pc, #424]	@ (810bcac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810bb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bb04:	e002      	b.n	810bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bb06:	2300      	movs	r3, #0
 810bb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bb0a:	e122      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bb0c:	e121      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bb0e:	2300      	movs	r3, #0
 810bb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb12:	e11e      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810bb14:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bb18:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810bb1c:	430b      	orrs	r3, r1
 810bb1e:	d133      	bne.n	810bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810bb20:	4b5f      	ldr	r3, [pc, #380]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bb22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bb24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810bb28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bb2c:	2b00      	cmp	r3, #0
 810bb2e:	d004      	beq.n	810bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810bb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bb32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bb36:	d012      	beq.n	810bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810bb38:	e023      	b.n	810bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bb3a:	4b59      	ldr	r3, [pc, #356]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bb3c:	681b      	ldr	r3, [r3, #0]
 810bb3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bb42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bb46:	d107      	bne.n	810bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bb48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bb4c:	4618      	mov	r0, r3
 810bb4e:	f000 fbc7 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb56:	e0fc      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb58:	2300      	movs	r3, #0
 810bb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb5c:	e0f9      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bb5e:	4b50      	ldr	r3, [pc, #320]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bb60:	681b      	ldr	r3, [r3, #0]
 810bb62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bb66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bb6a:	d107      	bne.n	810bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb6c:	f107 0318 	add.w	r3, r7, #24
 810bb70:	4618      	mov	r0, r3
 810bb72:	f000 f90d 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810bb76:	6a3b      	ldr	r3, [r7, #32]
 810bb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb7a:	e0ea      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb7c:	2300      	movs	r3, #0
 810bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb80:	e0e7      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bb82:	2300      	movs	r3, #0
 810bb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb86:	e0e4      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810bb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bb8c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 810bb90:	430b      	orrs	r3, r1
 810bb92:	f040 808d 	bne.w	810bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810bb96:	4b42      	ldr	r3, [pc, #264]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bb98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810bb9a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810bb9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bba6:	d06b      	beq.n	810bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bbae:	d874      	bhi.n	810bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bbb6:	d056      	beq.n	810bc66 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810bbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bbbe:	d86c      	bhi.n	810bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810bbc6:	d03b      	beq.n	810bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810bbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810bbce:	d864      	bhi.n	810bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bbd6:	d021      	beq.n	810bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810bbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bbde:	d85c      	bhi.n	810bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbe2:	2b00      	cmp	r3, #0
 810bbe4:	d004      	beq.n	810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810bbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bbec:	d004      	beq.n	810bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810bbee:	e054      	b.n	810bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810bbf0:	f000 f8b8 	bl	810bd64 <HAL_RCCEx_GetD3PCLK1Freq>
 810bbf4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bbf6:	e0ac      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bbf8:	4b29      	ldr	r3, [pc, #164]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bbfa:	681b      	ldr	r3, [r3, #0]
 810bbfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bc00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bc04:	d107      	bne.n	810bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bc06:	f107 0318 	add.w	r3, r7, #24
 810bc0a:	4618      	mov	r0, r3
 810bc0c:	f000 f8c0 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810bc10:	69fb      	ldr	r3, [r7, #28]
 810bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc14:	e09d      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc16:	2300      	movs	r3, #0
 810bc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc1a:	e09a      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bc1c:	4b20      	ldr	r3, [pc, #128]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bc1e:	681b      	ldr	r3, [r3, #0]
 810bc20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bc24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bc28:	d107      	bne.n	810bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bc2a:	f107 030c 	add.w	r3, r7, #12
 810bc2e:	4618      	mov	r0, r3
 810bc30:	f000 fa02 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810bc34:	693b      	ldr	r3, [r7, #16]
 810bc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc38:	e08b      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc3a:	2300      	movs	r3, #0
 810bc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc3e:	e088      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810bc40:	4b17      	ldr	r3, [pc, #92]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bc42:	681b      	ldr	r3, [r3, #0]
 810bc44:	f003 0304 	and.w	r3, r3, #4
 810bc48:	2b04      	cmp	r3, #4
 810bc4a:	d109      	bne.n	810bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bc4c:	4b14      	ldr	r3, [pc, #80]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bc4e:	681b      	ldr	r3, [r3, #0]
 810bc50:	08db      	lsrs	r3, r3, #3
 810bc52:	f003 0303 	and.w	r3, r3, #3
 810bc56:	4a13      	ldr	r2, [pc, #76]	@ (810bca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810bc58:	fa22 f303 	lsr.w	r3, r2, r3
 810bc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc5e:	e078      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc60:	2300      	movs	r3, #0
 810bc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc64:	e075      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810bc66:	4b0e      	ldr	r3, [pc, #56]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bc68:	681b      	ldr	r3, [r3, #0]
 810bc6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bc6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bc72:	d102      	bne.n	810bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810bc74:	4b0c      	ldr	r3, [pc, #48]	@ (810bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc78:	e06b      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc7a:	2300      	movs	r3, #0
 810bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc7e:	e068      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810bc80:	4b07      	ldr	r3, [pc, #28]	@ (810bca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bc82:	681b      	ldr	r3, [r3, #0]
 810bc84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bc88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bc8c:	d102      	bne.n	810bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810bc8e:	4b07      	ldr	r3, [pc, #28]	@ (810bcac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810bc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc92:	e05e      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc94:	2300      	movs	r3, #0
 810bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc98:	e05b      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810bc9a:	2300      	movs	r3, #0
 810bc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc9e:	e058      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bca0:	58024400 	.word	0x58024400
 810bca4:	03d09000 	.word	0x03d09000
 810bca8:	003d0900 	.word	0x003d0900
 810bcac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810bcb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bcb4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810bcb8:	430b      	orrs	r3, r1
 810bcba:	d148      	bne.n	810bd4e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810bcbc:	4b27      	ldr	r3, [pc, #156]	@ (810bd5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810bcbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bcc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810bcc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bcc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bccc:	d02a      	beq.n	810bd24 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810bcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bcd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bcd4:	d838      	bhi.n	810bd48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810bcd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	d004      	beq.n	810bce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bcde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bce2:	d00d      	beq.n	810bd00 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810bce4:	e030      	b.n	810bd48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810bce6:	4b1d      	ldr	r3, [pc, #116]	@ (810bd5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810bce8:	681b      	ldr	r3, [r3, #0]
 810bcea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bcee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bcf2:	d102      	bne.n	810bcfa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810bcf4:	4b1a      	ldr	r3, [pc, #104]	@ (810bd60 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810bcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bcf8:	e02b      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bcfa:	2300      	movs	r3, #0
 810bcfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcfe:	e028      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bd00:	4b16      	ldr	r3, [pc, #88]	@ (810bd5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810bd02:	681b      	ldr	r3, [r3, #0]
 810bd04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bd08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bd0c:	d107      	bne.n	810bd1e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bd0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bd12:	4618      	mov	r0, r3
 810bd14:	f000 fae4 	bl	810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bd1c:	e019      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bd1e:	2300      	movs	r3, #0
 810bd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd22:	e016      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bd24:	4b0d      	ldr	r3, [pc, #52]	@ (810bd5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810bd26:	681b      	ldr	r3, [r3, #0]
 810bd28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bd2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bd30:	d107      	bne.n	810bd42 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bd32:	f107 0318 	add.w	r3, r7, #24
 810bd36:	4618      	mov	r0, r3
 810bd38:	f000 f82a 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810bd3c:	69fb      	ldr	r3, [r7, #28]
 810bd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bd40:	e007      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bd42:	2300      	movs	r3, #0
 810bd44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd46:	e004      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810bd48:	2300      	movs	r3, #0
 810bd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd4c:	e001      	b.n	810bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810bd4e:	2300      	movs	r3, #0
 810bd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810bd52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810bd54:	4618      	mov	r0, r3
 810bd56:	3740      	adds	r7, #64	@ 0x40
 810bd58:	46bd      	mov	sp, r7
 810bd5a:	bd80      	pop	{r7, pc}
 810bd5c:	58024400 	.word	0x58024400
 810bd60:	017d7840 	.word	0x017d7840

0810bd64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810bd64:	b580      	push	{r7, lr}
 810bd66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810bd68:	f7fd ff94 	bl	8109c94 <HAL_RCC_GetHCLKFreq>
 810bd6c:	4602      	mov	r2, r0
 810bd6e:	4b06      	ldr	r3, [pc, #24]	@ (810bd88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810bd70:	6a1b      	ldr	r3, [r3, #32]
 810bd72:	091b      	lsrs	r3, r3, #4
 810bd74:	f003 0307 	and.w	r3, r3, #7
 810bd78:	4904      	ldr	r1, [pc, #16]	@ (810bd8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810bd7a:	5ccb      	ldrb	r3, [r1, r3]
 810bd7c:	f003 031f 	and.w	r3, r3, #31
 810bd80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810bd84:	4618      	mov	r0, r3
 810bd86:	bd80      	pop	{r7, pc}
 810bd88:	58024400 	.word	0x58024400
 810bd8c:	081288bc 	.word	0x081288bc

0810bd90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810bd90:	b480      	push	{r7}
 810bd92:	b089      	sub	sp, #36	@ 0x24
 810bd94:	af00      	add	r7, sp, #0
 810bd96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810bd98:	4ba1      	ldr	r3, [pc, #644]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bd9c:	f003 0303 	and.w	r3, r3, #3
 810bda0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810bda2:	4b9f      	ldr	r3, [pc, #636]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bda6:	0b1b      	lsrs	r3, r3, #12
 810bda8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810bdac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810bdae:	4b9c      	ldr	r3, [pc, #624]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bdb2:	091b      	lsrs	r3, r3, #4
 810bdb4:	f003 0301 	and.w	r3, r3, #1
 810bdb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810bdba:	4b99      	ldr	r3, [pc, #612]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bdbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810bdbe:	08db      	lsrs	r3, r3, #3
 810bdc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810bdc4:	693a      	ldr	r2, [r7, #16]
 810bdc6:	fb02 f303 	mul.w	r3, r2, r3
 810bdca:	ee07 3a90 	vmov	s15, r3
 810bdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bdd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810bdd6:	697b      	ldr	r3, [r7, #20]
 810bdd8:	2b00      	cmp	r3, #0
 810bdda:	f000 8111 	beq.w	810c000 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810bdde:	69bb      	ldr	r3, [r7, #24]
 810bde0:	2b02      	cmp	r3, #2
 810bde2:	f000 8083 	beq.w	810beec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810bde6:	69bb      	ldr	r3, [r7, #24]
 810bde8:	2b02      	cmp	r3, #2
 810bdea:	f200 80a1 	bhi.w	810bf30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810bdee:	69bb      	ldr	r3, [r7, #24]
 810bdf0:	2b00      	cmp	r3, #0
 810bdf2:	d003      	beq.n	810bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810bdf4:	69bb      	ldr	r3, [r7, #24]
 810bdf6:	2b01      	cmp	r3, #1
 810bdf8:	d056      	beq.n	810bea8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810bdfa:	e099      	b.n	810bf30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bdfc:	4b88      	ldr	r3, [pc, #544]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bdfe:	681b      	ldr	r3, [r3, #0]
 810be00:	f003 0320 	and.w	r3, r3, #32
 810be04:	2b00      	cmp	r3, #0
 810be06:	d02d      	beq.n	810be64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810be08:	4b85      	ldr	r3, [pc, #532]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810be0a:	681b      	ldr	r3, [r3, #0]
 810be0c:	08db      	lsrs	r3, r3, #3
 810be0e:	f003 0303 	and.w	r3, r3, #3
 810be12:	4a84      	ldr	r2, [pc, #528]	@ (810c024 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810be14:	fa22 f303 	lsr.w	r3, r2, r3
 810be18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810be1a:	68bb      	ldr	r3, [r7, #8]
 810be1c:	ee07 3a90 	vmov	s15, r3
 810be20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810be24:	697b      	ldr	r3, [r7, #20]
 810be26:	ee07 3a90 	vmov	s15, r3
 810be2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810be2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810be32:	4b7b      	ldr	r3, [pc, #492]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810be34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810be36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810be3a:	ee07 3a90 	vmov	s15, r3
 810be3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810be42:	ed97 6a03 	vldr	s12, [r7, #12]
 810be46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810c028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810be4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810be4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810be52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810be56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810be5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810be5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810be62:	e087      	b.n	810bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810be64:	697b      	ldr	r3, [r7, #20]
 810be66:	ee07 3a90 	vmov	s15, r3
 810be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810be6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810c02c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810be72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810be76:	4b6a      	ldr	r3, [pc, #424]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810be78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810be7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810be7e:	ee07 3a90 	vmov	s15, r3
 810be82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810be86:	ed97 6a03 	vldr	s12, [r7, #12]
 810be8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810c028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810be8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810be92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810be96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810be9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810be9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810bea6:	e065      	b.n	810bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810bea8:	697b      	ldr	r3, [r7, #20]
 810beaa:	ee07 3a90 	vmov	s15, r3
 810beae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810beb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810c030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810beb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810beba:	4b59      	ldr	r3, [pc, #356]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bec2:	ee07 3a90 	vmov	s15, r3
 810bec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810beca:	ed97 6a03 	vldr	s12, [r7, #12]
 810bece:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810c028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810beda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810beea:	e043      	b.n	810bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810beec:	697b      	ldr	r3, [r7, #20]
 810beee:	ee07 3a90 	vmov	s15, r3
 810bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bef6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810c034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810befa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810befe:	4b48      	ldr	r3, [pc, #288]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bf00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bf06:	ee07 3a90 	vmov	s15, r3
 810bf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bf0e:	ed97 6a03 	vldr	s12, [r7, #12]
 810bf12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810c028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810bf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bf2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810bf2e:	e021      	b.n	810bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810bf30:	697b      	ldr	r3, [r7, #20]
 810bf32:	ee07 3a90 	vmov	s15, r3
 810bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bf3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810c030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810bf3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bf42:	4b37      	ldr	r3, [pc, #220]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bf46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bf4a:	ee07 3a90 	vmov	s15, r3
 810bf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bf52:	ed97 6a03 	vldr	s12, [r7, #12]
 810bf56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810c028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bf62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810bf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bf6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810bf72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810bf74:	4b2a      	ldr	r3, [pc, #168]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bf76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bf78:	0a5b      	lsrs	r3, r3, #9
 810bf7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810bf7e:	ee07 3a90 	vmov	s15, r3
 810bf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bf86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810bf8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bf8e:	edd7 6a07 	vldr	s13, [r7, #28]
 810bf92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bf96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bf9a:	ee17 2a90 	vmov	r2, s15
 810bf9e:	687b      	ldr	r3, [r7, #4]
 810bfa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810bfa2:	4b1f      	ldr	r3, [pc, #124]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bfa6:	0c1b      	lsrs	r3, r3, #16
 810bfa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810bfac:	ee07 3a90 	vmov	s15, r3
 810bfb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bfb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810bfb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bfbc:	edd7 6a07 	vldr	s13, [r7, #28]
 810bfc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bfc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bfc8:	ee17 2a90 	vmov	r2, s15
 810bfcc:	687b      	ldr	r3, [r7, #4]
 810bfce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810bfd0:	4b13      	ldr	r3, [pc, #76]	@ (810c020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bfd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810bfd4:	0e1b      	lsrs	r3, r3, #24
 810bfd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810bfda:	ee07 3a90 	vmov	s15, r3
 810bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bfe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810bfe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bfea:	edd7 6a07 	vldr	s13, [r7, #28]
 810bfee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bff6:	ee17 2a90 	vmov	r2, s15
 810bffa:	687b      	ldr	r3, [r7, #4]
 810bffc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810bffe:	e008      	b.n	810c012 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810c000:	687b      	ldr	r3, [r7, #4]
 810c002:	2200      	movs	r2, #0
 810c004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	2200      	movs	r2, #0
 810c00a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810c00c:	687b      	ldr	r3, [r7, #4]
 810c00e:	2200      	movs	r2, #0
 810c010:	609a      	str	r2, [r3, #8]
}
 810c012:	bf00      	nop
 810c014:	3724      	adds	r7, #36	@ 0x24
 810c016:	46bd      	mov	sp, r7
 810c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c01c:	4770      	bx	lr
 810c01e:	bf00      	nop
 810c020:	58024400 	.word	0x58024400
 810c024:	03d09000 	.word	0x03d09000
 810c028:	46000000 	.word	0x46000000
 810c02c:	4c742400 	.word	0x4c742400
 810c030:	4a742400 	.word	0x4a742400
 810c034:	4bbebc20 	.word	0x4bbebc20

0810c038 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810c038:	b480      	push	{r7}
 810c03a:	b089      	sub	sp, #36	@ 0x24
 810c03c:	af00      	add	r7, sp, #0
 810c03e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c040:	4ba1      	ldr	r3, [pc, #644]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c044:	f003 0303 	and.w	r3, r3, #3
 810c048:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810c04a:	4b9f      	ldr	r3, [pc, #636]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c04e:	0d1b      	lsrs	r3, r3, #20
 810c050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c054:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810c056:	4b9c      	ldr	r3, [pc, #624]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c05a:	0a1b      	lsrs	r3, r3, #8
 810c05c:	f003 0301 	and.w	r3, r3, #1
 810c060:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810c062:	4b99      	ldr	r3, [pc, #612]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810c066:	08db      	lsrs	r3, r3, #3
 810c068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c06c:	693a      	ldr	r2, [r7, #16]
 810c06e:	fb02 f303 	mul.w	r3, r2, r3
 810c072:	ee07 3a90 	vmov	s15, r3
 810c076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c07a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810c07e:	697b      	ldr	r3, [r7, #20]
 810c080:	2b00      	cmp	r3, #0
 810c082:	f000 8111 	beq.w	810c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810c086:	69bb      	ldr	r3, [r7, #24]
 810c088:	2b02      	cmp	r3, #2
 810c08a:	f000 8083 	beq.w	810c194 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810c08e:	69bb      	ldr	r3, [r7, #24]
 810c090:	2b02      	cmp	r3, #2
 810c092:	f200 80a1 	bhi.w	810c1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810c096:	69bb      	ldr	r3, [r7, #24]
 810c098:	2b00      	cmp	r3, #0
 810c09a:	d003      	beq.n	810c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810c09c:	69bb      	ldr	r3, [r7, #24]
 810c09e:	2b01      	cmp	r3, #1
 810c0a0:	d056      	beq.n	810c150 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810c0a2:	e099      	b.n	810c1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c0a4:	4b88      	ldr	r3, [pc, #544]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c0a6:	681b      	ldr	r3, [r3, #0]
 810c0a8:	f003 0320 	and.w	r3, r3, #32
 810c0ac:	2b00      	cmp	r3, #0
 810c0ae:	d02d      	beq.n	810c10c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c0b0:	4b85      	ldr	r3, [pc, #532]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c0b2:	681b      	ldr	r3, [r3, #0]
 810c0b4:	08db      	lsrs	r3, r3, #3
 810c0b6:	f003 0303 	and.w	r3, r3, #3
 810c0ba:	4a84      	ldr	r2, [pc, #528]	@ (810c2cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810c0bc:	fa22 f303 	lsr.w	r3, r2, r3
 810c0c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c0c2:	68bb      	ldr	r3, [r7, #8]
 810c0c4:	ee07 3a90 	vmov	s15, r3
 810c0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c0cc:	697b      	ldr	r3, [r7, #20]
 810c0ce:	ee07 3a90 	vmov	s15, r3
 810c0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c0da:	4b7b      	ldr	r3, [pc, #492]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c0e2:	ee07 3a90 	vmov	s15, r3
 810c0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c0ea:	ed97 6a03 	vldr	s12, [r7, #12]
 810c0ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c0fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c102:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c10a:	e087      	b.n	810c21c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c10c:	697b      	ldr	r3, [r7, #20]
 810c10e:	ee07 3a90 	vmov	s15, r3
 810c112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c116:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810c11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c11e:	4b6a      	ldr	r3, [pc, #424]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c126:	ee07 3a90 	vmov	s15, r3
 810c12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c12e:	ed97 6a03 	vldr	s12, [r7, #12]
 810c132:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c13e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c146:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c14a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c14e:	e065      	b.n	810c21c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c150:	697b      	ldr	r3, [r7, #20]
 810c152:	ee07 3a90 	vmov	s15, r3
 810c156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c15a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810c2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c162:	4b59      	ldr	r3, [pc, #356]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c16a:	ee07 3a90 	vmov	s15, r3
 810c16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c172:	ed97 6a03 	vldr	s12, [r7, #12]
 810c176:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c18e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c192:	e043      	b.n	810c21c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c194:	697b      	ldr	r3, [r7, #20]
 810c196:	ee07 3a90 	vmov	s15, r3
 810c19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c19e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810c2dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810c1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c1a6:	4b48      	ldr	r3, [pc, #288]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c1ae:	ee07 3a90 	vmov	s15, r3
 810c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 810c1ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c1d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c1d6:	e021      	b.n	810c21c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c1d8:	697b      	ldr	r3, [r7, #20]
 810c1da:	ee07 3a90 	vmov	s15, r3
 810c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c1e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810c2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c1ea:	4b37      	ldr	r3, [pc, #220]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c1f2:	ee07 3a90 	vmov	s15, r3
 810c1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 810c1fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c20a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c212:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c21a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810c21c:	4b2a      	ldr	r3, [pc, #168]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c220:	0a5b      	lsrs	r3, r3, #9
 810c222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c226:	ee07 3a90 	vmov	s15, r3
 810c22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c22e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c232:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c236:	edd7 6a07 	vldr	s13, [r7, #28]
 810c23a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c242:	ee17 2a90 	vmov	r2, s15
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810c24a:	4b1f      	ldr	r3, [pc, #124]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c24e:	0c1b      	lsrs	r3, r3, #16
 810c250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c254:	ee07 3a90 	vmov	s15, r3
 810c258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c25c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c260:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c264:	edd7 6a07 	vldr	s13, [r7, #28]
 810c268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c270:	ee17 2a90 	vmov	r2, s15
 810c274:	687b      	ldr	r3, [r7, #4]
 810c276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810c278:	4b13      	ldr	r3, [pc, #76]	@ (810c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c27c:	0e1b      	lsrs	r3, r3, #24
 810c27e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c282:	ee07 3a90 	vmov	s15, r3
 810c286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c28a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c28e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c292:	edd7 6a07 	vldr	s13, [r7, #28]
 810c296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c29a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c29e:	ee17 2a90 	vmov	r2, s15
 810c2a2:	687b      	ldr	r3, [r7, #4]
 810c2a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810c2a6:	e008      	b.n	810c2ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810c2a8:	687b      	ldr	r3, [r7, #4]
 810c2aa:	2200      	movs	r2, #0
 810c2ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810c2ae:	687b      	ldr	r3, [r7, #4]
 810c2b0:	2200      	movs	r2, #0
 810c2b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810c2b4:	687b      	ldr	r3, [r7, #4]
 810c2b6:	2200      	movs	r2, #0
 810c2b8:	609a      	str	r2, [r3, #8]
}
 810c2ba:	bf00      	nop
 810c2bc:	3724      	adds	r7, #36	@ 0x24
 810c2be:	46bd      	mov	sp, r7
 810c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2c4:	4770      	bx	lr
 810c2c6:	bf00      	nop
 810c2c8:	58024400 	.word	0x58024400
 810c2cc:	03d09000 	.word	0x03d09000
 810c2d0:	46000000 	.word	0x46000000
 810c2d4:	4c742400 	.word	0x4c742400
 810c2d8:	4a742400 	.word	0x4a742400
 810c2dc:	4bbebc20 	.word	0x4bbebc20

0810c2e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810c2e0:	b480      	push	{r7}
 810c2e2:	b089      	sub	sp, #36	@ 0x24
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c2e8:	4ba0      	ldr	r3, [pc, #640]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c2ec:	f003 0303 	and.w	r3, r3, #3
 810c2f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810c2f2:	4b9e      	ldr	r3, [pc, #632]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c2f6:	091b      	lsrs	r3, r3, #4
 810c2f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c2fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810c2fe:	4b9b      	ldr	r3, [pc, #620]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c302:	f003 0301 	and.w	r3, r3, #1
 810c306:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810c308:	4b98      	ldr	r3, [pc, #608]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c30c:	08db      	lsrs	r3, r3, #3
 810c30e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c312:	693a      	ldr	r2, [r7, #16]
 810c314:	fb02 f303 	mul.w	r3, r2, r3
 810c318:	ee07 3a90 	vmov	s15, r3
 810c31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c320:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810c324:	697b      	ldr	r3, [r7, #20]
 810c326:	2b00      	cmp	r3, #0
 810c328:	f000 8111 	beq.w	810c54e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810c32c:	69bb      	ldr	r3, [r7, #24]
 810c32e:	2b02      	cmp	r3, #2
 810c330:	f000 8083 	beq.w	810c43a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810c334:	69bb      	ldr	r3, [r7, #24]
 810c336:	2b02      	cmp	r3, #2
 810c338:	f200 80a1 	bhi.w	810c47e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810c33c:	69bb      	ldr	r3, [r7, #24]
 810c33e:	2b00      	cmp	r3, #0
 810c340:	d003      	beq.n	810c34a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810c342:	69bb      	ldr	r3, [r7, #24]
 810c344:	2b01      	cmp	r3, #1
 810c346:	d056      	beq.n	810c3f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810c348:	e099      	b.n	810c47e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c34a:	4b88      	ldr	r3, [pc, #544]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c34c:	681b      	ldr	r3, [r3, #0]
 810c34e:	f003 0320 	and.w	r3, r3, #32
 810c352:	2b00      	cmp	r3, #0
 810c354:	d02d      	beq.n	810c3b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c356:	4b85      	ldr	r3, [pc, #532]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c358:	681b      	ldr	r3, [r3, #0]
 810c35a:	08db      	lsrs	r3, r3, #3
 810c35c:	f003 0303 	and.w	r3, r3, #3
 810c360:	4a83      	ldr	r2, [pc, #524]	@ (810c570 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810c362:	fa22 f303 	lsr.w	r3, r2, r3
 810c366:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c368:	68bb      	ldr	r3, [r7, #8]
 810c36a:	ee07 3a90 	vmov	s15, r3
 810c36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c372:	697b      	ldr	r3, [r7, #20]
 810c374:	ee07 3a90 	vmov	s15, r3
 810c378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c37c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c380:	4b7a      	ldr	r3, [pc, #488]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c388:	ee07 3a90 	vmov	s15, r3
 810c38c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c390:	ed97 6a03 	vldr	s12, [r7, #12]
 810c394:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810c574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c39c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c3a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c3a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c3a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c3ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c3b0:	e087      	b.n	810c4c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c3b2:	697b      	ldr	r3, [r7, #20]
 810c3b4:	ee07 3a90 	vmov	s15, r3
 810c3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c3bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810c578 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c3c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c3c4:	4b69      	ldr	r3, [pc, #420]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c3cc:	ee07 3a90 	vmov	s15, r3
 810c3d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c3d4:	ed97 6a03 	vldr	s12, [r7, #12]
 810c3d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810c574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c3dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c3e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c3e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c3e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c3ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c3f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c3f4:	e065      	b.n	810c4c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c3f6:	697b      	ldr	r3, [r7, #20]
 810c3f8:	ee07 3a90 	vmov	s15, r3
 810c3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c400:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810c57c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810c404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c408:	4b58      	ldr	r3, [pc, #352]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c40a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c410:	ee07 3a90 	vmov	s15, r3
 810c414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c418:	ed97 6a03 	vldr	s12, [r7, #12]
 810c41c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810c574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c42c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c430:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c434:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c438:	e043      	b.n	810c4c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c43a:	697b      	ldr	r3, [r7, #20]
 810c43c:	ee07 3a90 	vmov	s15, r3
 810c440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c444:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810c580 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810c448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c44c:	4b47      	ldr	r3, [pc, #284]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c454:	ee07 3a90 	vmov	s15, r3
 810c458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c45c:	ed97 6a03 	vldr	s12, [r7, #12]
 810c460:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810c574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c46c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c474:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c478:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c47c:	e021      	b.n	810c4c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c47e:	697b      	ldr	r3, [r7, #20]
 810c480:	ee07 3a90 	vmov	s15, r3
 810c484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c488:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810c578 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c48c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c490:	4b36      	ldr	r3, [pc, #216]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c498:	ee07 3a90 	vmov	s15, r3
 810c49c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c4a0:	ed97 6a03 	vldr	s12, [r7, #12]
 810c4a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810c574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c4a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c4ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c4b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c4b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c4b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c4bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c4c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810c4c2:	4b2a      	ldr	r3, [pc, #168]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c4c6:	0a5b      	lsrs	r3, r3, #9
 810c4c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c4cc:	ee07 3a90 	vmov	s15, r3
 810c4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c4d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c4d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c4dc:	edd7 6a07 	vldr	s13, [r7, #28]
 810c4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c4e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c4e8:	ee17 2a90 	vmov	r2, s15
 810c4ec:	687b      	ldr	r3, [r7, #4]
 810c4ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810c4f0:	4b1e      	ldr	r3, [pc, #120]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c4f4:	0c1b      	lsrs	r3, r3, #16
 810c4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c4fa:	ee07 3a90 	vmov	s15, r3
 810c4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c506:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c50a:	edd7 6a07 	vldr	s13, [r7, #28]
 810c50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c516:	ee17 2a90 	vmov	r2, s15
 810c51a:	687b      	ldr	r3, [r7, #4]
 810c51c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810c51e:	4b13      	ldr	r3, [pc, #76]	@ (810c56c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c522:	0e1b      	lsrs	r3, r3, #24
 810c524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c528:	ee07 3a90 	vmov	s15, r3
 810c52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c534:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c538:	edd7 6a07 	vldr	s13, [r7, #28]
 810c53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c544:	ee17 2a90 	vmov	r2, s15
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810c54c:	e008      	b.n	810c560 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810c54e:	687b      	ldr	r3, [r7, #4]
 810c550:	2200      	movs	r2, #0
 810c552:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810c554:	687b      	ldr	r3, [r7, #4]
 810c556:	2200      	movs	r2, #0
 810c558:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810c55a:	687b      	ldr	r3, [r7, #4]
 810c55c:	2200      	movs	r2, #0
 810c55e:	609a      	str	r2, [r3, #8]
}
 810c560:	bf00      	nop
 810c562:	3724      	adds	r7, #36	@ 0x24
 810c564:	46bd      	mov	sp, r7
 810c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c56a:	4770      	bx	lr
 810c56c:	58024400 	.word	0x58024400
 810c570:	03d09000 	.word	0x03d09000
 810c574:	46000000 	.word	0x46000000
 810c578:	4c742400 	.word	0x4c742400
 810c57c:	4a742400 	.word	0x4a742400
 810c580:	4bbebc20 	.word	0x4bbebc20

0810c584 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810c584:	b580      	push	{r7, lr}
 810c586:	b084      	sub	sp, #16
 810c588:	af00      	add	r7, sp, #0
 810c58a:	6078      	str	r0, [r7, #4]
 810c58c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c58e:	2300      	movs	r3, #0
 810c590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c592:	4b53      	ldr	r3, [pc, #332]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c596:	f003 0303 	and.w	r3, r3, #3
 810c59a:	2b03      	cmp	r3, #3
 810c59c:	d101      	bne.n	810c5a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810c59e:	2301      	movs	r3, #1
 810c5a0:	e099      	b.n	810c6d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810c5a2:	4b4f      	ldr	r3, [pc, #316]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c5a4:	681b      	ldr	r3, [r3, #0]
 810c5a6:	4a4e      	ldr	r2, [pc, #312]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c5a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810c5ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c5ae:	f7f6 f9bd 	bl	810292c <HAL_GetTick>
 810c5b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c5b4:	e008      	b.n	810c5c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810c5b6:	f7f6 f9b9 	bl	810292c <HAL_GetTick>
 810c5ba:	4602      	mov	r2, r0
 810c5bc:	68bb      	ldr	r3, [r7, #8]
 810c5be:	1ad3      	subs	r3, r2, r3
 810c5c0:	2b02      	cmp	r3, #2
 810c5c2:	d901      	bls.n	810c5c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810c5c4:	2303      	movs	r3, #3
 810c5c6:	e086      	b.n	810c6d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c5c8:	4b45      	ldr	r3, [pc, #276]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c5ca:	681b      	ldr	r3, [r3, #0]
 810c5cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c5d0:	2b00      	cmp	r3, #0
 810c5d2:	d1f0      	bne.n	810c5b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810c5d4:	4b42      	ldr	r3, [pc, #264]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c5d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810c5dc:	687b      	ldr	r3, [r7, #4]
 810c5de:	681b      	ldr	r3, [r3, #0]
 810c5e0:	031b      	lsls	r3, r3, #12
 810c5e2:	493f      	ldr	r1, [pc, #252]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c5e4:	4313      	orrs	r3, r2
 810c5e6:	628b      	str	r3, [r1, #40]	@ 0x28
 810c5e8:	687b      	ldr	r3, [r7, #4]
 810c5ea:	685b      	ldr	r3, [r3, #4]
 810c5ec:	3b01      	subs	r3, #1
 810c5ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810c5f2:	687b      	ldr	r3, [r7, #4]
 810c5f4:	689b      	ldr	r3, [r3, #8]
 810c5f6:	3b01      	subs	r3, #1
 810c5f8:	025b      	lsls	r3, r3, #9
 810c5fa:	b29b      	uxth	r3, r3
 810c5fc:	431a      	orrs	r2, r3
 810c5fe:	687b      	ldr	r3, [r7, #4]
 810c600:	68db      	ldr	r3, [r3, #12]
 810c602:	3b01      	subs	r3, #1
 810c604:	041b      	lsls	r3, r3, #16
 810c606:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810c60a:	431a      	orrs	r2, r3
 810c60c:	687b      	ldr	r3, [r7, #4]
 810c60e:	691b      	ldr	r3, [r3, #16]
 810c610:	3b01      	subs	r3, #1
 810c612:	061b      	lsls	r3, r3, #24
 810c614:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810c618:	4931      	ldr	r1, [pc, #196]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c61a:	4313      	orrs	r3, r2
 810c61c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810c61e:	4b30      	ldr	r3, [pc, #192]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c622:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810c626:	687b      	ldr	r3, [r7, #4]
 810c628:	695b      	ldr	r3, [r3, #20]
 810c62a:	492d      	ldr	r1, [pc, #180]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c62c:	4313      	orrs	r3, r2
 810c62e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810c630:	4b2b      	ldr	r3, [pc, #172]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c634:	f023 0220 	bic.w	r2, r3, #32
 810c638:	687b      	ldr	r3, [r7, #4]
 810c63a:	699b      	ldr	r3, [r3, #24]
 810c63c:	4928      	ldr	r1, [pc, #160]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c63e:	4313      	orrs	r3, r2
 810c640:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810c642:	4b27      	ldr	r3, [pc, #156]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c646:	4a26      	ldr	r2, [pc, #152]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c648:	f023 0310 	bic.w	r3, r3, #16
 810c64c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810c64e:	4b24      	ldr	r3, [pc, #144]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810c652:	4b24      	ldr	r3, [pc, #144]	@ (810c6e4 <RCCEx_PLL2_Config+0x160>)
 810c654:	4013      	ands	r3, r2
 810c656:	687a      	ldr	r2, [r7, #4]
 810c658:	69d2      	ldr	r2, [r2, #28]
 810c65a:	00d2      	lsls	r2, r2, #3
 810c65c:	4920      	ldr	r1, [pc, #128]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c65e:	4313      	orrs	r3, r2
 810c660:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810c662:	4b1f      	ldr	r3, [pc, #124]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c666:	4a1e      	ldr	r2, [pc, #120]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c668:	f043 0310 	orr.w	r3, r3, #16
 810c66c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810c66e:	683b      	ldr	r3, [r7, #0]
 810c670:	2b00      	cmp	r3, #0
 810c672:	d106      	bne.n	810c682 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810c674:	4b1a      	ldr	r3, [pc, #104]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c678:	4a19      	ldr	r2, [pc, #100]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c67a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810c67e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810c680:	e00f      	b.n	810c6a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810c682:	683b      	ldr	r3, [r7, #0]
 810c684:	2b01      	cmp	r3, #1
 810c686:	d106      	bne.n	810c696 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810c688:	4b15      	ldr	r3, [pc, #84]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c68c:	4a14      	ldr	r2, [pc, #80]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c68e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810c692:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810c694:	e005      	b.n	810c6a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810c696:	4b12      	ldr	r3, [pc, #72]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c69a:	4a11      	ldr	r2, [pc, #68]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c69c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810c6a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810c6a2:	4b0f      	ldr	r3, [pc, #60]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c6a4:	681b      	ldr	r3, [r3, #0]
 810c6a6:	4a0e      	ldr	r2, [pc, #56]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c6a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810c6ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c6ae:	f7f6 f93d 	bl	810292c <HAL_GetTick>
 810c6b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810c6b4:	e008      	b.n	810c6c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810c6b6:	f7f6 f939 	bl	810292c <HAL_GetTick>
 810c6ba:	4602      	mov	r2, r0
 810c6bc:	68bb      	ldr	r3, [r7, #8]
 810c6be:	1ad3      	subs	r3, r2, r3
 810c6c0:	2b02      	cmp	r3, #2
 810c6c2:	d901      	bls.n	810c6c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 810c6c4:	2303      	movs	r3, #3
 810c6c6:	e006      	b.n	810c6d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810c6c8:	4b05      	ldr	r3, [pc, #20]	@ (810c6e0 <RCCEx_PLL2_Config+0x15c>)
 810c6ca:	681b      	ldr	r3, [r3, #0]
 810c6cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c6d0:	2b00      	cmp	r3, #0
 810c6d2:	d0f0      	beq.n	810c6b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 810c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 810c6d6:	4618      	mov	r0, r3
 810c6d8:	3710      	adds	r7, #16
 810c6da:	46bd      	mov	sp, r7
 810c6dc:	bd80      	pop	{r7, pc}
 810c6de:	bf00      	nop
 810c6e0:	58024400 	.word	0x58024400
 810c6e4:	ffff0007 	.word	0xffff0007

0810c6e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810c6e8:	b580      	push	{r7, lr}
 810c6ea:	b084      	sub	sp, #16
 810c6ec:	af00      	add	r7, sp, #0
 810c6ee:	6078      	str	r0, [r7, #4]
 810c6f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c6f2:	2300      	movs	r3, #0
 810c6f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c6f6:	4b53      	ldr	r3, [pc, #332]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c6fa:	f003 0303 	and.w	r3, r3, #3
 810c6fe:	2b03      	cmp	r3, #3
 810c700:	d101      	bne.n	810c706 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810c702:	2301      	movs	r3, #1
 810c704:	e099      	b.n	810c83a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810c706:	4b4f      	ldr	r3, [pc, #316]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c708:	681b      	ldr	r3, [r3, #0]
 810c70a:	4a4e      	ldr	r2, [pc, #312]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c70c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810c710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c712:	f7f6 f90b 	bl	810292c <HAL_GetTick>
 810c716:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810c718:	e008      	b.n	810c72c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810c71a:	f7f6 f907 	bl	810292c <HAL_GetTick>
 810c71e:	4602      	mov	r2, r0
 810c720:	68bb      	ldr	r3, [r7, #8]
 810c722:	1ad3      	subs	r3, r2, r3
 810c724:	2b02      	cmp	r3, #2
 810c726:	d901      	bls.n	810c72c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810c728:	2303      	movs	r3, #3
 810c72a:	e086      	b.n	810c83a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810c72c:	4b45      	ldr	r3, [pc, #276]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c72e:	681b      	ldr	r3, [r3, #0]
 810c730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c734:	2b00      	cmp	r3, #0
 810c736:	d1f0      	bne.n	810c71a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810c738:	4b42      	ldr	r3, [pc, #264]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c73c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810c740:	687b      	ldr	r3, [r7, #4]
 810c742:	681b      	ldr	r3, [r3, #0]
 810c744:	051b      	lsls	r3, r3, #20
 810c746:	493f      	ldr	r1, [pc, #252]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c748:	4313      	orrs	r3, r2
 810c74a:	628b      	str	r3, [r1, #40]	@ 0x28
 810c74c:	687b      	ldr	r3, [r7, #4]
 810c74e:	685b      	ldr	r3, [r3, #4]
 810c750:	3b01      	subs	r3, #1
 810c752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810c756:	687b      	ldr	r3, [r7, #4]
 810c758:	689b      	ldr	r3, [r3, #8]
 810c75a:	3b01      	subs	r3, #1
 810c75c:	025b      	lsls	r3, r3, #9
 810c75e:	b29b      	uxth	r3, r3
 810c760:	431a      	orrs	r2, r3
 810c762:	687b      	ldr	r3, [r7, #4]
 810c764:	68db      	ldr	r3, [r3, #12]
 810c766:	3b01      	subs	r3, #1
 810c768:	041b      	lsls	r3, r3, #16
 810c76a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810c76e:	431a      	orrs	r2, r3
 810c770:	687b      	ldr	r3, [r7, #4]
 810c772:	691b      	ldr	r3, [r3, #16]
 810c774:	3b01      	subs	r3, #1
 810c776:	061b      	lsls	r3, r3, #24
 810c778:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810c77c:	4931      	ldr	r1, [pc, #196]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c77e:	4313      	orrs	r3, r2
 810c780:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810c782:	4b30      	ldr	r3, [pc, #192]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c786:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810c78a:	687b      	ldr	r3, [r7, #4]
 810c78c:	695b      	ldr	r3, [r3, #20]
 810c78e:	492d      	ldr	r1, [pc, #180]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c790:	4313      	orrs	r3, r2
 810c792:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810c794:	4b2b      	ldr	r3, [pc, #172]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c798:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810c79c:	687b      	ldr	r3, [r7, #4]
 810c79e:	699b      	ldr	r3, [r3, #24]
 810c7a0:	4928      	ldr	r1, [pc, #160]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7a2:	4313      	orrs	r3, r2
 810c7a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810c7a6:	4b27      	ldr	r3, [pc, #156]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7aa:	4a26      	ldr	r2, [pc, #152]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810c7b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810c7b2:	4b24      	ldr	r3, [pc, #144]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810c7b6:	4b24      	ldr	r3, [pc, #144]	@ (810c848 <RCCEx_PLL3_Config+0x160>)
 810c7b8:	4013      	ands	r3, r2
 810c7ba:	687a      	ldr	r2, [r7, #4]
 810c7bc:	69d2      	ldr	r2, [r2, #28]
 810c7be:	00d2      	lsls	r2, r2, #3
 810c7c0:	4920      	ldr	r1, [pc, #128]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7c2:	4313      	orrs	r3, r2
 810c7c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810c7c6:	4b1f      	ldr	r3, [pc, #124]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7ca:	4a1e      	ldr	r2, [pc, #120]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810c7d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810c7d2:	683b      	ldr	r3, [r7, #0]
 810c7d4:	2b00      	cmp	r3, #0
 810c7d6:	d106      	bne.n	810c7e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810c7d8:	4b1a      	ldr	r3, [pc, #104]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7dc:	4a19      	ldr	r2, [pc, #100]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810c7e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810c7e4:	e00f      	b.n	810c806 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810c7e6:	683b      	ldr	r3, [r7, #0]
 810c7e8:	2b01      	cmp	r3, #1
 810c7ea:	d106      	bne.n	810c7fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810c7ec:	4b15      	ldr	r3, [pc, #84]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7f0:	4a14      	ldr	r2, [pc, #80]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810c7f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810c7f8:	e005      	b.n	810c806 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810c7fa:	4b12      	ldr	r3, [pc, #72]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7fe:	4a11      	ldr	r2, [pc, #68]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c800:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810c804:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810c806:	4b0f      	ldr	r3, [pc, #60]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c808:	681b      	ldr	r3, [r3, #0]
 810c80a:	4a0e      	ldr	r2, [pc, #56]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c80c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810c810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c812:	f7f6 f88b 	bl	810292c <HAL_GetTick>
 810c816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810c818:	e008      	b.n	810c82c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810c81a:	f7f6 f887 	bl	810292c <HAL_GetTick>
 810c81e:	4602      	mov	r2, r0
 810c820:	68bb      	ldr	r3, [r7, #8]
 810c822:	1ad3      	subs	r3, r2, r3
 810c824:	2b02      	cmp	r3, #2
 810c826:	d901      	bls.n	810c82c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 810c828:	2303      	movs	r3, #3
 810c82a:	e006      	b.n	810c83a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810c82c:	4b05      	ldr	r3, [pc, #20]	@ (810c844 <RCCEx_PLL3_Config+0x15c>)
 810c82e:	681b      	ldr	r3, [r3, #0]
 810c830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c834:	2b00      	cmp	r3, #0
 810c836:	d0f0      	beq.n	810c81a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 810c838:	7bfb      	ldrb	r3, [r7, #15]
}
 810c83a:	4618      	mov	r0, r3
 810c83c:	3710      	adds	r7, #16
 810c83e:	46bd      	mov	sp, r7
 810c840:	bd80      	pop	{r7, pc}
 810c842:	bf00      	nop
 810c844:	58024400 	.word	0x58024400
 810c848:	ffff0007 	.word	0xffff0007

0810c84c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810c84c:	b580      	push	{r7, lr}
 810c84e:	b082      	sub	sp, #8
 810c850:	af00      	add	r7, sp, #0
 810c852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810c854:	687b      	ldr	r3, [r7, #4]
 810c856:	2b00      	cmp	r3, #0
 810c858:	d101      	bne.n	810c85e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810c85a:	2301      	movs	r3, #1
 810c85c:	e049      	b.n	810c8f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810c85e:	687b      	ldr	r3, [r7, #4]
 810c860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810c864:	b2db      	uxtb	r3, r3
 810c866:	2b00      	cmp	r3, #0
 810c868:	d106      	bne.n	810c878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810c86a:	687b      	ldr	r3, [r7, #4]
 810c86c:	2200      	movs	r2, #0
 810c86e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810c872:	6878      	ldr	r0, [r7, #4]
 810c874:	f7f5 fb64 	bl	8101f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810c878:	687b      	ldr	r3, [r7, #4]
 810c87a:	2202      	movs	r2, #2
 810c87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810c880:	687b      	ldr	r3, [r7, #4]
 810c882:	681a      	ldr	r2, [r3, #0]
 810c884:	687b      	ldr	r3, [r7, #4]
 810c886:	3304      	adds	r3, #4
 810c888:	4619      	mov	r1, r3
 810c88a:	4610      	mov	r0, r2
 810c88c:	f000 fad6 	bl	810ce3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810c890:	687b      	ldr	r3, [r7, #4]
 810c892:	2201      	movs	r2, #1
 810c894:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810c898:	687b      	ldr	r3, [r7, #4]
 810c89a:	2201      	movs	r2, #1
 810c89c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810c8a0:	687b      	ldr	r3, [r7, #4]
 810c8a2:	2201      	movs	r2, #1
 810c8a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810c8a8:	687b      	ldr	r3, [r7, #4]
 810c8aa:	2201      	movs	r2, #1
 810c8ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810c8b0:	687b      	ldr	r3, [r7, #4]
 810c8b2:	2201      	movs	r2, #1
 810c8b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810c8b8:	687b      	ldr	r3, [r7, #4]
 810c8ba:	2201      	movs	r2, #1
 810c8bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810c8c0:	687b      	ldr	r3, [r7, #4]
 810c8c2:	2201      	movs	r2, #1
 810c8c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810c8c8:	687b      	ldr	r3, [r7, #4]
 810c8ca:	2201      	movs	r2, #1
 810c8cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810c8d0:	687b      	ldr	r3, [r7, #4]
 810c8d2:	2201      	movs	r2, #1
 810c8d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810c8d8:	687b      	ldr	r3, [r7, #4]
 810c8da:	2201      	movs	r2, #1
 810c8dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810c8e0:	687b      	ldr	r3, [r7, #4]
 810c8e2:	2201      	movs	r2, #1
 810c8e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	2201      	movs	r2, #1
 810c8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810c8f0:	2300      	movs	r3, #0
}
 810c8f2:	4618      	mov	r0, r3
 810c8f4:	3708      	adds	r7, #8
 810c8f6:	46bd      	mov	sp, r7
 810c8f8:	bd80      	pop	{r7, pc}
	...

0810c8fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810c8fc:	b480      	push	{r7}
 810c8fe:	b085      	sub	sp, #20
 810c900:	af00      	add	r7, sp, #0
 810c902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810c904:	687b      	ldr	r3, [r7, #4]
 810c906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810c90a:	b2db      	uxtb	r3, r3
 810c90c:	2b01      	cmp	r3, #1
 810c90e:	d001      	beq.n	810c914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810c910:	2301      	movs	r3, #1
 810c912:	e054      	b.n	810c9be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810c914:	687b      	ldr	r3, [r7, #4]
 810c916:	2202      	movs	r2, #2
 810c918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810c91c:	687b      	ldr	r3, [r7, #4]
 810c91e:	681b      	ldr	r3, [r3, #0]
 810c920:	68da      	ldr	r2, [r3, #12]
 810c922:	687b      	ldr	r3, [r7, #4]
 810c924:	681b      	ldr	r3, [r3, #0]
 810c926:	f042 0201 	orr.w	r2, r2, #1
 810c92a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810c92c:	687b      	ldr	r3, [r7, #4]
 810c92e:	681b      	ldr	r3, [r3, #0]
 810c930:	4a26      	ldr	r2, [pc, #152]	@ (810c9cc <HAL_TIM_Base_Start_IT+0xd0>)
 810c932:	4293      	cmp	r3, r2
 810c934:	d022      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c936:	687b      	ldr	r3, [r7, #4]
 810c938:	681b      	ldr	r3, [r3, #0]
 810c93a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c93e:	d01d      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c940:	687b      	ldr	r3, [r7, #4]
 810c942:	681b      	ldr	r3, [r3, #0]
 810c944:	4a22      	ldr	r2, [pc, #136]	@ (810c9d0 <HAL_TIM_Base_Start_IT+0xd4>)
 810c946:	4293      	cmp	r3, r2
 810c948:	d018      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c94a:	687b      	ldr	r3, [r7, #4]
 810c94c:	681b      	ldr	r3, [r3, #0]
 810c94e:	4a21      	ldr	r2, [pc, #132]	@ (810c9d4 <HAL_TIM_Base_Start_IT+0xd8>)
 810c950:	4293      	cmp	r3, r2
 810c952:	d013      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c954:	687b      	ldr	r3, [r7, #4]
 810c956:	681b      	ldr	r3, [r3, #0]
 810c958:	4a1f      	ldr	r2, [pc, #124]	@ (810c9d8 <HAL_TIM_Base_Start_IT+0xdc>)
 810c95a:	4293      	cmp	r3, r2
 810c95c:	d00e      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c95e:	687b      	ldr	r3, [r7, #4]
 810c960:	681b      	ldr	r3, [r3, #0]
 810c962:	4a1e      	ldr	r2, [pc, #120]	@ (810c9dc <HAL_TIM_Base_Start_IT+0xe0>)
 810c964:	4293      	cmp	r3, r2
 810c966:	d009      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c968:	687b      	ldr	r3, [r7, #4]
 810c96a:	681b      	ldr	r3, [r3, #0]
 810c96c:	4a1c      	ldr	r2, [pc, #112]	@ (810c9e0 <HAL_TIM_Base_Start_IT+0xe4>)
 810c96e:	4293      	cmp	r3, r2
 810c970:	d004      	beq.n	810c97c <HAL_TIM_Base_Start_IT+0x80>
 810c972:	687b      	ldr	r3, [r7, #4]
 810c974:	681b      	ldr	r3, [r3, #0]
 810c976:	4a1b      	ldr	r2, [pc, #108]	@ (810c9e4 <HAL_TIM_Base_Start_IT+0xe8>)
 810c978:	4293      	cmp	r3, r2
 810c97a:	d115      	bne.n	810c9a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810c97c:	687b      	ldr	r3, [r7, #4]
 810c97e:	681b      	ldr	r3, [r3, #0]
 810c980:	689a      	ldr	r2, [r3, #8]
 810c982:	4b19      	ldr	r3, [pc, #100]	@ (810c9e8 <HAL_TIM_Base_Start_IT+0xec>)
 810c984:	4013      	ands	r3, r2
 810c986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810c988:	68fb      	ldr	r3, [r7, #12]
 810c98a:	2b06      	cmp	r3, #6
 810c98c:	d015      	beq.n	810c9ba <HAL_TIM_Base_Start_IT+0xbe>
 810c98e:	68fb      	ldr	r3, [r7, #12]
 810c990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c994:	d011      	beq.n	810c9ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810c996:	687b      	ldr	r3, [r7, #4]
 810c998:	681b      	ldr	r3, [r3, #0]
 810c99a:	681a      	ldr	r2, [r3, #0]
 810c99c:	687b      	ldr	r3, [r7, #4]
 810c99e:	681b      	ldr	r3, [r3, #0]
 810c9a0:	f042 0201 	orr.w	r2, r2, #1
 810c9a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810c9a6:	e008      	b.n	810c9ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810c9a8:	687b      	ldr	r3, [r7, #4]
 810c9aa:	681b      	ldr	r3, [r3, #0]
 810c9ac:	681a      	ldr	r2, [r3, #0]
 810c9ae:	687b      	ldr	r3, [r7, #4]
 810c9b0:	681b      	ldr	r3, [r3, #0]
 810c9b2:	f042 0201 	orr.w	r2, r2, #1
 810c9b6:	601a      	str	r2, [r3, #0]
 810c9b8:	e000      	b.n	810c9bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810c9ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810c9bc:	2300      	movs	r3, #0
}
 810c9be:	4618      	mov	r0, r3
 810c9c0:	3714      	adds	r7, #20
 810c9c2:	46bd      	mov	sp, r7
 810c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9c8:	4770      	bx	lr
 810c9ca:	bf00      	nop
 810c9cc:	40010000 	.word	0x40010000
 810c9d0:	40000400 	.word	0x40000400
 810c9d4:	40000800 	.word	0x40000800
 810c9d8:	40000c00 	.word	0x40000c00
 810c9dc:	40010400 	.word	0x40010400
 810c9e0:	40001800 	.word	0x40001800
 810c9e4:	40014000 	.word	0x40014000
 810c9e8:	00010007 	.word	0x00010007

0810c9ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810c9ec:	b580      	push	{r7, lr}
 810c9ee:	b084      	sub	sp, #16
 810c9f0:	af00      	add	r7, sp, #0
 810c9f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810c9f4:	687b      	ldr	r3, [r7, #4]
 810c9f6:	681b      	ldr	r3, [r3, #0]
 810c9f8:	68db      	ldr	r3, [r3, #12]
 810c9fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810c9fc:	687b      	ldr	r3, [r7, #4]
 810c9fe:	681b      	ldr	r3, [r3, #0]
 810ca00:	691b      	ldr	r3, [r3, #16]
 810ca02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810ca04:	68bb      	ldr	r3, [r7, #8]
 810ca06:	f003 0302 	and.w	r3, r3, #2
 810ca0a:	2b00      	cmp	r3, #0
 810ca0c:	d020      	beq.n	810ca50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810ca0e:	68fb      	ldr	r3, [r7, #12]
 810ca10:	f003 0302 	and.w	r3, r3, #2
 810ca14:	2b00      	cmp	r3, #0
 810ca16:	d01b      	beq.n	810ca50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810ca18:	687b      	ldr	r3, [r7, #4]
 810ca1a:	681b      	ldr	r3, [r3, #0]
 810ca1c:	f06f 0202 	mvn.w	r2, #2
 810ca20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810ca22:	687b      	ldr	r3, [r7, #4]
 810ca24:	2201      	movs	r2, #1
 810ca26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810ca28:	687b      	ldr	r3, [r7, #4]
 810ca2a:	681b      	ldr	r3, [r3, #0]
 810ca2c:	699b      	ldr	r3, [r3, #24]
 810ca2e:	f003 0303 	and.w	r3, r3, #3
 810ca32:	2b00      	cmp	r3, #0
 810ca34:	d003      	beq.n	810ca3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810ca36:	6878      	ldr	r0, [r7, #4]
 810ca38:	f000 f9e2 	bl	810ce00 <HAL_TIM_IC_CaptureCallback>
 810ca3c:	e005      	b.n	810ca4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810ca3e:	6878      	ldr	r0, [r7, #4]
 810ca40:	f000 f9d4 	bl	810cdec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810ca44:	6878      	ldr	r0, [r7, #4]
 810ca46:	f000 f9e5 	bl	810ce14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810ca4a:	687b      	ldr	r3, [r7, #4]
 810ca4c:	2200      	movs	r2, #0
 810ca4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810ca50:	68bb      	ldr	r3, [r7, #8]
 810ca52:	f003 0304 	and.w	r3, r3, #4
 810ca56:	2b00      	cmp	r3, #0
 810ca58:	d020      	beq.n	810ca9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810ca5a:	68fb      	ldr	r3, [r7, #12]
 810ca5c:	f003 0304 	and.w	r3, r3, #4
 810ca60:	2b00      	cmp	r3, #0
 810ca62:	d01b      	beq.n	810ca9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810ca64:	687b      	ldr	r3, [r7, #4]
 810ca66:	681b      	ldr	r3, [r3, #0]
 810ca68:	f06f 0204 	mvn.w	r2, #4
 810ca6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810ca6e:	687b      	ldr	r3, [r7, #4]
 810ca70:	2202      	movs	r2, #2
 810ca72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810ca74:	687b      	ldr	r3, [r7, #4]
 810ca76:	681b      	ldr	r3, [r3, #0]
 810ca78:	699b      	ldr	r3, [r3, #24]
 810ca7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810ca7e:	2b00      	cmp	r3, #0
 810ca80:	d003      	beq.n	810ca8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810ca82:	6878      	ldr	r0, [r7, #4]
 810ca84:	f000 f9bc 	bl	810ce00 <HAL_TIM_IC_CaptureCallback>
 810ca88:	e005      	b.n	810ca96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810ca8a:	6878      	ldr	r0, [r7, #4]
 810ca8c:	f000 f9ae 	bl	810cdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810ca90:	6878      	ldr	r0, [r7, #4]
 810ca92:	f000 f9bf 	bl	810ce14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810ca96:	687b      	ldr	r3, [r7, #4]
 810ca98:	2200      	movs	r2, #0
 810ca9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810ca9c:	68bb      	ldr	r3, [r7, #8]
 810ca9e:	f003 0308 	and.w	r3, r3, #8
 810caa2:	2b00      	cmp	r3, #0
 810caa4:	d020      	beq.n	810cae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810caa6:	68fb      	ldr	r3, [r7, #12]
 810caa8:	f003 0308 	and.w	r3, r3, #8
 810caac:	2b00      	cmp	r3, #0
 810caae:	d01b      	beq.n	810cae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810cab0:	687b      	ldr	r3, [r7, #4]
 810cab2:	681b      	ldr	r3, [r3, #0]
 810cab4:	f06f 0208 	mvn.w	r2, #8
 810cab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810caba:	687b      	ldr	r3, [r7, #4]
 810cabc:	2204      	movs	r2, #4
 810cabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810cac0:	687b      	ldr	r3, [r7, #4]
 810cac2:	681b      	ldr	r3, [r3, #0]
 810cac4:	69db      	ldr	r3, [r3, #28]
 810cac6:	f003 0303 	and.w	r3, r3, #3
 810caca:	2b00      	cmp	r3, #0
 810cacc:	d003      	beq.n	810cad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810cace:	6878      	ldr	r0, [r7, #4]
 810cad0:	f000 f996 	bl	810ce00 <HAL_TIM_IC_CaptureCallback>
 810cad4:	e005      	b.n	810cae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810cad6:	6878      	ldr	r0, [r7, #4]
 810cad8:	f000 f988 	bl	810cdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810cadc:	6878      	ldr	r0, [r7, #4]
 810cade:	f000 f999 	bl	810ce14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810cae2:	687b      	ldr	r3, [r7, #4]
 810cae4:	2200      	movs	r2, #0
 810cae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810cae8:	68bb      	ldr	r3, [r7, #8]
 810caea:	f003 0310 	and.w	r3, r3, #16
 810caee:	2b00      	cmp	r3, #0
 810caf0:	d020      	beq.n	810cb34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810caf2:	68fb      	ldr	r3, [r7, #12]
 810caf4:	f003 0310 	and.w	r3, r3, #16
 810caf8:	2b00      	cmp	r3, #0
 810cafa:	d01b      	beq.n	810cb34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810cafc:	687b      	ldr	r3, [r7, #4]
 810cafe:	681b      	ldr	r3, [r3, #0]
 810cb00:	f06f 0210 	mvn.w	r2, #16
 810cb04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810cb06:	687b      	ldr	r3, [r7, #4]
 810cb08:	2208      	movs	r2, #8
 810cb0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810cb0c:	687b      	ldr	r3, [r7, #4]
 810cb0e:	681b      	ldr	r3, [r3, #0]
 810cb10:	69db      	ldr	r3, [r3, #28]
 810cb12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810cb16:	2b00      	cmp	r3, #0
 810cb18:	d003      	beq.n	810cb22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810cb1a:	6878      	ldr	r0, [r7, #4]
 810cb1c:	f000 f970 	bl	810ce00 <HAL_TIM_IC_CaptureCallback>
 810cb20:	e005      	b.n	810cb2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810cb22:	6878      	ldr	r0, [r7, #4]
 810cb24:	f000 f962 	bl	810cdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810cb28:	6878      	ldr	r0, [r7, #4]
 810cb2a:	f000 f973 	bl	810ce14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810cb2e:	687b      	ldr	r3, [r7, #4]
 810cb30:	2200      	movs	r2, #0
 810cb32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810cb34:	68bb      	ldr	r3, [r7, #8]
 810cb36:	f003 0301 	and.w	r3, r3, #1
 810cb3a:	2b00      	cmp	r3, #0
 810cb3c:	d00c      	beq.n	810cb58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810cb3e:	68fb      	ldr	r3, [r7, #12]
 810cb40:	f003 0301 	and.w	r3, r3, #1
 810cb44:	2b00      	cmp	r3, #0
 810cb46:	d007      	beq.n	810cb58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810cb48:	687b      	ldr	r3, [r7, #4]
 810cb4a:	681b      	ldr	r3, [r3, #0]
 810cb4c:	f06f 0201 	mvn.w	r2, #1
 810cb50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810cb52:	6878      	ldr	r0, [r7, #4]
 810cb54:	f7f5 f8d2 	bl	8101cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810cb58:	68bb      	ldr	r3, [r7, #8]
 810cb5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cb5e:	2b00      	cmp	r3, #0
 810cb60:	d104      	bne.n	810cb6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810cb62:	68bb      	ldr	r3, [r7, #8]
 810cb64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810cb68:	2b00      	cmp	r3, #0
 810cb6a:	d00c      	beq.n	810cb86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810cb6c:	68fb      	ldr	r3, [r7, #12]
 810cb6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cb72:	2b00      	cmp	r3, #0
 810cb74:	d007      	beq.n	810cb86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810cb76:	687b      	ldr	r3, [r7, #4]
 810cb78:	681b      	ldr	r3, [r3, #0]
 810cb7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810cb7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810cb80:	6878      	ldr	r0, [r7, #4]
 810cb82:	f000 fb37 	bl	810d1f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810cb86:	68bb      	ldr	r3, [r7, #8]
 810cb88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810cb8c:	2b00      	cmp	r3, #0
 810cb8e:	d00c      	beq.n	810cbaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810cb90:	68fb      	ldr	r3, [r7, #12]
 810cb92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cb96:	2b00      	cmp	r3, #0
 810cb98:	d007      	beq.n	810cbaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810cb9a:	687b      	ldr	r3, [r7, #4]
 810cb9c:	681b      	ldr	r3, [r3, #0]
 810cb9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810cba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810cba4:	6878      	ldr	r0, [r7, #4]
 810cba6:	f000 fb2f 	bl	810d208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810cbaa:	68bb      	ldr	r3, [r7, #8]
 810cbac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cbb0:	2b00      	cmp	r3, #0
 810cbb2:	d00c      	beq.n	810cbce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810cbb4:	68fb      	ldr	r3, [r7, #12]
 810cbb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cbba:	2b00      	cmp	r3, #0
 810cbbc:	d007      	beq.n	810cbce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810cbbe:	687b      	ldr	r3, [r7, #4]
 810cbc0:	681b      	ldr	r3, [r3, #0]
 810cbc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810cbc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810cbc8:	6878      	ldr	r0, [r7, #4]
 810cbca:	f000 f92d 	bl	810ce28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810cbce:	68bb      	ldr	r3, [r7, #8]
 810cbd0:	f003 0320 	and.w	r3, r3, #32
 810cbd4:	2b00      	cmp	r3, #0
 810cbd6:	d00c      	beq.n	810cbf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810cbd8:	68fb      	ldr	r3, [r7, #12]
 810cbda:	f003 0320 	and.w	r3, r3, #32
 810cbde:	2b00      	cmp	r3, #0
 810cbe0:	d007      	beq.n	810cbf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810cbe2:	687b      	ldr	r3, [r7, #4]
 810cbe4:	681b      	ldr	r3, [r3, #0]
 810cbe6:	f06f 0220 	mvn.w	r2, #32
 810cbea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810cbec:	6878      	ldr	r0, [r7, #4]
 810cbee:	f000 faf7 	bl	810d1e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810cbf2:	bf00      	nop
 810cbf4:	3710      	adds	r7, #16
 810cbf6:	46bd      	mov	sp, r7
 810cbf8:	bd80      	pop	{r7, pc}
	...

0810cbfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810cbfc:	b580      	push	{r7, lr}
 810cbfe:	b084      	sub	sp, #16
 810cc00:	af00      	add	r7, sp, #0
 810cc02:	6078      	str	r0, [r7, #4]
 810cc04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810cc06:	2300      	movs	r3, #0
 810cc08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810cc0a:	687b      	ldr	r3, [r7, #4]
 810cc0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810cc10:	2b01      	cmp	r3, #1
 810cc12:	d101      	bne.n	810cc18 <HAL_TIM_ConfigClockSource+0x1c>
 810cc14:	2302      	movs	r3, #2
 810cc16:	e0dc      	b.n	810cdd2 <HAL_TIM_ConfigClockSource+0x1d6>
 810cc18:	687b      	ldr	r3, [r7, #4]
 810cc1a:	2201      	movs	r2, #1
 810cc1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810cc20:	687b      	ldr	r3, [r7, #4]
 810cc22:	2202      	movs	r2, #2
 810cc24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810cc28:	687b      	ldr	r3, [r7, #4]
 810cc2a:	681b      	ldr	r3, [r3, #0]
 810cc2c:	689b      	ldr	r3, [r3, #8]
 810cc2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810cc30:	68ba      	ldr	r2, [r7, #8]
 810cc32:	4b6a      	ldr	r3, [pc, #424]	@ (810cddc <HAL_TIM_ConfigClockSource+0x1e0>)
 810cc34:	4013      	ands	r3, r2
 810cc36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810cc38:	68bb      	ldr	r3, [r7, #8]
 810cc3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810cc3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810cc40:	687b      	ldr	r3, [r7, #4]
 810cc42:	681b      	ldr	r3, [r3, #0]
 810cc44:	68ba      	ldr	r2, [r7, #8]
 810cc46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810cc48:	683b      	ldr	r3, [r7, #0]
 810cc4a:	681b      	ldr	r3, [r3, #0]
 810cc4c:	4a64      	ldr	r2, [pc, #400]	@ (810cde0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810cc4e:	4293      	cmp	r3, r2
 810cc50:	f000 80a9 	beq.w	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810cc54:	4a62      	ldr	r2, [pc, #392]	@ (810cde0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810cc56:	4293      	cmp	r3, r2
 810cc58:	f200 80ae 	bhi.w	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cc5c:	4a61      	ldr	r2, [pc, #388]	@ (810cde4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810cc5e:	4293      	cmp	r3, r2
 810cc60:	f000 80a1 	beq.w	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810cc64:	4a5f      	ldr	r2, [pc, #380]	@ (810cde4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810cc66:	4293      	cmp	r3, r2
 810cc68:	f200 80a6 	bhi.w	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cc6c:	4a5e      	ldr	r2, [pc, #376]	@ (810cde8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810cc6e:	4293      	cmp	r3, r2
 810cc70:	f000 8099 	beq.w	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810cc74:	4a5c      	ldr	r2, [pc, #368]	@ (810cde8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810cc76:	4293      	cmp	r3, r2
 810cc78:	f200 809e 	bhi.w	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cc7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810cc80:	f000 8091 	beq.w	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810cc84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810cc88:	f200 8096 	bhi.w	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cc8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810cc90:	f000 8089 	beq.w	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810cc94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810cc98:	f200 808e 	bhi.w	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cc9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810cca0:	d03e      	beq.n	810cd20 <HAL_TIM_ConfigClockSource+0x124>
 810cca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810cca6:	f200 8087 	bhi.w	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810ccaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ccae:	f000 8086 	beq.w	810cdbe <HAL_TIM_ConfigClockSource+0x1c2>
 810ccb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ccb6:	d87f      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810ccb8:	2b70      	cmp	r3, #112	@ 0x70
 810ccba:	d01a      	beq.n	810ccf2 <HAL_TIM_ConfigClockSource+0xf6>
 810ccbc:	2b70      	cmp	r3, #112	@ 0x70
 810ccbe:	d87b      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810ccc0:	2b60      	cmp	r3, #96	@ 0x60
 810ccc2:	d050      	beq.n	810cd66 <HAL_TIM_ConfigClockSource+0x16a>
 810ccc4:	2b60      	cmp	r3, #96	@ 0x60
 810ccc6:	d877      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810ccc8:	2b50      	cmp	r3, #80	@ 0x50
 810ccca:	d03c      	beq.n	810cd46 <HAL_TIM_ConfigClockSource+0x14a>
 810cccc:	2b50      	cmp	r3, #80	@ 0x50
 810ccce:	d873      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810ccd0:	2b40      	cmp	r3, #64	@ 0x40
 810ccd2:	d058      	beq.n	810cd86 <HAL_TIM_ConfigClockSource+0x18a>
 810ccd4:	2b40      	cmp	r3, #64	@ 0x40
 810ccd6:	d86f      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810ccd8:	2b30      	cmp	r3, #48	@ 0x30
 810ccda:	d064      	beq.n	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810ccdc:	2b30      	cmp	r3, #48	@ 0x30
 810ccde:	d86b      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cce0:	2b20      	cmp	r3, #32
 810cce2:	d060      	beq.n	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810cce4:	2b20      	cmp	r3, #32
 810cce6:	d867      	bhi.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
 810cce8:	2b00      	cmp	r3, #0
 810ccea:	d05c      	beq.n	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810ccec:	2b10      	cmp	r3, #16
 810ccee:	d05a      	beq.n	810cda6 <HAL_TIM_ConfigClockSource+0x1aa>
 810ccf0:	e062      	b.n	810cdb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810ccf2:	687b      	ldr	r3, [r7, #4]
 810ccf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810ccf6:	683b      	ldr	r3, [r7, #0]
 810ccf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810ccfa:	683b      	ldr	r3, [r7, #0]
 810ccfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810ccfe:	683b      	ldr	r3, [r7, #0]
 810cd00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810cd02:	f000 f9bf 	bl	810d084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810cd06:	687b      	ldr	r3, [r7, #4]
 810cd08:	681b      	ldr	r3, [r3, #0]
 810cd0a:	689b      	ldr	r3, [r3, #8]
 810cd0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810cd0e:	68bb      	ldr	r3, [r7, #8]
 810cd10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810cd14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810cd16:	687b      	ldr	r3, [r7, #4]
 810cd18:	681b      	ldr	r3, [r3, #0]
 810cd1a:	68ba      	ldr	r2, [r7, #8]
 810cd1c:	609a      	str	r2, [r3, #8]
      break;
 810cd1e:	e04f      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810cd20:	687b      	ldr	r3, [r7, #4]
 810cd22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810cd24:	683b      	ldr	r3, [r7, #0]
 810cd26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810cd28:	683b      	ldr	r3, [r7, #0]
 810cd2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810cd2c:	683b      	ldr	r3, [r7, #0]
 810cd2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810cd30:	f000 f9a8 	bl	810d084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810cd34:	687b      	ldr	r3, [r7, #4]
 810cd36:	681b      	ldr	r3, [r3, #0]
 810cd38:	689a      	ldr	r2, [r3, #8]
 810cd3a:	687b      	ldr	r3, [r7, #4]
 810cd3c:	681b      	ldr	r3, [r3, #0]
 810cd3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810cd42:	609a      	str	r2, [r3, #8]
      break;
 810cd44:	e03c      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810cd46:	687b      	ldr	r3, [r7, #4]
 810cd48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810cd4a:	683b      	ldr	r3, [r7, #0]
 810cd4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810cd4e:	683b      	ldr	r3, [r7, #0]
 810cd50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810cd52:	461a      	mov	r2, r3
 810cd54:	f000 f918 	bl	810cf88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810cd58:	687b      	ldr	r3, [r7, #4]
 810cd5a:	681b      	ldr	r3, [r3, #0]
 810cd5c:	2150      	movs	r1, #80	@ 0x50
 810cd5e:	4618      	mov	r0, r3
 810cd60:	f000 f972 	bl	810d048 <TIM_ITRx_SetConfig>
      break;
 810cd64:	e02c      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810cd66:	687b      	ldr	r3, [r7, #4]
 810cd68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810cd6a:	683b      	ldr	r3, [r7, #0]
 810cd6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810cd6e:	683b      	ldr	r3, [r7, #0]
 810cd70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810cd72:	461a      	mov	r2, r3
 810cd74:	f000 f937 	bl	810cfe6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810cd78:	687b      	ldr	r3, [r7, #4]
 810cd7a:	681b      	ldr	r3, [r3, #0]
 810cd7c:	2160      	movs	r1, #96	@ 0x60
 810cd7e:	4618      	mov	r0, r3
 810cd80:	f000 f962 	bl	810d048 <TIM_ITRx_SetConfig>
      break;
 810cd84:	e01c      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810cd86:	687b      	ldr	r3, [r7, #4]
 810cd88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810cd8a:	683b      	ldr	r3, [r7, #0]
 810cd8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810cd8e:	683b      	ldr	r3, [r7, #0]
 810cd90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810cd92:	461a      	mov	r2, r3
 810cd94:	f000 f8f8 	bl	810cf88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810cd98:	687b      	ldr	r3, [r7, #4]
 810cd9a:	681b      	ldr	r3, [r3, #0]
 810cd9c:	2140      	movs	r1, #64	@ 0x40
 810cd9e:	4618      	mov	r0, r3
 810cda0:	f000 f952 	bl	810d048 <TIM_ITRx_SetConfig>
      break;
 810cda4:	e00c      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810cda6:	687b      	ldr	r3, [r7, #4]
 810cda8:	681a      	ldr	r2, [r3, #0]
 810cdaa:	683b      	ldr	r3, [r7, #0]
 810cdac:	681b      	ldr	r3, [r3, #0]
 810cdae:	4619      	mov	r1, r3
 810cdb0:	4610      	mov	r0, r2
 810cdb2:	f000 f949 	bl	810d048 <TIM_ITRx_SetConfig>
      break;
 810cdb6:	e003      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 810cdb8:	2301      	movs	r3, #1
 810cdba:	73fb      	strb	r3, [r7, #15]
      break;
 810cdbc:	e000      	b.n	810cdc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 810cdbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810cdc0:	687b      	ldr	r3, [r7, #4]
 810cdc2:	2201      	movs	r2, #1
 810cdc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810cdc8:	687b      	ldr	r3, [r7, #4]
 810cdca:	2200      	movs	r2, #0
 810cdcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810cdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 810cdd2:	4618      	mov	r0, r3
 810cdd4:	3710      	adds	r7, #16
 810cdd6:	46bd      	mov	sp, r7
 810cdd8:	bd80      	pop	{r7, pc}
 810cdda:	bf00      	nop
 810cddc:	ffceff88 	.word	0xffceff88
 810cde0:	00100040 	.word	0x00100040
 810cde4:	00100030 	.word	0x00100030
 810cde8:	00100020 	.word	0x00100020

0810cdec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810cdec:	b480      	push	{r7}
 810cdee:	b083      	sub	sp, #12
 810cdf0:	af00      	add	r7, sp, #0
 810cdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810cdf4:	bf00      	nop
 810cdf6:	370c      	adds	r7, #12
 810cdf8:	46bd      	mov	sp, r7
 810cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdfe:	4770      	bx	lr

0810ce00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810ce00:	b480      	push	{r7}
 810ce02:	b083      	sub	sp, #12
 810ce04:	af00      	add	r7, sp, #0
 810ce06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810ce08:	bf00      	nop
 810ce0a:	370c      	adds	r7, #12
 810ce0c:	46bd      	mov	sp, r7
 810ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce12:	4770      	bx	lr

0810ce14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810ce14:	b480      	push	{r7}
 810ce16:	b083      	sub	sp, #12
 810ce18:	af00      	add	r7, sp, #0
 810ce1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810ce1c:	bf00      	nop
 810ce1e:	370c      	adds	r7, #12
 810ce20:	46bd      	mov	sp, r7
 810ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce26:	4770      	bx	lr

0810ce28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810ce28:	b480      	push	{r7}
 810ce2a:	b083      	sub	sp, #12
 810ce2c:	af00      	add	r7, sp, #0
 810ce2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810ce30:	bf00      	nop
 810ce32:	370c      	adds	r7, #12
 810ce34:	46bd      	mov	sp, r7
 810ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce3a:	4770      	bx	lr

0810ce3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810ce3c:	b480      	push	{r7}
 810ce3e:	b085      	sub	sp, #20
 810ce40:	af00      	add	r7, sp, #0
 810ce42:	6078      	str	r0, [r7, #4]
 810ce44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810ce46:	687b      	ldr	r3, [r7, #4]
 810ce48:	681b      	ldr	r3, [r3, #0]
 810ce4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810ce4c:	687b      	ldr	r3, [r7, #4]
 810ce4e:	4a46      	ldr	r2, [pc, #280]	@ (810cf68 <TIM_Base_SetConfig+0x12c>)
 810ce50:	4293      	cmp	r3, r2
 810ce52:	d013      	beq.n	810ce7c <TIM_Base_SetConfig+0x40>
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ce5a:	d00f      	beq.n	810ce7c <TIM_Base_SetConfig+0x40>
 810ce5c:	687b      	ldr	r3, [r7, #4]
 810ce5e:	4a43      	ldr	r2, [pc, #268]	@ (810cf6c <TIM_Base_SetConfig+0x130>)
 810ce60:	4293      	cmp	r3, r2
 810ce62:	d00b      	beq.n	810ce7c <TIM_Base_SetConfig+0x40>
 810ce64:	687b      	ldr	r3, [r7, #4]
 810ce66:	4a42      	ldr	r2, [pc, #264]	@ (810cf70 <TIM_Base_SetConfig+0x134>)
 810ce68:	4293      	cmp	r3, r2
 810ce6a:	d007      	beq.n	810ce7c <TIM_Base_SetConfig+0x40>
 810ce6c:	687b      	ldr	r3, [r7, #4]
 810ce6e:	4a41      	ldr	r2, [pc, #260]	@ (810cf74 <TIM_Base_SetConfig+0x138>)
 810ce70:	4293      	cmp	r3, r2
 810ce72:	d003      	beq.n	810ce7c <TIM_Base_SetConfig+0x40>
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	4a40      	ldr	r2, [pc, #256]	@ (810cf78 <TIM_Base_SetConfig+0x13c>)
 810ce78:	4293      	cmp	r3, r2
 810ce7a:	d108      	bne.n	810ce8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810ce7c:	68fb      	ldr	r3, [r7, #12]
 810ce7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ce82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810ce84:	683b      	ldr	r3, [r7, #0]
 810ce86:	685b      	ldr	r3, [r3, #4]
 810ce88:	68fa      	ldr	r2, [r7, #12]
 810ce8a:	4313      	orrs	r3, r2
 810ce8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810ce8e:	687b      	ldr	r3, [r7, #4]
 810ce90:	4a35      	ldr	r2, [pc, #212]	@ (810cf68 <TIM_Base_SetConfig+0x12c>)
 810ce92:	4293      	cmp	r3, r2
 810ce94:	d01f      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810ce96:	687b      	ldr	r3, [r7, #4]
 810ce98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ce9c:	d01b      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810ce9e:	687b      	ldr	r3, [r7, #4]
 810cea0:	4a32      	ldr	r2, [pc, #200]	@ (810cf6c <TIM_Base_SetConfig+0x130>)
 810cea2:	4293      	cmp	r3, r2
 810cea4:	d017      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810cea6:	687b      	ldr	r3, [r7, #4]
 810cea8:	4a31      	ldr	r2, [pc, #196]	@ (810cf70 <TIM_Base_SetConfig+0x134>)
 810ceaa:	4293      	cmp	r3, r2
 810ceac:	d013      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810ceae:	687b      	ldr	r3, [r7, #4]
 810ceb0:	4a30      	ldr	r2, [pc, #192]	@ (810cf74 <TIM_Base_SetConfig+0x138>)
 810ceb2:	4293      	cmp	r3, r2
 810ceb4:	d00f      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810ceb6:	687b      	ldr	r3, [r7, #4]
 810ceb8:	4a2f      	ldr	r2, [pc, #188]	@ (810cf78 <TIM_Base_SetConfig+0x13c>)
 810ceba:	4293      	cmp	r3, r2
 810cebc:	d00b      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810cebe:	687b      	ldr	r3, [r7, #4]
 810cec0:	4a2e      	ldr	r2, [pc, #184]	@ (810cf7c <TIM_Base_SetConfig+0x140>)
 810cec2:	4293      	cmp	r3, r2
 810cec4:	d007      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810cec6:	687b      	ldr	r3, [r7, #4]
 810cec8:	4a2d      	ldr	r2, [pc, #180]	@ (810cf80 <TIM_Base_SetConfig+0x144>)
 810ceca:	4293      	cmp	r3, r2
 810cecc:	d003      	beq.n	810ced6 <TIM_Base_SetConfig+0x9a>
 810cece:	687b      	ldr	r3, [r7, #4]
 810ced0:	4a2c      	ldr	r2, [pc, #176]	@ (810cf84 <TIM_Base_SetConfig+0x148>)
 810ced2:	4293      	cmp	r3, r2
 810ced4:	d108      	bne.n	810cee8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810ced6:	68fb      	ldr	r3, [r7, #12]
 810ced8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810cedc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810cede:	683b      	ldr	r3, [r7, #0]
 810cee0:	68db      	ldr	r3, [r3, #12]
 810cee2:	68fa      	ldr	r2, [r7, #12]
 810cee4:	4313      	orrs	r3, r2
 810cee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810cee8:	68fb      	ldr	r3, [r7, #12]
 810ceea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810ceee:	683b      	ldr	r3, [r7, #0]
 810cef0:	695b      	ldr	r3, [r3, #20]
 810cef2:	4313      	orrs	r3, r2
 810cef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810cef6:	687b      	ldr	r3, [r7, #4]
 810cef8:	68fa      	ldr	r2, [r7, #12]
 810cefa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810cefc:	683b      	ldr	r3, [r7, #0]
 810cefe:	689a      	ldr	r2, [r3, #8]
 810cf00:	687b      	ldr	r3, [r7, #4]
 810cf02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810cf04:	683b      	ldr	r3, [r7, #0]
 810cf06:	681a      	ldr	r2, [r3, #0]
 810cf08:	687b      	ldr	r3, [r7, #4]
 810cf0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810cf0c:	687b      	ldr	r3, [r7, #4]
 810cf0e:	4a16      	ldr	r2, [pc, #88]	@ (810cf68 <TIM_Base_SetConfig+0x12c>)
 810cf10:	4293      	cmp	r3, r2
 810cf12:	d00f      	beq.n	810cf34 <TIM_Base_SetConfig+0xf8>
 810cf14:	687b      	ldr	r3, [r7, #4]
 810cf16:	4a18      	ldr	r2, [pc, #96]	@ (810cf78 <TIM_Base_SetConfig+0x13c>)
 810cf18:	4293      	cmp	r3, r2
 810cf1a:	d00b      	beq.n	810cf34 <TIM_Base_SetConfig+0xf8>
 810cf1c:	687b      	ldr	r3, [r7, #4]
 810cf1e:	4a17      	ldr	r2, [pc, #92]	@ (810cf7c <TIM_Base_SetConfig+0x140>)
 810cf20:	4293      	cmp	r3, r2
 810cf22:	d007      	beq.n	810cf34 <TIM_Base_SetConfig+0xf8>
 810cf24:	687b      	ldr	r3, [r7, #4]
 810cf26:	4a16      	ldr	r2, [pc, #88]	@ (810cf80 <TIM_Base_SetConfig+0x144>)
 810cf28:	4293      	cmp	r3, r2
 810cf2a:	d003      	beq.n	810cf34 <TIM_Base_SetConfig+0xf8>
 810cf2c:	687b      	ldr	r3, [r7, #4]
 810cf2e:	4a15      	ldr	r2, [pc, #84]	@ (810cf84 <TIM_Base_SetConfig+0x148>)
 810cf30:	4293      	cmp	r3, r2
 810cf32:	d103      	bne.n	810cf3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810cf34:	683b      	ldr	r3, [r7, #0]
 810cf36:	691a      	ldr	r2, [r3, #16]
 810cf38:	687b      	ldr	r3, [r7, #4]
 810cf3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810cf3c:	687b      	ldr	r3, [r7, #4]
 810cf3e:	2201      	movs	r2, #1
 810cf40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810cf42:	687b      	ldr	r3, [r7, #4]
 810cf44:	691b      	ldr	r3, [r3, #16]
 810cf46:	f003 0301 	and.w	r3, r3, #1
 810cf4a:	2b01      	cmp	r3, #1
 810cf4c:	d105      	bne.n	810cf5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810cf4e:	687b      	ldr	r3, [r7, #4]
 810cf50:	691b      	ldr	r3, [r3, #16]
 810cf52:	f023 0201 	bic.w	r2, r3, #1
 810cf56:	687b      	ldr	r3, [r7, #4]
 810cf58:	611a      	str	r2, [r3, #16]
  }
}
 810cf5a:	bf00      	nop
 810cf5c:	3714      	adds	r7, #20
 810cf5e:	46bd      	mov	sp, r7
 810cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf64:	4770      	bx	lr
 810cf66:	bf00      	nop
 810cf68:	40010000 	.word	0x40010000
 810cf6c:	40000400 	.word	0x40000400
 810cf70:	40000800 	.word	0x40000800
 810cf74:	40000c00 	.word	0x40000c00
 810cf78:	40010400 	.word	0x40010400
 810cf7c:	40014000 	.word	0x40014000
 810cf80:	40014400 	.word	0x40014400
 810cf84:	40014800 	.word	0x40014800

0810cf88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810cf88:	b480      	push	{r7}
 810cf8a:	b087      	sub	sp, #28
 810cf8c:	af00      	add	r7, sp, #0
 810cf8e:	60f8      	str	r0, [r7, #12]
 810cf90:	60b9      	str	r1, [r7, #8]
 810cf92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810cf94:	68fb      	ldr	r3, [r7, #12]
 810cf96:	6a1b      	ldr	r3, [r3, #32]
 810cf98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810cf9a:	68fb      	ldr	r3, [r7, #12]
 810cf9c:	6a1b      	ldr	r3, [r3, #32]
 810cf9e:	f023 0201 	bic.w	r2, r3, #1
 810cfa2:	68fb      	ldr	r3, [r7, #12]
 810cfa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810cfa6:	68fb      	ldr	r3, [r7, #12]
 810cfa8:	699b      	ldr	r3, [r3, #24]
 810cfaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810cfac:	693b      	ldr	r3, [r7, #16]
 810cfae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810cfb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810cfb4:	687b      	ldr	r3, [r7, #4]
 810cfb6:	011b      	lsls	r3, r3, #4
 810cfb8:	693a      	ldr	r2, [r7, #16]
 810cfba:	4313      	orrs	r3, r2
 810cfbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810cfbe:	697b      	ldr	r3, [r7, #20]
 810cfc0:	f023 030a 	bic.w	r3, r3, #10
 810cfc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810cfc6:	697a      	ldr	r2, [r7, #20]
 810cfc8:	68bb      	ldr	r3, [r7, #8]
 810cfca:	4313      	orrs	r3, r2
 810cfcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810cfce:	68fb      	ldr	r3, [r7, #12]
 810cfd0:	693a      	ldr	r2, [r7, #16]
 810cfd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810cfd4:	68fb      	ldr	r3, [r7, #12]
 810cfd6:	697a      	ldr	r2, [r7, #20]
 810cfd8:	621a      	str	r2, [r3, #32]
}
 810cfda:	bf00      	nop
 810cfdc:	371c      	adds	r7, #28
 810cfde:	46bd      	mov	sp, r7
 810cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfe4:	4770      	bx	lr

0810cfe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810cfe6:	b480      	push	{r7}
 810cfe8:	b087      	sub	sp, #28
 810cfea:	af00      	add	r7, sp, #0
 810cfec:	60f8      	str	r0, [r7, #12]
 810cfee:	60b9      	str	r1, [r7, #8]
 810cff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810cff2:	68fb      	ldr	r3, [r7, #12]
 810cff4:	6a1b      	ldr	r3, [r3, #32]
 810cff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810cff8:	68fb      	ldr	r3, [r7, #12]
 810cffa:	6a1b      	ldr	r3, [r3, #32]
 810cffc:	f023 0210 	bic.w	r2, r3, #16
 810d000:	68fb      	ldr	r3, [r7, #12]
 810d002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810d004:	68fb      	ldr	r3, [r7, #12]
 810d006:	699b      	ldr	r3, [r3, #24]
 810d008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810d00a:	693b      	ldr	r3, [r7, #16]
 810d00c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810d010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810d012:	687b      	ldr	r3, [r7, #4]
 810d014:	031b      	lsls	r3, r3, #12
 810d016:	693a      	ldr	r2, [r7, #16]
 810d018:	4313      	orrs	r3, r2
 810d01a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810d01c:	697b      	ldr	r3, [r7, #20]
 810d01e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810d022:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810d024:	68bb      	ldr	r3, [r7, #8]
 810d026:	011b      	lsls	r3, r3, #4
 810d028:	697a      	ldr	r2, [r7, #20]
 810d02a:	4313      	orrs	r3, r2
 810d02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810d02e:	68fb      	ldr	r3, [r7, #12]
 810d030:	693a      	ldr	r2, [r7, #16]
 810d032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810d034:	68fb      	ldr	r3, [r7, #12]
 810d036:	697a      	ldr	r2, [r7, #20]
 810d038:	621a      	str	r2, [r3, #32]
}
 810d03a:	bf00      	nop
 810d03c:	371c      	adds	r7, #28
 810d03e:	46bd      	mov	sp, r7
 810d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d044:	4770      	bx	lr
	...

0810d048 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810d048:	b480      	push	{r7}
 810d04a:	b085      	sub	sp, #20
 810d04c:	af00      	add	r7, sp, #0
 810d04e:	6078      	str	r0, [r7, #4]
 810d050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810d052:	687b      	ldr	r3, [r7, #4]
 810d054:	689b      	ldr	r3, [r3, #8]
 810d056:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810d058:	68fa      	ldr	r2, [r7, #12]
 810d05a:	4b09      	ldr	r3, [pc, #36]	@ (810d080 <TIM_ITRx_SetConfig+0x38>)
 810d05c:	4013      	ands	r3, r2
 810d05e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810d060:	683a      	ldr	r2, [r7, #0]
 810d062:	68fb      	ldr	r3, [r7, #12]
 810d064:	4313      	orrs	r3, r2
 810d066:	f043 0307 	orr.w	r3, r3, #7
 810d06a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810d06c:	687b      	ldr	r3, [r7, #4]
 810d06e:	68fa      	ldr	r2, [r7, #12]
 810d070:	609a      	str	r2, [r3, #8]
}
 810d072:	bf00      	nop
 810d074:	3714      	adds	r7, #20
 810d076:	46bd      	mov	sp, r7
 810d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d07c:	4770      	bx	lr
 810d07e:	bf00      	nop
 810d080:	ffcfff8f 	.word	0xffcfff8f

0810d084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810d084:	b480      	push	{r7}
 810d086:	b087      	sub	sp, #28
 810d088:	af00      	add	r7, sp, #0
 810d08a:	60f8      	str	r0, [r7, #12]
 810d08c:	60b9      	str	r1, [r7, #8]
 810d08e:	607a      	str	r2, [r7, #4]
 810d090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810d092:	68fb      	ldr	r3, [r7, #12]
 810d094:	689b      	ldr	r3, [r3, #8]
 810d096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810d098:	697b      	ldr	r3, [r7, #20]
 810d09a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810d09e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810d0a0:	683b      	ldr	r3, [r7, #0]
 810d0a2:	021a      	lsls	r2, r3, #8
 810d0a4:	687b      	ldr	r3, [r7, #4]
 810d0a6:	431a      	orrs	r2, r3
 810d0a8:	68bb      	ldr	r3, [r7, #8]
 810d0aa:	4313      	orrs	r3, r2
 810d0ac:	697a      	ldr	r2, [r7, #20]
 810d0ae:	4313      	orrs	r3, r2
 810d0b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810d0b2:	68fb      	ldr	r3, [r7, #12]
 810d0b4:	697a      	ldr	r2, [r7, #20]
 810d0b6:	609a      	str	r2, [r3, #8]
}
 810d0b8:	bf00      	nop
 810d0ba:	371c      	adds	r7, #28
 810d0bc:	46bd      	mov	sp, r7
 810d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0c2:	4770      	bx	lr

0810d0c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810d0c4:	b480      	push	{r7}
 810d0c6:	b085      	sub	sp, #20
 810d0c8:	af00      	add	r7, sp, #0
 810d0ca:	6078      	str	r0, [r7, #4]
 810d0cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810d0ce:	687b      	ldr	r3, [r7, #4]
 810d0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810d0d4:	2b01      	cmp	r3, #1
 810d0d6:	d101      	bne.n	810d0dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810d0d8:	2302      	movs	r3, #2
 810d0da:	e06d      	b.n	810d1b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810d0dc:	687b      	ldr	r3, [r7, #4]
 810d0de:	2201      	movs	r2, #1
 810d0e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810d0e4:	687b      	ldr	r3, [r7, #4]
 810d0e6:	2202      	movs	r2, #2
 810d0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810d0ec:	687b      	ldr	r3, [r7, #4]
 810d0ee:	681b      	ldr	r3, [r3, #0]
 810d0f0:	685b      	ldr	r3, [r3, #4]
 810d0f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810d0f4:	687b      	ldr	r3, [r7, #4]
 810d0f6:	681b      	ldr	r3, [r3, #0]
 810d0f8:	689b      	ldr	r3, [r3, #8]
 810d0fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810d0fc:	687b      	ldr	r3, [r7, #4]
 810d0fe:	681b      	ldr	r3, [r3, #0]
 810d100:	4a30      	ldr	r2, [pc, #192]	@ (810d1c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810d102:	4293      	cmp	r3, r2
 810d104:	d004      	beq.n	810d110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810d106:	687b      	ldr	r3, [r7, #4]
 810d108:	681b      	ldr	r3, [r3, #0]
 810d10a:	4a2f      	ldr	r2, [pc, #188]	@ (810d1c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810d10c:	4293      	cmp	r3, r2
 810d10e:	d108      	bne.n	810d122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810d110:	68fb      	ldr	r3, [r7, #12]
 810d112:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810d116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810d118:	683b      	ldr	r3, [r7, #0]
 810d11a:	685b      	ldr	r3, [r3, #4]
 810d11c:	68fa      	ldr	r2, [r7, #12]
 810d11e:	4313      	orrs	r3, r2
 810d120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810d122:	68fb      	ldr	r3, [r7, #12]
 810d124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810d128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810d12a:	683b      	ldr	r3, [r7, #0]
 810d12c:	681b      	ldr	r3, [r3, #0]
 810d12e:	68fa      	ldr	r2, [r7, #12]
 810d130:	4313      	orrs	r3, r2
 810d132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810d134:	687b      	ldr	r3, [r7, #4]
 810d136:	681b      	ldr	r3, [r3, #0]
 810d138:	68fa      	ldr	r2, [r7, #12]
 810d13a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810d13c:	687b      	ldr	r3, [r7, #4]
 810d13e:	681b      	ldr	r3, [r3, #0]
 810d140:	4a20      	ldr	r2, [pc, #128]	@ (810d1c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810d142:	4293      	cmp	r3, r2
 810d144:	d022      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d146:	687b      	ldr	r3, [r7, #4]
 810d148:	681b      	ldr	r3, [r3, #0]
 810d14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d14e:	d01d      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d150:	687b      	ldr	r3, [r7, #4]
 810d152:	681b      	ldr	r3, [r3, #0]
 810d154:	4a1d      	ldr	r2, [pc, #116]	@ (810d1cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810d156:	4293      	cmp	r3, r2
 810d158:	d018      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d15a:	687b      	ldr	r3, [r7, #4]
 810d15c:	681b      	ldr	r3, [r3, #0]
 810d15e:	4a1c      	ldr	r2, [pc, #112]	@ (810d1d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810d160:	4293      	cmp	r3, r2
 810d162:	d013      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d164:	687b      	ldr	r3, [r7, #4]
 810d166:	681b      	ldr	r3, [r3, #0]
 810d168:	4a1a      	ldr	r2, [pc, #104]	@ (810d1d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810d16a:	4293      	cmp	r3, r2
 810d16c:	d00e      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d16e:	687b      	ldr	r3, [r7, #4]
 810d170:	681b      	ldr	r3, [r3, #0]
 810d172:	4a15      	ldr	r2, [pc, #84]	@ (810d1c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810d174:	4293      	cmp	r3, r2
 810d176:	d009      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d178:	687b      	ldr	r3, [r7, #4]
 810d17a:	681b      	ldr	r3, [r3, #0]
 810d17c:	4a16      	ldr	r2, [pc, #88]	@ (810d1d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810d17e:	4293      	cmp	r3, r2
 810d180:	d004      	beq.n	810d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810d182:	687b      	ldr	r3, [r7, #4]
 810d184:	681b      	ldr	r3, [r3, #0]
 810d186:	4a15      	ldr	r2, [pc, #84]	@ (810d1dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810d188:	4293      	cmp	r3, r2
 810d18a:	d10c      	bne.n	810d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810d18c:	68bb      	ldr	r3, [r7, #8]
 810d18e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810d192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810d194:	683b      	ldr	r3, [r7, #0]
 810d196:	689b      	ldr	r3, [r3, #8]
 810d198:	68ba      	ldr	r2, [r7, #8]
 810d19a:	4313      	orrs	r3, r2
 810d19c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810d19e:	687b      	ldr	r3, [r7, #4]
 810d1a0:	681b      	ldr	r3, [r3, #0]
 810d1a2:	68ba      	ldr	r2, [r7, #8]
 810d1a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810d1a6:	687b      	ldr	r3, [r7, #4]
 810d1a8:	2201      	movs	r2, #1
 810d1aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810d1ae:	687b      	ldr	r3, [r7, #4]
 810d1b0:	2200      	movs	r2, #0
 810d1b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810d1b6:	2300      	movs	r3, #0
}
 810d1b8:	4618      	mov	r0, r3
 810d1ba:	3714      	adds	r7, #20
 810d1bc:	46bd      	mov	sp, r7
 810d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1c2:	4770      	bx	lr
 810d1c4:	40010000 	.word	0x40010000
 810d1c8:	40010400 	.word	0x40010400
 810d1cc:	40000400 	.word	0x40000400
 810d1d0:	40000800 	.word	0x40000800
 810d1d4:	40000c00 	.word	0x40000c00
 810d1d8:	40001800 	.word	0x40001800
 810d1dc:	40014000 	.word	0x40014000

0810d1e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810d1e0:	b480      	push	{r7}
 810d1e2:	b083      	sub	sp, #12
 810d1e4:	af00      	add	r7, sp, #0
 810d1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810d1e8:	bf00      	nop
 810d1ea:	370c      	adds	r7, #12
 810d1ec:	46bd      	mov	sp, r7
 810d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1f2:	4770      	bx	lr

0810d1f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810d1f4:	b480      	push	{r7}
 810d1f6:	b083      	sub	sp, #12
 810d1f8:	af00      	add	r7, sp, #0
 810d1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810d1fc:	bf00      	nop
 810d1fe:	370c      	adds	r7, #12
 810d200:	46bd      	mov	sp, r7
 810d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d206:	4770      	bx	lr

0810d208 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810d208:	b480      	push	{r7}
 810d20a:	b083      	sub	sp, #12
 810d20c:	af00      	add	r7, sp, #0
 810d20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810d210:	bf00      	nop
 810d212:	370c      	adds	r7, #12
 810d214:	46bd      	mov	sp, r7
 810d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d21a:	4770      	bx	lr

0810d21c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810d21c:	b580      	push	{r7, lr}
 810d21e:	b082      	sub	sp, #8
 810d220:	af00      	add	r7, sp, #0
 810d222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810d224:	687b      	ldr	r3, [r7, #4]
 810d226:	2b00      	cmp	r3, #0
 810d228:	d101      	bne.n	810d22e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810d22a:	2301      	movs	r3, #1
 810d22c:	e042      	b.n	810d2b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810d22e:	687b      	ldr	r3, [r7, #4]
 810d230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d234:	2b00      	cmp	r3, #0
 810d236:	d106      	bne.n	810d246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810d238:	687b      	ldr	r3, [r7, #4]
 810d23a:	2200      	movs	r2, #0
 810d23c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810d240:	6878      	ldr	r0, [r7, #4]
 810d242:	f7f4 fe9f 	bl	8101f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810d246:	687b      	ldr	r3, [r7, #4]
 810d248:	2224      	movs	r2, #36	@ 0x24
 810d24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810d24e:	687b      	ldr	r3, [r7, #4]
 810d250:	681b      	ldr	r3, [r3, #0]
 810d252:	681a      	ldr	r2, [r3, #0]
 810d254:	687b      	ldr	r3, [r7, #4]
 810d256:	681b      	ldr	r3, [r3, #0]
 810d258:	f022 0201 	bic.w	r2, r2, #1
 810d25c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d262:	2b00      	cmp	r3, #0
 810d264:	d002      	beq.n	810d26c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810d266:	6878      	ldr	r0, [r7, #4]
 810d268:	f001 f9b6 	bl	810e5d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810d26c:	6878      	ldr	r0, [r7, #4]
 810d26e:	f000 fc4b 	bl	810db08 <UART_SetConfig>
 810d272:	4603      	mov	r3, r0
 810d274:	2b01      	cmp	r3, #1
 810d276:	d101      	bne.n	810d27c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810d278:	2301      	movs	r3, #1
 810d27a:	e01b      	b.n	810d2b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810d27c:	687b      	ldr	r3, [r7, #4]
 810d27e:	681b      	ldr	r3, [r3, #0]
 810d280:	685a      	ldr	r2, [r3, #4]
 810d282:	687b      	ldr	r3, [r7, #4]
 810d284:	681b      	ldr	r3, [r3, #0]
 810d286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810d28a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810d28c:	687b      	ldr	r3, [r7, #4]
 810d28e:	681b      	ldr	r3, [r3, #0]
 810d290:	689a      	ldr	r2, [r3, #8]
 810d292:	687b      	ldr	r3, [r7, #4]
 810d294:	681b      	ldr	r3, [r3, #0]
 810d296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810d29a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810d29c:	687b      	ldr	r3, [r7, #4]
 810d29e:	681b      	ldr	r3, [r3, #0]
 810d2a0:	681a      	ldr	r2, [r3, #0]
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	681b      	ldr	r3, [r3, #0]
 810d2a6:	f042 0201 	orr.w	r2, r2, #1
 810d2aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810d2ac:	6878      	ldr	r0, [r7, #4]
 810d2ae:	f001 fa35 	bl	810e71c <UART_CheckIdleState>
 810d2b2:	4603      	mov	r3, r0
}
 810d2b4:	4618      	mov	r0, r3
 810d2b6:	3708      	adds	r7, #8
 810d2b8:	46bd      	mov	sp, r7
 810d2ba:	bd80      	pop	{r7, pc}

0810d2bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810d2bc:	b580      	push	{r7, lr}
 810d2be:	b08a      	sub	sp, #40	@ 0x28
 810d2c0:	af00      	add	r7, sp, #0
 810d2c2:	60f8      	str	r0, [r7, #12]
 810d2c4:	60b9      	str	r1, [r7, #8]
 810d2c6:	4613      	mov	r3, r2
 810d2c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810d2ca:	68fb      	ldr	r3, [r7, #12]
 810d2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810d2d0:	2b20      	cmp	r3, #32
 810d2d2:	d137      	bne.n	810d344 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810d2d4:	68bb      	ldr	r3, [r7, #8]
 810d2d6:	2b00      	cmp	r3, #0
 810d2d8:	d002      	beq.n	810d2e0 <HAL_UART_Receive_DMA+0x24>
 810d2da:	88fb      	ldrh	r3, [r7, #6]
 810d2dc:	2b00      	cmp	r3, #0
 810d2de:	d101      	bne.n	810d2e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810d2e0:	2301      	movs	r3, #1
 810d2e2:	e030      	b.n	810d346 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d2e4:	68fb      	ldr	r3, [r7, #12]
 810d2e6:	2200      	movs	r2, #0
 810d2e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810d2ea:	68fb      	ldr	r3, [r7, #12]
 810d2ec:	681b      	ldr	r3, [r3, #0]
 810d2ee:	4a18      	ldr	r2, [pc, #96]	@ (810d350 <HAL_UART_Receive_DMA+0x94>)
 810d2f0:	4293      	cmp	r3, r2
 810d2f2:	d01f      	beq.n	810d334 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810d2f4:	68fb      	ldr	r3, [r7, #12]
 810d2f6:	681b      	ldr	r3, [r3, #0]
 810d2f8:	685b      	ldr	r3, [r3, #4]
 810d2fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810d2fe:	2b00      	cmp	r3, #0
 810d300:	d018      	beq.n	810d334 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810d302:	68fb      	ldr	r3, [r7, #12]
 810d304:	681b      	ldr	r3, [r3, #0]
 810d306:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d308:	697b      	ldr	r3, [r7, #20]
 810d30a:	e853 3f00 	ldrex	r3, [r3]
 810d30e:	613b      	str	r3, [r7, #16]
   return(result);
 810d310:	693b      	ldr	r3, [r7, #16]
 810d312:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810d316:	627b      	str	r3, [r7, #36]	@ 0x24
 810d318:	68fb      	ldr	r3, [r7, #12]
 810d31a:	681b      	ldr	r3, [r3, #0]
 810d31c:	461a      	mov	r2, r3
 810d31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d320:	623b      	str	r3, [r7, #32]
 810d322:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d324:	69f9      	ldr	r1, [r7, #28]
 810d326:	6a3a      	ldr	r2, [r7, #32]
 810d328:	e841 2300 	strex	r3, r2, [r1]
 810d32c:	61bb      	str	r3, [r7, #24]
   return(result);
 810d32e:	69bb      	ldr	r3, [r7, #24]
 810d330:	2b00      	cmp	r3, #0
 810d332:	d1e6      	bne.n	810d302 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810d334:	88fb      	ldrh	r3, [r7, #6]
 810d336:	461a      	mov	r2, r3
 810d338:	68b9      	ldr	r1, [r7, #8]
 810d33a:	68f8      	ldr	r0, [r7, #12]
 810d33c:	f001 fb06 	bl	810e94c <UART_Start_Receive_DMA>
 810d340:	4603      	mov	r3, r0
 810d342:	e000      	b.n	810d346 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810d344:	2302      	movs	r3, #2
  }
}
 810d346:	4618      	mov	r0, r3
 810d348:	3728      	adds	r7, #40	@ 0x28
 810d34a:	46bd      	mov	sp, r7
 810d34c:	bd80      	pop	{r7, pc}
 810d34e:	bf00      	nop
 810d350:	58000c00 	.word	0x58000c00

0810d354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810d354:	b580      	push	{r7, lr}
 810d356:	b0ba      	sub	sp, #232	@ 0xe8
 810d358:	af00      	add	r7, sp, #0
 810d35a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810d35c:	687b      	ldr	r3, [r7, #4]
 810d35e:	681b      	ldr	r3, [r3, #0]
 810d360:	69db      	ldr	r3, [r3, #28]
 810d362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810d366:	687b      	ldr	r3, [r7, #4]
 810d368:	681b      	ldr	r3, [r3, #0]
 810d36a:	681b      	ldr	r3, [r3, #0]
 810d36c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810d370:	687b      	ldr	r3, [r7, #4]
 810d372:	681b      	ldr	r3, [r3, #0]
 810d374:	689b      	ldr	r3, [r3, #8]
 810d376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810d37a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810d37e:	f640 030f 	movw	r3, #2063	@ 0x80f
 810d382:	4013      	ands	r3, r2
 810d384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810d388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810d38c:	2b00      	cmp	r3, #0
 810d38e:	d11b      	bne.n	810d3c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810d390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d394:	f003 0320 	and.w	r3, r3, #32
 810d398:	2b00      	cmp	r3, #0
 810d39a:	d015      	beq.n	810d3c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810d39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d3a0:	f003 0320 	and.w	r3, r3, #32
 810d3a4:	2b00      	cmp	r3, #0
 810d3a6:	d105      	bne.n	810d3b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810d3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810d3ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810d3b0:	2b00      	cmp	r3, #0
 810d3b2:	d009      	beq.n	810d3c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810d3b4:	687b      	ldr	r3, [r7, #4]
 810d3b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810d3b8:	2b00      	cmp	r3, #0
 810d3ba:	f000 8377 	beq.w	810daac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 810d3be:	687b      	ldr	r3, [r7, #4]
 810d3c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810d3c2:	6878      	ldr	r0, [r7, #4]
 810d3c4:	4798      	blx	r3
      }
      return;
 810d3c6:	e371      	b.n	810daac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810d3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810d3cc:	2b00      	cmp	r3, #0
 810d3ce:	f000 8123 	beq.w	810d618 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810d3d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810d3d6:	4b8d      	ldr	r3, [pc, #564]	@ (810d60c <HAL_UART_IRQHandler+0x2b8>)
 810d3d8:	4013      	ands	r3, r2
 810d3da:	2b00      	cmp	r3, #0
 810d3dc:	d106      	bne.n	810d3ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810d3de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810d3e2:	4b8b      	ldr	r3, [pc, #556]	@ (810d610 <HAL_UART_IRQHandler+0x2bc>)
 810d3e4:	4013      	ands	r3, r2
 810d3e6:	2b00      	cmp	r3, #0
 810d3e8:	f000 8116 	beq.w	810d618 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810d3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d3f0:	f003 0301 	and.w	r3, r3, #1
 810d3f4:	2b00      	cmp	r3, #0
 810d3f6:	d011      	beq.n	810d41c <HAL_UART_IRQHandler+0xc8>
 810d3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d3fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810d400:	2b00      	cmp	r3, #0
 810d402:	d00b      	beq.n	810d41c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810d404:	687b      	ldr	r3, [r7, #4]
 810d406:	681b      	ldr	r3, [r3, #0]
 810d408:	2201      	movs	r2, #1
 810d40a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810d40c:	687b      	ldr	r3, [r7, #4]
 810d40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d412:	f043 0201 	orr.w	r2, r3, #1
 810d416:	687b      	ldr	r3, [r7, #4]
 810d418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810d41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d420:	f003 0302 	and.w	r3, r3, #2
 810d424:	2b00      	cmp	r3, #0
 810d426:	d011      	beq.n	810d44c <HAL_UART_IRQHandler+0xf8>
 810d428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810d42c:	f003 0301 	and.w	r3, r3, #1
 810d430:	2b00      	cmp	r3, #0
 810d432:	d00b      	beq.n	810d44c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810d434:	687b      	ldr	r3, [r7, #4]
 810d436:	681b      	ldr	r3, [r3, #0]
 810d438:	2202      	movs	r2, #2
 810d43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810d43c:	687b      	ldr	r3, [r7, #4]
 810d43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d442:	f043 0204 	orr.w	r2, r3, #4
 810d446:	687b      	ldr	r3, [r7, #4]
 810d448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810d44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d450:	f003 0304 	and.w	r3, r3, #4
 810d454:	2b00      	cmp	r3, #0
 810d456:	d011      	beq.n	810d47c <HAL_UART_IRQHandler+0x128>
 810d458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810d45c:	f003 0301 	and.w	r3, r3, #1
 810d460:	2b00      	cmp	r3, #0
 810d462:	d00b      	beq.n	810d47c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810d464:	687b      	ldr	r3, [r7, #4]
 810d466:	681b      	ldr	r3, [r3, #0]
 810d468:	2204      	movs	r2, #4
 810d46a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810d46c:	687b      	ldr	r3, [r7, #4]
 810d46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d472:	f043 0202 	orr.w	r2, r3, #2
 810d476:	687b      	ldr	r3, [r7, #4]
 810d478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810d47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d480:	f003 0308 	and.w	r3, r3, #8
 810d484:	2b00      	cmp	r3, #0
 810d486:	d017      	beq.n	810d4b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810d488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d48c:	f003 0320 	and.w	r3, r3, #32
 810d490:	2b00      	cmp	r3, #0
 810d492:	d105      	bne.n	810d4a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810d494:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810d498:	4b5c      	ldr	r3, [pc, #368]	@ (810d60c <HAL_UART_IRQHandler+0x2b8>)
 810d49a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810d49c:	2b00      	cmp	r3, #0
 810d49e:	d00b      	beq.n	810d4b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810d4a0:	687b      	ldr	r3, [r7, #4]
 810d4a2:	681b      	ldr	r3, [r3, #0]
 810d4a4:	2208      	movs	r2, #8
 810d4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810d4a8:	687b      	ldr	r3, [r7, #4]
 810d4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d4ae:	f043 0208 	orr.w	r2, r3, #8
 810d4b2:	687b      	ldr	r3, [r7, #4]
 810d4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810d4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d4bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810d4c0:	2b00      	cmp	r3, #0
 810d4c2:	d012      	beq.n	810d4ea <HAL_UART_IRQHandler+0x196>
 810d4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d4c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810d4cc:	2b00      	cmp	r3, #0
 810d4ce:	d00c      	beq.n	810d4ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810d4d0:	687b      	ldr	r3, [r7, #4]
 810d4d2:	681b      	ldr	r3, [r3, #0]
 810d4d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810d4d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810d4da:	687b      	ldr	r3, [r7, #4]
 810d4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d4e0:	f043 0220 	orr.w	r2, r3, #32
 810d4e4:	687b      	ldr	r3, [r7, #4]
 810d4e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810d4ea:	687b      	ldr	r3, [r7, #4]
 810d4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d4f0:	2b00      	cmp	r3, #0
 810d4f2:	f000 82dd 	beq.w	810dab0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810d4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d4fa:	f003 0320 	and.w	r3, r3, #32
 810d4fe:	2b00      	cmp	r3, #0
 810d500:	d013      	beq.n	810d52a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810d502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d506:	f003 0320 	and.w	r3, r3, #32
 810d50a:	2b00      	cmp	r3, #0
 810d50c:	d105      	bne.n	810d51a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810d50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810d512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810d516:	2b00      	cmp	r3, #0
 810d518:	d007      	beq.n	810d52a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810d51a:	687b      	ldr	r3, [r7, #4]
 810d51c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810d51e:	2b00      	cmp	r3, #0
 810d520:	d003      	beq.n	810d52a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810d522:	687b      	ldr	r3, [r7, #4]
 810d524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810d526:	6878      	ldr	r0, [r7, #4]
 810d528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810d52a:	687b      	ldr	r3, [r7, #4]
 810d52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810d534:	687b      	ldr	r3, [r7, #4]
 810d536:	681b      	ldr	r3, [r3, #0]
 810d538:	689b      	ldr	r3, [r3, #8]
 810d53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d53e:	2b40      	cmp	r3, #64	@ 0x40
 810d540:	d005      	beq.n	810d54e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810d542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810d546:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810d54a:	2b00      	cmp	r3, #0
 810d54c:	d054      	beq.n	810d5f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810d54e:	6878      	ldr	r0, [r7, #4]
 810d550:	f001 fae4 	bl	810eb1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d554:	687b      	ldr	r3, [r7, #4]
 810d556:	681b      	ldr	r3, [r3, #0]
 810d558:	689b      	ldr	r3, [r3, #8]
 810d55a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d55e:	2b40      	cmp	r3, #64	@ 0x40
 810d560:	d146      	bne.n	810d5f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d562:	687b      	ldr	r3, [r7, #4]
 810d564:	681b      	ldr	r3, [r3, #0]
 810d566:	3308      	adds	r3, #8
 810d568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d56c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810d570:	e853 3f00 	ldrex	r3, [r3]
 810d574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810d578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810d57c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810d580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810d584:	687b      	ldr	r3, [r7, #4]
 810d586:	681b      	ldr	r3, [r3, #0]
 810d588:	3308      	adds	r3, #8
 810d58a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810d58e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810d592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810d59a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810d59e:	e841 2300 	strex	r3, r2, [r1]
 810d5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810d5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810d5aa:	2b00      	cmp	r3, #0
 810d5ac:	d1d9      	bne.n	810d562 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810d5ae:	687b      	ldr	r3, [r7, #4]
 810d5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d5b4:	2b00      	cmp	r3, #0
 810d5b6:	d017      	beq.n	810d5e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810d5b8:	687b      	ldr	r3, [r7, #4]
 810d5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d5be:	4a15      	ldr	r2, [pc, #84]	@ (810d614 <HAL_UART_IRQHandler+0x2c0>)
 810d5c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810d5c2:	687b      	ldr	r3, [r7, #4]
 810d5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d5c8:	4618      	mov	r0, r3
 810d5ca:	f7f7 fead 	bl	8105328 <HAL_DMA_Abort_IT>
 810d5ce:	4603      	mov	r3, r0
 810d5d0:	2b00      	cmp	r3, #0
 810d5d2:	d019      	beq.n	810d608 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810d5d4:	687b      	ldr	r3, [r7, #4]
 810d5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810d5dc:	687a      	ldr	r2, [r7, #4]
 810d5de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810d5e2:	4610      	mov	r0, r2
 810d5e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d5e6:	e00f      	b.n	810d608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810d5e8:	6878      	ldr	r0, [r7, #4]
 810d5ea:	f000 fa77 	bl	810dadc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d5ee:	e00b      	b.n	810d608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810d5f0:	6878      	ldr	r0, [r7, #4]
 810d5f2:	f000 fa73 	bl	810dadc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d5f6:	e007      	b.n	810d608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810d5f8:	6878      	ldr	r0, [r7, #4]
 810d5fa:	f000 fa6f 	bl	810dadc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d5fe:	687b      	ldr	r3, [r7, #4]
 810d600:	2200      	movs	r2, #0
 810d602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810d606:	e253      	b.n	810dab0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d608:	bf00      	nop
    return;
 810d60a:	e251      	b.n	810dab0 <HAL_UART_IRQHandler+0x75c>
 810d60c:	10000001 	.word	0x10000001
 810d610:	04000120 	.word	0x04000120
 810d614:	0810edcf 	.word	0x0810edcf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d618:	687b      	ldr	r3, [r7, #4]
 810d61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810d61c:	2b01      	cmp	r3, #1
 810d61e:	f040 81e7 	bne.w	810d9f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810d622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d626:	f003 0310 	and.w	r3, r3, #16
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	f000 81e0 	beq.w	810d9f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810d630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d634:	f003 0310 	and.w	r3, r3, #16
 810d638:	2b00      	cmp	r3, #0
 810d63a:	f000 81d9 	beq.w	810d9f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810d63e:	687b      	ldr	r3, [r7, #4]
 810d640:	681b      	ldr	r3, [r3, #0]
 810d642:	2210      	movs	r2, #16
 810d644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d646:	687b      	ldr	r3, [r7, #4]
 810d648:	681b      	ldr	r3, [r3, #0]
 810d64a:	689b      	ldr	r3, [r3, #8]
 810d64c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d650:	2b40      	cmp	r3, #64	@ 0x40
 810d652:	f040 8151 	bne.w	810d8f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810d656:	687b      	ldr	r3, [r7, #4]
 810d658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d65c:	681b      	ldr	r3, [r3, #0]
 810d65e:	4a96      	ldr	r2, [pc, #600]	@ (810d8b8 <HAL_UART_IRQHandler+0x564>)
 810d660:	4293      	cmp	r3, r2
 810d662:	d068      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d664:	687b      	ldr	r3, [r7, #4]
 810d666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d66a:	681b      	ldr	r3, [r3, #0]
 810d66c:	4a93      	ldr	r2, [pc, #588]	@ (810d8bc <HAL_UART_IRQHandler+0x568>)
 810d66e:	4293      	cmp	r3, r2
 810d670:	d061      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d672:	687b      	ldr	r3, [r7, #4]
 810d674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d678:	681b      	ldr	r3, [r3, #0]
 810d67a:	4a91      	ldr	r2, [pc, #580]	@ (810d8c0 <HAL_UART_IRQHandler+0x56c>)
 810d67c:	4293      	cmp	r3, r2
 810d67e:	d05a      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d680:	687b      	ldr	r3, [r7, #4]
 810d682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d686:	681b      	ldr	r3, [r3, #0]
 810d688:	4a8e      	ldr	r2, [pc, #568]	@ (810d8c4 <HAL_UART_IRQHandler+0x570>)
 810d68a:	4293      	cmp	r3, r2
 810d68c:	d053      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d68e:	687b      	ldr	r3, [r7, #4]
 810d690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d694:	681b      	ldr	r3, [r3, #0]
 810d696:	4a8c      	ldr	r2, [pc, #560]	@ (810d8c8 <HAL_UART_IRQHandler+0x574>)
 810d698:	4293      	cmp	r3, r2
 810d69a:	d04c      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d69c:	687b      	ldr	r3, [r7, #4]
 810d69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6a2:	681b      	ldr	r3, [r3, #0]
 810d6a4:	4a89      	ldr	r2, [pc, #548]	@ (810d8cc <HAL_UART_IRQHandler+0x578>)
 810d6a6:	4293      	cmp	r3, r2
 810d6a8:	d045      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6aa:	687b      	ldr	r3, [r7, #4]
 810d6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6b0:	681b      	ldr	r3, [r3, #0]
 810d6b2:	4a87      	ldr	r2, [pc, #540]	@ (810d8d0 <HAL_UART_IRQHandler+0x57c>)
 810d6b4:	4293      	cmp	r3, r2
 810d6b6:	d03e      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6b8:	687b      	ldr	r3, [r7, #4]
 810d6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6be:	681b      	ldr	r3, [r3, #0]
 810d6c0:	4a84      	ldr	r2, [pc, #528]	@ (810d8d4 <HAL_UART_IRQHandler+0x580>)
 810d6c2:	4293      	cmp	r3, r2
 810d6c4:	d037      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6c6:	687b      	ldr	r3, [r7, #4]
 810d6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6cc:	681b      	ldr	r3, [r3, #0]
 810d6ce:	4a82      	ldr	r2, [pc, #520]	@ (810d8d8 <HAL_UART_IRQHandler+0x584>)
 810d6d0:	4293      	cmp	r3, r2
 810d6d2:	d030      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6d4:	687b      	ldr	r3, [r7, #4]
 810d6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6da:	681b      	ldr	r3, [r3, #0]
 810d6dc:	4a7f      	ldr	r2, [pc, #508]	@ (810d8dc <HAL_UART_IRQHandler+0x588>)
 810d6de:	4293      	cmp	r3, r2
 810d6e0:	d029      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6e2:	687b      	ldr	r3, [r7, #4]
 810d6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6e8:	681b      	ldr	r3, [r3, #0]
 810d6ea:	4a7d      	ldr	r2, [pc, #500]	@ (810d8e0 <HAL_UART_IRQHandler+0x58c>)
 810d6ec:	4293      	cmp	r3, r2
 810d6ee:	d022      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6f0:	687b      	ldr	r3, [r7, #4]
 810d6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d6f6:	681b      	ldr	r3, [r3, #0]
 810d6f8:	4a7a      	ldr	r2, [pc, #488]	@ (810d8e4 <HAL_UART_IRQHandler+0x590>)
 810d6fa:	4293      	cmp	r3, r2
 810d6fc:	d01b      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d6fe:	687b      	ldr	r3, [r7, #4]
 810d700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d704:	681b      	ldr	r3, [r3, #0]
 810d706:	4a78      	ldr	r2, [pc, #480]	@ (810d8e8 <HAL_UART_IRQHandler+0x594>)
 810d708:	4293      	cmp	r3, r2
 810d70a:	d014      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d70c:	687b      	ldr	r3, [r7, #4]
 810d70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d712:	681b      	ldr	r3, [r3, #0]
 810d714:	4a75      	ldr	r2, [pc, #468]	@ (810d8ec <HAL_UART_IRQHandler+0x598>)
 810d716:	4293      	cmp	r3, r2
 810d718:	d00d      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d71a:	687b      	ldr	r3, [r7, #4]
 810d71c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d720:	681b      	ldr	r3, [r3, #0]
 810d722:	4a73      	ldr	r2, [pc, #460]	@ (810d8f0 <HAL_UART_IRQHandler+0x59c>)
 810d724:	4293      	cmp	r3, r2
 810d726:	d006      	beq.n	810d736 <HAL_UART_IRQHandler+0x3e2>
 810d728:	687b      	ldr	r3, [r7, #4]
 810d72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d72e:	681b      	ldr	r3, [r3, #0]
 810d730:	4a70      	ldr	r2, [pc, #448]	@ (810d8f4 <HAL_UART_IRQHandler+0x5a0>)
 810d732:	4293      	cmp	r3, r2
 810d734:	d106      	bne.n	810d744 <HAL_UART_IRQHandler+0x3f0>
 810d736:	687b      	ldr	r3, [r7, #4]
 810d738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d73c:	681b      	ldr	r3, [r3, #0]
 810d73e:	685b      	ldr	r3, [r3, #4]
 810d740:	b29b      	uxth	r3, r3
 810d742:	e005      	b.n	810d750 <HAL_UART_IRQHandler+0x3fc>
 810d744:	687b      	ldr	r3, [r7, #4]
 810d746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d74a:	681b      	ldr	r3, [r3, #0]
 810d74c:	685b      	ldr	r3, [r3, #4]
 810d74e:	b29b      	uxth	r3, r3
 810d750:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810d754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810d758:	2b00      	cmp	r3, #0
 810d75a:	f000 81ab 	beq.w	810dab4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810d75e:	687b      	ldr	r3, [r7, #4]
 810d760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810d764:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810d768:	429a      	cmp	r2, r3
 810d76a:	f080 81a3 	bcs.w	810dab4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810d76e:	687b      	ldr	r3, [r7, #4]
 810d770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810d774:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810d778:	687b      	ldr	r3, [r7, #4]
 810d77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d77e:	69db      	ldr	r3, [r3, #28]
 810d780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810d784:	f000 8087 	beq.w	810d896 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d788:	687b      	ldr	r3, [r7, #4]
 810d78a:	681b      	ldr	r3, [r3, #0]
 810d78c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d790:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810d794:	e853 3f00 	ldrex	r3, [r3]
 810d798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810d79c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810d7a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810d7a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810d7a8:	687b      	ldr	r3, [r7, #4]
 810d7aa:	681b      	ldr	r3, [r3, #0]
 810d7ac:	461a      	mov	r2, r3
 810d7ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810d7b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810d7b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d7ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810d7be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810d7c2:	e841 2300 	strex	r3, r2, [r1]
 810d7c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810d7ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810d7ce:	2b00      	cmp	r3, #0
 810d7d0:	d1da      	bne.n	810d788 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d7d2:	687b      	ldr	r3, [r7, #4]
 810d7d4:	681b      	ldr	r3, [r3, #0]
 810d7d6:	3308      	adds	r3, #8
 810d7d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d7da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d7dc:	e853 3f00 	ldrex	r3, [r3]
 810d7e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810d7e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810d7e4:	f023 0301 	bic.w	r3, r3, #1
 810d7e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810d7ec:	687b      	ldr	r3, [r7, #4]
 810d7ee:	681b      	ldr	r3, [r3, #0]
 810d7f0:	3308      	adds	r3, #8
 810d7f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810d7f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810d7fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d7fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810d7fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810d802:	e841 2300 	strex	r3, r2, [r1]
 810d806:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810d808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810d80a:	2b00      	cmp	r3, #0
 810d80c:	d1e1      	bne.n	810d7d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d80e:	687b      	ldr	r3, [r7, #4]
 810d810:	681b      	ldr	r3, [r3, #0]
 810d812:	3308      	adds	r3, #8
 810d814:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810d818:	e853 3f00 	ldrex	r3, [r3]
 810d81c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810d81e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810d820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810d824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810d828:	687b      	ldr	r3, [r7, #4]
 810d82a:	681b      	ldr	r3, [r3, #0]
 810d82c:	3308      	adds	r3, #8
 810d82e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810d832:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810d834:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d836:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810d838:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810d83a:	e841 2300 	strex	r3, r2, [r1]
 810d83e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810d840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810d842:	2b00      	cmp	r3, #0
 810d844:	d1e3      	bne.n	810d80e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810d846:	687b      	ldr	r3, [r7, #4]
 810d848:	2220      	movs	r2, #32
 810d84a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d84e:	687b      	ldr	r3, [r7, #4]
 810d850:	2200      	movs	r2, #0
 810d852:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d854:	687b      	ldr	r3, [r7, #4]
 810d856:	681b      	ldr	r3, [r3, #0]
 810d858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810d85c:	e853 3f00 	ldrex	r3, [r3]
 810d860:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810d862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810d864:	f023 0310 	bic.w	r3, r3, #16
 810d868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810d86c:	687b      	ldr	r3, [r7, #4]
 810d86e:	681b      	ldr	r3, [r3, #0]
 810d870:	461a      	mov	r2, r3
 810d872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810d876:	65bb      	str	r3, [r7, #88]	@ 0x58
 810d878:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d87a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810d87c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810d87e:	e841 2300 	strex	r3, r2, [r1]
 810d882:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810d884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810d886:	2b00      	cmp	r3, #0
 810d888:	d1e4      	bne.n	810d854 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810d88a:	687b      	ldr	r3, [r7, #4]
 810d88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810d890:	4618      	mov	r0, r3
 810d892:	f7f7 fa2b 	bl	8104cec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810d896:	687b      	ldr	r3, [r7, #4]
 810d898:	2202      	movs	r2, #2
 810d89a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810d89c:	687b      	ldr	r3, [r7, #4]
 810d89e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810d8a2:	687b      	ldr	r3, [r7, #4]
 810d8a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810d8a8:	b29b      	uxth	r3, r3
 810d8aa:	1ad3      	subs	r3, r2, r3
 810d8ac:	b29b      	uxth	r3, r3
 810d8ae:	4619      	mov	r1, r3
 810d8b0:	6878      	ldr	r0, [r7, #4]
 810d8b2:	f000 f91d 	bl	810daf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810d8b6:	e0fd      	b.n	810dab4 <HAL_UART_IRQHandler+0x760>
 810d8b8:	40020010 	.word	0x40020010
 810d8bc:	40020028 	.word	0x40020028
 810d8c0:	40020040 	.word	0x40020040
 810d8c4:	40020058 	.word	0x40020058
 810d8c8:	40020070 	.word	0x40020070
 810d8cc:	40020088 	.word	0x40020088
 810d8d0:	400200a0 	.word	0x400200a0
 810d8d4:	400200b8 	.word	0x400200b8
 810d8d8:	40020410 	.word	0x40020410
 810d8dc:	40020428 	.word	0x40020428
 810d8e0:	40020440 	.word	0x40020440
 810d8e4:	40020458 	.word	0x40020458
 810d8e8:	40020470 	.word	0x40020470
 810d8ec:	40020488 	.word	0x40020488
 810d8f0:	400204a0 	.word	0x400204a0
 810d8f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810d8f8:	687b      	ldr	r3, [r7, #4]
 810d8fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810d8fe:	687b      	ldr	r3, [r7, #4]
 810d900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810d904:	b29b      	uxth	r3, r3
 810d906:	1ad3      	subs	r3, r2, r3
 810d908:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810d90c:	687b      	ldr	r3, [r7, #4]
 810d90e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810d912:	b29b      	uxth	r3, r3
 810d914:	2b00      	cmp	r3, #0
 810d916:	f000 80cf 	beq.w	810dab8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 810d91a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810d91e:	2b00      	cmp	r3, #0
 810d920:	f000 80ca 	beq.w	810dab8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d924:	687b      	ldr	r3, [r7, #4]
 810d926:	681b      	ldr	r3, [r3, #0]
 810d928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d92c:	e853 3f00 	ldrex	r3, [r3]
 810d930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810d932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810d938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810d93c:	687b      	ldr	r3, [r7, #4]
 810d93e:	681b      	ldr	r3, [r3, #0]
 810d940:	461a      	mov	r2, r3
 810d942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810d946:	647b      	str	r3, [r7, #68]	@ 0x44
 810d948:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d94a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810d94c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810d94e:	e841 2300 	strex	r3, r2, [r1]
 810d952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810d954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d956:	2b00      	cmp	r3, #0
 810d958:	d1e4      	bne.n	810d924 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810d95a:	687b      	ldr	r3, [r7, #4]
 810d95c:	681b      	ldr	r3, [r3, #0]
 810d95e:	3308      	adds	r3, #8
 810d960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d964:	e853 3f00 	ldrex	r3, [r3]
 810d968:	623b      	str	r3, [r7, #32]
   return(result);
 810d96a:	6a3a      	ldr	r2, [r7, #32]
 810d96c:	4b55      	ldr	r3, [pc, #340]	@ (810dac4 <HAL_UART_IRQHandler+0x770>)
 810d96e:	4013      	ands	r3, r2
 810d970:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810d974:	687b      	ldr	r3, [r7, #4]
 810d976:	681b      	ldr	r3, [r3, #0]
 810d978:	3308      	adds	r3, #8
 810d97a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810d97e:	633a      	str	r2, [r7, #48]	@ 0x30
 810d980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810d984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d986:	e841 2300 	strex	r3, r2, [r1]
 810d98a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810d98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d98e:	2b00      	cmp	r3, #0
 810d990:	d1e3      	bne.n	810d95a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810d992:	687b      	ldr	r3, [r7, #4]
 810d994:	2220      	movs	r2, #32
 810d996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	2200      	movs	r2, #0
 810d99e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810d9a0:	687b      	ldr	r3, [r7, #4]
 810d9a2:	2200      	movs	r2, #0
 810d9a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d9a6:	687b      	ldr	r3, [r7, #4]
 810d9a8:	681b      	ldr	r3, [r3, #0]
 810d9aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d9ac:	693b      	ldr	r3, [r7, #16]
 810d9ae:	e853 3f00 	ldrex	r3, [r3]
 810d9b2:	60fb      	str	r3, [r7, #12]
   return(result);
 810d9b4:	68fb      	ldr	r3, [r7, #12]
 810d9b6:	f023 0310 	bic.w	r3, r3, #16
 810d9ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810d9be:	687b      	ldr	r3, [r7, #4]
 810d9c0:	681b      	ldr	r3, [r3, #0]
 810d9c2:	461a      	mov	r2, r3
 810d9c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810d9c8:	61fb      	str	r3, [r7, #28]
 810d9ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d9cc:	69b9      	ldr	r1, [r7, #24]
 810d9ce:	69fa      	ldr	r2, [r7, #28]
 810d9d0:	e841 2300 	strex	r3, r2, [r1]
 810d9d4:	617b      	str	r3, [r7, #20]
   return(result);
 810d9d6:	697b      	ldr	r3, [r7, #20]
 810d9d8:	2b00      	cmp	r3, #0
 810d9da:	d1e4      	bne.n	810d9a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810d9dc:	687b      	ldr	r3, [r7, #4]
 810d9de:	2202      	movs	r2, #2
 810d9e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810d9e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810d9e6:	4619      	mov	r1, r3
 810d9e8:	6878      	ldr	r0, [r7, #4]
 810d9ea:	f000 f881 	bl	810daf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810d9ee:	e063      	b.n	810dab8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810d9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d9f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810d9f8:	2b00      	cmp	r3, #0
 810d9fa:	d00e      	beq.n	810da1a <HAL_UART_IRQHandler+0x6c6>
 810d9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810da00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810da04:	2b00      	cmp	r3, #0
 810da06:	d008      	beq.n	810da1a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810da08:	687b      	ldr	r3, [r7, #4]
 810da0a:	681b      	ldr	r3, [r3, #0]
 810da0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810da10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810da12:	6878      	ldr	r0, [r7, #4]
 810da14:	f001 fa1c 	bl	810ee50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810da18:	e051      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810da1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810da1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810da22:	2b00      	cmp	r3, #0
 810da24:	d014      	beq.n	810da50 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810da26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810da2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810da2e:	2b00      	cmp	r3, #0
 810da30:	d105      	bne.n	810da3e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810da32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810da36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810da3a:	2b00      	cmp	r3, #0
 810da3c:	d008      	beq.n	810da50 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 810da3e:	687b      	ldr	r3, [r7, #4]
 810da40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810da42:	2b00      	cmp	r3, #0
 810da44:	d03a      	beq.n	810dabc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 810da46:	687b      	ldr	r3, [r7, #4]
 810da48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810da4a:	6878      	ldr	r0, [r7, #4]
 810da4c:	4798      	blx	r3
    }
    return;
 810da4e:	e035      	b.n	810dabc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810da50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810da54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810da58:	2b00      	cmp	r3, #0
 810da5a:	d009      	beq.n	810da70 <HAL_UART_IRQHandler+0x71c>
 810da5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810da60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810da64:	2b00      	cmp	r3, #0
 810da66:	d003      	beq.n	810da70 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 810da68:	6878      	ldr	r0, [r7, #4]
 810da6a:	f001 f9c6 	bl	810edfa <UART_EndTransmit_IT>
    return;
 810da6e:	e026      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810da70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810da74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810da78:	2b00      	cmp	r3, #0
 810da7a:	d009      	beq.n	810da90 <HAL_UART_IRQHandler+0x73c>
 810da7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810da80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810da84:	2b00      	cmp	r3, #0
 810da86:	d003      	beq.n	810da90 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810da88:	6878      	ldr	r0, [r7, #4]
 810da8a:	f001 f9f5 	bl	810ee78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810da8e:	e016      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810da90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810da94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810da98:	2b00      	cmp	r3, #0
 810da9a:	d010      	beq.n	810dabe <HAL_UART_IRQHandler+0x76a>
 810da9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810daa0:	2b00      	cmp	r3, #0
 810daa2:	da0c      	bge.n	810dabe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810daa4:	6878      	ldr	r0, [r7, #4]
 810daa6:	f001 f9dd 	bl	810ee64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810daaa:	e008      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
      return;
 810daac:	bf00      	nop
 810daae:	e006      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
    return;
 810dab0:	bf00      	nop
 810dab2:	e004      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
      return;
 810dab4:	bf00      	nop
 810dab6:	e002      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
      return;
 810dab8:	bf00      	nop
 810daba:	e000      	b.n	810dabe <HAL_UART_IRQHandler+0x76a>
    return;
 810dabc:	bf00      	nop
  }
}
 810dabe:	37e8      	adds	r7, #232	@ 0xe8
 810dac0:	46bd      	mov	sp, r7
 810dac2:	bd80      	pop	{r7, pc}
 810dac4:	effffffe 	.word	0xeffffffe

0810dac8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810dac8:	b480      	push	{r7}
 810daca:	b083      	sub	sp, #12
 810dacc:	af00      	add	r7, sp, #0
 810dace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810dad0:	bf00      	nop
 810dad2:	370c      	adds	r7, #12
 810dad4:	46bd      	mov	sp, r7
 810dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dada:	4770      	bx	lr

0810dadc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810dadc:	b480      	push	{r7}
 810dade:	b083      	sub	sp, #12
 810dae0:	af00      	add	r7, sp, #0
 810dae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810dae4:	bf00      	nop
 810dae6:	370c      	adds	r7, #12
 810dae8:	46bd      	mov	sp, r7
 810daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810daee:	4770      	bx	lr

0810daf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810daf0:	b480      	push	{r7}
 810daf2:	b083      	sub	sp, #12
 810daf4:	af00      	add	r7, sp, #0
 810daf6:	6078      	str	r0, [r7, #4]
 810daf8:	460b      	mov	r3, r1
 810dafa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810dafc:	bf00      	nop
 810dafe:	370c      	adds	r7, #12
 810db00:	46bd      	mov	sp, r7
 810db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db06:	4770      	bx	lr

0810db08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810db08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810db0c:	b092      	sub	sp, #72	@ 0x48
 810db0e:	af00      	add	r7, sp, #0
 810db10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810db12:	2300      	movs	r3, #0
 810db14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810db18:	697b      	ldr	r3, [r7, #20]
 810db1a:	689a      	ldr	r2, [r3, #8]
 810db1c:	697b      	ldr	r3, [r7, #20]
 810db1e:	691b      	ldr	r3, [r3, #16]
 810db20:	431a      	orrs	r2, r3
 810db22:	697b      	ldr	r3, [r7, #20]
 810db24:	695b      	ldr	r3, [r3, #20]
 810db26:	431a      	orrs	r2, r3
 810db28:	697b      	ldr	r3, [r7, #20]
 810db2a:	69db      	ldr	r3, [r3, #28]
 810db2c:	4313      	orrs	r3, r2
 810db2e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810db30:	697b      	ldr	r3, [r7, #20]
 810db32:	681b      	ldr	r3, [r3, #0]
 810db34:	681a      	ldr	r2, [r3, #0]
 810db36:	4bbe      	ldr	r3, [pc, #760]	@ (810de30 <UART_SetConfig+0x328>)
 810db38:	4013      	ands	r3, r2
 810db3a:	697a      	ldr	r2, [r7, #20]
 810db3c:	6812      	ldr	r2, [r2, #0]
 810db3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810db40:	430b      	orrs	r3, r1
 810db42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810db44:	697b      	ldr	r3, [r7, #20]
 810db46:	681b      	ldr	r3, [r3, #0]
 810db48:	685b      	ldr	r3, [r3, #4]
 810db4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810db4e:	697b      	ldr	r3, [r7, #20]
 810db50:	68da      	ldr	r2, [r3, #12]
 810db52:	697b      	ldr	r3, [r7, #20]
 810db54:	681b      	ldr	r3, [r3, #0]
 810db56:	430a      	orrs	r2, r1
 810db58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810db5a:	697b      	ldr	r3, [r7, #20]
 810db5c:	699b      	ldr	r3, [r3, #24]
 810db5e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810db60:	697b      	ldr	r3, [r7, #20]
 810db62:	681b      	ldr	r3, [r3, #0]
 810db64:	4ab3      	ldr	r2, [pc, #716]	@ (810de34 <UART_SetConfig+0x32c>)
 810db66:	4293      	cmp	r3, r2
 810db68:	d004      	beq.n	810db74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810db6a:	697b      	ldr	r3, [r7, #20]
 810db6c:	6a1b      	ldr	r3, [r3, #32]
 810db6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810db70:	4313      	orrs	r3, r2
 810db72:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810db74:	697b      	ldr	r3, [r7, #20]
 810db76:	681b      	ldr	r3, [r3, #0]
 810db78:	689a      	ldr	r2, [r3, #8]
 810db7a:	4baf      	ldr	r3, [pc, #700]	@ (810de38 <UART_SetConfig+0x330>)
 810db7c:	4013      	ands	r3, r2
 810db7e:	697a      	ldr	r2, [r7, #20]
 810db80:	6812      	ldr	r2, [r2, #0]
 810db82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810db84:	430b      	orrs	r3, r1
 810db86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810db88:	697b      	ldr	r3, [r7, #20]
 810db8a:	681b      	ldr	r3, [r3, #0]
 810db8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810db8e:	f023 010f 	bic.w	r1, r3, #15
 810db92:	697b      	ldr	r3, [r7, #20]
 810db94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810db96:	697b      	ldr	r3, [r7, #20]
 810db98:	681b      	ldr	r3, [r3, #0]
 810db9a:	430a      	orrs	r2, r1
 810db9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810db9e:	697b      	ldr	r3, [r7, #20]
 810dba0:	681b      	ldr	r3, [r3, #0]
 810dba2:	4aa6      	ldr	r2, [pc, #664]	@ (810de3c <UART_SetConfig+0x334>)
 810dba4:	4293      	cmp	r3, r2
 810dba6:	d177      	bne.n	810dc98 <UART_SetConfig+0x190>
 810dba8:	4ba5      	ldr	r3, [pc, #660]	@ (810de40 <UART_SetConfig+0x338>)
 810dbaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810dbac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810dbb0:	2b28      	cmp	r3, #40	@ 0x28
 810dbb2:	d86d      	bhi.n	810dc90 <UART_SetConfig+0x188>
 810dbb4:	a201      	add	r2, pc, #4	@ (adr r2, 810dbbc <UART_SetConfig+0xb4>)
 810dbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dbba:	bf00      	nop
 810dbbc:	0810dc61 	.word	0x0810dc61
 810dbc0:	0810dc91 	.word	0x0810dc91
 810dbc4:	0810dc91 	.word	0x0810dc91
 810dbc8:	0810dc91 	.word	0x0810dc91
 810dbcc:	0810dc91 	.word	0x0810dc91
 810dbd0:	0810dc91 	.word	0x0810dc91
 810dbd4:	0810dc91 	.word	0x0810dc91
 810dbd8:	0810dc91 	.word	0x0810dc91
 810dbdc:	0810dc69 	.word	0x0810dc69
 810dbe0:	0810dc91 	.word	0x0810dc91
 810dbe4:	0810dc91 	.word	0x0810dc91
 810dbe8:	0810dc91 	.word	0x0810dc91
 810dbec:	0810dc91 	.word	0x0810dc91
 810dbf0:	0810dc91 	.word	0x0810dc91
 810dbf4:	0810dc91 	.word	0x0810dc91
 810dbf8:	0810dc91 	.word	0x0810dc91
 810dbfc:	0810dc71 	.word	0x0810dc71
 810dc00:	0810dc91 	.word	0x0810dc91
 810dc04:	0810dc91 	.word	0x0810dc91
 810dc08:	0810dc91 	.word	0x0810dc91
 810dc0c:	0810dc91 	.word	0x0810dc91
 810dc10:	0810dc91 	.word	0x0810dc91
 810dc14:	0810dc91 	.word	0x0810dc91
 810dc18:	0810dc91 	.word	0x0810dc91
 810dc1c:	0810dc79 	.word	0x0810dc79
 810dc20:	0810dc91 	.word	0x0810dc91
 810dc24:	0810dc91 	.word	0x0810dc91
 810dc28:	0810dc91 	.word	0x0810dc91
 810dc2c:	0810dc91 	.word	0x0810dc91
 810dc30:	0810dc91 	.word	0x0810dc91
 810dc34:	0810dc91 	.word	0x0810dc91
 810dc38:	0810dc91 	.word	0x0810dc91
 810dc3c:	0810dc81 	.word	0x0810dc81
 810dc40:	0810dc91 	.word	0x0810dc91
 810dc44:	0810dc91 	.word	0x0810dc91
 810dc48:	0810dc91 	.word	0x0810dc91
 810dc4c:	0810dc91 	.word	0x0810dc91
 810dc50:	0810dc91 	.word	0x0810dc91
 810dc54:	0810dc91 	.word	0x0810dc91
 810dc58:	0810dc91 	.word	0x0810dc91
 810dc5c:	0810dc89 	.word	0x0810dc89
 810dc60:	2301      	movs	r3, #1
 810dc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc66:	e222      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc68:	2304      	movs	r3, #4
 810dc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc6e:	e21e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc70:	2308      	movs	r3, #8
 810dc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc76:	e21a      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc78:	2310      	movs	r3, #16
 810dc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc7e:	e216      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc80:	2320      	movs	r3, #32
 810dc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc86:	e212      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc88:	2340      	movs	r3, #64	@ 0x40
 810dc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc8e:	e20e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc90:	2380      	movs	r3, #128	@ 0x80
 810dc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dc96:	e20a      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dc98:	697b      	ldr	r3, [r7, #20]
 810dc9a:	681b      	ldr	r3, [r3, #0]
 810dc9c:	4a69      	ldr	r2, [pc, #420]	@ (810de44 <UART_SetConfig+0x33c>)
 810dc9e:	4293      	cmp	r3, r2
 810dca0:	d130      	bne.n	810dd04 <UART_SetConfig+0x1fc>
 810dca2:	4b67      	ldr	r3, [pc, #412]	@ (810de40 <UART_SetConfig+0x338>)
 810dca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810dca6:	f003 0307 	and.w	r3, r3, #7
 810dcaa:	2b05      	cmp	r3, #5
 810dcac:	d826      	bhi.n	810dcfc <UART_SetConfig+0x1f4>
 810dcae:	a201      	add	r2, pc, #4	@ (adr r2, 810dcb4 <UART_SetConfig+0x1ac>)
 810dcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dcb4:	0810dccd 	.word	0x0810dccd
 810dcb8:	0810dcd5 	.word	0x0810dcd5
 810dcbc:	0810dcdd 	.word	0x0810dcdd
 810dcc0:	0810dce5 	.word	0x0810dce5
 810dcc4:	0810dced 	.word	0x0810dced
 810dcc8:	0810dcf5 	.word	0x0810dcf5
 810dccc:	2300      	movs	r3, #0
 810dcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dcd2:	e1ec      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dcd4:	2304      	movs	r3, #4
 810dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dcda:	e1e8      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dcdc:	2308      	movs	r3, #8
 810dcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dce2:	e1e4      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dce4:	2310      	movs	r3, #16
 810dce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dcea:	e1e0      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dcec:	2320      	movs	r3, #32
 810dcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dcf2:	e1dc      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dcf4:	2340      	movs	r3, #64	@ 0x40
 810dcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dcfa:	e1d8      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dcfc:	2380      	movs	r3, #128	@ 0x80
 810dcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd02:	e1d4      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd04:	697b      	ldr	r3, [r7, #20]
 810dd06:	681b      	ldr	r3, [r3, #0]
 810dd08:	4a4f      	ldr	r2, [pc, #316]	@ (810de48 <UART_SetConfig+0x340>)
 810dd0a:	4293      	cmp	r3, r2
 810dd0c:	d130      	bne.n	810dd70 <UART_SetConfig+0x268>
 810dd0e:	4b4c      	ldr	r3, [pc, #304]	@ (810de40 <UART_SetConfig+0x338>)
 810dd10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810dd12:	f003 0307 	and.w	r3, r3, #7
 810dd16:	2b05      	cmp	r3, #5
 810dd18:	d826      	bhi.n	810dd68 <UART_SetConfig+0x260>
 810dd1a:	a201      	add	r2, pc, #4	@ (adr r2, 810dd20 <UART_SetConfig+0x218>)
 810dd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dd20:	0810dd39 	.word	0x0810dd39
 810dd24:	0810dd41 	.word	0x0810dd41
 810dd28:	0810dd49 	.word	0x0810dd49
 810dd2c:	0810dd51 	.word	0x0810dd51
 810dd30:	0810dd59 	.word	0x0810dd59
 810dd34:	0810dd61 	.word	0x0810dd61
 810dd38:	2300      	movs	r3, #0
 810dd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd3e:	e1b6      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd40:	2304      	movs	r3, #4
 810dd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd46:	e1b2      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd48:	2308      	movs	r3, #8
 810dd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd4e:	e1ae      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd50:	2310      	movs	r3, #16
 810dd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd56:	e1aa      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd58:	2320      	movs	r3, #32
 810dd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd5e:	e1a6      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd60:	2340      	movs	r3, #64	@ 0x40
 810dd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd66:	e1a2      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd68:	2380      	movs	r3, #128	@ 0x80
 810dd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dd6e:	e19e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dd70:	697b      	ldr	r3, [r7, #20]
 810dd72:	681b      	ldr	r3, [r3, #0]
 810dd74:	4a35      	ldr	r2, [pc, #212]	@ (810de4c <UART_SetConfig+0x344>)
 810dd76:	4293      	cmp	r3, r2
 810dd78:	d130      	bne.n	810dddc <UART_SetConfig+0x2d4>
 810dd7a:	4b31      	ldr	r3, [pc, #196]	@ (810de40 <UART_SetConfig+0x338>)
 810dd7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810dd7e:	f003 0307 	and.w	r3, r3, #7
 810dd82:	2b05      	cmp	r3, #5
 810dd84:	d826      	bhi.n	810ddd4 <UART_SetConfig+0x2cc>
 810dd86:	a201      	add	r2, pc, #4	@ (adr r2, 810dd8c <UART_SetConfig+0x284>)
 810dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dd8c:	0810dda5 	.word	0x0810dda5
 810dd90:	0810ddad 	.word	0x0810ddad
 810dd94:	0810ddb5 	.word	0x0810ddb5
 810dd98:	0810ddbd 	.word	0x0810ddbd
 810dd9c:	0810ddc5 	.word	0x0810ddc5
 810dda0:	0810ddcd 	.word	0x0810ddcd
 810dda4:	2300      	movs	r3, #0
 810dda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddaa:	e180      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810ddac:	2304      	movs	r3, #4
 810ddae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddb2:	e17c      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810ddb4:	2308      	movs	r3, #8
 810ddb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddba:	e178      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810ddbc:	2310      	movs	r3, #16
 810ddbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddc2:	e174      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810ddc4:	2320      	movs	r3, #32
 810ddc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddca:	e170      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810ddcc:	2340      	movs	r3, #64	@ 0x40
 810ddce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddd2:	e16c      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810ddd4:	2380      	movs	r3, #128	@ 0x80
 810ddd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ddda:	e168      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dddc:	697b      	ldr	r3, [r7, #20]
 810ddde:	681b      	ldr	r3, [r3, #0]
 810dde0:	4a1b      	ldr	r2, [pc, #108]	@ (810de50 <UART_SetConfig+0x348>)
 810dde2:	4293      	cmp	r3, r2
 810dde4:	d142      	bne.n	810de6c <UART_SetConfig+0x364>
 810dde6:	4b16      	ldr	r3, [pc, #88]	@ (810de40 <UART_SetConfig+0x338>)
 810dde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ddea:	f003 0307 	and.w	r3, r3, #7
 810ddee:	2b05      	cmp	r3, #5
 810ddf0:	d838      	bhi.n	810de64 <UART_SetConfig+0x35c>
 810ddf2:	a201      	add	r2, pc, #4	@ (adr r2, 810ddf8 <UART_SetConfig+0x2f0>)
 810ddf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ddf8:	0810de11 	.word	0x0810de11
 810ddfc:	0810de19 	.word	0x0810de19
 810de00:	0810de21 	.word	0x0810de21
 810de04:	0810de29 	.word	0x0810de29
 810de08:	0810de55 	.word	0x0810de55
 810de0c:	0810de5d 	.word	0x0810de5d
 810de10:	2300      	movs	r3, #0
 810de12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de16:	e14a      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de18:	2304      	movs	r3, #4
 810de1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de1e:	e146      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de20:	2308      	movs	r3, #8
 810de22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de26:	e142      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de28:	2310      	movs	r3, #16
 810de2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de2e:	e13e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de30:	cfff69f3 	.word	0xcfff69f3
 810de34:	58000c00 	.word	0x58000c00
 810de38:	11fff4ff 	.word	0x11fff4ff
 810de3c:	40011000 	.word	0x40011000
 810de40:	58024400 	.word	0x58024400
 810de44:	40004400 	.word	0x40004400
 810de48:	40004800 	.word	0x40004800
 810de4c:	40004c00 	.word	0x40004c00
 810de50:	40005000 	.word	0x40005000
 810de54:	2320      	movs	r3, #32
 810de56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de5a:	e128      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de5c:	2340      	movs	r3, #64	@ 0x40
 810de5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de62:	e124      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de64:	2380      	movs	r3, #128	@ 0x80
 810de66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810de6a:	e120      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810de6c:	697b      	ldr	r3, [r7, #20]
 810de6e:	681b      	ldr	r3, [r3, #0]
 810de70:	4acb      	ldr	r2, [pc, #812]	@ (810e1a0 <UART_SetConfig+0x698>)
 810de72:	4293      	cmp	r3, r2
 810de74:	d176      	bne.n	810df64 <UART_SetConfig+0x45c>
 810de76:	4bcb      	ldr	r3, [pc, #812]	@ (810e1a4 <UART_SetConfig+0x69c>)
 810de78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810de7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810de7e:	2b28      	cmp	r3, #40	@ 0x28
 810de80:	d86c      	bhi.n	810df5c <UART_SetConfig+0x454>
 810de82:	a201      	add	r2, pc, #4	@ (adr r2, 810de88 <UART_SetConfig+0x380>)
 810de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810de88:	0810df2d 	.word	0x0810df2d
 810de8c:	0810df5d 	.word	0x0810df5d
 810de90:	0810df5d 	.word	0x0810df5d
 810de94:	0810df5d 	.word	0x0810df5d
 810de98:	0810df5d 	.word	0x0810df5d
 810de9c:	0810df5d 	.word	0x0810df5d
 810dea0:	0810df5d 	.word	0x0810df5d
 810dea4:	0810df5d 	.word	0x0810df5d
 810dea8:	0810df35 	.word	0x0810df35
 810deac:	0810df5d 	.word	0x0810df5d
 810deb0:	0810df5d 	.word	0x0810df5d
 810deb4:	0810df5d 	.word	0x0810df5d
 810deb8:	0810df5d 	.word	0x0810df5d
 810debc:	0810df5d 	.word	0x0810df5d
 810dec0:	0810df5d 	.word	0x0810df5d
 810dec4:	0810df5d 	.word	0x0810df5d
 810dec8:	0810df3d 	.word	0x0810df3d
 810decc:	0810df5d 	.word	0x0810df5d
 810ded0:	0810df5d 	.word	0x0810df5d
 810ded4:	0810df5d 	.word	0x0810df5d
 810ded8:	0810df5d 	.word	0x0810df5d
 810dedc:	0810df5d 	.word	0x0810df5d
 810dee0:	0810df5d 	.word	0x0810df5d
 810dee4:	0810df5d 	.word	0x0810df5d
 810dee8:	0810df45 	.word	0x0810df45
 810deec:	0810df5d 	.word	0x0810df5d
 810def0:	0810df5d 	.word	0x0810df5d
 810def4:	0810df5d 	.word	0x0810df5d
 810def8:	0810df5d 	.word	0x0810df5d
 810defc:	0810df5d 	.word	0x0810df5d
 810df00:	0810df5d 	.word	0x0810df5d
 810df04:	0810df5d 	.word	0x0810df5d
 810df08:	0810df4d 	.word	0x0810df4d
 810df0c:	0810df5d 	.word	0x0810df5d
 810df10:	0810df5d 	.word	0x0810df5d
 810df14:	0810df5d 	.word	0x0810df5d
 810df18:	0810df5d 	.word	0x0810df5d
 810df1c:	0810df5d 	.word	0x0810df5d
 810df20:	0810df5d 	.word	0x0810df5d
 810df24:	0810df5d 	.word	0x0810df5d
 810df28:	0810df55 	.word	0x0810df55
 810df2c:	2301      	movs	r3, #1
 810df2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df32:	e0bc      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df34:	2304      	movs	r3, #4
 810df36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df3a:	e0b8      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df3c:	2308      	movs	r3, #8
 810df3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df42:	e0b4      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df44:	2310      	movs	r3, #16
 810df46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df4a:	e0b0      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df4c:	2320      	movs	r3, #32
 810df4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df52:	e0ac      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df54:	2340      	movs	r3, #64	@ 0x40
 810df56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df5a:	e0a8      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df5c:	2380      	movs	r3, #128	@ 0x80
 810df5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df62:	e0a4      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810df64:	697b      	ldr	r3, [r7, #20]
 810df66:	681b      	ldr	r3, [r3, #0]
 810df68:	4a8f      	ldr	r2, [pc, #572]	@ (810e1a8 <UART_SetConfig+0x6a0>)
 810df6a:	4293      	cmp	r3, r2
 810df6c:	d130      	bne.n	810dfd0 <UART_SetConfig+0x4c8>
 810df6e:	4b8d      	ldr	r3, [pc, #564]	@ (810e1a4 <UART_SetConfig+0x69c>)
 810df70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810df72:	f003 0307 	and.w	r3, r3, #7
 810df76:	2b05      	cmp	r3, #5
 810df78:	d826      	bhi.n	810dfc8 <UART_SetConfig+0x4c0>
 810df7a:	a201      	add	r2, pc, #4	@ (adr r2, 810df80 <UART_SetConfig+0x478>)
 810df7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810df80:	0810df99 	.word	0x0810df99
 810df84:	0810dfa1 	.word	0x0810dfa1
 810df88:	0810dfa9 	.word	0x0810dfa9
 810df8c:	0810dfb1 	.word	0x0810dfb1
 810df90:	0810dfb9 	.word	0x0810dfb9
 810df94:	0810dfc1 	.word	0x0810dfc1
 810df98:	2300      	movs	r3, #0
 810df9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810df9e:	e086      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfa0:	2304      	movs	r3, #4
 810dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dfa6:	e082      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfa8:	2308      	movs	r3, #8
 810dfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dfae:	e07e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfb0:	2310      	movs	r3, #16
 810dfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dfb6:	e07a      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfb8:	2320      	movs	r3, #32
 810dfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dfbe:	e076      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfc0:	2340      	movs	r3, #64	@ 0x40
 810dfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dfc6:	e072      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfc8:	2380      	movs	r3, #128	@ 0x80
 810dfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810dfce:	e06e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810dfd0:	697b      	ldr	r3, [r7, #20]
 810dfd2:	681b      	ldr	r3, [r3, #0]
 810dfd4:	4a75      	ldr	r2, [pc, #468]	@ (810e1ac <UART_SetConfig+0x6a4>)
 810dfd6:	4293      	cmp	r3, r2
 810dfd8:	d130      	bne.n	810e03c <UART_SetConfig+0x534>
 810dfda:	4b72      	ldr	r3, [pc, #456]	@ (810e1a4 <UART_SetConfig+0x69c>)
 810dfdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810dfde:	f003 0307 	and.w	r3, r3, #7
 810dfe2:	2b05      	cmp	r3, #5
 810dfe4:	d826      	bhi.n	810e034 <UART_SetConfig+0x52c>
 810dfe6:	a201      	add	r2, pc, #4	@ (adr r2, 810dfec <UART_SetConfig+0x4e4>)
 810dfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dfec:	0810e005 	.word	0x0810e005
 810dff0:	0810e00d 	.word	0x0810e00d
 810dff4:	0810e015 	.word	0x0810e015
 810dff8:	0810e01d 	.word	0x0810e01d
 810dffc:	0810e025 	.word	0x0810e025
 810e000:	0810e02d 	.word	0x0810e02d
 810e004:	2300      	movs	r3, #0
 810e006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e00a:	e050      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e00c:	2304      	movs	r3, #4
 810e00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e012:	e04c      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e014:	2308      	movs	r3, #8
 810e016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e01a:	e048      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e01c:	2310      	movs	r3, #16
 810e01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e022:	e044      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e024:	2320      	movs	r3, #32
 810e026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e02a:	e040      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e02c:	2340      	movs	r3, #64	@ 0x40
 810e02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e032:	e03c      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e034:	2380      	movs	r3, #128	@ 0x80
 810e036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e03a:	e038      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e03c:	697b      	ldr	r3, [r7, #20]
 810e03e:	681b      	ldr	r3, [r3, #0]
 810e040:	4a5b      	ldr	r2, [pc, #364]	@ (810e1b0 <UART_SetConfig+0x6a8>)
 810e042:	4293      	cmp	r3, r2
 810e044:	d130      	bne.n	810e0a8 <UART_SetConfig+0x5a0>
 810e046:	4b57      	ldr	r3, [pc, #348]	@ (810e1a4 <UART_SetConfig+0x69c>)
 810e048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e04a:	f003 0307 	and.w	r3, r3, #7
 810e04e:	2b05      	cmp	r3, #5
 810e050:	d826      	bhi.n	810e0a0 <UART_SetConfig+0x598>
 810e052:	a201      	add	r2, pc, #4	@ (adr r2, 810e058 <UART_SetConfig+0x550>)
 810e054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e058:	0810e071 	.word	0x0810e071
 810e05c:	0810e079 	.word	0x0810e079
 810e060:	0810e081 	.word	0x0810e081
 810e064:	0810e089 	.word	0x0810e089
 810e068:	0810e091 	.word	0x0810e091
 810e06c:	0810e099 	.word	0x0810e099
 810e070:	2302      	movs	r3, #2
 810e072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e076:	e01a      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e078:	2304      	movs	r3, #4
 810e07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e07e:	e016      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e080:	2308      	movs	r3, #8
 810e082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e086:	e012      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e088:	2310      	movs	r3, #16
 810e08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e08e:	e00e      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e090:	2320      	movs	r3, #32
 810e092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e096:	e00a      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e098:	2340      	movs	r3, #64	@ 0x40
 810e09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e09e:	e006      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e0a0:	2380      	movs	r3, #128	@ 0x80
 810e0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810e0a6:	e002      	b.n	810e0ae <UART_SetConfig+0x5a6>
 810e0a8:	2380      	movs	r3, #128	@ 0x80
 810e0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810e0ae:	697b      	ldr	r3, [r7, #20]
 810e0b0:	681b      	ldr	r3, [r3, #0]
 810e0b2:	4a3f      	ldr	r2, [pc, #252]	@ (810e1b0 <UART_SetConfig+0x6a8>)
 810e0b4:	4293      	cmp	r3, r2
 810e0b6:	f040 80f8 	bne.w	810e2aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810e0ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810e0be:	2b20      	cmp	r3, #32
 810e0c0:	dc46      	bgt.n	810e150 <UART_SetConfig+0x648>
 810e0c2:	2b02      	cmp	r3, #2
 810e0c4:	f2c0 8082 	blt.w	810e1cc <UART_SetConfig+0x6c4>
 810e0c8:	3b02      	subs	r3, #2
 810e0ca:	2b1e      	cmp	r3, #30
 810e0cc:	d87e      	bhi.n	810e1cc <UART_SetConfig+0x6c4>
 810e0ce:	a201      	add	r2, pc, #4	@ (adr r2, 810e0d4 <UART_SetConfig+0x5cc>)
 810e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e0d4:	0810e157 	.word	0x0810e157
 810e0d8:	0810e1cd 	.word	0x0810e1cd
 810e0dc:	0810e15f 	.word	0x0810e15f
 810e0e0:	0810e1cd 	.word	0x0810e1cd
 810e0e4:	0810e1cd 	.word	0x0810e1cd
 810e0e8:	0810e1cd 	.word	0x0810e1cd
 810e0ec:	0810e16f 	.word	0x0810e16f
 810e0f0:	0810e1cd 	.word	0x0810e1cd
 810e0f4:	0810e1cd 	.word	0x0810e1cd
 810e0f8:	0810e1cd 	.word	0x0810e1cd
 810e0fc:	0810e1cd 	.word	0x0810e1cd
 810e100:	0810e1cd 	.word	0x0810e1cd
 810e104:	0810e1cd 	.word	0x0810e1cd
 810e108:	0810e1cd 	.word	0x0810e1cd
 810e10c:	0810e17f 	.word	0x0810e17f
 810e110:	0810e1cd 	.word	0x0810e1cd
 810e114:	0810e1cd 	.word	0x0810e1cd
 810e118:	0810e1cd 	.word	0x0810e1cd
 810e11c:	0810e1cd 	.word	0x0810e1cd
 810e120:	0810e1cd 	.word	0x0810e1cd
 810e124:	0810e1cd 	.word	0x0810e1cd
 810e128:	0810e1cd 	.word	0x0810e1cd
 810e12c:	0810e1cd 	.word	0x0810e1cd
 810e130:	0810e1cd 	.word	0x0810e1cd
 810e134:	0810e1cd 	.word	0x0810e1cd
 810e138:	0810e1cd 	.word	0x0810e1cd
 810e13c:	0810e1cd 	.word	0x0810e1cd
 810e140:	0810e1cd 	.word	0x0810e1cd
 810e144:	0810e1cd 	.word	0x0810e1cd
 810e148:	0810e1cd 	.word	0x0810e1cd
 810e14c:	0810e1bf 	.word	0x0810e1bf
 810e150:	2b40      	cmp	r3, #64	@ 0x40
 810e152:	d037      	beq.n	810e1c4 <UART_SetConfig+0x6bc>
 810e154:	e03a      	b.n	810e1cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810e156:	f7fd fe05 	bl	810bd64 <HAL_RCCEx_GetD3PCLK1Freq>
 810e15a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810e15c:	e03c      	b.n	810e1d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810e15e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810e162:	4618      	mov	r0, r3
 810e164:	f7fd fe14 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810e168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e16c:	e034      	b.n	810e1d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810e16e:	f107 0318 	add.w	r3, r7, #24
 810e172:	4618      	mov	r0, r3
 810e174:	f7fd ff60 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810e178:	69fb      	ldr	r3, [r7, #28]
 810e17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e17c:	e02c      	b.n	810e1d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810e17e:	4b09      	ldr	r3, [pc, #36]	@ (810e1a4 <UART_SetConfig+0x69c>)
 810e180:	681b      	ldr	r3, [r3, #0]
 810e182:	f003 0320 	and.w	r3, r3, #32
 810e186:	2b00      	cmp	r3, #0
 810e188:	d016      	beq.n	810e1b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810e18a:	4b06      	ldr	r3, [pc, #24]	@ (810e1a4 <UART_SetConfig+0x69c>)
 810e18c:	681b      	ldr	r3, [r3, #0]
 810e18e:	08db      	lsrs	r3, r3, #3
 810e190:	f003 0303 	and.w	r3, r3, #3
 810e194:	4a07      	ldr	r2, [pc, #28]	@ (810e1b4 <UART_SetConfig+0x6ac>)
 810e196:	fa22 f303 	lsr.w	r3, r2, r3
 810e19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810e19c:	e01c      	b.n	810e1d8 <UART_SetConfig+0x6d0>
 810e19e:	bf00      	nop
 810e1a0:	40011400 	.word	0x40011400
 810e1a4:	58024400 	.word	0x58024400
 810e1a8:	40007800 	.word	0x40007800
 810e1ac:	40007c00 	.word	0x40007c00
 810e1b0:	58000c00 	.word	0x58000c00
 810e1b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810e1b8:	4b9d      	ldr	r3, [pc, #628]	@ (810e430 <UART_SetConfig+0x928>)
 810e1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e1bc:	e00c      	b.n	810e1d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810e1be:	4b9d      	ldr	r3, [pc, #628]	@ (810e434 <UART_SetConfig+0x92c>)
 810e1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e1c2:	e009      	b.n	810e1d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810e1c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810e1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e1ca:	e005      	b.n	810e1d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810e1cc:	2300      	movs	r3, #0
 810e1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810e1d0:	2301      	movs	r3, #1
 810e1d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810e1d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810e1d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e1da:	2b00      	cmp	r3, #0
 810e1dc:	f000 81de 	beq.w	810e59c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810e1e0:	697b      	ldr	r3, [r7, #20]
 810e1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e1e4:	4a94      	ldr	r2, [pc, #592]	@ (810e438 <UART_SetConfig+0x930>)
 810e1e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e1ea:	461a      	mov	r2, r3
 810e1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e1ee:	fbb3 f3f2 	udiv	r3, r3, r2
 810e1f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810e1f4:	697b      	ldr	r3, [r7, #20]
 810e1f6:	685a      	ldr	r2, [r3, #4]
 810e1f8:	4613      	mov	r3, r2
 810e1fa:	005b      	lsls	r3, r3, #1
 810e1fc:	4413      	add	r3, r2
 810e1fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e200:	429a      	cmp	r2, r3
 810e202:	d305      	bcc.n	810e210 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810e204:	697b      	ldr	r3, [r7, #20]
 810e206:	685b      	ldr	r3, [r3, #4]
 810e208:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810e20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e20c:	429a      	cmp	r2, r3
 810e20e:	d903      	bls.n	810e218 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810e210:	2301      	movs	r3, #1
 810e212:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810e216:	e1c1      	b.n	810e59c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810e218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e21a:	2200      	movs	r2, #0
 810e21c:	60bb      	str	r3, [r7, #8]
 810e21e:	60fa      	str	r2, [r7, #12]
 810e220:	697b      	ldr	r3, [r7, #20]
 810e222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e224:	4a84      	ldr	r2, [pc, #528]	@ (810e438 <UART_SetConfig+0x930>)
 810e226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e22a:	b29b      	uxth	r3, r3
 810e22c:	2200      	movs	r2, #0
 810e22e:	603b      	str	r3, [r7, #0]
 810e230:	607a      	str	r2, [r7, #4]
 810e232:	e9d7 2300 	ldrd	r2, r3, [r7]
 810e236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810e23a:	f7f2 f8b9 	bl	81003b0 <__aeabi_uldivmod>
 810e23e:	4602      	mov	r2, r0
 810e240:	460b      	mov	r3, r1
 810e242:	4610      	mov	r0, r2
 810e244:	4619      	mov	r1, r3
 810e246:	f04f 0200 	mov.w	r2, #0
 810e24a:	f04f 0300 	mov.w	r3, #0
 810e24e:	020b      	lsls	r3, r1, #8
 810e250:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810e254:	0202      	lsls	r2, r0, #8
 810e256:	6979      	ldr	r1, [r7, #20]
 810e258:	6849      	ldr	r1, [r1, #4]
 810e25a:	0849      	lsrs	r1, r1, #1
 810e25c:	2000      	movs	r0, #0
 810e25e:	460c      	mov	r4, r1
 810e260:	4605      	mov	r5, r0
 810e262:	eb12 0804 	adds.w	r8, r2, r4
 810e266:	eb43 0905 	adc.w	r9, r3, r5
 810e26a:	697b      	ldr	r3, [r7, #20]
 810e26c:	685b      	ldr	r3, [r3, #4]
 810e26e:	2200      	movs	r2, #0
 810e270:	469a      	mov	sl, r3
 810e272:	4693      	mov	fp, r2
 810e274:	4652      	mov	r2, sl
 810e276:	465b      	mov	r3, fp
 810e278:	4640      	mov	r0, r8
 810e27a:	4649      	mov	r1, r9
 810e27c:	f7f2 f898 	bl	81003b0 <__aeabi_uldivmod>
 810e280:	4602      	mov	r2, r0
 810e282:	460b      	mov	r3, r1
 810e284:	4613      	mov	r3, r2
 810e286:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810e288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e28a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810e28e:	d308      	bcc.n	810e2a2 <UART_SetConfig+0x79a>
 810e290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810e296:	d204      	bcs.n	810e2a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810e298:	697b      	ldr	r3, [r7, #20]
 810e29a:	681b      	ldr	r3, [r3, #0]
 810e29c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810e29e:	60da      	str	r2, [r3, #12]
 810e2a0:	e17c      	b.n	810e59c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810e2a2:	2301      	movs	r3, #1
 810e2a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810e2a8:	e178      	b.n	810e59c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810e2aa:	697b      	ldr	r3, [r7, #20]
 810e2ac:	69db      	ldr	r3, [r3, #28]
 810e2ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810e2b2:	f040 80c5 	bne.w	810e440 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810e2b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810e2ba:	2b20      	cmp	r3, #32
 810e2bc:	dc48      	bgt.n	810e350 <UART_SetConfig+0x848>
 810e2be:	2b00      	cmp	r3, #0
 810e2c0:	db7b      	blt.n	810e3ba <UART_SetConfig+0x8b2>
 810e2c2:	2b20      	cmp	r3, #32
 810e2c4:	d879      	bhi.n	810e3ba <UART_SetConfig+0x8b2>
 810e2c6:	a201      	add	r2, pc, #4	@ (adr r2, 810e2cc <UART_SetConfig+0x7c4>)
 810e2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e2cc:	0810e357 	.word	0x0810e357
 810e2d0:	0810e35f 	.word	0x0810e35f
 810e2d4:	0810e3bb 	.word	0x0810e3bb
 810e2d8:	0810e3bb 	.word	0x0810e3bb
 810e2dc:	0810e367 	.word	0x0810e367
 810e2e0:	0810e3bb 	.word	0x0810e3bb
 810e2e4:	0810e3bb 	.word	0x0810e3bb
 810e2e8:	0810e3bb 	.word	0x0810e3bb
 810e2ec:	0810e377 	.word	0x0810e377
 810e2f0:	0810e3bb 	.word	0x0810e3bb
 810e2f4:	0810e3bb 	.word	0x0810e3bb
 810e2f8:	0810e3bb 	.word	0x0810e3bb
 810e2fc:	0810e3bb 	.word	0x0810e3bb
 810e300:	0810e3bb 	.word	0x0810e3bb
 810e304:	0810e3bb 	.word	0x0810e3bb
 810e308:	0810e3bb 	.word	0x0810e3bb
 810e30c:	0810e387 	.word	0x0810e387
 810e310:	0810e3bb 	.word	0x0810e3bb
 810e314:	0810e3bb 	.word	0x0810e3bb
 810e318:	0810e3bb 	.word	0x0810e3bb
 810e31c:	0810e3bb 	.word	0x0810e3bb
 810e320:	0810e3bb 	.word	0x0810e3bb
 810e324:	0810e3bb 	.word	0x0810e3bb
 810e328:	0810e3bb 	.word	0x0810e3bb
 810e32c:	0810e3bb 	.word	0x0810e3bb
 810e330:	0810e3bb 	.word	0x0810e3bb
 810e334:	0810e3bb 	.word	0x0810e3bb
 810e338:	0810e3bb 	.word	0x0810e3bb
 810e33c:	0810e3bb 	.word	0x0810e3bb
 810e340:	0810e3bb 	.word	0x0810e3bb
 810e344:	0810e3bb 	.word	0x0810e3bb
 810e348:	0810e3bb 	.word	0x0810e3bb
 810e34c:	0810e3ad 	.word	0x0810e3ad
 810e350:	2b40      	cmp	r3, #64	@ 0x40
 810e352:	d02e      	beq.n	810e3b2 <UART_SetConfig+0x8aa>
 810e354:	e031      	b.n	810e3ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810e356:	f7fb fccd 	bl	8109cf4 <HAL_RCC_GetPCLK1Freq>
 810e35a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810e35c:	e033      	b.n	810e3c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810e35e:	f7fb fcdf 	bl	8109d20 <HAL_RCC_GetPCLK2Freq>
 810e362:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810e364:	e02f      	b.n	810e3c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810e366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810e36a:	4618      	mov	r0, r3
 810e36c:	f7fd fd10 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810e370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e374:	e027      	b.n	810e3c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810e376:	f107 0318 	add.w	r3, r7, #24
 810e37a:	4618      	mov	r0, r3
 810e37c:	f7fd fe5c 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810e380:	69fb      	ldr	r3, [r7, #28]
 810e382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e384:	e01f      	b.n	810e3c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810e386:	4b2d      	ldr	r3, [pc, #180]	@ (810e43c <UART_SetConfig+0x934>)
 810e388:	681b      	ldr	r3, [r3, #0]
 810e38a:	f003 0320 	and.w	r3, r3, #32
 810e38e:	2b00      	cmp	r3, #0
 810e390:	d009      	beq.n	810e3a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810e392:	4b2a      	ldr	r3, [pc, #168]	@ (810e43c <UART_SetConfig+0x934>)
 810e394:	681b      	ldr	r3, [r3, #0]
 810e396:	08db      	lsrs	r3, r3, #3
 810e398:	f003 0303 	and.w	r3, r3, #3
 810e39c:	4a24      	ldr	r2, [pc, #144]	@ (810e430 <UART_SetConfig+0x928>)
 810e39e:	fa22 f303 	lsr.w	r3, r2, r3
 810e3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810e3a4:	e00f      	b.n	810e3c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810e3a6:	4b22      	ldr	r3, [pc, #136]	@ (810e430 <UART_SetConfig+0x928>)
 810e3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e3aa:	e00c      	b.n	810e3c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810e3ac:	4b21      	ldr	r3, [pc, #132]	@ (810e434 <UART_SetConfig+0x92c>)
 810e3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e3b0:	e009      	b.n	810e3c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810e3b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810e3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e3b8:	e005      	b.n	810e3c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810e3ba:	2300      	movs	r3, #0
 810e3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810e3be:	2301      	movs	r3, #1
 810e3c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810e3c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810e3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e3c8:	2b00      	cmp	r3, #0
 810e3ca:	f000 80e7 	beq.w	810e59c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810e3ce:	697b      	ldr	r3, [r7, #20]
 810e3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e3d2:	4a19      	ldr	r2, [pc, #100]	@ (810e438 <UART_SetConfig+0x930>)
 810e3d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e3d8:	461a      	mov	r2, r3
 810e3da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e3dc:	fbb3 f3f2 	udiv	r3, r3, r2
 810e3e0:	005a      	lsls	r2, r3, #1
 810e3e2:	697b      	ldr	r3, [r7, #20]
 810e3e4:	685b      	ldr	r3, [r3, #4]
 810e3e6:	085b      	lsrs	r3, r3, #1
 810e3e8:	441a      	add	r2, r3
 810e3ea:	697b      	ldr	r3, [r7, #20]
 810e3ec:	685b      	ldr	r3, [r3, #4]
 810e3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 810e3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810e3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e3f6:	2b0f      	cmp	r3, #15
 810e3f8:	d916      	bls.n	810e428 <UART_SetConfig+0x920>
 810e3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e3fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810e400:	d212      	bcs.n	810e428 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810e402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e404:	b29b      	uxth	r3, r3
 810e406:	f023 030f 	bic.w	r3, r3, #15
 810e40a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810e40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e40e:	085b      	lsrs	r3, r3, #1
 810e410:	b29b      	uxth	r3, r3
 810e412:	f003 0307 	and.w	r3, r3, #7
 810e416:	b29a      	uxth	r2, r3
 810e418:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810e41a:	4313      	orrs	r3, r2
 810e41c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810e41e:	697b      	ldr	r3, [r7, #20]
 810e420:	681b      	ldr	r3, [r3, #0]
 810e422:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810e424:	60da      	str	r2, [r3, #12]
 810e426:	e0b9      	b.n	810e59c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810e428:	2301      	movs	r3, #1
 810e42a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810e42e:	e0b5      	b.n	810e59c <UART_SetConfig+0xa94>
 810e430:	03d09000 	.word	0x03d09000
 810e434:	003d0900 	.word	0x003d0900
 810e438:	0812891c 	.word	0x0812891c
 810e43c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810e440:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810e444:	2b20      	cmp	r3, #32
 810e446:	dc49      	bgt.n	810e4dc <UART_SetConfig+0x9d4>
 810e448:	2b00      	cmp	r3, #0
 810e44a:	db7c      	blt.n	810e546 <UART_SetConfig+0xa3e>
 810e44c:	2b20      	cmp	r3, #32
 810e44e:	d87a      	bhi.n	810e546 <UART_SetConfig+0xa3e>
 810e450:	a201      	add	r2, pc, #4	@ (adr r2, 810e458 <UART_SetConfig+0x950>)
 810e452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e456:	bf00      	nop
 810e458:	0810e4e3 	.word	0x0810e4e3
 810e45c:	0810e4eb 	.word	0x0810e4eb
 810e460:	0810e547 	.word	0x0810e547
 810e464:	0810e547 	.word	0x0810e547
 810e468:	0810e4f3 	.word	0x0810e4f3
 810e46c:	0810e547 	.word	0x0810e547
 810e470:	0810e547 	.word	0x0810e547
 810e474:	0810e547 	.word	0x0810e547
 810e478:	0810e503 	.word	0x0810e503
 810e47c:	0810e547 	.word	0x0810e547
 810e480:	0810e547 	.word	0x0810e547
 810e484:	0810e547 	.word	0x0810e547
 810e488:	0810e547 	.word	0x0810e547
 810e48c:	0810e547 	.word	0x0810e547
 810e490:	0810e547 	.word	0x0810e547
 810e494:	0810e547 	.word	0x0810e547
 810e498:	0810e513 	.word	0x0810e513
 810e49c:	0810e547 	.word	0x0810e547
 810e4a0:	0810e547 	.word	0x0810e547
 810e4a4:	0810e547 	.word	0x0810e547
 810e4a8:	0810e547 	.word	0x0810e547
 810e4ac:	0810e547 	.word	0x0810e547
 810e4b0:	0810e547 	.word	0x0810e547
 810e4b4:	0810e547 	.word	0x0810e547
 810e4b8:	0810e547 	.word	0x0810e547
 810e4bc:	0810e547 	.word	0x0810e547
 810e4c0:	0810e547 	.word	0x0810e547
 810e4c4:	0810e547 	.word	0x0810e547
 810e4c8:	0810e547 	.word	0x0810e547
 810e4cc:	0810e547 	.word	0x0810e547
 810e4d0:	0810e547 	.word	0x0810e547
 810e4d4:	0810e547 	.word	0x0810e547
 810e4d8:	0810e539 	.word	0x0810e539
 810e4dc:	2b40      	cmp	r3, #64	@ 0x40
 810e4de:	d02e      	beq.n	810e53e <UART_SetConfig+0xa36>
 810e4e0:	e031      	b.n	810e546 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810e4e2:	f7fb fc07 	bl	8109cf4 <HAL_RCC_GetPCLK1Freq>
 810e4e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810e4e8:	e033      	b.n	810e552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810e4ea:	f7fb fc19 	bl	8109d20 <HAL_RCC_GetPCLK2Freq>
 810e4ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810e4f0:	e02f      	b.n	810e552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810e4f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810e4f6:	4618      	mov	r0, r3
 810e4f8:	f7fd fc4a 	bl	810bd90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810e4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e500:	e027      	b.n	810e552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810e502:	f107 0318 	add.w	r3, r7, #24
 810e506:	4618      	mov	r0, r3
 810e508:	f7fd fd96 	bl	810c038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810e50c:	69fb      	ldr	r3, [r7, #28]
 810e50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e510:	e01f      	b.n	810e552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810e512:	4b2d      	ldr	r3, [pc, #180]	@ (810e5c8 <UART_SetConfig+0xac0>)
 810e514:	681b      	ldr	r3, [r3, #0]
 810e516:	f003 0320 	and.w	r3, r3, #32
 810e51a:	2b00      	cmp	r3, #0
 810e51c:	d009      	beq.n	810e532 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810e51e:	4b2a      	ldr	r3, [pc, #168]	@ (810e5c8 <UART_SetConfig+0xac0>)
 810e520:	681b      	ldr	r3, [r3, #0]
 810e522:	08db      	lsrs	r3, r3, #3
 810e524:	f003 0303 	and.w	r3, r3, #3
 810e528:	4a28      	ldr	r2, [pc, #160]	@ (810e5cc <UART_SetConfig+0xac4>)
 810e52a:	fa22 f303 	lsr.w	r3, r2, r3
 810e52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810e530:	e00f      	b.n	810e552 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810e532:	4b26      	ldr	r3, [pc, #152]	@ (810e5cc <UART_SetConfig+0xac4>)
 810e534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e536:	e00c      	b.n	810e552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810e538:	4b25      	ldr	r3, [pc, #148]	@ (810e5d0 <UART_SetConfig+0xac8>)
 810e53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e53c:	e009      	b.n	810e552 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810e53e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810e542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810e544:	e005      	b.n	810e552 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810e546:	2300      	movs	r3, #0
 810e548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810e54a:	2301      	movs	r3, #1
 810e54c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810e550:	bf00      	nop
    }

    if (pclk != 0U)
 810e552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e554:	2b00      	cmp	r3, #0
 810e556:	d021      	beq.n	810e59c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810e558:	697b      	ldr	r3, [r7, #20]
 810e55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e55c:	4a1d      	ldr	r2, [pc, #116]	@ (810e5d4 <UART_SetConfig+0xacc>)
 810e55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e562:	461a      	mov	r2, r3
 810e564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e566:	fbb3 f2f2 	udiv	r2, r3, r2
 810e56a:	697b      	ldr	r3, [r7, #20]
 810e56c:	685b      	ldr	r3, [r3, #4]
 810e56e:	085b      	lsrs	r3, r3, #1
 810e570:	441a      	add	r2, r3
 810e572:	697b      	ldr	r3, [r7, #20]
 810e574:	685b      	ldr	r3, [r3, #4]
 810e576:	fbb2 f3f3 	udiv	r3, r2, r3
 810e57a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810e57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e57e:	2b0f      	cmp	r3, #15
 810e580:	d909      	bls.n	810e596 <UART_SetConfig+0xa8e>
 810e582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810e588:	d205      	bcs.n	810e596 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810e58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e58c:	b29a      	uxth	r2, r3
 810e58e:	697b      	ldr	r3, [r7, #20]
 810e590:	681b      	ldr	r3, [r3, #0]
 810e592:	60da      	str	r2, [r3, #12]
 810e594:	e002      	b.n	810e59c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810e596:	2301      	movs	r3, #1
 810e598:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810e59c:	697b      	ldr	r3, [r7, #20]
 810e59e:	2201      	movs	r2, #1
 810e5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810e5a4:	697b      	ldr	r3, [r7, #20]
 810e5a6:	2201      	movs	r2, #1
 810e5a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810e5ac:	697b      	ldr	r3, [r7, #20]
 810e5ae:	2200      	movs	r2, #0
 810e5b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810e5b2:	697b      	ldr	r3, [r7, #20]
 810e5b4:	2200      	movs	r2, #0
 810e5b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810e5b8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810e5bc:	4618      	mov	r0, r3
 810e5be:	3748      	adds	r7, #72	@ 0x48
 810e5c0:	46bd      	mov	sp, r7
 810e5c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810e5c6:	bf00      	nop
 810e5c8:	58024400 	.word	0x58024400
 810e5cc:	03d09000 	.word	0x03d09000
 810e5d0:	003d0900 	.word	0x003d0900
 810e5d4:	0812891c 	.word	0x0812891c

0810e5d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810e5d8:	b480      	push	{r7}
 810e5da:	b083      	sub	sp, #12
 810e5dc:	af00      	add	r7, sp, #0
 810e5de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810e5e0:	687b      	ldr	r3, [r7, #4]
 810e5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e5e4:	f003 0308 	and.w	r3, r3, #8
 810e5e8:	2b00      	cmp	r3, #0
 810e5ea:	d00a      	beq.n	810e602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810e5ec:	687b      	ldr	r3, [r7, #4]
 810e5ee:	681b      	ldr	r3, [r3, #0]
 810e5f0:	685b      	ldr	r3, [r3, #4]
 810e5f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810e5f6:	687b      	ldr	r3, [r7, #4]
 810e5f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810e5fa:	687b      	ldr	r3, [r7, #4]
 810e5fc:	681b      	ldr	r3, [r3, #0]
 810e5fe:	430a      	orrs	r2, r1
 810e600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810e602:	687b      	ldr	r3, [r7, #4]
 810e604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e606:	f003 0301 	and.w	r3, r3, #1
 810e60a:	2b00      	cmp	r3, #0
 810e60c:	d00a      	beq.n	810e624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	681b      	ldr	r3, [r3, #0]
 810e612:	685b      	ldr	r3, [r3, #4]
 810e614:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810e618:	687b      	ldr	r3, [r7, #4]
 810e61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e61c:	687b      	ldr	r3, [r7, #4]
 810e61e:	681b      	ldr	r3, [r3, #0]
 810e620:	430a      	orrs	r2, r1
 810e622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810e624:	687b      	ldr	r3, [r7, #4]
 810e626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e628:	f003 0302 	and.w	r3, r3, #2
 810e62c:	2b00      	cmp	r3, #0
 810e62e:	d00a      	beq.n	810e646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810e630:	687b      	ldr	r3, [r7, #4]
 810e632:	681b      	ldr	r3, [r3, #0]
 810e634:	685b      	ldr	r3, [r3, #4]
 810e636:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810e63a:	687b      	ldr	r3, [r7, #4]
 810e63c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810e63e:	687b      	ldr	r3, [r7, #4]
 810e640:	681b      	ldr	r3, [r3, #0]
 810e642:	430a      	orrs	r2, r1
 810e644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810e646:	687b      	ldr	r3, [r7, #4]
 810e648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e64a:	f003 0304 	and.w	r3, r3, #4
 810e64e:	2b00      	cmp	r3, #0
 810e650:	d00a      	beq.n	810e668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810e652:	687b      	ldr	r3, [r7, #4]
 810e654:	681b      	ldr	r3, [r3, #0]
 810e656:	685b      	ldr	r3, [r3, #4]
 810e658:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810e65c:	687b      	ldr	r3, [r7, #4]
 810e65e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810e660:	687b      	ldr	r3, [r7, #4]
 810e662:	681b      	ldr	r3, [r3, #0]
 810e664:	430a      	orrs	r2, r1
 810e666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810e668:	687b      	ldr	r3, [r7, #4]
 810e66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e66c:	f003 0310 	and.w	r3, r3, #16
 810e670:	2b00      	cmp	r3, #0
 810e672:	d00a      	beq.n	810e68a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810e674:	687b      	ldr	r3, [r7, #4]
 810e676:	681b      	ldr	r3, [r3, #0]
 810e678:	689b      	ldr	r3, [r3, #8]
 810e67a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810e67e:	687b      	ldr	r3, [r7, #4]
 810e680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810e682:	687b      	ldr	r3, [r7, #4]
 810e684:	681b      	ldr	r3, [r3, #0]
 810e686:	430a      	orrs	r2, r1
 810e688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810e68a:	687b      	ldr	r3, [r7, #4]
 810e68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e68e:	f003 0320 	and.w	r3, r3, #32
 810e692:	2b00      	cmp	r3, #0
 810e694:	d00a      	beq.n	810e6ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810e696:	687b      	ldr	r3, [r7, #4]
 810e698:	681b      	ldr	r3, [r3, #0]
 810e69a:	689b      	ldr	r3, [r3, #8]
 810e69c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810e6a0:	687b      	ldr	r3, [r7, #4]
 810e6a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810e6a4:	687b      	ldr	r3, [r7, #4]
 810e6a6:	681b      	ldr	r3, [r3, #0]
 810e6a8:	430a      	orrs	r2, r1
 810e6aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810e6ac:	687b      	ldr	r3, [r7, #4]
 810e6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810e6b4:	2b00      	cmp	r3, #0
 810e6b6:	d01a      	beq.n	810e6ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810e6b8:	687b      	ldr	r3, [r7, #4]
 810e6ba:	681b      	ldr	r3, [r3, #0]
 810e6bc:	685b      	ldr	r3, [r3, #4]
 810e6be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810e6c2:	687b      	ldr	r3, [r7, #4]
 810e6c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810e6c6:	687b      	ldr	r3, [r7, #4]
 810e6c8:	681b      	ldr	r3, [r3, #0]
 810e6ca:	430a      	orrs	r2, r1
 810e6cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810e6ce:	687b      	ldr	r3, [r7, #4]
 810e6d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810e6d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810e6d6:	d10a      	bne.n	810e6ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810e6d8:	687b      	ldr	r3, [r7, #4]
 810e6da:	681b      	ldr	r3, [r3, #0]
 810e6dc:	685b      	ldr	r3, [r3, #4]
 810e6de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810e6e2:	687b      	ldr	r3, [r7, #4]
 810e6e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810e6e6:	687b      	ldr	r3, [r7, #4]
 810e6e8:	681b      	ldr	r3, [r3, #0]
 810e6ea:	430a      	orrs	r2, r1
 810e6ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810e6ee:	687b      	ldr	r3, [r7, #4]
 810e6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810e6f6:	2b00      	cmp	r3, #0
 810e6f8:	d00a      	beq.n	810e710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810e6fa:	687b      	ldr	r3, [r7, #4]
 810e6fc:	681b      	ldr	r3, [r3, #0]
 810e6fe:	685b      	ldr	r3, [r3, #4]
 810e700:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810e704:	687b      	ldr	r3, [r7, #4]
 810e706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810e708:	687b      	ldr	r3, [r7, #4]
 810e70a:	681b      	ldr	r3, [r3, #0]
 810e70c:	430a      	orrs	r2, r1
 810e70e:	605a      	str	r2, [r3, #4]
  }
}
 810e710:	bf00      	nop
 810e712:	370c      	adds	r7, #12
 810e714:	46bd      	mov	sp, r7
 810e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e71a:	4770      	bx	lr

0810e71c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810e71c:	b580      	push	{r7, lr}
 810e71e:	b098      	sub	sp, #96	@ 0x60
 810e720:	af02      	add	r7, sp, #8
 810e722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e724:	687b      	ldr	r3, [r7, #4]
 810e726:	2200      	movs	r2, #0
 810e728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810e72c:	f7f4 f8fe 	bl	810292c <HAL_GetTick>
 810e730:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810e732:	687b      	ldr	r3, [r7, #4]
 810e734:	681b      	ldr	r3, [r3, #0]
 810e736:	681b      	ldr	r3, [r3, #0]
 810e738:	f003 0308 	and.w	r3, r3, #8
 810e73c:	2b08      	cmp	r3, #8
 810e73e:	d12f      	bne.n	810e7a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810e740:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810e744:	9300      	str	r3, [sp, #0]
 810e746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810e748:	2200      	movs	r2, #0
 810e74a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810e74e:	6878      	ldr	r0, [r7, #4]
 810e750:	f000 f88e 	bl	810e870 <UART_WaitOnFlagUntilTimeout>
 810e754:	4603      	mov	r3, r0
 810e756:	2b00      	cmp	r3, #0
 810e758:	d022      	beq.n	810e7a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810e75a:	687b      	ldr	r3, [r7, #4]
 810e75c:	681b      	ldr	r3, [r3, #0]
 810e75e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e762:	e853 3f00 	ldrex	r3, [r3]
 810e766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810e768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e76a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810e76e:	653b      	str	r3, [r7, #80]	@ 0x50
 810e770:	687b      	ldr	r3, [r7, #4]
 810e772:	681b      	ldr	r3, [r3, #0]
 810e774:	461a      	mov	r2, r3
 810e776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810e778:	647b      	str	r3, [r7, #68]	@ 0x44
 810e77a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e77c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810e77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810e780:	e841 2300 	strex	r3, r2, [r1]
 810e784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810e786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e788:	2b00      	cmp	r3, #0
 810e78a:	d1e6      	bne.n	810e75a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810e78c:	687b      	ldr	r3, [r7, #4]
 810e78e:	2220      	movs	r2, #32
 810e790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810e794:	687b      	ldr	r3, [r7, #4]
 810e796:	2200      	movs	r2, #0
 810e798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810e79c:	2303      	movs	r3, #3
 810e79e:	e063      	b.n	810e868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810e7a0:	687b      	ldr	r3, [r7, #4]
 810e7a2:	681b      	ldr	r3, [r3, #0]
 810e7a4:	681b      	ldr	r3, [r3, #0]
 810e7a6:	f003 0304 	and.w	r3, r3, #4
 810e7aa:	2b04      	cmp	r3, #4
 810e7ac:	d149      	bne.n	810e842 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810e7ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810e7b2:	9300      	str	r3, [sp, #0]
 810e7b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810e7b6:	2200      	movs	r2, #0
 810e7b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810e7bc:	6878      	ldr	r0, [r7, #4]
 810e7be:	f000 f857 	bl	810e870 <UART_WaitOnFlagUntilTimeout>
 810e7c2:	4603      	mov	r3, r0
 810e7c4:	2b00      	cmp	r3, #0
 810e7c6:	d03c      	beq.n	810e842 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e7c8:	687b      	ldr	r3, [r7, #4]
 810e7ca:	681b      	ldr	r3, [r3, #0]
 810e7cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7d0:	e853 3f00 	ldrex	r3, [r3]
 810e7d4:	623b      	str	r3, [r7, #32]
   return(result);
 810e7d6:	6a3b      	ldr	r3, [r7, #32]
 810e7d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810e7dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810e7de:	687b      	ldr	r3, [r7, #4]
 810e7e0:	681b      	ldr	r3, [r3, #0]
 810e7e2:	461a      	mov	r2, r3
 810e7e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e7e6:	633b      	str	r3, [r7, #48]	@ 0x30
 810e7e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e7ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810e7ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e7ee:	e841 2300 	strex	r3, r2, [r1]
 810e7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e7f6:	2b00      	cmp	r3, #0
 810e7f8:	d1e6      	bne.n	810e7c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e7fa:	687b      	ldr	r3, [r7, #4]
 810e7fc:	681b      	ldr	r3, [r3, #0]
 810e7fe:	3308      	adds	r3, #8
 810e800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e802:	693b      	ldr	r3, [r7, #16]
 810e804:	e853 3f00 	ldrex	r3, [r3]
 810e808:	60fb      	str	r3, [r7, #12]
   return(result);
 810e80a:	68fb      	ldr	r3, [r7, #12]
 810e80c:	f023 0301 	bic.w	r3, r3, #1
 810e810:	64bb      	str	r3, [r7, #72]	@ 0x48
 810e812:	687b      	ldr	r3, [r7, #4]
 810e814:	681b      	ldr	r3, [r3, #0]
 810e816:	3308      	adds	r3, #8
 810e818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e81a:	61fa      	str	r2, [r7, #28]
 810e81c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e81e:	69b9      	ldr	r1, [r7, #24]
 810e820:	69fa      	ldr	r2, [r7, #28]
 810e822:	e841 2300 	strex	r3, r2, [r1]
 810e826:	617b      	str	r3, [r7, #20]
   return(result);
 810e828:	697b      	ldr	r3, [r7, #20]
 810e82a:	2b00      	cmp	r3, #0
 810e82c:	d1e5      	bne.n	810e7fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810e82e:	687b      	ldr	r3, [r7, #4]
 810e830:	2220      	movs	r2, #32
 810e832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810e836:	687b      	ldr	r3, [r7, #4]
 810e838:	2200      	movs	r2, #0
 810e83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810e83e:	2303      	movs	r3, #3
 810e840:	e012      	b.n	810e868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810e842:	687b      	ldr	r3, [r7, #4]
 810e844:	2220      	movs	r2, #32
 810e846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810e84a:	687b      	ldr	r3, [r7, #4]
 810e84c:	2220      	movs	r2, #32
 810e84e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e852:	687b      	ldr	r3, [r7, #4]
 810e854:	2200      	movs	r2, #0
 810e856:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e858:	687b      	ldr	r3, [r7, #4]
 810e85a:	2200      	movs	r2, #0
 810e85c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810e85e:	687b      	ldr	r3, [r7, #4]
 810e860:	2200      	movs	r2, #0
 810e862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810e866:	2300      	movs	r3, #0
}
 810e868:	4618      	mov	r0, r3
 810e86a:	3758      	adds	r7, #88	@ 0x58
 810e86c:	46bd      	mov	sp, r7
 810e86e:	bd80      	pop	{r7, pc}

0810e870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810e870:	b580      	push	{r7, lr}
 810e872:	b084      	sub	sp, #16
 810e874:	af00      	add	r7, sp, #0
 810e876:	60f8      	str	r0, [r7, #12]
 810e878:	60b9      	str	r1, [r7, #8]
 810e87a:	603b      	str	r3, [r7, #0]
 810e87c:	4613      	mov	r3, r2
 810e87e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810e880:	e04f      	b.n	810e922 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810e882:	69bb      	ldr	r3, [r7, #24]
 810e884:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e888:	d04b      	beq.n	810e922 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810e88a:	f7f4 f84f 	bl	810292c <HAL_GetTick>
 810e88e:	4602      	mov	r2, r0
 810e890:	683b      	ldr	r3, [r7, #0]
 810e892:	1ad3      	subs	r3, r2, r3
 810e894:	69ba      	ldr	r2, [r7, #24]
 810e896:	429a      	cmp	r2, r3
 810e898:	d302      	bcc.n	810e8a0 <UART_WaitOnFlagUntilTimeout+0x30>
 810e89a:	69bb      	ldr	r3, [r7, #24]
 810e89c:	2b00      	cmp	r3, #0
 810e89e:	d101      	bne.n	810e8a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810e8a0:	2303      	movs	r3, #3
 810e8a2:	e04e      	b.n	810e942 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810e8a4:	68fb      	ldr	r3, [r7, #12]
 810e8a6:	681b      	ldr	r3, [r3, #0]
 810e8a8:	681b      	ldr	r3, [r3, #0]
 810e8aa:	f003 0304 	and.w	r3, r3, #4
 810e8ae:	2b00      	cmp	r3, #0
 810e8b0:	d037      	beq.n	810e922 <UART_WaitOnFlagUntilTimeout+0xb2>
 810e8b2:	68bb      	ldr	r3, [r7, #8]
 810e8b4:	2b80      	cmp	r3, #128	@ 0x80
 810e8b6:	d034      	beq.n	810e922 <UART_WaitOnFlagUntilTimeout+0xb2>
 810e8b8:	68bb      	ldr	r3, [r7, #8]
 810e8ba:	2b40      	cmp	r3, #64	@ 0x40
 810e8bc:	d031      	beq.n	810e922 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810e8be:	68fb      	ldr	r3, [r7, #12]
 810e8c0:	681b      	ldr	r3, [r3, #0]
 810e8c2:	69db      	ldr	r3, [r3, #28]
 810e8c4:	f003 0308 	and.w	r3, r3, #8
 810e8c8:	2b08      	cmp	r3, #8
 810e8ca:	d110      	bne.n	810e8ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810e8cc:	68fb      	ldr	r3, [r7, #12]
 810e8ce:	681b      	ldr	r3, [r3, #0]
 810e8d0:	2208      	movs	r2, #8
 810e8d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810e8d4:	68f8      	ldr	r0, [r7, #12]
 810e8d6:	f000 f921 	bl	810eb1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810e8da:	68fb      	ldr	r3, [r7, #12]
 810e8dc:	2208      	movs	r2, #8
 810e8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810e8e2:	68fb      	ldr	r3, [r7, #12]
 810e8e4:	2200      	movs	r2, #0
 810e8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810e8ea:	2301      	movs	r3, #1
 810e8ec:	e029      	b.n	810e942 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810e8ee:	68fb      	ldr	r3, [r7, #12]
 810e8f0:	681b      	ldr	r3, [r3, #0]
 810e8f2:	69db      	ldr	r3, [r3, #28]
 810e8f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810e8f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810e8fc:	d111      	bne.n	810e922 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810e8fe:	68fb      	ldr	r3, [r7, #12]
 810e900:	681b      	ldr	r3, [r3, #0]
 810e902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810e906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810e908:	68f8      	ldr	r0, [r7, #12]
 810e90a:	f000 f907 	bl	810eb1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810e90e:	68fb      	ldr	r3, [r7, #12]
 810e910:	2220      	movs	r2, #32
 810e912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810e916:	68fb      	ldr	r3, [r7, #12]
 810e918:	2200      	movs	r2, #0
 810e91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810e91e:	2303      	movs	r3, #3
 810e920:	e00f      	b.n	810e942 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810e922:	68fb      	ldr	r3, [r7, #12]
 810e924:	681b      	ldr	r3, [r3, #0]
 810e926:	69da      	ldr	r2, [r3, #28]
 810e928:	68bb      	ldr	r3, [r7, #8]
 810e92a:	4013      	ands	r3, r2
 810e92c:	68ba      	ldr	r2, [r7, #8]
 810e92e:	429a      	cmp	r2, r3
 810e930:	bf0c      	ite	eq
 810e932:	2301      	moveq	r3, #1
 810e934:	2300      	movne	r3, #0
 810e936:	b2db      	uxtb	r3, r3
 810e938:	461a      	mov	r2, r3
 810e93a:	79fb      	ldrb	r3, [r7, #7]
 810e93c:	429a      	cmp	r2, r3
 810e93e:	d0a0      	beq.n	810e882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810e940:	2300      	movs	r3, #0
}
 810e942:	4618      	mov	r0, r3
 810e944:	3710      	adds	r7, #16
 810e946:	46bd      	mov	sp, r7
 810e948:	bd80      	pop	{r7, pc}
	...

0810e94c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810e94c:	b580      	push	{r7, lr}
 810e94e:	b096      	sub	sp, #88	@ 0x58
 810e950:	af00      	add	r7, sp, #0
 810e952:	60f8      	str	r0, [r7, #12]
 810e954:	60b9      	str	r1, [r7, #8]
 810e956:	4613      	mov	r3, r2
 810e958:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810e95a:	68fb      	ldr	r3, [r7, #12]
 810e95c:	68ba      	ldr	r2, [r7, #8]
 810e95e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 810e960:	68fb      	ldr	r3, [r7, #12]
 810e962:	88fa      	ldrh	r2, [r7, #6]
 810e964:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e968:	68fb      	ldr	r3, [r7, #12]
 810e96a:	2200      	movs	r2, #0
 810e96c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810e970:	68fb      	ldr	r3, [r7, #12]
 810e972:	2222      	movs	r2, #34	@ 0x22
 810e974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 810e978:	68fb      	ldr	r3, [r7, #12]
 810e97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810e97e:	2b00      	cmp	r3, #0
 810e980:	d02d      	beq.n	810e9de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810e982:	68fb      	ldr	r3, [r7, #12]
 810e984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810e988:	4a40      	ldr	r2, [pc, #256]	@ (810ea8c <UART_Start_Receive_DMA+0x140>)
 810e98a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810e98c:	68fb      	ldr	r3, [r7, #12]
 810e98e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810e992:	4a3f      	ldr	r2, [pc, #252]	@ (810ea90 <UART_Start_Receive_DMA+0x144>)
 810e994:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810e996:	68fb      	ldr	r3, [r7, #12]
 810e998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810e99c:	4a3d      	ldr	r2, [pc, #244]	@ (810ea94 <UART_Start_Receive_DMA+0x148>)
 810e99e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810e9a0:	68fb      	ldr	r3, [r7, #12]
 810e9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810e9a6:	2200      	movs	r2, #0
 810e9a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810e9aa:	68fb      	ldr	r3, [r7, #12]
 810e9ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 810e9b0:	68fb      	ldr	r3, [r7, #12]
 810e9b2:	681b      	ldr	r3, [r3, #0]
 810e9b4:	3324      	adds	r3, #36	@ 0x24
 810e9b6:	4619      	mov	r1, r3
 810e9b8:	68fb      	ldr	r3, [r7, #12]
 810e9ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e9bc:	461a      	mov	r2, r3
 810e9be:	88fb      	ldrh	r3, [r7, #6]
 810e9c0:	f7f5 ff2a 	bl	8104818 <HAL_DMA_Start_IT>
 810e9c4:	4603      	mov	r3, r0
 810e9c6:	2b00      	cmp	r3, #0
 810e9c8:	d009      	beq.n	810e9de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810e9ca:	68fb      	ldr	r3, [r7, #12]
 810e9cc:	2210      	movs	r2, #16
 810e9ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 810e9d2:	68fb      	ldr	r3, [r7, #12]
 810e9d4:	2220      	movs	r2, #32
 810e9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 810e9da:	2301      	movs	r3, #1
 810e9dc:	e051      	b.n	810ea82 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 810e9de:	68fb      	ldr	r3, [r7, #12]
 810e9e0:	691b      	ldr	r3, [r3, #16]
 810e9e2:	2b00      	cmp	r3, #0
 810e9e4:	d018      	beq.n	810ea18 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e9e6:	68fb      	ldr	r3, [r7, #12]
 810e9e8:	681b      	ldr	r3, [r3, #0]
 810e9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e9ee:	e853 3f00 	ldrex	r3, [r3]
 810e9f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e9f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810e9fa:	657b      	str	r3, [r7, #84]	@ 0x54
 810e9fc:	68fb      	ldr	r3, [r7, #12]
 810e9fe:	681b      	ldr	r3, [r3, #0]
 810ea00:	461a      	mov	r2, r3
 810ea02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ea04:	64bb      	str	r3, [r7, #72]	@ 0x48
 810ea06:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ea08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810ea0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ea0c:	e841 2300 	strex	r3, r2, [r1]
 810ea10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810ea12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810ea14:	2b00      	cmp	r3, #0
 810ea16:	d1e6      	bne.n	810e9e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ea18:	68fb      	ldr	r3, [r7, #12]
 810ea1a:	681b      	ldr	r3, [r3, #0]
 810ea1c:	3308      	adds	r3, #8
 810ea1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ea22:	e853 3f00 	ldrex	r3, [r3]
 810ea26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ea2a:	f043 0301 	orr.w	r3, r3, #1
 810ea2e:	653b      	str	r3, [r7, #80]	@ 0x50
 810ea30:	68fb      	ldr	r3, [r7, #12]
 810ea32:	681b      	ldr	r3, [r3, #0]
 810ea34:	3308      	adds	r3, #8
 810ea36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 810ea38:	637a      	str	r2, [r7, #52]	@ 0x34
 810ea3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ea3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810ea3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ea40:	e841 2300 	strex	r3, r2, [r1]
 810ea44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810ea46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ea48:	2b00      	cmp	r3, #0
 810ea4a:	d1e5      	bne.n	810ea18 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ea4c:	68fb      	ldr	r3, [r7, #12]
 810ea4e:	681b      	ldr	r3, [r3, #0]
 810ea50:	3308      	adds	r3, #8
 810ea52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ea54:	697b      	ldr	r3, [r7, #20]
 810ea56:	e853 3f00 	ldrex	r3, [r3]
 810ea5a:	613b      	str	r3, [r7, #16]
   return(result);
 810ea5c:	693b      	ldr	r3, [r7, #16]
 810ea5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ea62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ea64:	68fb      	ldr	r3, [r7, #12]
 810ea66:	681b      	ldr	r3, [r3, #0]
 810ea68:	3308      	adds	r3, #8
 810ea6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810ea6c:	623a      	str	r2, [r7, #32]
 810ea6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ea70:	69f9      	ldr	r1, [r7, #28]
 810ea72:	6a3a      	ldr	r2, [r7, #32]
 810ea74:	e841 2300 	strex	r3, r2, [r1]
 810ea78:	61bb      	str	r3, [r7, #24]
   return(result);
 810ea7a:	69bb      	ldr	r3, [r7, #24]
 810ea7c:	2b00      	cmp	r3, #0
 810ea7e:	d1e5      	bne.n	810ea4c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 810ea80:	2300      	movs	r3, #0
}
 810ea82:	4618      	mov	r0, r3
 810ea84:	3758      	adds	r7, #88	@ 0x58
 810ea86:	46bd      	mov	sp, r7
 810ea88:	bd80      	pop	{r7, pc}
 810ea8a:	bf00      	nop
 810ea8c:	0810ebe9 	.word	0x0810ebe9
 810ea90:	0810ed11 	.word	0x0810ed11
 810ea94:	0810ed4f 	.word	0x0810ed4f

0810ea98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810ea98:	b480      	push	{r7}
 810ea9a:	b08f      	sub	sp, #60	@ 0x3c
 810ea9c:	af00      	add	r7, sp, #0
 810ea9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810eaa0:	687b      	ldr	r3, [r7, #4]
 810eaa2:	681b      	ldr	r3, [r3, #0]
 810eaa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eaa6:	6a3b      	ldr	r3, [r7, #32]
 810eaa8:	e853 3f00 	ldrex	r3, [r3]
 810eaac:	61fb      	str	r3, [r7, #28]
   return(result);
 810eaae:	69fb      	ldr	r3, [r7, #28]
 810eab0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 810eab4:	637b      	str	r3, [r7, #52]	@ 0x34
 810eab6:	687b      	ldr	r3, [r7, #4]
 810eab8:	681b      	ldr	r3, [r3, #0]
 810eaba:	461a      	mov	r2, r3
 810eabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810eac0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810eac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810eac6:	e841 2300 	strex	r3, r2, [r1]
 810eaca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eace:	2b00      	cmp	r3, #0
 810ead0:	d1e6      	bne.n	810eaa0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810ead2:	687b      	ldr	r3, [r7, #4]
 810ead4:	681b      	ldr	r3, [r3, #0]
 810ead6:	3308      	adds	r3, #8
 810ead8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eada:	68fb      	ldr	r3, [r7, #12]
 810eadc:	e853 3f00 	ldrex	r3, [r3]
 810eae0:	60bb      	str	r3, [r7, #8]
   return(result);
 810eae2:	68bb      	ldr	r3, [r7, #8]
 810eae4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810eae8:	633b      	str	r3, [r7, #48]	@ 0x30
 810eaea:	687b      	ldr	r3, [r7, #4]
 810eaec:	681b      	ldr	r3, [r3, #0]
 810eaee:	3308      	adds	r3, #8
 810eaf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810eaf2:	61ba      	str	r2, [r7, #24]
 810eaf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eaf6:	6979      	ldr	r1, [r7, #20]
 810eaf8:	69ba      	ldr	r2, [r7, #24]
 810eafa:	e841 2300 	strex	r3, r2, [r1]
 810eafe:	613b      	str	r3, [r7, #16]
   return(result);
 810eb00:	693b      	ldr	r3, [r7, #16]
 810eb02:	2b00      	cmp	r3, #0
 810eb04:	d1e5      	bne.n	810ead2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810eb06:	687b      	ldr	r3, [r7, #4]
 810eb08:	2220      	movs	r2, #32
 810eb0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 810eb0e:	bf00      	nop
 810eb10:	373c      	adds	r7, #60	@ 0x3c
 810eb12:	46bd      	mov	sp, r7
 810eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb18:	4770      	bx	lr
	...

0810eb1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810eb1c:	b480      	push	{r7}
 810eb1e:	b095      	sub	sp, #84	@ 0x54
 810eb20:	af00      	add	r7, sp, #0
 810eb22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810eb24:	687b      	ldr	r3, [r7, #4]
 810eb26:	681b      	ldr	r3, [r3, #0]
 810eb28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eb2c:	e853 3f00 	ldrex	r3, [r3]
 810eb30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810eb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eb34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810eb38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810eb3a:	687b      	ldr	r3, [r7, #4]
 810eb3c:	681b      	ldr	r3, [r3, #0]
 810eb3e:	461a      	mov	r2, r3
 810eb40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810eb42:	643b      	str	r3, [r7, #64]	@ 0x40
 810eb44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eb46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810eb48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810eb4a:	e841 2300 	strex	r3, r2, [r1]
 810eb4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810eb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810eb52:	2b00      	cmp	r3, #0
 810eb54:	d1e6      	bne.n	810eb24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810eb56:	687b      	ldr	r3, [r7, #4]
 810eb58:	681b      	ldr	r3, [r3, #0]
 810eb5a:	3308      	adds	r3, #8
 810eb5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eb5e:	6a3b      	ldr	r3, [r7, #32]
 810eb60:	e853 3f00 	ldrex	r3, [r3]
 810eb64:	61fb      	str	r3, [r7, #28]
   return(result);
 810eb66:	69fa      	ldr	r2, [r7, #28]
 810eb68:	4b1e      	ldr	r3, [pc, #120]	@ (810ebe4 <UART_EndRxTransfer+0xc8>)
 810eb6a:	4013      	ands	r3, r2
 810eb6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810eb6e:	687b      	ldr	r3, [r7, #4]
 810eb70:	681b      	ldr	r3, [r3, #0]
 810eb72:	3308      	adds	r3, #8
 810eb74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810eb76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810eb78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eb7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810eb7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810eb7e:	e841 2300 	strex	r3, r2, [r1]
 810eb82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810eb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb86:	2b00      	cmp	r3, #0
 810eb88:	d1e5      	bne.n	810eb56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810eb8a:	687b      	ldr	r3, [r7, #4]
 810eb8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810eb8e:	2b01      	cmp	r3, #1
 810eb90:	d118      	bne.n	810ebc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810eb92:	687b      	ldr	r3, [r7, #4]
 810eb94:	681b      	ldr	r3, [r3, #0]
 810eb96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eb98:	68fb      	ldr	r3, [r7, #12]
 810eb9a:	e853 3f00 	ldrex	r3, [r3]
 810eb9e:	60bb      	str	r3, [r7, #8]
   return(result);
 810eba0:	68bb      	ldr	r3, [r7, #8]
 810eba2:	f023 0310 	bic.w	r3, r3, #16
 810eba6:	647b      	str	r3, [r7, #68]	@ 0x44
 810eba8:	687b      	ldr	r3, [r7, #4]
 810ebaa:	681b      	ldr	r3, [r3, #0]
 810ebac:	461a      	mov	r2, r3
 810ebae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ebb0:	61bb      	str	r3, [r7, #24]
 810ebb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ebb4:	6979      	ldr	r1, [r7, #20]
 810ebb6:	69ba      	ldr	r2, [r7, #24]
 810ebb8:	e841 2300 	strex	r3, r2, [r1]
 810ebbc:	613b      	str	r3, [r7, #16]
   return(result);
 810ebbe:	693b      	ldr	r3, [r7, #16]
 810ebc0:	2b00      	cmp	r3, #0
 810ebc2:	d1e6      	bne.n	810eb92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810ebc4:	687b      	ldr	r3, [r7, #4]
 810ebc6:	2220      	movs	r2, #32
 810ebc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ebcc:	687b      	ldr	r3, [r7, #4]
 810ebce:	2200      	movs	r2, #0
 810ebd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ebd2:	687b      	ldr	r3, [r7, #4]
 810ebd4:	2200      	movs	r2, #0
 810ebd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810ebd8:	bf00      	nop
 810ebda:	3754      	adds	r7, #84	@ 0x54
 810ebdc:	46bd      	mov	sp, r7
 810ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebe2:	4770      	bx	lr
 810ebe4:	effffffe 	.word	0xeffffffe

0810ebe8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810ebe8:	b580      	push	{r7, lr}
 810ebea:	b09c      	sub	sp, #112	@ 0x70
 810ebec:	af00      	add	r7, sp, #0
 810ebee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ebf0:	687b      	ldr	r3, [r7, #4]
 810ebf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ebf4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810ebf6:	687b      	ldr	r3, [r7, #4]
 810ebf8:	69db      	ldr	r3, [r3, #28]
 810ebfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ebfe:	d071      	beq.n	810ece4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 810ec00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec02:	2200      	movs	r2, #0
 810ec04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810ec08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec0a:	681b      	ldr	r3, [r3, #0]
 810ec0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ec0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ec10:	e853 3f00 	ldrex	r3, [r3]
 810ec14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810ec16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ec18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ec1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810ec1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec20:	681b      	ldr	r3, [r3, #0]
 810ec22:	461a      	mov	r2, r3
 810ec24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810ec26:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ec28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ec2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ec2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ec2e:	e841 2300 	strex	r3, r2, [r1]
 810ec32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810ec34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ec36:	2b00      	cmp	r3, #0
 810ec38:	d1e6      	bne.n	810ec08 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ec3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec3c:	681b      	ldr	r3, [r3, #0]
 810ec3e:	3308      	adds	r3, #8
 810ec40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ec42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ec44:	e853 3f00 	ldrex	r3, [r3]
 810ec48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ec4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ec4c:	f023 0301 	bic.w	r3, r3, #1
 810ec50:	667b      	str	r3, [r7, #100]	@ 0x64
 810ec52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec54:	681b      	ldr	r3, [r3, #0]
 810ec56:	3308      	adds	r3, #8
 810ec58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810ec5a:	647a      	str	r2, [r7, #68]	@ 0x44
 810ec5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ec5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ec60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ec62:	e841 2300 	strex	r3, r2, [r1]
 810ec66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ec68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ec6a:	2b00      	cmp	r3, #0
 810ec6c:	d1e5      	bne.n	810ec3a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ec6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec70:	681b      	ldr	r3, [r3, #0]
 810ec72:	3308      	adds	r3, #8
 810ec74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ec76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ec78:	e853 3f00 	ldrex	r3, [r3]
 810ec7c:	623b      	str	r3, [r7, #32]
   return(result);
 810ec7e:	6a3b      	ldr	r3, [r7, #32]
 810ec80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ec84:	663b      	str	r3, [r7, #96]	@ 0x60
 810ec86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ec88:	681b      	ldr	r3, [r3, #0]
 810ec8a:	3308      	adds	r3, #8
 810ec8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810ec8e:	633a      	str	r2, [r7, #48]	@ 0x30
 810ec90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ec92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ec94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ec96:	e841 2300 	strex	r3, r2, [r1]
 810ec9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810ec9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ec9e:	2b00      	cmp	r3, #0
 810eca0:	d1e5      	bne.n	810ec6e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810eca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810eca4:	2220      	movs	r2, #32
 810eca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ecaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ecac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ecae:	2b01      	cmp	r3, #1
 810ecb0:	d118      	bne.n	810ece4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ecb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ecb4:	681b      	ldr	r3, [r3, #0]
 810ecb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ecb8:	693b      	ldr	r3, [r7, #16]
 810ecba:	e853 3f00 	ldrex	r3, [r3]
 810ecbe:	60fb      	str	r3, [r7, #12]
   return(result);
 810ecc0:	68fb      	ldr	r3, [r7, #12]
 810ecc2:	f023 0310 	bic.w	r3, r3, #16
 810ecc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810ecc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ecca:	681b      	ldr	r3, [r3, #0]
 810eccc:	461a      	mov	r2, r3
 810ecce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ecd0:	61fb      	str	r3, [r7, #28]
 810ecd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ecd4:	69b9      	ldr	r1, [r7, #24]
 810ecd6:	69fa      	ldr	r2, [r7, #28]
 810ecd8:	e841 2300 	strex	r3, r2, [r1]
 810ecdc:	617b      	str	r3, [r7, #20]
   return(result);
 810ecde:	697b      	ldr	r3, [r7, #20]
 810ece0:	2b00      	cmp	r3, #0
 810ece2:	d1e6      	bne.n	810ecb2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810ece4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ece6:	2200      	movs	r2, #0
 810ece8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ecea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ecec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ecee:	2b01      	cmp	r3, #1
 810ecf0:	d107      	bne.n	810ed02 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ecf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810ecf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ecf8:	4619      	mov	r1, r3
 810ecfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810ecfc:	f7fe fef8 	bl	810daf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810ed00:	e002      	b.n	810ed08 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 810ed02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810ed04:	f7f3 f812 	bl	8101d2c <HAL_UART_RxCpltCallback>
}
 810ed08:	bf00      	nop
 810ed0a:	3770      	adds	r7, #112	@ 0x70
 810ed0c:	46bd      	mov	sp, r7
 810ed0e:	bd80      	pop	{r7, pc}

0810ed10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810ed10:	b580      	push	{r7, lr}
 810ed12:	b084      	sub	sp, #16
 810ed14:	af00      	add	r7, sp, #0
 810ed16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ed18:	687b      	ldr	r3, [r7, #4]
 810ed1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ed1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 810ed1e:	68fb      	ldr	r3, [r7, #12]
 810ed20:	2201      	movs	r2, #1
 810ed22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ed24:	68fb      	ldr	r3, [r7, #12]
 810ed26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ed28:	2b01      	cmp	r3, #1
 810ed2a:	d109      	bne.n	810ed40 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810ed2c:	68fb      	ldr	r3, [r7, #12]
 810ed2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ed32:	085b      	lsrs	r3, r3, #1
 810ed34:	b29b      	uxth	r3, r3
 810ed36:	4619      	mov	r1, r3
 810ed38:	68f8      	ldr	r0, [r7, #12]
 810ed3a:	f7fe fed9 	bl	810daf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810ed3e:	e002      	b.n	810ed46 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 810ed40:	68f8      	ldr	r0, [r7, #12]
 810ed42:	f7f3 f817 	bl	8101d74 <HAL_UART_RxHalfCpltCallback>
}
 810ed46:	bf00      	nop
 810ed48:	3710      	adds	r7, #16
 810ed4a:	46bd      	mov	sp, r7
 810ed4c:	bd80      	pop	{r7, pc}

0810ed4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810ed4e:	b580      	push	{r7, lr}
 810ed50:	b086      	sub	sp, #24
 810ed52:	af00      	add	r7, sp, #0
 810ed54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ed56:	687b      	ldr	r3, [r7, #4]
 810ed58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ed5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810ed5c:	697b      	ldr	r3, [r7, #20]
 810ed5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810ed62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810ed64:	697b      	ldr	r3, [r7, #20]
 810ed66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ed6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810ed6c:	697b      	ldr	r3, [r7, #20]
 810ed6e:	681b      	ldr	r3, [r3, #0]
 810ed70:	689b      	ldr	r3, [r3, #8]
 810ed72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ed76:	2b80      	cmp	r3, #128	@ 0x80
 810ed78:	d109      	bne.n	810ed8e <UART_DMAError+0x40>
 810ed7a:	693b      	ldr	r3, [r7, #16]
 810ed7c:	2b21      	cmp	r3, #33	@ 0x21
 810ed7e:	d106      	bne.n	810ed8e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810ed80:	697b      	ldr	r3, [r7, #20]
 810ed82:	2200      	movs	r2, #0
 810ed84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 810ed88:	6978      	ldr	r0, [r7, #20]
 810ed8a:	f7ff fe85 	bl	810ea98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810ed8e:	697b      	ldr	r3, [r7, #20]
 810ed90:	681b      	ldr	r3, [r3, #0]
 810ed92:	689b      	ldr	r3, [r3, #8]
 810ed94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ed98:	2b40      	cmp	r3, #64	@ 0x40
 810ed9a:	d109      	bne.n	810edb0 <UART_DMAError+0x62>
 810ed9c:	68fb      	ldr	r3, [r7, #12]
 810ed9e:	2b22      	cmp	r3, #34	@ 0x22
 810eda0:	d106      	bne.n	810edb0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810eda2:	697b      	ldr	r3, [r7, #20]
 810eda4:	2200      	movs	r2, #0
 810eda6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 810edaa:	6978      	ldr	r0, [r7, #20]
 810edac:	f7ff feb6 	bl	810eb1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810edb0:	697b      	ldr	r3, [r7, #20]
 810edb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810edb6:	f043 0210 	orr.w	r2, r3, #16
 810edba:	697b      	ldr	r3, [r7, #20]
 810edbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810edc0:	6978      	ldr	r0, [r7, #20]
 810edc2:	f7fe fe8b 	bl	810dadc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810edc6:	bf00      	nop
 810edc8:	3718      	adds	r7, #24
 810edca:	46bd      	mov	sp, r7
 810edcc:	bd80      	pop	{r7, pc}

0810edce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810edce:	b580      	push	{r7, lr}
 810edd0:	b084      	sub	sp, #16
 810edd2:	af00      	add	r7, sp, #0
 810edd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810edd6:	687b      	ldr	r3, [r7, #4]
 810edd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810edda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810eddc:	68fb      	ldr	r3, [r7, #12]
 810edde:	2200      	movs	r2, #0
 810ede0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810ede4:	68fb      	ldr	r3, [r7, #12]
 810ede6:	2200      	movs	r2, #0
 810ede8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810edec:	68f8      	ldr	r0, [r7, #12]
 810edee:	f7fe fe75 	bl	810dadc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810edf2:	bf00      	nop
 810edf4:	3710      	adds	r7, #16
 810edf6:	46bd      	mov	sp, r7
 810edf8:	bd80      	pop	{r7, pc}

0810edfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810edfa:	b580      	push	{r7, lr}
 810edfc:	b088      	sub	sp, #32
 810edfe:	af00      	add	r7, sp, #0
 810ee00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810ee02:	687b      	ldr	r3, [r7, #4]
 810ee04:	681b      	ldr	r3, [r3, #0]
 810ee06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ee08:	68fb      	ldr	r3, [r7, #12]
 810ee0a:	e853 3f00 	ldrex	r3, [r3]
 810ee0e:	60bb      	str	r3, [r7, #8]
   return(result);
 810ee10:	68bb      	ldr	r3, [r7, #8]
 810ee12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ee16:	61fb      	str	r3, [r7, #28]
 810ee18:	687b      	ldr	r3, [r7, #4]
 810ee1a:	681b      	ldr	r3, [r3, #0]
 810ee1c:	461a      	mov	r2, r3
 810ee1e:	69fb      	ldr	r3, [r7, #28]
 810ee20:	61bb      	str	r3, [r7, #24]
 810ee22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ee24:	6979      	ldr	r1, [r7, #20]
 810ee26:	69ba      	ldr	r2, [r7, #24]
 810ee28:	e841 2300 	strex	r3, r2, [r1]
 810ee2c:	613b      	str	r3, [r7, #16]
   return(result);
 810ee2e:	693b      	ldr	r3, [r7, #16]
 810ee30:	2b00      	cmp	r3, #0
 810ee32:	d1e6      	bne.n	810ee02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810ee34:	687b      	ldr	r3, [r7, #4]
 810ee36:	2220      	movs	r2, #32
 810ee38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810ee3c:	687b      	ldr	r3, [r7, #4]
 810ee3e:	2200      	movs	r2, #0
 810ee40:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810ee42:	6878      	ldr	r0, [r7, #4]
 810ee44:	f7fe fe40 	bl	810dac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ee48:	bf00      	nop
 810ee4a:	3720      	adds	r7, #32
 810ee4c:	46bd      	mov	sp, r7
 810ee4e:	bd80      	pop	{r7, pc}

0810ee50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810ee50:	b480      	push	{r7}
 810ee52:	b083      	sub	sp, #12
 810ee54:	af00      	add	r7, sp, #0
 810ee56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810ee58:	bf00      	nop
 810ee5a:	370c      	adds	r7, #12
 810ee5c:	46bd      	mov	sp, r7
 810ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee62:	4770      	bx	lr

0810ee64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810ee64:	b480      	push	{r7}
 810ee66:	b083      	sub	sp, #12
 810ee68:	af00      	add	r7, sp, #0
 810ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810ee6c:	bf00      	nop
 810ee6e:	370c      	adds	r7, #12
 810ee70:	46bd      	mov	sp, r7
 810ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee76:	4770      	bx	lr

0810ee78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810ee78:	b480      	push	{r7}
 810ee7a:	b083      	sub	sp, #12
 810ee7c:	af00      	add	r7, sp, #0
 810ee7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810ee80:	bf00      	nop
 810ee82:	370c      	adds	r7, #12
 810ee84:	46bd      	mov	sp, r7
 810ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee8a:	4770      	bx	lr

0810ee8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ee8c:	b480      	push	{r7}
 810ee8e:	b085      	sub	sp, #20
 810ee90:	af00      	add	r7, sp, #0
 810ee92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ee94:	687b      	ldr	r3, [r7, #4]
 810ee96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ee9a:	2b01      	cmp	r3, #1
 810ee9c:	d101      	bne.n	810eea2 <HAL_UARTEx_DisableFifoMode+0x16>
 810ee9e:	2302      	movs	r3, #2
 810eea0:	e027      	b.n	810eef2 <HAL_UARTEx_DisableFifoMode+0x66>
 810eea2:	687b      	ldr	r3, [r7, #4]
 810eea4:	2201      	movs	r2, #1
 810eea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810eeaa:	687b      	ldr	r3, [r7, #4]
 810eeac:	2224      	movs	r2, #36	@ 0x24
 810eeae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810eeb2:	687b      	ldr	r3, [r7, #4]
 810eeb4:	681b      	ldr	r3, [r3, #0]
 810eeb6:	681b      	ldr	r3, [r3, #0]
 810eeb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810eeba:	687b      	ldr	r3, [r7, #4]
 810eebc:	681b      	ldr	r3, [r3, #0]
 810eebe:	681a      	ldr	r2, [r3, #0]
 810eec0:	687b      	ldr	r3, [r7, #4]
 810eec2:	681b      	ldr	r3, [r3, #0]
 810eec4:	f022 0201 	bic.w	r2, r2, #1
 810eec8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810eeca:	68fb      	ldr	r3, [r7, #12]
 810eecc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810eed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810eed2:	687b      	ldr	r3, [r7, #4]
 810eed4:	2200      	movs	r2, #0
 810eed6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810eed8:	687b      	ldr	r3, [r7, #4]
 810eeda:	681b      	ldr	r3, [r3, #0]
 810eedc:	68fa      	ldr	r2, [r7, #12]
 810eede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810eee0:	687b      	ldr	r3, [r7, #4]
 810eee2:	2220      	movs	r2, #32
 810eee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810eee8:	687b      	ldr	r3, [r7, #4]
 810eeea:	2200      	movs	r2, #0
 810eeec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810eef0:	2300      	movs	r3, #0
}
 810eef2:	4618      	mov	r0, r3
 810eef4:	3714      	adds	r7, #20
 810eef6:	46bd      	mov	sp, r7
 810eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eefc:	4770      	bx	lr

0810eefe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810eefe:	b580      	push	{r7, lr}
 810ef00:	b084      	sub	sp, #16
 810ef02:	af00      	add	r7, sp, #0
 810ef04:	6078      	str	r0, [r7, #4]
 810ef06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ef08:	687b      	ldr	r3, [r7, #4]
 810ef0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ef0e:	2b01      	cmp	r3, #1
 810ef10:	d101      	bne.n	810ef16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ef12:	2302      	movs	r3, #2
 810ef14:	e02d      	b.n	810ef72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ef16:	687b      	ldr	r3, [r7, #4]
 810ef18:	2201      	movs	r2, #1
 810ef1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ef1e:	687b      	ldr	r3, [r7, #4]
 810ef20:	2224      	movs	r2, #36	@ 0x24
 810ef22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ef26:	687b      	ldr	r3, [r7, #4]
 810ef28:	681b      	ldr	r3, [r3, #0]
 810ef2a:	681b      	ldr	r3, [r3, #0]
 810ef2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ef2e:	687b      	ldr	r3, [r7, #4]
 810ef30:	681b      	ldr	r3, [r3, #0]
 810ef32:	681a      	ldr	r2, [r3, #0]
 810ef34:	687b      	ldr	r3, [r7, #4]
 810ef36:	681b      	ldr	r3, [r3, #0]
 810ef38:	f022 0201 	bic.w	r2, r2, #1
 810ef3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ef3e:	687b      	ldr	r3, [r7, #4]
 810ef40:	681b      	ldr	r3, [r3, #0]
 810ef42:	689b      	ldr	r3, [r3, #8]
 810ef44:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810ef48:	687b      	ldr	r3, [r7, #4]
 810ef4a:	681b      	ldr	r3, [r3, #0]
 810ef4c:	683a      	ldr	r2, [r7, #0]
 810ef4e:	430a      	orrs	r2, r1
 810ef50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ef52:	6878      	ldr	r0, [r7, #4]
 810ef54:	f000 f850 	bl	810eff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ef58:	687b      	ldr	r3, [r7, #4]
 810ef5a:	681b      	ldr	r3, [r3, #0]
 810ef5c:	68fa      	ldr	r2, [r7, #12]
 810ef5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ef60:	687b      	ldr	r3, [r7, #4]
 810ef62:	2220      	movs	r2, #32
 810ef64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ef68:	687b      	ldr	r3, [r7, #4]
 810ef6a:	2200      	movs	r2, #0
 810ef6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ef70:	2300      	movs	r3, #0
}
 810ef72:	4618      	mov	r0, r3
 810ef74:	3710      	adds	r7, #16
 810ef76:	46bd      	mov	sp, r7
 810ef78:	bd80      	pop	{r7, pc}

0810ef7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ef7a:	b580      	push	{r7, lr}
 810ef7c:	b084      	sub	sp, #16
 810ef7e:	af00      	add	r7, sp, #0
 810ef80:	6078      	str	r0, [r7, #4]
 810ef82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ef84:	687b      	ldr	r3, [r7, #4]
 810ef86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ef8a:	2b01      	cmp	r3, #1
 810ef8c:	d101      	bne.n	810ef92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810ef8e:	2302      	movs	r3, #2
 810ef90:	e02d      	b.n	810efee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ef92:	687b      	ldr	r3, [r7, #4]
 810ef94:	2201      	movs	r2, #1
 810ef96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ef9a:	687b      	ldr	r3, [r7, #4]
 810ef9c:	2224      	movs	r2, #36	@ 0x24
 810ef9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810efa2:	687b      	ldr	r3, [r7, #4]
 810efa4:	681b      	ldr	r3, [r3, #0]
 810efa6:	681b      	ldr	r3, [r3, #0]
 810efa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810efaa:	687b      	ldr	r3, [r7, #4]
 810efac:	681b      	ldr	r3, [r3, #0]
 810efae:	681a      	ldr	r2, [r3, #0]
 810efb0:	687b      	ldr	r3, [r7, #4]
 810efb2:	681b      	ldr	r3, [r3, #0]
 810efb4:	f022 0201 	bic.w	r2, r2, #1
 810efb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810efba:	687b      	ldr	r3, [r7, #4]
 810efbc:	681b      	ldr	r3, [r3, #0]
 810efbe:	689b      	ldr	r3, [r3, #8]
 810efc0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810efc4:	687b      	ldr	r3, [r7, #4]
 810efc6:	681b      	ldr	r3, [r3, #0]
 810efc8:	683a      	ldr	r2, [r7, #0]
 810efca:	430a      	orrs	r2, r1
 810efcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810efce:	6878      	ldr	r0, [r7, #4]
 810efd0:	f000 f812 	bl	810eff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810efd4:	687b      	ldr	r3, [r7, #4]
 810efd6:	681b      	ldr	r3, [r3, #0]
 810efd8:	68fa      	ldr	r2, [r7, #12]
 810efda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810efdc:	687b      	ldr	r3, [r7, #4]
 810efde:	2220      	movs	r2, #32
 810efe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810efe4:	687b      	ldr	r3, [r7, #4]
 810efe6:	2200      	movs	r2, #0
 810efe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810efec:	2300      	movs	r3, #0
}
 810efee:	4618      	mov	r0, r3
 810eff0:	3710      	adds	r7, #16
 810eff2:	46bd      	mov	sp, r7
 810eff4:	bd80      	pop	{r7, pc}
	...

0810eff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810eff8:	b480      	push	{r7}
 810effa:	b085      	sub	sp, #20
 810effc:	af00      	add	r7, sp, #0
 810effe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810f000:	687b      	ldr	r3, [r7, #4]
 810f002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810f004:	2b00      	cmp	r3, #0
 810f006:	d108      	bne.n	810f01a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810f008:	687b      	ldr	r3, [r7, #4]
 810f00a:	2201      	movs	r2, #1
 810f00c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810f010:	687b      	ldr	r3, [r7, #4]
 810f012:	2201      	movs	r2, #1
 810f014:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810f018:	e031      	b.n	810f07e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810f01a:	2310      	movs	r3, #16
 810f01c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810f01e:	2310      	movs	r3, #16
 810f020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810f022:	687b      	ldr	r3, [r7, #4]
 810f024:	681b      	ldr	r3, [r3, #0]
 810f026:	689b      	ldr	r3, [r3, #8]
 810f028:	0e5b      	lsrs	r3, r3, #25
 810f02a:	b2db      	uxtb	r3, r3
 810f02c:	f003 0307 	and.w	r3, r3, #7
 810f030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810f032:	687b      	ldr	r3, [r7, #4]
 810f034:	681b      	ldr	r3, [r3, #0]
 810f036:	689b      	ldr	r3, [r3, #8]
 810f038:	0f5b      	lsrs	r3, r3, #29
 810f03a:	b2db      	uxtb	r3, r3
 810f03c:	f003 0307 	and.w	r3, r3, #7
 810f040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810f042:	7bbb      	ldrb	r3, [r7, #14]
 810f044:	7b3a      	ldrb	r2, [r7, #12]
 810f046:	4911      	ldr	r1, [pc, #68]	@ (810f08c <UARTEx_SetNbDataToProcess+0x94>)
 810f048:	5c8a      	ldrb	r2, [r1, r2]
 810f04a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810f04e:	7b3a      	ldrb	r2, [r7, #12]
 810f050:	490f      	ldr	r1, [pc, #60]	@ (810f090 <UARTEx_SetNbDataToProcess+0x98>)
 810f052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810f054:	fb93 f3f2 	sdiv	r3, r3, r2
 810f058:	b29a      	uxth	r2, r3
 810f05a:	687b      	ldr	r3, [r7, #4]
 810f05c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810f060:	7bfb      	ldrb	r3, [r7, #15]
 810f062:	7b7a      	ldrb	r2, [r7, #13]
 810f064:	4909      	ldr	r1, [pc, #36]	@ (810f08c <UARTEx_SetNbDataToProcess+0x94>)
 810f066:	5c8a      	ldrb	r2, [r1, r2]
 810f068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810f06c:	7b7a      	ldrb	r2, [r7, #13]
 810f06e:	4908      	ldr	r1, [pc, #32]	@ (810f090 <UARTEx_SetNbDataToProcess+0x98>)
 810f070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810f072:	fb93 f3f2 	sdiv	r3, r3, r2
 810f076:	b29a      	uxth	r2, r3
 810f078:	687b      	ldr	r3, [r7, #4]
 810f07a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810f07e:	bf00      	nop
 810f080:	3714      	adds	r7, #20
 810f082:	46bd      	mov	sp, r7
 810f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f088:	4770      	bx	lr
 810f08a:	bf00      	nop
 810f08c:	08128934 	.word	0x08128934
 810f090:	0812893c 	.word	0x0812893c

0810f094 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 810f094:	b580      	push	{r7, lr}
 810f096:	b084      	sub	sp, #16
 810f098:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 810f09a:	4b95      	ldr	r3, [pc, #596]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f09c:	22c0      	movs	r2, #192	@ 0xc0
 810f09e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 810f0a0:	4b93      	ldr	r3, [pc, #588]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f0a2:	22a8      	movs	r2, #168	@ 0xa8
 810f0a4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 35;
 810f0a6:	4b92      	ldr	r3, [pc, #584]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f0a8:	2223      	movs	r2, #35	@ 0x23
 810f0aa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 84;
 810f0ac:	4b90      	ldr	r3, [pc, #576]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f0ae:	2254      	movs	r2, #84	@ 0x54
 810f0b0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 810f0b2:	4b90      	ldr	r3, [pc, #576]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f0b4:	22ff      	movs	r2, #255	@ 0xff
 810f0b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 810f0b8:	4b8e      	ldr	r3, [pc, #568]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f0ba:	22ff      	movs	r2, #255	@ 0xff
 810f0bc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 810f0be:	4b8d      	ldr	r3, [pc, #564]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f0c0:	22ff      	movs	r2, #255	@ 0xff
 810f0c2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 810f0c4:	4b8b      	ldr	r3, [pc, #556]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f0c6:	2200      	movs	r2, #0
 810f0c8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 810f0ca:	4b8b      	ldr	r3, [pc, #556]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f0cc:	2200      	movs	r2, #0
 810f0ce:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 810f0d0:	4b89      	ldr	r3, [pc, #548]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f0d2:	2200      	movs	r2, #0
 810f0d4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 810f0d6:	4b88      	ldr	r3, [pc, #544]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f0d8:	2200      	movs	r2, #0
 810f0da:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 810f0dc:	4b86      	ldr	r3, [pc, #536]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f0de:	2200      	movs	r2, #0
 810f0e0:	70da      	strb	r2, [r3, #3]
  		slot = 0;  // Reset slot to default
  	}

  #else
  	// If none of the hardware defines are set, retain default IP and slot
  	LWIP_PLATFORM_DIAG(("No hardware define set. Using default IP 192.168.35.84 and slot 0.\n"));
 810f0e2:	4886      	ldr	r0, [pc, #536]	@ (810f2fc <MX_LWIP_Init+0x268>)
 810f0e4:	f012 feb6 	bl	8121e54 <puts>
  	slot = 0;
 810f0e8:	4b85      	ldr	r3, [pc, #532]	@ (810f300 <MX_LWIP_Init+0x26c>)
 810f0ea:	2200      	movs	r2, #0
 810f0ec:	601a      	str	r2, [r3, #0]
  #endif

/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 810f0ee:	2100      	movs	r1, #0
 810f0f0:	2000      	movs	r0, #0
 810f0f2:	f011 f9f3 	bl	81204dc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 810f0f6:	4b7e      	ldr	r3, [pc, #504]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f0f8:	781b      	ldrb	r3, [r3, #0]
 810f0fa:	061a      	lsls	r2, r3, #24
 810f0fc:	4b7c      	ldr	r3, [pc, #496]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f0fe:	785b      	ldrb	r3, [r3, #1]
 810f100:	041b      	lsls	r3, r3, #16
 810f102:	431a      	orrs	r2, r3
 810f104:	4b7a      	ldr	r3, [pc, #488]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f106:	789b      	ldrb	r3, [r3, #2]
 810f108:	021b      	lsls	r3, r3, #8
 810f10a:	4313      	orrs	r3, r2
 810f10c:	4a78      	ldr	r2, [pc, #480]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f10e:	78d2      	ldrb	r2, [r2, #3]
 810f110:	4313      	orrs	r3, r2
 810f112:	061a      	lsls	r2, r3, #24
 810f114:	4b76      	ldr	r3, [pc, #472]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f116:	781b      	ldrb	r3, [r3, #0]
 810f118:	0619      	lsls	r1, r3, #24
 810f11a:	4b75      	ldr	r3, [pc, #468]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f11c:	785b      	ldrb	r3, [r3, #1]
 810f11e:	041b      	lsls	r3, r3, #16
 810f120:	4319      	orrs	r1, r3
 810f122:	4b73      	ldr	r3, [pc, #460]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f124:	789b      	ldrb	r3, [r3, #2]
 810f126:	021b      	lsls	r3, r3, #8
 810f128:	430b      	orrs	r3, r1
 810f12a:	4971      	ldr	r1, [pc, #452]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f12c:	78c9      	ldrb	r1, [r1, #3]
 810f12e:	430b      	orrs	r3, r1
 810f130:	021b      	lsls	r3, r3, #8
 810f132:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810f136:	431a      	orrs	r2, r3
 810f138:	4b6d      	ldr	r3, [pc, #436]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f13a:	781b      	ldrb	r3, [r3, #0]
 810f13c:	0619      	lsls	r1, r3, #24
 810f13e:	4b6c      	ldr	r3, [pc, #432]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f140:	785b      	ldrb	r3, [r3, #1]
 810f142:	041b      	lsls	r3, r3, #16
 810f144:	4319      	orrs	r1, r3
 810f146:	4b6a      	ldr	r3, [pc, #424]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f148:	789b      	ldrb	r3, [r3, #2]
 810f14a:	021b      	lsls	r3, r3, #8
 810f14c:	430b      	orrs	r3, r1
 810f14e:	4968      	ldr	r1, [pc, #416]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f150:	78c9      	ldrb	r1, [r1, #3]
 810f152:	430b      	orrs	r3, r1
 810f154:	0a1b      	lsrs	r3, r3, #8
 810f156:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810f15a:	431a      	orrs	r2, r3
 810f15c:	4b64      	ldr	r3, [pc, #400]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f15e:	781b      	ldrb	r3, [r3, #0]
 810f160:	0619      	lsls	r1, r3, #24
 810f162:	4b63      	ldr	r3, [pc, #396]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f164:	785b      	ldrb	r3, [r3, #1]
 810f166:	041b      	lsls	r3, r3, #16
 810f168:	4319      	orrs	r1, r3
 810f16a:	4b61      	ldr	r3, [pc, #388]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f16c:	789b      	ldrb	r3, [r3, #2]
 810f16e:	021b      	lsls	r3, r3, #8
 810f170:	430b      	orrs	r3, r1
 810f172:	495f      	ldr	r1, [pc, #380]	@ (810f2f0 <MX_LWIP_Init+0x25c>)
 810f174:	78c9      	ldrb	r1, [r1, #3]
 810f176:	430b      	orrs	r3, r1
 810f178:	0e1b      	lsrs	r3, r3, #24
 810f17a:	4313      	orrs	r3, r2
 810f17c:	4a61      	ldr	r2, [pc, #388]	@ (810f304 <MX_LWIP_Init+0x270>)
 810f17e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 810f180:	4b5c      	ldr	r3, [pc, #368]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f182:	781b      	ldrb	r3, [r3, #0]
 810f184:	061a      	lsls	r2, r3, #24
 810f186:	4b5b      	ldr	r3, [pc, #364]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f188:	785b      	ldrb	r3, [r3, #1]
 810f18a:	041b      	lsls	r3, r3, #16
 810f18c:	431a      	orrs	r2, r3
 810f18e:	4b59      	ldr	r3, [pc, #356]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f190:	789b      	ldrb	r3, [r3, #2]
 810f192:	021b      	lsls	r3, r3, #8
 810f194:	4313      	orrs	r3, r2
 810f196:	4a57      	ldr	r2, [pc, #348]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f198:	78d2      	ldrb	r2, [r2, #3]
 810f19a:	4313      	orrs	r3, r2
 810f19c:	061a      	lsls	r2, r3, #24
 810f19e:	4b55      	ldr	r3, [pc, #340]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1a0:	781b      	ldrb	r3, [r3, #0]
 810f1a2:	0619      	lsls	r1, r3, #24
 810f1a4:	4b53      	ldr	r3, [pc, #332]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1a6:	785b      	ldrb	r3, [r3, #1]
 810f1a8:	041b      	lsls	r3, r3, #16
 810f1aa:	4319      	orrs	r1, r3
 810f1ac:	4b51      	ldr	r3, [pc, #324]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1ae:	789b      	ldrb	r3, [r3, #2]
 810f1b0:	021b      	lsls	r3, r3, #8
 810f1b2:	430b      	orrs	r3, r1
 810f1b4:	494f      	ldr	r1, [pc, #316]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1b6:	78c9      	ldrb	r1, [r1, #3]
 810f1b8:	430b      	orrs	r3, r1
 810f1ba:	021b      	lsls	r3, r3, #8
 810f1bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810f1c0:	431a      	orrs	r2, r3
 810f1c2:	4b4c      	ldr	r3, [pc, #304]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1c4:	781b      	ldrb	r3, [r3, #0]
 810f1c6:	0619      	lsls	r1, r3, #24
 810f1c8:	4b4a      	ldr	r3, [pc, #296]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1ca:	785b      	ldrb	r3, [r3, #1]
 810f1cc:	041b      	lsls	r3, r3, #16
 810f1ce:	4319      	orrs	r1, r3
 810f1d0:	4b48      	ldr	r3, [pc, #288]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1d2:	789b      	ldrb	r3, [r3, #2]
 810f1d4:	021b      	lsls	r3, r3, #8
 810f1d6:	430b      	orrs	r3, r1
 810f1d8:	4946      	ldr	r1, [pc, #280]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1da:	78c9      	ldrb	r1, [r1, #3]
 810f1dc:	430b      	orrs	r3, r1
 810f1de:	0a1b      	lsrs	r3, r3, #8
 810f1e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810f1e4:	431a      	orrs	r2, r3
 810f1e6:	4b43      	ldr	r3, [pc, #268]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1e8:	781b      	ldrb	r3, [r3, #0]
 810f1ea:	0619      	lsls	r1, r3, #24
 810f1ec:	4b41      	ldr	r3, [pc, #260]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1ee:	785b      	ldrb	r3, [r3, #1]
 810f1f0:	041b      	lsls	r3, r3, #16
 810f1f2:	4319      	orrs	r1, r3
 810f1f4:	4b3f      	ldr	r3, [pc, #252]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1f6:	789b      	ldrb	r3, [r3, #2]
 810f1f8:	021b      	lsls	r3, r3, #8
 810f1fa:	430b      	orrs	r3, r1
 810f1fc:	493d      	ldr	r1, [pc, #244]	@ (810f2f4 <MX_LWIP_Init+0x260>)
 810f1fe:	78c9      	ldrb	r1, [r1, #3]
 810f200:	430b      	orrs	r3, r1
 810f202:	0e1b      	lsrs	r3, r3, #24
 810f204:	4313      	orrs	r3, r2
 810f206:	4a40      	ldr	r2, [pc, #256]	@ (810f308 <MX_LWIP_Init+0x274>)
 810f208:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 810f20a:	4b3b      	ldr	r3, [pc, #236]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f20c:	781b      	ldrb	r3, [r3, #0]
 810f20e:	061a      	lsls	r2, r3, #24
 810f210:	4b39      	ldr	r3, [pc, #228]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f212:	785b      	ldrb	r3, [r3, #1]
 810f214:	041b      	lsls	r3, r3, #16
 810f216:	431a      	orrs	r2, r3
 810f218:	4b37      	ldr	r3, [pc, #220]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f21a:	789b      	ldrb	r3, [r3, #2]
 810f21c:	021b      	lsls	r3, r3, #8
 810f21e:	4313      	orrs	r3, r2
 810f220:	4a35      	ldr	r2, [pc, #212]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f222:	78d2      	ldrb	r2, [r2, #3]
 810f224:	4313      	orrs	r3, r2
 810f226:	061a      	lsls	r2, r3, #24
 810f228:	4b33      	ldr	r3, [pc, #204]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f22a:	781b      	ldrb	r3, [r3, #0]
 810f22c:	0619      	lsls	r1, r3, #24
 810f22e:	4b32      	ldr	r3, [pc, #200]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f230:	785b      	ldrb	r3, [r3, #1]
 810f232:	041b      	lsls	r3, r3, #16
 810f234:	4319      	orrs	r1, r3
 810f236:	4b30      	ldr	r3, [pc, #192]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f238:	789b      	ldrb	r3, [r3, #2]
 810f23a:	021b      	lsls	r3, r3, #8
 810f23c:	430b      	orrs	r3, r1
 810f23e:	492e      	ldr	r1, [pc, #184]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f240:	78c9      	ldrb	r1, [r1, #3]
 810f242:	430b      	orrs	r3, r1
 810f244:	021b      	lsls	r3, r3, #8
 810f246:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810f24a:	431a      	orrs	r2, r3
 810f24c:	4b2a      	ldr	r3, [pc, #168]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f24e:	781b      	ldrb	r3, [r3, #0]
 810f250:	0619      	lsls	r1, r3, #24
 810f252:	4b29      	ldr	r3, [pc, #164]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f254:	785b      	ldrb	r3, [r3, #1]
 810f256:	041b      	lsls	r3, r3, #16
 810f258:	4319      	orrs	r1, r3
 810f25a:	4b27      	ldr	r3, [pc, #156]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f25c:	789b      	ldrb	r3, [r3, #2]
 810f25e:	021b      	lsls	r3, r3, #8
 810f260:	430b      	orrs	r3, r1
 810f262:	4925      	ldr	r1, [pc, #148]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f264:	78c9      	ldrb	r1, [r1, #3]
 810f266:	430b      	orrs	r3, r1
 810f268:	0a1b      	lsrs	r3, r3, #8
 810f26a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810f26e:	431a      	orrs	r2, r3
 810f270:	4b21      	ldr	r3, [pc, #132]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f272:	781b      	ldrb	r3, [r3, #0]
 810f274:	0619      	lsls	r1, r3, #24
 810f276:	4b20      	ldr	r3, [pc, #128]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f278:	785b      	ldrb	r3, [r3, #1]
 810f27a:	041b      	lsls	r3, r3, #16
 810f27c:	4319      	orrs	r1, r3
 810f27e:	4b1e      	ldr	r3, [pc, #120]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f280:	789b      	ldrb	r3, [r3, #2]
 810f282:	021b      	lsls	r3, r3, #8
 810f284:	430b      	orrs	r3, r1
 810f286:	491c      	ldr	r1, [pc, #112]	@ (810f2f8 <MX_LWIP_Init+0x264>)
 810f288:	78c9      	ldrb	r1, [r1, #3]
 810f28a:	430b      	orrs	r3, r1
 810f28c:	0e1b      	lsrs	r3, r3, #24
 810f28e:	4313      	orrs	r3, r2
 810f290:	4a1e      	ldr	r2, [pc, #120]	@ (810f30c <MX_LWIP_Init+0x278>)
 810f292:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 810f294:	4b1e      	ldr	r3, [pc, #120]	@ (810f310 <MX_LWIP_Init+0x27c>)
 810f296:	9302      	str	r3, [sp, #8]
 810f298:	4b1e      	ldr	r3, [pc, #120]	@ (810f314 <MX_LWIP_Init+0x280>)
 810f29a:	9301      	str	r3, [sp, #4]
 810f29c:	2300      	movs	r3, #0
 810f29e:	9300      	str	r3, [sp, #0]
 810f2a0:	4b1a      	ldr	r3, [pc, #104]	@ (810f30c <MX_LWIP_Init+0x278>)
 810f2a2:	4a19      	ldr	r2, [pc, #100]	@ (810f308 <MX_LWIP_Init+0x274>)
 810f2a4:	4917      	ldr	r1, [pc, #92]	@ (810f304 <MX_LWIP_Init+0x270>)
 810f2a6:	481c      	ldr	r0, [pc, #112]	@ (810f318 <MX_LWIP_Init+0x284>)
 810f2a8:	f009 fce4 	bl	8118c74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 810f2ac:	481a      	ldr	r0, [pc, #104]	@ (810f318 <MX_LWIP_Init+0x284>)
 810f2ae:	f009 fe97 	bl	8118fe0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 810f2b2:	4819      	ldr	r0, [pc, #100]	@ (810f318 <MX_LWIP_Init+0x284>)
 810f2b4:	f009 fea4 	bl	8119000 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 810f2b8:	4918      	ldr	r1, [pc, #96]	@ (810f31c <MX_LWIP_Init+0x288>)
 810f2ba:	4817      	ldr	r0, [pc, #92]	@ (810f318 <MX_LWIP_Init+0x284>)
 810f2bc:	f009 ffaa 	bl	8119214 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 810f2c0:	2224      	movs	r2, #36	@ 0x24
 810f2c2:	2100      	movs	r1, #0
 810f2c4:	4816      	ldr	r0, [pc, #88]	@ (810f320 <MX_LWIP_Init+0x28c>)
 810f2c6:	f012 ff03 	bl	81220d0 <memset>
  attributes.name = "EthLink";
 810f2ca:	4b15      	ldr	r3, [pc, #84]	@ (810f320 <MX_LWIP_Init+0x28c>)
 810f2cc:	4a15      	ldr	r2, [pc, #84]	@ (810f324 <MX_LWIP_Init+0x290>)
 810f2ce:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 810f2d0:	4b13      	ldr	r3, [pc, #76]	@ (810f320 <MX_LWIP_Init+0x28c>)
 810f2d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810f2d6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 810f2d8:	4b11      	ldr	r3, [pc, #68]	@ (810f320 <MX_LWIP_Init+0x28c>)
 810f2da:	2210      	movs	r2, #16
 810f2dc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 810f2de:	4a10      	ldr	r2, [pc, #64]	@ (810f320 <MX_LWIP_Init+0x28c>)
 810f2e0:	490d      	ldr	r1, [pc, #52]	@ (810f318 <MX_LWIP_Init+0x284>)
 810f2e2:	4811      	ldr	r0, [pc, #68]	@ (810f328 <MX_LWIP_Init+0x294>)
 810f2e4:	f000 fe51 	bl	810ff8a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 810f2e8:	bf00      	nop
 810f2ea:	46bd      	mov	sp, r7
 810f2ec:	bd80      	pop	{r7, pc}
 810f2ee:	bf00      	nop
 810f2f0:	24000738 	.word	0x24000738
 810f2f4:	2400073c 	.word	0x2400073c
 810f2f8:	24000740 	.word	0x24000740
 810f2fc:	08124c98 	.word	0x08124c98
 810f300:	24000654 	.word	0x24000654
 810f304:	2400072c 	.word	0x2400072c
 810f308:	24000730 	.word	0x24000730
 810f30c:	24000734 	.word	0x24000734
 810f310:	081203f5 	.word	0x081203f5
 810f314:	0810f865 	.word	0x0810f865
 810f318:	240006f8 	.word	0x240006f8
 810f31c:	0810f32d 	.word	0x0810f32d
 810f320:	24000744 	.word	0x24000744
 810f324:	08124cdc 	.word	0x08124cdc
 810f328:	0810fb15 	.word	0x0810fb15

0810f32c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 810f32c:	b480      	push	{r7}
 810f32e:	b083      	sub	sp, #12
 810f330:	af00      	add	r7, sp, #0
 810f332:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 810f334:	bf00      	nop
 810f336:	370c      	adds	r7, #12
 810f338:	46bd      	mov	sp, r7
 810f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f33e:	4770      	bx	lr

0810f340 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 810f340:	b580      	push	{r7, lr}
 810f342:	b082      	sub	sp, #8
 810f344:	af00      	add	r7, sp, #0
 810f346:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 810f348:	4b04      	ldr	r3, [pc, #16]	@ (810f35c <HAL_ETH_RxCpltCallback+0x1c>)
 810f34a:	681b      	ldr	r3, [r3, #0]
 810f34c:	4618      	mov	r0, r3
 810f34e:	f001 f8bf 	bl	81104d0 <osSemaphoreRelease>
}
 810f352:	bf00      	nop
 810f354:	3708      	adds	r7, #8
 810f356:	46bd      	mov	sp, r7
 810f358:	bd80      	pop	{r7, pc}
 810f35a:	bf00      	nop
 810f35c:	24000770 	.word	0x24000770

0810f360 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 810f360:	b580      	push	{r7, lr}
 810f362:	b082      	sub	sp, #8
 810f364:	af00      	add	r7, sp, #0
 810f366:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 810f368:	4b04      	ldr	r3, [pc, #16]	@ (810f37c <HAL_ETH_TxCpltCallback+0x1c>)
 810f36a:	681b      	ldr	r3, [r3, #0]
 810f36c:	4618      	mov	r0, r3
 810f36e:	f001 f8af 	bl	81104d0 <osSemaphoreRelease>
}
 810f372:	bf00      	nop
 810f374:	3708      	adds	r7, #8
 810f376:	46bd      	mov	sp, r7
 810f378:	bd80      	pop	{r7, pc}
 810f37a:	bf00      	nop
 810f37c:	24000774 	.word	0x24000774

0810f380 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 810f380:	b580      	push	{r7, lr}
 810f382:	b082      	sub	sp, #8
 810f384:	af00      	add	r7, sp, #0
 810f386:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 810f388:	6878      	ldr	r0, [r7, #4]
 810f38a:	f7f8 fd14 	bl	8107db6 <HAL_ETH_GetDMAError>
 810f38e:	4603      	mov	r3, r0
 810f390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810f394:	2b80      	cmp	r3, #128	@ 0x80
 810f396:	d104      	bne.n	810f3a2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 810f398:	4b04      	ldr	r3, [pc, #16]	@ (810f3ac <HAL_ETH_ErrorCallback+0x2c>)
 810f39a:	681b      	ldr	r3, [r3, #0]
 810f39c:	4618      	mov	r0, r3
 810f39e:	f001 f897 	bl	81104d0 <osSemaphoreRelease>
  }
}
 810f3a2:	bf00      	nop
 810f3a4:	3708      	adds	r7, #8
 810f3a6:	46bd      	mov	sp, r7
 810f3a8:	bd80      	pop	{r7, pc}
 810f3aa:	bf00      	nop
 810f3ac:	24000770 	.word	0x24000770

0810f3b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 810f3b0:	b580      	push	{r7, lr}
 810f3b2:	b0ae      	sub	sp, #184	@ 0xb8
 810f3b4:	af00      	add	r7, sp, #0
 810f3b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 810f3b8:	2300      	movs	r3, #0
 810f3ba:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 810f3be:	2300      	movs	r3, #0
 810f3c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t PHYLinkState = 0;
 810f3c4:	2300      	movs	r3, #0
 810f3c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  ETH_MACConfigTypeDef MACConf = {0};
 810f3ca:	f107 0320 	add.w	r3, r7, #32
 810f3ce:	2264      	movs	r2, #100	@ 0x64
 810f3d0:	2100      	movs	r1, #0
 810f3d2:	4618      	mov	r0, r3
 810f3d4:	f012 fe7c 	bl	81220d0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 810f3d8:	4b9a      	ldr	r3, [pc, #616]	@ (810f644 <low_level_init+0x294>)
 810f3da:	4a9b      	ldr	r2, [pc, #620]	@ (810f648 <low_level_init+0x298>)
 810f3dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 810f3de:	2300      	movs	r3, #0
 810f3e0:	763b      	strb	r3, [r7, #24]
  MACAddr[1] = 0x80;
 810f3e2:	2380      	movs	r3, #128	@ 0x80
 810f3e4:	767b      	strb	r3, [r7, #25]
  MACAddr[2] = 0xE1;
 810f3e6:	23e1      	movs	r3, #225	@ 0xe1
 810f3e8:	76bb      	strb	r3, [r7, #26]
  MACAddr[3] = 0x00;
 810f3ea:	2300      	movs	r3, #0
 810f3ec:	76fb      	strb	r3, [r7, #27]
  MACAddr[4] = 0x08;
 810f3ee:	2308      	movs	r3, #8
 810f3f0:	773b      	strb	r3, [r7, #28]
  MACAddr[5] = 0x04;
 810f3f2:	2304      	movs	r3, #4
 810f3f4:	777b      	strb	r3, [r7, #29]
  heth.Init.MACAddr = &MACAddr[0];
 810f3f6:	4a93      	ldr	r2, [pc, #588]	@ (810f644 <low_level_init+0x294>)
 810f3f8:	f107 0318 	add.w	r3, r7, #24
 810f3fc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 810f3fe:	4b91      	ldr	r3, [pc, #580]	@ (810f644 <low_level_init+0x294>)
 810f400:	2201      	movs	r2, #1
 810f402:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 810f404:	4b8f      	ldr	r3, [pc, #572]	@ (810f644 <low_level_init+0x294>)
 810f406:	4a91      	ldr	r2, [pc, #580]	@ (810f64c <low_level_init+0x29c>)
 810f408:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810f40a:	4b8e      	ldr	r3, [pc, #568]	@ (810f644 <low_level_init+0x294>)
 810f40c:	4a90      	ldr	r2, [pc, #576]	@ (810f650 <low_level_init+0x2a0>)
 810f40e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 810f410:	4b8c      	ldr	r3, [pc, #560]	@ (810f644 <low_level_init+0x294>)
 810f412:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810f416:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  // Read the STM32 unique ID (96-bit value)
  uint32_t uid[3];
  uid[0] = *(uint32_t*)0x1FF1E800; // UID[31:0] - Low word (coordinates)
 810f418:	4b8e      	ldr	r3, [pc, #568]	@ (810f654 <low_level_init+0x2a4>)
 810f41a:	681b      	ldr	r3, [r3, #0]
 810f41c:	60fb      	str	r3, [r7, #12]
  uid[1] = *(uint32_t*)0x1FF1E804; // UID[63:32] - Middle word (wafer and part of lot number)
 810f41e:	4b8e      	ldr	r3, [pc, #568]	@ (810f658 <low_level_init+0x2a8>)
 810f420:	681b      	ldr	r3, [r3, #0]
 810f422:	613b      	str	r3, [r7, #16]
  uid[2] = *(uint32_t*)0x1FF1E808; // UID[95:64] - High word (remaining lot number)
 810f424:	4b8d      	ldr	r3, [pc, #564]	@ (810f65c <low_level_init+0x2ac>)
 810f426:	681b      	ldr	r3, [r3, #0]
 810f428:	617b      	str	r3, [r7, #20]

  // Construct the MAC address using UID values to reduce duplicates
  MACAddr[0] = 0x00; // OUI - Fixed value
 810f42a:	2300      	movs	r3, #0
 810f42c:	763b      	strb	r3, [r7, #24]
  MACAddr[1] = 0x80; // OUI - Fixed value
 810f42e:	2380      	movs	r3, #128	@ 0x80
 810f430:	767b      	strb	r3, [r7, #25]
  MACAddr[2] = 0xE1; // OUI - Fixed value
 810f432:	23e1      	movs	r3, #225	@ 0xe1
 810f434:	76bb      	strb	r3, [r7, #26]
  // MACAddr[3]: Combine wafer number (UID[39:32]) with bits from lot number (UID[63:56])
  MACAddr[3] = (uint8_t)((uid[1] & 0xFF) ^ ((uid[2] >> 8) & 0xFF));
 810f436:	693b      	ldr	r3, [r7, #16]
 810f438:	b2da      	uxtb	r2, r3
 810f43a:	697b      	ldr	r3, [r7, #20]
 810f43c:	0a1b      	lsrs	r3, r3, #8
 810f43e:	b2db      	uxtb	r3, r3
 810f440:	4053      	eors	r3, r2
 810f442:	b2db      	uxtb	r3, r3
 810f444:	76fb      	strb	r3, [r7, #27]
  // MACAddr[4]: X coordinate (UID[31:16])
  MACAddr[4] = (uint8_t)((uid[0] >> 16) & 0xFF);
 810f446:	68fb      	ldr	r3, [r7, #12]
 810f448:	0c1b      	lsrs	r3, r3, #16
 810f44a:	b2db      	uxtb	r3, r3
 810f44c:	773b      	strb	r3, [r7, #28]
  // MACAddr[5]: Y coordinate (UID[15:0])
  MACAddr[5] = (uint8_t)(uid[0] & 0xFF);
 810f44e:	68fb      	ldr	r3, [r7, #12]
 810f450:	b2db      	uxtb	r3, r3
 810f452:	777b      	strb	r3, [r7, #29]

  heth.Init.MACAddr = &MACAddr[0];
 810f454:	4a7b      	ldr	r2, [pc, #492]	@ (810f644 <low_level_init+0x294>)
 810f456:	f107 0318 	add.w	r3, r7, #24
 810f45a:	6053      	str	r3, [r2, #4]
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 810f45c:	4879      	ldr	r0, [pc, #484]	@ (810f644 <low_level_init+0x294>)
 810f45e:	f7f7 fcbb 	bl	8106dd8 <HAL_ETH_Init>
 810f462:	4603      	mov	r3, r0
 810f464:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810f468:	2238      	movs	r2, #56	@ 0x38
 810f46a:	2100      	movs	r1, #0
 810f46c:	487c      	ldr	r0, [pc, #496]	@ (810f660 <low_level_init+0x2b0>)
 810f46e:	f012 fe2f 	bl	81220d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 810f472:	4b7b      	ldr	r3, [pc, #492]	@ (810f660 <low_level_init+0x2b0>)
 810f474:	2221      	movs	r2, #33	@ 0x21
 810f476:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810f478:	4b79      	ldr	r3, [pc, #484]	@ (810f660 <low_level_init+0x2b0>)
 810f47a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810f47e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810f480:	4b77      	ldr	r3, [pc, #476]	@ (810f660 <low_level_init+0x2b0>)
 810f482:	2200      	movs	r2, #0
 810f484:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 810f486:	4877      	ldr	r0, [pc, #476]	@ (810f664 <low_level_init+0x2b4>)
 810f488:	f007 fc21 	bl	8116cce <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 810f48c:	687b      	ldr	r3, [r7, #4]
 810f48e:	2206      	movs	r2, #6
 810f490:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 810f494:	4b6b      	ldr	r3, [pc, #428]	@ (810f644 <low_level_init+0x294>)
 810f496:	685b      	ldr	r3, [r3, #4]
 810f498:	781a      	ldrb	r2, [r3, #0]
 810f49a:	687b      	ldr	r3, [r7, #4]
 810f49c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 810f4a0:	4b68      	ldr	r3, [pc, #416]	@ (810f644 <low_level_init+0x294>)
 810f4a2:	685b      	ldr	r3, [r3, #4]
 810f4a4:	785a      	ldrb	r2, [r3, #1]
 810f4a6:	687b      	ldr	r3, [r7, #4]
 810f4a8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 810f4ac:	4b65      	ldr	r3, [pc, #404]	@ (810f644 <low_level_init+0x294>)
 810f4ae:	685b      	ldr	r3, [r3, #4]
 810f4b0:	789a      	ldrb	r2, [r3, #2]
 810f4b2:	687b      	ldr	r3, [r7, #4]
 810f4b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 810f4b8:	4b62      	ldr	r3, [pc, #392]	@ (810f644 <low_level_init+0x294>)
 810f4ba:	685b      	ldr	r3, [r3, #4]
 810f4bc:	78da      	ldrb	r2, [r3, #3]
 810f4be:	687b      	ldr	r3, [r7, #4]
 810f4c0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 810f4c4:	4b5f      	ldr	r3, [pc, #380]	@ (810f644 <low_level_init+0x294>)
 810f4c6:	685b      	ldr	r3, [r3, #4]
 810f4c8:	791a      	ldrb	r2, [r3, #4]
 810f4ca:	687b      	ldr	r3, [r7, #4]
 810f4cc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 810f4d0:	4b5c      	ldr	r3, [pc, #368]	@ (810f644 <low_level_init+0x294>)
 810f4d2:	685b      	ldr	r3, [r3, #4]
 810f4d4:	795a      	ldrb	r2, [r3, #5]
 810f4d6:	687b      	ldr	r3, [r7, #4]
 810f4d8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 810f4dc:	687b      	ldr	r3, [r7, #4]
 810f4de:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 810f4e2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 810f4e4:	687b      	ldr	r3, [r7, #4]
 810f4e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f4ea:	f043 030a 	orr.w	r3, r3, #10
 810f4ee:	b2da      	uxtb	r2, r3
 810f4f0:	687b      	ldr	r3, [r7, #4]
 810f4f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810f4f6:	2200      	movs	r2, #0
 810f4f8:	2100      	movs	r1, #0
 810f4fa:	2001      	movs	r0, #1
 810f4fc:	f000 ff0c 	bl	8110318 <osSemaphoreNew>
 810f500:	4603      	mov	r3, r0
 810f502:	4a59      	ldr	r2, [pc, #356]	@ (810f668 <low_level_init+0x2b8>)
 810f504:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810f506:	2200      	movs	r2, #0
 810f508:	2100      	movs	r1, #0
 810f50a:	2001      	movs	r0, #1
 810f50c:	f000 ff04 	bl	8110318 <osSemaphoreNew>
 810f510:	4603      	mov	r3, r0
 810f512:	4a56      	ldr	r2, [pc, #344]	@ (810f66c <low_level_init+0x2bc>)
 810f514:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 810f516:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 810f51a:	2224      	movs	r2, #36	@ 0x24
 810f51c:	2100      	movs	r1, #0
 810f51e:	4618      	mov	r0, r3
 810f520:	f012 fdd6 	bl	81220d0 <memset>
  attributes.name = "EthIf";
 810f524:	4b52      	ldr	r3, [pc, #328]	@ (810f670 <low_level_init+0x2c0>)
 810f526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 810f52a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810f52e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  attributes.priority = osPriorityRealtime;
 810f532:	2330      	movs	r3, #48	@ 0x30
 810f534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  osThreadNew(ethernetif_input, netif, &attributes);
 810f538:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 810f53c:	461a      	mov	r2, r3
 810f53e:	6879      	ldr	r1, [r7, #4]
 810f540:	484c      	ldr	r0, [pc, #304]	@ (810f674 <low_level_init+0x2c4>)
 810f542:	f000 fd22 	bl	810ff8a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 810f546:	494c      	ldr	r1, [pc, #304]	@ (810f678 <low_level_init+0x2c8>)
 810f548:	484c      	ldr	r0, [pc, #304]	@ (810f67c <low_level_init+0x2cc>)
 810f54a:	f7f3 f898 	bl	810267e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 810f54e:	484b      	ldr	r0, [pc, #300]	@ (810f67c <low_level_init+0x2cc>)
 810f550:	f7f3 f8c7 	bl	81026e2 <LAN8742_Init>
 810f554:	4603      	mov	r3, r0
 810f556:	2b00      	cmp	r3, #0
 810f558:	d006      	beq.n	810f568 <low_level_init+0x1b8>
  {
    netif_set_link_down(netif);
 810f55a:	6878      	ldr	r0, [r7, #4]
 810f55c:	f009 fe28 	bl	81191b0 <netif_set_link_down>
    netif_set_down(netif);
 810f560:	6878      	ldr	r0, [r7, #4]
 810f562:	f009 fdbb 	bl	81190dc <netif_set_down>
 810f566:	e06a      	b.n	810f63e <low_level_init+0x28e>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 810f568:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 810f56c:	2b00      	cmp	r3, #0
 810f56e:	d164      	bne.n	810f63a <low_level_init+0x28a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810f570:	4842      	ldr	r0, [pc, #264]	@ (810f67c <low_level_init+0x2cc>)
 810f572:	f7f3 f903 	bl	810277c <LAN8742_GetLinkState>
 810f576:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 810f57a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810f57e:	2b01      	cmp	r3, #1
 810f580:	dc06      	bgt.n	810f590 <low_level_init+0x1e0>
    {
      netif_set_link_down(netif);
 810f582:	6878      	ldr	r0, [r7, #4]
 810f584:	f009 fe14 	bl	81191b0 <netif_set_link_down>
      netif_set_down(netif);
 810f588:	6878      	ldr	r0, [r7, #4]
 810f58a:	f009 fda7 	bl	81190dc <netif_set_down>
 810f58e:	e056      	b.n	810f63e <low_level_init+0x28e>
    }
    else
    {
      switch (PHYLinkState)
 810f590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810f594:	3b02      	subs	r3, #2
 810f596:	2b03      	cmp	r3, #3
 810f598:	d82a      	bhi.n	810f5f0 <low_level_init+0x240>
 810f59a:	a201      	add	r2, pc, #4	@ (adr r2, 810f5a0 <low_level_init+0x1f0>)
 810f59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f5a0:	0810f5b1 	.word	0x0810f5b1
 810f5a4:	0810f5c3 	.word	0x0810f5c3
 810f5a8:	0810f5d3 	.word	0x0810f5d3
 810f5ac:	0810f5e3 	.word	0x0810f5e3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 810f5b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810f5b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_100M;
 810f5b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810f5bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 810f5c0:	e01f      	b.n	810f602 <low_level_init+0x252>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 810f5c2:	2300      	movs	r3, #0
 810f5c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_100M;
 810f5c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810f5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 810f5d0:	e017      	b.n	810f602 <low_level_init+0x252>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 810f5d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810f5d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_10M;
 810f5da:	2300      	movs	r3, #0
 810f5dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 810f5e0:	e00f      	b.n	810f602 <low_level_init+0x252>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 810f5e2:	2300      	movs	r3, #0
 810f5e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_10M;
 810f5e8:	2300      	movs	r3, #0
 810f5ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 810f5ee:	e008      	b.n	810f602 <low_level_init+0x252>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 810f5f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810f5f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_100M;
 810f5f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810f5fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 810f600:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 810f602:	f107 0320 	add.w	r3, r7, #32
 810f606:	4619      	mov	r1, r3
 810f608:	480e      	ldr	r0, [pc, #56]	@ (810f644 <low_level_init+0x294>)
 810f60a:	f7f8 f989 	bl	8107920 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 810f60e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810f612:	63bb      	str	r3, [r7, #56]	@ 0x38
    MACConf.Speed = speed;
 810f614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 810f618:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 810f61a:	f107 0320 	add.w	r3, r7, #32
 810f61e:	4619      	mov	r1, r3
 810f620:	4808      	ldr	r0, [pc, #32]	@ (810f644 <low_level_init+0x294>)
 810f622:	f7f8 fb51 	bl	8107cc8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 810f626:	4807      	ldr	r0, [pc, #28]	@ (810f644 <low_level_init+0x294>)
 810f628:	f7f7 fcd4 	bl	8106fd4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 810f62c:	6878      	ldr	r0, [r7, #4]
 810f62e:	f009 fce7 	bl	8119000 <netif_set_up>
    netif_set_link_up(netif);
 810f632:	6878      	ldr	r0, [r7, #4]
 810f634:	f009 fd86 	bl	8119144 <netif_set_link_up>
 810f638:	e001      	b.n	810f63e <low_level_init+0x28e>
    }

  }
  else
  {
    Error_Handler();
 810f63a:	f7f2 fb71 	bl	8101d20 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 810f63e:	37b8      	adds	r7, #184	@ 0xb8
 810f640:	46bd      	mov	sp, r7
 810f642:	bd80      	pop	{r7, pc}
 810f644:	24000778 	.word	0x24000778
 810f648:	40028000 	.word	0x40028000
 810f64c:	30040100 	.word	0x30040100
 810f650:	30040000 	.word	0x30040000
 810f654:	1ff1e800 	.word	0x1ff1e800
 810f658:	1ff1e804 	.word	0x1ff1e804
 810f65c:	1ff1e808 	.word	0x1ff1e808
 810f660:	24000828 	.word	0x24000828
 810f664:	08128944 	.word	0x08128944
 810f668:	24000770 	.word	0x24000770
 810f66c:	24000774 	.word	0x24000774
 810f670:	08124ce4 	.word	0x08124ce4
 810f674:	0810f811 	.word	0x0810f811
 810f678:	24000030 	.word	0x24000030
 810f67c:	24000860 	.word	0x24000860

0810f680 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 810f680:	b580      	push	{r7, lr}
 810f682:	b092      	sub	sp, #72	@ 0x48
 810f684:	af00      	add	r7, sp, #0
 810f686:	6078      	str	r0, [r7, #4]
 810f688:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 810f68a:	2300      	movs	r3, #0
 810f68c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 810f68e:	2300      	movs	r3, #0
 810f690:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 810f692:	2300      	movs	r3, #0
 810f694:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 810f698:	f107 030c 	add.w	r3, r7, #12
 810f69c:	2230      	movs	r2, #48	@ 0x30
 810f69e:	2100      	movs	r1, #0
 810f6a0:	4618      	mov	r0, r3
 810f6a2:	f012 fd15 	bl	81220d0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810f6a6:	f107 030c 	add.w	r3, r7, #12
 810f6aa:	2230      	movs	r2, #48	@ 0x30
 810f6ac:	2100      	movs	r1, #0
 810f6ae:	4618      	mov	r0, r3
 810f6b0:	f012 fd0e 	bl	81220d0 <memset>

  for(q = p; q != NULL; q = q->next)
 810f6b4:	683b      	ldr	r3, [r7, #0]
 810f6b6:	643b      	str	r3, [r7, #64]	@ 0x40
 810f6b8:	e045      	b.n	810f746 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 810f6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810f6bc:	2b03      	cmp	r3, #3
 810f6be:	d902      	bls.n	810f6c6 <low_level_output+0x46>
      return ERR_IF;
 810f6c0:	f06f 030b 	mvn.w	r3, #11
 810f6c4:	e07f      	b.n	810f7c6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 810f6c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810f6c8:	6859      	ldr	r1, [r3, #4]
 810f6ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810f6cc:	4613      	mov	r3, r2
 810f6ce:	005b      	lsls	r3, r3, #1
 810f6d0:	4413      	add	r3, r2
 810f6d2:	009b      	lsls	r3, r3, #2
 810f6d4:	3348      	adds	r3, #72	@ 0x48
 810f6d6:	443b      	add	r3, r7
 810f6d8:	3b3c      	subs	r3, #60	@ 0x3c
 810f6da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 810f6dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810f6de:	895b      	ldrh	r3, [r3, #10]
 810f6e0:	4619      	mov	r1, r3
 810f6e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810f6e4:	4613      	mov	r3, r2
 810f6e6:	005b      	lsls	r3, r3, #1
 810f6e8:	4413      	add	r3, r2
 810f6ea:	009b      	lsls	r3, r3, #2
 810f6ec:	3348      	adds	r3, #72	@ 0x48
 810f6ee:	443b      	add	r3, r7
 810f6f0:	3b38      	subs	r3, #56	@ 0x38
 810f6f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 810f6f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810f6f6:	2b00      	cmp	r3, #0
 810f6f8:	d011      	beq.n	810f71e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 810f6fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810f6fc:	1e5a      	subs	r2, r3, #1
 810f6fe:	f107 000c 	add.w	r0, r7, #12
 810f702:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810f704:	460b      	mov	r3, r1
 810f706:	005b      	lsls	r3, r3, #1
 810f708:	440b      	add	r3, r1
 810f70a:	009b      	lsls	r3, r3, #2
 810f70c:	18c1      	adds	r1, r0, r3
 810f70e:	4613      	mov	r3, r2
 810f710:	005b      	lsls	r3, r3, #1
 810f712:	4413      	add	r3, r2
 810f714:	009b      	lsls	r3, r3, #2
 810f716:	3348      	adds	r3, #72	@ 0x48
 810f718:	443b      	add	r3, r7
 810f71a:	3b34      	subs	r3, #52	@ 0x34
 810f71c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 810f71e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810f720:	681b      	ldr	r3, [r3, #0]
 810f722:	2b00      	cmp	r3, #0
 810f724:	d109      	bne.n	810f73a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 810f726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810f728:	4613      	mov	r3, r2
 810f72a:	005b      	lsls	r3, r3, #1
 810f72c:	4413      	add	r3, r2
 810f72e:	009b      	lsls	r3, r3, #2
 810f730:	3348      	adds	r3, #72	@ 0x48
 810f732:	443b      	add	r3, r7
 810f734:	3b34      	subs	r3, #52	@ 0x34
 810f736:	2200      	movs	r2, #0
 810f738:	601a      	str	r2, [r3, #0]
    }

    i++;
 810f73a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810f73c:	3301      	adds	r3, #1
 810f73e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 810f740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810f742:	681b      	ldr	r3, [r3, #0]
 810f744:	643b      	str	r3, [r7, #64]	@ 0x40
 810f746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810f748:	2b00      	cmp	r3, #0
 810f74a:	d1b6      	bne.n	810f6ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 810f74c:	683b      	ldr	r3, [r7, #0]
 810f74e:	891b      	ldrh	r3, [r3, #8]
 810f750:	461a      	mov	r2, r3
 810f752:	4b1f      	ldr	r3, [pc, #124]	@ (810f7d0 <low_level_output+0x150>)
 810f754:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 810f756:	4a1e      	ldr	r2, [pc, #120]	@ (810f7d0 <low_level_output+0x150>)
 810f758:	f107 030c 	add.w	r3, r7, #12
 810f75c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 810f75e:	4a1c      	ldr	r2, [pc, #112]	@ (810f7d0 <low_level_output+0x150>)
 810f760:	683b      	ldr	r3, [r7, #0]
 810f762:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 810f764:	6838      	ldr	r0, [r7, #0]
 810f766:	f00a f9a7 	bl	8119ab8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 810f76a:	4919      	ldr	r1, [pc, #100]	@ (810f7d0 <low_level_output+0x150>)
 810f76c:	4819      	ldr	r0, [pc, #100]	@ (810f7d4 <low_level_output+0x154>)
 810f76e:	f7f7 fd1d 	bl	81071ac <HAL_ETH_Transmit_IT>
 810f772:	4603      	mov	r3, r0
 810f774:	2b00      	cmp	r3, #0
 810f776:	d103      	bne.n	810f780 <low_level_output+0x100>
    {
      errval = ERR_OK;
 810f778:	2300      	movs	r3, #0
 810f77a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 810f77e:	e01b      	b.n	810f7b8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 810f780:	4814      	ldr	r0, [pc, #80]	@ (810f7d4 <low_level_output+0x154>)
 810f782:	f7f8 fb0b 	bl	8107d9c <HAL_ETH_GetError>
 810f786:	4603      	mov	r3, r0
 810f788:	f003 0302 	and.w	r3, r3, #2
 810f78c:	2b00      	cmp	r3, #0
 810f78e:	d00d      	beq.n	810f7ac <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 810f790:	4b11      	ldr	r3, [pc, #68]	@ (810f7d8 <low_level_output+0x158>)
 810f792:	681b      	ldr	r3, [r3, #0]
 810f794:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 810f798:	4618      	mov	r0, r3
 810f79a:	f000 fe47 	bl	811042c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 810f79e:	480d      	ldr	r0, [pc, #52]	@ (810f7d4 <low_level_output+0x154>)
 810f7a0:	f7f7 fe8b 	bl	81074ba <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 810f7a4:	23fe      	movs	r3, #254	@ 0xfe
 810f7a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 810f7aa:	e005      	b.n	810f7b8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 810f7ac:	6838      	ldr	r0, [r7, #0]
 810f7ae:	f00a f8dd 	bl	811996c <pbuf_free>
        errval =  ERR_IF;
 810f7b2:	23f4      	movs	r3, #244	@ 0xf4
 810f7b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 810f7b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 810f7bc:	f113 0f02 	cmn.w	r3, #2
 810f7c0:	d0d3      	beq.n	810f76a <low_level_output+0xea>

  return errval;
 810f7c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 810f7c6:	4618      	mov	r0, r3
 810f7c8:	3748      	adds	r7, #72	@ 0x48
 810f7ca:	46bd      	mov	sp, r7
 810f7cc:	bd80      	pop	{r7, pc}
 810f7ce:	bf00      	nop
 810f7d0:	24000828 	.word	0x24000828
 810f7d4:	24000778 	.word	0x24000778
 810f7d8:	24000774 	.word	0x24000774

0810f7dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 810f7dc:	b580      	push	{r7, lr}
 810f7de:	b084      	sub	sp, #16
 810f7e0:	af00      	add	r7, sp, #0
 810f7e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810f7e4:	2300      	movs	r3, #0
 810f7e6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 810f7e8:	4b07      	ldr	r3, [pc, #28]	@ (810f808 <low_level_input+0x2c>)
 810f7ea:	781b      	ldrb	r3, [r3, #0]
 810f7ec:	2b00      	cmp	r3, #0
 810f7ee:	d105      	bne.n	810f7fc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 810f7f0:	f107 030c 	add.w	r3, r7, #12
 810f7f4:	4619      	mov	r1, r3
 810f7f6:	4805      	ldr	r0, [pc, #20]	@ (810f80c <low_level_input+0x30>)
 810f7f8:	f7f7 fd29 	bl	810724e <HAL_ETH_ReadData>
  }

  return p;
 810f7fc:	68fb      	ldr	r3, [r7, #12]
}
 810f7fe:	4618      	mov	r0, r3
 810f800:	3710      	adds	r7, #16
 810f802:	46bd      	mov	sp, r7
 810f804:	bd80      	pop	{r7, pc}
 810f806:	bf00      	nop
 810f808:	2400076c 	.word	0x2400076c
 810f80c:	24000778 	.word	0x24000778

0810f810 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 810f810:	b580      	push	{r7, lr}
 810f812:	b084      	sub	sp, #16
 810f814:	af00      	add	r7, sp, #0
 810f816:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810f818:	2300      	movs	r3, #0
 810f81a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 810f81c:	687b      	ldr	r3, [r7, #4]
 810f81e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 810f820:	4b0f      	ldr	r3, [pc, #60]	@ (810f860 <ethernetif_input+0x50>)
 810f822:	681b      	ldr	r3, [r3, #0]
 810f824:	f04f 31ff 	mov.w	r1, #4294967295
 810f828:	4618      	mov	r0, r3
 810f82a:	f000 fdff 	bl	811042c <osSemaphoreAcquire>
 810f82e:	4603      	mov	r3, r0
 810f830:	2b00      	cmp	r3, #0
 810f832:	d1f5      	bne.n	810f820 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 810f834:	68b8      	ldr	r0, [r7, #8]
 810f836:	f7ff ffd1 	bl	810f7dc <low_level_input>
 810f83a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 810f83c:	68fb      	ldr	r3, [r7, #12]
 810f83e:	2b00      	cmp	r3, #0
 810f840:	d00a      	beq.n	810f858 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 810f842:	68bb      	ldr	r3, [r7, #8]
 810f844:	691b      	ldr	r3, [r3, #16]
 810f846:	68b9      	ldr	r1, [r7, #8]
 810f848:	68f8      	ldr	r0, [r7, #12]
 810f84a:	4798      	blx	r3
 810f84c:	4603      	mov	r3, r0
 810f84e:	2b00      	cmp	r3, #0
 810f850:	d002      	beq.n	810f858 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 810f852:	68f8      	ldr	r0, [r7, #12]
 810f854:	f00a f88a 	bl	811996c <pbuf_free>
          }
        }
      } while(p!=NULL);
 810f858:	68fb      	ldr	r3, [r7, #12]
 810f85a:	2b00      	cmp	r3, #0
 810f85c:	d1ea      	bne.n	810f834 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 810f85e:	e7df      	b.n	810f820 <ethernetif_input+0x10>
 810f860:	24000770 	.word	0x24000770

0810f864 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 810f864:	b580      	push	{r7, lr}
 810f866:	b082      	sub	sp, #8
 810f868:	af00      	add	r7, sp, #0
 810f86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 810f86c:	687b      	ldr	r3, [r7, #4]
 810f86e:	2b00      	cmp	r3, #0
 810f870:	d106      	bne.n	810f880 <ethernetif_init+0x1c>
 810f872:	4b0e      	ldr	r3, [pc, #56]	@ (810f8ac <ethernetif_init+0x48>)
 810f874:	f240 2229 	movw	r2, #553	@ 0x229
 810f878:	490d      	ldr	r1, [pc, #52]	@ (810f8b0 <ethernetif_init+0x4c>)
 810f87a:	480e      	ldr	r0, [pc, #56]	@ (810f8b4 <ethernetif_init+0x50>)
 810f87c:	f012 fa82 	bl	8121d84 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 810f880:	687b      	ldr	r3, [r7, #4]
 810f882:	2273      	movs	r2, #115	@ 0x73
 810f884:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 810f888:	687b      	ldr	r3, [r7, #4]
 810f88a:	2274      	movs	r2, #116	@ 0x74
 810f88c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 810f890:	687b      	ldr	r3, [r7, #4]
 810f892:	4a09      	ldr	r2, [pc, #36]	@ (810f8b8 <ethernetif_init+0x54>)
 810f894:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 810f896:	687b      	ldr	r3, [r7, #4]
 810f898:	4a08      	ldr	r2, [pc, #32]	@ (810f8bc <ethernetif_init+0x58>)
 810f89a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 810f89c:	6878      	ldr	r0, [r7, #4]
 810f89e:	f7ff fd87 	bl	810f3b0 <low_level_init>

  return ERR_OK;
 810f8a2:	2300      	movs	r3, #0
}
 810f8a4:	4618      	mov	r0, r3
 810f8a6:	3708      	adds	r7, #8
 810f8a8:	46bd      	mov	sp, r7
 810f8aa:	bd80      	pop	{r7, pc}
 810f8ac:	08124cec 	.word	0x08124cec
 810f8b0:	08124d08 	.word	0x08124d08
 810f8b4:	08124d18 	.word	0x08124d18
 810f8b8:	081145e5 	.word	0x081145e5
 810f8bc:	0810f681 	.word	0x0810f681

0810f8c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 810f8c0:	b580      	push	{r7, lr}
 810f8c2:	b084      	sub	sp, #16
 810f8c4:	af00      	add	r7, sp, #0
 810f8c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 810f8c8:	687b      	ldr	r3, [r7, #4]
 810f8ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 810f8cc:	68f9      	ldr	r1, [r7, #12]
 810f8ce:	4809      	ldr	r0, [pc, #36]	@ (810f8f4 <pbuf_free_custom+0x34>)
 810f8d0:	f007 faee 	bl	8116eb0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 810f8d4:	4b08      	ldr	r3, [pc, #32]	@ (810f8f8 <pbuf_free_custom+0x38>)
 810f8d6:	781b      	ldrb	r3, [r3, #0]
 810f8d8:	2b01      	cmp	r3, #1
 810f8da:	d107      	bne.n	810f8ec <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 810f8dc:	4b06      	ldr	r3, [pc, #24]	@ (810f8f8 <pbuf_free_custom+0x38>)
 810f8de:	2200      	movs	r2, #0
 810f8e0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 810f8e2:	4b06      	ldr	r3, [pc, #24]	@ (810f8fc <pbuf_free_custom+0x3c>)
 810f8e4:	681b      	ldr	r3, [r3, #0]
 810f8e6:	4618      	mov	r0, r3
 810f8e8:	f000 fdf2 	bl	81104d0 <osSemaphoreRelease>
  }
}
 810f8ec:	bf00      	nop
 810f8ee:	3710      	adds	r7, #16
 810f8f0:	46bd      	mov	sp, r7
 810f8f2:	bd80      	pop	{r7, pc}
 810f8f4:	08128944 	.word	0x08128944
 810f8f8:	2400076c 	.word	0x2400076c
 810f8fc:	24000770 	.word	0x24000770

0810f900 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 810f900:	b580      	push	{r7, lr}
 810f902:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810f904:	f7f3 f812 	bl	810292c <HAL_GetTick>
 810f908:	4603      	mov	r3, r0
}
 810f90a:	4618      	mov	r0, r3
 810f90c:	bd80      	pop	{r7, pc}
	...

0810f910 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 810f910:	b580      	push	{r7, lr}
 810f912:	b08e      	sub	sp, #56	@ 0x38
 810f914:	af00      	add	r7, sp, #0
 810f916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810f918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f91c:	2200      	movs	r2, #0
 810f91e:	601a      	str	r2, [r3, #0]
 810f920:	605a      	str	r2, [r3, #4]
 810f922:	609a      	str	r2, [r3, #8]
 810f924:	60da      	str	r2, [r3, #12]
 810f926:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 810f928:	687b      	ldr	r3, [r7, #4]
 810f92a:	681b      	ldr	r3, [r3, #0]
 810f92c:	4a4d      	ldr	r2, [pc, #308]	@ (810fa64 <HAL_ETH_MspInit+0x154>)
 810f92e:	4293      	cmp	r3, r2
 810f930:	f040 8093 	bne.w	810fa5a <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 810f934:	4b4c      	ldr	r3, [pc, #304]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f93a:	4a4b      	ldr	r2, [pc, #300]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f93c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810f940:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810f944:	4b48      	ldr	r3, [pc, #288]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f94a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810f94e:	623b      	str	r3, [r7, #32]
 810f950:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810f952:	4b45      	ldr	r3, [pc, #276]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f958:	4a43      	ldr	r2, [pc, #268]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f95a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810f95e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810f962:	4b41      	ldr	r3, [pc, #260]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810f96c:	61fb      	str	r3, [r7, #28]
 810f96e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 810f970:	4b3d      	ldr	r3, [pc, #244]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f976:	4a3c      	ldr	r2, [pc, #240]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810f97c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810f980:	4b39      	ldr	r3, [pc, #228]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810f98a:	61bb      	str	r3, [r7, #24]
 810f98c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810f98e:	4b36      	ldr	r3, [pc, #216]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810f994:	4a34      	ldr	r2, [pc, #208]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810f99a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810f99e:	4b32      	ldr	r3, [pc, #200]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810f9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810f9a8:	617b      	str	r3, [r7, #20]
 810f9aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810f9ac:	4b2e      	ldr	r3, [pc, #184]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810f9b2:	4a2d      	ldr	r2, [pc, #180]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9b4:	f043 0304 	orr.w	r3, r3, #4
 810f9b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810f9bc:	4b2a      	ldr	r3, [pc, #168]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810f9c2:	f003 0304 	and.w	r3, r3, #4
 810f9c6:	613b      	str	r3, [r7, #16]
 810f9c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810f9ca:	4b27      	ldr	r3, [pc, #156]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810f9d0:	4a25      	ldr	r2, [pc, #148]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9d2:	f043 0301 	orr.w	r3, r3, #1
 810f9d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810f9da:	4b23      	ldr	r3, [pc, #140]	@ (810fa68 <HAL_ETH_MspInit+0x158>)
 810f9dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810f9e0:	f003 0301 	and.w	r3, r3, #1
 810f9e4:	60fb      	str	r3, [r7, #12]
 810f9e6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PA1     ------> ETH_REF_CLK
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_13;
 810f9e8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 810f9ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810f9ee:	2302      	movs	r3, #2
 810f9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810f9f2:	2300      	movs	r3, #0
 810f9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810f9f6:	2303      	movs	r3, #3
 810f9f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810f9fa:	230b      	movs	r3, #11
 810f9fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810f9fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810fa02:	4619      	mov	r1, r3
 810fa04:	4819      	ldr	r0, [pc, #100]	@ (810fa6c <HAL_ETH_MspInit+0x15c>)
 810fa06:	f7f8 ff65 	bl	81088d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 810fa0a:	2332      	movs	r3, #50	@ 0x32
 810fa0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810fa0e:	2302      	movs	r3, #2
 810fa10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810fa12:	2300      	movs	r3, #0
 810fa14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810fa16:	2303      	movs	r3, #3
 810fa18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810fa1a:	230b      	movs	r3, #11
 810fa1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810fa1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810fa22:	4619      	mov	r1, r3
 810fa24:	4812      	ldr	r0, [pc, #72]	@ (810fa70 <HAL_ETH_MspInit+0x160>)
 810fa26:	f7f8 ff55 	bl	81088d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 810fa2a:	2386      	movs	r3, #134	@ 0x86
 810fa2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810fa2e:	2302      	movs	r3, #2
 810fa30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810fa32:	2300      	movs	r3, #0
 810fa34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810fa36:	2303      	movs	r3, #3
 810fa38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810fa3a:	230b      	movs	r3, #11
 810fa3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810fa3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810fa42:	4619      	mov	r1, r3
 810fa44:	480b      	ldr	r0, [pc, #44]	@ (810fa74 <HAL_ETH_MspInit+0x164>)
 810fa46:	f7f8 ff45 	bl	81088d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 810fa4a:	2200      	movs	r2, #0
 810fa4c:	2105      	movs	r1, #5
 810fa4e:	203d      	movs	r0, #61	@ 0x3d
 810fa50:	f7f4 facd 	bl	8103fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 810fa54:	203d      	movs	r0, #61	@ 0x3d
 810fa56:	f7f4 fae4 	bl	8104022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 810fa5a:	bf00      	nop
 810fa5c:	3738      	adds	r7, #56	@ 0x38
 810fa5e:	46bd      	mov	sp, r7
 810fa60:	bd80      	pop	{r7, pc}
 810fa62:	bf00      	nop
 810fa64:	40028000 	.word	0x40028000
 810fa68:	58024400 	.word	0x58024400
 810fa6c:	58021800 	.word	0x58021800
 810fa70:	58020800 	.word	0x58020800
 810fa74:	58020000 	.word	0x58020000

0810fa78 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 810fa78:	b580      	push	{r7, lr}
 810fa7a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 810fa7c:	4802      	ldr	r0, [pc, #8]	@ (810fa88 <ETH_PHY_IO_Init+0x10>)
 810fa7e:	f7f8 f93d 	bl	8107cfc <HAL_ETH_SetMDIOClockRange>

  return 0;
 810fa82:	2300      	movs	r3, #0
}
 810fa84:	4618      	mov	r0, r3
 810fa86:	bd80      	pop	{r7, pc}
 810fa88:	24000778 	.word	0x24000778

0810fa8c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 810fa8c:	b480      	push	{r7}
 810fa8e:	af00      	add	r7, sp, #0
  return 0;
 810fa90:	2300      	movs	r3, #0
}
 810fa92:	4618      	mov	r0, r3
 810fa94:	46bd      	mov	sp, r7
 810fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa9a:	4770      	bx	lr

0810fa9c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 810fa9c:	b580      	push	{r7, lr}
 810fa9e:	b084      	sub	sp, #16
 810faa0:	af00      	add	r7, sp, #0
 810faa2:	60f8      	str	r0, [r7, #12]
 810faa4:	60b9      	str	r1, [r7, #8]
 810faa6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 810faa8:	687b      	ldr	r3, [r7, #4]
 810faaa:	68ba      	ldr	r2, [r7, #8]
 810faac:	68f9      	ldr	r1, [r7, #12]
 810faae:	4807      	ldr	r0, [pc, #28]	@ (810facc <ETH_PHY_IO_ReadReg+0x30>)
 810fab0:	f7f7 fe8e 	bl	81077d0 <HAL_ETH_ReadPHYRegister>
 810fab4:	4603      	mov	r3, r0
 810fab6:	2b00      	cmp	r3, #0
 810fab8:	d002      	beq.n	810fac0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 810faba:	f04f 33ff 	mov.w	r3, #4294967295
 810fabe:	e000      	b.n	810fac2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 810fac0:	2300      	movs	r3, #0
}
 810fac2:	4618      	mov	r0, r3
 810fac4:	3710      	adds	r7, #16
 810fac6:	46bd      	mov	sp, r7
 810fac8:	bd80      	pop	{r7, pc}
 810faca:	bf00      	nop
 810facc:	24000778 	.word	0x24000778

0810fad0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 810fad0:	b580      	push	{r7, lr}
 810fad2:	b084      	sub	sp, #16
 810fad4:	af00      	add	r7, sp, #0
 810fad6:	60f8      	str	r0, [r7, #12]
 810fad8:	60b9      	str	r1, [r7, #8]
 810fada:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 810fadc:	687b      	ldr	r3, [r7, #4]
 810fade:	68ba      	ldr	r2, [r7, #8]
 810fae0:	68f9      	ldr	r1, [r7, #12]
 810fae2:	4807      	ldr	r0, [pc, #28]	@ (810fb00 <ETH_PHY_IO_WriteReg+0x30>)
 810fae4:	f7f7 fec8 	bl	8107878 <HAL_ETH_WritePHYRegister>
 810fae8:	4603      	mov	r3, r0
 810faea:	2b00      	cmp	r3, #0
 810faec:	d002      	beq.n	810faf4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 810faee:	f04f 33ff 	mov.w	r3, #4294967295
 810faf2:	e000      	b.n	810faf6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 810faf4:	2300      	movs	r3, #0
}
 810faf6:	4618      	mov	r0, r3
 810faf8:	3710      	adds	r7, #16
 810fafa:	46bd      	mov	sp, r7
 810fafc:	bd80      	pop	{r7, pc}
 810fafe:	bf00      	nop
 810fb00:	24000778 	.word	0x24000778

0810fb04 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 810fb04:	b580      	push	{r7, lr}
 810fb06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810fb08:	f7f2 ff10 	bl	810292c <HAL_GetTick>
 810fb0c:	4603      	mov	r3, r0
}
 810fb0e:	4618      	mov	r0, r3
 810fb10:	bd80      	pop	{r7, pc}
	...

0810fb14 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 810fb14:	b580      	push	{r7, lr}
 810fb16:	b0a0      	sub	sp, #128	@ 0x80
 810fb18:	af00      	add	r7, sp, #0
 810fb1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 810fb1c:	f107 0308 	add.w	r3, r7, #8
 810fb20:	2264      	movs	r2, #100	@ 0x64
 810fb22:	2100      	movs	r1, #0
 810fb24:	4618      	mov	r0, r3
 810fb26:	f012 fad3 	bl	81220d0 <memset>
  int32_t PHYLinkState = 0;
 810fb2a:	2300      	movs	r3, #0
 810fb2c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 810fb2e:	2300      	movs	r3, #0
 810fb30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810fb32:	2300      	movs	r3, #0
 810fb34:	67bb      	str	r3, [r7, #120]	@ 0x78
 810fb36:	2300      	movs	r3, #0
 810fb38:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 810fb3a:	687b      	ldr	r3, [r7, #4]
 810fb3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
/* USER CODE BEGIN ETH link init */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 810fb3e:	f000 f921 	bl	810fd84 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810fb42:	483c      	ldr	r0, [pc, #240]	@ (810fc34 <ethernet_link_thread+0x120>)
 810fb44:	f7f2 fe1a 	bl	810277c <LAN8742_GetLinkState>
 810fb48:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 810fb4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810fb4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810fb50:	089b      	lsrs	r3, r3, #2
 810fb52:	f003 0301 	and.w	r3, r3, #1
 810fb56:	b2db      	uxtb	r3, r3
 810fb58:	2b00      	cmp	r3, #0
 810fb5a:	d00c      	beq.n	810fb76 <ethernet_link_thread+0x62>
 810fb5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810fb5e:	2b01      	cmp	r3, #1
 810fb60:	dc09      	bgt.n	810fb76 <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 810fb62:	4835      	ldr	r0, [pc, #212]	@ (810fc38 <ethernet_link_thread+0x124>)
 810fb64:	f7f7 faaa 	bl	81070bc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 810fb68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810fb6a:	f009 fab7 	bl	81190dc <netif_set_down>
    netif_set_link_down(netif);
 810fb6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810fb70:	f009 fb1e 	bl	81191b0 <netif_set_link_down>
 810fb74:	e055      	b.n	810fc22 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 810fb76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810fb78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810fb7c:	f003 0304 	and.w	r3, r3, #4
 810fb80:	2b00      	cmp	r3, #0
 810fb82:	d14e      	bne.n	810fc22 <ethernet_link_thread+0x10e>
 810fb84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810fb86:	2b01      	cmp	r3, #1
 810fb88:	dd4b      	ble.n	810fc22 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 810fb8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810fb8c:	3b02      	subs	r3, #2
 810fb8e:	2b03      	cmp	r3, #3
 810fb90:	d82a      	bhi.n	810fbe8 <ethernet_link_thread+0xd4>
 810fb92:	a201      	add	r2, pc, #4	@ (adr r2, 810fb98 <ethernet_link_thread+0x84>)
 810fb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fb98:	0810fba9 	.word	0x0810fba9
 810fb9c:	0810fbbb 	.word	0x0810fbbb
 810fba0:	0810fbcb 	.word	0x0810fbcb
 810fba4:	0810fbdb 	.word	0x0810fbdb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810fba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810fbac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810fbae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810fbb2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810fbb4:	2301      	movs	r3, #1
 810fbb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810fbb8:	e017      	b.n	810fbea <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810fbba:	2300      	movs	r3, #0
 810fbbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810fbbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810fbc2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810fbc4:	2301      	movs	r3, #1
 810fbc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810fbc8:	e00f      	b.n	810fbea <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810fbca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810fbce:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810fbd0:	2300      	movs	r3, #0
 810fbd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810fbd4:	2301      	movs	r3, #1
 810fbd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810fbd8:	e007      	b.n	810fbea <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810fbda:	2300      	movs	r3, #0
 810fbdc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810fbde:	2300      	movs	r3, #0
 810fbe0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 810fbe2:	2301      	movs	r3, #1
 810fbe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810fbe6:	e000      	b.n	810fbea <ethernet_link_thread+0xd6>
    default:
      break;
 810fbe8:	bf00      	nop
    }

    if(linkchanged)
 810fbea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 810fbec:	2b00      	cmp	r3, #0
 810fbee:	d018      	beq.n	810fc22 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 810fbf0:	f107 0308 	add.w	r3, r7, #8
 810fbf4:	4619      	mov	r1, r3
 810fbf6:	4810      	ldr	r0, [pc, #64]	@ (810fc38 <ethernet_link_thread+0x124>)
 810fbf8:	f7f7 fe92 	bl	8107920 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 810fbfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810fbfe:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 810fc00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810fc02:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 810fc04:	f107 0308 	add.w	r3, r7, #8
 810fc08:	4619      	mov	r1, r3
 810fc0a:	480b      	ldr	r0, [pc, #44]	@ (810fc38 <ethernet_link_thread+0x124>)
 810fc0c:	f7f8 f85c 	bl	8107cc8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 810fc10:	4809      	ldr	r0, [pc, #36]	@ (810fc38 <ethernet_link_thread+0x124>)
 810fc12:	f7f7 f9df 	bl	8106fd4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 810fc16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810fc18:	f009 f9f2 	bl	8119000 <netif_set_up>
      netif_set_link_up(netif);
 810fc1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810fc1e:	f009 fa91 	bl	8119144 <netif_set_link_up>
    }
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 810fc22:	f000 f8bf 	bl	810fda4 <sys_unlock_tcpip_core>
  osDelay(100);
 810fc26:	2064      	movs	r0, #100	@ 0x64
 810fc28:	f000 fa4d 	bl	81100c6 <osDelay>
  LOCK_TCPIP_CORE();
 810fc2c:	f000 f8aa 	bl	810fd84 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 810fc30:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810fc32:	e786      	b.n	810fb42 <ethernet_link_thread+0x2e>
 810fc34:	24000860 	.word	0x24000860
 810fc38:	24000778 	.word	0x24000778

0810fc3c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 810fc3c:	b580      	push	{r7, lr}
 810fc3e:	b086      	sub	sp, #24
 810fc40:	af02      	add	r7, sp, #8
 810fc42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 810fc44:	4812      	ldr	r0, [pc, #72]	@ (810fc90 <HAL_ETH_RxAllocateCallback+0x54>)
 810fc46:	f007 f8bf 	bl	8116dc8 <memp_malloc_pool>
 810fc4a:	60f8      	str	r0, [r7, #12]
  if (p)
 810fc4c:	68fb      	ldr	r3, [r7, #12]
 810fc4e:	2b00      	cmp	r3, #0
 810fc50:	d014      	beq.n	810fc7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810fc52:	68fb      	ldr	r3, [r7, #12]
 810fc54:	f103 0220 	add.w	r2, r3, #32
 810fc58:	687b      	ldr	r3, [r7, #4]
 810fc5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 810fc5c:	68fb      	ldr	r3, [r7, #12]
 810fc5e:	4a0d      	ldr	r2, [pc, #52]	@ (810fc94 <HAL_ETH_RxAllocateCallback+0x58>)
 810fc60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810fc62:	687b      	ldr	r3, [r7, #4]
 810fc64:	681b      	ldr	r3, [r3, #0]
 810fc66:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810fc6a:	9201      	str	r2, [sp, #4]
 810fc6c:	9300      	str	r3, [sp, #0]
 810fc6e:	68fb      	ldr	r3, [r7, #12]
 810fc70:	2241      	movs	r2, #65	@ 0x41
 810fc72:	2100      	movs	r1, #0
 810fc74:	2000      	movs	r0, #0
 810fc76:	f009 fcc1 	bl	81195fc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 810fc7a:	e005      	b.n	810fc88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 810fc7c:	4b06      	ldr	r3, [pc, #24]	@ (810fc98 <HAL_ETH_RxAllocateCallback+0x5c>)
 810fc7e:	2201      	movs	r2, #1
 810fc80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810fc82:	687b      	ldr	r3, [r7, #4]
 810fc84:	2200      	movs	r2, #0
 810fc86:	601a      	str	r2, [r3, #0]
}
 810fc88:	bf00      	nop
 810fc8a:	3710      	adds	r7, #16
 810fc8c:	46bd      	mov	sp, r7
 810fc8e:	bd80      	pop	{r7, pc}
 810fc90:	08128944 	.word	0x08128944
 810fc94:	0810f8c1 	.word	0x0810f8c1
 810fc98:	2400076c 	.word	0x2400076c

0810fc9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 810fc9c:	b480      	push	{r7}
 810fc9e:	b08d      	sub	sp, #52	@ 0x34
 810fca0:	af00      	add	r7, sp, #0
 810fca2:	60f8      	str	r0, [r7, #12]
 810fca4:	60b9      	str	r1, [r7, #8]
 810fca6:	607a      	str	r2, [r7, #4]
 810fca8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 810fcaa:	68fb      	ldr	r3, [r7, #12]
 810fcac:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 810fcae:	68bb      	ldr	r3, [r7, #8]
 810fcb0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 810fcb2:	2300      	movs	r3, #0
 810fcb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 810fcb6:	687b      	ldr	r3, [r7, #4]
 810fcb8:	3b20      	subs	r3, #32
 810fcba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 810fcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fcbe:	2200      	movs	r2, #0
 810fcc0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810fcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fcc4:	2200      	movs	r2, #0
 810fcc6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 810fcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fcca:	887a      	ldrh	r2, [r7, #2]
 810fccc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 810fcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fcd0:	681b      	ldr	r3, [r3, #0]
 810fcd2:	2b00      	cmp	r3, #0
 810fcd4:	d103      	bne.n	810fcde <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 810fcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fcd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810fcda:	601a      	str	r2, [r3, #0]
 810fcdc:	e003      	b.n	810fce6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 810fcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fce0:	681b      	ldr	r3, [r3, #0]
 810fce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810fce4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 810fce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810fcea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 810fcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fcee:	681b      	ldr	r3, [r3, #0]
 810fcf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810fcf2:	e009      	b.n	810fd08 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 810fcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fcf6:	891a      	ldrh	r2, [r3, #8]
 810fcf8:	887b      	ldrh	r3, [r7, #2]
 810fcfa:	4413      	add	r3, r2
 810fcfc:	b29a      	uxth	r2, r3
 810fcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fd00:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810fd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fd04:	681b      	ldr	r3, [r3, #0]
 810fd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810fd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fd0a:	2b00      	cmp	r3, #0
 810fd0c:	d1f2      	bne.n	810fcf4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 810fd0e:	887b      	ldrh	r3, [r7, #2]
 810fd10:	687a      	ldr	r2, [r7, #4]
 810fd12:	623a      	str	r2, [r7, #32]
 810fd14:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 810fd16:	69fb      	ldr	r3, [r7, #28]
 810fd18:	2b00      	cmp	r3, #0
 810fd1a:	dd1d      	ble.n	810fd58 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 810fd1c:	6a3b      	ldr	r3, [r7, #32]
 810fd1e:	f003 021f 	and.w	r2, r3, #31
 810fd22:	69fb      	ldr	r3, [r7, #28]
 810fd24:	4413      	add	r3, r2
 810fd26:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 810fd28:	6a3b      	ldr	r3, [r7, #32]
 810fd2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 810fd2c:	f3bf 8f4f 	dsb	sy
}
 810fd30:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 810fd32:	4a0d      	ldr	r2, [pc, #52]	@ (810fd68 <HAL_ETH_RxLinkCallback+0xcc>)
 810fd34:	697b      	ldr	r3, [r7, #20]
 810fd36:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 810fd3a:	697b      	ldr	r3, [r7, #20]
 810fd3c:	3320      	adds	r3, #32
 810fd3e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 810fd40:	69bb      	ldr	r3, [r7, #24]
 810fd42:	3b20      	subs	r3, #32
 810fd44:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 810fd46:	69bb      	ldr	r3, [r7, #24]
 810fd48:	2b00      	cmp	r3, #0
 810fd4a:	dcf2      	bgt.n	810fd32 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 810fd4c:	f3bf 8f4f 	dsb	sy
}
 810fd50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810fd52:	f3bf 8f6f 	isb	sy
}
 810fd56:	bf00      	nop
}
 810fd58:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 810fd5a:	bf00      	nop
 810fd5c:	3734      	adds	r7, #52	@ 0x34
 810fd5e:	46bd      	mov	sp, r7
 810fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fd64:	4770      	bx	lr
 810fd66:	bf00      	nop
 810fd68:	e000ed00 	.word	0xe000ed00

0810fd6c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 810fd6c:	b580      	push	{r7, lr}
 810fd6e:	b082      	sub	sp, #8
 810fd70:	af00      	add	r7, sp, #0
 810fd72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 810fd74:	6878      	ldr	r0, [r7, #4]
 810fd76:	f009 fdf9 	bl	811996c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 810fd7a:	bf00      	nop
 810fd7c:	3708      	adds	r7, #8
 810fd7e:	46bd      	mov	sp, r7
 810fd80:	bd80      	pop	{r7, pc}
	...

0810fd84 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 810fd84:	b580      	push	{r7, lr}
 810fd86:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 810fd88:	4804      	ldr	r0, [pc, #16]	@ (810fd9c <sys_lock_tcpip_core+0x18>)
 810fd8a:	f00a f995 	bl	811a0b8 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 810fd8e:	f000 f98f 	bl	81100b0 <osThreadGetId>
 810fd92:	4603      	mov	r3, r0
 810fd94:	4a02      	ldr	r2, [pc, #8]	@ (810fda0 <sys_lock_tcpip_core+0x1c>)
 810fd96:	6013      	str	r3, [r2, #0]
}
 810fd98:	bf00      	nop
 810fd9a:	bd80      	pop	{r7, pc}
 810fd9c:	240126fc 	.word	0x240126fc
 810fda0:	24000880 	.word	0x24000880

0810fda4 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 810fda4:	b580      	push	{r7, lr}
 810fda6:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 810fda8:	4b03      	ldr	r3, [pc, #12]	@ (810fdb8 <sys_unlock_tcpip_core+0x14>)
 810fdaa:	2200      	movs	r2, #0
 810fdac:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 810fdae:	4803      	ldr	r0, [pc, #12]	@ (810fdbc <sys_unlock_tcpip_core+0x18>)
 810fdb0:	f00a f991 	bl	811a0d6 <sys_mutex_unlock>
}
 810fdb4:	bf00      	nop
 810fdb6:	bd80      	pop	{r7, pc}
 810fdb8:	24000880 	.word	0x24000880
 810fdbc:	240126fc 	.word	0x240126fc

0810fdc0 <sys_check_core_locking>:

void sys_check_core_locking(void){
 810fdc0:	b580      	push	{r7, lr}
 810fdc2:	b082      	sub	sp, #8
 810fdc4:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 810fdc6:	4b12      	ldr	r3, [pc, #72]	@ (810fe10 <sys_check_core_locking+0x50>)
 810fdc8:	685b      	ldr	r3, [r3, #4]
 810fdca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810fdce:	2b00      	cmp	r3, #0
 810fdd0:	d006      	beq.n	810fde0 <sys_check_core_locking+0x20>
 810fdd2:	4b10      	ldr	r3, [pc, #64]	@ (810fe14 <sys_check_core_locking+0x54>)
 810fdd4:	f240 32d1 	movw	r2, #977	@ 0x3d1
 810fdd8:	490f      	ldr	r1, [pc, #60]	@ (810fe18 <sys_check_core_locking+0x58>)
 810fdda:	4810      	ldr	r0, [pc, #64]	@ (810fe1c <sys_check_core_locking+0x5c>)
 810fddc:	f011 ffd2 	bl	8121d84 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 810fde0:	4b0f      	ldr	r3, [pc, #60]	@ (810fe20 <sys_check_core_locking+0x60>)
 810fde2:	681b      	ldr	r3, [r3, #0]
 810fde4:	2b00      	cmp	r3, #0
 810fde6:	d00e      	beq.n	810fe06 <sys_check_core_locking+0x46>
	  osThreadId_t current_thread_id = osThreadGetId();
 810fde8:	f000 f962 	bl	81100b0 <osThreadGetId>
 810fdec:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 810fdee:	4b0d      	ldr	r3, [pc, #52]	@ (810fe24 <sys_check_core_locking+0x64>)
 810fdf0:	681b      	ldr	r3, [r3, #0]
 810fdf2:	687a      	ldr	r2, [r7, #4]
 810fdf4:	429a      	cmp	r2, r3
 810fdf6:	d006      	beq.n	810fe06 <sys_check_core_locking+0x46>
 810fdf8:	4b06      	ldr	r3, [pc, #24]	@ (810fe14 <sys_check_core_locking+0x54>)
 810fdfa:	f240 32d7 	movw	r2, #983	@ 0x3d7
 810fdfe:	490a      	ldr	r1, [pc, #40]	@ (810fe28 <sys_check_core_locking+0x68>)
 810fe00:	4806      	ldr	r0, [pc, #24]	@ (810fe1c <sys_check_core_locking+0x5c>)
 810fe02:	f011 ffbf 	bl	8121d84 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 810fe06:	bf00      	nop
 810fe08:	3708      	adds	r7, #8
 810fe0a:	46bd      	mov	sp, r7
 810fe0c:	bd80      	pop	{r7, pc}
 810fe0e:	bf00      	nop
 810fe10:	e000ed00 	.word	0xe000ed00
 810fe14:	08124cec 	.word	0x08124cec
 810fe18:	08124d40 	.word	0x08124d40
 810fe1c:	08124d18 	.word	0x08124d18
 810fe20:	24000884 	.word	0x24000884
 810fe24:	24000880 	.word	0x24000880
 810fe28:	08124d68 	.word	0x08124d68

0810fe2c <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 810fe2c:	b580      	push	{r7, lr}
 810fe2e:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 810fe30:	f000 f93e 	bl	81100b0 <osThreadGetId>
 810fe34:	4603      	mov	r3, r0
 810fe36:	4a02      	ldr	r2, [pc, #8]	@ (810fe40 <sys_mark_tcpip_thread+0x14>)
 810fe38:	6013      	str	r3, [r2, #0]
}
 810fe3a:	bf00      	nop
 810fe3c:	bd80      	pop	{r7, pc}
 810fe3e:	bf00      	nop
 810fe40:	24000884 	.word	0x24000884

0810fe44 <__NVIC_SetPriority>:
{
 810fe44:	b480      	push	{r7}
 810fe46:	b083      	sub	sp, #12
 810fe48:	af00      	add	r7, sp, #0
 810fe4a:	4603      	mov	r3, r0
 810fe4c:	6039      	str	r1, [r7, #0]
 810fe4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810fe50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810fe54:	2b00      	cmp	r3, #0
 810fe56:	db0a      	blt.n	810fe6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810fe58:	683b      	ldr	r3, [r7, #0]
 810fe5a:	b2da      	uxtb	r2, r3
 810fe5c:	490c      	ldr	r1, [pc, #48]	@ (810fe90 <__NVIC_SetPriority+0x4c>)
 810fe5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810fe62:	0112      	lsls	r2, r2, #4
 810fe64:	b2d2      	uxtb	r2, r2
 810fe66:	440b      	add	r3, r1
 810fe68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810fe6c:	e00a      	b.n	810fe84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810fe6e:	683b      	ldr	r3, [r7, #0]
 810fe70:	b2da      	uxtb	r2, r3
 810fe72:	4908      	ldr	r1, [pc, #32]	@ (810fe94 <__NVIC_SetPriority+0x50>)
 810fe74:	88fb      	ldrh	r3, [r7, #6]
 810fe76:	f003 030f 	and.w	r3, r3, #15
 810fe7a:	3b04      	subs	r3, #4
 810fe7c:	0112      	lsls	r2, r2, #4
 810fe7e:	b2d2      	uxtb	r2, r2
 810fe80:	440b      	add	r3, r1
 810fe82:	761a      	strb	r2, [r3, #24]
}
 810fe84:	bf00      	nop
 810fe86:	370c      	adds	r7, #12
 810fe88:	46bd      	mov	sp, r7
 810fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fe8e:	4770      	bx	lr
 810fe90:	e000e100 	.word	0xe000e100
 810fe94:	e000ed00 	.word	0xe000ed00

0810fe98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810fe98:	b580      	push	{r7, lr}
 810fe9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810fe9c:	4b05      	ldr	r3, [pc, #20]	@ (810feb4 <SysTick_Handler+0x1c>)
 810fe9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810fea0:	f003 f912 	bl	81130c8 <xTaskGetSchedulerState>
 810fea4:	4603      	mov	r3, r0
 810fea6:	2b01      	cmp	r3, #1
 810fea8:	d001      	beq.n	810feae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810feaa:	f001 f91d 	bl	81110e8 <xPortSysTickHandler>
  }
}
 810feae:	bf00      	nop
 810feb0:	bd80      	pop	{r7, pc}
 810feb2:	bf00      	nop
 810feb4:	e000e010 	.word	0xe000e010

0810feb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810feb8:	b580      	push	{r7, lr}
 810feba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810febc:	2100      	movs	r1, #0
 810febe:	f06f 0004 	mvn.w	r0, #4
 810fec2:	f7ff ffbf 	bl	810fe44 <__NVIC_SetPriority>
#endif
}
 810fec6:	bf00      	nop
 810fec8:	bd80      	pop	{r7, pc}
	...

0810fecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810fecc:	b480      	push	{r7}
 810fece:	b083      	sub	sp, #12
 810fed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fed2:	f3ef 8305 	mrs	r3, IPSR
 810fed6:	603b      	str	r3, [r7, #0]
  return(result);
 810fed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810feda:	2b00      	cmp	r3, #0
 810fedc:	d003      	beq.n	810fee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810fede:	f06f 0305 	mvn.w	r3, #5
 810fee2:	607b      	str	r3, [r7, #4]
 810fee4:	e00c      	b.n	810ff00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810fee6:	4b0a      	ldr	r3, [pc, #40]	@ (810ff10 <osKernelInitialize+0x44>)
 810fee8:	681b      	ldr	r3, [r3, #0]
 810feea:	2b00      	cmp	r3, #0
 810feec:	d105      	bne.n	810fefa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810feee:	4b08      	ldr	r3, [pc, #32]	@ (810ff10 <osKernelInitialize+0x44>)
 810fef0:	2201      	movs	r2, #1
 810fef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810fef4:	2300      	movs	r3, #0
 810fef6:	607b      	str	r3, [r7, #4]
 810fef8:	e002      	b.n	810ff00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810fefa:	f04f 33ff 	mov.w	r3, #4294967295
 810fefe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810ff00:	687b      	ldr	r3, [r7, #4]
}
 810ff02:	4618      	mov	r0, r3
 810ff04:	370c      	adds	r7, #12
 810ff06:	46bd      	mov	sp, r7
 810ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ff0c:	4770      	bx	lr
 810ff0e:	bf00      	nop
 810ff10:	24000888 	.word	0x24000888

0810ff14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810ff14:	b580      	push	{r7, lr}
 810ff16:	b082      	sub	sp, #8
 810ff18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ff1a:	f3ef 8305 	mrs	r3, IPSR
 810ff1e:	603b      	str	r3, [r7, #0]
  return(result);
 810ff20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810ff22:	2b00      	cmp	r3, #0
 810ff24:	d003      	beq.n	810ff2e <osKernelStart+0x1a>
    stat = osErrorISR;
 810ff26:	f06f 0305 	mvn.w	r3, #5
 810ff2a:	607b      	str	r3, [r7, #4]
 810ff2c:	e010      	b.n	810ff50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810ff2e:	4b0b      	ldr	r3, [pc, #44]	@ (810ff5c <osKernelStart+0x48>)
 810ff30:	681b      	ldr	r3, [r3, #0]
 810ff32:	2b01      	cmp	r3, #1
 810ff34:	d109      	bne.n	810ff4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810ff36:	f7ff ffbf 	bl	810feb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810ff3a:	4b08      	ldr	r3, [pc, #32]	@ (810ff5c <osKernelStart+0x48>)
 810ff3c:	2202      	movs	r2, #2
 810ff3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810ff40:	f002 fc3c 	bl	81127bc <vTaskStartScheduler>
      stat = osOK;
 810ff44:	2300      	movs	r3, #0
 810ff46:	607b      	str	r3, [r7, #4]
 810ff48:	e002      	b.n	810ff50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810ff4a:	f04f 33ff 	mov.w	r3, #4294967295
 810ff4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810ff50:	687b      	ldr	r3, [r7, #4]
}
 810ff52:	4618      	mov	r0, r3
 810ff54:	3708      	adds	r7, #8
 810ff56:	46bd      	mov	sp, r7
 810ff58:	bd80      	pop	{r7, pc}
 810ff5a:	bf00      	nop
 810ff5c:	24000888 	.word	0x24000888

0810ff60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810ff60:	b580      	push	{r7, lr}
 810ff62:	b082      	sub	sp, #8
 810ff64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ff66:	f3ef 8305 	mrs	r3, IPSR
 810ff6a:	603b      	str	r3, [r7, #0]
  return(result);
 810ff6c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810ff6e:	2b00      	cmp	r3, #0
 810ff70:	d003      	beq.n	810ff7a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810ff72:	f002 fd4f 	bl	8112a14 <xTaskGetTickCountFromISR>
 810ff76:	6078      	str	r0, [r7, #4]
 810ff78:	e002      	b.n	810ff80 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810ff7a:	f002 fd3b 	bl	81129f4 <xTaskGetTickCount>
 810ff7e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810ff80:	687b      	ldr	r3, [r7, #4]
}
 810ff82:	4618      	mov	r0, r3
 810ff84:	3708      	adds	r7, #8
 810ff86:	46bd      	mov	sp, r7
 810ff88:	bd80      	pop	{r7, pc}

0810ff8a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810ff8a:	b580      	push	{r7, lr}
 810ff8c:	b08e      	sub	sp, #56	@ 0x38
 810ff8e:	af04      	add	r7, sp, #16
 810ff90:	60f8      	str	r0, [r7, #12]
 810ff92:	60b9      	str	r1, [r7, #8]
 810ff94:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810ff96:	2300      	movs	r3, #0
 810ff98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ff9a:	f3ef 8305 	mrs	r3, IPSR
 810ff9e:	617b      	str	r3, [r7, #20]
  return(result);
 810ffa0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810ffa2:	2b00      	cmp	r3, #0
 810ffa4:	d17f      	bne.n	81100a6 <osThreadNew+0x11c>
 810ffa6:	68fb      	ldr	r3, [r7, #12]
 810ffa8:	2b00      	cmp	r3, #0
 810ffaa:	d07c      	beq.n	81100a6 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 810ffac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810ffb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810ffb2:	2318      	movs	r3, #24
 810ffb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810ffb6:	2300      	movs	r3, #0
 810ffb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810ffba:	f04f 33ff 	mov.w	r3, #4294967295
 810ffbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810ffc0:	687b      	ldr	r3, [r7, #4]
 810ffc2:	2b00      	cmp	r3, #0
 810ffc4:	d045      	beq.n	8110052 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 810ffc6:	687b      	ldr	r3, [r7, #4]
 810ffc8:	681b      	ldr	r3, [r3, #0]
 810ffca:	2b00      	cmp	r3, #0
 810ffcc:	d002      	beq.n	810ffd4 <osThreadNew+0x4a>
        name = attr->name;
 810ffce:	687b      	ldr	r3, [r7, #4]
 810ffd0:	681b      	ldr	r3, [r3, #0]
 810ffd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810ffd4:	687b      	ldr	r3, [r7, #4]
 810ffd6:	699b      	ldr	r3, [r3, #24]
 810ffd8:	2b00      	cmp	r3, #0
 810ffda:	d002      	beq.n	810ffe2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 810ffdc:	687b      	ldr	r3, [r7, #4]
 810ffde:	699b      	ldr	r3, [r3, #24]
 810ffe0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810ffe2:	69fb      	ldr	r3, [r7, #28]
 810ffe4:	2b00      	cmp	r3, #0
 810ffe6:	d008      	beq.n	810fffa <osThreadNew+0x70>
 810ffe8:	69fb      	ldr	r3, [r7, #28]
 810ffea:	2b38      	cmp	r3, #56	@ 0x38
 810ffec:	d805      	bhi.n	810fffa <osThreadNew+0x70>
 810ffee:	687b      	ldr	r3, [r7, #4]
 810fff0:	685b      	ldr	r3, [r3, #4]
 810fff2:	f003 0301 	and.w	r3, r3, #1
 810fff6:	2b00      	cmp	r3, #0
 810fff8:	d001      	beq.n	810fffe <osThreadNew+0x74>
        return (NULL);
 810fffa:	2300      	movs	r3, #0
 810fffc:	e054      	b.n	81100a8 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 810fffe:	687b      	ldr	r3, [r7, #4]
 8110000:	695b      	ldr	r3, [r3, #20]
 8110002:	2b00      	cmp	r3, #0
 8110004:	d003      	beq.n	811000e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8110006:	687b      	ldr	r3, [r7, #4]
 8110008:	695b      	ldr	r3, [r3, #20]
 811000a:	089b      	lsrs	r3, r3, #2
 811000c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 811000e:	687b      	ldr	r3, [r7, #4]
 8110010:	689b      	ldr	r3, [r3, #8]
 8110012:	2b00      	cmp	r3, #0
 8110014:	d00e      	beq.n	8110034 <osThreadNew+0xaa>
 8110016:	687b      	ldr	r3, [r7, #4]
 8110018:	68db      	ldr	r3, [r3, #12]
 811001a:	2ba7      	cmp	r3, #167	@ 0xa7
 811001c:	d90a      	bls.n	8110034 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 811001e:	687b      	ldr	r3, [r7, #4]
 8110020:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8110022:	2b00      	cmp	r3, #0
 8110024:	d006      	beq.n	8110034 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8110026:	687b      	ldr	r3, [r7, #4]
 8110028:	695b      	ldr	r3, [r3, #20]
 811002a:	2b00      	cmp	r3, #0
 811002c:	d002      	beq.n	8110034 <osThreadNew+0xaa>
        mem = 1;
 811002e:	2301      	movs	r3, #1
 8110030:	61bb      	str	r3, [r7, #24]
 8110032:	e010      	b.n	8110056 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8110034:	687b      	ldr	r3, [r7, #4]
 8110036:	689b      	ldr	r3, [r3, #8]
 8110038:	2b00      	cmp	r3, #0
 811003a:	d10c      	bne.n	8110056 <osThreadNew+0xcc>
 811003c:	687b      	ldr	r3, [r7, #4]
 811003e:	68db      	ldr	r3, [r3, #12]
 8110040:	2b00      	cmp	r3, #0
 8110042:	d108      	bne.n	8110056 <osThreadNew+0xcc>
 8110044:	687b      	ldr	r3, [r7, #4]
 8110046:	691b      	ldr	r3, [r3, #16]
 8110048:	2b00      	cmp	r3, #0
 811004a:	d104      	bne.n	8110056 <osThreadNew+0xcc>
          mem = 0;
 811004c:	2300      	movs	r3, #0
 811004e:	61bb      	str	r3, [r7, #24]
 8110050:	e001      	b.n	8110056 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8110052:	2300      	movs	r3, #0
 8110054:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8110056:	69bb      	ldr	r3, [r7, #24]
 8110058:	2b01      	cmp	r3, #1
 811005a:	d110      	bne.n	811007e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 811005c:	687b      	ldr	r3, [r7, #4]
 811005e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8110060:	687a      	ldr	r2, [r7, #4]
 8110062:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8110064:	9202      	str	r2, [sp, #8]
 8110066:	9301      	str	r3, [sp, #4]
 8110068:	69fb      	ldr	r3, [r7, #28]
 811006a:	9300      	str	r3, [sp, #0]
 811006c:	68bb      	ldr	r3, [r7, #8]
 811006e:	6a3a      	ldr	r2, [r7, #32]
 8110070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8110072:	68f8      	ldr	r0, [r7, #12]
 8110074:	f002 f9ae 	bl	81123d4 <xTaskCreateStatic>
 8110078:	4603      	mov	r3, r0
 811007a:	613b      	str	r3, [r7, #16]
 811007c:	e013      	b.n	81100a6 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 811007e:	69bb      	ldr	r3, [r7, #24]
 8110080:	2b00      	cmp	r3, #0
 8110082:	d110      	bne.n	81100a6 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8110084:	6a3b      	ldr	r3, [r7, #32]
 8110086:	b29a      	uxth	r2, r3
 8110088:	f107 0310 	add.w	r3, r7, #16
 811008c:	9301      	str	r3, [sp, #4]
 811008e:	69fb      	ldr	r3, [r7, #28]
 8110090:	9300      	str	r3, [sp, #0]
 8110092:	68bb      	ldr	r3, [r7, #8]
 8110094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8110096:	68f8      	ldr	r0, [r7, #12]
 8110098:	f002 f9fc 	bl	8112494 <xTaskCreate>
 811009c:	4603      	mov	r3, r0
 811009e:	2b01      	cmp	r3, #1
 81100a0:	d001      	beq.n	81100a6 <osThreadNew+0x11c>
            hTask = NULL;
 81100a2:	2300      	movs	r3, #0
 81100a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81100a6:	693b      	ldr	r3, [r7, #16]
}
 81100a8:	4618      	mov	r0, r3
 81100aa:	3728      	adds	r7, #40	@ 0x28
 81100ac:	46bd      	mov	sp, r7
 81100ae:	bd80      	pop	{r7, pc}

081100b0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 81100b0:	b580      	push	{r7, lr}
 81100b2:	b082      	sub	sp, #8
 81100b4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 81100b6:	f002 fff7 	bl	81130a8 <xTaskGetCurrentTaskHandle>
 81100ba:	6078      	str	r0, [r7, #4]

  return (id);
 81100bc:	687b      	ldr	r3, [r7, #4]
}
 81100be:	4618      	mov	r0, r3
 81100c0:	3708      	adds	r7, #8
 81100c2:	46bd      	mov	sp, r7
 81100c4:	bd80      	pop	{r7, pc}

081100c6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81100c6:	b580      	push	{r7, lr}
 81100c8:	b084      	sub	sp, #16
 81100ca:	af00      	add	r7, sp, #0
 81100cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81100ce:	f3ef 8305 	mrs	r3, IPSR
 81100d2:	60bb      	str	r3, [r7, #8]
  return(result);
 81100d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81100d6:	2b00      	cmp	r3, #0
 81100d8:	d003      	beq.n	81100e2 <osDelay+0x1c>
    stat = osErrorISR;
 81100da:	f06f 0305 	mvn.w	r3, #5
 81100de:	60fb      	str	r3, [r7, #12]
 81100e0:	e007      	b.n	81100f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81100e2:	2300      	movs	r3, #0
 81100e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81100e6:	687b      	ldr	r3, [r7, #4]
 81100e8:	2b00      	cmp	r3, #0
 81100ea:	d002      	beq.n	81100f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 81100ec:	6878      	ldr	r0, [r7, #4]
 81100ee:	f002 fb2f 	bl	8112750 <vTaskDelay>
    }
  }

  return (stat);
 81100f2:	68fb      	ldr	r3, [r7, #12]
}
 81100f4:	4618      	mov	r0, r3
 81100f6:	3710      	adds	r7, #16
 81100f8:	46bd      	mov	sp, r7
 81100fa:	bd80      	pop	{r7, pc}

081100fc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 81100fc:	b580      	push	{r7, lr}
 81100fe:	b088      	sub	sp, #32
 8110100:	af00      	add	r7, sp, #0
 8110102:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8110104:	2300      	movs	r3, #0
 8110106:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110108:	f3ef 8305 	mrs	r3, IPSR
 811010c:	60bb      	str	r3, [r7, #8]
  return(result);
 811010e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8110110:	2b00      	cmp	r3, #0
 8110112:	d174      	bne.n	81101fe <osMutexNew+0x102>
    if (attr != NULL) {
 8110114:	687b      	ldr	r3, [r7, #4]
 8110116:	2b00      	cmp	r3, #0
 8110118:	d003      	beq.n	8110122 <osMutexNew+0x26>
      type = attr->attr_bits;
 811011a:	687b      	ldr	r3, [r7, #4]
 811011c:	685b      	ldr	r3, [r3, #4]
 811011e:	61bb      	str	r3, [r7, #24]
 8110120:	e001      	b.n	8110126 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8110122:	2300      	movs	r3, #0
 8110124:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8110126:	69bb      	ldr	r3, [r7, #24]
 8110128:	f003 0301 	and.w	r3, r3, #1
 811012c:	2b00      	cmp	r3, #0
 811012e:	d002      	beq.n	8110136 <osMutexNew+0x3a>
      rmtx = 1U;
 8110130:	2301      	movs	r3, #1
 8110132:	617b      	str	r3, [r7, #20]
 8110134:	e001      	b.n	811013a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8110136:	2300      	movs	r3, #0
 8110138:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 811013a:	69bb      	ldr	r3, [r7, #24]
 811013c:	f003 0308 	and.w	r3, r3, #8
 8110140:	2b00      	cmp	r3, #0
 8110142:	d15c      	bne.n	81101fe <osMutexNew+0x102>
      mem = -1;
 8110144:	f04f 33ff 	mov.w	r3, #4294967295
 8110148:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 811014a:	687b      	ldr	r3, [r7, #4]
 811014c:	2b00      	cmp	r3, #0
 811014e:	d015      	beq.n	811017c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8110150:	687b      	ldr	r3, [r7, #4]
 8110152:	689b      	ldr	r3, [r3, #8]
 8110154:	2b00      	cmp	r3, #0
 8110156:	d006      	beq.n	8110166 <osMutexNew+0x6a>
 8110158:	687b      	ldr	r3, [r7, #4]
 811015a:	68db      	ldr	r3, [r3, #12]
 811015c:	2b4f      	cmp	r3, #79	@ 0x4f
 811015e:	d902      	bls.n	8110166 <osMutexNew+0x6a>
          mem = 1;
 8110160:	2301      	movs	r3, #1
 8110162:	613b      	str	r3, [r7, #16]
 8110164:	e00c      	b.n	8110180 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8110166:	687b      	ldr	r3, [r7, #4]
 8110168:	689b      	ldr	r3, [r3, #8]
 811016a:	2b00      	cmp	r3, #0
 811016c:	d108      	bne.n	8110180 <osMutexNew+0x84>
 811016e:	687b      	ldr	r3, [r7, #4]
 8110170:	68db      	ldr	r3, [r3, #12]
 8110172:	2b00      	cmp	r3, #0
 8110174:	d104      	bne.n	8110180 <osMutexNew+0x84>
            mem = 0;
 8110176:	2300      	movs	r3, #0
 8110178:	613b      	str	r3, [r7, #16]
 811017a:	e001      	b.n	8110180 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 811017c:	2300      	movs	r3, #0
 811017e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8110180:	693b      	ldr	r3, [r7, #16]
 8110182:	2b01      	cmp	r3, #1
 8110184:	d112      	bne.n	81101ac <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8110186:	697b      	ldr	r3, [r7, #20]
 8110188:	2b00      	cmp	r3, #0
 811018a:	d007      	beq.n	811019c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 811018c:	687b      	ldr	r3, [r7, #4]
 811018e:	689b      	ldr	r3, [r3, #8]
 8110190:	4619      	mov	r1, r3
 8110192:	2004      	movs	r0, #4
 8110194:	f001 f9b1 	bl	81114fa <xQueueCreateMutexStatic>
 8110198:	61f8      	str	r0, [r7, #28]
 811019a:	e016      	b.n	81101ca <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 811019c:	687b      	ldr	r3, [r7, #4]
 811019e:	689b      	ldr	r3, [r3, #8]
 81101a0:	4619      	mov	r1, r3
 81101a2:	2001      	movs	r0, #1
 81101a4:	f001 f9a9 	bl	81114fa <xQueueCreateMutexStatic>
 81101a8:	61f8      	str	r0, [r7, #28]
 81101aa:	e00e      	b.n	81101ca <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 81101ac:	693b      	ldr	r3, [r7, #16]
 81101ae:	2b00      	cmp	r3, #0
 81101b0:	d10b      	bne.n	81101ca <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 81101b2:	697b      	ldr	r3, [r7, #20]
 81101b4:	2b00      	cmp	r3, #0
 81101b6:	d004      	beq.n	81101c2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 81101b8:	2004      	movs	r0, #4
 81101ba:	f001 f986 	bl	81114ca <xQueueCreateMutex>
 81101be:	61f8      	str	r0, [r7, #28]
 81101c0:	e003      	b.n	81101ca <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 81101c2:	2001      	movs	r0, #1
 81101c4:	f001 f981 	bl	81114ca <xQueueCreateMutex>
 81101c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 81101ca:	69fb      	ldr	r3, [r7, #28]
 81101cc:	2b00      	cmp	r3, #0
 81101ce:	d00c      	beq.n	81101ea <osMutexNew+0xee>
        if (attr != NULL) {
 81101d0:	687b      	ldr	r3, [r7, #4]
 81101d2:	2b00      	cmp	r3, #0
 81101d4:	d003      	beq.n	81101de <osMutexNew+0xe2>
          name = attr->name;
 81101d6:	687b      	ldr	r3, [r7, #4]
 81101d8:	681b      	ldr	r3, [r3, #0]
 81101da:	60fb      	str	r3, [r7, #12]
 81101dc:	e001      	b.n	81101e2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 81101de:	2300      	movs	r3, #0
 81101e0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 81101e2:	68f9      	ldr	r1, [r7, #12]
 81101e4:	69f8      	ldr	r0, [r7, #28]
 81101e6:	f002 f86d 	bl	81122c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 81101ea:	69fb      	ldr	r3, [r7, #28]
 81101ec:	2b00      	cmp	r3, #0
 81101ee:	d006      	beq.n	81101fe <osMutexNew+0x102>
 81101f0:	697b      	ldr	r3, [r7, #20]
 81101f2:	2b00      	cmp	r3, #0
 81101f4:	d003      	beq.n	81101fe <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 81101f6:	69fb      	ldr	r3, [r7, #28]
 81101f8:	f043 0301 	orr.w	r3, r3, #1
 81101fc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 81101fe:	69fb      	ldr	r3, [r7, #28]
}
 8110200:	4618      	mov	r0, r3
 8110202:	3720      	adds	r7, #32
 8110204:	46bd      	mov	sp, r7
 8110206:	bd80      	pop	{r7, pc}

08110208 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8110208:	b580      	push	{r7, lr}
 811020a:	b086      	sub	sp, #24
 811020c:	af00      	add	r7, sp, #0
 811020e:	6078      	str	r0, [r7, #4]
 8110210:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8110212:	687b      	ldr	r3, [r7, #4]
 8110214:	f023 0301 	bic.w	r3, r3, #1
 8110218:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 811021a:	687b      	ldr	r3, [r7, #4]
 811021c:	f003 0301 	and.w	r3, r3, #1
 8110220:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8110222:	2300      	movs	r3, #0
 8110224:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110226:	f3ef 8305 	mrs	r3, IPSR
 811022a:	60bb      	str	r3, [r7, #8]
  return(result);
 811022c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 811022e:	2b00      	cmp	r3, #0
 8110230:	d003      	beq.n	811023a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8110232:	f06f 0305 	mvn.w	r3, #5
 8110236:	617b      	str	r3, [r7, #20]
 8110238:	e02c      	b.n	8110294 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 811023a:	693b      	ldr	r3, [r7, #16]
 811023c:	2b00      	cmp	r3, #0
 811023e:	d103      	bne.n	8110248 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8110240:	f06f 0303 	mvn.w	r3, #3
 8110244:	617b      	str	r3, [r7, #20]
 8110246:	e025      	b.n	8110294 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8110248:	68fb      	ldr	r3, [r7, #12]
 811024a:	2b00      	cmp	r3, #0
 811024c:	d011      	beq.n	8110272 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 811024e:	6839      	ldr	r1, [r7, #0]
 8110250:	6938      	ldr	r0, [r7, #16]
 8110252:	f001 f9a2 	bl	811159a <xQueueTakeMutexRecursive>
 8110256:	4603      	mov	r3, r0
 8110258:	2b01      	cmp	r3, #1
 811025a:	d01b      	beq.n	8110294 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 811025c:	683b      	ldr	r3, [r7, #0]
 811025e:	2b00      	cmp	r3, #0
 8110260:	d003      	beq.n	811026a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8110262:	f06f 0301 	mvn.w	r3, #1
 8110266:	617b      	str	r3, [r7, #20]
 8110268:	e014      	b.n	8110294 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 811026a:	f06f 0302 	mvn.w	r3, #2
 811026e:	617b      	str	r3, [r7, #20]
 8110270:	e010      	b.n	8110294 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8110272:	6839      	ldr	r1, [r7, #0]
 8110274:	6938      	ldr	r0, [r7, #16]
 8110276:	f001 fd47 	bl	8111d08 <xQueueSemaphoreTake>
 811027a:	4603      	mov	r3, r0
 811027c:	2b01      	cmp	r3, #1
 811027e:	d009      	beq.n	8110294 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8110280:	683b      	ldr	r3, [r7, #0]
 8110282:	2b00      	cmp	r3, #0
 8110284:	d003      	beq.n	811028e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8110286:	f06f 0301 	mvn.w	r3, #1
 811028a:	617b      	str	r3, [r7, #20]
 811028c:	e002      	b.n	8110294 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 811028e:	f06f 0302 	mvn.w	r3, #2
 8110292:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8110294:	697b      	ldr	r3, [r7, #20]
}
 8110296:	4618      	mov	r0, r3
 8110298:	3718      	adds	r7, #24
 811029a:	46bd      	mov	sp, r7
 811029c:	bd80      	pop	{r7, pc}

0811029e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 811029e:	b580      	push	{r7, lr}
 81102a0:	b086      	sub	sp, #24
 81102a2:	af00      	add	r7, sp, #0
 81102a4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 81102a6:	687b      	ldr	r3, [r7, #4]
 81102a8:	f023 0301 	bic.w	r3, r3, #1
 81102ac:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 81102ae:	687b      	ldr	r3, [r7, #4]
 81102b0:	f003 0301 	and.w	r3, r3, #1
 81102b4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 81102b6:	2300      	movs	r3, #0
 81102b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81102ba:	f3ef 8305 	mrs	r3, IPSR
 81102be:	60bb      	str	r3, [r7, #8]
  return(result);
 81102c0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 81102c2:	2b00      	cmp	r3, #0
 81102c4:	d003      	beq.n	81102ce <osMutexRelease+0x30>
    stat = osErrorISR;
 81102c6:	f06f 0305 	mvn.w	r3, #5
 81102ca:	617b      	str	r3, [r7, #20]
 81102cc:	e01f      	b.n	811030e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 81102ce:	693b      	ldr	r3, [r7, #16]
 81102d0:	2b00      	cmp	r3, #0
 81102d2:	d103      	bne.n	81102dc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 81102d4:	f06f 0303 	mvn.w	r3, #3
 81102d8:	617b      	str	r3, [r7, #20]
 81102da:	e018      	b.n	811030e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 81102dc:	68fb      	ldr	r3, [r7, #12]
 81102de:	2b00      	cmp	r3, #0
 81102e0:	d009      	beq.n	81102f6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 81102e2:	6938      	ldr	r0, [r7, #16]
 81102e4:	f001 f924 	bl	8111530 <xQueueGiveMutexRecursive>
 81102e8:	4603      	mov	r3, r0
 81102ea:	2b01      	cmp	r3, #1
 81102ec:	d00f      	beq.n	811030e <osMutexRelease+0x70>
        stat = osErrorResource;
 81102ee:	f06f 0302 	mvn.w	r3, #2
 81102f2:	617b      	str	r3, [r7, #20]
 81102f4:	e00b      	b.n	811030e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 81102f6:	2300      	movs	r3, #0
 81102f8:	2200      	movs	r2, #0
 81102fa:	2100      	movs	r1, #0
 81102fc:	6938      	ldr	r0, [r7, #16]
 81102fe:	f001 f9f1 	bl	81116e4 <xQueueGenericSend>
 8110302:	4603      	mov	r3, r0
 8110304:	2b01      	cmp	r3, #1
 8110306:	d002      	beq.n	811030e <osMutexRelease+0x70>
        stat = osErrorResource;
 8110308:	f06f 0302 	mvn.w	r3, #2
 811030c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 811030e:	697b      	ldr	r3, [r7, #20]
}
 8110310:	4618      	mov	r0, r3
 8110312:	3718      	adds	r7, #24
 8110314:	46bd      	mov	sp, r7
 8110316:	bd80      	pop	{r7, pc}

08110318 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8110318:	b580      	push	{r7, lr}
 811031a:	b08a      	sub	sp, #40	@ 0x28
 811031c:	af02      	add	r7, sp, #8
 811031e:	60f8      	str	r0, [r7, #12]
 8110320:	60b9      	str	r1, [r7, #8]
 8110322:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8110324:	2300      	movs	r3, #0
 8110326:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110328:	f3ef 8305 	mrs	r3, IPSR
 811032c:	613b      	str	r3, [r7, #16]
  return(result);
 811032e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8110330:	2b00      	cmp	r3, #0
 8110332:	d175      	bne.n	8110420 <osSemaphoreNew+0x108>
 8110334:	68fb      	ldr	r3, [r7, #12]
 8110336:	2b00      	cmp	r3, #0
 8110338:	d072      	beq.n	8110420 <osSemaphoreNew+0x108>
 811033a:	68ba      	ldr	r2, [r7, #8]
 811033c:	68fb      	ldr	r3, [r7, #12]
 811033e:	429a      	cmp	r2, r3
 8110340:	d86e      	bhi.n	8110420 <osSemaphoreNew+0x108>
    mem = -1;
 8110342:	f04f 33ff 	mov.w	r3, #4294967295
 8110346:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8110348:	687b      	ldr	r3, [r7, #4]
 811034a:	2b00      	cmp	r3, #0
 811034c:	d015      	beq.n	811037a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 811034e:	687b      	ldr	r3, [r7, #4]
 8110350:	689b      	ldr	r3, [r3, #8]
 8110352:	2b00      	cmp	r3, #0
 8110354:	d006      	beq.n	8110364 <osSemaphoreNew+0x4c>
 8110356:	687b      	ldr	r3, [r7, #4]
 8110358:	68db      	ldr	r3, [r3, #12]
 811035a:	2b4f      	cmp	r3, #79	@ 0x4f
 811035c:	d902      	bls.n	8110364 <osSemaphoreNew+0x4c>
        mem = 1;
 811035e:	2301      	movs	r3, #1
 8110360:	61bb      	str	r3, [r7, #24]
 8110362:	e00c      	b.n	811037e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8110364:	687b      	ldr	r3, [r7, #4]
 8110366:	689b      	ldr	r3, [r3, #8]
 8110368:	2b00      	cmp	r3, #0
 811036a:	d108      	bne.n	811037e <osSemaphoreNew+0x66>
 811036c:	687b      	ldr	r3, [r7, #4]
 811036e:	68db      	ldr	r3, [r3, #12]
 8110370:	2b00      	cmp	r3, #0
 8110372:	d104      	bne.n	811037e <osSemaphoreNew+0x66>
          mem = 0;
 8110374:	2300      	movs	r3, #0
 8110376:	61bb      	str	r3, [r7, #24]
 8110378:	e001      	b.n	811037e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 811037a:	2300      	movs	r3, #0
 811037c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 811037e:	69bb      	ldr	r3, [r7, #24]
 8110380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110384:	d04c      	beq.n	8110420 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8110386:	68fb      	ldr	r3, [r7, #12]
 8110388:	2b01      	cmp	r3, #1
 811038a:	d128      	bne.n	81103de <osSemaphoreNew+0xc6>
        if (mem == 1) {
 811038c:	69bb      	ldr	r3, [r7, #24]
 811038e:	2b01      	cmp	r3, #1
 8110390:	d10a      	bne.n	81103a8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8110392:	687b      	ldr	r3, [r7, #4]
 8110394:	689b      	ldr	r3, [r3, #8]
 8110396:	2203      	movs	r2, #3
 8110398:	9200      	str	r2, [sp, #0]
 811039a:	2200      	movs	r2, #0
 811039c:	2100      	movs	r1, #0
 811039e:	2001      	movs	r0, #1
 81103a0:	f000 ff9e 	bl	81112e0 <xQueueGenericCreateStatic>
 81103a4:	61f8      	str	r0, [r7, #28]
 81103a6:	e005      	b.n	81103b4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 81103a8:	2203      	movs	r2, #3
 81103aa:	2100      	movs	r1, #0
 81103ac:	2001      	movs	r0, #1
 81103ae:	f001 f814 	bl	81113da <xQueueGenericCreate>
 81103b2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 81103b4:	69fb      	ldr	r3, [r7, #28]
 81103b6:	2b00      	cmp	r3, #0
 81103b8:	d022      	beq.n	8110400 <osSemaphoreNew+0xe8>
 81103ba:	68bb      	ldr	r3, [r7, #8]
 81103bc:	2b00      	cmp	r3, #0
 81103be:	d01f      	beq.n	8110400 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 81103c0:	2300      	movs	r3, #0
 81103c2:	2200      	movs	r2, #0
 81103c4:	2100      	movs	r1, #0
 81103c6:	69f8      	ldr	r0, [r7, #28]
 81103c8:	f001 f98c 	bl	81116e4 <xQueueGenericSend>
 81103cc:	4603      	mov	r3, r0
 81103ce:	2b01      	cmp	r3, #1
 81103d0:	d016      	beq.n	8110400 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 81103d2:	69f8      	ldr	r0, [r7, #28]
 81103d4:	f001 fe2a 	bl	811202c <vQueueDelete>
            hSemaphore = NULL;
 81103d8:	2300      	movs	r3, #0
 81103da:	61fb      	str	r3, [r7, #28]
 81103dc:	e010      	b.n	8110400 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 81103de:	69bb      	ldr	r3, [r7, #24]
 81103e0:	2b01      	cmp	r3, #1
 81103e2:	d108      	bne.n	81103f6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 81103e4:	687b      	ldr	r3, [r7, #4]
 81103e6:	689b      	ldr	r3, [r3, #8]
 81103e8:	461a      	mov	r2, r3
 81103ea:	68b9      	ldr	r1, [r7, #8]
 81103ec:	68f8      	ldr	r0, [r7, #12]
 81103ee:	f001 f90b 	bl	8111608 <xQueueCreateCountingSemaphoreStatic>
 81103f2:	61f8      	str	r0, [r7, #28]
 81103f4:	e004      	b.n	8110400 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 81103f6:	68b9      	ldr	r1, [r7, #8]
 81103f8:	68f8      	ldr	r0, [r7, #12]
 81103fa:	f001 f93e 	bl	811167a <xQueueCreateCountingSemaphore>
 81103fe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8110400:	69fb      	ldr	r3, [r7, #28]
 8110402:	2b00      	cmp	r3, #0
 8110404:	d00c      	beq.n	8110420 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8110406:	687b      	ldr	r3, [r7, #4]
 8110408:	2b00      	cmp	r3, #0
 811040a:	d003      	beq.n	8110414 <osSemaphoreNew+0xfc>
          name = attr->name;
 811040c:	687b      	ldr	r3, [r7, #4]
 811040e:	681b      	ldr	r3, [r3, #0]
 8110410:	617b      	str	r3, [r7, #20]
 8110412:	e001      	b.n	8110418 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8110414:	2300      	movs	r3, #0
 8110416:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8110418:	6979      	ldr	r1, [r7, #20]
 811041a:	69f8      	ldr	r0, [r7, #28]
 811041c:	f001 ff52 	bl	81122c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8110420:	69fb      	ldr	r3, [r7, #28]
}
 8110422:	4618      	mov	r0, r3
 8110424:	3720      	adds	r7, #32
 8110426:	46bd      	mov	sp, r7
 8110428:	bd80      	pop	{r7, pc}
	...

0811042c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 811042c:	b580      	push	{r7, lr}
 811042e:	b086      	sub	sp, #24
 8110430:	af00      	add	r7, sp, #0
 8110432:	6078      	str	r0, [r7, #4]
 8110434:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8110436:	687b      	ldr	r3, [r7, #4]
 8110438:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 811043a:	2300      	movs	r3, #0
 811043c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 811043e:	693b      	ldr	r3, [r7, #16]
 8110440:	2b00      	cmp	r3, #0
 8110442:	d103      	bne.n	811044c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8110444:	f06f 0303 	mvn.w	r3, #3
 8110448:	617b      	str	r3, [r7, #20]
 811044a:	e039      	b.n	81104c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811044c:	f3ef 8305 	mrs	r3, IPSR
 8110450:	60fb      	str	r3, [r7, #12]
  return(result);
 8110452:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8110454:	2b00      	cmp	r3, #0
 8110456:	d022      	beq.n	811049e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8110458:	683b      	ldr	r3, [r7, #0]
 811045a:	2b00      	cmp	r3, #0
 811045c:	d003      	beq.n	8110466 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 811045e:	f06f 0303 	mvn.w	r3, #3
 8110462:	617b      	str	r3, [r7, #20]
 8110464:	e02c      	b.n	81104c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8110466:	2300      	movs	r3, #0
 8110468:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 811046a:	f107 0308 	add.w	r3, r7, #8
 811046e:	461a      	mov	r2, r3
 8110470:	2100      	movs	r1, #0
 8110472:	6938      	ldr	r0, [r7, #16]
 8110474:	f001 fd58 	bl	8111f28 <xQueueReceiveFromISR>
 8110478:	4603      	mov	r3, r0
 811047a:	2b01      	cmp	r3, #1
 811047c:	d003      	beq.n	8110486 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 811047e:	f06f 0302 	mvn.w	r3, #2
 8110482:	617b      	str	r3, [r7, #20]
 8110484:	e01c      	b.n	81104c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8110486:	68bb      	ldr	r3, [r7, #8]
 8110488:	2b00      	cmp	r3, #0
 811048a:	d019      	beq.n	81104c0 <osSemaphoreAcquire+0x94>
 811048c:	4b0f      	ldr	r3, [pc, #60]	@ (81104cc <osSemaphoreAcquire+0xa0>)
 811048e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110492:	601a      	str	r2, [r3, #0]
 8110494:	f3bf 8f4f 	dsb	sy
 8110498:	f3bf 8f6f 	isb	sy
 811049c:	e010      	b.n	81104c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 811049e:	6839      	ldr	r1, [r7, #0]
 81104a0:	6938      	ldr	r0, [r7, #16]
 81104a2:	f001 fc31 	bl	8111d08 <xQueueSemaphoreTake>
 81104a6:	4603      	mov	r3, r0
 81104a8:	2b01      	cmp	r3, #1
 81104aa:	d009      	beq.n	81104c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 81104ac:	683b      	ldr	r3, [r7, #0]
 81104ae:	2b00      	cmp	r3, #0
 81104b0:	d003      	beq.n	81104ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 81104b2:	f06f 0301 	mvn.w	r3, #1
 81104b6:	617b      	str	r3, [r7, #20]
 81104b8:	e002      	b.n	81104c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 81104ba:	f06f 0302 	mvn.w	r3, #2
 81104be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 81104c0:	697b      	ldr	r3, [r7, #20]
}
 81104c2:	4618      	mov	r0, r3
 81104c4:	3718      	adds	r7, #24
 81104c6:	46bd      	mov	sp, r7
 81104c8:	bd80      	pop	{r7, pc}
 81104ca:	bf00      	nop
 81104cc:	e000ed04 	.word	0xe000ed04

081104d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 81104d0:	b580      	push	{r7, lr}
 81104d2:	b086      	sub	sp, #24
 81104d4:	af00      	add	r7, sp, #0
 81104d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 81104d8:	687b      	ldr	r3, [r7, #4]
 81104da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 81104dc:	2300      	movs	r3, #0
 81104de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 81104e0:	693b      	ldr	r3, [r7, #16]
 81104e2:	2b00      	cmp	r3, #0
 81104e4:	d103      	bne.n	81104ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 81104e6:	f06f 0303 	mvn.w	r3, #3
 81104ea:	617b      	str	r3, [r7, #20]
 81104ec:	e02c      	b.n	8110548 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81104ee:	f3ef 8305 	mrs	r3, IPSR
 81104f2:	60fb      	str	r3, [r7, #12]
  return(result);
 81104f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 81104f6:	2b00      	cmp	r3, #0
 81104f8:	d01a      	beq.n	8110530 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 81104fa:	2300      	movs	r3, #0
 81104fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 81104fe:	f107 0308 	add.w	r3, r7, #8
 8110502:	4619      	mov	r1, r3
 8110504:	6938      	ldr	r0, [r7, #16]
 8110506:	f001 fa8d 	bl	8111a24 <xQueueGiveFromISR>
 811050a:	4603      	mov	r3, r0
 811050c:	2b01      	cmp	r3, #1
 811050e:	d003      	beq.n	8110518 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8110510:	f06f 0302 	mvn.w	r3, #2
 8110514:	617b      	str	r3, [r7, #20]
 8110516:	e017      	b.n	8110548 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8110518:	68bb      	ldr	r3, [r7, #8]
 811051a:	2b00      	cmp	r3, #0
 811051c:	d014      	beq.n	8110548 <osSemaphoreRelease+0x78>
 811051e:	4b0d      	ldr	r3, [pc, #52]	@ (8110554 <osSemaphoreRelease+0x84>)
 8110520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110524:	601a      	str	r2, [r3, #0]
 8110526:	f3bf 8f4f 	dsb	sy
 811052a:	f3bf 8f6f 	isb	sy
 811052e:	e00b      	b.n	8110548 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8110530:	2300      	movs	r3, #0
 8110532:	2200      	movs	r2, #0
 8110534:	2100      	movs	r1, #0
 8110536:	6938      	ldr	r0, [r7, #16]
 8110538:	f001 f8d4 	bl	81116e4 <xQueueGenericSend>
 811053c:	4603      	mov	r3, r0
 811053e:	2b01      	cmp	r3, #1
 8110540:	d002      	beq.n	8110548 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8110542:	f06f 0302 	mvn.w	r3, #2
 8110546:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8110548:	697b      	ldr	r3, [r7, #20]
}
 811054a:	4618      	mov	r0, r3
 811054c:	3718      	adds	r7, #24
 811054e:	46bd      	mov	sp, r7
 8110550:	bd80      	pop	{r7, pc}
 8110552:	bf00      	nop
 8110554:	e000ed04 	.word	0xe000ed04

08110558 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8110558:	b580      	push	{r7, lr}
 811055a:	b08a      	sub	sp, #40	@ 0x28
 811055c:	af02      	add	r7, sp, #8
 811055e:	60f8      	str	r0, [r7, #12]
 8110560:	60b9      	str	r1, [r7, #8]
 8110562:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8110564:	2300      	movs	r3, #0
 8110566:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110568:	f3ef 8305 	mrs	r3, IPSR
 811056c:	613b      	str	r3, [r7, #16]
  return(result);
 811056e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8110570:	2b00      	cmp	r3, #0
 8110572:	d15f      	bne.n	8110634 <osMessageQueueNew+0xdc>
 8110574:	68fb      	ldr	r3, [r7, #12]
 8110576:	2b00      	cmp	r3, #0
 8110578:	d05c      	beq.n	8110634 <osMessageQueueNew+0xdc>
 811057a:	68bb      	ldr	r3, [r7, #8]
 811057c:	2b00      	cmp	r3, #0
 811057e:	d059      	beq.n	8110634 <osMessageQueueNew+0xdc>
    mem = -1;
 8110580:	f04f 33ff 	mov.w	r3, #4294967295
 8110584:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8110586:	687b      	ldr	r3, [r7, #4]
 8110588:	2b00      	cmp	r3, #0
 811058a:	d029      	beq.n	81105e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 811058c:	687b      	ldr	r3, [r7, #4]
 811058e:	689b      	ldr	r3, [r3, #8]
 8110590:	2b00      	cmp	r3, #0
 8110592:	d012      	beq.n	81105ba <osMessageQueueNew+0x62>
 8110594:	687b      	ldr	r3, [r7, #4]
 8110596:	68db      	ldr	r3, [r3, #12]
 8110598:	2b4f      	cmp	r3, #79	@ 0x4f
 811059a:	d90e      	bls.n	81105ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 811059c:	687b      	ldr	r3, [r7, #4]
 811059e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81105a0:	2b00      	cmp	r3, #0
 81105a2:	d00a      	beq.n	81105ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81105a4:	687b      	ldr	r3, [r7, #4]
 81105a6:	695a      	ldr	r2, [r3, #20]
 81105a8:	68fb      	ldr	r3, [r7, #12]
 81105aa:	68b9      	ldr	r1, [r7, #8]
 81105ac:	fb01 f303 	mul.w	r3, r1, r3
 81105b0:	429a      	cmp	r2, r3
 81105b2:	d302      	bcc.n	81105ba <osMessageQueueNew+0x62>
        mem = 1;
 81105b4:	2301      	movs	r3, #1
 81105b6:	61bb      	str	r3, [r7, #24]
 81105b8:	e014      	b.n	81105e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81105ba:	687b      	ldr	r3, [r7, #4]
 81105bc:	689b      	ldr	r3, [r3, #8]
 81105be:	2b00      	cmp	r3, #0
 81105c0:	d110      	bne.n	81105e4 <osMessageQueueNew+0x8c>
 81105c2:	687b      	ldr	r3, [r7, #4]
 81105c4:	68db      	ldr	r3, [r3, #12]
 81105c6:	2b00      	cmp	r3, #0
 81105c8:	d10c      	bne.n	81105e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81105ca:	687b      	ldr	r3, [r7, #4]
 81105cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81105ce:	2b00      	cmp	r3, #0
 81105d0:	d108      	bne.n	81105e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81105d2:	687b      	ldr	r3, [r7, #4]
 81105d4:	695b      	ldr	r3, [r3, #20]
 81105d6:	2b00      	cmp	r3, #0
 81105d8:	d104      	bne.n	81105e4 <osMessageQueueNew+0x8c>
          mem = 0;
 81105da:	2300      	movs	r3, #0
 81105dc:	61bb      	str	r3, [r7, #24]
 81105de:	e001      	b.n	81105e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 81105e0:	2300      	movs	r3, #0
 81105e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81105e4:	69bb      	ldr	r3, [r7, #24]
 81105e6:	2b01      	cmp	r3, #1
 81105e8:	d10b      	bne.n	8110602 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 81105ea:	687b      	ldr	r3, [r7, #4]
 81105ec:	691a      	ldr	r2, [r3, #16]
 81105ee:	687b      	ldr	r3, [r7, #4]
 81105f0:	689b      	ldr	r3, [r3, #8]
 81105f2:	2100      	movs	r1, #0
 81105f4:	9100      	str	r1, [sp, #0]
 81105f6:	68b9      	ldr	r1, [r7, #8]
 81105f8:	68f8      	ldr	r0, [r7, #12]
 81105fa:	f000 fe71 	bl	81112e0 <xQueueGenericCreateStatic>
 81105fe:	61f8      	str	r0, [r7, #28]
 8110600:	e008      	b.n	8110614 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8110602:	69bb      	ldr	r3, [r7, #24]
 8110604:	2b00      	cmp	r3, #0
 8110606:	d105      	bne.n	8110614 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8110608:	2200      	movs	r2, #0
 811060a:	68b9      	ldr	r1, [r7, #8]
 811060c:	68f8      	ldr	r0, [r7, #12]
 811060e:	f000 fee4 	bl	81113da <xQueueGenericCreate>
 8110612:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8110614:	69fb      	ldr	r3, [r7, #28]
 8110616:	2b00      	cmp	r3, #0
 8110618:	d00c      	beq.n	8110634 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 811061a:	687b      	ldr	r3, [r7, #4]
 811061c:	2b00      	cmp	r3, #0
 811061e:	d003      	beq.n	8110628 <osMessageQueueNew+0xd0>
        name = attr->name;
 8110620:	687b      	ldr	r3, [r7, #4]
 8110622:	681b      	ldr	r3, [r3, #0]
 8110624:	617b      	str	r3, [r7, #20]
 8110626:	e001      	b.n	811062c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8110628:	2300      	movs	r3, #0
 811062a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 811062c:	6979      	ldr	r1, [r7, #20]
 811062e:	69f8      	ldr	r0, [r7, #28]
 8110630:	f001 fe48 	bl	81122c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8110634:	69fb      	ldr	r3, [r7, #28]
}
 8110636:	4618      	mov	r0, r3
 8110638:	3720      	adds	r7, #32
 811063a:	46bd      	mov	sp, r7
 811063c:	bd80      	pop	{r7, pc}
	...

08110640 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8110640:	b580      	push	{r7, lr}
 8110642:	b088      	sub	sp, #32
 8110644:	af00      	add	r7, sp, #0
 8110646:	60f8      	str	r0, [r7, #12]
 8110648:	60b9      	str	r1, [r7, #8]
 811064a:	603b      	str	r3, [r7, #0]
 811064c:	4613      	mov	r3, r2
 811064e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8110650:	68fb      	ldr	r3, [r7, #12]
 8110652:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8110654:	2300      	movs	r3, #0
 8110656:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110658:	f3ef 8305 	mrs	r3, IPSR
 811065c:	617b      	str	r3, [r7, #20]
  return(result);
 811065e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8110660:	2b00      	cmp	r3, #0
 8110662:	d028      	beq.n	81106b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8110664:	69bb      	ldr	r3, [r7, #24]
 8110666:	2b00      	cmp	r3, #0
 8110668:	d005      	beq.n	8110676 <osMessageQueuePut+0x36>
 811066a:	68bb      	ldr	r3, [r7, #8]
 811066c:	2b00      	cmp	r3, #0
 811066e:	d002      	beq.n	8110676 <osMessageQueuePut+0x36>
 8110670:	683b      	ldr	r3, [r7, #0]
 8110672:	2b00      	cmp	r3, #0
 8110674:	d003      	beq.n	811067e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8110676:	f06f 0303 	mvn.w	r3, #3
 811067a:	61fb      	str	r3, [r7, #28]
 811067c:	e038      	b.n	81106f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 811067e:	2300      	movs	r3, #0
 8110680:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8110682:	f107 0210 	add.w	r2, r7, #16
 8110686:	2300      	movs	r3, #0
 8110688:	68b9      	ldr	r1, [r7, #8]
 811068a:	69b8      	ldr	r0, [r7, #24]
 811068c:	f001 f92c 	bl	81118e8 <xQueueGenericSendFromISR>
 8110690:	4603      	mov	r3, r0
 8110692:	2b01      	cmp	r3, #1
 8110694:	d003      	beq.n	811069e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8110696:	f06f 0302 	mvn.w	r3, #2
 811069a:	61fb      	str	r3, [r7, #28]
 811069c:	e028      	b.n	81106f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 811069e:	693b      	ldr	r3, [r7, #16]
 81106a0:	2b00      	cmp	r3, #0
 81106a2:	d025      	beq.n	81106f0 <osMessageQueuePut+0xb0>
 81106a4:	4b15      	ldr	r3, [pc, #84]	@ (81106fc <osMessageQueuePut+0xbc>)
 81106a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81106aa:	601a      	str	r2, [r3, #0]
 81106ac:	f3bf 8f4f 	dsb	sy
 81106b0:	f3bf 8f6f 	isb	sy
 81106b4:	e01c      	b.n	81106f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81106b6:	69bb      	ldr	r3, [r7, #24]
 81106b8:	2b00      	cmp	r3, #0
 81106ba:	d002      	beq.n	81106c2 <osMessageQueuePut+0x82>
 81106bc:	68bb      	ldr	r3, [r7, #8]
 81106be:	2b00      	cmp	r3, #0
 81106c0:	d103      	bne.n	81106ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 81106c2:	f06f 0303 	mvn.w	r3, #3
 81106c6:	61fb      	str	r3, [r7, #28]
 81106c8:	e012      	b.n	81106f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81106ca:	2300      	movs	r3, #0
 81106cc:	683a      	ldr	r2, [r7, #0]
 81106ce:	68b9      	ldr	r1, [r7, #8]
 81106d0:	69b8      	ldr	r0, [r7, #24]
 81106d2:	f001 f807 	bl	81116e4 <xQueueGenericSend>
 81106d6:	4603      	mov	r3, r0
 81106d8:	2b01      	cmp	r3, #1
 81106da:	d009      	beq.n	81106f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 81106dc:	683b      	ldr	r3, [r7, #0]
 81106de:	2b00      	cmp	r3, #0
 81106e0:	d003      	beq.n	81106ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 81106e2:	f06f 0301 	mvn.w	r3, #1
 81106e6:	61fb      	str	r3, [r7, #28]
 81106e8:	e002      	b.n	81106f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 81106ea:	f06f 0302 	mvn.w	r3, #2
 81106ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81106f0:	69fb      	ldr	r3, [r7, #28]
}
 81106f2:	4618      	mov	r0, r3
 81106f4:	3720      	adds	r7, #32
 81106f6:	46bd      	mov	sp, r7
 81106f8:	bd80      	pop	{r7, pc}
 81106fa:	bf00      	nop
 81106fc:	e000ed04 	.word	0xe000ed04

08110700 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8110700:	b580      	push	{r7, lr}
 8110702:	b088      	sub	sp, #32
 8110704:	af00      	add	r7, sp, #0
 8110706:	60f8      	str	r0, [r7, #12]
 8110708:	60b9      	str	r1, [r7, #8]
 811070a:	607a      	str	r2, [r7, #4]
 811070c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 811070e:	68fb      	ldr	r3, [r7, #12]
 8110710:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8110712:	2300      	movs	r3, #0
 8110714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110716:	f3ef 8305 	mrs	r3, IPSR
 811071a:	617b      	str	r3, [r7, #20]
  return(result);
 811071c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 811071e:	2b00      	cmp	r3, #0
 8110720:	d028      	beq.n	8110774 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8110722:	69bb      	ldr	r3, [r7, #24]
 8110724:	2b00      	cmp	r3, #0
 8110726:	d005      	beq.n	8110734 <osMessageQueueGet+0x34>
 8110728:	68bb      	ldr	r3, [r7, #8]
 811072a:	2b00      	cmp	r3, #0
 811072c:	d002      	beq.n	8110734 <osMessageQueueGet+0x34>
 811072e:	683b      	ldr	r3, [r7, #0]
 8110730:	2b00      	cmp	r3, #0
 8110732:	d003      	beq.n	811073c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8110734:	f06f 0303 	mvn.w	r3, #3
 8110738:	61fb      	str	r3, [r7, #28]
 811073a:	e037      	b.n	81107ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 811073c:	2300      	movs	r3, #0
 811073e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8110740:	f107 0310 	add.w	r3, r7, #16
 8110744:	461a      	mov	r2, r3
 8110746:	68b9      	ldr	r1, [r7, #8]
 8110748:	69b8      	ldr	r0, [r7, #24]
 811074a:	f001 fbed 	bl	8111f28 <xQueueReceiveFromISR>
 811074e:	4603      	mov	r3, r0
 8110750:	2b01      	cmp	r3, #1
 8110752:	d003      	beq.n	811075c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8110754:	f06f 0302 	mvn.w	r3, #2
 8110758:	61fb      	str	r3, [r7, #28]
 811075a:	e027      	b.n	81107ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 811075c:	693b      	ldr	r3, [r7, #16]
 811075e:	2b00      	cmp	r3, #0
 8110760:	d024      	beq.n	81107ac <osMessageQueueGet+0xac>
 8110762:	4b15      	ldr	r3, [pc, #84]	@ (81107b8 <osMessageQueueGet+0xb8>)
 8110764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110768:	601a      	str	r2, [r3, #0]
 811076a:	f3bf 8f4f 	dsb	sy
 811076e:	f3bf 8f6f 	isb	sy
 8110772:	e01b      	b.n	81107ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8110774:	69bb      	ldr	r3, [r7, #24]
 8110776:	2b00      	cmp	r3, #0
 8110778:	d002      	beq.n	8110780 <osMessageQueueGet+0x80>
 811077a:	68bb      	ldr	r3, [r7, #8]
 811077c:	2b00      	cmp	r3, #0
 811077e:	d103      	bne.n	8110788 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8110780:	f06f 0303 	mvn.w	r3, #3
 8110784:	61fb      	str	r3, [r7, #28]
 8110786:	e011      	b.n	81107ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8110788:	683a      	ldr	r2, [r7, #0]
 811078a:	68b9      	ldr	r1, [r7, #8]
 811078c:	69b8      	ldr	r0, [r7, #24]
 811078e:	f001 f9d9 	bl	8111b44 <xQueueReceive>
 8110792:	4603      	mov	r3, r0
 8110794:	2b01      	cmp	r3, #1
 8110796:	d009      	beq.n	81107ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8110798:	683b      	ldr	r3, [r7, #0]
 811079a:	2b00      	cmp	r3, #0
 811079c:	d003      	beq.n	81107a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 811079e:	f06f 0301 	mvn.w	r3, #1
 81107a2:	61fb      	str	r3, [r7, #28]
 81107a4:	e002      	b.n	81107ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 81107a6:	f06f 0302 	mvn.w	r3, #2
 81107aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81107ac:	69fb      	ldr	r3, [r7, #28]
}
 81107ae:	4618      	mov	r0, r3
 81107b0:	3720      	adds	r7, #32
 81107b2:	46bd      	mov	sp, r7
 81107b4:	bd80      	pop	{r7, pc}
 81107b6:	bf00      	nop
 81107b8:	e000ed04 	.word	0xe000ed04

081107bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81107bc:	b480      	push	{r7}
 81107be:	b085      	sub	sp, #20
 81107c0:	af00      	add	r7, sp, #0
 81107c2:	60f8      	str	r0, [r7, #12]
 81107c4:	60b9      	str	r1, [r7, #8]
 81107c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81107c8:	68fb      	ldr	r3, [r7, #12]
 81107ca:	4a07      	ldr	r2, [pc, #28]	@ (81107e8 <vApplicationGetIdleTaskMemory+0x2c>)
 81107cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81107ce:	68bb      	ldr	r3, [r7, #8]
 81107d0:	4a06      	ldr	r2, [pc, #24]	@ (81107ec <vApplicationGetIdleTaskMemory+0x30>)
 81107d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81107d4:	687b      	ldr	r3, [r7, #4]
 81107d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81107da:	601a      	str	r2, [r3, #0]
}
 81107dc:	bf00      	nop
 81107de:	3714      	adds	r7, #20
 81107e0:	46bd      	mov	sp, r7
 81107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107e6:	4770      	bx	lr
 81107e8:	2400088c 	.word	0x2400088c
 81107ec:	24000934 	.word	0x24000934

081107f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81107f0:	b480      	push	{r7}
 81107f2:	b085      	sub	sp, #20
 81107f4:	af00      	add	r7, sp, #0
 81107f6:	60f8      	str	r0, [r7, #12]
 81107f8:	60b9      	str	r1, [r7, #8]
 81107fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81107fc:	68fb      	ldr	r3, [r7, #12]
 81107fe:	4a07      	ldr	r2, [pc, #28]	@ (811081c <vApplicationGetTimerTaskMemory+0x2c>)
 8110800:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8110802:	68bb      	ldr	r3, [r7, #8]
 8110804:	4a06      	ldr	r2, [pc, #24]	@ (8110820 <vApplicationGetTimerTaskMemory+0x30>)
 8110806:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8110808:	687b      	ldr	r3, [r7, #4]
 811080a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 811080e:	601a      	str	r2, [r3, #0]
}
 8110810:	bf00      	nop
 8110812:	3714      	adds	r7, #20
 8110814:	46bd      	mov	sp, r7
 8110816:	f85d 7b04 	ldr.w	r7, [sp], #4
 811081a:	4770      	bx	lr
 811081c:	24001134 	.word	0x24001134
 8110820:	240011dc 	.word	0x240011dc

08110824 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8110824:	b580      	push	{r7, lr}
 8110826:	b08a      	sub	sp, #40	@ 0x28
 8110828:	af00      	add	r7, sp, #0
 811082a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 811082c:	2300      	movs	r3, #0
 811082e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8110830:	f002 f834 	bl	811289c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8110834:	4b5c      	ldr	r3, [pc, #368]	@ (81109a8 <pvPortMalloc+0x184>)
 8110836:	681b      	ldr	r3, [r3, #0]
 8110838:	2b00      	cmp	r3, #0
 811083a:	d101      	bne.n	8110840 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 811083c:	f000 f924 	bl	8110a88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8110840:	4b5a      	ldr	r3, [pc, #360]	@ (81109ac <pvPortMalloc+0x188>)
 8110842:	681a      	ldr	r2, [r3, #0]
 8110844:	687b      	ldr	r3, [r7, #4]
 8110846:	4013      	ands	r3, r2
 8110848:	2b00      	cmp	r3, #0
 811084a:	f040 8095 	bne.w	8110978 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 811084e:	687b      	ldr	r3, [r7, #4]
 8110850:	2b00      	cmp	r3, #0
 8110852:	d01e      	beq.n	8110892 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8110854:	2208      	movs	r2, #8
 8110856:	687b      	ldr	r3, [r7, #4]
 8110858:	4413      	add	r3, r2
 811085a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 811085c:	687b      	ldr	r3, [r7, #4]
 811085e:	f003 0307 	and.w	r3, r3, #7
 8110862:	2b00      	cmp	r3, #0
 8110864:	d015      	beq.n	8110892 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8110866:	687b      	ldr	r3, [r7, #4]
 8110868:	f023 0307 	bic.w	r3, r3, #7
 811086c:	3308      	adds	r3, #8
 811086e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8110870:	687b      	ldr	r3, [r7, #4]
 8110872:	f003 0307 	and.w	r3, r3, #7
 8110876:	2b00      	cmp	r3, #0
 8110878:	d00b      	beq.n	8110892 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 811087a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811087e:	f383 8811 	msr	BASEPRI, r3
 8110882:	f3bf 8f6f 	isb	sy
 8110886:	f3bf 8f4f 	dsb	sy
 811088a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 811088c:	bf00      	nop
 811088e:	bf00      	nop
 8110890:	e7fd      	b.n	811088e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8110892:	687b      	ldr	r3, [r7, #4]
 8110894:	2b00      	cmp	r3, #0
 8110896:	d06f      	beq.n	8110978 <pvPortMalloc+0x154>
 8110898:	4b45      	ldr	r3, [pc, #276]	@ (81109b0 <pvPortMalloc+0x18c>)
 811089a:	681b      	ldr	r3, [r3, #0]
 811089c:	687a      	ldr	r2, [r7, #4]
 811089e:	429a      	cmp	r2, r3
 81108a0:	d86a      	bhi.n	8110978 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81108a2:	4b44      	ldr	r3, [pc, #272]	@ (81109b4 <pvPortMalloc+0x190>)
 81108a4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81108a6:	4b43      	ldr	r3, [pc, #268]	@ (81109b4 <pvPortMalloc+0x190>)
 81108a8:	681b      	ldr	r3, [r3, #0]
 81108aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81108ac:	e004      	b.n	81108b8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81108ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108b0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81108b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108b4:	681b      	ldr	r3, [r3, #0]
 81108b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81108b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108ba:	685b      	ldr	r3, [r3, #4]
 81108bc:	687a      	ldr	r2, [r7, #4]
 81108be:	429a      	cmp	r2, r3
 81108c0:	d903      	bls.n	81108ca <pvPortMalloc+0xa6>
 81108c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108c4:	681b      	ldr	r3, [r3, #0]
 81108c6:	2b00      	cmp	r3, #0
 81108c8:	d1f1      	bne.n	81108ae <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81108ca:	4b37      	ldr	r3, [pc, #220]	@ (81109a8 <pvPortMalloc+0x184>)
 81108cc:	681b      	ldr	r3, [r3, #0]
 81108ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81108d0:	429a      	cmp	r2, r3
 81108d2:	d051      	beq.n	8110978 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81108d4:	6a3b      	ldr	r3, [r7, #32]
 81108d6:	681b      	ldr	r3, [r3, #0]
 81108d8:	2208      	movs	r2, #8
 81108da:	4413      	add	r3, r2
 81108dc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81108de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108e0:	681a      	ldr	r2, [r3, #0]
 81108e2:	6a3b      	ldr	r3, [r7, #32]
 81108e4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81108e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108e8:	685a      	ldr	r2, [r3, #4]
 81108ea:	687b      	ldr	r3, [r7, #4]
 81108ec:	1ad2      	subs	r2, r2, r3
 81108ee:	2308      	movs	r3, #8
 81108f0:	005b      	lsls	r3, r3, #1
 81108f2:	429a      	cmp	r2, r3
 81108f4:	d920      	bls.n	8110938 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81108f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81108f8:	687b      	ldr	r3, [r7, #4]
 81108fa:	4413      	add	r3, r2
 81108fc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81108fe:	69bb      	ldr	r3, [r7, #24]
 8110900:	f003 0307 	and.w	r3, r3, #7
 8110904:	2b00      	cmp	r3, #0
 8110906:	d00b      	beq.n	8110920 <pvPortMalloc+0xfc>
	__asm volatile
 8110908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811090c:	f383 8811 	msr	BASEPRI, r3
 8110910:	f3bf 8f6f 	isb	sy
 8110914:	f3bf 8f4f 	dsb	sy
 8110918:	613b      	str	r3, [r7, #16]
}
 811091a:	bf00      	nop
 811091c:	bf00      	nop
 811091e:	e7fd      	b.n	811091c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8110920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110922:	685a      	ldr	r2, [r3, #4]
 8110924:	687b      	ldr	r3, [r7, #4]
 8110926:	1ad2      	subs	r2, r2, r3
 8110928:	69bb      	ldr	r3, [r7, #24]
 811092a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 811092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811092e:	687a      	ldr	r2, [r7, #4]
 8110930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8110932:	69b8      	ldr	r0, [r7, #24]
 8110934:	f000 f90a 	bl	8110b4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8110938:	4b1d      	ldr	r3, [pc, #116]	@ (81109b0 <pvPortMalloc+0x18c>)
 811093a:	681a      	ldr	r2, [r3, #0]
 811093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811093e:	685b      	ldr	r3, [r3, #4]
 8110940:	1ad3      	subs	r3, r2, r3
 8110942:	4a1b      	ldr	r2, [pc, #108]	@ (81109b0 <pvPortMalloc+0x18c>)
 8110944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8110946:	4b1a      	ldr	r3, [pc, #104]	@ (81109b0 <pvPortMalloc+0x18c>)
 8110948:	681a      	ldr	r2, [r3, #0]
 811094a:	4b1b      	ldr	r3, [pc, #108]	@ (81109b8 <pvPortMalloc+0x194>)
 811094c:	681b      	ldr	r3, [r3, #0]
 811094e:	429a      	cmp	r2, r3
 8110950:	d203      	bcs.n	811095a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8110952:	4b17      	ldr	r3, [pc, #92]	@ (81109b0 <pvPortMalloc+0x18c>)
 8110954:	681b      	ldr	r3, [r3, #0]
 8110956:	4a18      	ldr	r2, [pc, #96]	@ (81109b8 <pvPortMalloc+0x194>)
 8110958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 811095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811095c:	685a      	ldr	r2, [r3, #4]
 811095e:	4b13      	ldr	r3, [pc, #76]	@ (81109ac <pvPortMalloc+0x188>)
 8110960:	681b      	ldr	r3, [r3, #0]
 8110962:	431a      	orrs	r2, r3
 8110964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8110968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811096a:	2200      	movs	r2, #0
 811096c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 811096e:	4b13      	ldr	r3, [pc, #76]	@ (81109bc <pvPortMalloc+0x198>)
 8110970:	681b      	ldr	r3, [r3, #0]
 8110972:	3301      	adds	r3, #1
 8110974:	4a11      	ldr	r2, [pc, #68]	@ (81109bc <pvPortMalloc+0x198>)
 8110976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8110978:	f001 ff9e 	bl	81128b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 811097c:	69fb      	ldr	r3, [r7, #28]
 811097e:	f003 0307 	and.w	r3, r3, #7
 8110982:	2b00      	cmp	r3, #0
 8110984:	d00b      	beq.n	811099e <pvPortMalloc+0x17a>
	__asm volatile
 8110986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811098a:	f383 8811 	msr	BASEPRI, r3
 811098e:	f3bf 8f6f 	isb	sy
 8110992:	f3bf 8f4f 	dsb	sy
 8110996:	60fb      	str	r3, [r7, #12]
}
 8110998:	bf00      	nop
 811099a:	bf00      	nop
 811099c:	e7fd      	b.n	811099a <pvPortMalloc+0x176>
	return pvReturn;
 811099e:	69fb      	ldr	r3, [r7, #28]
}
 81109a0:	4618      	mov	r0, r3
 81109a2:	3728      	adds	r7, #40	@ 0x28
 81109a4:	46bd      	mov	sp, r7
 81109a6:	bd80      	pop	{r7, pc}
 81109a8:	240099e4 	.word	0x240099e4
 81109ac:	240099f8 	.word	0x240099f8
 81109b0:	240099e8 	.word	0x240099e8
 81109b4:	240099dc 	.word	0x240099dc
 81109b8:	240099ec 	.word	0x240099ec
 81109bc:	240099f0 	.word	0x240099f0

081109c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81109c0:	b580      	push	{r7, lr}
 81109c2:	b086      	sub	sp, #24
 81109c4:	af00      	add	r7, sp, #0
 81109c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81109c8:	687b      	ldr	r3, [r7, #4]
 81109ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81109cc:	687b      	ldr	r3, [r7, #4]
 81109ce:	2b00      	cmp	r3, #0
 81109d0:	d04f      	beq.n	8110a72 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81109d2:	2308      	movs	r3, #8
 81109d4:	425b      	negs	r3, r3
 81109d6:	697a      	ldr	r2, [r7, #20]
 81109d8:	4413      	add	r3, r2
 81109da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81109dc:	697b      	ldr	r3, [r7, #20]
 81109de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81109e0:	693b      	ldr	r3, [r7, #16]
 81109e2:	685a      	ldr	r2, [r3, #4]
 81109e4:	4b25      	ldr	r3, [pc, #148]	@ (8110a7c <vPortFree+0xbc>)
 81109e6:	681b      	ldr	r3, [r3, #0]
 81109e8:	4013      	ands	r3, r2
 81109ea:	2b00      	cmp	r3, #0
 81109ec:	d10b      	bne.n	8110a06 <vPortFree+0x46>
	__asm volatile
 81109ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81109f2:	f383 8811 	msr	BASEPRI, r3
 81109f6:	f3bf 8f6f 	isb	sy
 81109fa:	f3bf 8f4f 	dsb	sy
 81109fe:	60fb      	str	r3, [r7, #12]
}
 8110a00:	bf00      	nop
 8110a02:	bf00      	nop
 8110a04:	e7fd      	b.n	8110a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8110a06:	693b      	ldr	r3, [r7, #16]
 8110a08:	681b      	ldr	r3, [r3, #0]
 8110a0a:	2b00      	cmp	r3, #0
 8110a0c:	d00b      	beq.n	8110a26 <vPortFree+0x66>
	__asm volatile
 8110a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110a12:	f383 8811 	msr	BASEPRI, r3
 8110a16:	f3bf 8f6f 	isb	sy
 8110a1a:	f3bf 8f4f 	dsb	sy
 8110a1e:	60bb      	str	r3, [r7, #8]
}
 8110a20:	bf00      	nop
 8110a22:	bf00      	nop
 8110a24:	e7fd      	b.n	8110a22 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8110a26:	693b      	ldr	r3, [r7, #16]
 8110a28:	685a      	ldr	r2, [r3, #4]
 8110a2a:	4b14      	ldr	r3, [pc, #80]	@ (8110a7c <vPortFree+0xbc>)
 8110a2c:	681b      	ldr	r3, [r3, #0]
 8110a2e:	4013      	ands	r3, r2
 8110a30:	2b00      	cmp	r3, #0
 8110a32:	d01e      	beq.n	8110a72 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8110a34:	693b      	ldr	r3, [r7, #16]
 8110a36:	681b      	ldr	r3, [r3, #0]
 8110a38:	2b00      	cmp	r3, #0
 8110a3a:	d11a      	bne.n	8110a72 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8110a3c:	693b      	ldr	r3, [r7, #16]
 8110a3e:	685a      	ldr	r2, [r3, #4]
 8110a40:	4b0e      	ldr	r3, [pc, #56]	@ (8110a7c <vPortFree+0xbc>)
 8110a42:	681b      	ldr	r3, [r3, #0]
 8110a44:	43db      	mvns	r3, r3
 8110a46:	401a      	ands	r2, r3
 8110a48:	693b      	ldr	r3, [r7, #16]
 8110a4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8110a4c:	f001 ff26 	bl	811289c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8110a50:	693b      	ldr	r3, [r7, #16]
 8110a52:	685a      	ldr	r2, [r3, #4]
 8110a54:	4b0a      	ldr	r3, [pc, #40]	@ (8110a80 <vPortFree+0xc0>)
 8110a56:	681b      	ldr	r3, [r3, #0]
 8110a58:	4413      	add	r3, r2
 8110a5a:	4a09      	ldr	r2, [pc, #36]	@ (8110a80 <vPortFree+0xc0>)
 8110a5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8110a5e:	6938      	ldr	r0, [r7, #16]
 8110a60:	f000 f874 	bl	8110b4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8110a64:	4b07      	ldr	r3, [pc, #28]	@ (8110a84 <vPortFree+0xc4>)
 8110a66:	681b      	ldr	r3, [r3, #0]
 8110a68:	3301      	adds	r3, #1
 8110a6a:	4a06      	ldr	r2, [pc, #24]	@ (8110a84 <vPortFree+0xc4>)
 8110a6c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8110a6e:	f001 ff23 	bl	81128b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8110a72:	bf00      	nop
 8110a74:	3718      	adds	r7, #24
 8110a76:	46bd      	mov	sp, r7
 8110a78:	bd80      	pop	{r7, pc}
 8110a7a:	bf00      	nop
 8110a7c:	240099f8 	.word	0x240099f8
 8110a80:	240099e8 	.word	0x240099e8
 8110a84:	240099f4 	.word	0x240099f4

08110a88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8110a88:	b480      	push	{r7}
 8110a8a:	b085      	sub	sp, #20
 8110a8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8110a8e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8110a92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8110a94:	4b27      	ldr	r3, [pc, #156]	@ (8110b34 <prvHeapInit+0xac>)
 8110a96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8110a98:	68fb      	ldr	r3, [r7, #12]
 8110a9a:	f003 0307 	and.w	r3, r3, #7
 8110a9e:	2b00      	cmp	r3, #0
 8110aa0:	d00c      	beq.n	8110abc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8110aa2:	68fb      	ldr	r3, [r7, #12]
 8110aa4:	3307      	adds	r3, #7
 8110aa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8110aa8:	68fb      	ldr	r3, [r7, #12]
 8110aaa:	f023 0307 	bic.w	r3, r3, #7
 8110aae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8110ab0:	68ba      	ldr	r2, [r7, #8]
 8110ab2:	68fb      	ldr	r3, [r7, #12]
 8110ab4:	1ad3      	subs	r3, r2, r3
 8110ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8110b34 <prvHeapInit+0xac>)
 8110ab8:	4413      	add	r3, r2
 8110aba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8110abc:	68fb      	ldr	r3, [r7, #12]
 8110abe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8110ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8110b38 <prvHeapInit+0xb0>)
 8110ac2:	687b      	ldr	r3, [r7, #4]
 8110ac4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8110ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8110b38 <prvHeapInit+0xb0>)
 8110ac8:	2200      	movs	r2, #0
 8110aca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8110acc:	687b      	ldr	r3, [r7, #4]
 8110ace:	68ba      	ldr	r2, [r7, #8]
 8110ad0:	4413      	add	r3, r2
 8110ad2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8110ad4:	2208      	movs	r2, #8
 8110ad6:	68fb      	ldr	r3, [r7, #12]
 8110ad8:	1a9b      	subs	r3, r3, r2
 8110ada:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8110adc:	68fb      	ldr	r3, [r7, #12]
 8110ade:	f023 0307 	bic.w	r3, r3, #7
 8110ae2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8110ae4:	68fb      	ldr	r3, [r7, #12]
 8110ae6:	4a15      	ldr	r2, [pc, #84]	@ (8110b3c <prvHeapInit+0xb4>)
 8110ae8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8110aea:	4b14      	ldr	r3, [pc, #80]	@ (8110b3c <prvHeapInit+0xb4>)
 8110aec:	681b      	ldr	r3, [r3, #0]
 8110aee:	2200      	movs	r2, #0
 8110af0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8110af2:	4b12      	ldr	r3, [pc, #72]	@ (8110b3c <prvHeapInit+0xb4>)
 8110af4:	681b      	ldr	r3, [r3, #0]
 8110af6:	2200      	movs	r2, #0
 8110af8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8110afa:	687b      	ldr	r3, [r7, #4]
 8110afc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8110afe:	683b      	ldr	r3, [r7, #0]
 8110b00:	68fa      	ldr	r2, [r7, #12]
 8110b02:	1ad2      	subs	r2, r2, r3
 8110b04:	683b      	ldr	r3, [r7, #0]
 8110b06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8110b08:	4b0c      	ldr	r3, [pc, #48]	@ (8110b3c <prvHeapInit+0xb4>)
 8110b0a:	681a      	ldr	r2, [r3, #0]
 8110b0c:	683b      	ldr	r3, [r7, #0]
 8110b0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8110b10:	683b      	ldr	r3, [r7, #0]
 8110b12:	685b      	ldr	r3, [r3, #4]
 8110b14:	4a0a      	ldr	r2, [pc, #40]	@ (8110b40 <prvHeapInit+0xb8>)
 8110b16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8110b18:	683b      	ldr	r3, [r7, #0]
 8110b1a:	685b      	ldr	r3, [r3, #4]
 8110b1c:	4a09      	ldr	r2, [pc, #36]	@ (8110b44 <prvHeapInit+0xbc>)
 8110b1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8110b20:	4b09      	ldr	r3, [pc, #36]	@ (8110b48 <prvHeapInit+0xc0>)
 8110b22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8110b26:	601a      	str	r2, [r3, #0]
}
 8110b28:	bf00      	nop
 8110b2a:	3714      	adds	r7, #20
 8110b2c:	46bd      	mov	sp, r7
 8110b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b32:	4770      	bx	lr
 8110b34:	240021dc 	.word	0x240021dc
 8110b38:	240099dc 	.word	0x240099dc
 8110b3c:	240099e4 	.word	0x240099e4
 8110b40:	240099ec 	.word	0x240099ec
 8110b44:	240099e8 	.word	0x240099e8
 8110b48:	240099f8 	.word	0x240099f8

08110b4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8110b4c:	b480      	push	{r7}
 8110b4e:	b085      	sub	sp, #20
 8110b50:	af00      	add	r7, sp, #0
 8110b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8110b54:	4b28      	ldr	r3, [pc, #160]	@ (8110bf8 <prvInsertBlockIntoFreeList+0xac>)
 8110b56:	60fb      	str	r3, [r7, #12]
 8110b58:	e002      	b.n	8110b60 <prvInsertBlockIntoFreeList+0x14>
 8110b5a:	68fb      	ldr	r3, [r7, #12]
 8110b5c:	681b      	ldr	r3, [r3, #0]
 8110b5e:	60fb      	str	r3, [r7, #12]
 8110b60:	68fb      	ldr	r3, [r7, #12]
 8110b62:	681b      	ldr	r3, [r3, #0]
 8110b64:	687a      	ldr	r2, [r7, #4]
 8110b66:	429a      	cmp	r2, r3
 8110b68:	d8f7      	bhi.n	8110b5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8110b6a:	68fb      	ldr	r3, [r7, #12]
 8110b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8110b6e:	68fb      	ldr	r3, [r7, #12]
 8110b70:	685b      	ldr	r3, [r3, #4]
 8110b72:	68ba      	ldr	r2, [r7, #8]
 8110b74:	4413      	add	r3, r2
 8110b76:	687a      	ldr	r2, [r7, #4]
 8110b78:	429a      	cmp	r2, r3
 8110b7a:	d108      	bne.n	8110b8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8110b7c:	68fb      	ldr	r3, [r7, #12]
 8110b7e:	685a      	ldr	r2, [r3, #4]
 8110b80:	687b      	ldr	r3, [r7, #4]
 8110b82:	685b      	ldr	r3, [r3, #4]
 8110b84:	441a      	add	r2, r3
 8110b86:	68fb      	ldr	r3, [r7, #12]
 8110b88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8110b8a:	68fb      	ldr	r3, [r7, #12]
 8110b8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8110b8e:	687b      	ldr	r3, [r7, #4]
 8110b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8110b92:	687b      	ldr	r3, [r7, #4]
 8110b94:	685b      	ldr	r3, [r3, #4]
 8110b96:	68ba      	ldr	r2, [r7, #8]
 8110b98:	441a      	add	r2, r3
 8110b9a:	68fb      	ldr	r3, [r7, #12]
 8110b9c:	681b      	ldr	r3, [r3, #0]
 8110b9e:	429a      	cmp	r2, r3
 8110ba0:	d118      	bne.n	8110bd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8110ba2:	68fb      	ldr	r3, [r7, #12]
 8110ba4:	681a      	ldr	r2, [r3, #0]
 8110ba6:	4b15      	ldr	r3, [pc, #84]	@ (8110bfc <prvInsertBlockIntoFreeList+0xb0>)
 8110ba8:	681b      	ldr	r3, [r3, #0]
 8110baa:	429a      	cmp	r2, r3
 8110bac:	d00d      	beq.n	8110bca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8110bae:	687b      	ldr	r3, [r7, #4]
 8110bb0:	685a      	ldr	r2, [r3, #4]
 8110bb2:	68fb      	ldr	r3, [r7, #12]
 8110bb4:	681b      	ldr	r3, [r3, #0]
 8110bb6:	685b      	ldr	r3, [r3, #4]
 8110bb8:	441a      	add	r2, r3
 8110bba:	687b      	ldr	r3, [r7, #4]
 8110bbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8110bbe:	68fb      	ldr	r3, [r7, #12]
 8110bc0:	681b      	ldr	r3, [r3, #0]
 8110bc2:	681a      	ldr	r2, [r3, #0]
 8110bc4:	687b      	ldr	r3, [r7, #4]
 8110bc6:	601a      	str	r2, [r3, #0]
 8110bc8:	e008      	b.n	8110bdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8110bca:	4b0c      	ldr	r3, [pc, #48]	@ (8110bfc <prvInsertBlockIntoFreeList+0xb0>)
 8110bcc:	681a      	ldr	r2, [r3, #0]
 8110bce:	687b      	ldr	r3, [r7, #4]
 8110bd0:	601a      	str	r2, [r3, #0]
 8110bd2:	e003      	b.n	8110bdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8110bd4:	68fb      	ldr	r3, [r7, #12]
 8110bd6:	681a      	ldr	r2, [r3, #0]
 8110bd8:	687b      	ldr	r3, [r7, #4]
 8110bda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8110bdc:	68fa      	ldr	r2, [r7, #12]
 8110bde:	687b      	ldr	r3, [r7, #4]
 8110be0:	429a      	cmp	r2, r3
 8110be2:	d002      	beq.n	8110bea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8110be4:	68fb      	ldr	r3, [r7, #12]
 8110be6:	687a      	ldr	r2, [r7, #4]
 8110be8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8110bea:	bf00      	nop
 8110bec:	3714      	adds	r7, #20
 8110bee:	46bd      	mov	sp, r7
 8110bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bf4:	4770      	bx	lr
 8110bf6:	bf00      	nop
 8110bf8:	240099dc 	.word	0x240099dc
 8110bfc:	240099e4 	.word	0x240099e4

08110c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8110c00:	b480      	push	{r7}
 8110c02:	b083      	sub	sp, #12
 8110c04:	af00      	add	r7, sp, #0
 8110c06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8110c08:	687b      	ldr	r3, [r7, #4]
 8110c0a:	f103 0208 	add.w	r2, r3, #8
 8110c0e:	687b      	ldr	r3, [r7, #4]
 8110c10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8110c12:	687b      	ldr	r3, [r7, #4]
 8110c14:	f04f 32ff 	mov.w	r2, #4294967295
 8110c18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8110c1a:	687b      	ldr	r3, [r7, #4]
 8110c1c:	f103 0208 	add.w	r2, r3, #8
 8110c20:	687b      	ldr	r3, [r7, #4]
 8110c22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8110c24:	687b      	ldr	r3, [r7, #4]
 8110c26:	f103 0208 	add.w	r2, r3, #8
 8110c2a:	687b      	ldr	r3, [r7, #4]
 8110c2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8110c2e:	687b      	ldr	r3, [r7, #4]
 8110c30:	2200      	movs	r2, #0
 8110c32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8110c34:	bf00      	nop
 8110c36:	370c      	adds	r7, #12
 8110c38:	46bd      	mov	sp, r7
 8110c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c3e:	4770      	bx	lr

08110c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8110c40:	b480      	push	{r7}
 8110c42:	b083      	sub	sp, #12
 8110c44:	af00      	add	r7, sp, #0
 8110c46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8110c48:	687b      	ldr	r3, [r7, #4]
 8110c4a:	2200      	movs	r2, #0
 8110c4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8110c4e:	bf00      	nop
 8110c50:	370c      	adds	r7, #12
 8110c52:	46bd      	mov	sp, r7
 8110c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c58:	4770      	bx	lr

08110c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8110c5a:	b480      	push	{r7}
 8110c5c:	b085      	sub	sp, #20
 8110c5e:	af00      	add	r7, sp, #0
 8110c60:	6078      	str	r0, [r7, #4]
 8110c62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8110c64:	687b      	ldr	r3, [r7, #4]
 8110c66:	685b      	ldr	r3, [r3, #4]
 8110c68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8110c6a:	683b      	ldr	r3, [r7, #0]
 8110c6c:	68fa      	ldr	r2, [r7, #12]
 8110c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8110c70:	68fb      	ldr	r3, [r7, #12]
 8110c72:	689a      	ldr	r2, [r3, #8]
 8110c74:	683b      	ldr	r3, [r7, #0]
 8110c76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8110c78:	68fb      	ldr	r3, [r7, #12]
 8110c7a:	689b      	ldr	r3, [r3, #8]
 8110c7c:	683a      	ldr	r2, [r7, #0]
 8110c7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8110c80:	68fb      	ldr	r3, [r7, #12]
 8110c82:	683a      	ldr	r2, [r7, #0]
 8110c84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8110c86:	683b      	ldr	r3, [r7, #0]
 8110c88:	687a      	ldr	r2, [r7, #4]
 8110c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8110c8c:	687b      	ldr	r3, [r7, #4]
 8110c8e:	681b      	ldr	r3, [r3, #0]
 8110c90:	1c5a      	adds	r2, r3, #1
 8110c92:	687b      	ldr	r3, [r7, #4]
 8110c94:	601a      	str	r2, [r3, #0]
}
 8110c96:	bf00      	nop
 8110c98:	3714      	adds	r7, #20
 8110c9a:	46bd      	mov	sp, r7
 8110c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110ca0:	4770      	bx	lr

08110ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8110ca2:	b480      	push	{r7}
 8110ca4:	b085      	sub	sp, #20
 8110ca6:	af00      	add	r7, sp, #0
 8110ca8:	6078      	str	r0, [r7, #4]
 8110caa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8110cac:	683b      	ldr	r3, [r7, #0]
 8110cae:	681b      	ldr	r3, [r3, #0]
 8110cb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8110cb2:	68bb      	ldr	r3, [r7, #8]
 8110cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110cb8:	d103      	bne.n	8110cc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8110cba:	687b      	ldr	r3, [r7, #4]
 8110cbc:	691b      	ldr	r3, [r3, #16]
 8110cbe:	60fb      	str	r3, [r7, #12]
 8110cc0:	e00c      	b.n	8110cdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8110cc2:	687b      	ldr	r3, [r7, #4]
 8110cc4:	3308      	adds	r3, #8
 8110cc6:	60fb      	str	r3, [r7, #12]
 8110cc8:	e002      	b.n	8110cd0 <vListInsert+0x2e>
 8110cca:	68fb      	ldr	r3, [r7, #12]
 8110ccc:	685b      	ldr	r3, [r3, #4]
 8110cce:	60fb      	str	r3, [r7, #12]
 8110cd0:	68fb      	ldr	r3, [r7, #12]
 8110cd2:	685b      	ldr	r3, [r3, #4]
 8110cd4:	681b      	ldr	r3, [r3, #0]
 8110cd6:	68ba      	ldr	r2, [r7, #8]
 8110cd8:	429a      	cmp	r2, r3
 8110cda:	d2f6      	bcs.n	8110cca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8110cdc:	68fb      	ldr	r3, [r7, #12]
 8110cde:	685a      	ldr	r2, [r3, #4]
 8110ce0:	683b      	ldr	r3, [r7, #0]
 8110ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8110ce4:	683b      	ldr	r3, [r7, #0]
 8110ce6:	685b      	ldr	r3, [r3, #4]
 8110ce8:	683a      	ldr	r2, [r7, #0]
 8110cea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8110cec:	683b      	ldr	r3, [r7, #0]
 8110cee:	68fa      	ldr	r2, [r7, #12]
 8110cf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8110cf2:	68fb      	ldr	r3, [r7, #12]
 8110cf4:	683a      	ldr	r2, [r7, #0]
 8110cf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8110cf8:	683b      	ldr	r3, [r7, #0]
 8110cfa:	687a      	ldr	r2, [r7, #4]
 8110cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8110cfe:	687b      	ldr	r3, [r7, #4]
 8110d00:	681b      	ldr	r3, [r3, #0]
 8110d02:	1c5a      	adds	r2, r3, #1
 8110d04:	687b      	ldr	r3, [r7, #4]
 8110d06:	601a      	str	r2, [r3, #0]
}
 8110d08:	bf00      	nop
 8110d0a:	3714      	adds	r7, #20
 8110d0c:	46bd      	mov	sp, r7
 8110d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d12:	4770      	bx	lr

08110d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8110d14:	b480      	push	{r7}
 8110d16:	b085      	sub	sp, #20
 8110d18:	af00      	add	r7, sp, #0
 8110d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8110d1c:	687b      	ldr	r3, [r7, #4]
 8110d1e:	691b      	ldr	r3, [r3, #16]
 8110d20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8110d22:	687b      	ldr	r3, [r7, #4]
 8110d24:	685b      	ldr	r3, [r3, #4]
 8110d26:	687a      	ldr	r2, [r7, #4]
 8110d28:	6892      	ldr	r2, [r2, #8]
 8110d2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8110d2c:	687b      	ldr	r3, [r7, #4]
 8110d2e:	689b      	ldr	r3, [r3, #8]
 8110d30:	687a      	ldr	r2, [r7, #4]
 8110d32:	6852      	ldr	r2, [r2, #4]
 8110d34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8110d36:	68fb      	ldr	r3, [r7, #12]
 8110d38:	685b      	ldr	r3, [r3, #4]
 8110d3a:	687a      	ldr	r2, [r7, #4]
 8110d3c:	429a      	cmp	r2, r3
 8110d3e:	d103      	bne.n	8110d48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8110d40:	687b      	ldr	r3, [r7, #4]
 8110d42:	689a      	ldr	r2, [r3, #8]
 8110d44:	68fb      	ldr	r3, [r7, #12]
 8110d46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8110d48:	687b      	ldr	r3, [r7, #4]
 8110d4a:	2200      	movs	r2, #0
 8110d4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8110d4e:	68fb      	ldr	r3, [r7, #12]
 8110d50:	681b      	ldr	r3, [r3, #0]
 8110d52:	1e5a      	subs	r2, r3, #1
 8110d54:	68fb      	ldr	r3, [r7, #12]
 8110d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8110d58:	68fb      	ldr	r3, [r7, #12]
 8110d5a:	681b      	ldr	r3, [r3, #0]
}
 8110d5c:	4618      	mov	r0, r3
 8110d5e:	3714      	adds	r7, #20
 8110d60:	46bd      	mov	sp, r7
 8110d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d66:	4770      	bx	lr

08110d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8110d68:	b480      	push	{r7}
 8110d6a:	b085      	sub	sp, #20
 8110d6c:	af00      	add	r7, sp, #0
 8110d6e:	60f8      	str	r0, [r7, #12]
 8110d70:	60b9      	str	r1, [r7, #8]
 8110d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8110d74:	68fb      	ldr	r3, [r7, #12]
 8110d76:	3b04      	subs	r3, #4
 8110d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8110d7a:	68fb      	ldr	r3, [r7, #12]
 8110d7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8110d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8110d82:	68fb      	ldr	r3, [r7, #12]
 8110d84:	3b04      	subs	r3, #4
 8110d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8110d88:	68bb      	ldr	r3, [r7, #8]
 8110d8a:	f023 0201 	bic.w	r2, r3, #1
 8110d8e:	68fb      	ldr	r3, [r7, #12]
 8110d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8110d92:	68fb      	ldr	r3, [r7, #12]
 8110d94:	3b04      	subs	r3, #4
 8110d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8110d98:	4a0c      	ldr	r2, [pc, #48]	@ (8110dcc <pxPortInitialiseStack+0x64>)
 8110d9a:	68fb      	ldr	r3, [r7, #12]
 8110d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8110d9e:	68fb      	ldr	r3, [r7, #12]
 8110da0:	3b14      	subs	r3, #20
 8110da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8110da4:	687a      	ldr	r2, [r7, #4]
 8110da6:	68fb      	ldr	r3, [r7, #12]
 8110da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8110daa:	68fb      	ldr	r3, [r7, #12]
 8110dac:	3b04      	subs	r3, #4
 8110dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8110db0:	68fb      	ldr	r3, [r7, #12]
 8110db2:	f06f 0202 	mvn.w	r2, #2
 8110db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8110db8:	68fb      	ldr	r3, [r7, #12]
 8110dba:	3b20      	subs	r3, #32
 8110dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8110dbe:	68fb      	ldr	r3, [r7, #12]
}
 8110dc0:	4618      	mov	r0, r3
 8110dc2:	3714      	adds	r7, #20
 8110dc4:	46bd      	mov	sp, r7
 8110dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110dca:	4770      	bx	lr
 8110dcc:	08110dd1 	.word	0x08110dd1

08110dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8110dd0:	b480      	push	{r7}
 8110dd2:	b085      	sub	sp, #20
 8110dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8110dd6:	2300      	movs	r3, #0
 8110dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8110dda:	4b13      	ldr	r3, [pc, #76]	@ (8110e28 <prvTaskExitError+0x58>)
 8110ddc:	681b      	ldr	r3, [r3, #0]
 8110dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110de2:	d00b      	beq.n	8110dfc <prvTaskExitError+0x2c>
	__asm volatile
 8110de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110de8:	f383 8811 	msr	BASEPRI, r3
 8110dec:	f3bf 8f6f 	isb	sy
 8110df0:	f3bf 8f4f 	dsb	sy
 8110df4:	60fb      	str	r3, [r7, #12]
}
 8110df6:	bf00      	nop
 8110df8:	bf00      	nop
 8110dfa:	e7fd      	b.n	8110df8 <prvTaskExitError+0x28>
	__asm volatile
 8110dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110e00:	f383 8811 	msr	BASEPRI, r3
 8110e04:	f3bf 8f6f 	isb	sy
 8110e08:	f3bf 8f4f 	dsb	sy
 8110e0c:	60bb      	str	r3, [r7, #8]
}
 8110e0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8110e10:	bf00      	nop
 8110e12:	687b      	ldr	r3, [r7, #4]
 8110e14:	2b00      	cmp	r3, #0
 8110e16:	d0fc      	beq.n	8110e12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8110e18:	bf00      	nop
 8110e1a:	bf00      	nop
 8110e1c:	3714      	adds	r7, #20
 8110e1e:	46bd      	mov	sp, r7
 8110e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e24:	4770      	bx	lr
 8110e26:	bf00      	nop
 8110e28:	24000044 	.word	0x24000044
 8110e2c:	00000000 	.word	0x00000000

08110e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8110e30:	4b07      	ldr	r3, [pc, #28]	@ (8110e50 <pxCurrentTCBConst2>)
 8110e32:	6819      	ldr	r1, [r3, #0]
 8110e34:	6808      	ldr	r0, [r1, #0]
 8110e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110e3a:	f380 8809 	msr	PSP, r0
 8110e3e:	f3bf 8f6f 	isb	sy
 8110e42:	f04f 0000 	mov.w	r0, #0
 8110e46:	f380 8811 	msr	BASEPRI, r0
 8110e4a:	4770      	bx	lr
 8110e4c:	f3af 8000 	nop.w

08110e50 <pxCurrentTCBConst2>:
 8110e50:	24009a44 	.word	0x24009a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8110e54:	bf00      	nop
 8110e56:	bf00      	nop

08110e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8110e58:	4808      	ldr	r0, [pc, #32]	@ (8110e7c <prvPortStartFirstTask+0x24>)
 8110e5a:	6800      	ldr	r0, [r0, #0]
 8110e5c:	6800      	ldr	r0, [r0, #0]
 8110e5e:	f380 8808 	msr	MSP, r0
 8110e62:	f04f 0000 	mov.w	r0, #0
 8110e66:	f380 8814 	msr	CONTROL, r0
 8110e6a:	b662      	cpsie	i
 8110e6c:	b661      	cpsie	f
 8110e6e:	f3bf 8f4f 	dsb	sy
 8110e72:	f3bf 8f6f 	isb	sy
 8110e76:	df00      	svc	0
 8110e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8110e7a:	bf00      	nop
 8110e7c:	e000ed08 	.word	0xe000ed08

08110e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8110e80:	b580      	push	{r7, lr}
 8110e82:	b086      	sub	sp, #24
 8110e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8110e86:	4b47      	ldr	r3, [pc, #284]	@ (8110fa4 <xPortStartScheduler+0x124>)
 8110e88:	681b      	ldr	r3, [r3, #0]
 8110e8a:	4a47      	ldr	r2, [pc, #284]	@ (8110fa8 <xPortStartScheduler+0x128>)
 8110e8c:	4293      	cmp	r3, r2
 8110e8e:	d10b      	bne.n	8110ea8 <xPortStartScheduler+0x28>
	__asm volatile
 8110e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110e94:	f383 8811 	msr	BASEPRI, r3
 8110e98:	f3bf 8f6f 	isb	sy
 8110e9c:	f3bf 8f4f 	dsb	sy
 8110ea0:	613b      	str	r3, [r7, #16]
}
 8110ea2:	bf00      	nop
 8110ea4:	bf00      	nop
 8110ea6:	e7fd      	b.n	8110ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8110ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8110fa4 <xPortStartScheduler+0x124>)
 8110eaa:	681b      	ldr	r3, [r3, #0]
 8110eac:	4a3f      	ldr	r2, [pc, #252]	@ (8110fac <xPortStartScheduler+0x12c>)
 8110eae:	4293      	cmp	r3, r2
 8110eb0:	d10b      	bne.n	8110eca <xPortStartScheduler+0x4a>
	__asm volatile
 8110eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110eb6:	f383 8811 	msr	BASEPRI, r3
 8110eba:	f3bf 8f6f 	isb	sy
 8110ebe:	f3bf 8f4f 	dsb	sy
 8110ec2:	60fb      	str	r3, [r7, #12]
}
 8110ec4:	bf00      	nop
 8110ec6:	bf00      	nop
 8110ec8:	e7fd      	b.n	8110ec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8110eca:	4b39      	ldr	r3, [pc, #228]	@ (8110fb0 <xPortStartScheduler+0x130>)
 8110ecc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8110ece:	697b      	ldr	r3, [r7, #20]
 8110ed0:	781b      	ldrb	r3, [r3, #0]
 8110ed2:	b2db      	uxtb	r3, r3
 8110ed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8110ed6:	697b      	ldr	r3, [r7, #20]
 8110ed8:	22ff      	movs	r2, #255	@ 0xff
 8110eda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8110edc:	697b      	ldr	r3, [r7, #20]
 8110ede:	781b      	ldrb	r3, [r3, #0]
 8110ee0:	b2db      	uxtb	r3, r3
 8110ee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8110ee4:	78fb      	ldrb	r3, [r7, #3]
 8110ee6:	b2db      	uxtb	r3, r3
 8110ee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8110eec:	b2da      	uxtb	r2, r3
 8110eee:	4b31      	ldr	r3, [pc, #196]	@ (8110fb4 <xPortStartScheduler+0x134>)
 8110ef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8110ef2:	4b31      	ldr	r3, [pc, #196]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110ef4:	2207      	movs	r2, #7
 8110ef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8110ef8:	e009      	b.n	8110f0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8110efa:	4b2f      	ldr	r3, [pc, #188]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110efc:	681b      	ldr	r3, [r3, #0]
 8110efe:	3b01      	subs	r3, #1
 8110f00:	4a2d      	ldr	r2, [pc, #180]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110f02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8110f04:	78fb      	ldrb	r3, [r7, #3]
 8110f06:	b2db      	uxtb	r3, r3
 8110f08:	005b      	lsls	r3, r3, #1
 8110f0a:	b2db      	uxtb	r3, r3
 8110f0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8110f0e:	78fb      	ldrb	r3, [r7, #3]
 8110f10:	b2db      	uxtb	r3, r3
 8110f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8110f16:	2b80      	cmp	r3, #128	@ 0x80
 8110f18:	d0ef      	beq.n	8110efa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8110f1a:	4b27      	ldr	r3, [pc, #156]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110f1c:	681b      	ldr	r3, [r3, #0]
 8110f1e:	f1c3 0307 	rsb	r3, r3, #7
 8110f22:	2b04      	cmp	r3, #4
 8110f24:	d00b      	beq.n	8110f3e <xPortStartScheduler+0xbe>
	__asm volatile
 8110f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110f2a:	f383 8811 	msr	BASEPRI, r3
 8110f2e:	f3bf 8f6f 	isb	sy
 8110f32:	f3bf 8f4f 	dsb	sy
 8110f36:	60bb      	str	r3, [r7, #8]
}
 8110f38:	bf00      	nop
 8110f3a:	bf00      	nop
 8110f3c:	e7fd      	b.n	8110f3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8110f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110f40:	681b      	ldr	r3, [r3, #0]
 8110f42:	021b      	lsls	r3, r3, #8
 8110f44:	4a1c      	ldr	r2, [pc, #112]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110f46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8110f48:	4b1b      	ldr	r3, [pc, #108]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110f4a:	681b      	ldr	r3, [r3, #0]
 8110f4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8110f50:	4a19      	ldr	r2, [pc, #100]	@ (8110fb8 <xPortStartScheduler+0x138>)
 8110f52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8110f54:	687b      	ldr	r3, [r7, #4]
 8110f56:	b2da      	uxtb	r2, r3
 8110f58:	697b      	ldr	r3, [r7, #20]
 8110f5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8110f5c:	4b17      	ldr	r3, [pc, #92]	@ (8110fbc <xPortStartScheduler+0x13c>)
 8110f5e:	681b      	ldr	r3, [r3, #0]
 8110f60:	4a16      	ldr	r2, [pc, #88]	@ (8110fbc <xPortStartScheduler+0x13c>)
 8110f62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8110f66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8110f68:	4b14      	ldr	r3, [pc, #80]	@ (8110fbc <xPortStartScheduler+0x13c>)
 8110f6a:	681b      	ldr	r3, [r3, #0]
 8110f6c:	4a13      	ldr	r2, [pc, #76]	@ (8110fbc <xPortStartScheduler+0x13c>)
 8110f6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8110f72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8110f74:	f000 f8da 	bl	811112c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8110f78:	4b11      	ldr	r3, [pc, #68]	@ (8110fc0 <xPortStartScheduler+0x140>)
 8110f7a:	2200      	movs	r2, #0
 8110f7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8110f7e:	f000 f8f9 	bl	8111174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8110f82:	4b10      	ldr	r3, [pc, #64]	@ (8110fc4 <xPortStartScheduler+0x144>)
 8110f84:	681b      	ldr	r3, [r3, #0]
 8110f86:	4a0f      	ldr	r2, [pc, #60]	@ (8110fc4 <xPortStartScheduler+0x144>)
 8110f88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8110f8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8110f8e:	f7ff ff63 	bl	8110e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8110f92:	f001 fe0b 	bl	8112bac <vTaskSwitchContext>
	prvTaskExitError();
 8110f96:	f7ff ff1b 	bl	8110dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8110f9a:	2300      	movs	r3, #0
}
 8110f9c:	4618      	mov	r0, r3
 8110f9e:	3718      	adds	r7, #24
 8110fa0:	46bd      	mov	sp, r7
 8110fa2:	bd80      	pop	{r7, pc}
 8110fa4:	e000ed00 	.word	0xe000ed00
 8110fa8:	410fc271 	.word	0x410fc271
 8110fac:	410fc270 	.word	0x410fc270
 8110fb0:	e000e400 	.word	0xe000e400
 8110fb4:	240099fc 	.word	0x240099fc
 8110fb8:	24009a00 	.word	0x24009a00
 8110fbc:	e000ed20 	.word	0xe000ed20
 8110fc0:	24000044 	.word	0x24000044
 8110fc4:	e000ef34 	.word	0xe000ef34

08110fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8110fc8:	b480      	push	{r7}
 8110fca:	b083      	sub	sp, #12
 8110fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8110fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110fd2:	f383 8811 	msr	BASEPRI, r3
 8110fd6:	f3bf 8f6f 	isb	sy
 8110fda:	f3bf 8f4f 	dsb	sy
 8110fde:	607b      	str	r3, [r7, #4]
}
 8110fe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8110fe2:	4b10      	ldr	r3, [pc, #64]	@ (8111024 <vPortEnterCritical+0x5c>)
 8110fe4:	681b      	ldr	r3, [r3, #0]
 8110fe6:	3301      	adds	r3, #1
 8110fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8111024 <vPortEnterCritical+0x5c>)
 8110fea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8110fec:	4b0d      	ldr	r3, [pc, #52]	@ (8111024 <vPortEnterCritical+0x5c>)
 8110fee:	681b      	ldr	r3, [r3, #0]
 8110ff0:	2b01      	cmp	r3, #1
 8110ff2:	d110      	bne.n	8111016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8110ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8111028 <vPortEnterCritical+0x60>)
 8110ff6:	681b      	ldr	r3, [r3, #0]
 8110ff8:	b2db      	uxtb	r3, r3
 8110ffa:	2b00      	cmp	r3, #0
 8110ffc:	d00b      	beq.n	8111016 <vPortEnterCritical+0x4e>
	__asm volatile
 8110ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111002:	f383 8811 	msr	BASEPRI, r3
 8111006:	f3bf 8f6f 	isb	sy
 811100a:	f3bf 8f4f 	dsb	sy
 811100e:	603b      	str	r3, [r7, #0]
}
 8111010:	bf00      	nop
 8111012:	bf00      	nop
 8111014:	e7fd      	b.n	8111012 <vPortEnterCritical+0x4a>
	}
}
 8111016:	bf00      	nop
 8111018:	370c      	adds	r7, #12
 811101a:	46bd      	mov	sp, r7
 811101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111020:	4770      	bx	lr
 8111022:	bf00      	nop
 8111024:	24000044 	.word	0x24000044
 8111028:	e000ed04 	.word	0xe000ed04

0811102c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 811102c:	b480      	push	{r7}
 811102e:	b083      	sub	sp, #12
 8111030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8111032:	4b12      	ldr	r3, [pc, #72]	@ (811107c <vPortExitCritical+0x50>)
 8111034:	681b      	ldr	r3, [r3, #0]
 8111036:	2b00      	cmp	r3, #0
 8111038:	d10b      	bne.n	8111052 <vPortExitCritical+0x26>
	__asm volatile
 811103a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811103e:	f383 8811 	msr	BASEPRI, r3
 8111042:	f3bf 8f6f 	isb	sy
 8111046:	f3bf 8f4f 	dsb	sy
 811104a:	607b      	str	r3, [r7, #4]
}
 811104c:	bf00      	nop
 811104e:	bf00      	nop
 8111050:	e7fd      	b.n	811104e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8111052:	4b0a      	ldr	r3, [pc, #40]	@ (811107c <vPortExitCritical+0x50>)
 8111054:	681b      	ldr	r3, [r3, #0]
 8111056:	3b01      	subs	r3, #1
 8111058:	4a08      	ldr	r2, [pc, #32]	@ (811107c <vPortExitCritical+0x50>)
 811105a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 811105c:	4b07      	ldr	r3, [pc, #28]	@ (811107c <vPortExitCritical+0x50>)
 811105e:	681b      	ldr	r3, [r3, #0]
 8111060:	2b00      	cmp	r3, #0
 8111062:	d105      	bne.n	8111070 <vPortExitCritical+0x44>
 8111064:	2300      	movs	r3, #0
 8111066:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8111068:	683b      	ldr	r3, [r7, #0]
 811106a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 811106e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8111070:	bf00      	nop
 8111072:	370c      	adds	r7, #12
 8111074:	46bd      	mov	sp, r7
 8111076:	f85d 7b04 	ldr.w	r7, [sp], #4
 811107a:	4770      	bx	lr
 811107c:	24000044 	.word	0x24000044

08111080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8111080:	f3ef 8009 	mrs	r0, PSP
 8111084:	f3bf 8f6f 	isb	sy
 8111088:	4b15      	ldr	r3, [pc, #84]	@ (81110e0 <pxCurrentTCBConst>)
 811108a:	681a      	ldr	r2, [r3, #0]
 811108c:	f01e 0f10 	tst.w	lr, #16
 8111090:	bf08      	it	eq
 8111092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8111096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811109a:	6010      	str	r0, [r2, #0]
 811109c:	e92d 0009 	stmdb	sp!, {r0, r3}
 81110a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81110a4:	f380 8811 	msr	BASEPRI, r0
 81110a8:	f3bf 8f4f 	dsb	sy
 81110ac:	f3bf 8f6f 	isb	sy
 81110b0:	f001 fd7c 	bl	8112bac <vTaskSwitchContext>
 81110b4:	f04f 0000 	mov.w	r0, #0
 81110b8:	f380 8811 	msr	BASEPRI, r0
 81110bc:	bc09      	pop	{r0, r3}
 81110be:	6819      	ldr	r1, [r3, #0]
 81110c0:	6808      	ldr	r0, [r1, #0]
 81110c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81110c6:	f01e 0f10 	tst.w	lr, #16
 81110ca:	bf08      	it	eq
 81110cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81110d0:	f380 8809 	msr	PSP, r0
 81110d4:	f3bf 8f6f 	isb	sy
 81110d8:	4770      	bx	lr
 81110da:	bf00      	nop
 81110dc:	f3af 8000 	nop.w

081110e0 <pxCurrentTCBConst>:
 81110e0:	24009a44 	.word	0x24009a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81110e4:	bf00      	nop
 81110e6:	bf00      	nop

081110e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81110e8:	b580      	push	{r7, lr}
 81110ea:	b082      	sub	sp, #8
 81110ec:	af00      	add	r7, sp, #0
	__asm volatile
 81110ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81110f2:	f383 8811 	msr	BASEPRI, r3
 81110f6:	f3bf 8f6f 	isb	sy
 81110fa:	f3bf 8f4f 	dsb	sy
 81110fe:	607b      	str	r3, [r7, #4]
}
 8111100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8111102:	f001 fc99 	bl	8112a38 <xTaskIncrementTick>
 8111106:	4603      	mov	r3, r0
 8111108:	2b00      	cmp	r3, #0
 811110a:	d003      	beq.n	8111114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 811110c:	4b06      	ldr	r3, [pc, #24]	@ (8111128 <xPortSysTickHandler+0x40>)
 811110e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111112:	601a      	str	r2, [r3, #0]
 8111114:	2300      	movs	r3, #0
 8111116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8111118:	683b      	ldr	r3, [r7, #0]
 811111a:	f383 8811 	msr	BASEPRI, r3
}
 811111e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8111120:	bf00      	nop
 8111122:	3708      	adds	r7, #8
 8111124:	46bd      	mov	sp, r7
 8111126:	bd80      	pop	{r7, pc}
 8111128:	e000ed04 	.word	0xe000ed04

0811112c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 811112c:	b480      	push	{r7}
 811112e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8111130:	4b0b      	ldr	r3, [pc, #44]	@ (8111160 <vPortSetupTimerInterrupt+0x34>)
 8111132:	2200      	movs	r2, #0
 8111134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8111136:	4b0b      	ldr	r3, [pc, #44]	@ (8111164 <vPortSetupTimerInterrupt+0x38>)
 8111138:	2200      	movs	r2, #0
 811113a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 811113c:	4b0a      	ldr	r3, [pc, #40]	@ (8111168 <vPortSetupTimerInterrupt+0x3c>)
 811113e:	681b      	ldr	r3, [r3, #0]
 8111140:	4a0a      	ldr	r2, [pc, #40]	@ (811116c <vPortSetupTimerInterrupt+0x40>)
 8111142:	fba2 2303 	umull	r2, r3, r2, r3
 8111146:	099b      	lsrs	r3, r3, #6
 8111148:	4a09      	ldr	r2, [pc, #36]	@ (8111170 <vPortSetupTimerInterrupt+0x44>)
 811114a:	3b01      	subs	r3, #1
 811114c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 811114e:	4b04      	ldr	r3, [pc, #16]	@ (8111160 <vPortSetupTimerInterrupt+0x34>)
 8111150:	2207      	movs	r2, #7
 8111152:	601a      	str	r2, [r3, #0]
}
 8111154:	bf00      	nop
 8111156:	46bd      	mov	sp, r7
 8111158:	f85d 7b04 	ldr.w	r7, [sp], #4
 811115c:	4770      	bx	lr
 811115e:	bf00      	nop
 8111160:	e000e010 	.word	0xe000e010
 8111164:	e000e018 	.word	0xe000e018
 8111168:	24000000 	.word	0x24000000
 811116c:	10624dd3 	.word	0x10624dd3
 8111170:	e000e014 	.word	0xe000e014

08111174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8111174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8111184 <vPortEnableVFP+0x10>
 8111178:	6801      	ldr	r1, [r0, #0]
 811117a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 811117e:	6001      	str	r1, [r0, #0]
 8111180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8111182:	bf00      	nop
 8111184:	e000ed88 	.word	0xe000ed88

08111188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8111188:	b480      	push	{r7}
 811118a:	b085      	sub	sp, #20
 811118c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 811118e:	f3ef 8305 	mrs	r3, IPSR
 8111192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8111194:	68fb      	ldr	r3, [r7, #12]
 8111196:	2b0f      	cmp	r3, #15
 8111198:	d915      	bls.n	81111c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 811119a:	4a18      	ldr	r2, [pc, #96]	@ (81111fc <vPortValidateInterruptPriority+0x74>)
 811119c:	68fb      	ldr	r3, [r7, #12]
 811119e:	4413      	add	r3, r2
 81111a0:	781b      	ldrb	r3, [r3, #0]
 81111a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81111a4:	4b16      	ldr	r3, [pc, #88]	@ (8111200 <vPortValidateInterruptPriority+0x78>)
 81111a6:	781b      	ldrb	r3, [r3, #0]
 81111a8:	7afa      	ldrb	r2, [r7, #11]
 81111aa:	429a      	cmp	r2, r3
 81111ac:	d20b      	bcs.n	81111c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81111ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81111b2:	f383 8811 	msr	BASEPRI, r3
 81111b6:	f3bf 8f6f 	isb	sy
 81111ba:	f3bf 8f4f 	dsb	sy
 81111be:	607b      	str	r3, [r7, #4]
}
 81111c0:	bf00      	nop
 81111c2:	bf00      	nop
 81111c4:	e7fd      	b.n	81111c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81111c6:	4b0f      	ldr	r3, [pc, #60]	@ (8111204 <vPortValidateInterruptPriority+0x7c>)
 81111c8:	681b      	ldr	r3, [r3, #0]
 81111ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 81111ce:	4b0e      	ldr	r3, [pc, #56]	@ (8111208 <vPortValidateInterruptPriority+0x80>)
 81111d0:	681b      	ldr	r3, [r3, #0]
 81111d2:	429a      	cmp	r2, r3
 81111d4:	d90b      	bls.n	81111ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 81111d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81111da:	f383 8811 	msr	BASEPRI, r3
 81111de:	f3bf 8f6f 	isb	sy
 81111e2:	f3bf 8f4f 	dsb	sy
 81111e6:	603b      	str	r3, [r7, #0]
}
 81111e8:	bf00      	nop
 81111ea:	bf00      	nop
 81111ec:	e7fd      	b.n	81111ea <vPortValidateInterruptPriority+0x62>
	}
 81111ee:	bf00      	nop
 81111f0:	3714      	adds	r7, #20
 81111f2:	46bd      	mov	sp, r7
 81111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81111f8:	4770      	bx	lr
 81111fa:	bf00      	nop
 81111fc:	e000e3f0 	.word	0xe000e3f0
 8111200:	240099fc 	.word	0x240099fc
 8111204:	e000ed0c 	.word	0xe000ed0c
 8111208:	24009a00 	.word	0x24009a00

0811120c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 811120c:	b580      	push	{r7, lr}
 811120e:	b084      	sub	sp, #16
 8111210:	af00      	add	r7, sp, #0
 8111212:	6078      	str	r0, [r7, #4]
 8111214:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8111216:	687b      	ldr	r3, [r7, #4]
 8111218:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 811121a:	68fb      	ldr	r3, [r7, #12]
 811121c:	2b00      	cmp	r3, #0
 811121e:	d10b      	bne.n	8111238 <xQueueGenericReset+0x2c>
	__asm volatile
 8111220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111224:	f383 8811 	msr	BASEPRI, r3
 8111228:	f3bf 8f6f 	isb	sy
 811122c:	f3bf 8f4f 	dsb	sy
 8111230:	60bb      	str	r3, [r7, #8]
}
 8111232:	bf00      	nop
 8111234:	bf00      	nop
 8111236:	e7fd      	b.n	8111234 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8111238:	f7ff fec6 	bl	8110fc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 811123c:	68fb      	ldr	r3, [r7, #12]
 811123e:	681a      	ldr	r2, [r3, #0]
 8111240:	68fb      	ldr	r3, [r7, #12]
 8111242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111244:	68f9      	ldr	r1, [r7, #12]
 8111246:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8111248:	fb01 f303 	mul.w	r3, r1, r3
 811124c:	441a      	add	r2, r3
 811124e:	68fb      	ldr	r3, [r7, #12]
 8111250:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8111252:	68fb      	ldr	r3, [r7, #12]
 8111254:	2200      	movs	r2, #0
 8111256:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8111258:	68fb      	ldr	r3, [r7, #12]
 811125a:	681a      	ldr	r2, [r3, #0]
 811125c:	68fb      	ldr	r3, [r7, #12]
 811125e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8111260:	68fb      	ldr	r3, [r7, #12]
 8111262:	681a      	ldr	r2, [r3, #0]
 8111264:	68fb      	ldr	r3, [r7, #12]
 8111266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111268:	3b01      	subs	r3, #1
 811126a:	68f9      	ldr	r1, [r7, #12]
 811126c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 811126e:	fb01 f303 	mul.w	r3, r1, r3
 8111272:	441a      	add	r2, r3
 8111274:	68fb      	ldr	r3, [r7, #12]
 8111276:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8111278:	68fb      	ldr	r3, [r7, #12]
 811127a:	22ff      	movs	r2, #255	@ 0xff
 811127c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8111280:	68fb      	ldr	r3, [r7, #12]
 8111282:	22ff      	movs	r2, #255	@ 0xff
 8111284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8111288:	683b      	ldr	r3, [r7, #0]
 811128a:	2b00      	cmp	r3, #0
 811128c:	d114      	bne.n	81112b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 811128e:	68fb      	ldr	r3, [r7, #12]
 8111290:	691b      	ldr	r3, [r3, #16]
 8111292:	2b00      	cmp	r3, #0
 8111294:	d01a      	beq.n	81112cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111296:	68fb      	ldr	r3, [r7, #12]
 8111298:	3310      	adds	r3, #16
 811129a:	4618      	mov	r0, r3
 811129c:	f001 fd3e 	bl	8112d1c <xTaskRemoveFromEventList>
 81112a0:	4603      	mov	r3, r0
 81112a2:	2b00      	cmp	r3, #0
 81112a4:	d012      	beq.n	81112cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81112a6:	4b0d      	ldr	r3, [pc, #52]	@ (81112dc <xQueueGenericReset+0xd0>)
 81112a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81112ac:	601a      	str	r2, [r3, #0]
 81112ae:	f3bf 8f4f 	dsb	sy
 81112b2:	f3bf 8f6f 	isb	sy
 81112b6:	e009      	b.n	81112cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81112b8:	68fb      	ldr	r3, [r7, #12]
 81112ba:	3310      	adds	r3, #16
 81112bc:	4618      	mov	r0, r3
 81112be:	f7ff fc9f 	bl	8110c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 81112c2:	68fb      	ldr	r3, [r7, #12]
 81112c4:	3324      	adds	r3, #36	@ 0x24
 81112c6:	4618      	mov	r0, r3
 81112c8:	f7ff fc9a 	bl	8110c00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81112cc:	f7ff feae 	bl	811102c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 81112d0:	2301      	movs	r3, #1
}
 81112d2:	4618      	mov	r0, r3
 81112d4:	3710      	adds	r7, #16
 81112d6:	46bd      	mov	sp, r7
 81112d8:	bd80      	pop	{r7, pc}
 81112da:	bf00      	nop
 81112dc:	e000ed04 	.word	0xe000ed04

081112e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 81112e0:	b580      	push	{r7, lr}
 81112e2:	b08e      	sub	sp, #56	@ 0x38
 81112e4:	af02      	add	r7, sp, #8
 81112e6:	60f8      	str	r0, [r7, #12]
 81112e8:	60b9      	str	r1, [r7, #8]
 81112ea:	607a      	str	r2, [r7, #4]
 81112ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81112ee:	68fb      	ldr	r3, [r7, #12]
 81112f0:	2b00      	cmp	r3, #0
 81112f2:	d10b      	bne.n	811130c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 81112f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81112f8:	f383 8811 	msr	BASEPRI, r3
 81112fc:	f3bf 8f6f 	isb	sy
 8111300:	f3bf 8f4f 	dsb	sy
 8111304:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8111306:	bf00      	nop
 8111308:	bf00      	nop
 811130a:	e7fd      	b.n	8111308 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 811130c:	683b      	ldr	r3, [r7, #0]
 811130e:	2b00      	cmp	r3, #0
 8111310:	d10b      	bne.n	811132a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8111312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111316:	f383 8811 	msr	BASEPRI, r3
 811131a:	f3bf 8f6f 	isb	sy
 811131e:	f3bf 8f4f 	dsb	sy
 8111322:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8111324:	bf00      	nop
 8111326:	bf00      	nop
 8111328:	e7fd      	b.n	8111326 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 811132a:	687b      	ldr	r3, [r7, #4]
 811132c:	2b00      	cmp	r3, #0
 811132e:	d002      	beq.n	8111336 <xQueueGenericCreateStatic+0x56>
 8111330:	68bb      	ldr	r3, [r7, #8]
 8111332:	2b00      	cmp	r3, #0
 8111334:	d001      	beq.n	811133a <xQueueGenericCreateStatic+0x5a>
 8111336:	2301      	movs	r3, #1
 8111338:	e000      	b.n	811133c <xQueueGenericCreateStatic+0x5c>
 811133a:	2300      	movs	r3, #0
 811133c:	2b00      	cmp	r3, #0
 811133e:	d10b      	bne.n	8111358 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8111340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111344:	f383 8811 	msr	BASEPRI, r3
 8111348:	f3bf 8f6f 	isb	sy
 811134c:	f3bf 8f4f 	dsb	sy
 8111350:	623b      	str	r3, [r7, #32]
}
 8111352:	bf00      	nop
 8111354:	bf00      	nop
 8111356:	e7fd      	b.n	8111354 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8111358:	687b      	ldr	r3, [r7, #4]
 811135a:	2b00      	cmp	r3, #0
 811135c:	d102      	bne.n	8111364 <xQueueGenericCreateStatic+0x84>
 811135e:	68bb      	ldr	r3, [r7, #8]
 8111360:	2b00      	cmp	r3, #0
 8111362:	d101      	bne.n	8111368 <xQueueGenericCreateStatic+0x88>
 8111364:	2301      	movs	r3, #1
 8111366:	e000      	b.n	811136a <xQueueGenericCreateStatic+0x8a>
 8111368:	2300      	movs	r3, #0
 811136a:	2b00      	cmp	r3, #0
 811136c:	d10b      	bne.n	8111386 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 811136e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111372:	f383 8811 	msr	BASEPRI, r3
 8111376:	f3bf 8f6f 	isb	sy
 811137a:	f3bf 8f4f 	dsb	sy
 811137e:	61fb      	str	r3, [r7, #28]
}
 8111380:	bf00      	nop
 8111382:	bf00      	nop
 8111384:	e7fd      	b.n	8111382 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8111386:	2350      	movs	r3, #80	@ 0x50
 8111388:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 811138a:	697b      	ldr	r3, [r7, #20]
 811138c:	2b50      	cmp	r3, #80	@ 0x50
 811138e:	d00b      	beq.n	81113a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8111390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111394:	f383 8811 	msr	BASEPRI, r3
 8111398:	f3bf 8f6f 	isb	sy
 811139c:	f3bf 8f4f 	dsb	sy
 81113a0:	61bb      	str	r3, [r7, #24]
}
 81113a2:	bf00      	nop
 81113a4:	bf00      	nop
 81113a6:	e7fd      	b.n	81113a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81113a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81113aa:	683b      	ldr	r3, [r7, #0]
 81113ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81113ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81113b0:	2b00      	cmp	r3, #0
 81113b2:	d00d      	beq.n	81113d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81113b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81113b6:	2201      	movs	r2, #1
 81113b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81113bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 81113c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81113c2:	9300      	str	r3, [sp, #0]
 81113c4:	4613      	mov	r3, r2
 81113c6:	687a      	ldr	r2, [r7, #4]
 81113c8:	68b9      	ldr	r1, [r7, #8]
 81113ca:	68f8      	ldr	r0, [r7, #12]
 81113cc:	f000 f840 	bl	8111450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81113d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 81113d2:	4618      	mov	r0, r3
 81113d4:	3730      	adds	r7, #48	@ 0x30
 81113d6:	46bd      	mov	sp, r7
 81113d8:	bd80      	pop	{r7, pc}

081113da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 81113da:	b580      	push	{r7, lr}
 81113dc:	b08a      	sub	sp, #40	@ 0x28
 81113de:	af02      	add	r7, sp, #8
 81113e0:	60f8      	str	r0, [r7, #12]
 81113e2:	60b9      	str	r1, [r7, #8]
 81113e4:	4613      	mov	r3, r2
 81113e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81113e8:	68fb      	ldr	r3, [r7, #12]
 81113ea:	2b00      	cmp	r3, #0
 81113ec:	d10b      	bne.n	8111406 <xQueueGenericCreate+0x2c>
	__asm volatile
 81113ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81113f2:	f383 8811 	msr	BASEPRI, r3
 81113f6:	f3bf 8f6f 	isb	sy
 81113fa:	f3bf 8f4f 	dsb	sy
 81113fe:	613b      	str	r3, [r7, #16]
}
 8111400:	bf00      	nop
 8111402:	bf00      	nop
 8111404:	e7fd      	b.n	8111402 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8111406:	68fb      	ldr	r3, [r7, #12]
 8111408:	68ba      	ldr	r2, [r7, #8]
 811140a:	fb02 f303 	mul.w	r3, r2, r3
 811140e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8111410:	69fb      	ldr	r3, [r7, #28]
 8111412:	3350      	adds	r3, #80	@ 0x50
 8111414:	4618      	mov	r0, r3
 8111416:	f7ff fa05 	bl	8110824 <pvPortMalloc>
 811141a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 811141c:	69bb      	ldr	r3, [r7, #24]
 811141e:	2b00      	cmp	r3, #0
 8111420:	d011      	beq.n	8111446 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8111422:	69bb      	ldr	r3, [r7, #24]
 8111424:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8111426:	697b      	ldr	r3, [r7, #20]
 8111428:	3350      	adds	r3, #80	@ 0x50
 811142a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 811142c:	69bb      	ldr	r3, [r7, #24]
 811142e:	2200      	movs	r2, #0
 8111430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8111434:	79fa      	ldrb	r2, [r7, #7]
 8111436:	69bb      	ldr	r3, [r7, #24]
 8111438:	9300      	str	r3, [sp, #0]
 811143a:	4613      	mov	r3, r2
 811143c:	697a      	ldr	r2, [r7, #20]
 811143e:	68b9      	ldr	r1, [r7, #8]
 8111440:	68f8      	ldr	r0, [r7, #12]
 8111442:	f000 f805 	bl	8111450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8111446:	69bb      	ldr	r3, [r7, #24]
	}
 8111448:	4618      	mov	r0, r3
 811144a:	3720      	adds	r7, #32
 811144c:	46bd      	mov	sp, r7
 811144e:	bd80      	pop	{r7, pc}

08111450 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8111450:	b580      	push	{r7, lr}
 8111452:	b084      	sub	sp, #16
 8111454:	af00      	add	r7, sp, #0
 8111456:	60f8      	str	r0, [r7, #12]
 8111458:	60b9      	str	r1, [r7, #8]
 811145a:	607a      	str	r2, [r7, #4]
 811145c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 811145e:	68bb      	ldr	r3, [r7, #8]
 8111460:	2b00      	cmp	r3, #0
 8111462:	d103      	bne.n	811146c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8111464:	69bb      	ldr	r3, [r7, #24]
 8111466:	69ba      	ldr	r2, [r7, #24]
 8111468:	601a      	str	r2, [r3, #0]
 811146a:	e002      	b.n	8111472 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 811146c:	69bb      	ldr	r3, [r7, #24]
 811146e:	687a      	ldr	r2, [r7, #4]
 8111470:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8111472:	69bb      	ldr	r3, [r7, #24]
 8111474:	68fa      	ldr	r2, [r7, #12]
 8111476:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8111478:	69bb      	ldr	r3, [r7, #24]
 811147a:	68ba      	ldr	r2, [r7, #8]
 811147c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 811147e:	2101      	movs	r1, #1
 8111480:	69b8      	ldr	r0, [r7, #24]
 8111482:	f7ff fec3 	bl	811120c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8111486:	69bb      	ldr	r3, [r7, #24]
 8111488:	78fa      	ldrb	r2, [r7, #3]
 811148a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 811148e:	bf00      	nop
 8111490:	3710      	adds	r7, #16
 8111492:	46bd      	mov	sp, r7
 8111494:	bd80      	pop	{r7, pc}

08111496 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8111496:	b580      	push	{r7, lr}
 8111498:	b082      	sub	sp, #8
 811149a:	af00      	add	r7, sp, #0
 811149c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 811149e:	687b      	ldr	r3, [r7, #4]
 81114a0:	2b00      	cmp	r3, #0
 81114a2:	d00e      	beq.n	81114c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 81114a4:	687b      	ldr	r3, [r7, #4]
 81114a6:	2200      	movs	r2, #0
 81114a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 81114aa:	687b      	ldr	r3, [r7, #4]
 81114ac:	2200      	movs	r2, #0
 81114ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 81114b0:	687b      	ldr	r3, [r7, #4]
 81114b2:	2200      	movs	r2, #0
 81114b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 81114b6:	2300      	movs	r3, #0
 81114b8:	2200      	movs	r2, #0
 81114ba:	2100      	movs	r1, #0
 81114bc:	6878      	ldr	r0, [r7, #4]
 81114be:	f000 f911 	bl	81116e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 81114c2:	bf00      	nop
 81114c4:	3708      	adds	r7, #8
 81114c6:	46bd      	mov	sp, r7
 81114c8:	bd80      	pop	{r7, pc}

081114ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 81114ca:	b580      	push	{r7, lr}
 81114cc:	b086      	sub	sp, #24
 81114ce:	af00      	add	r7, sp, #0
 81114d0:	4603      	mov	r3, r0
 81114d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 81114d4:	2301      	movs	r3, #1
 81114d6:	617b      	str	r3, [r7, #20]
 81114d8:	2300      	movs	r3, #0
 81114da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 81114dc:	79fb      	ldrb	r3, [r7, #7]
 81114de:	461a      	mov	r2, r3
 81114e0:	6939      	ldr	r1, [r7, #16]
 81114e2:	6978      	ldr	r0, [r7, #20]
 81114e4:	f7ff ff79 	bl	81113da <xQueueGenericCreate>
 81114e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 81114ea:	68f8      	ldr	r0, [r7, #12]
 81114ec:	f7ff ffd3 	bl	8111496 <prvInitialiseMutex>

		return xNewQueue;
 81114f0:	68fb      	ldr	r3, [r7, #12]
	}
 81114f2:	4618      	mov	r0, r3
 81114f4:	3718      	adds	r7, #24
 81114f6:	46bd      	mov	sp, r7
 81114f8:	bd80      	pop	{r7, pc}

081114fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 81114fa:	b580      	push	{r7, lr}
 81114fc:	b088      	sub	sp, #32
 81114fe:	af02      	add	r7, sp, #8
 8111500:	4603      	mov	r3, r0
 8111502:	6039      	str	r1, [r7, #0]
 8111504:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8111506:	2301      	movs	r3, #1
 8111508:	617b      	str	r3, [r7, #20]
 811150a:	2300      	movs	r3, #0
 811150c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 811150e:	79fb      	ldrb	r3, [r7, #7]
 8111510:	9300      	str	r3, [sp, #0]
 8111512:	683b      	ldr	r3, [r7, #0]
 8111514:	2200      	movs	r2, #0
 8111516:	6939      	ldr	r1, [r7, #16]
 8111518:	6978      	ldr	r0, [r7, #20]
 811151a:	f7ff fee1 	bl	81112e0 <xQueueGenericCreateStatic>
 811151e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8111520:	68f8      	ldr	r0, [r7, #12]
 8111522:	f7ff ffb8 	bl	8111496 <prvInitialiseMutex>

		return xNewQueue;
 8111526:	68fb      	ldr	r3, [r7, #12]
	}
 8111528:	4618      	mov	r0, r3
 811152a:	3718      	adds	r7, #24
 811152c:	46bd      	mov	sp, r7
 811152e:	bd80      	pop	{r7, pc}

08111530 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8111530:	b590      	push	{r4, r7, lr}
 8111532:	b087      	sub	sp, #28
 8111534:	af00      	add	r7, sp, #0
 8111536:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8111538:	687b      	ldr	r3, [r7, #4]
 811153a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 811153c:	693b      	ldr	r3, [r7, #16]
 811153e:	2b00      	cmp	r3, #0
 8111540:	d10b      	bne.n	811155a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8111542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111546:	f383 8811 	msr	BASEPRI, r3
 811154a:	f3bf 8f6f 	isb	sy
 811154e:	f3bf 8f4f 	dsb	sy
 8111552:	60fb      	str	r3, [r7, #12]
}
 8111554:	bf00      	nop
 8111556:	bf00      	nop
 8111558:	e7fd      	b.n	8111556 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 811155a:	693b      	ldr	r3, [r7, #16]
 811155c:	689c      	ldr	r4, [r3, #8]
 811155e:	f001 fda3 	bl	81130a8 <xTaskGetCurrentTaskHandle>
 8111562:	4603      	mov	r3, r0
 8111564:	429c      	cmp	r4, r3
 8111566:	d111      	bne.n	811158c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8111568:	693b      	ldr	r3, [r7, #16]
 811156a:	68db      	ldr	r3, [r3, #12]
 811156c:	1e5a      	subs	r2, r3, #1
 811156e:	693b      	ldr	r3, [r7, #16]
 8111570:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8111572:	693b      	ldr	r3, [r7, #16]
 8111574:	68db      	ldr	r3, [r3, #12]
 8111576:	2b00      	cmp	r3, #0
 8111578:	d105      	bne.n	8111586 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 811157a:	2300      	movs	r3, #0
 811157c:	2200      	movs	r2, #0
 811157e:	2100      	movs	r1, #0
 8111580:	6938      	ldr	r0, [r7, #16]
 8111582:	f000 f8af 	bl	81116e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8111586:	2301      	movs	r3, #1
 8111588:	617b      	str	r3, [r7, #20]
 811158a:	e001      	b.n	8111590 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 811158c:	2300      	movs	r3, #0
 811158e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8111590:	697b      	ldr	r3, [r7, #20]
	}
 8111592:	4618      	mov	r0, r3
 8111594:	371c      	adds	r7, #28
 8111596:	46bd      	mov	sp, r7
 8111598:	bd90      	pop	{r4, r7, pc}

0811159a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 811159a:	b590      	push	{r4, r7, lr}
 811159c:	b087      	sub	sp, #28
 811159e:	af00      	add	r7, sp, #0
 81115a0:	6078      	str	r0, [r7, #4]
 81115a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 81115a4:	687b      	ldr	r3, [r7, #4]
 81115a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 81115a8:	693b      	ldr	r3, [r7, #16]
 81115aa:	2b00      	cmp	r3, #0
 81115ac:	d10b      	bne.n	81115c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 81115ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81115b2:	f383 8811 	msr	BASEPRI, r3
 81115b6:	f3bf 8f6f 	isb	sy
 81115ba:	f3bf 8f4f 	dsb	sy
 81115be:	60fb      	str	r3, [r7, #12]
}
 81115c0:	bf00      	nop
 81115c2:	bf00      	nop
 81115c4:	e7fd      	b.n	81115c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 81115c6:	693b      	ldr	r3, [r7, #16]
 81115c8:	689c      	ldr	r4, [r3, #8]
 81115ca:	f001 fd6d 	bl	81130a8 <xTaskGetCurrentTaskHandle>
 81115ce:	4603      	mov	r3, r0
 81115d0:	429c      	cmp	r4, r3
 81115d2:	d107      	bne.n	81115e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 81115d4:	693b      	ldr	r3, [r7, #16]
 81115d6:	68db      	ldr	r3, [r3, #12]
 81115d8:	1c5a      	adds	r2, r3, #1
 81115da:	693b      	ldr	r3, [r7, #16]
 81115dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 81115de:	2301      	movs	r3, #1
 81115e0:	617b      	str	r3, [r7, #20]
 81115e2:	e00c      	b.n	81115fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 81115e4:	6839      	ldr	r1, [r7, #0]
 81115e6:	6938      	ldr	r0, [r7, #16]
 81115e8:	f000 fb8e 	bl	8111d08 <xQueueSemaphoreTake>
 81115ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 81115ee:	697b      	ldr	r3, [r7, #20]
 81115f0:	2b00      	cmp	r3, #0
 81115f2:	d004      	beq.n	81115fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 81115f4:	693b      	ldr	r3, [r7, #16]
 81115f6:	68db      	ldr	r3, [r3, #12]
 81115f8:	1c5a      	adds	r2, r3, #1
 81115fa:	693b      	ldr	r3, [r7, #16]
 81115fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 81115fe:	697b      	ldr	r3, [r7, #20]
	}
 8111600:	4618      	mov	r0, r3
 8111602:	371c      	adds	r7, #28
 8111604:	46bd      	mov	sp, r7
 8111606:	bd90      	pop	{r4, r7, pc}

08111608 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8111608:	b580      	push	{r7, lr}
 811160a:	b08a      	sub	sp, #40	@ 0x28
 811160c:	af02      	add	r7, sp, #8
 811160e:	60f8      	str	r0, [r7, #12]
 8111610:	60b9      	str	r1, [r7, #8]
 8111612:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8111614:	68fb      	ldr	r3, [r7, #12]
 8111616:	2b00      	cmp	r3, #0
 8111618:	d10b      	bne.n	8111632 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 811161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811161e:	f383 8811 	msr	BASEPRI, r3
 8111622:	f3bf 8f6f 	isb	sy
 8111626:	f3bf 8f4f 	dsb	sy
 811162a:	61bb      	str	r3, [r7, #24]
}
 811162c:	bf00      	nop
 811162e:	bf00      	nop
 8111630:	e7fd      	b.n	811162e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8111632:	68ba      	ldr	r2, [r7, #8]
 8111634:	68fb      	ldr	r3, [r7, #12]
 8111636:	429a      	cmp	r2, r3
 8111638:	d90b      	bls.n	8111652 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 811163a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811163e:	f383 8811 	msr	BASEPRI, r3
 8111642:	f3bf 8f6f 	isb	sy
 8111646:	f3bf 8f4f 	dsb	sy
 811164a:	617b      	str	r3, [r7, #20]
}
 811164c:	bf00      	nop
 811164e:	bf00      	nop
 8111650:	e7fd      	b.n	811164e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8111652:	2302      	movs	r3, #2
 8111654:	9300      	str	r3, [sp, #0]
 8111656:	687b      	ldr	r3, [r7, #4]
 8111658:	2200      	movs	r2, #0
 811165a:	2100      	movs	r1, #0
 811165c:	68f8      	ldr	r0, [r7, #12]
 811165e:	f7ff fe3f 	bl	81112e0 <xQueueGenericCreateStatic>
 8111662:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8111664:	69fb      	ldr	r3, [r7, #28]
 8111666:	2b00      	cmp	r3, #0
 8111668:	d002      	beq.n	8111670 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 811166a:	69fb      	ldr	r3, [r7, #28]
 811166c:	68ba      	ldr	r2, [r7, #8]
 811166e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8111670:	69fb      	ldr	r3, [r7, #28]
	}
 8111672:	4618      	mov	r0, r3
 8111674:	3720      	adds	r7, #32
 8111676:	46bd      	mov	sp, r7
 8111678:	bd80      	pop	{r7, pc}

0811167a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 811167a:	b580      	push	{r7, lr}
 811167c:	b086      	sub	sp, #24
 811167e:	af00      	add	r7, sp, #0
 8111680:	6078      	str	r0, [r7, #4]
 8111682:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8111684:	687b      	ldr	r3, [r7, #4]
 8111686:	2b00      	cmp	r3, #0
 8111688:	d10b      	bne.n	81116a2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 811168a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811168e:	f383 8811 	msr	BASEPRI, r3
 8111692:	f3bf 8f6f 	isb	sy
 8111696:	f3bf 8f4f 	dsb	sy
 811169a:	613b      	str	r3, [r7, #16]
}
 811169c:	bf00      	nop
 811169e:	bf00      	nop
 81116a0:	e7fd      	b.n	811169e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 81116a2:	683a      	ldr	r2, [r7, #0]
 81116a4:	687b      	ldr	r3, [r7, #4]
 81116a6:	429a      	cmp	r2, r3
 81116a8:	d90b      	bls.n	81116c2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 81116aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81116ae:	f383 8811 	msr	BASEPRI, r3
 81116b2:	f3bf 8f6f 	isb	sy
 81116b6:	f3bf 8f4f 	dsb	sy
 81116ba:	60fb      	str	r3, [r7, #12]
}
 81116bc:	bf00      	nop
 81116be:	bf00      	nop
 81116c0:	e7fd      	b.n	81116be <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81116c2:	2202      	movs	r2, #2
 81116c4:	2100      	movs	r1, #0
 81116c6:	6878      	ldr	r0, [r7, #4]
 81116c8:	f7ff fe87 	bl	81113da <xQueueGenericCreate>
 81116cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 81116ce:	697b      	ldr	r3, [r7, #20]
 81116d0:	2b00      	cmp	r3, #0
 81116d2:	d002      	beq.n	81116da <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81116d4:	697b      	ldr	r3, [r7, #20]
 81116d6:	683a      	ldr	r2, [r7, #0]
 81116d8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81116da:	697b      	ldr	r3, [r7, #20]
	}
 81116dc:	4618      	mov	r0, r3
 81116de:	3718      	adds	r7, #24
 81116e0:	46bd      	mov	sp, r7
 81116e2:	bd80      	pop	{r7, pc}

081116e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81116e4:	b580      	push	{r7, lr}
 81116e6:	b08e      	sub	sp, #56	@ 0x38
 81116e8:	af00      	add	r7, sp, #0
 81116ea:	60f8      	str	r0, [r7, #12]
 81116ec:	60b9      	str	r1, [r7, #8]
 81116ee:	607a      	str	r2, [r7, #4]
 81116f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 81116f2:	2300      	movs	r3, #0
 81116f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81116f6:	68fb      	ldr	r3, [r7, #12]
 81116f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 81116fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81116fc:	2b00      	cmp	r3, #0
 81116fe:	d10b      	bne.n	8111718 <xQueueGenericSend+0x34>
	__asm volatile
 8111700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111704:	f383 8811 	msr	BASEPRI, r3
 8111708:	f3bf 8f6f 	isb	sy
 811170c:	f3bf 8f4f 	dsb	sy
 8111710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8111712:	bf00      	nop
 8111714:	bf00      	nop
 8111716:	e7fd      	b.n	8111714 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111718:	68bb      	ldr	r3, [r7, #8]
 811171a:	2b00      	cmp	r3, #0
 811171c:	d103      	bne.n	8111726 <xQueueGenericSend+0x42>
 811171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111722:	2b00      	cmp	r3, #0
 8111724:	d101      	bne.n	811172a <xQueueGenericSend+0x46>
 8111726:	2301      	movs	r3, #1
 8111728:	e000      	b.n	811172c <xQueueGenericSend+0x48>
 811172a:	2300      	movs	r3, #0
 811172c:	2b00      	cmp	r3, #0
 811172e:	d10b      	bne.n	8111748 <xQueueGenericSend+0x64>
	__asm volatile
 8111730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111734:	f383 8811 	msr	BASEPRI, r3
 8111738:	f3bf 8f6f 	isb	sy
 811173c:	f3bf 8f4f 	dsb	sy
 8111740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8111742:	bf00      	nop
 8111744:	bf00      	nop
 8111746:	e7fd      	b.n	8111744 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8111748:	683b      	ldr	r3, [r7, #0]
 811174a:	2b02      	cmp	r3, #2
 811174c:	d103      	bne.n	8111756 <xQueueGenericSend+0x72>
 811174e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111752:	2b01      	cmp	r3, #1
 8111754:	d101      	bne.n	811175a <xQueueGenericSend+0x76>
 8111756:	2301      	movs	r3, #1
 8111758:	e000      	b.n	811175c <xQueueGenericSend+0x78>
 811175a:	2300      	movs	r3, #0
 811175c:	2b00      	cmp	r3, #0
 811175e:	d10b      	bne.n	8111778 <xQueueGenericSend+0x94>
	__asm volatile
 8111760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111764:	f383 8811 	msr	BASEPRI, r3
 8111768:	f3bf 8f6f 	isb	sy
 811176c:	f3bf 8f4f 	dsb	sy
 8111770:	623b      	str	r3, [r7, #32]
}
 8111772:	bf00      	nop
 8111774:	bf00      	nop
 8111776:	e7fd      	b.n	8111774 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8111778:	f001 fca6 	bl	81130c8 <xTaskGetSchedulerState>
 811177c:	4603      	mov	r3, r0
 811177e:	2b00      	cmp	r3, #0
 8111780:	d102      	bne.n	8111788 <xQueueGenericSend+0xa4>
 8111782:	687b      	ldr	r3, [r7, #4]
 8111784:	2b00      	cmp	r3, #0
 8111786:	d101      	bne.n	811178c <xQueueGenericSend+0xa8>
 8111788:	2301      	movs	r3, #1
 811178a:	e000      	b.n	811178e <xQueueGenericSend+0xaa>
 811178c:	2300      	movs	r3, #0
 811178e:	2b00      	cmp	r3, #0
 8111790:	d10b      	bne.n	81117aa <xQueueGenericSend+0xc6>
	__asm volatile
 8111792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111796:	f383 8811 	msr	BASEPRI, r3
 811179a:	f3bf 8f6f 	isb	sy
 811179e:	f3bf 8f4f 	dsb	sy
 81117a2:	61fb      	str	r3, [r7, #28]
}
 81117a4:	bf00      	nop
 81117a6:	bf00      	nop
 81117a8:	e7fd      	b.n	81117a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81117aa:	f7ff fc0d 	bl	8110fc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81117ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81117b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81117b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81117b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81117b6:	429a      	cmp	r2, r3
 81117b8:	d302      	bcc.n	81117c0 <xQueueGenericSend+0xdc>
 81117ba:	683b      	ldr	r3, [r7, #0]
 81117bc:	2b02      	cmp	r3, #2
 81117be:	d129      	bne.n	8111814 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81117c0:	683a      	ldr	r2, [r7, #0]
 81117c2:	68b9      	ldr	r1, [r7, #8]
 81117c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81117c6:	f000 fc6d 	bl	81120a4 <prvCopyDataToQueue>
 81117ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81117cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81117ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81117d0:	2b00      	cmp	r3, #0
 81117d2:	d010      	beq.n	81117f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81117d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81117d6:	3324      	adds	r3, #36	@ 0x24
 81117d8:	4618      	mov	r0, r3
 81117da:	f001 fa9f 	bl	8112d1c <xTaskRemoveFromEventList>
 81117de:	4603      	mov	r3, r0
 81117e0:	2b00      	cmp	r3, #0
 81117e2:	d013      	beq.n	811180c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81117e4:	4b3f      	ldr	r3, [pc, #252]	@ (81118e4 <xQueueGenericSend+0x200>)
 81117e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81117ea:	601a      	str	r2, [r3, #0]
 81117ec:	f3bf 8f4f 	dsb	sy
 81117f0:	f3bf 8f6f 	isb	sy
 81117f4:	e00a      	b.n	811180c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81117f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81117f8:	2b00      	cmp	r3, #0
 81117fa:	d007      	beq.n	811180c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81117fc:	4b39      	ldr	r3, [pc, #228]	@ (81118e4 <xQueueGenericSend+0x200>)
 81117fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111802:	601a      	str	r2, [r3, #0]
 8111804:	f3bf 8f4f 	dsb	sy
 8111808:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 811180c:	f7ff fc0e 	bl	811102c <vPortExitCritical>
				return pdPASS;
 8111810:	2301      	movs	r3, #1
 8111812:	e063      	b.n	81118dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8111814:	687b      	ldr	r3, [r7, #4]
 8111816:	2b00      	cmp	r3, #0
 8111818:	d103      	bne.n	8111822 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811181a:	f7ff fc07 	bl	811102c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 811181e:	2300      	movs	r3, #0
 8111820:	e05c      	b.n	81118dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8111822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111824:	2b00      	cmp	r3, #0
 8111826:	d106      	bne.n	8111836 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8111828:	f107 0314 	add.w	r3, r7, #20
 811182c:	4618      	mov	r0, r3
 811182e:	f001 fad9 	bl	8112de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8111832:	2301      	movs	r3, #1
 8111834:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8111836:	f7ff fbf9 	bl	811102c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811183a:	f001 f82f 	bl	811289c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 811183e:	f7ff fbc3 	bl	8110fc8 <vPortEnterCritical>
 8111842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111848:	b25b      	sxtb	r3, r3
 811184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811184e:	d103      	bne.n	8111858 <xQueueGenericSend+0x174>
 8111850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111852:	2200      	movs	r2, #0
 8111854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8111858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811185a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 811185e:	b25b      	sxtb	r3, r3
 8111860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111864:	d103      	bne.n	811186e <xQueueGenericSend+0x18a>
 8111866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111868:	2200      	movs	r2, #0
 811186a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 811186e:	f7ff fbdd 	bl	811102c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8111872:	1d3a      	adds	r2, r7, #4
 8111874:	f107 0314 	add.w	r3, r7, #20
 8111878:	4611      	mov	r1, r2
 811187a:	4618      	mov	r0, r3
 811187c:	f001 fac8 	bl	8112e10 <xTaskCheckForTimeOut>
 8111880:	4603      	mov	r3, r0
 8111882:	2b00      	cmp	r3, #0
 8111884:	d124      	bne.n	81118d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8111886:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111888:	f000 fd04 	bl	8112294 <prvIsQueueFull>
 811188c:	4603      	mov	r3, r0
 811188e:	2b00      	cmp	r3, #0
 8111890:	d018      	beq.n	81118c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8111892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111894:	3310      	adds	r3, #16
 8111896:	687a      	ldr	r2, [r7, #4]
 8111898:	4611      	mov	r1, r2
 811189a:	4618      	mov	r0, r3
 811189c:	f001 f9ec 	bl	8112c78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81118a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81118a2:	f000 fc8f 	bl	81121c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81118a6:	f001 f807 	bl	81128b8 <xTaskResumeAll>
 81118aa:	4603      	mov	r3, r0
 81118ac:	2b00      	cmp	r3, #0
 81118ae:	f47f af7c 	bne.w	81117aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 81118b2:	4b0c      	ldr	r3, [pc, #48]	@ (81118e4 <xQueueGenericSend+0x200>)
 81118b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81118b8:	601a      	str	r2, [r3, #0]
 81118ba:	f3bf 8f4f 	dsb	sy
 81118be:	f3bf 8f6f 	isb	sy
 81118c2:	e772      	b.n	81117aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81118c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81118c6:	f000 fc7d 	bl	81121c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81118ca:	f000 fff5 	bl	81128b8 <xTaskResumeAll>
 81118ce:	e76c      	b.n	81117aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81118d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81118d2:	f000 fc77 	bl	81121c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81118d6:	f000 ffef 	bl	81128b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81118da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81118dc:	4618      	mov	r0, r3
 81118de:	3738      	adds	r7, #56	@ 0x38
 81118e0:	46bd      	mov	sp, r7
 81118e2:	bd80      	pop	{r7, pc}
 81118e4:	e000ed04 	.word	0xe000ed04

081118e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81118e8:	b580      	push	{r7, lr}
 81118ea:	b090      	sub	sp, #64	@ 0x40
 81118ec:	af00      	add	r7, sp, #0
 81118ee:	60f8      	str	r0, [r7, #12]
 81118f0:	60b9      	str	r1, [r7, #8]
 81118f2:	607a      	str	r2, [r7, #4]
 81118f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81118f6:	68fb      	ldr	r3, [r7, #12]
 81118f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 81118fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81118fc:	2b00      	cmp	r3, #0
 81118fe:	d10b      	bne.n	8111918 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8111900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111904:	f383 8811 	msr	BASEPRI, r3
 8111908:	f3bf 8f6f 	isb	sy
 811190c:	f3bf 8f4f 	dsb	sy
 8111910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8111912:	bf00      	nop
 8111914:	bf00      	nop
 8111916:	e7fd      	b.n	8111914 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111918:	68bb      	ldr	r3, [r7, #8]
 811191a:	2b00      	cmp	r3, #0
 811191c:	d103      	bne.n	8111926 <xQueueGenericSendFromISR+0x3e>
 811191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111922:	2b00      	cmp	r3, #0
 8111924:	d101      	bne.n	811192a <xQueueGenericSendFromISR+0x42>
 8111926:	2301      	movs	r3, #1
 8111928:	e000      	b.n	811192c <xQueueGenericSendFromISR+0x44>
 811192a:	2300      	movs	r3, #0
 811192c:	2b00      	cmp	r3, #0
 811192e:	d10b      	bne.n	8111948 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8111930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111934:	f383 8811 	msr	BASEPRI, r3
 8111938:	f3bf 8f6f 	isb	sy
 811193c:	f3bf 8f4f 	dsb	sy
 8111940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8111942:	bf00      	nop
 8111944:	bf00      	nop
 8111946:	e7fd      	b.n	8111944 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8111948:	683b      	ldr	r3, [r7, #0]
 811194a:	2b02      	cmp	r3, #2
 811194c:	d103      	bne.n	8111956 <xQueueGenericSendFromISR+0x6e>
 811194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111952:	2b01      	cmp	r3, #1
 8111954:	d101      	bne.n	811195a <xQueueGenericSendFromISR+0x72>
 8111956:	2301      	movs	r3, #1
 8111958:	e000      	b.n	811195c <xQueueGenericSendFromISR+0x74>
 811195a:	2300      	movs	r3, #0
 811195c:	2b00      	cmp	r3, #0
 811195e:	d10b      	bne.n	8111978 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8111960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111964:	f383 8811 	msr	BASEPRI, r3
 8111968:	f3bf 8f6f 	isb	sy
 811196c:	f3bf 8f4f 	dsb	sy
 8111970:	623b      	str	r3, [r7, #32]
}
 8111972:	bf00      	nop
 8111974:	bf00      	nop
 8111976:	e7fd      	b.n	8111974 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8111978:	f7ff fc06 	bl	8111188 <vPortValidateInterruptPriority>
	__asm volatile
 811197c:	f3ef 8211 	mrs	r2, BASEPRI
 8111980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111984:	f383 8811 	msr	BASEPRI, r3
 8111988:	f3bf 8f6f 	isb	sy
 811198c:	f3bf 8f4f 	dsb	sy
 8111990:	61fa      	str	r2, [r7, #28]
 8111992:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8111994:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8111996:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8111998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811199a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811199c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811199e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81119a0:	429a      	cmp	r2, r3
 81119a2:	d302      	bcc.n	81119aa <xQueueGenericSendFromISR+0xc2>
 81119a4:	683b      	ldr	r3, [r7, #0]
 81119a6:	2b02      	cmp	r3, #2
 81119a8:	d12f      	bne.n	8111a0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81119aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81119ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81119b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 81119b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81119b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81119b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81119ba:	683a      	ldr	r2, [r7, #0]
 81119bc:	68b9      	ldr	r1, [r7, #8]
 81119be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81119c0:	f000 fb70 	bl	81120a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81119c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 81119c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81119cc:	d112      	bne.n	81119f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81119ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81119d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81119d2:	2b00      	cmp	r3, #0
 81119d4:	d016      	beq.n	8111a04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81119d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81119d8:	3324      	adds	r3, #36	@ 0x24
 81119da:	4618      	mov	r0, r3
 81119dc:	f001 f99e 	bl	8112d1c <xTaskRemoveFromEventList>
 81119e0:	4603      	mov	r3, r0
 81119e2:	2b00      	cmp	r3, #0
 81119e4:	d00e      	beq.n	8111a04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81119e6:	687b      	ldr	r3, [r7, #4]
 81119e8:	2b00      	cmp	r3, #0
 81119ea:	d00b      	beq.n	8111a04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81119ec:	687b      	ldr	r3, [r7, #4]
 81119ee:	2201      	movs	r2, #1
 81119f0:	601a      	str	r2, [r3, #0]
 81119f2:	e007      	b.n	8111a04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81119f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 81119f8:	3301      	adds	r3, #1
 81119fa:	b2db      	uxtb	r3, r3
 81119fc:	b25a      	sxtb	r2, r3
 81119fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8111a04:	2301      	movs	r3, #1
 8111a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8111a08:	e001      	b.n	8111a0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8111a0a:	2300      	movs	r3, #0
 8111a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8111a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111a10:	617b      	str	r3, [r7, #20]
	__asm volatile
 8111a12:	697b      	ldr	r3, [r7, #20]
 8111a14:	f383 8811 	msr	BASEPRI, r3
}
 8111a18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8111a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8111a1c:	4618      	mov	r0, r3
 8111a1e:	3740      	adds	r7, #64	@ 0x40
 8111a20:	46bd      	mov	sp, r7
 8111a22:	bd80      	pop	{r7, pc}

08111a24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8111a24:	b580      	push	{r7, lr}
 8111a26:	b08e      	sub	sp, #56	@ 0x38
 8111a28:	af00      	add	r7, sp, #0
 8111a2a:	6078      	str	r0, [r7, #4]
 8111a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8111a2e:	687b      	ldr	r3, [r7, #4]
 8111a30:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8111a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111a34:	2b00      	cmp	r3, #0
 8111a36:	d10b      	bne.n	8111a50 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8111a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111a3c:	f383 8811 	msr	BASEPRI, r3
 8111a40:	f3bf 8f6f 	isb	sy
 8111a44:	f3bf 8f4f 	dsb	sy
 8111a48:	623b      	str	r3, [r7, #32]
}
 8111a4a:	bf00      	nop
 8111a4c:	bf00      	nop
 8111a4e:	e7fd      	b.n	8111a4c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8111a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111a54:	2b00      	cmp	r3, #0
 8111a56:	d00b      	beq.n	8111a70 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8111a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111a5c:	f383 8811 	msr	BASEPRI, r3
 8111a60:	f3bf 8f6f 	isb	sy
 8111a64:	f3bf 8f4f 	dsb	sy
 8111a68:	61fb      	str	r3, [r7, #28]
}
 8111a6a:	bf00      	nop
 8111a6c:	bf00      	nop
 8111a6e:	e7fd      	b.n	8111a6c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8111a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111a72:	681b      	ldr	r3, [r3, #0]
 8111a74:	2b00      	cmp	r3, #0
 8111a76:	d103      	bne.n	8111a80 <xQueueGiveFromISR+0x5c>
 8111a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111a7a:	689b      	ldr	r3, [r3, #8]
 8111a7c:	2b00      	cmp	r3, #0
 8111a7e:	d101      	bne.n	8111a84 <xQueueGiveFromISR+0x60>
 8111a80:	2301      	movs	r3, #1
 8111a82:	e000      	b.n	8111a86 <xQueueGiveFromISR+0x62>
 8111a84:	2300      	movs	r3, #0
 8111a86:	2b00      	cmp	r3, #0
 8111a88:	d10b      	bne.n	8111aa2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8111a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111a8e:	f383 8811 	msr	BASEPRI, r3
 8111a92:	f3bf 8f6f 	isb	sy
 8111a96:	f3bf 8f4f 	dsb	sy
 8111a9a:	61bb      	str	r3, [r7, #24]
}
 8111a9c:	bf00      	nop
 8111a9e:	bf00      	nop
 8111aa0:	e7fd      	b.n	8111a9e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8111aa2:	f7ff fb71 	bl	8111188 <vPortValidateInterruptPriority>
	__asm volatile
 8111aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8111aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111aae:	f383 8811 	msr	BASEPRI, r3
 8111ab2:	f3bf 8f6f 	isb	sy
 8111ab6:	f3bf 8f4f 	dsb	sy
 8111aba:	617a      	str	r2, [r7, #20]
 8111abc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8111abe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8111ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8111ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8111ace:	429a      	cmp	r2, r3
 8111ad0:	d22b      	bcs.n	8111b2a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8111ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8111adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111ade:	1c5a      	adds	r2, r3, #1
 8111ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111ae2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8111ae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8111ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111aec:	d112      	bne.n	8111b14 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8111aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111af2:	2b00      	cmp	r3, #0
 8111af4:	d016      	beq.n	8111b24 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8111af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111af8:	3324      	adds	r3, #36	@ 0x24
 8111afa:	4618      	mov	r0, r3
 8111afc:	f001 f90e 	bl	8112d1c <xTaskRemoveFromEventList>
 8111b00:	4603      	mov	r3, r0
 8111b02:	2b00      	cmp	r3, #0
 8111b04:	d00e      	beq.n	8111b24 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8111b06:	683b      	ldr	r3, [r7, #0]
 8111b08:	2b00      	cmp	r3, #0
 8111b0a:	d00b      	beq.n	8111b24 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8111b0c:	683b      	ldr	r3, [r7, #0]
 8111b0e:	2201      	movs	r2, #1
 8111b10:	601a      	str	r2, [r3, #0]
 8111b12:	e007      	b.n	8111b24 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8111b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8111b18:	3301      	adds	r3, #1
 8111b1a:	b2db      	uxtb	r3, r3
 8111b1c:	b25a      	sxtb	r2, r3
 8111b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8111b24:	2301      	movs	r3, #1
 8111b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8111b28:	e001      	b.n	8111b2e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8111b2a:	2300      	movs	r3, #0
 8111b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8111b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111b30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8111b32:	68fb      	ldr	r3, [r7, #12]
 8111b34:	f383 8811 	msr	BASEPRI, r3
}
 8111b38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8111b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8111b3c:	4618      	mov	r0, r3
 8111b3e:	3738      	adds	r7, #56	@ 0x38
 8111b40:	46bd      	mov	sp, r7
 8111b42:	bd80      	pop	{r7, pc}

08111b44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8111b44:	b580      	push	{r7, lr}
 8111b46:	b08c      	sub	sp, #48	@ 0x30
 8111b48:	af00      	add	r7, sp, #0
 8111b4a:	60f8      	str	r0, [r7, #12]
 8111b4c:	60b9      	str	r1, [r7, #8]
 8111b4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8111b50:	2300      	movs	r3, #0
 8111b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8111b54:	68fb      	ldr	r3, [r7, #12]
 8111b56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8111b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111b5a:	2b00      	cmp	r3, #0
 8111b5c:	d10b      	bne.n	8111b76 <xQueueReceive+0x32>
	__asm volatile
 8111b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111b62:	f383 8811 	msr	BASEPRI, r3
 8111b66:	f3bf 8f6f 	isb	sy
 8111b6a:	f3bf 8f4f 	dsb	sy
 8111b6e:	623b      	str	r3, [r7, #32]
}
 8111b70:	bf00      	nop
 8111b72:	bf00      	nop
 8111b74:	e7fd      	b.n	8111b72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111b76:	68bb      	ldr	r3, [r7, #8]
 8111b78:	2b00      	cmp	r3, #0
 8111b7a:	d103      	bne.n	8111b84 <xQueueReceive+0x40>
 8111b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111b80:	2b00      	cmp	r3, #0
 8111b82:	d101      	bne.n	8111b88 <xQueueReceive+0x44>
 8111b84:	2301      	movs	r3, #1
 8111b86:	e000      	b.n	8111b8a <xQueueReceive+0x46>
 8111b88:	2300      	movs	r3, #0
 8111b8a:	2b00      	cmp	r3, #0
 8111b8c:	d10b      	bne.n	8111ba6 <xQueueReceive+0x62>
	__asm volatile
 8111b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111b92:	f383 8811 	msr	BASEPRI, r3
 8111b96:	f3bf 8f6f 	isb	sy
 8111b9a:	f3bf 8f4f 	dsb	sy
 8111b9e:	61fb      	str	r3, [r7, #28]
}
 8111ba0:	bf00      	nop
 8111ba2:	bf00      	nop
 8111ba4:	e7fd      	b.n	8111ba2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8111ba6:	f001 fa8f 	bl	81130c8 <xTaskGetSchedulerState>
 8111baa:	4603      	mov	r3, r0
 8111bac:	2b00      	cmp	r3, #0
 8111bae:	d102      	bne.n	8111bb6 <xQueueReceive+0x72>
 8111bb0:	687b      	ldr	r3, [r7, #4]
 8111bb2:	2b00      	cmp	r3, #0
 8111bb4:	d101      	bne.n	8111bba <xQueueReceive+0x76>
 8111bb6:	2301      	movs	r3, #1
 8111bb8:	e000      	b.n	8111bbc <xQueueReceive+0x78>
 8111bba:	2300      	movs	r3, #0
 8111bbc:	2b00      	cmp	r3, #0
 8111bbe:	d10b      	bne.n	8111bd8 <xQueueReceive+0x94>
	__asm volatile
 8111bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111bc4:	f383 8811 	msr	BASEPRI, r3
 8111bc8:	f3bf 8f6f 	isb	sy
 8111bcc:	f3bf 8f4f 	dsb	sy
 8111bd0:	61bb      	str	r3, [r7, #24]
}
 8111bd2:	bf00      	nop
 8111bd4:	bf00      	nop
 8111bd6:	e7fd      	b.n	8111bd4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8111bd8:	f7ff f9f6 	bl	8110fc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111be0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8111be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111be4:	2b00      	cmp	r3, #0
 8111be6:	d01f      	beq.n	8111c28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8111be8:	68b9      	ldr	r1, [r7, #8]
 8111bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111bec:	f000 fac4 	bl	8112178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8111bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111bf2:	1e5a      	subs	r2, r3, #1
 8111bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111bf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111bfa:	691b      	ldr	r3, [r3, #16]
 8111bfc:	2b00      	cmp	r3, #0
 8111bfe:	d00f      	beq.n	8111c20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c02:	3310      	adds	r3, #16
 8111c04:	4618      	mov	r0, r3
 8111c06:	f001 f889 	bl	8112d1c <xTaskRemoveFromEventList>
 8111c0a:	4603      	mov	r3, r0
 8111c0c:	2b00      	cmp	r3, #0
 8111c0e:	d007      	beq.n	8111c20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8111c10:	4b3c      	ldr	r3, [pc, #240]	@ (8111d04 <xQueueReceive+0x1c0>)
 8111c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111c16:	601a      	str	r2, [r3, #0]
 8111c18:	f3bf 8f4f 	dsb	sy
 8111c1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8111c20:	f7ff fa04 	bl	811102c <vPortExitCritical>
				return pdPASS;
 8111c24:	2301      	movs	r3, #1
 8111c26:	e069      	b.n	8111cfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8111c28:	687b      	ldr	r3, [r7, #4]
 8111c2a:	2b00      	cmp	r3, #0
 8111c2c:	d103      	bne.n	8111c36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8111c2e:	f7ff f9fd 	bl	811102c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8111c32:	2300      	movs	r3, #0
 8111c34:	e062      	b.n	8111cfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8111c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111c38:	2b00      	cmp	r3, #0
 8111c3a:	d106      	bne.n	8111c4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8111c3c:	f107 0310 	add.w	r3, r7, #16
 8111c40:	4618      	mov	r0, r3
 8111c42:	f001 f8cf 	bl	8112de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8111c46:	2301      	movs	r3, #1
 8111c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8111c4a:	f7ff f9ef 	bl	811102c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8111c4e:	f000 fe25 	bl	811289c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8111c52:	f7ff f9b9 	bl	8110fc8 <vPortEnterCritical>
 8111c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111c5c:	b25b      	sxtb	r3, r3
 8111c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111c62:	d103      	bne.n	8111c6c <xQueueReceive+0x128>
 8111c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c66:	2200      	movs	r2, #0
 8111c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8111c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111c72:	b25b      	sxtb	r3, r3
 8111c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111c78:	d103      	bne.n	8111c82 <xQueueReceive+0x13e>
 8111c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c7c:	2200      	movs	r2, #0
 8111c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8111c82:	f7ff f9d3 	bl	811102c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8111c86:	1d3a      	adds	r2, r7, #4
 8111c88:	f107 0310 	add.w	r3, r7, #16
 8111c8c:	4611      	mov	r1, r2
 8111c8e:	4618      	mov	r0, r3
 8111c90:	f001 f8be 	bl	8112e10 <xTaskCheckForTimeOut>
 8111c94:	4603      	mov	r3, r0
 8111c96:	2b00      	cmp	r3, #0
 8111c98:	d123      	bne.n	8111ce2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8111c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111c9c:	f000 fae4 	bl	8112268 <prvIsQueueEmpty>
 8111ca0:	4603      	mov	r3, r0
 8111ca2:	2b00      	cmp	r3, #0
 8111ca4:	d017      	beq.n	8111cd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8111ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111ca8:	3324      	adds	r3, #36	@ 0x24
 8111caa:	687a      	ldr	r2, [r7, #4]
 8111cac:	4611      	mov	r1, r2
 8111cae:	4618      	mov	r0, r3
 8111cb0:	f000 ffe2 	bl	8112c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8111cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111cb6:	f000 fa85 	bl	81121c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8111cba:	f000 fdfd 	bl	81128b8 <xTaskResumeAll>
 8111cbe:	4603      	mov	r3, r0
 8111cc0:	2b00      	cmp	r3, #0
 8111cc2:	d189      	bne.n	8111bd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8111cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8111d04 <xQueueReceive+0x1c0>)
 8111cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111cca:	601a      	str	r2, [r3, #0]
 8111ccc:	f3bf 8f4f 	dsb	sy
 8111cd0:	f3bf 8f6f 	isb	sy
 8111cd4:	e780      	b.n	8111bd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8111cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111cd8:	f000 fa74 	bl	81121c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8111cdc:	f000 fdec 	bl	81128b8 <xTaskResumeAll>
 8111ce0:	e77a      	b.n	8111bd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8111ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111ce4:	f000 fa6e 	bl	81121c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8111ce8:	f000 fde6 	bl	81128b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8111cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111cee:	f000 fabb 	bl	8112268 <prvIsQueueEmpty>
 8111cf2:	4603      	mov	r3, r0
 8111cf4:	2b00      	cmp	r3, #0
 8111cf6:	f43f af6f 	beq.w	8111bd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8111cfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8111cfc:	4618      	mov	r0, r3
 8111cfe:	3730      	adds	r7, #48	@ 0x30
 8111d00:	46bd      	mov	sp, r7
 8111d02:	bd80      	pop	{r7, pc}
 8111d04:	e000ed04 	.word	0xe000ed04

08111d08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8111d08:	b580      	push	{r7, lr}
 8111d0a:	b08e      	sub	sp, #56	@ 0x38
 8111d0c:	af00      	add	r7, sp, #0
 8111d0e:	6078      	str	r0, [r7, #4]
 8111d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8111d12:	2300      	movs	r3, #0
 8111d14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8111d16:	687b      	ldr	r3, [r7, #4]
 8111d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8111d1a:	2300      	movs	r3, #0
 8111d1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8111d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111d20:	2b00      	cmp	r3, #0
 8111d22:	d10b      	bne.n	8111d3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8111d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111d28:	f383 8811 	msr	BASEPRI, r3
 8111d2c:	f3bf 8f6f 	isb	sy
 8111d30:	f3bf 8f4f 	dsb	sy
 8111d34:	623b      	str	r3, [r7, #32]
}
 8111d36:	bf00      	nop
 8111d38:	bf00      	nop
 8111d3a:	e7fd      	b.n	8111d38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8111d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111d40:	2b00      	cmp	r3, #0
 8111d42:	d00b      	beq.n	8111d5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8111d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111d48:	f383 8811 	msr	BASEPRI, r3
 8111d4c:	f3bf 8f6f 	isb	sy
 8111d50:	f3bf 8f4f 	dsb	sy
 8111d54:	61fb      	str	r3, [r7, #28]
}
 8111d56:	bf00      	nop
 8111d58:	bf00      	nop
 8111d5a:	e7fd      	b.n	8111d58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8111d5c:	f001 f9b4 	bl	81130c8 <xTaskGetSchedulerState>
 8111d60:	4603      	mov	r3, r0
 8111d62:	2b00      	cmp	r3, #0
 8111d64:	d102      	bne.n	8111d6c <xQueueSemaphoreTake+0x64>
 8111d66:	683b      	ldr	r3, [r7, #0]
 8111d68:	2b00      	cmp	r3, #0
 8111d6a:	d101      	bne.n	8111d70 <xQueueSemaphoreTake+0x68>
 8111d6c:	2301      	movs	r3, #1
 8111d6e:	e000      	b.n	8111d72 <xQueueSemaphoreTake+0x6a>
 8111d70:	2300      	movs	r3, #0
 8111d72:	2b00      	cmp	r3, #0
 8111d74:	d10b      	bne.n	8111d8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8111d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111d7a:	f383 8811 	msr	BASEPRI, r3
 8111d7e:	f3bf 8f6f 	isb	sy
 8111d82:	f3bf 8f4f 	dsb	sy
 8111d86:	61bb      	str	r3, [r7, #24]
}
 8111d88:	bf00      	nop
 8111d8a:	bf00      	nop
 8111d8c:	e7fd      	b.n	8111d8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8111d8e:	f7ff f91b 	bl	8110fc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8111d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111d96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8111d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111d9a:	2b00      	cmp	r3, #0
 8111d9c:	d024      	beq.n	8111de8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8111d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111da0:	1e5a      	subs	r2, r3, #1
 8111da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111da4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8111da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111da8:	681b      	ldr	r3, [r3, #0]
 8111daa:	2b00      	cmp	r3, #0
 8111dac:	d104      	bne.n	8111db8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8111dae:	f001 fb05 	bl	81133bc <pvTaskIncrementMutexHeldCount>
 8111db2:	4602      	mov	r2, r0
 8111db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111db6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111dba:	691b      	ldr	r3, [r3, #16]
 8111dbc:	2b00      	cmp	r3, #0
 8111dbe:	d00f      	beq.n	8111de0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111dc2:	3310      	adds	r3, #16
 8111dc4:	4618      	mov	r0, r3
 8111dc6:	f000 ffa9 	bl	8112d1c <xTaskRemoveFromEventList>
 8111dca:	4603      	mov	r3, r0
 8111dcc:	2b00      	cmp	r3, #0
 8111dce:	d007      	beq.n	8111de0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8111dd0:	4b54      	ldr	r3, [pc, #336]	@ (8111f24 <xQueueSemaphoreTake+0x21c>)
 8111dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111dd6:	601a      	str	r2, [r3, #0]
 8111dd8:	f3bf 8f4f 	dsb	sy
 8111ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8111de0:	f7ff f924 	bl	811102c <vPortExitCritical>
				return pdPASS;
 8111de4:	2301      	movs	r3, #1
 8111de6:	e098      	b.n	8111f1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8111de8:	683b      	ldr	r3, [r7, #0]
 8111dea:	2b00      	cmp	r3, #0
 8111dec:	d112      	bne.n	8111e14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8111dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111df0:	2b00      	cmp	r3, #0
 8111df2:	d00b      	beq.n	8111e0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8111df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111df8:	f383 8811 	msr	BASEPRI, r3
 8111dfc:	f3bf 8f6f 	isb	sy
 8111e00:	f3bf 8f4f 	dsb	sy
 8111e04:	617b      	str	r3, [r7, #20]
}
 8111e06:	bf00      	nop
 8111e08:	bf00      	nop
 8111e0a:	e7fd      	b.n	8111e08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8111e0c:	f7ff f90e 	bl	811102c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8111e10:	2300      	movs	r3, #0
 8111e12:	e082      	b.n	8111f1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8111e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111e16:	2b00      	cmp	r3, #0
 8111e18:	d106      	bne.n	8111e28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8111e1a:	f107 030c 	add.w	r3, r7, #12
 8111e1e:	4618      	mov	r0, r3
 8111e20:	f000 ffe0 	bl	8112de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8111e24:	2301      	movs	r3, #1
 8111e26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8111e28:	f7ff f900 	bl	811102c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8111e2c:	f000 fd36 	bl	811289c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8111e30:	f7ff f8ca 	bl	8110fc8 <vPortEnterCritical>
 8111e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111e36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111e3a:	b25b      	sxtb	r3, r3
 8111e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111e40:	d103      	bne.n	8111e4a <xQueueSemaphoreTake+0x142>
 8111e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111e44:	2200      	movs	r2, #0
 8111e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8111e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111e50:	b25b      	sxtb	r3, r3
 8111e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111e56:	d103      	bne.n	8111e60 <xQueueSemaphoreTake+0x158>
 8111e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111e5a:	2200      	movs	r2, #0
 8111e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8111e60:	f7ff f8e4 	bl	811102c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8111e64:	463a      	mov	r2, r7
 8111e66:	f107 030c 	add.w	r3, r7, #12
 8111e6a:	4611      	mov	r1, r2
 8111e6c:	4618      	mov	r0, r3
 8111e6e:	f000 ffcf 	bl	8112e10 <xTaskCheckForTimeOut>
 8111e72:	4603      	mov	r3, r0
 8111e74:	2b00      	cmp	r3, #0
 8111e76:	d132      	bne.n	8111ede <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8111e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111e7a:	f000 f9f5 	bl	8112268 <prvIsQueueEmpty>
 8111e7e:	4603      	mov	r3, r0
 8111e80:	2b00      	cmp	r3, #0
 8111e82:	d026      	beq.n	8111ed2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8111e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111e86:	681b      	ldr	r3, [r3, #0]
 8111e88:	2b00      	cmp	r3, #0
 8111e8a:	d109      	bne.n	8111ea0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8111e8c:	f7ff f89c 	bl	8110fc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8111e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111e92:	689b      	ldr	r3, [r3, #8]
 8111e94:	4618      	mov	r0, r3
 8111e96:	f001 f935 	bl	8113104 <xTaskPriorityInherit>
 8111e9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8111e9c:	f7ff f8c6 	bl	811102c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8111ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111ea2:	3324      	adds	r3, #36	@ 0x24
 8111ea4:	683a      	ldr	r2, [r7, #0]
 8111ea6:	4611      	mov	r1, r2
 8111ea8:	4618      	mov	r0, r3
 8111eaa:	f000 fee5 	bl	8112c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8111eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111eb0:	f000 f988 	bl	81121c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8111eb4:	f000 fd00 	bl	81128b8 <xTaskResumeAll>
 8111eb8:	4603      	mov	r3, r0
 8111eba:	2b00      	cmp	r3, #0
 8111ebc:	f47f af67 	bne.w	8111d8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8111ec0:	4b18      	ldr	r3, [pc, #96]	@ (8111f24 <xQueueSemaphoreTake+0x21c>)
 8111ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111ec6:	601a      	str	r2, [r3, #0]
 8111ec8:	f3bf 8f4f 	dsb	sy
 8111ecc:	f3bf 8f6f 	isb	sy
 8111ed0:	e75d      	b.n	8111d8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8111ed2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111ed4:	f000 f976 	bl	81121c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8111ed8:	f000 fcee 	bl	81128b8 <xTaskResumeAll>
 8111edc:	e757      	b.n	8111d8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8111ede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111ee0:	f000 f970 	bl	81121c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8111ee4:	f000 fce8 	bl	81128b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8111ee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111eea:	f000 f9bd 	bl	8112268 <prvIsQueueEmpty>
 8111eee:	4603      	mov	r3, r0
 8111ef0:	2b00      	cmp	r3, #0
 8111ef2:	f43f af4c 	beq.w	8111d8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8111ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111ef8:	2b00      	cmp	r3, #0
 8111efa:	d00d      	beq.n	8111f18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8111efc:	f7ff f864 	bl	8110fc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8111f00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111f02:	f000 f8b7 	bl	8112074 <prvGetDisinheritPriorityAfterTimeout>
 8111f06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8111f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111f0a:	689b      	ldr	r3, [r3, #8]
 8111f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8111f0e:	4618      	mov	r0, r3
 8111f10:	f001 f9d0 	bl	81132b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8111f14:	f7ff f88a 	bl	811102c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8111f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8111f1a:	4618      	mov	r0, r3
 8111f1c:	3738      	adds	r7, #56	@ 0x38
 8111f1e:	46bd      	mov	sp, r7
 8111f20:	bd80      	pop	{r7, pc}
 8111f22:	bf00      	nop
 8111f24:	e000ed04 	.word	0xe000ed04

08111f28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8111f28:	b580      	push	{r7, lr}
 8111f2a:	b08e      	sub	sp, #56	@ 0x38
 8111f2c:	af00      	add	r7, sp, #0
 8111f2e:	60f8      	str	r0, [r7, #12]
 8111f30:	60b9      	str	r1, [r7, #8]
 8111f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8111f34:	68fb      	ldr	r3, [r7, #12]
 8111f36:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8111f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111f3a:	2b00      	cmp	r3, #0
 8111f3c:	d10b      	bne.n	8111f56 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8111f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111f42:	f383 8811 	msr	BASEPRI, r3
 8111f46:	f3bf 8f6f 	isb	sy
 8111f4a:	f3bf 8f4f 	dsb	sy
 8111f4e:	623b      	str	r3, [r7, #32]
}
 8111f50:	bf00      	nop
 8111f52:	bf00      	nop
 8111f54:	e7fd      	b.n	8111f52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111f56:	68bb      	ldr	r3, [r7, #8]
 8111f58:	2b00      	cmp	r3, #0
 8111f5a:	d103      	bne.n	8111f64 <xQueueReceiveFromISR+0x3c>
 8111f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111f60:	2b00      	cmp	r3, #0
 8111f62:	d101      	bne.n	8111f68 <xQueueReceiveFromISR+0x40>
 8111f64:	2301      	movs	r3, #1
 8111f66:	e000      	b.n	8111f6a <xQueueReceiveFromISR+0x42>
 8111f68:	2300      	movs	r3, #0
 8111f6a:	2b00      	cmp	r3, #0
 8111f6c:	d10b      	bne.n	8111f86 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8111f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111f72:	f383 8811 	msr	BASEPRI, r3
 8111f76:	f3bf 8f6f 	isb	sy
 8111f7a:	f3bf 8f4f 	dsb	sy
 8111f7e:	61fb      	str	r3, [r7, #28]
}
 8111f80:	bf00      	nop
 8111f82:	bf00      	nop
 8111f84:	e7fd      	b.n	8111f82 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8111f86:	f7ff f8ff 	bl	8111188 <vPortValidateInterruptPriority>
	__asm volatile
 8111f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8111f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111f92:	f383 8811 	msr	BASEPRI, r3
 8111f96:	f3bf 8f6f 	isb	sy
 8111f9a:	f3bf 8f4f 	dsb	sy
 8111f9e:	61ba      	str	r2, [r7, #24]
 8111fa0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8111fa2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8111fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111faa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8111fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111fae:	2b00      	cmp	r3, #0
 8111fb0:	d02f      	beq.n	8112012 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8111fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8111fbc:	68b9      	ldr	r1, [r7, #8]
 8111fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111fc0:	f000 f8da 	bl	8112178 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8111fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111fc6:	1e5a      	subs	r2, r3, #1
 8111fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111fca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8111fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8111fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111fd4:	d112      	bne.n	8111ffc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111fd8:	691b      	ldr	r3, [r3, #16]
 8111fda:	2b00      	cmp	r3, #0
 8111fdc:	d016      	beq.n	811200c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111fe0:	3310      	adds	r3, #16
 8111fe2:	4618      	mov	r0, r3
 8111fe4:	f000 fe9a 	bl	8112d1c <xTaskRemoveFromEventList>
 8111fe8:	4603      	mov	r3, r0
 8111fea:	2b00      	cmp	r3, #0
 8111fec:	d00e      	beq.n	811200c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8111fee:	687b      	ldr	r3, [r7, #4]
 8111ff0:	2b00      	cmp	r3, #0
 8111ff2:	d00b      	beq.n	811200c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8111ff4:	687b      	ldr	r3, [r7, #4]
 8111ff6:	2201      	movs	r2, #1
 8111ff8:	601a      	str	r2, [r3, #0]
 8111ffa:	e007      	b.n	811200c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8111ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8112000:	3301      	adds	r3, #1
 8112002:	b2db      	uxtb	r3, r3
 8112004:	b25a      	sxtb	r2, r3
 8112006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 811200c:	2301      	movs	r3, #1
 811200e:	637b      	str	r3, [r7, #52]	@ 0x34
 8112010:	e001      	b.n	8112016 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8112012:	2300      	movs	r3, #0
 8112014:	637b      	str	r3, [r7, #52]	@ 0x34
 8112016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112018:	613b      	str	r3, [r7, #16]
	__asm volatile
 811201a:	693b      	ldr	r3, [r7, #16]
 811201c:	f383 8811 	msr	BASEPRI, r3
}
 8112020:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8112022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8112024:	4618      	mov	r0, r3
 8112026:	3738      	adds	r7, #56	@ 0x38
 8112028:	46bd      	mov	sp, r7
 811202a:	bd80      	pop	{r7, pc}

0811202c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 811202c:	b580      	push	{r7, lr}
 811202e:	b084      	sub	sp, #16
 8112030:	af00      	add	r7, sp, #0
 8112032:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8112034:	687b      	ldr	r3, [r7, #4]
 8112036:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8112038:	68fb      	ldr	r3, [r7, #12]
 811203a:	2b00      	cmp	r3, #0
 811203c:	d10b      	bne.n	8112056 <vQueueDelete+0x2a>
	__asm volatile
 811203e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112042:	f383 8811 	msr	BASEPRI, r3
 8112046:	f3bf 8f6f 	isb	sy
 811204a:	f3bf 8f4f 	dsb	sy
 811204e:	60bb      	str	r3, [r7, #8]
}
 8112050:	bf00      	nop
 8112052:	bf00      	nop
 8112054:	e7fd      	b.n	8112052 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8112056:	68f8      	ldr	r0, [r7, #12]
 8112058:	f000 f95e 	bl	8112318 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 811205c:	68fb      	ldr	r3, [r7, #12]
 811205e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8112062:	2b00      	cmp	r3, #0
 8112064:	d102      	bne.n	811206c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8112066:	68f8      	ldr	r0, [r7, #12]
 8112068:	f7fe fcaa 	bl	81109c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 811206c:	bf00      	nop
 811206e:	3710      	adds	r7, #16
 8112070:	46bd      	mov	sp, r7
 8112072:	bd80      	pop	{r7, pc}

08112074 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8112074:	b480      	push	{r7}
 8112076:	b085      	sub	sp, #20
 8112078:	af00      	add	r7, sp, #0
 811207a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 811207c:	687b      	ldr	r3, [r7, #4]
 811207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112080:	2b00      	cmp	r3, #0
 8112082:	d006      	beq.n	8112092 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8112084:	687b      	ldr	r3, [r7, #4]
 8112086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8112088:	681b      	ldr	r3, [r3, #0]
 811208a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 811208e:	60fb      	str	r3, [r7, #12]
 8112090:	e001      	b.n	8112096 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8112092:	2300      	movs	r3, #0
 8112094:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8112096:	68fb      	ldr	r3, [r7, #12]
	}
 8112098:	4618      	mov	r0, r3
 811209a:	3714      	adds	r7, #20
 811209c:	46bd      	mov	sp, r7
 811209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81120a2:	4770      	bx	lr

081120a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81120a4:	b580      	push	{r7, lr}
 81120a6:	b086      	sub	sp, #24
 81120a8:	af00      	add	r7, sp, #0
 81120aa:	60f8      	str	r0, [r7, #12]
 81120ac:	60b9      	str	r1, [r7, #8]
 81120ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81120b0:	2300      	movs	r3, #0
 81120b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81120b4:	68fb      	ldr	r3, [r7, #12]
 81120b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81120b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81120ba:	68fb      	ldr	r3, [r7, #12]
 81120bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81120be:	2b00      	cmp	r3, #0
 81120c0:	d10d      	bne.n	81120de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81120c2:	68fb      	ldr	r3, [r7, #12]
 81120c4:	681b      	ldr	r3, [r3, #0]
 81120c6:	2b00      	cmp	r3, #0
 81120c8:	d14d      	bne.n	8112166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81120ca:	68fb      	ldr	r3, [r7, #12]
 81120cc:	689b      	ldr	r3, [r3, #8]
 81120ce:	4618      	mov	r0, r3
 81120d0:	f001 f880 	bl	81131d4 <xTaskPriorityDisinherit>
 81120d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81120d6:	68fb      	ldr	r3, [r7, #12]
 81120d8:	2200      	movs	r2, #0
 81120da:	609a      	str	r2, [r3, #8]
 81120dc:	e043      	b.n	8112166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81120de:	687b      	ldr	r3, [r7, #4]
 81120e0:	2b00      	cmp	r3, #0
 81120e2:	d119      	bne.n	8112118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81120e4:	68fb      	ldr	r3, [r7, #12]
 81120e6:	6858      	ldr	r0, [r3, #4]
 81120e8:	68fb      	ldr	r3, [r7, #12]
 81120ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81120ec:	461a      	mov	r2, r3
 81120ee:	68b9      	ldr	r1, [r7, #8]
 81120f0:	f010 f8e9 	bl	81222c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81120f4:	68fb      	ldr	r3, [r7, #12]
 81120f6:	685a      	ldr	r2, [r3, #4]
 81120f8:	68fb      	ldr	r3, [r7, #12]
 81120fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81120fc:	441a      	add	r2, r3
 81120fe:	68fb      	ldr	r3, [r7, #12]
 8112100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8112102:	68fb      	ldr	r3, [r7, #12]
 8112104:	685a      	ldr	r2, [r3, #4]
 8112106:	68fb      	ldr	r3, [r7, #12]
 8112108:	689b      	ldr	r3, [r3, #8]
 811210a:	429a      	cmp	r2, r3
 811210c:	d32b      	bcc.n	8112166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 811210e:	68fb      	ldr	r3, [r7, #12]
 8112110:	681a      	ldr	r2, [r3, #0]
 8112112:	68fb      	ldr	r3, [r7, #12]
 8112114:	605a      	str	r2, [r3, #4]
 8112116:	e026      	b.n	8112166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8112118:	68fb      	ldr	r3, [r7, #12]
 811211a:	68d8      	ldr	r0, [r3, #12]
 811211c:	68fb      	ldr	r3, [r7, #12]
 811211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8112120:	461a      	mov	r2, r3
 8112122:	68b9      	ldr	r1, [r7, #8]
 8112124:	f010 f8cf 	bl	81222c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8112128:	68fb      	ldr	r3, [r7, #12]
 811212a:	68da      	ldr	r2, [r3, #12]
 811212c:	68fb      	ldr	r3, [r7, #12]
 811212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8112130:	425b      	negs	r3, r3
 8112132:	441a      	add	r2, r3
 8112134:	68fb      	ldr	r3, [r7, #12]
 8112136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8112138:	68fb      	ldr	r3, [r7, #12]
 811213a:	68da      	ldr	r2, [r3, #12]
 811213c:	68fb      	ldr	r3, [r7, #12]
 811213e:	681b      	ldr	r3, [r3, #0]
 8112140:	429a      	cmp	r2, r3
 8112142:	d207      	bcs.n	8112154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8112144:	68fb      	ldr	r3, [r7, #12]
 8112146:	689a      	ldr	r2, [r3, #8]
 8112148:	68fb      	ldr	r3, [r7, #12]
 811214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811214c:	425b      	negs	r3, r3
 811214e:	441a      	add	r2, r3
 8112150:	68fb      	ldr	r3, [r7, #12]
 8112152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8112154:	687b      	ldr	r3, [r7, #4]
 8112156:	2b02      	cmp	r3, #2
 8112158:	d105      	bne.n	8112166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 811215a:	693b      	ldr	r3, [r7, #16]
 811215c:	2b00      	cmp	r3, #0
 811215e:	d002      	beq.n	8112166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8112160:	693b      	ldr	r3, [r7, #16]
 8112162:	3b01      	subs	r3, #1
 8112164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8112166:	693b      	ldr	r3, [r7, #16]
 8112168:	1c5a      	adds	r2, r3, #1
 811216a:	68fb      	ldr	r3, [r7, #12]
 811216c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 811216e:	697b      	ldr	r3, [r7, #20]
}
 8112170:	4618      	mov	r0, r3
 8112172:	3718      	adds	r7, #24
 8112174:	46bd      	mov	sp, r7
 8112176:	bd80      	pop	{r7, pc}

08112178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8112178:	b580      	push	{r7, lr}
 811217a:	b082      	sub	sp, #8
 811217c:	af00      	add	r7, sp, #0
 811217e:	6078      	str	r0, [r7, #4]
 8112180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8112182:	687b      	ldr	r3, [r7, #4]
 8112184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8112186:	2b00      	cmp	r3, #0
 8112188:	d018      	beq.n	81121bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 811218a:	687b      	ldr	r3, [r7, #4]
 811218c:	68da      	ldr	r2, [r3, #12]
 811218e:	687b      	ldr	r3, [r7, #4]
 8112190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8112192:	441a      	add	r2, r3
 8112194:	687b      	ldr	r3, [r7, #4]
 8112196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8112198:	687b      	ldr	r3, [r7, #4]
 811219a:	68da      	ldr	r2, [r3, #12]
 811219c:	687b      	ldr	r3, [r7, #4]
 811219e:	689b      	ldr	r3, [r3, #8]
 81121a0:	429a      	cmp	r2, r3
 81121a2:	d303      	bcc.n	81121ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81121a4:	687b      	ldr	r3, [r7, #4]
 81121a6:	681a      	ldr	r2, [r3, #0]
 81121a8:	687b      	ldr	r3, [r7, #4]
 81121aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81121ac:	687b      	ldr	r3, [r7, #4]
 81121ae:	68d9      	ldr	r1, [r3, #12]
 81121b0:	687b      	ldr	r3, [r7, #4]
 81121b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81121b4:	461a      	mov	r2, r3
 81121b6:	6838      	ldr	r0, [r7, #0]
 81121b8:	f010 f885 	bl	81222c6 <memcpy>
	}
}
 81121bc:	bf00      	nop
 81121be:	3708      	adds	r7, #8
 81121c0:	46bd      	mov	sp, r7
 81121c2:	bd80      	pop	{r7, pc}

081121c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81121c4:	b580      	push	{r7, lr}
 81121c6:	b084      	sub	sp, #16
 81121c8:	af00      	add	r7, sp, #0
 81121ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81121cc:	f7fe fefc 	bl	8110fc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81121d0:	687b      	ldr	r3, [r7, #4]
 81121d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81121d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81121d8:	e011      	b.n	81121fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81121da:	687b      	ldr	r3, [r7, #4]
 81121dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81121de:	2b00      	cmp	r3, #0
 81121e0:	d012      	beq.n	8112208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81121e2:	687b      	ldr	r3, [r7, #4]
 81121e4:	3324      	adds	r3, #36	@ 0x24
 81121e6:	4618      	mov	r0, r3
 81121e8:	f000 fd98 	bl	8112d1c <xTaskRemoveFromEventList>
 81121ec:	4603      	mov	r3, r0
 81121ee:	2b00      	cmp	r3, #0
 81121f0:	d001      	beq.n	81121f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81121f2:	f000 fe71 	bl	8112ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81121f6:	7bfb      	ldrb	r3, [r7, #15]
 81121f8:	3b01      	subs	r3, #1
 81121fa:	b2db      	uxtb	r3, r3
 81121fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81121fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8112202:	2b00      	cmp	r3, #0
 8112204:	dce9      	bgt.n	81121da <prvUnlockQueue+0x16>
 8112206:	e000      	b.n	811220a <prvUnlockQueue+0x46>
					break;
 8112208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 811220a:	687b      	ldr	r3, [r7, #4]
 811220c:	22ff      	movs	r2, #255	@ 0xff
 811220e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8112212:	f7fe ff0b 	bl	811102c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8112216:	f7fe fed7 	bl	8110fc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 811221a:	687b      	ldr	r3, [r7, #4]
 811221c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8112220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8112222:	e011      	b.n	8112248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8112224:	687b      	ldr	r3, [r7, #4]
 8112226:	691b      	ldr	r3, [r3, #16]
 8112228:	2b00      	cmp	r3, #0
 811222a:	d012      	beq.n	8112252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811222c:	687b      	ldr	r3, [r7, #4]
 811222e:	3310      	adds	r3, #16
 8112230:	4618      	mov	r0, r3
 8112232:	f000 fd73 	bl	8112d1c <xTaskRemoveFromEventList>
 8112236:	4603      	mov	r3, r0
 8112238:	2b00      	cmp	r3, #0
 811223a:	d001      	beq.n	8112240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 811223c:	f000 fe4c 	bl	8112ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8112240:	7bbb      	ldrb	r3, [r7, #14]
 8112242:	3b01      	subs	r3, #1
 8112244:	b2db      	uxtb	r3, r3
 8112246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8112248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 811224c:	2b00      	cmp	r3, #0
 811224e:	dce9      	bgt.n	8112224 <prvUnlockQueue+0x60>
 8112250:	e000      	b.n	8112254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8112252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8112254:	687b      	ldr	r3, [r7, #4]
 8112256:	22ff      	movs	r2, #255	@ 0xff
 8112258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 811225c:	f7fe fee6 	bl	811102c <vPortExitCritical>
}
 8112260:	bf00      	nop
 8112262:	3710      	adds	r7, #16
 8112264:	46bd      	mov	sp, r7
 8112266:	bd80      	pop	{r7, pc}

08112268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8112268:	b580      	push	{r7, lr}
 811226a:	b084      	sub	sp, #16
 811226c:	af00      	add	r7, sp, #0
 811226e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8112270:	f7fe feaa 	bl	8110fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8112274:	687b      	ldr	r3, [r7, #4]
 8112276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8112278:	2b00      	cmp	r3, #0
 811227a:	d102      	bne.n	8112282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 811227c:	2301      	movs	r3, #1
 811227e:	60fb      	str	r3, [r7, #12]
 8112280:	e001      	b.n	8112286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8112282:	2300      	movs	r3, #0
 8112284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8112286:	f7fe fed1 	bl	811102c <vPortExitCritical>

	return xReturn;
 811228a:	68fb      	ldr	r3, [r7, #12]
}
 811228c:	4618      	mov	r0, r3
 811228e:	3710      	adds	r7, #16
 8112290:	46bd      	mov	sp, r7
 8112292:	bd80      	pop	{r7, pc}

08112294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8112294:	b580      	push	{r7, lr}
 8112296:	b084      	sub	sp, #16
 8112298:	af00      	add	r7, sp, #0
 811229a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 811229c:	f7fe fe94 	bl	8110fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81122a0:	687b      	ldr	r3, [r7, #4]
 81122a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81122a4:	687b      	ldr	r3, [r7, #4]
 81122a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81122a8:	429a      	cmp	r2, r3
 81122aa:	d102      	bne.n	81122b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81122ac:	2301      	movs	r3, #1
 81122ae:	60fb      	str	r3, [r7, #12]
 81122b0:	e001      	b.n	81122b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81122b2:	2300      	movs	r3, #0
 81122b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81122b6:	f7fe feb9 	bl	811102c <vPortExitCritical>

	return xReturn;
 81122ba:	68fb      	ldr	r3, [r7, #12]
}
 81122bc:	4618      	mov	r0, r3
 81122be:	3710      	adds	r7, #16
 81122c0:	46bd      	mov	sp, r7
 81122c2:	bd80      	pop	{r7, pc}

081122c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81122c4:	b480      	push	{r7}
 81122c6:	b085      	sub	sp, #20
 81122c8:	af00      	add	r7, sp, #0
 81122ca:	6078      	str	r0, [r7, #4]
 81122cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81122ce:	2300      	movs	r3, #0
 81122d0:	60fb      	str	r3, [r7, #12]
 81122d2:	e014      	b.n	81122fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81122d4:	4a0f      	ldr	r2, [pc, #60]	@ (8112314 <vQueueAddToRegistry+0x50>)
 81122d6:	68fb      	ldr	r3, [r7, #12]
 81122d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81122dc:	2b00      	cmp	r3, #0
 81122de:	d10b      	bne.n	81122f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81122e0:	490c      	ldr	r1, [pc, #48]	@ (8112314 <vQueueAddToRegistry+0x50>)
 81122e2:	68fb      	ldr	r3, [r7, #12]
 81122e4:	683a      	ldr	r2, [r7, #0]
 81122e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81122ea:	4a0a      	ldr	r2, [pc, #40]	@ (8112314 <vQueueAddToRegistry+0x50>)
 81122ec:	68fb      	ldr	r3, [r7, #12]
 81122ee:	00db      	lsls	r3, r3, #3
 81122f0:	4413      	add	r3, r2
 81122f2:	687a      	ldr	r2, [r7, #4]
 81122f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81122f6:	e006      	b.n	8112306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81122f8:	68fb      	ldr	r3, [r7, #12]
 81122fa:	3301      	adds	r3, #1
 81122fc:	60fb      	str	r3, [r7, #12]
 81122fe:	68fb      	ldr	r3, [r7, #12]
 8112300:	2b07      	cmp	r3, #7
 8112302:	d9e7      	bls.n	81122d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8112304:	bf00      	nop
 8112306:	bf00      	nop
 8112308:	3714      	adds	r7, #20
 811230a:	46bd      	mov	sp, r7
 811230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112310:	4770      	bx	lr
 8112312:	bf00      	nop
 8112314:	24009a04 	.word	0x24009a04

08112318 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8112318:	b480      	push	{r7}
 811231a:	b085      	sub	sp, #20
 811231c:	af00      	add	r7, sp, #0
 811231e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8112320:	2300      	movs	r3, #0
 8112322:	60fb      	str	r3, [r7, #12]
 8112324:	e016      	b.n	8112354 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8112326:	4a10      	ldr	r2, [pc, #64]	@ (8112368 <vQueueUnregisterQueue+0x50>)
 8112328:	68fb      	ldr	r3, [r7, #12]
 811232a:	00db      	lsls	r3, r3, #3
 811232c:	4413      	add	r3, r2
 811232e:	685b      	ldr	r3, [r3, #4]
 8112330:	687a      	ldr	r2, [r7, #4]
 8112332:	429a      	cmp	r2, r3
 8112334:	d10b      	bne.n	811234e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8112336:	4a0c      	ldr	r2, [pc, #48]	@ (8112368 <vQueueUnregisterQueue+0x50>)
 8112338:	68fb      	ldr	r3, [r7, #12]
 811233a:	2100      	movs	r1, #0
 811233c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8112340:	4a09      	ldr	r2, [pc, #36]	@ (8112368 <vQueueUnregisterQueue+0x50>)
 8112342:	68fb      	ldr	r3, [r7, #12]
 8112344:	00db      	lsls	r3, r3, #3
 8112346:	4413      	add	r3, r2
 8112348:	2200      	movs	r2, #0
 811234a:	605a      	str	r2, [r3, #4]
				break;
 811234c:	e006      	b.n	811235c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 811234e:	68fb      	ldr	r3, [r7, #12]
 8112350:	3301      	adds	r3, #1
 8112352:	60fb      	str	r3, [r7, #12]
 8112354:	68fb      	ldr	r3, [r7, #12]
 8112356:	2b07      	cmp	r3, #7
 8112358:	d9e5      	bls.n	8112326 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 811235a:	bf00      	nop
 811235c:	bf00      	nop
 811235e:	3714      	adds	r7, #20
 8112360:	46bd      	mov	sp, r7
 8112362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112366:	4770      	bx	lr
 8112368:	24009a04 	.word	0x24009a04

0811236c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 811236c:	b580      	push	{r7, lr}
 811236e:	b086      	sub	sp, #24
 8112370:	af00      	add	r7, sp, #0
 8112372:	60f8      	str	r0, [r7, #12]
 8112374:	60b9      	str	r1, [r7, #8]
 8112376:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8112378:	68fb      	ldr	r3, [r7, #12]
 811237a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 811237c:	f7fe fe24 	bl	8110fc8 <vPortEnterCritical>
 8112380:	697b      	ldr	r3, [r7, #20]
 8112382:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8112386:	b25b      	sxtb	r3, r3
 8112388:	f1b3 3fff 	cmp.w	r3, #4294967295
 811238c:	d103      	bne.n	8112396 <vQueueWaitForMessageRestricted+0x2a>
 811238e:	697b      	ldr	r3, [r7, #20]
 8112390:	2200      	movs	r2, #0
 8112392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8112396:	697b      	ldr	r3, [r7, #20]
 8112398:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 811239c:	b25b      	sxtb	r3, r3
 811239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81123a2:	d103      	bne.n	81123ac <vQueueWaitForMessageRestricted+0x40>
 81123a4:	697b      	ldr	r3, [r7, #20]
 81123a6:	2200      	movs	r2, #0
 81123a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81123ac:	f7fe fe3e 	bl	811102c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81123b0:	697b      	ldr	r3, [r7, #20]
 81123b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81123b4:	2b00      	cmp	r3, #0
 81123b6:	d106      	bne.n	81123c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81123b8:	697b      	ldr	r3, [r7, #20]
 81123ba:	3324      	adds	r3, #36	@ 0x24
 81123bc:	687a      	ldr	r2, [r7, #4]
 81123be:	68b9      	ldr	r1, [r7, #8]
 81123c0:	4618      	mov	r0, r3
 81123c2:	f000 fc7f 	bl	8112cc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 81123c6:	6978      	ldr	r0, [r7, #20]
 81123c8:	f7ff fefc 	bl	81121c4 <prvUnlockQueue>
	}
 81123cc:	bf00      	nop
 81123ce:	3718      	adds	r7, #24
 81123d0:	46bd      	mov	sp, r7
 81123d2:	bd80      	pop	{r7, pc}

081123d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81123d4:	b580      	push	{r7, lr}
 81123d6:	b08e      	sub	sp, #56	@ 0x38
 81123d8:	af04      	add	r7, sp, #16
 81123da:	60f8      	str	r0, [r7, #12]
 81123dc:	60b9      	str	r1, [r7, #8]
 81123de:	607a      	str	r2, [r7, #4]
 81123e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81123e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81123e4:	2b00      	cmp	r3, #0
 81123e6:	d10b      	bne.n	8112400 <xTaskCreateStatic+0x2c>
	__asm volatile
 81123e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81123ec:	f383 8811 	msr	BASEPRI, r3
 81123f0:	f3bf 8f6f 	isb	sy
 81123f4:	f3bf 8f4f 	dsb	sy
 81123f8:	623b      	str	r3, [r7, #32]
}
 81123fa:	bf00      	nop
 81123fc:	bf00      	nop
 81123fe:	e7fd      	b.n	81123fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8112400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112402:	2b00      	cmp	r3, #0
 8112404:	d10b      	bne.n	811241e <xTaskCreateStatic+0x4a>
	__asm volatile
 8112406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811240a:	f383 8811 	msr	BASEPRI, r3
 811240e:	f3bf 8f6f 	isb	sy
 8112412:	f3bf 8f4f 	dsb	sy
 8112416:	61fb      	str	r3, [r7, #28]
}
 8112418:	bf00      	nop
 811241a:	bf00      	nop
 811241c:	e7fd      	b.n	811241a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 811241e:	23a8      	movs	r3, #168	@ 0xa8
 8112420:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8112422:	693b      	ldr	r3, [r7, #16]
 8112424:	2ba8      	cmp	r3, #168	@ 0xa8
 8112426:	d00b      	beq.n	8112440 <xTaskCreateStatic+0x6c>
	__asm volatile
 8112428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811242c:	f383 8811 	msr	BASEPRI, r3
 8112430:	f3bf 8f6f 	isb	sy
 8112434:	f3bf 8f4f 	dsb	sy
 8112438:	61bb      	str	r3, [r7, #24]
}
 811243a:	bf00      	nop
 811243c:	bf00      	nop
 811243e:	e7fd      	b.n	811243c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8112440:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8112442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112444:	2b00      	cmp	r3, #0
 8112446:	d01e      	beq.n	8112486 <xTaskCreateStatic+0xb2>
 8112448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811244a:	2b00      	cmp	r3, #0
 811244c:	d01b      	beq.n	8112486 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 811244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112450:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8112452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8112456:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8112458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811245a:	2202      	movs	r2, #2
 811245c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8112460:	2300      	movs	r3, #0
 8112462:	9303      	str	r3, [sp, #12]
 8112464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112466:	9302      	str	r3, [sp, #8]
 8112468:	f107 0314 	add.w	r3, r7, #20
 811246c:	9301      	str	r3, [sp, #4]
 811246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112470:	9300      	str	r3, [sp, #0]
 8112472:	683b      	ldr	r3, [r7, #0]
 8112474:	687a      	ldr	r2, [r7, #4]
 8112476:	68b9      	ldr	r1, [r7, #8]
 8112478:	68f8      	ldr	r0, [r7, #12]
 811247a:	f000 f851 	bl	8112520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 811247e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8112480:	f000 f8f6 	bl	8112670 <prvAddNewTaskToReadyList>
 8112484:	e001      	b.n	811248a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8112486:	2300      	movs	r3, #0
 8112488:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 811248a:	697b      	ldr	r3, [r7, #20]
	}
 811248c:	4618      	mov	r0, r3
 811248e:	3728      	adds	r7, #40	@ 0x28
 8112490:	46bd      	mov	sp, r7
 8112492:	bd80      	pop	{r7, pc}

08112494 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8112494:	b580      	push	{r7, lr}
 8112496:	b08c      	sub	sp, #48	@ 0x30
 8112498:	af04      	add	r7, sp, #16
 811249a:	60f8      	str	r0, [r7, #12]
 811249c:	60b9      	str	r1, [r7, #8]
 811249e:	603b      	str	r3, [r7, #0]
 81124a0:	4613      	mov	r3, r2
 81124a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81124a4:	88fb      	ldrh	r3, [r7, #6]
 81124a6:	009b      	lsls	r3, r3, #2
 81124a8:	4618      	mov	r0, r3
 81124aa:	f7fe f9bb 	bl	8110824 <pvPortMalloc>
 81124ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81124b0:	697b      	ldr	r3, [r7, #20]
 81124b2:	2b00      	cmp	r3, #0
 81124b4:	d00e      	beq.n	81124d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81124b6:	20a8      	movs	r0, #168	@ 0xa8
 81124b8:	f7fe f9b4 	bl	8110824 <pvPortMalloc>
 81124bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81124be:	69fb      	ldr	r3, [r7, #28]
 81124c0:	2b00      	cmp	r3, #0
 81124c2:	d003      	beq.n	81124cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81124c4:	69fb      	ldr	r3, [r7, #28]
 81124c6:	697a      	ldr	r2, [r7, #20]
 81124c8:	631a      	str	r2, [r3, #48]	@ 0x30
 81124ca:	e005      	b.n	81124d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81124cc:	6978      	ldr	r0, [r7, #20]
 81124ce:	f7fe fa77 	bl	81109c0 <vPortFree>
 81124d2:	e001      	b.n	81124d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81124d4:	2300      	movs	r3, #0
 81124d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81124d8:	69fb      	ldr	r3, [r7, #28]
 81124da:	2b00      	cmp	r3, #0
 81124dc:	d017      	beq.n	811250e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81124de:	69fb      	ldr	r3, [r7, #28]
 81124e0:	2200      	movs	r2, #0
 81124e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81124e6:	88fa      	ldrh	r2, [r7, #6]
 81124e8:	2300      	movs	r3, #0
 81124ea:	9303      	str	r3, [sp, #12]
 81124ec:	69fb      	ldr	r3, [r7, #28]
 81124ee:	9302      	str	r3, [sp, #8]
 81124f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81124f2:	9301      	str	r3, [sp, #4]
 81124f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81124f6:	9300      	str	r3, [sp, #0]
 81124f8:	683b      	ldr	r3, [r7, #0]
 81124fa:	68b9      	ldr	r1, [r7, #8]
 81124fc:	68f8      	ldr	r0, [r7, #12]
 81124fe:	f000 f80f 	bl	8112520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8112502:	69f8      	ldr	r0, [r7, #28]
 8112504:	f000 f8b4 	bl	8112670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8112508:	2301      	movs	r3, #1
 811250a:	61bb      	str	r3, [r7, #24]
 811250c:	e002      	b.n	8112514 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 811250e:	f04f 33ff 	mov.w	r3, #4294967295
 8112512:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8112514:	69bb      	ldr	r3, [r7, #24]
	}
 8112516:	4618      	mov	r0, r3
 8112518:	3720      	adds	r7, #32
 811251a:	46bd      	mov	sp, r7
 811251c:	bd80      	pop	{r7, pc}
	...

08112520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8112520:	b580      	push	{r7, lr}
 8112522:	b088      	sub	sp, #32
 8112524:	af00      	add	r7, sp, #0
 8112526:	60f8      	str	r0, [r7, #12]
 8112528:	60b9      	str	r1, [r7, #8]
 811252a:	607a      	str	r2, [r7, #4]
 811252c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 811252e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112530:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8112532:	687b      	ldr	r3, [r7, #4]
 8112534:	009b      	lsls	r3, r3, #2
 8112536:	461a      	mov	r2, r3
 8112538:	21a5      	movs	r1, #165	@ 0xa5
 811253a:	f00f fdc9 	bl	81220d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 811253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8112542:	6879      	ldr	r1, [r7, #4]
 8112544:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8112548:	440b      	add	r3, r1
 811254a:	009b      	lsls	r3, r3, #2
 811254c:	4413      	add	r3, r2
 811254e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8112550:	69bb      	ldr	r3, [r7, #24]
 8112552:	f023 0307 	bic.w	r3, r3, #7
 8112556:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8112558:	69bb      	ldr	r3, [r7, #24]
 811255a:	f003 0307 	and.w	r3, r3, #7
 811255e:	2b00      	cmp	r3, #0
 8112560:	d00b      	beq.n	811257a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8112562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112566:	f383 8811 	msr	BASEPRI, r3
 811256a:	f3bf 8f6f 	isb	sy
 811256e:	f3bf 8f4f 	dsb	sy
 8112572:	617b      	str	r3, [r7, #20]
}
 8112574:	bf00      	nop
 8112576:	bf00      	nop
 8112578:	e7fd      	b.n	8112576 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 811257a:	68bb      	ldr	r3, [r7, #8]
 811257c:	2b00      	cmp	r3, #0
 811257e:	d01f      	beq.n	81125c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8112580:	2300      	movs	r3, #0
 8112582:	61fb      	str	r3, [r7, #28]
 8112584:	e012      	b.n	81125ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8112586:	68ba      	ldr	r2, [r7, #8]
 8112588:	69fb      	ldr	r3, [r7, #28]
 811258a:	4413      	add	r3, r2
 811258c:	7819      	ldrb	r1, [r3, #0]
 811258e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112590:	69fb      	ldr	r3, [r7, #28]
 8112592:	4413      	add	r3, r2
 8112594:	3334      	adds	r3, #52	@ 0x34
 8112596:	460a      	mov	r2, r1
 8112598:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 811259a:	68ba      	ldr	r2, [r7, #8]
 811259c:	69fb      	ldr	r3, [r7, #28]
 811259e:	4413      	add	r3, r2
 81125a0:	781b      	ldrb	r3, [r3, #0]
 81125a2:	2b00      	cmp	r3, #0
 81125a4:	d006      	beq.n	81125b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81125a6:	69fb      	ldr	r3, [r7, #28]
 81125a8:	3301      	adds	r3, #1
 81125aa:	61fb      	str	r3, [r7, #28]
 81125ac:	69fb      	ldr	r3, [r7, #28]
 81125ae:	2b0f      	cmp	r3, #15
 81125b0:	d9e9      	bls.n	8112586 <prvInitialiseNewTask+0x66>
 81125b2:	e000      	b.n	81125b6 <prvInitialiseNewTask+0x96>
			{
				break;
 81125b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81125b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125b8:	2200      	movs	r2, #0
 81125ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81125be:	e003      	b.n	81125c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81125c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125c2:	2200      	movs	r2, #0
 81125c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81125c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81125ca:	2b37      	cmp	r3, #55	@ 0x37
 81125cc:	d901      	bls.n	81125d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81125ce:	2337      	movs	r3, #55	@ 0x37
 81125d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81125d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81125d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81125d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81125dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81125de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125e0:	2200      	movs	r2, #0
 81125e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81125e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125e6:	3304      	adds	r3, #4
 81125e8:	4618      	mov	r0, r3
 81125ea:	f7fe fb29 	bl	8110c40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81125ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125f0:	3318      	adds	r3, #24
 81125f2:	4618      	mov	r0, r3
 81125f4:	f7fe fb24 	bl	8110c40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81125f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81125fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81125fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81125fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112600:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8112604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112606:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8112608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811260a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811260c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 811260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112610:	2200      	movs	r2, #0
 8112612:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8112616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112618:	2200      	movs	r2, #0
 811261a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 811261e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112620:	3354      	adds	r3, #84	@ 0x54
 8112622:	224c      	movs	r2, #76	@ 0x4c
 8112624:	2100      	movs	r1, #0
 8112626:	4618      	mov	r0, r3
 8112628:	f00f fd52 	bl	81220d0 <memset>
 811262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811262e:	4a0d      	ldr	r2, [pc, #52]	@ (8112664 <prvInitialiseNewTask+0x144>)
 8112630:	659a      	str	r2, [r3, #88]	@ 0x58
 8112632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112634:	4a0c      	ldr	r2, [pc, #48]	@ (8112668 <prvInitialiseNewTask+0x148>)
 8112636:	65da      	str	r2, [r3, #92]	@ 0x5c
 8112638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811263a:	4a0c      	ldr	r2, [pc, #48]	@ (811266c <prvInitialiseNewTask+0x14c>)
 811263c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 811263e:	683a      	ldr	r2, [r7, #0]
 8112640:	68f9      	ldr	r1, [r7, #12]
 8112642:	69b8      	ldr	r0, [r7, #24]
 8112644:	f7fe fb90 	bl	8110d68 <pxPortInitialiseStack>
 8112648:	4602      	mov	r2, r0
 811264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811264c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 811264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112650:	2b00      	cmp	r3, #0
 8112652:	d002      	beq.n	811265a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8112654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811265a:	bf00      	nop
 811265c:	3720      	adds	r7, #32
 811265e:	46bd      	mov	sp, r7
 8112660:	bd80      	pop	{r7, pc}
 8112662:	bf00      	nop
 8112664:	24012710 	.word	0x24012710
 8112668:	24012778 	.word	0x24012778
 811266c:	240127e0 	.word	0x240127e0

08112670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8112670:	b580      	push	{r7, lr}
 8112672:	b082      	sub	sp, #8
 8112674:	af00      	add	r7, sp, #0
 8112676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8112678:	f7fe fca6 	bl	8110fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 811267c:	4b2d      	ldr	r3, [pc, #180]	@ (8112734 <prvAddNewTaskToReadyList+0xc4>)
 811267e:	681b      	ldr	r3, [r3, #0]
 8112680:	3301      	adds	r3, #1
 8112682:	4a2c      	ldr	r2, [pc, #176]	@ (8112734 <prvAddNewTaskToReadyList+0xc4>)
 8112684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8112686:	4b2c      	ldr	r3, [pc, #176]	@ (8112738 <prvAddNewTaskToReadyList+0xc8>)
 8112688:	681b      	ldr	r3, [r3, #0]
 811268a:	2b00      	cmp	r3, #0
 811268c:	d109      	bne.n	81126a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 811268e:	4a2a      	ldr	r2, [pc, #168]	@ (8112738 <prvAddNewTaskToReadyList+0xc8>)
 8112690:	687b      	ldr	r3, [r7, #4]
 8112692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8112694:	4b27      	ldr	r3, [pc, #156]	@ (8112734 <prvAddNewTaskToReadyList+0xc4>)
 8112696:	681b      	ldr	r3, [r3, #0]
 8112698:	2b01      	cmp	r3, #1
 811269a:	d110      	bne.n	81126be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 811269c:	f000 fc40 	bl	8112f20 <prvInitialiseTaskLists>
 81126a0:	e00d      	b.n	81126be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81126a2:	4b26      	ldr	r3, [pc, #152]	@ (811273c <prvAddNewTaskToReadyList+0xcc>)
 81126a4:	681b      	ldr	r3, [r3, #0]
 81126a6:	2b00      	cmp	r3, #0
 81126a8:	d109      	bne.n	81126be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81126aa:	4b23      	ldr	r3, [pc, #140]	@ (8112738 <prvAddNewTaskToReadyList+0xc8>)
 81126ac:	681b      	ldr	r3, [r3, #0]
 81126ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81126b0:	687b      	ldr	r3, [r7, #4]
 81126b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81126b4:	429a      	cmp	r2, r3
 81126b6:	d802      	bhi.n	81126be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81126b8:	4a1f      	ldr	r2, [pc, #124]	@ (8112738 <prvAddNewTaskToReadyList+0xc8>)
 81126ba:	687b      	ldr	r3, [r7, #4]
 81126bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81126be:	4b20      	ldr	r3, [pc, #128]	@ (8112740 <prvAddNewTaskToReadyList+0xd0>)
 81126c0:	681b      	ldr	r3, [r3, #0]
 81126c2:	3301      	adds	r3, #1
 81126c4:	4a1e      	ldr	r2, [pc, #120]	@ (8112740 <prvAddNewTaskToReadyList+0xd0>)
 81126c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81126c8:	4b1d      	ldr	r3, [pc, #116]	@ (8112740 <prvAddNewTaskToReadyList+0xd0>)
 81126ca:	681a      	ldr	r2, [r3, #0]
 81126cc:	687b      	ldr	r3, [r7, #4]
 81126ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81126d0:	687b      	ldr	r3, [r7, #4]
 81126d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81126d4:	4b1b      	ldr	r3, [pc, #108]	@ (8112744 <prvAddNewTaskToReadyList+0xd4>)
 81126d6:	681b      	ldr	r3, [r3, #0]
 81126d8:	429a      	cmp	r2, r3
 81126da:	d903      	bls.n	81126e4 <prvAddNewTaskToReadyList+0x74>
 81126dc:	687b      	ldr	r3, [r7, #4]
 81126de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81126e0:	4a18      	ldr	r2, [pc, #96]	@ (8112744 <prvAddNewTaskToReadyList+0xd4>)
 81126e2:	6013      	str	r3, [r2, #0]
 81126e4:	687b      	ldr	r3, [r7, #4]
 81126e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81126e8:	4613      	mov	r3, r2
 81126ea:	009b      	lsls	r3, r3, #2
 81126ec:	4413      	add	r3, r2
 81126ee:	009b      	lsls	r3, r3, #2
 81126f0:	4a15      	ldr	r2, [pc, #84]	@ (8112748 <prvAddNewTaskToReadyList+0xd8>)
 81126f2:	441a      	add	r2, r3
 81126f4:	687b      	ldr	r3, [r7, #4]
 81126f6:	3304      	adds	r3, #4
 81126f8:	4619      	mov	r1, r3
 81126fa:	4610      	mov	r0, r2
 81126fc:	f7fe faad 	bl	8110c5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8112700:	f7fe fc94 	bl	811102c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8112704:	4b0d      	ldr	r3, [pc, #52]	@ (811273c <prvAddNewTaskToReadyList+0xcc>)
 8112706:	681b      	ldr	r3, [r3, #0]
 8112708:	2b00      	cmp	r3, #0
 811270a:	d00e      	beq.n	811272a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 811270c:	4b0a      	ldr	r3, [pc, #40]	@ (8112738 <prvAddNewTaskToReadyList+0xc8>)
 811270e:	681b      	ldr	r3, [r3, #0]
 8112710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112712:	687b      	ldr	r3, [r7, #4]
 8112714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112716:	429a      	cmp	r2, r3
 8112718:	d207      	bcs.n	811272a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 811271a:	4b0c      	ldr	r3, [pc, #48]	@ (811274c <prvAddNewTaskToReadyList+0xdc>)
 811271c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112720:	601a      	str	r2, [r3, #0]
 8112722:	f3bf 8f4f 	dsb	sy
 8112726:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811272a:	bf00      	nop
 811272c:	3708      	adds	r7, #8
 811272e:	46bd      	mov	sp, r7
 8112730:	bd80      	pop	{r7, pc}
 8112732:	bf00      	nop
 8112734:	24009f18 	.word	0x24009f18
 8112738:	24009a44 	.word	0x24009a44
 811273c:	24009f24 	.word	0x24009f24
 8112740:	24009f34 	.word	0x24009f34
 8112744:	24009f20 	.word	0x24009f20
 8112748:	24009a48 	.word	0x24009a48
 811274c:	e000ed04 	.word	0xe000ed04

08112750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8112750:	b580      	push	{r7, lr}
 8112752:	b084      	sub	sp, #16
 8112754:	af00      	add	r7, sp, #0
 8112756:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8112758:	2300      	movs	r3, #0
 811275a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 811275c:	687b      	ldr	r3, [r7, #4]
 811275e:	2b00      	cmp	r3, #0
 8112760:	d018      	beq.n	8112794 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8112762:	4b14      	ldr	r3, [pc, #80]	@ (81127b4 <vTaskDelay+0x64>)
 8112764:	681b      	ldr	r3, [r3, #0]
 8112766:	2b00      	cmp	r3, #0
 8112768:	d00b      	beq.n	8112782 <vTaskDelay+0x32>
	__asm volatile
 811276a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811276e:	f383 8811 	msr	BASEPRI, r3
 8112772:	f3bf 8f6f 	isb	sy
 8112776:	f3bf 8f4f 	dsb	sy
 811277a:	60bb      	str	r3, [r7, #8]
}
 811277c:	bf00      	nop
 811277e:	bf00      	nop
 8112780:	e7fd      	b.n	811277e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8112782:	f000 f88b 	bl	811289c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8112786:	2100      	movs	r1, #0
 8112788:	6878      	ldr	r0, [r7, #4]
 811278a:	f000 fe2b 	bl	81133e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 811278e:	f000 f893 	bl	81128b8 <xTaskResumeAll>
 8112792:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8112794:	68fb      	ldr	r3, [r7, #12]
 8112796:	2b00      	cmp	r3, #0
 8112798:	d107      	bne.n	81127aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 811279a:	4b07      	ldr	r3, [pc, #28]	@ (81127b8 <vTaskDelay+0x68>)
 811279c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81127a0:	601a      	str	r2, [r3, #0]
 81127a2:	f3bf 8f4f 	dsb	sy
 81127a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81127aa:	bf00      	nop
 81127ac:	3710      	adds	r7, #16
 81127ae:	46bd      	mov	sp, r7
 81127b0:	bd80      	pop	{r7, pc}
 81127b2:	bf00      	nop
 81127b4:	24009f40 	.word	0x24009f40
 81127b8:	e000ed04 	.word	0xe000ed04

081127bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81127bc:	b580      	push	{r7, lr}
 81127be:	b08a      	sub	sp, #40	@ 0x28
 81127c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81127c2:	2300      	movs	r3, #0
 81127c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81127c6:	2300      	movs	r3, #0
 81127c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81127ca:	463a      	mov	r2, r7
 81127cc:	1d39      	adds	r1, r7, #4
 81127ce:	f107 0308 	add.w	r3, r7, #8
 81127d2:	4618      	mov	r0, r3
 81127d4:	f7fd fff2 	bl	81107bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81127d8:	6839      	ldr	r1, [r7, #0]
 81127da:	687b      	ldr	r3, [r7, #4]
 81127dc:	68ba      	ldr	r2, [r7, #8]
 81127de:	9202      	str	r2, [sp, #8]
 81127e0:	9301      	str	r3, [sp, #4]
 81127e2:	2300      	movs	r3, #0
 81127e4:	9300      	str	r3, [sp, #0]
 81127e6:	2300      	movs	r3, #0
 81127e8:	460a      	mov	r2, r1
 81127ea:	4924      	ldr	r1, [pc, #144]	@ (811287c <vTaskStartScheduler+0xc0>)
 81127ec:	4824      	ldr	r0, [pc, #144]	@ (8112880 <vTaskStartScheduler+0xc4>)
 81127ee:	f7ff fdf1 	bl	81123d4 <xTaskCreateStatic>
 81127f2:	4603      	mov	r3, r0
 81127f4:	4a23      	ldr	r2, [pc, #140]	@ (8112884 <vTaskStartScheduler+0xc8>)
 81127f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81127f8:	4b22      	ldr	r3, [pc, #136]	@ (8112884 <vTaskStartScheduler+0xc8>)
 81127fa:	681b      	ldr	r3, [r3, #0]
 81127fc:	2b00      	cmp	r3, #0
 81127fe:	d002      	beq.n	8112806 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8112800:	2301      	movs	r3, #1
 8112802:	617b      	str	r3, [r7, #20]
 8112804:	e001      	b.n	811280a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8112806:	2300      	movs	r3, #0
 8112808:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 811280a:	697b      	ldr	r3, [r7, #20]
 811280c:	2b01      	cmp	r3, #1
 811280e:	d102      	bne.n	8112816 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8112810:	f000 fe3c 	bl	811348c <xTimerCreateTimerTask>
 8112814:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8112816:	697b      	ldr	r3, [r7, #20]
 8112818:	2b01      	cmp	r3, #1
 811281a:	d11b      	bne.n	8112854 <vTaskStartScheduler+0x98>
	__asm volatile
 811281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112820:	f383 8811 	msr	BASEPRI, r3
 8112824:	f3bf 8f6f 	isb	sy
 8112828:	f3bf 8f4f 	dsb	sy
 811282c:	613b      	str	r3, [r7, #16]
}
 811282e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8112830:	4b15      	ldr	r3, [pc, #84]	@ (8112888 <vTaskStartScheduler+0xcc>)
 8112832:	681b      	ldr	r3, [r3, #0]
 8112834:	3354      	adds	r3, #84	@ 0x54
 8112836:	4a15      	ldr	r2, [pc, #84]	@ (811288c <vTaskStartScheduler+0xd0>)
 8112838:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 811283a:	4b15      	ldr	r3, [pc, #84]	@ (8112890 <vTaskStartScheduler+0xd4>)
 811283c:	f04f 32ff 	mov.w	r2, #4294967295
 8112840:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8112842:	4b14      	ldr	r3, [pc, #80]	@ (8112894 <vTaskStartScheduler+0xd8>)
 8112844:	2201      	movs	r2, #1
 8112846:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8112848:	4b13      	ldr	r3, [pc, #76]	@ (8112898 <vTaskStartScheduler+0xdc>)
 811284a:	2200      	movs	r2, #0
 811284c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 811284e:	f7fe fb17 	bl	8110e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8112852:	e00f      	b.n	8112874 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8112854:	697b      	ldr	r3, [r7, #20]
 8112856:	f1b3 3fff 	cmp.w	r3, #4294967295
 811285a:	d10b      	bne.n	8112874 <vTaskStartScheduler+0xb8>
	__asm volatile
 811285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112860:	f383 8811 	msr	BASEPRI, r3
 8112864:	f3bf 8f6f 	isb	sy
 8112868:	f3bf 8f4f 	dsb	sy
 811286c:	60fb      	str	r3, [r7, #12]
}
 811286e:	bf00      	nop
 8112870:	bf00      	nop
 8112872:	e7fd      	b.n	8112870 <vTaskStartScheduler+0xb4>
}
 8112874:	bf00      	nop
 8112876:	3718      	adds	r7, #24
 8112878:	46bd      	mov	sp, r7
 811287a:	bd80      	pop	{r7, pc}
 811287c:	08124d8c 	.word	0x08124d8c
 8112880:	08112ef1 	.word	0x08112ef1
 8112884:	24009f3c 	.word	0x24009f3c
 8112888:	24009a44 	.word	0x24009a44
 811288c:	24000060 	.word	0x24000060
 8112890:	24009f38 	.word	0x24009f38
 8112894:	24009f24 	.word	0x24009f24
 8112898:	24009f1c 	.word	0x24009f1c

0811289c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 811289c:	b480      	push	{r7}
 811289e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81128a0:	4b04      	ldr	r3, [pc, #16]	@ (81128b4 <vTaskSuspendAll+0x18>)
 81128a2:	681b      	ldr	r3, [r3, #0]
 81128a4:	3301      	adds	r3, #1
 81128a6:	4a03      	ldr	r2, [pc, #12]	@ (81128b4 <vTaskSuspendAll+0x18>)
 81128a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81128aa:	bf00      	nop
 81128ac:	46bd      	mov	sp, r7
 81128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81128b2:	4770      	bx	lr
 81128b4:	24009f40 	.word	0x24009f40

081128b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81128b8:	b580      	push	{r7, lr}
 81128ba:	b084      	sub	sp, #16
 81128bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81128be:	2300      	movs	r3, #0
 81128c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81128c2:	2300      	movs	r3, #0
 81128c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81128c6:	4b42      	ldr	r3, [pc, #264]	@ (81129d0 <xTaskResumeAll+0x118>)
 81128c8:	681b      	ldr	r3, [r3, #0]
 81128ca:	2b00      	cmp	r3, #0
 81128cc:	d10b      	bne.n	81128e6 <xTaskResumeAll+0x2e>
	__asm volatile
 81128ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81128d2:	f383 8811 	msr	BASEPRI, r3
 81128d6:	f3bf 8f6f 	isb	sy
 81128da:	f3bf 8f4f 	dsb	sy
 81128de:	603b      	str	r3, [r7, #0]
}
 81128e0:	bf00      	nop
 81128e2:	bf00      	nop
 81128e4:	e7fd      	b.n	81128e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81128e6:	f7fe fb6f 	bl	8110fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81128ea:	4b39      	ldr	r3, [pc, #228]	@ (81129d0 <xTaskResumeAll+0x118>)
 81128ec:	681b      	ldr	r3, [r3, #0]
 81128ee:	3b01      	subs	r3, #1
 81128f0:	4a37      	ldr	r2, [pc, #220]	@ (81129d0 <xTaskResumeAll+0x118>)
 81128f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81128f4:	4b36      	ldr	r3, [pc, #216]	@ (81129d0 <xTaskResumeAll+0x118>)
 81128f6:	681b      	ldr	r3, [r3, #0]
 81128f8:	2b00      	cmp	r3, #0
 81128fa:	d162      	bne.n	81129c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81128fc:	4b35      	ldr	r3, [pc, #212]	@ (81129d4 <xTaskResumeAll+0x11c>)
 81128fe:	681b      	ldr	r3, [r3, #0]
 8112900:	2b00      	cmp	r3, #0
 8112902:	d05e      	beq.n	81129c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8112904:	e02f      	b.n	8112966 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112906:	4b34      	ldr	r3, [pc, #208]	@ (81129d8 <xTaskResumeAll+0x120>)
 8112908:	68db      	ldr	r3, [r3, #12]
 811290a:	68db      	ldr	r3, [r3, #12]
 811290c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 811290e:	68fb      	ldr	r3, [r7, #12]
 8112910:	3318      	adds	r3, #24
 8112912:	4618      	mov	r0, r3
 8112914:	f7fe f9fe 	bl	8110d14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8112918:	68fb      	ldr	r3, [r7, #12]
 811291a:	3304      	adds	r3, #4
 811291c:	4618      	mov	r0, r3
 811291e:	f7fe f9f9 	bl	8110d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8112922:	68fb      	ldr	r3, [r7, #12]
 8112924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112926:	4b2d      	ldr	r3, [pc, #180]	@ (81129dc <xTaskResumeAll+0x124>)
 8112928:	681b      	ldr	r3, [r3, #0]
 811292a:	429a      	cmp	r2, r3
 811292c:	d903      	bls.n	8112936 <xTaskResumeAll+0x7e>
 811292e:	68fb      	ldr	r3, [r7, #12]
 8112930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112932:	4a2a      	ldr	r2, [pc, #168]	@ (81129dc <xTaskResumeAll+0x124>)
 8112934:	6013      	str	r3, [r2, #0]
 8112936:	68fb      	ldr	r3, [r7, #12]
 8112938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811293a:	4613      	mov	r3, r2
 811293c:	009b      	lsls	r3, r3, #2
 811293e:	4413      	add	r3, r2
 8112940:	009b      	lsls	r3, r3, #2
 8112942:	4a27      	ldr	r2, [pc, #156]	@ (81129e0 <xTaskResumeAll+0x128>)
 8112944:	441a      	add	r2, r3
 8112946:	68fb      	ldr	r3, [r7, #12]
 8112948:	3304      	adds	r3, #4
 811294a:	4619      	mov	r1, r3
 811294c:	4610      	mov	r0, r2
 811294e:	f7fe f984 	bl	8110c5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8112952:	68fb      	ldr	r3, [r7, #12]
 8112954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112956:	4b23      	ldr	r3, [pc, #140]	@ (81129e4 <xTaskResumeAll+0x12c>)
 8112958:	681b      	ldr	r3, [r3, #0]
 811295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811295c:	429a      	cmp	r2, r3
 811295e:	d302      	bcc.n	8112966 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8112960:	4b21      	ldr	r3, [pc, #132]	@ (81129e8 <xTaskResumeAll+0x130>)
 8112962:	2201      	movs	r2, #1
 8112964:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8112966:	4b1c      	ldr	r3, [pc, #112]	@ (81129d8 <xTaskResumeAll+0x120>)
 8112968:	681b      	ldr	r3, [r3, #0]
 811296a:	2b00      	cmp	r3, #0
 811296c:	d1cb      	bne.n	8112906 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 811296e:	68fb      	ldr	r3, [r7, #12]
 8112970:	2b00      	cmp	r3, #0
 8112972:	d001      	beq.n	8112978 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8112974:	f000 fb78 	bl	8113068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8112978:	4b1c      	ldr	r3, [pc, #112]	@ (81129ec <xTaskResumeAll+0x134>)
 811297a:	681b      	ldr	r3, [r3, #0]
 811297c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 811297e:	687b      	ldr	r3, [r7, #4]
 8112980:	2b00      	cmp	r3, #0
 8112982:	d010      	beq.n	81129a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8112984:	f000 f858 	bl	8112a38 <xTaskIncrementTick>
 8112988:	4603      	mov	r3, r0
 811298a:	2b00      	cmp	r3, #0
 811298c:	d002      	beq.n	8112994 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 811298e:	4b16      	ldr	r3, [pc, #88]	@ (81129e8 <xTaskResumeAll+0x130>)
 8112990:	2201      	movs	r2, #1
 8112992:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8112994:	687b      	ldr	r3, [r7, #4]
 8112996:	3b01      	subs	r3, #1
 8112998:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 811299a:	687b      	ldr	r3, [r7, #4]
 811299c:	2b00      	cmp	r3, #0
 811299e:	d1f1      	bne.n	8112984 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 81129a0:	4b12      	ldr	r3, [pc, #72]	@ (81129ec <xTaskResumeAll+0x134>)
 81129a2:	2200      	movs	r2, #0
 81129a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81129a6:	4b10      	ldr	r3, [pc, #64]	@ (81129e8 <xTaskResumeAll+0x130>)
 81129a8:	681b      	ldr	r3, [r3, #0]
 81129aa:	2b00      	cmp	r3, #0
 81129ac:	d009      	beq.n	81129c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81129ae:	2301      	movs	r3, #1
 81129b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81129b2:	4b0f      	ldr	r3, [pc, #60]	@ (81129f0 <xTaskResumeAll+0x138>)
 81129b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81129b8:	601a      	str	r2, [r3, #0]
 81129ba:	f3bf 8f4f 	dsb	sy
 81129be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81129c2:	f7fe fb33 	bl	811102c <vPortExitCritical>

	return xAlreadyYielded;
 81129c6:	68bb      	ldr	r3, [r7, #8]
}
 81129c8:	4618      	mov	r0, r3
 81129ca:	3710      	adds	r7, #16
 81129cc:	46bd      	mov	sp, r7
 81129ce:	bd80      	pop	{r7, pc}
 81129d0:	24009f40 	.word	0x24009f40
 81129d4:	24009f18 	.word	0x24009f18
 81129d8:	24009ed8 	.word	0x24009ed8
 81129dc:	24009f20 	.word	0x24009f20
 81129e0:	24009a48 	.word	0x24009a48
 81129e4:	24009a44 	.word	0x24009a44
 81129e8:	24009f2c 	.word	0x24009f2c
 81129ec:	24009f28 	.word	0x24009f28
 81129f0:	e000ed04 	.word	0xe000ed04

081129f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 81129f4:	b480      	push	{r7}
 81129f6:	b083      	sub	sp, #12
 81129f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81129fa:	4b05      	ldr	r3, [pc, #20]	@ (8112a10 <xTaskGetTickCount+0x1c>)
 81129fc:	681b      	ldr	r3, [r3, #0]
 81129fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8112a00:	687b      	ldr	r3, [r7, #4]
}
 8112a02:	4618      	mov	r0, r3
 8112a04:	370c      	adds	r7, #12
 8112a06:	46bd      	mov	sp, r7
 8112a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112a0c:	4770      	bx	lr
 8112a0e:	bf00      	nop
 8112a10:	24009f1c 	.word	0x24009f1c

08112a14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8112a14:	b580      	push	{r7, lr}
 8112a16:	b082      	sub	sp, #8
 8112a18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8112a1a:	f7fe fbb5 	bl	8111188 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8112a1e:	2300      	movs	r3, #0
 8112a20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8112a22:	4b04      	ldr	r3, [pc, #16]	@ (8112a34 <xTaskGetTickCountFromISR+0x20>)
 8112a24:	681b      	ldr	r3, [r3, #0]
 8112a26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8112a28:	683b      	ldr	r3, [r7, #0]
}
 8112a2a:	4618      	mov	r0, r3
 8112a2c:	3708      	adds	r7, #8
 8112a2e:	46bd      	mov	sp, r7
 8112a30:	bd80      	pop	{r7, pc}
 8112a32:	bf00      	nop
 8112a34:	24009f1c 	.word	0x24009f1c

08112a38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8112a38:	b580      	push	{r7, lr}
 8112a3a:	b086      	sub	sp, #24
 8112a3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8112a3e:	2300      	movs	r3, #0
 8112a40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8112a42:	4b4f      	ldr	r3, [pc, #316]	@ (8112b80 <xTaskIncrementTick+0x148>)
 8112a44:	681b      	ldr	r3, [r3, #0]
 8112a46:	2b00      	cmp	r3, #0
 8112a48:	f040 8090 	bne.w	8112b6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8112a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8112b84 <xTaskIncrementTick+0x14c>)
 8112a4e:	681b      	ldr	r3, [r3, #0]
 8112a50:	3301      	adds	r3, #1
 8112a52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8112a54:	4a4b      	ldr	r2, [pc, #300]	@ (8112b84 <xTaskIncrementTick+0x14c>)
 8112a56:	693b      	ldr	r3, [r7, #16]
 8112a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8112a5a:	693b      	ldr	r3, [r7, #16]
 8112a5c:	2b00      	cmp	r3, #0
 8112a5e:	d121      	bne.n	8112aa4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8112a60:	4b49      	ldr	r3, [pc, #292]	@ (8112b88 <xTaskIncrementTick+0x150>)
 8112a62:	681b      	ldr	r3, [r3, #0]
 8112a64:	681b      	ldr	r3, [r3, #0]
 8112a66:	2b00      	cmp	r3, #0
 8112a68:	d00b      	beq.n	8112a82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8112a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112a6e:	f383 8811 	msr	BASEPRI, r3
 8112a72:	f3bf 8f6f 	isb	sy
 8112a76:	f3bf 8f4f 	dsb	sy
 8112a7a:	603b      	str	r3, [r7, #0]
}
 8112a7c:	bf00      	nop
 8112a7e:	bf00      	nop
 8112a80:	e7fd      	b.n	8112a7e <xTaskIncrementTick+0x46>
 8112a82:	4b41      	ldr	r3, [pc, #260]	@ (8112b88 <xTaskIncrementTick+0x150>)
 8112a84:	681b      	ldr	r3, [r3, #0]
 8112a86:	60fb      	str	r3, [r7, #12]
 8112a88:	4b40      	ldr	r3, [pc, #256]	@ (8112b8c <xTaskIncrementTick+0x154>)
 8112a8a:	681b      	ldr	r3, [r3, #0]
 8112a8c:	4a3e      	ldr	r2, [pc, #248]	@ (8112b88 <xTaskIncrementTick+0x150>)
 8112a8e:	6013      	str	r3, [r2, #0]
 8112a90:	4a3e      	ldr	r2, [pc, #248]	@ (8112b8c <xTaskIncrementTick+0x154>)
 8112a92:	68fb      	ldr	r3, [r7, #12]
 8112a94:	6013      	str	r3, [r2, #0]
 8112a96:	4b3e      	ldr	r3, [pc, #248]	@ (8112b90 <xTaskIncrementTick+0x158>)
 8112a98:	681b      	ldr	r3, [r3, #0]
 8112a9a:	3301      	adds	r3, #1
 8112a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8112b90 <xTaskIncrementTick+0x158>)
 8112a9e:	6013      	str	r3, [r2, #0]
 8112aa0:	f000 fae2 	bl	8113068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8112aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8112b94 <xTaskIncrementTick+0x15c>)
 8112aa6:	681b      	ldr	r3, [r3, #0]
 8112aa8:	693a      	ldr	r2, [r7, #16]
 8112aaa:	429a      	cmp	r2, r3
 8112aac:	d349      	bcc.n	8112b42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8112aae:	4b36      	ldr	r3, [pc, #216]	@ (8112b88 <xTaskIncrementTick+0x150>)
 8112ab0:	681b      	ldr	r3, [r3, #0]
 8112ab2:	681b      	ldr	r3, [r3, #0]
 8112ab4:	2b00      	cmp	r3, #0
 8112ab6:	d104      	bne.n	8112ac2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8112ab8:	4b36      	ldr	r3, [pc, #216]	@ (8112b94 <xTaskIncrementTick+0x15c>)
 8112aba:	f04f 32ff 	mov.w	r2, #4294967295
 8112abe:	601a      	str	r2, [r3, #0]
					break;
 8112ac0:	e03f      	b.n	8112b42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112ac2:	4b31      	ldr	r3, [pc, #196]	@ (8112b88 <xTaskIncrementTick+0x150>)
 8112ac4:	681b      	ldr	r3, [r3, #0]
 8112ac6:	68db      	ldr	r3, [r3, #12]
 8112ac8:	68db      	ldr	r3, [r3, #12]
 8112aca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8112acc:	68bb      	ldr	r3, [r7, #8]
 8112ace:	685b      	ldr	r3, [r3, #4]
 8112ad0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8112ad2:	693a      	ldr	r2, [r7, #16]
 8112ad4:	687b      	ldr	r3, [r7, #4]
 8112ad6:	429a      	cmp	r2, r3
 8112ad8:	d203      	bcs.n	8112ae2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8112ada:	4a2e      	ldr	r2, [pc, #184]	@ (8112b94 <xTaskIncrementTick+0x15c>)
 8112adc:	687b      	ldr	r3, [r7, #4]
 8112ade:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8112ae0:	e02f      	b.n	8112b42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8112ae2:	68bb      	ldr	r3, [r7, #8]
 8112ae4:	3304      	adds	r3, #4
 8112ae6:	4618      	mov	r0, r3
 8112ae8:	f7fe f914 	bl	8110d14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8112aec:	68bb      	ldr	r3, [r7, #8]
 8112aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112af0:	2b00      	cmp	r3, #0
 8112af2:	d004      	beq.n	8112afe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8112af4:	68bb      	ldr	r3, [r7, #8]
 8112af6:	3318      	adds	r3, #24
 8112af8:	4618      	mov	r0, r3
 8112afa:	f7fe f90b 	bl	8110d14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8112afe:	68bb      	ldr	r3, [r7, #8]
 8112b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112b02:	4b25      	ldr	r3, [pc, #148]	@ (8112b98 <xTaskIncrementTick+0x160>)
 8112b04:	681b      	ldr	r3, [r3, #0]
 8112b06:	429a      	cmp	r2, r3
 8112b08:	d903      	bls.n	8112b12 <xTaskIncrementTick+0xda>
 8112b0a:	68bb      	ldr	r3, [r7, #8]
 8112b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112b0e:	4a22      	ldr	r2, [pc, #136]	@ (8112b98 <xTaskIncrementTick+0x160>)
 8112b10:	6013      	str	r3, [r2, #0]
 8112b12:	68bb      	ldr	r3, [r7, #8]
 8112b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112b16:	4613      	mov	r3, r2
 8112b18:	009b      	lsls	r3, r3, #2
 8112b1a:	4413      	add	r3, r2
 8112b1c:	009b      	lsls	r3, r3, #2
 8112b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8112b9c <xTaskIncrementTick+0x164>)
 8112b20:	441a      	add	r2, r3
 8112b22:	68bb      	ldr	r3, [r7, #8]
 8112b24:	3304      	adds	r3, #4
 8112b26:	4619      	mov	r1, r3
 8112b28:	4610      	mov	r0, r2
 8112b2a:	f7fe f896 	bl	8110c5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8112b2e:	68bb      	ldr	r3, [r7, #8]
 8112b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112b32:	4b1b      	ldr	r3, [pc, #108]	@ (8112ba0 <xTaskIncrementTick+0x168>)
 8112b34:	681b      	ldr	r3, [r3, #0]
 8112b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112b38:	429a      	cmp	r2, r3
 8112b3a:	d3b8      	bcc.n	8112aae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8112b3c:	2301      	movs	r3, #1
 8112b3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8112b40:	e7b5      	b.n	8112aae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8112b42:	4b17      	ldr	r3, [pc, #92]	@ (8112ba0 <xTaskIncrementTick+0x168>)
 8112b44:	681b      	ldr	r3, [r3, #0]
 8112b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112b48:	4914      	ldr	r1, [pc, #80]	@ (8112b9c <xTaskIncrementTick+0x164>)
 8112b4a:	4613      	mov	r3, r2
 8112b4c:	009b      	lsls	r3, r3, #2
 8112b4e:	4413      	add	r3, r2
 8112b50:	009b      	lsls	r3, r3, #2
 8112b52:	440b      	add	r3, r1
 8112b54:	681b      	ldr	r3, [r3, #0]
 8112b56:	2b01      	cmp	r3, #1
 8112b58:	d901      	bls.n	8112b5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8112b5a:	2301      	movs	r3, #1
 8112b5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8112b5e:	4b11      	ldr	r3, [pc, #68]	@ (8112ba4 <xTaskIncrementTick+0x16c>)
 8112b60:	681b      	ldr	r3, [r3, #0]
 8112b62:	2b00      	cmp	r3, #0
 8112b64:	d007      	beq.n	8112b76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8112b66:	2301      	movs	r3, #1
 8112b68:	617b      	str	r3, [r7, #20]
 8112b6a:	e004      	b.n	8112b76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8112b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8112ba8 <xTaskIncrementTick+0x170>)
 8112b6e:	681b      	ldr	r3, [r3, #0]
 8112b70:	3301      	adds	r3, #1
 8112b72:	4a0d      	ldr	r2, [pc, #52]	@ (8112ba8 <xTaskIncrementTick+0x170>)
 8112b74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8112b76:	697b      	ldr	r3, [r7, #20]
}
 8112b78:	4618      	mov	r0, r3
 8112b7a:	3718      	adds	r7, #24
 8112b7c:	46bd      	mov	sp, r7
 8112b7e:	bd80      	pop	{r7, pc}
 8112b80:	24009f40 	.word	0x24009f40
 8112b84:	24009f1c 	.word	0x24009f1c
 8112b88:	24009ed0 	.word	0x24009ed0
 8112b8c:	24009ed4 	.word	0x24009ed4
 8112b90:	24009f30 	.word	0x24009f30
 8112b94:	24009f38 	.word	0x24009f38
 8112b98:	24009f20 	.word	0x24009f20
 8112b9c:	24009a48 	.word	0x24009a48
 8112ba0:	24009a44 	.word	0x24009a44
 8112ba4:	24009f2c 	.word	0x24009f2c
 8112ba8:	24009f28 	.word	0x24009f28

08112bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8112bac:	b480      	push	{r7}
 8112bae:	b085      	sub	sp, #20
 8112bb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8112bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8112c60 <vTaskSwitchContext+0xb4>)
 8112bb4:	681b      	ldr	r3, [r3, #0]
 8112bb6:	2b00      	cmp	r3, #0
 8112bb8:	d003      	beq.n	8112bc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8112bba:	4b2a      	ldr	r3, [pc, #168]	@ (8112c64 <vTaskSwitchContext+0xb8>)
 8112bbc:	2201      	movs	r2, #1
 8112bbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8112bc0:	e047      	b.n	8112c52 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8112bc2:	4b28      	ldr	r3, [pc, #160]	@ (8112c64 <vTaskSwitchContext+0xb8>)
 8112bc4:	2200      	movs	r2, #0
 8112bc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112bc8:	4b27      	ldr	r3, [pc, #156]	@ (8112c68 <vTaskSwitchContext+0xbc>)
 8112bca:	681b      	ldr	r3, [r3, #0]
 8112bcc:	60fb      	str	r3, [r7, #12]
 8112bce:	e011      	b.n	8112bf4 <vTaskSwitchContext+0x48>
 8112bd0:	68fb      	ldr	r3, [r7, #12]
 8112bd2:	2b00      	cmp	r3, #0
 8112bd4:	d10b      	bne.n	8112bee <vTaskSwitchContext+0x42>
	__asm volatile
 8112bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112bda:	f383 8811 	msr	BASEPRI, r3
 8112bde:	f3bf 8f6f 	isb	sy
 8112be2:	f3bf 8f4f 	dsb	sy
 8112be6:	607b      	str	r3, [r7, #4]
}
 8112be8:	bf00      	nop
 8112bea:	bf00      	nop
 8112bec:	e7fd      	b.n	8112bea <vTaskSwitchContext+0x3e>
 8112bee:	68fb      	ldr	r3, [r7, #12]
 8112bf0:	3b01      	subs	r3, #1
 8112bf2:	60fb      	str	r3, [r7, #12]
 8112bf4:	491d      	ldr	r1, [pc, #116]	@ (8112c6c <vTaskSwitchContext+0xc0>)
 8112bf6:	68fa      	ldr	r2, [r7, #12]
 8112bf8:	4613      	mov	r3, r2
 8112bfa:	009b      	lsls	r3, r3, #2
 8112bfc:	4413      	add	r3, r2
 8112bfe:	009b      	lsls	r3, r3, #2
 8112c00:	440b      	add	r3, r1
 8112c02:	681b      	ldr	r3, [r3, #0]
 8112c04:	2b00      	cmp	r3, #0
 8112c06:	d0e3      	beq.n	8112bd0 <vTaskSwitchContext+0x24>
 8112c08:	68fa      	ldr	r2, [r7, #12]
 8112c0a:	4613      	mov	r3, r2
 8112c0c:	009b      	lsls	r3, r3, #2
 8112c0e:	4413      	add	r3, r2
 8112c10:	009b      	lsls	r3, r3, #2
 8112c12:	4a16      	ldr	r2, [pc, #88]	@ (8112c6c <vTaskSwitchContext+0xc0>)
 8112c14:	4413      	add	r3, r2
 8112c16:	60bb      	str	r3, [r7, #8]
 8112c18:	68bb      	ldr	r3, [r7, #8]
 8112c1a:	685b      	ldr	r3, [r3, #4]
 8112c1c:	685a      	ldr	r2, [r3, #4]
 8112c1e:	68bb      	ldr	r3, [r7, #8]
 8112c20:	605a      	str	r2, [r3, #4]
 8112c22:	68bb      	ldr	r3, [r7, #8]
 8112c24:	685a      	ldr	r2, [r3, #4]
 8112c26:	68bb      	ldr	r3, [r7, #8]
 8112c28:	3308      	adds	r3, #8
 8112c2a:	429a      	cmp	r2, r3
 8112c2c:	d104      	bne.n	8112c38 <vTaskSwitchContext+0x8c>
 8112c2e:	68bb      	ldr	r3, [r7, #8]
 8112c30:	685b      	ldr	r3, [r3, #4]
 8112c32:	685a      	ldr	r2, [r3, #4]
 8112c34:	68bb      	ldr	r3, [r7, #8]
 8112c36:	605a      	str	r2, [r3, #4]
 8112c38:	68bb      	ldr	r3, [r7, #8]
 8112c3a:	685b      	ldr	r3, [r3, #4]
 8112c3c:	68db      	ldr	r3, [r3, #12]
 8112c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8112c70 <vTaskSwitchContext+0xc4>)
 8112c40:	6013      	str	r3, [r2, #0]
 8112c42:	4a09      	ldr	r2, [pc, #36]	@ (8112c68 <vTaskSwitchContext+0xbc>)
 8112c44:	68fb      	ldr	r3, [r7, #12]
 8112c46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8112c48:	4b09      	ldr	r3, [pc, #36]	@ (8112c70 <vTaskSwitchContext+0xc4>)
 8112c4a:	681b      	ldr	r3, [r3, #0]
 8112c4c:	3354      	adds	r3, #84	@ 0x54
 8112c4e:	4a09      	ldr	r2, [pc, #36]	@ (8112c74 <vTaskSwitchContext+0xc8>)
 8112c50:	6013      	str	r3, [r2, #0]
}
 8112c52:	bf00      	nop
 8112c54:	3714      	adds	r7, #20
 8112c56:	46bd      	mov	sp, r7
 8112c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112c5c:	4770      	bx	lr
 8112c5e:	bf00      	nop
 8112c60:	24009f40 	.word	0x24009f40
 8112c64:	24009f2c 	.word	0x24009f2c
 8112c68:	24009f20 	.word	0x24009f20
 8112c6c:	24009a48 	.word	0x24009a48
 8112c70:	24009a44 	.word	0x24009a44
 8112c74:	24000060 	.word	0x24000060

08112c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8112c78:	b580      	push	{r7, lr}
 8112c7a:	b084      	sub	sp, #16
 8112c7c:	af00      	add	r7, sp, #0
 8112c7e:	6078      	str	r0, [r7, #4]
 8112c80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8112c82:	687b      	ldr	r3, [r7, #4]
 8112c84:	2b00      	cmp	r3, #0
 8112c86:	d10b      	bne.n	8112ca0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8112c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112c8c:	f383 8811 	msr	BASEPRI, r3
 8112c90:	f3bf 8f6f 	isb	sy
 8112c94:	f3bf 8f4f 	dsb	sy
 8112c98:	60fb      	str	r3, [r7, #12]
}
 8112c9a:	bf00      	nop
 8112c9c:	bf00      	nop
 8112c9e:	e7fd      	b.n	8112c9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8112ca0:	4b07      	ldr	r3, [pc, #28]	@ (8112cc0 <vTaskPlaceOnEventList+0x48>)
 8112ca2:	681b      	ldr	r3, [r3, #0]
 8112ca4:	3318      	adds	r3, #24
 8112ca6:	4619      	mov	r1, r3
 8112ca8:	6878      	ldr	r0, [r7, #4]
 8112caa:	f7fd fffa 	bl	8110ca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8112cae:	2101      	movs	r1, #1
 8112cb0:	6838      	ldr	r0, [r7, #0]
 8112cb2:	f000 fb97 	bl	81133e4 <prvAddCurrentTaskToDelayedList>
}
 8112cb6:	bf00      	nop
 8112cb8:	3710      	adds	r7, #16
 8112cba:	46bd      	mov	sp, r7
 8112cbc:	bd80      	pop	{r7, pc}
 8112cbe:	bf00      	nop
 8112cc0:	24009a44 	.word	0x24009a44

08112cc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8112cc4:	b580      	push	{r7, lr}
 8112cc6:	b086      	sub	sp, #24
 8112cc8:	af00      	add	r7, sp, #0
 8112cca:	60f8      	str	r0, [r7, #12]
 8112ccc:	60b9      	str	r1, [r7, #8]
 8112cce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8112cd0:	68fb      	ldr	r3, [r7, #12]
 8112cd2:	2b00      	cmp	r3, #0
 8112cd4:	d10b      	bne.n	8112cee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8112cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112cda:	f383 8811 	msr	BASEPRI, r3
 8112cde:	f3bf 8f6f 	isb	sy
 8112ce2:	f3bf 8f4f 	dsb	sy
 8112ce6:	617b      	str	r3, [r7, #20]
}
 8112ce8:	bf00      	nop
 8112cea:	bf00      	nop
 8112cec:	e7fd      	b.n	8112cea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8112cee:	4b0a      	ldr	r3, [pc, #40]	@ (8112d18 <vTaskPlaceOnEventListRestricted+0x54>)
 8112cf0:	681b      	ldr	r3, [r3, #0]
 8112cf2:	3318      	adds	r3, #24
 8112cf4:	4619      	mov	r1, r3
 8112cf6:	68f8      	ldr	r0, [r7, #12]
 8112cf8:	f7fd ffaf 	bl	8110c5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8112cfc:	687b      	ldr	r3, [r7, #4]
 8112cfe:	2b00      	cmp	r3, #0
 8112d00:	d002      	beq.n	8112d08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8112d02:	f04f 33ff 	mov.w	r3, #4294967295
 8112d06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8112d08:	6879      	ldr	r1, [r7, #4]
 8112d0a:	68b8      	ldr	r0, [r7, #8]
 8112d0c:	f000 fb6a 	bl	81133e4 <prvAddCurrentTaskToDelayedList>
	}
 8112d10:	bf00      	nop
 8112d12:	3718      	adds	r7, #24
 8112d14:	46bd      	mov	sp, r7
 8112d16:	bd80      	pop	{r7, pc}
 8112d18:	24009a44 	.word	0x24009a44

08112d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8112d1c:	b580      	push	{r7, lr}
 8112d1e:	b086      	sub	sp, #24
 8112d20:	af00      	add	r7, sp, #0
 8112d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112d24:	687b      	ldr	r3, [r7, #4]
 8112d26:	68db      	ldr	r3, [r3, #12]
 8112d28:	68db      	ldr	r3, [r3, #12]
 8112d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8112d2c:	693b      	ldr	r3, [r7, #16]
 8112d2e:	2b00      	cmp	r3, #0
 8112d30:	d10b      	bne.n	8112d4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8112d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112d36:	f383 8811 	msr	BASEPRI, r3
 8112d3a:	f3bf 8f6f 	isb	sy
 8112d3e:	f3bf 8f4f 	dsb	sy
 8112d42:	60fb      	str	r3, [r7, #12]
}
 8112d44:	bf00      	nop
 8112d46:	bf00      	nop
 8112d48:	e7fd      	b.n	8112d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8112d4a:	693b      	ldr	r3, [r7, #16]
 8112d4c:	3318      	adds	r3, #24
 8112d4e:	4618      	mov	r0, r3
 8112d50:	f7fd ffe0 	bl	8110d14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8112d54:	4b1d      	ldr	r3, [pc, #116]	@ (8112dcc <xTaskRemoveFromEventList+0xb0>)
 8112d56:	681b      	ldr	r3, [r3, #0]
 8112d58:	2b00      	cmp	r3, #0
 8112d5a:	d11d      	bne.n	8112d98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8112d5c:	693b      	ldr	r3, [r7, #16]
 8112d5e:	3304      	adds	r3, #4
 8112d60:	4618      	mov	r0, r3
 8112d62:	f7fd ffd7 	bl	8110d14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8112d66:	693b      	ldr	r3, [r7, #16]
 8112d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112d6a:	4b19      	ldr	r3, [pc, #100]	@ (8112dd0 <xTaskRemoveFromEventList+0xb4>)
 8112d6c:	681b      	ldr	r3, [r3, #0]
 8112d6e:	429a      	cmp	r2, r3
 8112d70:	d903      	bls.n	8112d7a <xTaskRemoveFromEventList+0x5e>
 8112d72:	693b      	ldr	r3, [r7, #16]
 8112d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112d76:	4a16      	ldr	r2, [pc, #88]	@ (8112dd0 <xTaskRemoveFromEventList+0xb4>)
 8112d78:	6013      	str	r3, [r2, #0]
 8112d7a:	693b      	ldr	r3, [r7, #16]
 8112d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112d7e:	4613      	mov	r3, r2
 8112d80:	009b      	lsls	r3, r3, #2
 8112d82:	4413      	add	r3, r2
 8112d84:	009b      	lsls	r3, r3, #2
 8112d86:	4a13      	ldr	r2, [pc, #76]	@ (8112dd4 <xTaskRemoveFromEventList+0xb8>)
 8112d88:	441a      	add	r2, r3
 8112d8a:	693b      	ldr	r3, [r7, #16]
 8112d8c:	3304      	adds	r3, #4
 8112d8e:	4619      	mov	r1, r3
 8112d90:	4610      	mov	r0, r2
 8112d92:	f7fd ff62 	bl	8110c5a <vListInsertEnd>
 8112d96:	e005      	b.n	8112da4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8112d98:	693b      	ldr	r3, [r7, #16]
 8112d9a:	3318      	adds	r3, #24
 8112d9c:	4619      	mov	r1, r3
 8112d9e:	480e      	ldr	r0, [pc, #56]	@ (8112dd8 <xTaskRemoveFromEventList+0xbc>)
 8112da0:	f7fd ff5b 	bl	8110c5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8112da4:	693b      	ldr	r3, [r7, #16]
 8112da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112da8:	4b0c      	ldr	r3, [pc, #48]	@ (8112ddc <xTaskRemoveFromEventList+0xc0>)
 8112daa:	681b      	ldr	r3, [r3, #0]
 8112dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112dae:	429a      	cmp	r2, r3
 8112db0:	d905      	bls.n	8112dbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8112db2:	2301      	movs	r3, #1
 8112db4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8112db6:	4b0a      	ldr	r3, [pc, #40]	@ (8112de0 <xTaskRemoveFromEventList+0xc4>)
 8112db8:	2201      	movs	r2, #1
 8112dba:	601a      	str	r2, [r3, #0]
 8112dbc:	e001      	b.n	8112dc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8112dbe:	2300      	movs	r3, #0
 8112dc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8112dc2:	697b      	ldr	r3, [r7, #20]
}
 8112dc4:	4618      	mov	r0, r3
 8112dc6:	3718      	adds	r7, #24
 8112dc8:	46bd      	mov	sp, r7
 8112dca:	bd80      	pop	{r7, pc}
 8112dcc:	24009f40 	.word	0x24009f40
 8112dd0:	24009f20 	.word	0x24009f20
 8112dd4:	24009a48 	.word	0x24009a48
 8112dd8:	24009ed8 	.word	0x24009ed8
 8112ddc:	24009a44 	.word	0x24009a44
 8112de0:	24009f2c 	.word	0x24009f2c

08112de4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8112de4:	b480      	push	{r7}
 8112de6:	b083      	sub	sp, #12
 8112de8:	af00      	add	r7, sp, #0
 8112dea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8112dec:	4b06      	ldr	r3, [pc, #24]	@ (8112e08 <vTaskInternalSetTimeOutState+0x24>)
 8112dee:	681a      	ldr	r2, [r3, #0]
 8112df0:	687b      	ldr	r3, [r7, #4]
 8112df2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8112df4:	4b05      	ldr	r3, [pc, #20]	@ (8112e0c <vTaskInternalSetTimeOutState+0x28>)
 8112df6:	681a      	ldr	r2, [r3, #0]
 8112df8:	687b      	ldr	r3, [r7, #4]
 8112dfa:	605a      	str	r2, [r3, #4]
}
 8112dfc:	bf00      	nop
 8112dfe:	370c      	adds	r7, #12
 8112e00:	46bd      	mov	sp, r7
 8112e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112e06:	4770      	bx	lr
 8112e08:	24009f30 	.word	0x24009f30
 8112e0c:	24009f1c 	.word	0x24009f1c

08112e10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8112e10:	b580      	push	{r7, lr}
 8112e12:	b088      	sub	sp, #32
 8112e14:	af00      	add	r7, sp, #0
 8112e16:	6078      	str	r0, [r7, #4]
 8112e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8112e1a:	687b      	ldr	r3, [r7, #4]
 8112e1c:	2b00      	cmp	r3, #0
 8112e1e:	d10b      	bne.n	8112e38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8112e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112e24:	f383 8811 	msr	BASEPRI, r3
 8112e28:	f3bf 8f6f 	isb	sy
 8112e2c:	f3bf 8f4f 	dsb	sy
 8112e30:	613b      	str	r3, [r7, #16]
}
 8112e32:	bf00      	nop
 8112e34:	bf00      	nop
 8112e36:	e7fd      	b.n	8112e34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8112e38:	683b      	ldr	r3, [r7, #0]
 8112e3a:	2b00      	cmp	r3, #0
 8112e3c:	d10b      	bne.n	8112e56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8112e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112e42:	f383 8811 	msr	BASEPRI, r3
 8112e46:	f3bf 8f6f 	isb	sy
 8112e4a:	f3bf 8f4f 	dsb	sy
 8112e4e:	60fb      	str	r3, [r7, #12]
}
 8112e50:	bf00      	nop
 8112e52:	bf00      	nop
 8112e54:	e7fd      	b.n	8112e52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8112e56:	f7fe f8b7 	bl	8110fc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8112e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8112ed0 <xTaskCheckForTimeOut+0xc0>)
 8112e5c:	681b      	ldr	r3, [r3, #0]
 8112e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8112e60:	687b      	ldr	r3, [r7, #4]
 8112e62:	685b      	ldr	r3, [r3, #4]
 8112e64:	69ba      	ldr	r2, [r7, #24]
 8112e66:	1ad3      	subs	r3, r2, r3
 8112e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8112e6a:	683b      	ldr	r3, [r7, #0]
 8112e6c:	681b      	ldr	r3, [r3, #0]
 8112e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8112e72:	d102      	bne.n	8112e7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8112e74:	2300      	movs	r3, #0
 8112e76:	61fb      	str	r3, [r7, #28]
 8112e78:	e023      	b.n	8112ec2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8112e7a:	687b      	ldr	r3, [r7, #4]
 8112e7c:	681a      	ldr	r2, [r3, #0]
 8112e7e:	4b15      	ldr	r3, [pc, #84]	@ (8112ed4 <xTaskCheckForTimeOut+0xc4>)
 8112e80:	681b      	ldr	r3, [r3, #0]
 8112e82:	429a      	cmp	r2, r3
 8112e84:	d007      	beq.n	8112e96 <xTaskCheckForTimeOut+0x86>
 8112e86:	687b      	ldr	r3, [r7, #4]
 8112e88:	685b      	ldr	r3, [r3, #4]
 8112e8a:	69ba      	ldr	r2, [r7, #24]
 8112e8c:	429a      	cmp	r2, r3
 8112e8e:	d302      	bcc.n	8112e96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8112e90:	2301      	movs	r3, #1
 8112e92:	61fb      	str	r3, [r7, #28]
 8112e94:	e015      	b.n	8112ec2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8112e96:	683b      	ldr	r3, [r7, #0]
 8112e98:	681b      	ldr	r3, [r3, #0]
 8112e9a:	697a      	ldr	r2, [r7, #20]
 8112e9c:	429a      	cmp	r2, r3
 8112e9e:	d20b      	bcs.n	8112eb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8112ea0:	683b      	ldr	r3, [r7, #0]
 8112ea2:	681a      	ldr	r2, [r3, #0]
 8112ea4:	697b      	ldr	r3, [r7, #20]
 8112ea6:	1ad2      	subs	r2, r2, r3
 8112ea8:	683b      	ldr	r3, [r7, #0]
 8112eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8112eac:	6878      	ldr	r0, [r7, #4]
 8112eae:	f7ff ff99 	bl	8112de4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8112eb2:	2300      	movs	r3, #0
 8112eb4:	61fb      	str	r3, [r7, #28]
 8112eb6:	e004      	b.n	8112ec2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8112eb8:	683b      	ldr	r3, [r7, #0]
 8112eba:	2200      	movs	r2, #0
 8112ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8112ebe:	2301      	movs	r3, #1
 8112ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8112ec2:	f7fe f8b3 	bl	811102c <vPortExitCritical>

	return xReturn;
 8112ec6:	69fb      	ldr	r3, [r7, #28]
}
 8112ec8:	4618      	mov	r0, r3
 8112eca:	3720      	adds	r7, #32
 8112ecc:	46bd      	mov	sp, r7
 8112ece:	bd80      	pop	{r7, pc}
 8112ed0:	24009f1c 	.word	0x24009f1c
 8112ed4:	24009f30 	.word	0x24009f30

08112ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8112ed8:	b480      	push	{r7}
 8112eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8112edc:	4b03      	ldr	r3, [pc, #12]	@ (8112eec <vTaskMissedYield+0x14>)
 8112ede:	2201      	movs	r2, #1
 8112ee0:	601a      	str	r2, [r3, #0]
}
 8112ee2:	bf00      	nop
 8112ee4:	46bd      	mov	sp, r7
 8112ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112eea:	4770      	bx	lr
 8112eec:	24009f2c 	.word	0x24009f2c

08112ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8112ef0:	b580      	push	{r7, lr}
 8112ef2:	b082      	sub	sp, #8
 8112ef4:	af00      	add	r7, sp, #0
 8112ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8112ef8:	f000 f852 	bl	8112fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8112efc:	4b06      	ldr	r3, [pc, #24]	@ (8112f18 <prvIdleTask+0x28>)
 8112efe:	681b      	ldr	r3, [r3, #0]
 8112f00:	2b01      	cmp	r3, #1
 8112f02:	d9f9      	bls.n	8112ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8112f04:	4b05      	ldr	r3, [pc, #20]	@ (8112f1c <prvIdleTask+0x2c>)
 8112f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112f0a:	601a      	str	r2, [r3, #0]
 8112f0c:	f3bf 8f4f 	dsb	sy
 8112f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8112f14:	e7f0      	b.n	8112ef8 <prvIdleTask+0x8>
 8112f16:	bf00      	nop
 8112f18:	24009a48 	.word	0x24009a48
 8112f1c:	e000ed04 	.word	0xe000ed04

08112f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8112f20:	b580      	push	{r7, lr}
 8112f22:	b082      	sub	sp, #8
 8112f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8112f26:	2300      	movs	r3, #0
 8112f28:	607b      	str	r3, [r7, #4]
 8112f2a:	e00c      	b.n	8112f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8112f2c:	687a      	ldr	r2, [r7, #4]
 8112f2e:	4613      	mov	r3, r2
 8112f30:	009b      	lsls	r3, r3, #2
 8112f32:	4413      	add	r3, r2
 8112f34:	009b      	lsls	r3, r3, #2
 8112f36:	4a12      	ldr	r2, [pc, #72]	@ (8112f80 <prvInitialiseTaskLists+0x60>)
 8112f38:	4413      	add	r3, r2
 8112f3a:	4618      	mov	r0, r3
 8112f3c:	f7fd fe60 	bl	8110c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8112f40:	687b      	ldr	r3, [r7, #4]
 8112f42:	3301      	adds	r3, #1
 8112f44:	607b      	str	r3, [r7, #4]
 8112f46:	687b      	ldr	r3, [r7, #4]
 8112f48:	2b37      	cmp	r3, #55	@ 0x37
 8112f4a:	d9ef      	bls.n	8112f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8112f4c:	480d      	ldr	r0, [pc, #52]	@ (8112f84 <prvInitialiseTaskLists+0x64>)
 8112f4e:	f7fd fe57 	bl	8110c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8112f52:	480d      	ldr	r0, [pc, #52]	@ (8112f88 <prvInitialiseTaskLists+0x68>)
 8112f54:	f7fd fe54 	bl	8110c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8112f58:	480c      	ldr	r0, [pc, #48]	@ (8112f8c <prvInitialiseTaskLists+0x6c>)
 8112f5a:	f7fd fe51 	bl	8110c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8112f5e:	480c      	ldr	r0, [pc, #48]	@ (8112f90 <prvInitialiseTaskLists+0x70>)
 8112f60:	f7fd fe4e 	bl	8110c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8112f64:	480b      	ldr	r0, [pc, #44]	@ (8112f94 <prvInitialiseTaskLists+0x74>)
 8112f66:	f7fd fe4b 	bl	8110c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8112f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8112f98 <prvInitialiseTaskLists+0x78>)
 8112f6c:	4a05      	ldr	r2, [pc, #20]	@ (8112f84 <prvInitialiseTaskLists+0x64>)
 8112f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8112f70:	4b0a      	ldr	r3, [pc, #40]	@ (8112f9c <prvInitialiseTaskLists+0x7c>)
 8112f72:	4a05      	ldr	r2, [pc, #20]	@ (8112f88 <prvInitialiseTaskLists+0x68>)
 8112f74:	601a      	str	r2, [r3, #0]
}
 8112f76:	bf00      	nop
 8112f78:	3708      	adds	r7, #8
 8112f7a:	46bd      	mov	sp, r7
 8112f7c:	bd80      	pop	{r7, pc}
 8112f7e:	bf00      	nop
 8112f80:	24009a48 	.word	0x24009a48
 8112f84:	24009ea8 	.word	0x24009ea8
 8112f88:	24009ebc 	.word	0x24009ebc
 8112f8c:	24009ed8 	.word	0x24009ed8
 8112f90:	24009eec 	.word	0x24009eec
 8112f94:	24009f04 	.word	0x24009f04
 8112f98:	24009ed0 	.word	0x24009ed0
 8112f9c:	24009ed4 	.word	0x24009ed4

08112fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8112fa0:	b580      	push	{r7, lr}
 8112fa2:	b082      	sub	sp, #8
 8112fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8112fa6:	e019      	b.n	8112fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8112fa8:	f7fe f80e 	bl	8110fc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112fac:	4b10      	ldr	r3, [pc, #64]	@ (8112ff0 <prvCheckTasksWaitingTermination+0x50>)
 8112fae:	68db      	ldr	r3, [r3, #12]
 8112fb0:	68db      	ldr	r3, [r3, #12]
 8112fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8112fb4:	687b      	ldr	r3, [r7, #4]
 8112fb6:	3304      	adds	r3, #4
 8112fb8:	4618      	mov	r0, r3
 8112fba:	f7fd feab 	bl	8110d14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8112fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8112ff4 <prvCheckTasksWaitingTermination+0x54>)
 8112fc0:	681b      	ldr	r3, [r3, #0]
 8112fc2:	3b01      	subs	r3, #1
 8112fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8112ff4 <prvCheckTasksWaitingTermination+0x54>)
 8112fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8112fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8112ff8 <prvCheckTasksWaitingTermination+0x58>)
 8112fca:	681b      	ldr	r3, [r3, #0]
 8112fcc:	3b01      	subs	r3, #1
 8112fce:	4a0a      	ldr	r2, [pc, #40]	@ (8112ff8 <prvCheckTasksWaitingTermination+0x58>)
 8112fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8112fd2:	f7fe f82b 	bl	811102c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8112fd6:	6878      	ldr	r0, [r7, #4]
 8112fd8:	f000 f810 	bl	8112ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8112fdc:	4b06      	ldr	r3, [pc, #24]	@ (8112ff8 <prvCheckTasksWaitingTermination+0x58>)
 8112fde:	681b      	ldr	r3, [r3, #0]
 8112fe0:	2b00      	cmp	r3, #0
 8112fe2:	d1e1      	bne.n	8112fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8112fe4:	bf00      	nop
 8112fe6:	bf00      	nop
 8112fe8:	3708      	adds	r7, #8
 8112fea:	46bd      	mov	sp, r7
 8112fec:	bd80      	pop	{r7, pc}
 8112fee:	bf00      	nop
 8112ff0:	24009eec 	.word	0x24009eec
 8112ff4:	24009f18 	.word	0x24009f18
 8112ff8:	24009f00 	.word	0x24009f00

08112ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8112ffc:	b580      	push	{r7, lr}
 8112ffe:	b084      	sub	sp, #16
 8113000:	af00      	add	r7, sp, #0
 8113002:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8113004:	687b      	ldr	r3, [r7, #4]
 8113006:	3354      	adds	r3, #84	@ 0x54
 8113008:	4618      	mov	r0, r3
 811300a:	f00f f8a3 	bl	8122154 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 811300e:	687b      	ldr	r3, [r7, #4]
 8113010:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8113014:	2b00      	cmp	r3, #0
 8113016:	d108      	bne.n	811302a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8113018:	687b      	ldr	r3, [r7, #4]
 811301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 811301c:	4618      	mov	r0, r3
 811301e:	f7fd fccf 	bl	81109c0 <vPortFree>
				vPortFree( pxTCB );
 8113022:	6878      	ldr	r0, [r7, #4]
 8113024:	f7fd fccc 	bl	81109c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8113028:	e019      	b.n	811305e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 811302a:	687b      	ldr	r3, [r7, #4]
 811302c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8113030:	2b01      	cmp	r3, #1
 8113032:	d103      	bne.n	811303c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8113034:	6878      	ldr	r0, [r7, #4]
 8113036:	f7fd fcc3 	bl	81109c0 <vPortFree>
	}
 811303a:	e010      	b.n	811305e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 811303c:	687b      	ldr	r3, [r7, #4]
 811303e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8113042:	2b02      	cmp	r3, #2
 8113044:	d00b      	beq.n	811305e <prvDeleteTCB+0x62>
	__asm volatile
 8113046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811304a:	f383 8811 	msr	BASEPRI, r3
 811304e:	f3bf 8f6f 	isb	sy
 8113052:	f3bf 8f4f 	dsb	sy
 8113056:	60fb      	str	r3, [r7, #12]
}
 8113058:	bf00      	nop
 811305a:	bf00      	nop
 811305c:	e7fd      	b.n	811305a <prvDeleteTCB+0x5e>
	}
 811305e:	bf00      	nop
 8113060:	3710      	adds	r7, #16
 8113062:	46bd      	mov	sp, r7
 8113064:	bd80      	pop	{r7, pc}
	...

08113068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8113068:	b480      	push	{r7}
 811306a:	b083      	sub	sp, #12
 811306c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811306e:	4b0c      	ldr	r3, [pc, #48]	@ (81130a0 <prvResetNextTaskUnblockTime+0x38>)
 8113070:	681b      	ldr	r3, [r3, #0]
 8113072:	681b      	ldr	r3, [r3, #0]
 8113074:	2b00      	cmp	r3, #0
 8113076:	d104      	bne.n	8113082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8113078:	4b0a      	ldr	r3, [pc, #40]	@ (81130a4 <prvResetNextTaskUnblockTime+0x3c>)
 811307a:	f04f 32ff 	mov.w	r2, #4294967295
 811307e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8113080:	e008      	b.n	8113094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8113082:	4b07      	ldr	r3, [pc, #28]	@ (81130a0 <prvResetNextTaskUnblockTime+0x38>)
 8113084:	681b      	ldr	r3, [r3, #0]
 8113086:	68db      	ldr	r3, [r3, #12]
 8113088:	68db      	ldr	r3, [r3, #12]
 811308a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 811308c:	687b      	ldr	r3, [r7, #4]
 811308e:	685b      	ldr	r3, [r3, #4]
 8113090:	4a04      	ldr	r2, [pc, #16]	@ (81130a4 <prvResetNextTaskUnblockTime+0x3c>)
 8113092:	6013      	str	r3, [r2, #0]
}
 8113094:	bf00      	nop
 8113096:	370c      	adds	r7, #12
 8113098:	46bd      	mov	sp, r7
 811309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811309e:	4770      	bx	lr
 81130a0:	24009ed0 	.word	0x24009ed0
 81130a4:	24009f38 	.word	0x24009f38

081130a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 81130a8:	b480      	push	{r7}
 81130aa:	b083      	sub	sp, #12
 81130ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 81130ae:	4b05      	ldr	r3, [pc, #20]	@ (81130c4 <xTaskGetCurrentTaskHandle+0x1c>)
 81130b0:	681b      	ldr	r3, [r3, #0]
 81130b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 81130b4:	687b      	ldr	r3, [r7, #4]
	}
 81130b6:	4618      	mov	r0, r3
 81130b8:	370c      	adds	r7, #12
 81130ba:	46bd      	mov	sp, r7
 81130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81130c0:	4770      	bx	lr
 81130c2:	bf00      	nop
 81130c4:	24009a44 	.word	0x24009a44

081130c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81130c8:	b480      	push	{r7}
 81130ca:	b083      	sub	sp, #12
 81130cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81130ce:	4b0b      	ldr	r3, [pc, #44]	@ (81130fc <xTaskGetSchedulerState+0x34>)
 81130d0:	681b      	ldr	r3, [r3, #0]
 81130d2:	2b00      	cmp	r3, #0
 81130d4:	d102      	bne.n	81130dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81130d6:	2301      	movs	r3, #1
 81130d8:	607b      	str	r3, [r7, #4]
 81130da:	e008      	b.n	81130ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81130dc:	4b08      	ldr	r3, [pc, #32]	@ (8113100 <xTaskGetSchedulerState+0x38>)
 81130de:	681b      	ldr	r3, [r3, #0]
 81130e0:	2b00      	cmp	r3, #0
 81130e2:	d102      	bne.n	81130ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81130e4:	2302      	movs	r3, #2
 81130e6:	607b      	str	r3, [r7, #4]
 81130e8:	e001      	b.n	81130ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81130ea:	2300      	movs	r3, #0
 81130ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81130ee:	687b      	ldr	r3, [r7, #4]
	}
 81130f0:	4618      	mov	r0, r3
 81130f2:	370c      	adds	r7, #12
 81130f4:	46bd      	mov	sp, r7
 81130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81130fa:	4770      	bx	lr
 81130fc:	24009f24 	.word	0x24009f24
 8113100:	24009f40 	.word	0x24009f40

08113104 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8113104:	b580      	push	{r7, lr}
 8113106:	b084      	sub	sp, #16
 8113108:	af00      	add	r7, sp, #0
 811310a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 811310c:	687b      	ldr	r3, [r7, #4]
 811310e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8113110:	2300      	movs	r3, #0
 8113112:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8113114:	687b      	ldr	r3, [r7, #4]
 8113116:	2b00      	cmp	r3, #0
 8113118:	d051      	beq.n	81131be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 811311a:	68bb      	ldr	r3, [r7, #8]
 811311c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811311e:	4b2a      	ldr	r3, [pc, #168]	@ (81131c8 <xTaskPriorityInherit+0xc4>)
 8113120:	681b      	ldr	r3, [r3, #0]
 8113122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113124:	429a      	cmp	r2, r3
 8113126:	d241      	bcs.n	81131ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8113128:	68bb      	ldr	r3, [r7, #8]
 811312a:	699b      	ldr	r3, [r3, #24]
 811312c:	2b00      	cmp	r3, #0
 811312e:	db06      	blt.n	811313e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8113130:	4b25      	ldr	r3, [pc, #148]	@ (81131c8 <xTaskPriorityInherit+0xc4>)
 8113132:	681b      	ldr	r3, [r3, #0]
 8113134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113136:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 811313a:	68bb      	ldr	r3, [r7, #8]
 811313c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 811313e:	68bb      	ldr	r3, [r7, #8]
 8113140:	6959      	ldr	r1, [r3, #20]
 8113142:	68bb      	ldr	r3, [r7, #8]
 8113144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113146:	4613      	mov	r3, r2
 8113148:	009b      	lsls	r3, r3, #2
 811314a:	4413      	add	r3, r2
 811314c:	009b      	lsls	r3, r3, #2
 811314e:	4a1f      	ldr	r2, [pc, #124]	@ (81131cc <xTaskPriorityInherit+0xc8>)
 8113150:	4413      	add	r3, r2
 8113152:	4299      	cmp	r1, r3
 8113154:	d122      	bne.n	811319c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8113156:	68bb      	ldr	r3, [r7, #8]
 8113158:	3304      	adds	r3, #4
 811315a:	4618      	mov	r0, r3
 811315c:	f7fd fdda 	bl	8110d14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8113160:	4b19      	ldr	r3, [pc, #100]	@ (81131c8 <xTaskPriorityInherit+0xc4>)
 8113162:	681b      	ldr	r3, [r3, #0]
 8113164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113166:	68bb      	ldr	r3, [r7, #8]
 8113168:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 811316a:	68bb      	ldr	r3, [r7, #8]
 811316c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811316e:	4b18      	ldr	r3, [pc, #96]	@ (81131d0 <xTaskPriorityInherit+0xcc>)
 8113170:	681b      	ldr	r3, [r3, #0]
 8113172:	429a      	cmp	r2, r3
 8113174:	d903      	bls.n	811317e <xTaskPriorityInherit+0x7a>
 8113176:	68bb      	ldr	r3, [r7, #8]
 8113178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811317a:	4a15      	ldr	r2, [pc, #84]	@ (81131d0 <xTaskPriorityInherit+0xcc>)
 811317c:	6013      	str	r3, [r2, #0]
 811317e:	68bb      	ldr	r3, [r7, #8]
 8113180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113182:	4613      	mov	r3, r2
 8113184:	009b      	lsls	r3, r3, #2
 8113186:	4413      	add	r3, r2
 8113188:	009b      	lsls	r3, r3, #2
 811318a:	4a10      	ldr	r2, [pc, #64]	@ (81131cc <xTaskPriorityInherit+0xc8>)
 811318c:	441a      	add	r2, r3
 811318e:	68bb      	ldr	r3, [r7, #8]
 8113190:	3304      	adds	r3, #4
 8113192:	4619      	mov	r1, r3
 8113194:	4610      	mov	r0, r2
 8113196:	f7fd fd60 	bl	8110c5a <vListInsertEnd>
 811319a:	e004      	b.n	81131a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 811319c:	4b0a      	ldr	r3, [pc, #40]	@ (81131c8 <xTaskPriorityInherit+0xc4>)
 811319e:	681b      	ldr	r3, [r3, #0]
 81131a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81131a2:	68bb      	ldr	r3, [r7, #8]
 81131a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 81131a6:	2301      	movs	r3, #1
 81131a8:	60fb      	str	r3, [r7, #12]
 81131aa:	e008      	b.n	81131be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 81131ac:	68bb      	ldr	r3, [r7, #8]
 81131ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81131b0:	4b05      	ldr	r3, [pc, #20]	@ (81131c8 <xTaskPriorityInherit+0xc4>)
 81131b2:	681b      	ldr	r3, [r3, #0]
 81131b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81131b6:	429a      	cmp	r2, r3
 81131b8:	d201      	bcs.n	81131be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 81131ba:	2301      	movs	r3, #1
 81131bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81131be:	68fb      	ldr	r3, [r7, #12]
	}
 81131c0:	4618      	mov	r0, r3
 81131c2:	3710      	adds	r7, #16
 81131c4:	46bd      	mov	sp, r7
 81131c6:	bd80      	pop	{r7, pc}
 81131c8:	24009a44 	.word	0x24009a44
 81131cc:	24009a48 	.word	0x24009a48
 81131d0:	24009f20 	.word	0x24009f20

081131d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81131d4:	b580      	push	{r7, lr}
 81131d6:	b086      	sub	sp, #24
 81131d8:	af00      	add	r7, sp, #0
 81131da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81131dc:	687b      	ldr	r3, [r7, #4]
 81131de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81131e0:	2300      	movs	r3, #0
 81131e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81131e4:	687b      	ldr	r3, [r7, #4]
 81131e6:	2b00      	cmp	r3, #0
 81131e8:	d058      	beq.n	811329c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81131ea:	4b2f      	ldr	r3, [pc, #188]	@ (81132a8 <xTaskPriorityDisinherit+0xd4>)
 81131ec:	681b      	ldr	r3, [r3, #0]
 81131ee:	693a      	ldr	r2, [r7, #16]
 81131f0:	429a      	cmp	r2, r3
 81131f2:	d00b      	beq.n	811320c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 81131f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81131f8:	f383 8811 	msr	BASEPRI, r3
 81131fc:	f3bf 8f6f 	isb	sy
 8113200:	f3bf 8f4f 	dsb	sy
 8113204:	60fb      	str	r3, [r7, #12]
}
 8113206:	bf00      	nop
 8113208:	bf00      	nop
 811320a:	e7fd      	b.n	8113208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 811320c:	693b      	ldr	r3, [r7, #16]
 811320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113210:	2b00      	cmp	r3, #0
 8113212:	d10b      	bne.n	811322c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8113214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113218:	f383 8811 	msr	BASEPRI, r3
 811321c:	f3bf 8f6f 	isb	sy
 8113220:	f3bf 8f4f 	dsb	sy
 8113224:	60bb      	str	r3, [r7, #8]
}
 8113226:	bf00      	nop
 8113228:	bf00      	nop
 811322a:	e7fd      	b.n	8113228 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 811322c:	693b      	ldr	r3, [r7, #16]
 811322e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113230:	1e5a      	subs	r2, r3, #1
 8113232:	693b      	ldr	r3, [r7, #16]
 8113234:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8113236:	693b      	ldr	r3, [r7, #16]
 8113238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811323a:	693b      	ldr	r3, [r7, #16]
 811323c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811323e:	429a      	cmp	r2, r3
 8113240:	d02c      	beq.n	811329c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8113242:	693b      	ldr	r3, [r7, #16]
 8113244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113246:	2b00      	cmp	r3, #0
 8113248:	d128      	bne.n	811329c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811324a:	693b      	ldr	r3, [r7, #16]
 811324c:	3304      	adds	r3, #4
 811324e:	4618      	mov	r0, r3
 8113250:	f7fd fd60 	bl	8110d14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8113254:	693b      	ldr	r3, [r7, #16]
 8113256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8113258:	693b      	ldr	r3, [r7, #16]
 811325a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 811325c:	693b      	ldr	r3, [r7, #16]
 811325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113260:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8113264:	693b      	ldr	r3, [r7, #16]
 8113266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8113268:	693b      	ldr	r3, [r7, #16]
 811326a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811326c:	4b0f      	ldr	r3, [pc, #60]	@ (81132ac <xTaskPriorityDisinherit+0xd8>)
 811326e:	681b      	ldr	r3, [r3, #0]
 8113270:	429a      	cmp	r2, r3
 8113272:	d903      	bls.n	811327c <xTaskPriorityDisinherit+0xa8>
 8113274:	693b      	ldr	r3, [r7, #16]
 8113276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113278:	4a0c      	ldr	r2, [pc, #48]	@ (81132ac <xTaskPriorityDisinherit+0xd8>)
 811327a:	6013      	str	r3, [r2, #0]
 811327c:	693b      	ldr	r3, [r7, #16]
 811327e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113280:	4613      	mov	r3, r2
 8113282:	009b      	lsls	r3, r3, #2
 8113284:	4413      	add	r3, r2
 8113286:	009b      	lsls	r3, r3, #2
 8113288:	4a09      	ldr	r2, [pc, #36]	@ (81132b0 <xTaskPriorityDisinherit+0xdc>)
 811328a:	441a      	add	r2, r3
 811328c:	693b      	ldr	r3, [r7, #16]
 811328e:	3304      	adds	r3, #4
 8113290:	4619      	mov	r1, r3
 8113292:	4610      	mov	r0, r2
 8113294:	f7fd fce1 	bl	8110c5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8113298:	2301      	movs	r3, #1
 811329a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 811329c:	697b      	ldr	r3, [r7, #20]
	}
 811329e:	4618      	mov	r0, r3
 81132a0:	3718      	adds	r7, #24
 81132a2:	46bd      	mov	sp, r7
 81132a4:	bd80      	pop	{r7, pc}
 81132a6:	bf00      	nop
 81132a8:	24009a44 	.word	0x24009a44
 81132ac:	24009f20 	.word	0x24009f20
 81132b0:	24009a48 	.word	0x24009a48

081132b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 81132b4:	b580      	push	{r7, lr}
 81132b6:	b088      	sub	sp, #32
 81132b8:	af00      	add	r7, sp, #0
 81132ba:	6078      	str	r0, [r7, #4]
 81132bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 81132be:	687b      	ldr	r3, [r7, #4]
 81132c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 81132c2:	2301      	movs	r3, #1
 81132c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81132c6:	687b      	ldr	r3, [r7, #4]
 81132c8:	2b00      	cmp	r3, #0
 81132ca:	d06c      	beq.n	81133a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 81132cc:	69bb      	ldr	r3, [r7, #24]
 81132ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81132d0:	2b00      	cmp	r3, #0
 81132d2:	d10b      	bne.n	81132ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 81132d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81132d8:	f383 8811 	msr	BASEPRI, r3
 81132dc:	f3bf 8f6f 	isb	sy
 81132e0:	f3bf 8f4f 	dsb	sy
 81132e4:	60fb      	str	r3, [r7, #12]
}
 81132e6:	bf00      	nop
 81132e8:	bf00      	nop
 81132ea:	e7fd      	b.n	81132e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 81132ec:	69bb      	ldr	r3, [r7, #24]
 81132ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81132f0:	683a      	ldr	r2, [r7, #0]
 81132f2:	429a      	cmp	r2, r3
 81132f4:	d902      	bls.n	81132fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 81132f6:	683b      	ldr	r3, [r7, #0]
 81132f8:	61fb      	str	r3, [r7, #28]
 81132fa:	e002      	b.n	8113302 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 81132fc:	69bb      	ldr	r3, [r7, #24]
 81132fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8113300:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8113302:	69bb      	ldr	r3, [r7, #24]
 8113304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113306:	69fa      	ldr	r2, [r7, #28]
 8113308:	429a      	cmp	r2, r3
 811330a:	d04c      	beq.n	81133a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 811330c:	69bb      	ldr	r3, [r7, #24]
 811330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113310:	697a      	ldr	r2, [r7, #20]
 8113312:	429a      	cmp	r2, r3
 8113314:	d147      	bne.n	81133a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8113316:	4b26      	ldr	r3, [pc, #152]	@ (81133b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8113318:	681b      	ldr	r3, [r3, #0]
 811331a:	69ba      	ldr	r2, [r7, #24]
 811331c:	429a      	cmp	r2, r3
 811331e:	d10b      	bne.n	8113338 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8113320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113324:	f383 8811 	msr	BASEPRI, r3
 8113328:	f3bf 8f6f 	isb	sy
 811332c:	f3bf 8f4f 	dsb	sy
 8113330:	60bb      	str	r3, [r7, #8]
}
 8113332:	bf00      	nop
 8113334:	bf00      	nop
 8113336:	e7fd      	b.n	8113334 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8113338:	69bb      	ldr	r3, [r7, #24]
 811333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811333c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 811333e:	69bb      	ldr	r3, [r7, #24]
 8113340:	69fa      	ldr	r2, [r7, #28]
 8113342:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8113344:	69bb      	ldr	r3, [r7, #24]
 8113346:	699b      	ldr	r3, [r3, #24]
 8113348:	2b00      	cmp	r3, #0
 811334a:	db04      	blt.n	8113356 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 811334c:	69fb      	ldr	r3, [r7, #28]
 811334e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8113352:	69bb      	ldr	r3, [r7, #24]
 8113354:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8113356:	69bb      	ldr	r3, [r7, #24]
 8113358:	6959      	ldr	r1, [r3, #20]
 811335a:	693a      	ldr	r2, [r7, #16]
 811335c:	4613      	mov	r3, r2
 811335e:	009b      	lsls	r3, r3, #2
 8113360:	4413      	add	r3, r2
 8113362:	009b      	lsls	r3, r3, #2
 8113364:	4a13      	ldr	r2, [pc, #76]	@ (81133b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8113366:	4413      	add	r3, r2
 8113368:	4299      	cmp	r1, r3
 811336a:	d11c      	bne.n	81133a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811336c:	69bb      	ldr	r3, [r7, #24]
 811336e:	3304      	adds	r3, #4
 8113370:	4618      	mov	r0, r3
 8113372:	f7fd fccf 	bl	8110d14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8113376:	69bb      	ldr	r3, [r7, #24]
 8113378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811337a:	4b0f      	ldr	r3, [pc, #60]	@ (81133b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 811337c:	681b      	ldr	r3, [r3, #0]
 811337e:	429a      	cmp	r2, r3
 8113380:	d903      	bls.n	811338a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8113382:	69bb      	ldr	r3, [r7, #24]
 8113384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113386:	4a0c      	ldr	r2, [pc, #48]	@ (81133b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8113388:	6013      	str	r3, [r2, #0]
 811338a:	69bb      	ldr	r3, [r7, #24]
 811338c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811338e:	4613      	mov	r3, r2
 8113390:	009b      	lsls	r3, r3, #2
 8113392:	4413      	add	r3, r2
 8113394:	009b      	lsls	r3, r3, #2
 8113396:	4a07      	ldr	r2, [pc, #28]	@ (81133b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8113398:	441a      	add	r2, r3
 811339a:	69bb      	ldr	r3, [r7, #24]
 811339c:	3304      	adds	r3, #4
 811339e:	4619      	mov	r1, r3
 81133a0:	4610      	mov	r0, r2
 81133a2:	f7fd fc5a 	bl	8110c5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81133a6:	bf00      	nop
 81133a8:	3720      	adds	r7, #32
 81133aa:	46bd      	mov	sp, r7
 81133ac:	bd80      	pop	{r7, pc}
 81133ae:	bf00      	nop
 81133b0:	24009a44 	.word	0x24009a44
 81133b4:	24009a48 	.word	0x24009a48
 81133b8:	24009f20 	.word	0x24009f20

081133bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 81133bc:	b480      	push	{r7}
 81133be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 81133c0:	4b07      	ldr	r3, [pc, #28]	@ (81133e0 <pvTaskIncrementMutexHeldCount+0x24>)
 81133c2:	681b      	ldr	r3, [r3, #0]
 81133c4:	2b00      	cmp	r3, #0
 81133c6:	d004      	beq.n	81133d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 81133c8:	4b05      	ldr	r3, [pc, #20]	@ (81133e0 <pvTaskIncrementMutexHeldCount+0x24>)
 81133ca:	681b      	ldr	r3, [r3, #0]
 81133cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81133ce:	3201      	adds	r2, #1
 81133d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 81133d2:	4b03      	ldr	r3, [pc, #12]	@ (81133e0 <pvTaskIncrementMutexHeldCount+0x24>)
 81133d4:	681b      	ldr	r3, [r3, #0]
	}
 81133d6:	4618      	mov	r0, r3
 81133d8:	46bd      	mov	sp, r7
 81133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81133de:	4770      	bx	lr
 81133e0:	24009a44 	.word	0x24009a44

081133e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81133e4:	b580      	push	{r7, lr}
 81133e6:	b084      	sub	sp, #16
 81133e8:	af00      	add	r7, sp, #0
 81133ea:	6078      	str	r0, [r7, #4]
 81133ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81133ee:	4b21      	ldr	r3, [pc, #132]	@ (8113474 <prvAddCurrentTaskToDelayedList+0x90>)
 81133f0:	681b      	ldr	r3, [r3, #0]
 81133f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81133f4:	4b20      	ldr	r3, [pc, #128]	@ (8113478 <prvAddCurrentTaskToDelayedList+0x94>)
 81133f6:	681b      	ldr	r3, [r3, #0]
 81133f8:	3304      	adds	r3, #4
 81133fa:	4618      	mov	r0, r3
 81133fc:	f7fd fc8a 	bl	8110d14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8113400:	687b      	ldr	r3, [r7, #4]
 8113402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8113406:	d10a      	bne.n	811341e <prvAddCurrentTaskToDelayedList+0x3a>
 8113408:	683b      	ldr	r3, [r7, #0]
 811340a:	2b00      	cmp	r3, #0
 811340c:	d007      	beq.n	811341e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811340e:	4b1a      	ldr	r3, [pc, #104]	@ (8113478 <prvAddCurrentTaskToDelayedList+0x94>)
 8113410:	681b      	ldr	r3, [r3, #0]
 8113412:	3304      	adds	r3, #4
 8113414:	4619      	mov	r1, r3
 8113416:	4819      	ldr	r0, [pc, #100]	@ (811347c <prvAddCurrentTaskToDelayedList+0x98>)
 8113418:	f7fd fc1f 	bl	8110c5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 811341c:	e026      	b.n	811346c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 811341e:	68fa      	ldr	r2, [r7, #12]
 8113420:	687b      	ldr	r3, [r7, #4]
 8113422:	4413      	add	r3, r2
 8113424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8113426:	4b14      	ldr	r3, [pc, #80]	@ (8113478 <prvAddCurrentTaskToDelayedList+0x94>)
 8113428:	681b      	ldr	r3, [r3, #0]
 811342a:	68ba      	ldr	r2, [r7, #8]
 811342c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 811342e:	68ba      	ldr	r2, [r7, #8]
 8113430:	68fb      	ldr	r3, [r7, #12]
 8113432:	429a      	cmp	r2, r3
 8113434:	d209      	bcs.n	811344a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8113436:	4b12      	ldr	r3, [pc, #72]	@ (8113480 <prvAddCurrentTaskToDelayedList+0x9c>)
 8113438:	681a      	ldr	r2, [r3, #0]
 811343a:	4b0f      	ldr	r3, [pc, #60]	@ (8113478 <prvAddCurrentTaskToDelayedList+0x94>)
 811343c:	681b      	ldr	r3, [r3, #0]
 811343e:	3304      	adds	r3, #4
 8113440:	4619      	mov	r1, r3
 8113442:	4610      	mov	r0, r2
 8113444:	f7fd fc2d 	bl	8110ca2 <vListInsert>
}
 8113448:	e010      	b.n	811346c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811344a:	4b0e      	ldr	r3, [pc, #56]	@ (8113484 <prvAddCurrentTaskToDelayedList+0xa0>)
 811344c:	681a      	ldr	r2, [r3, #0]
 811344e:	4b0a      	ldr	r3, [pc, #40]	@ (8113478 <prvAddCurrentTaskToDelayedList+0x94>)
 8113450:	681b      	ldr	r3, [r3, #0]
 8113452:	3304      	adds	r3, #4
 8113454:	4619      	mov	r1, r3
 8113456:	4610      	mov	r0, r2
 8113458:	f7fd fc23 	bl	8110ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 811345c:	4b0a      	ldr	r3, [pc, #40]	@ (8113488 <prvAddCurrentTaskToDelayedList+0xa4>)
 811345e:	681b      	ldr	r3, [r3, #0]
 8113460:	68ba      	ldr	r2, [r7, #8]
 8113462:	429a      	cmp	r2, r3
 8113464:	d202      	bcs.n	811346c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8113466:	4a08      	ldr	r2, [pc, #32]	@ (8113488 <prvAddCurrentTaskToDelayedList+0xa4>)
 8113468:	68bb      	ldr	r3, [r7, #8]
 811346a:	6013      	str	r3, [r2, #0]
}
 811346c:	bf00      	nop
 811346e:	3710      	adds	r7, #16
 8113470:	46bd      	mov	sp, r7
 8113472:	bd80      	pop	{r7, pc}
 8113474:	24009f1c 	.word	0x24009f1c
 8113478:	24009a44 	.word	0x24009a44
 811347c:	24009f04 	.word	0x24009f04
 8113480:	24009ed4 	.word	0x24009ed4
 8113484:	24009ed0 	.word	0x24009ed0
 8113488:	24009f38 	.word	0x24009f38

0811348c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 811348c:	b580      	push	{r7, lr}
 811348e:	b08a      	sub	sp, #40	@ 0x28
 8113490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8113492:	2300      	movs	r3, #0
 8113494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8113496:	f000 fb13 	bl	8113ac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 811349a:	4b1d      	ldr	r3, [pc, #116]	@ (8113510 <xTimerCreateTimerTask+0x84>)
 811349c:	681b      	ldr	r3, [r3, #0]
 811349e:	2b00      	cmp	r3, #0
 81134a0:	d021      	beq.n	81134e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81134a2:	2300      	movs	r3, #0
 81134a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81134a6:	2300      	movs	r3, #0
 81134a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81134aa:	1d3a      	adds	r2, r7, #4
 81134ac:	f107 0108 	add.w	r1, r7, #8
 81134b0:	f107 030c 	add.w	r3, r7, #12
 81134b4:	4618      	mov	r0, r3
 81134b6:	f7fd f99b 	bl	81107f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81134ba:	6879      	ldr	r1, [r7, #4]
 81134bc:	68bb      	ldr	r3, [r7, #8]
 81134be:	68fa      	ldr	r2, [r7, #12]
 81134c0:	9202      	str	r2, [sp, #8]
 81134c2:	9301      	str	r3, [sp, #4]
 81134c4:	2302      	movs	r3, #2
 81134c6:	9300      	str	r3, [sp, #0]
 81134c8:	2300      	movs	r3, #0
 81134ca:	460a      	mov	r2, r1
 81134cc:	4911      	ldr	r1, [pc, #68]	@ (8113514 <xTimerCreateTimerTask+0x88>)
 81134ce:	4812      	ldr	r0, [pc, #72]	@ (8113518 <xTimerCreateTimerTask+0x8c>)
 81134d0:	f7fe ff80 	bl	81123d4 <xTaskCreateStatic>
 81134d4:	4603      	mov	r3, r0
 81134d6:	4a11      	ldr	r2, [pc, #68]	@ (811351c <xTimerCreateTimerTask+0x90>)
 81134d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81134da:	4b10      	ldr	r3, [pc, #64]	@ (811351c <xTimerCreateTimerTask+0x90>)
 81134dc:	681b      	ldr	r3, [r3, #0]
 81134de:	2b00      	cmp	r3, #0
 81134e0:	d001      	beq.n	81134e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81134e2:	2301      	movs	r3, #1
 81134e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81134e6:	697b      	ldr	r3, [r7, #20]
 81134e8:	2b00      	cmp	r3, #0
 81134ea:	d10b      	bne.n	8113504 <xTimerCreateTimerTask+0x78>
	__asm volatile
 81134ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81134f0:	f383 8811 	msr	BASEPRI, r3
 81134f4:	f3bf 8f6f 	isb	sy
 81134f8:	f3bf 8f4f 	dsb	sy
 81134fc:	613b      	str	r3, [r7, #16]
}
 81134fe:	bf00      	nop
 8113500:	bf00      	nop
 8113502:	e7fd      	b.n	8113500 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8113504:	697b      	ldr	r3, [r7, #20]
}
 8113506:	4618      	mov	r0, r3
 8113508:	3718      	adds	r7, #24
 811350a:	46bd      	mov	sp, r7
 811350c:	bd80      	pop	{r7, pc}
 811350e:	bf00      	nop
 8113510:	24009f74 	.word	0x24009f74
 8113514:	08124d94 	.word	0x08124d94
 8113518:	08113659 	.word	0x08113659
 811351c:	24009f78 	.word	0x24009f78

08113520 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8113520:	b580      	push	{r7, lr}
 8113522:	b08a      	sub	sp, #40	@ 0x28
 8113524:	af00      	add	r7, sp, #0
 8113526:	60f8      	str	r0, [r7, #12]
 8113528:	60b9      	str	r1, [r7, #8]
 811352a:	607a      	str	r2, [r7, #4]
 811352c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 811352e:	2300      	movs	r3, #0
 8113530:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8113532:	68fb      	ldr	r3, [r7, #12]
 8113534:	2b00      	cmp	r3, #0
 8113536:	d10b      	bne.n	8113550 <xTimerGenericCommand+0x30>
	__asm volatile
 8113538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811353c:	f383 8811 	msr	BASEPRI, r3
 8113540:	f3bf 8f6f 	isb	sy
 8113544:	f3bf 8f4f 	dsb	sy
 8113548:	623b      	str	r3, [r7, #32]
}
 811354a:	bf00      	nop
 811354c:	bf00      	nop
 811354e:	e7fd      	b.n	811354c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8113550:	4b19      	ldr	r3, [pc, #100]	@ (81135b8 <xTimerGenericCommand+0x98>)
 8113552:	681b      	ldr	r3, [r3, #0]
 8113554:	2b00      	cmp	r3, #0
 8113556:	d02a      	beq.n	81135ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8113558:	68bb      	ldr	r3, [r7, #8]
 811355a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 811355c:	687b      	ldr	r3, [r7, #4]
 811355e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8113560:	68fb      	ldr	r3, [r7, #12]
 8113562:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8113564:	68bb      	ldr	r3, [r7, #8]
 8113566:	2b05      	cmp	r3, #5
 8113568:	dc18      	bgt.n	811359c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 811356a:	f7ff fdad 	bl	81130c8 <xTaskGetSchedulerState>
 811356e:	4603      	mov	r3, r0
 8113570:	2b02      	cmp	r3, #2
 8113572:	d109      	bne.n	8113588 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8113574:	4b10      	ldr	r3, [pc, #64]	@ (81135b8 <xTimerGenericCommand+0x98>)
 8113576:	6818      	ldr	r0, [r3, #0]
 8113578:	f107 0110 	add.w	r1, r7, #16
 811357c:	2300      	movs	r3, #0
 811357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8113580:	f7fe f8b0 	bl	81116e4 <xQueueGenericSend>
 8113584:	6278      	str	r0, [r7, #36]	@ 0x24
 8113586:	e012      	b.n	81135ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8113588:	4b0b      	ldr	r3, [pc, #44]	@ (81135b8 <xTimerGenericCommand+0x98>)
 811358a:	6818      	ldr	r0, [r3, #0]
 811358c:	f107 0110 	add.w	r1, r7, #16
 8113590:	2300      	movs	r3, #0
 8113592:	2200      	movs	r2, #0
 8113594:	f7fe f8a6 	bl	81116e4 <xQueueGenericSend>
 8113598:	6278      	str	r0, [r7, #36]	@ 0x24
 811359a:	e008      	b.n	81135ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 811359c:	4b06      	ldr	r3, [pc, #24]	@ (81135b8 <xTimerGenericCommand+0x98>)
 811359e:	6818      	ldr	r0, [r3, #0]
 81135a0:	f107 0110 	add.w	r1, r7, #16
 81135a4:	2300      	movs	r3, #0
 81135a6:	683a      	ldr	r2, [r7, #0]
 81135a8:	f7fe f99e 	bl	81118e8 <xQueueGenericSendFromISR>
 81135ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81135ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81135b0:	4618      	mov	r0, r3
 81135b2:	3728      	adds	r7, #40	@ 0x28
 81135b4:	46bd      	mov	sp, r7
 81135b6:	bd80      	pop	{r7, pc}
 81135b8:	24009f74 	.word	0x24009f74

081135bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81135bc:	b580      	push	{r7, lr}
 81135be:	b088      	sub	sp, #32
 81135c0:	af02      	add	r7, sp, #8
 81135c2:	6078      	str	r0, [r7, #4]
 81135c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81135c6:	4b23      	ldr	r3, [pc, #140]	@ (8113654 <prvProcessExpiredTimer+0x98>)
 81135c8:	681b      	ldr	r3, [r3, #0]
 81135ca:	68db      	ldr	r3, [r3, #12]
 81135cc:	68db      	ldr	r3, [r3, #12]
 81135ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81135d0:	697b      	ldr	r3, [r7, #20]
 81135d2:	3304      	adds	r3, #4
 81135d4:	4618      	mov	r0, r3
 81135d6:	f7fd fb9d 	bl	8110d14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81135da:	697b      	ldr	r3, [r7, #20]
 81135dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81135e0:	f003 0304 	and.w	r3, r3, #4
 81135e4:	2b00      	cmp	r3, #0
 81135e6:	d023      	beq.n	8113630 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81135e8:	697b      	ldr	r3, [r7, #20]
 81135ea:	699a      	ldr	r2, [r3, #24]
 81135ec:	687b      	ldr	r3, [r7, #4]
 81135ee:	18d1      	adds	r1, r2, r3
 81135f0:	687b      	ldr	r3, [r7, #4]
 81135f2:	683a      	ldr	r2, [r7, #0]
 81135f4:	6978      	ldr	r0, [r7, #20]
 81135f6:	f000 f8d5 	bl	81137a4 <prvInsertTimerInActiveList>
 81135fa:	4603      	mov	r3, r0
 81135fc:	2b00      	cmp	r3, #0
 81135fe:	d020      	beq.n	8113642 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8113600:	2300      	movs	r3, #0
 8113602:	9300      	str	r3, [sp, #0]
 8113604:	2300      	movs	r3, #0
 8113606:	687a      	ldr	r2, [r7, #4]
 8113608:	2100      	movs	r1, #0
 811360a:	6978      	ldr	r0, [r7, #20]
 811360c:	f7ff ff88 	bl	8113520 <xTimerGenericCommand>
 8113610:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8113612:	693b      	ldr	r3, [r7, #16]
 8113614:	2b00      	cmp	r3, #0
 8113616:	d114      	bne.n	8113642 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8113618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811361c:	f383 8811 	msr	BASEPRI, r3
 8113620:	f3bf 8f6f 	isb	sy
 8113624:	f3bf 8f4f 	dsb	sy
 8113628:	60fb      	str	r3, [r7, #12]
}
 811362a:	bf00      	nop
 811362c:	bf00      	nop
 811362e:	e7fd      	b.n	811362c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8113630:	697b      	ldr	r3, [r7, #20]
 8113632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113636:	f023 0301 	bic.w	r3, r3, #1
 811363a:	b2da      	uxtb	r2, r3
 811363c:	697b      	ldr	r3, [r7, #20]
 811363e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8113642:	697b      	ldr	r3, [r7, #20]
 8113644:	6a1b      	ldr	r3, [r3, #32]
 8113646:	6978      	ldr	r0, [r7, #20]
 8113648:	4798      	blx	r3
}
 811364a:	bf00      	nop
 811364c:	3718      	adds	r7, #24
 811364e:	46bd      	mov	sp, r7
 8113650:	bd80      	pop	{r7, pc}
 8113652:	bf00      	nop
 8113654:	24009f6c 	.word	0x24009f6c

08113658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8113658:	b580      	push	{r7, lr}
 811365a:	b084      	sub	sp, #16
 811365c:	af00      	add	r7, sp, #0
 811365e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8113660:	f107 0308 	add.w	r3, r7, #8
 8113664:	4618      	mov	r0, r3
 8113666:	f000 f859 	bl	811371c <prvGetNextExpireTime>
 811366a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 811366c:	68bb      	ldr	r3, [r7, #8]
 811366e:	4619      	mov	r1, r3
 8113670:	68f8      	ldr	r0, [r7, #12]
 8113672:	f000 f805 	bl	8113680 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8113676:	f000 f8d7 	bl	8113828 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 811367a:	bf00      	nop
 811367c:	e7f0      	b.n	8113660 <prvTimerTask+0x8>
	...

08113680 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8113680:	b580      	push	{r7, lr}
 8113682:	b084      	sub	sp, #16
 8113684:	af00      	add	r7, sp, #0
 8113686:	6078      	str	r0, [r7, #4]
 8113688:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 811368a:	f7ff f907 	bl	811289c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811368e:	f107 0308 	add.w	r3, r7, #8
 8113692:	4618      	mov	r0, r3
 8113694:	f000 f866 	bl	8113764 <prvSampleTimeNow>
 8113698:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 811369a:	68bb      	ldr	r3, [r7, #8]
 811369c:	2b00      	cmp	r3, #0
 811369e:	d130      	bne.n	8113702 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81136a0:	683b      	ldr	r3, [r7, #0]
 81136a2:	2b00      	cmp	r3, #0
 81136a4:	d10a      	bne.n	81136bc <prvProcessTimerOrBlockTask+0x3c>
 81136a6:	687a      	ldr	r2, [r7, #4]
 81136a8:	68fb      	ldr	r3, [r7, #12]
 81136aa:	429a      	cmp	r2, r3
 81136ac:	d806      	bhi.n	81136bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81136ae:	f7ff f903 	bl	81128b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81136b2:	68f9      	ldr	r1, [r7, #12]
 81136b4:	6878      	ldr	r0, [r7, #4]
 81136b6:	f7ff ff81 	bl	81135bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81136ba:	e024      	b.n	8113706 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81136bc:	683b      	ldr	r3, [r7, #0]
 81136be:	2b00      	cmp	r3, #0
 81136c0:	d008      	beq.n	81136d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81136c2:	4b13      	ldr	r3, [pc, #76]	@ (8113710 <prvProcessTimerOrBlockTask+0x90>)
 81136c4:	681b      	ldr	r3, [r3, #0]
 81136c6:	681b      	ldr	r3, [r3, #0]
 81136c8:	2b00      	cmp	r3, #0
 81136ca:	d101      	bne.n	81136d0 <prvProcessTimerOrBlockTask+0x50>
 81136cc:	2301      	movs	r3, #1
 81136ce:	e000      	b.n	81136d2 <prvProcessTimerOrBlockTask+0x52>
 81136d0:	2300      	movs	r3, #0
 81136d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81136d4:	4b0f      	ldr	r3, [pc, #60]	@ (8113714 <prvProcessTimerOrBlockTask+0x94>)
 81136d6:	6818      	ldr	r0, [r3, #0]
 81136d8:	687a      	ldr	r2, [r7, #4]
 81136da:	68fb      	ldr	r3, [r7, #12]
 81136dc:	1ad3      	subs	r3, r2, r3
 81136de:	683a      	ldr	r2, [r7, #0]
 81136e0:	4619      	mov	r1, r3
 81136e2:	f7fe fe43 	bl	811236c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81136e6:	f7ff f8e7 	bl	81128b8 <xTaskResumeAll>
 81136ea:	4603      	mov	r3, r0
 81136ec:	2b00      	cmp	r3, #0
 81136ee:	d10a      	bne.n	8113706 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81136f0:	4b09      	ldr	r3, [pc, #36]	@ (8113718 <prvProcessTimerOrBlockTask+0x98>)
 81136f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81136f6:	601a      	str	r2, [r3, #0]
 81136f8:	f3bf 8f4f 	dsb	sy
 81136fc:	f3bf 8f6f 	isb	sy
}
 8113700:	e001      	b.n	8113706 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8113702:	f7ff f8d9 	bl	81128b8 <xTaskResumeAll>
}
 8113706:	bf00      	nop
 8113708:	3710      	adds	r7, #16
 811370a:	46bd      	mov	sp, r7
 811370c:	bd80      	pop	{r7, pc}
 811370e:	bf00      	nop
 8113710:	24009f70 	.word	0x24009f70
 8113714:	24009f74 	.word	0x24009f74
 8113718:	e000ed04 	.word	0xe000ed04

0811371c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 811371c:	b480      	push	{r7}
 811371e:	b085      	sub	sp, #20
 8113720:	af00      	add	r7, sp, #0
 8113722:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8113724:	4b0e      	ldr	r3, [pc, #56]	@ (8113760 <prvGetNextExpireTime+0x44>)
 8113726:	681b      	ldr	r3, [r3, #0]
 8113728:	681b      	ldr	r3, [r3, #0]
 811372a:	2b00      	cmp	r3, #0
 811372c:	d101      	bne.n	8113732 <prvGetNextExpireTime+0x16>
 811372e:	2201      	movs	r2, #1
 8113730:	e000      	b.n	8113734 <prvGetNextExpireTime+0x18>
 8113732:	2200      	movs	r2, #0
 8113734:	687b      	ldr	r3, [r7, #4]
 8113736:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8113738:	687b      	ldr	r3, [r7, #4]
 811373a:	681b      	ldr	r3, [r3, #0]
 811373c:	2b00      	cmp	r3, #0
 811373e:	d105      	bne.n	811374c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8113740:	4b07      	ldr	r3, [pc, #28]	@ (8113760 <prvGetNextExpireTime+0x44>)
 8113742:	681b      	ldr	r3, [r3, #0]
 8113744:	68db      	ldr	r3, [r3, #12]
 8113746:	681b      	ldr	r3, [r3, #0]
 8113748:	60fb      	str	r3, [r7, #12]
 811374a:	e001      	b.n	8113750 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 811374c:	2300      	movs	r3, #0
 811374e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8113750:	68fb      	ldr	r3, [r7, #12]
}
 8113752:	4618      	mov	r0, r3
 8113754:	3714      	adds	r7, #20
 8113756:	46bd      	mov	sp, r7
 8113758:	f85d 7b04 	ldr.w	r7, [sp], #4
 811375c:	4770      	bx	lr
 811375e:	bf00      	nop
 8113760:	24009f6c 	.word	0x24009f6c

08113764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8113764:	b580      	push	{r7, lr}
 8113766:	b084      	sub	sp, #16
 8113768:	af00      	add	r7, sp, #0
 811376a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 811376c:	f7ff f942 	bl	81129f4 <xTaskGetTickCount>
 8113770:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8113772:	4b0b      	ldr	r3, [pc, #44]	@ (81137a0 <prvSampleTimeNow+0x3c>)
 8113774:	681b      	ldr	r3, [r3, #0]
 8113776:	68fa      	ldr	r2, [r7, #12]
 8113778:	429a      	cmp	r2, r3
 811377a:	d205      	bcs.n	8113788 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 811377c:	f000 f93a 	bl	81139f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8113780:	687b      	ldr	r3, [r7, #4]
 8113782:	2201      	movs	r2, #1
 8113784:	601a      	str	r2, [r3, #0]
 8113786:	e002      	b.n	811378e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8113788:	687b      	ldr	r3, [r7, #4]
 811378a:	2200      	movs	r2, #0
 811378c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 811378e:	4a04      	ldr	r2, [pc, #16]	@ (81137a0 <prvSampleTimeNow+0x3c>)
 8113790:	68fb      	ldr	r3, [r7, #12]
 8113792:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8113794:	68fb      	ldr	r3, [r7, #12]
}
 8113796:	4618      	mov	r0, r3
 8113798:	3710      	adds	r7, #16
 811379a:	46bd      	mov	sp, r7
 811379c:	bd80      	pop	{r7, pc}
 811379e:	bf00      	nop
 81137a0:	24009f7c 	.word	0x24009f7c

081137a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81137a4:	b580      	push	{r7, lr}
 81137a6:	b086      	sub	sp, #24
 81137a8:	af00      	add	r7, sp, #0
 81137aa:	60f8      	str	r0, [r7, #12]
 81137ac:	60b9      	str	r1, [r7, #8]
 81137ae:	607a      	str	r2, [r7, #4]
 81137b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81137b2:	2300      	movs	r3, #0
 81137b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81137b6:	68fb      	ldr	r3, [r7, #12]
 81137b8:	68ba      	ldr	r2, [r7, #8]
 81137ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81137bc:	68fb      	ldr	r3, [r7, #12]
 81137be:	68fa      	ldr	r2, [r7, #12]
 81137c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81137c2:	68ba      	ldr	r2, [r7, #8]
 81137c4:	687b      	ldr	r3, [r7, #4]
 81137c6:	429a      	cmp	r2, r3
 81137c8:	d812      	bhi.n	81137f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81137ca:	687a      	ldr	r2, [r7, #4]
 81137cc:	683b      	ldr	r3, [r7, #0]
 81137ce:	1ad2      	subs	r2, r2, r3
 81137d0:	68fb      	ldr	r3, [r7, #12]
 81137d2:	699b      	ldr	r3, [r3, #24]
 81137d4:	429a      	cmp	r2, r3
 81137d6:	d302      	bcc.n	81137de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81137d8:	2301      	movs	r3, #1
 81137da:	617b      	str	r3, [r7, #20]
 81137dc:	e01b      	b.n	8113816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81137de:	4b10      	ldr	r3, [pc, #64]	@ (8113820 <prvInsertTimerInActiveList+0x7c>)
 81137e0:	681a      	ldr	r2, [r3, #0]
 81137e2:	68fb      	ldr	r3, [r7, #12]
 81137e4:	3304      	adds	r3, #4
 81137e6:	4619      	mov	r1, r3
 81137e8:	4610      	mov	r0, r2
 81137ea:	f7fd fa5a 	bl	8110ca2 <vListInsert>
 81137ee:	e012      	b.n	8113816 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81137f0:	687a      	ldr	r2, [r7, #4]
 81137f2:	683b      	ldr	r3, [r7, #0]
 81137f4:	429a      	cmp	r2, r3
 81137f6:	d206      	bcs.n	8113806 <prvInsertTimerInActiveList+0x62>
 81137f8:	68ba      	ldr	r2, [r7, #8]
 81137fa:	683b      	ldr	r3, [r7, #0]
 81137fc:	429a      	cmp	r2, r3
 81137fe:	d302      	bcc.n	8113806 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8113800:	2301      	movs	r3, #1
 8113802:	617b      	str	r3, [r7, #20]
 8113804:	e007      	b.n	8113816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8113806:	4b07      	ldr	r3, [pc, #28]	@ (8113824 <prvInsertTimerInActiveList+0x80>)
 8113808:	681a      	ldr	r2, [r3, #0]
 811380a:	68fb      	ldr	r3, [r7, #12]
 811380c:	3304      	adds	r3, #4
 811380e:	4619      	mov	r1, r3
 8113810:	4610      	mov	r0, r2
 8113812:	f7fd fa46 	bl	8110ca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8113816:	697b      	ldr	r3, [r7, #20]
}
 8113818:	4618      	mov	r0, r3
 811381a:	3718      	adds	r7, #24
 811381c:	46bd      	mov	sp, r7
 811381e:	bd80      	pop	{r7, pc}
 8113820:	24009f70 	.word	0x24009f70
 8113824:	24009f6c 	.word	0x24009f6c

08113828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8113828:	b580      	push	{r7, lr}
 811382a:	b08e      	sub	sp, #56	@ 0x38
 811382c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 811382e:	e0ce      	b.n	81139ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8113830:	687b      	ldr	r3, [r7, #4]
 8113832:	2b00      	cmp	r3, #0
 8113834:	da19      	bge.n	811386a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8113836:	1d3b      	adds	r3, r7, #4
 8113838:	3304      	adds	r3, #4
 811383a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 811383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811383e:	2b00      	cmp	r3, #0
 8113840:	d10b      	bne.n	811385a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8113842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113846:	f383 8811 	msr	BASEPRI, r3
 811384a:	f3bf 8f6f 	isb	sy
 811384e:	f3bf 8f4f 	dsb	sy
 8113852:	61fb      	str	r3, [r7, #28]
}
 8113854:	bf00      	nop
 8113856:	bf00      	nop
 8113858:	e7fd      	b.n	8113856 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 811385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811385c:	681b      	ldr	r3, [r3, #0]
 811385e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113860:	6850      	ldr	r0, [r2, #4]
 8113862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113864:	6892      	ldr	r2, [r2, #8]
 8113866:	4611      	mov	r1, r2
 8113868:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 811386a:	687b      	ldr	r3, [r7, #4]
 811386c:	2b00      	cmp	r3, #0
 811386e:	f2c0 80ae 	blt.w	81139ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8113872:	68fb      	ldr	r3, [r7, #12]
 8113874:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8113876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113878:	695b      	ldr	r3, [r3, #20]
 811387a:	2b00      	cmp	r3, #0
 811387c:	d004      	beq.n	8113888 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113880:	3304      	adds	r3, #4
 8113882:	4618      	mov	r0, r3
 8113884:	f7fd fa46 	bl	8110d14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8113888:	463b      	mov	r3, r7
 811388a:	4618      	mov	r0, r3
 811388c:	f7ff ff6a 	bl	8113764 <prvSampleTimeNow>
 8113890:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8113892:	687b      	ldr	r3, [r7, #4]
 8113894:	2b09      	cmp	r3, #9
 8113896:	f200 8097 	bhi.w	81139c8 <prvProcessReceivedCommands+0x1a0>
 811389a:	a201      	add	r2, pc, #4	@ (adr r2, 81138a0 <prvProcessReceivedCommands+0x78>)
 811389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81138a0:	081138c9 	.word	0x081138c9
 81138a4:	081138c9 	.word	0x081138c9
 81138a8:	081138c9 	.word	0x081138c9
 81138ac:	0811393f 	.word	0x0811393f
 81138b0:	08113953 	.word	0x08113953
 81138b4:	0811399f 	.word	0x0811399f
 81138b8:	081138c9 	.word	0x081138c9
 81138bc:	081138c9 	.word	0x081138c9
 81138c0:	0811393f 	.word	0x0811393f
 81138c4:	08113953 	.word	0x08113953
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81138c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81138ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81138ce:	f043 0301 	orr.w	r3, r3, #1
 81138d2:	b2da      	uxtb	r2, r3
 81138d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81138d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81138da:	68ba      	ldr	r2, [r7, #8]
 81138dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81138de:	699b      	ldr	r3, [r3, #24]
 81138e0:	18d1      	adds	r1, r2, r3
 81138e2:	68bb      	ldr	r3, [r7, #8]
 81138e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81138e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81138e8:	f7ff ff5c 	bl	81137a4 <prvInsertTimerInActiveList>
 81138ec:	4603      	mov	r3, r0
 81138ee:	2b00      	cmp	r3, #0
 81138f0:	d06c      	beq.n	81139cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81138f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81138f4:	6a1b      	ldr	r3, [r3, #32]
 81138f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81138f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81138fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81138fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113900:	f003 0304 	and.w	r3, r3, #4
 8113904:	2b00      	cmp	r3, #0
 8113906:	d061      	beq.n	81139cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8113908:	68ba      	ldr	r2, [r7, #8]
 811390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811390c:	699b      	ldr	r3, [r3, #24]
 811390e:	441a      	add	r2, r3
 8113910:	2300      	movs	r3, #0
 8113912:	9300      	str	r3, [sp, #0]
 8113914:	2300      	movs	r3, #0
 8113916:	2100      	movs	r1, #0
 8113918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811391a:	f7ff fe01 	bl	8113520 <xTimerGenericCommand>
 811391e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8113920:	6a3b      	ldr	r3, [r7, #32]
 8113922:	2b00      	cmp	r3, #0
 8113924:	d152      	bne.n	81139cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8113926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811392a:	f383 8811 	msr	BASEPRI, r3
 811392e:	f3bf 8f6f 	isb	sy
 8113932:	f3bf 8f4f 	dsb	sy
 8113936:	61bb      	str	r3, [r7, #24]
}
 8113938:	bf00      	nop
 811393a:	bf00      	nop
 811393c:	e7fd      	b.n	811393a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 811393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113944:	f023 0301 	bic.w	r3, r3, #1
 8113948:	b2da      	uxtb	r2, r3
 811394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811394c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8113950:	e03d      	b.n	81139ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8113952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113958:	f043 0301 	orr.w	r3, r3, #1
 811395c:	b2da      	uxtb	r2, r3
 811395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113960:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8113964:	68ba      	ldr	r2, [r7, #8]
 8113966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113968:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 811396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811396c:	699b      	ldr	r3, [r3, #24]
 811396e:	2b00      	cmp	r3, #0
 8113970:	d10b      	bne.n	811398a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8113972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113976:	f383 8811 	msr	BASEPRI, r3
 811397a:	f3bf 8f6f 	isb	sy
 811397e:	f3bf 8f4f 	dsb	sy
 8113982:	617b      	str	r3, [r7, #20]
}
 8113984:	bf00      	nop
 8113986:	bf00      	nop
 8113988:	e7fd      	b.n	8113986 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 811398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811398c:	699a      	ldr	r2, [r3, #24]
 811398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113990:	18d1      	adds	r1, r2, r3
 8113992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8113998:	f7ff ff04 	bl	81137a4 <prvInsertTimerInActiveList>
					break;
 811399c:	e017      	b.n	81139ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 811399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81139a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81139a4:	f003 0302 	and.w	r3, r3, #2
 81139a8:	2b00      	cmp	r3, #0
 81139aa:	d103      	bne.n	81139b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 81139ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81139ae:	f7fd f807 	bl	81109c0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81139b2:	e00c      	b.n	81139ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81139b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81139b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81139ba:	f023 0301 	bic.w	r3, r3, #1
 81139be:	b2da      	uxtb	r2, r3
 81139c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81139c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81139c6:	e002      	b.n	81139ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 81139c8:	bf00      	nop
 81139ca:	e000      	b.n	81139ce <prvProcessReceivedCommands+0x1a6>
					break;
 81139cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81139ce:	4b08      	ldr	r3, [pc, #32]	@ (81139f0 <prvProcessReceivedCommands+0x1c8>)
 81139d0:	681b      	ldr	r3, [r3, #0]
 81139d2:	1d39      	adds	r1, r7, #4
 81139d4:	2200      	movs	r2, #0
 81139d6:	4618      	mov	r0, r3
 81139d8:	f7fe f8b4 	bl	8111b44 <xQueueReceive>
 81139dc:	4603      	mov	r3, r0
 81139de:	2b00      	cmp	r3, #0
 81139e0:	f47f af26 	bne.w	8113830 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 81139e4:	bf00      	nop
 81139e6:	bf00      	nop
 81139e8:	3730      	adds	r7, #48	@ 0x30
 81139ea:	46bd      	mov	sp, r7
 81139ec:	bd80      	pop	{r7, pc}
 81139ee:	bf00      	nop
 81139f0:	24009f74 	.word	0x24009f74

081139f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81139f4:	b580      	push	{r7, lr}
 81139f6:	b088      	sub	sp, #32
 81139f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81139fa:	e049      	b.n	8113a90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81139fc:	4b2e      	ldr	r3, [pc, #184]	@ (8113ab8 <prvSwitchTimerLists+0xc4>)
 81139fe:	681b      	ldr	r3, [r3, #0]
 8113a00:	68db      	ldr	r3, [r3, #12]
 8113a02:	681b      	ldr	r3, [r3, #0]
 8113a04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8113a06:	4b2c      	ldr	r3, [pc, #176]	@ (8113ab8 <prvSwitchTimerLists+0xc4>)
 8113a08:	681b      	ldr	r3, [r3, #0]
 8113a0a:	68db      	ldr	r3, [r3, #12]
 8113a0c:	68db      	ldr	r3, [r3, #12]
 8113a0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8113a10:	68fb      	ldr	r3, [r7, #12]
 8113a12:	3304      	adds	r3, #4
 8113a14:	4618      	mov	r0, r3
 8113a16:	f7fd f97d 	bl	8110d14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8113a1a:	68fb      	ldr	r3, [r7, #12]
 8113a1c:	6a1b      	ldr	r3, [r3, #32]
 8113a1e:	68f8      	ldr	r0, [r7, #12]
 8113a20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8113a22:	68fb      	ldr	r3, [r7, #12]
 8113a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113a28:	f003 0304 	and.w	r3, r3, #4
 8113a2c:	2b00      	cmp	r3, #0
 8113a2e:	d02f      	beq.n	8113a90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8113a30:	68fb      	ldr	r3, [r7, #12]
 8113a32:	699b      	ldr	r3, [r3, #24]
 8113a34:	693a      	ldr	r2, [r7, #16]
 8113a36:	4413      	add	r3, r2
 8113a38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8113a3a:	68ba      	ldr	r2, [r7, #8]
 8113a3c:	693b      	ldr	r3, [r7, #16]
 8113a3e:	429a      	cmp	r2, r3
 8113a40:	d90e      	bls.n	8113a60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8113a42:	68fb      	ldr	r3, [r7, #12]
 8113a44:	68ba      	ldr	r2, [r7, #8]
 8113a46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8113a48:	68fb      	ldr	r3, [r7, #12]
 8113a4a:	68fa      	ldr	r2, [r7, #12]
 8113a4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8113a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8113ab8 <prvSwitchTimerLists+0xc4>)
 8113a50:	681a      	ldr	r2, [r3, #0]
 8113a52:	68fb      	ldr	r3, [r7, #12]
 8113a54:	3304      	adds	r3, #4
 8113a56:	4619      	mov	r1, r3
 8113a58:	4610      	mov	r0, r2
 8113a5a:	f7fd f922 	bl	8110ca2 <vListInsert>
 8113a5e:	e017      	b.n	8113a90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8113a60:	2300      	movs	r3, #0
 8113a62:	9300      	str	r3, [sp, #0]
 8113a64:	2300      	movs	r3, #0
 8113a66:	693a      	ldr	r2, [r7, #16]
 8113a68:	2100      	movs	r1, #0
 8113a6a:	68f8      	ldr	r0, [r7, #12]
 8113a6c:	f7ff fd58 	bl	8113520 <xTimerGenericCommand>
 8113a70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8113a72:	687b      	ldr	r3, [r7, #4]
 8113a74:	2b00      	cmp	r3, #0
 8113a76:	d10b      	bne.n	8113a90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8113a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113a7c:	f383 8811 	msr	BASEPRI, r3
 8113a80:	f3bf 8f6f 	isb	sy
 8113a84:	f3bf 8f4f 	dsb	sy
 8113a88:	603b      	str	r3, [r7, #0]
}
 8113a8a:	bf00      	nop
 8113a8c:	bf00      	nop
 8113a8e:	e7fd      	b.n	8113a8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8113a90:	4b09      	ldr	r3, [pc, #36]	@ (8113ab8 <prvSwitchTimerLists+0xc4>)
 8113a92:	681b      	ldr	r3, [r3, #0]
 8113a94:	681b      	ldr	r3, [r3, #0]
 8113a96:	2b00      	cmp	r3, #0
 8113a98:	d1b0      	bne.n	81139fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8113a9a:	4b07      	ldr	r3, [pc, #28]	@ (8113ab8 <prvSwitchTimerLists+0xc4>)
 8113a9c:	681b      	ldr	r3, [r3, #0]
 8113a9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8113aa0:	4b06      	ldr	r3, [pc, #24]	@ (8113abc <prvSwitchTimerLists+0xc8>)
 8113aa2:	681b      	ldr	r3, [r3, #0]
 8113aa4:	4a04      	ldr	r2, [pc, #16]	@ (8113ab8 <prvSwitchTimerLists+0xc4>)
 8113aa6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8113aa8:	4a04      	ldr	r2, [pc, #16]	@ (8113abc <prvSwitchTimerLists+0xc8>)
 8113aaa:	697b      	ldr	r3, [r7, #20]
 8113aac:	6013      	str	r3, [r2, #0]
}
 8113aae:	bf00      	nop
 8113ab0:	3718      	adds	r7, #24
 8113ab2:	46bd      	mov	sp, r7
 8113ab4:	bd80      	pop	{r7, pc}
 8113ab6:	bf00      	nop
 8113ab8:	24009f6c 	.word	0x24009f6c
 8113abc:	24009f70 	.word	0x24009f70

08113ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8113ac0:	b580      	push	{r7, lr}
 8113ac2:	b082      	sub	sp, #8
 8113ac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8113ac6:	f7fd fa7f 	bl	8110fc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8113aca:	4b15      	ldr	r3, [pc, #84]	@ (8113b20 <prvCheckForValidListAndQueue+0x60>)
 8113acc:	681b      	ldr	r3, [r3, #0]
 8113ace:	2b00      	cmp	r3, #0
 8113ad0:	d120      	bne.n	8113b14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8113ad2:	4814      	ldr	r0, [pc, #80]	@ (8113b24 <prvCheckForValidListAndQueue+0x64>)
 8113ad4:	f7fd f894 	bl	8110c00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8113ad8:	4813      	ldr	r0, [pc, #76]	@ (8113b28 <prvCheckForValidListAndQueue+0x68>)
 8113ada:	f7fd f891 	bl	8110c00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8113ade:	4b13      	ldr	r3, [pc, #76]	@ (8113b2c <prvCheckForValidListAndQueue+0x6c>)
 8113ae0:	4a10      	ldr	r2, [pc, #64]	@ (8113b24 <prvCheckForValidListAndQueue+0x64>)
 8113ae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8113ae4:	4b12      	ldr	r3, [pc, #72]	@ (8113b30 <prvCheckForValidListAndQueue+0x70>)
 8113ae6:	4a10      	ldr	r2, [pc, #64]	@ (8113b28 <prvCheckForValidListAndQueue+0x68>)
 8113ae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8113aea:	2300      	movs	r3, #0
 8113aec:	9300      	str	r3, [sp, #0]
 8113aee:	4b11      	ldr	r3, [pc, #68]	@ (8113b34 <prvCheckForValidListAndQueue+0x74>)
 8113af0:	4a11      	ldr	r2, [pc, #68]	@ (8113b38 <prvCheckForValidListAndQueue+0x78>)
 8113af2:	2110      	movs	r1, #16
 8113af4:	200a      	movs	r0, #10
 8113af6:	f7fd fbf3 	bl	81112e0 <xQueueGenericCreateStatic>
 8113afa:	4603      	mov	r3, r0
 8113afc:	4a08      	ldr	r2, [pc, #32]	@ (8113b20 <prvCheckForValidListAndQueue+0x60>)
 8113afe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8113b00:	4b07      	ldr	r3, [pc, #28]	@ (8113b20 <prvCheckForValidListAndQueue+0x60>)
 8113b02:	681b      	ldr	r3, [r3, #0]
 8113b04:	2b00      	cmp	r3, #0
 8113b06:	d005      	beq.n	8113b14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8113b08:	4b05      	ldr	r3, [pc, #20]	@ (8113b20 <prvCheckForValidListAndQueue+0x60>)
 8113b0a:	681b      	ldr	r3, [r3, #0]
 8113b0c:	490b      	ldr	r1, [pc, #44]	@ (8113b3c <prvCheckForValidListAndQueue+0x7c>)
 8113b0e:	4618      	mov	r0, r3
 8113b10:	f7fe fbd8 	bl	81122c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8113b14:	f7fd fa8a 	bl	811102c <vPortExitCritical>
}
 8113b18:	bf00      	nop
 8113b1a:	46bd      	mov	sp, r7
 8113b1c:	bd80      	pop	{r7, pc}
 8113b1e:	bf00      	nop
 8113b20:	24009f74 	.word	0x24009f74
 8113b24:	24009f44 	.word	0x24009f44
 8113b28:	24009f58 	.word	0x24009f58
 8113b2c:	24009f6c 	.word	0x24009f6c
 8113b30:	24009f70 	.word	0x24009f70
 8113b34:	2400a020 	.word	0x2400a020
 8113b38:	24009f80 	.word	0x24009f80
 8113b3c:	08124d9c 	.word	0x08124d9c

08113b40 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8113b40:	b580      	push	{r7, lr}
 8113b42:	b084      	sub	sp, #16
 8113b44:	af00      	add	r7, sp, #0
 8113b46:	6078      	str	r0, [r7, #4]
 8113b48:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8113b4a:	683b      	ldr	r3, [r7, #0]
 8113b4c:	681b      	ldr	r3, [r3, #0]
 8113b4e:	330c      	adds	r3, #12
 8113b50:	461a      	mov	r2, r3
 8113b52:	6839      	ldr	r1, [r7, #0]
 8113b54:	6878      	ldr	r0, [r7, #4]
 8113b56:	f00c fcaf 	bl	81204b8 <tcpip_send_msg_wait_sem>
 8113b5a:	4603      	mov	r3, r0
 8113b5c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8113b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8113b62:	2b00      	cmp	r3, #0
 8113b64:	d103      	bne.n	8113b6e <netconn_apimsg+0x2e>
    return apimsg->err;
 8113b66:	683b      	ldr	r3, [r7, #0]
 8113b68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8113b6c:	e001      	b.n	8113b72 <netconn_apimsg+0x32>
  }
  return err;
 8113b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8113b72:	4618      	mov	r0, r3
 8113b74:	3710      	adds	r7, #16
 8113b76:	46bd      	mov	sp, r7
 8113b78:	bd80      	pop	{r7, pc}

08113b7a <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8113b7a:	b580      	push	{r7, lr}
 8113b7c:	b084      	sub	sp, #16
 8113b7e:	af00      	add	r7, sp, #0
 8113b80:	60f8      	str	r0, [r7, #12]
 8113b82:	60b9      	str	r1, [r7, #8]
 8113b84:	607a      	str	r2, [r7, #4]
 8113b86:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 8113b88:	68bb      	ldr	r3, [r7, #8]
 8113b8a:	2b00      	cmp	r3, #0
 8113b8c:	d011      	beq.n	8113bb2 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8113b8e:	687b      	ldr	r3, [r7, #4]
 8113b90:	2b00      	cmp	r3, #0
 8113b92:	d002      	beq.n	8113b9a <netconn_sendto+0x20>
 8113b94:	687b      	ldr	r3, [r7, #4]
 8113b96:	681b      	ldr	r3, [r3, #0]
 8113b98:	e000      	b.n	8113b9c <netconn_sendto+0x22>
 8113b9a:	2300      	movs	r3, #0
 8113b9c:	68ba      	ldr	r2, [r7, #8]
 8113b9e:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8113ba0:	68bb      	ldr	r3, [r7, #8]
 8113ba2:	887a      	ldrh	r2, [r7, #2]
 8113ba4:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 8113ba6:	68b9      	ldr	r1, [r7, #8]
 8113ba8:	68f8      	ldr	r0, [r7, #12]
 8113baa:	f000 f809 	bl	8113bc0 <netconn_send>
 8113bae:	4603      	mov	r3, r0
 8113bb0:	e001      	b.n	8113bb6 <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8113bb2:	f06f 0305 	mvn.w	r3, #5
}
 8113bb6:	4618      	mov	r0, r3
 8113bb8:	3710      	adds	r7, #16
 8113bba:	46bd      	mov	sp, r7
 8113bbc:	bd80      	pop	{r7, pc}
	...

08113bc0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8113bc0:	b580      	push	{r7, lr}
 8113bc2:	b08c      	sub	sp, #48	@ 0x30
 8113bc4:	af00      	add	r7, sp, #0
 8113bc6:	6078      	str	r0, [r7, #4]
 8113bc8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8113bca:	687b      	ldr	r3, [r7, #4]
 8113bcc:	2b00      	cmp	r3, #0
 8113bce:	d109      	bne.n	8113be4 <netconn_send+0x24>
 8113bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8113c0c <netconn_send+0x4c>)
 8113bd2:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8113bd6:	490e      	ldr	r1, [pc, #56]	@ (8113c10 <netconn_send+0x50>)
 8113bd8:	480e      	ldr	r0, [pc, #56]	@ (8113c14 <netconn_send+0x54>)
 8113bda:	f00e f8d3 	bl	8121d84 <iprintf>
 8113bde:	f06f 030f 	mvn.w	r3, #15
 8113be2:	e00e      	b.n	8113c02 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8113be4:	687b      	ldr	r3, [r7, #4]
 8113be6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8113be8:	683b      	ldr	r3, [r7, #0]
 8113bea:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8113bec:	f107 030c 	add.w	r3, r7, #12
 8113bf0:	4619      	mov	r1, r3
 8113bf2:	4809      	ldr	r0, [pc, #36]	@ (8113c18 <netconn_send+0x58>)
 8113bf4:	f7ff ffa4 	bl	8113b40 <netconn_apimsg>
 8113bf8:	4603      	mov	r3, r0
 8113bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8113bfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8113c02:	4618      	mov	r0, r3
 8113c04:	3730      	adds	r7, #48	@ 0x30
 8113c06:	46bd      	mov	sp, r7
 8113c08:	bd80      	pop	{r7, pc}
 8113c0a:	bf00      	nop
 8113c0c:	08124da4 	.word	0x08124da4
 8113c10:	08125098 	.word	0x08125098
 8113c14:	08124e34 	.word	0x08124e34
 8113c18:	08113c53 	.word	0x08113c53

08113c1c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8113c1c:	b580      	push	{r7, lr}
 8113c1e:	b084      	sub	sp, #16
 8113c20:	af00      	add	r7, sp, #0
 8113c22:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8113c24:	687b      	ldr	r3, [r7, #4]
 8113c26:	2b00      	cmp	r3, #0
 8113c28:	d101      	bne.n	8113c2e <netconn_err+0x12>
    return ERR_OK;
 8113c2a:	2300      	movs	r3, #0
 8113c2c:	e00d      	b.n	8113c4a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8113c2e:	f006 fa7f 	bl	811a130 <sys_arch_protect>
 8113c32:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8113c34:	687b      	ldr	r3, [r7, #4]
 8113c36:	7a1b      	ldrb	r3, [r3, #8]
 8113c38:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8113c3a:	687b      	ldr	r3, [r7, #4]
 8113c3c:	2200      	movs	r2, #0
 8113c3e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8113c40:	68f8      	ldr	r0, [r7, #12]
 8113c42:	f006 fa83 	bl	811a14c <sys_arch_unprotect>
  return err;
 8113c46:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8113c4a:	4618      	mov	r0, r3
 8113c4c:	3710      	adds	r7, #16
 8113c4e:	46bd      	mov	sp, r7
 8113c50:	bd80      	pop	{r7, pc}

08113c52 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8113c52:	b580      	push	{r7, lr}
 8113c54:	b084      	sub	sp, #16
 8113c56:	af00      	add	r7, sp, #0
 8113c58:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8113c5a:	687b      	ldr	r3, [r7, #4]
 8113c5c:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8113c5e:	68bb      	ldr	r3, [r7, #8]
 8113c60:	681b      	ldr	r3, [r3, #0]
 8113c62:	4618      	mov	r0, r3
 8113c64:	f7ff ffda 	bl	8113c1c <netconn_err>
 8113c68:	4603      	mov	r3, r0
 8113c6a:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8113c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8113c70:	2b00      	cmp	r3, #0
 8113c72:	d134      	bne.n	8113cde <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8113c74:	68bb      	ldr	r3, [r7, #8]
 8113c76:	681b      	ldr	r3, [r3, #0]
 8113c78:	685b      	ldr	r3, [r3, #4]
 8113c7a:	2b00      	cmp	r3, #0
 8113c7c:	d02d      	beq.n	8113cda <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8113c7e:	68bb      	ldr	r3, [r7, #8]
 8113c80:	681b      	ldr	r3, [r3, #0]
 8113c82:	781b      	ldrb	r3, [r3, #0]
 8113c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8113c88:	2b20      	cmp	r3, #32
 8113c8a:	d123      	bne.n	8113cd4 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8113c8c:	68bb      	ldr	r3, [r7, #8]
 8113c8e:	689b      	ldr	r3, [r3, #8]
 8113c90:	689b      	ldr	r3, [r3, #8]
 8113c92:	2b00      	cmp	r3, #0
 8113c94:	d10c      	bne.n	8113cb0 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8113c96:	68bb      	ldr	r3, [r7, #8]
 8113c98:	681b      	ldr	r3, [r3, #0]
 8113c9a:	685a      	ldr	r2, [r3, #4]
 8113c9c:	68bb      	ldr	r3, [r7, #8]
 8113c9e:	689b      	ldr	r3, [r3, #8]
 8113ca0:	681b      	ldr	r3, [r3, #0]
 8113ca2:	4619      	mov	r1, r3
 8113ca4:	4610      	mov	r0, r2
 8113ca6:	f00d f809 	bl	8120cbc <udp_send>
 8113caa:	4603      	mov	r3, r0
 8113cac:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8113cae:	e016      	b.n	8113cde <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8113cb0:	68bb      	ldr	r3, [r7, #8]
 8113cb2:	681b      	ldr	r3, [r3, #0]
 8113cb4:	6858      	ldr	r0, [r3, #4]
 8113cb6:	68bb      	ldr	r3, [r7, #8]
 8113cb8:	689b      	ldr	r3, [r3, #8]
 8113cba:	6819      	ldr	r1, [r3, #0]
 8113cbc:	68bb      	ldr	r3, [r7, #8]
 8113cbe:	689b      	ldr	r3, [r3, #8]
 8113cc0:	f103 0208 	add.w	r2, r3, #8
 8113cc4:	68bb      	ldr	r3, [r7, #8]
 8113cc6:	689b      	ldr	r3, [r3, #8]
 8113cc8:	899b      	ldrh	r3, [r3, #12]
 8113cca:	f00d f82b 	bl	8120d24 <udp_sendto>
 8113cce:	4603      	mov	r3, r0
 8113cd0:	73fb      	strb	r3, [r7, #15]
          break;
 8113cd2:	e004      	b.n	8113cde <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8113cd4:	23f5      	movs	r3, #245	@ 0xf5
 8113cd6:	73fb      	strb	r3, [r7, #15]
          break;
 8113cd8:	e001      	b.n	8113cde <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8113cda:	23f5      	movs	r3, #245	@ 0xf5
 8113cdc:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8113cde:	68bb      	ldr	r3, [r7, #8]
 8113ce0:	7bfa      	ldrb	r2, [r7, #15]
 8113ce2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8113ce4:	bf00      	nop
 8113ce6:	3710      	adds	r7, #16
 8113ce8:	46bd      	mov	sp, r7
 8113cea:	bd80      	pop	{r7, pc}

08113cec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8113cec:	b480      	push	{r7}
 8113cee:	b083      	sub	sp, #12
 8113cf0:	af00      	add	r7, sp, #0
 8113cf2:	4603      	mov	r3, r0
 8113cf4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8113cf6:	88fb      	ldrh	r3, [r7, #6]
 8113cf8:	021b      	lsls	r3, r3, #8
 8113cfa:	b21a      	sxth	r2, r3
 8113cfc:	88fb      	ldrh	r3, [r7, #6]
 8113cfe:	0a1b      	lsrs	r3, r3, #8
 8113d00:	b29b      	uxth	r3, r3
 8113d02:	b21b      	sxth	r3, r3
 8113d04:	4313      	orrs	r3, r2
 8113d06:	b21b      	sxth	r3, r3
 8113d08:	b29b      	uxth	r3, r3
}
 8113d0a:	4618      	mov	r0, r3
 8113d0c:	370c      	adds	r7, #12
 8113d0e:	46bd      	mov	sp, r7
 8113d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113d14:	4770      	bx	lr

08113d16 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8113d16:	b480      	push	{r7}
 8113d18:	b083      	sub	sp, #12
 8113d1a:	af00      	add	r7, sp, #0
 8113d1c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8113d1e:	687b      	ldr	r3, [r7, #4]
 8113d20:	061a      	lsls	r2, r3, #24
 8113d22:	687b      	ldr	r3, [r7, #4]
 8113d24:	021b      	lsls	r3, r3, #8
 8113d26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8113d2a:	431a      	orrs	r2, r3
 8113d2c:	687b      	ldr	r3, [r7, #4]
 8113d2e:	0a1b      	lsrs	r3, r3, #8
 8113d30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8113d34:	431a      	orrs	r2, r3
 8113d36:	687b      	ldr	r3, [r7, #4]
 8113d38:	0e1b      	lsrs	r3, r3, #24
 8113d3a:	4313      	orrs	r3, r2
}
 8113d3c:	4618      	mov	r0, r3
 8113d3e:	370c      	adds	r7, #12
 8113d40:	46bd      	mov	sp, r7
 8113d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113d46:	4770      	bx	lr

08113d48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8113d48:	b580      	push	{r7, lr}
 8113d4a:	b082      	sub	sp, #8
 8113d4c:	af00      	add	r7, sp, #0
 8113d4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8113d50:	4915      	ldr	r1, [pc, #84]	@ (8113da8 <etharp_free_entry+0x60>)
 8113d52:	687a      	ldr	r2, [r7, #4]
 8113d54:	4613      	mov	r3, r2
 8113d56:	005b      	lsls	r3, r3, #1
 8113d58:	4413      	add	r3, r2
 8113d5a:	00db      	lsls	r3, r3, #3
 8113d5c:	440b      	add	r3, r1
 8113d5e:	681b      	ldr	r3, [r3, #0]
 8113d60:	2b00      	cmp	r3, #0
 8113d62:	d013      	beq.n	8113d8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8113d64:	4910      	ldr	r1, [pc, #64]	@ (8113da8 <etharp_free_entry+0x60>)
 8113d66:	687a      	ldr	r2, [r7, #4]
 8113d68:	4613      	mov	r3, r2
 8113d6a:	005b      	lsls	r3, r3, #1
 8113d6c:	4413      	add	r3, r2
 8113d6e:	00db      	lsls	r3, r3, #3
 8113d70:	440b      	add	r3, r1
 8113d72:	681b      	ldr	r3, [r3, #0]
 8113d74:	4618      	mov	r0, r3
 8113d76:	f005 fdf9 	bl	811996c <pbuf_free>
    arp_table[i].q = NULL;
 8113d7a:	490b      	ldr	r1, [pc, #44]	@ (8113da8 <etharp_free_entry+0x60>)
 8113d7c:	687a      	ldr	r2, [r7, #4]
 8113d7e:	4613      	mov	r3, r2
 8113d80:	005b      	lsls	r3, r3, #1
 8113d82:	4413      	add	r3, r2
 8113d84:	00db      	lsls	r3, r3, #3
 8113d86:	440b      	add	r3, r1
 8113d88:	2200      	movs	r2, #0
 8113d8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8113d8c:	4906      	ldr	r1, [pc, #24]	@ (8113da8 <etharp_free_entry+0x60>)
 8113d8e:	687a      	ldr	r2, [r7, #4]
 8113d90:	4613      	mov	r3, r2
 8113d92:	005b      	lsls	r3, r3, #1
 8113d94:	4413      	add	r3, r2
 8113d96:	00db      	lsls	r3, r3, #3
 8113d98:	440b      	add	r3, r1
 8113d9a:	3314      	adds	r3, #20
 8113d9c:	2200      	movs	r2, #0
 8113d9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8113da0:	bf00      	nop
 8113da2:	3708      	adds	r7, #8
 8113da4:	46bd      	mov	sp, r7
 8113da6:	bd80      	pop	{r7, pc}
 8113da8:	2400a070 	.word	0x2400a070

08113dac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8113dac:	b580      	push	{r7, lr}
 8113dae:	b082      	sub	sp, #8
 8113db0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8113db2:	2300      	movs	r3, #0
 8113db4:	607b      	str	r3, [r7, #4]
 8113db6:	e096      	b.n	8113ee6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8113db8:	494f      	ldr	r1, [pc, #316]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113dba:	687a      	ldr	r2, [r7, #4]
 8113dbc:	4613      	mov	r3, r2
 8113dbe:	005b      	lsls	r3, r3, #1
 8113dc0:	4413      	add	r3, r2
 8113dc2:	00db      	lsls	r3, r3, #3
 8113dc4:	440b      	add	r3, r1
 8113dc6:	3314      	adds	r3, #20
 8113dc8:	781b      	ldrb	r3, [r3, #0]
 8113dca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8113dcc:	78fb      	ldrb	r3, [r7, #3]
 8113dce:	2b00      	cmp	r3, #0
 8113dd0:	f000 8086 	beq.w	8113ee0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8113dd4:	4948      	ldr	r1, [pc, #288]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113dd6:	687a      	ldr	r2, [r7, #4]
 8113dd8:	4613      	mov	r3, r2
 8113dda:	005b      	lsls	r3, r3, #1
 8113ddc:	4413      	add	r3, r2
 8113dde:	00db      	lsls	r3, r3, #3
 8113de0:	440b      	add	r3, r1
 8113de2:	3312      	adds	r3, #18
 8113de4:	881b      	ldrh	r3, [r3, #0]
 8113de6:	3301      	adds	r3, #1
 8113de8:	b298      	uxth	r0, r3
 8113dea:	4943      	ldr	r1, [pc, #268]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113dec:	687a      	ldr	r2, [r7, #4]
 8113dee:	4613      	mov	r3, r2
 8113df0:	005b      	lsls	r3, r3, #1
 8113df2:	4413      	add	r3, r2
 8113df4:	00db      	lsls	r3, r3, #3
 8113df6:	440b      	add	r3, r1
 8113df8:	3312      	adds	r3, #18
 8113dfa:	4602      	mov	r2, r0
 8113dfc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8113dfe:	493e      	ldr	r1, [pc, #248]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e00:	687a      	ldr	r2, [r7, #4]
 8113e02:	4613      	mov	r3, r2
 8113e04:	005b      	lsls	r3, r3, #1
 8113e06:	4413      	add	r3, r2
 8113e08:	00db      	lsls	r3, r3, #3
 8113e0a:	440b      	add	r3, r1
 8113e0c:	3312      	adds	r3, #18
 8113e0e:	881b      	ldrh	r3, [r3, #0]
 8113e10:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8113e14:	d215      	bcs.n	8113e42 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8113e16:	4938      	ldr	r1, [pc, #224]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e18:	687a      	ldr	r2, [r7, #4]
 8113e1a:	4613      	mov	r3, r2
 8113e1c:	005b      	lsls	r3, r3, #1
 8113e1e:	4413      	add	r3, r2
 8113e20:	00db      	lsls	r3, r3, #3
 8113e22:	440b      	add	r3, r1
 8113e24:	3314      	adds	r3, #20
 8113e26:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8113e28:	2b01      	cmp	r3, #1
 8113e2a:	d10e      	bne.n	8113e4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8113e2c:	4932      	ldr	r1, [pc, #200]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e2e:	687a      	ldr	r2, [r7, #4]
 8113e30:	4613      	mov	r3, r2
 8113e32:	005b      	lsls	r3, r3, #1
 8113e34:	4413      	add	r3, r2
 8113e36:	00db      	lsls	r3, r3, #3
 8113e38:	440b      	add	r3, r1
 8113e3a:	3312      	adds	r3, #18
 8113e3c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8113e3e:	2b04      	cmp	r3, #4
 8113e40:	d903      	bls.n	8113e4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8113e42:	6878      	ldr	r0, [r7, #4]
 8113e44:	f7ff ff80 	bl	8113d48 <etharp_free_entry>
 8113e48:	e04a      	b.n	8113ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8113e4a:	492b      	ldr	r1, [pc, #172]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e4c:	687a      	ldr	r2, [r7, #4]
 8113e4e:	4613      	mov	r3, r2
 8113e50:	005b      	lsls	r3, r3, #1
 8113e52:	4413      	add	r3, r2
 8113e54:	00db      	lsls	r3, r3, #3
 8113e56:	440b      	add	r3, r1
 8113e58:	3314      	adds	r3, #20
 8113e5a:	781b      	ldrb	r3, [r3, #0]
 8113e5c:	2b03      	cmp	r3, #3
 8113e5e:	d10a      	bne.n	8113e76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8113e60:	4925      	ldr	r1, [pc, #148]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e62:	687a      	ldr	r2, [r7, #4]
 8113e64:	4613      	mov	r3, r2
 8113e66:	005b      	lsls	r3, r3, #1
 8113e68:	4413      	add	r3, r2
 8113e6a:	00db      	lsls	r3, r3, #3
 8113e6c:	440b      	add	r3, r1
 8113e6e:	3314      	adds	r3, #20
 8113e70:	2204      	movs	r2, #4
 8113e72:	701a      	strb	r2, [r3, #0]
 8113e74:	e034      	b.n	8113ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8113e76:	4920      	ldr	r1, [pc, #128]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e78:	687a      	ldr	r2, [r7, #4]
 8113e7a:	4613      	mov	r3, r2
 8113e7c:	005b      	lsls	r3, r3, #1
 8113e7e:	4413      	add	r3, r2
 8113e80:	00db      	lsls	r3, r3, #3
 8113e82:	440b      	add	r3, r1
 8113e84:	3314      	adds	r3, #20
 8113e86:	781b      	ldrb	r3, [r3, #0]
 8113e88:	2b04      	cmp	r3, #4
 8113e8a:	d10a      	bne.n	8113ea2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8113e8c:	491a      	ldr	r1, [pc, #104]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113e8e:	687a      	ldr	r2, [r7, #4]
 8113e90:	4613      	mov	r3, r2
 8113e92:	005b      	lsls	r3, r3, #1
 8113e94:	4413      	add	r3, r2
 8113e96:	00db      	lsls	r3, r3, #3
 8113e98:	440b      	add	r3, r1
 8113e9a:	3314      	adds	r3, #20
 8113e9c:	2202      	movs	r2, #2
 8113e9e:	701a      	strb	r2, [r3, #0]
 8113ea0:	e01e      	b.n	8113ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8113ea2:	4915      	ldr	r1, [pc, #84]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113ea4:	687a      	ldr	r2, [r7, #4]
 8113ea6:	4613      	mov	r3, r2
 8113ea8:	005b      	lsls	r3, r3, #1
 8113eaa:	4413      	add	r3, r2
 8113eac:	00db      	lsls	r3, r3, #3
 8113eae:	440b      	add	r3, r1
 8113eb0:	3314      	adds	r3, #20
 8113eb2:	781b      	ldrb	r3, [r3, #0]
 8113eb4:	2b01      	cmp	r3, #1
 8113eb6:	d113      	bne.n	8113ee0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8113eb8:	490f      	ldr	r1, [pc, #60]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113eba:	687a      	ldr	r2, [r7, #4]
 8113ebc:	4613      	mov	r3, r2
 8113ebe:	005b      	lsls	r3, r3, #1
 8113ec0:	4413      	add	r3, r2
 8113ec2:	00db      	lsls	r3, r3, #3
 8113ec4:	440b      	add	r3, r1
 8113ec6:	3308      	adds	r3, #8
 8113ec8:	6818      	ldr	r0, [r3, #0]
 8113eca:	687a      	ldr	r2, [r7, #4]
 8113ecc:	4613      	mov	r3, r2
 8113ece:	005b      	lsls	r3, r3, #1
 8113ed0:	4413      	add	r3, r2
 8113ed2:	00db      	lsls	r3, r3, #3
 8113ed4:	4a08      	ldr	r2, [pc, #32]	@ (8113ef8 <etharp_tmr+0x14c>)
 8113ed6:	4413      	add	r3, r2
 8113ed8:	3304      	adds	r3, #4
 8113eda:	4619      	mov	r1, r3
 8113edc:	f000 fe72 	bl	8114bc4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8113ee0:	687b      	ldr	r3, [r7, #4]
 8113ee2:	3301      	adds	r3, #1
 8113ee4:	607b      	str	r3, [r7, #4]
 8113ee6:	687b      	ldr	r3, [r7, #4]
 8113ee8:	2b09      	cmp	r3, #9
 8113eea:	f77f af65 	ble.w	8113db8 <etharp_tmr+0xc>
      }
    }
  }
}
 8113eee:	bf00      	nop
 8113ef0:	bf00      	nop
 8113ef2:	3708      	adds	r7, #8
 8113ef4:	46bd      	mov	sp, r7
 8113ef6:	bd80      	pop	{r7, pc}
 8113ef8:	2400a070 	.word	0x2400a070

08113efc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8113efc:	b580      	push	{r7, lr}
 8113efe:	b08a      	sub	sp, #40	@ 0x28
 8113f00:	af00      	add	r7, sp, #0
 8113f02:	60f8      	str	r0, [r7, #12]
 8113f04:	460b      	mov	r3, r1
 8113f06:	607a      	str	r2, [r7, #4]
 8113f08:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8113f0a:	230a      	movs	r3, #10
 8113f0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8113f0e:	230a      	movs	r3, #10
 8113f10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8113f12:	230a      	movs	r3, #10
 8113f14:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8113f16:	2300      	movs	r3, #0
 8113f18:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8113f1a:	230a      	movs	r3, #10
 8113f1c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8113f1e:	2300      	movs	r3, #0
 8113f20:	83bb      	strh	r3, [r7, #28]
 8113f22:	2300      	movs	r3, #0
 8113f24:	837b      	strh	r3, [r7, #26]
 8113f26:	2300      	movs	r3, #0
 8113f28:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8113f2a:	2300      	movs	r3, #0
 8113f2c:	843b      	strh	r3, [r7, #32]
 8113f2e:	e0ae      	b.n	811408e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8113f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8113f34:	49a6      	ldr	r1, [pc, #664]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8113f36:	4613      	mov	r3, r2
 8113f38:	005b      	lsls	r3, r3, #1
 8113f3a:	4413      	add	r3, r2
 8113f3c:	00db      	lsls	r3, r3, #3
 8113f3e:	440b      	add	r3, r1
 8113f40:	3314      	adds	r3, #20
 8113f42:	781b      	ldrb	r3, [r3, #0]
 8113f44:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8113f46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8113f4a:	2b0a      	cmp	r3, #10
 8113f4c:	d105      	bne.n	8113f5a <etharp_find_entry+0x5e>
 8113f4e:	7dfb      	ldrb	r3, [r7, #23]
 8113f50:	2b00      	cmp	r3, #0
 8113f52:	d102      	bne.n	8113f5a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8113f54:	8c3b      	ldrh	r3, [r7, #32]
 8113f56:	847b      	strh	r3, [r7, #34]	@ 0x22
 8113f58:	e095      	b.n	8114086 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8113f5a:	7dfb      	ldrb	r3, [r7, #23]
 8113f5c:	2b00      	cmp	r3, #0
 8113f5e:	f000 8092 	beq.w	8114086 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8113f62:	7dfb      	ldrb	r3, [r7, #23]
 8113f64:	2b01      	cmp	r3, #1
 8113f66:	d009      	beq.n	8113f7c <etharp_find_entry+0x80>
 8113f68:	7dfb      	ldrb	r3, [r7, #23]
 8113f6a:	2b01      	cmp	r3, #1
 8113f6c:	d806      	bhi.n	8113f7c <etharp_find_entry+0x80>
 8113f6e:	4b99      	ldr	r3, [pc, #612]	@ (81141d4 <etharp_find_entry+0x2d8>)
 8113f70:	f240 1223 	movw	r2, #291	@ 0x123
 8113f74:	4998      	ldr	r1, [pc, #608]	@ (81141d8 <etharp_find_entry+0x2dc>)
 8113f76:	4899      	ldr	r0, [pc, #612]	@ (81141dc <etharp_find_entry+0x2e0>)
 8113f78:	f00d ff04 	bl	8121d84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8113f7c:	68fb      	ldr	r3, [r7, #12]
 8113f7e:	2b00      	cmp	r3, #0
 8113f80:	d020      	beq.n	8113fc4 <etharp_find_entry+0xc8>
 8113f82:	68fb      	ldr	r3, [r7, #12]
 8113f84:	6819      	ldr	r1, [r3, #0]
 8113f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8113f8a:	4891      	ldr	r0, [pc, #580]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8113f8c:	4613      	mov	r3, r2
 8113f8e:	005b      	lsls	r3, r3, #1
 8113f90:	4413      	add	r3, r2
 8113f92:	00db      	lsls	r3, r3, #3
 8113f94:	4403      	add	r3, r0
 8113f96:	3304      	adds	r3, #4
 8113f98:	681b      	ldr	r3, [r3, #0]
 8113f9a:	4299      	cmp	r1, r3
 8113f9c:	d112      	bne.n	8113fc4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8113f9e:	687b      	ldr	r3, [r7, #4]
 8113fa0:	2b00      	cmp	r3, #0
 8113fa2:	d00c      	beq.n	8113fbe <etharp_find_entry+0xc2>
 8113fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8113fa8:	4989      	ldr	r1, [pc, #548]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8113faa:	4613      	mov	r3, r2
 8113fac:	005b      	lsls	r3, r3, #1
 8113fae:	4413      	add	r3, r2
 8113fb0:	00db      	lsls	r3, r3, #3
 8113fb2:	440b      	add	r3, r1
 8113fb4:	3308      	adds	r3, #8
 8113fb6:	681b      	ldr	r3, [r3, #0]
 8113fb8:	687a      	ldr	r2, [r7, #4]
 8113fba:	429a      	cmp	r2, r3
 8113fbc:	d102      	bne.n	8113fc4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8113fbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8113fc2:	e100      	b.n	81141c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8113fc4:	7dfb      	ldrb	r3, [r7, #23]
 8113fc6:	2b01      	cmp	r3, #1
 8113fc8:	d140      	bne.n	811404c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8113fca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8113fce:	4980      	ldr	r1, [pc, #512]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8113fd0:	4613      	mov	r3, r2
 8113fd2:	005b      	lsls	r3, r3, #1
 8113fd4:	4413      	add	r3, r2
 8113fd6:	00db      	lsls	r3, r3, #3
 8113fd8:	440b      	add	r3, r1
 8113fda:	681b      	ldr	r3, [r3, #0]
 8113fdc:	2b00      	cmp	r3, #0
 8113fde:	d01a      	beq.n	8114016 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8113fe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8113fe4:	497a      	ldr	r1, [pc, #488]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8113fe6:	4613      	mov	r3, r2
 8113fe8:	005b      	lsls	r3, r3, #1
 8113fea:	4413      	add	r3, r2
 8113fec:	00db      	lsls	r3, r3, #3
 8113fee:	440b      	add	r3, r1
 8113ff0:	3312      	adds	r3, #18
 8113ff2:	881b      	ldrh	r3, [r3, #0]
 8113ff4:	8bba      	ldrh	r2, [r7, #28]
 8113ff6:	429a      	cmp	r2, r3
 8113ff8:	d845      	bhi.n	8114086 <etharp_find_entry+0x18a>
            old_queue = i;
 8113ffa:	8c3b      	ldrh	r3, [r7, #32]
 8113ffc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8113ffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114002:	4973      	ldr	r1, [pc, #460]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8114004:	4613      	mov	r3, r2
 8114006:	005b      	lsls	r3, r3, #1
 8114008:	4413      	add	r3, r2
 811400a:	00db      	lsls	r3, r3, #3
 811400c:	440b      	add	r3, r1
 811400e:	3312      	adds	r3, #18
 8114010:	881b      	ldrh	r3, [r3, #0]
 8114012:	83bb      	strh	r3, [r7, #28]
 8114014:	e037      	b.n	8114086 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8114016:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811401a:	496d      	ldr	r1, [pc, #436]	@ (81141d0 <etharp_find_entry+0x2d4>)
 811401c:	4613      	mov	r3, r2
 811401e:	005b      	lsls	r3, r3, #1
 8114020:	4413      	add	r3, r2
 8114022:	00db      	lsls	r3, r3, #3
 8114024:	440b      	add	r3, r1
 8114026:	3312      	adds	r3, #18
 8114028:	881b      	ldrh	r3, [r3, #0]
 811402a:	8b7a      	ldrh	r2, [r7, #26]
 811402c:	429a      	cmp	r2, r3
 811402e:	d82a      	bhi.n	8114086 <etharp_find_entry+0x18a>
            old_pending = i;
 8114030:	8c3b      	ldrh	r3, [r7, #32]
 8114032:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8114034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114038:	4965      	ldr	r1, [pc, #404]	@ (81141d0 <etharp_find_entry+0x2d4>)
 811403a:	4613      	mov	r3, r2
 811403c:	005b      	lsls	r3, r3, #1
 811403e:	4413      	add	r3, r2
 8114040:	00db      	lsls	r3, r3, #3
 8114042:	440b      	add	r3, r1
 8114044:	3312      	adds	r3, #18
 8114046:	881b      	ldrh	r3, [r3, #0]
 8114048:	837b      	strh	r3, [r7, #26]
 811404a:	e01c      	b.n	8114086 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 811404c:	7dfb      	ldrb	r3, [r7, #23]
 811404e:	2b01      	cmp	r3, #1
 8114050:	d919      	bls.n	8114086 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8114052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114056:	495e      	ldr	r1, [pc, #376]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8114058:	4613      	mov	r3, r2
 811405a:	005b      	lsls	r3, r3, #1
 811405c:	4413      	add	r3, r2
 811405e:	00db      	lsls	r3, r3, #3
 8114060:	440b      	add	r3, r1
 8114062:	3312      	adds	r3, #18
 8114064:	881b      	ldrh	r3, [r3, #0]
 8114066:	8b3a      	ldrh	r2, [r7, #24]
 8114068:	429a      	cmp	r2, r3
 811406a:	d80c      	bhi.n	8114086 <etharp_find_entry+0x18a>
            old_stable = i;
 811406c:	8c3b      	ldrh	r3, [r7, #32]
 811406e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8114070:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114074:	4956      	ldr	r1, [pc, #344]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8114076:	4613      	mov	r3, r2
 8114078:	005b      	lsls	r3, r3, #1
 811407a:	4413      	add	r3, r2
 811407c:	00db      	lsls	r3, r3, #3
 811407e:	440b      	add	r3, r1
 8114080:	3312      	adds	r3, #18
 8114082:	881b      	ldrh	r3, [r3, #0]
 8114084:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114086:	8c3b      	ldrh	r3, [r7, #32]
 8114088:	3301      	adds	r3, #1
 811408a:	b29b      	uxth	r3, r3
 811408c:	843b      	strh	r3, [r7, #32]
 811408e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114092:	2b09      	cmp	r3, #9
 8114094:	f77f af4c 	ble.w	8113f30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8114098:	7afb      	ldrb	r3, [r7, #11]
 811409a:	f003 0302 	and.w	r3, r3, #2
 811409e:	2b00      	cmp	r3, #0
 81140a0:	d108      	bne.n	81140b4 <etharp_find_entry+0x1b8>
 81140a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 81140a6:	2b0a      	cmp	r3, #10
 81140a8:	d107      	bne.n	81140ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 81140aa:	7afb      	ldrb	r3, [r7, #11]
 81140ac:	f003 0301 	and.w	r3, r3, #1
 81140b0:	2b00      	cmp	r3, #0
 81140b2:	d102      	bne.n	81140ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 81140b4:	f04f 33ff 	mov.w	r3, #4294967295
 81140b8:	e085      	b.n	81141c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 81140ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 81140be:	2b09      	cmp	r3, #9
 81140c0:	dc02      	bgt.n	81140c8 <etharp_find_entry+0x1cc>
    i = empty;
 81140c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81140c4:	843b      	strh	r3, [r7, #32]
 81140c6:	e039      	b.n	811413c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 81140c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 81140cc:	2b09      	cmp	r3, #9
 81140ce:	dc14      	bgt.n	81140fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 81140d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81140d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 81140d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81140d8:	493d      	ldr	r1, [pc, #244]	@ (81141d0 <etharp_find_entry+0x2d4>)
 81140da:	4613      	mov	r3, r2
 81140dc:	005b      	lsls	r3, r3, #1
 81140de:	4413      	add	r3, r2
 81140e0:	00db      	lsls	r3, r3, #3
 81140e2:	440b      	add	r3, r1
 81140e4:	681b      	ldr	r3, [r3, #0]
 81140e6:	2b00      	cmp	r3, #0
 81140e8:	d018      	beq.n	811411c <etharp_find_entry+0x220>
 81140ea:	4b3a      	ldr	r3, [pc, #232]	@ (81141d4 <etharp_find_entry+0x2d8>)
 81140ec:	f240 126d 	movw	r2, #365	@ 0x16d
 81140f0:	493b      	ldr	r1, [pc, #236]	@ (81141e0 <etharp_find_entry+0x2e4>)
 81140f2:	483a      	ldr	r0, [pc, #232]	@ (81141dc <etharp_find_entry+0x2e0>)
 81140f4:	f00d fe46 	bl	8121d84 <iprintf>
 81140f8:	e010      	b.n	811411c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 81140fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 81140fe:	2b09      	cmp	r3, #9
 8114100:	dc02      	bgt.n	8114108 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8114102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8114104:	843b      	strh	r3, [r7, #32]
 8114106:	e009      	b.n	811411c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8114108:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 811410c:	2b09      	cmp	r3, #9
 811410e:	dc02      	bgt.n	8114116 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8114110:	8bfb      	ldrh	r3, [r7, #30]
 8114112:	843b      	strh	r3, [r7, #32]
 8114114:	e002      	b.n	811411c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8114116:	f04f 33ff 	mov.w	r3, #4294967295
 811411a:	e054      	b.n	81141c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 811411c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114120:	2b09      	cmp	r3, #9
 8114122:	dd06      	ble.n	8114132 <etharp_find_entry+0x236>
 8114124:	4b2b      	ldr	r3, [pc, #172]	@ (81141d4 <etharp_find_entry+0x2d8>)
 8114126:	f240 127f 	movw	r2, #383	@ 0x17f
 811412a:	492e      	ldr	r1, [pc, #184]	@ (81141e4 <etharp_find_entry+0x2e8>)
 811412c:	482b      	ldr	r0, [pc, #172]	@ (81141dc <etharp_find_entry+0x2e0>)
 811412e:	f00d fe29 	bl	8121d84 <iprintf>
    etharp_free_entry(i);
 8114132:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114136:	4618      	mov	r0, r3
 8114138:	f7ff fe06 	bl	8113d48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 811413c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114140:	2b09      	cmp	r3, #9
 8114142:	dd06      	ble.n	8114152 <etharp_find_entry+0x256>
 8114144:	4b23      	ldr	r3, [pc, #140]	@ (81141d4 <etharp_find_entry+0x2d8>)
 8114146:	f240 1283 	movw	r2, #387	@ 0x183
 811414a:	4926      	ldr	r1, [pc, #152]	@ (81141e4 <etharp_find_entry+0x2e8>)
 811414c:	4823      	ldr	r0, [pc, #140]	@ (81141dc <etharp_find_entry+0x2e0>)
 811414e:	f00d fe19 	bl	8121d84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8114152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114156:	491e      	ldr	r1, [pc, #120]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8114158:	4613      	mov	r3, r2
 811415a:	005b      	lsls	r3, r3, #1
 811415c:	4413      	add	r3, r2
 811415e:	00db      	lsls	r3, r3, #3
 8114160:	440b      	add	r3, r1
 8114162:	3314      	adds	r3, #20
 8114164:	781b      	ldrb	r3, [r3, #0]
 8114166:	2b00      	cmp	r3, #0
 8114168:	d006      	beq.n	8114178 <etharp_find_entry+0x27c>
 811416a:	4b1a      	ldr	r3, [pc, #104]	@ (81141d4 <etharp_find_entry+0x2d8>)
 811416c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8114170:	491d      	ldr	r1, [pc, #116]	@ (81141e8 <etharp_find_entry+0x2ec>)
 8114172:	481a      	ldr	r0, [pc, #104]	@ (81141dc <etharp_find_entry+0x2e0>)
 8114174:	f00d fe06 	bl	8121d84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8114178:	68fb      	ldr	r3, [r7, #12]
 811417a:	2b00      	cmp	r3, #0
 811417c:	d00b      	beq.n	8114196 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 811417e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114182:	68fb      	ldr	r3, [r7, #12]
 8114184:	6819      	ldr	r1, [r3, #0]
 8114186:	4812      	ldr	r0, [pc, #72]	@ (81141d0 <etharp_find_entry+0x2d4>)
 8114188:	4613      	mov	r3, r2
 811418a:	005b      	lsls	r3, r3, #1
 811418c:	4413      	add	r3, r2
 811418e:	00db      	lsls	r3, r3, #3
 8114190:	4403      	add	r3, r0
 8114192:	3304      	adds	r3, #4
 8114194:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8114196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811419a:	490d      	ldr	r1, [pc, #52]	@ (81141d0 <etharp_find_entry+0x2d4>)
 811419c:	4613      	mov	r3, r2
 811419e:	005b      	lsls	r3, r3, #1
 81141a0:	4413      	add	r3, r2
 81141a2:	00db      	lsls	r3, r3, #3
 81141a4:	440b      	add	r3, r1
 81141a6:	3312      	adds	r3, #18
 81141a8:	2200      	movs	r2, #0
 81141aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 81141ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81141b0:	4907      	ldr	r1, [pc, #28]	@ (81141d0 <etharp_find_entry+0x2d4>)
 81141b2:	4613      	mov	r3, r2
 81141b4:	005b      	lsls	r3, r3, #1
 81141b6:	4413      	add	r3, r2
 81141b8:	00db      	lsls	r3, r3, #3
 81141ba:	440b      	add	r3, r1
 81141bc:	3308      	adds	r3, #8
 81141be:	687a      	ldr	r2, [r7, #4]
 81141c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 81141c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 81141c6:	4618      	mov	r0, r3
 81141c8:	3728      	adds	r7, #40	@ 0x28
 81141ca:	46bd      	mov	sp, r7
 81141cc:	bd80      	pop	{r7, pc}
 81141ce:	bf00      	nop
 81141d0:	2400a070 	.word	0x2400a070
 81141d4:	08125134 	.word	0x08125134
 81141d8:	081251a4 	.word	0x081251a4
 81141dc:	081251e4 	.word	0x081251e4
 81141e0:	0812520c 	.word	0x0812520c
 81141e4:	08125224 	.word	0x08125224
 81141e8:	08125238 	.word	0x08125238

081141ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 81141ec:	b580      	push	{r7, lr}
 81141ee:	b088      	sub	sp, #32
 81141f0:	af02      	add	r7, sp, #8
 81141f2:	60f8      	str	r0, [r7, #12]
 81141f4:	60b9      	str	r1, [r7, #8]
 81141f6:	607a      	str	r2, [r7, #4]
 81141f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 81141fa:	68fb      	ldr	r3, [r7, #12]
 81141fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8114200:	2b06      	cmp	r3, #6
 8114202:	d006      	beq.n	8114212 <etharp_update_arp_entry+0x26>
 8114204:	4b48      	ldr	r3, [pc, #288]	@ (8114328 <etharp_update_arp_entry+0x13c>)
 8114206:	f240 12a9 	movw	r2, #425	@ 0x1a9
 811420a:	4948      	ldr	r1, [pc, #288]	@ (811432c <etharp_update_arp_entry+0x140>)
 811420c:	4848      	ldr	r0, [pc, #288]	@ (8114330 <etharp_update_arp_entry+0x144>)
 811420e:	f00d fdb9 	bl	8121d84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8114212:	68bb      	ldr	r3, [r7, #8]
 8114214:	2b00      	cmp	r3, #0
 8114216:	d012      	beq.n	811423e <etharp_update_arp_entry+0x52>
 8114218:	68bb      	ldr	r3, [r7, #8]
 811421a:	681b      	ldr	r3, [r3, #0]
 811421c:	2b00      	cmp	r3, #0
 811421e:	d00e      	beq.n	811423e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8114220:	68bb      	ldr	r3, [r7, #8]
 8114222:	681b      	ldr	r3, [r3, #0]
 8114224:	68f9      	ldr	r1, [r7, #12]
 8114226:	4618      	mov	r0, r3
 8114228:	f001 fad8 	bl	81157dc <ip4_addr_isbroadcast_u32>
 811422c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 811422e:	2b00      	cmp	r3, #0
 8114230:	d105      	bne.n	811423e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8114232:	68bb      	ldr	r3, [r7, #8]
 8114234:	681b      	ldr	r3, [r3, #0]
 8114236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 811423a:	2be0      	cmp	r3, #224	@ 0xe0
 811423c:	d102      	bne.n	8114244 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 811423e:	f06f 030f 	mvn.w	r3, #15
 8114242:	e06c      	b.n	811431e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8114244:	78fb      	ldrb	r3, [r7, #3]
 8114246:	68fa      	ldr	r2, [r7, #12]
 8114248:	4619      	mov	r1, r3
 811424a:	68b8      	ldr	r0, [r7, #8]
 811424c:	f7ff fe56 	bl	8113efc <etharp_find_entry>
 8114250:	4603      	mov	r3, r0
 8114252:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8114254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8114258:	2b00      	cmp	r3, #0
 811425a:	da02      	bge.n	8114262 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 811425c:	8afb      	ldrh	r3, [r7, #22]
 811425e:	b25b      	sxtb	r3, r3
 8114260:	e05d      	b.n	811431e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8114262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8114266:	4933      	ldr	r1, [pc, #204]	@ (8114334 <etharp_update_arp_entry+0x148>)
 8114268:	4613      	mov	r3, r2
 811426a:	005b      	lsls	r3, r3, #1
 811426c:	4413      	add	r3, r2
 811426e:	00db      	lsls	r3, r3, #3
 8114270:	440b      	add	r3, r1
 8114272:	3314      	adds	r3, #20
 8114274:	2202      	movs	r2, #2
 8114276:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8114278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 811427c:	492d      	ldr	r1, [pc, #180]	@ (8114334 <etharp_update_arp_entry+0x148>)
 811427e:	4613      	mov	r3, r2
 8114280:	005b      	lsls	r3, r3, #1
 8114282:	4413      	add	r3, r2
 8114284:	00db      	lsls	r3, r3, #3
 8114286:	440b      	add	r3, r1
 8114288:	3308      	adds	r3, #8
 811428a:	68fa      	ldr	r2, [r7, #12]
 811428c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 811428e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8114292:	4613      	mov	r3, r2
 8114294:	005b      	lsls	r3, r3, #1
 8114296:	4413      	add	r3, r2
 8114298:	00db      	lsls	r3, r3, #3
 811429a:	3308      	adds	r3, #8
 811429c:	4a25      	ldr	r2, [pc, #148]	@ (8114334 <etharp_update_arp_entry+0x148>)
 811429e:	4413      	add	r3, r2
 81142a0:	3304      	adds	r3, #4
 81142a2:	2206      	movs	r2, #6
 81142a4:	6879      	ldr	r1, [r7, #4]
 81142a6:	4618      	mov	r0, r3
 81142a8:	f00e f80d 	bl	81222c6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 81142ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 81142b0:	4920      	ldr	r1, [pc, #128]	@ (8114334 <etharp_update_arp_entry+0x148>)
 81142b2:	4613      	mov	r3, r2
 81142b4:	005b      	lsls	r3, r3, #1
 81142b6:	4413      	add	r3, r2
 81142b8:	00db      	lsls	r3, r3, #3
 81142ba:	440b      	add	r3, r1
 81142bc:	3312      	adds	r3, #18
 81142be:	2200      	movs	r2, #0
 81142c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 81142c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 81142c6:	491b      	ldr	r1, [pc, #108]	@ (8114334 <etharp_update_arp_entry+0x148>)
 81142c8:	4613      	mov	r3, r2
 81142ca:	005b      	lsls	r3, r3, #1
 81142cc:	4413      	add	r3, r2
 81142ce:	00db      	lsls	r3, r3, #3
 81142d0:	440b      	add	r3, r1
 81142d2:	681b      	ldr	r3, [r3, #0]
 81142d4:	2b00      	cmp	r3, #0
 81142d6:	d021      	beq.n	811431c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 81142d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 81142dc:	4915      	ldr	r1, [pc, #84]	@ (8114334 <etharp_update_arp_entry+0x148>)
 81142de:	4613      	mov	r3, r2
 81142e0:	005b      	lsls	r3, r3, #1
 81142e2:	4413      	add	r3, r2
 81142e4:	00db      	lsls	r3, r3, #3
 81142e6:	440b      	add	r3, r1
 81142e8:	681b      	ldr	r3, [r3, #0]
 81142ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 81142ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 81142f0:	4910      	ldr	r1, [pc, #64]	@ (8114334 <etharp_update_arp_entry+0x148>)
 81142f2:	4613      	mov	r3, r2
 81142f4:	005b      	lsls	r3, r3, #1
 81142f6:	4413      	add	r3, r2
 81142f8:	00db      	lsls	r3, r3, #3
 81142fa:	440b      	add	r3, r1
 81142fc:	2200      	movs	r2, #0
 81142fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8114300:	68fb      	ldr	r3, [r7, #12]
 8114302:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8114306:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811430a:	9300      	str	r3, [sp, #0]
 811430c:	687b      	ldr	r3, [r7, #4]
 811430e:	6939      	ldr	r1, [r7, #16]
 8114310:	68f8      	ldr	r0, [r7, #12]
 8114312:	f000 fcf9 	bl	8114d08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8114316:	6938      	ldr	r0, [r7, #16]
 8114318:	f005 fb28 	bl	811996c <pbuf_free>
  }
  return ERR_OK;
 811431c:	2300      	movs	r3, #0
}
 811431e:	4618      	mov	r0, r3
 8114320:	3718      	adds	r7, #24
 8114322:	46bd      	mov	sp, r7
 8114324:	bd80      	pop	{r7, pc}
 8114326:	bf00      	nop
 8114328:	08125134 	.word	0x08125134
 811432c:	08125264 	.word	0x08125264
 8114330:	081251e4 	.word	0x081251e4
 8114334:	2400a070 	.word	0x2400a070

08114338 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8114338:	b580      	push	{r7, lr}
 811433a:	b084      	sub	sp, #16
 811433c:	af00      	add	r7, sp, #0
 811433e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114340:	2300      	movs	r3, #0
 8114342:	60fb      	str	r3, [r7, #12]
 8114344:	e01e      	b.n	8114384 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8114346:	4913      	ldr	r1, [pc, #76]	@ (8114394 <etharp_cleanup_netif+0x5c>)
 8114348:	68fa      	ldr	r2, [r7, #12]
 811434a:	4613      	mov	r3, r2
 811434c:	005b      	lsls	r3, r3, #1
 811434e:	4413      	add	r3, r2
 8114350:	00db      	lsls	r3, r3, #3
 8114352:	440b      	add	r3, r1
 8114354:	3314      	adds	r3, #20
 8114356:	781b      	ldrb	r3, [r3, #0]
 8114358:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 811435a:	7afb      	ldrb	r3, [r7, #11]
 811435c:	2b00      	cmp	r3, #0
 811435e:	d00e      	beq.n	811437e <etharp_cleanup_netif+0x46>
 8114360:	490c      	ldr	r1, [pc, #48]	@ (8114394 <etharp_cleanup_netif+0x5c>)
 8114362:	68fa      	ldr	r2, [r7, #12]
 8114364:	4613      	mov	r3, r2
 8114366:	005b      	lsls	r3, r3, #1
 8114368:	4413      	add	r3, r2
 811436a:	00db      	lsls	r3, r3, #3
 811436c:	440b      	add	r3, r1
 811436e:	3308      	adds	r3, #8
 8114370:	681b      	ldr	r3, [r3, #0]
 8114372:	687a      	ldr	r2, [r7, #4]
 8114374:	429a      	cmp	r2, r3
 8114376:	d102      	bne.n	811437e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8114378:	68f8      	ldr	r0, [r7, #12]
 811437a:	f7ff fce5 	bl	8113d48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811437e:	68fb      	ldr	r3, [r7, #12]
 8114380:	3301      	adds	r3, #1
 8114382:	60fb      	str	r3, [r7, #12]
 8114384:	68fb      	ldr	r3, [r7, #12]
 8114386:	2b09      	cmp	r3, #9
 8114388:	dddd      	ble.n	8114346 <etharp_cleanup_netif+0xe>
    }
  }
}
 811438a:	bf00      	nop
 811438c:	bf00      	nop
 811438e:	3710      	adds	r7, #16
 8114390:	46bd      	mov	sp, r7
 8114392:	bd80      	pop	{r7, pc}
 8114394:	2400a070 	.word	0x2400a070

08114398 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8114398:	b5b0      	push	{r4, r5, r7, lr}
 811439a:	b08a      	sub	sp, #40	@ 0x28
 811439c:	af04      	add	r7, sp, #16
 811439e:	6078      	str	r0, [r7, #4]
 81143a0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 81143a2:	f7fb fd0d 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 81143a6:	683b      	ldr	r3, [r7, #0]
 81143a8:	2b00      	cmp	r3, #0
 81143aa:	d107      	bne.n	81143bc <etharp_input+0x24>
 81143ac:	4b3d      	ldr	r3, [pc, #244]	@ (81144a4 <etharp_input+0x10c>)
 81143ae:	f240 228a 	movw	r2, #650	@ 0x28a
 81143b2:	493d      	ldr	r1, [pc, #244]	@ (81144a8 <etharp_input+0x110>)
 81143b4:	483d      	ldr	r0, [pc, #244]	@ (81144ac <etharp_input+0x114>)
 81143b6:	f00d fce5 	bl	8121d84 <iprintf>
 81143ba:	e06f      	b.n	811449c <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 81143bc:	687b      	ldr	r3, [r7, #4]
 81143be:	685b      	ldr	r3, [r3, #4]
 81143c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 81143c2:	693b      	ldr	r3, [r7, #16]
 81143c4:	881b      	ldrh	r3, [r3, #0]
 81143c6:	b29b      	uxth	r3, r3
 81143c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81143cc:	d10c      	bne.n	81143e8 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81143ce:	693b      	ldr	r3, [r7, #16]
 81143d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 81143d2:	2b06      	cmp	r3, #6
 81143d4:	d108      	bne.n	81143e8 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81143d6:	693b      	ldr	r3, [r7, #16]
 81143d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81143da:	2b04      	cmp	r3, #4
 81143dc:	d104      	bne.n	81143e8 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 81143de:	693b      	ldr	r3, [r7, #16]
 81143e0:	885b      	ldrh	r3, [r3, #2]
 81143e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81143e4:	2b08      	cmp	r3, #8
 81143e6:	d003      	beq.n	81143f0 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 81143e8:	6878      	ldr	r0, [r7, #4]
 81143ea:	f005 fabf 	bl	811996c <pbuf_free>
    return;
 81143ee:	e055      	b.n	811449c <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 81143f0:	693b      	ldr	r3, [r7, #16]
 81143f2:	330e      	adds	r3, #14
 81143f4:	681b      	ldr	r3, [r3, #0]
 81143f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 81143f8:	693b      	ldr	r3, [r7, #16]
 81143fa:	3318      	adds	r3, #24
 81143fc:	681b      	ldr	r3, [r3, #0]
 81143fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8114400:	683b      	ldr	r3, [r7, #0]
 8114402:	3304      	adds	r3, #4
 8114404:	681b      	ldr	r3, [r3, #0]
 8114406:	2b00      	cmp	r3, #0
 8114408:	d102      	bne.n	8114410 <etharp_input+0x78>
    for_us = 0;
 811440a:	2300      	movs	r3, #0
 811440c:	75fb      	strb	r3, [r7, #23]
 811440e:	e009      	b.n	8114424 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8114410:	68ba      	ldr	r2, [r7, #8]
 8114412:	683b      	ldr	r3, [r7, #0]
 8114414:	3304      	adds	r3, #4
 8114416:	681b      	ldr	r3, [r3, #0]
 8114418:	429a      	cmp	r2, r3
 811441a:	bf0c      	ite	eq
 811441c:	2301      	moveq	r3, #1
 811441e:	2300      	movne	r3, #0
 8114420:	b2db      	uxtb	r3, r3
 8114422:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8114424:	693b      	ldr	r3, [r7, #16]
 8114426:	f103 0208 	add.w	r2, r3, #8
 811442a:	7dfb      	ldrb	r3, [r7, #23]
 811442c:	2b00      	cmp	r3, #0
 811442e:	d001      	beq.n	8114434 <etharp_input+0x9c>
 8114430:	2301      	movs	r3, #1
 8114432:	e000      	b.n	8114436 <etharp_input+0x9e>
 8114434:	2302      	movs	r3, #2
 8114436:	f107 010c 	add.w	r1, r7, #12
 811443a:	6838      	ldr	r0, [r7, #0]
 811443c:	f7ff fed6 	bl	81141ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8114440:	693b      	ldr	r3, [r7, #16]
 8114442:	88db      	ldrh	r3, [r3, #6]
 8114444:	b29b      	uxth	r3, r3
 8114446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 811444a:	d003      	beq.n	8114454 <etharp_input+0xbc>
 811444c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8114450:	d01e      	beq.n	8114490 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8114452:	e020      	b.n	8114496 <etharp_input+0xfe>
      if (for_us) {
 8114454:	7dfb      	ldrb	r3, [r7, #23]
 8114456:	2b00      	cmp	r3, #0
 8114458:	d01c      	beq.n	8114494 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 811445a:	683b      	ldr	r3, [r7, #0]
 811445c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8114460:	693b      	ldr	r3, [r7, #16]
 8114462:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8114466:	683b      	ldr	r3, [r7, #0]
 8114468:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 811446c:	683b      	ldr	r3, [r7, #0]
 811446e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8114470:	693a      	ldr	r2, [r7, #16]
 8114472:	3208      	adds	r2, #8
        etharp_raw(netif,
 8114474:	2102      	movs	r1, #2
 8114476:	9103      	str	r1, [sp, #12]
 8114478:	f107 010c 	add.w	r1, r7, #12
 811447c:	9102      	str	r1, [sp, #8]
 811447e:	9201      	str	r2, [sp, #4]
 8114480:	9300      	str	r3, [sp, #0]
 8114482:	462b      	mov	r3, r5
 8114484:	4622      	mov	r2, r4
 8114486:	4601      	mov	r1, r0
 8114488:	6838      	ldr	r0, [r7, #0]
 811448a:	f000 faed 	bl	8114a68 <etharp_raw>
      break;
 811448e:	e001      	b.n	8114494 <etharp_input+0xfc>
      break;
 8114490:	bf00      	nop
 8114492:	e000      	b.n	8114496 <etharp_input+0xfe>
      break;
 8114494:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8114496:	6878      	ldr	r0, [r7, #4]
 8114498:	f005 fa68 	bl	811996c <pbuf_free>
}
 811449c:	3718      	adds	r7, #24
 811449e:	46bd      	mov	sp, r7
 81144a0:	bdb0      	pop	{r4, r5, r7, pc}
 81144a2:	bf00      	nop
 81144a4:	08125134 	.word	0x08125134
 81144a8:	081252bc 	.word	0x081252bc
 81144ac:	081251e4 	.word	0x081251e4

081144b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 81144b0:	b580      	push	{r7, lr}
 81144b2:	b086      	sub	sp, #24
 81144b4:	af02      	add	r7, sp, #8
 81144b6:	60f8      	str	r0, [r7, #12]
 81144b8:	60b9      	str	r1, [r7, #8]
 81144ba:	4613      	mov	r3, r2
 81144bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 81144be:	79fa      	ldrb	r2, [r7, #7]
 81144c0:	4944      	ldr	r1, [pc, #272]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 81144c2:	4613      	mov	r3, r2
 81144c4:	005b      	lsls	r3, r3, #1
 81144c6:	4413      	add	r3, r2
 81144c8:	00db      	lsls	r3, r3, #3
 81144ca:	440b      	add	r3, r1
 81144cc:	3314      	adds	r3, #20
 81144ce:	781b      	ldrb	r3, [r3, #0]
 81144d0:	2b01      	cmp	r3, #1
 81144d2:	d806      	bhi.n	81144e2 <etharp_output_to_arp_index+0x32>
 81144d4:	4b40      	ldr	r3, [pc, #256]	@ (81145d8 <etharp_output_to_arp_index+0x128>)
 81144d6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 81144da:	4940      	ldr	r1, [pc, #256]	@ (81145dc <etharp_output_to_arp_index+0x12c>)
 81144dc:	4840      	ldr	r0, [pc, #256]	@ (81145e0 <etharp_output_to_arp_index+0x130>)
 81144de:	f00d fc51 	bl	8121d84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 81144e2:	79fa      	ldrb	r2, [r7, #7]
 81144e4:	493b      	ldr	r1, [pc, #236]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 81144e6:	4613      	mov	r3, r2
 81144e8:	005b      	lsls	r3, r3, #1
 81144ea:	4413      	add	r3, r2
 81144ec:	00db      	lsls	r3, r3, #3
 81144ee:	440b      	add	r3, r1
 81144f0:	3314      	adds	r3, #20
 81144f2:	781b      	ldrb	r3, [r3, #0]
 81144f4:	2b02      	cmp	r3, #2
 81144f6:	d153      	bne.n	81145a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 81144f8:	79fa      	ldrb	r2, [r7, #7]
 81144fa:	4936      	ldr	r1, [pc, #216]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 81144fc:	4613      	mov	r3, r2
 81144fe:	005b      	lsls	r3, r3, #1
 8114500:	4413      	add	r3, r2
 8114502:	00db      	lsls	r3, r3, #3
 8114504:	440b      	add	r3, r1
 8114506:	3312      	adds	r3, #18
 8114508:	881b      	ldrh	r3, [r3, #0]
 811450a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 811450e:	d919      	bls.n	8114544 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8114510:	79fa      	ldrb	r2, [r7, #7]
 8114512:	4613      	mov	r3, r2
 8114514:	005b      	lsls	r3, r3, #1
 8114516:	4413      	add	r3, r2
 8114518:	00db      	lsls	r3, r3, #3
 811451a:	4a2e      	ldr	r2, [pc, #184]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 811451c:	4413      	add	r3, r2
 811451e:	3304      	adds	r3, #4
 8114520:	4619      	mov	r1, r3
 8114522:	68f8      	ldr	r0, [r7, #12]
 8114524:	f000 fb4e 	bl	8114bc4 <etharp_request>
 8114528:	4603      	mov	r3, r0
 811452a:	2b00      	cmp	r3, #0
 811452c:	d138      	bne.n	81145a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 811452e:	79fa      	ldrb	r2, [r7, #7]
 8114530:	4928      	ldr	r1, [pc, #160]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 8114532:	4613      	mov	r3, r2
 8114534:	005b      	lsls	r3, r3, #1
 8114536:	4413      	add	r3, r2
 8114538:	00db      	lsls	r3, r3, #3
 811453a:	440b      	add	r3, r1
 811453c:	3314      	adds	r3, #20
 811453e:	2203      	movs	r2, #3
 8114540:	701a      	strb	r2, [r3, #0]
 8114542:	e02d      	b.n	81145a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8114544:	79fa      	ldrb	r2, [r7, #7]
 8114546:	4923      	ldr	r1, [pc, #140]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 8114548:	4613      	mov	r3, r2
 811454a:	005b      	lsls	r3, r3, #1
 811454c:	4413      	add	r3, r2
 811454e:	00db      	lsls	r3, r3, #3
 8114550:	440b      	add	r3, r1
 8114552:	3312      	adds	r3, #18
 8114554:	881b      	ldrh	r3, [r3, #0]
 8114556:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 811455a:	d321      	bcc.n	81145a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 811455c:	79fa      	ldrb	r2, [r7, #7]
 811455e:	4613      	mov	r3, r2
 8114560:	005b      	lsls	r3, r3, #1
 8114562:	4413      	add	r3, r2
 8114564:	00db      	lsls	r3, r3, #3
 8114566:	4a1b      	ldr	r2, [pc, #108]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 8114568:	4413      	add	r3, r2
 811456a:	1d19      	adds	r1, r3, #4
 811456c:	79fa      	ldrb	r2, [r7, #7]
 811456e:	4613      	mov	r3, r2
 8114570:	005b      	lsls	r3, r3, #1
 8114572:	4413      	add	r3, r2
 8114574:	00db      	lsls	r3, r3, #3
 8114576:	3308      	adds	r3, #8
 8114578:	4a16      	ldr	r2, [pc, #88]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 811457a:	4413      	add	r3, r2
 811457c:	3304      	adds	r3, #4
 811457e:	461a      	mov	r2, r3
 8114580:	68f8      	ldr	r0, [r7, #12]
 8114582:	f000 fafd 	bl	8114b80 <etharp_request_dst>
 8114586:	4603      	mov	r3, r0
 8114588:	2b00      	cmp	r3, #0
 811458a:	d109      	bne.n	81145a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 811458c:	79fa      	ldrb	r2, [r7, #7]
 811458e:	4911      	ldr	r1, [pc, #68]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 8114590:	4613      	mov	r3, r2
 8114592:	005b      	lsls	r3, r3, #1
 8114594:	4413      	add	r3, r2
 8114596:	00db      	lsls	r3, r3, #3
 8114598:	440b      	add	r3, r1
 811459a:	3314      	adds	r3, #20
 811459c:	2203      	movs	r2, #3
 811459e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 81145a0:	68fb      	ldr	r3, [r7, #12]
 81145a2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 81145a6:	79fa      	ldrb	r2, [r7, #7]
 81145a8:	4613      	mov	r3, r2
 81145aa:	005b      	lsls	r3, r3, #1
 81145ac:	4413      	add	r3, r2
 81145ae:	00db      	lsls	r3, r3, #3
 81145b0:	3308      	adds	r3, #8
 81145b2:	4a08      	ldr	r2, [pc, #32]	@ (81145d4 <etharp_output_to_arp_index+0x124>)
 81145b4:	4413      	add	r3, r2
 81145b6:	3304      	adds	r3, #4
 81145b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81145bc:	9200      	str	r2, [sp, #0]
 81145be:	460a      	mov	r2, r1
 81145c0:	68b9      	ldr	r1, [r7, #8]
 81145c2:	68f8      	ldr	r0, [r7, #12]
 81145c4:	f000 fba0 	bl	8114d08 <ethernet_output>
 81145c8:	4603      	mov	r3, r0
}
 81145ca:	4618      	mov	r0, r3
 81145cc:	3710      	adds	r7, #16
 81145ce:	46bd      	mov	sp, r7
 81145d0:	bd80      	pop	{r7, pc}
 81145d2:	bf00      	nop
 81145d4:	2400a070 	.word	0x2400a070
 81145d8:	08125134 	.word	0x08125134
 81145dc:	081252dc 	.word	0x081252dc
 81145e0:	081251e4 	.word	0x081251e4

081145e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 81145e4:	b580      	push	{r7, lr}
 81145e6:	b08a      	sub	sp, #40	@ 0x28
 81145e8:	af02      	add	r7, sp, #8
 81145ea:	60f8      	str	r0, [r7, #12]
 81145ec:	60b9      	str	r1, [r7, #8]
 81145ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 81145f0:	687b      	ldr	r3, [r7, #4]
 81145f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 81145f4:	f7fb fbe4 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 81145f8:	68fb      	ldr	r3, [r7, #12]
 81145fa:	2b00      	cmp	r3, #0
 81145fc:	d106      	bne.n	811460c <etharp_output+0x28>
 81145fe:	4b73      	ldr	r3, [pc, #460]	@ (81147cc <etharp_output+0x1e8>)
 8114600:	f240 321e 	movw	r2, #798	@ 0x31e
 8114604:	4972      	ldr	r1, [pc, #456]	@ (81147d0 <etharp_output+0x1ec>)
 8114606:	4873      	ldr	r0, [pc, #460]	@ (81147d4 <etharp_output+0x1f0>)
 8114608:	f00d fbbc 	bl	8121d84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 811460c:	68bb      	ldr	r3, [r7, #8]
 811460e:	2b00      	cmp	r3, #0
 8114610:	d106      	bne.n	8114620 <etharp_output+0x3c>
 8114612:	4b6e      	ldr	r3, [pc, #440]	@ (81147cc <etharp_output+0x1e8>)
 8114614:	f240 321f 	movw	r2, #799	@ 0x31f
 8114618:	496f      	ldr	r1, [pc, #444]	@ (81147d8 <etharp_output+0x1f4>)
 811461a:	486e      	ldr	r0, [pc, #440]	@ (81147d4 <etharp_output+0x1f0>)
 811461c:	f00d fbb2 	bl	8121d84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8114620:	687b      	ldr	r3, [r7, #4]
 8114622:	2b00      	cmp	r3, #0
 8114624:	d106      	bne.n	8114634 <etharp_output+0x50>
 8114626:	4b69      	ldr	r3, [pc, #420]	@ (81147cc <etharp_output+0x1e8>)
 8114628:	f44f 7248 	mov.w	r2, #800	@ 0x320
 811462c:	496b      	ldr	r1, [pc, #428]	@ (81147dc <etharp_output+0x1f8>)
 811462e:	4869      	ldr	r0, [pc, #420]	@ (81147d4 <etharp_output+0x1f0>)
 8114630:	f00d fba8 	bl	8121d84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8114634:	687b      	ldr	r3, [r7, #4]
 8114636:	681b      	ldr	r3, [r3, #0]
 8114638:	68f9      	ldr	r1, [r7, #12]
 811463a:	4618      	mov	r0, r3
 811463c:	f001 f8ce 	bl	81157dc <ip4_addr_isbroadcast_u32>
 8114640:	4603      	mov	r3, r0
 8114642:	2b00      	cmp	r3, #0
 8114644:	d002      	beq.n	811464c <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8114646:	4b66      	ldr	r3, [pc, #408]	@ (81147e0 <etharp_output+0x1fc>)
 8114648:	61fb      	str	r3, [r7, #28]
 811464a:	e0af      	b.n	81147ac <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 811464c:	687b      	ldr	r3, [r7, #4]
 811464e:	681b      	ldr	r3, [r3, #0]
 8114650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8114654:	2be0      	cmp	r3, #224	@ 0xe0
 8114656:	d118      	bne.n	811468a <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8114658:	2301      	movs	r3, #1
 811465a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 811465c:	2300      	movs	r3, #0
 811465e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8114660:	235e      	movs	r3, #94	@ 0x5e
 8114662:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8114664:	687b      	ldr	r3, [r7, #4]
 8114666:	3301      	adds	r3, #1
 8114668:	781b      	ldrb	r3, [r3, #0]
 811466a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 811466e:	b2db      	uxtb	r3, r3
 8114670:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8114672:	687b      	ldr	r3, [r7, #4]
 8114674:	3302      	adds	r3, #2
 8114676:	781b      	ldrb	r3, [r3, #0]
 8114678:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 811467a:	687b      	ldr	r3, [r7, #4]
 811467c:	3303      	adds	r3, #3
 811467e:	781b      	ldrb	r3, [r3, #0]
 8114680:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8114682:	f107 0310 	add.w	r3, r7, #16
 8114686:	61fb      	str	r3, [r7, #28]
 8114688:	e090      	b.n	81147ac <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 811468a:	687b      	ldr	r3, [r7, #4]
 811468c:	681a      	ldr	r2, [r3, #0]
 811468e:	68fb      	ldr	r3, [r7, #12]
 8114690:	3304      	adds	r3, #4
 8114692:	681b      	ldr	r3, [r3, #0]
 8114694:	405a      	eors	r2, r3
 8114696:	68fb      	ldr	r3, [r7, #12]
 8114698:	3308      	adds	r3, #8
 811469a:	681b      	ldr	r3, [r3, #0]
 811469c:	4013      	ands	r3, r2
 811469e:	2b00      	cmp	r3, #0
 81146a0:	d012      	beq.n	81146c8 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 81146a2:	687b      	ldr	r3, [r7, #4]
 81146a4:	681b      	ldr	r3, [r3, #0]
 81146a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 81146a8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 81146ac:	4293      	cmp	r3, r2
 81146ae:	d00b      	beq.n	81146c8 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 81146b0:	68fb      	ldr	r3, [r7, #12]
 81146b2:	330c      	adds	r3, #12
 81146b4:	681b      	ldr	r3, [r3, #0]
 81146b6:	2b00      	cmp	r3, #0
 81146b8:	d003      	beq.n	81146c2 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 81146ba:	68fb      	ldr	r3, [r7, #12]
 81146bc:	330c      	adds	r3, #12
 81146be:	61bb      	str	r3, [r7, #24]
 81146c0:	e002      	b.n	81146c8 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 81146c2:	f06f 0303 	mvn.w	r3, #3
 81146c6:	e07d      	b.n	81147c4 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 81146c8:	4b46      	ldr	r3, [pc, #280]	@ (81147e4 <etharp_output+0x200>)
 81146ca:	781b      	ldrb	r3, [r3, #0]
 81146cc:	4619      	mov	r1, r3
 81146ce:	4a46      	ldr	r2, [pc, #280]	@ (81147e8 <etharp_output+0x204>)
 81146d0:	460b      	mov	r3, r1
 81146d2:	005b      	lsls	r3, r3, #1
 81146d4:	440b      	add	r3, r1
 81146d6:	00db      	lsls	r3, r3, #3
 81146d8:	4413      	add	r3, r2
 81146da:	3314      	adds	r3, #20
 81146dc:	781b      	ldrb	r3, [r3, #0]
 81146de:	2b01      	cmp	r3, #1
 81146e0:	d925      	bls.n	811472e <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 81146e2:	4b40      	ldr	r3, [pc, #256]	@ (81147e4 <etharp_output+0x200>)
 81146e4:	781b      	ldrb	r3, [r3, #0]
 81146e6:	4619      	mov	r1, r3
 81146e8:	4a3f      	ldr	r2, [pc, #252]	@ (81147e8 <etharp_output+0x204>)
 81146ea:	460b      	mov	r3, r1
 81146ec:	005b      	lsls	r3, r3, #1
 81146ee:	440b      	add	r3, r1
 81146f0:	00db      	lsls	r3, r3, #3
 81146f2:	4413      	add	r3, r2
 81146f4:	3308      	adds	r3, #8
 81146f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 81146f8:	68fa      	ldr	r2, [r7, #12]
 81146fa:	429a      	cmp	r2, r3
 81146fc:	d117      	bne.n	811472e <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 81146fe:	69bb      	ldr	r3, [r7, #24]
 8114700:	681a      	ldr	r2, [r3, #0]
 8114702:	4b38      	ldr	r3, [pc, #224]	@ (81147e4 <etharp_output+0x200>)
 8114704:	781b      	ldrb	r3, [r3, #0]
 8114706:	4618      	mov	r0, r3
 8114708:	4937      	ldr	r1, [pc, #220]	@ (81147e8 <etharp_output+0x204>)
 811470a:	4603      	mov	r3, r0
 811470c:	005b      	lsls	r3, r3, #1
 811470e:	4403      	add	r3, r0
 8114710:	00db      	lsls	r3, r3, #3
 8114712:	440b      	add	r3, r1
 8114714:	3304      	adds	r3, #4
 8114716:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8114718:	429a      	cmp	r2, r3
 811471a:	d108      	bne.n	811472e <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 811471c:	4b31      	ldr	r3, [pc, #196]	@ (81147e4 <etharp_output+0x200>)
 811471e:	781b      	ldrb	r3, [r3, #0]
 8114720:	461a      	mov	r2, r3
 8114722:	68b9      	ldr	r1, [r7, #8]
 8114724:	68f8      	ldr	r0, [r7, #12]
 8114726:	f7ff fec3 	bl	81144b0 <etharp_output_to_arp_index>
 811472a:	4603      	mov	r3, r0
 811472c:	e04a      	b.n	81147c4 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 811472e:	2300      	movs	r3, #0
 8114730:	75fb      	strb	r3, [r7, #23]
 8114732:	e031      	b.n	8114798 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8114734:	7dfa      	ldrb	r2, [r7, #23]
 8114736:	492c      	ldr	r1, [pc, #176]	@ (81147e8 <etharp_output+0x204>)
 8114738:	4613      	mov	r3, r2
 811473a:	005b      	lsls	r3, r3, #1
 811473c:	4413      	add	r3, r2
 811473e:	00db      	lsls	r3, r3, #3
 8114740:	440b      	add	r3, r1
 8114742:	3314      	adds	r3, #20
 8114744:	781b      	ldrb	r3, [r3, #0]
 8114746:	2b01      	cmp	r3, #1
 8114748:	d923      	bls.n	8114792 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 811474a:	7dfa      	ldrb	r2, [r7, #23]
 811474c:	4926      	ldr	r1, [pc, #152]	@ (81147e8 <etharp_output+0x204>)
 811474e:	4613      	mov	r3, r2
 8114750:	005b      	lsls	r3, r3, #1
 8114752:	4413      	add	r3, r2
 8114754:	00db      	lsls	r3, r3, #3
 8114756:	440b      	add	r3, r1
 8114758:	3308      	adds	r3, #8
 811475a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 811475c:	68fa      	ldr	r2, [r7, #12]
 811475e:	429a      	cmp	r2, r3
 8114760:	d117      	bne.n	8114792 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8114762:	69bb      	ldr	r3, [r7, #24]
 8114764:	6819      	ldr	r1, [r3, #0]
 8114766:	7dfa      	ldrb	r2, [r7, #23]
 8114768:	481f      	ldr	r0, [pc, #124]	@ (81147e8 <etharp_output+0x204>)
 811476a:	4613      	mov	r3, r2
 811476c:	005b      	lsls	r3, r3, #1
 811476e:	4413      	add	r3, r2
 8114770:	00db      	lsls	r3, r3, #3
 8114772:	4403      	add	r3, r0
 8114774:	3304      	adds	r3, #4
 8114776:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8114778:	4299      	cmp	r1, r3
 811477a:	d10a      	bne.n	8114792 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 811477c:	4a19      	ldr	r2, [pc, #100]	@ (81147e4 <etharp_output+0x200>)
 811477e:	7dfb      	ldrb	r3, [r7, #23]
 8114780:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8114782:	7dfb      	ldrb	r3, [r7, #23]
 8114784:	461a      	mov	r2, r3
 8114786:	68b9      	ldr	r1, [r7, #8]
 8114788:	68f8      	ldr	r0, [r7, #12]
 811478a:	f7ff fe91 	bl	81144b0 <etharp_output_to_arp_index>
 811478e:	4603      	mov	r3, r0
 8114790:	e018      	b.n	81147c4 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8114792:	7dfb      	ldrb	r3, [r7, #23]
 8114794:	3301      	adds	r3, #1
 8114796:	75fb      	strb	r3, [r7, #23]
 8114798:	7dfb      	ldrb	r3, [r7, #23]
 811479a:	2b09      	cmp	r3, #9
 811479c:	d9ca      	bls.n	8114734 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 811479e:	68ba      	ldr	r2, [r7, #8]
 81147a0:	69b9      	ldr	r1, [r7, #24]
 81147a2:	68f8      	ldr	r0, [r7, #12]
 81147a4:	f000 f822 	bl	81147ec <etharp_query>
 81147a8:	4603      	mov	r3, r0
 81147aa:	e00b      	b.n	81147c4 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 81147ac:	68fb      	ldr	r3, [r7, #12]
 81147ae:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 81147b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81147b6:	9300      	str	r3, [sp, #0]
 81147b8:	69fb      	ldr	r3, [r7, #28]
 81147ba:	68b9      	ldr	r1, [r7, #8]
 81147bc:	68f8      	ldr	r0, [r7, #12]
 81147be:	f000 faa3 	bl	8114d08 <ethernet_output>
 81147c2:	4603      	mov	r3, r0
}
 81147c4:	4618      	mov	r0, r3
 81147c6:	3720      	adds	r7, #32
 81147c8:	46bd      	mov	sp, r7
 81147ca:	bd80      	pop	{r7, pc}
 81147cc:	08125134 	.word	0x08125134
 81147d0:	081252bc 	.word	0x081252bc
 81147d4:	081251e4 	.word	0x081251e4
 81147d8:	0812530c 	.word	0x0812530c
 81147dc:	081252ac 	.word	0x081252ac
 81147e0:	08128950 	.word	0x08128950
 81147e4:	2400a160 	.word	0x2400a160
 81147e8:	2400a070 	.word	0x2400a070

081147ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 81147ec:	b580      	push	{r7, lr}
 81147ee:	b08c      	sub	sp, #48	@ 0x30
 81147f0:	af02      	add	r7, sp, #8
 81147f2:	60f8      	str	r0, [r7, #12]
 81147f4:	60b9      	str	r1, [r7, #8]
 81147f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 81147f8:	68fb      	ldr	r3, [r7, #12]
 81147fa:	3326      	adds	r3, #38	@ 0x26
 81147fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 81147fe:	23ff      	movs	r3, #255	@ 0xff
 8114800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8114804:	2300      	movs	r3, #0
 8114806:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8114808:	68bb      	ldr	r3, [r7, #8]
 811480a:	681b      	ldr	r3, [r3, #0]
 811480c:	68f9      	ldr	r1, [r7, #12]
 811480e:	4618      	mov	r0, r3
 8114810:	f000 ffe4 	bl	81157dc <ip4_addr_isbroadcast_u32>
 8114814:	4603      	mov	r3, r0
 8114816:	2b00      	cmp	r3, #0
 8114818:	d10c      	bne.n	8114834 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 811481a:	68bb      	ldr	r3, [r7, #8]
 811481c:	681b      	ldr	r3, [r3, #0]
 811481e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8114822:	2be0      	cmp	r3, #224	@ 0xe0
 8114824:	d006      	beq.n	8114834 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8114826:	68bb      	ldr	r3, [r7, #8]
 8114828:	2b00      	cmp	r3, #0
 811482a:	d003      	beq.n	8114834 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 811482c:	68bb      	ldr	r3, [r7, #8]
 811482e:	681b      	ldr	r3, [r3, #0]
 8114830:	2b00      	cmp	r3, #0
 8114832:	d102      	bne.n	811483a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8114834:	f06f 030f 	mvn.w	r3, #15
 8114838:	e101      	b.n	8114a3e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 811483a:	68fa      	ldr	r2, [r7, #12]
 811483c:	2101      	movs	r1, #1
 811483e:	68b8      	ldr	r0, [r7, #8]
 8114840:	f7ff fb5c 	bl	8113efc <etharp_find_entry>
 8114844:	4603      	mov	r3, r0
 8114846:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8114848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 811484c:	2b00      	cmp	r3, #0
 811484e:	da02      	bge.n	8114856 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8114850:	8a7b      	ldrh	r3, [r7, #18]
 8114852:	b25b      	sxtb	r3, r3
 8114854:	e0f3      	b.n	8114a3e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8114856:	8a7b      	ldrh	r3, [r7, #18]
 8114858:	2b7e      	cmp	r3, #126	@ 0x7e
 811485a:	d906      	bls.n	811486a <etharp_query+0x7e>
 811485c:	4b7a      	ldr	r3, [pc, #488]	@ (8114a48 <etharp_query+0x25c>)
 811485e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8114862:	497a      	ldr	r1, [pc, #488]	@ (8114a4c <etharp_query+0x260>)
 8114864:	487a      	ldr	r0, [pc, #488]	@ (8114a50 <etharp_query+0x264>)
 8114866:	f00d fa8d 	bl	8121d84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 811486a:	8a7b      	ldrh	r3, [r7, #18]
 811486c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 811486e:	7c7a      	ldrb	r2, [r7, #17]
 8114870:	4978      	ldr	r1, [pc, #480]	@ (8114a54 <etharp_query+0x268>)
 8114872:	4613      	mov	r3, r2
 8114874:	005b      	lsls	r3, r3, #1
 8114876:	4413      	add	r3, r2
 8114878:	00db      	lsls	r3, r3, #3
 811487a:	440b      	add	r3, r1
 811487c:	3314      	adds	r3, #20
 811487e:	781b      	ldrb	r3, [r3, #0]
 8114880:	2b00      	cmp	r3, #0
 8114882:	d115      	bne.n	81148b0 <etharp_query+0xc4>
    is_new_entry = 1;
 8114884:	2301      	movs	r3, #1
 8114886:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8114888:	7c7a      	ldrb	r2, [r7, #17]
 811488a:	4972      	ldr	r1, [pc, #456]	@ (8114a54 <etharp_query+0x268>)
 811488c:	4613      	mov	r3, r2
 811488e:	005b      	lsls	r3, r3, #1
 8114890:	4413      	add	r3, r2
 8114892:	00db      	lsls	r3, r3, #3
 8114894:	440b      	add	r3, r1
 8114896:	3314      	adds	r3, #20
 8114898:	2201      	movs	r2, #1
 811489a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 811489c:	7c7a      	ldrb	r2, [r7, #17]
 811489e:	496d      	ldr	r1, [pc, #436]	@ (8114a54 <etharp_query+0x268>)
 81148a0:	4613      	mov	r3, r2
 81148a2:	005b      	lsls	r3, r3, #1
 81148a4:	4413      	add	r3, r2
 81148a6:	00db      	lsls	r3, r3, #3
 81148a8:	440b      	add	r3, r1
 81148aa:	3308      	adds	r3, #8
 81148ac:	68fa      	ldr	r2, [r7, #12]
 81148ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 81148b0:	7c7a      	ldrb	r2, [r7, #17]
 81148b2:	4968      	ldr	r1, [pc, #416]	@ (8114a54 <etharp_query+0x268>)
 81148b4:	4613      	mov	r3, r2
 81148b6:	005b      	lsls	r3, r3, #1
 81148b8:	4413      	add	r3, r2
 81148ba:	00db      	lsls	r3, r3, #3
 81148bc:	440b      	add	r3, r1
 81148be:	3314      	adds	r3, #20
 81148c0:	781b      	ldrb	r3, [r3, #0]
 81148c2:	2b01      	cmp	r3, #1
 81148c4:	d011      	beq.n	81148ea <etharp_query+0xfe>
 81148c6:	7c7a      	ldrb	r2, [r7, #17]
 81148c8:	4962      	ldr	r1, [pc, #392]	@ (8114a54 <etharp_query+0x268>)
 81148ca:	4613      	mov	r3, r2
 81148cc:	005b      	lsls	r3, r3, #1
 81148ce:	4413      	add	r3, r2
 81148d0:	00db      	lsls	r3, r3, #3
 81148d2:	440b      	add	r3, r1
 81148d4:	3314      	adds	r3, #20
 81148d6:	781b      	ldrb	r3, [r3, #0]
 81148d8:	2b01      	cmp	r3, #1
 81148da:	d806      	bhi.n	81148ea <etharp_query+0xfe>
 81148dc:	4b5a      	ldr	r3, [pc, #360]	@ (8114a48 <etharp_query+0x25c>)
 81148de:	f240 32cd 	movw	r2, #973	@ 0x3cd
 81148e2:	495d      	ldr	r1, [pc, #372]	@ (8114a58 <etharp_query+0x26c>)
 81148e4:	485a      	ldr	r0, [pc, #360]	@ (8114a50 <etharp_query+0x264>)
 81148e6:	f00d fa4d 	bl	8121d84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 81148ea:	6a3b      	ldr	r3, [r7, #32]
 81148ec:	2b00      	cmp	r3, #0
 81148ee:	d102      	bne.n	81148f6 <etharp_query+0x10a>
 81148f0:	687b      	ldr	r3, [r7, #4]
 81148f2:	2b00      	cmp	r3, #0
 81148f4:	d10c      	bne.n	8114910 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 81148f6:	68b9      	ldr	r1, [r7, #8]
 81148f8:	68f8      	ldr	r0, [r7, #12]
 81148fa:	f000 f963 	bl	8114bc4 <etharp_request>
 81148fe:	4603      	mov	r3, r0
 8114900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8114904:	687b      	ldr	r3, [r7, #4]
 8114906:	2b00      	cmp	r3, #0
 8114908:	d102      	bne.n	8114910 <etharp_query+0x124>
      return result;
 811490a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 811490e:	e096      	b.n	8114a3e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8114910:	687b      	ldr	r3, [r7, #4]
 8114912:	2b00      	cmp	r3, #0
 8114914:	d106      	bne.n	8114924 <etharp_query+0x138>
 8114916:	4b4c      	ldr	r3, [pc, #304]	@ (8114a48 <etharp_query+0x25c>)
 8114918:	f240 32e1 	movw	r2, #993	@ 0x3e1
 811491c:	494f      	ldr	r1, [pc, #316]	@ (8114a5c <etharp_query+0x270>)
 811491e:	484c      	ldr	r0, [pc, #304]	@ (8114a50 <etharp_query+0x264>)
 8114920:	f00d fa30 	bl	8121d84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8114924:	7c7a      	ldrb	r2, [r7, #17]
 8114926:	494b      	ldr	r1, [pc, #300]	@ (8114a54 <etharp_query+0x268>)
 8114928:	4613      	mov	r3, r2
 811492a:	005b      	lsls	r3, r3, #1
 811492c:	4413      	add	r3, r2
 811492e:	00db      	lsls	r3, r3, #3
 8114930:	440b      	add	r3, r1
 8114932:	3314      	adds	r3, #20
 8114934:	781b      	ldrb	r3, [r3, #0]
 8114936:	2b01      	cmp	r3, #1
 8114938:	d917      	bls.n	811496a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 811493a:	4a49      	ldr	r2, [pc, #292]	@ (8114a60 <etharp_query+0x274>)
 811493c:	7c7b      	ldrb	r3, [r7, #17]
 811493e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8114940:	7c7a      	ldrb	r2, [r7, #17]
 8114942:	4613      	mov	r3, r2
 8114944:	005b      	lsls	r3, r3, #1
 8114946:	4413      	add	r3, r2
 8114948:	00db      	lsls	r3, r3, #3
 811494a:	3308      	adds	r3, #8
 811494c:	4a41      	ldr	r2, [pc, #260]	@ (8114a54 <etharp_query+0x268>)
 811494e:	4413      	add	r3, r2
 8114950:	3304      	adds	r3, #4
 8114952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8114956:	9200      	str	r2, [sp, #0]
 8114958:	697a      	ldr	r2, [r7, #20]
 811495a:	6879      	ldr	r1, [r7, #4]
 811495c:	68f8      	ldr	r0, [r7, #12]
 811495e:	f000 f9d3 	bl	8114d08 <ethernet_output>
 8114962:	4603      	mov	r3, r0
 8114964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8114968:	e067      	b.n	8114a3a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 811496a:	7c7a      	ldrb	r2, [r7, #17]
 811496c:	4939      	ldr	r1, [pc, #228]	@ (8114a54 <etharp_query+0x268>)
 811496e:	4613      	mov	r3, r2
 8114970:	005b      	lsls	r3, r3, #1
 8114972:	4413      	add	r3, r2
 8114974:	00db      	lsls	r3, r3, #3
 8114976:	440b      	add	r3, r1
 8114978:	3314      	adds	r3, #20
 811497a:	781b      	ldrb	r3, [r3, #0]
 811497c:	2b01      	cmp	r3, #1
 811497e:	d15c      	bne.n	8114a3a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8114980:	2300      	movs	r3, #0
 8114982:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8114984:	687b      	ldr	r3, [r7, #4]
 8114986:	61fb      	str	r3, [r7, #28]
    while (p) {
 8114988:	e01c      	b.n	81149c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 811498a:	69fb      	ldr	r3, [r7, #28]
 811498c:	895a      	ldrh	r2, [r3, #10]
 811498e:	69fb      	ldr	r3, [r7, #28]
 8114990:	891b      	ldrh	r3, [r3, #8]
 8114992:	429a      	cmp	r2, r3
 8114994:	d10a      	bne.n	81149ac <etharp_query+0x1c0>
 8114996:	69fb      	ldr	r3, [r7, #28]
 8114998:	681b      	ldr	r3, [r3, #0]
 811499a:	2b00      	cmp	r3, #0
 811499c:	d006      	beq.n	81149ac <etharp_query+0x1c0>
 811499e:	4b2a      	ldr	r3, [pc, #168]	@ (8114a48 <etharp_query+0x25c>)
 81149a0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 81149a4:	492f      	ldr	r1, [pc, #188]	@ (8114a64 <etharp_query+0x278>)
 81149a6:	482a      	ldr	r0, [pc, #168]	@ (8114a50 <etharp_query+0x264>)
 81149a8:	f00d f9ec 	bl	8121d84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 81149ac:	69fb      	ldr	r3, [r7, #28]
 81149ae:	7b1b      	ldrb	r3, [r3, #12]
 81149b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81149b4:	2b00      	cmp	r3, #0
 81149b6:	d002      	beq.n	81149be <etharp_query+0x1d2>
        copy_needed = 1;
 81149b8:	2301      	movs	r3, #1
 81149ba:	61bb      	str	r3, [r7, #24]
        break;
 81149bc:	e005      	b.n	81149ca <etharp_query+0x1de>
      }
      p = p->next;
 81149be:	69fb      	ldr	r3, [r7, #28]
 81149c0:	681b      	ldr	r3, [r3, #0]
 81149c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 81149c4:	69fb      	ldr	r3, [r7, #28]
 81149c6:	2b00      	cmp	r3, #0
 81149c8:	d1df      	bne.n	811498a <etharp_query+0x19e>
    }
    if (copy_needed) {
 81149ca:	69bb      	ldr	r3, [r7, #24]
 81149cc:	2b00      	cmp	r3, #0
 81149ce:	d007      	beq.n	81149e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 81149d0:	687a      	ldr	r2, [r7, #4]
 81149d2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 81149d6:	200e      	movs	r0, #14
 81149d8:	f005 fa6a 	bl	8119eb0 <pbuf_clone>
 81149dc:	61f8      	str	r0, [r7, #28]
 81149de:	e004      	b.n	81149ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 81149e0:	687b      	ldr	r3, [r7, #4]
 81149e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 81149e4:	69f8      	ldr	r0, [r7, #28]
 81149e6:	f005 f867 	bl	8119ab8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 81149ea:	69fb      	ldr	r3, [r7, #28]
 81149ec:	2b00      	cmp	r3, #0
 81149ee:	d021      	beq.n	8114a34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 81149f0:	7c7a      	ldrb	r2, [r7, #17]
 81149f2:	4918      	ldr	r1, [pc, #96]	@ (8114a54 <etharp_query+0x268>)
 81149f4:	4613      	mov	r3, r2
 81149f6:	005b      	lsls	r3, r3, #1
 81149f8:	4413      	add	r3, r2
 81149fa:	00db      	lsls	r3, r3, #3
 81149fc:	440b      	add	r3, r1
 81149fe:	681b      	ldr	r3, [r3, #0]
 8114a00:	2b00      	cmp	r3, #0
 8114a02:	d00a      	beq.n	8114a1a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8114a04:	7c7a      	ldrb	r2, [r7, #17]
 8114a06:	4913      	ldr	r1, [pc, #76]	@ (8114a54 <etharp_query+0x268>)
 8114a08:	4613      	mov	r3, r2
 8114a0a:	005b      	lsls	r3, r3, #1
 8114a0c:	4413      	add	r3, r2
 8114a0e:	00db      	lsls	r3, r3, #3
 8114a10:	440b      	add	r3, r1
 8114a12:	681b      	ldr	r3, [r3, #0]
 8114a14:	4618      	mov	r0, r3
 8114a16:	f004 ffa9 	bl	811996c <pbuf_free>
      }
      arp_table[i].q = p;
 8114a1a:	7c7a      	ldrb	r2, [r7, #17]
 8114a1c:	490d      	ldr	r1, [pc, #52]	@ (8114a54 <etharp_query+0x268>)
 8114a1e:	4613      	mov	r3, r2
 8114a20:	005b      	lsls	r3, r3, #1
 8114a22:	4413      	add	r3, r2
 8114a24:	00db      	lsls	r3, r3, #3
 8114a26:	440b      	add	r3, r1
 8114a28:	69fa      	ldr	r2, [r7, #28]
 8114a2a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8114a2c:	2300      	movs	r3, #0
 8114a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8114a32:	e002      	b.n	8114a3a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8114a34:	23ff      	movs	r3, #255	@ 0xff
 8114a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8114a3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8114a3e:	4618      	mov	r0, r3
 8114a40:	3728      	adds	r7, #40	@ 0x28
 8114a42:	46bd      	mov	sp, r7
 8114a44:	bd80      	pop	{r7, pc}
 8114a46:	bf00      	nop
 8114a48:	08125134 	.word	0x08125134
 8114a4c:	08125318 	.word	0x08125318
 8114a50:	081251e4 	.word	0x081251e4
 8114a54:	2400a070 	.word	0x2400a070
 8114a58:	08125328 	.word	0x08125328
 8114a5c:	0812530c 	.word	0x0812530c
 8114a60:	2400a160 	.word	0x2400a160
 8114a64:	08125350 	.word	0x08125350

08114a68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8114a68:	b580      	push	{r7, lr}
 8114a6a:	b08a      	sub	sp, #40	@ 0x28
 8114a6c:	af02      	add	r7, sp, #8
 8114a6e:	60f8      	str	r0, [r7, #12]
 8114a70:	60b9      	str	r1, [r7, #8]
 8114a72:	607a      	str	r2, [r7, #4]
 8114a74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8114a76:	2300      	movs	r3, #0
 8114a78:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8114a7a:	68fb      	ldr	r3, [r7, #12]
 8114a7c:	2b00      	cmp	r3, #0
 8114a7e:	d106      	bne.n	8114a8e <etharp_raw+0x26>
 8114a80:	4b3a      	ldr	r3, [pc, #232]	@ (8114b6c <etharp_raw+0x104>)
 8114a82:	f240 4257 	movw	r2, #1111	@ 0x457
 8114a86:	493a      	ldr	r1, [pc, #232]	@ (8114b70 <etharp_raw+0x108>)
 8114a88:	483a      	ldr	r0, [pc, #232]	@ (8114b74 <etharp_raw+0x10c>)
 8114a8a:	f00d f97b 	bl	8121d84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8114a8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8114a92:	211c      	movs	r1, #28
 8114a94:	200e      	movs	r0, #14
 8114a96:	f004 fc87 	bl	81193a8 <pbuf_alloc>
 8114a9a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8114a9c:	69bb      	ldr	r3, [r7, #24]
 8114a9e:	2b00      	cmp	r3, #0
 8114aa0:	d102      	bne.n	8114aa8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8114aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8114aa6:	e05d      	b.n	8114b64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8114aa8:	69bb      	ldr	r3, [r7, #24]
 8114aaa:	895b      	ldrh	r3, [r3, #10]
 8114aac:	2b1b      	cmp	r3, #27
 8114aae:	d806      	bhi.n	8114abe <etharp_raw+0x56>
 8114ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8114b6c <etharp_raw+0x104>)
 8114ab2:	f240 4262 	movw	r2, #1122	@ 0x462
 8114ab6:	4930      	ldr	r1, [pc, #192]	@ (8114b78 <etharp_raw+0x110>)
 8114ab8:	482e      	ldr	r0, [pc, #184]	@ (8114b74 <etharp_raw+0x10c>)
 8114aba:	f00d f963 	bl	8121d84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8114abe:	69bb      	ldr	r3, [r7, #24]
 8114ac0:	685b      	ldr	r3, [r3, #4]
 8114ac2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8114ac4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8114ac6:	4618      	mov	r0, r3
 8114ac8:	f7ff f910 	bl	8113cec <lwip_htons>
 8114acc:	4603      	mov	r3, r0
 8114ace:	461a      	mov	r2, r3
 8114ad0:	697b      	ldr	r3, [r7, #20]
 8114ad2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8114ad4:	68fb      	ldr	r3, [r7, #12]
 8114ad6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8114ada:	2b06      	cmp	r3, #6
 8114adc:	d006      	beq.n	8114aec <etharp_raw+0x84>
 8114ade:	4b23      	ldr	r3, [pc, #140]	@ (8114b6c <etharp_raw+0x104>)
 8114ae0:	f240 4269 	movw	r2, #1129	@ 0x469
 8114ae4:	4925      	ldr	r1, [pc, #148]	@ (8114b7c <etharp_raw+0x114>)
 8114ae6:	4823      	ldr	r0, [pc, #140]	@ (8114b74 <etharp_raw+0x10c>)
 8114ae8:	f00d f94c 	bl	8121d84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8114aec:	697b      	ldr	r3, [r7, #20]
 8114aee:	3308      	adds	r3, #8
 8114af0:	2206      	movs	r2, #6
 8114af2:	6839      	ldr	r1, [r7, #0]
 8114af4:	4618      	mov	r0, r3
 8114af6:	f00d fbe6 	bl	81222c6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8114afa:	697b      	ldr	r3, [r7, #20]
 8114afc:	3312      	adds	r3, #18
 8114afe:	2206      	movs	r2, #6
 8114b00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8114b02:	4618      	mov	r0, r3
 8114b04:	f00d fbdf 	bl	81222c6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8114b08:	697b      	ldr	r3, [r7, #20]
 8114b0a:	330e      	adds	r3, #14
 8114b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8114b0e:	6812      	ldr	r2, [r2, #0]
 8114b10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8114b12:	697b      	ldr	r3, [r7, #20]
 8114b14:	3318      	adds	r3, #24
 8114b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8114b18:	6812      	ldr	r2, [r2, #0]
 8114b1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8114b1c:	697b      	ldr	r3, [r7, #20]
 8114b1e:	2200      	movs	r2, #0
 8114b20:	701a      	strb	r2, [r3, #0]
 8114b22:	2200      	movs	r2, #0
 8114b24:	f042 0201 	orr.w	r2, r2, #1
 8114b28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8114b2a:	697b      	ldr	r3, [r7, #20]
 8114b2c:	2200      	movs	r2, #0
 8114b2e:	f042 0208 	orr.w	r2, r2, #8
 8114b32:	709a      	strb	r2, [r3, #2]
 8114b34:	2200      	movs	r2, #0
 8114b36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8114b38:	697b      	ldr	r3, [r7, #20]
 8114b3a:	2206      	movs	r2, #6
 8114b3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8114b3e:	697b      	ldr	r3, [r7, #20]
 8114b40:	2204      	movs	r2, #4
 8114b42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8114b44:	f640 0306 	movw	r3, #2054	@ 0x806
 8114b48:	9300      	str	r3, [sp, #0]
 8114b4a:	687b      	ldr	r3, [r7, #4]
 8114b4c:	68ba      	ldr	r2, [r7, #8]
 8114b4e:	69b9      	ldr	r1, [r7, #24]
 8114b50:	68f8      	ldr	r0, [r7, #12]
 8114b52:	f000 f8d9 	bl	8114d08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8114b56:	69b8      	ldr	r0, [r7, #24]
 8114b58:	f004 ff08 	bl	811996c <pbuf_free>
  p = NULL;
 8114b5c:	2300      	movs	r3, #0
 8114b5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8114b60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8114b64:	4618      	mov	r0, r3
 8114b66:	3720      	adds	r7, #32
 8114b68:	46bd      	mov	sp, r7
 8114b6a:	bd80      	pop	{r7, pc}
 8114b6c:	08125134 	.word	0x08125134
 8114b70:	081252bc 	.word	0x081252bc
 8114b74:	081251e4 	.word	0x081251e4
 8114b78:	0812536c 	.word	0x0812536c
 8114b7c:	081253a0 	.word	0x081253a0

08114b80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8114b80:	b580      	push	{r7, lr}
 8114b82:	b088      	sub	sp, #32
 8114b84:	af04      	add	r7, sp, #16
 8114b86:	60f8      	str	r0, [r7, #12]
 8114b88:	60b9      	str	r1, [r7, #8]
 8114b8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8114b8c:	68fb      	ldr	r3, [r7, #12]
 8114b8e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8114b92:	68fb      	ldr	r3, [r7, #12]
 8114b94:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8114b98:	68fb      	ldr	r3, [r7, #12]
 8114b9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8114b9c:	2201      	movs	r2, #1
 8114b9e:	9203      	str	r2, [sp, #12]
 8114ba0:	68ba      	ldr	r2, [r7, #8]
 8114ba2:	9202      	str	r2, [sp, #8]
 8114ba4:	4a06      	ldr	r2, [pc, #24]	@ (8114bc0 <etharp_request_dst+0x40>)
 8114ba6:	9201      	str	r2, [sp, #4]
 8114ba8:	9300      	str	r3, [sp, #0]
 8114baa:	4603      	mov	r3, r0
 8114bac:	687a      	ldr	r2, [r7, #4]
 8114bae:	68f8      	ldr	r0, [r7, #12]
 8114bb0:	f7ff ff5a 	bl	8114a68 <etharp_raw>
 8114bb4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8114bb6:	4618      	mov	r0, r3
 8114bb8:	3710      	adds	r7, #16
 8114bba:	46bd      	mov	sp, r7
 8114bbc:	bd80      	pop	{r7, pc}
 8114bbe:	bf00      	nop
 8114bc0:	08128958 	.word	0x08128958

08114bc4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8114bc4:	b580      	push	{r7, lr}
 8114bc6:	b082      	sub	sp, #8
 8114bc8:	af00      	add	r7, sp, #0
 8114bca:	6078      	str	r0, [r7, #4]
 8114bcc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8114bce:	4a05      	ldr	r2, [pc, #20]	@ (8114be4 <etharp_request+0x20>)
 8114bd0:	6839      	ldr	r1, [r7, #0]
 8114bd2:	6878      	ldr	r0, [r7, #4]
 8114bd4:	f7ff ffd4 	bl	8114b80 <etharp_request_dst>
 8114bd8:	4603      	mov	r3, r0
}
 8114bda:	4618      	mov	r0, r3
 8114bdc:	3708      	adds	r7, #8
 8114bde:	46bd      	mov	sp, r7
 8114be0:	bd80      	pop	{r7, pc}
 8114be2:	bf00      	nop
 8114be4:	08128950 	.word	0x08128950

08114be8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8114be8:	b580      	push	{r7, lr}
 8114bea:	b086      	sub	sp, #24
 8114bec:	af00      	add	r7, sp, #0
 8114bee:	6078      	str	r0, [r7, #4]
 8114bf0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8114bf2:	230e      	movs	r3, #14
 8114bf4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 8114bf6:	f7fb f8e3 	bl	810fdc0 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 8114bfa:	687b      	ldr	r3, [r7, #4]
 8114bfc:	895b      	ldrh	r3, [r3, #10]
 8114bfe:	2b0e      	cmp	r3, #14
 8114c00:	d96e      	bls.n	8114ce0 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8114c02:	687b      	ldr	r3, [r7, #4]
 8114c04:	7bdb      	ldrb	r3, [r3, #15]
 8114c06:	2b00      	cmp	r3, #0
 8114c08:	d106      	bne.n	8114c18 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8114c0a:	683b      	ldr	r3, [r7, #0]
 8114c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8114c10:	3301      	adds	r3, #1
 8114c12:	b2da      	uxtb	r2, r3
 8114c14:	687b      	ldr	r3, [r7, #4]
 8114c16:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8114c18:	687b      	ldr	r3, [r7, #4]
 8114c1a:	685b      	ldr	r3, [r3, #4]
 8114c1c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8114c1e:	693b      	ldr	r3, [r7, #16]
 8114c20:	7b1a      	ldrb	r2, [r3, #12]
 8114c22:	7b5b      	ldrb	r3, [r3, #13]
 8114c24:	021b      	lsls	r3, r3, #8
 8114c26:	4313      	orrs	r3, r2
 8114c28:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8114c2a:	693b      	ldr	r3, [r7, #16]
 8114c2c:	781b      	ldrb	r3, [r3, #0]
 8114c2e:	f003 0301 	and.w	r3, r3, #1
 8114c32:	2b00      	cmp	r3, #0
 8114c34:	d023      	beq.n	8114c7e <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8114c36:	693b      	ldr	r3, [r7, #16]
 8114c38:	781b      	ldrb	r3, [r3, #0]
 8114c3a:	2b01      	cmp	r3, #1
 8114c3c:	d10f      	bne.n	8114c5e <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8114c3e:	693b      	ldr	r3, [r7, #16]
 8114c40:	785b      	ldrb	r3, [r3, #1]
 8114c42:	2b00      	cmp	r3, #0
 8114c44:	d11b      	bne.n	8114c7e <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8114c46:	693b      	ldr	r3, [r7, #16]
 8114c48:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8114c4a:	2b5e      	cmp	r3, #94	@ 0x5e
 8114c4c:	d117      	bne.n	8114c7e <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8114c4e:	687b      	ldr	r3, [r7, #4]
 8114c50:	7b5b      	ldrb	r3, [r3, #13]
 8114c52:	f043 0310 	orr.w	r3, r3, #16
 8114c56:	b2da      	uxtb	r2, r3
 8114c58:	687b      	ldr	r3, [r7, #4]
 8114c5a:	735a      	strb	r2, [r3, #13]
 8114c5c:	e00f      	b.n	8114c7e <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8114c5e:	693b      	ldr	r3, [r7, #16]
 8114c60:	2206      	movs	r2, #6
 8114c62:	4928      	ldr	r1, [pc, #160]	@ (8114d04 <ethernet_input+0x11c>)
 8114c64:	4618      	mov	r0, r3
 8114c66:	f00d fa09 	bl	812207c <memcmp>
 8114c6a:	4603      	mov	r3, r0
 8114c6c:	2b00      	cmp	r3, #0
 8114c6e:	d106      	bne.n	8114c7e <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8114c70:	687b      	ldr	r3, [r7, #4]
 8114c72:	7b5b      	ldrb	r3, [r3, #13]
 8114c74:	f043 0308 	orr.w	r3, r3, #8
 8114c78:	b2da      	uxtb	r2, r3
 8114c7a:	687b      	ldr	r3, [r7, #4]
 8114c7c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8114c7e:	89fb      	ldrh	r3, [r7, #14]
 8114c80:	2b08      	cmp	r3, #8
 8114c82:	d003      	beq.n	8114c8c <ethernet_input+0xa4>
 8114c84:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8114c88:	d014      	beq.n	8114cb4 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8114c8a:	e032      	b.n	8114cf2 <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8114c8c:	683b      	ldr	r3, [r7, #0]
 8114c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114c92:	f003 0308 	and.w	r3, r3, #8
 8114c96:	2b00      	cmp	r3, #0
 8114c98:	d024      	beq.n	8114ce4 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8114c9a:	8afb      	ldrh	r3, [r7, #22]
 8114c9c:	4619      	mov	r1, r3
 8114c9e:	6878      	ldr	r0, [r7, #4]
 8114ca0:	f004 fdde 	bl	8119860 <pbuf_remove_header>
 8114ca4:	4603      	mov	r3, r0
 8114ca6:	2b00      	cmp	r3, #0
 8114ca8:	d11e      	bne.n	8114ce8 <ethernet_input+0x100>
        ip4_input(p, netif);
 8114caa:	6839      	ldr	r1, [r7, #0]
 8114cac:	6878      	ldr	r0, [r7, #4]
 8114cae:	f000 fb95 	bl	81153dc <ip4_input>
      break;
 8114cb2:	e013      	b.n	8114cdc <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8114cb4:	683b      	ldr	r3, [r7, #0]
 8114cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114cba:	f003 0308 	and.w	r3, r3, #8
 8114cbe:	2b00      	cmp	r3, #0
 8114cc0:	d014      	beq.n	8114cec <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8114cc2:	8afb      	ldrh	r3, [r7, #22]
 8114cc4:	4619      	mov	r1, r3
 8114cc6:	6878      	ldr	r0, [r7, #4]
 8114cc8:	f004 fdca 	bl	8119860 <pbuf_remove_header>
 8114ccc:	4603      	mov	r3, r0
 8114cce:	2b00      	cmp	r3, #0
 8114cd0:	d10e      	bne.n	8114cf0 <ethernet_input+0x108>
        etharp_input(p, netif);
 8114cd2:	6839      	ldr	r1, [r7, #0]
 8114cd4:	6878      	ldr	r0, [r7, #4]
 8114cd6:	f7ff fb5f 	bl	8114398 <etharp_input>
      break;
 8114cda:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8114cdc:	2300      	movs	r3, #0
 8114cde:	e00c      	b.n	8114cfa <ethernet_input+0x112>
    goto free_and_return;
 8114ce0:	bf00      	nop
 8114ce2:	e006      	b.n	8114cf2 <ethernet_input+0x10a>
        goto free_and_return;
 8114ce4:	bf00      	nop
 8114ce6:	e004      	b.n	8114cf2 <ethernet_input+0x10a>
        goto free_and_return;
 8114ce8:	bf00      	nop
 8114cea:	e002      	b.n	8114cf2 <ethernet_input+0x10a>
        goto free_and_return;
 8114cec:	bf00      	nop
 8114cee:	e000      	b.n	8114cf2 <ethernet_input+0x10a>
        goto free_and_return;
 8114cf0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8114cf2:	6878      	ldr	r0, [r7, #4]
 8114cf4:	f004 fe3a 	bl	811996c <pbuf_free>
  return ERR_OK;
 8114cf8:	2300      	movs	r3, #0
}
 8114cfa:	4618      	mov	r0, r3
 8114cfc:	3718      	adds	r7, #24
 8114cfe:	46bd      	mov	sp, r7
 8114d00:	bd80      	pop	{r7, pc}
 8114d02:	bf00      	nop
 8114d04:	08128950 	.word	0x08128950

08114d08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8114d08:	b580      	push	{r7, lr}
 8114d0a:	b086      	sub	sp, #24
 8114d0c:	af00      	add	r7, sp, #0
 8114d0e:	60f8      	str	r0, [r7, #12]
 8114d10:	60b9      	str	r1, [r7, #8]
 8114d12:	607a      	str	r2, [r7, #4]
 8114d14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8114d16:	8c3b      	ldrh	r3, [r7, #32]
 8114d18:	4618      	mov	r0, r3
 8114d1a:	f7fe ffe7 	bl	8113cec <lwip_htons>
 8114d1e:	4603      	mov	r3, r0
 8114d20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8114d22:	210e      	movs	r1, #14
 8114d24:	68b8      	ldr	r0, [r7, #8]
 8114d26:	f004 fd8b 	bl	8119840 <pbuf_add_header>
 8114d2a:	4603      	mov	r3, r0
 8114d2c:	2b00      	cmp	r3, #0
 8114d2e:	d127      	bne.n	8114d80 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8114d30:	f7fb f846 	bl	810fdc0 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8114d34:	68bb      	ldr	r3, [r7, #8]
 8114d36:	685b      	ldr	r3, [r3, #4]
 8114d38:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8114d3a:	693b      	ldr	r3, [r7, #16]
 8114d3c:	8afa      	ldrh	r2, [r7, #22]
 8114d3e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8114d40:	693b      	ldr	r3, [r7, #16]
 8114d42:	2206      	movs	r2, #6
 8114d44:	6839      	ldr	r1, [r7, #0]
 8114d46:	4618      	mov	r0, r3
 8114d48:	f00d fabd 	bl	81222c6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8114d4c:	693b      	ldr	r3, [r7, #16]
 8114d4e:	3306      	adds	r3, #6
 8114d50:	2206      	movs	r2, #6
 8114d52:	6879      	ldr	r1, [r7, #4]
 8114d54:	4618      	mov	r0, r3
 8114d56:	f00d fab6 	bl	81222c6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8114d5a:	68fb      	ldr	r3, [r7, #12]
 8114d5c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8114d60:	2b06      	cmp	r3, #6
 8114d62:	d006      	beq.n	8114d72 <ethernet_output+0x6a>
 8114d64:	4b0a      	ldr	r3, [pc, #40]	@ (8114d90 <ethernet_output+0x88>)
 8114d66:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8114d6a:	490a      	ldr	r1, [pc, #40]	@ (8114d94 <ethernet_output+0x8c>)
 8114d6c:	480a      	ldr	r0, [pc, #40]	@ (8114d98 <ethernet_output+0x90>)
 8114d6e:	f00d f809 	bl	8121d84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8114d72:	68fb      	ldr	r3, [r7, #12]
 8114d74:	699b      	ldr	r3, [r3, #24]
 8114d76:	68b9      	ldr	r1, [r7, #8]
 8114d78:	68f8      	ldr	r0, [r7, #12]
 8114d7a:	4798      	blx	r3
 8114d7c:	4603      	mov	r3, r0
 8114d7e:	e002      	b.n	8114d86 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 8114d80:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8114d82:	f06f 0301 	mvn.w	r3, #1
}
 8114d86:	4618      	mov	r0, r3
 8114d88:	3718      	adds	r7, #24
 8114d8a:	46bd      	mov	sp, r7
 8114d8c:	bd80      	pop	{r7, pc}
 8114d8e:	bf00      	nop
 8114d90:	081253e4 	.word	0x081253e4
 8114d94:	08125454 	.word	0x08125454
 8114d98:	08125488 	.word	0x08125488

08114d9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8114d9c:	b580      	push	{r7, lr}
 8114d9e:	b08e      	sub	sp, #56	@ 0x38
 8114da0:	af04      	add	r7, sp, #16
 8114da2:	6078      	str	r0, [r7, #4]
 8114da4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8114da6:	4b86      	ldr	r3, [pc, #536]	@ (8114fc0 <icmp_input+0x224>)
 8114da8:	689b      	ldr	r3, [r3, #8]
 8114daa:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8114dac:	6a3b      	ldr	r3, [r7, #32]
 8114dae:	781b      	ldrb	r3, [r3, #0]
 8114db0:	f003 030f 	and.w	r3, r3, #15
 8114db4:	b2db      	uxtb	r3, r3
 8114db6:	009b      	lsls	r3, r3, #2
 8114db8:	b2db      	uxtb	r3, r3
 8114dba:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8114dbc:	8bfb      	ldrh	r3, [r7, #30]
 8114dbe:	2b13      	cmp	r3, #19
 8114dc0:	f240 80ea 	bls.w	8114f98 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8114dc4:	687b      	ldr	r3, [r7, #4]
 8114dc6:	895b      	ldrh	r3, [r3, #10]
 8114dc8:	2b03      	cmp	r3, #3
 8114dca:	f240 80e7 	bls.w	8114f9c <icmp_input+0x200>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8114dce:	687b      	ldr	r3, [r7, #4]
 8114dd0:	685b      	ldr	r3, [r3, #4]
 8114dd2:	781b      	ldrb	r3, [r3, #0]
 8114dd4:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8114dd6:	7f7b      	ldrb	r3, [r7, #29]
 8114dd8:	2b00      	cmp	r3, #0
 8114dda:	f000 80d6 	beq.w	8114f8a <icmp_input+0x1ee>
 8114dde:	2b08      	cmp	r3, #8
 8114de0:	f040 80d6 	bne.w	8114f90 <icmp_input+0x1f4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8114de4:	4b77      	ldr	r3, [pc, #476]	@ (8114fc4 <icmp_input+0x228>)
 8114de6:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8114de8:	4b75      	ldr	r3, [pc, #468]	@ (8114fc0 <icmp_input+0x224>)
 8114dea:	695b      	ldr	r3, [r3, #20]
 8114dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8114df0:	2be0      	cmp	r3, #224	@ 0xe0
 8114df2:	d102      	bne.n	8114dfa <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8114df4:	683b      	ldr	r3, [r7, #0]
 8114df6:	3304      	adds	r3, #4
 8114df8:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8114dfa:	4b71      	ldr	r3, [pc, #452]	@ (8114fc0 <icmp_input+0x224>)
 8114dfc:	695b      	ldr	r3, [r3, #20]
 8114dfe:	4a70      	ldr	r2, [pc, #448]	@ (8114fc0 <icmp_input+0x224>)
 8114e00:	6812      	ldr	r2, [r2, #0]
 8114e02:	4611      	mov	r1, r2
 8114e04:	4618      	mov	r0, r3
 8114e06:	f000 fce9 	bl	81157dc <ip4_addr_isbroadcast_u32>
 8114e0a:	4603      	mov	r3, r0
 8114e0c:	2b00      	cmp	r3, #0
 8114e0e:	d002      	beq.n	8114e16 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8114e10:	683b      	ldr	r3, [r7, #0]
 8114e12:	3304      	adds	r3, #4
 8114e14:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8114e16:	687b      	ldr	r3, [r7, #4]
 8114e18:	891b      	ldrh	r3, [r3, #8]
 8114e1a:	2b07      	cmp	r3, #7
 8114e1c:	f240 80c0 	bls.w	8114fa0 <icmp_input+0x204>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8114e20:	6878      	ldr	r0, [r7, #4]
 8114e22:	f000 f9dc 	bl	81151de <inet_chksum_pbuf>
 8114e26:	4603      	mov	r3, r0
 8114e28:	2b00      	cmp	r3, #0
 8114e2a:	d003      	beq.n	8114e34 <icmp_input+0x98>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8114e2c:	6878      	ldr	r0, [r7, #4]
 8114e2e:	f004 fd9d 	bl	811996c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8114e32:	e0c1      	b.n	8114fb8 <icmp_input+0x21c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8114e34:	8bfb      	ldrh	r3, [r7, #30]
 8114e36:	330e      	adds	r3, #14
 8114e38:	4619      	mov	r1, r3
 8114e3a:	6878      	ldr	r0, [r7, #4]
 8114e3c:	f004 fd00 	bl	8119840 <pbuf_add_header>
 8114e40:	4603      	mov	r3, r0
 8114e42:	2b00      	cmp	r3, #0
 8114e44:	d04b      	beq.n	8114ede <icmp_input+0x142>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8114e46:	687b      	ldr	r3, [r7, #4]
 8114e48:	891a      	ldrh	r2, [r3, #8]
 8114e4a:	8bfb      	ldrh	r3, [r7, #30]
 8114e4c:	4413      	add	r3, r2
 8114e4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8114e50:	687b      	ldr	r3, [r7, #4]
 8114e52:	891b      	ldrh	r3, [r3, #8]
 8114e54:	8b7a      	ldrh	r2, [r7, #26]
 8114e56:	429a      	cmp	r2, r3
 8114e58:	f0c0 80a7 	bcc.w	8114faa <icmp_input+0x20e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8114e5c:	8b7b      	ldrh	r3, [r7, #26]
 8114e5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8114e62:	4619      	mov	r1, r3
 8114e64:	200e      	movs	r0, #14
 8114e66:	f004 fa9f 	bl	81193a8 <pbuf_alloc>
 8114e6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8114e6c:	697b      	ldr	r3, [r7, #20]
 8114e6e:	2b00      	cmp	r3, #0
 8114e70:	f000 809d 	beq.w	8114fae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8114e74:	697b      	ldr	r3, [r7, #20]
 8114e76:	895b      	ldrh	r3, [r3, #10]
 8114e78:	461a      	mov	r2, r3
 8114e7a:	8bfb      	ldrh	r3, [r7, #30]
 8114e7c:	3308      	adds	r3, #8
 8114e7e:	429a      	cmp	r2, r3
 8114e80:	d203      	bcs.n	8114e8a <icmp_input+0xee>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8114e82:	6978      	ldr	r0, [r7, #20]
 8114e84:	f004 fd72 	bl	811996c <pbuf_free>
          goto icmperr;
 8114e88:	e092      	b.n	8114fb0 <icmp_input+0x214>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8114e8a:	697b      	ldr	r3, [r7, #20]
 8114e8c:	685b      	ldr	r3, [r3, #4]
 8114e8e:	8bfa      	ldrh	r2, [r7, #30]
 8114e90:	6a39      	ldr	r1, [r7, #32]
 8114e92:	4618      	mov	r0, r3
 8114e94:	f00d fa17 	bl	81222c6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8114e98:	8bfb      	ldrh	r3, [r7, #30]
 8114e9a:	4619      	mov	r1, r3
 8114e9c:	6978      	ldr	r0, [r7, #20]
 8114e9e:	f004 fcdf 	bl	8119860 <pbuf_remove_header>
 8114ea2:	4603      	mov	r3, r0
 8114ea4:	2b00      	cmp	r3, #0
 8114ea6:	d009      	beq.n	8114ebc <icmp_input+0x120>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8114ea8:	4b47      	ldr	r3, [pc, #284]	@ (8114fc8 <icmp_input+0x22c>)
 8114eaa:	22b6      	movs	r2, #182	@ 0xb6
 8114eac:	4947      	ldr	r1, [pc, #284]	@ (8114fcc <icmp_input+0x230>)
 8114eae:	4848      	ldr	r0, [pc, #288]	@ (8114fd0 <icmp_input+0x234>)
 8114eb0:	f00c ff68 	bl	8121d84 <iprintf>
          pbuf_free(r);
 8114eb4:	6978      	ldr	r0, [r7, #20]
 8114eb6:	f004 fd59 	bl	811996c <pbuf_free>
          goto icmperr;
 8114eba:	e079      	b.n	8114fb0 <icmp_input+0x214>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8114ebc:	6879      	ldr	r1, [r7, #4]
 8114ebe:	6978      	ldr	r0, [r7, #20]
 8114ec0:	f004 fe88 	bl	8119bd4 <pbuf_copy>
 8114ec4:	4603      	mov	r3, r0
 8114ec6:	2b00      	cmp	r3, #0
 8114ec8:	d003      	beq.n	8114ed2 <icmp_input+0x136>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8114eca:	6978      	ldr	r0, [r7, #20]
 8114ecc:	f004 fd4e 	bl	811996c <pbuf_free>
          goto icmperr;
 8114ed0:	e06e      	b.n	8114fb0 <icmp_input+0x214>
        }
        /* free the original p */
        pbuf_free(p);
 8114ed2:	6878      	ldr	r0, [r7, #4]
 8114ed4:	f004 fd4a 	bl	811996c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8114ed8:	697b      	ldr	r3, [r7, #20]
 8114eda:	607b      	str	r3, [r7, #4]
 8114edc:	e00f      	b.n	8114efe <icmp_input+0x162>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8114ede:	8bfb      	ldrh	r3, [r7, #30]
 8114ee0:	330e      	adds	r3, #14
 8114ee2:	4619      	mov	r1, r3
 8114ee4:	6878      	ldr	r0, [r7, #4]
 8114ee6:	f004 fcbb 	bl	8119860 <pbuf_remove_header>
 8114eea:	4603      	mov	r3, r0
 8114eec:	2b00      	cmp	r3, #0
 8114eee:	d006      	beq.n	8114efe <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8114ef0:	4b35      	ldr	r3, [pc, #212]	@ (8114fc8 <icmp_input+0x22c>)
 8114ef2:	22c7      	movs	r2, #199	@ 0xc7
 8114ef4:	4937      	ldr	r1, [pc, #220]	@ (8114fd4 <icmp_input+0x238>)
 8114ef6:	4836      	ldr	r0, [pc, #216]	@ (8114fd0 <icmp_input+0x234>)
 8114ef8:	f00c ff44 	bl	8121d84 <iprintf>
          goto icmperr;
 8114efc:	e058      	b.n	8114fb0 <icmp_input+0x214>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8114efe:	687b      	ldr	r3, [r7, #4]
 8114f00:	685b      	ldr	r3, [r3, #4]
 8114f02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8114f04:	8bfb      	ldrh	r3, [r7, #30]
 8114f06:	4619      	mov	r1, r3
 8114f08:	6878      	ldr	r0, [r7, #4]
 8114f0a:	f004 fc99 	bl	8119840 <pbuf_add_header>
 8114f0e:	4603      	mov	r3, r0
 8114f10:	2b00      	cmp	r3, #0
 8114f12:	d13c      	bne.n	8114f8e <icmp_input+0x1f2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8114f14:	687b      	ldr	r3, [r7, #4]
 8114f16:	685b      	ldr	r3, [r3, #4]
 8114f18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8114f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114f1c:	681a      	ldr	r2, [r3, #0]
 8114f1e:	68fb      	ldr	r3, [r7, #12]
 8114f20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8114f22:	4b27      	ldr	r3, [pc, #156]	@ (8114fc0 <icmp_input+0x224>)
 8114f24:	691a      	ldr	r2, [r3, #16]
 8114f26:	68fb      	ldr	r3, [r7, #12]
 8114f28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8114f2a:	693b      	ldr	r3, [r7, #16]
 8114f2c:	2200      	movs	r2, #0
 8114f2e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8114f30:	693b      	ldr	r3, [r7, #16]
 8114f32:	885b      	ldrh	r3, [r3, #2]
 8114f34:	b29b      	uxth	r3, r3
 8114f36:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8114f3a:	4293      	cmp	r3, r2
 8114f3c:	d907      	bls.n	8114f4e <icmp_input+0x1b2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8114f3e:	693b      	ldr	r3, [r7, #16]
 8114f40:	885b      	ldrh	r3, [r3, #2]
 8114f42:	b29b      	uxth	r3, r3
 8114f44:	3309      	adds	r3, #9
 8114f46:	b29a      	uxth	r2, r3
 8114f48:	693b      	ldr	r3, [r7, #16]
 8114f4a:	805a      	strh	r2, [r3, #2]
 8114f4c:	e006      	b.n	8114f5c <icmp_input+0x1c0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8114f4e:	693b      	ldr	r3, [r7, #16]
 8114f50:	885b      	ldrh	r3, [r3, #2]
 8114f52:	b29b      	uxth	r3, r3
 8114f54:	3308      	adds	r3, #8
 8114f56:	b29a      	uxth	r2, r3
 8114f58:	693b      	ldr	r3, [r7, #16]
 8114f5a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8114f5c:	68fb      	ldr	r3, [r7, #12]
 8114f5e:	22ff      	movs	r2, #255	@ 0xff
 8114f60:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8114f62:	68fb      	ldr	r3, [r7, #12]
 8114f64:	2200      	movs	r2, #0
 8114f66:	729a      	strb	r2, [r3, #10]
 8114f68:	2200      	movs	r2, #0
 8114f6a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8114f6c:	683b      	ldr	r3, [r7, #0]
 8114f6e:	9302      	str	r3, [sp, #8]
 8114f70:	2301      	movs	r3, #1
 8114f72:	9301      	str	r3, [sp, #4]
 8114f74:	2300      	movs	r3, #0
 8114f76:	9300      	str	r3, [sp, #0]
 8114f78:	23ff      	movs	r3, #255	@ 0xff
 8114f7a:	2200      	movs	r2, #0
 8114f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8114f7e:	6878      	ldr	r0, [r7, #4]
 8114f80:	f000 fb52 	bl	8115628 <ip4_output_if>
 8114f84:	4603      	mov	r3, r0
 8114f86:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8114f88:	e001      	b.n	8114f8e <icmp_input+0x1f2>
      break;
 8114f8a:	bf00      	nop
 8114f8c:	e000      	b.n	8114f90 <icmp_input+0x1f4>
      break;
 8114f8e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8114f90:	6878      	ldr	r0, [r7, #4]
 8114f92:	f004 fceb 	bl	811996c <pbuf_free>
  return;
 8114f96:	e00f      	b.n	8114fb8 <icmp_input+0x21c>
    goto lenerr;
 8114f98:	bf00      	nop
 8114f9a:	e002      	b.n	8114fa2 <icmp_input+0x206>
    goto lenerr;
 8114f9c:	bf00      	nop
 8114f9e:	e000      	b.n	8114fa2 <icmp_input+0x206>
        goto lenerr;
 8114fa0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8114fa2:	6878      	ldr	r0, [r7, #4]
 8114fa4:	f004 fce2 	bl	811996c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8114fa8:	e006      	b.n	8114fb8 <icmp_input+0x21c>
          goto icmperr;
 8114faa:	bf00      	nop
 8114fac:	e000      	b.n	8114fb0 <icmp_input+0x214>
          goto icmperr;
 8114fae:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8114fb0:	6878      	ldr	r0, [r7, #4]
 8114fb2:	f004 fcdb 	bl	811996c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8114fb6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8114fb8:	3728      	adds	r7, #40	@ 0x28
 8114fba:	46bd      	mov	sp, r7
 8114fbc:	bd80      	pop	{r7, pc}
 8114fbe:	bf00      	nop
 8114fc0:	2400a164 	.word	0x2400a164
 8114fc4:	2400a178 	.word	0x2400a178
 8114fc8:	081254b0 	.word	0x081254b0
 8114fcc:	08125520 	.word	0x08125520
 8114fd0:	08125558 	.word	0x08125558
 8114fd4:	08125580 	.word	0x08125580

08114fd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8114fd8:	b580      	push	{r7, lr}
 8114fda:	b082      	sub	sp, #8
 8114fdc:	af00      	add	r7, sp, #0
 8114fde:	6078      	str	r0, [r7, #4]
 8114fe0:	460b      	mov	r3, r1
 8114fe2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8114fe4:	78fb      	ldrb	r3, [r7, #3]
 8114fe6:	461a      	mov	r2, r3
 8114fe8:	2103      	movs	r1, #3
 8114fea:	6878      	ldr	r0, [r7, #4]
 8114fec:	f000 f814 	bl	8115018 <icmp_send_response>
}
 8114ff0:	bf00      	nop
 8114ff2:	3708      	adds	r7, #8
 8114ff4:	46bd      	mov	sp, r7
 8114ff6:	bd80      	pop	{r7, pc}

08114ff8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8114ff8:	b580      	push	{r7, lr}
 8114ffa:	b082      	sub	sp, #8
 8114ffc:	af00      	add	r7, sp, #0
 8114ffe:	6078      	str	r0, [r7, #4]
 8115000:	460b      	mov	r3, r1
 8115002:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8115004:	78fb      	ldrb	r3, [r7, #3]
 8115006:	461a      	mov	r2, r3
 8115008:	210b      	movs	r1, #11
 811500a:	6878      	ldr	r0, [r7, #4]
 811500c:	f000 f804 	bl	8115018 <icmp_send_response>
}
 8115010:	bf00      	nop
 8115012:	3708      	adds	r7, #8
 8115014:	46bd      	mov	sp, r7
 8115016:	bd80      	pop	{r7, pc}

08115018 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8115018:	b580      	push	{r7, lr}
 811501a:	b08c      	sub	sp, #48	@ 0x30
 811501c:	af04      	add	r7, sp, #16
 811501e:	6078      	str	r0, [r7, #4]
 8115020:	460b      	mov	r3, r1
 8115022:	70fb      	strb	r3, [r7, #3]
 8115024:	4613      	mov	r3, r2
 8115026:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8115028:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811502c:	2124      	movs	r1, #36	@ 0x24
 811502e:	2022      	movs	r0, #34	@ 0x22
 8115030:	f004 f9ba 	bl	81193a8 <pbuf_alloc>
 8115034:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8115036:	69fb      	ldr	r3, [r7, #28]
 8115038:	2b00      	cmp	r3, #0
 811503a:	d056      	beq.n	81150ea <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 811503c:	69fb      	ldr	r3, [r7, #28]
 811503e:	895b      	ldrh	r3, [r3, #10]
 8115040:	2b23      	cmp	r3, #35	@ 0x23
 8115042:	d806      	bhi.n	8115052 <icmp_send_response+0x3a>
 8115044:	4b2b      	ldr	r3, [pc, #172]	@ (81150f4 <icmp_send_response+0xdc>)
 8115046:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 811504a:	492b      	ldr	r1, [pc, #172]	@ (81150f8 <icmp_send_response+0xe0>)
 811504c:	482b      	ldr	r0, [pc, #172]	@ (81150fc <icmp_send_response+0xe4>)
 811504e:	f00c fe99 	bl	8121d84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8115052:	687b      	ldr	r3, [r7, #4]
 8115054:	685b      	ldr	r3, [r3, #4]
 8115056:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8115058:	69fb      	ldr	r3, [r7, #28]
 811505a:	685b      	ldr	r3, [r3, #4]
 811505c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 811505e:	697b      	ldr	r3, [r7, #20]
 8115060:	78fa      	ldrb	r2, [r7, #3]
 8115062:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8115064:	697b      	ldr	r3, [r7, #20]
 8115066:	78ba      	ldrb	r2, [r7, #2]
 8115068:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 811506a:	697b      	ldr	r3, [r7, #20]
 811506c:	2200      	movs	r2, #0
 811506e:	711a      	strb	r2, [r3, #4]
 8115070:	2200      	movs	r2, #0
 8115072:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8115074:	697b      	ldr	r3, [r7, #20]
 8115076:	2200      	movs	r2, #0
 8115078:	719a      	strb	r2, [r3, #6]
 811507a:	2200      	movs	r2, #0
 811507c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 811507e:	69fb      	ldr	r3, [r7, #28]
 8115080:	685b      	ldr	r3, [r3, #4]
 8115082:	f103 0008 	add.w	r0, r3, #8
 8115086:	687b      	ldr	r3, [r7, #4]
 8115088:	685b      	ldr	r3, [r3, #4]
 811508a:	221c      	movs	r2, #28
 811508c:	4619      	mov	r1, r3
 811508e:	f00d f91a 	bl	81222c6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8115092:	69bb      	ldr	r3, [r7, #24]
 8115094:	68db      	ldr	r3, [r3, #12]
 8115096:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8115098:	f107 030c 	add.w	r3, r7, #12
 811509c:	4618      	mov	r0, r3
 811509e:	f000 f903 	bl	81152a8 <ip4_route>
 81150a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 81150a4:	693b      	ldr	r3, [r7, #16]
 81150a6:	2b00      	cmp	r3, #0
 81150a8:	d01b      	beq.n	81150e2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 81150aa:	697b      	ldr	r3, [r7, #20]
 81150ac:	2200      	movs	r2, #0
 81150ae:	709a      	strb	r2, [r3, #2]
 81150b0:	2200      	movs	r2, #0
 81150b2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 81150b4:	69fb      	ldr	r3, [r7, #28]
 81150b6:	895b      	ldrh	r3, [r3, #10]
 81150b8:	4619      	mov	r1, r3
 81150ba:	6978      	ldr	r0, [r7, #20]
 81150bc:	f000 f87d 	bl	81151ba <inet_chksum>
 81150c0:	4603      	mov	r3, r0
 81150c2:	461a      	mov	r2, r3
 81150c4:	697b      	ldr	r3, [r7, #20]
 81150c6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 81150c8:	f107 020c 	add.w	r2, r7, #12
 81150cc:	693b      	ldr	r3, [r7, #16]
 81150ce:	9302      	str	r3, [sp, #8]
 81150d0:	2301      	movs	r3, #1
 81150d2:	9301      	str	r3, [sp, #4]
 81150d4:	2300      	movs	r3, #0
 81150d6:	9300      	str	r3, [sp, #0]
 81150d8:	23ff      	movs	r3, #255	@ 0xff
 81150da:	2100      	movs	r1, #0
 81150dc:	69f8      	ldr	r0, [r7, #28]
 81150de:	f000 faa3 	bl	8115628 <ip4_output_if>
  }
  pbuf_free(q);
 81150e2:	69f8      	ldr	r0, [r7, #28]
 81150e4:	f004 fc42 	bl	811996c <pbuf_free>
 81150e8:	e000      	b.n	81150ec <icmp_send_response+0xd4>
    return;
 81150ea:	bf00      	nop
}
 81150ec:	3720      	adds	r7, #32
 81150ee:	46bd      	mov	sp, r7
 81150f0:	bd80      	pop	{r7, pc}
 81150f2:	bf00      	nop
 81150f4:	081254b0 	.word	0x081254b0
 81150f8:	081255b4 	.word	0x081255b4
 81150fc:	08125558 	.word	0x08125558

08115100 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8115100:	b480      	push	{r7}
 8115102:	b089      	sub	sp, #36	@ 0x24
 8115104:	af00      	add	r7, sp, #0
 8115106:	6078      	str	r0, [r7, #4]
 8115108:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 811510a:	687b      	ldr	r3, [r7, #4]
 811510c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 811510e:	2300      	movs	r3, #0
 8115110:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8115112:	2300      	movs	r3, #0
 8115114:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8115116:	69fb      	ldr	r3, [r7, #28]
 8115118:	f003 0301 	and.w	r3, r3, #1
 811511c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 811511e:	693b      	ldr	r3, [r7, #16]
 8115120:	2b00      	cmp	r3, #0
 8115122:	d00d      	beq.n	8115140 <lwip_standard_chksum+0x40>
 8115124:	683b      	ldr	r3, [r7, #0]
 8115126:	2b00      	cmp	r3, #0
 8115128:	dd0a      	ble.n	8115140 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 811512a:	69fa      	ldr	r2, [r7, #28]
 811512c:	1c53      	adds	r3, r2, #1
 811512e:	61fb      	str	r3, [r7, #28]
 8115130:	f107 030e 	add.w	r3, r7, #14
 8115134:	3301      	adds	r3, #1
 8115136:	7812      	ldrb	r2, [r2, #0]
 8115138:	701a      	strb	r2, [r3, #0]
    len--;
 811513a:	683b      	ldr	r3, [r7, #0]
 811513c:	3b01      	subs	r3, #1
 811513e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8115140:	69fb      	ldr	r3, [r7, #28]
 8115142:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8115144:	e00a      	b.n	811515c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8115146:	69bb      	ldr	r3, [r7, #24]
 8115148:	1c9a      	adds	r2, r3, #2
 811514a:	61ba      	str	r2, [r7, #24]
 811514c:	881b      	ldrh	r3, [r3, #0]
 811514e:	461a      	mov	r2, r3
 8115150:	697b      	ldr	r3, [r7, #20]
 8115152:	4413      	add	r3, r2
 8115154:	617b      	str	r3, [r7, #20]
    len -= 2;
 8115156:	683b      	ldr	r3, [r7, #0]
 8115158:	3b02      	subs	r3, #2
 811515a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 811515c:	683b      	ldr	r3, [r7, #0]
 811515e:	2b01      	cmp	r3, #1
 8115160:	dcf1      	bgt.n	8115146 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8115162:	683b      	ldr	r3, [r7, #0]
 8115164:	2b00      	cmp	r3, #0
 8115166:	dd04      	ble.n	8115172 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8115168:	f107 030e 	add.w	r3, r7, #14
 811516c:	69ba      	ldr	r2, [r7, #24]
 811516e:	7812      	ldrb	r2, [r2, #0]
 8115170:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8115172:	89fb      	ldrh	r3, [r7, #14]
 8115174:	461a      	mov	r2, r3
 8115176:	697b      	ldr	r3, [r7, #20]
 8115178:	4413      	add	r3, r2
 811517a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 811517c:	697b      	ldr	r3, [r7, #20]
 811517e:	0c1a      	lsrs	r2, r3, #16
 8115180:	697b      	ldr	r3, [r7, #20]
 8115182:	b29b      	uxth	r3, r3
 8115184:	4413      	add	r3, r2
 8115186:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8115188:	697b      	ldr	r3, [r7, #20]
 811518a:	0c1a      	lsrs	r2, r3, #16
 811518c:	697b      	ldr	r3, [r7, #20]
 811518e:	b29b      	uxth	r3, r3
 8115190:	4413      	add	r3, r2
 8115192:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8115194:	693b      	ldr	r3, [r7, #16]
 8115196:	2b00      	cmp	r3, #0
 8115198:	d007      	beq.n	81151aa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 811519a:	697b      	ldr	r3, [r7, #20]
 811519c:	021b      	lsls	r3, r3, #8
 811519e:	b29a      	uxth	r2, r3
 81151a0:	697b      	ldr	r3, [r7, #20]
 81151a2:	0a1b      	lsrs	r3, r3, #8
 81151a4:	b2db      	uxtb	r3, r3
 81151a6:	4313      	orrs	r3, r2
 81151a8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 81151aa:	697b      	ldr	r3, [r7, #20]
 81151ac:	b29b      	uxth	r3, r3
}
 81151ae:	4618      	mov	r0, r3
 81151b0:	3724      	adds	r7, #36	@ 0x24
 81151b2:	46bd      	mov	sp, r7
 81151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81151b8:	4770      	bx	lr

081151ba <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 81151ba:	b580      	push	{r7, lr}
 81151bc:	b082      	sub	sp, #8
 81151be:	af00      	add	r7, sp, #0
 81151c0:	6078      	str	r0, [r7, #4]
 81151c2:	460b      	mov	r3, r1
 81151c4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 81151c6:	887b      	ldrh	r3, [r7, #2]
 81151c8:	4619      	mov	r1, r3
 81151ca:	6878      	ldr	r0, [r7, #4]
 81151cc:	f7ff ff98 	bl	8115100 <lwip_standard_chksum>
 81151d0:	4603      	mov	r3, r0
 81151d2:	43db      	mvns	r3, r3
 81151d4:	b29b      	uxth	r3, r3
}
 81151d6:	4618      	mov	r0, r3
 81151d8:	3708      	adds	r7, #8
 81151da:	46bd      	mov	sp, r7
 81151dc:	bd80      	pop	{r7, pc}

081151de <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 81151de:	b580      	push	{r7, lr}
 81151e0:	b086      	sub	sp, #24
 81151e2:	af00      	add	r7, sp, #0
 81151e4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 81151e6:	2300      	movs	r3, #0
 81151e8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 81151ea:	2300      	movs	r3, #0
 81151ec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 81151ee:	687b      	ldr	r3, [r7, #4]
 81151f0:	613b      	str	r3, [r7, #16]
 81151f2:	e02b      	b.n	811524c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 81151f4:	693b      	ldr	r3, [r7, #16]
 81151f6:	685a      	ldr	r2, [r3, #4]
 81151f8:	693b      	ldr	r3, [r7, #16]
 81151fa:	895b      	ldrh	r3, [r3, #10]
 81151fc:	4619      	mov	r1, r3
 81151fe:	4610      	mov	r0, r2
 8115200:	f7ff ff7e 	bl	8115100 <lwip_standard_chksum>
 8115204:	4603      	mov	r3, r0
 8115206:	461a      	mov	r2, r3
 8115208:	697b      	ldr	r3, [r7, #20]
 811520a:	4413      	add	r3, r2
 811520c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 811520e:	697b      	ldr	r3, [r7, #20]
 8115210:	0c1a      	lsrs	r2, r3, #16
 8115212:	697b      	ldr	r3, [r7, #20]
 8115214:	b29b      	uxth	r3, r3
 8115216:	4413      	add	r3, r2
 8115218:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 811521a:	693b      	ldr	r3, [r7, #16]
 811521c:	895b      	ldrh	r3, [r3, #10]
 811521e:	f003 0301 	and.w	r3, r3, #1
 8115222:	b29b      	uxth	r3, r3
 8115224:	2b00      	cmp	r3, #0
 8115226:	d00e      	beq.n	8115246 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8115228:	68fb      	ldr	r3, [r7, #12]
 811522a:	2b00      	cmp	r3, #0
 811522c:	bf0c      	ite	eq
 811522e:	2301      	moveq	r3, #1
 8115230:	2300      	movne	r3, #0
 8115232:	b2db      	uxtb	r3, r3
 8115234:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8115236:	697b      	ldr	r3, [r7, #20]
 8115238:	021b      	lsls	r3, r3, #8
 811523a:	b29a      	uxth	r2, r3
 811523c:	697b      	ldr	r3, [r7, #20]
 811523e:	0a1b      	lsrs	r3, r3, #8
 8115240:	b2db      	uxtb	r3, r3
 8115242:	4313      	orrs	r3, r2
 8115244:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8115246:	693b      	ldr	r3, [r7, #16]
 8115248:	681b      	ldr	r3, [r3, #0]
 811524a:	613b      	str	r3, [r7, #16]
 811524c:	693b      	ldr	r3, [r7, #16]
 811524e:	2b00      	cmp	r3, #0
 8115250:	d1d0      	bne.n	81151f4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8115252:	68fb      	ldr	r3, [r7, #12]
 8115254:	2b00      	cmp	r3, #0
 8115256:	d007      	beq.n	8115268 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8115258:	697b      	ldr	r3, [r7, #20]
 811525a:	021b      	lsls	r3, r3, #8
 811525c:	b29a      	uxth	r2, r3
 811525e:	697b      	ldr	r3, [r7, #20]
 8115260:	0a1b      	lsrs	r3, r3, #8
 8115262:	b2db      	uxtb	r3, r3
 8115264:	4313      	orrs	r3, r2
 8115266:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8115268:	697b      	ldr	r3, [r7, #20]
 811526a:	b29b      	uxth	r3, r3
 811526c:	43db      	mvns	r3, r3
 811526e:	b29b      	uxth	r3, r3
}
 8115270:	4618      	mov	r0, r3
 8115272:	3718      	adds	r7, #24
 8115274:	46bd      	mov	sp, r7
 8115276:	bd80      	pop	{r7, pc}

08115278 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8115278:	b580      	push	{r7, lr}
 811527a:	b082      	sub	sp, #8
 811527c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 811527e:	2300      	movs	r3, #0
 8115280:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8115282:	f004 fef7 	bl	811a074 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8115286:	f001 f9ed 	bl	8116664 <mem_init>
  memp_init();
 811528a:	f001 fd51 	bl	8116d30 <memp_init>
  pbuf_init();
  netif_init();
 811528e:	f003 fce9 	bl	8118c64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8115292:	f00b fb4f 	bl	8120934 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8115296:	f004 ff69 	bl	811a16c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 811529a:	f00b fa4f 	bl	812073c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 811529e:	bf00      	nop
 81152a0:	3708      	adds	r7, #8
 81152a2:	46bd      	mov	sp, r7
 81152a4:	bd80      	pop	{r7, pc}
	...

081152a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 81152a8:	b580      	push	{r7, lr}
 81152aa:	b084      	sub	sp, #16
 81152ac:	af00      	add	r7, sp, #0
 81152ae:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 81152b0:	f7fa fd86 	bl	810fdc0 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 81152b4:	4b32      	ldr	r3, [pc, #200]	@ (8115380 <ip4_route+0xd8>)
 81152b6:	681b      	ldr	r3, [r3, #0]
 81152b8:	60fb      	str	r3, [r7, #12]
 81152ba:	e036      	b.n	811532a <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81152bc:	68fb      	ldr	r3, [r7, #12]
 81152be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81152c2:	f003 0301 	and.w	r3, r3, #1
 81152c6:	b2db      	uxtb	r3, r3
 81152c8:	2b00      	cmp	r3, #0
 81152ca:	d02b      	beq.n	8115324 <ip4_route+0x7c>
 81152cc:	68fb      	ldr	r3, [r7, #12]
 81152ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81152d2:	089b      	lsrs	r3, r3, #2
 81152d4:	f003 0301 	and.w	r3, r3, #1
 81152d8:	b2db      	uxtb	r3, r3
 81152da:	2b00      	cmp	r3, #0
 81152dc:	d022      	beq.n	8115324 <ip4_route+0x7c>
 81152de:	68fb      	ldr	r3, [r7, #12]
 81152e0:	3304      	adds	r3, #4
 81152e2:	681b      	ldr	r3, [r3, #0]
 81152e4:	2b00      	cmp	r3, #0
 81152e6:	d01d      	beq.n	8115324 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 81152e8:	687b      	ldr	r3, [r7, #4]
 81152ea:	681a      	ldr	r2, [r3, #0]
 81152ec:	68fb      	ldr	r3, [r7, #12]
 81152ee:	3304      	adds	r3, #4
 81152f0:	681b      	ldr	r3, [r3, #0]
 81152f2:	405a      	eors	r2, r3
 81152f4:	68fb      	ldr	r3, [r7, #12]
 81152f6:	3308      	adds	r3, #8
 81152f8:	681b      	ldr	r3, [r3, #0]
 81152fa:	4013      	ands	r3, r2
 81152fc:	2b00      	cmp	r3, #0
 81152fe:	d101      	bne.n	8115304 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 8115300:	68fb      	ldr	r3, [r7, #12]
 8115302:	e038      	b.n	8115376 <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8115304:	68fb      	ldr	r3, [r7, #12]
 8115306:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811530a:	f003 0302 	and.w	r3, r3, #2
 811530e:	2b00      	cmp	r3, #0
 8115310:	d108      	bne.n	8115324 <ip4_route+0x7c>
 8115312:	687b      	ldr	r3, [r7, #4]
 8115314:	681a      	ldr	r2, [r3, #0]
 8115316:	68fb      	ldr	r3, [r7, #12]
 8115318:	330c      	adds	r3, #12
 811531a:	681b      	ldr	r3, [r3, #0]
 811531c:	429a      	cmp	r2, r3
 811531e:	d101      	bne.n	8115324 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8115320:	68fb      	ldr	r3, [r7, #12]
 8115322:	e028      	b.n	8115376 <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 8115324:	68fb      	ldr	r3, [r7, #12]
 8115326:	681b      	ldr	r3, [r3, #0]
 8115328:	60fb      	str	r3, [r7, #12]
 811532a:	68fb      	ldr	r3, [r7, #12]
 811532c:	2b00      	cmp	r3, #0
 811532e:	d1c5      	bne.n	81152bc <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8115330:	4b14      	ldr	r3, [pc, #80]	@ (8115384 <ip4_route+0xdc>)
 8115332:	681b      	ldr	r3, [r3, #0]
 8115334:	2b00      	cmp	r3, #0
 8115336:	d01a      	beq.n	811536e <ip4_route+0xc6>
 8115338:	4b12      	ldr	r3, [pc, #72]	@ (8115384 <ip4_route+0xdc>)
 811533a:	681b      	ldr	r3, [r3, #0]
 811533c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115340:	f003 0301 	and.w	r3, r3, #1
 8115344:	2b00      	cmp	r3, #0
 8115346:	d012      	beq.n	811536e <ip4_route+0xc6>
 8115348:	4b0e      	ldr	r3, [pc, #56]	@ (8115384 <ip4_route+0xdc>)
 811534a:	681b      	ldr	r3, [r3, #0]
 811534c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115350:	f003 0304 	and.w	r3, r3, #4
 8115354:	2b00      	cmp	r3, #0
 8115356:	d00a      	beq.n	811536e <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8115358:	4b0a      	ldr	r3, [pc, #40]	@ (8115384 <ip4_route+0xdc>)
 811535a:	681b      	ldr	r3, [r3, #0]
 811535c:	3304      	adds	r3, #4
 811535e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8115360:	2b00      	cmp	r3, #0
 8115362:	d004      	beq.n	811536e <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8115364:	687b      	ldr	r3, [r7, #4]
 8115366:	681b      	ldr	r3, [r3, #0]
 8115368:	b2db      	uxtb	r3, r3
 811536a:	2b7f      	cmp	r3, #127	@ 0x7f
 811536c:	d101      	bne.n	8115372 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 811536e:	2300      	movs	r3, #0
 8115370:	e001      	b.n	8115376 <ip4_route+0xce>
  }

  return netif_default;
 8115372:	4b04      	ldr	r3, [pc, #16]	@ (8115384 <ip4_route+0xdc>)
 8115374:	681b      	ldr	r3, [r3, #0]
}
 8115376:	4618      	mov	r0, r3
 8115378:	3710      	adds	r7, #16
 811537a:	46bd      	mov	sp, r7
 811537c:	bd80      	pop	{r7, pc}
 811537e:	bf00      	nop
 8115380:	24012690 	.word	0x24012690
 8115384:	24012694 	.word	0x24012694

08115388 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8115388:	b580      	push	{r7, lr}
 811538a:	b082      	sub	sp, #8
 811538c:	af00      	add	r7, sp, #0
 811538e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8115390:	687b      	ldr	r3, [r7, #4]
 8115392:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115396:	f003 0301 	and.w	r3, r3, #1
 811539a:	b2db      	uxtb	r3, r3
 811539c:	2b00      	cmp	r3, #0
 811539e:	d016      	beq.n	81153ce <ip4_input_accept+0x46>
 81153a0:	687b      	ldr	r3, [r7, #4]
 81153a2:	3304      	adds	r3, #4
 81153a4:	681b      	ldr	r3, [r3, #0]
 81153a6:	2b00      	cmp	r3, #0
 81153a8:	d011      	beq.n	81153ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 81153aa:	4b0b      	ldr	r3, [pc, #44]	@ (81153d8 <ip4_input_accept+0x50>)
 81153ac:	695a      	ldr	r2, [r3, #20]
 81153ae:	687b      	ldr	r3, [r7, #4]
 81153b0:	3304      	adds	r3, #4
 81153b2:	681b      	ldr	r3, [r3, #0]
 81153b4:	429a      	cmp	r2, r3
 81153b6:	d008      	beq.n	81153ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 81153b8:	4b07      	ldr	r3, [pc, #28]	@ (81153d8 <ip4_input_accept+0x50>)
 81153ba:	695b      	ldr	r3, [r3, #20]
 81153bc:	6879      	ldr	r1, [r7, #4]
 81153be:	4618      	mov	r0, r3
 81153c0:	f000 fa0c 	bl	81157dc <ip4_addr_isbroadcast_u32>
 81153c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 81153c6:	2b00      	cmp	r3, #0
 81153c8:	d001      	beq.n	81153ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 81153ca:	2301      	movs	r3, #1
 81153cc:	e000      	b.n	81153d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 81153ce:	2300      	movs	r3, #0
}
 81153d0:	4618      	mov	r0, r3
 81153d2:	3708      	adds	r7, #8
 81153d4:	46bd      	mov	sp, r7
 81153d6:	bd80      	pop	{r7, pc}
 81153d8:	2400a164 	.word	0x2400a164

081153dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 81153dc:	b580      	push	{r7, lr}
 81153de:	b086      	sub	sp, #24
 81153e0:	af00      	add	r7, sp, #0
 81153e2:	6078      	str	r0, [r7, #4]
 81153e4:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 81153e6:	f7fa fceb 	bl	810fdc0 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 81153ea:	687b      	ldr	r3, [r7, #4]
 81153ec:	685b      	ldr	r3, [r3, #4]
 81153ee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 81153f0:	697b      	ldr	r3, [r7, #20]
 81153f2:	781b      	ldrb	r3, [r3, #0]
 81153f4:	091b      	lsrs	r3, r3, #4
 81153f6:	b2db      	uxtb	r3, r3
 81153f8:	2b04      	cmp	r3, #4
 81153fa:	d004      	beq.n	8115406 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 81153fc:	6878      	ldr	r0, [r7, #4]
 81153fe:	f004 fab5 	bl	811996c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8115402:	2300      	movs	r3, #0
 8115404:	e107      	b.n	8115616 <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8115406:	697b      	ldr	r3, [r7, #20]
 8115408:	781b      	ldrb	r3, [r3, #0]
 811540a:	f003 030f 	and.w	r3, r3, #15
 811540e:	b2db      	uxtb	r3, r3
 8115410:	009b      	lsls	r3, r3, #2
 8115412:	b2db      	uxtb	r3, r3
 8115414:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8115416:	697b      	ldr	r3, [r7, #20]
 8115418:	885b      	ldrh	r3, [r3, #2]
 811541a:	b29b      	uxth	r3, r3
 811541c:	4618      	mov	r0, r3
 811541e:	f7fe fc65 	bl	8113cec <lwip_htons>
 8115422:	4603      	mov	r3, r0
 8115424:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8115426:	687b      	ldr	r3, [r7, #4]
 8115428:	891b      	ldrh	r3, [r3, #8]
 811542a:	89ba      	ldrh	r2, [r7, #12]
 811542c:	429a      	cmp	r2, r3
 811542e:	d204      	bcs.n	811543a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8115430:	89bb      	ldrh	r3, [r7, #12]
 8115432:	4619      	mov	r1, r3
 8115434:	6878      	ldr	r0, [r7, #4]
 8115436:	f004 f915 	bl	8119664 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 811543a:	687b      	ldr	r3, [r7, #4]
 811543c:	895b      	ldrh	r3, [r3, #10]
 811543e:	89fa      	ldrh	r2, [r7, #14]
 8115440:	429a      	cmp	r2, r3
 8115442:	d807      	bhi.n	8115454 <ip4_input+0x78>
 8115444:	687b      	ldr	r3, [r7, #4]
 8115446:	891b      	ldrh	r3, [r3, #8]
 8115448:	89ba      	ldrh	r2, [r7, #12]
 811544a:	429a      	cmp	r2, r3
 811544c:	d802      	bhi.n	8115454 <ip4_input+0x78>
 811544e:	89fb      	ldrh	r3, [r7, #14]
 8115450:	2b13      	cmp	r3, #19
 8115452:	d804      	bhi.n	811545e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8115454:	6878      	ldr	r0, [r7, #4]
 8115456:	f004 fa89 	bl	811996c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 811545a:	2300      	movs	r3, #0
 811545c:	e0db      	b.n	8115616 <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 811545e:	697b      	ldr	r3, [r7, #20]
 8115460:	691b      	ldr	r3, [r3, #16]
 8115462:	4a6f      	ldr	r2, [pc, #444]	@ (8115620 <ip4_input+0x244>)
 8115464:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8115466:	697b      	ldr	r3, [r7, #20]
 8115468:	68db      	ldr	r3, [r3, #12]
 811546a:	4a6d      	ldr	r2, [pc, #436]	@ (8115620 <ip4_input+0x244>)
 811546c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811546e:	4b6c      	ldr	r3, [pc, #432]	@ (8115620 <ip4_input+0x244>)
 8115470:	695b      	ldr	r3, [r3, #20]
 8115472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8115476:	2be0      	cmp	r3, #224	@ 0xe0
 8115478:	d112      	bne.n	81154a0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 811547a:	683b      	ldr	r3, [r7, #0]
 811547c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115480:	f003 0301 	and.w	r3, r3, #1
 8115484:	b2db      	uxtb	r3, r3
 8115486:	2b00      	cmp	r3, #0
 8115488:	d007      	beq.n	811549a <ip4_input+0xbe>
 811548a:	683b      	ldr	r3, [r7, #0]
 811548c:	3304      	adds	r3, #4
 811548e:	681b      	ldr	r3, [r3, #0]
 8115490:	2b00      	cmp	r3, #0
 8115492:	d002      	beq.n	811549a <ip4_input+0xbe>
      netif = inp;
 8115494:	683b      	ldr	r3, [r7, #0]
 8115496:	613b      	str	r3, [r7, #16]
 8115498:	e02a      	b.n	81154f0 <ip4_input+0x114>
    } else {
      netif = NULL;
 811549a:	2300      	movs	r3, #0
 811549c:	613b      	str	r3, [r7, #16]
 811549e:	e027      	b.n	81154f0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 81154a0:	6838      	ldr	r0, [r7, #0]
 81154a2:	f7ff ff71 	bl	8115388 <ip4_input_accept>
 81154a6:	4603      	mov	r3, r0
 81154a8:	2b00      	cmp	r3, #0
 81154aa:	d002      	beq.n	81154b2 <ip4_input+0xd6>
      netif = inp;
 81154ac:	683b      	ldr	r3, [r7, #0]
 81154ae:	613b      	str	r3, [r7, #16]
 81154b0:	e01e      	b.n	81154f0 <ip4_input+0x114>
    } else {
      netif = NULL;
 81154b2:	2300      	movs	r3, #0
 81154b4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 81154b6:	4b5a      	ldr	r3, [pc, #360]	@ (8115620 <ip4_input+0x244>)
 81154b8:	695b      	ldr	r3, [r3, #20]
 81154ba:	b2db      	uxtb	r3, r3
 81154bc:	2b7f      	cmp	r3, #127	@ 0x7f
 81154be:	d017      	beq.n	81154f0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 81154c0:	4b58      	ldr	r3, [pc, #352]	@ (8115624 <ip4_input+0x248>)
 81154c2:	681b      	ldr	r3, [r3, #0]
 81154c4:	613b      	str	r3, [r7, #16]
 81154c6:	e00e      	b.n	81154e6 <ip4_input+0x10a>
          if (netif == inp) {
 81154c8:	693a      	ldr	r2, [r7, #16]
 81154ca:	683b      	ldr	r3, [r7, #0]
 81154cc:	429a      	cmp	r2, r3
 81154ce:	d006      	beq.n	81154de <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 81154d0:	6938      	ldr	r0, [r7, #16]
 81154d2:	f7ff ff59 	bl	8115388 <ip4_input_accept>
 81154d6:	4603      	mov	r3, r0
 81154d8:	2b00      	cmp	r3, #0
 81154da:	d108      	bne.n	81154ee <ip4_input+0x112>
 81154dc:	e000      	b.n	81154e0 <ip4_input+0x104>
            continue;
 81154de:	bf00      	nop
        NETIF_FOREACH(netif) {
 81154e0:	693b      	ldr	r3, [r7, #16]
 81154e2:	681b      	ldr	r3, [r3, #0]
 81154e4:	613b      	str	r3, [r7, #16]
 81154e6:	693b      	ldr	r3, [r7, #16]
 81154e8:	2b00      	cmp	r3, #0
 81154ea:	d1ed      	bne.n	81154c8 <ip4_input+0xec>
 81154ec:	e000      	b.n	81154f0 <ip4_input+0x114>
            break;
 81154ee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 81154f0:	4b4b      	ldr	r3, [pc, #300]	@ (8115620 <ip4_input+0x244>)
 81154f2:	691b      	ldr	r3, [r3, #16]
 81154f4:	6839      	ldr	r1, [r7, #0]
 81154f6:	4618      	mov	r0, r3
 81154f8:	f000 f970 	bl	81157dc <ip4_addr_isbroadcast_u32>
 81154fc:	4603      	mov	r3, r0
 81154fe:	2b00      	cmp	r3, #0
 8115500:	d105      	bne.n	811550e <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8115502:	4b47      	ldr	r3, [pc, #284]	@ (8115620 <ip4_input+0x244>)
 8115504:	691b      	ldr	r3, [r3, #16]
 8115506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811550a:	2be0      	cmp	r3, #224	@ 0xe0
 811550c:	d104      	bne.n	8115518 <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 811550e:	6878      	ldr	r0, [r7, #4]
 8115510:	f004 fa2c 	bl	811996c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8115514:	2300      	movs	r3, #0
 8115516:	e07e      	b.n	8115616 <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8115518:	693b      	ldr	r3, [r7, #16]
 811551a:	2b00      	cmp	r3, #0
 811551c:	d104      	bne.n	8115528 <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 811551e:	6878      	ldr	r0, [r7, #4]
 8115520:	f004 fa24 	bl	811996c <pbuf_free>
    return ERR_OK;
 8115524:	2300      	movs	r3, #0
 8115526:	e076      	b.n	8115616 <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8115528:	697b      	ldr	r3, [r7, #20]
 811552a:	88db      	ldrh	r3, [r3, #6]
 811552c:	b29b      	uxth	r3, r3
 811552e:	461a      	mov	r2, r3
 8115530:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8115534:	4013      	ands	r3, r2
 8115536:	2b00      	cmp	r3, #0
 8115538:	d00b      	beq.n	8115552 <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 811553a:	6878      	ldr	r0, [r7, #4]
 811553c:	f000 fc94 	bl	8115e68 <ip4_reass>
 8115540:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8115542:	687b      	ldr	r3, [r7, #4]
 8115544:	2b00      	cmp	r3, #0
 8115546:	d101      	bne.n	811554c <ip4_input+0x170>
      return ERR_OK;
 8115548:	2300      	movs	r3, #0
 811554a:	e064      	b.n	8115616 <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 811554c:	687b      	ldr	r3, [r7, #4]
 811554e:	685b      	ldr	r3, [r3, #4]
 8115550:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8115552:	4a33      	ldr	r2, [pc, #204]	@ (8115620 <ip4_input+0x244>)
 8115554:	693b      	ldr	r3, [r7, #16]
 8115556:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8115558:	4a31      	ldr	r2, [pc, #196]	@ (8115620 <ip4_input+0x244>)
 811555a:	683b      	ldr	r3, [r7, #0]
 811555c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 811555e:	4a30      	ldr	r2, [pc, #192]	@ (8115620 <ip4_input+0x244>)
 8115560:	697b      	ldr	r3, [r7, #20]
 8115562:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8115564:	697b      	ldr	r3, [r7, #20]
 8115566:	781b      	ldrb	r3, [r3, #0]
 8115568:	f003 030f 	and.w	r3, r3, #15
 811556c:	b2db      	uxtb	r3, r3
 811556e:	009b      	lsls	r3, r3, #2
 8115570:	b2db      	uxtb	r3, r3
 8115572:	461a      	mov	r2, r3
 8115574:	4b2a      	ldr	r3, [pc, #168]	@ (8115620 <ip4_input+0x244>)
 8115576:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8115578:	89fb      	ldrh	r3, [r7, #14]
 811557a:	4619      	mov	r1, r3
 811557c:	6878      	ldr	r0, [r7, #4]
 811557e:	f004 f96f 	bl	8119860 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8115582:	697b      	ldr	r3, [r7, #20]
 8115584:	7a5b      	ldrb	r3, [r3, #9]
 8115586:	2b11      	cmp	r3, #17
 8115588:	d006      	beq.n	8115598 <ip4_input+0x1bc>
 811558a:	2b11      	cmp	r3, #17
 811558c:	dc13      	bgt.n	81155b6 <ip4_input+0x1da>
 811558e:	2b01      	cmp	r3, #1
 8115590:	d00c      	beq.n	81155ac <ip4_input+0x1d0>
 8115592:	2b06      	cmp	r3, #6
 8115594:	d005      	beq.n	81155a2 <ip4_input+0x1c6>
 8115596:	e00e      	b.n	81155b6 <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8115598:	6839      	ldr	r1, [r7, #0]
 811559a:	6878      	ldr	r0, [r7, #4]
 811559c:	f00b fa78 	bl	8120a90 <udp_input>
        break;
 81155a0:	e026      	b.n	81155f0 <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 81155a2:	6839      	ldr	r1, [r7, #0]
 81155a4:	6878      	ldr	r0, [r7, #4]
 81155a6:	f006 fc3d 	bl	811be24 <tcp_input>
        break;
 81155aa:	e021      	b.n	81155f0 <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 81155ac:	6839      	ldr	r1, [r7, #0]
 81155ae:	6878      	ldr	r0, [r7, #4]
 81155b0:	f7ff fbf4 	bl	8114d9c <icmp_input>
        break;
 81155b4:	e01c      	b.n	81155f0 <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 81155b6:	4b1a      	ldr	r3, [pc, #104]	@ (8115620 <ip4_input+0x244>)
 81155b8:	695b      	ldr	r3, [r3, #20]
 81155ba:	6939      	ldr	r1, [r7, #16]
 81155bc:	4618      	mov	r0, r3
 81155be:	f000 f90d 	bl	81157dc <ip4_addr_isbroadcast_u32>
 81155c2:	4603      	mov	r3, r0
 81155c4:	2b00      	cmp	r3, #0
 81155c6:	d10f      	bne.n	81155e8 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 81155c8:	4b15      	ldr	r3, [pc, #84]	@ (8115620 <ip4_input+0x244>)
 81155ca:	695b      	ldr	r3, [r3, #20]
 81155cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 81155d0:	2be0      	cmp	r3, #224	@ 0xe0
 81155d2:	d009      	beq.n	81155e8 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 81155d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81155d8:	4619      	mov	r1, r3
 81155da:	6878      	ldr	r0, [r7, #4]
 81155dc:	f004 f9b3 	bl	8119946 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 81155e0:	2102      	movs	r1, #2
 81155e2:	6878      	ldr	r0, [r7, #4]
 81155e4:	f7ff fcf8 	bl	8114fd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 81155e8:	6878      	ldr	r0, [r7, #4]
 81155ea:	f004 f9bf 	bl	811996c <pbuf_free>
        break;
 81155ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 81155f0:	4b0b      	ldr	r3, [pc, #44]	@ (8115620 <ip4_input+0x244>)
 81155f2:	2200      	movs	r2, #0
 81155f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 81155f6:	4b0a      	ldr	r3, [pc, #40]	@ (8115620 <ip4_input+0x244>)
 81155f8:	2200      	movs	r2, #0
 81155fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 81155fc:	4b08      	ldr	r3, [pc, #32]	@ (8115620 <ip4_input+0x244>)
 81155fe:	2200      	movs	r2, #0
 8115600:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8115602:	4b07      	ldr	r3, [pc, #28]	@ (8115620 <ip4_input+0x244>)
 8115604:	2200      	movs	r2, #0
 8115606:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8115608:	4b05      	ldr	r3, [pc, #20]	@ (8115620 <ip4_input+0x244>)
 811560a:	2200      	movs	r2, #0
 811560c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 811560e:	4b04      	ldr	r3, [pc, #16]	@ (8115620 <ip4_input+0x244>)
 8115610:	2200      	movs	r2, #0
 8115612:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8115614:	2300      	movs	r3, #0
}
 8115616:	4618      	mov	r0, r3
 8115618:	3718      	adds	r7, #24
 811561a:	46bd      	mov	sp, r7
 811561c:	bd80      	pop	{r7, pc}
 811561e:	bf00      	nop
 8115620:	2400a164 	.word	0x2400a164
 8115624:	24012690 	.word	0x24012690

08115628 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8115628:	b580      	push	{r7, lr}
 811562a:	b08a      	sub	sp, #40	@ 0x28
 811562c:	af04      	add	r7, sp, #16
 811562e:	60f8      	str	r0, [r7, #12]
 8115630:	60b9      	str	r1, [r7, #8]
 8115632:	607a      	str	r2, [r7, #4]
 8115634:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8115636:	68bb      	ldr	r3, [r7, #8]
 8115638:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 811563a:	687b      	ldr	r3, [r7, #4]
 811563c:	2b00      	cmp	r3, #0
 811563e:	d009      	beq.n	8115654 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8115640:	68bb      	ldr	r3, [r7, #8]
 8115642:	2b00      	cmp	r3, #0
 8115644:	d003      	beq.n	811564e <ip4_output_if+0x26>
 8115646:	68bb      	ldr	r3, [r7, #8]
 8115648:	681b      	ldr	r3, [r3, #0]
 811564a:	2b00      	cmp	r3, #0
 811564c:	d102      	bne.n	8115654 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 811564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115650:	3304      	adds	r3, #4
 8115652:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8115654:	78fa      	ldrb	r2, [r7, #3]
 8115656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115658:	9302      	str	r3, [sp, #8]
 811565a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 811565e:	9301      	str	r3, [sp, #4]
 8115660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8115664:	9300      	str	r3, [sp, #0]
 8115666:	4613      	mov	r3, r2
 8115668:	687a      	ldr	r2, [r7, #4]
 811566a:	6979      	ldr	r1, [r7, #20]
 811566c:	68f8      	ldr	r0, [r7, #12]
 811566e:	f000 f805 	bl	811567c <ip4_output_if_src>
 8115672:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8115674:	4618      	mov	r0, r3
 8115676:	3718      	adds	r7, #24
 8115678:	46bd      	mov	sp, r7
 811567a:	bd80      	pop	{r7, pc}

0811567c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 811567c:	b580      	push	{r7, lr}
 811567e:	b088      	sub	sp, #32
 8115680:	af00      	add	r7, sp, #0
 8115682:	60f8      	str	r0, [r7, #12]
 8115684:	60b9      	str	r1, [r7, #8]
 8115686:	607a      	str	r2, [r7, #4]
 8115688:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 811568a:	f7fa fb99 	bl	810fdc0 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 811568e:	68fb      	ldr	r3, [r7, #12]
 8115690:	7b9b      	ldrb	r3, [r3, #14]
 8115692:	2b01      	cmp	r3, #1
 8115694:	d006      	beq.n	81156a4 <ip4_output_if_src+0x28>
 8115696:	4b4b      	ldr	r3, [pc, #300]	@ (81157c4 <ip4_output_if_src+0x148>)
 8115698:	f44f 7255 	mov.w	r2, #852	@ 0x354
 811569c:	494a      	ldr	r1, [pc, #296]	@ (81157c8 <ip4_output_if_src+0x14c>)
 811569e:	484b      	ldr	r0, [pc, #300]	@ (81157cc <ip4_output_if_src+0x150>)
 81156a0:	f00c fb70 	bl	8121d84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 81156a4:	687b      	ldr	r3, [r7, #4]
 81156a6:	2b00      	cmp	r3, #0
 81156a8:	d060      	beq.n	811576c <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 81156aa:	2314      	movs	r3, #20
 81156ac:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 81156ae:	2114      	movs	r1, #20
 81156b0:	68f8      	ldr	r0, [r7, #12]
 81156b2:	f004 f8c5 	bl	8119840 <pbuf_add_header>
 81156b6:	4603      	mov	r3, r0
 81156b8:	2b00      	cmp	r3, #0
 81156ba:	d002      	beq.n	81156c2 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 81156bc:	f06f 0301 	mvn.w	r3, #1
 81156c0:	e07c      	b.n	81157bc <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 81156c2:	68fb      	ldr	r3, [r7, #12]
 81156c4:	685b      	ldr	r3, [r3, #4]
 81156c6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 81156c8:	68fb      	ldr	r3, [r7, #12]
 81156ca:	895b      	ldrh	r3, [r3, #10]
 81156cc:	2b13      	cmp	r3, #19
 81156ce:	d806      	bhi.n	81156de <ip4_output_if_src+0x62>
 81156d0:	4b3c      	ldr	r3, [pc, #240]	@ (81157c4 <ip4_output_if_src+0x148>)
 81156d2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 81156d6:	493e      	ldr	r1, [pc, #248]	@ (81157d0 <ip4_output_if_src+0x154>)
 81156d8:	483c      	ldr	r0, [pc, #240]	@ (81157cc <ip4_output_if_src+0x150>)
 81156da:	f00c fb53 	bl	8121d84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 81156de:	69fb      	ldr	r3, [r7, #28]
 81156e0:	78fa      	ldrb	r2, [r7, #3]
 81156e2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 81156e4:	69fb      	ldr	r3, [r7, #28]
 81156e6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 81156ea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 81156ec:	687b      	ldr	r3, [r7, #4]
 81156ee:	681a      	ldr	r2, [r3, #0]
 81156f0:	69fb      	ldr	r3, [r7, #28]
 81156f2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 81156f4:	8b7b      	ldrh	r3, [r7, #26]
 81156f6:	089b      	lsrs	r3, r3, #2
 81156f8:	b29b      	uxth	r3, r3
 81156fa:	b2db      	uxtb	r3, r3
 81156fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8115700:	b2da      	uxtb	r2, r3
 8115702:	69fb      	ldr	r3, [r7, #28]
 8115704:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8115706:	69fb      	ldr	r3, [r7, #28]
 8115708:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811570c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 811570e:	68fb      	ldr	r3, [r7, #12]
 8115710:	891b      	ldrh	r3, [r3, #8]
 8115712:	4618      	mov	r0, r3
 8115714:	f7fe faea 	bl	8113cec <lwip_htons>
 8115718:	4603      	mov	r3, r0
 811571a:	461a      	mov	r2, r3
 811571c:	69fb      	ldr	r3, [r7, #28]
 811571e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8115720:	69fb      	ldr	r3, [r7, #28]
 8115722:	2200      	movs	r2, #0
 8115724:	719a      	strb	r2, [r3, #6]
 8115726:	2200      	movs	r2, #0
 8115728:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 811572a:	4b2a      	ldr	r3, [pc, #168]	@ (81157d4 <ip4_output_if_src+0x158>)
 811572c:	881b      	ldrh	r3, [r3, #0]
 811572e:	4618      	mov	r0, r3
 8115730:	f7fe fadc 	bl	8113cec <lwip_htons>
 8115734:	4603      	mov	r3, r0
 8115736:	461a      	mov	r2, r3
 8115738:	69fb      	ldr	r3, [r7, #28]
 811573a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 811573c:	4b25      	ldr	r3, [pc, #148]	@ (81157d4 <ip4_output_if_src+0x158>)
 811573e:	881b      	ldrh	r3, [r3, #0]
 8115740:	3301      	adds	r3, #1
 8115742:	b29a      	uxth	r2, r3
 8115744:	4b23      	ldr	r3, [pc, #140]	@ (81157d4 <ip4_output_if_src+0x158>)
 8115746:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8115748:	68bb      	ldr	r3, [r7, #8]
 811574a:	2b00      	cmp	r3, #0
 811574c:	d104      	bne.n	8115758 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 811574e:	4b22      	ldr	r3, [pc, #136]	@ (81157d8 <ip4_output_if_src+0x15c>)
 8115750:	681a      	ldr	r2, [r3, #0]
 8115752:	69fb      	ldr	r3, [r7, #28]
 8115754:	60da      	str	r2, [r3, #12]
 8115756:	e003      	b.n	8115760 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8115758:	68bb      	ldr	r3, [r7, #8]
 811575a:	681a      	ldr	r2, [r3, #0]
 811575c:	69fb      	ldr	r3, [r7, #28]
 811575e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8115760:	69fb      	ldr	r3, [r7, #28]
 8115762:	2200      	movs	r2, #0
 8115764:	729a      	strb	r2, [r3, #10]
 8115766:	2200      	movs	r2, #0
 8115768:	72da      	strb	r2, [r3, #11]
 811576a:	e00f      	b.n	811578c <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 811576c:	68fb      	ldr	r3, [r7, #12]
 811576e:	895b      	ldrh	r3, [r3, #10]
 8115770:	2b13      	cmp	r3, #19
 8115772:	d802      	bhi.n	811577a <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8115774:	f06f 0301 	mvn.w	r3, #1
 8115778:	e020      	b.n	81157bc <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 811577a:	68fb      	ldr	r3, [r7, #12]
 811577c:	685b      	ldr	r3, [r3, #4]
 811577e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8115780:	69fb      	ldr	r3, [r7, #28]
 8115782:	691b      	ldr	r3, [r3, #16]
 8115784:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8115786:	f107 0314 	add.w	r3, r7, #20
 811578a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 811578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811578e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8115790:	2b00      	cmp	r3, #0
 8115792:	d00c      	beq.n	81157ae <ip4_output_if_src+0x132>
 8115794:	68fb      	ldr	r3, [r7, #12]
 8115796:	891a      	ldrh	r2, [r3, #8]
 8115798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811579a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811579c:	429a      	cmp	r2, r3
 811579e:	d906      	bls.n	81157ae <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 81157a0:	687a      	ldr	r2, [r7, #4]
 81157a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81157a4:	68f8      	ldr	r0, [r7, #12]
 81157a6:	f000 fd53 	bl	8116250 <ip4_frag>
 81157aa:	4603      	mov	r3, r0
 81157ac:	e006      	b.n	81157bc <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 81157ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81157b0:	695b      	ldr	r3, [r3, #20]
 81157b2:	687a      	ldr	r2, [r7, #4]
 81157b4:	68f9      	ldr	r1, [r7, #12]
 81157b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81157b8:	4798      	blx	r3
 81157ba:	4603      	mov	r3, r0
}
 81157bc:	4618      	mov	r0, r3
 81157be:	3720      	adds	r7, #32
 81157c0:	46bd      	mov	sp, r7
 81157c2:	bd80      	pop	{r7, pc}
 81157c4:	081255e0 	.word	0x081255e0
 81157c8:	0812564c 	.word	0x0812564c
 81157cc:	08125658 	.word	0x08125658
 81157d0:	08125680 	.word	0x08125680
 81157d4:	2400a17c 	.word	0x2400a17c
 81157d8:	08128960 	.word	0x08128960

081157dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 81157dc:	b480      	push	{r7}
 81157de:	b085      	sub	sp, #20
 81157e0:	af00      	add	r7, sp, #0
 81157e2:	6078      	str	r0, [r7, #4]
 81157e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 81157e6:	687b      	ldr	r3, [r7, #4]
 81157e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 81157ea:	687b      	ldr	r3, [r7, #4]
 81157ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81157f0:	d002      	beq.n	81157f8 <ip4_addr_isbroadcast_u32+0x1c>
 81157f2:	687b      	ldr	r3, [r7, #4]
 81157f4:	2b00      	cmp	r3, #0
 81157f6:	d101      	bne.n	81157fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 81157f8:	2301      	movs	r3, #1
 81157fa:	e02a      	b.n	8115852 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 81157fc:	683b      	ldr	r3, [r7, #0]
 81157fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115802:	f003 0302 	and.w	r3, r3, #2
 8115806:	2b00      	cmp	r3, #0
 8115808:	d101      	bne.n	811580e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 811580a:	2300      	movs	r3, #0
 811580c:	e021      	b.n	8115852 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 811580e:	683b      	ldr	r3, [r7, #0]
 8115810:	3304      	adds	r3, #4
 8115812:	681b      	ldr	r3, [r3, #0]
 8115814:	687a      	ldr	r2, [r7, #4]
 8115816:	429a      	cmp	r2, r3
 8115818:	d101      	bne.n	811581e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 811581a:	2300      	movs	r3, #0
 811581c:	e019      	b.n	8115852 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 811581e:	68fa      	ldr	r2, [r7, #12]
 8115820:	683b      	ldr	r3, [r7, #0]
 8115822:	3304      	adds	r3, #4
 8115824:	681b      	ldr	r3, [r3, #0]
 8115826:	405a      	eors	r2, r3
 8115828:	683b      	ldr	r3, [r7, #0]
 811582a:	3308      	adds	r3, #8
 811582c:	681b      	ldr	r3, [r3, #0]
 811582e:	4013      	ands	r3, r2
 8115830:	2b00      	cmp	r3, #0
 8115832:	d10d      	bne.n	8115850 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8115834:	683b      	ldr	r3, [r7, #0]
 8115836:	3308      	adds	r3, #8
 8115838:	681b      	ldr	r3, [r3, #0]
 811583a:	43da      	mvns	r2, r3
 811583c:	687b      	ldr	r3, [r7, #4]
 811583e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8115840:	683b      	ldr	r3, [r7, #0]
 8115842:	3308      	adds	r3, #8
 8115844:	681b      	ldr	r3, [r3, #0]
 8115846:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8115848:	429a      	cmp	r2, r3
 811584a:	d101      	bne.n	8115850 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 811584c:	2301      	movs	r3, #1
 811584e:	e000      	b.n	8115852 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8115850:	2300      	movs	r3, #0
  }
}
 8115852:	4618      	mov	r0, r3
 8115854:	3714      	adds	r7, #20
 8115856:	46bd      	mov	sp, r7
 8115858:	f85d 7b04 	ldr.w	r7, [sp], #4
 811585c:	4770      	bx	lr
	...

08115860 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8115860:	b580      	push	{r7, lr}
 8115862:	b084      	sub	sp, #16
 8115864:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8115866:	2300      	movs	r3, #0
 8115868:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 811586a:	4b12      	ldr	r3, [pc, #72]	@ (81158b4 <ip_reass_tmr+0x54>)
 811586c:	681b      	ldr	r3, [r3, #0]
 811586e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8115870:	e018      	b.n	81158a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8115872:	68fb      	ldr	r3, [r7, #12]
 8115874:	7fdb      	ldrb	r3, [r3, #31]
 8115876:	2b00      	cmp	r3, #0
 8115878:	d00b      	beq.n	8115892 <ip_reass_tmr+0x32>
      r->timer--;
 811587a:	68fb      	ldr	r3, [r7, #12]
 811587c:	7fdb      	ldrb	r3, [r3, #31]
 811587e:	3b01      	subs	r3, #1
 8115880:	b2da      	uxtb	r2, r3
 8115882:	68fb      	ldr	r3, [r7, #12]
 8115884:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8115886:	68fb      	ldr	r3, [r7, #12]
 8115888:	60bb      	str	r3, [r7, #8]
      r = r->next;
 811588a:	68fb      	ldr	r3, [r7, #12]
 811588c:	681b      	ldr	r3, [r3, #0]
 811588e:	60fb      	str	r3, [r7, #12]
 8115890:	e008      	b.n	81158a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8115892:	68fb      	ldr	r3, [r7, #12]
 8115894:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8115896:	68fb      	ldr	r3, [r7, #12]
 8115898:	681b      	ldr	r3, [r3, #0]
 811589a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 811589c:	68b9      	ldr	r1, [r7, #8]
 811589e:	6878      	ldr	r0, [r7, #4]
 81158a0:	f000 f80a 	bl	81158b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 81158a4:	68fb      	ldr	r3, [r7, #12]
 81158a6:	2b00      	cmp	r3, #0
 81158a8:	d1e3      	bne.n	8115872 <ip_reass_tmr+0x12>
    }
  }
}
 81158aa:	bf00      	nop
 81158ac:	bf00      	nop
 81158ae:	3710      	adds	r7, #16
 81158b0:	46bd      	mov	sp, r7
 81158b2:	bd80      	pop	{r7, pc}
 81158b4:	2400a180 	.word	0x2400a180

081158b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 81158b8:	b580      	push	{r7, lr}
 81158ba:	b088      	sub	sp, #32
 81158bc:	af00      	add	r7, sp, #0
 81158be:	6078      	str	r0, [r7, #4]
 81158c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 81158c2:	2300      	movs	r3, #0
 81158c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 81158c6:	683a      	ldr	r2, [r7, #0]
 81158c8:	687b      	ldr	r3, [r7, #4]
 81158ca:	429a      	cmp	r2, r3
 81158cc:	d105      	bne.n	81158da <ip_reass_free_complete_datagram+0x22>
 81158ce:	4b45      	ldr	r3, [pc, #276]	@ (81159e4 <ip_reass_free_complete_datagram+0x12c>)
 81158d0:	22ab      	movs	r2, #171	@ 0xab
 81158d2:	4945      	ldr	r1, [pc, #276]	@ (81159e8 <ip_reass_free_complete_datagram+0x130>)
 81158d4:	4845      	ldr	r0, [pc, #276]	@ (81159ec <ip_reass_free_complete_datagram+0x134>)
 81158d6:	f00c fa55 	bl	8121d84 <iprintf>
  if (prev != NULL) {
 81158da:	683b      	ldr	r3, [r7, #0]
 81158dc:	2b00      	cmp	r3, #0
 81158de:	d00a      	beq.n	81158f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 81158e0:	683b      	ldr	r3, [r7, #0]
 81158e2:	681b      	ldr	r3, [r3, #0]
 81158e4:	687a      	ldr	r2, [r7, #4]
 81158e6:	429a      	cmp	r2, r3
 81158e8:	d005      	beq.n	81158f6 <ip_reass_free_complete_datagram+0x3e>
 81158ea:	4b3e      	ldr	r3, [pc, #248]	@ (81159e4 <ip_reass_free_complete_datagram+0x12c>)
 81158ec:	22ad      	movs	r2, #173	@ 0xad
 81158ee:	4940      	ldr	r1, [pc, #256]	@ (81159f0 <ip_reass_free_complete_datagram+0x138>)
 81158f0:	483e      	ldr	r0, [pc, #248]	@ (81159ec <ip_reass_free_complete_datagram+0x134>)
 81158f2:	f00c fa47 	bl	8121d84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 81158f6:	687b      	ldr	r3, [r7, #4]
 81158f8:	685b      	ldr	r3, [r3, #4]
 81158fa:	685b      	ldr	r3, [r3, #4]
 81158fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 81158fe:	697b      	ldr	r3, [r7, #20]
 8115900:	889b      	ldrh	r3, [r3, #4]
 8115902:	b29b      	uxth	r3, r3
 8115904:	2b00      	cmp	r3, #0
 8115906:	d12a      	bne.n	811595e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8115908:	687b      	ldr	r3, [r7, #4]
 811590a:	685b      	ldr	r3, [r3, #4]
 811590c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 811590e:	697b      	ldr	r3, [r7, #20]
 8115910:	681a      	ldr	r2, [r3, #0]
 8115912:	687b      	ldr	r3, [r7, #4]
 8115914:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8115916:	69bb      	ldr	r3, [r7, #24]
 8115918:	6858      	ldr	r0, [r3, #4]
 811591a:	687b      	ldr	r3, [r7, #4]
 811591c:	3308      	adds	r3, #8
 811591e:	2214      	movs	r2, #20
 8115920:	4619      	mov	r1, r3
 8115922:	f00c fcd0 	bl	81222c6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8115926:	2101      	movs	r1, #1
 8115928:	69b8      	ldr	r0, [r7, #24]
 811592a:	f7ff fb65 	bl	8114ff8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 811592e:	69b8      	ldr	r0, [r7, #24]
 8115930:	f004 f8aa 	bl	8119a88 <pbuf_clen>
 8115934:	4603      	mov	r3, r0
 8115936:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8115938:	8bfa      	ldrh	r2, [r7, #30]
 811593a:	8a7b      	ldrh	r3, [r7, #18]
 811593c:	4413      	add	r3, r2
 811593e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8115942:	db05      	blt.n	8115950 <ip_reass_free_complete_datagram+0x98>
 8115944:	4b27      	ldr	r3, [pc, #156]	@ (81159e4 <ip_reass_free_complete_datagram+0x12c>)
 8115946:	22bc      	movs	r2, #188	@ 0xbc
 8115948:	492a      	ldr	r1, [pc, #168]	@ (81159f4 <ip_reass_free_complete_datagram+0x13c>)
 811594a:	4828      	ldr	r0, [pc, #160]	@ (81159ec <ip_reass_free_complete_datagram+0x134>)
 811594c:	f00c fa1a 	bl	8121d84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8115950:	8bfa      	ldrh	r2, [r7, #30]
 8115952:	8a7b      	ldrh	r3, [r7, #18]
 8115954:	4413      	add	r3, r2
 8115956:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8115958:	69b8      	ldr	r0, [r7, #24]
 811595a:	f004 f807 	bl	811996c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 811595e:	687b      	ldr	r3, [r7, #4]
 8115960:	685b      	ldr	r3, [r3, #4]
 8115962:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8115964:	e01f      	b.n	81159a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8115966:	69bb      	ldr	r3, [r7, #24]
 8115968:	685b      	ldr	r3, [r3, #4]
 811596a:	617b      	str	r3, [r7, #20]
    pcur = p;
 811596c:	69bb      	ldr	r3, [r7, #24]
 811596e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8115970:	697b      	ldr	r3, [r7, #20]
 8115972:	681b      	ldr	r3, [r3, #0]
 8115974:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8115976:	68f8      	ldr	r0, [r7, #12]
 8115978:	f004 f886 	bl	8119a88 <pbuf_clen>
 811597c:	4603      	mov	r3, r0
 811597e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8115980:	8bfa      	ldrh	r2, [r7, #30]
 8115982:	8a7b      	ldrh	r3, [r7, #18]
 8115984:	4413      	add	r3, r2
 8115986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811598a:	db05      	blt.n	8115998 <ip_reass_free_complete_datagram+0xe0>
 811598c:	4b15      	ldr	r3, [pc, #84]	@ (81159e4 <ip_reass_free_complete_datagram+0x12c>)
 811598e:	22cc      	movs	r2, #204	@ 0xcc
 8115990:	4918      	ldr	r1, [pc, #96]	@ (81159f4 <ip_reass_free_complete_datagram+0x13c>)
 8115992:	4816      	ldr	r0, [pc, #88]	@ (81159ec <ip_reass_free_complete_datagram+0x134>)
 8115994:	f00c f9f6 	bl	8121d84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8115998:	8bfa      	ldrh	r2, [r7, #30]
 811599a:	8a7b      	ldrh	r3, [r7, #18]
 811599c:	4413      	add	r3, r2
 811599e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 81159a0:	68f8      	ldr	r0, [r7, #12]
 81159a2:	f003 ffe3 	bl	811996c <pbuf_free>
  while (p != NULL) {
 81159a6:	69bb      	ldr	r3, [r7, #24]
 81159a8:	2b00      	cmp	r3, #0
 81159aa:	d1dc      	bne.n	8115966 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 81159ac:	6839      	ldr	r1, [r7, #0]
 81159ae:	6878      	ldr	r0, [r7, #4]
 81159b0:	f000 f8c2 	bl	8115b38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 81159b4:	4b10      	ldr	r3, [pc, #64]	@ (81159f8 <ip_reass_free_complete_datagram+0x140>)
 81159b6:	881b      	ldrh	r3, [r3, #0]
 81159b8:	8bfa      	ldrh	r2, [r7, #30]
 81159ba:	429a      	cmp	r2, r3
 81159bc:	d905      	bls.n	81159ca <ip_reass_free_complete_datagram+0x112>
 81159be:	4b09      	ldr	r3, [pc, #36]	@ (81159e4 <ip_reass_free_complete_datagram+0x12c>)
 81159c0:	22d2      	movs	r2, #210	@ 0xd2
 81159c2:	490e      	ldr	r1, [pc, #56]	@ (81159fc <ip_reass_free_complete_datagram+0x144>)
 81159c4:	4809      	ldr	r0, [pc, #36]	@ (81159ec <ip_reass_free_complete_datagram+0x134>)
 81159c6:	f00c f9dd 	bl	8121d84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 81159ca:	4b0b      	ldr	r3, [pc, #44]	@ (81159f8 <ip_reass_free_complete_datagram+0x140>)
 81159cc:	881a      	ldrh	r2, [r3, #0]
 81159ce:	8bfb      	ldrh	r3, [r7, #30]
 81159d0:	1ad3      	subs	r3, r2, r3
 81159d2:	b29a      	uxth	r2, r3
 81159d4:	4b08      	ldr	r3, [pc, #32]	@ (81159f8 <ip_reass_free_complete_datagram+0x140>)
 81159d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 81159d8:	8bfb      	ldrh	r3, [r7, #30]
}
 81159da:	4618      	mov	r0, r3
 81159dc:	3720      	adds	r7, #32
 81159de:	46bd      	mov	sp, r7
 81159e0:	bd80      	pop	{r7, pc}
 81159e2:	bf00      	nop
 81159e4:	081256b0 	.word	0x081256b0
 81159e8:	08125724 	.word	0x08125724
 81159ec:	08125730 	.word	0x08125730
 81159f0:	08125758 	.word	0x08125758
 81159f4:	0812576c 	.word	0x0812576c
 81159f8:	2400a184 	.word	0x2400a184
 81159fc:	0812578c 	.word	0x0812578c

08115a00 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8115a00:	b580      	push	{r7, lr}
 8115a02:	b08a      	sub	sp, #40	@ 0x28
 8115a04:	af00      	add	r7, sp, #0
 8115a06:	6078      	str	r0, [r7, #4]
 8115a08:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8115a0a:	2300      	movs	r3, #0
 8115a0c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8115a0e:	2300      	movs	r3, #0
 8115a10:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8115a12:	2300      	movs	r3, #0
 8115a14:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8115a16:	2300      	movs	r3, #0
 8115a18:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8115a1a:	2300      	movs	r3, #0
 8115a1c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8115a1e:	4b28      	ldr	r3, [pc, #160]	@ (8115ac0 <ip_reass_remove_oldest_datagram+0xc0>)
 8115a20:	681b      	ldr	r3, [r3, #0]
 8115a22:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8115a24:	e030      	b.n	8115a88 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8115a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a28:	695a      	ldr	r2, [r3, #20]
 8115a2a:	687b      	ldr	r3, [r7, #4]
 8115a2c:	68db      	ldr	r3, [r3, #12]
 8115a2e:	429a      	cmp	r2, r3
 8115a30:	d10c      	bne.n	8115a4c <ip_reass_remove_oldest_datagram+0x4c>
 8115a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a34:	699a      	ldr	r2, [r3, #24]
 8115a36:	687b      	ldr	r3, [r7, #4]
 8115a38:	691b      	ldr	r3, [r3, #16]
 8115a3a:	429a      	cmp	r2, r3
 8115a3c:	d106      	bne.n	8115a4c <ip_reass_remove_oldest_datagram+0x4c>
 8115a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a40:	899a      	ldrh	r2, [r3, #12]
 8115a42:	687b      	ldr	r3, [r7, #4]
 8115a44:	889b      	ldrh	r3, [r3, #4]
 8115a46:	b29b      	uxth	r3, r3
 8115a48:	429a      	cmp	r2, r3
 8115a4a:	d014      	beq.n	8115a76 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8115a4c:	693b      	ldr	r3, [r7, #16]
 8115a4e:	3301      	adds	r3, #1
 8115a50:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8115a52:	6a3b      	ldr	r3, [r7, #32]
 8115a54:	2b00      	cmp	r3, #0
 8115a56:	d104      	bne.n	8115a62 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8115a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a5a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8115a5c:	69fb      	ldr	r3, [r7, #28]
 8115a5e:	61bb      	str	r3, [r7, #24]
 8115a60:	e009      	b.n	8115a76 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8115a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a64:	7fda      	ldrb	r2, [r3, #31]
 8115a66:	6a3b      	ldr	r3, [r7, #32]
 8115a68:	7fdb      	ldrb	r3, [r3, #31]
 8115a6a:	429a      	cmp	r2, r3
 8115a6c:	d803      	bhi.n	8115a76 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8115a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a70:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8115a72:	69fb      	ldr	r3, [r7, #28]
 8115a74:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8115a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a78:	681b      	ldr	r3, [r3, #0]
 8115a7a:	2b00      	cmp	r3, #0
 8115a7c:	d001      	beq.n	8115a82 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8115a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a80:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8115a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a84:	681b      	ldr	r3, [r3, #0]
 8115a86:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8115a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115a8a:	2b00      	cmp	r3, #0
 8115a8c:	d1cb      	bne.n	8115a26 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8115a8e:	6a3b      	ldr	r3, [r7, #32]
 8115a90:	2b00      	cmp	r3, #0
 8115a92:	d008      	beq.n	8115aa6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8115a94:	69b9      	ldr	r1, [r7, #24]
 8115a96:	6a38      	ldr	r0, [r7, #32]
 8115a98:	f7ff ff0e 	bl	81158b8 <ip_reass_free_complete_datagram>
 8115a9c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8115a9e:	697a      	ldr	r2, [r7, #20]
 8115aa0:	68fb      	ldr	r3, [r7, #12]
 8115aa2:	4413      	add	r3, r2
 8115aa4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8115aa6:	697a      	ldr	r2, [r7, #20]
 8115aa8:	683b      	ldr	r3, [r7, #0]
 8115aaa:	429a      	cmp	r2, r3
 8115aac:	da02      	bge.n	8115ab4 <ip_reass_remove_oldest_datagram+0xb4>
 8115aae:	693b      	ldr	r3, [r7, #16]
 8115ab0:	2b01      	cmp	r3, #1
 8115ab2:	dcac      	bgt.n	8115a0e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8115ab4:	697b      	ldr	r3, [r7, #20]
}
 8115ab6:	4618      	mov	r0, r3
 8115ab8:	3728      	adds	r7, #40	@ 0x28
 8115aba:	46bd      	mov	sp, r7
 8115abc:	bd80      	pop	{r7, pc}
 8115abe:	bf00      	nop
 8115ac0:	2400a180 	.word	0x2400a180

08115ac4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8115ac4:	b580      	push	{r7, lr}
 8115ac6:	b084      	sub	sp, #16
 8115ac8:	af00      	add	r7, sp, #0
 8115aca:	6078      	str	r0, [r7, #4]
 8115acc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8115ace:	2004      	movs	r0, #4
 8115ad0:	f001 f99c 	bl	8116e0c <memp_malloc>
 8115ad4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8115ad6:	68fb      	ldr	r3, [r7, #12]
 8115ad8:	2b00      	cmp	r3, #0
 8115ada:	d110      	bne.n	8115afe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8115adc:	6839      	ldr	r1, [r7, #0]
 8115ade:	6878      	ldr	r0, [r7, #4]
 8115ae0:	f7ff ff8e 	bl	8115a00 <ip_reass_remove_oldest_datagram>
 8115ae4:	4602      	mov	r2, r0
 8115ae6:	683b      	ldr	r3, [r7, #0]
 8115ae8:	4293      	cmp	r3, r2
 8115aea:	dc03      	bgt.n	8115af4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8115aec:	2004      	movs	r0, #4
 8115aee:	f001 f98d 	bl	8116e0c <memp_malloc>
 8115af2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8115af4:	68fb      	ldr	r3, [r7, #12]
 8115af6:	2b00      	cmp	r3, #0
 8115af8:	d101      	bne.n	8115afe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8115afa:	2300      	movs	r3, #0
 8115afc:	e016      	b.n	8115b2c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8115afe:	2220      	movs	r2, #32
 8115b00:	2100      	movs	r1, #0
 8115b02:	68f8      	ldr	r0, [r7, #12]
 8115b04:	f00c fae4 	bl	81220d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8115b08:	68fb      	ldr	r3, [r7, #12]
 8115b0a:	220f      	movs	r2, #15
 8115b0c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8115b0e:	4b09      	ldr	r3, [pc, #36]	@ (8115b34 <ip_reass_enqueue_new_datagram+0x70>)
 8115b10:	681a      	ldr	r2, [r3, #0]
 8115b12:	68fb      	ldr	r3, [r7, #12]
 8115b14:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8115b16:	4a07      	ldr	r2, [pc, #28]	@ (8115b34 <ip_reass_enqueue_new_datagram+0x70>)
 8115b18:	68fb      	ldr	r3, [r7, #12]
 8115b1a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8115b1c:	68fb      	ldr	r3, [r7, #12]
 8115b1e:	3308      	adds	r3, #8
 8115b20:	2214      	movs	r2, #20
 8115b22:	6879      	ldr	r1, [r7, #4]
 8115b24:	4618      	mov	r0, r3
 8115b26:	f00c fbce 	bl	81222c6 <memcpy>
  return ipr;
 8115b2a:	68fb      	ldr	r3, [r7, #12]
}
 8115b2c:	4618      	mov	r0, r3
 8115b2e:	3710      	adds	r7, #16
 8115b30:	46bd      	mov	sp, r7
 8115b32:	bd80      	pop	{r7, pc}
 8115b34:	2400a180 	.word	0x2400a180

08115b38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8115b38:	b580      	push	{r7, lr}
 8115b3a:	b082      	sub	sp, #8
 8115b3c:	af00      	add	r7, sp, #0
 8115b3e:	6078      	str	r0, [r7, #4]
 8115b40:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8115b42:	4b10      	ldr	r3, [pc, #64]	@ (8115b84 <ip_reass_dequeue_datagram+0x4c>)
 8115b44:	681b      	ldr	r3, [r3, #0]
 8115b46:	687a      	ldr	r2, [r7, #4]
 8115b48:	429a      	cmp	r2, r3
 8115b4a:	d104      	bne.n	8115b56 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8115b4c:	687b      	ldr	r3, [r7, #4]
 8115b4e:	681b      	ldr	r3, [r3, #0]
 8115b50:	4a0c      	ldr	r2, [pc, #48]	@ (8115b84 <ip_reass_dequeue_datagram+0x4c>)
 8115b52:	6013      	str	r3, [r2, #0]
 8115b54:	e00d      	b.n	8115b72 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8115b56:	683b      	ldr	r3, [r7, #0]
 8115b58:	2b00      	cmp	r3, #0
 8115b5a:	d106      	bne.n	8115b6a <ip_reass_dequeue_datagram+0x32>
 8115b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8115b88 <ip_reass_dequeue_datagram+0x50>)
 8115b5e:	f240 1245 	movw	r2, #325	@ 0x145
 8115b62:	490a      	ldr	r1, [pc, #40]	@ (8115b8c <ip_reass_dequeue_datagram+0x54>)
 8115b64:	480a      	ldr	r0, [pc, #40]	@ (8115b90 <ip_reass_dequeue_datagram+0x58>)
 8115b66:	f00c f90d 	bl	8121d84 <iprintf>
    prev->next = ipr->next;
 8115b6a:	687b      	ldr	r3, [r7, #4]
 8115b6c:	681a      	ldr	r2, [r3, #0]
 8115b6e:	683b      	ldr	r3, [r7, #0]
 8115b70:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8115b72:	6879      	ldr	r1, [r7, #4]
 8115b74:	2004      	movs	r0, #4
 8115b76:	f001 f9bf 	bl	8116ef8 <memp_free>
}
 8115b7a:	bf00      	nop
 8115b7c:	3708      	adds	r7, #8
 8115b7e:	46bd      	mov	sp, r7
 8115b80:	bd80      	pop	{r7, pc}
 8115b82:	bf00      	nop
 8115b84:	2400a180 	.word	0x2400a180
 8115b88:	081256b0 	.word	0x081256b0
 8115b8c:	081257b0 	.word	0x081257b0
 8115b90:	08125730 	.word	0x08125730

08115b94 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8115b94:	b580      	push	{r7, lr}
 8115b96:	b08c      	sub	sp, #48	@ 0x30
 8115b98:	af00      	add	r7, sp, #0
 8115b9a:	60f8      	str	r0, [r7, #12]
 8115b9c:	60b9      	str	r1, [r7, #8]
 8115b9e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8115ba0:	2300      	movs	r3, #0
 8115ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8115ba4:	2301      	movs	r3, #1
 8115ba6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8115ba8:	68bb      	ldr	r3, [r7, #8]
 8115baa:	685b      	ldr	r3, [r3, #4]
 8115bac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8115bae:	69fb      	ldr	r3, [r7, #28]
 8115bb0:	885b      	ldrh	r3, [r3, #2]
 8115bb2:	b29b      	uxth	r3, r3
 8115bb4:	4618      	mov	r0, r3
 8115bb6:	f7fe f899 	bl	8113cec <lwip_htons>
 8115bba:	4603      	mov	r3, r0
 8115bbc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8115bbe:	69fb      	ldr	r3, [r7, #28]
 8115bc0:	781b      	ldrb	r3, [r3, #0]
 8115bc2:	f003 030f 	and.w	r3, r3, #15
 8115bc6:	b2db      	uxtb	r3, r3
 8115bc8:	009b      	lsls	r3, r3, #2
 8115bca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8115bcc:	7e7b      	ldrb	r3, [r7, #25]
 8115bce:	b29b      	uxth	r3, r3
 8115bd0:	8b7a      	ldrh	r2, [r7, #26]
 8115bd2:	429a      	cmp	r2, r3
 8115bd4:	d202      	bcs.n	8115bdc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8115bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8115bda:	e135      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8115bdc:	7e7b      	ldrb	r3, [r7, #25]
 8115bde:	b29b      	uxth	r3, r3
 8115be0:	8b7a      	ldrh	r2, [r7, #26]
 8115be2:	1ad3      	subs	r3, r2, r3
 8115be4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8115be6:	69fb      	ldr	r3, [r7, #28]
 8115be8:	88db      	ldrh	r3, [r3, #6]
 8115bea:	b29b      	uxth	r3, r3
 8115bec:	4618      	mov	r0, r3
 8115bee:	f7fe f87d 	bl	8113cec <lwip_htons>
 8115bf2:	4603      	mov	r3, r0
 8115bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8115bf8:	b29b      	uxth	r3, r3
 8115bfa:	00db      	lsls	r3, r3, #3
 8115bfc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8115bfe:	68bb      	ldr	r3, [r7, #8]
 8115c00:	685b      	ldr	r3, [r3, #4]
 8115c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8115c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c06:	2200      	movs	r2, #0
 8115c08:	701a      	strb	r2, [r3, #0]
 8115c0a:	2200      	movs	r2, #0
 8115c0c:	705a      	strb	r2, [r3, #1]
 8115c0e:	2200      	movs	r2, #0
 8115c10:	709a      	strb	r2, [r3, #2]
 8115c12:	2200      	movs	r2, #0
 8115c14:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8115c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c18:	8afa      	ldrh	r2, [r7, #22]
 8115c1a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8115c1c:	8afa      	ldrh	r2, [r7, #22]
 8115c1e:	8b7b      	ldrh	r3, [r7, #26]
 8115c20:	4413      	add	r3, r2
 8115c22:	b29a      	uxth	r2, r3
 8115c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c26:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8115c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c2a:	88db      	ldrh	r3, [r3, #6]
 8115c2c:	b29b      	uxth	r3, r3
 8115c2e:	8afa      	ldrh	r2, [r7, #22]
 8115c30:	429a      	cmp	r2, r3
 8115c32:	d902      	bls.n	8115c3a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8115c34:	f04f 33ff 	mov.w	r3, #4294967295
 8115c38:	e106      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8115c3a:	68fb      	ldr	r3, [r7, #12]
 8115c3c:	685b      	ldr	r3, [r3, #4]
 8115c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8115c40:	e068      	b.n	8115d14 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8115c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c44:	685b      	ldr	r3, [r3, #4]
 8115c46:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8115c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c4a:	889b      	ldrh	r3, [r3, #4]
 8115c4c:	b29a      	uxth	r2, r3
 8115c4e:	693b      	ldr	r3, [r7, #16]
 8115c50:	889b      	ldrh	r3, [r3, #4]
 8115c52:	b29b      	uxth	r3, r3
 8115c54:	429a      	cmp	r2, r3
 8115c56:	d235      	bcs.n	8115cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8115c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115c5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8115c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c60:	2b00      	cmp	r3, #0
 8115c62:	d020      	beq.n	8115ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8115c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c66:	889b      	ldrh	r3, [r3, #4]
 8115c68:	b29a      	uxth	r2, r3
 8115c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c6c:	88db      	ldrh	r3, [r3, #6]
 8115c6e:	b29b      	uxth	r3, r3
 8115c70:	429a      	cmp	r2, r3
 8115c72:	d307      	bcc.n	8115c84 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8115c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c76:	88db      	ldrh	r3, [r3, #6]
 8115c78:	b29a      	uxth	r2, r3
 8115c7a:	693b      	ldr	r3, [r7, #16]
 8115c7c:	889b      	ldrh	r3, [r3, #4]
 8115c7e:	b29b      	uxth	r3, r3
 8115c80:	429a      	cmp	r2, r3
 8115c82:	d902      	bls.n	8115c8a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8115c84:	f04f 33ff 	mov.w	r3, #4294967295
 8115c88:	e0de      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8115c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c8c:	68ba      	ldr	r2, [r7, #8]
 8115c8e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8115c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115c92:	88db      	ldrh	r3, [r3, #6]
 8115c94:	b29a      	uxth	r2, r3
 8115c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c98:	889b      	ldrh	r3, [r3, #4]
 8115c9a:	b29b      	uxth	r3, r3
 8115c9c:	429a      	cmp	r2, r3
 8115c9e:	d03d      	beq.n	8115d1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8115ca0:	2300      	movs	r3, #0
 8115ca2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8115ca4:	e03a      	b.n	8115d1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8115ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ca8:	88db      	ldrh	r3, [r3, #6]
 8115caa:	b29a      	uxth	r2, r3
 8115cac:	693b      	ldr	r3, [r7, #16]
 8115cae:	889b      	ldrh	r3, [r3, #4]
 8115cb0:	b29b      	uxth	r3, r3
 8115cb2:	429a      	cmp	r2, r3
 8115cb4:	d902      	bls.n	8115cbc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8115cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8115cba:	e0c5      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8115cbc:	68fb      	ldr	r3, [r7, #12]
 8115cbe:	68ba      	ldr	r2, [r7, #8]
 8115cc0:	605a      	str	r2, [r3, #4]
      break;
 8115cc2:	e02b      	b.n	8115d1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8115cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cc6:	889b      	ldrh	r3, [r3, #4]
 8115cc8:	b29a      	uxth	r2, r3
 8115cca:	693b      	ldr	r3, [r7, #16]
 8115ccc:	889b      	ldrh	r3, [r3, #4]
 8115cce:	b29b      	uxth	r3, r3
 8115cd0:	429a      	cmp	r2, r3
 8115cd2:	d102      	bne.n	8115cda <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8115cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8115cd8:	e0b6      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8115cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cdc:	889b      	ldrh	r3, [r3, #4]
 8115cde:	b29a      	uxth	r2, r3
 8115ce0:	693b      	ldr	r3, [r7, #16]
 8115ce2:	88db      	ldrh	r3, [r3, #6]
 8115ce4:	b29b      	uxth	r3, r3
 8115ce6:	429a      	cmp	r2, r3
 8115ce8:	d202      	bcs.n	8115cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8115cea:	f04f 33ff 	mov.w	r3, #4294967295
 8115cee:	e0ab      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8115cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115cf2:	2b00      	cmp	r3, #0
 8115cf4:	d009      	beq.n	8115d0a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8115cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115cf8:	88db      	ldrh	r3, [r3, #6]
 8115cfa:	b29a      	uxth	r2, r3
 8115cfc:	693b      	ldr	r3, [r7, #16]
 8115cfe:	889b      	ldrh	r3, [r3, #4]
 8115d00:	b29b      	uxth	r3, r3
 8115d02:	429a      	cmp	r2, r3
 8115d04:	d001      	beq.n	8115d0a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8115d06:	2300      	movs	r3, #0
 8115d08:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8115d0a:	693b      	ldr	r3, [r7, #16]
 8115d0c:	681b      	ldr	r3, [r3, #0]
 8115d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8115d10:	693b      	ldr	r3, [r7, #16]
 8115d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8115d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115d16:	2b00      	cmp	r3, #0
 8115d18:	d193      	bne.n	8115c42 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8115d1a:	e000      	b.n	8115d1e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8115d1c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8115d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115d20:	2b00      	cmp	r3, #0
 8115d22:	d12d      	bne.n	8115d80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8115d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115d26:	2b00      	cmp	r3, #0
 8115d28:	d01c      	beq.n	8115d64 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8115d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115d2c:	88db      	ldrh	r3, [r3, #6]
 8115d2e:	b29a      	uxth	r2, r3
 8115d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d32:	889b      	ldrh	r3, [r3, #4]
 8115d34:	b29b      	uxth	r3, r3
 8115d36:	429a      	cmp	r2, r3
 8115d38:	d906      	bls.n	8115d48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8115d3a:	4b45      	ldr	r3, [pc, #276]	@ (8115e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8115d3c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8115d40:	4944      	ldr	r1, [pc, #272]	@ (8115e54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8115d42:	4845      	ldr	r0, [pc, #276]	@ (8115e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8115d44:	f00c f81e 	bl	8121d84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8115d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115d4a:	68ba      	ldr	r2, [r7, #8]
 8115d4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8115d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115d50:	88db      	ldrh	r3, [r3, #6]
 8115d52:	b29a      	uxth	r2, r3
 8115d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d56:	889b      	ldrh	r3, [r3, #4]
 8115d58:	b29b      	uxth	r3, r3
 8115d5a:	429a      	cmp	r2, r3
 8115d5c:	d010      	beq.n	8115d80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8115d5e:	2300      	movs	r3, #0
 8115d60:	623b      	str	r3, [r7, #32]
 8115d62:	e00d      	b.n	8115d80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8115d64:	68fb      	ldr	r3, [r7, #12]
 8115d66:	685b      	ldr	r3, [r3, #4]
 8115d68:	2b00      	cmp	r3, #0
 8115d6a:	d006      	beq.n	8115d7a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8115d6c:	4b38      	ldr	r3, [pc, #224]	@ (8115e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8115d6e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8115d72:	493a      	ldr	r1, [pc, #232]	@ (8115e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8115d74:	4838      	ldr	r0, [pc, #224]	@ (8115e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8115d76:	f00c f805 	bl	8121d84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8115d7a:	68fb      	ldr	r3, [r7, #12]
 8115d7c:	68ba      	ldr	r2, [r7, #8]
 8115d7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8115d80:	687b      	ldr	r3, [r7, #4]
 8115d82:	2b00      	cmp	r3, #0
 8115d84:	d105      	bne.n	8115d92 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8115d86:	68fb      	ldr	r3, [r7, #12]
 8115d88:	7f9b      	ldrb	r3, [r3, #30]
 8115d8a:	f003 0301 	and.w	r3, r3, #1
 8115d8e:	2b00      	cmp	r3, #0
 8115d90:	d059      	beq.n	8115e46 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8115d92:	6a3b      	ldr	r3, [r7, #32]
 8115d94:	2b00      	cmp	r3, #0
 8115d96:	d04f      	beq.n	8115e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8115d98:	68fb      	ldr	r3, [r7, #12]
 8115d9a:	685b      	ldr	r3, [r3, #4]
 8115d9c:	2b00      	cmp	r3, #0
 8115d9e:	d006      	beq.n	8115dae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8115da0:	68fb      	ldr	r3, [r7, #12]
 8115da2:	685b      	ldr	r3, [r3, #4]
 8115da4:	685b      	ldr	r3, [r3, #4]
 8115da6:	889b      	ldrh	r3, [r3, #4]
 8115da8:	b29b      	uxth	r3, r3
 8115daa:	2b00      	cmp	r3, #0
 8115dac:	d002      	beq.n	8115db4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8115dae:	2300      	movs	r3, #0
 8115db0:	623b      	str	r3, [r7, #32]
 8115db2:	e041      	b.n	8115e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8115db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115db6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8115db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dba:	681b      	ldr	r3, [r3, #0]
 8115dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8115dbe:	e012      	b.n	8115de6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8115dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115dc2:	685b      	ldr	r3, [r3, #4]
 8115dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8115dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115dc8:	88db      	ldrh	r3, [r3, #6]
 8115dca:	b29a      	uxth	r2, r3
 8115dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dce:	889b      	ldrh	r3, [r3, #4]
 8115dd0:	b29b      	uxth	r3, r3
 8115dd2:	429a      	cmp	r2, r3
 8115dd4:	d002      	beq.n	8115ddc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8115dd6:	2300      	movs	r3, #0
 8115dd8:	623b      	str	r3, [r7, #32]
            break;
 8115dda:	e007      	b.n	8115dec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8115ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dde:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8115de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115de2:	681b      	ldr	r3, [r3, #0]
 8115de4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8115de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115de8:	2b00      	cmp	r3, #0
 8115dea:	d1e9      	bne.n	8115dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8115dec:	6a3b      	ldr	r3, [r7, #32]
 8115dee:	2b00      	cmp	r3, #0
 8115df0:	d022      	beq.n	8115e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8115df2:	68fb      	ldr	r3, [r7, #12]
 8115df4:	685b      	ldr	r3, [r3, #4]
 8115df6:	2b00      	cmp	r3, #0
 8115df8:	d106      	bne.n	8115e08 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8115dfa:	4b15      	ldr	r3, [pc, #84]	@ (8115e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8115dfc:	f240 12df 	movw	r2, #479	@ 0x1df
 8115e00:	4917      	ldr	r1, [pc, #92]	@ (8115e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8115e02:	4815      	ldr	r0, [pc, #84]	@ (8115e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8115e04:	f00b ffbe 	bl	8121d84 <iprintf>
          LWIP_ASSERT("sanity check",
 8115e08:	68fb      	ldr	r3, [r7, #12]
 8115e0a:	685b      	ldr	r3, [r3, #4]
 8115e0c:	685b      	ldr	r3, [r3, #4]
 8115e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115e10:	429a      	cmp	r2, r3
 8115e12:	d106      	bne.n	8115e22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8115e14:	4b0e      	ldr	r3, [pc, #56]	@ (8115e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8115e16:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8115e1a:	4911      	ldr	r1, [pc, #68]	@ (8115e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8115e1c:	480e      	ldr	r0, [pc, #56]	@ (8115e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8115e1e:	f00b ffb1 	bl	8121d84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8115e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e24:	681b      	ldr	r3, [r3, #0]
 8115e26:	2b00      	cmp	r3, #0
 8115e28:	d006      	beq.n	8115e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8115e2a:	4b09      	ldr	r3, [pc, #36]	@ (8115e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8115e2c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8115e30:	490c      	ldr	r1, [pc, #48]	@ (8115e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8115e32:	4809      	ldr	r0, [pc, #36]	@ (8115e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8115e34:	f00b ffa6 	bl	8121d84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8115e38:	6a3b      	ldr	r3, [r7, #32]
 8115e3a:	2b00      	cmp	r3, #0
 8115e3c:	bf14      	ite	ne
 8115e3e:	2301      	movne	r3, #1
 8115e40:	2300      	moveq	r3, #0
 8115e42:	b2db      	uxtb	r3, r3
 8115e44:	e000      	b.n	8115e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8115e46:	2300      	movs	r3, #0
}
 8115e48:	4618      	mov	r0, r3
 8115e4a:	3730      	adds	r7, #48	@ 0x30
 8115e4c:	46bd      	mov	sp, r7
 8115e4e:	bd80      	pop	{r7, pc}
 8115e50:	081256b0 	.word	0x081256b0
 8115e54:	081257cc 	.word	0x081257cc
 8115e58:	08125730 	.word	0x08125730
 8115e5c:	081257ec 	.word	0x081257ec
 8115e60:	08125824 	.word	0x08125824
 8115e64:	08125834 	.word	0x08125834

08115e68 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8115e68:	b580      	push	{r7, lr}
 8115e6a:	b08e      	sub	sp, #56	@ 0x38
 8115e6c:	af00      	add	r7, sp, #0
 8115e6e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8115e70:	687b      	ldr	r3, [r7, #4]
 8115e72:	685b      	ldr	r3, [r3, #4]
 8115e74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8115e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115e78:	781b      	ldrb	r3, [r3, #0]
 8115e7a:	f003 030f 	and.w	r3, r3, #15
 8115e7e:	b2db      	uxtb	r3, r3
 8115e80:	009b      	lsls	r3, r3, #2
 8115e82:	b2db      	uxtb	r3, r3
 8115e84:	2b14      	cmp	r3, #20
 8115e86:	f040 8171 	bne.w	811616c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8115e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115e8c:	88db      	ldrh	r3, [r3, #6]
 8115e8e:	b29b      	uxth	r3, r3
 8115e90:	4618      	mov	r0, r3
 8115e92:	f7fd ff2b 	bl	8113cec <lwip_htons>
 8115e96:	4603      	mov	r3, r0
 8115e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8115e9c:	b29b      	uxth	r3, r3
 8115e9e:	00db      	lsls	r3, r3, #3
 8115ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8115ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ea4:	885b      	ldrh	r3, [r3, #2]
 8115ea6:	b29b      	uxth	r3, r3
 8115ea8:	4618      	mov	r0, r3
 8115eaa:	f7fd ff1f 	bl	8113cec <lwip_htons>
 8115eae:	4603      	mov	r3, r0
 8115eb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8115eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115eb4:	781b      	ldrb	r3, [r3, #0]
 8115eb6:	f003 030f 	and.w	r3, r3, #15
 8115eba:	b2db      	uxtb	r3, r3
 8115ebc:	009b      	lsls	r3, r3, #2
 8115ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8115ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8115ec6:	b29b      	uxth	r3, r3
 8115ec8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8115eca:	429a      	cmp	r2, r3
 8115ecc:	f0c0 8150 	bcc.w	8116170 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8115ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8115ed4:	b29b      	uxth	r3, r3
 8115ed6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8115ed8:	1ad3      	subs	r3, r2, r3
 8115eda:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8115edc:	6878      	ldr	r0, [r7, #4]
 8115ede:	f003 fdd3 	bl	8119a88 <pbuf_clen>
 8115ee2:	4603      	mov	r3, r0
 8115ee4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8115ee6:	4b8c      	ldr	r3, [pc, #560]	@ (8116118 <ip4_reass+0x2b0>)
 8115ee8:	881b      	ldrh	r3, [r3, #0]
 8115eea:	461a      	mov	r2, r3
 8115eec:	8c3b      	ldrh	r3, [r7, #32]
 8115eee:	4413      	add	r3, r2
 8115ef0:	2b0a      	cmp	r3, #10
 8115ef2:	dd10      	ble.n	8115f16 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8115ef4:	8c3b      	ldrh	r3, [r7, #32]
 8115ef6:	4619      	mov	r1, r3
 8115ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8115efa:	f7ff fd81 	bl	8115a00 <ip_reass_remove_oldest_datagram>
 8115efe:	4603      	mov	r3, r0
 8115f00:	2b00      	cmp	r3, #0
 8115f02:	f000 8137 	beq.w	8116174 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8115f06:	4b84      	ldr	r3, [pc, #528]	@ (8116118 <ip4_reass+0x2b0>)
 8115f08:	881b      	ldrh	r3, [r3, #0]
 8115f0a:	461a      	mov	r2, r3
 8115f0c:	8c3b      	ldrh	r3, [r7, #32]
 8115f0e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8115f10:	2b0a      	cmp	r3, #10
 8115f12:	f300 812f 	bgt.w	8116174 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8115f16:	4b81      	ldr	r3, [pc, #516]	@ (811611c <ip4_reass+0x2b4>)
 8115f18:	681b      	ldr	r3, [r3, #0]
 8115f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8115f1c:	e015      	b.n	8115f4a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8115f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f20:	695a      	ldr	r2, [r3, #20]
 8115f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f24:	68db      	ldr	r3, [r3, #12]
 8115f26:	429a      	cmp	r2, r3
 8115f28:	d10c      	bne.n	8115f44 <ip4_reass+0xdc>
 8115f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f2c:	699a      	ldr	r2, [r3, #24]
 8115f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f30:	691b      	ldr	r3, [r3, #16]
 8115f32:	429a      	cmp	r2, r3
 8115f34:	d106      	bne.n	8115f44 <ip4_reass+0xdc>
 8115f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f38:	899a      	ldrh	r2, [r3, #12]
 8115f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f3c:	889b      	ldrh	r3, [r3, #4]
 8115f3e:	b29b      	uxth	r3, r3
 8115f40:	429a      	cmp	r2, r3
 8115f42:	d006      	beq.n	8115f52 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8115f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f46:	681b      	ldr	r3, [r3, #0]
 8115f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8115f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f4c:	2b00      	cmp	r3, #0
 8115f4e:	d1e6      	bne.n	8115f1e <ip4_reass+0xb6>
 8115f50:	e000      	b.n	8115f54 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8115f52:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8115f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f56:	2b00      	cmp	r3, #0
 8115f58:	d109      	bne.n	8115f6e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8115f5a:	8c3b      	ldrh	r3, [r7, #32]
 8115f5c:	4619      	mov	r1, r3
 8115f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8115f60:	f7ff fdb0 	bl	8115ac4 <ip_reass_enqueue_new_datagram>
 8115f64:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8115f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f68:	2b00      	cmp	r3, #0
 8115f6a:	d11c      	bne.n	8115fa6 <ip4_reass+0x13e>
      goto nullreturn;
 8115f6c:	e105      	b.n	811617a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8115f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f70:	88db      	ldrh	r3, [r3, #6]
 8115f72:	b29b      	uxth	r3, r3
 8115f74:	4618      	mov	r0, r3
 8115f76:	f7fd feb9 	bl	8113cec <lwip_htons>
 8115f7a:	4603      	mov	r3, r0
 8115f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8115f80:	2b00      	cmp	r3, #0
 8115f82:	d110      	bne.n	8115fa6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8115f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f86:	89db      	ldrh	r3, [r3, #14]
 8115f88:	4618      	mov	r0, r3
 8115f8a:	f7fd feaf 	bl	8113cec <lwip_htons>
 8115f8e:	4603      	mov	r3, r0
 8115f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8115f94:	2b00      	cmp	r3, #0
 8115f96:	d006      	beq.n	8115fa6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8115f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115f9a:	3308      	adds	r3, #8
 8115f9c:	2214      	movs	r2, #20
 8115f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8115fa0:	4618      	mov	r0, r3
 8115fa2:	f00c f990 	bl	81222c6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8115fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115fa8:	88db      	ldrh	r3, [r3, #6]
 8115faa:	b29b      	uxth	r3, r3
 8115fac:	f003 0320 	and.w	r3, r3, #32
 8115fb0:	2b00      	cmp	r3, #0
 8115fb2:	bf0c      	ite	eq
 8115fb4:	2301      	moveq	r3, #1
 8115fb6:	2300      	movne	r3, #0
 8115fb8:	b2db      	uxtb	r3, r3
 8115fba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8115fbc:	69fb      	ldr	r3, [r7, #28]
 8115fbe:	2b00      	cmp	r3, #0
 8115fc0:	d00e      	beq.n	8115fe0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8115fc2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8115fc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8115fc6:	4413      	add	r3, r2
 8115fc8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8115fca:	8b7a      	ldrh	r2, [r7, #26]
 8115fcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8115fce:	429a      	cmp	r2, r3
 8115fd0:	f0c0 80a0 	bcc.w	8116114 <ip4_reass+0x2ac>
 8115fd4:	8b7b      	ldrh	r3, [r7, #26]
 8115fd6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8115fda:	4293      	cmp	r3, r2
 8115fdc:	f200 809a 	bhi.w	8116114 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8115fe0:	69fa      	ldr	r2, [r7, #28]
 8115fe2:	6879      	ldr	r1, [r7, #4]
 8115fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8115fe6:	f7ff fdd5 	bl	8115b94 <ip_reass_chain_frag_into_datagram_and_validate>
 8115fea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8115fec:	697b      	ldr	r3, [r7, #20]
 8115fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115ff2:	f000 809b 	beq.w	811612c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8115ff6:	4b48      	ldr	r3, [pc, #288]	@ (8116118 <ip4_reass+0x2b0>)
 8115ff8:	881a      	ldrh	r2, [r3, #0]
 8115ffa:	8c3b      	ldrh	r3, [r7, #32]
 8115ffc:	4413      	add	r3, r2
 8115ffe:	b29a      	uxth	r2, r3
 8116000:	4b45      	ldr	r3, [pc, #276]	@ (8116118 <ip4_reass+0x2b0>)
 8116002:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8116004:	69fb      	ldr	r3, [r7, #28]
 8116006:	2b00      	cmp	r3, #0
 8116008:	d00d      	beq.n	8116026 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 811600a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 811600c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811600e:	4413      	add	r3, r2
 8116010:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8116012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116014:	8a7a      	ldrh	r2, [r7, #18]
 8116016:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8116018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811601a:	7f9b      	ldrb	r3, [r3, #30]
 811601c:	f043 0301 	orr.w	r3, r3, #1
 8116020:	b2da      	uxtb	r2, r3
 8116022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116024:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8116026:	697b      	ldr	r3, [r7, #20]
 8116028:	2b01      	cmp	r3, #1
 811602a:	d171      	bne.n	8116110 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 811602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811602e:	8b9b      	ldrh	r3, [r3, #28]
 8116030:	3314      	adds	r3, #20
 8116032:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8116034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116036:	685b      	ldr	r3, [r3, #4]
 8116038:	685b      	ldr	r3, [r3, #4]
 811603a:	681b      	ldr	r3, [r3, #0]
 811603c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 811603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116040:	685b      	ldr	r3, [r3, #4]
 8116042:	685b      	ldr	r3, [r3, #4]
 8116044:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8116046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116048:	3308      	adds	r3, #8
 811604a:	2214      	movs	r2, #20
 811604c:	4619      	mov	r1, r3
 811604e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8116050:	f00c f939 	bl	81222c6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8116054:	8a3b      	ldrh	r3, [r7, #16]
 8116056:	4618      	mov	r0, r3
 8116058:	f7fd fe48 	bl	8113cec <lwip_htons>
 811605c:	4603      	mov	r3, r0
 811605e:	461a      	mov	r2, r3
 8116060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116062:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8116064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116066:	2200      	movs	r2, #0
 8116068:	719a      	strb	r2, [r3, #6]
 811606a:	2200      	movs	r2, #0
 811606c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 811606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116070:	2200      	movs	r2, #0
 8116072:	729a      	strb	r2, [r3, #10]
 8116074:	2200      	movs	r2, #0
 8116076:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8116078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811607a:	685b      	ldr	r3, [r3, #4]
 811607c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 811607e:	e00d      	b.n	811609c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8116080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8116082:	685b      	ldr	r3, [r3, #4]
 8116084:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8116086:	2114      	movs	r1, #20
 8116088:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811608a:	f003 fbe9 	bl	8119860 <pbuf_remove_header>
      pbuf_cat(p, r);
 811608e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8116090:	6878      	ldr	r0, [r7, #4]
 8116092:	f003 fd39 	bl	8119b08 <pbuf_cat>
      r = iprh->next_pbuf;
 8116096:	68fb      	ldr	r3, [r7, #12]
 8116098:	681b      	ldr	r3, [r3, #0]
 811609a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 811609c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811609e:	2b00      	cmp	r3, #0
 81160a0:	d1ee      	bne.n	8116080 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 81160a2:	4b1e      	ldr	r3, [pc, #120]	@ (811611c <ip4_reass+0x2b4>)
 81160a4:	681b      	ldr	r3, [r3, #0]
 81160a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81160a8:	429a      	cmp	r2, r3
 81160aa:	d102      	bne.n	81160b2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 81160ac:	2300      	movs	r3, #0
 81160ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81160b0:	e010      	b.n	81160d4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 81160b2:	4b1a      	ldr	r3, [pc, #104]	@ (811611c <ip4_reass+0x2b4>)
 81160b4:	681b      	ldr	r3, [r3, #0]
 81160b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81160b8:	e007      	b.n	81160ca <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 81160ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81160bc:	681b      	ldr	r3, [r3, #0]
 81160be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81160c0:	429a      	cmp	r2, r3
 81160c2:	d006      	beq.n	81160d2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 81160c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81160c6:	681b      	ldr	r3, [r3, #0]
 81160c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81160ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81160cc:	2b00      	cmp	r3, #0
 81160ce:	d1f4      	bne.n	81160ba <ip4_reass+0x252>
 81160d0:	e000      	b.n	81160d4 <ip4_reass+0x26c>
          break;
 81160d2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 81160d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81160d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81160d8:	f7ff fd2e 	bl	8115b38 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 81160dc:	6878      	ldr	r0, [r7, #4]
 81160de:	f003 fcd3 	bl	8119a88 <pbuf_clen>
 81160e2:	4603      	mov	r3, r0
 81160e4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 81160e6:	4b0c      	ldr	r3, [pc, #48]	@ (8116118 <ip4_reass+0x2b0>)
 81160e8:	881b      	ldrh	r3, [r3, #0]
 81160ea:	8c3a      	ldrh	r2, [r7, #32]
 81160ec:	429a      	cmp	r2, r3
 81160ee:	d906      	bls.n	81160fe <ip4_reass+0x296>
 81160f0:	4b0b      	ldr	r3, [pc, #44]	@ (8116120 <ip4_reass+0x2b8>)
 81160f2:	f240 229b 	movw	r2, #667	@ 0x29b
 81160f6:	490b      	ldr	r1, [pc, #44]	@ (8116124 <ip4_reass+0x2bc>)
 81160f8:	480b      	ldr	r0, [pc, #44]	@ (8116128 <ip4_reass+0x2c0>)
 81160fa:	f00b fe43 	bl	8121d84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 81160fe:	4b06      	ldr	r3, [pc, #24]	@ (8116118 <ip4_reass+0x2b0>)
 8116100:	881a      	ldrh	r2, [r3, #0]
 8116102:	8c3b      	ldrh	r3, [r7, #32]
 8116104:	1ad3      	subs	r3, r2, r3
 8116106:	b29a      	uxth	r2, r3
 8116108:	4b03      	ldr	r3, [pc, #12]	@ (8116118 <ip4_reass+0x2b0>)
 811610a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 811610c:	687b      	ldr	r3, [r7, #4]
 811610e:	e038      	b.n	8116182 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8116110:	2300      	movs	r3, #0
 8116112:	e036      	b.n	8116182 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8116114:	bf00      	nop
 8116116:	e00a      	b.n	811612e <ip4_reass+0x2c6>
 8116118:	2400a184 	.word	0x2400a184
 811611c:	2400a180 	.word	0x2400a180
 8116120:	081256b0 	.word	0x081256b0
 8116124:	08125858 	.word	0x08125858
 8116128:	08125730 	.word	0x08125730
    goto nullreturn_ipr;
 811612c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 811612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116130:	2b00      	cmp	r3, #0
 8116132:	d106      	bne.n	8116142 <ip4_reass+0x2da>
 8116134:	4b15      	ldr	r3, [pc, #84]	@ (811618c <ip4_reass+0x324>)
 8116136:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 811613a:	4915      	ldr	r1, [pc, #84]	@ (8116190 <ip4_reass+0x328>)
 811613c:	4815      	ldr	r0, [pc, #84]	@ (8116194 <ip4_reass+0x32c>)
 811613e:	f00b fe21 	bl	8121d84 <iprintf>
  if (ipr->p == NULL) {
 8116142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116144:	685b      	ldr	r3, [r3, #4]
 8116146:	2b00      	cmp	r3, #0
 8116148:	d116      	bne.n	8116178 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 811614a:	4b13      	ldr	r3, [pc, #76]	@ (8116198 <ip4_reass+0x330>)
 811614c:	681b      	ldr	r3, [r3, #0]
 811614e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8116150:	429a      	cmp	r2, r3
 8116152:	d006      	beq.n	8116162 <ip4_reass+0x2fa>
 8116154:	4b0d      	ldr	r3, [pc, #52]	@ (811618c <ip4_reass+0x324>)
 8116156:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811615a:	4910      	ldr	r1, [pc, #64]	@ (811619c <ip4_reass+0x334>)
 811615c:	480d      	ldr	r0, [pc, #52]	@ (8116194 <ip4_reass+0x32c>)
 811615e:	f00b fe11 	bl	8121d84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8116162:	2100      	movs	r1, #0
 8116164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8116166:	f7ff fce7 	bl	8115b38 <ip_reass_dequeue_datagram>
 811616a:	e006      	b.n	811617a <ip4_reass+0x312>
    goto nullreturn;
 811616c:	bf00      	nop
 811616e:	e004      	b.n	811617a <ip4_reass+0x312>
    goto nullreturn;
 8116170:	bf00      	nop
 8116172:	e002      	b.n	811617a <ip4_reass+0x312>
      goto nullreturn;
 8116174:	bf00      	nop
 8116176:	e000      	b.n	811617a <ip4_reass+0x312>
  }

nullreturn:
 8116178:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 811617a:	6878      	ldr	r0, [r7, #4]
 811617c:	f003 fbf6 	bl	811996c <pbuf_free>
  return NULL;
 8116180:	2300      	movs	r3, #0
}
 8116182:	4618      	mov	r0, r3
 8116184:	3738      	adds	r7, #56	@ 0x38
 8116186:	46bd      	mov	sp, r7
 8116188:	bd80      	pop	{r7, pc}
 811618a:	bf00      	nop
 811618c:	081256b0 	.word	0x081256b0
 8116190:	08125874 	.word	0x08125874
 8116194:	08125730 	.word	0x08125730
 8116198:	2400a180 	.word	0x2400a180
 811619c:	08125880 	.word	0x08125880

081161a0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 81161a0:	b580      	push	{r7, lr}
 81161a2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 81161a4:	2005      	movs	r0, #5
 81161a6:	f000 fe31 	bl	8116e0c <memp_malloc>
 81161aa:	4603      	mov	r3, r0
}
 81161ac:	4618      	mov	r0, r3
 81161ae:	bd80      	pop	{r7, pc}

081161b0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 81161b0:	b580      	push	{r7, lr}
 81161b2:	b082      	sub	sp, #8
 81161b4:	af00      	add	r7, sp, #0
 81161b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 81161b8:	687b      	ldr	r3, [r7, #4]
 81161ba:	2b00      	cmp	r3, #0
 81161bc:	d106      	bne.n	81161cc <ip_frag_free_pbuf_custom_ref+0x1c>
 81161be:	4b07      	ldr	r3, [pc, #28]	@ (81161dc <ip_frag_free_pbuf_custom_ref+0x2c>)
 81161c0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 81161c4:	4906      	ldr	r1, [pc, #24]	@ (81161e0 <ip_frag_free_pbuf_custom_ref+0x30>)
 81161c6:	4807      	ldr	r0, [pc, #28]	@ (81161e4 <ip_frag_free_pbuf_custom_ref+0x34>)
 81161c8:	f00b fddc 	bl	8121d84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 81161cc:	6879      	ldr	r1, [r7, #4]
 81161ce:	2005      	movs	r0, #5
 81161d0:	f000 fe92 	bl	8116ef8 <memp_free>
}
 81161d4:	bf00      	nop
 81161d6:	3708      	adds	r7, #8
 81161d8:	46bd      	mov	sp, r7
 81161da:	bd80      	pop	{r7, pc}
 81161dc:	081256b0 	.word	0x081256b0
 81161e0:	081258a0 	.word	0x081258a0
 81161e4:	08125730 	.word	0x08125730

081161e8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 81161e8:	b580      	push	{r7, lr}
 81161ea:	b084      	sub	sp, #16
 81161ec:	af00      	add	r7, sp, #0
 81161ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 81161f0:	687b      	ldr	r3, [r7, #4]
 81161f2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 81161f4:	68fb      	ldr	r3, [r7, #12]
 81161f6:	2b00      	cmp	r3, #0
 81161f8:	d106      	bne.n	8116208 <ipfrag_free_pbuf_custom+0x20>
 81161fa:	4b11      	ldr	r3, [pc, #68]	@ (8116240 <ipfrag_free_pbuf_custom+0x58>)
 81161fc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8116200:	4910      	ldr	r1, [pc, #64]	@ (8116244 <ipfrag_free_pbuf_custom+0x5c>)
 8116202:	4811      	ldr	r0, [pc, #68]	@ (8116248 <ipfrag_free_pbuf_custom+0x60>)
 8116204:	f00b fdbe 	bl	8121d84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8116208:	68fa      	ldr	r2, [r7, #12]
 811620a:	687b      	ldr	r3, [r7, #4]
 811620c:	429a      	cmp	r2, r3
 811620e:	d006      	beq.n	811621e <ipfrag_free_pbuf_custom+0x36>
 8116210:	4b0b      	ldr	r3, [pc, #44]	@ (8116240 <ipfrag_free_pbuf_custom+0x58>)
 8116212:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8116216:	490d      	ldr	r1, [pc, #52]	@ (811624c <ipfrag_free_pbuf_custom+0x64>)
 8116218:	480b      	ldr	r0, [pc, #44]	@ (8116248 <ipfrag_free_pbuf_custom+0x60>)
 811621a:	f00b fdb3 	bl	8121d84 <iprintf>
  if (pcr->original != NULL) {
 811621e:	68fb      	ldr	r3, [r7, #12]
 8116220:	695b      	ldr	r3, [r3, #20]
 8116222:	2b00      	cmp	r3, #0
 8116224:	d004      	beq.n	8116230 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8116226:	68fb      	ldr	r3, [r7, #12]
 8116228:	695b      	ldr	r3, [r3, #20]
 811622a:	4618      	mov	r0, r3
 811622c:	f003 fb9e 	bl	811996c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8116230:	68f8      	ldr	r0, [r7, #12]
 8116232:	f7ff ffbd 	bl	81161b0 <ip_frag_free_pbuf_custom_ref>
}
 8116236:	bf00      	nop
 8116238:	3710      	adds	r7, #16
 811623a:	46bd      	mov	sp, r7
 811623c:	bd80      	pop	{r7, pc}
 811623e:	bf00      	nop
 8116240:	081256b0 	.word	0x081256b0
 8116244:	081258ac 	.word	0x081258ac
 8116248:	08125730 	.word	0x08125730
 811624c:	081258b8 	.word	0x081258b8

08116250 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8116250:	b580      	push	{r7, lr}
 8116252:	b094      	sub	sp, #80	@ 0x50
 8116254:	af02      	add	r7, sp, #8
 8116256:	60f8      	str	r0, [r7, #12]
 8116258:	60b9      	str	r1, [r7, #8]
 811625a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 811625c:	2300      	movs	r3, #0
 811625e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8116262:	68bb      	ldr	r3, [r7, #8]
 8116264:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8116266:	3b14      	subs	r3, #20
 8116268:	2b00      	cmp	r3, #0
 811626a:	da00      	bge.n	811626e <ip4_frag+0x1e>
 811626c:	3307      	adds	r3, #7
 811626e:	10db      	asrs	r3, r3, #3
 8116270:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8116272:	2314      	movs	r3, #20
 8116274:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8116276:	68fb      	ldr	r3, [r7, #12]
 8116278:	685b      	ldr	r3, [r3, #4]
 811627a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 811627c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811627e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8116280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116282:	781b      	ldrb	r3, [r3, #0]
 8116284:	f003 030f 	and.w	r3, r3, #15
 8116288:	b2db      	uxtb	r3, r3
 811628a:	009b      	lsls	r3, r3, #2
 811628c:	b2db      	uxtb	r3, r3
 811628e:	2b14      	cmp	r3, #20
 8116290:	d002      	beq.n	8116298 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8116292:	f06f 0305 	mvn.w	r3, #5
 8116296:	e110      	b.n	81164ba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8116298:	68fb      	ldr	r3, [r7, #12]
 811629a:	895b      	ldrh	r3, [r3, #10]
 811629c:	2b13      	cmp	r3, #19
 811629e:	d809      	bhi.n	81162b4 <ip4_frag+0x64>
 81162a0:	4b88      	ldr	r3, [pc, #544]	@ (81164c4 <ip4_frag+0x274>)
 81162a2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 81162a6:	4988      	ldr	r1, [pc, #544]	@ (81164c8 <ip4_frag+0x278>)
 81162a8:	4888      	ldr	r0, [pc, #544]	@ (81164cc <ip4_frag+0x27c>)
 81162aa:	f00b fd6b 	bl	8121d84 <iprintf>
 81162ae:	f06f 0305 	mvn.w	r3, #5
 81162b2:	e102      	b.n	81164ba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 81162b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81162b6:	88db      	ldrh	r3, [r3, #6]
 81162b8:	b29b      	uxth	r3, r3
 81162ba:	4618      	mov	r0, r3
 81162bc:	f7fd fd16 	bl	8113cec <lwip_htons>
 81162c0:	4603      	mov	r3, r0
 81162c2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 81162c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81162c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81162ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 81162ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81162d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81162d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 81162d6:	68fb      	ldr	r3, [r7, #12]
 81162d8:	891b      	ldrh	r3, [r3, #8]
 81162da:	3b14      	subs	r3, #20
 81162dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 81162e0:	e0e1      	b.n	81164a6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 81162e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81162e4:	00db      	lsls	r3, r3, #3
 81162e6:	b29b      	uxth	r3, r3
 81162e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81162ec:	4293      	cmp	r3, r2
 81162ee:	bf28      	it	cs
 81162f0:	4613      	movcs	r3, r2
 81162f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 81162f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81162f8:	2114      	movs	r1, #20
 81162fa:	200e      	movs	r0, #14
 81162fc:	f003 f854 	bl	81193a8 <pbuf_alloc>
 8116300:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8116302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116304:	2b00      	cmp	r3, #0
 8116306:	f000 80d5 	beq.w	81164b4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 811630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811630c:	895b      	ldrh	r3, [r3, #10]
 811630e:	2b13      	cmp	r3, #19
 8116310:	d806      	bhi.n	8116320 <ip4_frag+0xd0>
 8116312:	4b6c      	ldr	r3, [pc, #432]	@ (81164c4 <ip4_frag+0x274>)
 8116314:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8116318:	496d      	ldr	r1, [pc, #436]	@ (81164d0 <ip4_frag+0x280>)
 811631a:	486c      	ldr	r0, [pc, #432]	@ (81164cc <ip4_frag+0x27c>)
 811631c:	f00b fd32 	bl	8121d84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8116320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116322:	685b      	ldr	r3, [r3, #4]
 8116324:	2214      	movs	r2, #20
 8116326:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8116328:	4618      	mov	r0, r3
 811632a:	f00b ffcc 	bl	81222c6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 811632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116330:	685b      	ldr	r3, [r3, #4]
 8116332:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8116334:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8116336:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 811633a:	e064      	b.n	8116406 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 811633c:	68fb      	ldr	r3, [r7, #12]
 811633e:	895a      	ldrh	r2, [r3, #10]
 8116340:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8116342:	1ad3      	subs	r3, r2, r3
 8116344:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8116346:	68fb      	ldr	r3, [r7, #12]
 8116348:	895b      	ldrh	r3, [r3, #10]
 811634a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811634c:	429a      	cmp	r2, r3
 811634e:	d906      	bls.n	811635e <ip4_frag+0x10e>
 8116350:	4b5c      	ldr	r3, [pc, #368]	@ (81164c4 <ip4_frag+0x274>)
 8116352:	f240 322d 	movw	r2, #813	@ 0x32d
 8116356:	495f      	ldr	r1, [pc, #380]	@ (81164d4 <ip4_frag+0x284>)
 8116358:	485c      	ldr	r0, [pc, #368]	@ (81164cc <ip4_frag+0x27c>)
 811635a:	f00b fd13 	bl	8121d84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 811635e:	8bfa      	ldrh	r2, [r7, #30]
 8116360:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8116364:	4293      	cmp	r3, r2
 8116366:	bf28      	it	cs
 8116368:	4613      	movcs	r3, r2
 811636a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 811636e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8116372:	2b00      	cmp	r3, #0
 8116374:	d105      	bne.n	8116382 <ip4_frag+0x132>
        poff = 0;
 8116376:	2300      	movs	r3, #0
 8116378:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 811637a:	68fb      	ldr	r3, [r7, #12]
 811637c:	681b      	ldr	r3, [r3, #0]
 811637e:	60fb      	str	r3, [r7, #12]
        continue;
 8116380:	e041      	b.n	8116406 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8116382:	f7ff ff0d 	bl	81161a0 <ip_frag_alloc_pbuf_custom_ref>
 8116386:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8116388:	69bb      	ldr	r3, [r7, #24]
 811638a:	2b00      	cmp	r3, #0
 811638c:	d103      	bne.n	8116396 <ip4_frag+0x146>
        pbuf_free(rambuf);
 811638e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8116390:	f003 faec 	bl	811996c <pbuf_free>
        goto memerr;
 8116394:	e08f      	b.n	81164b6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8116396:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8116398:	68fb      	ldr	r3, [r7, #12]
 811639a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 811639c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811639e:	4413      	add	r3, r2
 81163a0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 81163a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 81163a8:	9201      	str	r2, [sp, #4]
 81163aa:	9300      	str	r3, [sp, #0]
 81163ac:	4603      	mov	r3, r0
 81163ae:	2241      	movs	r2, #65	@ 0x41
 81163b0:	2000      	movs	r0, #0
 81163b2:	f003 f923 	bl	81195fc <pbuf_alloced_custom>
 81163b6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 81163b8:	697b      	ldr	r3, [r7, #20]
 81163ba:	2b00      	cmp	r3, #0
 81163bc:	d106      	bne.n	81163cc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 81163be:	69b8      	ldr	r0, [r7, #24]
 81163c0:	f7ff fef6 	bl	81161b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 81163c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81163c6:	f003 fad1 	bl	811996c <pbuf_free>
        goto memerr;
 81163ca:	e074      	b.n	81164b6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 81163cc:	68f8      	ldr	r0, [r7, #12]
 81163ce:	f003 fb73 	bl	8119ab8 <pbuf_ref>
      pcr->original = p;
 81163d2:	69bb      	ldr	r3, [r7, #24]
 81163d4:	68fa      	ldr	r2, [r7, #12]
 81163d6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 81163d8:	69bb      	ldr	r3, [r7, #24]
 81163da:	4a3f      	ldr	r2, [pc, #252]	@ (81164d8 <ip4_frag+0x288>)
 81163dc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 81163de:	6979      	ldr	r1, [r7, #20]
 81163e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81163e2:	f003 fb91 	bl	8119b08 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 81163e6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 81163ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 81163ee:	1ad3      	subs	r3, r2, r3
 81163f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 81163f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 81163f8:	2b00      	cmp	r3, #0
 81163fa:	d004      	beq.n	8116406 <ip4_frag+0x1b6>
        poff = 0;
 81163fc:	2300      	movs	r3, #0
 81163fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8116400:	68fb      	ldr	r3, [r7, #12]
 8116402:	681b      	ldr	r3, [r3, #0]
 8116404:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8116406:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811640a:	2b00      	cmp	r3, #0
 811640c:	d196      	bne.n	811633c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 811640e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8116410:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8116414:	4413      	add	r3, r2
 8116416:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8116418:	68bb      	ldr	r3, [r7, #8]
 811641a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811641c:	f1a3 0213 	sub.w	r2, r3, #19
 8116420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8116424:	429a      	cmp	r2, r3
 8116426:	bfcc      	ite	gt
 8116428:	2301      	movgt	r3, #1
 811642a:	2300      	movle	r3, #0
 811642c:	b2db      	uxtb	r3, r3
 811642e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8116430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8116434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8116438:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 811643a:	6a3b      	ldr	r3, [r7, #32]
 811643c:	2b00      	cmp	r3, #0
 811643e:	d002      	beq.n	8116446 <ip4_frag+0x1f6>
 8116440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116442:	2b00      	cmp	r3, #0
 8116444:	d003      	beq.n	811644e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8116446:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8116448:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 811644c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 811644e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8116450:	4618      	mov	r0, r3
 8116452:	f7fd fc4b 	bl	8113cec <lwip_htons>
 8116456:	4603      	mov	r3, r0
 8116458:	461a      	mov	r2, r3
 811645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811645c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 811645e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8116460:	3314      	adds	r3, #20
 8116462:	b29b      	uxth	r3, r3
 8116464:	4618      	mov	r0, r3
 8116466:	f7fd fc41 	bl	8113cec <lwip_htons>
 811646a:	4603      	mov	r3, r0
 811646c:	461a      	mov	r2, r3
 811646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116470:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8116472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116474:	2200      	movs	r2, #0
 8116476:	729a      	strb	r2, [r3, #10]
 8116478:	2200      	movs	r2, #0
 811647a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 811647c:	68bb      	ldr	r3, [r7, #8]
 811647e:	695b      	ldr	r3, [r3, #20]
 8116480:	687a      	ldr	r2, [r7, #4]
 8116482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8116484:	68b8      	ldr	r0, [r7, #8]
 8116486:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8116488:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811648a:	f003 fa6f 	bl	811996c <pbuf_free>
    left = (u16_t)(left - fragsize);
 811648e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8116492:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8116494:	1ad3      	subs	r3, r2, r3
 8116496:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 811649a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 811649e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81164a0:	4413      	add	r3, r2
 81164a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 81164a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81164aa:	2b00      	cmp	r3, #0
 81164ac:	f47f af19 	bne.w	81162e2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 81164b0:	2300      	movs	r3, #0
 81164b2:	e002      	b.n	81164ba <ip4_frag+0x26a>
      goto memerr;
 81164b4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 81164b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 81164ba:	4618      	mov	r0, r3
 81164bc:	3748      	adds	r7, #72	@ 0x48
 81164be:	46bd      	mov	sp, r7
 81164c0:	bd80      	pop	{r7, pc}
 81164c2:	bf00      	nop
 81164c4:	081256b0 	.word	0x081256b0
 81164c8:	081258c4 	.word	0x081258c4
 81164cc:	08125730 	.word	0x08125730
 81164d0:	081258e0 	.word	0x081258e0
 81164d4:	08125900 	.word	0x08125900
 81164d8:	081161e9 	.word	0x081161e9

081164dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 81164dc:	b480      	push	{r7}
 81164de:	b083      	sub	sp, #12
 81164e0:	af00      	add	r7, sp, #0
 81164e2:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 81164e4:	4b04      	ldr	r3, [pc, #16]	@ (81164f8 <ptr_to_mem+0x1c>)
 81164e6:	681a      	ldr	r2, [r3, #0]
 81164e8:	687b      	ldr	r3, [r7, #4]
 81164ea:	4413      	add	r3, r2
}
 81164ec:	4618      	mov	r0, r3
 81164ee:	370c      	adds	r7, #12
 81164f0:	46bd      	mov	sp, r7
 81164f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81164f6:	4770      	bx	lr
 81164f8:	2400a188 	.word	0x2400a188

081164fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 81164fc:	b480      	push	{r7}
 81164fe:	b083      	sub	sp, #12
 8116500:	af00      	add	r7, sp, #0
 8116502:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8116504:	4b04      	ldr	r3, [pc, #16]	@ (8116518 <mem_to_ptr+0x1c>)
 8116506:	681b      	ldr	r3, [r3, #0]
 8116508:	687a      	ldr	r2, [r7, #4]
 811650a:	1ad3      	subs	r3, r2, r3
}
 811650c:	4618      	mov	r0, r3
 811650e:	370c      	adds	r7, #12
 8116510:	46bd      	mov	sp, r7
 8116512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116516:	4770      	bx	lr
 8116518:	2400a188 	.word	0x2400a188

0811651c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 811651c:	b590      	push	{r4, r7, lr}
 811651e:	b085      	sub	sp, #20
 8116520:	af00      	add	r7, sp, #0
 8116522:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8116524:	4b45      	ldr	r3, [pc, #276]	@ (811663c <plug_holes+0x120>)
 8116526:	681b      	ldr	r3, [r3, #0]
 8116528:	687a      	ldr	r2, [r7, #4]
 811652a:	429a      	cmp	r2, r3
 811652c:	d206      	bcs.n	811653c <plug_holes+0x20>
 811652e:	4b44      	ldr	r3, [pc, #272]	@ (8116640 <plug_holes+0x124>)
 8116530:	f240 12df 	movw	r2, #479	@ 0x1df
 8116534:	4943      	ldr	r1, [pc, #268]	@ (8116644 <plug_holes+0x128>)
 8116536:	4844      	ldr	r0, [pc, #272]	@ (8116648 <plug_holes+0x12c>)
 8116538:	f00b fc24 	bl	8121d84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 811653c:	4b43      	ldr	r3, [pc, #268]	@ (811664c <plug_holes+0x130>)
 811653e:	681b      	ldr	r3, [r3, #0]
 8116540:	687a      	ldr	r2, [r7, #4]
 8116542:	429a      	cmp	r2, r3
 8116544:	d306      	bcc.n	8116554 <plug_holes+0x38>
 8116546:	4b3e      	ldr	r3, [pc, #248]	@ (8116640 <plug_holes+0x124>)
 8116548:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 811654c:	4940      	ldr	r1, [pc, #256]	@ (8116650 <plug_holes+0x134>)
 811654e:	483e      	ldr	r0, [pc, #248]	@ (8116648 <plug_holes+0x12c>)
 8116550:	f00b fc18 	bl	8121d84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8116554:	687b      	ldr	r3, [r7, #4]
 8116556:	7a1b      	ldrb	r3, [r3, #8]
 8116558:	2b00      	cmp	r3, #0
 811655a:	d006      	beq.n	811656a <plug_holes+0x4e>
 811655c:	4b38      	ldr	r3, [pc, #224]	@ (8116640 <plug_holes+0x124>)
 811655e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8116562:	493c      	ldr	r1, [pc, #240]	@ (8116654 <plug_holes+0x138>)
 8116564:	4838      	ldr	r0, [pc, #224]	@ (8116648 <plug_holes+0x12c>)
 8116566:	f00b fc0d 	bl	8121d84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 811656a:	687b      	ldr	r3, [r7, #4]
 811656c:	681b      	ldr	r3, [r3, #0]
 811656e:	4a3a      	ldr	r2, [pc, #232]	@ (8116658 <plug_holes+0x13c>)
 8116570:	4293      	cmp	r3, r2
 8116572:	d906      	bls.n	8116582 <plug_holes+0x66>
 8116574:	4b32      	ldr	r3, [pc, #200]	@ (8116640 <plug_holes+0x124>)
 8116576:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 811657a:	4938      	ldr	r1, [pc, #224]	@ (811665c <plug_holes+0x140>)
 811657c:	4832      	ldr	r0, [pc, #200]	@ (8116648 <plug_holes+0x12c>)
 811657e:	f00b fc01 	bl	8121d84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8116582:	687b      	ldr	r3, [r7, #4]
 8116584:	681b      	ldr	r3, [r3, #0]
 8116586:	4618      	mov	r0, r3
 8116588:	f7ff ffa8 	bl	81164dc <ptr_to_mem>
 811658c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 811658e:	687a      	ldr	r2, [r7, #4]
 8116590:	68fb      	ldr	r3, [r7, #12]
 8116592:	429a      	cmp	r2, r3
 8116594:	d024      	beq.n	81165e0 <plug_holes+0xc4>
 8116596:	68fb      	ldr	r3, [r7, #12]
 8116598:	7a1b      	ldrb	r3, [r3, #8]
 811659a:	2b00      	cmp	r3, #0
 811659c:	d120      	bne.n	81165e0 <plug_holes+0xc4>
 811659e:	4b2b      	ldr	r3, [pc, #172]	@ (811664c <plug_holes+0x130>)
 81165a0:	681b      	ldr	r3, [r3, #0]
 81165a2:	68fa      	ldr	r2, [r7, #12]
 81165a4:	429a      	cmp	r2, r3
 81165a6:	d01b      	beq.n	81165e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 81165a8:	4b2d      	ldr	r3, [pc, #180]	@ (8116660 <plug_holes+0x144>)
 81165aa:	681b      	ldr	r3, [r3, #0]
 81165ac:	68fa      	ldr	r2, [r7, #12]
 81165ae:	429a      	cmp	r2, r3
 81165b0:	d102      	bne.n	81165b8 <plug_holes+0x9c>
      lfree = mem;
 81165b2:	4a2b      	ldr	r2, [pc, #172]	@ (8116660 <plug_holes+0x144>)
 81165b4:	687b      	ldr	r3, [r7, #4]
 81165b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 81165b8:	68fb      	ldr	r3, [r7, #12]
 81165ba:	681a      	ldr	r2, [r3, #0]
 81165bc:	687b      	ldr	r3, [r7, #4]
 81165be:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 81165c0:	68fb      	ldr	r3, [r7, #12]
 81165c2:	681b      	ldr	r3, [r3, #0]
 81165c4:	4a24      	ldr	r2, [pc, #144]	@ (8116658 <plug_holes+0x13c>)
 81165c6:	4293      	cmp	r3, r2
 81165c8:	d00a      	beq.n	81165e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 81165ca:	68fb      	ldr	r3, [r7, #12]
 81165cc:	681b      	ldr	r3, [r3, #0]
 81165ce:	4618      	mov	r0, r3
 81165d0:	f7ff ff84 	bl	81164dc <ptr_to_mem>
 81165d4:	4604      	mov	r4, r0
 81165d6:	6878      	ldr	r0, [r7, #4]
 81165d8:	f7ff ff90 	bl	81164fc <mem_to_ptr>
 81165dc:	4603      	mov	r3, r0
 81165de:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 81165e0:	687b      	ldr	r3, [r7, #4]
 81165e2:	685b      	ldr	r3, [r3, #4]
 81165e4:	4618      	mov	r0, r3
 81165e6:	f7ff ff79 	bl	81164dc <ptr_to_mem>
 81165ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 81165ec:	68ba      	ldr	r2, [r7, #8]
 81165ee:	687b      	ldr	r3, [r7, #4]
 81165f0:	429a      	cmp	r2, r3
 81165f2:	d01f      	beq.n	8116634 <plug_holes+0x118>
 81165f4:	68bb      	ldr	r3, [r7, #8]
 81165f6:	7a1b      	ldrb	r3, [r3, #8]
 81165f8:	2b00      	cmp	r3, #0
 81165fa:	d11b      	bne.n	8116634 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 81165fc:	4b18      	ldr	r3, [pc, #96]	@ (8116660 <plug_holes+0x144>)
 81165fe:	681b      	ldr	r3, [r3, #0]
 8116600:	687a      	ldr	r2, [r7, #4]
 8116602:	429a      	cmp	r2, r3
 8116604:	d102      	bne.n	811660c <plug_holes+0xf0>
      lfree = pmem;
 8116606:	4a16      	ldr	r2, [pc, #88]	@ (8116660 <plug_holes+0x144>)
 8116608:	68bb      	ldr	r3, [r7, #8]
 811660a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 811660c:	687b      	ldr	r3, [r7, #4]
 811660e:	681a      	ldr	r2, [r3, #0]
 8116610:	68bb      	ldr	r3, [r7, #8]
 8116612:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8116614:	687b      	ldr	r3, [r7, #4]
 8116616:	681b      	ldr	r3, [r3, #0]
 8116618:	4a0f      	ldr	r2, [pc, #60]	@ (8116658 <plug_holes+0x13c>)
 811661a:	4293      	cmp	r3, r2
 811661c:	d00a      	beq.n	8116634 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 811661e:	687b      	ldr	r3, [r7, #4]
 8116620:	681b      	ldr	r3, [r3, #0]
 8116622:	4618      	mov	r0, r3
 8116624:	f7ff ff5a 	bl	81164dc <ptr_to_mem>
 8116628:	4604      	mov	r4, r0
 811662a:	68b8      	ldr	r0, [r7, #8]
 811662c:	f7ff ff66 	bl	81164fc <mem_to_ptr>
 8116630:	4603      	mov	r3, r0
 8116632:	6063      	str	r3, [r4, #4]
    }
  }
}
 8116634:	bf00      	nop
 8116636:	3714      	adds	r7, #20
 8116638:	46bd      	mov	sp, r7
 811663a:	bd90      	pop	{r4, r7, pc}
 811663c:	2400a188 	.word	0x2400a188
 8116640:	08125910 	.word	0x08125910
 8116644:	08125978 	.word	0x08125978
 8116648:	08125990 	.word	0x08125990
 811664c:	2400a18c 	.word	0x2400a18c
 8116650:	081259b8 	.word	0x081259b8
 8116654:	081259d4 	.word	0x081259d4
 8116658:	0001ffe8 	.word	0x0001ffe8
 811665c:	081259f0 	.word	0x081259f0
 8116660:	2400a194 	.word	0x2400a194

08116664 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8116664:	b580      	push	{r7, lr}
 8116666:	b082      	sub	sp, #8
 8116668:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 811666a:	4b1b      	ldr	r3, [pc, #108]	@ (81166d8 <mem_init+0x74>)
 811666c:	4a1b      	ldr	r2, [pc, #108]	@ (81166dc <mem_init+0x78>)
 811666e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8116670:	4b19      	ldr	r3, [pc, #100]	@ (81166d8 <mem_init+0x74>)
 8116672:	681b      	ldr	r3, [r3, #0]
 8116674:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8116676:	687b      	ldr	r3, [r7, #4]
 8116678:	4a19      	ldr	r2, [pc, #100]	@ (81166e0 <mem_init+0x7c>)
 811667a:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 811667c:	687b      	ldr	r3, [r7, #4]
 811667e:	2200      	movs	r2, #0
 8116680:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8116682:	687b      	ldr	r3, [r7, #4]
 8116684:	2200      	movs	r2, #0
 8116686:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8116688:	4815      	ldr	r0, [pc, #84]	@ (81166e0 <mem_init+0x7c>)
 811668a:	f7ff ff27 	bl	81164dc <ptr_to_mem>
 811668e:	4603      	mov	r3, r0
 8116690:	4a14      	ldr	r2, [pc, #80]	@ (81166e4 <mem_init+0x80>)
 8116692:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8116694:	4b13      	ldr	r3, [pc, #76]	@ (81166e4 <mem_init+0x80>)
 8116696:	681b      	ldr	r3, [r3, #0]
 8116698:	2201      	movs	r2, #1
 811669a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 811669c:	4b11      	ldr	r3, [pc, #68]	@ (81166e4 <mem_init+0x80>)
 811669e:	681b      	ldr	r3, [r3, #0]
 81166a0:	4a0f      	ldr	r2, [pc, #60]	@ (81166e0 <mem_init+0x7c>)
 81166a2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 81166a4:	4b0f      	ldr	r3, [pc, #60]	@ (81166e4 <mem_init+0x80>)
 81166a6:	681b      	ldr	r3, [r3, #0]
 81166a8:	4a0d      	ldr	r2, [pc, #52]	@ (81166e0 <mem_init+0x7c>)
 81166aa:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 81166ac:	4b0a      	ldr	r3, [pc, #40]	@ (81166d8 <mem_init+0x74>)
 81166ae:	681b      	ldr	r3, [r3, #0]
 81166b0:	4a0d      	ldr	r2, [pc, #52]	@ (81166e8 <mem_init+0x84>)
 81166b2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 81166b4:	480d      	ldr	r0, [pc, #52]	@ (81166ec <mem_init+0x88>)
 81166b6:	f003 fce9 	bl	811a08c <sys_mutex_new>
 81166ba:	4603      	mov	r3, r0
 81166bc:	2b00      	cmp	r3, #0
 81166be:	d006      	beq.n	81166ce <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 81166c0:	4b0b      	ldr	r3, [pc, #44]	@ (81166f0 <mem_init+0x8c>)
 81166c2:	f240 221f 	movw	r2, #543	@ 0x21f
 81166c6:	490b      	ldr	r1, [pc, #44]	@ (81166f4 <mem_init+0x90>)
 81166c8:	480b      	ldr	r0, [pc, #44]	@ (81166f8 <mem_init+0x94>)
 81166ca:	f00b fb5b 	bl	8121d84 <iprintf>
  }
}
 81166ce:	bf00      	nop
 81166d0:	3708      	adds	r7, #8
 81166d2:	46bd      	mov	sp, r7
 81166d4:	bd80      	pop	{r7, pc}
 81166d6:	bf00      	nop
 81166d8:	2400a188 	.word	0x2400a188
 81166dc:	30020000 	.word	0x30020000
 81166e0:	0001ffe8 	.word	0x0001ffe8
 81166e4:	2400a18c 	.word	0x2400a18c
 81166e8:	2400a194 	.word	0x2400a194
 81166ec:	2400a190 	.word	0x2400a190
 81166f0:	08125910 	.word	0x08125910
 81166f4:	08125a1c 	.word	0x08125a1c
 81166f8:	08125990 	.word	0x08125990

081166fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 81166fc:	b580      	push	{r7, lr}
 81166fe:	b086      	sub	sp, #24
 8116700:	af00      	add	r7, sp, #0
 8116702:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8116704:	6878      	ldr	r0, [r7, #4]
 8116706:	f7ff fef9 	bl	81164fc <mem_to_ptr>
 811670a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 811670c:	687b      	ldr	r3, [r7, #4]
 811670e:	681b      	ldr	r3, [r3, #0]
 8116710:	4618      	mov	r0, r3
 8116712:	f7ff fee3 	bl	81164dc <ptr_to_mem>
 8116716:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8116718:	687b      	ldr	r3, [r7, #4]
 811671a:	685b      	ldr	r3, [r3, #4]
 811671c:	4618      	mov	r0, r3
 811671e:	f7ff fedd 	bl	81164dc <ptr_to_mem>
 8116722:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8116724:	687b      	ldr	r3, [r7, #4]
 8116726:	681b      	ldr	r3, [r3, #0]
 8116728:	4a11      	ldr	r2, [pc, #68]	@ (8116770 <mem_link_valid+0x74>)
 811672a:	4293      	cmp	r3, r2
 811672c:	d818      	bhi.n	8116760 <mem_link_valid+0x64>
 811672e:	687b      	ldr	r3, [r7, #4]
 8116730:	685b      	ldr	r3, [r3, #4]
 8116732:	4a0f      	ldr	r2, [pc, #60]	@ (8116770 <mem_link_valid+0x74>)
 8116734:	4293      	cmp	r3, r2
 8116736:	d813      	bhi.n	8116760 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8116738:	687b      	ldr	r3, [r7, #4]
 811673a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 811673c:	697a      	ldr	r2, [r7, #20]
 811673e:	429a      	cmp	r2, r3
 8116740:	d004      	beq.n	811674c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8116742:	68fb      	ldr	r3, [r7, #12]
 8116744:	681b      	ldr	r3, [r3, #0]
 8116746:	697a      	ldr	r2, [r7, #20]
 8116748:	429a      	cmp	r2, r3
 811674a:	d109      	bne.n	8116760 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 811674c:	4b09      	ldr	r3, [pc, #36]	@ (8116774 <mem_link_valid+0x78>)
 811674e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8116750:	693a      	ldr	r2, [r7, #16]
 8116752:	429a      	cmp	r2, r3
 8116754:	d006      	beq.n	8116764 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8116756:	693b      	ldr	r3, [r7, #16]
 8116758:	685b      	ldr	r3, [r3, #4]
 811675a:	697a      	ldr	r2, [r7, #20]
 811675c:	429a      	cmp	r2, r3
 811675e:	d001      	beq.n	8116764 <mem_link_valid+0x68>
    return 0;
 8116760:	2300      	movs	r3, #0
 8116762:	e000      	b.n	8116766 <mem_link_valid+0x6a>
  }
  return 1;
 8116764:	2301      	movs	r3, #1
}
 8116766:	4618      	mov	r0, r3
 8116768:	3718      	adds	r7, #24
 811676a:	46bd      	mov	sp, r7
 811676c:	bd80      	pop	{r7, pc}
 811676e:	bf00      	nop
 8116770:	0001ffe8 	.word	0x0001ffe8
 8116774:	2400a18c 	.word	0x2400a18c

08116778 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8116778:	b580      	push	{r7, lr}
 811677a:	b088      	sub	sp, #32
 811677c:	af00      	add	r7, sp, #0
 811677e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8116780:	687b      	ldr	r3, [r7, #4]
 8116782:	2b00      	cmp	r3, #0
 8116784:	d070      	beq.n	8116868 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8116786:	687b      	ldr	r3, [r7, #4]
 8116788:	f003 0303 	and.w	r3, r3, #3
 811678c:	2b00      	cmp	r3, #0
 811678e:	d00d      	beq.n	81167ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8116790:	4b37      	ldr	r3, [pc, #220]	@ (8116870 <mem_free+0xf8>)
 8116792:	f240 2273 	movw	r2, #627	@ 0x273
 8116796:	4937      	ldr	r1, [pc, #220]	@ (8116874 <mem_free+0xfc>)
 8116798:	4837      	ldr	r0, [pc, #220]	@ (8116878 <mem_free+0x100>)
 811679a:	f00b faf3 	bl	8121d84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811679e:	f003 fcc7 	bl	811a130 <sys_arch_protect>
 81167a2:	60f8      	str	r0, [r7, #12]
 81167a4:	68f8      	ldr	r0, [r7, #12]
 81167a6:	f003 fcd1 	bl	811a14c <sys_arch_unprotect>
    return;
 81167aa:	e05e      	b.n	811686a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 81167ac:	687b      	ldr	r3, [r7, #4]
 81167ae:	3b0c      	subs	r3, #12
 81167b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 81167b2:	4b32      	ldr	r3, [pc, #200]	@ (811687c <mem_free+0x104>)
 81167b4:	681b      	ldr	r3, [r3, #0]
 81167b6:	69fa      	ldr	r2, [r7, #28]
 81167b8:	429a      	cmp	r2, r3
 81167ba:	d306      	bcc.n	81167ca <mem_free+0x52>
 81167bc:	687b      	ldr	r3, [r7, #4]
 81167be:	f103 020c 	add.w	r2, r3, #12
 81167c2:	4b2f      	ldr	r3, [pc, #188]	@ (8116880 <mem_free+0x108>)
 81167c4:	681b      	ldr	r3, [r3, #0]
 81167c6:	429a      	cmp	r2, r3
 81167c8:	d90d      	bls.n	81167e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 81167ca:	4b29      	ldr	r3, [pc, #164]	@ (8116870 <mem_free+0xf8>)
 81167cc:	f240 227f 	movw	r2, #639	@ 0x27f
 81167d0:	492c      	ldr	r1, [pc, #176]	@ (8116884 <mem_free+0x10c>)
 81167d2:	4829      	ldr	r0, [pc, #164]	@ (8116878 <mem_free+0x100>)
 81167d4:	f00b fad6 	bl	8121d84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 81167d8:	f003 fcaa 	bl	811a130 <sys_arch_protect>
 81167dc:	6138      	str	r0, [r7, #16]
 81167de:	6938      	ldr	r0, [r7, #16]
 81167e0:	f003 fcb4 	bl	811a14c <sys_arch_unprotect>
    return;
 81167e4:	e041      	b.n	811686a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 81167e6:	4828      	ldr	r0, [pc, #160]	@ (8116888 <mem_free+0x110>)
 81167e8:	f003 fc66 	bl	811a0b8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 81167ec:	69fb      	ldr	r3, [r7, #28]
 81167ee:	7a1b      	ldrb	r3, [r3, #8]
 81167f0:	2b00      	cmp	r3, #0
 81167f2:	d110      	bne.n	8116816 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 81167f4:	4b1e      	ldr	r3, [pc, #120]	@ (8116870 <mem_free+0xf8>)
 81167f6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 81167fa:	4924      	ldr	r1, [pc, #144]	@ (811688c <mem_free+0x114>)
 81167fc:	481e      	ldr	r0, [pc, #120]	@ (8116878 <mem_free+0x100>)
 81167fe:	f00b fac1 	bl	8121d84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8116802:	4821      	ldr	r0, [pc, #132]	@ (8116888 <mem_free+0x110>)
 8116804:	f003 fc67 	bl	811a0d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8116808:	f003 fc92 	bl	811a130 <sys_arch_protect>
 811680c:	6178      	str	r0, [r7, #20]
 811680e:	6978      	ldr	r0, [r7, #20]
 8116810:	f003 fc9c 	bl	811a14c <sys_arch_unprotect>
    return;
 8116814:	e029      	b.n	811686a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8116816:	69f8      	ldr	r0, [r7, #28]
 8116818:	f7ff ff70 	bl	81166fc <mem_link_valid>
 811681c:	4603      	mov	r3, r0
 811681e:	2b00      	cmp	r3, #0
 8116820:	d110      	bne.n	8116844 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8116822:	4b13      	ldr	r3, [pc, #76]	@ (8116870 <mem_free+0xf8>)
 8116824:	f240 2295 	movw	r2, #661	@ 0x295
 8116828:	4919      	ldr	r1, [pc, #100]	@ (8116890 <mem_free+0x118>)
 811682a:	4813      	ldr	r0, [pc, #76]	@ (8116878 <mem_free+0x100>)
 811682c:	f00b faaa 	bl	8121d84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8116830:	4815      	ldr	r0, [pc, #84]	@ (8116888 <mem_free+0x110>)
 8116832:	f003 fc50 	bl	811a0d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8116836:	f003 fc7b 	bl	811a130 <sys_arch_protect>
 811683a:	61b8      	str	r0, [r7, #24]
 811683c:	69b8      	ldr	r0, [r7, #24]
 811683e:	f003 fc85 	bl	811a14c <sys_arch_unprotect>
    return;
 8116842:	e012      	b.n	811686a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8116844:	69fb      	ldr	r3, [r7, #28]
 8116846:	2200      	movs	r2, #0
 8116848:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 811684a:	4b12      	ldr	r3, [pc, #72]	@ (8116894 <mem_free+0x11c>)
 811684c:	681b      	ldr	r3, [r3, #0]
 811684e:	69fa      	ldr	r2, [r7, #28]
 8116850:	429a      	cmp	r2, r3
 8116852:	d202      	bcs.n	811685a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8116854:	4a0f      	ldr	r2, [pc, #60]	@ (8116894 <mem_free+0x11c>)
 8116856:	69fb      	ldr	r3, [r7, #28]
 8116858:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 811685a:	69f8      	ldr	r0, [r7, #28]
 811685c:	f7ff fe5e 	bl	811651c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8116860:	4809      	ldr	r0, [pc, #36]	@ (8116888 <mem_free+0x110>)
 8116862:	f003 fc38 	bl	811a0d6 <sys_mutex_unlock>
 8116866:	e000      	b.n	811686a <mem_free+0xf2>
    return;
 8116868:	bf00      	nop
}
 811686a:	3720      	adds	r7, #32
 811686c:	46bd      	mov	sp, r7
 811686e:	bd80      	pop	{r7, pc}
 8116870:	08125910 	.word	0x08125910
 8116874:	08125a38 	.word	0x08125a38
 8116878:	08125990 	.word	0x08125990
 811687c:	2400a188 	.word	0x2400a188
 8116880:	2400a18c 	.word	0x2400a18c
 8116884:	08125a5c 	.word	0x08125a5c
 8116888:	2400a190 	.word	0x2400a190
 811688c:	08125a78 	.word	0x08125a78
 8116890:	08125aa0 	.word	0x08125aa0
 8116894:	2400a194 	.word	0x2400a194

08116898 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8116898:	b580      	push	{r7, lr}
 811689a:	b08a      	sub	sp, #40	@ 0x28
 811689c:	af00      	add	r7, sp, #0
 811689e:	6078      	str	r0, [r7, #4]
 81168a0:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 81168a2:	683b      	ldr	r3, [r7, #0]
 81168a4:	3303      	adds	r3, #3
 81168a6:	f023 0303 	bic.w	r3, r3, #3
 81168aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 81168ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81168ae:	2b0b      	cmp	r3, #11
 81168b0:	d801      	bhi.n	81168b6 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 81168b2:	230c      	movs	r3, #12
 81168b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 81168b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81168b8:	4a6e      	ldr	r2, [pc, #440]	@ (8116a74 <mem_trim+0x1dc>)
 81168ba:	4293      	cmp	r3, r2
 81168bc:	d803      	bhi.n	81168c6 <mem_trim+0x2e>
 81168be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81168c0:	683b      	ldr	r3, [r7, #0]
 81168c2:	429a      	cmp	r2, r3
 81168c4:	d201      	bcs.n	81168ca <mem_trim+0x32>
    return NULL;
 81168c6:	2300      	movs	r3, #0
 81168c8:	e0d0      	b.n	8116a6c <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 81168ca:	4b6b      	ldr	r3, [pc, #428]	@ (8116a78 <mem_trim+0x1e0>)
 81168cc:	681b      	ldr	r3, [r3, #0]
 81168ce:	687a      	ldr	r2, [r7, #4]
 81168d0:	429a      	cmp	r2, r3
 81168d2:	d304      	bcc.n	81168de <mem_trim+0x46>
 81168d4:	4b69      	ldr	r3, [pc, #420]	@ (8116a7c <mem_trim+0x1e4>)
 81168d6:	681b      	ldr	r3, [r3, #0]
 81168d8:	687a      	ldr	r2, [r7, #4]
 81168da:	429a      	cmp	r2, r3
 81168dc:	d306      	bcc.n	81168ec <mem_trim+0x54>
 81168de:	4b68      	ldr	r3, [pc, #416]	@ (8116a80 <mem_trim+0x1e8>)
 81168e0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 81168e4:	4967      	ldr	r1, [pc, #412]	@ (8116a84 <mem_trim+0x1ec>)
 81168e6:	4868      	ldr	r0, [pc, #416]	@ (8116a88 <mem_trim+0x1f0>)
 81168e8:	f00b fa4c 	bl	8121d84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 81168ec:	4b62      	ldr	r3, [pc, #392]	@ (8116a78 <mem_trim+0x1e0>)
 81168ee:	681b      	ldr	r3, [r3, #0]
 81168f0:	687a      	ldr	r2, [r7, #4]
 81168f2:	429a      	cmp	r2, r3
 81168f4:	d304      	bcc.n	8116900 <mem_trim+0x68>
 81168f6:	4b61      	ldr	r3, [pc, #388]	@ (8116a7c <mem_trim+0x1e4>)
 81168f8:	681b      	ldr	r3, [r3, #0]
 81168fa:	687a      	ldr	r2, [r7, #4]
 81168fc:	429a      	cmp	r2, r3
 81168fe:	d307      	bcc.n	8116910 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8116900:	f003 fc16 	bl	811a130 <sys_arch_protect>
 8116904:	60b8      	str	r0, [r7, #8]
 8116906:	68b8      	ldr	r0, [r7, #8]
 8116908:	f003 fc20 	bl	811a14c <sys_arch_unprotect>
    return rmem;
 811690c:	687b      	ldr	r3, [r7, #4]
 811690e:	e0ad      	b.n	8116a6c <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8116910:	687b      	ldr	r3, [r7, #4]
 8116912:	3b0c      	subs	r3, #12
 8116914:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8116916:	6a38      	ldr	r0, [r7, #32]
 8116918:	f7ff fdf0 	bl	81164fc <mem_to_ptr>
 811691c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 811691e:	6a3b      	ldr	r3, [r7, #32]
 8116920:	681a      	ldr	r2, [r3, #0]
 8116922:	69fb      	ldr	r3, [r7, #28]
 8116924:	1ad3      	subs	r3, r2, r3
 8116926:	3b0c      	subs	r3, #12
 8116928:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 811692a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811692c:	69bb      	ldr	r3, [r7, #24]
 811692e:	429a      	cmp	r2, r3
 8116930:	d906      	bls.n	8116940 <mem_trim+0xa8>
 8116932:	4b53      	ldr	r3, [pc, #332]	@ (8116a80 <mem_trim+0x1e8>)
 8116934:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8116938:	4954      	ldr	r1, [pc, #336]	@ (8116a8c <mem_trim+0x1f4>)
 811693a:	4853      	ldr	r0, [pc, #332]	@ (8116a88 <mem_trim+0x1f0>)
 811693c:	f00b fa22 	bl	8121d84 <iprintf>
  if (newsize > size) {
 8116940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116942:	69bb      	ldr	r3, [r7, #24]
 8116944:	429a      	cmp	r2, r3
 8116946:	d901      	bls.n	811694c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8116948:	2300      	movs	r3, #0
 811694a:	e08f      	b.n	8116a6c <mem_trim+0x1d4>
  }
  if (newsize == size) {
 811694c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811694e:	69bb      	ldr	r3, [r7, #24]
 8116950:	429a      	cmp	r2, r3
 8116952:	d101      	bne.n	8116958 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8116954:	687b      	ldr	r3, [r7, #4]
 8116956:	e089      	b.n	8116a6c <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8116958:	484d      	ldr	r0, [pc, #308]	@ (8116a90 <mem_trim+0x1f8>)
 811695a:	f003 fbad 	bl	811a0b8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 811695e:	6a3b      	ldr	r3, [r7, #32]
 8116960:	681b      	ldr	r3, [r3, #0]
 8116962:	4618      	mov	r0, r3
 8116964:	f7ff fdba 	bl	81164dc <ptr_to_mem>
 8116968:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 811696a:	697b      	ldr	r3, [r7, #20]
 811696c:	7a1b      	ldrb	r3, [r3, #8]
 811696e:	2b00      	cmp	r3, #0
 8116970:	d13c      	bne.n	81169ec <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8116972:	6a3b      	ldr	r3, [r7, #32]
 8116974:	681b      	ldr	r3, [r3, #0]
 8116976:	4a3f      	ldr	r2, [pc, #252]	@ (8116a74 <mem_trim+0x1dc>)
 8116978:	4293      	cmp	r3, r2
 811697a:	d106      	bne.n	811698a <mem_trim+0xf2>
 811697c:	4b40      	ldr	r3, [pc, #256]	@ (8116a80 <mem_trim+0x1e8>)
 811697e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8116982:	4944      	ldr	r1, [pc, #272]	@ (8116a94 <mem_trim+0x1fc>)
 8116984:	4840      	ldr	r0, [pc, #256]	@ (8116a88 <mem_trim+0x1f0>)
 8116986:	f00b f9fd 	bl	8121d84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 811698a:	697b      	ldr	r3, [r7, #20]
 811698c:	681b      	ldr	r3, [r3, #0]
 811698e:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8116990:	69fa      	ldr	r2, [r7, #28]
 8116992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116994:	4413      	add	r3, r2
 8116996:	330c      	adds	r3, #12
 8116998:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 811699a:	4b3f      	ldr	r3, [pc, #252]	@ (8116a98 <mem_trim+0x200>)
 811699c:	681b      	ldr	r3, [r3, #0]
 811699e:	697a      	ldr	r2, [r7, #20]
 81169a0:	429a      	cmp	r2, r3
 81169a2:	d105      	bne.n	81169b0 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 81169a4:	6938      	ldr	r0, [r7, #16]
 81169a6:	f7ff fd99 	bl	81164dc <ptr_to_mem>
 81169aa:	4603      	mov	r3, r0
 81169ac:	4a3a      	ldr	r2, [pc, #232]	@ (8116a98 <mem_trim+0x200>)
 81169ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 81169b0:	6938      	ldr	r0, [r7, #16]
 81169b2:	f7ff fd93 	bl	81164dc <ptr_to_mem>
 81169b6:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 81169b8:	697b      	ldr	r3, [r7, #20]
 81169ba:	2200      	movs	r2, #0
 81169bc:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 81169be:	697b      	ldr	r3, [r7, #20]
 81169c0:	68fa      	ldr	r2, [r7, #12]
 81169c2:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 81169c4:	697b      	ldr	r3, [r7, #20]
 81169c6:	69fa      	ldr	r2, [r7, #28]
 81169c8:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 81169ca:	6a3b      	ldr	r3, [r7, #32]
 81169cc:	693a      	ldr	r2, [r7, #16]
 81169ce:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 81169d0:	697b      	ldr	r3, [r7, #20]
 81169d2:	681b      	ldr	r3, [r3, #0]
 81169d4:	4a27      	ldr	r2, [pc, #156]	@ (8116a74 <mem_trim+0x1dc>)
 81169d6:	4293      	cmp	r3, r2
 81169d8:	d044      	beq.n	8116a64 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 81169da:	697b      	ldr	r3, [r7, #20]
 81169dc:	681b      	ldr	r3, [r3, #0]
 81169de:	4618      	mov	r0, r3
 81169e0:	f7ff fd7c 	bl	81164dc <ptr_to_mem>
 81169e4:	4602      	mov	r2, r0
 81169e6:	693b      	ldr	r3, [r7, #16]
 81169e8:	6053      	str	r3, [r2, #4]
 81169ea:	e03b      	b.n	8116a64 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 81169ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81169ee:	3318      	adds	r3, #24
 81169f0:	69ba      	ldr	r2, [r7, #24]
 81169f2:	429a      	cmp	r2, r3
 81169f4:	d336      	bcc.n	8116a64 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 81169f6:	69fa      	ldr	r2, [r7, #28]
 81169f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81169fa:	4413      	add	r3, r2
 81169fc:	330c      	adds	r3, #12
 81169fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8116a00:	6a3b      	ldr	r3, [r7, #32]
 8116a02:	681b      	ldr	r3, [r3, #0]
 8116a04:	4a1b      	ldr	r2, [pc, #108]	@ (8116a74 <mem_trim+0x1dc>)
 8116a06:	4293      	cmp	r3, r2
 8116a08:	d106      	bne.n	8116a18 <mem_trim+0x180>
 8116a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8116a80 <mem_trim+0x1e8>)
 8116a0c:	f240 3216 	movw	r2, #790	@ 0x316
 8116a10:	4920      	ldr	r1, [pc, #128]	@ (8116a94 <mem_trim+0x1fc>)
 8116a12:	481d      	ldr	r0, [pc, #116]	@ (8116a88 <mem_trim+0x1f0>)
 8116a14:	f00b f9b6 	bl	8121d84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8116a18:	6938      	ldr	r0, [r7, #16]
 8116a1a:	f7ff fd5f 	bl	81164dc <ptr_to_mem>
 8116a1e:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8116a20:	4b1d      	ldr	r3, [pc, #116]	@ (8116a98 <mem_trim+0x200>)
 8116a22:	681b      	ldr	r3, [r3, #0]
 8116a24:	697a      	ldr	r2, [r7, #20]
 8116a26:	429a      	cmp	r2, r3
 8116a28:	d202      	bcs.n	8116a30 <mem_trim+0x198>
      lfree = mem2;
 8116a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8116a98 <mem_trim+0x200>)
 8116a2c:	697b      	ldr	r3, [r7, #20]
 8116a2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8116a30:	697b      	ldr	r3, [r7, #20]
 8116a32:	2200      	movs	r2, #0
 8116a34:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8116a36:	6a3b      	ldr	r3, [r7, #32]
 8116a38:	681a      	ldr	r2, [r3, #0]
 8116a3a:	697b      	ldr	r3, [r7, #20]
 8116a3c:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8116a3e:	697b      	ldr	r3, [r7, #20]
 8116a40:	69fa      	ldr	r2, [r7, #28]
 8116a42:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8116a44:	6a3b      	ldr	r3, [r7, #32]
 8116a46:	693a      	ldr	r2, [r7, #16]
 8116a48:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8116a4a:	697b      	ldr	r3, [r7, #20]
 8116a4c:	681b      	ldr	r3, [r3, #0]
 8116a4e:	4a09      	ldr	r2, [pc, #36]	@ (8116a74 <mem_trim+0x1dc>)
 8116a50:	4293      	cmp	r3, r2
 8116a52:	d007      	beq.n	8116a64 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8116a54:	697b      	ldr	r3, [r7, #20]
 8116a56:	681b      	ldr	r3, [r3, #0]
 8116a58:	4618      	mov	r0, r3
 8116a5a:	f7ff fd3f 	bl	81164dc <ptr_to_mem>
 8116a5e:	4602      	mov	r2, r0
 8116a60:	693b      	ldr	r3, [r7, #16]
 8116a62:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8116a64:	480a      	ldr	r0, [pc, #40]	@ (8116a90 <mem_trim+0x1f8>)
 8116a66:	f003 fb36 	bl	811a0d6 <sys_mutex_unlock>
  return rmem;
 8116a6a:	687b      	ldr	r3, [r7, #4]
}
 8116a6c:	4618      	mov	r0, r3
 8116a6e:	3728      	adds	r7, #40	@ 0x28
 8116a70:	46bd      	mov	sp, r7
 8116a72:	bd80      	pop	{r7, pc}
 8116a74:	0001ffe8 	.word	0x0001ffe8
 8116a78:	2400a188 	.word	0x2400a188
 8116a7c:	2400a18c 	.word	0x2400a18c
 8116a80:	08125910 	.word	0x08125910
 8116a84:	08125ad4 	.word	0x08125ad4
 8116a88:	08125990 	.word	0x08125990
 8116a8c:	08125aec 	.word	0x08125aec
 8116a90:	2400a190 	.word	0x2400a190
 8116a94:	08125b0c 	.word	0x08125b0c
 8116a98:	2400a194 	.word	0x2400a194

08116a9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8116a9c:	b580      	push	{r7, lr}
 8116a9e:	b088      	sub	sp, #32
 8116aa0:	af00      	add	r7, sp, #0
 8116aa2:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8116aa4:	687b      	ldr	r3, [r7, #4]
 8116aa6:	2b00      	cmp	r3, #0
 8116aa8:	d101      	bne.n	8116aae <mem_malloc+0x12>
    return NULL;
 8116aaa:	2300      	movs	r3, #0
 8116aac:	e0d9      	b.n	8116c62 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8116aae:	687b      	ldr	r3, [r7, #4]
 8116ab0:	3303      	adds	r3, #3
 8116ab2:	f023 0303 	bic.w	r3, r3, #3
 8116ab6:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8116ab8:	69bb      	ldr	r3, [r7, #24]
 8116aba:	2b0b      	cmp	r3, #11
 8116abc:	d801      	bhi.n	8116ac2 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8116abe:	230c      	movs	r3, #12
 8116ac0:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8116ac2:	69bb      	ldr	r3, [r7, #24]
 8116ac4:	4a69      	ldr	r2, [pc, #420]	@ (8116c6c <mem_malloc+0x1d0>)
 8116ac6:	4293      	cmp	r3, r2
 8116ac8:	d803      	bhi.n	8116ad2 <mem_malloc+0x36>
 8116aca:	69ba      	ldr	r2, [r7, #24]
 8116acc:	687b      	ldr	r3, [r7, #4]
 8116ace:	429a      	cmp	r2, r3
 8116ad0:	d201      	bcs.n	8116ad6 <mem_malloc+0x3a>
    return NULL;
 8116ad2:	2300      	movs	r3, #0
 8116ad4:	e0c5      	b.n	8116c62 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8116ad6:	4866      	ldr	r0, [pc, #408]	@ (8116c70 <mem_malloc+0x1d4>)
 8116ad8:	f003 faee 	bl	811a0b8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8116adc:	4b65      	ldr	r3, [pc, #404]	@ (8116c74 <mem_malloc+0x1d8>)
 8116ade:	681b      	ldr	r3, [r3, #0]
 8116ae0:	4618      	mov	r0, r3
 8116ae2:	f7ff fd0b 	bl	81164fc <mem_to_ptr>
 8116ae6:	61f8      	str	r0, [r7, #28]
 8116ae8:	e0b0      	b.n	8116c4c <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8116aea:	69f8      	ldr	r0, [r7, #28]
 8116aec:	f7ff fcf6 	bl	81164dc <ptr_to_mem>
 8116af0:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8116af2:	693b      	ldr	r3, [r7, #16]
 8116af4:	7a1b      	ldrb	r3, [r3, #8]
 8116af6:	2b00      	cmp	r3, #0
 8116af8:	f040 80a2 	bne.w	8116c40 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8116afc:	693b      	ldr	r3, [r7, #16]
 8116afe:	681a      	ldr	r2, [r3, #0]
 8116b00:	69fb      	ldr	r3, [r7, #28]
 8116b02:	1ad3      	subs	r3, r2, r3
 8116b04:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8116b06:	69ba      	ldr	r2, [r7, #24]
 8116b08:	429a      	cmp	r2, r3
 8116b0a:	f200 8099 	bhi.w	8116c40 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8116b0e:	693b      	ldr	r3, [r7, #16]
 8116b10:	681a      	ldr	r2, [r3, #0]
 8116b12:	69fb      	ldr	r3, [r7, #28]
 8116b14:	1ad3      	subs	r3, r2, r3
 8116b16:	f1a3 020c 	sub.w	r2, r3, #12
 8116b1a:	69bb      	ldr	r3, [r7, #24]
 8116b1c:	3318      	adds	r3, #24
 8116b1e:	429a      	cmp	r2, r3
 8116b20:	d331      	bcc.n	8116b86 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8116b22:	69fa      	ldr	r2, [r7, #28]
 8116b24:	69bb      	ldr	r3, [r7, #24]
 8116b26:	4413      	add	r3, r2
 8116b28:	330c      	adds	r3, #12
 8116b2a:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8116b2c:	68fb      	ldr	r3, [r7, #12]
 8116b2e:	4a4f      	ldr	r2, [pc, #316]	@ (8116c6c <mem_malloc+0x1d0>)
 8116b30:	4293      	cmp	r3, r2
 8116b32:	d106      	bne.n	8116b42 <mem_malloc+0xa6>
 8116b34:	4b50      	ldr	r3, [pc, #320]	@ (8116c78 <mem_malloc+0x1dc>)
 8116b36:	f240 3287 	movw	r2, #903	@ 0x387
 8116b3a:	4950      	ldr	r1, [pc, #320]	@ (8116c7c <mem_malloc+0x1e0>)
 8116b3c:	4850      	ldr	r0, [pc, #320]	@ (8116c80 <mem_malloc+0x1e4>)
 8116b3e:	f00b f921 	bl	8121d84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8116b42:	68f8      	ldr	r0, [r7, #12]
 8116b44:	f7ff fcca 	bl	81164dc <ptr_to_mem>
 8116b48:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8116b4a:	68bb      	ldr	r3, [r7, #8]
 8116b4c:	2200      	movs	r2, #0
 8116b4e:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8116b50:	693b      	ldr	r3, [r7, #16]
 8116b52:	681a      	ldr	r2, [r3, #0]
 8116b54:	68bb      	ldr	r3, [r7, #8]
 8116b56:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8116b58:	68bb      	ldr	r3, [r7, #8]
 8116b5a:	69fa      	ldr	r2, [r7, #28]
 8116b5c:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8116b5e:	693b      	ldr	r3, [r7, #16]
 8116b60:	68fa      	ldr	r2, [r7, #12]
 8116b62:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8116b64:	693b      	ldr	r3, [r7, #16]
 8116b66:	2201      	movs	r2, #1
 8116b68:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8116b6a:	68bb      	ldr	r3, [r7, #8]
 8116b6c:	681b      	ldr	r3, [r3, #0]
 8116b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8116c6c <mem_malloc+0x1d0>)
 8116b70:	4293      	cmp	r3, r2
 8116b72:	d00b      	beq.n	8116b8c <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8116b74:	68bb      	ldr	r3, [r7, #8]
 8116b76:	681b      	ldr	r3, [r3, #0]
 8116b78:	4618      	mov	r0, r3
 8116b7a:	f7ff fcaf 	bl	81164dc <ptr_to_mem>
 8116b7e:	4602      	mov	r2, r0
 8116b80:	68fb      	ldr	r3, [r7, #12]
 8116b82:	6053      	str	r3, [r2, #4]
 8116b84:	e002      	b.n	8116b8c <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8116b86:	693b      	ldr	r3, [r7, #16]
 8116b88:	2201      	movs	r2, #1
 8116b8a:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8116b8c:	4b39      	ldr	r3, [pc, #228]	@ (8116c74 <mem_malloc+0x1d8>)
 8116b8e:	681b      	ldr	r3, [r3, #0]
 8116b90:	693a      	ldr	r2, [r7, #16]
 8116b92:	429a      	cmp	r2, r3
 8116b94:	d127      	bne.n	8116be6 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8116b96:	4b37      	ldr	r3, [pc, #220]	@ (8116c74 <mem_malloc+0x1d8>)
 8116b98:	681b      	ldr	r3, [r3, #0]
 8116b9a:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8116b9c:	e005      	b.n	8116baa <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8116b9e:	697b      	ldr	r3, [r7, #20]
 8116ba0:	681b      	ldr	r3, [r3, #0]
 8116ba2:	4618      	mov	r0, r3
 8116ba4:	f7ff fc9a 	bl	81164dc <ptr_to_mem>
 8116ba8:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8116baa:	697b      	ldr	r3, [r7, #20]
 8116bac:	7a1b      	ldrb	r3, [r3, #8]
 8116bae:	2b00      	cmp	r3, #0
 8116bb0:	d004      	beq.n	8116bbc <mem_malloc+0x120>
 8116bb2:	4b34      	ldr	r3, [pc, #208]	@ (8116c84 <mem_malloc+0x1e8>)
 8116bb4:	681b      	ldr	r3, [r3, #0]
 8116bb6:	697a      	ldr	r2, [r7, #20]
 8116bb8:	429a      	cmp	r2, r3
 8116bba:	d1f0      	bne.n	8116b9e <mem_malloc+0x102>
          }
          lfree = cur;
 8116bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8116c74 <mem_malloc+0x1d8>)
 8116bbe:	697b      	ldr	r3, [r7, #20]
 8116bc0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8116bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8116c74 <mem_malloc+0x1d8>)
 8116bc4:	681a      	ldr	r2, [r3, #0]
 8116bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8116c84 <mem_malloc+0x1e8>)
 8116bc8:	681b      	ldr	r3, [r3, #0]
 8116bca:	429a      	cmp	r2, r3
 8116bcc:	d00b      	beq.n	8116be6 <mem_malloc+0x14a>
 8116bce:	4b29      	ldr	r3, [pc, #164]	@ (8116c74 <mem_malloc+0x1d8>)
 8116bd0:	681b      	ldr	r3, [r3, #0]
 8116bd2:	7a1b      	ldrb	r3, [r3, #8]
 8116bd4:	2b00      	cmp	r3, #0
 8116bd6:	d006      	beq.n	8116be6 <mem_malloc+0x14a>
 8116bd8:	4b27      	ldr	r3, [pc, #156]	@ (8116c78 <mem_malloc+0x1dc>)
 8116bda:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8116bde:	492a      	ldr	r1, [pc, #168]	@ (8116c88 <mem_malloc+0x1ec>)
 8116be0:	4827      	ldr	r0, [pc, #156]	@ (8116c80 <mem_malloc+0x1e4>)
 8116be2:	f00b f8cf 	bl	8121d84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8116be6:	4822      	ldr	r0, [pc, #136]	@ (8116c70 <mem_malloc+0x1d4>)
 8116be8:	f003 fa75 	bl	811a0d6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8116bec:	693a      	ldr	r2, [r7, #16]
 8116bee:	69bb      	ldr	r3, [r7, #24]
 8116bf0:	4413      	add	r3, r2
 8116bf2:	330c      	adds	r3, #12
 8116bf4:	4a23      	ldr	r2, [pc, #140]	@ (8116c84 <mem_malloc+0x1e8>)
 8116bf6:	6812      	ldr	r2, [r2, #0]
 8116bf8:	4293      	cmp	r3, r2
 8116bfa:	d906      	bls.n	8116c0a <mem_malloc+0x16e>
 8116bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8116c78 <mem_malloc+0x1dc>)
 8116bfe:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8116c02:	4922      	ldr	r1, [pc, #136]	@ (8116c8c <mem_malloc+0x1f0>)
 8116c04:	481e      	ldr	r0, [pc, #120]	@ (8116c80 <mem_malloc+0x1e4>)
 8116c06:	f00b f8bd 	bl	8121d84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8116c0a:	693b      	ldr	r3, [r7, #16]
 8116c0c:	f003 0303 	and.w	r3, r3, #3
 8116c10:	2b00      	cmp	r3, #0
 8116c12:	d006      	beq.n	8116c22 <mem_malloc+0x186>
 8116c14:	4b18      	ldr	r3, [pc, #96]	@ (8116c78 <mem_malloc+0x1dc>)
 8116c16:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8116c1a:	491d      	ldr	r1, [pc, #116]	@ (8116c90 <mem_malloc+0x1f4>)
 8116c1c:	4818      	ldr	r0, [pc, #96]	@ (8116c80 <mem_malloc+0x1e4>)
 8116c1e:	f00b f8b1 	bl	8121d84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8116c22:	693b      	ldr	r3, [r7, #16]
 8116c24:	f003 0303 	and.w	r3, r3, #3
 8116c28:	2b00      	cmp	r3, #0
 8116c2a:	d006      	beq.n	8116c3a <mem_malloc+0x19e>
 8116c2c:	4b12      	ldr	r3, [pc, #72]	@ (8116c78 <mem_malloc+0x1dc>)
 8116c2e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8116c32:	4918      	ldr	r1, [pc, #96]	@ (8116c94 <mem_malloc+0x1f8>)
 8116c34:	4812      	ldr	r0, [pc, #72]	@ (8116c80 <mem_malloc+0x1e4>)
 8116c36:	f00b f8a5 	bl	8121d84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8116c3a:	693b      	ldr	r3, [r7, #16]
 8116c3c:	330c      	adds	r3, #12
 8116c3e:	e010      	b.n	8116c62 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 8116c40:	69f8      	ldr	r0, [r7, #28]
 8116c42:	f7ff fc4b 	bl	81164dc <ptr_to_mem>
 8116c46:	4603      	mov	r3, r0
 8116c48:	681b      	ldr	r3, [r3, #0]
 8116c4a:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8116c4c:	69ba      	ldr	r2, [r7, #24]
 8116c4e:	4b07      	ldr	r3, [pc, #28]	@ (8116c6c <mem_malloc+0x1d0>)
 8116c50:	1a9b      	subs	r3, r3, r2
 8116c52:	69fa      	ldr	r2, [r7, #28]
 8116c54:	429a      	cmp	r2, r3
 8116c56:	f4ff af48 	bcc.w	8116aea <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8116c5a:	4805      	ldr	r0, [pc, #20]	@ (8116c70 <mem_malloc+0x1d4>)
 8116c5c:	f003 fa3b 	bl	811a0d6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8116c60:	2300      	movs	r3, #0
}
 8116c62:	4618      	mov	r0, r3
 8116c64:	3720      	adds	r7, #32
 8116c66:	46bd      	mov	sp, r7
 8116c68:	bd80      	pop	{r7, pc}
 8116c6a:	bf00      	nop
 8116c6c:	0001ffe8 	.word	0x0001ffe8
 8116c70:	2400a190 	.word	0x2400a190
 8116c74:	2400a194 	.word	0x2400a194
 8116c78:	08125910 	.word	0x08125910
 8116c7c:	08125b0c 	.word	0x08125b0c
 8116c80:	08125990 	.word	0x08125990
 8116c84:	2400a18c 	.word	0x2400a18c
 8116c88:	08125b20 	.word	0x08125b20
 8116c8c:	08125b3c 	.word	0x08125b3c
 8116c90:	08125b6c 	.word	0x08125b6c
 8116c94:	08125b9c 	.word	0x08125b9c

08116c98 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8116c98:	b580      	push	{r7, lr}
 8116c9a:	b084      	sub	sp, #16
 8116c9c:	af00      	add	r7, sp, #0
 8116c9e:	6078      	str	r0, [r7, #4]
 8116ca0:	6039      	str	r1, [r7, #0]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8116ca2:	687b      	ldr	r3, [r7, #4]
 8116ca4:	683a      	ldr	r2, [r7, #0]
 8116ca6:	fb02 f303 	mul.w	r3, r2, r3
 8116caa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8116cac:	68f8      	ldr	r0, [r7, #12]
 8116cae:	f7ff fef5 	bl	8116a9c <mem_malloc>
 8116cb2:	60b8      	str	r0, [r7, #8]
  if (p) {
 8116cb4:	68bb      	ldr	r3, [r7, #8]
 8116cb6:	2b00      	cmp	r3, #0
 8116cb8:	d004      	beq.n	8116cc4 <mem_calloc+0x2c>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8116cba:	68fa      	ldr	r2, [r7, #12]
 8116cbc:	2100      	movs	r1, #0
 8116cbe:	68b8      	ldr	r0, [r7, #8]
 8116cc0:	f00b fa06 	bl	81220d0 <memset>
  }
  return p;
 8116cc4:	68bb      	ldr	r3, [r7, #8]
}
 8116cc6:	4618      	mov	r0, r3
 8116cc8:	3710      	adds	r7, #16
 8116cca:	46bd      	mov	sp, r7
 8116ccc:	bd80      	pop	{r7, pc}

08116cce <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8116cce:	b480      	push	{r7}
 8116cd0:	b085      	sub	sp, #20
 8116cd2:	af00      	add	r7, sp, #0
 8116cd4:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8116cd6:	687b      	ldr	r3, [r7, #4]
 8116cd8:	689b      	ldr	r3, [r3, #8]
 8116cda:	2200      	movs	r2, #0
 8116cdc:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8116cde:	687b      	ldr	r3, [r7, #4]
 8116ce0:	685b      	ldr	r3, [r3, #4]
 8116ce2:	3303      	adds	r3, #3
 8116ce4:	f023 0303 	bic.w	r3, r3, #3
 8116ce8:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8116cea:	2300      	movs	r3, #0
 8116cec:	60fb      	str	r3, [r7, #12]
 8116cee:	e011      	b.n	8116d14 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8116cf0:	687b      	ldr	r3, [r7, #4]
 8116cf2:	689b      	ldr	r3, [r3, #8]
 8116cf4:	681a      	ldr	r2, [r3, #0]
 8116cf6:	68bb      	ldr	r3, [r7, #8]
 8116cf8:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8116cfa:	687b      	ldr	r3, [r7, #4]
 8116cfc:	689b      	ldr	r3, [r3, #8]
 8116cfe:	68ba      	ldr	r2, [r7, #8]
 8116d00:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8116d02:	687b      	ldr	r3, [r7, #4]
 8116d04:	881b      	ldrh	r3, [r3, #0]
 8116d06:	461a      	mov	r2, r3
 8116d08:	68bb      	ldr	r3, [r7, #8]
 8116d0a:	4413      	add	r3, r2
 8116d0c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8116d0e:	68fb      	ldr	r3, [r7, #12]
 8116d10:	3301      	adds	r3, #1
 8116d12:	60fb      	str	r3, [r7, #12]
 8116d14:	687b      	ldr	r3, [r7, #4]
 8116d16:	885b      	ldrh	r3, [r3, #2]
 8116d18:	461a      	mov	r2, r3
 8116d1a:	68fb      	ldr	r3, [r7, #12]
 8116d1c:	4293      	cmp	r3, r2
 8116d1e:	dbe7      	blt.n	8116cf0 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8116d20:	bf00      	nop
 8116d22:	bf00      	nop
 8116d24:	3714      	adds	r7, #20
 8116d26:	46bd      	mov	sp, r7
 8116d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116d2c:	4770      	bx	lr
	...

08116d30 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8116d30:	b580      	push	{r7, lr}
 8116d32:	b082      	sub	sp, #8
 8116d34:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8116d36:	2300      	movs	r3, #0
 8116d38:	80fb      	strh	r3, [r7, #6]
 8116d3a:	e009      	b.n	8116d50 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8116d3c:	88fb      	ldrh	r3, [r7, #6]
 8116d3e:	4a08      	ldr	r2, [pc, #32]	@ (8116d60 <memp_init+0x30>)
 8116d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8116d44:	4618      	mov	r0, r3
 8116d46:	f7ff ffc2 	bl	8116cce <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8116d4a:	88fb      	ldrh	r3, [r7, #6]
 8116d4c:	3301      	adds	r3, #1
 8116d4e:	80fb      	strh	r3, [r7, #6]
 8116d50:	88fb      	ldrh	r3, [r7, #6]
 8116d52:	2b0c      	cmp	r3, #12
 8116d54:	d9f2      	bls.n	8116d3c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8116d56:	bf00      	nop
 8116d58:	bf00      	nop
 8116d5a:	3708      	adds	r7, #8
 8116d5c:	46bd      	mov	sp, r7
 8116d5e:	bd80      	pop	{r7, pc}
 8116d60:	08128a00 	.word	0x08128a00

08116d64 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8116d64:	b580      	push	{r7, lr}
 8116d66:	b084      	sub	sp, #16
 8116d68:	af00      	add	r7, sp, #0
 8116d6a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8116d6c:	f003 f9e0 	bl	811a130 <sys_arch_protect>
 8116d70:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8116d72:	687b      	ldr	r3, [r7, #4]
 8116d74:	689b      	ldr	r3, [r3, #8]
 8116d76:	681b      	ldr	r3, [r3, #0]
 8116d78:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8116d7a:	68bb      	ldr	r3, [r7, #8]
 8116d7c:	2b00      	cmp	r3, #0
 8116d7e:	d015      	beq.n	8116dac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8116d80:	687b      	ldr	r3, [r7, #4]
 8116d82:	689b      	ldr	r3, [r3, #8]
 8116d84:	68ba      	ldr	r2, [r7, #8]
 8116d86:	6812      	ldr	r2, [r2, #0]
 8116d88:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8116d8a:	68bb      	ldr	r3, [r7, #8]
 8116d8c:	f003 0303 	and.w	r3, r3, #3
 8116d90:	2b00      	cmp	r3, #0
 8116d92:	d006      	beq.n	8116da2 <do_memp_malloc_pool+0x3e>
 8116d94:	4b09      	ldr	r3, [pc, #36]	@ (8116dbc <do_memp_malloc_pool+0x58>)
 8116d96:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8116d9a:	4909      	ldr	r1, [pc, #36]	@ (8116dc0 <do_memp_malloc_pool+0x5c>)
 8116d9c:	4809      	ldr	r0, [pc, #36]	@ (8116dc4 <do_memp_malloc_pool+0x60>)
 8116d9e:	f00a fff1 	bl	8121d84 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8116da2:	68f8      	ldr	r0, [r7, #12]
 8116da4:	f003 f9d2 	bl	811a14c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8116da8:	68bb      	ldr	r3, [r7, #8]
 8116daa:	e003      	b.n	8116db4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8116dac:	68f8      	ldr	r0, [r7, #12]
 8116dae:	f003 f9cd 	bl	811a14c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8116db2:	2300      	movs	r3, #0
}
 8116db4:	4618      	mov	r0, r3
 8116db6:	3710      	adds	r7, #16
 8116db8:	46bd      	mov	sp, r7
 8116dba:	bd80      	pop	{r7, pc}
 8116dbc:	08125bc0 	.word	0x08125bc0
 8116dc0:	08125c28 	.word	0x08125c28
 8116dc4:	08125c4c 	.word	0x08125c4c

08116dc8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8116dc8:	b580      	push	{r7, lr}
 8116dca:	b082      	sub	sp, #8
 8116dcc:	af00      	add	r7, sp, #0
 8116dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8116dd0:	687b      	ldr	r3, [r7, #4]
 8116dd2:	2b00      	cmp	r3, #0
 8116dd4:	d106      	bne.n	8116de4 <memp_malloc_pool+0x1c>
 8116dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8116e00 <memp_malloc_pool+0x38>)
 8116dd8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8116ddc:	4909      	ldr	r1, [pc, #36]	@ (8116e04 <memp_malloc_pool+0x3c>)
 8116dde:	480a      	ldr	r0, [pc, #40]	@ (8116e08 <memp_malloc_pool+0x40>)
 8116de0:	f00a ffd0 	bl	8121d84 <iprintf>
  if (desc == NULL) {
 8116de4:	687b      	ldr	r3, [r7, #4]
 8116de6:	2b00      	cmp	r3, #0
 8116de8:	d101      	bne.n	8116dee <memp_malloc_pool+0x26>
    return NULL;
 8116dea:	2300      	movs	r3, #0
 8116dec:	e003      	b.n	8116df6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8116dee:	6878      	ldr	r0, [r7, #4]
 8116df0:	f7ff ffb8 	bl	8116d64 <do_memp_malloc_pool>
 8116df4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8116df6:	4618      	mov	r0, r3
 8116df8:	3708      	adds	r7, #8
 8116dfa:	46bd      	mov	sp, r7
 8116dfc:	bd80      	pop	{r7, pc}
 8116dfe:	bf00      	nop
 8116e00:	08125bc0 	.word	0x08125bc0
 8116e04:	08125c74 	.word	0x08125c74
 8116e08:	08125c4c 	.word	0x08125c4c

08116e0c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8116e0c:	b580      	push	{r7, lr}
 8116e0e:	b084      	sub	sp, #16
 8116e10:	af00      	add	r7, sp, #0
 8116e12:	4603      	mov	r3, r0
 8116e14:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8116e16:	79fb      	ldrb	r3, [r7, #7]
 8116e18:	2b0c      	cmp	r3, #12
 8116e1a:	d908      	bls.n	8116e2e <memp_malloc+0x22>
 8116e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8116e48 <memp_malloc+0x3c>)
 8116e1e:	f240 1257 	movw	r2, #343	@ 0x157
 8116e22:	490a      	ldr	r1, [pc, #40]	@ (8116e4c <memp_malloc+0x40>)
 8116e24:	480a      	ldr	r0, [pc, #40]	@ (8116e50 <memp_malloc+0x44>)
 8116e26:	f00a ffad 	bl	8121d84 <iprintf>
 8116e2a:	2300      	movs	r3, #0
 8116e2c:	e008      	b.n	8116e40 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8116e2e:	79fb      	ldrb	r3, [r7, #7]
 8116e30:	4a08      	ldr	r2, [pc, #32]	@ (8116e54 <memp_malloc+0x48>)
 8116e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8116e36:	4618      	mov	r0, r3
 8116e38:	f7ff ff94 	bl	8116d64 <do_memp_malloc_pool>
 8116e3c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8116e3e:	68fb      	ldr	r3, [r7, #12]
}
 8116e40:	4618      	mov	r0, r3
 8116e42:	3710      	adds	r7, #16
 8116e44:	46bd      	mov	sp, r7
 8116e46:	bd80      	pop	{r7, pc}
 8116e48:	08125bc0 	.word	0x08125bc0
 8116e4c:	08125c88 	.word	0x08125c88
 8116e50:	08125c4c 	.word	0x08125c4c
 8116e54:	08128a00 	.word	0x08128a00

08116e58 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8116e58:	b580      	push	{r7, lr}
 8116e5a:	b084      	sub	sp, #16
 8116e5c:	af00      	add	r7, sp, #0
 8116e5e:	6078      	str	r0, [r7, #4]
 8116e60:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8116e62:	683b      	ldr	r3, [r7, #0]
 8116e64:	f003 0303 	and.w	r3, r3, #3
 8116e68:	2b00      	cmp	r3, #0
 8116e6a:	d006      	beq.n	8116e7a <do_memp_free_pool+0x22>
 8116e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8116ea4 <do_memp_free_pool+0x4c>)
 8116e6e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8116e72:	490d      	ldr	r1, [pc, #52]	@ (8116ea8 <do_memp_free_pool+0x50>)
 8116e74:	480d      	ldr	r0, [pc, #52]	@ (8116eac <do_memp_free_pool+0x54>)
 8116e76:	f00a ff85 	bl	8121d84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8116e7a:	683b      	ldr	r3, [r7, #0]
 8116e7c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8116e7e:	f003 f957 	bl	811a130 <sys_arch_protect>
 8116e82:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8116e84:	687b      	ldr	r3, [r7, #4]
 8116e86:	689b      	ldr	r3, [r3, #8]
 8116e88:	681a      	ldr	r2, [r3, #0]
 8116e8a:	68fb      	ldr	r3, [r7, #12]
 8116e8c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8116e8e:	687b      	ldr	r3, [r7, #4]
 8116e90:	689b      	ldr	r3, [r3, #8]
 8116e92:	68fa      	ldr	r2, [r7, #12]
 8116e94:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8116e96:	68b8      	ldr	r0, [r7, #8]
 8116e98:	f003 f958 	bl	811a14c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8116e9c:	bf00      	nop
 8116e9e:	3710      	adds	r7, #16
 8116ea0:	46bd      	mov	sp, r7
 8116ea2:	bd80      	pop	{r7, pc}
 8116ea4:	08125bc0 	.word	0x08125bc0
 8116ea8:	08125ca8 	.word	0x08125ca8
 8116eac:	08125c4c 	.word	0x08125c4c

08116eb0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8116eb0:	b580      	push	{r7, lr}
 8116eb2:	b082      	sub	sp, #8
 8116eb4:	af00      	add	r7, sp, #0
 8116eb6:	6078      	str	r0, [r7, #4]
 8116eb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8116eba:	687b      	ldr	r3, [r7, #4]
 8116ebc:	2b00      	cmp	r3, #0
 8116ebe:	d106      	bne.n	8116ece <memp_free_pool+0x1e>
 8116ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8116eec <memp_free_pool+0x3c>)
 8116ec2:	f240 1295 	movw	r2, #405	@ 0x195
 8116ec6:	490a      	ldr	r1, [pc, #40]	@ (8116ef0 <memp_free_pool+0x40>)
 8116ec8:	480a      	ldr	r0, [pc, #40]	@ (8116ef4 <memp_free_pool+0x44>)
 8116eca:	f00a ff5b 	bl	8121d84 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8116ece:	687b      	ldr	r3, [r7, #4]
 8116ed0:	2b00      	cmp	r3, #0
 8116ed2:	d007      	beq.n	8116ee4 <memp_free_pool+0x34>
 8116ed4:	683b      	ldr	r3, [r7, #0]
 8116ed6:	2b00      	cmp	r3, #0
 8116ed8:	d004      	beq.n	8116ee4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8116eda:	6839      	ldr	r1, [r7, #0]
 8116edc:	6878      	ldr	r0, [r7, #4]
 8116ede:	f7ff ffbb 	bl	8116e58 <do_memp_free_pool>
 8116ee2:	e000      	b.n	8116ee6 <memp_free_pool+0x36>
    return;
 8116ee4:	bf00      	nop
}
 8116ee6:	3708      	adds	r7, #8
 8116ee8:	46bd      	mov	sp, r7
 8116eea:	bd80      	pop	{r7, pc}
 8116eec:	08125bc0 	.word	0x08125bc0
 8116ef0:	08125c74 	.word	0x08125c74
 8116ef4:	08125c4c 	.word	0x08125c4c

08116ef8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8116ef8:	b580      	push	{r7, lr}
 8116efa:	b082      	sub	sp, #8
 8116efc:	af00      	add	r7, sp, #0
 8116efe:	4603      	mov	r3, r0
 8116f00:	6039      	str	r1, [r7, #0]
 8116f02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8116f04:	79fb      	ldrb	r3, [r7, #7]
 8116f06:	2b0c      	cmp	r3, #12
 8116f08:	d907      	bls.n	8116f1a <memp_free+0x22>
 8116f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8116f3c <memp_free+0x44>)
 8116f0c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8116f10:	490b      	ldr	r1, [pc, #44]	@ (8116f40 <memp_free+0x48>)
 8116f12:	480c      	ldr	r0, [pc, #48]	@ (8116f44 <memp_free+0x4c>)
 8116f14:	f00a ff36 	bl	8121d84 <iprintf>
 8116f18:	e00c      	b.n	8116f34 <memp_free+0x3c>

  if (mem == NULL) {
 8116f1a:	683b      	ldr	r3, [r7, #0]
 8116f1c:	2b00      	cmp	r3, #0
 8116f1e:	d008      	beq.n	8116f32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8116f20:	79fb      	ldrb	r3, [r7, #7]
 8116f22:	4a09      	ldr	r2, [pc, #36]	@ (8116f48 <memp_free+0x50>)
 8116f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8116f28:	6839      	ldr	r1, [r7, #0]
 8116f2a:	4618      	mov	r0, r3
 8116f2c:	f7ff ff94 	bl	8116e58 <do_memp_free_pool>
 8116f30:	e000      	b.n	8116f34 <memp_free+0x3c>
    return;
 8116f32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8116f34:	3708      	adds	r7, #8
 8116f36:	46bd      	mov	sp, r7
 8116f38:	bd80      	pop	{r7, pc}
 8116f3a:	bf00      	nop
 8116f3c:	08125bc0 	.word	0x08125bc0
 8116f40:	08125cc8 	.word	0x08125cc8
 8116f44:	08125c4c 	.word	0x08125c4c
 8116f48:	08128a00 	.word	0x08128a00

08116f4c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8116f4c:	b480      	push	{r7}
 8116f4e:	b083      	sub	sp, #12
 8116f50:	af00      	add	r7, sp, #0
 8116f52:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8116f54:	687b      	ldr	r3, [r7, #4]
 8116f56:	88db      	ldrh	r3, [r3, #6]
 8116f58:	3301      	adds	r3, #1
 8116f5a:	b29a      	uxth	r2, r3
 8116f5c:	687b      	ldr	r3, [r7, #4]
 8116f5e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8116f60:	687b      	ldr	r3, [r7, #4]
 8116f62:	88db      	ldrh	r3, [r3, #6]
 8116f64:	2b00      	cmp	r3, #0
 8116f66:	d105      	bne.n	8116f74 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8116f68:	687b      	ldr	r3, [r7, #4]
 8116f6a:	88db      	ldrh	r3, [r3, #6]
 8116f6c:	3301      	adds	r3, #1
 8116f6e:	b29a      	uxth	r2, r3
 8116f70:	687b      	ldr	r3, [r7, #4]
 8116f72:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8116f74:	687b      	ldr	r3, [r7, #4]
 8116f76:	88db      	ldrh	r3, [r3, #6]
}
 8116f78:	4618      	mov	r0, r3
 8116f7a:	370c      	adds	r7, #12
 8116f7c:	46bd      	mov	sp, r7
 8116f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116f82:	4770      	bx	lr

08116f84 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8116f84:	b480      	push	{r7}
 8116f86:	b083      	sub	sp, #12
 8116f88:	af00      	add	r7, sp, #0
 8116f8a:	6078      	str	r0, [r7, #4]
 8116f8c:	460b      	mov	r3, r1
 8116f8e:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8116f90:	687b      	ldr	r3, [r7, #4]
 8116f92:	881b      	ldrh	r3, [r3, #0]
 8116f94:	461a      	mov	r2, r3
 8116f96:	687b      	ldr	r3, [r7, #4]
 8116f98:	4413      	add	r3, r2
 8116f9a:	78fa      	ldrb	r2, [r7, #3]
 8116f9c:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8116f9e:	687b      	ldr	r3, [r7, #4]
 8116fa0:	881b      	ldrh	r3, [r3, #0]
 8116fa2:	3301      	adds	r3, #1
 8116fa4:	b29a      	uxth	r2, r3
 8116fa6:	687b      	ldr	r3, [r7, #4]
 8116fa8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8116faa:	687b      	ldr	r3, [r7, #4]
 8116fac:	881b      	ldrh	r3, [r3, #0]
 8116fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8116fb2:	d302      	bcc.n	8116fba <mqtt_ringbuf_put+0x36>
    rb->put = 0;
 8116fb4:	687b      	ldr	r3, [r7, #4]
 8116fb6:	2200      	movs	r2, #0
 8116fb8:	801a      	strh	r2, [r3, #0]
  }
}
 8116fba:	bf00      	nop
 8116fbc:	370c      	adds	r7, #12
 8116fbe:	46bd      	mov	sp, r7
 8116fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116fc4:	4770      	bx	lr

08116fc6 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8116fc6:	b480      	push	{r7}
 8116fc8:	b083      	sub	sp, #12
 8116fca:	af00      	add	r7, sp, #0
 8116fcc:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8116fce:	687b      	ldr	r3, [r7, #4]
 8116fd0:	885b      	ldrh	r3, [r3, #2]
 8116fd2:	461a      	mov	r2, r3
 8116fd4:	687b      	ldr	r3, [r7, #4]
 8116fd6:	4413      	add	r3, r2
 8116fd8:	3304      	adds	r3, #4
}
 8116fda:	4618      	mov	r0, r3
 8116fdc:	370c      	adds	r7, #12
 8116fde:	46bd      	mov	sp, r7
 8116fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116fe4:	4770      	bx	lr
	...

08116fe8 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8116fe8:	b580      	push	{r7, lr}
 8116fea:	b082      	sub	sp, #8
 8116fec:	af00      	add	r7, sp, #0
 8116fee:	6078      	str	r0, [r7, #4]
 8116ff0:	460b      	mov	r3, r1
 8116ff2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8116ff4:	887b      	ldrh	r3, [r7, #2]
 8116ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8116ffa:	d305      	bcc.n	8117008 <mqtt_ringbuf_advance_get_idx+0x20>
 8116ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8117038 <mqtt_ringbuf_advance_get_idx+0x50>)
 8116ffe:	22cb      	movs	r2, #203	@ 0xcb
 8117000:	490e      	ldr	r1, [pc, #56]	@ (811703c <mqtt_ringbuf_advance_get_idx+0x54>)
 8117002:	480f      	ldr	r0, [pc, #60]	@ (8117040 <mqtt_ringbuf_advance_get_idx+0x58>)
 8117004:	f00a febe 	bl	8121d84 <iprintf>

  rb->get += len;
 8117008:	687b      	ldr	r3, [r7, #4]
 811700a:	885a      	ldrh	r2, [r3, #2]
 811700c:	887b      	ldrh	r3, [r7, #2]
 811700e:	4413      	add	r3, r2
 8117010:	b29a      	uxth	r2, r3
 8117012:	687b      	ldr	r3, [r7, #4]
 8117014:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8117016:	687b      	ldr	r3, [r7, #4]
 8117018:	885b      	ldrh	r3, [r3, #2]
 811701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 811701e:	d306      	bcc.n	811702e <mqtt_ringbuf_advance_get_idx+0x46>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8117020:	687b      	ldr	r3, [r7, #4]
 8117022:	885b      	ldrh	r3, [r3, #2]
 8117024:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8117028:	b29a      	uxth	r2, r3
 811702a:	687b      	ldr	r3, [r7, #4]
 811702c:	805a      	strh	r2, [r3, #2]
  }
}
 811702e:	bf00      	nop
 8117030:	3708      	adds	r7, #8
 8117032:	46bd      	mov	sp, r7
 8117034:	bd80      	pop	{r7, pc}
 8117036:	bf00      	nop
 8117038:	08125ce4 	.word	0x08125ce4
 811703c:	08125d54 	.word	0x08125d54
 8117040:	08125d94 	.word	0x08125d94

08117044 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8117044:	b480      	push	{r7}
 8117046:	b085      	sub	sp, #20
 8117048:	af00      	add	r7, sp, #0
 811704a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 811704c:	687b      	ldr	r3, [r7, #4]
 811704e:	881b      	ldrh	r3, [r3, #0]
 8117050:	461a      	mov	r2, r3
 8117052:	687b      	ldr	r3, [r7, #4]
 8117054:	885b      	ldrh	r3, [r3, #2]
 8117056:	1ad3      	subs	r3, r2, r3
 8117058:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 811705a:	68fb      	ldr	r3, [r7, #12]
 811705c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8117060:	d303      	bcc.n	811706a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8117062:	68fb      	ldr	r3, [r7, #12]
 8117064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8117068:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 811706a:	68fb      	ldr	r3, [r7, #12]
 811706c:	b29b      	uxth	r3, r3
}
 811706e:	4618      	mov	r0, r3
 8117070:	3714      	adds	r7, #20
 8117072:	46bd      	mov	sp, r7
 8117074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117078:	4770      	bx	lr
	...

0811707c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 811707c:	b590      	push	{r4, r7, lr}
 811707e:	b085      	sub	sp, #20
 8117080:	af00      	add	r7, sp, #0
 8117082:	6078      	str	r0, [r7, #4]
 8117084:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8117086:	2300      	movs	r3, #0
 8117088:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 811708a:	6878      	ldr	r0, [r7, #4]
 811708c:	f7ff ffda 	bl	8117044 <mqtt_ringbuf_len>
 8117090:	4603      	mov	r3, r0
 8117092:	461a      	mov	r2, r3
 8117094:	687b      	ldr	r3, [r7, #4]
 8117096:	885b      	ldrh	r3, [r3, #2]
 8117098:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 811709c:	429a      	cmp	r2, r3
 811709e:	da04      	bge.n	81170aa <mqtt_output_send+0x2e>
 81170a0:	6878      	ldr	r0, [r7, #4]
 81170a2:	f7ff ffcf 	bl	8117044 <mqtt_ringbuf_len>
 81170a6:	4603      	mov	r3, r0
 81170a8:	e004      	b.n	81170b4 <mqtt_output_send+0x38>
 81170aa:	687b      	ldr	r3, [r7, #4]
 81170ac:	885b      	ldrh	r3, [r3, #2]
 81170ae:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 81170b2:	b29b      	uxth	r3, r3
 81170b4:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 81170b6:	683b      	ldr	r3, [r7, #0]
 81170b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 81170bc:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 81170be:	683b      	ldr	r3, [r7, #0]
 81170c0:	2b00      	cmp	r3, #0
 81170c2:	d105      	bne.n	81170d0 <mqtt_output_send+0x54>
 81170c4:	4b44      	ldr	r3, [pc, #272]	@ (81171d8 <mqtt_output_send+0x15c>)
 81170c6:	22f0      	movs	r2, #240	@ 0xf0
 81170c8:	4944      	ldr	r1, [pc, #272]	@ (81171dc <mqtt_output_send+0x160>)
 81170ca:	4845      	ldr	r0, [pc, #276]	@ (81171e0 <mqtt_output_send+0x164>)
 81170cc:	f00a fe5a 	bl	8121d84 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 81170d0:	89bb      	ldrh	r3, [r7, #12]
 81170d2:	2b00      	cmp	r3, #0
 81170d4:	d07c      	beq.n	81171d0 <mqtt_output_send+0x154>
 81170d6:	897b      	ldrh	r3, [r7, #10]
 81170d8:	2b00      	cmp	r3, #0
 81170da:	d079      	beq.n	81171d0 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 81170dc:	89ba      	ldrh	r2, [r7, #12]
 81170de:	897b      	ldrh	r3, [r7, #10]
 81170e0:	429a      	cmp	r2, r3
 81170e2:	d90d      	bls.n	8117100 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 81170e4:	897b      	ldrh	r3, [r7, #10]
 81170e6:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 81170e8:	6878      	ldr	r0, [r7, #4]
 81170ea:	f7ff ffab 	bl	8117044 <mqtt_ringbuf_len>
 81170ee:	4603      	mov	r3, r0
 81170f0:	461a      	mov	r2, r3
 81170f2:	897b      	ldrh	r3, [r7, #10]
 81170f4:	4293      	cmp	r3, r2
 81170f6:	bf34      	ite	cc
 81170f8:	2301      	movcc	r3, #1
 81170fa:	2300      	movcs	r3, #0
 81170fc:	b2db      	uxtb	r3, r3
 81170fe:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8117100:	6878      	ldr	r0, [r7, #4]
 8117102:	f7ff ff60 	bl	8116fc6 <mqtt_ringbuf_get_ptr>
 8117106:	4601      	mov	r1, r0
 8117108:	7bbb      	ldrb	r3, [r7, #14]
 811710a:	2b00      	cmp	r3, #0
 811710c:	d001      	beq.n	8117112 <mqtt_output_send+0x96>
 811710e:	2303      	movs	r3, #3
 8117110:	e000      	b.n	8117114 <mqtt_output_send+0x98>
 8117112:	2301      	movs	r3, #1
 8117114:	89ba      	ldrh	r2, [r7, #12]
 8117116:	6838      	ldr	r0, [r7, #0]
 8117118:	f007 fb3a 	bl	811e790 <tcp_write>
 811711c:	4603      	mov	r3, r0
 811711e:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8117120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8117124:	2b00      	cmp	r3, #0
 8117126:	d146      	bne.n	81171b6 <mqtt_output_send+0x13a>
 8117128:	7bbb      	ldrb	r3, [r7, #14]
 811712a:	2b00      	cmp	r3, #0
 811712c:	d043      	beq.n	81171b6 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 811712e:	89bb      	ldrh	r3, [r7, #12]
 8117130:	4619      	mov	r1, r3
 8117132:	6878      	ldr	r0, [r7, #4]
 8117134:	f7ff ff58 	bl	8116fe8 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8117138:	683b      	ldr	r3, [r7, #0]
 811713a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811713e:	461c      	mov	r4, r3
 8117140:	6878      	ldr	r0, [r7, #4]
 8117142:	f7ff ff7f 	bl	8117044 <mqtt_ringbuf_len>
 8117146:	4603      	mov	r3, r0
 8117148:	461a      	mov	r2, r3
 811714a:	687b      	ldr	r3, [r7, #4]
 811714c:	885b      	ldrh	r3, [r3, #2]
 811714e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8117152:	429a      	cmp	r2, r3
 8117154:	da04      	bge.n	8117160 <mqtt_output_send+0xe4>
 8117156:	6878      	ldr	r0, [r7, #4]
 8117158:	f7ff ff74 	bl	8117044 <mqtt_ringbuf_len>
 811715c:	4603      	mov	r3, r0
 811715e:	e003      	b.n	8117168 <mqtt_output_send+0xec>
 8117160:	687b      	ldr	r3, [r7, #4]
 8117162:	885b      	ldrh	r3, [r3, #2]
 8117164:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8117168:	42a3      	cmp	r3, r4
 811716a:	dd03      	ble.n	8117174 <mqtt_output_send+0xf8>
 811716c:	683b      	ldr	r3, [r7, #0]
 811716e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8117172:	e014      	b.n	811719e <mqtt_output_send+0x122>
 8117174:	6878      	ldr	r0, [r7, #4]
 8117176:	f7ff ff65 	bl	8117044 <mqtt_ringbuf_len>
 811717a:	4603      	mov	r3, r0
 811717c:	461a      	mov	r2, r3
 811717e:	687b      	ldr	r3, [r7, #4]
 8117180:	885b      	ldrh	r3, [r3, #2]
 8117182:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8117186:	429a      	cmp	r2, r3
 8117188:	da04      	bge.n	8117194 <mqtt_output_send+0x118>
 811718a:	6878      	ldr	r0, [r7, #4]
 811718c:	f7ff ff5a 	bl	8117044 <mqtt_ringbuf_len>
 8117190:	4603      	mov	r3, r0
 8117192:	e004      	b.n	811719e <mqtt_output_send+0x122>
 8117194:	687b      	ldr	r3, [r7, #4]
 8117196:	885b      	ldrh	r3, [r3, #2]
 8117198:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 811719c:	b29b      	uxth	r3, r3
 811719e:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 81171a0:	6878      	ldr	r0, [r7, #4]
 81171a2:	f7ff ff10 	bl	8116fc6 <mqtt_ringbuf_get_ptr>
 81171a6:	4601      	mov	r1, r0
 81171a8:	89ba      	ldrh	r2, [r7, #12]
 81171aa:	2301      	movs	r3, #1
 81171ac:	6838      	ldr	r0, [r7, #0]
 81171ae:	f007 faef 	bl	811e790 <tcp_write>
 81171b2:	4603      	mov	r3, r0
 81171b4:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 81171b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81171ba:	2b00      	cmp	r3, #0
 81171bc:	d109      	bne.n	81171d2 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 81171be:	89bb      	ldrh	r3, [r7, #12]
 81171c0:	4619      	mov	r1, r3
 81171c2:	6878      	ldr	r0, [r7, #4]
 81171c4:	f7ff ff10 	bl	8116fe8 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 81171c8:	6838      	ldr	r0, [r7, #0]
 81171ca:	f008 f8cd 	bl	811f368 <tcp_output>
 81171ce:	e000      	b.n	81171d2 <mqtt_output_send+0x156>
    return;
 81171d0:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 81171d2:	3714      	adds	r7, #20
 81171d4:	46bd      	mov	sp, r7
 81171d6:	bd90      	pop	{r4, r7, pc}
 81171d8:	08125ce4 	.word	0x08125ce4
 81171dc:	08125dbc 	.word	0x08125dbc
 81171e0:	08125d94 	.word	0x08125d94

081171e4 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 81171e4:	b580      	push	{r7, lr}
 81171e6:	b086      	sub	sp, #24
 81171e8:	af00      	add	r7, sp, #0
 81171ea:	60f8      	str	r0, [r7, #12]
 81171ec:	60b9      	str	r1, [r7, #8]
 81171ee:	603b      	str	r3, [r7, #0]
 81171f0:	4613      	mov	r3, r2
 81171f2:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 81171f4:	2300      	movs	r3, #0
 81171f6:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 81171f8:	68fb      	ldr	r3, [r7, #12]
 81171fa:	2b00      	cmp	r3, #0
 81171fc:	d106      	bne.n	811720c <mqtt_create_request+0x28>
 81171fe:	4b19      	ldr	r3, [pc, #100]	@ (8117264 <mqtt_create_request+0x80>)
 8117200:	f240 1223 	movw	r2, #291	@ 0x123
 8117204:	4918      	ldr	r1, [pc, #96]	@ (8117268 <mqtt_create_request+0x84>)
 8117206:	4819      	ldr	r0, [pc, #100]	@ (811726c <mqtt_create_request+0x88>)
 8117208:	f00a fdbc 	bl	8121d84 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 811720c:	2300      	movs	r3, #0
 811720e:	74fb      	strb	r3, [r7, #19]
 8117210:	e01f      	b.n	8117252 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8117212:	7cfb      	ldrb	r3, [r7, #19]
 8117214:	011b      	lsls	r3, r3, #4
 8117216:	68fa      	ldr	r2, [r7, #12]
 8117218:	4413      	add	r3, r2
 811721a:	681a      	ldr	r2, [r3, #0]
 811721c:	7cfb      	ldrb	r3, [r7, #19]
 811721e:	011b      	lsls	r3, r3, #4
 8117220:	68f9      	ldr	r1, [r7, #12]
 8117222:	440b      	add	r3, r1
 8117224:	429a      	cmp	r2, r3
 8117226:	d111      	bne.n	811724c <mqtt_create_request+0x68>
      r = &r_objs[n];
 8117228:	7cfb      	ldrb	r3, [r7, #19]
 811722a:	011b      	lsls	r3, r3, #4
 811722c:	68fa      	ldr	r2, [r7, #12]
 811722e:	4413      	add	r3, r2
 8117230:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8117232:	697b      	ldr	r3, [r7, #20]
 8117234:	2200      	movs	r2, #0
 8117236:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8117238:	697b      	ldr	r3, [r7, #20]
 811723a:	683a      	ldr	r2, [r7, #0]
 811723c:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 811723e:	697b      	ldr	r3, [r7, #20]
 8117240:	6a3a      	ldr	r2, [r7, #32]
 8117242:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8117244:	697b      	ldr	r3, [r7, #20]
 8117246:	88fa      	ldrh	r2, [r7, #6]
 8117248:	819a      	strh	r2, [r3, #12]
      break;
 811724a:	e006      	b.n	811725a <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 811724c:	7cfb      	ldrb	r3, [r7, #19]
 811724e:	3301      	adds	r3, #1
 8117250:	74fb      	strb	r3, [r7, #19]
 8117252:	7cfb      	ldrb	r3, [r7, #19]
 8117254:	68ba      	ldr	r2, [r7, #8]
 8117256:	429a      	cmp	r2, r3
 8117258:	d8db      	bhi.n	8117212 <mqtt_create_request+0x2e>
    }
  }
  return r;
 811725a:	697b      	ldr	r3, [r7, #20]
}
 811725c:	4618      	mov	r0, r3
 811725e:	3718      	adds	r7, #24
 8117260:	46bd      	mov	sp, r7
 8117262:	bd80      	pop	{r7, pc}
 8117264:	08125ce4 	.word	0x08125ce4
 8117268:	08125ddc 	.word	0x08125ddc
 811726c:	08125d94 	.word	0x08125d94

08117270 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8117270:	b580      	push	{r7, lr}
 8117272:	b086      	sub	sp, #24
 8117274:	af00      	add	r7, sp, #0
 8117276:	6078      	str	r0, [r7, #4]
 8117278:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 811727a:	2300      	movs	r3, #0
 811727c:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 811727e:	2300      	movs	r3, #0
 8117280:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8117282:	687b      	ldr	r3, [r7, #4]
 8117284:	2b00      	cmp	r3, #0
 8117286:	d106      	bne.n	8117296 <mqtt_append_request+0x26>
 8117288:	4b1b      	ldr	r3, [pc, #108]	@ (81172f8 <mqtt_append_request+0x88>)
 811728a:	f240 123f 	movw	r2, #319	@ 0x13f
 811728e:	491b      	ldr	r1, [pc, #108]	@ (81172fc <mqtt_append_request+0x8c>)
 8117290:	481b      	ldr	r0, [pc, #108]	@ (8117300 <mqtt_append_request+0x90>)
 8117292:	f00a fd77 	bl	8121d84 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8117296:	687b      	ldr	r3, [r7, #4]
 8117298:	681b      	ldr	r3, [r3, #0]
 811729a:	60fb      	str	r3, [r7, #12]
 811729c:	e00a      	b.n	81172b4 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 811729e:	68fb      	ldr	r3, [r7, #12]
 81172a0:	89da      	ldrh	r2, [r3, #14]
 81172a2:	8a7b      	ldrh	r3, [r7, #18]
 81172a4:	4413      	add	r3, r2
 81172a6:	b29b      	uxth	r3, r3
 81172a8:	827b      	strh	r3, [r7, #18]
    head = iter;
 81172aa:	68fb      	ldr	r3, [r7, #12]
 81172ac:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 81172ae:	68fb      	ldr	r3, [r7, #12]
 81172b0:	681b      	ldr	r3, [r3, #0]
 81172b2:	60fb      	str	r3, [r7, #12]
 81172b4:	68fb      	ldr	r3, [r7, #12]
 81172b6:	2b00      	cmp	r3, #0
 81172b8:	d1f1      	bne.n	811729e <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 81172ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81172be:	2b1e      	cmp	r3, #30
 81172c0:	dd06      	ble.n	81172d0 <mqtt_append_request+0x60>
 81172c2:	4b0d      	ldr	r3, [pc, #52]	@ (81172f8 <mqtt_append_request+0x88>)
 81172c4:	f240 1247 	movw	r2, #327	@ 0x147
 81172c8:	490e      	ldr	r1, [pc, #56]	@ (8117304 <mqtt_append_request+0x94>)
 81172ca:	480d      	ldr	r0, [pc, #52]	@ (8117300 <mqtt_append_request+0x90>)
 81172cc:	f00a fd5a 	bl	8121d84 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 81172d0:	8a7b      	ldrh	r3, [r7, #18]
 81172d2:	f1c3 031e 	rsb	r3, r3, #30
 81172d6:	b29a      	uxth	r2, r3
 81172d8:	683b      	ldr	r3, [r7, #0]
 81172da:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 81172dc:	697b      	ldr	r3, [r7, #20]
 81172de:	2b00      	cmp	r3, #0
 81172e0:	d103      	bne.n	81172ea <mqtt_append_request+0x7a>
    *tail = r;
 81172e2:	687b      	ldr	r3, [r7, #4]
 81172e4:	683a      	ldr	r2, [r7, #0]
 81172e6:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 81172e8:	e002      	b.n	81172f0 <mqtt_append_request+0x80>
    head->next = r;
 81172ea:	697b      	ldr	r3, [r7, #20]
 81172ec:	683a      	ldr	r2, [r7, #0]
 81172ee:	601a      	str	r2, [r3, #0]
}
 81172f0:	bf00      	nop
 81172f2:	3718      	adds	r7, #24
 81172f4:	46bd      	mov	sp, r7
 81172f6:	bd80      	pop	{r7, pc}
 81172f8:	08125ce4 	.word	0x08125ce4
 81172fc:	08125e00 	.word	0x08125e00
 8117300:	08125d94 	.word	0x08125d94
 8117304:	08125e24 	.word	0x08125e24

08117308 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8117308:	b480      	push	{r7}
 811730a:	b083      	sub	sp, #12
 811730c:	af00      	add	r7, sp, #0
 811730e:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8117310:	687b      	ldr	r3, [r7, #4]
 8117312:	2b00      	cmp	r3, #0
 8117314:	d002      	beq.n	811731c <mqtt_delete_request+0x14>
    r->next = r;
 8117316:	687b      	ldr	r3, [r7, #4]
 8117318:	687a      	ldr	r2, [r7, #4]
 811731a:	601a      	str	r2, [r3, #0]
  }
}
 811731c:	bf00      	nop
 811731e:	370c      	adds	r7, #12
 8117320:	46bd      	mov	sp, r7
 8117322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117326:	4770      	bx	lr

08117328 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8117328:	b580      	push	{r7, lr}
 811732a:	b084      	sub	sp, #16
 811732c:	af00      	add	r7, sp, #0
 811732e:	6078      	str	r0, [r7, #4]
 8117330:	460b      	mov	r3, r1
 8117332:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8117334:	2300      	movs	r3, #0
 8117336:	60fb      	str	r3, [r7, #12]
 8117338:	2300      	movs	r3, #0
 811733a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 811733c:	687b      	ldr	r3, [r7, #4]
 811733e:	2b00      	cmp	r3, #0
 8117340:	d106      	bne.n	8117350 <mqtt_take_request+0x28>
 8117342:	4b1f      	ldr	r3, [pc, #124]	@ (81173c0 <mqtt_take_request+0x98>)
 8117344:	f240 1267 	movw	r2, #359	@ 0x167
 8117348:	491e      	ldr	r1, [pc, #120]	@ (81173c4 <mqtt_take_request+0x9c>)
 811734a:	481f      	ldr	r0, [pc, #124]	@ (81173c8 <mqtt_take_request+0xa0>)
 811734c:	f00a fd1a 	bl	8121d84 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8117350:	687b      	ldr	r3, [r7, #4]
 8117352:	681b      	ldr	r3, [r3, #0]
 8117354:	60fb      	str	r3, [r7, #12]
 8117356:	e009      	b.n	811736c <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8117358:	68fb      	ldr	r3, [r7, #12]
 811735a:	899b      	ldrh	r3, [r3, #12]
 811735c:	887a      	ldrh	r2, [r7, #2]
 811735e:	429a      	cmp	r2, r3
 8117360:	d008      	beq.n	8117374 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8117362:	68fb      	ldr	r3, [r7, #12]
 8117364:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8117366:	68fb      	ldr	r3, [r7, #12]
 8117368:	681b      	ldr	r3, [r3, #0]
 811736a:	60fb      	str	r3, [r7, #12]
 811736c:	68fb      	ldr	r3, [r7, #12]
 811736e:	2b00      	cmp	r3, #0
 8117370:	d1f2      	bne.n	8117358 <mqtt_take_request+0x30>
 8117372:	e000      	b.n	8117376 <mqtt_take_request+0x4e>
      break;
 8117374:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8117376:	68fb      	ldr	r3, [r7, #12]
 8117378:	2b00      	cmp	r3, #0
 811737a:	d01c      	beq.n	81173b6 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 811737c:	68bb      	ldr	r3, [r7, #8]
 811737e:	2b00      	cmp	r3, #0
 8117380:	d104      	bne.n	811738c <mqtt_take_request+0x64>
      *tail = iter->next;
 8117382:	68fb      	ldr	r3, [r7, #12]
 8117384:	681a      	ldr	r2, [r3, #0]
 8117386:	687b      	ldr	r3, [r7, #4]
 8117388:	601a      	str	r2, [r3, #0]
 811738a:	e003      	b.n	8117394 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 811738c:	68fb      	ldr	r3, [r7, #12]
 811738e:	681a      	ldr	r2, [r3, #0]
 8117390:	68bb      	ldr	r3, [r7, #8]
 8117392:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8117394:	68fb      	ldr	r3, [r7, #12]
 8117396:	681b      	ldr	r3, [r3, #0]
 8117398:	2b00      	cmp	r3, #0
 811739a:	d009      	beq.n	81173b0 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 811739c:	68fb      	ldr	r3, [r7, #12]
 811739e:	681b      	ldr	r3, [r3, #0]
 81173a0:	89d9      	ldrh	r1, [r3, #14]
 81173a2:	68fb      	ldr	r3, [r7, #12]
 81173a4:	89da      	ldrh	r2, [r3, #14]
 81173a6:	68fb      	ldr	r3, [r7, #12]
 81173a8:	681b      	ldr	r3, [r3, #0]
 81173aa:	440a      	add	r2, r1
 81173ac:	b292      	uxth	r2, r2
 81173ae:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 81173b0:	68fb      	ldr	r3, [r7, #12]
 81173b2:	2200      	movs	r2, #0
 81173b4:	601a      	str	r2, [r3, #0]
  }
  return iter;
 81173b6:	68fb      	ldr	r3, [r7, #12]
}
 81173b8:	4618      	mov	r0, r3
 81173ba:	3710      	adds	r7, #16
 81173bc:	46bd      	mov	sp, r7
 81173be:	bd80      	pop	{r7, pc}
 81173c0:	08125ce4 	.word	0x08125ce4
 81173c4:	08125e5c 	.word	0x08125e5c
 81173c8:	08125d94 	.word	0x08125d94

081173cc <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 81173cc:	b580      	push	{r7, lr}
 81173ce:	b084      	sub	sp, #16
 81173d0:	af00      	add	r7, sp, #0
 81173d2:	6078      	str	r0, [r7, #4]
 81173d4:	460b      	mov	r3, r1
 81173d6:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 81173d8:	687b      	ldr	r3, [r7, #4]
 81173da:	2b00      	cmp	r3, #0
 81173dc:	d106      	bne.n	81173ec <mqtt_request_time_elapsed+0x20>
 81173de:	4b21      	ldr	r3, [pc, #132]	@ (8117464 <mqtt_request_time_elapsed+0x98>)
 81173e0:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 81173e4:	4920      	ldr	r1, [pc, #128]	@ (8117468 <mqtt_request_time_elapsed+0x9c>)
 81173e6:	4821      	ldr	r0, [pc, #132]	@ (811746c <mqtt_request_time_elapsed+0xa0>)
 81173e8:	f00a fccc 	bl	8121d84 <iprintf>
  r = *tail;
 81173ec:	687b      	ldr	r3, [r7, #4]
 81173ee:	681b      	ldr	r3, [r3, #0]
 81173f0:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 81173f2:	e02c      	b.n	811744e <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 81173f4:	78fb      	ldrb	r3, [r7, #3]
 81173f6:	b29a      	uxth	r2, r3
 81173f8:	68fb      	ldr	r3, [r7, #12]
 81173fa:	89db      	ldrh	r3, [r3, #14]
 81173fc:	429a      	cmp	r2, r3
 81173fe:	d31c      	bcc.n	811743a <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8117400:	68fb      	ldr	r3, [r7, #12]
 8117402:	89db      	ldrh	r3, [r3, #14]
 8117404:	b2db      	uxtb	r3, r3
 8117406:	78fa      	ldrb	r2, [r7, #3]
 8117408:	1ad3      	subs	r3, r2, r3
 811740a:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 811740c:	68fb      	ldr	r3, [r7, #12]
 811740e:	681a      	ldr	r2, [r3, #0]
 8117410:	687b      	ldr	r3, [r7, #4]
 8117412:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8117414:	68fb      	ldr	r3, [r7, #12]
 8117416:	685b      	ldr	r3, [r3, #4]
 8117418:	2b00      	cmp	r3, #0
 811741a:	d007      	beq.n	811742c <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 811741c:	68fb      	ldr	r3, [r7, #12]
 811741e:	685b      	ldr	r3, [r3, #4]
 8117420:	68fa      	ldr	r2, [r7, #12]
 8117422:	6892      	ldr	r2, [r2, #8]
 8117424:	f06f 0102 	mvn.w	r1, #2
 8117428:	4610      	mov	r0, r2
 811742a:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 811742c:	68f8      	ldr	r0, [r7, #12]
 811742e:	f7ff ff6b 	bl	8117308 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8117432:	687b      	ldr	r3, [r7, #4]
 8117434:	681b      	ldr	r3, [r3, #0]
 8117436:	60fb      	str	r3, [r7, #12]
 8117438:	e009      	b.n	811744e <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 811743a:	68fb      	ldr	r3, [r7, #12]
 811743c:	89da      	ldrh	r2, [r3, #14]
 811743e:	78fb      	ldrb	r3, [r7, #3]
 8117440:	b29b      	uxth	r3, r3
 8117442:	1ad3      	subs	r3, r2, r3
 8117444:	b29a      	uxth	r2, r3
 8117446:	68fb      	ldr	r3, [r7, #12]
 8117448:	81da      	strh	r2, [r3, #14]
      t = 0;
 811744a:	2300      	movs	r3, #0
 811744c:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 811744e:	78fb      	ldrb	r3, [r7, #3]
 8117450:	2b00      	cmp	r3, #0
 8117452:	d002      	beq.n	811745a <mqtt_request_time_elapsed+0x8e>
 8117454:	68fb      	ldr	r3, [r7, #12]
 8117456:	2b00      	cmp	r3, #0
 8117458:	d1cc      	bne.n	81173f4 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 811745a:	bf00      	nop
 811745c:	3710      	adds	r7, #16
 811745e:	46bd      	mov	sp, r7
 8117460:	bd80      	pop	{r7, pc}
 8117462:	bf00      	nop
 8117464:	08125ce4 	.word	0x08125ce4
 8117468:	08125e7c 	.word	0x08125e7c
 811746c:	08125d94 	.word	0x08125d94

08117470 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8117470:	b580      	push	{r7, lr}
 8117472:	b084      	sub	sp, #16
 8117474:	af00      	add	r7, sp, #0
 8117476:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8117478:	687b      	ldr	r3, [r7, #4]
 811747a:	2b00      	cmp	r3, #0
 811747c:	d106      	bne.n	811748c <mqtt_clear_requests+0x1c>
 811747e:	4b0e      	ldr	r3, [pc, #56]	@ (81174b8 <mqtt_clear_requests+0x48>)
 8117480:	f240 12a7 	movw	r2, #423	@ 0x1a7
 8117484:	490d      	ldr	r1, [pc, #52]	@ (81174bc <mqtt_clear_requests+0x4c>)
 8117486:	480e      	ldr	r0, [pc, #56]	@ (81174c0 <mqtt_clear_requests+0x50>)
 8117488:	f00a fc7c 	bl	8121d84 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 811748c:	687b      	ldr	r3, [r7, #4]
 811748e:	681b      	ldr	r3, [r3, #0]
 8117490:	60fb      	str	r3, [r7, #12]
 8117492:	e007      	b.n	81174a4 <mqtt_clear_requests+0x34>
    next = iter->next;
 8117494:	68fb      	ldr	r3, [r7, #12]
 8117496:	681b      	ldr	r3, [r3, #0]
 8117498:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 811749a:	68f8      	ldr	r0, [r7, #12]
 811749c:	f7ff ff34 	bl	8117308 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 81174a0:	68bb      	ldr	r3, [r7, #8]
 81174a2:	60fb      	str	r3, [r7, #12]
 81174a4:	68fb      	ldr	r3, [r7, #12]
 81174a6:	2b00      	cmp	r3, #0
 81174a8:	d1f4      	bne.n	8117494 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 81174aa:	687b      	ldr	r3, [r7, #4]
 81174ac:	2200      	movs	r2, #0
 81174ae:	601a      	str	r2, [r3, #0]
}
 81174b0:	bf00      	nop
 81174b2:	3710      	adds	r7, #16
 81174b4:	46bd      	mov	sp, r7
 81174b6:	bd80      	pop	{r7, pc}
 81174b8:	08125ce4 	.word	0x08125ce4
 81174bc:	08125ea4 	.word	0x08125ea4
 81174c0:	08125d94 	.word	0x08125d94

081174c4 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 81174c4:	b580      	push	{r7, lr}
 81174c6:	b084      	sub	sp, #16
 81174c8:	af00      	add	r7, sp, #0
 81174ca:	6078      	str	r0, [r7, #4]
 81174cc:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 81174ce:	687b      	ldr	r3, [r7, #4]
 81174d0:	2b00      	cmp	r3, #0
 81174d2:	d106      	bne.n	81174e2 <mqtt_init_requests+0x1e>
 81174d4:	4b0f      	ldr	r3, [pc, #60]	@ (8117514 <mqtt_init_requests+0x50>)
 81174d6:	f240 12b7 	movw	r2, #439	@ 0x1b7
 81174da:	490f      	ldr	r1, [pc, #60]	@ (8117518 <mqtt_init_requests+0x54>)
 81174dc:	480f      	ldr	r0, [pc, #60]	@ (811751c <mqtt_init_requests+0x58>)
 81174de:	f00a fc51 	bl	8121d84 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 81174e2:	2300      	movs	r3, #0
 81174e4:	73fb      	strb	r3, [r7, #15]
 81174e6:	e00b      	b.n	8117500 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 81174e8:	7bfb      	ldrb	r3, [r7, #15]
 81174ea:	011a      	lsls	r2, r3, #4
 81174ec:	7bfb      	ldrb	r3, [r7, #15]
 81174ee:	011b      	lsls	r3, r3, #4
 81174f0:	6879      	ldr	r1, [r7, #4]
 81174f2:	440b      	add	r3, r1
 81174f4:	6879      	ldr	r1, [r7, #4]
 81174f6:	440a      	add	r2, r1
 81174f8:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 81174fa:	7bfb      	ldrb	r3, [r7, #15]
 81174fc:	3301      	adds	r3, #1
 81174fe:	73fb      	strb	r3, [r7, #15]
 8117500:	7bfb      	ldrb	r3, [r7, #15]
 8117502:	683a      	ldr	r2, [r7, #0]
 8117504:	429a      	cmp	r2, r3
 8117506:	d8ef      	bhi.n	81174e8 <mqtt_init_requests+0x24>
  }
}
 8117508:	bf00      	nop
 811750a:	bf00      	nop
 811750c:	3710      	adds	r7, #16
 811750e:	46bd      	mov	sp, r7
 8117510:	bd80      	pop	{r7, pc}
 8117512:	bf00      	nop
 8117514:	08125ce4 	.word	0x08125ce4
 8117518:	08125ec8 	.word	0x08125ec8
 811751c:	08125d94 	.word	0x08125d94

08117520 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8117520:	b580      	push	{r7, lr}
 8117522:	b082      	sub	sp, #8
 8117524:	af00      	add	r7, sp, #0
 8117526:	6078      	str	r0, [r7, #4]
 8117528:	460b      	mov	r3, r1
 811752a:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 811752c:	78fb      	ldrb	r3, [r7, #3]
 811752e:	4619      	mov	r1, r3
 8117530:	6878      	ldr	r0, [r7, #4]
 8117532:	f7ff fd27 	bl	8116f84 <mqtt_ringbuf_put>
}
 8117536:	bf00      	nop
 8117538:	3708      	adds	r7, #8
 811753a:	46bd      	mov	sp, r7
 811753c:	bd80      	pop	{r7, pc}

0811753e <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 811753e:	b580      	push	{r7, lr}
 8117540:	b082      	sub	sp, #8
 8117542:	af00      	add	r7, sp, #0
 8117544:	6078      	str	r0, [r7, #4]
 8117546:	460b      	mov	r3, r1
 8117548:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 811754a:	887b      	ldrh	r3, [r7, #2]
 811754c:	0a1b      	lsrs	r3, r3, #8
 811754e:	b29b      	uxth	r3, r3
 8117550:	b2db      	uxtb	r3, r3
 8117552:	4619      	mov	r1, r3
 8117554:	6878      	ldr	r0, [r7, #4]
 8117556:	f7ff fd15 	bl	8116f84 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 811755a:	887b      	ldrh	r3, [r7, #2]
 811755c:	b2db      	uxtb	r3, r3
 811755e:	4619      	mov	r1, r3
 8117560:	6878      	ldr	r0, [r7, #4]
 8117562:	f7ff fd0f 	bl	8116f84 <mqtt_ringbuf_put>
}
 8117566:	bf00      	nop
 8117568:	3708      	adds	r7, #8
 811756a:	46bd      	mov	sp, r7
 811756c:	bd80      	pop	{r7, pc}

0811756e <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 811756e:	b580      	push	{r7, lr}
 8117570:	b086      	sub	sp, #24
 8117572:	af00      	add	r7, sp, #0
 8117574:	60f8      	str	r0, [r7, #12]
 8117576:	60b9      	str	r1, [r7, #8]
 8117578:	4613      	mov	r3, r2
 811757a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 811757c:	2300      	movs	r3, #0
 811757e:	82fb      	strh	r3, [r7, #22]
 8117580:	e00a      	b.n	8117598 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8117582:	8afb      	ldrh	r3, [r7, #22]
 8117584:	68ba      	ldr	r2, [r7, #8]
 8117586:	4413      	add	r3, r2
 8117588:	781b      	ldrb	r3, [r3, #0]
 811758a:	4619      	mov	r1, r3
 811758c:	68f8      	ldr	r0, [r7, #12]
 811758e:	f7ff fcf9 	bl	8116f84 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8117592:	8afb      	ldrh	r3, [r7, #22]
 8117594:	3301      	adds	r3, #1
 8117596:	82fb      	strh	r3, [r7, #22]
 8117598:	8afa      	ldrh	r2, [r7, #22]
 811759a:	88fb      	ldrh	r3, [r7, #6]
 811759c:	429a      	cmp	r2, r3
 811759e:	d3f0      	bcc.n	8117582 <mqtt_output_append_buf+0x14>
  }
}
 81175a0:	bf00      	nop
 81175a2:	bf00      	nop
 81175a4:	3718      	adds	r7, #24
 81175a6:	46bd      	mov	sp, r7
 81175a8:	bd80      	pop	{r7, pc}

081175aa <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 81175aa:	b580      	push	{r7, lr}
 81175ac:	b086      	sub	sp, #24
 81175ae:	af00      	add	r7, sp, #0
 81175b0:	60f8      	str	r0, [r7, #12]
 81175b2:	60b9      	str	r1, [r7, #8]
 81175b4:	4613      	mov	r3, r2
 81175b6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 81175b8:	88fb      	ldrh	r3, [r7, #6]
 81175ba:	0a1b      	lsrs	r3, r3, #8
 81175bc:	b29b      	uxth	r3, r3
 81175be:	b2db      	uxtb	r3, r3
 81175c0:	4619      	mov	r1, r3
 81175c2:	68f8      	ldr	r0, [r7, #12]
 81175c4:	f7ff fcde 	bl	8116f84 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 81175c8:	88fb      	ldrh	r3, [r7, #6]
 81175ca:	b2db      	uxtb	r3, r3
 81175cc:	4619      	mov	r1, r3
 81175ce:	68f8      	ldr	r0, [r7, #12]
 81175d0:	f7ff fcd8 	bl	8116f84 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 81175d4:	2300      	movs	r3, #0
 81175d6:	82fb      	strh	r3, [r7, #22]
 81175d8:	e00a      	b.n	81175f0 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 81175da:	8afb      	ldrh	r3, [r7, #22]
 81175dc:	68ba      	ldr	r2, [r7, #8]
 81175de:	4413      	add	r3, r2
 81175e0:	781b      	ldrb	r3, [r3, #0]
 81175e2:	4619      	mov	r1, r3
 81175e4:	68f8      	ldr	r0, [r7, #12]
 81175e6:	f7ff fccd 	bl	8116f84 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 81175ea:	8afb      	ldrh	r3, [r7, #22]
 81175ec:	3301      	adds	r3, #1
 81175ee:	82fb      	strh	r3, [r7, #22]
 81175f0:	8afa      	ldrh	r2, [r7, #22]
 81175f2:	88fb      	ldrh	r3, [r7, #6]
 81175f4:	429a      	cmp	r2, r3
 81175f6:	d3f0      	bcc.n	81175da <mqtt_output_append_string+0x30>
  }
}
 81175f8:	bf00      	nop
 81175fa:	bf00      	nop
 81175fc:	3718      	adds	r7, #24
 81175fe:	46bd      	mov	sp, r7
 8117600:	bd80      	pop	{r7, pc}

08117602 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8117602:	b580      	push	{r7, lr}
 8117604:	b082      	sub	sp, #8
 8117606:	af00      	add	r7, sp, #0
 8117608:	6078      	str	r0, [r7, #4]
 811760a:	4608      	mov	r0, r1
 811760c:	4611      	mov	r1, r2
 811760e:	461a      	mov	r2, r3
 8117610:	4603      	mov	r3, r0
 8117612:	70fb      	strb	r3, [r7, #3]
 8117614:	460b      	mov	r3, r1
 8117616:	70bb      	strb	r3, [r7, #2]
 8117618:	4613      	mov	r3, r2
 811761a:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 811761c:	78fb      	ldrb	r3, [r7, #3]
 811761e:	011b      	lsls	r3, r3, #4
 8117620:	b25a      	sxtb	r2, r3
 8117622:	78bb      	ldrb	r3, [r7, #2]
 8117624:	00db      	lsls	r3, r3, #3
 8117626:	b25b      	sxtb	r3, r3
 8117628:	f003 0308 	and.w	r3, r3, #8
 811762c:	b25b      	sxtb	r3, r3
 811762e:	4313      	orrs	r3, r2
 8117630:	b25a      	sxtb	r2, r3
 8117632:	787b      	ldrb	r3, [r7, #1]
 8117634:	005b      	lsls	r3, r3, #1
 8117636:	b25b      	sxtb	r3, r3
 8117638:	f003 0306 	and.w	r3, r3, #6
 811763c:	b25b      	sxtb	r3, r3
 811763e:	4313      	orrs	r3, r2
 8117640:	b25a      	sxtb	r2, r3
 8117642:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8117646:	f003 0301 	and.w	r3, r3, #1
 811764a:	b25b      	sxtb	r3, r3
 811764c:	4313      	orrs	r3, r2
 811764e:	b25b      	sxtb	r3, r3
 8117650:	b2db      	uxtb	r3, r3
 8117652:	4619      	mov	r1, r3
 8117654:	6878      	ldr	r0, [r7, #4]
 8117656:	f7ff ff63 	bl	8117520 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 811765a:	8abb      	ldrh	r3, [r7, #20]
 811765c:	b25b      	sxtb	r3, r3
 811765e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8117662:	b25b      	sxtb	r3, r3
 8117664:	8aba      	ldrh	r2, [r7, #20]
 8117666:	2a7f      	cmp	r2, #127	@ 0x7f
 8117668:	d902      	bls.n	8117670 <mqtt_output_append_fixed_header+0x6e>
 811766a:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 811766e:	e000      	b.n	8117672 <mqtt_output_append_fixed_header+0x70>
 8117670:	2200      	movs	r2, #0
 8117672:	4313      	orrs	r3, r2
 8117674:	b25b      	sxtb	r3, r3
 8117676:	b2db      	uxtb	r3, r3
 8117678:	4619      	mov	r1, r3
 811767a:	6878      	ldr	r0, [r7, #4]
 811767c:	f7ff ff50 	bl	8117520 <mqtt_output_append_u8>
    r_length >>= 7;
 8117680:	8abb      	ldrh	r3, [r7, #20]
 8117682:	09db      	lsrs	r3, r3, #7
 8117684:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8117686:	8abb      	ldrh	r3, [r7, #20]
 8117688:	2b00      	cmp	r3, #0
 811768a:	d1e6      	bne.n	811765a <mqtt_output_append_fixed_header+0x58>
}
 811768c:	bf00      	nop
 811768e:	bf00      	nop
 8117690:	3708      	adds	r7, #8
 8117692:	46bd      	mov	sp, r7
 8117694:	bd80      	pop	{r7, pc}
	...

08117698 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8117698:	b590      	push	{r4, r7, lr}
 811769a:	b085      	sub	sp, #20
 811769c:	af00      	add	r7, sp, #0
 811769e:	6078      	str	r0, [r7, #4]
 81176a0:	460b      	mov	r3, r1
 81176a2:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 81176a4:	887b      	ldrh	r3, [r7, #2]
 81176a6:	3301      	adds	r3, #1
 81176a8:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 81176aa:	687b      	ldr	r3, [r7, #4]
 81176ac:	2b00      	cmp	r3, #0
 81176ae:	d106      	bne.n	81176be <mqtt_output_check_space+0x26>
 81176b0:	4b0f      	ldr	r3, [pc, #60]	@ (81176f0 <mqtt_output_check_space+0x58>)
 81176b2:	f240 2207 	movw	r2, #519	@ 0x207
 81176b6:	490f      	ldr	r1, [pc, #60]	@ (81176f4 <mqtt_output_check_space+0x5c>)
 81176b8:	480f      	ldr	r0, [pc, #60]	@ (81176f8 <mqtt_output_check_space+0x60>)
 81176ba:	f00a fb63 	bl	8121d84 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 81176be:	89fb      	ldrh	r3, [r7, #14]
 81176c0:	3301      	adds	r3, #1
 81176c2:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 81176c4:	887b      	ldrh	r3, [r7, #2]
 81176c6:	09db      	lsrs	r3, r3, #7
 81176c8:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 81176ca:	887b      	ldrh	r3, [r7, #2]
 81176cc:	2b00      	cmp	r3, #0
 81176ce:	d1f6      	bne.n	81176be <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 81176d0:	89fc      	ldrh	r4, [r7, #14]
 81176d2:	6878      	ldr	r0, [r7, #4]
 81176d4:	f7ff fcb6 	bl	8117044 <mqtt_ringbuf_len>
 81176d8:	4603      	mov	r3, r0
 81176da:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 81176de:	429c      	cmp	r4, r3
 81176e0:	bfd4      	ite	le
 81176e2:	2301      	movle	r3, #1
 81176e4:	2300      	movgt	r3, #0
 81176e6:	b2db      	uxtb	r3, r3
}
 81176e8:	4618      	mov	r0, r3
 81176ea:	3714      	adds	r7, #20
 81176ec:	46bd      	mov	sp, r7
 81176ee:	bd90      	pop	{r4, r7, pc}
 81176f0:	08125ce4 	.word	0x08125ce4
 81176f4:	08125eec 	.word	0x08125eec
 81176f8:	08125d94 	.word	0x08125d94

081176fc <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 81176fc:	b580      	push	{r7, lr}
 81176fe:	b084      	sub	sp, #16
 8117700:	af00      	add	r7, sp, #0
 8117702:	6078      	str	r0, [r7, #4]
 8117704:	460b      	mov	r3, r1
 8117706:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8117708:	687b      	ldr	r3, [r7, #4]
 811770a:	2b00      	cmp	r3, #0
 811770c:	d106      	bne.n	811771c <mqtt_close+0x20>
 811770e:	4b27      	ldr	r3, [pc, #156]	@ (81177ac <mqtt_close+0xb0>)
 8117710:	f240 221b 	movw	r2, #539	@ 0x21b
 8117714:	4926      	ldr	r1, [pc, #152]	@ (81177b0 <mqtt_close+0xb4>)
 8117716:	4827      	ldr	r0, [pc, #156]	@ (81177b4 <mqtt_close+0xb8>)
 8117718:	f00a fb34 	bl	8121d84 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 811771c:	687b      	ldr	r3, [r7, #4]
 811771e:	68db      	ldr	r3, [r3, #12]
 8117720:	2b00      	cmp	r3, #0
 8117722:	d024      	beq.n	811776e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8117724:	687b      	ldr	r3, [r7, #4]
 8117726:	68db      	ldr	r3, [r3, #12]
 8117728:	2100      	movs	r1, #0
 811772a:	4618      	mov	r0, r3
 811772c:	f004 f914 	bl	811b958 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8117730:	687b      	ldr	r3, [r7, #4]
 8117732:	68db      	ldr	r3, [r3, #12]
 8117734:	2100      	movs	r1, #0
 8117736:	4618      	mov	r0, r3
 8117738:	f004 f956 	bl	811b9e8 <tcp_err>
    altcp_sent(client->conn, NULL);
 811773c:	687b      	ldr	r3, [r7, #4]
 811773e:	68db      	ldr	r3, [r3, #12]
 8117740:	2100      	movs	r1, #0
 8117742:	4618      	mov	r0, r3
 8117744:	f004 f92c 	bl	811b9a0 <tcp_sent>
    res = altcp_close(client->conn);
 8117748:	687b      	ldr	r3, [r7, #4]
 811774a:	68db      	ldr	r3, [r3, #12]
 811774c:	4618      	mov	r0, r3
 811774e:	f002 ff1d 	bl	811a58c <tcp_close>
 8117752:	4603      	mov	r3, r0
 8117754:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8117756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811775a:	2b00      	cmp	r3, #0
 811775c:	d004      	beq.n	8117768 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 811775e:	687b      	ldr	r3, [r7, #4]
 8117760:	68db      	ldr	r3, [r3, #12]
 8117762:	4618      	mov	r0, r3
 8117764:	f003 f800 	bl	811a768 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8117768:	687b      	ldr	r3, [r7, #4]
 811776a:	2200      	movs	r2, #0
 811776c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 811776e:	687b      	ldr	r3, [r7, #4]
 8117770:	3318      	adds	r3, #24
 8117772:	4618      	mov	r0, r3
 8117774:	f7ff fe7c 	bl	8117470 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8117778:	6879      	ldr	r1, [r7, #4]
 811777a:	480f      	ldr	r0, [pc, #60]	@ (81177b8 <mqtt_close+0xbc>)
 811777c:	f009 f828 	bl	81207d0 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8117780:	687b      	ldr	r3, [r7, #4]
 8117782:	7a9b      	ldrb	r3, [r3, #10]
 8117784:	2b00      	cmp	r3, #0
 8117786:	d00d      	beq.n	81177a4 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8117788:	687b      	ldr	r3, [r7, #4]
 811778a:	2200      	movs	r2, #0
 811778c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 811778e:	687b      	ldr	r3, [r7, #4]
 8117790:	695b      	ldr	r3, [r3, #20]
 8117792:	2b00      	cmp	r3, #0
 8117794:	d006      	beq.n	81177a4 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8117796:	687b      	ldr	r3, [r7, #4]
 8117798:	695b      	ldr	r3, [r3, #20]
 811779a:	687a      	ldr	r2, [r7, #4]
 811779c:	6911      	ldr	r1, [r2, #16]
 811779e:	887a      	ldrh	r2, [r7, #2]
 81177a0:	6878      	ldr	r0, [r7, #4]
 81177a2:	4798      	blx	r3
    }
  }
}
 81177a4:	bf00      	nop
 81177a6:	3710      	adds	r7, #16
 81177a8:	46bd      	mov	sp, r7
 81177aa:	bd80      	pop	{r7, pc}
 81177ac:	08125ce4 	.word	0x08125ce4
 81177b0:	08125f10 	.word	0x08125f10
 81177b4:	08125d94 	.word	0x08125d94
 81177b8:	081177bd 	.word	0x081177bd

081177bc <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 81177bc:	b580      	push	{r7, lr}
 81177be:	b086      	sub	sp, #24
 81177c0:	af02      	add	r7, sp, #8
 81177c2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 81177c4:	2301      	movs	r3, #1
 81177c6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 81177c8:	687b      	ldr	r3, [r7, #4]
 81177ca:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 81177cc:	68bb      	ldr	r3, [r7, #8]
 81177ce:	2b00      	cmp	r3, #0
 81177d0:	d106      	bne.n	81177e0 <mqtt_cyclic_timer+0x24>
 81177d2:	4b44      	ldr	r3, [pc, #272]	@ (81178e4 <mqtt_cyclic_timer+0x128>)
 81177d4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 81177d8:	4943      	ldr	r1, [pc, #268]	@ (81178e8 <mqtt_cyclic_timer+0x12c>)
 81177da:	4844      	ldr	r0, [pc, #272]	@ (81178ec <mqtt_cyclic_timer+0x130>)
 81177dc:	f00a fad2 	bl	8121d84 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 81177e0:	68bb      	ldr	r3, [r7, #8]
 81177e2:	7a9b      	ldrb	r3, [r3, #10]
 81177e4:	2b02      	cmp	r3, #2
 81177e6:	d115      	bne.n	8117814 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 81177e8:	68bb      	ldr	r3, [r7, #8]
 81177ea:	881b      	ldrh	r3, [r3, #0]
 81177ec:	3301      	adds	r3, #1
 81177ee:	b29a      	uxth	r2, r3
 81177f0:	68bb      	ldr	r3, [r7, #8]
 81177f2:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 81177f4:	68bb      	ldr	r3, [r7, #8]
 81177f6:	881b      	ldrh	r3, [r3, #0]
 81177f8:	461a      	mov	r2, r3
 81177fa:	4613      	mov	r3, r2
 81177fc:	009b      	lsls	r3, r3, #2
 81177fe:	4413      	add	r3, r2
 8117800:	2b63      	cmp	r3, #99	@ 0x63
 8117802:	dd61      	ble.n	81178c8 <mqtt_cyclic_timer+0x10c>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8117804:	f240 1101 	movw	r1, #257	@ 0x101
 8117808:	68b8      	ldr	r0, [r7, #8]
 811780a:	f7ff ff77 	bl	81176fc <mqtt_close>
      restart_timer = 0;
 811780e:	2300      	movs	r3, #0
 8117810:	73fb      	strb	r3, [r7, #15]
 8117812:	e059      	b.n	81178c8 <mqtt_cyclic_timer+0x10c>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8117814:	68bb      	ldr	r3, [r7, #8]
 8117816:	7a9b      	ldrb	r3, [r3, #10]
 8117818:	2b03      	cmp	r3, #3
 811781a:	d153      	bne.n	81178c4 <mqtt_cyclic_timer+0x108>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 811781c:	68bb      	ldr	r3, [r7, #8]
 811781e:	3318      	adds	r3, #24
 8117820:	2105      	movs	r1, #5
 8117822:	4618      	mov	r0, r3
 8117824:	f7ff fdd2 	bl	81173cc <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8117828:	68bb      	ldr	r3, [r7, #8]
 811782a:	885b      	ldrh	r3, [r3, #2]
 811782c:	2b00      	cmp	r3, #0
 811782e:	d04b      	beq.n	81178c8 <mqtt_cyclic_timer+0x10c>

      client->server_watchdog++;
 8117830:	68bb      	ldr	r3, [r7, #8]
 8117832:	889b      	ldrh	r3, [r3, #4]
 8117834:	3301      	adds	r3, #1
 8117836:	b29a      	uxth	r2, r3
 8117838:	68bb      	ldr	r3, [r7, #8]
 811783a:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 811783c:	68bb      	ldr	r3, [r7, #8]
 811783e:	889b      	ldrh	r3, [r3, #4]
 8117840:	461a      	mov	r2, r3
 8117842:	4613      	mov	r3, r2
 8117844:	009b      	lsls	r3, r3, #2
 8117846:	441a      	add	r2, r3
 8117848:	68bb      	ldr	r3, [r7, #8]
 811784a:	885b      	ldrh	r3, [r3, #2]
 811784c:	4619      	mov	r1, r3
 811784e:	68bb      	ldr	r3, [r7, #8]
 8117850:	885b      	ldrh	r3, [r3, #2]
 8117852:	085b      	lsrs	r3, r3, #1
 8117854:	b29b      	uxth	r3, r3
 8117856:	440b      	add	r3, r1
 8117858:	429a      	cmp	r2, r3
 811785a:	dd06      	ble.n	811786a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 811785c:	f240 1101 	movw	r1, #257	@ 0x101
 8117860:	68b8      	ldr	r0, [r7, #8]
 8117862:	f7ff ff4b 	bl	81176fc <mqtt_close>
        restart_timer = 0;
 8117866:	2300      	movs	r3, #0
 8117868:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 811786a:	68bb      	ldr	r3, [r7, #8]
 811786c:	881b      	ldrh	r3, [r3, #0]
 811786e:	461a      	mov	r2, r3
 8117870:	4613      	mov	r3, r2
 8117872:	009b      	lsls	r3, r3, #2
 8117874:	4413      	add	r3, r2
 8117876:	68ba      	ldr	r2, [r7, #8]
 8117878:	8852      	ldrh	r2, [r2, #2]
 811787a:	4293      	cmp	r3, r2
 811787c:	db1b      	blt.n	81178b6 <mqtt_cyclic_timer+0xfa>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 811787e:	68ba      	ldr	r2, [r7, #8]
 8117880:	f241 136c 	movw	r3, #4460	@ 0x116c
 8117884:	4413      	add	r3, r2
 8117886:	2100      	movs	r1, #0
 8117888:	4618      	mov	r0, r3
 811788a:	f7ff ff05 	bl	8117698 <mqtt_output_check_space>
 811788e:	4603      	mov	r3, r0
 8117890:	2b00      	cmp	r3, #0
 8117892:	d019      	beq.n	81178c8 <mqtt_cyclic_timer+0x10c>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8117894:	68bb      	ldr	r3, [r7, #8]
 8117896:	f241 106c 	movw	r0, #4460	@ 0x116c
 811789a:	4418      	add	r0, r3
 811789c:	2300      	movs	r3, #0
 811789e:	9301      	str	r3, [sp, #4]
 81178a0:	2300      	movs	r3, #0
 81178a2:	9300      	str	r3, [sp, #0]
 81178a4:	2300      	movs	r3, #0
 81178a6:	2200      	movs	r2, #0
 81178a8:	210c      	movs	r1, #12
 81178aa:	f7ff feaa 	bl	8117602 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 81178ae:	68bb      	ldr	r3, [r7, #8]
 81178b0:	2200      	movs	r2, #0
 81178b2:	801a      	strh	r2, [r3, #0]
 81178b4:	e008      	b.n	81178c8 <mqtt_cyclic_timer+0x10c>
        }
      } else {
        client->cyclic_tick++;
 81178b6:	68bb      	ldr	r3, [r7, #8]
 81178b8:	881b      	ldrh	r3, [r3, #0]
 81178ba:	3301      	adds	r3, #1
 81178bc:	b29a      	uxth	r2, r3
 81178be:	68bb      	ldr	r3, [r7, #8]
 81178c0:	801a      	strh	r2, [r3, #0]
 81178c2:	e001      	b.n	81178c8 <mqtt_cyclic_timer+0x10c>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 81178c4:	2300      	movs	r3, #0
 81178c6:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 81178c8:	7bfb      	ldrb	r3, [r7, #15]
 81178ca:	2b00      	cmp	r3, #0
 81178cc:	d005      	beq.n	81178da <mqtt_cyclic_timer+0x11e>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 81178ce:	687a      	ldr	r2, [r7, #4]
 81178d0:	4907      	ldr	r1, [pc, #28]	@ (81178f0 <mqtt_cyclic_timer+0x134>)
 81178d2:	f241 3088 	movw	r0, #5000	@ 0x1388
 81178d6:	f008 ff53 	bl	8120780 <sys_timeout>
  }
}
 81178da:	bf00      	nop
 81178dc:	3710      	adds	r7, #16
 81178de:	46bd      	mov	sp, r7
 81178e0:	bd80      	pop	{r7, pc}
 81178e2:	bf00      	nop
 81178e4:	08125ce4 	.word	0x08125ce4
 81178e8:	08125f2c 	.word	0x08125f2c
 81178ec:	08125d94 	.word	0x08125d94
 81178f0:	081177bd 	.word	0x081177bd

081178f4 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 81178f4:	b580      	push	{r7, lr}
 81178f6:	b086      	sub	sp, #24
 81178f8:	af02      	add	r7, sp, #8
 81178fa:	6078      	str	r0, [r7, #4]
 81178fc:	4608      	mov	r0, r1
 81178fe:	4611      	mov	r1, r2
 8117900:	461a      	mov	r2, r3
 8117902:	4603      	mov	r3, r0
 8117904:	70fb      	strb	r3, [r7, #3]
 8117906:	460b      	mov	r3, r1
 8117908:	803b      	strh	r3, [r7, #0]
 811790a:	4613      	mov	r3, r2
 811790c:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 811790e:	2300      	movs	r3, #0
 8117910:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8117912:	687a      	ldr	r2, [r7, #4]
 8117914:	f241 136c 	movw	r3, #4460	@ 0x116c
 8117918:	4413      	add	r3, r2
 811791a:	2102      	movs	r1, #2
 811791c:	4618      	mov	r0, r3
 811791e:	f7ff febb 	bl	8117698 <mqtt_output_check_space>
 8117922:	4603      	mov	r3, r0
 8117924:	2b00      	cmp	r3, #0
 8117926:	d020      	beq.n	811796a <pub_ack_rec_rel_response+0x76>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8117928:	687b      	ldr	r3, [r7, #4]
 811792a:	f241 106c 	movw	r0, #4460	@ 0x116c
 811792e:	4418      	add	r0, r3
 8117930:	78bb      	ldrb	r3, [r7, #2]
 8117932:	78f9      	ldrb	r1, [r7, #3]
 8117934:	2202      	movs	r2, #2
 8117936:	9201      	str	r2, [sp, #4]
 8117938:	2200      	movs	r2, #0
 811793a:	9200      	str	r2, [sp, #0]
 811793c:	2200      	movs	r2, #0
 811793e:	f7ff fe60 	bl	8117602 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8117942:	687a      	ldr	r2, [r7, #4]
 8117944:	f241 136c 	movw	r3, #4460	@ 0x116c
 8117948:	4413      	add	r3, r2
 811794a:	883a      	ldrh	r2, [r7, #0]
 811794c:	4611      	mov	r1, r2
 811794e:	4618      	mov	r0, r3
 8117950:	f7ff fdf5 	bl	811753e <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8117954:	687a      	ldr	r2, [r7, #4]
 8117956:	f241 136c 	movw	r3, #4460	@ 0x116c
 811795a:	4413      	add	r3, r2
 811795c:	687a      	ldr	r2, [r7, #4]
 811795e:	68d2      	ldr	r2, [r2, #12]
 8117960:	4611      	mov	r1, r2
 8117962:	4618      	mov	r0, r3
 8117964:	f7ff fb8a 	bl	811707c <mqtt_output_send>
 8117968:	e001      	b.n	811796e <pub_ack_rec_rel_response+0x7a>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 811796a:	23ff      	movs	r3, #255	@ 0xff
 811796c:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 811796e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8117972:	4618      	mov	r0, r3
 8117974:	3710      	adds	r7, #16
 8117976:	46bd      	mov	sp, r7
 8117978:	bd80      	pop	{r7, pc}

0811797a <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 811797a:	b580      	push	{r7, lr}
 811797c:	b082      	sub	sp, #8
 811797e:	af00      	add	r7, sp, #0
 8117980:	6078      	str	r0, [r7, #4]
 8117982:	460b      	mov	r3, r1
 8117984:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8117986:	687b      	ldr	r3, [r7, #4]
 8117988:	685b      	ldr	r3, [r3, #4]
 811798a:	2b00      	cmp	r3, #0
 811798c:	d00c      	beq.n	81179a8 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 811798e:	687b      	ldr	r3, [r7, #4]
 8117990:	685b      	ldr	r3, [r3, #4]
 8117992:	687a      	ldr	r2, [r7, #4]
 8117994:	6890      	ldr	r0, [r2, #8]
 8117996:	78fa      	ldrb	r2, [r7, #3]
 8117998:	2a02      	cmp	r2, #2
 811799a:	d801      	bhi.n	81179a0 <mqtt_incomming_suback+0x26>
 811799c:	2200      	movs	r2, #0
 811799e:	e001      	b.n	81179a4 <mqtt_incomming_suback+0x2a>
 81179a0:	f06f 020c 	mvn.w	r2, #12
 81179a4:	4611      	mov	r1, r2
 81179a6:	4798      	blx	r3
  }
}
 81179a8:	bf00      	nop
 81179aa:	3708      	adds	r7, #8
 81179ac:	46bd      	mov	sp, r7
 81179ae:	bd80      	pop	{r7, pc}

081179b0 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 81179b0:	b590      	push	{r4, r7, lr}
 81179b2:	b08f      	sub	sp, #60	@ 0x3c
 81179b4:	af00      	add	r7, sp, #0
 81179b6:	60f8      	str	r0, [r7, #12]
 81179b8:	607b      	str	r3, [r7, #4]
 81179ba:	460b      	mov	r3, r1
 81179bc:	72fb      	strb	r3, [r7, #11]
 81179be:	4613      	mov	r3, r2
 81179c0:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 81179c2:	2300      	movs	r3, #0
 81179c4:	86fb      	strh	r3, [r7, #54]	@ 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 81179c6:	68fb      	ldr	r3, [r7, #12]
 81179c8:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 81179cc:	7afb      	ldrb	r3, [r7, #11]
 81179ce:	4413      	add	r3, r2
 81179d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 81179d2:	7afb      	ldrb	r3, [r7, #11]
 81179d4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 81179d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 81179da:	68fb      	ldr	r3, [r7, #12]
 81179dc:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 81179e0:	091b      	lsrs	r3, r3, #4
 81179e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u16_t pkt_id = 0;
 81179e6:	2300      	movs	r3, #0
 81179e8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 81179ea:	68fb      	ldr	r3, [r7, #12]
 81179ec:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 81179f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81179f4:	d306      	bcc.n	8117a04 <mqtt_message_received+0x54>
 81179f6:	4b9f      	ldr	r3, [pc, #636]	@ (8117c74 <mqtt_message_received+0x2c4>)
 81179f8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 81179fc:	499e      	ldr	r1, [pc, #632]	@ (8117c78 <mqtt_message_received+0x2c8>)
 81179fe:	489f      	ldr	r0, [pc, #636]	@ (8117c7c <mqtt_message_received+0x2cc>)
 8117a00:	f00a f9c0 	bl	8121d84 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8117a04:	7afa      	ldrb	r2, [r7, #11]
 8117a06:	68fb      	ldr	r3, [r7, #12]
 8117a08:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8117a0c:	429a      	cmp	r2, r3
 8117a0e:	d906      	bls.n	8117a1e <mqtt_message_received+0x6e>
 8117a10:	4b98      	ldr	r3, [pc, #608]	@ (8117c74 <mqtt_message_received+0x2c4>)
 8117a12:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 8117a16:	499a      	ldr	r1, [pc, #616]	@ (8117c80 <mqtt_message_received+0x2d0>)
 8117a18:	4898      	ldr	r0, [pc, #608]	@ (8117c7c <mqtt_message_received+0x2cc>)
 8117a1a:	f00a f9b3 	bl	8121d84 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8117a1e:	7afa      	ldrb	r2, [r7, #11]
 8117a20:	893b      	ldrh	r3, [r7, #8]
 8117a22:	4413      	add	r3, r2
 8117a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8117a28:	dd09      	ble.n	8117a3e <mqtt_message_received+0x8e>
 8117a2a:	4b92      	ldr	r3, [pc, #584]	@ (8117c74 <mqtt_message_received+0x2c4>)
 8117a2c:	f240 22ad 	movw	r2, #685	@ 0x2ad
 8117a30:	4994      	ldr	r1, [pc, #592]	@ (8117c84 <mqtt_message_received+0x2d4>)
 8117a32:	4892      	ldr	r0, [pc, #584]	@ (8117c7c <mqtt_message_received+0x2cc>)
 8117a34:	f00a f9a6 	bl	8121d84 <iprintf>
 8117a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8117a3c:	e172      	b.n	8117d24 <mqtt_message_received+0x374>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8117a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117a42:	2b02      	cmp	r3, #2
 8117a44:	d123      	bne.n	8117a8e <mqtt_message_received+0xde>
    if (client->conn_state == MQTT_CONNECTING) {
 8117a46:	68fb      	ldr	r3, [r7, #12]
 8117a48:	7a9b      	ldrb	r3, [r3, #10]
 8117a4a:	2b02      	cmp	r3, #2
 8117a4c:	f040 8155 	bne.w	8117cfa <mqtt_message_received+0x34a>
      if (length < 2) {
 8117a50:	893b      	ldrh	r3, [r7, #8]
 8117a52:	2b01      	cmp	r3, #1
 8117a54:	f240 8153 	bls.w	8117cfe <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8117a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a5a:	3301      	adds	r3, #1
 8117a5c:	781b      	ldrb	r3, [r3, #0]
 8117a5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8117a60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8117a62:	2b00      	cmp	r3, #0
 8117a64:	f040 8149 	bne.w	8117cfa <mqtt_message_received+0x34a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8117a68:	68fb      	ldr	r3, [r7, #12]
 8117a6a:	2200      	movs	r2, #0
 8117a6c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8117a6e:	68fb      	ldr	r3, [r7, #12]
 8117a70:	2203      	movs	r2, #3
 8117a72:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8117a74:	68fb      	ldr	r3, [r7, #12]
 8117a76:	695b      	ldr	r3, [r3, #20]
 8117a78:	2b00      	cmp	r3, #0
 8117a7a:	f000 813e 	beq.w	8117cfa <mqtt_message_received+0x34a>
          client->connect_cb(client, client->connect_arg, res);
 8117a7e:	68fb      	ldr	r3, [r7, #12]
 8117a80:	695b      	ldr	r3, [r3, #20]
 8117a82:	68fa      	ldr	r2, [r7, #12]
 8117a84:	6911      	ldr	r1, [r2, #16]
 8117a86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8117a88:	68f8      	ldr	r0, [r7, #12]
 8117a8a:	4798      	blx	r3
 8117a8c:	e135      	b.n	8117cfa <mqtt_message_received+0x34a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8117a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117a92:	2b0d      	cmp	r3, #13
 8117a94:	f000 8131 	beq.w	8117cfa <mqtt_message_received+0x34a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8117a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117a9c:	2b03      	cmp	r3, #3
 8117a9e:	f040 80c4 	bne.w	8117c2a <mqtt_message_received+0x27a>
    u16_t payload_offset = 0;
 8117aa2:	2300      	movs	r3, #0
 8117aa4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    u16_t payload_length = length;
 8117aa6:	893b      	ldrh	r3, [r7, #8]
 8117aa8:	867b      	strh	r3, [r7, #50]	@ 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8117aaa:	68fb      	ldr	r3, [r7, #12]
 8117aac:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8117ab0:	105b      	asrs	r3, r3, #1
 8117ab2:	b2db      	uxtb	r3, r3
 8117ab4:	f003 0303 	and.w	r3, r3, #3
 8117ab8:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8117aba:	68fb      	ldr	r3, [r7, #12]
 8117abc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8117ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8117ac4:	d87d      	bhi.n	8117bc2 <mqtt_message_received+0x212>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8117ac6:	7ffb      	ldrb	r3, [r7, #31]
 8117ac8:	2b00      	cmp	r3, #0
 8117aca:	d001      	beq.n	8117ad0 <mqtt_message_received+0x120>
 8117acc:	2302      	movs	r3, #2
 8117ace:	e000      	b.n	8117ad2 <mqtt_message_received+0x122>
 8117ad0:	2300      	movs	r3, #0
 8117ad2:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8117ad4:	8bbb      	ldrh	r3, [r7, #28]
 8117ad6:	1c5a      	adds	r2, r3, #1
 8117ad8:	893b      	ldrh	r3, [r7, #8]
 8117ada:	429a      	cmp	r2, r3
 8117adc:	f280 8111 	bge.w	8117d02 <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8117ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117ae2:	781b      	ldrb	r3, [r3, #0]
 8117ae4:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8117ae6:	8b7b      	ldrh	r3, [r7, #26]
 8117ae8:	021b      	lsls	r3, r3, #8
 8117aea:	b29b      	uxth	r3, r3
 8117aec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117aee:	3201      	adds	r2, #1
 8117af0:	7812      	ldrb	r2, [r2, #0]
 8117af2:	4413      	add	r3, r2
 8117af4:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8117af6:	8b7a      	ldrh	r2, [r7, #26]
 8117af8:	8939      	ldrh	r1, [r7, #8]
 8117afa:	8bbb      	ldrh	r3, [r7, #28]
 8117afc:	3302      	adds	r3, #2
 8117afe:	1acb      	subs	r3, r1, r3
 8117b00:	429a      	cmp	r2, r3
 8117b02:	f300 8100 	bgt.w	8117d06 <mqtt_message_received+0x356>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8117b06:	8b7a      	ldrh	r2, [r7, #26]
 8117b08:	8bbb      	ldrh	r3, [r7, #28]
 8117b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8117b0c:	1acb      	subs	r3, r1, r3
 8117b0e:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8117b10:	429a      	cmp	r2, r3
 8117b12:	f200 80f8 	bhi.w	8117d06 <mqtt_message_received+0x356>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8117b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117b18:	3302      	adds	r3, #2
 8117b1a:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 8117b1c:	8b7b      	ldrh	r3, [r7, #26]
 8117b1e:	3302      	adds	r3, #2
 8117b20:	863b      	strh	r3, [r7, #48]	@ 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8117b22:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8117b24:	7ffa      	ldrb	r2, [r7, #31]
 8117b26:	2a00      	cmp	r2, #0
 8117b28:	d001      	beq.n	8117b2e <mqtt_message_received+0x17e>
 8117b2a:	2202      	movs	r2, #2
 8117b2c:	e000      	b.n	8117b30 <mqtt_message_received+0x180>
 8117b2e:	2201      	movs	r2, #1
 8117b30:	4413      	add	r3, r2
 8117b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8117b34:	429a      	cmp	r2, r3
 8117b36:	f0c0 80e8 	bcc.w	8117d0a <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8117b3a:	7ffb      	ldrb	r3, [r7, #31]
 8117b3c:	2b00      	cmp	r3, #0
 8117b3e:	d018      	beq.n	8117b72 <mqtt_message_received+0x1c2>
        if (length < after_topic + 2U) {
 8117b40:	893a      	ldrh	r2, [r7, #8]
 8117b42:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8117b44:	3302      	adds	r3, #2
 8117b46:	429a      	cmp	r2, r3
 8117b48:	f0c0 80e1 	bcc.w	8117d0e <mqtt_message_received+0x35e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8117b4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8117b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117b50:	4413      	add	r3, r2
 8117b52:	781b      	ldrb	r3, [r3, #0]
 8117b54:	021b      	lsls	r3, r3, #8
 8117b56:	b29b      	uxth	r3, r3
 8117b58:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8117b5a:	3201      	adds	r2, #1
 8117b5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8117b5e:	440a      	add	r2, r1
 8117b60:	7812      	ldrb	r2, [r2, #0]
 8117b62:	4413      	add	r3, r2
 8117b64:	b29a      	uxth	r2, r3
 8117b66:	68fb      	ldr	r3, [r7, #12]
 8117b68:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8117b6a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8117b6c:	3302      	adds	r3, #2
 8117b6e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8117b70:	e002      	b.n	8117b78 <mqtt_message_received+0x1c8>
      } else {
        client->inpub_pkt_id = 0;
 8117b72:	68fb      	ldr	r3, [r7, #12]
 8117b74:	2200      	movs	r2, #0
 8117b76:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8117b78:	8b7b      	ldrh	r3, [r7, #26]
 8117b7a:	697a      	ldr	r2, [r7, #20]
 8117b7c:	4413      	add	r3, r2
 8117b7e:	781b      	ldrb	r3, [r3, #0]
 8117b80:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8117b82:	8b7b      	ldrh	r3, [r7, #26]
 8117b84:	697a      	ldr	r2, [r7, #20]
 8117b86:	4413      	add	r3, r2
 8117b88:	2200      	movs	r2, #0
 8117b8a:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8117b8c:	893a      	ldrh	r2, [r7, #8]
 8117b8e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8117b90:	1ad3      	subs	r3, r2, r3
 8117b92:	867b      	strh	r3, [r7, #50]	@ 0x32
      payload_offset = after_topic;
 8117b94:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8117b96:	86bb      	strh	r3, [r7, #52]	@ 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8117b98:	68fb      	ldr	r3, [r7, #12]
 8117b9a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8117b9e:	2b00      	cmp	r3, #0
 8117ba0:	d00a      	beq.n	8117bb8 <mqtt_message_received+0x208>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8117ba2:	68fb      	ldr	r3, [r7, #12]
 8117ba4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8117ba8:	68fa      	ldr	r2, [r7, #12]
 8117baa:	f8d2 015c 	ldr.w	r0, [r2, #348]	@ 0x15c
 8117bae:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8117bb0:	687a      	ldr	r2, [r7, #4]
 8117bb2:	440a      	add	r2, r1
 8117bb4:	6979      	ldr	r1, [r7, #20]
 8117bb6:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8117bb8:	8b7b      	ldrh	r3, [r7, #26]
 8117bba:	697a      	ldr	r2, [r7, #20]
 8117bbc:	4413      	add	r3, r2
 8117bbe:	7cfa      	ldrb	r2, [r7, #19]
 8117bc0:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8117bc2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8117bc4:	2b00      	cmp	r3, #0
 8117bc6:	d103      	bne.n	8117bd0 <mqtt_message_received+0x220>
 8117bc8:	687b      	ldr	r3, [r7, #4]
 8117bca:	2b00      	cmp	r3, #0
 8117bcc:	f040 8095 	bne.w	8117cfa <mqtt_message_received+0x34a>
      if (length < (size_t)(payload_offset + payload_length)) {
 8117bd0:	893b      	ldrh	r3, [r7, #8]
 8117bd2:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8117bd4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8117bd6:	440a      	add	r2, r1
 8117bd8:	4293      	cmp	r3, r2
 8117bda:	f0c0 809a 	bcc.w	8117d12 <mqtt_message_received+0x362>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8117bde:	68fb      	ldr	r3, [r7, #12]
 8117be0:	f8d3 4160 	ldr.w	r4, [r3, #352]	@ 0x160
 8117be4:	68fb      	ldr	r3, [r7, #12]
 8117be6:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8117bea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8117bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117bee:	18d1      	adds	r1, r2, r3
 8117bf0:	687b      	ldr	r3, [r7, #4]
 8117bf2:	2b00      	cmp	r3, #0
 8117bf4:	bf0c      	ite	eq
 8117bf6:	2301      	moveq	r3, #1
 8117bf8:	2300      	movne	r3, #0
 8117bfa:	b2db      	uxtb	r3, r3
 8117bfc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8117bfe:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8117c00:	687b      	ldr	r3, [r7, #4]
 8117c02:	2b00      	cmp	r3, #0
 8117c04:	d179      	bne.n	8117cfa <mqtt_message_received+0x34a>
 8117c06:	7ffb      	ldrb	r3, [r7, #31]
 8117c08:	2b00      	cmp	r3, #0
 8117c0a:	d076      	beq.n	8117cfa <mqtt_message_received+0x34a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8117c0c:	7ffb      	ldrb	r3, [r7, #31]
 8117c0e:	2b01      	cmp	r3, #1
 8117c10:	d101      	bne.n	8117c16 <mqtt_message_received+0x266>
 8117c12:	2304      	movs	r3, #4
 8117c14:	e000      	b.n	8117c18 <mqtt_message_received+0x268>
 8117c16:	2305      	movs	r3, #5
 8117c18:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8117c1a:	68fb      	ldr	r3, [r7, #12]
 8117c1c:	891a      	ldrh	r2, [r3, #8]
 8117c1e:	7cb9      	ldrb	r1, [r7, #18]
 8117c20:	2300      	movs	r3, #0
 8117c22:	68f8      	ldr	r0, [r7, #12]
 8117c24:	f7ff fe66 	bl	81178f4 <pub_ack_rec_rel_response>
 8117c28:	e067      	b.n	8117cfa <mqtt_message_received+0x34a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8117c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117c2c:	781b      	ldrb	r3, [r3, #0]
 8117c2e:	021b      	lsls	r3, r3, #8
 8117c30:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8117c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117c34:	3301      	adds	r3, #1
 8117c36:	781b      	ldrb	r3, [r3, #0]
 8117c38:	461a      	mov	r2, r3
 8117c3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8117c3c:	4313      	orrs	r3, r2
 8117c3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (pkt_id == 0) {
 8117c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8117c42:	2b00      	cmp	r3, #0
 8117c44:	d067      	beq.n	8117d16 <mqtt_message_received+0x366>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8117c46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117c4a:	2b05      	cmp	r3, #5
 8117c4c:	d106      	bne.n	8117c5c <mqtt_message_received+0x2ac>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8117c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8117c50:	2301      	movs	r3, #1
 8117c52:	2106      	movs	r1, #6
 8117c54:	68f8      	ldr	r0, [r7, #12]
 8117c56:	f7ff fe4d 	bl	81178f4 <pub_ack_rec_rel_response>
 8117c5a:	e04e      	b.n	8117cfa <mqtt_message_received+0x34a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8117c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117c60:	2b06      	cmp	r3, #6
 8117c62:	d111      	bne.n	8117c88 <mqtt_message_received+0x2d8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8117c64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8117c66:	2300      	movs	r3, #0
 8117c68:	2107      	movs	r1, #7
 8117c6a:	68f8      	ldr	r0, [r7, #12]
 8117c6c:	f7ff fe42 	bl	81178f4 <pub_ack_rec_rel_response>
 8117c70:	e043      	b.n	8117cfa <mqtt_message_received+0x34a>
 8117c72:	bf00      	nop
 8117c74:	08125ce4 	.word	0x08125ce4
 8117c78:	08125f50 	.word	0x08125f50
 8117c7c:	08125d94 	.word	0x08125d94
 8117c80:	08125f80 	.word	0x08125f80
 8117c84:	08125fa4 	.word	0x08125fa4

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8117c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117c8c:	2b09      	cmp	r3, #9
 8117c8e:	d00b      	beq.n	8117ca8 <mqtt_message_received+0x2f8>
 8117c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117c94:	2b0b      	cmp	r3, #11
 8117c96:	d007      	beq.n	8117ca8 <mqtt_message_received+0x2f8>
 8117c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117c9c:	2b07      	cmp	r3, #7
 8117c9e:	d003      	beq.n	8117ca8 <mqtt_message_received+0x2f8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8117ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117ca4:	2b04      	cmp	r3, #4
 8117ca6:	d138      	bne.n	8117d1a <mqtt_message_received+0x36a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8117ca8:	68fb      	ldr	r3, [r7, #12]
 8117caa:	3318      	adds	r3, #24
 8117cac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8117cae:	4611      	mov	r1, r2
 8117cb0:	4618      	mov	r0, r3
 8117cb2:	f7ff fb39 	bl	8117328 <mqtt_take_request>
 8117cb6:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8117cb8:	6a3b      	ldr	r3, [r7, #32]
 8117cba:	2b00      	cmp	r3, #0
 8117cbc:	d01c      	beq.n	8117cf8 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8117cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117cc2:	2b09      	cmp	r3, #9
 8117cc4:	d10a      	bne.n	8117cdc <mqtt_message_received+0x32c>
          if (length < 3) {
 8117cc6:	893b      	ldrh	r3, [r7, #8]
 8117cc8:	2b02      	cmp	r3, #2
 8117cca:	d928      	bls.n	8117d1e <mqtt_message_received+0x36e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8117ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117cce:	3302      	adds	r3, #2
 8117cd0:	781b      	ldrb	r3, [r3, #0]
 8117cd2:	4619      	mov	r1, r3
 8117cd4:	6a38      	ldr	r0, [r7, #32]
 8117cd6:	f7ff fe50 	bl	811797a <mqtt_incomming_suback>
 8117cda:	e00a      	b.n	8117cf2 <mqtt_message_received+0x342>
          }
        } else if (r->cb != NULL) {
 8117cdc:	6a3b      	ldr	r3, [r7, #32]
 8117cde:	685b      	ldr	r3, [r3, #4]
 8117ce0:	2b00      	cmp	r3, #0
 8117ce2:	d006      	beq.n	8117cf2 <mqtt_message_received+0x342>
          r->cb(r->arg, ERR_OK);
 8117ce4:	6a3b      	ldr	r3, [r7, #32]
 8117ce6:	685b      	ldr	r3, [r3, #4]
 8117ce8:	6a3a      	ldr	r2, [r7, #32]
 8117cea:	6892      	ldr	r2, [r2, #8]
 8117cec:	2100      	movs	r1, #0
 8117cee:	4610      	mov	r0, r2
 8117cf0:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8117cf2:	6a38      	ldr	r0, [r7, #32]
 8117cf4:	f7ff fb08 	bl	8117308 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8117cf8:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8117cfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8117cfc:	e012      	b.n	8117d24 <mqtt_message_received+0x374>
        goto out_disconnect;
 8117cfe:	bf00      	nop
 8117d00:	e00e      	b.n	8117d20 <mqtt_message_received+0x370>
        goto out_disconnect;
 8117d02:	bf00      	nop
 8117d04:	e00c      	b.n	8117d20 <mqtt_message_received+0x370>
        goto out_disconnect;
 8117d06:	bf00      	nop
 8117d08:	e00a      	b.n	8117d20 <mqtt_message_received+0x370>
        goto out_disconnect;
 8117d0a:	bf00      	nop
 8117d0c:	e008      	b.n	8117d20 <mqtt_message_received+0x370>
          goto out_disconnect;
 8117d0e:	bf00      	nop
 8117d10:	e006      	b.n	8117d20 <mqtt_message_received+0x370>
        goto out_disconnect;
 8117d12:	bf00      	nop
 8117d14:	e004      	b.n	8117d20 <mqtt_message_received+0x370>
      goto out_disconnect;
 8117d16:	bf00      	nop
 8117d18:	e002      	b.n	8117d20 <mqtt_message_received+0x370>
      goto out_disconnect;
 8117d1a:	bf00      	nop
 8117d1c:	e000      	b.n	8117d20 <mqtt_message_received+0x370>
            goto out_disconnect;
 8117d1e:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8117d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 8117d24:	4618      	mov	r0, r3
 8117d26:	373c      	adds	r7, #60	@ 0x3c
 8117d28:	46bd      	mov	sp, r7
 8117d2a:	bd90      	pop	{r4, r7, pc}

08117d2c <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8117d2c:	b580      	push	{r7, lr}
 8117d2e:	b088      	sub	sp, #32
 8117d30:	af00      	add	r7, sp, #0
 8117d32:	6078      	str	r0, [r7, #4]
 8117d34:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8117d36:	2300      	movs	r3, #0
 8117d38:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8117d3a:	2300      	movs	r3, #0
 8117d3c:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8117d3e:	2300      	movs	r3, #0
 8117d40:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8117d42:	2300      	movs	r3, #0
 8117d44:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8117d46:	e0c8      	b.n	8117eda <mqtt_parse_incoming+0x1ae>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8117d48:	7dfb      	ldrb	r3, [r7, #23]
 8117d4a:	2b01      	cmp	r3, #1
 8117d4c:	d903      	bls.n	8117d56 <mqtt_parse_incoming+0x2a>
 8117d4e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8117d52:	2b00      	cmp	r3, #0
 8117d54:	da53      	bge.n	8117dfe <mqtt_parse_incoming+0xd2>

      if (fixed_hdr_idx < client->msg_idx) {
 8117d56:	7dfa      	ldrb	r2, [r7, #23]
 8117d58:	687b      	ldr	r3, [r7, #4]
 8117d5a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8117d5e:	429a      	cmp	r2, r3
 8117d60:	d206      	bcs.n	8117d70 <mqtt_parse_incoming+0x44>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8117d62:	7dfb      	ldrb	r3, [r7, #23]
 8117d64:	687a      	ldr	r2, [r7, #4]
 8117d66:	4413      	add	r3, r2
 8117d68:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8117d6c:	75bb      	strb	r3, [r7, #22]
 8117d6e:	e014      	b.n	8117d9a <mqtt_parse_incoming+0x6e>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8117d70:	8bfb      	ldrh	r3, [r7, #30]
 8117d72:	1c5a      	adds	r2, r3, #1
 8117d74:	83fa      	strh	r2, [r7, #30]
 8117d76:	4619      	mov	r1, r3
 8117d78:	6838      	ldr	r0, [r7, #0]
 8117d7a:	f002 f8cb 	bl	8119f14 <pbuf_get_at>
 8117d7e:	4603      	mov	r3, r0
 8117d80:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8117d82:	687b      	ldr	r3, [r7, #4]
 8117d84:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8117d88:	1c59      	adds	r1, r3, #1
 8117d8a:	687a      	ldr	r2, [r7, #4]
 8117d8c:	f8c2 1168 	str.w	r1, [r2, #360]	@ 0x168
 8117d90:	687a      	ldr	r2, [r7, #4]
 8117d92:	4413      	add	r3, r2
 8117d94:	7dba      	ldrb	r2, [r7, #22]
 8117d96:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
      }
      fixed_hdr_idx++;
 8117d9a:	7dfb      	ldrb	r3, [r7, #23]
 8117d9c:	3301      	adds	r3, #1
 8117d9e:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8117da0:	7dfb      	ldrb	r3, [r7, #23]
 8117da2:	2b01      	cmp	r3, #1
 8117da4:	f240 8098 	bls.w	8117ed8 <mqtt_parse_incoming+0x1ac>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8117da8:	7dbb      	ldrb	r3, [r7, #22]
 8117daa:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8117dae:	7dfb      	ldrb	r3, [r7, #23]
 8117db0:	1e9a      	subs	r2, r3, #2
 8117db2:	4613      	mov	r3, r2
 8117db4:	00db      	lsls	r3, r3, #3
 8117db6:	1a9b      	subs	r3, r3, r2
 8117db8:	fa01 f303 	lsl.w	r3, r1, r3
 8117dbc:	69ba      	ldr	r2, [r7, #24]
 8117dbe:	4313      	orrs	r3, r2
 8117dc0:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8117dc2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8117dc6:	2b00      	cmp	r3, #0
 8117dc8:	f2c0 8086 	blt.w	8117ed8 <mqtt_parse_incoming+0x1ac>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8117dcc:	69bb      	ldr	r3, [r7, #24]
 8117dce:	2b00      	cmp	r3, #0
 8117dd0:	d10c      	bne.n	8117dec <mqtt_parse_incoming+0xc0>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8117dd2:	7df9      	ldrb	r1, [r7, #23]
 8117dd4:	2300      	movs	r3, #0
 8117dd6:	2200      	movs	r2, #0
 8117dd8:	6878      	ldr	r0, [r7, #4]
 8117dda:	f7ff fde9 	bl	81179b0 <mqtt_message_received>
            client->msg_idx = 0;
 8117dde:	687b      	ldr	r3, [r7, #4]
 8117de0:	2200      	movs	r2, #0
 8117de2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            fixed_hdr_idx = 0;
 8117de6:	2300      	movs	r3, #0
 8117de8:	75fb      	strb	r3, [r7, #23]
      if (fixed_hdr_idx >= 2) {
 8117dea:	e075      	b.n	8117ed8 <mqtt_parse_incoming+0x1ac>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8117dec:	7dfa      	ldrb	r2, [r7, #23]
 8117dee:	69bb      	ldr	r3, [r7, #24]
 8117df0:	441a      	add	r2, r3
 8117df2:	687b      	ldr	r3, [r7, #4]
 8117df4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8117df8:	1ad3      	subs	r3, r2, r3
 8117dfa:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8117dfc:	e06c      	b.n	8117ed8 <mqtt_parse_incoming+0x1ac>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8117dfe:	687b      	ldr	r3, [r7, #4]
 8117e00:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8117e04:	7dfb      	ldrb	r3, [r7, #23]
 8117e06:	1ad3      	subs	r3, r2, r3
 8117e08:	7dfa      	ldrb	r2, [r7, #23]
 8117e0a:	f5c2 5280 	rsb	r2, r2, #4096	@ 0x1000
 8117e0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8117e12:	fb01 f202 	mul.w	r2, r1, r2
 8117e16:	1a9b      	subs	r3, r3, r2
 8117e18:	b29a      	uxth	r2, r3
 8117e1a:	7dfb      	ldrb	r3, [r7, #23]
 8117e1c:	b29b      	uxth	r3, r3
 8117e1e:	4413      	add	r3, r2
 8117e20:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8117e22:	683b      	ldr	r3, [r7, #0]
 8117e24:	891a      	ldrh	r2, [r3, #8]
 8117e26:	8bfb      	ldrh	r3, [r7, #30]
 8117e28:	1ad3      	subs	r3, r2, r3
 8117e2a:	b29b      	uxth	r3, r3
 8117e2c:	461a      	mov	r2, r3
 8117e2e:	69bb      	ldr	r3, [r7, #24]
 8117e30:	4293      	cmp	r3, r2
 8117e32:	d905      	bls.n	8117e40 <mqtt_parse_incoming+0x114>
 8117e34:	683b      	ldr	r3, [r7, #0]
 8117e36:	891a      	ldrh	r2, [r3, #8]
 8117e38:	8bfb      	ldrh	r3, [r7, #30]
 8117e3a:	1ad3      	subs	r3, r2, r3
 8117e3c:	b29b      	uxth	r3, r3
 8117e3e:	e001      	b.n	8117e44 <mqtt_parse_incoming+0x118>
 8117e40:	69bb      	ldr	r3, [r7, #24]
 8117e42:	b29b      	uxth	r3, r3
 8117e44:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8117e46:	8a7b      	ldrh	r3, [r7, #18]
 8117e48:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8117e4c:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8117e4e:	8aba      	ldrh	r2, [r7, #20]
 8117e50:	8a3b      	ldrh	r3, [r7, #16]
 8117e52:	429a      	cmp	r2, r3
 8117e54:	d901      	bls.n	8117e5a <mqtt_parse_incoming+0x12e>
        cpy_len = buffer_space;
 8117e56:	8a3b      	ldrh	r3, [r7, #16]
 8117e58:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8117e5a:	687b      	ldr	r3, [r7, #4]
 8117e5c:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8117e60:	8a7b      	ldrh	r3, [r7, #18]
 8117e62:	18d1      	adds	r1, r2, r3
 8117e64:	8bfb      	ldrh	r3, [r7, #30]
 8117e66:	8aba      	ldrh	r2, [r7, #20]
 8117e68:	6838      	ldr	r0, [r7, #0]
 8117e6a:	f001 ff85 	bl	8119d78 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8117e6e:	687b      	ldr	r3, [r7, #4]
 8117e70:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8117e74:	8abb      	ldrh	r3, [r7, #20]
 8117e76:	441a      	add	r2, r3
 8117e78:	687b      	ldr	r3, [r7, #4]
 8117e7a:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
      in_offset += cpy_len;
 8117e7e:	8bfa      	ldrh	r2, [r7, #30]
 8117e80:	8abb      	ldrh	r3, [r7, #20]
 8117e82:	4413      	add	r3, r2
 8117e84:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8117e86:	8abb      	ldrh	r3, [r7, #20]
 8117e88:	69ba      	ldr	r2, [r7, #24]
 8117e8a:	1ad3      	subs	r3, r2, r3
 8117e8c:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8117e8e:	69bb      	ldr	r3, [r7, #24]
 8117e90:	2b00      	cmp	r3, #0
 8117e92:	d003      	beq.n	8117e9c <mqtt_parse_incoming+0x170>
 8117e94:	8aba      	ldrh	r2, [r7, #20]
 8117e96:	8a3b      	ldrh	r3, [r7, #16]
 8117e98:	429a      	cmp	r2, r3
 8117e9a:	d11e      	bne.n	8117eda <mqtt_parse_incoming+0x1ae>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8117e9c:	8a7a      	ldrh	r2, [r7, #18]
 8117e9e:	8abb      	ldrh	r3, [r7, #20]
 8117ea0:	4413      	add	r3, r2
 8117ea2:	b29a      	uxth	r2, r3
 8117ea4:	7dfb      	ldrb	r3, [r7, #23]
 8117ea6:	b29b      	uxth	r3, r3
 8117ea8:	1ad3      	subs	r3, r2, r3
 8117eaa:	b29a      	uxth	r2, r3
 8117eac:	7df9      	ldrb	r1, [r7, #23]
 8117eae:	69bb      	ldr	r3, [r7, #24]
 8117eb0:	6878      	ldr	r0, [r7, #4]
 8117eb2:	f7ff fd7d 	bl	81179b0 <mqtt_message_received>
 8117eb6:	4603      	mov	r3, r0
 8117eb8:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8117eba:	89fb      	ldrh	r3, [r7, #14]
 8117ebc:	2b00      	cmp	r3, #0
 8117ebe:	d001      	beq.n	8117ec4 <mqtt_parse_incoming+0x198>
          return res;
 8117ec0:	89fb      	ldrh	r3, [r7, #14]
 8117ec2:	e011      	b.n	8117ee8 <mqtt_parse_incoming+0x1bc>
        }
        if (msg_rem_len == 0) {
 8117ec4:	69bb      	ldr	r3, [r7, #24]
 8117ec6:	2b00      	cmp	r3, #0
 8117ec8:	d107      	bne.n	8117eda <mqtt_parse_incoming+0x1ae>
          /* Reset parser state */
          client->msg_idx = 0;
 8117eca:	687b      	ldr	r3, [r7, #4]
 8117ecc:	2200      	movs	r2, #0
 8117ece:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8117ed2:	2300      	movs	r3, #0
 8117ed4:	75fb      	strb	r3, [r7, #23]
 8117ed6:	e000      	b.n	8117eda <mqtt_parse_incoming+0x1ae>
      if (fixed_hdr_idx >= 2) {
 8117ed8:	bf00      	nop
  while (p->tot_len > in_offset) {
 8117eda:	683b      	ldr	r3, [r7, #0]
 8117edc:	891b      	ldrh	r3, [r3, #8]
 8117ede:	8bfa      	ldrh	r2, [r7, #30]
 8117ee0:	429a      	cmp	r2, r3
 8117ee2:	f4ff af31 	bcc.w	8117d48 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8117ee6:	2300      	movs	r3, #0
}
 8117ee8:	4618      	mov	r0, r3
 8117eea:	3720      	adds	r7, #32
 8117eec:	46bd      	mov	sp, r7
 8117eee:	bd80      	pop	{r7, pc}

08117ef0 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8117ef0:	b580      	push	{r7, lr}
 8117ef2:	b086      	sub	sp, #24
 8117ef4:	af00      	add	r7, sp, #0
 8117ef6:	60f8      	str	r0, [r7, #12]
 8117ef8:	60b9      	str	r1, [r7, #8]
 8117efa:	607a      	str	r2, [r7, #4]
 8117efc:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8117efe:	68fb      	ldr	r3, [r7, #12]
 8117f00:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8117f02:	697b      	ldr	r3, [r7, #20]
 8117f04:	2b00      	cmp	r3, #0
 8117f06:	d106      	bne.n	8117f16 <mqtt_tcp_recv_cb+0x26>
 8117f08:	4b24      	ldr	r3, [pc, #144]	@ (8117f9c <mqtt_tcp_recv_cb+0xac>)
 8117f0a:	f240 32a7 	movw	r2, #935	@ 0x3a7
 8117f0e:	4924      	ldr	r1, [pc, #144]	@ (8117fa0 <mqtt_tcp_recv_cb+0xb0>)
 8117f10:	4824      	ldr	r0, [pc, #144]	@ (8117fa4 <mqtt_tcp_recv_cb+0xb4>)
 8117f12:	f009 ff37 	bl	8121d84 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8117f16:	697b      	ldr	r3, [r7, #20]
 8117f18:	68db      	ldr	r3, [r3, #12]
 8117f1a:	68ba      	ldr	r2, [r7, #8]
 8117f1c:	429a      	cmp	r2, r3
 8117f1e:	d006      	beq.n	8117f2e <mqtt_tcp_recv_cb+0x3e>
 8117f20:	4b1e      	ldr	r3, [pc, #120]	@ (8117f9c <mqtt_tcp_recv_cb+0xac>)
 8117f22:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8117f26:	4920      	ldr	r1, [pc, #128]	@ (8117fa8 <mqtt_tcp_recv_cb+0xb8>)
 8117f28:	481e      	ldr	r0, [pc, #120]	@ (8117fa4 <mqtt_tcp_recv_cb+0xb4>)
 8117f2a:	f009 ff2b 	bl	8121d84 <iprintf>

  if (p == NULL) {
 8117f2e:	687b      	ldr	r3, [r7, #4]
 8117f30:	2b00      	cmp	r3, #0
 8117f32:	d105      	bne.n	8117f40 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8117f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8117f38:	6978      	ldr	r0, [r7, #20]
 8117f3a:	f7ff fbdf 	bl	81176fc <mqtt_close>
 8117f3e:	e027      	b.n	8117f90 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8117f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8117f44:	2b00      	cmp	r3, #0
 8117f46:	d005      	beq.n	8117f54 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8117f48:	6878      	ldr	r0, [r7, #4]
 8117f4a:	f001 fd0f 	bl	811996c <pbuf_free>
      return err;
 8117f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8117f52:	e01e      	b.n	8117f92 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8117f54:	687b      	ldr	r3, [r7, #4]
 8117f56:	891b      	ldrh	r3, [r3, #8]
 8117f58:	4619      	mov	r1, r3
 8117f5a:	68b8      	ldr	r0, [r7, #8]
 8117f5c:	f002 fd04 	bl	811a968 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8117f60:	6879      	ldr	r1, [r7, #4]
 8117f62:	6978      	ldr	r0, [r7, #20]
 8117f64:	f7ff fee2 	bl	8117d2c <mqtt_parse_incoming>
 8117f68:	4603      	mov	r3, r0
 8117f6a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8117f6c:	6878      	ldr	r0, [r7, #4]
 8117f6e:	f001 fcfd 	bl	811996c <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8117f72:	8a7b      	ldrh	r3, [r7, #18]
 8117f74:	2b00      	cmp	r3, #0
 8117f76:	d004      	beq.n	8117f82 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8117f78:	8a7b      	ldrh	r3, [r7, #18]
 8117f7a:	4619      	mov	r1, r3
 8117f7c:	6978      	ldr	r0, [r7, #20]
 8117f7e:	f7ff fbbd 	bl	81176fc <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8117f82:	697b      	ldr	r3, [r7, #20]
 8117f84:	885b      	ldrh	r3, [r3, #2]
 8117f86:	2b00      	cmp	r3, #0
 8117f88:	d002      	beq.n	8117f90 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8117f8a:	697b      	ldr	r3, [r7, #20]
 8117f8c:	2200      	movs	r2, #0
 8117f8e:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8117f90:	2300      	movs	r3, #0
}
 8117f92:	4618      	mov	r0, r3
 8117f94:	3718      	adds	r7, #24
 8117f96:	46bd      	mov	sp, r7
 8117f98:	bd80      	pop	{r7, pc}
 8117f9a:	bf00      	nop
 8117f9c:	08125ce4 	.word	0x08125ce4
 8117fa0:	08125fbc 	.word	0x08125fbc
 8117fa4:	08125d94 	.word	0x08125d94
 8117fa8:	08125fe0 	.word	0x08125fe0

08117fac <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8117fac:	b580      	push	{r7, lr}
 8117fae:	b086      	sub	sp, #24
 8117fb0:	af00      	add	r7, sp, #0
 8117fb2:	60f8      	str	r0, [r7, #12]
 8117fb4:	60b9      	str	r1, [r7, #8]
 8117fb6:	4613      	mov	r3, r2
 8117fb8:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8117fba:	68fb      	ldr	r3, [r7, #12]
 8117fbc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8117fbe:	697b      	ldr	r3, [r7, #20]
 8117fc0:	7a9b      	ldrb	r3, [r3, #10]
 8117fc2:	2b03      	cmp	r3, #3
 8117fc4:	d128      	bne.n	8118018 <mqtt_tcp_sent_cb+0x6c>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8117fc6:	697b      	ldr	r3, [r7, #20]
 8117fc8:	2200      	movs	r2, #0
 8117fca:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8117fcc:	697b      	ldr	r3, [r7, #20]
 8117fce:	2200      	movs	r2, #0
 8117fd0:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8117fd2:	e00d      	b.n	8117ff0 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8117fd4:	693b      	ldr	r3, [r7, #16]
 8117fd6:	685b      	ldr	r3, [r3, #4]
 8117fd8:	2b00      	cmp	r3, #0
 8117fda:	d006      	beq.n	8117fea <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8117fdc:	693b      	ldr	r3, [r7, #16]
 8117fde:	685b      	ldr	r3, [r3, #4]
 8117fe0:	693a      	ldr	r2, [r7, #16]
 8117fe2:	6892      	ldr	r2, [r2, #8]
 8117fe4:	2100      	movs	r1, #0
 8117fe6:	4610      	mov	r0, r2
 8117fe8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8117fea:	6938      	ldr	r0, [r7, #16]
 8117fec:	f7ff f98c 	bl	8117308 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8117ff0:	697b      	ldr	r3, [r7, #20]
 8117ff2:	3318      	adds	r3, #24
 8117ff4:	2100      	movs	r1, #0
 8117ff6:	4618      	mov	r0, r3
 8117ff8:	f7ff f996 	bl	8117328 <mqtt_take_request>
 8117ffc:	6138      	str	r0, [r7, #16]
 8117ffe:	693b      	ldr	r3, [r7, #16]
 8118000:	2b00      	cmp	r3, #0
 8118002:	d1e7      	bne.n	8117fd4 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8118004:	697a      	ldr	r2, [r7, #20]
 8118006:	f241 136c 	movw	r3, #4460	@ 0x116c
 811800a:	4413      	add	r3, r2
 811800c:	697a      	ldr	r2, [r7, #20]
 811800e:	68d2      	ldr	r2, [r2, #12]
 8118010:	4611      	mov	r1, r2
 8118012:	4618      	mov	r0, r3
 8118014:	f7ff f832 	bl	811707c <mqtt_output_send>
  }
  return ERR_OK;
 8118018:	2300      	movs	r3, #0
}
 811801a:	4618      	mov	r0, r3
 811801c:	3718      	adds	r7, #24
 811801e:	46bd      	mov	sp, r7
 8118020:	bd80      	pop	{r7, pc}
	...

08118024 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8118024:	b580      	push	{r7, lr}
 8118026:	b084      	sub	sp, #16
 8118028:	af00      	add	r7, sp, #0
 811802a:	6078      	str	r0, [r7, #4]
 811802c:	460b      	mov	r3, r1
 811802e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8118030:	687b      	ldr	r3, [r7, #4]
 8118032:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8118034:	68fb      	ldr	r3, [r7, #12]
 8118036:	2b00      	cmp	r3, #0
 8118038:	d106      	bne.n	8118048 <mqtt_tcp_err_cb+0x24>
 811803a:	4b09      	ldr	r3, [pc, #36]	@ (8118060 <mqtt_tcp_err_cb+0x3c>)
 811803c:	f240 32f6 	movw	r2, #1014	@ 0x3f6
 8118040:	4908      	ldr	r1, [pc, #32]	@ (8118064 <mqtt_tcp_err_cb+0x40>)
 8118042:	4809      	ldr	r0, [pc, #36]	@ (8118068 <mqtt_tcp_err_cb+0x44>)
 8118044:	f009 fe9e 	bl	8121d84 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8118048:	68fb      	ldr	r3, [r7, #12]
 811804a:	2200      	movs	r2, #0
 811804c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 811804e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8118052:	68f8      	ldr	r0, [r7, #12]
 8118054:	f7ff fb52 	bl	81176fc <mqtt_close>
}
 8118058:	bf00      	nop
 811805a:	3710      	adds	r7, #16
 811805c:	46bd      	mov	sp, r7
 811805e:	bd80      	pop	{r7, pc}
 8118060:	08125ce4 	.word	0x08125ce4
 8118064:	08126008 	.word	0x08126008
 8118068:	08125d94 	.word	0x08125d94

0811806c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 811806c:	b580      	push	{r7, lr}
 811806e:	b084      	sub	sp, #16
 8118070:	af00      	add	r7, sp, #0
 8118072:	6078      	str	r0, [r7, #4]
 8118074:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8118076:	687b      	ldr	r3, [r7, #4]
 8118078:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 811807a:	68fb      	ldr	r3, [r7, #12]
 811807c:	7a9b      	ldrb	r3, [r3, #10]
 811807e:	2b03      	cmp	r3, #3
 8118080:	d107      	bne.n	8118092 <mqtt_tcp_poll_cb+0x26>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8118082:	68fa      	ldr	r2, [r7, #12]
 8118084:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118088:	4413      	add	r3, r2
 811808a:	6839      	ldr	r1, [r7, #0]
 811808c:	4618      	mov	r0, r3
 811808e:	f7fe fff5 	bl	811707c <mqtt_output_send>
  }
  return ERR_OK;
 8118092:	2300      	movs	r3, #0
}
 8118094:	4618      	mov	r0, r3
 8118096:	3710      	adds	r7, #16
 8118098:	46bd      	mov	sp, r7
 811809a:	bd80      	pop	{r7, pc}

0811809c <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 811809c:	b580      	push	{r7, lr}
 811809e:	b086      	sub	sp, #24
 81180a0:	af00      	add	r7, sp, #0
 81180a2:	60f8      	str	r0, [r7, #12]
 81180a4:	60b9      	str	r1, [r7, #8]
 81180a6:	4613      	mov	r3, r2
 81180a8:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 81180aa:	68fb      	ldr	r3, [r7, #12]
 81180ac:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 81180ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81180b2:	2b00      	cmp	r3, #0
 81180b4:	d002      	beq.n	81180bc <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 81180b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81180ba:	e027      	b.n	811810c <mqtt_tcp_connect_cb+0x70>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 81180bc:	697b      	ldr	r3, [r7, #20]
 81180be:	2200      	movs	r2, #0
 81180c0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 81180c4:	4913      	ldr	r1, [pc, #76]	@ (8118114 <mqtt_tcp_connect_cb+0x78>)
 81180c6:	68b8      	ldr	r0, [r7, #8]
 81180c8:	f003 fc46 	bl	811b958 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 81180cc:	4912      	ldr	r1, [pc, #72]	@ (8118118 <mqtt_tcp_connect_cb+0x7c>)
 81180ce:	68b8      	ldr	r0, [r7, #8]
 81180d0:	f003 fc66 	bl	811b9a0 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 81180d4:	2202      	movs	r2, #2
 81180d6:	4911      	ldr	r1, [pc, #68]	@ (811811c <mqtt_tcp_connect_cb+0x80>)
 81180d8:	68b8      	ldr	r0, [r7, #8]
 81180da:	f003 fca9 	bl	811ba30 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 81180de:	697b      	ldr	r3, [r7, #20]
 81180e0:	2202      	movs	r2, #2
 81180e2:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 81180e4:	697a      	ldr	r2, [r7, #20]
 81180e6:	490e      	ldr	r1, [pc, #56]	@ (8118120 <mqtt_tcp_connect_cb+0x84>)
 81180e8:	f241 3088 	movw	r0, #5000	@ 0x1388
 81180ec:	f008 fb48 	bl	8120780 <sys_timeout>
  client->cyclic_tick = 0;
 81180f0:	697b      	ldr	r3, [r7, #20]
 81180f2:	2200      	movs	r2, #0
 81180f4:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 81180f6:	697a      	ldr	r2, [r7, #20]
 81180f8:	f241 136c 	movw	r3, #4460	@ 0x116c
 81180fc:	4413      	add	r3, r2
 81180fe:	697a      	ldr	r2, [r7, #20]
 8118100:	68d2      	ldr	r2, [r2, #12]
 8118102:	4611      	mov	r1, r2
 8118104:	4618      	mov	r0, r3
 8118106:	f7fe ffb9 	bl	811707c <mqtt_output_send>

  return ERR_OK;
 811810a:	2300      	movs	r3, #0
}
 811810c:	4618      	mov	r0, r3
 811810e:	3718      	adds	r7, #24
 8118110:	46bd      	mov	sp, r7
 8118112:	bd80      	pop	{r7, pc}
 8118114:	08117ef1 	.word	0x08117ef1
 8118118:	08117fad 	.word	0x08117fad
 811811c:	0811806d 	.word	0x0811806d
 8118120:	081177bd 	.word	0x081177bd

08118124 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8118124:	b580      	push	{r7, lr}
 8118126:	b08c      	sub	sp, #48	@ 0x30
 8118128:	af02      	add	r7, sp, #8
 811812a:	60f8      	str	r0, [r7, #12]
 811812c:	60b9      	str	r1, [r7, #8]
 811812e:	607a      	str	r2, [r7, #4]
 8118130:	807b      	strh	r3, [r7, #2]
  size_t topic_strlen;
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
 8118132:	f7f7 fe45 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8118136:	68fb      	ldr	r3, [r7, #12]
 8118138:	2b00      	cmp	r3, #0
 811813a:	d106      	bne.n	811814a <mqtt_publish+0x26>
 811813c:	4b62      	ldr	r3, [pc, #392]	@ (81182c8 <mqtt_publish+0x1a4>)
 811813e:	f240 4254 	movw	r2, #1108	@ 0x454
 8118142:	4962      	ldr	r1, [pc, #392]	@ (81182cc <mqtt_publish+0x1a8>)
 8118144:	4862      	ldr	r0, [pc, #392]	@ (81182d0 <mqtt_publish+0x1ac>)
 8118146:	f009 fe1d 	bl	8121d84 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 811814a:	68bb      	ldr	r3, [r7, #8]
 811814c:	2b00      	cmp	r3, #0
 811814e:	d106      	bne.n	811815e <mqtt_publish+0x3a>
 8118150:	4b5d      	ldr	r3, [pc, #372]	@ (81182c8 <mqtt_publish+0x1a4>)
 8118152:	f240 4255 	movw	r2, #1109	@ 0x455
 8118156:	495f      	ldr	r1, [pc, #380]	@ (81182d4 <mqtt_publish+0x1b0>)
 8118158:	485d      	ldr	r0, [pc, #372]	@ (81182d0 <mqtt_publish+0x1ac>)
 811815a:	f009 fe13 	bl	8121d84 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 811815e:	68fb      	ldr	r3, [r7, #12]
 8118160:	7a9b      	ldrb	r3, [r3, #10]
 8118162:	2b00      	cmp	r3, #0
 8118164:	d109      	bne.n	811817a <mqtt_publish+0x56>
 8118166:	4b58      	ldr	r3, [pc, #352]	@ (81182c8 <mqtt_publish+0x1a4>)
 8118168:	f240 4256 	movw	r2, #1110	@ 0x456
 811816c:	495a      	ldr	r1, [pc, #360]	@ (81182d8 <mqtt_publish+0x1b4>)
 811816e:	4858      	ldr	r0, [pc, #352]	@ (81182d0 <mqtt_publish+0x1ac>)
 8118170:	f009 fe08 	bl	8121d84 <iprintf>
 8118174:	f06f 030a 	mvn.w	r3, #10
 8118178:	e0a1      	b.n	81182be <mqtt_publish+0x19a>

  topic_strlen = strlen(topic);
 811817a:	68b8      	ldr	r0, [r7, #8]
 811817c:	f7e8 f910 	bl	81003a0 <strlen>
 8118180:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8118182:	69fb      	ldr	r3, [r7, #28]
 8118184:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8118188:	4293      	cmp	r3, r2
 811818a:	d909      	bls.n	81181a0 <mqtt_publish+0x7c>
 811818c:	4b4e      	ldr	r3, [pc, #312]	@ (81182c8 <mqtt_publish+0x1a4>)
 811818e:	f240 4259 	movw	r2, #1113	@ 0x459
 8118192:	4952      	ldr	r1, [pc, #328]	@ (81182dc <mqtt_publish+0x1b8>)
 8118194:	484e      	ldr	r0, [pc, #312]	@ (81182d0 <mqtt_publish+0x1ac>)
 8118196:	f009 fdf5 	bl	8121d84 <iprintf>
 811819a:	f06f 030f 	mvn.w	r3, #15
 811819e:	e08e      	b.n	81182be <mqtt_publish+0x19a>
  topic_len = (u16_t)topic_strlen;
 81181a0:	69fb      	ldr	r3, [r7, #28]
 81181a2:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 81181a4:	8b7b      	ldrh	r3, [r7, #26]
 81181a6:	1c9a      	adds	r2, r3, #2
 81181a8:	887b      	ldrh	r3, [r7, #2]
 81181aa:	4413      	add	r3, r2
 81181ac:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 81181ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 81181b2:	2b00      	cmp	r3, #0
 81181b4:	d008      	beq.n	81181c8 <mqtt_publish+0xa4>
    total_len += 2;
 81181b6:	6a3b      	ldr	r3, [r7, #32]
 81181b8:	3302      	adds	r3, #2
 81181ba:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 81181bc:	68f8      	ldr	r0, [r7, #12]
 81181be:	f7fe fec5 	bl	8116f4c <msg_generate_packet_id>
 81181c2:	4603      	mov	r3, r0
 81181c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 81181c6:	e001      	b.n	81181cc <mqtt_publish+0xa8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 81181c8:	2300      	movs	r3, #0
 81181ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 81181cc:	6a3b      	ldr	r3, [r7, #32]
 81181ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81181d2:	d309      	bcc.n	81181e8 <mqtt_publish+0xc4>
 81181d4:	4b3c      	ldr	r3, [pc, #240]	@ (81182c8 <mqtt_publish+0x1a4>)
 81181d6:	f240 4265 	movw	r2, #1125	@ 0x465
 81181da:	4941      	ldr	r1, [pc, #260]	@ (81182e0 <mqtt_publish+0x1bc>)
 81181dc:	483c      	ldr	r0, [pc, #240]	@ (81182d0 <mqtt_publish+0x1ac>)
 81181de:	f009 fdd1 	bl	8121d84 <iprintf>
 81181e2:	f06f 030f 	mvn.w	r3, #15
 81181e6:	e06a      	b.n	81182be <mqtt_publish+0x19a>
  remaining_length = (u16_t)total_len;
 81181e8:	6a3b      	ldr	r3, [r7, #32]
 81181ea:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 81181ec:	68fb      	ldr	r3, [r7, #12]
 81181ee:	f103 001c 	add.w	r0, r3, #28
 81181f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81181f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81181f6:	9300      	str	r3, [sp, #0]
 81181f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81181fa:	2114      	movs	r1, #20
 81181fc:	f7fe fff2 	bl	81171e4 <mqtt_create_request>
 8118200:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8118202:	697b      	ldr	r3, [r7, #20]
 8118204:	2b00      	cmp	r3, #0
 8118206:	d102      	bne.n	811820e <mqtt_publish+0xea>
    return ERR_MEM;
 8118208:	f04f 33ff 	mov.w	r3, #4294967295
 811820c:	e057      	b.n	81182be <mqtt_publish+0x19a>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 811820e:	68fa      	ldr	r2, [r7, #12]
 8118210:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118214:	4413      	add	r3, r2
 8118216:	8b3a      	ldrh	r2, [r7, #24]
 8118218:	4611      	mov	r1, r2
 811821a:	4618      	mov	r0, r3
 811821c:	f7ff fa3c 	bl	8117698 <mqtt_output_check_space>
 8118220:	4603      	mov	r3, r0
 8118222:	2b00      	cmp	r3, #0
 8118224:	d105      	bne.n	8118232 <mqtt_publish+0x10e>
    mqtt_delete_request(r);
 8118226:	6978      	ldr	r0, [r7, #20]
 8118228:	f7ff f86e 	bl	8117308 <mqtt_delete_request>
    return ERR_MEM;
 811822c:	f04f 33ff 	mov.w	r3, #4294967295
 8118230:	e045      	b.n	81182be <mqtt_publish+0x19a>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8118232:	68fb      	ldr	r3, [r7, #12]
 8118234:	f241 106c 	movw	r0, #4460	@ 0x116c
 8118238:	4418      	add	r0, r3
 811823a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 811823e:	8b3b      	ldrh	r3, [r7, #24]
 8118240:	9301      	str	r3, [sp, #4]
 8118242:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8118246:	9300      	str	r3, [sp, #0]
 8118248:	4613      	mov	r3, r2
 811824a:	2200      	movs	r2, #0
 811824c:	2103      	movs	r1, #3
 811824e:	f7ff f9d8 	bl	8117602 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8118252:	68fa      	ldr	r2, [r7, #12]
 8118254:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118258:	4413      	add	r3, r2
 811825a:	8b7a      	ldrh	r2, [r7, #26]
 811825c:	68b9      	ldr	r1, [r7, #8]
 811825e:	4618      	mov	r0, r3
 8118260:	f7ff f9a3 	bl	81175aa <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8118264:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8118268:	2b00      	cmp	r3, #0
 811826a:	d008      	beq.n	811827e <mqtt_publish+0x15a>
    mqtt_output_append_u16(&client->output, pkt_id);
 811826c:	68fa      	ldr	r2, [r7, #12]
 811826e:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118272:	4413      	add	r3, r2
 8118274:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8118276:	4611      	mov	r1, r2
 8118278:	4618      	mov	r0, r3
 811827a:	f7ff f960 	bl	811753e <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 811827e:	687b      	ldr	r3, [r7, #4]
 8118280:	2b00      	cmp	r3, #0
 8118282:	d00b      	beq.n	811829c <mqtt_publish+0x178>
 8118284:	887b      	ldrh	r3, [r7, #2]
 8118286:	2b00      	cmp	r3, #0
 8118288:	d008      	beq.n	811829c <mqtt_publish+0x178>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 811828a:	68fa      	ldr	r2, [r7, #12]
 811828c:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118290:	4413      	add	r3, r2
 8118292:	887a      	ldrh	r2, [r7, #2]
 8118294:	6879      	ldr	r1, [r7, #4]
 8118296:	4618      	mov	r0, r3
 8118298:	f7ff f969 	bl	811756e <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 811829c:	68fb      	ldr	r3, [r7, #12]
 811829e:	3318      	adds	r3, #24
 81182a0:	6979      	ldr	r1, [r7, #20]
 81182a2:	4618      	mov	r0, r3
 81182a4:	f7fe ffe4 	bl	8117270 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 81182a8:	68fa      	ldr	r2, [r7, #12]
 81182aa:	f241 136c 	movw	r3, #4460	@ 0x116c
 81182ae:	4413      	add	r3, r2
 81182b0:	68fa      	ldr	r2, [r7, #12]
 81182b2:	68d2      	ldr	r2, [r2, #12]
 81182b4:	4611      	mov	r1, r2
 81182b6:	4618      	mov	r0, r3
 81182b8:	f7fe fee0 	bl	811707c <mqtt_output_send>
  return ERR_OK;
 81182bc:	2300      	movs	r3, #0
}
 81182be:	4618      	mov	r0, r3
 81182c0:	3728      	adds	r7, #40	@ 0x28
 81182c2:	46bd      	mov	sp, r7
 81182c4:	bd80      	pop	{r7, pc}
 81182c6:	bf00      	nop
 81182c8:	08125ce4 	.word	0x08125ce4
 81182cc:	08126028 	.word	0x08126028
 81182d0:	08125d94 	.word	0x08125d94
 81182d4:	08126048 	.word	0x08126048
 81182d8:	08126064 	.word	0x08126064
 81182dc:	08126084 	.word	0x08126084
 81182e0:	081260a8 	.word	0x081260a8

081182e4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 81182e4:	b580      	push	{r7, lr}
 81182e6:	b08c      	sub	sp, #48	@ 0x30
 81182e8:	af02      	add	r7, sp, #8
 81182ea:	60f8      	str	r0, [r7, #12]
 81182ec:	60b9      	str	r1, [r7, #8]
 81182ee:	603b      	str	r3, [r7, #0]
 81182f0:	4613      	mov	r3, r2
 81182f2:	71fb      	strb	r3, [r7, #7]
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
 81182f4:	f7f7 fd64 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 81182f8:	68fb      	ldr	r3, [r7, #12]
 81182fa:	2b00      	cmp	r3, #0
 81182fc:	d106      	bne.n	811830c <mqtt_sub_unsub+0x28>
 81182fe:	4b62      	ldr	r3, [pc, #392]	@ (8118488 <mqtt_sub_unsub+0x1a4>)
 8118300:	f240 429f 	movw	r2, #1183	@ 0x49f
 8118304:	4961      	ldr	r1, [pc, #388]	@ (811848c <mqtt_sub_unsub+0x1a8>)
 8118306:	4862      	ldr	r0, [pc, #392]	@ (8118490 <mqtt_sub_unsub+0x1ac>)
 8118308:	f009 fd3c 	bl	8121d84 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 811830c:	68bb      	ldr	r3, [r7, #8]
 811830e:	2b00      	cmp	r3, #0
 8118310:	d106      	bne.n	8118320 <mqtt_sub_unsub+0x3c>
 8118312:	4b5d      	ldr	r3, [pc, #372]	@ (8118488 <mqtt_sub_unsub+0x1a4>)
 8118314:	f44f 6294 	mov.w	r2, #1184	@ 0x4a0
 8118318:	495e      	ldr	r1, [pc, #376]	@ (8118494 <mqtt_sub_unsub+0x1b0>)
 811831a:	485d      	ldr	r0, [pc, #372]	@ (8118490 <mqtt_sub_unsub+0x1ac>)
 811831c:	f009 fd32 	bl	8121d84 <iprintf>

  topic_strlen = strlen(topic);
 8118320:	68b8      	ldr	r0, [r7, #8]
 8118322:	f7e8 f83d 	bl	81003a0 <strlen>
 8118326:	6278      	str	r0, [r7, #36]	@ 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8118328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811832a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 811832e:	4293      	cmp	r3, r2
 8118330:	d909      	bls.n	8118346 <mqtt_sub_unsub+0x62>
 8118332:	4b55      	ldr	r3, [pc, #340]	@ (8118488 <mqtt_sub_unsub+0x1a4>)
 8118334:	f240 42a3 	movw	r2, #1187	@ 0x4a3
 8118338:	4957      	ldr	r1, [pc, #348]	@ (8118498 <mqtt_sub_unsub+0x1b4>)
 811833a:	4855      	ldr	r0, [pc, #340]	@ (8118490 <mqtt_sub_unsub+0x1ac>)
 811833c:	f009 fd22 	bl	8121d84 <iprintf>
 8118340:	f06f 030f 	mvn.w	r3, #15
 8118344:	e09c      	b.n	8118480 <mqtt_sub_unsub+0x19c>
  topic_len = (u16_t)topic_strlen;
 8118346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118348:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 811834a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811834c:	3304      	adds	r3, #4
 811834e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8118352:	2a00      	cmp	r2, #0
 8118354:	bf14      	ite	ne
 8118356:	2201      	movne	r2, #1
 8118358:	2200      	moveq	r2, #0
 811835a:	b2d2      	uxtb	r2, r2
 811835c:	4413      	add	r3, r2
 811835e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8118360:	69fb      	ldr	r3, [r7, #28]
 8118362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118366:	d309      	bcc.n	811837c <mqtt_sub_unsub+0x98>
 8118368:	4b47      	ldr	r3, [pc, #284]	@ (8118488 <mqtt_sub_unsub+0x1a4>)
 811836a:	f240 42a7 	movw	r2, #1191	@ 0x4a7
 811836e:	494b      	ldr	r1, [pc, #300]	@ (811849c <mqtt_sub_unsub+0x1b8>)
 8118370:	4847      	ldr	r0, [pc, #284]	@ (8118490 <mqtt_sub_unsub+0x1ac>)
 8118372:	f009 fd07 	bl	8121d84 <iprintf>
 8118376:	f06f 030f 	mvn.w	r3, #15
 811837a:	e081      	b.n	8118480 <mqtt_sub_unsub+0x19c>
  remaining_length = (u16_t)total_len;
 811837c:	69fb      	ldr	r3, [r7, #28]
 811837e:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8118380:	79fb      	ldrb	r3, [r7, #7]
 8118382:	2b02      	cmp	r3, #2
 8118384:	d906      	bls.n	8118394 <mqtt_sub_unsub+0xb0>
 8118386:	4b40      	ldr	r3, [pc, #256]	@ (8118488 <mqtt_sub_unsub+0x1a4>)
 8118388:	f240 42aa 	movw	r2, #1194	@ 0x4aa
 811838c:	4944      	ldr	r1, [pc, #272]	@ (81184a0 <mqtt_sub_unsub+0x1bc>)
 811838e:	4840      	ldr	r0, [pc, #256]	@ (8118490 <mqtt_sub_unsub+0x1ac>)
 8118390:	f009 fcf8 	bl	8121d84 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8118394:	68fb      	ldr	r3, [r7, #12]
 8118396:	7a9b      	ldrb	r3, [r3, #10]
 8118398:	2b00      	cmp	r3, #0
 811839a:	d102      	bne.n	81183a2 <mqtt_sub_unsub+0xbe>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 811839c:	f06f 030a 	mvn.w	r3, #10
 81183a0:	e06e      	b.n	8118480 <mqtt_sub_unsub+0x19c>
  }

  pkt_id = msg_generate_packet_id(client);
 81183a2:	68f8      	ldr	r0, [r7, #12]
 81183a4:	f7fe fdd2 	bl	8116f4c <msg_generate_packet_id>
 81183a8:	4603      	mov	r3, r0
 81183aa:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 81183ac:	68fb      	ldr	r3, [r7, #12]
 81183ae:	f103 001c 	add.w	r0, r3, #28
 81183b2:	8b3a      	ldrh	r2, [r7, #24]
 81183b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81183b6:	9300      	str	r3, [sp, #0]
 81183b8:	683b      	ldr	r3, [r7, #0]
 81183ba:	2114      	movs	r1, #20
 81183bc:	f7fe ff12 	bl	81171e4 <mqtt_create_request>
 81183c0:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 81183c2:	697b      	ldr	r3, [r7, #20]
 81183c4:	2b00      	cmp	r3, #0
 81183c6:	d102      	bne.n	81183ce <mqtt_sub_unsub+0xea>
    return ERR_MEM;
 81183c8:	f04f 33ff 	mov.w	r3, #4294967295
 81183cc:	e058      	b.n	8118480 <mqtt_sub_unsub+0x19c>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 81183ce:	68fa      	ldr	r2, [r7, #12]
 81183d0:	f241 136c 	movw	r3, #4460	@ 0x116c
 81183d4:	4413      	add	r3, r2
 81183d6:	8b7a      	ldrh	r2, [r7, #26]
 81183d8:	4611      	mov	r1, r2
 81183da:	4618      	mov	r0, r3
 81183dc:	f7ff f95c 	bl	8117698 <mqtt_output_check_space>
 81183e0:	4603      	mov	r3, r0
 81183e2:	2b00      	cmp	r3, #0
 81183e4:	d105      	bne.n	81183f2 <mqtt_sub_unsub+0x10e>
    mqtt_delete_request(r);
 81183e6:	6978      	ldr	r0, [r7, #20]
 81183e8:	f7fe ff8e 	bl	8117308 <mqtt_delete_request>
    return ERR_MEM;
 81183ec:	f04f 33ff 	mov.w	r3, #4294967295
 81183f0:	e046      	b.n	8118480 <mqtt_sub_unsub+0x19c>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 81183f2:	68fb      	ldr	r3, [r7, #12]
 81183f4:	f241 106c 	movw	r0, #4460	@ 0x116c
 81183f8:	4418      	add	r0, r3
 81183fa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 81183fe:	2b00      	cmp	r3, #0
 8118400:	d001      	beq.n	8118406 <mqtt_sub_unsub+0x122>
 8118402:	2108      	movs	r1, #8
 8118404:	e000      	b.n	8118408 <mqtt_sub_unsub+0x124>
 8118406:	210a      	movs	r1, #10
 8118408:	8b7b      	ldrh	r3, [r7, #26]
 811840a:	9301      	str	r3, [sp, #4]
 811840c:	2300      	movs	r3, #0
 811840e:	9300      	str	r3, [sp, #0]
 8118410:	2301      	movs	r3, #1
 8118412:	2200      	movs	r2, #0
 8118414:	f7ff f8f5 	bl	8117602 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8118418:	68fa      	ldr	r2, [r7, #12]
 811841a:	f241 136c 	movw	r3, #4460	@ 0x116c
 811841e:	4413      	add	r3, r2
 8118420:	8b3a      	ldrh	r2, [r7, #24]
 8118422:	4611      	mov	r1, r2
 8118424:	4618      	mov	r0, r3
 8118426:	f7ff f88a 	bl	811753e <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 811842a:	68fa      	ldr	r2, [r7, #12]
 811842c:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118430:	4413      	add	r3, r2
 8118432:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8118434:	68b9      	ldr	r1, [r7, #8]
 8118436:	4618      	mov	r0, r3
 8118438:	f7ff f8b7 	bl	81175aa <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 811843c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8118440:	2b00      	cmp	r3, #0
 8118442:	d00c      	beq.n	811845e <mqtt_sub_unsub+0x17a>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8118444:	68fa      	ldr	r2, [r7, #12]
 8118446:	f241 136c 	movw	r3, #4460	@ 0x116c
 811844a:	4413      	add	r3, r2
 811844c:	79fa      	ldrb	r2, [r7, #7]
 811844e:	2a02      	cmp	r2, #2
 8118450:	bf28      	it	cs
 8118452:	2202      	movcs	r2, #2
 8118454:	b2d2      	uxtb	r2, r2
 8118456:	4611      	mov	r1, r2
 8118458:	4618      	mov	r0, r3
 811845a:	f7ff f861 	bl	8117520 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 811845e:	68fb      	ldr	r3, [r7, #12]
 8118460:	3318      	adds	r3, #24
 8118462:	6979      	ldr	r1, [r7, #20]
 8118464:	4618      	mov	r0, r3
 8118466:	f7fe ff03 	bl	8117270 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 811846a:	68fa      	ldr	r2, [r7, #12]
 811846c:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118470:	4413      	add	r3, r2
 8118472:	68fa      	ldr	r2, [r7, #12]
 8118474:	68d2      	ldr	r2, [r2, #12]
 8118476:	4611      	mov	r1, r2
 8118478:	4618      	mov	r0, r3
 811847a:	f7fe fdff 	bl	811707c <mqtt_output_send>
  return ERR_OK;
 811847e:	2300      	movs	r3, #0
}
 8118480:	4618      	mov	r0, r3
 8118482:	3728      	adds	r7, #40	@ 0x28
 8118484:	46bd      	mov	sp, r7
 8118486:	bd80      	pop	{r7, pc}
 8118488:	08125ce4 	.word	0x08125ce4
 811848c:	081260cc 	.word	0x081260cc
 8118490:	08125d94 	.word	0x08125d94
 8118494:	081260ec 	.word	0x081260ec
 8118498:	0812610c 	.word	0x0812610c
 811849c:	08126134 	.word	0x08126134
 81184a0:	0812615c 	.word	0x0812615c

081184a4 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 81184a4:	b580      	push	{r7, lr}
 81184a6:	b084      	sub	sp, #16
 81184a8:	af00      	add	r7, sp, #0
 81184aa:	60f8      	str	r0, [r7, #12]
 81184ac:	60b9      	str	r1, [r7, #8]
 81184ae:	607a      	str	r2, [r7, #4]
 81184b0:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 81184b2:	f7f7 fc85 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 81184b6:	68fb      	ldr	r3, [r7, #12]
 81184b8:	2b00      	cmp	r3, #0
 81184ba:	d106      	bne.n	81184ca <mqtt_set_inpub_callback+0x26>
 81184bc:	4b0b      	ldr	r3, [pc, #44]	@ (81184ec <mqtt_set_inpub_callback+0x48>)
 81184be:	f240 42da 	movw	r2, #1242	@ 0x4da
 81184c2:	490b      	ldr	r1, [pc, #44]	@ (81184f0 <mqtt_set_inpub_callback+0x4c>)
 81184c4:	480b      	ldr	r0, [pc, #44]	@ (81184f4 <mqtt_set_inpub_callback+0x50>)
 81184c6:	f009 fc5d 	bl	8121d84 <iprintf>
  client->data_cb = data_cb;
 81184ca:	68fb      	ldr	r3, [r7, #12]
 81184cc:	687a      	ldr	r2, [r7, #4]
 81184ce:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
  client->pub_cb = pub_cb;
 81184d2:	68fb      	ldr	r3, [r7, #12]
 81184d4:	68ba      	ldr	r2, [r7, #8]
 81184d6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
  client->inpub_arg = arg;
 81184da:	68fb      	ldr	r3, [r7, #12]
 81184dc:	683a      	ldr	r2, [r7, #0]
 81184de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
}
 81184e2:	bf00      	nop
 81184e4:	3710      	adds	r7, #16
 81184e6:	46bd      	mov	sp, r7
 81184e8:	bd80      	pop	{r7, pc}
 81184ea:	bf00      	nop
 81184ec:	08125ce4 	.word	0x08125ce4
 81184f0:	08126174 	.word	0x08126174
 81184f4:	08125d94 	.word	0x08125d94

081184f8 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 81184f8:	b580      	push	{r7, lr}
 81184fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 81184fc:	f7f7 fc60 	bl	810fdc0 <sys_check_core_locking>
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8118500:	f242 1170 	movw	r1, #8560	@ 0x2170
 8118504:	2001      	movs	r0, #1
 8118506:	f7fe fbc7 	bl	8116c98 <mem_calloc>
 811850a:	4603      	mov	r3, r0
}
 811850c:	4618      	mov	r0, r3
 811850e:	bd80      	pop	{r7, pc}

08118510 <mqtt_client_free>:
 * Free MQTT client instance
 * @param client Pointer to instance to be freed
 */
void
mqtt_client_free(mqtt_client_t *client)
{
 8118510:	b580      	push	{r7, lr}
 8118512:	b082      	sub	sp, #8
 8118514:	af00      	add	r7, sp, #0
 8118516:	6078      	str	r0, [r7, #4]
  mem_free(client);
 8118518:	6878      	ldr	r0, [r7, #4]
 811851a:	f7fe f92d 	bl	8116778 <mem_free>
}
 811851e:	bf00      	nop
 8118520:	3708      	adds	r7, #8
 8118522:	46bd      	mov	sp, r7
 8118524:	bd80      	pop	{r7, pc}
	...

08118528 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8118528:	b580      	push	{r7, lr}
 811852a:	b08c      	sub	sp, #48	@ 0x30
 811852c:	af02      	add	r7, sp, #8
 811852e:	60f8      	str	r0, [r7, #12]
 8118530:	60b9      	str	r1, [r7, #8]
 8118532:	603b      	str	r3, [r7, #0]
 8118534:	4613      	mov	r3, r2
 8118536:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8118538:	230a      	movs	r3, #10
 811853a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 811853c:	2300      	movs	r3, #0
 811853e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8118542:	2300      	movs	r3, #0
 8118544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8118548:	2300      	movs	r3, #0
 811854a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 811854e:	2300      	movs	r3, #0
 8118550:	83fb      	strh	r3, [r7, #30]
 8118552:	2300      	movs	r3, #0
 8118554:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
 8118556:	f7f7 fc33 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 811855a:	68fb      	ldr	r3, [r7, #12]
 811855c:	2b00      	cmp	r3, #0
 811855e:	d106      	bne.n	811856e <mqtt_client_connect+0x46>
 8118560:	4b9e      	ldr	r3, [pc, #632]	@ (81187dc <mqtt_client_connect+0x2b4>)
 8118562:	f240 520f 	movw	r2, #1295	@ 0x50f
 8118566:	499e      	ldr	r1, [pc, #632]	@ (81187e0 <mqtt_client_connect+0x2b8>)
 8118568:	489e      	ldr	r0, [pc, #632]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 811856a:	f009 fc0b 	bl	8121d84 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 811856e:	68bb      	ldr	r3, [r7, #8]
 8118570:	2b00      	cmp	r3, #0
 8118572:	d106      	bne.n	8118582 <mqtt_client_connect+0x5a>
 8118574:	4b99      	ldr	r3, [pc, #612]	@ (81187dc <mqtt_client_connect+0x2b4>)
 8118576:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 811857a:	499b      	ldr	r1, [pc, #620]	@ (81187e8 <mqtt_client_connect+0x2c0>)
 811857c:	4899      	ldr	r0, [pc, #612]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 811857e:	f009 fc01 	bl	8121d84 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8118582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118584:	2b00      	cmp	r3, #0
 8118586:	d106      	bne.n	8118596 <mqtt_client_connect+0x6e>
 8118588:	4b94      	ldr	r3, [pc, #592]	@ (81187dc <mqtt_client_connect+0x2b4>)
 811858a:	f240 5211 	movw	r2, #1297	@ 0x511
 811858e:	4997      	ldr	r1, [pc, #604]	@ (81187ec <mqtt_client_connect+0x2c4>)
 8118590:	4894      	ldr	r0, [pc, #592]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 8118592:	f009 fbf7 	bl	8121d84 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8118596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118598:	681b      	ldr	r3, [r3, #0]
 811859a:	2b00      	cmp	r3, #0
 811859c:	d106      	bne.n	81185ac <mqtt_client_connect+0x84>
 811859e:	4b8f      	ldr	r3, [pc, #572]	@ (81187dc <mqtt_client_connect+0x2b4>)
 81185a0:	f240 5212 	movw	r2, #1298	@ 0x512
 81185a4:	4992      	ldr	r1, [pc, #584]	@ (81187f0 <mqtt_client_connect+0x2c8>)
 81185a6:	488f      	ldr	r0, [pc, #572]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 81185a8:	f009 fbec 	bl	8121d84 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 81185ac:	68fb      	ldr	r3, [r7, #12]
 81185ae:	7a9b      	ldrb	r3, [r3, #10]
 81185b0:	2b00      	cmp	r3, #0
 81185b2:	d002      	beq.n	81185ba <mqtt_client_connect+0x92>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 81185b4:	f06f 0309 	mvn.w	r3, #9
 81185b8:	e22f      	b.n	8118a1a <mqtt_client_connect+0x4f2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 81185ba:	f242 1270 	movw	r2, #8560	@ 0x2170
 81185be:	2100      	movs	r1, #0
 81185c0:	68f8      	ldr	r0, [r7, #12]
 81185c2:	f009 fd85 	bl	81220d0 <memset>
  client->connect_arg = arg;
 81185c6:	68fb      	ldr	r3, [r7, #12]
 81185c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81185ca:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 81185cc:	68fb      	ldr	r3, [r7, #12]
 81185ce:	683a      	ldr	r2, [r7, #0]
 81185d0:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 81185d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81185d4:	899a      	ldrh	r2, [r3, #12]
 81185d6:	68fb      	ldr	r3, [r7, #12]
 81185d8:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 81185da:	68fb      	ldr	r3, [r7, #12]
 81185dc:	331c      	adds	r3, #28
 81185de:	2114      	movs	r1, #20
 81185e0:	4618      	mov	r0, r3
 81185e2:	f7fe ff6f 	bl	81174c4 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 81185e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81185e8:	691b      	ldr	r3, [r3, #16]
 81185ea:	2b00      	cmp	r3, #0
 81185ec:	d073      	beq.n	81186d6 <mqtt_client_connect+0x1ae>
 81185ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81185f0:	695b      	ldr	r3, [r3, #20]
 81185f2:	2b00      	cmp	r3, #0
 81185f4:	d06f      	beq.n	81186d6 <mqtt_client_connect+0x1ae>
    flags |= MQTT_CONNECT_FLAG_WILL;
 81185f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81185fa:	f043 0304 	orr.w	r3, r3, #4
 81185fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8118602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118604:	7e1b      	ldrb	r3, [r3, #24]
 8118606:	00db      	lsls	r3, r3, #3
 8118608:	b25b      	sxtb	r3, r3
 811860a:	f003 0318 	and.w	r3, r3, #24
 811860e:	b25a      	sxtb	r2, r3
 8118610:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8118614:	4313      	orrs	r3, r2
 8118616:	b25b      	sxtb	r3, r3
 8118618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (client_info->will_retain) {
 811861c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811861e:	7e5b      	ldrb	r3, [r3, #25]
 8118620:	2b00      	cmp	r3, #0
 8118622:	d005      	beq.n	8118630 <mqtt_client_connect+0x108>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8118624:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8118628:	f043 0320 	orr.w	r3, r3, #32
 811862c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    len = strlen(client_info->will_topic);
 8118630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118632:	691b      	ldr	r3, [r3, #16]
 8118634:	4618      	mov	r0, r3
 8118636:	f7e7 feb3 	bl	81003a0 <strlen>
 811863a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 811863c:	69bb      	ldr	r3, [r7, #24]
 811863e:	2bff      	cmp	r3, #255	@ 0xff
 8118640:	d909      	bls.n	8118656 <mqtt_client_connect+0x12e>
 8118642:	4b66      	ldr	r3, [pc, #408]	@ (81187dc <mqtt_client_connect+0x2b4>)
 8118644:	f44f 62a5 	mov.w	r2, #1320	@ 0x528
 8118648:	496a      	ldr	r1, [pc, #424]	@ (81187f4 <mqtt_client_connect+0x2cc>)
 811864a:	4866      	ldr	r0, [pc, #408]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 811864c:	f009 fb9a 	bl	8121d84 <iprintf>
 8118650:	f06f 0305 	mvn.w	r3, #5
 8118654:	e1e1      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8118656:	69bb      	ldr	r3, [r7, #24]
 8118658:	2b00      	cmp	r3, #0
 811865a:	d109      	bne.n	8118670 <mqtt_client_connect+0x148>
 811865c:	4b5f      	ldr	r3, [pc, #380]	@ (81187dc <mqtt_client_connect+0x2b4>)
 811865e:	f240 5229 	movw	r2, #1321	@ 0x529
 8118662:	4965      	ldr	r1, [pc, #404]	@ (81187f8 <mqtt_client_connect+0x2d0>)
 8118664:	485f      	ldr	r0, [pc, #380]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 8118666:	f009 fb8d 	bl	8121d84 <iprintf>
 811866a:	f06f 0305 	mvn.w	r3, #5
 811866e:	e1d4      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    will_topic_len = (u8_t)len;
 8118670:	69bb      	ldr	r3, [r7, #24]
 8118672:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    len = strlen(client_info->will_msg);
 8118676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118678:	695b      	ldr	r3, [r3, #20]
 811867a:	4618      	mov	r0, r3
 811867c:	f7e7 fe90 	bl	81003a0 <strlen>
 8118680:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8118682:	69bb      	ldr	r3, [r7, #24]
 8118684:	2bff      	cmp	r3, #255	@ 0xff
 8118686:	d909      	bls.n	811869c <mqtt_client_connect+0x174>
 8118688:	4b54      	ldr	r3, [pc, #336]	@ (81187dc <mqtt_client_connect+0x2b4>)
 811868a:	f240 522c 	movw	r2, #1324	@ 0x52c
 811868e:	495b      	ldr	r1, [pc, #364]	@ (81187fc <mqtt_client_connect+0x2d4>)
 8118690:	4854      	ldr	r0, [pc, #336]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 8118692:	f009 fb77 	bl	8121d84 <iprintf>
 8118696:	f06f 0305 	mvn.w	r3, #5
 811869a:	e1be      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    will_msg_len = (u8_t)len;
 811869c:	69bb      	ldr	r3, [r7, #24]
 811869e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 81186a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81186a4:	1c9a      	adds	r2, r3, #2
 81186a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81186aa:	4413      	add	r3, r2
 81186ac:	1c9a      	adds	r2, r3, #2
 81186ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 81186b2:	4413      	add	r3, r2
 81186b4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 81186b6:	69bb      	ldr	r3, [r7, #24]
 81186b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81186bc:	d309      	bcc.n	81186d2 <mqtt_client_connect+0x1aa>
 81186be:	4b47      	ldr	r3, [pc, #284]	@ (81187dc <mqtt_client_connect+0x2b4>)
 81186c0:	f240 522f 	movw	r2, #1327	@ 0x52f
 81186c4:	494e      	ldr	r1, [pc, #312]	@ (8118800 <mqtt_client_connect+0x2d8>)
 81186c6:	4847      	ldr	r0, [pc, #284]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 81186c8:	f009 fb5c 	bl	8121d84 <iprintf>
 81186cc:	f06f 0305 	mvn.w	r3, #5
 81186d0:	e1a3      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    remaining_length = (u16_t)len;
 81186d2:	69bb      	ldr	r3, [r7, #24]
 81186d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_user != NULL) {
 81186d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81186d8:	685b      	ldr	r3, [r3, #4]
 81186da:	2b00      	cmp	r3, #0
 81186dc:	d03d      	beq.n	811875a <mqtt_client_connect+0x232>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 81186de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81186e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 81186e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_user);
 81186ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81186ec:	685b      	ldr	r3, [r3, #4]
 81186ee:	4618      	mov	r0, r3
 81186f0:	f7e7 fe56 	bl	81003a0 <strlen>
 81186f4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 81186f6:	69bb      	ldr	r3, [r7, #24]
 81186f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81186fc:	d309      	bcc.n	8118712 <mqtt_client_connect+0x1ea>
 81186fe:	4b37      	ldr	r3, [pc, #220]	@ (81187dc <mqtt_client_connect+0x2b4>)
 8118700:	f240 5235 	movw	r2, #1333	@ 0x535
 8118704:	493f      	ldr	r1, [pc, #252]	@ (8118804 <mqtt_client_connect+0x2dc>)
 8118706:	4837      	ldr	r0, [pc, #220]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 8118708:	f009 fb3c 	bl	8121d84 <iprintf>
 811870c:	f06f 0305 	mvn.w	r3, #5
 8118710:	e183      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8118712:	69bb      	ldr	r3, [r7, #24]
 8118714:	2b00      	cmp	r3, #0
 8118716:	d109      	bne.n	811872c <mqtt_client_connect+0x204>
 8118718:	4b30      	ldr	r3, [pc, #192]	@ (81187dc <mqtt_client_connect+0x2b4>)
 811871a:	f240 5236 	movw	r2, #1334	@ 0x536
 811871e:	493a      	ldr	r1, [pc, #232]	@ (8118808 <mqtt_client_connect+0x2e0>)
 8118720:	4830      	ldr	r0, [pc, #192]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 8118722:	f009 fb2f 	bl	8121d84 <iprintf>
 8118726:	f06f 0305 	mvn.w	r3, #5
 811872a:	e176      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    client_user_len = (u16_t)len;
 811872c:	69bb      	ldr	r3, [r7, #24]
 811872e:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8118730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8118732:	1c9a      	adds	r2, r3, #2
 8118734:	8bfb      	ldrh	r3, [r7, #30]
 8118736:	4413      	add	r3, r2
 8118738:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 811873a:	69bb      	ldr	r3, [r7, #24]
 811873c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118740:	d309      	bcc.n	8118756 <mqtt_client_connect+0x22e>
 8118742:	4b26      	ldr	r3, [pc, #152]	@ (81187dc <mqtt_client_connect+0x2b4>)
 8118744:	f240 5239 	movw	r2, #1337	@ 0x539
 8118748:	492d      	ldr	r1, [pc, #180]	@ (8118800 <mqtt_client_connect+0x2d8>)
 811874a:	4826      	ldr	r0, [pc, #152]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 811874c:	f009 fb1a 	bl	8121d84 <iprintf>
 8118750:	f06f 0305 	mvn.w	r3, #5
 8118754:	e161      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    remaining_length = (u16_t)len;
 8118756:	69bb      	ldr	r3, [r7, #24]
 8118758:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_pass != NULL) {
 811875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811875c:	689b      	ldr	r3, [r3, #8]
 811875e:	2b00      	cmp	r3, #0
 8118760:	d05a      	beq.n	8118818 <mqtt_client_connect+0x2f0>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8118762:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8118766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811876a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_pass);
 811876e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118770:	689b      	ldr	r3, [r3, #8]
 8118772:	4618      	mov	r0, r3
 8118774:	f7e7 fe14 	bl	81003a0 <strlen>
 8118778:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 811877a:	69bb      	ldr	r3, [r7, #24]
 811877c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118780:	d309      	bcc.n	8118796 <mqtt_client_connect+0x26e>
 8118782:	4b16      	ldr	r3, [pc, #88]	@ (81187dc <mqtt_client_connect+0x2b4>)
 8118784:	f240 523f 	movw	r2, #1343	@ 0x53f
 8118788:	4920      	ldr	r1, [pc, #128]	@ (811880c <mqtt_client_connect+0x2e4>)
 811878a:	4816      	ldr	r0, [pc, #88]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 811878c:	f009 fafa 	bl	8121d84 <iprintf>
 8118790:	f06f 0305 	mvn.w	r3, #5
 8118794:	e141      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8118796:	69bb      	ldr	r3, [r7, #24]
 8118798:	2b00      	cmp	r3, #0
 811879a:	d109      	bne.n	81187b0 <mqtt_client_connect+0x288>
 811879c:	4b0f      	ldr	r3, [pc, #60]	@ (81187dc <mqtt_client_connect+0x2b4>)
 811879e:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 81187a2:	491b      	ldr	r1, [pc, #108]	@ (8118810 <mqtt_client_connect+0x2e8>)
 81187a4:	480f      	ldr	r0, [pc, #60]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 81187a6:	f009 faed 	bl	8121d84 <iprintf>
 81187aa:	f06f 0305 	mvn.w	r3, #5
 81187ae:	e134      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    client_pass_len = (u16_t)len;
 81187b0:	69bb      	ldr	r3, [r7, #24]
 81187b2:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 81187b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81187b6:	1c9a      	adds	r2, r3, #2
 81187b8:	8bbb      	ldrh	r3, [r7, #28]
 81187ba:	4413      	add	r3, r2
 81187bc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 81187be:	69bb      	ldr	r3, [r7, #24]
 81187c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81187c4:	d326      	bcc.n	8118814 <mqtt_client_connect+0x2ec>
 81187c6:	4b05      	ldr	r3, [pc, #20]	@ (81187dc <mqtt_client_connect+0x2b4>)
 81187c8:	f240 5243 	movw	r2, #1347	@ 0x543
 81187cc:	490c      	ldr	r1, [pc, #48]	@ (8118800 <mqtt_client_connect+0x2d8>)
 81187ce:	4805      	ldr	r0, [pc, #20]	@ (81187e4 <mqtt_client_connect+0x2bc>)
 81187d0:	f009 fad8 	bl	8121d84 <iprintf>
 81187d4:	f06f 0305 	mvn.w	r3, #5
 81187d8:	e11f      	b.n	8118a1a <mqtt_client_connect+0x4f2>
 81187da:	bf00      	nop
 81187dc:	08125ce4 	.word	0x08125ce4
 81187e0:	0812619c 	.word	0x0812619c
 81187e4:	08125d94 	.word	0x08125d94
 81187e8:	081261c0 	.word	0x081261c0
 81187ec:	081261e8 	.word	0x081261e8
 81187f0:	08126214 	.word	0x08126214
 81187f4:	08126248 	.word	0x08126248
 81187f8:	08126288 	.word	0x08126288
 81187fc:	081262c8 	.word	0x081262c8
 8118800:	08126304 	.word	0x08126304
 8118804:	08126334 	.word	0x08126334
 8118808:	08126374 	.word	0x08126374
 811880c:	081263b8 	.word	0x081263b8
 8118810:	081263f8 	.word	0x081263f8
    remaining_length = (u16_t)len;
 8118814:	69bb      	ldr	r3, [r7, #24]
 8118816:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8118818:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811881c:	f043 0302 	orr.w	r3, r3, #2
 8118820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  len = strlen(client_info->client_id);
 8118824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118826:	681b      	ldr	r3, [r3, #0]
 8118828:	4618      	mov	r0, r3
 811882a:	f7e7 fdb9 	bl	81003a0 <strlen>
 811882e:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8118830:	69bb      	ldr	r3, [r7, #24]
 8118832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118836:	d309      	bcc.n	811884c <mqtt_client_connect+0x324>
 8118838:	4b7a      	ldr	r3, [pc, #488]	@ (8118a24 <mqtt_client_connect+0x4fc>)
 811883a:	f240 524b 	movw	r2, #1355	@ 0x54b
 811883e:	497a      	ldr	r1, [pc, #488]	@ (8118a28 <mqtt_client_connect+0x500>)
 8118840:	487a      	ldr	r0, [pc, #488]	@ (8118a2c <mqtt_client_connect+0x504>)
 8118842:	f009 fa9f 	bl	8121d84 <iprintf>
 8118846:	f06f 0305 	mvn.w	r3, #5
 811884a:	e0e6      	b.n	8118a1a <mqtt_client_connect+0x4f2>
  client_id_length = (u16_t)len;
 811884c:	69bb      	ldr	r3, [r7, #24]
 811884e:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8118850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8118852:	1c9a      	adds	r2, r3, #2
 8118854:	8afb      	ldrh	r3, [r7, #22]
 8118856:	4413      	add	r3, r2
 8118858:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 811885a:	69bb      	ldr	r3, [r7, #24]
 811885c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118860:	d309      	bcc.n	8118876 <mqtt_client_connect+0x34e>
 8118862:	4b70      	ldr	r3, [pc, #448]	@ (8118a24 <mqtt_client_connect+0x4fc>)
 8118864:	f240 524e 	movw	r2, #1358	@ 0x54e
 8118868:	4971      	ldr	r1, [pc, #452]	@ (8118a30 <mqtt_client_connect+0x508>)
 811886a:	4870      	ldr	r0, [pc, #448]	@ (8118a2c <mqtt_client_connect+0x504>)
 811886c:	f009 fa8a 	bl	8121d84 <iprintf>
 8118870:	f06f 0305 	mvn.w	r3, #5
 8118874:	e0d1      	b.n	8118a1a <mqtt_client_connect+0x4f2>
  remaining_length = (u16_t)len;
 8118876:	69bb      	ldr	r3, [r7, #24]
 8118878:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 811887a:	68fa      	ldr	r2, [r7, #12]
 811887c:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118880:	4413      	add	r3, r2
 8118882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8118884:	4611      	mov	r1, r2
 8118886:	4618      	mov	r0, r3
 8118888:	f7fe ff06 	bl	8117698 <mqtt_output_check_space>
 811888c:	4603      	mov	r3, r0
 811888e:	2b00      	cmp	r3, #0
 8118890:	d102      	bne.n	8118898 <mqtt_client_connect+0x370>
    return ERR_MEM;
 8118892:	f04f 33ff 	mov.w	r3, #4294967295
 8118896:	e0c0      	b.n	8118a1a <mqtt_client_connect+0x4f2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8118898:	2000      	movs	r0, #0
 811889a:	f003 f83d 	bl	811b918 <tcp_new_ip_type>
 811889e:	4602      	mov	r2, r0
 81188a0:	68fb      	ldr	r3, [r7, #12]
 81188a2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 81188a4:	68fb      	ldr	r3, [r7, #12]
 81188a6:	68db      	ldr	r3, [r3, #12]
 81188a8:	2b00      	cmp	r3, #0
 81188aa:	d102      	bne.n	81188b2 <mqtt_client_connect+0x38a>
    return ERR_MEM;
 81188ac:	f04f 33ff 	mov.w	r3, #4294967295
 81188b0:	e0b3      	b.n	8118a1a <mqtt_client_connect+0x4f2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 81188b2:	68fb      	ldr	r3, [r7, #12]
 81188b4:	68db      	ldr	r3, [r3, #12]
 81188b6:	68f9      	ldr	r1, [r7, #12]
 81188b8:	4618      	mov	r0, r3
 81188ba:	f003 f83b 	bl	811b934 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 81188be:	68fb      	ldr	r3, [r7, #12]
 81188c0:	68db      	ldr	r3, [r3, #12]
 81188c2:	2200      	movs	r2, #0
 81188c4:	495b      	ldr	r1, [pc, #364]	@ (8118a34 <mqtt_client_connect+0x50c>)
 81188c6:	4618      	mov	r0, r3
 81188c8:	f001 ff5a 	bl	811a780 <tcp_bind>
 81188cc:	4603      	mov	r3, r0
 81188ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 81188d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81188d6:	2b00      	cmp	r3, #0
 81188d8:	f040 8092 	bne.w	8118a00 <mqtt_client_connect+0x4d8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 81188dc:	68fb      	ldr	r3, [r7, #12]
 81188de:	68d8      	ldr	r0, [r3, #12]
 81188e0:	88fa      	ldrh	r2, [r7, #6]
 81188e2:	4b55      	ldr	r3, [pc, #340]	@ (8118a38 <mqtt_client_connect+0x510>)
 81188e4:	68b9      	ldr	r1, [r7, #8]
 81188e6:	f002 f8d7 	bl	811aa98 <tcp_connect>
 81188ea:	4603      	mov	r3, r0
 81188ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 81188f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81188f4:	2b00      	cmp	r3, #0
 81188f6:	f040 8085 	bne.w	8118a04 <mqtt_client_connect+0x4dc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 81188fa:	68fb      	ldr	r3, [r7, #12]
 81188fc:	68db      	ldr	r3, [r3, #12]
 81188fe:	494f      	ldr	r1, [pc, #316]	@ (8118a3c <mqtt_client_connect+0x514>)
 8118900:	4618      	mov	r0, r3
 8118902:	f003 f871 	bl	811b9e8 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8118906:	68fb      	ldr	r3, [r7, #12]
 8118908:	2201      	movs	r2, #1
 811890a:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 811890c:	68fb      	ldr	r3, [r7, #12]
 811890e:	f241 106c 	movw	r0, #4460	@ 0x116c
 8118912:	4418      	add	r0, r3
 8118914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8118916:	9301      	str	r3, [sp, #4]
 8118918:	2300      	movs	r3, #0
 811891a:	9300      	str	r3, [sp, #0]
 811891c:	2300      	movs	r3, #0
 811891e:	2200      	movs	r2, #0
 8118920:	2101      	movs	r1, #1
 8118922:	f7fe fe6e 	bl	8117602 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8118926:	68fa      	ldr	r2, [r7, #12]
 8118928:	f241 136c 	movw	r3, #4460	@ 0x116c
 811892c:	4413      	add	r3, r2
 811892e:	2204      	movs	r2, #4
 8118930:	4943      	ldr	r1, [pc, #268]	@ (8118a40 <mqtt_client_connect+0x518>)
 8118932:	4618      	mov	r0, r3
 8118934:	f7fe fe39 	bl	81175aa <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8118938:	68fa      	ldr	r2, [r7, #12]
 811893a:	f241 136c 	movw	r3, #4460	@ 0x116c
 811893e:	4413      	add	r3, r2
 8118940:	2104      	movs	r1, #4
 8118942:	4618      	mov	r0, r3
 8118944:	f7fe fdec 	bl	8117520 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8118948:	68fa      	ldr	r2, [r7, #12]
 811894a:	f241 136c 	movw	r3, #4460	@ 0x116c
 811894e:	4413      	add	r3, r2
 8118950:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8118954:	4611      	mov	r1, r2
 8118956:	4618      	mov	r0, r3
 8118958:	f7fe fde2 	bl	8117520 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 811895c:	68fa      	ldr	r2, [r7, #12]
 811895e:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118962:	4413      	add	r3, r2
 8118964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8118966:	8992      	ldrh	r2, [r2, #12]
 8118968:	4611      	mov	r1, r2
 811896a:	4618      	mov	r0, r3
 811896c:	f7fe fde7 	bl	811753e <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8118970:	68fa      	ldr	r2, [r7, #12]
 8118972:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118976:	4413      	add	r3, r2
 8118978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811897a:	6811      	ldr	r1, [r2, #0]
 811897c:	8afa      	ldrh	r2, [r7, #22]
 811897e:	4618      	mov	r0, r3
 8118980:	f7fe fe13 	bl	81175aa <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8118984:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8118988:	f003 0304 	and.w	r3, r3, #4
 811898c:	2b00      	cmp	r3, #0
 811898e:	d017      	beq.n	81189c0 <mqtt_client_connect+0x498>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8118990:	68fa      	ldr	r2, [r7, #12]
 8118992:	f241 136c 	movw	r3, #4460	@ 0x116c
 8118996:	4413      	add	r3, r2
 8118998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811899a:	6911      	ldr	r1, [r2, #16]
 811899c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 81189a0:	b292      	uxth	r2, r2
 81189a2:	4618      	mov	r0, r3
 81189a4:	f7fe fe01 	bl	81175aa <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 81189a8:	68fa      	ldr	r2, [r7, #12]
 81189aa:	f241 136c 	movw	r3, #4460	@ 0x116c
 81189ae:	4413      	add	r3, r2
 81189b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81189b2:	6951      	ldr	r1, [r2, #20]
 81189b4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 81189b8:	b292      	uxth	r2, r2
 81189ba:	4618      	mov	r0, r3
 81189bc:	f7fe fdf5 	bl	81175aa <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 81189c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81189c4:	2b00      	cmp	r3, #0
 81189c6:	da09      	bge.n	81189dc <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 81189c8:	68fa      	ldr	r2, [r7, #12]
 81189ca:	f241 136c 	movw	r3, #4460	@ 0x116c
 81189ce:	4413      	add	r3, r2
 81189d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81189d2:	6851      	ldr	r1, [r2, #4]
 81189d4:	8bfa      	ldrh	r2, [r7, #30]
 81189d6:	4618      	mov	r0, r3
 81189d8:	f7fe fde7 	bl	81175aa <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 81189dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81189e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81189e4:	2b00      	cmp	r3, #0
 81189e6:	d009      	beq.n	81189fc <mqtt_client_connect+0x4d4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 81189e8:	68fa      	ldr	r2, [r7, #12]
 81189ea:	f241 136c 	movw	r3, #4460	@ 0x116c
 81189ee:	4413      	add	r3, r2
 81189f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81189f2:	6891      	ldr	r1, [r2, #8]
 81189f4:	8bba      	ldrh	r2, [r7, #28]
 81189f6:	4618      	mov	r0, r3
 81189f8:	f7fe fdd7 	bl	81175aa <mqtt_output_append_string>
  }
  return ERR_OK;
 81189fc:	2300      	movs	r3, #0
 81189fe:	e00c      	b.n	8118a1a <mqtt_client_connect+0x4f2>
    goto tcp_fail;
 8118a00:	bf00      	nop
 8118a02:	e000      	b.n	8118a06 <mqtt_client_connect+0x4de>
    goto tcp_fail;
 8118a04:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8118a06:	68fb      	ldr	r3, [r7, #12]
 8118a08:	68db      	ldr	r3, [r3, #12]
 8118a0a:	4618      	mov	r0, r3
 8118a0c:	f001 feac 	bl	811a768 <tcp_abort>
  client->conn = NULL;
 8118a10:	68fb      	ldr	r3, [r7, #12]
 8118a12:	2200      	movs	r2, #0
 8118a14:	60da      	str	r2, [r3, #12]
  return err;
 8118a16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8118a1a:	4618      	mov	r0, r3
 8118a1c:	3728      	adds	r7, #40	@ 0x28
 8118a1e:	46bd      	mov	sp, r7
 8118a20:	bd80      	pop	{r7, pc}
 8118a22:	bf00      	nop
 8118a24:	08125ce4 	.word	0x08125ce4
 8118a28:	0812643c 	.word	0x0812643c
 8118a2c:	08125d94 	.word	0x08125d94
 8118a30:	08126304 	.word	0x08126304
 8118a34:	08128960 	.word	0x08128960
 8118a38:	0811809d 	.word	0x0811809d
 8118a3c:	08118025 	.word	0x08118025
 8118a40:	08126478 	.word	0x08126478

08118a44 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 8118a44:	b580      	push	{r7, lr}
 8118a46:	b082      	sub	sp, #8
 8118a48:	af00      	add	r7, sp, #0
 8118a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8118a4c:	f7f7 f9b8 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 8118a50:	687b      	ldr	r3, [r7, #4]
 8118a52:	2b00      	cmp	r3, #0
 8118a54:	d106      	bne.n	8118a64 <mqtt_disconnect+0x20>
 8118a56:	4b0b      	ldr	r3, [pc, #44]	@ (8118a84 <mqtt_disconnect+0x40>)
 8118a58:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8118a5c:	490a      	ldr	r1, [pc, #40]	@ (8118a88 <mqtt_disconnect+0x44>)
 8118a5e:	480b      	ldr	r0, [pc, #44]	@ (8118a8c <mqtt_disconnect+0x48>)
 8118a60:	f009 f990 	bl	8121d84 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 8118a64:	687b      	ldr	r3, [r7, #4]
 8118a66:	7a9b      	ldrb	r3, [r3, #10]
 8118a68:	2b00      	cmp	r3, #0
 8118a6a:	d006      	beq.n	8118a7a <mqtt_disconnect+0x36>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 8118a6c:	687b      	ldr	r3, [r7, #4]
 8118a6e:	2200      	movs	r2, #0
 8118a70:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 8118a72:	2100      	movs	r1, #0
 8118a74:	6878      	ldr	r0, [r7, #4]
 8118a76:	f7fe fe41 	bl	81176fc <mqtt_close>
  }
}
 8118a7a:	bf00      	nop
 8118a7c:	3708      	adds	r7, #8
 8118a7e:	46bd      	mov	sp, r7
 8118a80:	bd80      	pop	{r7, pc}
 8118a82:	bf00      	nop
 8118a84:	08125ce4 	.word	0x08125ce4
 8118a88:	08126480 	.word	0x08126480
 8118a8c:	08125d94 	.word	0x08125d94

08118a90 <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 8118a90:	b580      	push	{r7, lr}
 8118a92:	b082      	sub	sp, #8
 8118a94:	af00      	add	r7, sp, #0
 8118a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8118a98:	f7f7 f992 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 8118a9c:	687b      	ldr	r3, [r7, #4]
 8118a9e:	2b00      	cmp	r3, #0
 8118aa0:	d106      	bne.n	8118ab0 <mqtt_client_is_connected+0x20>
 8118aa2:	4b09      	ldr	r3, [pc, #36]	@ (8118ac8 <mqtt_client_is_connected+0x38>)
 8118aa4:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8118aa8:	4908      	ldr	r1, [pc, #32]	@ (8118acc <mqtt_client_is_connected+0x3c>)
 8118aaa:	4809      	ldr	r0, [pc, #36]	@ (8118ad0 <mqtt_client_is_connected+0x40>)
 8118aac:	f009 f96a 	bl	8121d84 <iprintf>
  return client->conn_state == MQTT_CONNECTED;
 8118ab0:	687b      	ldr	r3, [r7, #4]
 8118ab2:	7a9b      	ldrb	r3, [r3, #10]
 8118ab4:	2b03      	cmp	r3, #3
 8118ab6:	bf0c      	ite	eq
 8118ab8:	2301      	moveq	r3, #1
 8118aba:	2300      	movne	r3, #0
 8118abc:	b2db      	uxtb	r3, r3
}
 8118abe:	4618      	mov	r0, r3
 8118ac0:	3708      	adds	r7, #8
 8118ac2:	46bd      	mov	sp, r7
 8118ac4:	bd80      	pop	{r7, pc}
 8118ac6:	bf00      	nop
 8118ac8:	08125ce4 	.word	0x08125ce4
 8118acc:	081264a0 	.word	0x081264a0
 8118ad0:	08125d94 	.word	0x08125d94

08118ad4 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8118ad4:	b580      	push	{r7, lr}
 8118ad6:	b082      	sub	sp, #8
 8118ad8:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8118ada:	2006      	movs	r0, #6
 8118adc:	f7fe f996 	bl	8116e0c <memp_malloc>
 8118ae0:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8118ae2:	687b      	ldr	r3, [r7, #4]
 8118ae4:	2b00      	cmp	r3, #0
 8118ae6:	d004      	beq.n	8118af2 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8118ae8:	2210      	movs	r2, #16
 8118aea:	2100      	movs	r1, #0
 8118aec:	6878      	ldr	r0, [r7, #4]
 8118aee:	f009 faef 	bl	81220d0 <memset>
  }
  return buf;
 8118af2:	687b      	ldr	r3, [r7, #4]
}
 8118af4:	4618      	mov	r0, r3
 8118af6:	3708      	adds	r7, #8
 8118af8:	46bd      	mov	sp, r7
 8118afa:	bd80      	pop	{r7, pc}

08118afc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8118afc:	b580      	push	{r7, lr}
 8118afe:	b082      	sub	sp, #8
 8118b00:	af00      	add	r7, sp, #0
 8118b02:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8118b04:	687b      	ldr	r3, [r7, #4]
 8118b06:	2b00      	cmp	r3, #0
 8118b08:	d013      	beq.n	8118b32 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8118b0a:	687b      	ldr	r3, [r7, #4]
 8118b0c:	681b      	ldr	r3, [r3, #0]
 8118b0e:	2b00      	cmp	r3, #0
 8118b10:	d00b      	beq.n	8118b2a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8118b12:	687b      	ldr	r3, [r7, #4]
 8118b14:	681b      	ldr	r3, [r3, #0]
 8118b16:	4618      	mov	r0, r3
 8118b18:	f000 ff28 	bl	811996c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8118b1c:	687b      	ldr	r3, [r7, #4]
 8118b1e:	2200      	movs	r2, #0
 8118b20:	605a      	str	r2, [r3, #4]
 8118b22:	687b      	ldr	r3, [r7, #4]
 8118b24:	685a      	ldr	r2, [r3, #4]
 8118b26:	687b      	ldr	r3, [r7, #4]
 8118b28:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8118b2a:	6879      	ldr	r1, [r7, #4]
 8118b2c:	2006      	movs	r0, #6
 8118b2e:	f7fe f9e3 	bl	8116ef8 <memp_free>
  }
}
 8118b32:	bf00      	nop
 8118b34:	3708      	adds	r7, #8
 8118b36:	46bd      	mov	sp, r7
 8118b38:	bd80      	pop	{r7, pc}
	...

08118b3c <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8118b3c:	b580      	push	{r7, lr}
 8118b3e:	b082      	sub	sp, #8
 8118b40:	af00      	add	r7, sp, #0
 8118b42:	6078      	str	r0, [r7, #4]
 8118b44:	460b      	mov	r3, r1
 8118b46:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8118b48:	687b      	ldr	r3, [r7, #4]
 8118b4a:	2b00      	cmp	r3, #0
 8118b4c:	d107      	bne.n	8118b5e <netbuf_alloc+0x22>
 8118b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8118bc0 <netbuf_alloc+0x84>)
 8118b50:	2268      	movs	r2, #104	@ 0x68
 8118b52:	491c      	ldr	r1, [pc, #112]	@ (8118bc4 <netbuf_alloc+0x88>)
 8118b54:	481c      	ldr	r0, [pc, #112]	@ (8118bc8 <netbuf_alloc+0x8c>)
 8118b56:	f009 f915 	bl	8121d84 <iprintf>
 8118b5a:	2300      	movs	r3, #0
 8118b5c:	e02b      	b.n	8118bb6 <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8118b5e:	687b      	ldr	r3, [r7, #4]
 8118b60:	681b      	ldr	r3, [r3, #0]
 8118b62:	2b00      	cmp	r3, #0
 8118b64:	d004      	beq.n	8118b70 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8118b66:	687b      	ldr	r3, [r7, #4]
 8118b68:	681b      	ldr	r3, [r3, #0]
 8118b6a:	4618      	mov	r0, r3
 8118b6c:	f000 fefe 	bl	811996c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8118b70:	887b      	ldrh	r3, [r7, #2]
 8118b72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8118b76:	4619      	mov	r1, r3
 8118b78:	2036      	movs	r0, #54	@ 0x36
 8118b7a:	f000 fc15 	bl	81193a8 <pbuf_alloc>
 8118b7e:	4602      	mov	r2, r0
 8118b80:	687b      	ldr	r3, [r7, #4]
 8118b82:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8118b84:	687b      	ldr	r3, [r7, #4]
 8118b86:	681b      	ldr	r3, [r3, #0]
 8118b88:	2b00      	cmp	r3, #0
 8118b8a:	d101      	bne.n	8118b90 <netbuf_alloc+0x54>
    return NULL;
 8118b8c:	2300      	movs	r3, #0
 8118b8e:	e012      	b.n	8118bb6 <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8118b90:	687b      	ldr	r3, [r7, #4]
 8118b92:	681b      	ldr	r3, [r3, #0]
 8118b94:	895b      	ldrh	r3, [r3, #10]
 8118b96:	887a      	ldrh	r2, [r7, #2]
 8118b98:	429a      	cmp	r2, r3
 8118b9a:	d905      	bls.n	8118ba8 <netbuf_alloc+0x6c>
 8118b9c:	4b08      	ldr	r3, [pc, #32]	@ (8118bc0 <netbuf_alloc+0x84>)
 8118b9e:	2272      	movs	r2, #114	@ 0x72
 8118ba0:	490a      	ldr	r1, [pc, #40]	@ (8118bcc <netbuf_alloc+0x90>)
 8118ba2:	4809      	ldr	r0, [pc, #36]	@ (8118bc8 <netbuf_alloc+0x8c>)
 8118ba4:	f009 f8ee 	bl	8121d84 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8118ba8:	687b      	ldr	r3, [r7, #4]
 8118baa:	681a      	ldr	r2, [r3, #0]
 8118bac:	687b      	ldr	r3, [r7, #4]
 8118bae:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8118bb0:	687b      	ldr	r3, [r7, #4]
 8118bb2:	681b      	ldr	r3, [r3, #0]
 8118bb4:	685b      	ldr	r3, [r3, #4]
}
 8118bb6:	4618      	mov	r0, r3
 8118bb8:	3708      	adds	r7, #8
 8118bba:	46bd      	mov	sp, r7
 8118bbc:	bd80      	pop	{r7, pc}
 8118bbe:	bf00      	nop
 8118bc0:	081264cc 	.word	0x081264cc
 8118bc4:	08126538 	.word	0x08126538
 8118bc8:	08126554 	.word	0x08126554
 8118bcc:	0812657c 	.word	0x0812657c

08118bd0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8118bd0:	b580      	push	{r7, lr}
 8118bd2:	b084      	sub	sp, #16
 8118bd4:	af00      	add	r7, sp, #0
 8118bd6:	60f8      	str	r0, [r7, #12]
 8118bd8:	60b9      	str	r1, [r7, #8]
 8118bda:	4613      	mov	r3, r2
 8118bdc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8118bde:	68fb      	ldr	r3, [r7, #12]
 8118be0:	2b00      	cmp	r3, #0
 8118be2:	d108      	bne.n	8118bf6 <netbuf_ref+0x26>
 8118be4:	4b1c      	ldr	r3, [pc, #112]	@ (8118c58 <netbuf_ref+0x88>)
 8118be6:	2299      	movs	r2, #153	@ 0x99
 8118be8:	491c      	ldr	r1, [pc, #112]	@ (8118c5c <netbuf_ref+0x8c>)
 8118bea:	481d      	ldr	r0, [pc, #116]	@ (8118c60 <netbuf_ref+0x90>)
 8118bec:	f009 f8ca 	bl	8121d84 <iprintf>
 8118bf0:	f06f 030f 	mvn.w	r3, #15
 8118bf4:	e02b      	b.n	8118c4e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8118bf6:	68fb      	ldr	r3, [r7, #12]
 8118bf8:	681b      	ldr	r3, [r3, #0]
 8118bfa:	2b00      	cmp	r3, #0
 8118bfc:	d004      	beq.n	8118c08 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8118bfe:	68fb      	ldr	r3, [r7, #12]
 8118c00:	681b      	ldr	r3, [r3, #0]
 8118c02:	4618      	mov	r0, r3
 8118c04:	f000 feb2 	bl	811996c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8118c08:	2241      	movs	r2, #65	@ 0x41
 8118c0a:	2100      	movs	r1, #0
 8118c0c:	2036      	movs	r0, #54	@ 0x36
 8118c0e:	f000 fbcb 	bl	81193a8 <pbuf_alloc>
 8118c12:	4602      	mov	r2, r0
 8118c14:	68fb      	ldr	r3, [r7, #12]
 8118c16:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8118c18:	68fb      	ldr	r3, [r7, #12]
 8118c1a:	681b      	ldr	r3, [r3, #0]
 8118c1c:	2b00      	cmp	r3, #0
 8118c1e:	d105      	bne.n	8118c2c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8118c20:	68fb      	ldr	r3, [r7, #12]
 8118c22:	2200      	movs	r2, #0
 8118c24:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8118c26:	f04f 33ff 	mov.w	r3, #4294967295
 8118c2a:	e010      	b.n	8118c4e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8118c2c:	68fb      	ldr	r3, [r7, #12]
 8118c2e:	681b      	ldr	r3, [r3, #0]
 8118c30:	68ba      	ldr	r2, [r7, #8]
 8118c32:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8118c34:	68fb      	ldr	r3, [r7, #12]
 8118c36:	681b      	ldr	r3, [r3, #0]
 8118c38:	88fa      	ldrh	r2, [r7, #6]
 8118c3a:	811a      	strh	r2, [r3, #8]
 8118c3c:	68fa      	ldr	r2, [r7, #12]
 8118c3e:	6812      	ldr	r2, [r2, #0]
 8118c40:	891b      	ldrh	r3, [r3, #8]
 8118c42:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8118c44:	68fb      	ldr	r3, [r7, #12]
 8118c46:	681a      	ldr	r2, [r3, #0]
 8118c48:	68fb      	ldr	r3, [r7, #12]
 8118c4a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8118c4c:	2300      	movs	r3, #0
}
 8118c4e:	4618      	mov	r0, r3
 8118c50:	3710      	adds	r7, #16
 8118c52:	46bd      	mov	sp, r7
 8118c54:	bd80      	pop	{r7, pc}
 8118c56:	bf00      	nop
 8118c58:	081264cc 	.word	0x081264cc
 8118c5c:	081265bc 	.word	0x081265bc
 8118c60:	08126554 	.word	0x08126554

08118c64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8118c64:	b480      	push	{r7}
 8118c66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8118c68:	bf00      	nop
 8118c6a:	46bd      	mov	sp, r7
 8118c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118c70:	4770      	bx	lr
	...

08118c74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8118c74:	b580      	push	{r7, lr}
 8118c76:	b086      	sub	sp, #24
 8118c78:	af00      	add	r7, sp, #0
 8118c7a:	60f8      	str	r0, [r7, #12]
 8118c7c:	60b9      	str	r1, [r7, #8]
 8118c7e:	607a      	str	r2, [r7, #4]
 8118c80:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 8118c82:	f7f7 f89d 	bl	810fdc0 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8118c86:	68fb      	ldr	r3, [r7, #12]
 8118c88:	2b00      	cmp	r3, #0
 8118c8a:	d108      	bne.n	8118c9e <netif_add+0x2a>
 8118c8c:	4b57      	ldr	r3, [pc, #348]	@ (8118dec <netif_add+0x178>)
 8118c8e:	f240 1227 	movw	r2, #295	@ 0x127
 8118c92:	4957      	ldr	r1, [pc, #348]	@ (8118df0 <netif_add+0x17c>)
 8118c94:	4857      	ldr	r0, [pc, #348]	@ (8118df4 <netif_add+0x180>)
 8118c96:	f009 f875 	bl	8121d84 <iprintf>
 8118c9a:	2300      	movs	r3, #0
 8118c9c:	e0a2      	b.n	8118de4 <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8118c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118ca0:	2b00      	cmp	r3, #0
 8118ca2:	d108      	bne.n	8118cb6 <netif_add+0x42>
 8118ca4:	4b51      	ldr	r3, [pc, #324]	@ (8118dec <netif_add+0x178>)
 8118ca6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8118caa:	4953      	ldr	r1, [pc, #332]	@ (8118df8 <netif_add+0x184>)
 8118cac:	4851      	ldr	r0, [pc, #324]	@ (8118df4 <netif_add+0x180>)
 8118cae:	f009 f869 	bl	8121d84 <iprintf>
 8118cb2:	2300      	movs	r3, #0
 8118cb4:	e096      	b.n	8118de4 <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8118cb6:	68bb      	ldr	r3, [r7, #8]
 8118cb8:	2b00      	cmp	r3, #0
 8118cba:	d101      	bne.n	8118cc0 <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8118cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8118dfc <netif_add+0x188>)
 8118cbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8118cc0:	687b      	ldr	r3, [r7, #4]
 8118cc2:	2b00      	cmp	r3, #0
 8118cc4:	d101      	bne.n	8118cca <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8118cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8118dfc <netif_add+0x188>)
 8118cc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8118cca:	683b      	ldr	r3, [r7, #0]
 8118ccc:	2b00      	cmp	r3, #0
 8118cce:	d101      	bne.n	8118cd4 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8118cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8118dfc <netif_add+0x188>)
 8118cd2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8118cd4:	68fb      	ldr	r3, [r7, #12]
 8118cd6:	2200      	movs	r2, #0
 8118cd8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8118cda:	68fb      	ldr	r3, [r7, #12]
 8118cdc:	2200      	movs	r2, #0
 8118cde:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8118ce0:	68fb      	ldr	r3, [r7, #12]
 8118ce2:	2200      	movs	r2, #0
 8118ce4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8118ce6:	68fb      	ldr	r3, [r7, #12]
 8118ce8:	4a45      	ldr	r2, [pc, #276]	@ (8118e00 <netif_add+0x18c>)
 8118cea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8118cec:	68fb      	ldr	r3, [r7, #12]
 8118cee:	2200      	movs	r2, #0
 8118cf0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8118cf2:	68fb      	ldr	r3, [r7, #12]
 8118cf4:	2200      	movs	r2, #0
 8118cf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8118cfa:	68fb      	ldr	r3, [r7, #12]
 8118cfc:	2200      	movs	r2, #0
 8118cfe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8118d00:	68fb      	ldr	r3, [r7, #12]
 8118d02:	6a3a      	ldr	r2, [r7, #32]
 8118d04:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8118d06:	4b3f      	ldr	r3, [pc, #252]	@ (8118e04 <netif_add+0x190>)
 8118d08:	781a      	ldrb	r2, [r3, #0]
 8118d0a:	68fb      	ldr	r3, [r7, #12]
 8118d0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8118d10:	68fb      	ldr	r3, [r7, #12]
 8118d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8118d14:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8118d16:	683b      	ldr	r3, [r7, #0]
 8118d18:	687a      	ldr	r2, [r7, #4]
 8118d1a:	68b9      	ldr	r1, [r7, #8]
 8118d1c:	68f8      	ldr	r0, [r7, #12]
 8118d1e:	f000 f913 	bl	8118f48 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8118d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118d24:	68f8      	ldr	r0, [r7, #12]
 8118d26:	4798      	blx	r3
 8118d28:	4603      	mov	r3, r0
 8118d2a:	2b00      	cmp	r3, #0
 8118d2c:	d001      	beq.n	8118d32 <netif_add+0xbe>
    return NULL;
 8118d2e:	2300      	movs	r3, #0
 8118d30:	e058      	b.n	8118de4 <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8118d32:	68fb      	ldr	r3, [r7, #12]
 8118d34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118d38:	2bff      	cmp	r3, #255	@ 0xff
 8118d3a:	d103      	bne.n	8118d44 <netif_add+0xd0>
        netif->num = 0;
 8118d3c:	68fb      	ldr	r3, [r7, #12]
 8118d3e:	2200      	movs	r2, #0
 8118d40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8118d44:	2300      	movs	r3, #0
 8118d46:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8118d48:	4b2f      	ldr	r3, [pc, #188]	@ (8118e08 <netif_add+0x194>)
 8118d4a:	681b      	ldr	r3, [r3, #0]
 8118d4c:	617b      	str	r3, [r7, #20]
 8118d4e:	e02b      	b.n	8118da8 <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8118d50:	697a      	ldr	r2, [r7, #20]
 8118d52:	68fb      	ldr	r3, [r7, #12]
 8118d54:	429a      	cmp	r2, r3
 8118d56:	d106      	bne.n	8118d66 <netif_add+0xf2>
 8118d58:	4b24      	ldr	r3, [pc, #144]	@ (8118dec <netif_add+0x178>)
 8118d5a:	f240 128b 	movw	r2, #395	@ 0x18b
 8118d5e:	492b      	ldr	r1, [pc, #172]	@ (8118e0c <netif_add+0x198>)
 8118d60:	4824      	ldr	r0, [pc, #144]	@ (8118df4 <netif_add+0x180>)
 8118d62:	f009 f80f 	bl	8121d84 <iprintf>
        num_netifs++;
 8118d66:	693b      	ldr	r3, [r7, #16]
 8118d68:	3301      	adds	r3, #1
 8118d6a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8118d6c:	693b      	ldr	r3, [r7, #16]
 8118d6e:	2bff      	cmp	r3, #255	@ 0xff
 8118d70:	dd06      	ble.n	8118d80 <netif_add+0x10c>
 8118d72:	4b1e      	ldr	r3, [pc, #120]	@ (8118dec <netif_add+0x178>)
 8118d74:	f240 128d 	movw	r2, #397	@ 0x18d
 8118d78:	4925      	ldr	r1, [pc, #148]	@ (8118e10 <netif_add+0x19c>)
 8118d7a:	481e      	ldr	r0, [pc, #120]	@ (8118df4 <netif_add+0x180>)
 8118d7c:	f009 f802 	bl	8121d84 <iprintf>
        if (netif2->num == netif->num) {
 8118d80:	697b      	ldr	r3, [r7, #20]
 8118d82:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8118d86:	68fb      	ldr	r3, [r7, #12]
 8118d88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118d8c:	429a      	cmp	r2, r3
 8118d8e:	d108      	bne.n	8118da2 <netif_add+0x12e>
          netif->num++;
 8118d90:	68fb      	ldr	r3, [r7, #12]
 8118d92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118d96:	3301      	adds	r3, #1
 8118d98:	b2da      	uxtb	r2, r3
 8118d9a:	68fb      	ldr	r3, [r7, #12]
 8118d9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8118da0:	e005      	b.n	8118dae <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8118da2:	697b      	ldr	r3, [r7, #20]
 8118da4:	681b      	ldr	r3, [r3, #0]
 8118da6:	617b      	str	r3, [r7, #20]
 8118da8:	697b      	ldr	r3, [r7, #20]
 8118daa:	2b00      	cmp	r3, #0
 8118dac:	d1d0      	bne.n	8118d50 <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 8118dae:	697b      	ldr	r3, [r7, #20]
 8118db0:	2b00      	cmp	r3, #0
 8118db2:	d1be      	bne.n	8118d32 <netif_add+0xbe>
  }
  if (netif->num == 254) {
 8118db4:	68fb      	ldr	r3, [r7, #12]
 8118db6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118dba:	2bfe      	cmp	r3, #254	@ 0xfe
 8118dbc:	d103      	bne.n	8118dc6 <netif_add+0x152>
    netif_num = 0;
 8118dbe:	4b11      	ldr	r3, [pc, #68]	@ (8118e04 <netif_add+0x190>)
 8118dc0:	2200      	movs	r2, #0
 8118dc2:	701a      	strb	r2, [r3, #0]
 8118dc4:	e006      	b.n	8118dd4 <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8118dc6:	68fb      	ldr	r3, [r7, #12]
 8118dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118dcc:	3301      	adds	r3, #1
 8118dce:	b2da      	uxtb	r2, r3
 8118dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8118e04 <netif_add+0x190>)
 8118dd2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8118dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8118e08 <netif_add+0x194>)
 8118dd6:	681a      	ldr	r2, [r3, #0]
 8118dd8:	68fb      	ldr	r3, [r7, #12]
 8118dda:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8118ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8118e08 <netif_add+0x194>)
 8118dde:	68fb      	ldr	r3, [r7, #12]
 8118de0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8118de2:	68fb      	ldr	r3, [r7, #12]
}
 8118de4:	4618      	mov	r0, r3
 8118de6:	3718      	adds	r7, #24
 8118de8:	46bd      	mov	sp, r7
 8118dea:	bd80      	pop	{r7, pc}
 8118dec:	0812669c 	.word	0x0812669c
 8118df0:	08126768 	.word	0x08126768
 8118df4:	08126724 	.word	0x08126724
 8118df8:	08126784 	.word	0x08126784
 8118dfc:	08128960 	.word	0x08128960
 8118e00:	08119237 	.word	0x08119237
 8118e04:	24012698 	.word	0x24012698
 8118e08:	24012690 	.word	0x24012690
 8118e0c:	081267a8 	.word	0x081267a8
 8118e10:	081267bc 	.word	0x081267bc

08118e14 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8118e14:	b580      	push	{r7, lr}
 8118e16:	b082      	sub	sp, #8
 8118e18:	af00      	add	r7, sp, #0
 8118e1a:	6078      	str	r0, [r7, #4]
 8118e1c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8118e1e:	6839      	ldr	r1, [r7, #0]
 8118e20:	6878      	ldr	r0, [r7, #4]
 8118e22:	f002 ffad 	bl	811bd80 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8118e26:	6839      	ldr	r1, [r7, #0]
 8118e28:	6878      	ldr	r0, [r7, #4]
 8118e2a:	f008 f9bd 	bl	81211a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8118e2e:	bf00      	nop
 8118e30:	3708      	adds	r7, #8
 8118e32:	46bd      	mov	sp, r7
 8118e34:	bd80      	pop	{r7, pc}
	...

08118e38 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8118e38:	b580      	push	{r7, lr}
 8118e3a:	b086      	sub	sp, #24
 8118e3c:	af00      	add	r7, sp, #0
 8118e3e:	60f8      	str	r0, [r7, #12]
 8118e40:	60b9      	str	r1, [r7, #8]
 8118e42:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8118e44:	68bb      	ldr	r3, [r7, #8]
 8118e46:	2b00      	cmp	r3, #0
 8118e48:	d106      	bne.n	8118e58 <netif_do_set_ipaddr+0x20>
 8118e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8118ec0 <netif_do_set_ipaddr+0x88>)
 8118e4c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8118e50:	491c      	ldr	r1, [pc, #112]	@ (8118ec4 <netif_do_set_ipaddr+0x8c>)
 8118e52:	481d      	ldr	r0, [pc, #116]	@ (8118ec8 <netif_do_set_ipaddr+0x90>)
 8118e54:	f008 ff96 	bl	8121d84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8118e58:	687b      	ldr	r3, [r7, #4]
 8118e5a:	2b00      	cmp	r3, #0
 8118e5c:	d106      	bne.n	8118e6c <netif_do_set_ipaddr+0x34>
 8118e5e:	4b18      	ldr	r3, [pc, #96]	@ (8118ec0 <netif_do_set_ipaddr+0x88>)
 8118e60:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8118e64:	4917      	ldr	r1, [pc, #92]	@ (8118ec4 <netif_do_set_ipaddr+0x8c>)
 8118e66:	4818      	ldr	r0, [pc, #96]	@ (8118ec8 <netif_do_set_ipaddr+0x90>)
 8118e68:	f008 ff8c 	bl	8121d84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8118e6c:	68bb      	ldr	r3, [r7, #8]
 8118e6e:	681a      	ldr	r2, [r3, #0]
 8118e70:	68fb      	ldr	r3, [r7, #12]
 8118e72:	3304      	adds	r3, #4
 8118e74:	681b      	ldr	r3, [r3, #0]
 8118e76:	429a      	cmp	r2, r3
 8118e78:	d01c      	beq.n	8118eb4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8118e7a:	68bb      	ldr	r3, [r7, #8]
 8118e7c:	681b      	ldr	r3, [r3, #0]
 8118e7e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8118e80:	68fb      	ldr	r3, [r7, #12]
 8118e82:	3304      	adds	r3, #4
 8118e84:	681a      	ldr	r2, [r3, #0]
 8118e86:	687b      	ldr	r3, [r7, #4]
 8118e88:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8118e8a:	f107 0314 	add.w	r3, r7, #20
 8118e8e:	4619      	mov	r1, r3
 8118e90:	6878      	ldr	r0, [r7, #4]
 8118e92:	f7ff ffbf 	bl	8118e14 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8118e96:	68bb      	ldr	r3, [r7, #8]
 8118e98:	2b00      	cmp	r3, #0
 8118e9a:	d002      	beq.n	8118ea2 <netif_do_set_ipaddr+0x6a>
 8118e9c:	68bb      	ldr	r3, [r7, #8]
 8118e9e:	681b      	ldr	r3, [r3, #0]
 8118ea0:	e000      	b.n	8118ea4 <netif_do_set_ipaddr+0x6c>
 8118ea2:	2300      	movs	r3, #0
 8118ea4:	68fa      	ldr	r2, [r7, #12]
 8118ea6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8118ea8:	2101      	movs	r1, #1
 8118eaa:	68f8      	ldr	r0, [r7, #12]
 8118eac:	f000 f8d6 	bl	811905c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8118eb0:	2301      	movs	r3, #1
 8118eb2:	e000      	b.n	8118eb6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8118eb4:	2300      	movs	r3, #0
}
 8118eb6:	4618      	mov	r0, r3
 8118eb8:	3718      	adds	r7, #24
 8118eba:	46bd      	mov	sp, r7
 8118ebc:	bd80      	pop	{r7, pc}
 8118ebe:	bf00      	nop
 8118ec0:	0812669c 	.word	0x0812669c
 8118ec4:	081267ec 	.word	0x081267ec
 8118ec8:	08126724 	.word	0x08126724

08118ecc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8118ecc:	b480      	push	{r7}
 8118ece:	b085      	sub	sp, #20
 8118ed0:	af00      	add	r7, sp, #0
 8118ed2:	60f8      	str	r0, [r7, #12]
 8118ed4:	60b9      	str	r1, [r7, #8]
 8118ed6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8118ed8:	68bb      	ldr	r3, [r7, #8]
 8118eda:	681a      	ldr	r2, [r3, #0]
 8118edc:	68fb      	ldr	r3, [r7, #12]
 8118ede:	3308      	adds	r3, #8
 8118ee0:	681b      	ldr	r3, [r3, #0]
 8118ee2:	429a      	cmp	r2, r3
 8118ee4:	d00a      	beq.n	8118efc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8118ee6:	68bb      	ldr	r3, [r7, #8]
 8118ee8:	2b00      	cmp	r3, #0
 8118eea:	d002      	beq.n	8118ef2 <netif_do_set_netmask+0x26>
 8118eec:	68bb      	ldr	r3, [r7, #8]
 8118eee:	681b      	ldr	r3, [r3, #0]
 8118ef0:	e000      	b.n	8118ef4 <netif_do_set_netmask+0x28>
 8118ef2:	2300      	movs	r3, #0
 8118ef4:	68fa      	ldr	r2, [r7, #12]
 8118ef6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8118ef8:	2301      	movs	r3, #1
 8118efa:	e000      	b.n	8118efe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8118efc:	2300      	movs	r3, #0
}
 8118efe:	4618      	mov	r0, r3
 8118f00:	3714      	adds	r7, #20
 8118f02:	46bd      	mov	sp, r7
 8118f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118f08:	4770      	bx	lr

08118f0a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8118f0a:	b480      	push	{r7}
 8118f0c:	b085      	sub	sp, #20
 8118f0e:	af00      	add	r7, sp, #0
 8118f10:	60f8      	str	r0, [r7, #12]
 8118f12:	60b9      	str	r1, [r7, #8]
 8118f14:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8118f16:	68bb      	ldr	r3, [r7, #8]
 8118f18:	681a      	ldr	r2, [r3, #0]
 8118f1a:	68fb      	ldr	r3, [r7, #12]
 8118f1c:	330c      	adds	r3, #12
 8118f1e:	681b      	ldr	r3, [r3, #0]
 8118f20:	429a      	cmp	r2, r3
 8118f22:	d00a      	beq.n	8118f3a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8118f24:	68bb      	ldr	r3, [r7, #8]
 8118f26:	2b00      	cmp	r3, #0
 8118f28:	d002      	beq.n	8118f30 <netif_do_set_gw+0x26>
 8118f2a:	68bb      	ldr	r3, [r7, #8]
 8118f2c:	681b      	ldr	r3, [r3, #0]
 8118f2e:	e000      	b.n	8118f32 <netif_do_set_gw+0x28>
 8118f30:	2300      	movs	r3, #0
 8118f32:	68fa      	ldr	r2, [r7, #12]
 8118f34:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8118f36:	2301      	movs	r3, #1
 8118f38:	e000      	b.n	8118f3c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8118f3a:	2300      	movs	r3, #0
}
 8118f3c:	4618      	mov	r0, r3
 8118f3e:	3714      	adds	r7, #20
 8118f40:	46bd      	mov	sp, r7
 8118f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118f46:	4770      	bx	lr

08118f48 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8118f48:	b580      	push	{r7, lr}
 8118f4a:	b088      	sub	sp, #32
 8118f4c:	af00      	add	r7, sp, #0
 8118f4e:	60f8      	str	r0, [r7, #12]
 8118f50:	60b9      	str	r1, [r7, #8]
 8118f52:	607a      	str	r2, [r7, #4]
 8118f54:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8118f56:	2300      	movs	r3, #0
 8118f58:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8118f5a:	2300      	movs	r3, #0
 8118f5c:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 8118f5e:	f7f6 ff2f 	bl	810fdc0 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8118f62:	68bb      	ldr	r3, [r7, #8]
 8118f64:	2b00      	cmp	r3, #0
 8118f66:	d101      	bne.n	8118f6c <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 8118f68:	4b1c      	ldr	r3, [pc, #112]	@ (8118fdc <netif_set_addr+0x94>)
 8118f6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8118f6c:	687b      	ldr	r3, [r7, #4]
 8118f6e:	2b00      	cmp	r3, #0
 8118f70:	d101      	bne.n	8118f76 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 8118f72:	4b1a      	ldr	r3, [pc, #104]	@ (8118fdc <netif_set_addr+0x94>)
 8118f74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8118f76:	683b      	ldr	r3, [r7, #0]
 8118f78:	2b00      	cmp	r3, #0
 8118f7a:	d101      	bne.n	8118f80 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 8118f7c:	4b17      	ldr	r3, [pc, #92]	@ (8118fdc <netif_set_addr+0x94>)
 8118f7e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8118f80:	68bb      	ldr	r3, [r7, #8]
 8118f82:	2b00      	cmp	r3, #0
 8118f84:	d003      	beq.n	8118f8e <netif_set_addr+0x46>
 8118f86:	68bb      	ldr	r3, [r7, #8]
 8118f88:	681b      	ldr	r3, [r3, #0]
 8118f8a:	2b00      	cmp	r3, #0
 8118f8c:	d101      	bne.n	8118f92 <netif_set_addr+0x4a>
 8118f8e:	2301      	movs	r3, #1
 8118f90:	e000      	b.n	8118f94 <netif_set_addr+0x4c>
 8118f92:	2300      	movs	r3, #0
 8118f94:	617b      	str	r3, [r7, #20]
  if (remove) {
 8118f96:	697b      	ldr	r3, [r7, #20]
 8118f98:	2b00      	cmp	r3, #0
 8118f9a:	d006      	beq.n	8118faa <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8118f9c:	f107 0310 	add.w	r3, r7, #16
 8118fa0:	461a      	mov	r2, r3
 8118fa2:	68b9      	ldr	r1, [r7, #8]
 8118fa4:	68f8      	ldr	r0, [r7, #12]
 8118fa6:	f7ff ff47 	bl	8118e38 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8118faa:	69fa      	ldr	r2, [r7, #28]
 8118fac:	6879      	ldr	r1, [r7, #4]
 8118fae:	68f8      	ldr	r0, [r7, #12]
 8118fb0:	f7ff ff8c 	bl	8118ecc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8118fb4:	69ba      	ldr	r2, [r7, #24]
 8118fb6:	6839      	ldr	r1, [r7, #0]
 8118fb8:	68f8      	ldr	r0, [r7, #12]
 8118fba:	f7ff ffa6 	bl	8118f0a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8118fbe:	697b      	ldr	r3, [r7, #20]
 8118fc0:	2b00      	cmp	r3, #0
 8118fc2:	d106      	bne.n	8118fd2 <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8118fc4:	f107 0310 	add.w	r3, r7, #16
 8118fc8:	461a      	mov	r2, r3
 8118fca:	68b9      	ldr	r1, [r7, #8]
 8118fcc:	68f8      	ldr	r0, [r7, #12]
 8118fce:	f7ff ff33 	bl	8118e38 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8118fd2:	bf00      	nop
 8118fd4:	3720      	adds	r7, #32
 8118fd6:	46bd      	mov	sp, r7
 8118fd8:	bd80      	pop	{r7, pc}
 8118fda:	bf00      	nop
 8118fdc:	08128960 	.word	0x08128960

08118fe0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8118fe0:	b580      	push	{r7, lr}
 8118fe2:	b082      	sub	sp, #8
 8118fe4:	af00      	add	r7, sp, #0
 8118fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8118fe8:	f7f6 feea 	bl	810fdc0 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8118fec:	4a03      	ldr	r2, [pc, #12]	@ (8118ffc <netif_set_default+0x1c>)
 8118fee:	687b      	ldr	r3, [r7, #4]
 8118ff0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8118ff2:	bf00      	nop
 8118ff4:	3708      	adds	r7, #8
 8118ff6:	46bd      	mov	sp, r7
 8118ff8:	bd80      	pop	{r7, pc}
 8118ffa:	bf00      	nop
 8118ffc:	24012694 	.word	0x24012694

08119000 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8119000:	b580      	push	{r7, lr}
 8119002:	b082      	sub	sp, #8
 8119004:	af00      	add	r7, sp, #0
 8119006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8119008:	f7f6 feda 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 811900c:	687b      	ldr	r3, [r7, #4]
 811900e:	2b00      	cmp	r3, #0
 8119010:	d107      	bne.n	8119022 <netif_set_up+0x22>
 8119012:	4b0f      	ldr	r3, [pc, #60]	@ (8119050 <netif_set_up+0x50>)
 8119014:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8119018:	490e      	ldr	r1, [pc, #56]	@ (8119054 <netif_set_up+0x54>)
 811901a:	480f      	ldr	r0, [pc, #60]	@ (8119058 <netif_set_up+0x58>)
 811901c:	f008 feb2 	bl	8121d84 <iprintf>
 8119020:	e013      	b.n	811904a <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8119022:	687b      	ldr	r3, [r7, #4]
 8119024:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119028:	f003 0301 	and.w	r3, r3, #1
 811902c:	2b00      	cmp	r3, #0
 811902e:	d10c      	bne.n	811904a <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8119030:	687b      	ldr	r3, [r7, #4]
 8119032:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119036:	f043 0301 	orr.w	r3, r3, #1
 811903a:	b2da      	uxtb	r2, r3
 811903c:	687b      	ldr	r3, [r7, #4]
 811903e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8119042:	2103      	movs	r1, #3
 8119044:	6878      	ldr	r0, [r7, #4]
 8119046:	f000 f809 	bl	811905c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 811904a:	3708      	adds	r7, #8
 811904c:	46bd      	mov	sp, r7
 811904e:	bd80      	pop	{r7, pc}
 8119050:	0812669c 	.word	0x0812669c
 8119054:	0812685c 	.word	0x0812685c
 8119058:	08126724 	.word	0x08126724

0811905c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 811905c:	b580      	push	{r7, lr}
 811905e:	b082      	sub	sp, #8
 8119060:	af00      	add	r7, sp, #0
 8119062:	6078      	str	r0, [r7, #4]
 8119064:	460b      	mov	r3, r1
 8119066:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8119068:	687b      	ldr	r3, [r7, #4]
 811906a:	2b00      	cmp	r3, #0
 811906c:	d106      	bne.n	811907c <netif_issue_reports+0x20>
 811906e:	4b18      	ldr	r3, [pc, #96]	@ (81190d0 <netif_issue_reports+0x74>)
 8119070:	f240 326d 	movw	r2, #877	@ 0x36d
 8119074:	4917      	ldr	r1, [pc, #92]	@ (81190d4 <netif_issue_reports+0x78>)
 8119076:	4818      	ldr	r0, [pc, #96]	@ (81190d8 <netif_issue_reports+0x7c>)
 8119078:	f008 fe84 	bl	8121d84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 811907c:	687b      	ldr	r3, [r7, #4]
 811907e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119082:	f003 0304 	and.w	r3, r3, #4
 8119086:	2b00      	cmp	r3, #0
 8119088:	d01e      	beq.n	81190c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 811908a:	687b      	ldr	r3, [r7, #4]
 811908c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119090:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8119094:	2b00      	cmp	r3, #0
 8119096:	d017      	beq.n	81190c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8119098:	78fb      	ldrb	r3, [r7, #3]
 811909a:	f003 0301 	and.w	r3, r3, #1
 811909e:	2b00      	cmp	r3, #0
 81190a0:	d013      	beq.n	81190ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81190a2:	687b      	ldr	r3, [r7, #4]
 81190a4:	3304      	adds	r3, #4
 81190a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 81190a8:	2b00      	cmp	r3, #0
 81190aa:	d00e      	beq.n	81190ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 81190ac:	687b      	ldr	r3, [r7, #4]
 81190ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81190b2:	f003 0308 	and.w	r3, r3, #8
 81190b6:	2b00      	cmp	r3, #0
 81190b8:	d007      	beq.n	81190ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 81190ba:	687b      	ldr	r3, [r7, #4]
 81190bc:	3304      	adds	r3, #4
 81190be:	4619      	mov	r1, r3
 81190c0:	6878      	ldr	r0, [r7, #4]
 81190c2:	f7fb fd7f 	bl	8114bc4 <etharp_request>
 81190c6:	e000      	b.n	81190ca <netif_issue_reports+0x6e>
    return;
 81190c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 81190ca:	3708      	adds	r7, #8
 81190cc:	46bd      	mov	sp, r7
 81190ce:	bd80      	pop	{r7, pc}
 81190d0:	0812669c 	.word	0x0812669c
 81190d4:	08126878 	.word	0x08126878
 81190d8:	08126724 	.word	0x08126724

081190dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 81190dc:	b580      	push	{r7, lr}
 81190de:	b082      	sub	sp, #8
 81190e0:	af00      	add	r7, sp, #0
 81190e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 81190e4:	f7f6 fe6c 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 81190e8:	687b      	ldr	r3, [r7, #4]
 81190ea:	2b00      	cmp	r3, #0
 81190ec:	d107      	bne.n	81190fe <netif_set_down+0x22>
 81190ee:	4b12      	ldr	r3, [pc, #72]	@ (8119138 <netif_set_down+0x5c>)
 81190f0:	f240 329b 	movw	r2, #923	@ 0x39b
 81190f4:	4911      	ldr	r1, [pc, #68]	@ (811913c <netif_set_down+0x60>)
 81190f6:	4812      	ldr	r0, [pc, #72]	@ (8119140 <netif_set_down+0x64>)
 81190f8:	f008 fe44 	bl	8121d84 <iprintf>
 81190fc:	e019      	b.n	8119132 <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 81190fe:	687b      	ldr	r3, [r7, #4]
 8119100:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119104:	f003 0301 	and.w	r3, r3, #1
 8119108:	2b00      	cmp	r3, #0
 811910a:	d012      	beq.n	8119132 <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 811910c:	687b      	ldr	r3, [r7, #4]
 811910e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119112:	f023 0301 	bic.w	r3, r3, #1
 8119116:	b2da      	uxtb	r2, r3
 8119118:	687b      	ldr	r3, [r7, #4]
 811911a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 811911e:	687b      	ldr	r3, [r7, #4]
 8119120:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8119124:	f003 0308 	and.w	r3, r3, #8
 8119128:	2b00      	cmp	r3, #0
 811912a:	d002      	beq.n	8119132 <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 811912c:	6878      	ldr	r0, [r7, #4]
 811912e:	f7fb f903 	bl	8114338 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8119132:	3708      	adds	r7, #8
 8119134:	46bd      	mov	sp, r7
 8119136:	bd80      	pop	{r7, pc}
 8119138:	0812669c 	.word	0x0812669c
 811913c:	0812689c 	.word	0x0812689c
 8119140:	08126724 	.word	0x08126724

08119144 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8119144:	b580      	push	{r7, lr}
 8119146:	b082      	sub	sp, #8
 8119148:	af00      	add	r7, sp, #0
 811914a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 811914c:	f7f6 fe38 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8119150:	687b      	ldr	r3, [r7, #4]
 8119152:	2b00      	cmp	r3, #0
 8119154:	d107      	bne.n	8119166 <netif_set_link_up+0x22>
 8119156:	4b13      	ldr	r3, [pc, #76]	@ (81191a4 <netif_set_link_up+0x60>)
 8119158:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 811915c:	4912      	ldr	r1, [pc, #72]	@ (81191a8 <netif_set_link_up+0x64>)
 811915e:	4813      	ldr	r0, [pc, #76]	@ (81191ac <netif_set_link_up+0x68>)
 8119160:	f008 fe10 	bl	8121d84 <iprintf>
 8119164:	e01b      	b.n	811919e <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8119166:	687b      	ldr	r3, [r7, #4]
 8119168:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811916c:	f003 0304 	and.w	r3, r3, #4
 8119170:	2b00      	cmp	r3, #0
 8119172:	d114      	bne.n	811919e <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8119174:	687b      	ldr	r3, [r7, #4]
 8119176:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811917a:	f043 0304 	orr.w	r3, r3, #4
 811917e:	b2da      	uxtb	r2, r3
 8119180:	687b      	ldr	r3, [r7, #4]
 8119182:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8119186:	2103      	movs	r1, #3
 8119188:	6878      	ldr	r0, [r7, #4]
 811918a:	f7ff ff67 	bl	811905c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 811918e:	687b      	ldr	r3, [r7, #4]
 8119190:	69db      	ldr	r3, [r3, #28]
 8119192:	2b00      	cmp	r3, #0
 8119194:	d003      	beq.n	811919e <netif_set_link_up+0x5a>
 8119196:	687b      	ldr	r3, [r7, #4]
 8119198:	69db      	ldr	r3, [r3, #28]
 811919a:	6878      	ldr	r0, [r7, #4]
 811919c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811919e:	3708      	adds	r7, #8
 81191a0:	46bd      	mov	sp, r7
 81191a2:	bd80      	pop	{r7, pc}
 81191a4:	0812669c 	.word	0x0812669c
 81191a8:	081268bc 	.word	0x081268bc
 81191ac:	08126724 	.word	0x08126724

081191b0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 81191b0:	b580      	push	{r7, lr}
 81191b2:	b082      	sub	sp, #8
 81191b4:	af00      	add	r7, sp, #0
 81191b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 81191b8:	f7f6 fe02 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 81191bc:	687b      	ldr	r3, [r7, #4]
 81191be:	2b00      	cmp	r3, #0
 81191c0:	d107      	bne.n	81191d2 <netif_set_link_down+0x22>
 81191c2:	4b11      	ldr	r3, [pc, #68]	@ (8119208 <netif_set_link_down+0x58>)
 81191c4:	f240 4206 	movw	r2, #1030	@ 0x406
 81191c8:	4910      	ldr	r1, [pc, #64]	@ (811920c <netif_set_link_down+0x5c>)
 81191ca:	4811      	ldr	r0, [pc, #68]	@ (8119210 <netif_set_link_down+0x60>)
 81191cc:	f008 fdda 	bl	8121d84 <iprintf>
 81191d0:	e017      	b.n	8119202 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 81191d2:	687b      	ldr	r3, [r7, #4]
 81191d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81191d8:	f003 0304 	and.w	r3, r3, #4
 81191dc:	2b00      	cmp	r3, #0
 81191de:	d010      	beq.n	8119202 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 81191e0:	687b      	ldr	r3, [r7, #4]
 81191e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81191e6:	f023 0304 	bic.w	r3, r3, #4
 81191ea:	b2da      	uxtb	r2, r3
 81191ec:	687b      	ldr	r3, [r7, #4]
 81191ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 81191f2:	687b      	ldr	r3, [r7, #4]
 81191f4:	69db      	ldr	r3, [r3, #28]
 81191f6:	2b00      	cmp	r3, #0
 81191f8:	d003      	beq.n	8119202 <netif_set_link_down+0x52>
 81191fa:	687b      	ldr	r3, [r7, #4]
 81191fc:	69db      	ldr	r3, [r3, #28]
 81191fe:	6878      	ldr	r0, [r7, #4]
 8119200:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8119202:	3708      	adds	r7, #8
 8119204:	46bd      	mov	sp, r7
 8119206:	bd80      	pop	{r7, pc}
 8119208:	0812669c 	.word	0x0812669c
 811920c:	081268e0 	.word	0x081268e0
 8119210:	08126724 	.word	0x08126724

08119214 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8119214:	b580      	push	{r7, lr}
 8119216:	b082      	sub	sp, #8
 8119218:	af00      	add	r7, sp, #0
 811921a:	6078      	str	r0, [r7, #4]
 811921c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 811921e:	f7f6 fdcf 	bl	810fdc0 <sys_check_core_locking>

  if (netif) {
 8119222:	687b      	ldr	r3, [r7, #4]
 8119224:	2b00      	cmp	r3, #0
 8119226:	d002      	beq.n	811922e <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 8119228:	687b      	ldr	r3, [r7, #4]
 811922a:	683a      	ldr	r2, [r7, #0]
 811922c:	61da      	str	r2, [r3, #28]
  }
}
 811922e:	bf00      	nop
 8119230:	3708      	adds	r7, #8
 8119232:	46bd      	mov	sp, r7
 8119234:	bd80      	pop	{r7, pc}

08119236 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8119236:	b480      	push	{r7}
 8119238:	b085      	sub	sp, #20
 811923a:	af00      	add	r7, sp, #0
 811923c:	60f8      	str	r0, [r7, #12]
 811923e:	60b9      	str	r1, [r7, #8]
 8119240:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8119242:	f06f 030b 	mvn.w	r3, #11
}
 8119246:	4618      	mov	r0, r3
 8119248:	3714      	adds	r7, #20
 811924a:	46bd      	mov	sp, r7
 811924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119250:	4770      	bx	lr
	...

08119254 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8119254:	b580      	push	{r7, lr}
 8119256:	b084      	sub	sp, #16
 8119258:	af00      	add	r7, sp, #0
 811925a:	4603      	mov	r3, r0
 811925c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 811925e:	f7f6 fdaf 	bl	810fdc0 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8119262:	79fb      	ldrb	r3, [r7, #7]
 8119264:	2b00      	cmp	r3, #0
 8119266:	d013      	beq.n	8119290 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 8119268:	4b0c      	ldr	r3, [pc, #48]	@ (811929c <netif_get_by_index+0x48>)
 811926a:	681b      	ldr	r3, [r3, #0]
 811926c:	60fb      	str	r3, [r7, #12]
 811926e:	e00c      	b.n	811928a <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 8119270:	68fb      	ldr	r3, [r7, #12]
 8119272:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8119276:	3301      	adds	r3, #1
 8119278:	b2db      	uxtb	r3, r3
 811927a:	79fa      	ldrb	r2, [r7, #7]
 811927c:	429a      	cmp	r2, r3
 811927e:	d101      	bne.n	8119284 <netif_get_by_index+0x30>
        return netif; /* found! */
 8119280:	68fb      	ldr	r3, [r7, #12]
 8119282:	e006      	b.n	8119292 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 8119284:	68fb      	ldr	r3, [r7, #12]
 8119286:	681b      	ldr	r3, [r3, #0]
 8119288:	60fb      	str	r3, [r7, #12]
 811928a:	68fb      	ldr	r3, [r7, #12]
 811928c:	2b00      	cmp	r3, #0
 811928e:	d1ef      	bne.n	8119270 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 8119290:	2300      	movs	r3, #0
}
 8119292:	4618      	mov	r0, r3
 8119294:	3710      	adds	r7, #16
 8119296:	46bd      	mov	sp, r7
 8119298:	bd80      	pop	{r7, pc}
 811929a:	bf00      	nop
 811929c:	24012690 	.word	0x24012690

081192a0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 81192a0:	b580      	push	{r7, lr}
 81192a2:	b082      	sub	sp, #8
 81192a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 81192a6:	f000 ff43 	bl	811a130 <sys_arch_protect>
 81192aa:	6038      	str	r0, [r7, #0]
 81192ac:	4b0d      	ldr	r3, [pc, #52]	@ (81192e4 <pbuf_free_ooseq+0x44>)
 81192ae:	2200      	movs	r2, #0
 81192b0:	701a      	strb	r2, [r3, #0]
 81192b2:	6838      	ldr	r0, [r7, #0]
 81192b4:	f000 ff4a 	bl	811a14c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 81192b8:	4b0b      	ldr	r3, [pc, #44]	@ (81192e8 <pbuf_free_ooseq+0x48>)
 81192ba:	681b      	ldr	r3, [r3, #0]
 81192bc:	607b      	str	r3, [r7, #4]
 81192be:	e00a      	b.n	81192d6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 81192c0:	687b      	ldr	r3, [r7, #4]
 81192c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81192c4:	2b00      	cmp	r3, #0
 81192c6:	d003      	beq.n	81192d0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 81192c8:	6878      	ldr	r0, [r7, #4]
 81192ca:	f002 fd97 	bl	811bdfc <tcp_free_ooseq>
      return;
 81192ce:	e005      	b.n	81192dc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 81192d0:	687b      	ldr	r3, [r7, #4]
 81192d2:	68db      	ldr	r3, [r3, #12]
 81192d4:	607b      	str	r3, [r7, #4]
 81192d6:	687b      	ldr	r3, [r7, #4]
 81192d8:	2b00      	cmp	r3, #0
 81192da:	d1f1      	bne.n	81192c0 <pbuf_free_ooseq+0x20>
    }
  }
}
 81192dc:	3708      	adds	r7, #8
 81192de:	46bd      	mov	sp, r7
 81192e0:	bd80      	pop	{r7, pc}
 81192e2:	bf00      	nop
 81192e4:	24012699 	.word	0x24012699
 81192e8:	240126ac 	.word	0x240126ac

081192ec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 81192ec:	b580      	push	{r7, lr}
 81192ee:	b082      	sub	sp, #8
 81192f0:	af00      	add	r7, sp, #0
 81192f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 81192f4:	f7ff ffd4 	bl	81192a0 <pbuf_free_ooseq>
}
 81192f8:	bf00      	nop
 81192fa:	3708      	adds	r7, #8
 81192fc:	46bd      	mov	sp, r7
 81192fe:	bd80      	pop	{r7, pc}

08119300 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8119300:	b580      	push	{r7, lr}
 8119302:	b082      	sub	sp, #8
 8119304:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8119306:	f000 ff13 	bl	811a130 <sys_arch_protect>
 811930a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 811930c:	4b0f      	ldr	r3, [pc, #60]	@ (811934c <pbuf_pool_is_empty+0x4c>)
 811930e:	781b      	ldrb	r3, [r3, #0]
 8119310:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8119312:	4b0e      	ldr	r3, [pc, #56]	@ (811934c <pbuf_pool_is_empty+0x4c>)
 8119314:	2201      	movs	r2, #1
 8119316:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8119318:	6878      	ldr	r0, [r7, #4]
 811931a:	f000 ff17 	bl	811a14c <sys_arch_unprotect>

  if (!queued) {
 811931e:	78fb      	ldrb	r3, [r7, #3]
 8119320:	2b00      	cmp	r3, #0
 8119322:	d10f      	bne.n	8119344 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8119324:	2100      	movs	r1, #0
 8119326:	480a      	ldr	r0, [pc, #40]	@ (8119350 <pbuf_pool_is_empty+0x50>)
 8119328:	f007 f886 	bl	8120438 <tcpip_try_callback>
 811932c:	4603      	mov	r3, r0
 811932e:	2b00      	cmp	r3, #0
 8119330:	d008      	beq.n	8119344 <pbuf_pool_is_empty+0x44>
 8119332:	f000 fefd 	bl	811a130 <sys_arch_protect>
 8119336:	6078      	str	r0, [r7, #4]
 8119338:	4b04      	ldr	r3, [pc, #16]	@ (811934c <pbuf_pool_is_empty+0x4c>)
 811933a:	2200      	movs	r2, #0
 811933c:	701a      	strb	r2, [r3, #0]
 811933e:	6878      	ldr	r0, [r7, #4]
 8119340:	f000 ff04 	bl	811a14c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8119344:	bf00      	nop
 8119346:	3708      	adds	r7, #8
 8119348:	46bd      	mov	sp, r7
 811934a:	bd80      	pop	{r7, pc}
 811934c:	24012699 	.word	0x24012699
 8119350:	081192ed 	.word	0x081192ed

08119354 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8119354:	b480      	push	{r7}
 8119356:	b085      	sub	sp, #20
 8119358:	af00      	add	r7, sp, #0
 811935a:	60f8      	str	r0, [r7, #12]
 811935c:	60b9      	str	r1, [r7, #8]
 811935e:	4611      	mov	r1, r2
 8119360:	461a      	mov	r2, r3
 8119362:	460b      	mov	r3, r1
 8119364:	80fb      	strh	r3, [r7, #6]
 8119366:	4613      	mov	r3, r2
 8119368:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 811936a:	68fb      	ldr	r3, [r7, #12]
 811936c:	2200      	movs	r2, #0
 811936e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8119370:	68fb      	ldr	r3, [r7, #12]
 8119372:	68ba      	ldr	r2, [r7, #8]
 8119374:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8119376:	68fb      	ldr	r3, [r7, #12]
 8119378:	88fa      	ldrh	r2, [r7, #6]
 811937a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 811937c:	68fb      	ldr	r3, [r7, #12]
 811937e:	88ba      	ldrh	r2, [r7, #4]
 8119380:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8119382:	8b3b      	ldrh	r3, [r7, #24]
 8119384:	b2da      	uxtb	r2, r3
 8119386:	68fb      	ldr	r3, [r7, #12]
 8119388:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 811938a:	68fb      	ldr	r3, [r7, #12]
 811938c:	7f3a      	ldrb	r2, [r7, #28]
 811938e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8119390:	68fb      	ldr	r3, [r7, #12]
 8119392:	2201      	movs	r2, #1
 8119394:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8119396:	68fb      	ldr	r3, [r7, #12]
 8119398:	2200      	movs	r2, #0
 811939a:	73da      	strb	r2, [r3, #15]
}
 811939c:	bf00      	nop
 811939e:	3714      	adds	r7, #20
 81193a0:	46bd      	mov	sp, r7
 81193a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81193a6:	4770      	bx	lr

081193a8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 81193a8:	b580      	push	{r7, lr}
 81193aa:	b08c      	sub	sp, #48	@ 0x30
 81193ac:	af02      	add	r7, sp, #8
 81193ae:	4603      	mov	r3, r0
 81193b0:	71fb      	strb	r3, [r7, #7]
 81193b2:	460b      	mov	r3, r1
 81193b4:	80bb      	strh	r3, [r7, #4]
 81193b6:	4613      	mov	r3, r2
 81193b8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 81193ba:	79fb      	ldrb	r3, [r7, #7]
 81193bc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 81193be:	887b      	ldrh	r3, [r7, #2]
 81193c0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 81193c4:	d07f      	beq.n	81194c6 <pbuf_alloc+0x11e>
 81193c6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 81193ca:	f300 80c7 	bgt.w	811955c <pbuf_alloc+0x1b4>
 81193ce:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 81193d2:	d010      	beq.n	81193f6 <pbuf_alloc+0x4e>
 81193d4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 81193d8:	f300 80c0 	bgt.w	811955c <pbuf_alloc+0x1b4>
 81193dc:	2b01      	cmp	r3, #1
 81193de:	d002      	beq.n	81193e6 <pbuf_alloc+0x3e>
 81193e0:	2b41      	cmp	r3, #65	@ 0x41
 81193e2:	f040 80bb 	bne.w	811955c <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 81193e6:	887a      	ldrh	r2, [r7, #2]
 81193e8:	88bb      	ldrh	r3, [r7, #4]
 81193ea:	4619      	mov	r1, r3
 81193ec:	2000      	movs	r0, #0
 81193ee:	f000 f8d1 	bl	8119594 <pbuf_alloc_reference>
 81193f2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 81193f4:	e0bc      	b.n	8119570 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 81193f6:	2300      	movs	r3, #0
 81193f8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 81193fa:	2300      	movs	r3, #0
 81193fc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 81193fe:	88bb      	ldrh	r3, [r7, #4]
 8119400:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8119402:	200c      	movs	r0, #12
 8119404:	f7fd fd02 	bl	8116e0c <memp_malloc>
 8119408:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 811940a:	693b      	ldr	r3, [r7, #16]
 811940c:	2b00      	cmp	r3, #0
 811940e:	d109      	bne.n	8119424 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8119410:	f7ff ff76 	bl	8119300 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8119414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119416:	2b00      	cmp	r3, #0
 8119418:	d002      	beq.n	8119420 <pbuf_alloc+0x78>
            pbuf_free(p);
 811941a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811941c:	f000 faa6 	bl	811996c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8119420:	2300      	movs	r3, #0
 8119422:	e0a6      	b.n	8119572 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8119424:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8119426:	3303      	adds	r3, #3
 8119428:	b29b      	uxth	r3, r3
 811942a:	f023 0303 	bic.w	r3, r3, #3
 811942e:	b29b      	uxth	r3, r3
 8119430:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8119434:	b29b      	uxth	r3, r3
 8119436:	8b7a      	ldrh	r2, [r7, #26]
 8119438:	4293      	cmp	r3, r2
 811943a:	bf28      	it	cs
 811943c:	4613      	movcs	r3, r2
 811943e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8119440:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8119442:	3310      	adds	r3, #16
 8119444:	693a      	ldr	r2, [r7, #16]
 8119446:	4413      	add	r3, r2
 8119448:	3303      	adds	r3, #3
 811944a:	f023 0303 	bic.w	r3, r3, #3
 811944e:	4618      	mov	r0, r3
 8119450:	89f9      	ldrh	r1, [r7, #14]
 8119452:	8b7a      	ldrh	r2, [r7, #26]
 8119454:	2300      	movs	r3, #0
 8119456:	9301      	str	r3, [sp, #4]
 8119458:	887b      	ldrh	r3, [r7, #2]
 811945a:	9300      	str	r3, [sp, #0]
 811945c:	460b      	mov	r3, r1
 811945e:	4601      	mov	r1, r0
 8119460:	6938      	ldr	r0, [r7, #16]
 8119462:	f7ff ff77 	bl	8119354 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8119466:	693b      	ldr	r3, [r7, #16]
 8119468:	685b      	ldr	r3, [r3, #4]
 811946a:	f003 0303 	and.w	r3, r3, #3
 811946e:	2b00      	cmp	r3, #0
 8119470:	d006      	beq.n	8119480 <pbuf_alloc+0xd8>
 8119472:	4b42      	ldr	r3, [pc, #264]	@ (811957c <pbuf_alloc+0x1d4>)
 8119474:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8119478:	4941      	ldr	r1, [pc, #260]	@ (8119580 <pbuf_alloc+0x1d8>)
 811947a:	4842      	ldr	r0, [pc, #264]	@ (8119584 <pbuf_alloc+0x1dc>)
 811947c:	f008 fc82 	bl	8121d84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8119480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8119482:	3303      	adds	r3, #3
 8119484:	f023 0303 	bic.w	r3, r3, #3
 8119488:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 811948c:	d106      	bne.n	811949c <pbuf_alloc+0xf4>
 811948e:	4b3b      	ldr	r3, [pc, #236]	@ (811957c <pbuf_alloc+0x1d4>)
 8119490:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8119494:	493c      	ldr	r1, [pc, #240]	@ (8119588 <pbuf_alloc+0x1e0>)
 8119496:	483b      	ldr	r0, [pc, #236]	@ (8119584 <pbuf_alloc+0x1dc>)
 8119498:	f008 fc74 	bl	8121d84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 811949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811949e:	2b00      	cmp	r3, #0
 81194a0:	d102      	bne.n	81194a8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 81194a2:	693b      	ldr	r3, [r7, #16]
 81194a4:	627b      	str	r3, [r7, #36]	@ 0x24
 81194a6:	e002      	b.n	81194ae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 81194a8:	69fb      	ldr	r3, [r7, #28]
 81194aa:	693a      	ldr	r2, [r7, #16]
 81194ac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 81194ae:	693b      	ldr	r3, [r7, #16]
 81194b0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 81194b2:	8b7a      	ldrh	r2, [r7, #26]
 81194b4:	89fb      	ldrh	r3, [r7, #14]
 81194b6:	1ad3      	subs	r3, r2, r3
 81194b8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 81194ba:	2300      	movs	r3, #0
 81194bc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 81194be:	8b7b      	ldrh	r3, [r7, #26]
 81194c0:	2b00      	cmp	r3, #0
 81194c2:	d19e      	bne.n	8119402 <pbuf_alloc+0x5a>
      break;
 81194c4:	e054      	b.n	8119570 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 81194c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81194c8:	3303      	adds	r3, #3
 81194ca:	b29b      	uxth	r3, r3
 81194cc:	f023 0303 	bic.w	r3, r3, #3
 81194d0:	b29a      	uxth	r2, r3
 81194d2:	88bb      	ldrh	r3, [r7, #4]
 81194d4:	3303      	adds	r3, #3
 81194d6:	b29b      	uxth	r3, r3
 81194d8:	f023 0303 	bic.w	r3, r3, #3
 81194dc:	b29b      	uxth	r3, r3
 81194de:	4413      	add	r3, r2
 81194e0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 81194e2:	8b3b      	ldrh	r3, [r7, #24]
 81194e4:	3310      	adds	r3, #16
 81194e6:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 81194e8:	8b3a      	ldrh	r2, [r7, #24]
 81194ea:	88bb      	ldrh	r3, [r7, #4]
 81194ec:	3303      	adds	r3, #3
 81194ee:	f023 0303 	bic.w	r3, r3, #3
 81194f2:	429a      	cmp	r2, r3
 81194f4:	d306      	bcc.n	8119504 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 81194f6:	88bb      	ldrh	r3, [r7, #4]
 81194f8:	3303      	adds	r3, #3
 81194fa:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 81194fe:	697a      	ldr	r2, [r7, #20]
 8119500:	429a      	cmp	r2, r3
 8119502:	d201      	bcs.n	8119508 <pbuf_alloc+0x160>
        return NULL;
 8119504:	2300      	movs	r3, #0
 8119506:	e034      	b.n	8119572 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8119508:	6978      	ldr	r0, [r7, #20]
 811950a:	f7fd fac7 	bl	8116a9c <mem_malloc>
 811950e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8119510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119512:	2b00      	cmp	r3, #0
 8119514:	d101      	bne.n	811951a <pbuf_alloc+0x172>
        return NULL;
 8119516:	2300      	movs	r3, #0
 8119518:	e02b      	b.n	8119572 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 811951a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811951c:	3310      	adds	r3, #16
 811951e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8119520:	4413      	add	r3, r2
 8119522:	3303      	adds	r3, #3
 8119524:	f023 0303 	bic.w	r3, r3, #3
 8119528:	4618      	mov	r0, r3
 811952a:	88b9      	ldrh	r1, [r7, #4]
 811952c:	88ba      	ldrh	r2, [r7, #4]
 811952e:	2300      	movs	r3, #0
 8119530:	9301      	str	r3, [sp, #4]
 8119532:	887b      	ldrh	r3, [r7, #2]
 8119534:	9300      	str	r3, [sp, #0]
 8119536:	460b      	mov	r3, r1
 8119538:	4601      	mov	r1, r0
 811953a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811953c:	f7ff ff0a 	bl	8119354 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8119540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119542:	685b      	ldr	r3, [r3, #4]
 8119544:	f003 0303 	and.w	r3, r3, #3
 8119548:	2b00      	cmp	r3, #0
 811954a:	d010      	beq.n	811956e <pbuf_alloc+0x1c6>
 811954c:	4b0b      	ldr	r3, [pc, #44]	@ (811957c <pbuf_alloc+0x1d4>)
 811954e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8119552:	490e      	ldr	r1, [pc, #56]	@ (811958c <pbuf_alloc+0x1e4>)
 8119554:	480b      	ldr	r0, [pc, #44]	@ (8119584 <pbuf_alloc+0x1dc>)
 8119556:	f008 fc15 	bl	8121d84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 811955a:	e008      	b.n	811956e <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 811955c:	4b07      	ldr	r3, [pc, #28]	@ (811957c <pbuf_alloc+0x1d4>)
 811955e:	f240 1227 	movw	r2, #295	@ 0x127
 8119562:	490b      	ldr	r1, [pc, #44]	@ (8119590 <pbuf_alloc+0x1e8>)
 8119564:	4807      	ldr	r0, [pc, #28]	@ (8119584 <pbuf_alloc+0x1dc>)
 8119566:	f008 fc0d 	bl	8121d84 <iprintf>
      return NULL;
 811956a:	2300      	movs	r3, #0
 811956c:	e001      	b.n	8119572 <pbuf_alloc+0x1ca>
      break;
 811956e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8119570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8119572:	4618      	mov	r0, r3
 8119574:	3728      	adds	r7, #40	@ 0x28
 8119576:	46bd      	mov	sp, r7
 8119578:	bd80      	pop	{r7, pc}
 811957a:	bf00      	nop
 811957c:	08126904 	.word	0x08126904
 8119580:	0812696c 	.word	0x0812696c
 8119584:	0812699c 	.word	0x0812699c
 8119588:	081269c4 	.word	0x081269c4
 811958c:	081269f8 	.word	0x081269f8
 8119590:	08126a24 	.word	0x08126a24

08119594 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8119594:	b580      	push	{r7, lr}
 8119596:	b086      	sub	sp, #24
 8119598:	af02      	add	r7, sp, #8
 811959a:	6078      	str	r0, [r7, #4]
 811959c:	460b      	mov	r3, r1
 811959e:	807b      	strh	r3, [r7, #2]
 81195a0:	4613      	mov	r3, r2
 81195a2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 81195a4:	883b      	ldrh	r3, [r7, #0]
 81195a6:	2b41      	cmp	r3, #65	@ 0x41
 81195a8:	d009      	beq.n	81195be <pbuf_alloc_reference+0x2a>
 81195aa:	883b      	ldrh	r3, [r7, #0]
 81195ac:	2b01      	cmp	r3, #1
 81195ae:	d006      	beq.n	81195be <pbuf_alloc_reference+0x2a>
 81195b0:	4b0f      	ldr	r3, [pc, #60]	@ (81195f0 <pbuf_alloc_reference+0x5c>)
 81195b2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 81195b6:	490f      	ldr	r1, [pc, #60]	@ (81195f4 <pbuf_alloc_reference+0x60>)
 81195b8:	480f      	ldr	r0, [pc, #60]	@ (81195f8 <pbuf_alloc_reference+0x64>)
 81195ba:	f008 fbe3 	bl	8121d84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 81195be:	200b      	movs	r0, #11
 81195c0:	f7fd fc24 	bl	8116e0c <memp_malloc>
 81195c4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 81195c6:	68fb      	ldr	r3, [r7, #12]
 81195c8:	2b00      	cmp	r3, #0
 81195ca:	d101      	bne.n	81195d0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 81195cc:	2300      	movs	r3, #0
 81195ce:	e00b      	b.n	81195e8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 81195d0:	8879      	ldrh	r1, [r7, #2]
 81195d2:	887a      	ldrh	r2, [r7, #2]
 81195d4:	2300      	movs	r3, #0
 81195d6:	9301      	str	r3, [sp, #4]
 81195d8:	883b      	ldrh	r3, [r7, #0]
 81195da:	9300      	str	r3, [sp, #0]
 81195dc:	460b      	mov	r3, r1
 81195de:	6879      	ldr	r1, [r7, #4]
 81195e0:	68f8      	ldr	r0, [r7, #12]
 81195e2:	f7ff feb7 	bl	8119354 <pbuf_init_alloced_pbuf>
  return p;
 81195e6:	68fb      	ldr	r3, [r7, #12]
}
 81195e8:	4618      	mov	r0, r3
 81195ea:	3710      	adds	r7, #16
 81195ec:	46bd      	mov	sp, r7
 81195ee:	bd80      	pop	{r7, pc}
 81195f0:	08126904 	.word	0x08126904
 81195f4:	08126a40 	.word	0x08126a40
 81195f8:	0812699c 	.word	0x0812699c

081195fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 81195fc:	b580      	push	{r7, lr}
 81195fe:	b088      	sub	sp, #32
 8119600:	af02      	add	r7, sp, #8
 8119602:	607b      	str	r3, [r7, #4]
 8119604:	4603      	mov	r3, r0
 8119606:	73fb      	strb	r3, [r7, #15]
 8119608:	460b      	mov	r3, r1
 811960a:	81bb      	strh	r3, [r7, #12]
 811960c:	4613      	mov	r3, r2
 811960e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8119610:	7bfb      	ldrb	r3, [r7, #15]
 8119612:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8119614:	8a7b      	ldrh	r3, [r7, #18]
 8119616:	3303      	adds	r3, #3
 8119618:	f023 0203 	bic.w	r2, r3, #3
 811961c:	89bb      	ldrh	r3, [r7, #12]
 811961e:	441a      	add	r2, r3
 8119620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8119622:	429a      	cmp	r2, r3
 8119624:	d901      	bls.n	811962a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8119626:	2300      	movs	r3, #0
 8119628:	e018      	b.n	811965c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 811962a:	6a3b      	ldr	r3, [r7, #32]
 811962c:	2b00      	cmp	r3, #0
 811962e:	d007      	beq.n	8119640 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8119630:	8a7b      	ldrh	r3, [r7, #18]
 8119632:	3303      	adds	r3, #3
 8119634:	f023 0303 	bic.w	r3, r3, #3
 8119638:	6a3a      	ldr	r2, [r7, #32]
 811963a:	4413      	add	r3, r2
 811963c:	617b      	str	r3, [r7, #20]
 811963e:	e001      	b.n	8119644 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8119640:	2300      	movs	r3, #0
 8119642:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8119644:	6878      	ldr	r0, [r7, #4]
 8119646:	89b9      	ldrh	r1, [r7, #12]
 8119648:	89ba      	ldrh	r2, [r7, #12]
 811964a:	2302      	movs	r3, #2
 811964c:	9301      	str	r3, [sp, #4]
 811964e:	897b      	ldrh	r3, [r7, #10]
 8119650:	9300      	str	r3, [sp, #0]
 8119652:	460b      	mov	r3, r1
 8119654:	6979      	ldr	r1, [r7, #20]
 8119656:	f7ff fe7d 	bl	8119354 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 811965a:	687b      	ldr	r3, [r7, #4]
}
 811965c:	4618      	mov	r0, r3
 811965e:	3718      	adds	r7, #24
 8119660:	46bd      	mov	sp, r7
 8119662:	bd80      	pop	{r7, pc}

08119664 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8119664:	b580      	push	{r7, lr}
 8119666:	b084      	sub	sp, #16
 8119668:	af00      	add	r7, sp, #0
 811966a:	6078      	str	r0, [r7, #4]
 811966c:	460b      	mov	r3, r1
 811966e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8119670:	687b      	ldr	r3, [r7, #4]
 8119672:	2b00      	cmp	r3, #0
 8119674:	d106      	bne.n	8119684 <pbuf_realloc+0x20>
 8119676:	4b39      	ldr	r3, [pc, #228]	@ (811975c <pbuf_realloc+0xf8>)
 8119678:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 811967c:	4938      	ldr	r1, [pc, #224]	@ (8119760 <pbuf_realloc+0xfc>)
 811967e:	4839      	ldr	r0, [pc, #228]	@ (8119764 <pbuf_realloc+0x100>)
 8119680:	f008 fb80 	bl	8121d84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8119684:	687b      	ldr	r3, [r7, #4]
 8119686:	891b      	ldrh	r3, [r3, #8]
 8119688:	887a      	ldrh	r2, [r7, #2]
 811968a:	429a      	cmp	r2, r3
 811968c:	d261      	bcs.n	8119752 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 811968e:	687b      	ldr	r3, [r7, #4]
 8119690:	891a      	ldrh	r2, [r3, #8]
 8119692:	887b      	ldrh	r3, [r7, #2]
 8119694:	1ad3      	subs	r3, r2, r3
 8119696:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8119698:	887b      	ldrh	r3, [r7, #2]
 811969a:	817b      	strh	r3, [r7, #10]
  q = p;
 811969c:	687b      	ldr	r3, [r7, #4]
 811969e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 81196a0:	e018      	b.n	81196d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 81196a2:	68fb      	ldr	r3, [r7, #12]
 81196a4:	895b      	ldrh	r3, [r3, #10]
 81196a6:	897a      	ldrh	r2, [r7, #10]
 81196a8:	1ad3      	subs	r3, r2, r3
 81196aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 81196ac:	68fb      	ldr	r3, [r7, #12]
 81196ae:	891a      	ldrh	r2, [r3, #8]
 81196b0:	893b      	ldrh	r3, [r7, #8]
 81196b2:	1ad3      	subs	r3, r2, r3
 81196b4:	b29a      	uxth	r2, r3
 81196b6:	68fb      	ldr	r3, [r7, #12]
 81196b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 81196ba:	68fb      	ldr	r3, [r7, #12]
 81196bc:	681b      	ldr	r3, [r3, #0]
 81196be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 81196c0:	68fb      	ldr	r3, [r7, #12]
 81196c2:	2b00      	cmp	r3, #0
 81196c4:	d106      	bne.n	81196d4 <pbuf_realloc+0x70>
 81196c6:	4b25      	ldr	r3, [pc, #148]	@ (811975c <pbuf_realloc+0xf8>)
 81196c8:	f240 12af 	movw	r2, #431	@ 0x1af
 81196cc:	4926      	ldr	r1, [pc, #152]	@ (8119768 <pbuf_realloc+0x104>)
 81196ce:	4825      	ldr	r0, [pc, #148]	@ (8119764 <pbuf_realloc+0x100>)
 81196d0:	f008 fb58 	bl	8121d84 <iprintf>
  while (rem_len > q->len) {
 81196d4:	68fb      	ldr	r3, [r7, #12]
 81196d6:	895b      	ldrh	r3, [r3, #10]
 81196d8:	897a      	ldrh	r2, [r7, #10]
 81196da:	429a      	cmp	r2, r3
 81196dc:	d8e1      	bhi.n	81196a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 81196de:	68fb      	ldr	r3, [r7, #12]
 81196e0:	7b1b      	ldrb	r3, [r3, #12]
 81196e2:	f003 030f 	and.w	r3, r3, #15
 81196e6:	2b00      	cmp	r3, #0
 81196e8:	d11f      	bne.n	811972a <pbuf_realloc+0xc6>
 81196ea:	68fb      	ldr	r3, [r7, #12]
 81196ec:	895b      	ldrh	r3, [r3, #10]
 81196ee:	897a      	ldrh	r2, [r7, #10]
 81196f0:	429a      	cmp	r2, r3
 81196f2:	d01a      	beq.n	811972a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 81196f4:	68fb      	ldr	r3, [r7, #12]
 81196f6:	7b5b      	ldrb	r3, [r3, #13]
 81196f8:	f003 0302 	and.w	r3, r3, #2
 81196fc:	2b00      	cmp	r3, #0
 81196fe:	d114      	bne.n	811972a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8119700:	68fb      	ldr	r3, [r7, #12]
 8119702:	685a      	ldr	r2, [r3, #4]
 8119704:	68fb      	ldr	r3, [r7, #12]
 8119706:	1ad2      	subs	r2, r2, r3
 8119708:	897b      	ldrh	r3, [r7, #10]
 811970a:	4413      	add	r3, r2
 811970c:	4619      	mov	r1, r3
 811970e:	68f8      	ldr	r0, [r7, #12]
 8119710:	f7fd f8c2 	bl	8116898 <mem_trim>
 8119714:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8119716:	68fb      	ldr	r3, [r7, #12]
 8119718:	2b00      	cmp	r3, #0
 811971a:	d106      	bne.n	811972a <pbuf_realloc+0xc6>
 811971c:	4b0f      	ldr	r3, [pc, #60]	@ (811975c <pbuf_realloc+0xf8>)
 811971e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8119722:	4912      	ldr	r1, [pc, #72]	@ (811976c <pbuf_realloc+0x108>)
 8119724:	480f      	ldr	r0, [pc, #60]	@ (8119764 <pbuf_realloc+0x100>)
 8119726:	f008 fb2d 	bl	8121d84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 811972a:	68fb      	ldr	r3, [r7, #12]
 811972c:	897a      	ldrh	r2, [r7, #10]
 811972e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8119730:	68fb      	ldr	r3, [r7, #12]
 8119732:	895a      	ldrh	r2, [r3, #10]
 8119734:	68fb      	ldr	r3, [r7, #12]
 8119736:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8119738:	68fb      	ldr	r3, [r7, #12]
 811973a:	681b      	ldr	r3, [r3, #0]
 811973c:	2b00      	cmp	r3, #0
 811973e:	d004      	beq.n	811974a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8119740:	68fb      	ldr	r3, [r7, #12]
 8119742:	681b      	ldr	r3, [r3, #0]
 8119744:	4618      	mov	r0, r3
 8119746:	f000 f911 	bl	811996c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 811974a:	68fb      	ldr	r3, [r7, #12]
 811974c:	2200      	movs	r2, #0
 811974e:	601a      	str	r2, [r3, #0]
 8119750:	e000      	b.n	8119754 <pbuf_realloc+0xf0>
    return;
 8119752:	bf00      	nop

}
 8119754:	3710      	adds	r7, #16
 8119756:	46bd      	mov	sp, r7
 8119758:	bd80      	pop	{r7, pc}
 811975a:	bf00      	nop
 811975c:	08126904 	.word	0x08126904
 8119760:	08126a54 	.word	0x08126a54
 8119764:	0812699c 	.word	0x0812699c
 8119768:	08126a6c 	.word	0x08126a6c
 811976c:	08126a84 	.word	0x08126a84

08119770 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8119770:	b580      	push	{r7, lr}
 8119772:	b086      	sub	sp, #24
 8119774:	af00      	add	r7, sp, #0
 8119776:	60f8      	str	r0, [r7, #12]
 8119778:	60b9      	str	r1, [r7, #8]
 811977a:	4613      	mov	r3, r2
 811977c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811977e:	68fb      	ldr	r3, [r7, #12]
 8119780:	2b00      	cmp	r3, #0
 8119782:	d106      	bne.n	8119792 <pbuf_add_header_impl+0x22>
 8119784:	4b2b      	ldr	r3, [pc, #172]	@ (8119834 <pbuf_add_header_impl+0xc4>)
 8119786:	f240 12df 	movw	r2, #479	@ 0x1df
 811978a:	492b      	ldr	r1, [pc, #172]	@ (8119838 <pbuf_add_header_impl+0xc8>)
 811978c:	482b      	ldr	r0, [pc, #172]	@ (811983c <pbuf_add_header_impl+0xcc>)
 811978e:	f008 faf9 	bl	8121d84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8119792:	68fb      	ldr	r3, [r7, #12]
 8119794:	2b00      	cmp	r3, #0
 8119796:	d003      	beq.n	81197a0 <pbuf_add_header_impl+0x30>
 8119798:	68bb      	ldr	r3, [r7, #8]
 811979a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811979e:	d301      	bcc.n	81197a4 <pbuf_add_header_impl+0x34>
    return 1;
 81197a0:	2301      	movs	r3, #1
 81197a2:	e043      	b.n	811982c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 81197a4:	68bb      	ldr	r3, [r7, #8]
 81197a6:	2b00      	cmp	r3, #0
 81197a8:	d101      	bne.n	81197ae <pbuf_add_header_impl+0x3e>
    return 0;
 81197aa:	2300      	movs	r3, #0
 81197ac:	e03e      	b.n	811982c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 81197ae:	68bb      	ldr	r3, [r7, #8]
 81197b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 81197b2:	68fb      	ldr	r3, [r7, #12]
 81197b4:	891a      	ldrh	r2, [r3, #8]
 81197b6:	8a7b      	ldrh	r3, [r7, #18]
 81197b8:	4413      	add	r3, r2
 81197ba:	b29b      	uxth	r3, r3
 81197bc:	8a7a      	ldrh	r2, [r7, #18]
 81197be:	429a      	cmp	r2, r3
 81197c0:	d901      	bls.n	81197c6 <pbuf_add_header_impl+0x56>
    return 1;
 81197c2:	2301      	movs	r3, #1
 81197c4:	e032      	b.n	811982c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 81197c6:	68fb      	ldr	r3, [r7, #12]
 81197c8:	7b1b      	ldrb	r3, [r3, #12]
 81197ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 81197cc:	8a3b      	ldrh	r3, [r7, #16]
 81197ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81197d2:	2b00      	cmp	r3, #0
 81197d4:	d00c      	beq.n	81197f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 81197d6:	68fb      	ldr	r3, [r7, #12]
 81197d8:	685a      	ldr	r2, [r3, #4]
 81197da:	68bb      	ldr	r3, [r7, #8]
 81197dc:	425b      	negs	r3, r3
 81197de:	4413      	add	r3, r2
 81197e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 81197e2:	68fb      	ldr	r3, [r7, #12]
 81197e4:	3310      	adds	r3, #16
 81197e6:	697a      	ldr	r2, [r7, #20]
 81197e8:	429a      	cmp	r2, r3
 81197ea:	d20d      	bcs.n	8119808 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 81197ec:	2301      	movs	r3, #1
 81197ee:	e01d      	b.n	811982c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 81197f0:	79fb      	ldrb	r3, [r7, #7]
 81197f2:	2b00      	cmp	r3, #0
 81197f4:	d006      	beq.n	8119804 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 81197f6:	68fb      	ldr	r3, [r7, #12]
 81197f8:	685a      	ldr	r2, [r3, #4]
 81197fa:	68bb      	ldr	r3, [r7, #8]
 81197fc:	425b      	negs	r3, r3
 81197fe:	4413      	add	r3, r2
 8119800:	617b      	str	r3, [r7, #20]
 8119802:	e001      	b.n	8119808 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8119804:	2301      	movs	r3, #1
 8119806:	e011      	b.n	811982c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8119808:	68fb      	ldr	r3, [r7, #12]
 811980a:	697a      	ldr	r2, [r7, #20]
 811980c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811980e:	68fb      	ldr	r3, [r7, #12]
 8119810:	895a      	ldrh	r2, [r3, #10]
 8119812:	8a7b      	ldrh	r3, [r7, #18]
 8119814:	4413      	add	r3, r2
 8119816:	b29a      	uxth	r2, r3
 8119818:	68fb      	ldr	r3, [r7, #12]
 811981a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 811981c:	68fb      	ldr	r3, [r7, #12]
 811981e:	891a      	ldrh	r2, [r3, #8]
 8119820:	8a7b      	ldrh	r3, [r7, #18]
 8119822:	4413      	add	r3, r2
 8119824:	b29a      	uxth	r2, r3
 8119826:	68fb      	ldr	r3, [r7, #12]
 8119828:	811a      	strh	r2, [r3, #8]


  return 0;
 811982a:	2300      	movs	r3, #0
}
 811982c:	4618      	mov	r0, r3
 811982e:	3718      	adds	r7, #24
 8119830:	46bd      	mov	sp, r7
 8119832:	bd80      	pop	{r7, pc}
 8119834:	08126904 	.word	0x08126904
 8119838:	08126aa0 	.word	0x08126aa0
 811983c:	0812699c 	.word	0x0812699c

08119840 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8119840:	b580      	push	{r7, lr}
 8119842:	b082      	sub	sp, #8
 8119844:	af00      	add	r7, sp, #0
 8119846:	6078      	str	r0, [r7, #4]
 8119848:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 811984a:	2200      	movs	r2, #0
 811984c:	6839      	ldr	r1, [r7, #0]
 811984e:	6878      	ldr	r0, [r7, #4]
 8119850:	f7ff ff8e 	bl	8119770 <pbuf_add_header_impl>
 8119854:	4603      	mov	r3, r0
}
 8119856:	4618      	mov	r0, r3
 8119858:	3708      	adds	r7, #8
 811985a:	46bd      	mov	sp, r7
 811985c:	bd80      	pop	{r7, pc}
	...

08119860 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8119860:	b580      	push	{r7, lr}
 8119862:	b084      	sub	sp, #16
 8119864:	af00      	add	r7, sp, #0
 8119866:	6078      	str	r0, [r7, #4]
 8119868:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811986a:	687b      	ldr	r3, [r7, #4]
 811986c:	2b00      	cmp	r3, #0
 811986e:	d106      	bne.n	811987e <pbuf_remove_header+0x1e>
 8119870:	4b20      	ldr	r3, [pc, #128]	@ (81198f4 <pbuf_remove_header+0x94>)
 8119872:	f240 224b 	movw	r2, #587	@ 0x24b
 8119876:	4920      	ldr	r1, [pc, #128]	@ (81198f8 <pbuf_remove_header+0x98>)
 8119878:	4820      	ldr	r0, [pc, #128]	@ (81198fc <pbuf_remove_header+0x9c>)
 811987a:	f008 fa83 	bl	8121d84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 811987e:	687b      	ldr	r3, [r7, #4]
 8119880:	2b00      	cmp	r3, #0
 8119882:	d003      	beq.n	811988c <pbuf_remove_header+0x2c>
 8119884:	683b      	ldr	r3, [r7, #0]
 8119886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811988a:	d301      	bcc.n	8119890 <pbuf_remove_header+0x30>
    return 1;
 811988c:	2301      	movs	r3, #1
 811988e:	e02c      	b.n	81198ea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8119890:	683b      	ldr	r3, [r7, #0]
 8119892:	2b00      	cmp	r3, #0
 8119894:	d101      	bne.n	811989a <pbuf_remove_header+0x3a>
    return 0;
 8119896:	2300      	movs	r3, #0
 8119898:	e027      	b.n	81198ea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 811989a:	683b      	ldr	r3, [r7, #0]
 811989c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 811989e:	687b      	ldr	r3, [r7, #4]
 81198a0:	895b      	ldrh	r3, [r3, #10]
 81198a2:	89fa      	ldrh	r2, [r7, #14]
 81198a4:	429a      	cmp	r2, r3
 81198a6:	d908      	bls.n	81198ba <pbuf_remove_header+0x5a>
 81198a8:	4b12      	ldr	r3, [pc, #72]	@ (81198f4 <pbuf_remove_header+0x94>)
 81198aa:	f240 2255 	movw	r2, #597	@ 0x255
 81198ae:	4914      	ldr	r1, [pc, #80]	@ (8119900 <pbuf_remove_header+0xa0>)
 81198b0:	4812      	ldr	r0, [pc, #72]	@ (81198fc <pbuf_remove_header+0x9c>)
 81198b2:	f008 fa67 	bl	8121d84 <iprintf>
 81198b6:	2301      	movs	r3, #1
 81198b8:	e017      	b.n	81198ea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 81198ba:	687b      	ldr	r3, [r7, #4]
 81198bc:	685b      	ldr	r3, [r3, #4]
 81198be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 81198c0:	687b      	ldr	r3, [r7, #4]
 81198c2:	685a      	ldr	r2, [r3, #4]
 81198c4:	683b      	ldr	r3, [r7, #0]
 81198c6:	441a      	add	r2, r3
 81198c8:	687b      	ldr	r3, [r7, #4]
 81198ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 81198cc:	687b      	ldr	r3, [r7, #4]
 81198ce:	895a      	ldrh	r2, [r3, #10]
 81198d0:	89fb      	ldrh	r3, [r7, #14]
 81198d2:	1ad3      	subs	r3, r2, r3
 81198d4:	b29a      	uxth	r2, r3
 81198d6:	687b      	ldr	r3, [r7, #4]
 81198d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 81198da:	687b      	ldr	r3, [r7, #4]
 81198dc:	891a      	ldrh	r2, [r3, #8]
 81198de:	89fb      	ldrh	r3, [r7, #14]
 81198e0:	1ad3      	subs	r3, r2, r3
 81198e2:	b29a      	uxth	r2, r3
 81198e4:	687b      	ldr	r3, [r7, #4]
 81198e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 81198e8:	2300      	movs	r3, #0
}
 81198ea:	4618      	mov	r0, r3
 81198ec:	3710      	adds	r7, #16
 81198ee:	46bd      	mov	sp, r7
 81198f0:	bd80      	pop	{r7, pc}
 81198f2:	bf00      	nop
 81198f4:	08126904 	.word	0x08126904
 81198f8:	08126aa0 	.word	0x08126aa0
 81198fc:	0812699c 	.word	0x0812699c
 8119900:	08126aac 	.word	0x08126aac

08119904 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8119904:	b580      	push	{r7, lr}
 8119906:	b082      	sub	sp, #8
 8119908:	af00      	add	r7, sp, #0
 811990a:	6078      	str	r0, [r7, #4]
 811990c:	460b      	mov	r3, r1
 811990e:	807b      	strh	r3, [r7, #2]
 8119910:	4613      	mov	r3, r2
 8119912:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8119914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119918:	2b00      	cmp	r3, #0
 811991a:	da08      	bge.n	811992e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 811991c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119920:	425b      	negs	r3, r3
 8119922:	4619      	mov	r1, r3
 8119924:	6878      	ldr	r0, [r7, #4]
 8119926:	f7ff ff9b 	bl	8119860 <pbuf_remove_header>
 811992a:	4603      	mov	r3, r0
 811992c:	e007      	b.n	811993e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811992e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119932:	787a      	ldrb	r2, [r7, #1]
 8119934:	4619      	mov	r1, r3
 8119936:	6878      	ldr	r0, [r7, #4]
 8119938:	f7ff ff1a 	bl	8119770 <pbuf_add_header_impl>
 811993c:	4603      	mov	r3, r0
  }
}
 811993e:	4618      	mov	r0, r3
 8119940:	3708      	adds	r7, #8
 8119942:	46bd      	mov	sp, r7
 8119944:	bd80      	pop	{r7, pc}

08119946 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8119946:	b580      	push	{r7, lr}
 8119948:	b082      	sub	sp, #8
 811994a:	af00      	add	r7, sp, #0
 811994c:	6078      	str	r0, [r7, #4]
 811994e:	460b      	mov	r3, r1
 8119950:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8119952:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119956:	2201      	movs	r2, #1
 8119958:	4619      	mov	r1, r3
 811995a:	6878      	ldr	r0, [r7, #4]
 811995c:	f7ff ffd2 	bl	8119904 <pbuf_header_impl>
 8119960:	4603      	mov	r3, r0
}
 8119962:	4618      	mov	r0, r3
 8119964:	3708      	adds	r7, #8
 8119966:	46bd      	mov	sp, r7
 8119968:	bd80      	pop	{r7, pc}
	...

0811996c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 811996c:	b580      	push	{r7, lr}
 811996e:	b088      	sub	sp, #32
 8119970:	af00      	add	r7, sp, #0
 8119972:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8119974:	687b      	ldr	r3, [r7, #4]
 8119976:	2b00      	cmp	r3, #0
 8119978:	d10b      	bne.n	8119992 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 811997a:	687b      	ldr	r3, [r7, #4]
 811997c:	2b00      	cmp	r3, #0
 811997e:	d106      	bne.n	811998e <pbuf_free+0x22>
 8119980:	4b3b      	ldr	r3, [pc, #236]	@ (8119a70 <pbuf_free+0x104>)
 8119982:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8119986:	493b      	ldr	r1, [pc, #236]	@ (8119a74 <pbuf_free+0x108>)
 8119988:	483b      	ldr	r0, [pc, #236]	@ (8119a78 <pbuf_free+0x10c>)
 811998a:	f008 f9fb 	bl	8121d84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 811998e:	2300      	movs	r3, #0
 8119990:	e069      	b.n	8119a66 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8119992:	2300      	movs	r3, #0
 8119994:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8119996:	e062      	b.n	8119a5e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8119998:	f000 fbca 	bl	811a130 <sys_arch_protect>
 811999c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 811999e:	687b      	ldr	r3, [r7, #4]
 81199a0:	7b9b      	ldrb	r3, [r3, #14]
 81199a2:	2b00      	cmp	r3, #0
 81199a4:	d106      	bne.n	81199b4 <pbuf_free+0x48>
 81199a6:	4b32      	ldr	r3, [pc, #200]	@ (8119a70 <pbuf_free+0x104>)
 81199a8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 81199ac:	4933      	ldr	r1, [pc, #204]	@ (8119a7c <pbuf_free+0x110>)
 81199ae:	4832      	ldr	r0, [pc, #200]	@ (8119a78 <pbuf_free+0x10c>)
 81199b0:	f008 f9e8 	bl	8121d84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 81199b4:	687b      	ldr	r3, [r7, #4]
 81199b6:	7b9b      	ldrb	r3, [r3, #14]
 81199b8:	3b01      	subs	r3, #1
 81199ba:	b2da      	uxtb	r2, r3
 81199bc:	687b      	ldr	r3, [r7, #4]
 81199be:	739a      	strb	r2, [r3, #14]
 81199c0:	687b      	ldr	r3, [r7, #4]
 81199c2:	7b9b      	ldrb	r3, [r3, #14]
 81199c4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 81199c6:	69b8      	ldr	r0, [r7, #24]
 81199c8:	f000 fbc0 	bl	811a14c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 81199cc:	7dfb      	ldrb	r3, [r7, #23]
 81199ce:	2b00      	cmp	r3, #0
 81199d0:	d143      	bne.n	8119a5a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 81199d2:	687b      	ldr	r3, [r7, #4]
 81199d4:	681b      	ldr	r3, [r3, #0]
 81199d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 81199d8:	687b      	ldr	r3, [r7, #4]
 81199da:	7b1b      	ldrb	r3, [r3, #12]
 81199dc:	f003 030f 	and.w	r3, r3, #15
 81199e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 81199e2:	687b      	ldr	r3, [r7, #4]
 81199e4:	7b5b      	ldrb	r3, [r3, #13]
 81199e6:	f003 0302 	and.w	r3, r3, #2
 81199ea:	2b00      	cmp	r3, #0
 81199ec:	d011      	beq.n	8119a12 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 81199ee:	687b      	ldr	r3, [r7, #4]
 81199f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 81199f2:	68bb      	ldr	r3, [r7, #8]
 81199f4:	691b      	ldr	r3, [r3, #16]
 81199f6:	2b00      	cmp	r3, #0
 81199f8:	d106      	bne.n	8119a08 <pbuf_free+0x9c>
 81199fa:	4b1d      	ldr	r3, [pc, #116]	@ (8119a70 <pbuf_free+0x104>)
 81199fc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8119a00:	491f      	ldr	r1, [pc, #124]	@ (8119a80 <pbuf_free+0x114>)
 8119a02:	481d      	ldr	r0, [pc, #116]	@ (8119a78 <pbuf_free+0x10c>)
 8119a04:	f008 f9be 	bl	8121d84 <iprintf>
        pc->custom_free_function(p);
 8119a08:	68bb      	ldr	r3, [r7, #8]
 8119a0a:	691b      	ldr	r3, [r3, #16]
 8119a0c:	6878      	ldr	r0, [r7, #4]
 8119a0e:	4798      	blx	r3
 8119a10:	e01d      	b.n	8119a4e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8119a12:	7bfb      	ldrb	r3, [r7, #15]
 8119a14:	2b02      	cmp	r3, #2
 8119a16:	d104      	bne.n	8119a22 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8119a18:	6879      	ldr	r1, [r7, #4]
 8119a1a:	200c      	movs	r0, #12
 8119a1c:	f7fd fa6c 	bl	8116ef8 <memp_free>
 8119a20:	e015      	b.n	8119a4e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8119a22:	7bfb      	ldrb	r3, [r7, #15]
 8119a24:	2b01      	cmp	r3, #1
 8119a26:	d104      	bne.n	8119a32 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8119a28:	6879      	ldr	r1, [r7, #4]
 8119a2a:	200b      	movs	r0, #11
 8119a2c:	f7fd fa64 	bl	8116ef8 <memp_free>
 8119a30:	e00d      	b.n	8119a4e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8119a32:	7bfb      	ldrb	r3, [r7, #15]
 8119a34:	2b00      	cmp	r3, #0
 8119a36:	d103      	bne.n	8119a40 <pbuf_free+0xd4>
          mem_free(p);
 8119a38:	6878      	ldr	r0, [r7, #4]
 8119a3a:	f7fc fe9d 	bl	8116778 <mem_free>
 8119a3e:	e006      	b.n	8119a4e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8119a40:	4b0b      	ldr	r3, [pc, #44]	@ (8119a70 <pbuf_free+0x104>)
 8119a42:	f240 320f 	movw	r2, #783	@ 0x30f
 8119a46:	490f      	ldr	r1, [pc, #60]	@ (8119a84 <pbuf_free+0x118>)
 8119a48:	480b      	ldr	r0, [pc, #44]	@ (8119a78 <pbuf_free+0x10c>)
 8119a4a:	f008 f99b 	bl	8121d84 <iprintf>
        }
      }
      count++;
 8119a4e:	7ffb      	ldrb	r3, [r7, #31]
 8119a50:	3301      	adds	r3, #1
 8119a52:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8119a54:	693b      	ldr	r3, [r7, #16]
 8119a56:	607b      	str	r3, [r7, #4]
 8119a58:	e001      	b.n	8119a5e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8119a5a:	2300      	movs	r3, #0
 8119a5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8119a5e:	687b      	ldr	r3, [r7, #4]
 8119a60:	2b00      	cmp	r3, #0
 8119a62:	d199      	bne.n	8119998 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8119a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8119a66:	4618      	mov	r0, r3
 8119a68:	3720      	adds	r7, #32
 8119a6a:	46bd      	mov	sp, r7
 8119a6c:	bd80      	pop	{r7, pc}
 8119a6e:	bf00      	nop
 8119a70:	08126904 	.word	0x08126904
 8119a74:	08126aa0 	.word	0x08126aa0
 8119a78:	0812699c 	.word	0x0812699c
 8119a7c:	08126acc 	.word	0x08126acc
 8119a80:	08126ae4 	.word	0x08126ae4
 8119a84:	08126b08 	.word	0x08126b08

08119a88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8119a88:	b480      	push	{r7}
 8119a8a:	b085      	sub	sp, #20
 8119a8c:	af00      	add	r7, sp, #0
 8119a8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8119a90:	2300      	movs	r3, #0
 8119a92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8119a94:	e005      	b.n	8119aa2 <pbuf_clen+0x1a>
    ++len;
 8119a96:	89fb      	ldrh	r3, [r7, #14]
 8119a98:	3301      	adds	r3, #1
 8119a9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8119a9c:	687b      	ldr	r3, [r7, #4]
 8119a9e:	681b      	ldr	r3, [r3, #0]
 8119aa0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8119aa2:	687b      	ldr	r3, [r7, #4]
 8119aa4:	2b00      	cmp	r3, #0
 8119aa6:	d1f6      	bne.n	8119a96 <pbuf_clen+0xe>
  }
  return len;
 8119aa8:	89fb      	ldrh	r3, [r7, #14]
}
 8119aaa:	4618      	mov	r0, r3
 8119aac:	3714      	adds	r7, #20
 8119aae:	46bd      	mov	sp, r7
 8119ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119ab4:	4770      	bx	lr
	...

08119ab8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8119ab8:	b580      	push	{r7, lr}
 8119aba:	b084      	sub	sp, #16
 8119abc:	af00      	add	r7, sp, #0
 8119abe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8119ac0:	687b      	ldr	r3, [r7, #4]
 8119ac2:	2b00      	cmp	r3, #0
 8119ac4:	d016      	beq.n	8119af4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8119ac6:	f000 fb33 	bl	811a130 <sys_arch_protect>
 8119aca:	60f8      	str	r0, [r7, #12]
 8119acc:	687b      	ldr	r3, [r7, #4]
 8119ace:	7b9b      	ldrb	r3, [r3, #14]
 8119ad0:	3301      	adds	r3, #1
 8119ad2:	b2da      	uxtb	r2, r3
 8119ad4:	687b      	ldr	r3, [r7, #4]
 8119ad6:	739a      	strb	r2, [r3, #14]
 8119ad8:	68f8      	ldr	r0, [r7, #12]
 8119ada:	f000 fb37 	bl	811a14c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8119ade:	687b      	ldr	r3, [r7, #4]
 8119ae0:	7b9b      	ldrb	r3, [r3, #14]
 8119ae2:	2b00      	cmp	r3, #0
 8119ae4:	d106      	bne.n	8119af4 <pbuf_ref+0x3c>
 8119ae6:	4b05      	ldr	r3, [pc, #20]	@ (8119afc <pbuf_ref+0x44>)
 8119ae8:	f240 3242 	movw	r2, #834	@ 0x342
 8119aec:	4904      	ldr	r1, [pc, #16]	@ (8119b00 <pbuf_ref+0x48>)
 8119aee:	4805      	ldr	r0, [pc, #20]	@ (8119b04 <pbuf_ref+0x4c>)
 8119af0:	f008 f948 	bl	8121d84 <iprintf>
  }
}
 8119af4:	bf00      	nop
 8119af6:	3710      	adds	r7, #16
 8119af8:	46bd      	mov	sp, r7
 8119afa:	bd80      	pop	{r7, pc}
 8119afc:	08126904 	.word	0x08126904
 8119b00:	08126b1c 	.word	0x08126b1c
 8119b04:	0812699c 	.word	0x0812699c

08119b08 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8119b08:	b580      	push	{r7, lr}
 8119b0a:	b084      	sub	sp, #16
 8119b0c:	af00      	add	r7, sp, #0
 8119b0e:	6078      	str	r0, [r7, #4]
 8119b10:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8119b12:	687b      	ldr	r3, [r7, #4]
 8119b14:	2b00      	cmp	r3, #0
 8119b16:	d002      	beq.n	8119b1e <pbuf_cat+0x16>
 8119b18:	683b      	ldr	r3, [r7, #0]
 8119b1a:	2b00      	cmp	r3, #0
 8119b1c:	d107      	bne.n	8119b2e <pbuf_cat+0x26>
 8119b1e:	4b20      	ldr	r3, [pc, #128]	@ (8119ba0 <pbuf_cat+0x98>)
 8119b20:	f240 3259 	movw	r2, #857	@ 0x359
 8119b24:	491f      	ldr	r1, [pc, #124]	@ (8119ba4 <pbuf_cat+0x9c>)
 8119b26:	4820      	ldr	r0, [pc, #128]	@ (8119ba8 <pbuf_cat+0xa0>)
 8119b28:	f008 f92c 	bl	8121d84 <iprintf>
 8119b2c:	e034      	b.n	8119b98 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8119b2e:	687b      	ldr	r3, [r7, #4]
 8119b30:	60fb      	str	r3, [r7, #12]
 8119b32:	e00a      	b.n	8119b4a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8119b34:	68fb      	ldr	r3, [r7, #12]
 8119b36:	891a      	ldrh	r2, [r3, #8]
 8119b38:	683b      	ldr	r3, [r7, #0]
 8119b3a:	891b      	ldrh	r3, [r3, #8]
 8119b3c:	4413      	add	r3, r2
 8119b3e:	b29a      	uxth	r2, r3
 8119b40:	68fb      	ldr	r3, [r7, #12]
 8119b42:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8119b44:	68fb      	ldr	r3, [r7, #12]
 8119b46:	681b      	ldr	r3, [r3, #0]
 8119b48:	60fb      	str	r3, [r7, #12]
 8119b4a:	68fb      	ldr	r3, [r7, #12]
 8119b4c:	681b      	ldr	r3, [r3, #0]
 8119b4e:	2b00      	cmp	r3, #0
 8119b50:	d1f0      	bne.n	8119b34 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8119b52:	68fb      	ldr	r3, [r7, #12]
 8119b54:	891a      	ldrh	r2, [r3, #8]
 8119b56:	68fb      	ldr	r3, [r7, #12]
 8119b58:	895b      	ldrh	r3, [r3, #10]
 8119b5a:	429a      	cmp	r2, r3
 8119b5c:	d006      	beq.n	8119b6c <pbuf_cat+0x64>
 8119b5e:	4b10      	ldr	r3, [pc, #64]	@ (8119ba0 <pbuf_cat+0x98>)
 8119b60:	f240 3262 	movw	r2, #866	@ 0x362
 8119b64:	4911      	ldr	r1, [pc, #68]	@ (8119bac <pbuf_cat+0xa4>)
 8119b66:	4810      	ldr	r0, [pc, #64]	@ (8119ba8 <pbuf_cat+0xa0>)
 8119b68:	f008 f90c 	bl	8121d84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8119b6c:	68fb      	ldr	r3, [r7, #12]
 8119b6e:	681b      	ldr	r3, [r3, #0]
 8119b70:	2b00      	cmp	r3, #0
 8119b72:	d006      	beq.n	8119b82 <pbuf_cat+0x7a>
 8119b74:	4b0a      	ldr	r3, [pc, #40]	@ (8119ba0 <pbuf_cat+0x98>)
 8119b76:	f240 3263 	movw	r2, #867	@ 0x363
 8119b7a:	490d      	ldr	r1, [pc, #52]	@ (8119bb0 <pbuf_cat+0xa8>)
 8119b7c:	480a      	ldr	r0, [pc, #40]	@ (8119ba8 <pbuf_cat+0xa0>)
 8119b7e:	f008 f901 	bl	8121d84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8119b82:	68fb      	ldr	r3, [r7, #12]
 8119b84:	891a      	ldrh	r2, [r3, #8]
 8119b86:	683b      	ldr	r3, [r7, #0]
 8119b88:	891b      	ldrh	r3, [r3, #8]
 8119b8a:	4413      	add	r3, r2
 8119b8c:	b29a      	uxth	r2, r3
 8119b8e:	68fb      	ldr	r3, [r7, #12]
 8119b90:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8119b92:	68fb      	ldr	r3, [r7, #12]
 8119b94:	683a      	ldr	r2, [r7, #0]
 8119b96:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8119b98:	3710      	adds	r7, #16
 8119b9a:	46bd      	mov	sp, r7
 8119b9c:	bd80      	pop	{r7, pc}
 8119b9e:	bf00      	nop
 8119ba0:	08126904 	.word	0x08126904
 8119ba4:	08126b30 	.word	0x08126b30
 8119ba8:	0812699c 	.word	0x0812699c
 8119bac:	08126b68 	.word	0x08126b68
 8119bb0:	08126b98 	.word	0x08126b98

08119bb4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8119bb4:	b580      	push	{r7, lr}
 8119bb6:	b082      	sub	sp, #8
 8119bb8:	af00      	add	r7, sp, #0
 8119bba:	6078      	str	r0, [r7, #4]
 8119bbc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8119bbe:	6839      	ldr	r1, [r7, #0]
 8119bc0:	6878      	ldr	r0, [r7, #4]
 8119bc2:	f7ff ffa1 	bl	8119b08 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8119bc6:	6838      	ldr	r0, [r7, #0]
 8119bc8:	f7ff ff76 	bl	8119ab8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8119bcc:	bf00      	nop
 8119bce:	3708      	adds	r7, #8
 8119bd0:	46bd      	mov	sp, r7
 8119bd2:	bd80      	pop	{r7, pc}

08119bd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8119bd4:	b580      	push	{r7, lr}
 8119bd6:	b086      	sub	sp, #24
 8119bd8:	af00      	add	r7, sp, #0
 8119bda:	6078      	str	r0, [r7, #4]
 8119bdc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8119bde:	2300      	movs	r3, #0
 8119be0:	617b      	str	r3, [r7, #20]
 8119be2:	2300      	movs	r3, #0
 8119be4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8119be6:	687b      	ldr	r3, [r7, #4]
 8119be8:	2b00      	cmp	r3, #0
 8119bea:	d008      	beq.n	8119bfe <pbuf_copy+0x2a>
 8119bec:	683b      	ldr	r3, [r7, #0]
 8119bee:	2b00      	cmp	r3, #0
 8119bf0:	d005      	beq.n	8119bfe <pbuf_copy+0x2a>
 8119bf2:	687b      	ldr	r3, [r7, #4]
 8119bf4:	891a      	ldrh	r2, [r3, #8]
 8119bf6:	683b      	ldr	r3, [r7, #0]
 8119bf8:	891b      	ldrh	r3, [r3, #8]
 8119bfa:	429a      	cmp	r2, r3
 8119bfc:	d209      	bcs.n	8119c12 <pbuf_copy+0x3e>
 8119bfe:	4b57      	ldr	r3, [pc, #348]	@ (8119d5c <pbuf_copy+0x188>)
 8119c00:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8119c04:	4956      	ldr	r1, [pc, #344]	@ (8119d60 <pbuf_copy+0x18c>)
 8119c06:	4857      	ldr	r0, [pc, #348]	@ (8119d64 <pbuf_copy+0x190>)
 8119c08:	f008 f8bc 	bl	8121d84 <iprintf>
 8119c0c:	f06f 030f 	mvn.w	r3, #15
 8119c10:	e09f      	b.n	8119d52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8119c12:	687b      	ldr	r3, [r7, #4]
 8119c14:	895b      	ldrh	r3, [r3, #10]
 8119c16:	461a      	mov	r2, r3
 8119c18:	697b      	ldr	r3, [r7, #20]
 8119c1a:	1ad2      	subs	r2, r2, r3
 8119c1c:	683b      	ldr	r3, [r7, #0]
 8119c1e:	895b      	ldrh	r3, [r3, #10]
 8119c20:	4619      	mov	r1, r3
 8119c22:	693b      	ldr	r3, [r7, #16]
 8119c24:	1acb      	subs	r3, r1, r3
 8119c26:	429a      	cmp	r2, r3
 8119c28:	d306      	bcc.n	8119c38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8119c2a:	683b      	ldr	r3, [r7, #0]
 8119c2c:	895b      	ldrh	r3, [r3, #10]
 8119c2e:	461a      	mov	r2, r3
 8119c30:	693b      	ldr	r3, [r7, #16]
 8119c32:	1ad3      	subs	r3, r2, r3
 8119c34:	60fb      	str	r3, [r7, #12]
 8119c36:	e005      	b.n	8119c44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8119c38:	687b      	ldr	r3, [r7, #4]
 8119c3a:	895b      	ldrh	r3, [r3, #10]
 8119c3c:	461a      	mov	r2, r3
 8119c3e:	697b      	ldr	r3, [r7, #20]
 8119c40:	1ad3      	subs	r3, r2, r3
 8119c42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8119c44:	687b      	ldr	r3, [r7, #4]
 8119c46:	685a      	ldr	r2, [r3, #4]
 8119c48:	697b      	ldr	r3, [r7, #20]
 8119c4a:	18d0      	adds	r0, r2, r3
 8119c4c:	683b      	ldr	r3, [r7, #0]
 8119c4e:	685a      	ldr	r2, [r3, #4]
 8119c50:	693b      	ldr	r3, [r7, #16]
 8119c52:	4413      	add	r3, r2
 8119c54:	68fa      	ldr	r2, [r7, #12]
 8119c56:	4619      	mov	r1, r3
 8119c58:	f008 fb35 	bl	81222c6 <memcpy>
    offset_to += len;
 8119c5c:	697a      	ldr	r2, [r7, #20]
 8119c5e:	68fb      	ldr	r3, [r7, #12]
 8119c60:	4413      	add	r3, r2
 8119c62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8119c64:	693a      	ldr	r2, [r7, #16]
 8119c66:	68fb      	ldr	r3, [r7, #12]
 8119c68:	4413      	add	r3, r2
 8119c6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8119c6c:	687b      	ldr	r3, [r7, #4]
 8119c6e:	895b      	ldrh	r3, [r3, #10]
 8119c70:	461a      	mov	r2, r3
 8119c72:	697b      	ldr	r3, [r7, #20]
 8119c74:	4293      	cmp	r3, r2
 8119c76:	d906      	bls.n	8119c86 <pbuf_copy+0xb2>
 8119c78:	4b38      	ldr	r3, [pc, #224]	@ (8119d5c <pbuf_copy+0x188>)
 8119c7a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8119c7e:	493a      	ldr	r1, [pc, #232]	@ (8119d68 <pbuf_copy+0x194>)
 8119c80:	4838      	ldr	r0, [pc, #224]	@ (8119d64 <pbuf_copy+0x190>)
 8119c82:	f008 f87f 	bl	8121d84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8119c86:	683b      	ldr	r3, [r7, #0]
 8119c88:	895b      	ldrh	r3, [r3, #10]
 8119c8a:	461a      	mov	r2, r3
 8119c8c:	693b      	ldr	r3, [r7, #16]
 8119c8e:	4293      	cmp	r3, r2
 8119c90:	d906      	bls.n	8119ca0 <pbuf_copy+0xcc>
 8119c92:	4b32      	ldr	r3, [pc, #200]	@ (8119d5c <pbuf_copy+0x188>)
 8119c94:	f240 32da 	movw	r2, #986	@ 0x3da
 8119c98:	4934      	ldr	r1, [pc, #208]	@ (8119d6c <pbuf_copy+0x198>)
 8119c9a:	4832      	ldr	r0, [pc, #200]	@ (8119d64 <pbuf_copy+0x190>)
 8119c9c:	f008 f872 	bl	8121d84 <iprintf>
    if (offset_from >= p_from->len) {
 8119ca0:	683b      	ldr	r3, [r7, #0]
 8119ca2:	895b      	ldrh	r3, [r3, #10]
 8119ca4:	461a      	mov	r2, r3
 8119ca6:	693b      	ldr	r3, [r7, #16]
 8119ca8:	4293      	cmp	r3, r2
 8119caa:	d304      	bcc.n	8119cb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8119cac:	2300      	movs	r3, #0
 8119cae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8119cb0:	683b      	ldr	r3, [r7, #0]
 8119cb2:	681b      	ldr	r3, [r3, #0]
 8119cb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8119cb6:	687b      	ldr	r3, [r7, #4]
 8119cb8:	895b      	ldrh	r3, [r3, #10]
 8119cba:	461a      	mov	r2, r3
 8119cbc:	697b      	ldr	r3, [r7, #20]
 8119cbe:	4293      	cmp	r3, r2
 8119cc0:	d114      	bne.n	8119cec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8119cc2:	2300      	movs	r3, #0
 8119cc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8119cc6:	687b      	ldr	r3, [r7, #4]
 8119cc8:	681b      	ldr	r3, [r3, #0]
 8119cca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8119ccc:	687b      	ldr	r3, [r7, #4]
 8119cce:	2b00      	cmp	r3, #0
 8119cd0:	d10c      	bne.n	8119cec <pbuf_copy+0x118>
 8119cd2:	683b      	ldr	r3, [r7, #0]
 8119cd4:	2b00      	cmp	r3, #0
 8119cd6:	d009      	beq.n	8119cec <pbuf_copy+0x118>
 8119cd8:	4b20      	ldr	r3, [pc, #128]	@ (8119d5c <pbuf_copy+0x188>)
 8119cda:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8119cde:	4924      	ldr	r1, [pc, #144]	@ (8119d70 <pbuf_copy+0x19c>)
 8119ce0:	4820      	ldr	r0, [pc, #128]	@ (8119d64 <pbuf_copy+0x190>)
 8119ce2:	f008 f84f 	bl	8121d84 <iprintf>
 8119ce6:	f06f 030f 	mvn.w	r3, #15
 8119cea:	e032      	b.n	8119d52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8119cec:	683b      	ldr	r3, [r7, #0]
 8119cee:	2b00      	cmp	r3, #0
 8119cf0:	d013      	beq.n	8119d1a <pbuf_copy+0x146>
 8119cf2:	683b      	ldr	r3, [r7, #0]
 8119cf4:	895a      	ldrh	r2, [r3, #10]
 8119cf6:	683b      	ldr	r3, [r7, #0]
 8119cf8:	891b      	ldrh	r3, [r3, #8]
 8119cfa:	429a      	cmp	r2, r3
 8119cfc:	d10d      	bne.n	8119d1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8119cfe:	683b      	ldr	r3, [r7, #0]
 8119d00:	681b      	ldr	r3, [r3, #0]
 8119d02:	2b00      	cmp	r3, #0
 8119d04:	d009      	beq.n	8119d1a <pbuf_copy+0x146>
 8119d06:	4b15      	ldr	r3, [pc, #84]	@ (8119d5c <pbuf_copy+0x188>)
 8119d08:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8119d0c:	4919      	ldr	r1, [pc, #100]	@ (8119d74 <pbuf_copy+0x1a0>)
 8119d0e:	4815      	ldr	r0, [pc, #84]	@ (8119d64 <pbuf_copy+0x190>)
 8119d10:	f008 f838 	bl	8121d84 <iprintf>
 8119d14:	f06f 0305 	mvn.w	r3, #5
 8119d18:	e01b      	b.n	8119d52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8119d1a:	687b      	ldr	r3, [r7, #4]
 8119d1c:	2b00      	cmp	r3, #0
 8119d1e:	d013      	beq.n	8119d48 <pbuf_copy+0x174>
 8119d20:	687b      	ldr	r3, [r7, #4]
 8119d22:	895a      	ldrh	r2, [r3, #10]
 8119d24:	687b      	ldr	r3, [r7, #4]
 8119d26:	891b      	ldrh	r3, [r3, #8]
 8119d28:	429a      	cmp	r2, r3
 8119d2a:	d10d      	bne.n	8119d48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8119d2c:	687b      	ldr	r3, [r7, #4]
 8119d2e:	681b      	ldr	r3, [r3, #0]
 8119d30:	2b00      	cmp	r3, #0
 8119d32:	d009      	beq.n	8119d48 <pbuf_copy+0x174>
 8119d34:	4b09      	ldr	r3, [pc, #36]	@ (8119d5c <pbuf_copy+0x188>)
 8119d36:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8119d3a:	490e      	ldr	r1, [pc, #56]	@ (8119d74 <pbuf_copy+0x1a0>)
 8119d3c:	4809      	ldr	r0, [pc, #36]	@ (8119d64 <pbuf_copy+0x190>)
 8119d3e:	f008 f821 	bl	8121d84 <iprintf>
 8119d42:	f06f 0305 	mvn.w	r3, #5
 8119d46:	e004      	b.n	8119d52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8119d48:	683b      	ldr	r3, [r7, #0]
 8119d4a:	2b00      	cmp	r3, #0
 8119d4c:	f47f af61 	bne.w	8119c12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8119d50:	2300      	movs	r3, #0
}
 8119d52:	4618      	mov	r0, r3
 8119d54:	3718      	adds	r7, #24
 8119d56:	46bd      	mov	sp, r7
 8119d58:	bd80      	pop	{r7, pc}
 8119d5a:	bf00      	nop
 8119d5c:	08126904 	.word	0x08126904
 8119d60:	08126be4 	.word	0x08126be4
 8119d64:	0812699c 	.word	0x0812699c
 8119d68:	08126c14 	.word	0x08126c14
 8119d6c:	08126c2c 	.word	0x08126c2c
 8119d70:	08126c48 	.word	0x08126c48
 8119d74:	08126c58 	.word	0x08126c58

08119d78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8119d78:	b580      	push	{r7, lr}
 8119d7a:	b088      	sub	sp, #32
 8119d7c:	af00      	add	r7, sp, #0
 8119d7e:	60f8      	str	r0, [r7, #12]
 8119d80:	60b9      	str	r1, [r7, #8]
 8119d82:	4611      	mov	r1, r2
 8119d84:	461a      	mov	r2, r3
 8119d86:	460b      	mov	r3, r1
 8119d88:	80fb      	strh	r3, [r7, #6]
 8119d8a:	4613      	mov	r3, r2
 8119d8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8119d8e:	2300      	movs	r3, #0
 8119d90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8119d92:	2300      	movs	r3, #0
 8119d94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8119d96:	68fb      	ldr	r3, [r7, #12]
 8119d98:	2b00      	cmp	r3, #0
 8119d9a:	d108      	bne.n	8119dae <pbuf_copy_partial+0x36>
 8119d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8119e4c <pbuf_copy_partial+0xd4>)
 8119d9e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8119da2:	492b      	ldr	r1, [pc, #172]	@ (8119e50 <pbuf_copy_partial+0xd8>)
 8119da4:	482b      	ldr	r0, [pc, #172]	@ (8119e54 <pbuf_copy_partial+0xdc>)
 8119da6:	f007 ffed 	bl	8121d84 <iprintf>
 8119daa:	2300      	movs	r3, #0
 8119dac:	e04a      	b.n	8119e44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8119dae:	68bb      	ldr	r3, [r7, #8]
 8119db0:	2b00      	cmp	r3, #0
 8119db2:	d108      	bne.n	8119dc6 <pbuf_copy_partial+0x4e>
 8119db4:	4b25      	ldr	r3, [pc, #148]	@ (8119e4c <pbuf_copy_partial+0xd4>)
 8119db6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8119dba:	4927      	ldr	r1, [pc, #156]	@ (8119e58 <pbuf_copy_partial+0xe0>)
 8119dbc:	4825      	ldr	r0, [pc, #148]	@ (8119e54 <pbuf_copy_partial+0xdc>)
 8119dbe:	f007 ffe1 	bl	8121d84 <iprintf>
 8119dc2:	2300      	movs	r3, #0
 8119dc4:	e03e      	b.n	8119e44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8119dc6:	68fb      	ldr	r3, [r7, #12]
 8119dc8:	61fb      	str	r3, [r7, #28]
 8119dca:	e034      	b.n	8119e36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8119dcc:	88bb      	ldrh	r3, [r7, #4]
 8119dce:	2b00      	cmp	r3, #0
 8119dd0:	d00a      	beq.n	8119de8 <pbuf_copy_partial+0x70>
 8119dd2:	69fb      	ldr	r3, [r7, #28]
 8119dd4:	895b      	ldrh	r3, [r3, #10]
 8119dd6:	88ba      	ldrh	r2, [r7, #4]
 8119dd8:	429a      	cmp	r2, r3
 8119dda:	d305      	bcc.n	8119de8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8119ddc:	69fb      	ldr	r3, [r7, #28]
 8119dde:	895b      	ldrh	r3, [r3, #10]
 8119de0:	88ba      	ldrh	r2, [r7, #4]
 8119de2:	1ad3      	subs	r3, r2, r3
 8119de4:	80bb      	strh	r3, [r7, #4]
 8119de6:	e023      	b.n	8119e30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8119de8:	69fb      	ldr	r3, [r7, #28]
 8119dea:	895a      	ldrh	r2, [r3, #10]
 8119dec:	88bb      	ldrh	r3, [r7, #4]
 8119dee:	1ad3      	subs	r3, r2, r3
 8119df0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8119df2:	8b3a      	ldrh	r2, [r7, #24]
 8119df4:	88fb      	ldrh	r3, [r7, #6]
 8119df6:	429a      	cmp	r2, r3
 8119df8:	d901      	bls.n	8119dfe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8119dfa:	88fb      	ldrh	r3, [r7, #6]
 8119dfc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8119dfe:	8b7b      	ldrh	r3, [r7, #26]
 8119e00:	68ba      	ldr	r2, [r7, #8]
 8119e02:	18d0      	adds	r0, r2, r3
 8119e04:	69fb      	ldr	r3, [r7, #28]
 8119e06:	685a      	ldr	r2, [r3, #4]
 8119e08:	88bb      	ldrh	r3, [r7, #4]
 8119e0a:	4413      	add	r3, r2
 8119e0c:	8b3a      	ldrh	r2, [r7, #24]
 8119e0e:	4619      	mov	r1, r3
 8119e10:	f008 fa59 	bl	81222c6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8119e14:	8afa      	ldrh	r2, [r7, #22]
 8119e16:	8b3b      	ldrh	r3, [r7, #24]
 8119e18:	4413      	add	r3, r2
 8119e1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8119e1c:	8b7a      	ldrh	r2, [r7, #26]
 8119e1e:	8b3b      	ldrh	r3, [r7, #24]
 8119e20:	4413      	add	r3, r2
 8119e22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8119e24:	88fa      	ldrh	r2, [r7, #6]
 8119e26:	8b3b      	ldrh	r3, [r7, #24]
 8119e28:	1ad3      	subs	r3, r2, r3
 8119e2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8119e2c:	2300      	movs	r3, #0
 8119e2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8119e30:	69fb      	ldr	r3, [r7, #28]
 8119e32:	681b      	ldr	r3, [r3, #0]
 8119e34:	61fb      	str	r3, [r7, #28]
 8119e36:	88fb      	ldrh	r3, [r7, #6]
 8119e38:	2b00      	cmp	r3, #0
 8119e3a:	d002      	beq.n	8119e42 <pbuf_copy_partial+0xca>
 8119e3c:	69fb      	ldr	r3, [r7, #28]
 8119e3e:	2b00      	cmp	r3, #0
 8119e40:	d1c4      	bne.n	8119dcc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8119e42:	8afb      	ldrh	r3, [r7, #22]
}
 8119e44:	4618      	mov	r0, r3
 8119e46:	3720      	adds	r7, #32
 8119e48:	46bd      	mov	sp, r7
 8119e4a:	bd80      	pop	{r7, pc}
 8119e4c:	08126904 	.word	0x08126904
 8119e50:	08126c84 	.word	0x08126c84
 8119e54:	0812699c 	.word	0x0812699c
 8119e58:	08126ca4 	.word	0x08126ca4

08119e5c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8119e5c:	b480      	push	{r7}
 8119e5e:	b087      	sub	sp, #28
 8119e60:	af00      	add	r7, sp, #0
 8119e62:	60f8      	str	r0, [r7, #12]
 8119e64:	460b      	mov	r3, r1
 8119e66:	607a      	str	r2, [r7, #4]
 8119e68:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8119e6a:	897b      	ldrh	r3, [r7, #10]
 8119e6c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8119e6e:	68fb      	ldr	r3, [r7, #12]
 8119e70:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8119e72:	e007      	b.n	8119e84 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8119e74:	693b      	ldr	r3, [r7, #16]
 8119e76:	895b      	ldrh	r3, [r3, #10]
 8119e78:	8afa      	ldrh	r2, [r7, #22]
 8119e7a:	1ad3      	subs	r3, r2, r3
 8119e7c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8119e7e:	693b      	ldr	r3, [r7, #16]
 8119e80:	681b      	ldr	r3, [r3, #0]
 8119e82:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8119e84:	693b      	ldr	r3, [r7, #16]
 8119e86:	2b00      	cmp	r3, #0
 8119e88:	d004      	beq.n	8119e94 <pbuf_skip_const+0x38>
 8119e8a:	693b      	ldr	r3, [r7, #16]
 8119e8c:	895b      	ldrh	r3, [r3, #10]
 8119e8e:	8afa      	ldrh	r2, [r7, #22]
 8119e90:	429a      	cmp	r2, r3
 8119e92:	d2ef      	bcs.n	8119e74 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8119e94:	687b      	ldr	r3, [r7, #4]
 8119e96:	2b00      	cmp	r3, #0
 8119e98:	d002      	beq.n	8119ea0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8119e9a:	687b      	ldr	r3, [r7, #4]
 8119e9c:	8afa      	ldrh	r2, [r7, #22]
 8119e9e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8119ea0:	693b      	ldr	r3, [r7, #16]
}
 8119ea2:	4618      	mov	r0, r3
 8119ea4:	371c      	adds	r7, #28
 8119ea6:	46bd      	mov	sp, r7
 8119ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8119eac:	4770      	bx	lr
	...

08119eb0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8119eb0:	b580      	push	{r7, lr}
 8119eb2:	b084      	sub	sp, #16
 8119eb4:	af00      	add	r7, sp, #0
 8119eb6:	4603      	mov	r3, r0
 8119eb8:	603a      	str	r2, [r7, #0]
 8119eba:	71fb      	strb	r3, [r7, #7]
 8119ebc:	460b      	mov	r3, r1
 8119ebe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8119ec0:	683b      	ldr	r3, [r7, #0]
 8119ec2:	8919      	ldrh	r1, [r3, #8]
 8119ec4:	88ba      	ldrh	r2, [r7, #4]
 8119ec6:	79fb      	ldrb	r3, [r7, #7]
 8119ec8:	4618      	mov	r0, r3
 8119eca:	f7ff fa6d 	bl	81193a8 <pbuf_alloc>
 8119ece:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8119ed0:	68fb      	ldr	r3, [r7, #12]
 8119ed2:	2b00      	cmp	r3, #0
 8119ed4:	d101      	bne.n	8119eda <pbuf_clone+0x2a>
    return NULL;
 8119ed6:	2300      	movs	r3, #0
 8119ed8:	e011      	b.n	8119efe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8119eda:	6839      	ldr	r1, [r7, #0]
 8119edc:	68f8      	ldr	r0, [r7, #12]
 8119ede:	f7ff fe79 	bl	8119bd4 <pbuf_copy>
 8119ee2:	4603      	mov	r3, r0
 8119ee4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8119ee6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8119eea:	2b00      	cmp	r3, #0
 8119eec:	d006      	beq.n	8119efc <pbuf_clone+0x4c>
 8119eee:	4b06      	ldr	r3, [pc, #24]	@ (8119f08 <pbuf_clone+0x58>)
 8119ef0:	f240 5224 	movw	r2, #1316	@ 0x524
 8119ef4:	4905      	ldr	r1, [pc, #20]	@ (8119f0c <pbuf_clone+0x5c>)
 8119ef6:	4806      	ldr	r0, [pc, #24]	@ (8119f10 <pbuf_clone+0x60>)
 8119ef8:	f007 ff44 	bl	8121d84 <iprintf>
  return q;
 8119efc:	68fb      	ldr	r3, [r7, #12]
}
 8119efe:	4618      	mov	r0, r3
 8119f00:	3710      	adds	r7, #16
 8119f02:	46bd      	mov	sp, r7
 8119f04:	bd80      	pop	{r7, pc}
 8119f06:	bf00      	nop
 8119f08:	08126904 	.word	0x08126904
 8119f0c:	08126db0 	.word	0x08126db0
 8119f10:	0812699c 	.word	0x0812699c

08119f14 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8119f14:	b580      	push	{r7, lr}
 8119f16:	b084      	sub	sp, #16
 8119f18:	af00      	add	r7, sp, #0
 8119f1a:	6078      	str	r0, [r7, #4]
 8119f1c:	460b      	mov	r3, r1
 8119f1e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8119f20:	887b      	ldrh	r3, [r7, #2]
 8119f22:	4619      	mov	r1, r3
 8119f24:	6878      	ldr	r0, [r7, #4]
 8119f26:	f000 f80c 	bl	8119f42 <pbuf_try_get_at>
 8119f2a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8119f2c:	68fb      	ldr	r3, [r7, #12]
 8119f2e:	2b00      	cmp	r3, #0
 8119f30:	db02      	blt.n	8119f38 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8119f32:	68fb      	ldr	r3, [r7, #12]
 8119f34:	b2db      	uxtb	r3, r3
 8119f36:	e000      	b.n	8119f3a <pbuf_get_at+0x26>
  }
  return 0;
 8119f38:	2300      	movs	r3, #0
}
 8119f3a:	4618      	mov	r0, r3
 8119f3c:	3710      	adds	r7, #16
 8119f3e:	46bd      	mov	sp, r7
 8119f40:	bd80      	pop	{r7, pc}

08119f42 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8119f42:	b580      	push	{r7, lr}
 8119f44:	b084      	sub	sp, #16
 8119f46:	af00      	add	r7, sp, #0
 8119f48:	6078      	str	r0, [r7, #4]
 8119f4a:	460b      	mov	r3, r1
 8119f4c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8119f4e:	f107 020a 	add.w	r2, r7, #10
 8119f52:	887b      	ldrh	r3, [r7, #2]
 8119f54:	4619      	mov	r1, r3
 8119f56:	6878      	ldr	r0, [r7, #4]
 8119f58:	f7ff ff80 	bl	8119e5c <pbuf_skip_const>
 8119f5c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8119f5e:	68fb      	ldr	r3, [r7, #12]
 8119f60:	2b00      	cmp	r3, #0
 8119f62:	d00a      	beq.n	8119f7a <pbuf_try_get_at+0x38>
 8119f64:	68fb      	ldr	r3, [r7, #12]
 8119f66:	895a      	ldrh	r2, [r3, #10]
 8119f68:	897b      	ldrh	r3, [r7, #10]
 8119f6a:	429a      	cmp	r2, r3
 8119f6c:	d905      	bls.n	8119f7a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8119f6e:	68fb      	ldr	r3, [r7, #12]
 8119f70:	685b      	ldr	r3, [r3, #4]
 8119f72:	897a      	ldrh	r2, [r7, #10]
 8119f74:	4413      	add	r3, r2
 8119f76:	781b      	ldrb	r3, [r3, #0]
 8119f78:	e001      	b.n	8119f7e <pbuf_try_get_at+0x3c>
  }
  return -1;
 8119f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8119f7e:	4618      	mov	r0, r3
 8119f80:	3710      	adds	r7, #16
 8119f82:	46bd      	mov	sp, r7
 8119f84:	bd80      	pop	{r7, pc}

08119f86 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8119f86:	b580      	push	{r7, lr}
 8119f88:	b082      	sub	sp, #8
 8119f8a:	af00      	add	r7, sp, #0
 8119f8c:	6078      	str	r0, [r7, #4]
 8119f8e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8119f90:	683b      	ldr	r3, [r7, #0]
 8119f92:	2200      	movs	r2, #0
 8119f94:	2104      	movs	r1, #4
 8119f96:	4618      	mov	r0, r3
 8119f98:	f7f6 fade 	bl	8110558 <osMessageQueueNew>
 8119f9c:	4602      	mov	r2, r0
 8119f9e:	687b      	ldr	r3, [r7, #4]
 8119fa0:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8119fa2:	687b      	ldr	r3, [r7, #4]
 8119fa4:	681b      	ldr	r3, [r3, #0]
 8119fa6:	2b00      	cmp	r3, #0
 8119fa8:	d102      	bne.n	8119fb0 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8119faa:	f04f 33ff 	mov.w	r3, #4294967295
 8119fae:	e000      	b.n	8119fb2 <sys_mbox_new+0x2c>

  return ERR_OK;
 8119fb0:	2300      	movs	r3, #0
}
 8119fb2:	4618      	mov	r0, r3
 8119fb4:	3708      	adds	r7, #8
 8119fb6:	46bd      	mov	sp, r7
 8119fb8:	bd80      	pop	{r7, pc}

08119fba <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8119fba:	b580      	push	{r7, lr}
 8119fbc:	b084      	sub	sp, #16
 8119fbe:	af00      	add	r7, sp, #0
 8119fc0:	6078      	str	r0, [r7, #4]
 8119fc2:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8119fc4:	687b      	ldr	r3, [r7, #4]
 8119fc6:	6818      	ldr	r0, [r3, #0]
 8119fc8:	4639      	mov	r1, r7
 8119fca:	2300      	movs	r3, #0
 8119fcc:	2200      	movs	r2, #0
 8119fce:	f7f6 fb37 	bl	8110640 <osMessageQueuePut>
 8119fd2:	4603      	mov	r3, r0
 8119fd4:	2b00      	cmp	r3, #0
 8119fd6:	d102      	bne.n	8119fde <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8119fd8:	2300      	movs	r3, #0
 8119fda:	73fb      	strb	r3, [r7, #15]
 8119fdc:	e001      	b.n	8119fe2 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8119fde:	23ff      	movs	r3, #255	@ 0xff
 8119fe0:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8119fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8119fe6:	4618      	mov	r0, r3
 8119fe8:	3710      	adds	r7, #16
 8119fea:	46bd      	mov	sp, r7
 8119fec:	bd80      	pop	{r7, pc}

08119fee <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8119fee:	b580      	push	{r7, lr}
 8119ff0:	b086      	sub	sp, #24
 8119ff2:	af00      	add	r7, sp, #0
 8119ff4:	60f8      	str	r0, [r7, #12]
 8119ff6:	60b9      	str	r1, [r7, #8]
 8119ff8:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8119ffa:	f7f5 ffb1 	bl	810ff60 <osKernelGetTickCount>
 8119ffe:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 811a000:	687b      	ldr	r3, [r7, #4]
 811a002:	2b00      	cmp	r3, #0
 811a004:	d013      	beq.n	811a02e <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 811a006:	68fb      	ldr	r3, [r7, #12]
 811a008:	6818      	ldr	r0, [r3, #0]
 811a00a:	687b      	ldr	r3, [r7, #4]
 811a00c:	2200      	movs	r2, #0
 811a00e:	68b9      	ldr	r1, [r7, #8]
 811a010:	f7f6 fb76 	bl	8110700 <osMessageQueueGet>
 811a014:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 811a016:	693b      	ldr	r3, [r7, #16]
 811a018:	2b00      	cmp	r3, #0
 811a01a:	d105      	bne.n	811a028 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 811a01c:	f7f5 ffa0 	bl	810ff60 <osKernelGetTickCount>
 811a020:	4602      	mov	r2, r0
 811a022:	697b      	ldr	r3, [r7, #20]
 811a024:	1ad3      	subs	r3, r2, r3
 811a026:	e00f      	b.n	811a048 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 811a028:	f04f 33ff 	mov.w	r3, #4294967295
 811a02c:	e00c      	b.n	811a048 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 811a02e:	68fb      	ldr	r3, [r7, #12]
 811a030:	6818      	ldr	r0, [r3, #0]
 811a032:	f04f 33ff 	mov.w	r3, #4294967295
 811a036:	2200      	movs	r2, #0
 811a038:	68b9      	ldr	r1, [r7, #8]
 811a03a:	f7f6 fb61 	bl	8110700 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 811a03e:	f7f5 ff8f 	bl	810ff60 <osKernelGetTickCount>
 811a042:	4602      	mov	r2, r0
 811a044:	697b      	ldr	r3, [r7, #20]
 811a046:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 811a048:	4618      	mov	r0, r3
 811a04a:	3718      	adds	r7, #24
 811a04c:	46bd      	mov	sp, r7
 811a04e:	bd80      	pop	{r7, pc}

0811a050 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 811a050:	b480      	push	{r7}
 811a052:	b083      	sub	sp, #12
 811a054:	af00      	add	r7, sp, #0
 811a056:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 811a058:	687b      	ldr	r3, [r7, #4]
 811a05a:	681b      	ldr	r3, [r3, #0]
 811a05c:	2b00      	cmp	r3, #0
 811a05e:	d101      	bne.n	811a064 <sys_mbox_valid+0x14>
    return 0;
 811a060:	2300      	movs	r3, #0
 811a062:	e000      	b.n	811a066 <sys_mbox_valid+0x16>
  else
    return 1;
 811a064:	2301      	movs	r3, #1
}
 811a066:	4618      	mov	r0, r3
 811a068:	370c      	adds	r7, #12
 811a06a:	46bd      	mov	sp, r7
 811a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a070:	4770      	bx	lr
	...

0811a074 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 811a074:	b580      	push	{r7, lr}
 811a076:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 811a078:	2000      	movs	r0, #0
 811a07a:	f7f6 f83f 	bl	81100fc <osMutexNew>
 811a07e:	4603      	mov	r3, r0
 811a080:	4a01      	ldr	r2, [pc, #4]	@ (811a088 <sys_init+0x14>)
 811a082:	6013      	str	r3, [r2, #0]
#endif
}
 811a084:	bf00      	nop
 811a086:	bd80      	pop	{r7, pc}
 811a088:	2401269c 	.word	0x2401269c

0811a08c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 811a08c:	b580      	push	{r7, lr}
 811a08e:	b082      	sub	sp, #8
 811a090:	af00      	add	r7, sp, #0
 811a092:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 811a094:	2000      	movs	r0, #0
 811a096:	f7f6 f831 	bl	81100fc <osMutexNew>
 811a09a:	4602      	mov	r2, r0
 811a09c:	687b      	ldr	r3, [r7, #4]
 811a09e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 811a0a0:	687b      	ldr	r3, [r7, #4]
 811a0a2:	681b      	ldr	r3, [r3, #0]
 811a0a4:	2b00      	cmp	r3, #0
 811a0a6:	d102      	bne.n	811a0ae <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 811a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 811a0ac:	e000      	b.n	811a0b0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 811a0ae:	2300      	movs	r3, #0
}
 811a0b0:	4618      	mov	r0, r3
 811a0b2:	3708      	adds	r7, #8
 811a0b4:	46bd      	mov	sp, r7
 811a0b6:	bd80      	pop	{r7, pc}

0811a0b8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 811a0b8:	b580      	push	{r7, lr}
 811a0ba:	b082      	sub	sp, #8
 811a0bc:	af00      	add	r7, sp, #0
 811a0be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 811a0c0:	687b      	ldr	r3, [r7, #4]
 811a0c2:	681b      	ldr	r3, [r3, #0]
 811a0c4:	f04f 31ff 	mov.w	r1, #4294967295
 811a0c8:	4618      	mov	r0, r3
 811a0ca:	f7f6 f89d 	bl	8110208 <osMutexAcquire>
#endif
}
 811a0ce:	bf00      	nop
 811a0d0:	3708      	adds	r7, #8
 811a0d2:	46bd      	mov	sp, r7
 811a0d4:	bd80      	pop	{r7, pc}

0811a0d6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 811a0d6:	b580      	push	{r7, lr}
 811a0d8:	b082      	sub	sp, #8
 811a0da:	af00      	add	r7, sp, #0
 811a0dc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 811a0de:	687b      	ldr	r3, [r7, #4]
 811a0e0:	681b      	ldr	r3, [r3, #0]
 811a0e2:	4618      	mov	r0, r3
 811a0e4:	f7f6 f8db 	bl	811029e <osMutexRelease>
}
 811a0e8:	bf00      	nop
 811a0ea:	3708      	adds	r7, #8
 811a0ec:	46bd      	mov	sp, r7
 811a0ee:	bd80      	pop	{r7, pc}

0811a0f0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 811a0f0:	b580      	push	{r7, lr}
 811a0f2:	b08e      	sub	sp, #56	@ 0x38
 811a0f4:	af00      	add	r7, sp, #0
 811a0f6:	60f8      	str	r0, [r7, #12]
 811a0f8:	60b9      	str	r1, [r7, #8]
 811a0fa:	607a      	str	r2, [r7, #4]
 811a0fc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 811a0fe:	f107 0314 	add.w	r3, r7, #20
 811a102:	2224      	movs	r2, #36	@ 0x24
 811a104:	2100      	movs	r1, #0
 811a106:	4618      	mov	r0, r3
 811a108:	f007 ffe2 	bl	81220d0 <memset>
 811a10c:	68fb      	ldr	r3, [r7, #12]
 811a10e:	617b      	str	r3, [r7, #20]
 811a110:	683b      	ldr	r3, [r7, #0]
 811a112:	62bb      	str	r3, [r7, #40]	@ 0x28
 811a114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811a116:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 811a118:	f107 0314 	add.w	r3, r7, #20
 811a11c:	461a      	mov	r2, r3
 811a11e:	6879      	ldr	r1, [r7, #4]
 811a120:	68b8      	ldr	r0, [r7, #8]
 811a122:	f7f5 ff32 	bl	810ff8a <osThreadNew>
 811a126:	4603      	mov	r3, r0
#endif
}
 811a128:	4618      	mov	r0, r3
 811a12a:	3738      	adds	r7, #56	@ 0x38
 811a12c:	46bd      	mov	sp, r7
 811a12e:	bd80      	pop	{r7, pc}

0811a130 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 811a130:	b580      	push	{r7, lr}
 811a132:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 811a134:	4b04      	ldr	r3, [pc, #16]	@ (811a148 <sys_arch_protect+0x18>)
 811a136:	681b      	ldr	r3, [r3, #0]
 811a138:	f04f 31ff 	mov.w	r1, #4294967295
 811a13c:	4618      	mov	r0, r3
 811a13e:	f7f6 f863 	bl	8110208 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 811a142:	2301      	movs	r3, #1
}
 811a144:	4618      	mov	r0, r3
 811a146:	bd80      	pop	{r7, pc}
 811a148:	2401269c 	.word	0x2401269c

0811a14c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 811a14c:	b580      	push	{r7, lr}
 811a14e:	b082      	sub	sp, #8
 811a150:	af00      	add	r7, sp, #0
 811a152:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 811a154:	4b04      	ldr	r3, [pc, #16]	@ (811a168 <sys_arch_unprotect+0x1c>)
 811a156:	681b      	ldr	r3, [r3, #0]
 811a158:	4618      	mov	r0, r3
 811a15a:	f7f6 f8a0 	bl	811029e <osMutexRelease>
}
 811a15e:	bf00      	nop
 811a160:	3708      	adds	r7, #8
 811a162:	46bd      	mov	sp, r7
 811a164:	bd80      	pop	{r7, pc}
 811a166:	bf00      	nop
 811a168:	2401269c 	.word	0x2401269c

0811a16c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 811a16c:	b580      	push	{r7, lr}
 811a16e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811a170:	f007 f84e 	bl	8121210 <rand>
 811a174:	4603      	mov	r3, r0
 811a176:	b29b      	uxth	r3, r3
 811a178:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811a17c:	b29b      	uxth	r3, r3
 811a17e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811a182:	b29a      	uxth	r2, r3
 811a184:	4b01      	ldr	r3, [pc, #4]	@ (811a18c <tcp_init+0x20>)
 811a186:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811a188:	bf00      	nop
 811a18a:	bd80      	pop	{r7, pc}
 811a18c:	24000048 	.word	0x24000048

0811a190 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 811a190:	b580      	push	{r7, lr}
 811a192:	b082      	sub	sp, #8
 811a194:	af00      	add	r7, sp, #0
 811a196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 811a198:	687b      	ldr	r3, [r7, #4]
 811a19a:	7d1b      	ldrb	r3, [r3, #20]
 811a19c:	2b01      	cmp	r3, #1
 811a19e:	d105      	bne.n	811a1ac <tcp_free+0x1c>
 811a1a0:	4b06      	ldr	r3, [pc, #24]	@ (811a1bc <tcp_free+0x2c>)
 811a1a2:	22d4      	movs	r2, #212	@ 0xd4
 811a1a4:	4906      	ldr	r1, [pc, #24]	@ (811a1c0 <tcp_free+0x30>)
 811a1a6:	4807      	ldr	r0, [pc, #28]	@ (811a1c4 <tcp_free+0x34>)
 811a1a8:	f007 fdec 	bl	8121d84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 811a1ac:	6879      	ldr	r1, [r7, #4]
 811a1ae:	2001      	movs	r0, #1
 811a1b0:	f7fc fea2 	bl	8116ef8 <memp_free>
}
 811a1b4:	bf00      	nop
 811a1b6:	3708      	adds	r7, #8
 811a1b8:	46bd      	mov	sp, r7
 811a1ba:	bd80      	pop	{r7, pc}
 811a1bc:	08126e3c 	.word	0x08126e3c
 811a1c0:	08126ea4 	.word	0x08126ea4
 811a1c4:	08126eb8 	.word	0x08126eb8

0811a1c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 811a1c8:	b580      	push	{r7, lr}
 811a1ca:	b082      	sub	sp, #8
 811a1cc:	af00      	add	r7, sp, #0
 811a1ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 811a1d0:	687b      	ldr	r3, [r7, #4]
 811a1d2:	7d1b      	ldrb	r3, [r3, #20]
 811a1d4:	2b01      	cmp	r3, #1
 811a1d6:	d105      	bne.n	811a1e4 <tcp_free_listen+0x1c>
 811a1d8:	4b06      	ldr	r3, [pc, #24]	@ (811a1f4 <tcp_free_listen+0x2c>)
 811a1da:	22df      	movs	r2, #223	@ 0xdf
 811a1dc:	4906      	ldr	r1, [pc, #24]	@ (811a1f8 <tcp_free_listen+0x30>)
 811a1de:	4807      	ldr	r0, [pc, #28]	@ (811a1fc <tcp_free_listen+0x34>)
 811a1e0:	f007 fdd0 	bl	8121d84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 811a1e4:	6879      	ldr	r1, [r7, #4]
 811a1e6:	2002      	movs	r0, #2
 811a1e8:	f7fc fe86 	bl	8116ef8 <memp_free>
}
 811a1ec:	bf00      	nop
 811a1ee:	3708      	adds	r7, #8
 811a1f0:	46bd      	mov	sp, r7
 811a1f2:	bd80      	pop	{r7, pc}
 811a1f4:	08126e3c 	.word	0x08126e3c
 811a1f8:	08126ee0 	.word	0x08126ee0
 811a1fc:	08126eb8 	.word	0x08126eb8

0811a200 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 811a200:	b580      	push	{r7, lr}
 811a202:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 811a204:	f001 f8a4 	bl	811b350 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 811a208:	4b07      	ldr	r3, [pc, #28]	@ (811a228 <tcp_tmr+0x28>)
 811a20a:	781b      	ldrb	r3, [r3, #0]
 811a20c:	3301      	adds	r3, #1
 811a20e:	b2da      	uxtb	r2, r3
 811a210:	4b05      	ldr	r3, [pc, #20]	@ (811a228 <tcp_tmr+0x28>)
 811a212:	701a      	strb	r2, [r3, #0]
 811a214:	4b04      	ldr	r3, [pc, #16]	@ (811a228 <tcp_tmr+0x28>)
 811a216:	781b      	ldrb	r3, [r3, #0]
 811a218:	f003 0301 	and.w	r3, r3, #1
 811a21c:	2b00      	cmp	r3, #0
 811a21e:	d001      	beq.n	811a224 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 811a220:	f000 fd54 	bl	811accc <tcp_slowtmr>
  }
}
 811a224:	bf00      	nop
 811a226:	bd80      	pop	{r7, pc}
 811a228:	240126b5 	.word	0x240126b5

0811a22c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 811a22c:	b580      	push	{r7, lr}
 811a22e:	b084      	sub	sp, #16
 811a230:	af00      	add	r7, sp, #0
 811a232:	6078      	str	r0, [r7, #4]
 811a234:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 811a236:	683b      	ldr	r3, [r7, #0]
 811a238:	2b00      	cmp	r3, #0
 811a23a:	d105      	bne.n	811a248 <tcp_remove_listener+0x1c>
 811a23c:	4b0d      	ldr	r3, [pc, #52]	@ (811a274 <tcp_remove_listener+0x48>)
 811a23e:	22ff      	movs	r2, #255	@ 0xff
 811a240:	490d      	ldr	r1, [pc, #52]	@ (811a278 <tcp_remove_listener+0x4c>)
 811a242:	480e      	ldr	r0, [pc, #56]	@ (811a27c <tcp_remove_listener+0x50>)
 811a244:	f007 fd9e 	bl	8121d84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811a248:	687b      	ldr	r3, [r7, #4]
 811a24a:	60fb      	str	r3, [r7, #12]
 811a24c:	e00a      	b.n	811a264 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 811a24e:	68fb      	ldr	r3, [r7, #12]
 811a250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811a252:	683a      	ldr	r2, [r7, #0]
 811a254:	429a      	cmp	r2, r3
 811a256:	d102      	bne.n	811a25e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 811a258:	68fb      	ldr	r3, [r7, #12]
 811a25a:	2200      	movs	r2, #0
 811a25c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 811a25e:	68fb      	ldr	r3, [r7, #12]
 811a260:	68db      	ldr	r3, [r3, #12]
 811a262:	60fb      	str	r3, [r7, #12]
 811a264:	68fb      	ldr	r3, [r7, #12]
 811a266:	2b00      	cmp	r3, #0
 811a268:	d1f1      	bne.n	811a24e <tcp_remove_listener+0x22>
    }
  }
}
 811a26a:	bf00      	nop
 811a26c:	bf00      	nop
 811a26e:	3710      	adds	r7, #16
 811a270:	46bd      	mov	sp, r7
 811a272:	bd80      	pop	{r7, pc}
 811a274:	08126e3c 	.word	0x08126e3c
 811a278:	08126efc 	.word	0x08126efc
 811a27c:	08126eb8 	.word	0x08126eb8

0811a280 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 811a280:	b580      	push	{r7, lr}
 811a282:	b084      	sub	sp, #16
 811a284:	af00      	add	r7, sp, #0
 811a286:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811a288:	687b      	ldr	r3, [r7, #4]
 811a28a:	2b00      	cmp	r3, #0
 811a28c:	d106      	bne.n	811a29c <tcp_listen_closed+0x1c>
 811a28e:	4b14      	ldr	r3, [pc, #80]	@ (811a2e0 <tcp_listen_closed+0x60>)
 811a290:	f240 1211 	movw	r2, #273	@ 0x111
 811a294:	4913      	ldr	r1, [pc, #76]	@ (811a2e4 <tcp_listen_closed+0x64>)
 811a296:	4814      	ldr	r0, [pc, #80]	@ (811a2e8 <tcp_listen_closed+0x68>)
 811a298:	f007 fd74 	bl	8121d84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 811a29c:	687b      	ldr	r3, [r7, #4]
 811a29e:	7d1b      	ldrb	r3, [r3, #20]
 811a2a0:	2b01      	cmp	r3, #1
 811a2a2:	d006      	beq.n	811a2b2 <tcp_listen_closed+0x32>
 811a2a4:	4b0e      	ldr	r3, [pc, #56]	@ (811a2e0 <tcp_listen_closed+0x60>)
 811a2a6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 811a2aa:	4910      	ldr	r1, [pc, #64]	@ (811a2ec <tcp_listen_closed+0x6c>)
 811a2ac:	480e      	ldr	r0, [pc, #56]	@ (811a2e8 <tcp_listen_closed+0x68>)
 811a2ae:	f007 fd69 	bl	8121d84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811a2b2:	2301      	movs	r3, #1
 811a2b4:	60fb      	str	r3, [r7, #12]
 811a2b6:	e00b      	b.n	811a2d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 811a2b8:	4a0d      	ldr	r2, [pc, #52]	@ (811a2f0 <tcp_listen_closed+0x70>)
 811a2ba:	68fb      	ldr	r3, [r7, #12]
 811a2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811a2c0:	681b      	ldr	r3, [r3, #0]
 811a2c2:	6879      	ldr	r1, [r7, #4]
 811a2c4:	4618      	mov	r0, r3
 811a2c6:	f7ff ffb1 	bl	811a22c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811a2ca:	68fb      	ldr	r3, [r7, #12]
 811a2cc:	3301      	adds	r3, #1
 811a2ce:	60fb      	str	r3, [r7, #12]
 811a2d0:	68fb      	ldr	r3, [r7, #12]
 811a2d2:	2b03      	cmp	r3, #3
 811a2d4:	d9f0      	bls.n	811a2b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 811a2d6:	bf00      	nop
 811a2d8:	bf00      	nop
 811a2da:	3710      	adds	r7, #16
 811a2dc:	46bd      	mov	sp, r7
 811a2de:	bd80      	pop	{r7, pc}
 811a2e0:	08126e3c 	.word	0x08126e3c
 811a2e4:	08126f24 	.word	0x08126f24
 811a2e8:	08126eb8 	.word	0x08126eb8
 811a2ec:	08126f30 	.word	0x08126f30
 811a2f0:	08128a4c 	.word	0x08128a4c

0811a2f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 811a2f4:	b5b0      	push	{r4, r5, r7, lr}
 811a2f6:	b088      	sub	sp, #32
 811a2f8:	af04      	add	r7, sp, #16
 811a2fa:	6078      	str	r0, [r7, #4]
 811a2fc:	460b      	mov	r3, r1
 811a2fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 811a300:	687b      	ldr	r3, [r7, #4]
 811a302:	2b00      	cmp	r3, #0
 811a304:	d106      	bne.n	811a314 <tcp_close_shutdown+0x20>
 811a306:	4b63      	ldr	r3, [pc, #396]	@ (811a494 <tcp_close_shutdown+0x1a0>)
 811a308:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 811a30c:	4962      	ldr	r1, [pc, #392]	@ (811a498 <tcp_close_shutdown+0x1a4>)
 811a30e:	4863      	ldr	r0, [pc, #396]	@ (811a49c <tcp_close_shutdown+0x1a8>)
 811a310:	f007 fd38 	bl	8121d84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 811a314:	78fb      	ldrb	r3, [r7, #3]
 811a316:	2b00      	cmp	r3, #0
 811a318:	d066      	beq.n	811a3e8 <tcp_close_shutdown+0xf4>
 811a31a:	687b      	ldr	r3, [r7, #4]
 811a31c:	7d1b      	ldrb	r3, [r3, #20]
 811a31e:	2b04      	cmp	r3, #4
 811a320:	d003      	beq.n	811a32a <tcp_close_shutdown+0x36>
 811a322:	687b      	ldr	r3, [r7, #4]
 811a324:	7d1b      	ldrb	r3, [r3, #20]
 811a326:	2b07      	cmp	r3, #7
 811a328:	d15e      	bne.n	811a3e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 811a32a:	687b      	ldr	r3, [r7, #4]
 811a32c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811a32e:	2b00      	cmp	r3, #0
 811a330:	d104      	bne.n	811a33c <tcp_close_shutdown+0x48>
 811a332:	687b      	ldr	r3, [r7, #4]
 811a334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a336:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811a33a:	d055      	beq.n	811a3e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 811a33c:	687b      	ldr	r3, [r7, #4]
 811a33e:	8b5b      	ldrh	r3, [r3, #26]
 811a340:	f003 0310 	and.w	r3, r3, #16
 811a344:	2b00      	cmp	r3, #0
 811a346:	d106      	bne.n	811a356 <tcp_close_shutdown+0x62>
 811a348:	4b52      	ldr	r3, [pc, #328]	@ (811a494 <tcp_close_shutdown+0x1a0>)
 811a34a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 811a34e:	4954      	ldr	r1, [pc, #336]	@ (811a4a0 <tcp_close_shutdown+0x1ac>)
 811a350:	4852      	ldr	r0, [pc, #328]	@ (811a49c <tcp_close_shutdown+0x1a8>)
 811a352:	f007 fd17 	bl	8121d84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811a356:	687b      	ldr	r3, [r7, #4]
 811a358:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811a35a:	687b      	ldr	r3, [r7, #4]
 811a35c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811a35e:	687d      	ldr	r5, [r7, #4]
 811a360:	687b      	ldr	r3, [r7, #4]
 811a362:	3304      	adds	r3, #4
 811a364:	687a      	ldr	r2, [r7, #4]
 811a366:	8ad2      	ldrh	r2, [r2, #22]
 811a368:	6879      	ldr	r1, [r7, #4]
 811a36a:	8b09      	ldrh	r1, [r1, #24]
 811a36c:	9102      	str	r1, [sp, #8]
 811a36e:	9201      	str	r2, [sp, #4]
 811a370:	9300      	str	r3, [sp, #0]
 811a372:	462b      	mov	r3, r5
 811a374:	4622      	mov	r2, r4
 811a376:	4601      	mov	r1, r0
 811a378:	6878      	ldr	r0, [r7, #4]
 811a37a:	f005 fdab 	bl	811fed4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 811a37e:	6878      	ldr	r0, [r7, #4]
 811a380:	f001 fb88 	bl	811ba94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 811a384:	4b47      	ldr	r3, [pc, #284]	@ (811a4a4 <tcp_close_shutdown+0x1b0>)
 811a386:	681b      	ldr	r3, [r3, #0]
 811a388:	687a      	ldr	r2, [r7, #4]
 811a38a:	429a      	cmp	r2, r3
 811a38c:	d105      	bne.n	811a39a <tcp_close_shutdown+0xa6>
 811a38e:	4b45      	ldr	r3, [pc, #276]	@ (811a4a4 <tcp_close_shutdown+0x1b0>)
 811a390:	681b      	ldr	r3, [r3, #0]
 811a392:	68db      	ldr	r3, [r3, #12]
 811a394:	4a43      	ldr	r2, [pc, #268]	@ (811a4a4 <tcp_close_shutdown+0x1b0>)
 811a396:	6013      	str	r3, [r2, #0]
 811a398:	e013      	b.n	811a3c2 <tcp_close_shutdown+0xce>
 811a39a:	4b42      	ldr	r3, [pc, #264]	@ (811a4a4 <tcp_close_shutdown+0x1b0>)
 811a39c:	681b      	ldr	r3, [r3, #0]
 811a39e:	60fb      	str	r3, [r7, #12]
 811a3a0:	e00c      	b.n	811a3bc <tcp_close_shutdown+0xc8>
 811a3a2:	68fb      	ldr	r3, [r7, #12]
 811a3a4:	68db      	ldr	r3, [r3, #12]
 811a3a6:	687a      	ldr	r2, [r7, #4]
 811a3a8:	429a      	cmp	r2, r3
 811a3aa:	d104      	bne.n	811a3b6 <tcp_close_shutdown+0xc2>
 811a3ac:	687b      	ldr	r3, [r7, #4]
 811a3ae:	68da      	ldr	r2, [r3, #12]
 811a3b0:	68fb      	ldr	r3, [r7, #12]
 811a3b2:	60da      	str	r2, [r3, #12]
 811a3b4:	e005      	b.n	811a3c2 <tcp_close_shutdown+0xce>
 811a3b6:	68fb      	ldr	r3, [r7, #12]
 811a3b8:	68db      	ldr	r3, [r3, #12]
 811a3ba:	60fb      	str	r3, [r7, #12]
 811a3bc:	68fb      	ldr	r3, [r7, #12]
 811a3be:	2b00      	cmp	r3, #0
 811a3c0:	d1ef      	bne.n	811a3a2 <tcp_close_shutdown+0xae>
 811a3c2:	687b      	ldr	r3, [r7, #4]
 811a3c4:	2200      	movs	r2, #0
 811a3c6:	60da      	str	r2, [r3, #12]
 811a3c8:	4b37      	ldr	r3, [pc, #220]	@ (811a4a8 <tcp_close_shutdown+0x1b4>)
 811a3ca:	2201      	movs	r2, #1
 811a3cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 811a3ce:	4b37      	ldr	r3, [pc, #220]	@ (811a4ac <tcp_close_shutdown+0x1b8>)
 811a3d0:	681b      	ldr	r3, [r3, #0]
 811a3d2:	687a      	ldr	r2, [r7, #4]
 811a3d4:	429a      	cmp	r2, r3
 811a3d6:	d102      	bne.n	811a3de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 811a3d8:	f004 f81e 	bl	811e418 <tcp_trigger_input_pcb_close>
 811a3dc:	e002      	b.n	811a3e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 811a3de:	6878      	ldr	r0, [r7, #4]
 811a3e0:	f7ff fed6 	bl	811a190 <tcp_free>
      }
      return ERR_OK;
 811a3e4:	2300      	movs	r3, #0
 811a3e6:	e050      	b.n	811a48a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 811a3e8:	687b      	ldr	r3, [r7, #4]
 811a3ea:	7d1b      	ldrb	r3, [r3, #20]
 811a3ec:	2b02      	cmp	r3, #2
 811a3ee:	d03b      	beq.n	811a468 <tcp_close_shutdown+0x174>
 811a3f0:	2b02      	cmp	r3, #2
 811a3f2:	dc44      	bgt.n	811a47e <tcp_close_shutdown+0x18a>
 811a3f4:	2b00      	cmp	r3, #0
 811a3f6:	d002      	beq.n	811a3fe <tcp_close_shutdown+0x10a>
 811a3f8:	2b01      	cmp	r3, #1
 811a3fa:	d02a      	beq.n	811a452 <tcp_close_shutdown+0x15e>
 811a3fc:	e03f      	b.n	811a47e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 811a3fe:	687b      	ldr	r3, [r7, #4]
 811a400:	8adb      	ldrh	r3, [r3, #22]
 811a402:	2b00      	cmp	r3, #0
 811a404:	d021      	beq.n	811a44a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811a406:	4b2a      	ldr	r3, [pc, #168]	@ (811a4b0 <tcp_close_shutdown+0x1bc>)
 811a408:	681b      	ldr	r3, [r3, #0]
 811a40a:	687a      	ldr	r2, [r7, #4]
 811a40c:	429a      	cmp	r2, r3
 811a40e:	d105      	bne.n	811a41c <tcp_close_shutdown+0x128>
 811a410:	4b27      	ldr	r3, [pc, #156]	@ (811a4b0 <tcp_close_shutdown+0x1bc>)
 811a412:	681b      	ldr	r3, [r3, #0]
 811a414:	68db      	ldr	r3, [r3, #12]
 811a416:	4a26      	ldr	r2, [pc, #152]	@ (811a4b0 <tcp_close_shutdown+0x1bc>)
 811a418:	6013      	str	r3, [r2, #0]
 811a41a:	e013      	b.n	811a444 <tcp_close_shutdown+0x150>
 811a41c:	4b24      	ldr	r3, [pc, #144]	@ (811a4b0 <tcp_close_shutdown+0x1bc>)
 811a41e:	681b      	ldr	r3, [r3, #0]
 811a420:	60bb      	str	r3, [r7, #8]
 811a422:	e00c      	b.n	811a43e <tcp_close_shutdown+0x14a>
 811a424:	68bb      	ldr	r3, [r7, #8]
 811a426:	68db      	ldr	r3, [r3, #12]
 811a428:	687a      	ldr	r2, [r7, #4]
 811a42a:	429a      	cmp	r2, r3
 811a42c:	d104      	bne.n	811a438 <tcp_close_shutdown+0x144>
 811a42e:	687b      	ldr	r3, [r7, #4]
 811a430:	68da      	ldr	r2, [r3, #12]
 811a432:	68bb      	ldr	r3, [r7, #8]
 811a434:	60da      	str	r2, [r3, #12]
 811a436:	e005      	b.n	811a444 <tcp_close_shutdown+0x150>
 811a438:	68bb      	ldr	r3, [r7, #8]
 811a43a:	68db      	ldr	r3, [r3, #12]
 811a43c:	60bb      	str	r3, [r7, #8]
 811a43e:	68bb      	ldr	r3, [r7, #8]
 811a440:	2b00      	cmp	r3, #0
 811a442:	d1ef      	bne.n	811a424 <tcp_close_shutdown+0x130>
 811a444:	687b      	ldr	r3, [r7, #4]
 811a446:	2200      	movs	r2, #0
 811a448:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 811a44a:	6878      	ldr	r0, [r7, #4]
 811a44c:	f7ff fea0 	bl	811a190 <tcp_free>
      break;
 811a450:	e01a      	b.n	811a488 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 811a452:	6878      	ldr	r0, [r7, #4]
 811a454:	f7ff ff14 	bl	811a280 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 811a458:	6879      	ldr	r1, [r7, #4]
 811a45a:	4816      	ldr	r0, [pc, #88]	@ (811a4b4 <tcp_close_shutdown+0x1c0>)
 811a45c:	f001 fb6a 	bl	811bb34 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 811a460:	6878      	ldr	r0, [r7, #4]
 811a462:	f7ff feb1 	bl	811a1c8 <tcp_free_listen>
      break;
 811a466:	e00f      	b.n	811a488 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811a468:	6879      	ldr	r1, [r7, #4]
 811a46a:	480e      	ldr	r0, [pc, #56]	@ (811a4a4 <tcp_close_shutdown+0x1b0>)
 811a46c:	f001 fb62 	bl	811bb34 <tcp_pcb_remove>
 811a470:	4b0d      	ldr	r3, [pc, #52]	@ (811a4a8 <tcp_close_shutdown+0x1b4>)
 811a472:	2201      	movs	r2, #1
 811a474:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 811a476:	6878      	ldr	r0, [r7, #4]
 811a478:	f7ff fe8a 	bl	811a190 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 811a47c:	e004      	b.n	811a488 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 811a47e:	6878      	ldr	r0, [r7, #4]
 811a480:	f000 f81a 	bl	811a4b8 <tcp_close_shutdown_fin>
 811a484:	4603      	mov	r3, r0
 811a486:	e000      	b.n	811a48a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 811a488:	2300      	movs	r3, #0
}
 811a48a:	4618      	mov	r0, r3
 811a48c:	3710      	adds	r7, #16
 811a48e:	46bd      	mov	sp, r7
 811a490:	bdb0      	pop	{r4, r5, r7, pc}
 811a492:	bf00      	nop
 811a494:	08126e3c 	.word	0x08126e3c
 811a498:	08126f48 	.word	0x08126f48
 811a49c:	08126eb8 	.word	0x08126eb8
 811a4a0:	08126f68 	.word	0x08126f68
 811a4a4:	240126ac 	.word	0x240126ac
 811a4a8:	240126b4 	.word	0x240126b4
 811a4ac:	240126ec 	.word	0x240126ec
 811a4b0:	240126a4 	.word	0x240126a4
 811a4b4:	240126a8 	.word	0x240126a8

0811a4b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 811a4b8:	b580      	push	{r7, lr}
 811a4ba:	b084      	sub	sp, #16
 811a4bc:	af00      	add	r7, sp, #0
 811a4be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811a4c0:	687b      	ldr	r3, [r7, #4]
 811a4c2:	2b00      	cmp	r3, #0
 811a4c4:	d106      	bne.n	811a4d4 <tcp_close_shutdown_fin+0x1c>
 811a4c6:	4b2e      	ldr	r3, [pc, #184]	@ (811a580 <tcp_close_shutdown_fin+0xc8>)
 811a4c8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 811a4cc:	492d      	ldr	r1, [pc, #180]	@ (811a584 <tcp_close_shutdown_fin+0xcc>)
 811a4ce:	482e      	ldr	r0, [pc, #184]	@ (811a588 <tcp_close_shutdown_fin+0xd0>)
 811a4d0:	f007 fc58 	bl	8121d84 <iprintf>

  switch (pcb->state) {
 811a4d4:	687b      	ldr	r3, [r7, #4]
 811a4d6:	7d1b      	ldrb	r3, [r3, #20]
 811a4d8:	2b07      	cmp	r3, #7
 811a4da:	d020      	beq.n	811a51e <tcp_close_shutdown_fin+0x66>
 811a4dc:	2b07      	cmp	r3, #7
 811a4de:	dc2b      	bgt.n	811a538 <tcp_close_shutdown_fin+0x80>
 811a4e0:	2b03      	cmp	r3, #3
 811a4e2:	d002      	beq.n	811a4ea <tcp_close_shutdown_fin+0x32>
 811a4e4:	2b04      	cmp	r3, #4
 811a4e6:	d00d      	beq.n	811a504 <tcp_close_shutdown_fin+0x4c>
 811a4e8:	e026      	b.n	811a538 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 811a4ea:	6878      	ldr	r0, [r7, #4]
 811a4ec:	f004 fdfe 	bl	811f0ec <tcp_send_fin>
 811a4f0:	4603      	mov	r3, r0
 811a4f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811a4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a4f8:	2b00      	cmp	r3, #0
 811a4fa:	d11f      	bne.n	811a53c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 811a4fc:	687b      	ldr	r3, [r7, #4]
 811a4fe:	2205      	movs	r2, #5
 811a500:	751a      	strb	r2, [r3, #20]
      }
      break;
 811a502:	e01b      	b.n	811a53c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 811a504:	6878      	ldr	r0, [r7, #4]
 811a506:	f004 fdf1 	bl	811f0ec <tcp_send_fin>
 811a50a:	4603      	mov	r3, r0
 811a50c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811a50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a512:	2b00      	cmp	r3, #0
 811a514:	d114      	bne.n	811a540 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 811a516:	687b      	ldr	r3, [r7, #4]
 811a518:	2205      	movs	r2, #5
 811a51a:	751a      	strb	r2, [r3, #20]
      }
      break;
 811a51c:	e010      	b.n	811a540 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 811a51e:	6878      	ldr	r0, [r7, #4]
 811a520:	f004 fde4 	bl	811f0ec <tcp_send_fin>
 811a524:	4603      	mov	r3, r0
 811a526:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811a528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a52c:	2b00      	cmp	r3, #0
 811a52e:	d109      	bne.n	811a544 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 811a530:	687b      	ldr	r3, [r7, #4]
 811a532:	2209      	movs	r2, #9
 811a534:	751a      	strb	r2, [r3, #20]
      }
      break;
 811a536:	e005      	b.n	811a544 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 811a538:	2300      	movs	r3, #0
 811a53a:	e01c      	b.n	811a576 <tcp_close_shutdown_fin+0xbe>
      break;
 811a53c:	bf00      	nop
 811a53e:	e002      	b.n	811a546 <tcp_close_shutdown_fin+0x8e>
      break;
 811a540:	bf00      	nop
 811a542:	e000      	b.n	811a546 <tcp_close_shutdown_fin+0x8e>
      break;
 811a544:	bf00      	nop
  }

  if (err == ERR_OK) {
 811a546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a54a:	2b00      	cmp	r3, #0
 811a54c:	d103      	bne.n	811a556 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 811a54e:	6878      	ldr	r0, [r7, #4]
 811a550:	f004 ff0a 	bl	811f368 <tcp_output>
 811a554:	e00d      	b.n	811a572 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 811a556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811a55e:	d108      	bne.n	811a572 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 811a560:	687b      	ldr	r3, [r7, #4]
 811a562:	8b5b      	ldrh	r3, [r3, #26]
 811a564:	f043 0308 	orr.w	r3, r3, #8
 811a568:	b29a      	uxth	r2, r3
 811a56a:	687b      	ldr	r3, [r7, #4]
 811a56c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 811a56e:	2300      	movs	r3, #0
 811a570:	e001      	b.n	811a576 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 811a572:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811a576:	4618      	mov	r0, r3
 811a578:	3710      	adds	r7, #16
 811a57a:	46bd      	mov	sp, r7
 811a57c:	bd80      	pop	{r7, pc}
 811a57e:	bf00      	nop
 811a580:	08126e3c 	.word	0x08126e3c
 811a584:	08126f24 	.word	0x08126f24
 811a588:	08126eb8 	.word	0x08126eb8

0811a58c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 811a58c:	b580      	push	{r7, lr}
 811a58e:	b082      	sub	sp, #8
 811a590:	af00      	add	r7, sp, #0
 811a592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 811a594:	f7f5 fc14 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 811a598:	687b      	ldr	r3, [r7, #4]
 811a59a:	2b00      	cmp	r3, #0
 811a59c:	d109      	bne.n	811a5b2 <tcp_close+0x26>
 811a59e:	4b0f      	ldr	r3, [pc, #60]	@ (811a5dc <tcp_close+0x50>)
 811a5a0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 811a5a4:	490e      	ldr	r1, [pc, #56]	@ (811a5e0 <tcp_close+0x54>)
 811a5a6:	480f      	ldr	r0, [pc, #60]	@ (811a5e4 <tcp_close+0x58>)
 811a5a8:	f007 fbec 	bl	8121d84 <iprintf>
 811a5ac:	f06f 030f 	mvn.w	r3, #15
 811a5b0:	e00f      	b.n	811a5d2 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 811a5b2:	687b      	ldr	r3, [r7, #4]
 811a5b4:	7d1b      	ldrb	r3, [r3, #20]
 811a5b6:	2b01      	cmp	r3, #1
 811a5b8:	d006      	beq.n	811a5c8 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 811a5ba:	687b      	ldr	r3, [r7, #4]
 811a5bc:	8b5b      	ldrh	r3, [r3, #26]
 811a5be:	f043 0310 	orr.w	r3, r3, #16
 811a5c2:	b29a      	uxth	r2, r3
 811a5c4:	687b      	ldr	r3, [r7, #4]
 811a5c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 811a5c8:	2101      	movs	r1, #1
 811a5ca:	6878      	ldr	r0, [r7, #4]
 811a5cc:	f7ff fe92 	bl	811a2f4 <tcp_close_shutdown>
 811a5d0:	4603      	mov	r3, r0
}
 811a5d2:	4618      	mov	r0, r3
 811a5d4:	3708      	adds	r7, #8
 811a5d6:	46bd      	mov	sp, r7
 811a5d8:	bd80      	pop	{r7, pc}
 811a5da:	bf00      	nop
 811a5dc:	08126e3c 	.word	0x08126e3c
 811a5e0:	08126f84 	.word	0x08126f84
 811a5e4:	08126eb8 	.word	0x08126eb8

0811a5e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 811a5e8:	b580      	push	{r7, lr}
 811a5ea:	b08e      	sub	sp, #56	@ 0x38
 811a5ec:	af04      	add	r7, sp, #16
 811a5ee:	6078      	str	r0, [r7, #4]
 811a5f0:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 811a5f2:	f7f5 fbe5 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 811a5f6:	687b      	ldr	r3, [r7, #4]
 811a5f8:	2b00      	cmp	r3, #0
 811a5fa:	d107      	bne.n	811a60c <tcp_abandon+0x24>
 811a5fc:	4b52      	ldr	r3, [pc, #328]	@ (811a748 <tcp_abandon+0x160>)
 811a5fe:	f240 223d 	movw	r2, #573	@ 0x23d
 811a602:	4952      	ldr	r1, [pc, #328]	@ (811a74c <tcp_abandon+0x164>)
 811a604:	4852      	ldr	r0, [pc, #328]	@ (811a750 <tcp_abandon+0x168>)
 811a606:	f007 fbbd 	bl	8121d84 <iprintf>
 811a60a:	e099      	b.n	811a740 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 811a60c:	687b      	ldr	r3, [r7, #4]
 811a60e:	7d1b      	ldrb	r3, [r3, #20]
 811a610:	2b01      	cmp	r3, #1
 811a612:	d106      	bne.n	811a622 <tcp_abandon+0x3a>
 811a614:	4b4c      	ldr	r3, [pc, #304]	@ (811a748 <tcp_abandon+0x160>)
 811a616:	f44f 7210 	mov.w	r2, #576	@ 0x240
 811a61a:	494e      	ldr	r1, [pc, #312]	@ (811a754 <tcp_abandon+0x16c>)
 811a61c:	484c      	ldr	r0, [pc, #304]	@ (811a750 <tcp_abandon+0x168>)
 811a61e:	f007 fbb1 	bl	8121d84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811a622:	687b      	ldr	r3, [r7, #4]
 811a624:	7d1b      	ldrb	r3, [r3, #20]
 811a626:	2b0a      	cmp	r3, #10
 811a628:	d107      	bne.n	811a63a <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 811a62a:	6879      	ldr	r1, [r7, #4]
 811a62c:	484a      	ldr	r0, [pc, #296]	@ (811a758 <tcp_abandon+0x170>)
 811a62e:	f001 fa81 	bl	811bb34 <tcp_pcb_remove>
    tcp_free(pcb);
 811a632:	6878      	ldr	r0, [r7, #4]
 811a634:	f7ff fdac 	bl	811a190 <tcp_free>
 811a638:	e082      	b.n	811a740 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 811a63a:	2300      	movs	r3, #0
 811a63c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 811a63e:	2300      	movs	r3, #0
 811a640:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 811a642:	687b      	ldr	r3, [r7, #4]
 811a644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811a646:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 811a648:	687b      	ldr	r3, [r7, #4]
 811a64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a64c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 811a64e:	687b      	ldr	r3, [r7, #4]
 811a650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811a654:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 811a656:	687b      	ldr	r3, [r7, #4]
 811a658:	691b      	ldr	r3, [r3, #16]
 811a65a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 811a65c:	687b      	ldr	r3, [r7, #4]
 811a65e:	7d1b      	ldrb	r3, [r3, #20]
 811a660:	2b00      	cmp	r3, #0
 811a662:	d126      	bne.n	811a6b2 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 811a664:	687b      	ldr	r3, [r7, #4]
 811a666:	8adb      	ldrh	r3, [r3, #22]
 811a668:	2b00      	cmp	r3, #0
 811a66a:	d02e      	beq.n	811a6ca <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811a66c:	4b3b      	ldr	r3, [pc, #236]	@ (811a75c <tcp_abandon+0x174>)
 811a66e:	681b      	ldr	r3, [r3, #0]
 811a670:	687a      	ldr	r2, [r7, #4]
 811a672:	429a      	cmp	r2, r3
 811a674:	d105      	bne.n	811a682 <tcp_abandon+0x9a>
 811a676:	4b39      	ldr	r3, [pc, #228]	@ (811a75c <tcp_abandon+0x174>)
 811a678:	681b      	ldr	r3, [r3, #0]
 811a67a:	68db      	ldr	r3, [r3, #12]
 811a67c:	4a37      	ldr	r2, [pc, #220]	@ (811a75c <tcp_abandon+0x174>)
 811a67e:	6013      	str	r3, [r2, #0]
 811a680:	e013      	b.n	811a6aa <tcp_abandon+0xc2>
 811a682:	4b36      	ldr	r3, [pc, #216]	@ (811a75c <tcp_abandon+0x174>)
 811a684:	681b      	ldr	r3, [r3, #0]
 811a686:	61fb      	str	r3, [r7, #28]
 811a688:	e00c      	b.n	811a6a4 <tcp_abandon+0xbc>
 811a68a:	69fb      	ldr	r3, [r7, #28]
 811a68c:	68db      	ldr	r3, [r3, #12]
 811a68e:	687a      	ldr	r2, [r7, #4]
 811a690:	429a      	cmp	r2, r3
 811a692:	d104      	bne.n	811a69e <tcp_abandon+0xb6>
 811a694:	687b      	ldr	r3, [r7, #4]
 811a696:	68da      	ldr	r2, [r3, #12]
 811a698:	69fb      	ldr	r3, [r7, #28]
 811a69a:	60da      	str	r2, [r3, #12]
 811a69c:	e005      	b.n	811a6aa <tcp_abandon+0xc2>
 811a69e:	69fb      	ldr	r3, [r7, #28]
 811a6a0:	68db      	ldr	r3, [r3, #12]
 811a6a2:	61fb      	str	r3, [r7, #28]
 811a6a4:	69fb      	ldr	r3, [r7, #28]
 811a6a6:	2b00      	cmp	r3, #0
 811a6a8:	d1ef      	bne.n	811a68a <tcp_abandon+0xa2>
 811a6aa:	687b      	ldr	r3, [r7, #4]
 811a6ac:	2200      	movs	r2, #0
 811a6ae:	60da      	str	r2, [r3, #12]
 811a6b0:	e00b      	b.n	811a6ca <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 811a6b2:	683b      	ldr	r3, [r7, #0]
 811a6b4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 811a6b6:	687b      	ldr	r3, [r7, #4]
 811a6b8:	8adb      	ldrh	r3, [r3, #22]
 811a6ba:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 811a6bc:	6879      	ldr	r1, [r7, #4]
 811a6be:	4828      	ldr	r0, [pc, #160]	@ (811a760 <tcp_abandon+0x178>)
 811a6c0:	f001 fa38 	bl	811bb34 <tcp_pcb_remove>
 811a6c4:	4b27      	ldr	r3, [pc, #156]	@ (811a764 <tcp_abandon+0x17c>)
 811a6c6:	2201      	movs	r2, #1
 811a6c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 811a6ca:	687b      	ldr	r3, [r7, #4]
 811a6cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a6ce:	2b00      	cmp	r3, #0
 811a6d0:	d004      	beq.n	811a6dc <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 811a6d2:	687b      	ldr	r3, [r7, #4]
 811a6d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a6d6:	4618      	mov	r0, r3
 811a6d8:	f000 ff1a 	bl	811b510 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 811a6dc:	687b      	ldr	r3, [r7, #4]
 811a6de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a6e0:	2b00      	cmp	r3, #0
 811a6e2:	d004      	beq.n	811a6ee <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 811a6e4:	687b      	ldr	r3, [r7, #4]
 811a6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a6e8:	4618      	mov	r0, r3
 811a6ea:	f000 ff11 	bl	811b510 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811a6ee:	687b      	ldr	r3, [r7, #4]
 811a6f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a6f2:	2b00      	cmp	r3, #0
 811a6f4:	d004      	beq.n	811a700 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 811a6f6:	687b      	ldr	r3, [r7, #4]
 811a6f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a6fa:	4618      	mov	r0, r3
 811a6fc:	f000 ff08 	bl	811b510 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a702:	2b00      	cmp	r3, #0
 811a704:	d00e      	beq.n	811a724 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 811a706:	6879      	ldr	r1, [r7, #4]
 811a708:	687b      	ldr	r3, [r7, #4]
 811a70a:	3304      	adds	r3, #4
 811a70c:	687a      	ldr	r2, [r7, #4]
 811a70e:	8b12      	ldrh	r2, [r2, #24]
 811a710:	9202      	str	r2, [sp, #8]
 811a712:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811a714:	9201      	str	r2, [sp, #4]
 811a716:	9300      	str	r3, [sp, #0]
 811a718:	460b      	mov	r3, r1
 811a71a:	697a      	ldr	r2, [r7, #20]
 811a71c:	69b9      	ldr	r1, [r7, #24]
 811a71e:	6878      	ldr	r0, [r7, #4]
 811a720:	f005 fbd8 	bl	811fed4 <tcp_rst>
    }
    last_state = pcb->state;
 811a724:	687b      	ldr	r3, [r7, #4]
 811a726:	7d1b      	ldrb	r3, [r3, #20]
 811a728:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 811a72a:	6878      	ldr	r0, [r7, #4]
 811a72c:	f7ff fd30 	bl	811a190 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811a730:	693b      	ldr	r3, [r7, #16]
 811a732:	2b00      	cmp	r3, #0
 811a734:	d004      	beq.n	811a740 <tcp_abandon+0x158>
 811a736:	693b      	ldr	r3, [r7, #16]
 811a738:	f06f 010c 	mvn.w	r1, #12
 811a73c:	68f8      	ldr	r0, [r7, #12]
 811a73e:	4798      	blx	r3
  }
}
 811a740:	3728      	adds	r7, #40	@ 0x28
 811a742:	46bd      	mov	sp, r7
 811a744:	bd80      	pop	{r7, pc}
 811a746:	bf00      	nop
 811a748:	08126e3c 	.word	0x08126e3c
 811a74c:	08126fb8 	.word	0x08126fb8
 811a750:	08126eb8 	.word	0x08126eb8
 811a754:	08126fd4 	.word	0x08126fd4
 811a758:	240126b0 	.word	0x240126b0
 811a75c:	240126a4 	.word	0x240126a4
 811a760:	240126ac 	.word	0x240126ac
 811a764:	240126b4 	.word	0x240126b4

0811a768 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 811a768:	b580      	push	{r7, lr}
 811a76a:	b082      	sub	sp, #8
 811a76c:	af00      	add	r7, sp, #0
 811a76e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 811a770:	2101      	movs	r1, #1
 811a772:	6878      	ldr	r0, [r7, #4]
 811a774:	f7ff ff38 	bl	811a5e8 <tcp_abandon>
}
 811a778:	bf00      	nop
 811a77a:	3708      	adds	r7, #8
 811a77c:	46bd      	mov	sp, r7
 811a77e:	bd80      	pop	{r7, pc}

0811a780 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 811a780:	b580      	push	{r7, lr}
 811a782:	b088      	sub	sp, #32
 811a784:	af00      	add	r7, sp, #0
 811a786:	60f8      	str	r0, [r7, #12]
 811a788:	60b9      	str	r1, [r7, #8]
 811a78a:	4613      	mov	r3, r2
 811a78c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 811a78e:	2304      	movs	r3, #4
 811a790:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 811a792:	f7f5 fb15 	bl	810fdc0 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811a796:	68bb      	ldr	r3, [r7, #8]
 811a798:	2b00      	cmp	r3, #0
 811a79a:	d101      	bne.n	811a7a0 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 811a79c:	4b3e      	ldr	r3, [pc, #248]	@ (811a898 <tcp_bind+0x118>)
 811a79e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 811a7a0:	68fb      	ldr	r3, [r7, #12]
 811a7a2:	2b00      	cmp	r3, #0
 811a7a4:	d109      	bne.n	811a7ba <tcp_bind+0x3a>
 811a7a6:	4b3d      	ldr	r3, [pc, #244]	@ (811a89c <tcp_bind+0x11c>)
 811a7a8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 811a7ac:	493c      	ldr	r1, [pc, #240]	@ (811a8a0 <tcp_bind+0x120>)
 811a7ae:	483d      	ldr	r0, [pc, #244]	@ (811a8a4 <tcp_bind+0x124>)
 811a7b0:	f007 fae8 	bl	8121d84 <iprintf>
 811a7b4:	f06f 030f 	mvn.w	r3, #15
 811a7b8:	e06a      	b.n	811a890 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 811a7ba:	68fb      	ldr	r3, [r7, #12]
 811a7bc:	7d1b      	ldrb	r3, [r3, #20]
 811a7be:	2b00      	cmp	r3, #0
 811a7c0:	d009      	beq.n	811a7d6 <tcp_bind+0x56>
 811a7c2:	4b36      	ldr	r3, [pc, #216]	@ (811a89c <tcp_bind+0x11c>)
 811a7c4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811a7c8:	4937      	ldr	r1, [pc, #220]	@ (811a8a8 <tcp_bind+0x128>)
 811a7ca:	4836      	ldr	r0, [pc, #216]	@ (811a8a4 <tcp_bind+0x124>)
 811a7cc:	f007 fada 	bl	8121d84 <iprintf>
 811a7d0:	f06f 0305 	mvn.w	r3, #5
 811a7d4:	e05c      	b.n	811a890 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 811a7d6:	88fb      	ldrh	r3, [r7, #6]
 811a7d8:	2b00      	cmp	r3, #0
 811a7da:	d109      	bne.n	811a7f0 <tcp_bind+0x70>
    port = tcp_new_port();
 811a7dc:	f000 f916 	bl	811aa0c <tcp_new_port>
 811a7e0:	4603      	mov	r3, r0
 811a7e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811a7e4:	88fb      	ldrh	r3, [r7, #6]
 811a7e6:	2b00      	cmp	r3, #0
 811a7e8:	d135      	bne.n	811a856 <tcp_bind+0xd6>
      return ERR_BUF;
 811a7ea:	f06f 0301 	mvn.w	r3, #1
 811a7ee:	e04f      	b.n	811a890 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 811a7f0:	2300      	movs	r3, #0
 811a7f2:	61fb      	str	r3, [r7, #28]
 811a7f4:	e02b      	b.n	811a84e <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811a7f6:	4a2d      	ldr	r2, [pc, #180]	@ (811a8ac <tcp_bind+0x12c>)
 811a7f8:	69fb      	ldr	r3, [r7, #28]
 811a7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811a7fe:	681b      	ldr	r3, [r3, #0]
 811a800:	61bb      	str	r3, [r7, #24]
 811a802:	e01e      	b.n	811a842 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 811a804:	69bb      	ldr	r3, [r7, #24]
 811a806:	8adb      	ldrh	r3, [r3, #22]
 811a808:	88fa      	ldrh	r2, [r7, #6]
 811a80a:	429a      	cmp	r2, r3
 811a80c:	d116      	bne.n	811a83c <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 811a80e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811a810:	2b00      	cmp	r3, #0
 811a812:	d010      	beq.n	811a836 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 811a814:	69bb      	ldr	r3, [r7, #24]
 811a816:	681b      	ldr	r3, [r3, #0]
 811a818:	2b00      	cmp	r3, #0
 811a81a:	d00c      	beq.n	811a836 <tcp_bind+0xb6>
 811a81c:	68bb      	ldr	r3, [r7, #8]
 811a81e:	2b00      	cmp	r3, #0
 811a820:	d009      	beq.n	811a836 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 811a822:	68bb      	ldr	r3, [r7, #8]
 811a824:	681b      	ldr	r3, [r3, #0]
 811a826:	2b00      	cmp	r3, #0
 811a828:	d005      	beq.n	811a836 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 811a82a:	69bb      	ldr	r3, [r7, #24]
 811a82c:	681a      	ldr	r2, [r3, #0]
 811a82e:	68bb      	ldr	r3, [r7, #8]
 811a830:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 811a832:	429a      	cmp	r2, r3
 811a834:	d102      	bne.n	811a83c <tcp_bind+0xbc>
              return ERR_USE;
 811a836:	f06f 0307 	mvn.w	r3, #7
 811a83a:	e029      	b.n	811a890 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 811a83c:	69bb      	ldr	r3, [r7, #24]
 811a83e:	68db      	ldr	r3, [r3, #12]
 811a840:	61bb      	str	r3, [r7, #24]
 811a842:	69bb      	ldr	r3, [r7, #24]
 811a844:	2b00      	cmp	r3, #0
 811a846:	d1dd      	bne.n	811a804 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 811a848:	69fb      	ldr	r3, [r7, #28]
 811a84a:	3301      	adds	r3, #1
 811a84c:	61fb      	str	r3, [r7, #28]
 811a84e:	69fa      	ldr	r2, [r7, #28]
 811a850:	697b      	ldr	r3, [r7, #20]
 811a852:	429a      	cmp	r2, r3
 811a854:	dbcf      	blt.n	811a7f6 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 811a856:	68bb      	ldr	r3, [r7, #8]
 811a858:	2b00      	cmp	r3, #0
 811a85a:	d00c      	beq.n	811a876 <tcp_bind+0xf6>
 811a85c:	68bb      	ldr	r3, [r7, #8]
 811a85e:	681b      	ldr	r3, [r3, #0]
 811a860:	2b00      	cmp	r3, #0
 811a862:	d008      	beq.n	811a876 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 811a864:	68bb      	ldr	r3, [r7, #8]
 811a866:	2b00      	cmp	r3, #0
 811a868:	d002      	beq.n	811a870 <tcp_bind+0xf0>
 811a86a:	68bb      	ldr	r3, [r7, #8]
 811a86c:	681b      	ldr	r3, [r3, #0]
 811a86e:	e000      	b.n	811a872 <tcp_bind+0xf2>
 811a870:	2300      	movs	r3, #0
 811a872:	68fa      	ldr	r2, [r7, #12]
 811a874:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 811a876:	68fb      	ldr	r3, [r7, #12]
 811a878:	88fa      	ldrh	r2, [r7, #6]
 811a87a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 811a87c:	4b0c      	ldr	r3, [pc, #48]	@ (811a8b0 <tcp_bind+0x130>)
 811a87e:	681a      	ldr	r2, [r3, #0]
 811a880:	68fb      	ldr	r3, [r7, #12]
 811a882:	60da      	str	r2, [r3, #12]
 811a884:	4a0a      	ldr	r2, [pc, #40]	@ (811a8b0 <tcp_bind+0x130>)
 811a886:	68fb      	ldr	r3, [r7, #12]
 811a888:	6013      	str	r3, [r2, #0]
 811a88a:	f005 fe95 	bl	81205b8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 811a88e:	2300      	movs	r3, #0
}
 811a890:	4618      	mov	r0, r3
 811a892:	3720      	adds	r7, #32
 811a894:	46bd      	mov	sp, r7
 811a896:	bd80      	pop	{r7, pc}
 811a898:	08128960 	.word	0x08128960
 811a89c:	08126e3c 	.word	0x08126e3c
 811a8a0:	08127008 	.word	0x08127008
 811a8a4:	08126eb8 	.word	0x08126eb8
 811a8a8:	08127020 	.word	0x08127020
 811a8ac:	08128a4c 	.word	0x08128a4c
 811a8b0:	240126a4 	.word	0x240126a4

0811a8b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 811a8b4:	b580      	push	{r7, lr}
 811a8b6:	b084      	sub	sp, #16
 811a8b8:	af00      	add	r7, sp, #0
 811a8ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 811a8bc:	687b      	ldr	r3, [r7, #4]
 811a8be:	2b00      	cmp	r3, #0
 811a8c0:	d106      	bne.n	811a8d0 <tcp_update_rcv_ann_wnd+0x1c>
 811a8c2:	4b25      	ldr	r3, [pc, #148]	@ (811a958 <tcp_update_rcv_ann_wnd+0xa4>)
 811a8c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 811a8c8:	4924      	ldr	r1, [pc, #144]	@ (811a95c <tcp_update_rcv_ann_wnd+0xa8>)
 811a8ca:	4825      	ldr	r0, [pc, #148]	@ (811a960 <tcp_update_rcv_ann_wnd+0xac>)
 811a8cc:	f007 fa5a 	bl	8121d84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 811a8d0:	687b      	ldr	r3, [r7, #4]
 811a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a8d4:	687a      	ldr	r2, [r7, #4]
 811a8d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 811a8d8:	4413      	add	r3, r2
 811a8da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 811a8dc:	687b      	ldr	r3, [r7, #4]
 811a8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811a8e0:	687a      	ldr	r2, [r7, #4]
 811a8e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 811a8e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 811a8e8:	bf28      	it	cs
 811a8ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 811a8ee:	b292      	uxth	r2, r2
 811a8f0:	4413      	add	r3, r2
 811a8f2:	68fa      	ldr	r2, [r7, #12]
 811a8f4:	1ad3      	subs	r3, r2, r3
 811a8f6:	2b00      	cmp	r3, #0
 811a8f8:	db08      	blt.n	811a90c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811a8fa:	687b      	ldr	r3, [r7, #4]
 811a8fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a8fe:	687b      	ldr	r3, [r7, #4]
 811a900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811a902:	687b      	ldr	r3, [r7, #4]
 811a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811a906:	68fa      	ldr	r2, [r7, #12]
 811a908:	1ad3      	subs	r3, r2, r3
 811a90a:	e020      	b.n	811a94e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811a90c:	687b      	ldr	r3, [r7, #4]
 811a90e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811a910:	687b      	ldr	r3, [r7, #4]
 811a912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811a914:	1ad3      	subs	r3, r2, r3
 811a916:	2b00      	cmp	r3, #0
 811a918:	dd03      	ble.n	811a922 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811a91a:	687b      	ldr	r3, [r7, #4]
 811a91c:	2200      	movs	r2, #0
 811a91e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811a920:	e014      	b.n	811a94c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811a922:	687b      	ldr	r3, [r7, #4]
 811a924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811a926:	687b      	ldr	r3, [r7, #4]
 811a928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a92a:	1ad3      	subs	r3, r2, r3
 811a92c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811a92e:	68bb      	ldr	r3, [r7, #8]
 811a930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811a934:	d306      	bcc.n	811a944 <tcp_update_rcv_ann_wnd+0x90>
 811a936:	4b08      	ldr	r3, [pc, #32]	@ (811a958 <tcp_update_rcv_ann_wnd+0xa4>)
 811a938:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811a93c:	4909      	ldr	r1, [pc, #36]	@ (811a964 <tcp_update_rcv_ann_wnd+0xb0>)
 811a93e:	4808      	ldr	r0, [pc, #32]	@ (811a960 <tcp_update_rcv_ann_wnd+0xac>)
 811a940:	f007 fa20 	bl	8121d84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811a944:	68bb      	ldr	r3, [r7, #8]
 811a946:	b29a      	uxth	r2, r3
 811a948:	687b      	ldr	r3, [r7, #4]
 811a94a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811a94c:	2300      	movs	r3, #0
  }
}
 811a94e:	4618      	mov	r0, r3
 811a950:	3710      	adds	r7, #16
 811a952:	46bd      	mov	sp, r7
 811a954:	bd80      	pop	{r7, pc}
 811a956:	bf00      	nop
 811a958:	08126e3c 	.word	0x08126e3c
 811a95c:	081270d0 	.word	0x081270d0
 811a960:	08126eb8 	.word	0x08126eb8
 811a964:	081270f4 	.word	0x081270f4

0811a968 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 811a968:	b580      	push	{r7, lr}
 811a96a:	b084      	sub	sp, #16
 811a96c:	af00      	add	r7, sp, #0
 811a96e:	6078      	str	r0, [r7, #4]
 811a970:	460b      	mov	r3, r1
 811a972:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 811a974:	f7f5 fa24 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811a978:	687b      	ldr	r3, [r7, #4]
 811a97a:	2b00      	cmp	r3, #0
 811a97c:	d107      	bne.n	811a98e <tcp_recved+0x26>
 811a97e:	4b1f      	ldr	r3, [pc, #124]	@ (811a9fc <tcp_recved+0x94>)
 811a980:	f240 32cf 	movw	r2, #975	@ 0x3cf
 811a984:	491e      	ldr	r1, [pc, #120]	@ (811aa00 <tcp_recved+0x98>)
 811a986:	481f      	ldr	r0, [pc, #124]	@ (811aa04 <tcp_recved+0x9c>)
 811a988:	f007 f9fc 	bl	8121d84 <iprintf>
 811a98c:	e032      	b.n	811a9f4 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 811a98e:	687b      	ldr	r3, [r7, #4]
 811a990:	7d1b      	ldrb	r3, [r3, #20]
 811a992:	2b01      	cmp	r3, #1
 811a994:	d106      	bne.n	811a9a4 <tcp_recved+0x3c>
 811a996:	4b19      	ldr	r3, [pc, #100]	@ (811a9fc <tcp_recved+0x94>)
 811a998:	f240 32d2 	movw	r2, #978	@ 0x3d2
 811a99c:	491a      	ldr	r1, [pc, #104]	@ (811aa08 <tcp_recved+0xa0>)
 811a99e:	4819      	ldr	r0, [pc, #100]	@ (811aa04 <tcp_recved+0x9c>)
 811a9a0:	f007 f9f0 	bl	8121d84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 811a9a4:	687b      	ldr	r3, [r7, #4]
 811a9a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a9a8:	887b      	ldrh	r3, [r7, #2]
 811a9aa:	4413      	add	r3, r2
 811a9ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 811a9ae:	89fb      	ldrh	r3, [r7, #14]
 811a9b0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811a9b4:	d804      	bhi.n	811a9c0 <tcp_recved+0x58>
 811a9b6:	687b      	ldr	r3, [r7, #4]
 811a9b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a9ba:	89fa      	ldrh	r2, [r7, #14]
 811a9bc:	429a      	cmp	r2, r3
 811a9be:	d204      	bcs.n	811a9ca <tcp_recved+0x62>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 811a9c0:	687b      	ldr	r3, [r7, #4]
 811a9c2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811a9c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 811a9c8:	e002      	b.n	811a9d0 <tcp_recved+0x68>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 811a9ca:	687b      	ldr	r3, [r7, #4]
 811a9cc:	89fa      	ldrh	r2, [r7, #14]
 811a9ce:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 811a9d0:	6878      	ldr	r0, [r7, #4]
 811a9d2:	f7ff ff6f 	bl	811a8b4 <tcp_update_rcv_ann_wnd>
 811a9d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 811a9d8:	68bb      	ldr	r3, [r7, #8]
 811a9da:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 811a9de:	d309      	bcc.n	811a9f4 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 811a9e0:	687b      	ldr	r3, [r7, #4]
 811a9e2:	8b5b      	ldrh	r3, [r3, #26]
 811a9e4:	f043 0302 	orr.w	r3, r3, #2
 811a9e8:	b29a      	uxth	r2, r3
 811a9ea:	687b      	ldr	r3, [r7, #4]
 811a9ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811a9ee:	6878      	ldr	r0, [r7, #4]
 811a9f0:	f004 fcba 	bl	811f368 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811a9f4:	3710      	adds	r7, #16
 811a9f6:	46bd      	mov	sp, r7
 811a9f8:	bd80      	pop	{r7, pc}
 811a9fa:	bf00      	nop
 811a9fc:	08126e3c 	.word	0x08126e3c
 811aa00:	08127110 	.word	0x08127110
 811aa04:	08126eb8 	.word	0x08126eb8
 811aa08:	08127128 	.word	0x08127128

0811aa0c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 811aa0c:	b480      	push	{r7}
 811aa0e:	b083      	sub	sp, #12
 811aa10:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811aa12:	2300      	movs	r3, #0
 811aa14:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811aa16:	4b1e      	ldr	r3, [pc, #120]	@ (811aa90 <tcp_new_port+0x84>)
 811aa18:	881b      	ldrh	r3, [r3, #0]
 811aa1a:	3301      	adds	r3, #1
 811aa1c:	b29a      	uxth	r2, r3
 811aa1e:	4b1c      	ldr	r3, [pc, #112]	@ (811aa90 <tcp_new_port+0x84>)
 811aa20:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811aa22:	4b1b      	ldr	r3, [pc, #108]	@ (811aa90 <tcp_new_port+0x84>)
 811aa24:	881b      	ldrh	r3, [r3, #0]
 811aa26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811aa2a:	4293      	cmp	r3, r2
 811aa2c:	d103      	bne.n	811aa36 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 811aa2e:	4b18      	ldr	r3, [pc, #96]	@ (811aa90 <tcp_new_port+0x84>)
 811aa30:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811aa34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811aa36:	2300      	movs	r3, #0
 811aa38:	71fb      	strb	r3, [r7, #7]
 811aa3a:	e01e      	b.n	811aa7a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811aa3c:	79fb      	ldrb	r3, [r7, #7]
 811aa3e:	4a15      	ldr	r2, [pc, #84]	@ (811aa94 <tcp_new_port+0x88>)
 811aa40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811aa44:	681b      	ldr	r3, [r3, #0]
 811aa46:	603b      	str	r3, [r7, #0]
 811aa48:	e011      	b.n	811aa6e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 811aa4a:	683b      	ldr	r3, [r7, #0]
 811aa4c:	8ada      	ldrh	r2, [r3, #22]
 811aa4e:	4b10      	ldr	r3, [pc, #64]	@ (811aa90 <tcp_new_port+0x84>)
 811aa50:	881b      	ldrh	r3, [r3, #0]
 811aa52:	429a      	cmp	r2, r3
 811aa54:	d108      	bne.n	811aa68 <tcp_new_port+0x5c>
        n++;
 811aa56:	88bb      	ldrh	r3, [r7, #4]
 811aa58:	3301      	adds	r3, #1
 811aa5a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 811aa5c:	88bb      	ldrh	r3, [r7, #4]
 811aa5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811aa62:	d3d8      	bcc.n	811aa16 <tcp_new_port+0xa>
          return 0;
 811aa64:	2300      	movs	r3, #0
 811aa66:	e00d      	b.n	811aa84 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811aa68:	683b      	ldr	r3, [r7, #0]
 811aa6a:	68db      	ldr	r3, [r3, #12]
 811aa6c:	603b      	str	r3, [r7, #0]
 811aa6e:	683b      	ldr	r3, [r7, #0]
 811aa70:	2b00      	cmp	r3, #0
 811aa72:	d1ea      	bne.n	811aa4a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811aa74:	79fb      	ldrb	r3, [r7, #7]
 811aa76:	3301      	adds	r3, #1
 811aa78:	71fb      	strb	r3, [r7, #7]
 811aa7a:	79fb      	ldrb	r3, [r7, #7]
 811aa7c:	2b03      	cmp	r3, #3
 811aa7e:	d9dd      	bls.n	811aa3c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 811aa80:	4b03      	ldr	r3, [pc, #12]	@ (811aa90 <tcp_new_port+0x84>)
 811aa82:	881b      	ldrh	r3, [r3, #0]
}
 811aa84:	4618      	mov	r0, r3
 811aa86:	370c      	adds	r7, #12
 811aa88:	46bd      	mov	sp, r7
 811aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811aa8e:	4770      	bx	lr
 811aa90:	24000048 	.word	0x24000048
 811aa94:	08128a4c 	.word	0x08128a4c

0811aa98 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 811aa98:	b580      	push	{r7, lr}
 811aa9a:	b08a      	sub	sp, #40	@ 0x28
 811aa9c:	af00      	add	r7, sp, #0
 811aa9e:	60f8      	str	r0, [r7, #12]
 811aaa0:	60b9      	str	r1, [r7, #8]
 811aaa2:	603b      	str	r3, [r7, #0]
 811aaa4:	4613      	mov	r3, r2
 811aaa6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 811aaa8:	2300      	movs	r3, #0
 811aaaa:	627b      	str	r3, [r7, #36]	@ 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 811aaac:	f7f5 f988 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 811aab0:	68fb      	ldr	r3, [r7, #12]
 811aab2:	2b00      	cmp	r3, #0
 811aab4:	d109      	bne.n	811aaca <tcp_connect+0x32>
 811aab6:	4b7d      	ldr	r3, [pc, #500]	@ (811acac <tcp_connect+0x214>)
 811aab8:	f240 4235 	movw	r2, #1077	@ 0x435
 811aabc:	497c      	ldr	r1, [pc, #496]	@ (811acb0 <tcp_connect+0x218>)
 811aabe:	487d      	ldr	r0, [pc, #500]	@ (811acb4 <tcp_connect+0x21c>)
 811aac0:	f007 f960 	bl	8121d84 <iprintf>
 811aac4:	f06f 030f 	mvn.w	r3, #15
 811aac8:	e0ec      	b.n	811aca4 <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 811aaca:	68bb      	ldr	r3, [r7, #8]
 811aacc:	2b00      	cmp	r3, #0
 811aace:	d109      	bne.n	811aae4 <tcp_connect+0x4c>
 811aad0:	4b76      	ldr	r3, [pc, #472]	@ (811acac <tcp_connect+0x214>)
 811aad2:	f240 4236 	movw	r2, #1078	@ 0x436
 811aad6:	4978      	ldr	r1, [pc, #480]	@ (811acb8 <tcp_connect+0x220>)
 811aad8:	4876      	ldr	r0, [pc, #472]	@ (811acb4 <tcp_connect+0x21c>)
 811aada:	f007 f953 	bl	8121d84 <iprintf>
 811aade:	f06f 030f 	mvn.w	r3, #15
 811aae2:	e0df      	b.n	811aca4 <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 811aae4:	68fb      	ldr	r3, [r7, #12]
 811aae6:	7d1b      	ldrb	r3, [r3, #20]
 811aae8:	2b00      	cmp	r3, #0
 811aaea:	d009      	beq.n	811ab00 <tcp_connect+0x68>
 811aaec:	4b6f      	ldr	r3, [pc, #444]	@ (811acac <tcp_connect+0x214>)
 811aaee:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 811aaf2:	4972      	ldr	r1, [pc, #456]	@ (811acbc <tcp_connect+0x224>)
 811aaf4:	486f      	ldr	r0, [pc, #444]	@ (811acb4 <tcp_connect+0x21c>)
 811aaf6:	f007 f945 	bl	8121d84 <iprintf>
 811aafa:	f06f 0309 	mvn.w	r3, #9
 811aafe:	e0d1      	b.n	811aca4 <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 811ab00:	68bb      	ldr	r3, [r7, #8]
 811ab02:	2b00      	cmp	r3, #0
 811ab04:	d002      	beq.n	811ab0c <tcp_connect+0x74>
 811ab06:	68bb      	ldr	r3, [r7, #8]
 811ab08:	681b      	ldr	r3, [r3, #0]
 811ab0a:	e000      	b.n	811ab0e <tcp_connect+0x76>
 811ab0c:	2300      	movs	r3, #0
 811ab0e:	68fa      	ldr	r2, [r7, #12]
 811ab10:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 811ab12:	68fb      	ldr	r3, [r7, #12]
 811ab14:	88fa      	ldrh	r2, [r7, #6]
 811ab16:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811ab18:	68fb      	ldr	r3, [r7, #12]
 811ab1a:	7a1b      	ldrb	r3, [r3, #8]
 811ab1c:	2b00      	cmp	r3, #0
 811ab1e:	d006      	beq.n	811ab2e <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 811ab20:	68fb      	ldr	r3, [r7, #12]
 811ab22:	7a1b      	ldrb	r3, [r3, #8]
 811ab24:	4618      	mov	r0, r3
 811ab26:	f7fe fb95 	bl	8119254 <netif_get_by_index>
 811ab2a:	6278      	str	r0, [r7, #36]	@ 0x24
 811ab2c:	e005      	b.n	811ab3a <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 811ab2e:	68fb      	ldr	r3, [r7, #12]
 811ab30:	3304      	adds	r3, #4
 811ab32:	4618      	mov	r0, r3
 811ab34:	f7fa fbb8 	bl	81152a8 <ip4_route>
 811ab38:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ab3c:	2b00      	cmp	r3, #0
 811ab3e:	d102      	bne.n	811ab46 <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 811ab40:	f06f 0303 	mvn.w	r3, #3
 811ab44:	e0ae      	b.n	811aca4 <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811ab46:	68fb      	ldr	r3, [r7, #12]
 811ab48:	2b00      	cmp	r3, #0
 811ab4a:	d003      	beq.n	811ab54 <tcp_connect+0xbc>
 811ab4c:	68fb      	ldr	r3, [r7, #12]
 811ab4e:	681b      	ldr	r3, [r3, #0]
 811ab50:	2b00      	cmp	r3, #0
 811ab52:	d111      	bne.n	811ab78 <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 811ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ab56:	2b00      	cmp	r3, #0
 811ab58:	d002      	beq.n	811ab60 <tcp_connect+0xc8>
 811ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811ab5c:	3304      	adds	r3, #4
 811ab5e:	e000      	b.n	811ab62 <tcp_connect+0xca>
 811ab60:	2300      	movs	r3, #0
 811ab62:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 811ab64:	69fb      	ldr	r3, [r7, #28]
 811ab66:	2b00      	cmp	r3, #0
 811ab68:	d102      	bne.n	811ab70 <tcp_connect+0xd8>
      return ERR_RTE;
 811ab6a:	f06f 0303 	mvn.w	r3, #3
 811ab6e:	e099      	b.n	811aca4 <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811ab70:	69fb      	ldr	r3, [r7, #28]
 811ab72:	681a      	ldr	r2, [r3, #0]
 811ab74:	68fb      	ldr	r3, [r7, #12]
 811ab76:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 811ab78:	68fb      	ldr	r3, [r7, #12]
 811ab7a:	8adb      	ldrh	r3, [r3, #22]
 811ab7c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 811ab7e:	68fb      	ldr	r3, [r7, #12]
 811ab80:	8adb      	ldrh	r3, [r3, #22]
 811ab82:	2b00      	cmp	r3, #0
 811ab84:	d10c      	bne.n	811aba0 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 811ab86:	f7ff ff41 	bl	811aa0c <tcp_new_port>
 811ab8a:	4603      	mov	r3, r0
 811ab8c:	461a      	mov	r2, r3
 811ab8e:	68fb      	ldr	r3, [r7, #12]
 811ab90:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 811ab92:	68fb      	ldr	r3, [r7, #12]
 811ab94:	8adb      	ldrh	r3, [r3, #22]
 811ab96:	2b00      	cmp	r3, #0
 811ab98:	d102      	bne.n	811aba0 <tcp_connect+0x108>
      return ERR_BUF;
 811ab9a:	f06f 0301 	mvn.w	r3, #1
 811ab9e:	e081      	b.n	811aca4 <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 811aba0:	68f8      	ldr	r0, [r7, #12]
 811aba2:	f001 f85b 	bl	811bc5c <tcp_next_iss>
 811aba6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 811aba8:	68fb      	ldr	r3, [r7, #12]
 811abaa:	2200      	movs	r2, #0
 811abac:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 811abae:	68fb      	ldr	r3, [r7, #12]
 811abb0:	697a      	ldr	r2, [r7, #20]
 811abb2:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 811abb4:	697b      	ldr	r3, [r7, #20]
 811abb6:	1e5a      	subs	r2, r3, #1
 811abb8:	68fb      	ldr	r3, [r7, #12]
 811abba:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 811abbc:	697b      	ldr	r3, [r7, #20]
 811abbe:	1e5a      	subs	r2, r3, #1
 811abc0:	68fb      	ldr	r3, [r7, #12]
 811abc2:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 811abc4:	697b      	ldr	r3, [r7, #20]
 811abc6:	1e5a      	subs	r2, r3, #1
 811abc8:	68fb      	ldr	r3, [r7, #12]
 811abca:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811abcc:	68fb      	ldr	r3, [r7, #12]
 811abce:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811abd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811abd4:	68fb      	ldr	r3, [r7, #12]
 811abd6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811abd8:	68fb      	ldr	r3, [r7, #12]
 811abda:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811abdc:	68fb      	ldr	r3, [r7, #12]
 811abde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811abe0:	68fb      	ldr	r3, [r7, #12]
 811abe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 811abe4:	68fb      	ldr	r3, [r7, #12]
 811abe6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811abea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 811abee:	68fb      	ldr	r3, [r7, #12]
 811abf0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811abf4:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 811abf6:	68fb      	ldr	r3, [r7, #12]
 811abf8:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 811abfa:	68fb      	ldr	r3, [r7, #12]
 811abfc:	3304      	adds	r3, #4
 811abfe:	461a      	mov	r2, r3
 811ac00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811ac02:	f001 f851 	bl	811bca8 <tcp_eff_send_mss_netif>
 811ac06:	4603      	mov	r3, r0
 811ac08:	461a      	mov	r2, r3
 811ac0a:	68fb      	ldr	r3, [r7, #12]
 811ac0c:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 811ac0e:	68fb      	ldr	r3, [r7, #12]
 811ac10:	2201      	movs	r2, #1
 811ac12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811ac16:	68fb      	ldr	r3, [r7, #12]
 811ac18:	683a      	ldr	r2, [r7, #0]
 811ac1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 811ac1e:	2102      	movs	r1, #2
 811ac20:	68f8      	ldr	r0, [r7, #12]
 811ac22:	f004 fab3 	bl	811f18c <tcp_enqueue_flags>
 811ac26:	4603      	mov	r3, r0
 811ac28:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811ac2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811ac2e:	2b00      	cmp	r3, #0
 811ac30:	d136      	bne.n	811aca0 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 811ac32:	68fb      	ldr	r3, [r7, #12]
 811ac34:	2202      	movs	r2, #2
 811ac36:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811ac38:	8b7b      	ldrh	r3, [r7, #26]
 811ac3a:	2b00      	cmp	r3, #0
 811ac3c:	d021      	beq.n	811ac82 <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 811ac3e:	4b20      	ldr	r3, [pc, #128]	@ (811acc0 <tcp_connect+0x228>)
 811ac40:	681b      	ldr	r3, [r3, #0]
 811ac42:	68fa      	ldr	r2, [r7, #12]
 811ac44:	429a      	cmp	r2, r3
 811ac46:	d105      	bne.n	811ac54 <tcp_connect+0x1bc>
 811ac48:	4b1d      	ldr	r3, [pc, #116]	@ (811acc0 <tcp_connect+0x228>)
 811ac4a:	681b      	ldr	r3, [r3, #0]
 811ac4c:	68db      	ldr	r3, [r3, #12]
 811ac4e:	4a1c      	ldr	r2, [pc, #112]	@ (811acc0 <tcp_connect+0x228>)
 811ac50:	6013      	str	r3, [r2, #0]
 811ac52:	e013      	b.n	811ac7c <tcp_connect+0x1e4>
 811ac54:	4b1a      	ldr	r3, [pc, #104]	@ (811acc0 <tcp_connect+0x228>)
 811ac56:	681b      	ldr	r3, [r3, #0]
 811ac58:	623b      	str	r3, [r7, #32]
 811ac5a:	e00c      	b.n	811ac76 <tcp_connect+0x1de>
 811ac5c:	6a3b      	ldr	r3, [r7, #32]
 811ac5e:	68db      	ldr	r3, [r3, #12]
 811ac60:	68fa      	ldr	r2, [r7, #12]
 811ac62:	429a      	cmp	r2, r3
 811ac64:	d104      	bne.n	811ac70 <tcp_connect+0x1d8>
 811ac66:	68fb      	ldr	r3, [r7, #12]
 811ac68:	68da      	ldr	r2, [r3, #12]
 811ac6a:	6a3b      	ldr	r3, [r7, #32]
 811ac6c:	60da      	str	r2, [r3, #12]
 811ac6e:	e005      	b.n	811ac7c <tcp_connect+0x1e4>
 811ac70:	6a3b      	ldr	r3, [r7, #32]
 811ac72:	68db      	ldr	r3, [r3, #12]
 811ac74:	623b      	str	r3, [r7, #32]
 811ac76:	6a3b      	ldr	r3, [r7, #32]
 811ac78:	2b00      	cmp	r3, #0
 811ac7a:	d1ef      	bne.n	811ac5c <tcp_connect+0x1c4>
 811ac7c:	68fb      	ldr	r3, [r7, #12]
 811ac7e:	2200      	movs	r2, #0
 811ac80:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 811ac82:	4b10      	ldr	r3, [pc, #64]	@ (811acc4 <tcp_connect+0x22c>)
 811ac84:	681a      	ldr	r2, [r3, #0]
 811ac86:	68fb      	ldr	r3, [r7, #12]
 811ac88:	60da      	str	r2, [r3, #12]
 811ac8a:	4a0e      	ldr	r2, [pc, #56]	@ (811acc4 <tcp_connect+0x22c>)
 811ac8c:	68fb      	ldr	r3, [r7, #12]
 811ac8e:	6013      	str	r3, [r2, #0]
 811ac90:	f005 fc92 	bl	81205b8 <tcp_timer_needed>
 811ac94:	4b0c      	ldr	r3, [pc, #48]	@ (811acc8 <tcp_connect+0x230>)
 811ac96:	2201      	movs	r2, #1
 811ac98:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 811ac9a:	68f8      	ldr	r0, [r7, #12]
 811ac9c:	f004 fb64 	bl	811f368 <tcp_output>
  }
  return ret;
 811aca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 811aca4:	4618      	mov	r0, r3
 811aca6:	3728      	adds	r7, #40	@ 0x28
 811aca8:	46bd      	mov	sp, r7
 811acaa:	bd80      	pop	{r7, pc}
 811acac:	08126e3c 	.word	0x08126e3c
 811acb0:	08127150 	.word	0x08127150
 811acb4:	08126eb8 	.word	0x08126eb8
 811acb8:	0812716c 	.word	0x0812716c
 811acbc:	08127188 	.word	0x08127188
 811acc0:	240126a4 	.word	0x240126a4
 811acc4:	240126ac 	.word	0x240126ac
 811acc8:	240126b4 	.word	0x240126b4

0811accc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 811accc:	b5b0      	push	{r4, r5, r7, lr}
 811acce:	b090      	sub	sp, #64	@ 0x40
 811acd0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811acd2:	2300      	movs	r3, #0
 811acd4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 811acd8:	4b95      	ldr	r3, [pc, #596]	@ (811af30 <tcp_slowtmr+0x264>)
 811acda:	681b      	ldr	r3, [r3, #0]
 811acdc:	3301      	adds	r3, #1
 811acde:	4a94      	ldr	r2, [pc, #592]	@ (811af30 <tcp_slowtmr+0x264>)
 811ace0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811ace2:	4b94      	ldr	r3, [pc, #592]	@ (811af34 <tcp_slowtmr+0x268>)
 811ace4:	781b      	ldrb	r3, [r3, #0]
 811ace6:	3301      	adds	r3, #1
 811ace8:	b2da      	uxtb	r2, r3
 811acea:	4b92      	ldr	r3, [pc, #584]	@ (811af34 <tcp_slowtmr+0x268>)
 811acec:	701a      	strb	r2, [r3, #0]
 811acee:	e000      	b.n	811acf2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 811acf0:	bf00      	nop
  prev = NULL;
 811acf2:	2300      	movs	r3, #0
 811acf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 811acf6:	4b90      	ldr	r3, [pc, #576]	@ (811af38 <tcp_slowtmr+0x26c>)
 811acf8:	681b      	ldr	r3, [r3, #0]
 811acfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811acfc:	e29d      	b.n	811b23a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811acfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad00:	7d1b      	ldrb	r3, [r3, #20]
 811ad02:	2b00      	cmp	r3, #0
 811ad04:	d106      	bne.n	811ad14 <tcp_slowtmr+0x48>
 811ad06:	4b8d      	ldr	r3, [pc, #564]	@ (811af3c <tcp_slowtmr+0x270>)
 811ad08:	f240 42be 	movw	r2, #1214	@ 0x4be
 811ad0c:	498c      	ldr	r1, [pc, #560]	@ (811af40 <tcp_slowtmr+0x274>)
 811ad0e:	488d      	ldr	r0, [pc, #564]	@ (811af44 <tcp_slowtmr+0x278>)
 811ad10:	f007 f838 	bl	8121d84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 811ad14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad16:	7d1b      	ldrb	r3, [r3, #20]
 811ad18:	2b01      	cmp	r3, #1
 811ad1a:	d106      	bne.n	811ad2a <tcp_slowtmr+0x5e>
 811ad1c:	4b87      	ldr	r3, [pc, #540]	@ (811af3c <tcp_slowtmr+0x270>)
 811ad1e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811ad22:	4989      	ldr	r1, [pc, #548]	@ (811af48 <tcp_slowtmr+0x27c>)
 811ad24:	4887      	ldr	r0, [pc, #540]	@ (811af44 <tcp_slowtmr+0x278>)
 811ad26:	f007 f82d 	bl	8121d84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 811ad2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad2c:	7d1b      	ldrb	r3, [r3, #20]
 811ad2e:	2b0a      	cmp	r3, #10
 811ad30:	d106      	bne.n	811ad40 <tcp_slowtmr+0x74>
 811ad32:	4b82      	ldr	r3, [pc, #520]	@ (811af3c <tcp_slowtmr+0x270>)
 811ad34:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 811ad38:	4984      	ldr	r1, [pc, #528]	@ (811af4c <tcp_slowtmr+0x280>)
 811ad3a:	4882      	ldr	r0, [pc, #520]	@ (811af44 <tcp_slowtmr+0x278>)
 811ad3c:	f007 f822 	bl	8121d84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 811ad40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad42:	7f9a      	ldrb	r2, [r3, #30]
 811ad44:	4b7b      	ldr	r3, [pc, #492]	@ (811af34 <tcp_slowtmr+0x268>)
 811ad46:	781b      	ldrb	r3, [r3, #0]
 811ad48:	429a      	cmp	r2, r3
 811ad4a:	d105      	bne.n	811ad58 <tcp_slowtmr+0x8c>
      prev = pcb;
 811ad4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811ad50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad52:	68db      	ldr	r3, [r3, #12]
 811ad54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 811ad56:	e270      	b.n	811b23a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 811ad58:	4b76      	ldr	r3, [pc, #472]	@ (811af34 <tcp_slowtmr+0x268>)
 811ad5a:	781a      	ldrb	r2, [r3, #0]
 811ad5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad5e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 811ad60:	2300      	movs	r3, #0
 811ad62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 811ad66:	2300      	movs	r3, #0
 811ad68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 811ad6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad6e:	7d1b      	ldrb	r3, [r3, #20]
 811ad70:	2b02      	cmp	r3, #2
 811ad72:	d10a      	bne.n	811ad8a <tcp_slowtmr+0xbe>
 811ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811ad7a:	2b05      	cmp	r3, #5
 811ad7c:	d905      	bls.n	811ad8a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 811ad7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ad82:	3301      	adds	r3, #1
 811ad84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811ad88:	e11e      	b.n	811afc8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 811ad8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ad8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811ad90:	2b0b      	cmp	r3, #11
 811ad92:	d905      	bls.n	811ada0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 811ad94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ad98:	3301      	adds	r3, #1
 811ad9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811ad9e:	e113      	b.n	811afc8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 811ada0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ada2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811ada6:	2b00      	cmp	r3, #0
 811ada8:	d075      	beq.n	811ae96 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 811adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811adac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811adae:	2b00      	cmp	r3, #0
 811adb0:	d006      	beq.n	811adc0 <tcp_slowtmr+0xf4>
 811adb2:	4b62      	ldr	r3, [pc, #392]	@ (811af3c <tcp_slowtmr+0x270>)
 811adb4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 811adb8:	4965      	ldr	r1, [pc, #404]	@ (811af50 <tcp_slowtmr+0x284>)
 811adba:	4862      	ldr	r0, [pc, #392]	@ (811af44 <tcp_slowtmr+0x278>)
 811adbc:	f006 ffe2 	bl	8121d84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 811adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811adc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811adc4:	2b00      	cmp	r3, #0
 811adc6:	d106      	bne.n	811add6 <tcp_slowtmr+0x10a>
 811adc8:	4b5c      	ldr	r3, [pc, #368]	@ (811af3c <tcp_slowtmr+0x270>)
 811adca:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811adce:	4961      	ldr	r1, [pc, #388]	@ (811af54 <tcp_slowtmr+0x288>)
 811add0:	485c      	ldr	r0, [pc, #368]	@ (811af44 <tcp_slowtmr+0x278>)
 811add2:	f006 ffd7 	bl	8121d84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 811add6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811add8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811addc:	2b0b      	cmp	r3, #11
 811adde:	d905      	bls.n	811adec <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 811ade0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ade4:	3301      	adds	r3, #1
 811ade6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811adea:	e0ed      	b.n	811afc8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 811adec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811adee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811adf2:	3b01      	subs	r3, #1
 811adf4:	4a58      	ldr	r2, [pc, #352]	@ (811af58 <tcp_slowtmr+0x28c>)
 811adf6:	5cd3      	ldrb	r3, [r2, r3]
 811adf8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 811adfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811adfc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 811ae00:	7c7a      	ldrb	r2, [r7, #17]
 811ae02:	429a      	cmp	r2, r3
 811ae04:	d907      	bls.n	811ae16 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 811ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae08:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 811ae0c:	3301      	adds	r3, #1
 811ae0e:	b2da      	uxtb	r2, r3
 811ae10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae12:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 811ae16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 811ae1c:	7c7a      	ldrb	r2, [r7, #17]
 811ae1e:	429a      	cmp	r2, r3
 811ae20:	f200 80d2 	bhi.w	811afc8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 811ae24:	2301      	movs	r3, #1
 811ae26:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 811ae28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811ae2e:	2b00      	cmp	r3, #0
 811ae30:	d108      	bne.n	811ae44 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811ae32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811ae34:	f005 f942 	bl	81200bc <tcp_zero_window_probe>
 811ae38:	4603      	mov	r3, r0
 811ae3a:	2b00      	cmp	r3, #0
 811ae3c:	d014      	beq.n	811ae68 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 811ae3e:	2300      	movs	r3, #0
 811ae40:	623b      	str	r3, [r7, #32]
 811ae42:	e011      	b.n	811ae68 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 811ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811ae4a:	4619      	mov	r1, r3
 811ae4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811ae4e:	f004 f805 	bl	811ee5c <tcp_split_unsent_seg>
 811ae52:	4603      	mov	r3, r0
 811ae54:	2b00      	cmp	r3, #0
 811ae56:	d107      	bne.n	811ae68 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 811ae58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811ae5a:	f004 fa85 	bl	811f368 <tcp_output>
 811ae5e:	4603      	mov	r3, r0
 811ae60:	2b00      	cmp	r3, #0
 811ae62:	d101      	bne.n	811ae68 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 811ae64:	2300      	movs	r3, #0
 811ae66:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 811ae68:	6a3b      	ldr	r3, [r7, #32]
 811ae6a:	2b00      	cmp	r3, #0
 811ae6c:	f000 80ac 	beq.w	811afc8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 811ae70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae72:	2200      	movs	r2, #0
 811ae74:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 811ae78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae7a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811ae7e:	2b06      	cmp	r3, #6
 811ae80:	f200 80a2 	bhi.w	811afc8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 811ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811ae8a:	3301      	adds	r3, #1
 811ae8c:	b2da      	uxtb	r2, r3
 811ae8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae90:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 811ae94:	e098      	b.n	811afc8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 811ae96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ae98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811ae9c:	2b00      	cmp	r3, #0
 811ae9e:	db0f      	blt.n	811aec0 <tcp_slowtmr+0x1f4>
 811aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aea2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811aea6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811aeaa:	4293      	cmp	r3, r2
 811aeac:	d008      	beq.n	811aec0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 811aeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aeb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811aeb4:	b29b      	uxth	r3, r3
 811aeb6:	3301      	adds	r3, #1
 811aeb8:	b29b      	uxth	r3, r3
 811aeba:	b21a      	sxth	r2, r3
 811aebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aebe:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 811aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aec2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 811aec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aec8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811aecc:	429a      	cmp	r2, r3
 811aece:	db7b      	blt.n	811afc8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 811aed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811aed2:	f004 fd3f 	bl	811f954 <tcp_rexmit_rto_prepare>
 811aed6:	4603      	mov	r3, r0
 811aed8:	2b00      	cmp	r3, #0
 811aeda:	d007      	beq.n	811aeec <tcp_slowtmr+0x220>
 811aedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811aee0:	2b00      	cmp	r3, #0
 811aee2:	d171      	bne.n	811afc8 <tcp_slowtmr+0x2fc>
 811aee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811aee8:	2b00      	cmp	r3, #0
 811aeea:	d06d      	beq.n	811afc8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 811aeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aeee:	7d1b      	ldrb	r3, [r3, #20]
 811aef0:	2b02      	cmp	r3, #2
 811aef2:	d03a      	beq.n	811af6a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 811aef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811aefa:	2b0c      	cmp	r3, #12
 811aefc:	bf28      	it	cs
 811aefe:	230c      	movcs	r3, #12
 811af00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811af08:	10db      	asrs	r3, r3, #3
 811af0a:	b21b      	sxth	r3, r3
 811af0c:	461a      	mov	r2, r3
 811af0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811af14:	4413      	add	r3, r2
 811af16:	7efa      	ldrb	r2, [r7, #27]
 811af18:	4910      	ldr	r1, [pc, #64]	@ (811af5c <tcp_slowtmr+0x290>)
 811af1a:	5c8a      	ldrb	r2, [r1, r2]
 811af1c:	4093      	lsls	r3, r2
 811af1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 811af20:	697b      	ldr	r3, [r7, #20]
 811af22:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 811af26:	4293      	cmp	r3, r2
 811af28:	dc1a      	bgt.n	811af60 <tcp_slowtmr+0x294>
 811af2a:	697b      	ldr	r3, [r7, #20]
 811af2c:	b21a      	sxth	r2, r3
 811af2e:	e019      	b.n	811af64 <tcp_slowtmr+0x298>
 811af30:	240126a0 	.word	0x240126a0
 811af34:	240126b6 	.word	0x240126b6
 811af38:	240126ac 	.word	0x240126ac
 811af3c:	08126e3c 	.word	0x08126e3c
 811af40:	081271b8 	.word	0x081271b8
 811af44:	08126eb8 	.word	0x08126eb8
 811af48:	081271e4 	.word	0x081271e4
 811af4c:	08127210 	.word	0x08127210
 811af50:	08127240 	.word	0x08127240
 811af54:	08127274 	.word	0x08127274
 811af58:	08128a44 	.word	0x08128a44
 811af5c:	08128a34 	.word	0x08128a34
 811af60:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811af64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 811af6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af6c:	2200      	movs	r2, #0
 811af6e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 811af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811af76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811af7c:	4293      	cmp	r3, r2
 811af7e:	bf28      	it	cs
 811af80:	4613      	movcs	r3, r2
 811af82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 811af84:	8a7b      	ldrh	r3, [r7, #18]
 811af86:	085b      	lsrs	r3, r3, #1
 811af88:	b29a      	uxth	r2, r3
 811af8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 811af90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811af96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811af98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811af9a:	005b      	lsls	r3, r3, #1
 811af9c:	b29b      	uxth	r3, r3
 811af9e:	429a      	cmp	r2, r3
 811afa0:	d206      	bcs.n	811afb0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 811afa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811afa6:	005b      	lsls	r3, r3, #1
 811afa8:	b29a      	uxth	r2, r3
 811afaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 811afb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afb2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 811afb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afb6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 811afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afbc:	2200      	movs	r2, #0
 811afbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 811afc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811afc4:	f004 fd36 	bl	811fa34 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 811afc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afca:	7d1b      	ldrb	r3, [r3, #20]
 811afcc:	2b06      	cmp	r3, #6
 811afce:	d111      	bne.n	811aff4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 811afd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afd2:	8b5b      	ldrh	r3, [r3, #26]
 811afd4:	f003 0310 	and.w	r3, r3, #16
 811afd8:	2b00      	cmp	r3, #0
 811afda:	d00b      	beq.n	811aff4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 811afdc:	4b9c      	ldr	r3, [pc, #624]	@ (811b250 <tcp_slowtmr+0x584>)
 811afde:	681a      	ldr	r2, [r3, #0]
 811afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811afe2:	6a1b      	ldr	r3, [r3, #32]
 811afe4:	1ad3      	subs	r3, r2, r3
 811afe6:	2b28      	cmp	r3, #40	@ 0x28
 811afe8:	d904      	bls.n	811aff4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 811afea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811afee:	3301      	adds	r3, #1
 811aff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811aff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aff6:	7a5b      	ldrb	r3, [r3, #9]
 811aff8:	f003 0308 	and.w	r3, r3, #8
 811affc:	2b00      	cmp	r3, #0
 811affe:	d04a      	beq.n	811b096 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 811b000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b002:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811b004:	2b04      	cmp	r3, #4
 811b006:	d003      	beq.n	811b010 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 811b008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b00a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 811b00c:	2b07      	cmp	r3, #7
 811b00e:	d142      	bne.n	811b096 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811b010:	4b8f      	ldr	r3, [pc, #572]	@ (811b250 <tcp_slowtmr+0x584>)
 811b012:	681a      	ldr	r2, [r3, #0]
 811b014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b016:	6a1b      	ldr	r3, [r3, #32]
 811b018:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 811b01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b01c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811b020:	4b8c      	ldr	r3, [pc, #560]	@ (811b254 <tcp_slowtmr+0x588>)
 811b022:	440b      	add	r3, r1
 811b024:	498c      	ldr	r1, [pc, #560]	@ (811b258 <tcp_slowtmr+0x58c>)
 811b026:	fba1 1303 	umull	r1, r3, r1, r3
 811b02a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811b02c:	429a      	cmp	r2, r3
 811b02e:	d90a      	bls.n	811b046 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 811b030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811b034:	3301      	adds	r3, #1
 811b036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 811b03a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811b03e:	3301      	adds	r3, #1
 811b040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 811b044:	e027      	b.n	811b096 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811b046:	4b82      	ldr	r3, [pc, #520]	@ (811b250 <tcp_slowtmr+0x584>)
 811b048:	681a      	ldr	r2, [r3, #0]
 811b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b04c:	6a1b      	ldr	r3, [r3, #32]
 811b04e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 811b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b052:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b058:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 811b05c:	4618      	mov	r0, r3
 811b05e:	4b7f      	ldr	r3, [pc, #508]	@ (811b25c <tcp_slowtmr+0x590>)
 811b060:	fb00 f303 	mul.w	r3, r0, r3
 811b064:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 811b066:	497c      	ldr	r1, [pc, #496]	@ (811b258 <tcp_slowtmr+0x58c>)
 811b068:	fba1 1303 	umull	r1, r3, r1, r3
 811b06c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811b06e:	429a      	cmp	r2, r3
 811b070:	d911      	bls.n	811b096 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 811b072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811b074:	f004 ffe2 	bl	812003c <tcp_keepalive>
 811b078:	4603      	mov	r3, r0
 811b07a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 811b07e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811b082:	2b00      	cmp	r3, #0
 811b084:	d107      	bne.n	811b096 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 811b086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b088:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 811b08c:	3301      	adds	r3, #1
 811b08e:	b2da      	uxtb	r2, r3
 811b090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b092:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 811b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811b09a:	2b00      	cmp	r3, #0
 811b09c:	d011      	beq.n	811b0c2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 811b09e:	4b6c      	ldr	r3, [pc, #432]	@ (811b250 <tcp_slowtmr+0x584>)
 811b0a0:	681a      	ldr	r2, [r3, #0]
 811b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b0a4:	6a1b      	ldr	r3, [r3, #32]
 811b0a6:	1ad2      	subs	r2, r2, r3
 811b0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b0aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811b0ae:	4619      	mov	r1, r3
 811b0b0:	460b      	mov	r3, r1
 811b0b2:	005b      	lsls	r3, r3, #1
 811b0b4:	440b      	add	r3, r1
 811b0b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 811b0b8:	429a      	cmp	r2, r3
 811b0ba:	d302      	bcc.n	811b0c2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 811b0bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811b0be:	f000 fe9d 	bl	811bdfc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 811b0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b0c4:	7d1b      	ldrb	r3, [r3, #20]
 811b0c6:	2b03      	cmp	r3, #3
 811b0c8:	d10b      	bne.n	811b0e2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811b0ca:	4b61      	ldr	r3, [pc, #388]	@ (811b250 <tcp_slowtmr+0x584>)
 811b0cc:	681a      	ldr	r2, [r3, #0]
 811b0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b0d0:	6a1b      	ldr	r3, [r3, #32]
 811b0d2:	1ad3      	subs	r3, r2, r3
 811b0d4:	2b28      	cmp	r3, #40	@ 0x28
 811b0d6:	d904      	bls.n	811b0e2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 811b0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811b0dc:	3301      	adds	r3, #1
 811b0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 811b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b0e4:	7d1b      	ldrb	r3, [r3, #20]
 811b0e6:	2b09      	cmp	r3, #9
 811b0e8:	d10b      	bne.n	811b102 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811b0ea:	4b59      	ldr	r3, [pc, #356]	@ (811b250 <tcp_slowtmr+0x584>)
 811b0ec:	681a      	ldr	r2, [r3, #0]
 811b0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b0f0:	6a1b      	ldr	r3, [r3, #32]
 811b0f2:	1ad3      	subs	r3, r2, r3
 811b0f4:	2bf0      	cmp	r3, #240	@ 0xf0
 811b0f6:	d904      	bls.n	811b102 <tcp_slowtmr+0x436>
        ++pcb_remove;
 811b0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811b0fc:	3301      	adds	r3, #1
 811b0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 811b102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811b106:	2b00      	cmp	r3, #0
 811b108:	d060      	beq.n	811b1cc <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 811b10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811b110:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 811b112:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811b114:	f000 fcbe 	bl	811ba94 <tcp_pcb_purge>
      if (prev != NULL) {
 811b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b11a:	2b00      	cmp	r3, #0
 811b11c:	d010      	beq.n	811b140 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811b11e:	4b50      	ldr	r3, [pc, #320]	@ (811b260 <tcp_slowtmr+0x594>)
 811b120:	681b      	ldr	r3, [r3, #0]
 811b122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811b124:	429a      	cmp	r2, r3
 811b126:	d106      	bne.n	811b136 <tcp_slowtmr+0x46a>
 811b128:	4b4e      	ldr	r3, [pc, #312]	@ (811b264 <tcp_slowtmr+0x598>)
 811b12a:	f240 526d 	movw	r2, #1389	@ 0x56d
 811b12e:	494e      	ldr	r1, [pc, #312]	@ (811b268 <tcp_slowtmr+0x59c>)
 811b130:	484e      	ldr	r0, [pc, #312]	@ (811b26c <tcp_slowtmr+0x5a0>)
 811b132:	f006 fe27 	bl	8121d84 <iprintf>
        prev->next = pcb->next;
 811b136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b138:	68da      	ldr	r2, [r3, #12]
 811b13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b13c:	60da      	str	r2, [r3, #12]
 811b13e:	e00f      	b.n	811b160 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811b140:	4b47      	ldr	r3, [pc, #284]	@ (811b260 <tcp_slowtmr+0x594>)
 811b142:	681b      	ldr	r3, [r3, #0]
 811b144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811b146:	429a      	cmp	r2, r3
 811b148:	d006      	beq.n	811b158 <tcp_slowtmr+0x48c>
 811b14a:	4b46      	ldr	r3, [pc, #280]	@ (811b264 <tcp_slowtmr+0x598>)
 811b14c:	f240 5271 	movw	r2, #1393	@ 0x571
 811b150:	4947      	ldr	r1, [pc, #284]	@ (811b270 <tcp_slowtmr+0x5a4>)
 811b152:	4846      	ldr	r0, [pc, #280]	@ (811b26c <tcp_slowtmr+0x5a0>)
 811b154:	f006 fe16 	bl	8121d84 <iprintf>
        tcp_active_pcbs = pcb->next;
 811b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b15a:	68db      	ldr	r3, [r3, #12]
 811b15c:	4a40      	ldr	r2, [pc, #256]	@ (811b260 <tcp_slowtmr+0x594>)
 811b15e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 811b160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811b164:	2b00      	cmp	r3, #0
 811b166:	d013      	beq.n	811b190 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811b168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b16a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b16e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811b170:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 811b172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b174:	3304      	adds	r3, #4
 811b176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811b178:	8ad2      	ldrh	r2, [r2, #22]
 811b17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811b17c:	8b09      	ldrh	r1, [r1, #24]
 811b17e:	9102      	str	r1, [sp, #8]
 811b180:	9201      	str	r2, [sp, #4]
 811b182:	9300      	str	r3, [sp, #0]
 811b184:	462b      	mov	r3, r5
 811b186:	4622      	mov	r2, r4
 811b188:	4601      	mov	r1, r0
 811b18a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811b18c:	f004 fea2 	bl	811fed4 <tcp_rst>
      err_arg = pcb->callback_arg;
 811b190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b192:	691b      	ldr	r3, [r3, #16]
 811b194:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 811b196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b198:	7d1b      	ldrb	r3, [r3, #20]
 811b19a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 811b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b19e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 811b1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b1a2:	68db      	ldr	r3, [r3, #12]
 811b1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811b1a6:	6838      	ldr	r0, [r7, #0]
 811b1a8:	f7fe fff2 	bl	811a190 <tcp_free>
      tcp_active_pcbs_changed = 0;
 811b1ac:	4b31      	ldr	r3, [pc, #196]	@ (811b274 <tcp_slowtmr+0x5a8>)
 811b1ae:	2200      	movs	r2, #0
 811b1b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 811b1b2:	68fb      	ldr	r3, [r7, #12]
 811b1b4:	2b00      	cmp	r3, #0
 811b1b6:	d004      	beq.n	811b1c2 <tcp_slowtmr+0x4f6>
 811b1b8:	68fb      	ldr	r3, [r7, #12]
 811b1ba:	f06f 010c 	mvn.w	r1, #12
 811b1be:	68b8      	ldr	r0, [r7, #8]
 811b1c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 811b1c2:	4b2c      	ldr	r3, [pc, #176]	@ (811b274 <tcp_slowtmr+0x5a8>)
 811b1c4:	781b      	ldrb	r3, [r3, #0]
 811b1c6:	2b00      	cmp	r3, #0
 811b1c8:	d037      	beq.n	811b23a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 811b1ca:	e592      	b.n	811acf2 <tcp_slowtmr+0x26>
      prev = pcb;
 811b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811b1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b1d2:	68db      	ldr	r3, [r3, #12]
 811b1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 811b1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b1d8:	7f1b      	ldrb	r3, [r3, #28]
 811b1da:	3301      	adds	r3, #1
 811b1dc:	b2da      	uxtb	r2, r3
 811b1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b1e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 811b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b1e4:	7f1a      	ldrb	r2, [r3, #28]
 811b1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b1e8:	7f5b      	ldrb	r3, [r3, #29]
 811b1ea:	429a      	cmp	r2, r3
 811b1ec:	d325      	bcc.n	811b23a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 811b1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b1f0:	2200      	movs	r2, #0
 811b1f2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 811b1f4:	4b1f      	ldr	r3, [pc, #124]	@ (811b274 <tcp_slowtmr+0x5a8>)
 811b1f6:	2200      	movs	r2, #0
 811b1f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 811b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811b200:	2b00      	cmp	r3, #0
 811b202:	d00b      	beq.n	811b21c <tcp_slowtmr+0x550>
 811b204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811b20a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811b20c:	6912      	ldr	r2, [r2, #16]
 811b20e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811b210:	4610      	mov	r0, r2
 811b212:	4798      	blx	r3
 811b214:	4603      	mov	r3, r0
 811b216:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 811b21a:	e002      	b.n	811b222 <tcp_slowtmr+0x556>
 811b21c:	2300      	movs	r3, #0
 811b21e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 811b222:	4b14      	ldr	r3, [pc, #80]	@ (811b274 <tcp_slowtmr+0x5a8>)
 811b224:	781b      	ldrb	r3, [r3, #0]
 811b226:	2b00      	cmp	r3, #0
 811b228:	f47f ad62 	bne.w	811acf0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 811b22c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811b230:	2b00      	cmp	r3, #0
 811b232:	d102      	bne.n	811b23a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 811b234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811b236:	f004 f897 	bl	811f368 <tcp_output>
  while (pcb != NULL) {
 811b23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b23c:	2b00      	cmp	r3, #0
 811b23e:	f47f ad5e 	bne.w	811acfe <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 811b242:	2300      	movs	r3, #0
 811b244:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 811b246:	4b0c      	ldr	r3, [pc, #48]	@ (811b278 <tcp_slowtmr+0x5ac>)
 811b248:	681b      	ldr	r3, [r3, #0]
 811b24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811b24c:	e069      	b.n	811b322 <tcp_slowtmr+0x656>
 811b24e:	bf00      	nop
 811b250:	240126a0 	.word	0x240126a0
 811b254:	000a4cb8 	.word	0x000a4cb8
 811b258:	10624dd3 	.word	0x10624dd3
 811b25c:	000124f8 	.word	0x000124f8
 811b260:	240126ac 	.word	0x240126ac
 811b264:	08126e3c 	.word	0x08126e3c
 811b268:	081272ac 	.word	0x081272ac
 811b26c:	08126eb8 	.word	0x08126eb8
 811b270:	081272d8 	.word	0x081272d8
 811b274:	240126b4 	.word	0x240126b4
 811b278:	240126b0 	.word	0x240126b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811b27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b27e:	7d1b      	ldrb	r3, [r3, #20]
 811b280:	2b0a      	cmp	r3, #10
 811b282:	d006      	beq.n	811b292 <tcp_slowtmr+0x5c6>
 811b284:	4b2b      	ldr	r3, [pc, #172]	@ (811b334 <tcp_slowtmr+0x668>)
 811b286:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 811b28a:	492b      	ldr	r1, [pc, #172]	@ (811b338 <tcp_slowtmr+0x66c>)
 811b28c:	482b      	ldr	r0, [pc, #172]	@ (811b33c <tcp_slowtmr+0x670>)
 811b28e:	f006 fd79 	bl	8121d84 <iprintf>
    pcb_remove = 0;
 811b292:	2300      	movs	r3, #0
 811b294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811b298:	4b29      	ldr	r3, [pc, #164]	@ (811b340 <tcp_slowtmr+0x674>)
 811b29a:	681a      	ldr	r2, [r3, #0]
 811b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b29e:	6a1b      	ldr	r3, [r3, #32]
 811b2a0:	1ad3      	subs	r3, r2, r3
 811b2a2:	2bf0      	cmp	r3, #240	@ 0xf0
 811b2a4:	d904      	bls.n	811b2b0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 811b2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811b2aa:	3301      	adds	r3, #1
 811b2ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 811b2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811b2b4:	2b00      	cmp	r3, #0
 811b2b6:	d02f      	beq.n	811b318 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 811b2b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811b2ba:	f000 fbeb 	bl	811ba94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 811b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b2c0:	2b00      	cmp	r3, #0
 811b2c2:	d010      	beq.n	811b2e6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 811b2c4:	4b1f      	ldr	r3, [pc, #124]	@ (811b344 <tcp_slowtmr+0x678>)
 811b2c6:	681b      	ldr	r3, [r3, #0]
 811b2c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811b2ca:	429a      	cmp	r2, r3
 811b2cc:	d106      	bne.n	811b2dc <tcp_slowtmr+0x610>
 811b2ce:	4b19      	ldr	r3, [pc, #100]	@ (811b334 <tcp_slowtmr+0x668>)
 811b2d0:	f240 52af 	movw	r2, #1455	@ 0x5af
 811b2d4:	491c      	ldr	r1, [pc, #112]	@ (811b348 <tcp_slowtmr+0x67c>)
 811b2d6:	4819      	ldr	r0, [pc, #100]	@ (811b33c <tcp_slowtmr+0x670>)
 811b2d8:	f006 fd54 	bl	8121d84 <iprintf>
        prev->next = pcb->next;
 811b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b2de:	68da      	ldr	r2, [r3, #12]
 811b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811b2e2:	60da      	str	r2, [r3, #12]
 811b2e4:	e00f      	b.n	811b306 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811b2e6:	4b17      	ldr	r3, [pc, #92]	@ (811b344 <tcp_slowtmr+0x678>)
 811b2e8:	681b      	ldr	r3, [r3, #0]
 811b2ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811b2ec:	429a      	cmp	r2, r3
 811b2ee:	d006      	beq.n	811b2fe <tcp_slowtmr+0x632>
 811b2f0:	4b10      	ldr	r3, [pc, #64]	@ (811b334 <tcp_slowtmr+0x668>)
 811b2f2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811b2f6:	4915      	ldr	r1, [pc, #84]	@ (811b34c <tcp_slowtmr+0x680>)
 811b2f8:	4810      	ldr	r0, [pc, #64]	@ (811b33c <tcp_slowtmr+0x670>)
 811b2fa:	f006 fd43 	bl	8121d84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 811b2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b300:	68db      	ldr	r3, [r3, #12]
 811b302:	4a10      	ldr	r2, [pc, #64]	@ (811b344 <tcp_slowtmr+0x678>)
 811b304:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811b306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b308:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 811b30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b30c:	68db      	ldr	r3, [r3, #12]
 811b30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 811b310:	69f8      	ldr	r0, [r7, #28]
 811b312:	f7fe ff3d 	bl	811a190 <tcp_free>
 811b316:	e004      	b.n	811b322 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 811b318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b31a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b31e:	68db      	ldr	r3, [r3, #12]
 811b320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811b324:	2b00      	cmp	r3, #0
 811b326:	d1a9      	bne.n	811b27c <tcp_slowtmr+0x5b0>
    }
  }
}
 811b328:	bf00      	nop
 811b32a:	bf00      	nop
 811b32c:	3730      	adds	r7, #48	@ 0x30
 811b32e:	46bd      	mov	sp, r7
 811b330:	bdb0      	pop	{r4, r5, r7, pc}
 811b332:	bf00      	nop
 811b334:	08126e3c 	.word	0x08126e3c
 811b338:	08127304 	.word	0x08127304
 811b33c:	08126eb8 	.word	0x08126eb8
 811b340:	240126a0 	.word	0x240126a0
 811b344:	240126b0 	.word	0x240126b0
 811b348:	08127334 	.word	0x08127334
 811b34c:	0812735c 	.word	0x0812735c

0811b350 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 811b350:	b580      	push	{r7, lr}
 811b352:	b082      	sub	sp, #8
 811b354:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811b356:	4b2d      	ldr	r3, [pc, #180]	@ (811b40c <tcp_fasttmr+0xbc>)
 811b358:	781b      	ldrb	r3, [r3, #0]
 811b35a:	3301      	adds	r3, #1
 811b35c:	b2da      	uxtb	r2, r3
 811b35e:	4b2b      	ldr	r3, [pc, #172]	@ (811b40c <tcp_fasttmr+0xbc>)
 811b360:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 811b362:	4b2b      	ldr	r3, [pc, #172]	@ (811b410 <tcp_fasttmr+0xc0>)
 811b364:	681b      	ldr	r3, [r3, #0]
 811b366:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811b368:	e048      	b.n	811b3fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 811b36a:	687b      	ldr	r3, [r7, #4]
 811b36c:	7f9a      	ldrb	r2, [r3, #30]
 811b36e:	4b27      	ldr	r3, [pc, #156]	@ (811b40c <tcp_fasttmr+0xbc>)
 811b370:	781b      	ldrb	r3, [r3, #0]
 811b372:	429a      	cmp	r2, r3
 811b374:	d03f      	beq.n	811b3f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 811b376:	4b25      	ldr	r3, [pc, #148]	@ (811b40c <tcp_fasttmr+0xbc>)
 811b378:	781a      	ldrb	r2, [r3, #0]
 811b37a:	687b      	ldr	r3, [r7, #4]
 811b37c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 811b37e:	687b      	ldr	r3, [r7, #4]
 811b380:	8b5b      	ldrh	r3, [r3, #26]
 811b382:	f003 0301 	and.w	r3, r3, #1
 811b386:	2b00      	cmp	r3, #0
 811b388:	d010      	beq.n	811b3ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 811b38a:	687b      	ldr	r3, [r7, #4]
 811b38c:	8b5b      	ldrh	r3, [r3, #26]
 811b38e:	f043 0302 	orr.w	r3, r3, #2
 811b392:	b29a      	uxth	r2, r3
 811b394:	687b      	ldr	r3, [r7, #4]
 811b396:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 811b398:	6878      	ldr	r0, [r7, #4]
 811b39a:	f003 ffe5 	bl	811f368 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811b39e:	687b      	ldr	r3, [r7, #4]
 811b3a0:	8b5b      	ldrh	r3, [r3, #26]
 811b3a2:	f023 0303 	bic.w	r3, r3, #3
 811b3a6:	b29a      	uxth	r2, r3
 811b3a8:	687b      	ldr	r3, [r7, #4]
 811b3aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 811b3ac:	687b      	ldr	r3, [r7, #4]
 811b3ae:	8b5b      	ldrh	r3, [r3, #26]
 811b3b0:	f003 0308 	and.w	r3, r3, #8
 811b3b4:	2b00      	cmp	r3, #0
 811b3b6:	d009      	beq.n	811b3cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 811b3b8:	687b      	ldr	r3, [r7, #4]
 811b3ba:	8b5b      	ldrh	r3, [r3, #26]
 811b3bc:	f023 0308 	bic.w	r3, r3, #8
 811b3c0:	b29a      	uxth	r2, r3
 811b3c2:	687b      	ldr	r3, [r7, #4]
 811b3c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 811b3c6:	6878      	ldr	r0, [r7, #4]
 811b3c8:	f7ff f876 	bl	811a4b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 811b3cc:	687b      	ldr	r3, [r7, #4]
 811b3ce:	68db      	ldr	r3, [r3, #12]
 811b3d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 811b3d2:	687b      	ldr	r3, [r7, #4]
 811b3d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811b3d6:	2b00      	cmp	r3, #0
 811b3d8:	d00a      	beq.n	811b3f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 811b3da:	4b0e      	ldr	r3, [pc, #56]	@ (811b414 <tcp_fasttmr+0xc4>)
 811b3dc:	2200      	movs	r2, #0
 811b3de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 811b3e0:	6878      	ldr	r0, [r7, #4]
 811b3e2:	f000 f819 	bl	811b418 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 811b3e6:	4b0b      	ldr	r3, [pc, #44]	@ (811b414 <tcp_fasttmr+0xc4>)
 811b3e8:	781b      	ldrb	r3, [r3, #0]
 811b3ea:	2b00      	cmp	r3, #0
 811b3ec:	d000      	beq.n	811b3f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 811b3ee:	e7b8      	b.n	811b362 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 811b3f0:	683b      	ldr	r3, [r7, #0]
 811b3f2:	607b      	str	r3, [r7, #4]
 811b3f4:	e002      	b.n	811b3fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 811b3f6:	687b      	ldr	r3, [r7, #4]
 811b3f8:	68db      	ldr	r3, [r3, #12]
 811b3fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811b3fc:	687b      	ldr	r3, [r7, #4]
 811b3fe:	2b00      	cmp	r3, #0
 811b400:	d1b3      	bne.n	811b36a <tcp_fasttmr+0x1a>
    }
  }
}
 811b402:	bf00      	nop
 811b404:	bf00      	nop
 811b406:	3708      	adds	r7, #8
 811b408:	46bd      	mov	sp, r7
 811b40a:	bd80      	pop	{r7, pc}
 811b40c:	240126b6 	.word	0x240126b6
 811b410:	240126ac 	.word	0x240126ac
 811b414:	240126b4 	.word	0x240126b4

0811b418 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811b418:	b590      	push	{r4, r7, lr}
 811b41a:	b085      	sub	sp, #20
 811b41c:	af00      	add	r7, sp, #0
 811b41e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 811b420:	687b      	ldr	r3, [r7, #4]
 811b422:	2b00      	cmp	r3, #0
 811b424:	d109      	bne.n	811b43a <tcp_process_refused_data+0x22>
 811b426:	4b37      	ldr	r3, [pc, #220]	@ (811b504 <tcp_process_refused_data+0xec>)
 811b428:	f240 6209 	movw	r2, #1545	@ 0x609
 811b42c:	4936      	ldr	r1, [pc, #216]	@ (811b508 <tcp_process_refused_data+0xf0>)
 811b42e:	4837      	ldr	r0, [pc, #220]	@ (811b50c <tcp_process_refused_data+0xf4>)
 811b430:	f006 fca8 	bl	8121d84 <iprintf>
 811b434:	f06f 030f 	mvn.w	r3, #15
 811b438:	e060      	b.n	811b4fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811b43a:	687b      	ldr	r3, [r7, #4]
 811b43c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811b43e:	7b5b      	ldrb	r3, [r3, #13]
 811b440:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 811b442:	687b      	ldr	r3, [r7, #4]
 811b444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811b446:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811b448:	687b      	ldr	r3, [r7, #4]
 811b44a:	2200      	movs	r2, #0
 811b44c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 811b44e:	687b      	ldr	r3, [r7, #4]
 811b450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811b454:	2b00      	cmp	r3, #0
 811b456:	d00b      	beq.n	811b470 <tcp_process_refused_data+0x58>
 811b458:	687b      	ldr	r3, [r7, #4]
 811b45a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811b45e:	687b      	ldr	r3, [r7, #4]
 811b460:	6918      	ldr	r0, [r3, #16]
 811b462:	2300      	movs	r3, #0
 811b464:	68ba      	ldr	r2, [r7, #8]
 811b466:	6879      	ldr	r1, [r7, #4]
 811b468:	47a0      	blx	r4
 811b46a:	4603      	mov	r3, r0
 811b46c:	73fb      	strb	r3, [r7, #15]
 811b46e:	e007      	b.n	811b480 <tcp_process_refused_data+0x68>
 811b470:	2300      	movs	r3, #0
 811b472:	68ba      	ldr	r2, [r7, #8]
 811b474:	6879      	ldr	r1, [r7, #4]
 811b476:	2000      	movs	r0, #0
 811b478:	f000 f8a4 	bl	811b5c4 <tcp_recv_null>
 811b47c:	4603      	mov	r3, r0
 811b47e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 811b480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811b484:	2b00      	cmp	r3, #0
 811b486:	d12a      	bne.n	811b4de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 811b488:	7bbb      	ldrb	r3, [r7, #14]
 811b48a:	f003 0320 	and.w	r3, r3, #32
 811b48e:	2b00      	cmp	r3, #0
 811b490:	d033      	beq.n	811b4fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811b492:	687b      	ldr	r3, [r7, #4]
 811b494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811b496:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811b49a:	d005      	beq.n	811b4a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 811b49c:	687b      	ldr	r3, [r7, #4]
 811b49e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811b4a0:	3301      	adds	r3, #1
 811b4a2:	b29a      	uxth	r2, r3
 811b4a4:	687b      	ldr	r3, [r7, #4]
 811b4a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 811b4a8:	687b      	ldr	r3, [r7, #4]
 811b4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811b4ae:	2b00      	cmp	r3, #0
 811b4b0:	d00b      	beq.n	811b4ca <tcp_process_refused_data+0xb2>
 811b4b2:	687b      	ldr	r3, [r7, #4]
 811b4b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811b4b8:	687b      	ldr	r3, [r7, #4]
 811b4ba:	6918      	ldr	r0, [r3, #16]
 811b4bc:	2300      	movs	r3, #0
 811b4be:	2200      	movs	r2, #0
 811b4c0:	6879      	ldr	r1, [r7, #4]
 811b4c2:	47a0      	blx	r4
 811b4c4:	4603      	mov	r3, r0
 811b4c6:	73fb      	strb	r3, [r7, #15]
 811b4c8:	e001      	b.n	811b4ce <tcp_process_refused_data+0xb6>
 811b4ca:	2300      	movs	r3, #0
 811b4cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 811b4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811b4d2:	f113 0f0d 	cmn.w	r3, #13
 811b4d6:	d110      	bne.n	811b4fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 811b4d8:	f06f 030c 	mvn.w	r3, #12
 811b4dc:	e00e      	b.n	811b4fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 811b4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811b4e2:	f113 0f0d 	cmn.w	r3, #13
 811b4e6:	d102      	bne.n	811b4ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811b4e8:	f06f 030c 	mvn.w	r3, #12
 811b4ec:	e006      	b.n	811b4fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 811b4ee:	687b      	ldr	r3, [r7, #4]
 811b4f0:	68ba      	ldr	r2, [r7, #8]
 811b4f2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 811b4f4:	f06f 0304 	mvn.w	r3, #4
 811b4f8:	e000      	b.n	811b4fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 811b4fa:	2300      	movs	r3, #0
}
 811b4fc:	4618      	mov	r0, r3
 811b4fe:	3714      	adds	r7, #20
 811b500:	46bd      	mov	sp, r7
 811b502:	bd90      	pop	{r4, r7, pc}
 811b504:	08126e3c 	.word	0x08126e3c
 811b508:	08127384 	.word	0x08127384
 811b50c:	08126eb8 	.word	0x08126eb8

0811b510 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 811b510:	b580      	push	{r7, lr}
 811b512:	b084      	sub	sp, #16
 811b514:	af00      	add	r7, sp, #0
 811b516:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 811b518:	e007      	b.n	811b52a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 811b51a:	687b      	ldr	r3, [r7, #4]
 811b51c:	681b      	ldr	r3, [r3, #0]
 811b51e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 811b520:	6878      	ldr	r0, [r7, #4]
 811b522:	f000 f80a 	bl	811b53a <tcp_seg_free>
    seg = next;
 811b526:	68fb      	ldr	r3, [r7, #12]
 811b528:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 811b52a:	687b      	ldr	r3, [r7, #4]
 811b52c:	2b00      	cmp	r3, #0
 811b52e:	d1f4      	bne.n	811b51a <tcp_segs_free+0xa>
  }
}
 811b530:	bf00      	nop
 811b532:	bf00      	nop
 811b534:	3710      	adds	r7, #16
 811b536:	46bd      	mov	sp, r7
 811b538:	bd80      	pop	{r7, pc}

0811b53a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 811b53a:	b580      	push	{r7, lr}
 811b53c:	b082      	sub	sp, #8
 811b53e:	af00      	add	r7, sp, #0
 811b540:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811b542:	687b      	ldr	r3, [r7, #4]
 811b544:	2b00      	cmp	r3, #0
 811b546:	d00c      	beq.n	811b562 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 811b548:	687b      	ldr	r3, [r7, #4]
 811b54a:	685b      	ldr	r3, [r3, #4]
 811b54c:	2b00      	cmp	r3, #0
 811b54e:	d004      	beq.n	811b55a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 811b550:	687b      	ldr	r3, [r7, #4]
 811b552:	685b      	ldr	r3, [r3, #4]
 811b554:	4618      	mov	r0, r3
 811b556:	f7fe fa09 	bl	811996c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 811b55a:	6879      	ldr	r1, [r7, #4]
 811b55c:	2003      	movs	r0, #3
 811b55e:	f7fb fccb 	bl	8116ef8 <memp_free>
  }
}
 811b562:	bf00      	nop
 811b564:	3708      	adds	r7, #8
 811b566:	46bd      	mov	sp, r7
 811b568:	bd80      	pop	{r7, pc}
	...

0811b56c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 811b56c:	b580      	push	{r7, lr}
 811b56e:	b084      	sub	sp, #16
 811b570:	af00      	add	r7, sp, #0
 811b572:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 811b574:	687b      	ldr	r3, [r7, #4]
 811b576:	2b00      	cmp	r3, #0
 811b578:	d106      	bne.n	811b588 <tcp_seg_copy+0x1c>
 811b57a:	4b0f      	ldr	r3, [pc, #60]	@ (811b5b8 <tcp_seg_copy+0x4c>)
 811b57c:	f240 6282 	movw	r2, #1666	@ 0x682
 811b580:	490e      	ldr	r1, [pc, #56]	@ (811b5bc <tcp_seg_copy+0x50>)
 811b582:	480f      	ldr	r0, [pc, #60]	@ (811b5c0 <tcp_seg_copy+0x54>)
 811b584:	f006 fbfe 	bl	8121d84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 811b588:	2003      	movs	r0, #3
 811b58a:	f7fb fc3f 	bl	8116e0c <memp_malloc>
 811b58e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 811b590:	68fb      	ldr	r3, [r7, #12]
 811b592:	2b00      	cmp	r3, #0
 811b594:	d101      	bne.n	811b59a <tcp_seg_copy+0x2e>
    return NULL;
 811b596:	2300      	movs	r3, #0
 811b598:	e00a      	b.n	811b5b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 811b59a:	2210      	movs	r2, #16
 811b59c:	6879      	ldr	r1, [r7, #4]
 811b59e:	68f8      	ldr	r0, [r7, #12]
 811b5a0:	f006 fe91 	bl	81222c6 <memcpy>
  pbuf_ref(cseg->p);
 811b5a4:	68fb      	ldr	r3, [r7, #12]
 811b5a6:	685b      	ldr	r3, [r3, #4]
 811b5a8:	4618      	mov	r0, r3
 811b5aa:	f7fe fa85 	bl	8119ab8 <pbuf_ref>
  return cseg;
 811b5ae:	68fb      	ldr	r3, [r7, #12]
}
 811b5b0:	4618      	mov	r0, r3
 811b5b2:	3710      	adds	r7, #16
 811b5b4:	46bd      	mov	sp, r7
 811b5b6:	bd80      	pop	{r7, pc}
 811b5b8:	08126e3c 	.word	0x08126e3c
 811b5bc:	081273c8 	.word	0x081273c8
 811b5c0:	08126eb8 	.word	0x08126eb8

0811b5c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 811b5c4:	b580      	push	{r7, lr}
 811b5c6:	b084      	sub	sp, #16
 811b5c8:	af00      	add	r7, sp, #0
 811b5ca:	60f8      	str	r0, [r7, #12]
 811b5cc:	60b9      	str	r1, [r7, #8]
 811b5ce:	607a      	str	r2, [r7, #4]
 811b5d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 811b5d2:	68bb      	ldr	r3, [r7, #8]
 811b5d4:	2b00      	cmp	r3, #0
 811b5d6:	d109      	bne.n	811b5ec <tcp_recv_null+0x28>
 811b5d8:	4b12      	ldr	r3, [pc, #72]	@ (811b624 <tcp_recv_null+0x60>)
 811b5da:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811b5de:	4912      	ldr	r1, [pc, #72]	@ (811b628 <tcp_recv_null+0x64>)
 811b5e0:	4812      	ldr	r0, [pc, #72]	@ (811b62c <tcp_recv_null+0x68>)
 811b5e2:	f006 fbcf 	bl	8121d84 <iprintf>
 811b5e6:	f06f 030f 	mvn.w	r3, #15
 811b5ea:	e016      	b.n	811b61a <tcp_recv_null+0x56>

  if (p != NULL) {
 811b5ec:	687b      	ldr	r3, [r7, #4]
 811b5ee:	2b00      	cmp	r3, #0
 811b5f0:	d009      	beq.n	811b606 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 811b5f2:	687b      	ldr	r3, [r7, #4]
 811b5f4:	891b      	ldrh	r3, [r3, #8]
 811b5f6:	4619      	mov	r1, r3
 811b5f8:	68b8      	ldr	r0, [r7, #8]
 811b5fa:	f7ff f9b5 	bl	811a968 <tcp_recved>
    pbuf_free(p);
 811b5fe:	6878      	ldr	r0, [r7, #4]
 811b600:	f7fe f9b4 	bl	811996c <pbuf_free>
 811b604:	e008      	b.n	811b618 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811b606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 811b60a:	2b00      	cmp	r3, #0
 811b60c:	d104      	bne.n	811b618 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 811b60e:	68b8      	ldr	r0, [r7, #8]
 811b610:	f7fe ffbc 	bl	811a58c <tcp_close>
 811b614:	4603      	mov	r3, r0
 811b616:	e000      	b.n	811b61a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 811b618:	2300      	movs	r3, #0
}
 811b61a:	4618      	mov	r0, r3
 811b61c:	3710      	adds	r7, #16
 811b61e:	46bd      	mov	sp, r7
 811b620:	bd80      	pop	{r7, pc}
 811b622:	bf00      	nop
 811b624:	08126e3c 	.word	0x08126e3c
 811b628:	081273e4 	.word	0x081273e4
 811b62c:	08126eb8 	.word	0x08126eb8

0811b630 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 811b630:	b580      	push	{r7, lr}
 811b632:	b086      	sub	sp, #24
 811b634:	af00      	add	r7, sp, #0
 811b636:	4603      	mov	r3, r0
 811b638:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 811b63a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 811b63e:	2b00      	cmp	r3, #0
 811b640:	db01      	blt.n	811b646 <tcp_kill_prio+0x16>
 811b642:	79fb      	ldrb	r3, [r7, #7]
 811b644:	e000      	b.n	811b648 <tcp_kill_prio+0x18>
 811b646:	237f      	movs	r3, #127	@ 0x7f
 811b648:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 811b64a:	7afb      	ldrb	r3, [r7, #11]
 811b64c:	2b00      	cmp	r3, #0
 811b64e:	d034      	beq.n	811b6ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 811b650:	7afb      	ldrb	r3, [r7, #11]
 811b652:	3b01      	subs	r3, #1
 811b654:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811b656:	2300      	movs	r3, #0
 811b658:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811b65a:	2300      	movs	r3, #0
 811b65c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811b65e:	4b19      	ldr	r3, [pc, #100]	@ (811b6c4 <tcp_kill_prio+0x94>)
 811b660:	681b      	ldr	r3, [r3, #0]
 811b662:	617b      	str	r3, [r7, #20]
 811b664:	e01f      	b.n	811b6a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811b666:	697b      	ldr	r3, [r7, #20]
 811b668:	7d5b      	ldrb	r3, [r3, #21]
 811b66a:	7afa      	ldrb	r2, [r7, #11]
 811b66c:	429a      	cmp	r2, r3
 811b66e:	d80c      	bhi.n	811b68a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811b670:	697b      	ldr	r3, [r7, #20]
 811b672:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 811b674:	7afa      	ldrb	r2, [r7, #11]
 811b676:	429a      	cmp	r2, r3
 811b678:	d112      	bne.n	811b6a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811b67a:	4b13      	ldr	r3, [pc, #76]	@ (811b6c8 <tcp_kill_prio+0x98>)
 811b67c:	681a      	ldr	r2, [r3, #0]
 811b67e:	697b      	ldr	r3, [r7, #20]
 811b680:	6a1b      	ldr	r3, [r3, #32]
 811b682:	1ad3      	subs	r3, r2, r3
 811b684:	68fa      	ldr	r2, [r7, #12]
 811b686:	429a      	cmp	r2, r3
 811b688:	d80a      	bhi.n	811b6a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 811b68a:	4b0f      	ldr	r3, [pc, #60]	@ (811b6c8 <tcp_kill_prio+0x98>)
 811b68c:	681a      	ldr	r2, [r3, #0]
 811b68e:	697b      	ldr	r3, [r7, #20]
 811b690:	6a1b      	ldr	r3, [r3, #32]
 811b692:	1ad3      	subs	r3, r2, r3
 811b694:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 811b696:	697b      	ldr	r3, [r7, #20]
 811b698:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 811b69a:	697b      	ldr	r3, [r7, #20]
 811b69c:	7d5b      	ldrb	r3, [r3, #21]
 811b69e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811b6a0:	697b      	ldr	r3, [r7, #20]
 811b6a2:	68db      	ldr	r3, [r3, #12]
 811b6a4:	617b      	str	r3, [r7, #20]
 811b6a6:	697b      	ldr	r3, [r7, #20]
 811b6a8:	2b00      	cmp	r3, #0
 811b6aa:	d1dc      	bne.n	811b666 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 811b6ac:	693b      	ldr	r3, [r7, #16]
 811b6ae:	2b00      	cmp	r3, #0
 811b6b0:	d004      	beq.n	811b6bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811b6b2:	6938      	ldr	r0, [r7, #16]
 811b6b4:	f7ff f858 	bl	811a768 <tcp_abort>
 811b6b8:	e000      	b.n	811b6bc <tcp_kill_prio+0x8c>
    return;
 811b6ba:	bf00      	nop
  }
}
 811b6bc:	3718      	adds	r7, #24
 811b6be:	46bd      	mov	sp, r7
 811b6c0:	bd80      	pop	{r7, pc}
 811b6c2:	bf00      	nop
 811b6c4:	240126ac 	.word	0x240126ac
 811b6c8:	240126a0 	.word	0x240126a0

0811b6cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 811b6cc:	b580      	push	{r7, lr}
 811b6ce:	b086      	sub	sp, #24
 811b6d0:	af00      	add	r7, sp, #0
 811b6d2:	4603      	mov	r3, r0
 811b6d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811b6d6:	79fb      	ldrb	r3, [r7, #7]
 811b6d8:	2b08      	cmp	r3, #8
 811b6da:	d009      	beq.n	811b6f0 <tcp_kill_state+0x24>
 811b6dc:	79fb      	ldrb	r3, [r7, #7]
 811b6de:	2b09      	cmp	r3, #9
 811b6e0:	d006      	beq.n	811b6f0 <tcp_kill_state+0x24>
 811b6e2:	4b1a      	ldr	r3, [pc, #104]	@ (811b74c <tcp_kill_state+0x80>)
 811b6e4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 811b6e8:	4919      	ldr	r1, [pc, #100]	@ (811b750 <tcp_kill_state+0x84>)
 811b6ea:	481a      	ldr	r0, [pc, #104]	@ (811b754 <tcp_kill_state+0x88>)
 811b6ec:	f006 fb4a 	bl	8121d84 <iprintf>

  inactivity = 0;
 811b6f0:	2300      	movs	r3, #0
 811b6f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811b6f4:	2300      	movs	r3, #0
 811b6f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811b6f8:	4b17      	ldr	r3, [pc, #92]	@ (811b758 <tcp_kill_state+0x8c>)
 811b6fa:	681b      	ldr	r3, [r3, #0]
 811b6fc:	617b      	str	r3, [r7, #20]
 811b6fe:	e017      	b.n	811b730 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 811b700:	697b      	ldr	r3, [r7, #20]
 811b702:	7d1b      	ldrb	r3, [r3, #20]
 811b704:	79fa      	ldrb	r2, [r7, #7]
 811b706:	429a      	cmp	r2, r3
 811b708:	d10f      	bne.n	811b72a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811b70a:	4b14      	ldr	r3, [pc, #80]	@ (811b75c <tcp_kill_state+0x90>)
 811b70c:	681a      	ldr	r2, [r3, #0]
 811b70e:	697b      	ldr	r3, [r7, #20]
 811b710:	6a1b      	ldr	r3, [r3, #32]
 811b712:	1ad3      	subs	r3, r2, r3
 811b714:	68fa      	ldr	r2, [r7, #12]
 811b716:	429a      	cmp	r2, r3
 811b718:	d807      	bhi.n	811b72a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 811b71a:	4b10      	ldr	r3, [pc, #64]	@ (811b75c <tcp_kill_state+0x90>)
 811b71c:	681a      	ldr	r2, [r3, #0]
 811b71e:	697b      	ldr	r3, [r7, #20]
 811b720:	6a1b      	ldr	r3, [r3, #32]
 811b722:	1ad3      	subs	r3, r2, r3
 811b724:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811b726:	697b      	ldr	r3, [r7, #20]
 811b728:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811b72a:	697b      	ldr	r3, [r7, #20]
 811b72c:	68db      	ldr	r3, [r3, #12]
 811b72e:	617b      	str	r3, [r7, #20]
 811b730:	697b      	ldr	r3, [r7, #20]
 811b732:	2b00      	cmp	r3, #0
 811b734:	d1e4      	bne.n	811b700 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811b736:	693b      	ldr	r3, [r7, #16]
 811b738:	2b00      	cmp	r3, #0
 811b73a:	d003      	beq.n	811b744 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 811b73c:	2100      	movs	r1, #0
 811b73e:	6938      	ldr	r0, [r7, #16]
 811b740:	f7fe ff52 	bl	811a5e8 <tcp_abandon>
  }
}
 811b744:	bf00      	nop
 811b746:	3718      	adds	r7, #24
 811b748:	46bd      	mov	sp, r7
 811b74a:	bd80      	pop	{r7, pc}
 811b74c:	08126e3c 	.word	0x08126e3c
 811b750:	08127400 	.word	0x08127400
 811b754:	08126eb8 	.word	0x08126eb8
 811b758:	240126ac 	.word	0x240126ac
 811b75c:	240126a0 	.word	0x240126a0

0811b760 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 811b760:	b580      	push	{r7, lr}
 811b762:	b084      	sub	sp, #16
 811b764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 811b766:	2300      	movs	r3, #0
 811b768:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 811b76a:	2300      	movs	r3, #0
 811b76c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811b76e:	4b12      	ldr	r3, [pc, #72]	@ (811b7b8 <tcp_kill_timewait+0x58>)
 811b770:	681b      	ldr	r3, [r3, #0]
 811b772:	60fb      	str	r3, [r7, #12]
 811b774:	e012      	b.n	811b79c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811b776:	4b11      	ldr	r3, [pc, #68]	@ (811b7bc <tcp_kill_timewait+0x5c>)
 811b778:	681a      	ldr	r2, [r3, #0]
 811b77a:	68fb      	ldr	r3, [r7, #12]
 811b77c:	6a1b      	ldr	r3, [r3, #32]
 811b77e:	1ad3      	subs	r3, r2, r3
 811b780:	687a      	ldr	r2, [r7, #4]
 811b782:	429a      	cmp	r2, r3
 811b784:	d807      	bhi.n	811b796 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 811b786:	4b0d      	ldr	r3, [pc, #52]	@ (811b7bc <tcp_kill_timewait+0x5c>)
 811b788:	681a      	ldr	r2, [r3, #0]
 811b78a:	68fb      	ldr	r3, [r7, #12]
 811b78c:	6a1b      	ldr	r3, [r3, #32]
 811b78e:	1ad3      	subs	r3, r2, r3
 811b790:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 811b792:	68fb      	ldr	r3, [r7, #12]
 811b794:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811b796:	68fb      	ldr	r3, [r7, #12]
 811b798:	68db      	ldr	r3, [r3, #12]
 811b79a:	60fb      	str	r3, [r7, #12]
 811b79c:	68fb      	ldr	r3, [r7, #12]
 811b79e:	2b00      	cmp	r3, #0
 811b7a0:	d1e9      	bne.n	811b776 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 811b7a2:	68bb      	ldr	r3, [r7, #8]
 811b7a4:	2b00      	cmp	r3, #0
 811b7a6:	d002      	beq.n	811b7ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811b7a8:	68b8      	ldr	r0, [r7, #8]
 811b7aa:	f7fe ffdd 	bl	811a768 <tcp_abort>
  }
}
 811b7ae:	bf00      	nop
 811b7b0:	3710      	adds	r7, #16
 811b7b2:	46bd      	mov	sp, r7
 811b7b4:	bd80      	pop	{r7, pc}
 811b7b6:	bf00      	nop
 811b7b8:	240126b0 	.word	0x240126b0
 811b7bc:	240126a0 	.word	0x240126a0

0811b7c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 811b7c0:	b580      	push	{r7, lr}
 811b7c2:	b082      	sub	sp, #8
 811b7c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 811b7c6:	4b10      	ldr	r3, [pc, #64]	@ (811b808 <tcp_handle_closepend+0x48>)
 811b7c8:	681b      	ldr	r3, [r3, #0]
 811b7ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811b7cc:	e014      	b.n	811b7f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 811b7ce:	687b      	ldr	r3, [r7, #4]
 811b7d0:	68db      	ldr	r3, [r3, #12]
 811b7d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 811b7d4:	687b      	ldr	r3, [r7, #4]
 811b7d6:	8b5b      	ldrh	r3, [r3, #26]
 811b7d8:	f003 0308 	and.w	r3, r3, #8
 811b7dc:	2b00      	cmp	r3, #0
 811b7de:	d009      	beq.n	811b7f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 811b7e0:	687b      	ldr	r3, [r7, #4]
 811b7e2:	8b5b      	ldrh	r3, [r3, #26]
 811b7e4:	f023 0308 	bic.w	r3, r3, #8
 811b7e8:	b29a      	uxth	r2, r3
 811b7ea:	687b      	ldr	r3, [r7, #4]
 811b7ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 811b7ee:	6878      	ldr	r0, [r7, #4]
 811b7f0:	f7fe fe62 	bl	811a4b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 811b7f4:	683b      	ldr	r3, [r7, #0]
 811b7f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811b7f8:	687b      	ldr	r3, [r7, #4]
 811b7fa:	2b00      	cmp	r3, #0
 811b7fc:	d1e7      	bne.n	811b7ce <tcp_handle_closepend+0xe>
  }
}
 811b7fe:	bf00      	nop
 811b800:	bf00      	nop
 811b802:	3708      	adds	r7, #8
 811b804:	46bd      	mov	sp, r7
 811b806:	bd80      	pop	{r7, pc}
 811b808:	240126ac 	.word	0x240126ac

0811b80c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 811b80c:	b580      	push	{r7, lr}
 811b80e:	b084      	sub	sp, #16
 811b810:	af00      	add	r7, sp, #0
 811b812:	4603      	mov	r3, r0
 811b814:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 811b816:	f7f4 fad3 	bl	810fdc0 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b81a:	2001      	movs	r0, #1
 811b81c:	f7fb faf6 	bl	8116e0c <memp_malloc>
 811b820:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 811b822:	68fb      	ldr	r3, [r7, #12]
 811b824:	2b00      	cmp	r3, #0
 811b826:	d126      	bne.n	811b876 <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 811b828:	f7ff ffca 	bl	811b7c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 811b82c:	f7ff ff98 	bl	811b760 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b830:	2001      	movs	r0, #1
 811b832:	f7fb faeb 	bl	8116e0c <memp_malloc>
 811b836:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 811b838:	68fb      	ldr	r3, [r7, #12]
 811b83a:	2b00      	cmp	r3, #0
 811b83c:	d11b      	bne.n	811b876 <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 811b83e:	2009      	movs	r0, #9
 811b840:	f7ff ff44 	bl	811b6cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b844:	2001      	movs	r0, #1
 811b846:	f7fb fae1 	bl	8116e0c <memp_malloc>
 811b84a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 811b84c:	68fb      	ldr	r3, [r7, #12]
 811b84e:	2b00      	cmp	r3, #0
 811b850:	d111      	bne.n	811b876 <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 811b852:	2008      	movs	r0, #8
 811b854:	f7ff ff3a 	bl	811b6cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b858:	2001      	movs	r0, #1
 811b85a:	f7fb fad7 	bl	8116e0c <memp_malloc>
 811b85e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 811b860:	68fb      	ldr	r3, [r7, #12]
 811b862:	2b00      	cmp	r3, #0
 811b864:	d107      	bne.n	811b876 <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 811b866:	79fb      	ldrb	r3, [r7, #7]
 811b868:	4618      	mov	r0, r3
 811b86a:	f7ff fee1 	bl	811b630 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b86e:	2001      	movs	r0, #1
 811b870:	f7fb facc 	bl	8116e0c <memp_malloc>
 811b874:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 811b876:	68fb      	ldr	r3, [r7, #12]
 811b878:	2b00      	cmp	r3, #0
 811b87a:	d03f      	beq.n	811b8fc <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 811b87c:	229c      	movs	r2, #156	@ 0x9c
 811b87e:	2100      	movs	r1, #0
 811b880:	68f8      	ldr	r0, [r7, #12]
 811b882:	f006 fc25 	bl	81220d0 <memset>
    pcb->prio = prio;
 811b886:	68fb      	ldr	r3, [r7, #12]
 811b888:	79fa      	ldrb	r2, [r7, #7]
 811b88a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 811b88c:	68fb      	ldr	r3, [r7, #12]
 811b88e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 811b892:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811b896:	68fb      	ldr	r3, [r7, #12]
 811b898:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 811b89c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811b89e:	68fb      	ldr	r3, [r7, #12]
 811b8a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811b8a2:	68fb      	ldr	r3, [r7, #12]
 811b8a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 811b8a6:	68fb      	ldr	r3, [r7, #12]
 811b8a8:	22ff      	movs	r2, #255	@ 0xff
 811b8aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 811b8ac:	68fb      	ldr	r3, [r7, #12]
 811b8ae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811b8b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 811b8b4:	68fb      	ldr	r3, [r7, #12]
 811b8b6:	2206      	movs	r2, #6
 811b8b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 811b8bc:	68fb      	ldr	r3, [r7, #12]
 811b8be:	2206      	movs	r2, #6
 811b8c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 811b8c2:	68fb      	ldr	r3, [r7, #12]
 811b8c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811b8c8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 811b8ca:	68fb      	ldr	r3, [r7, #12]
 811b8cc:	2201      	movs	r2, #1
 811b8ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 811b8d2:	4b0d      	ldr	r3, [pc, #52]	@ (811b908 <tcp_alloc+0xfc>)
 811b8d4:	681a      	ldr	r2, [r3, #0]
 811b8d6:	68fb      	ldr	r3, [r7, #12]
 811b8d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811b8da:	4b0c      	ldr	r3, [pc, #48]	@ (811b90c <tcp_alloc+0x100>)
 811b8dc:	781a      	ldrb	r2, [r3, #0]
 811b8de:	68fb      	ldr	r3, [r7, #12]
 811b8e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 811b8e2:	68fb      	ldr	r3, [r7, #12]
 811b8e4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 811b8e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 811b8ec:	68fb      	ldr	r3, [r7, #12]
 811b8ee:	4a08      	ldr	r2, [pc, #32]	@ (811b910 <tcp_alloc+0x104>)
 811b8f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 811b8f4:	68fb      	ldr	r3, [r7, #12]
 811b8f6:	4a07      	ldr	r2, [pc, #28]	@ (811b914 <tcp_alloc+0x108>)
 811b8f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 811b8fc:	68fb      	ldr	r3, [r7, #12]
}
 811b8fe:	4618      	mov	r0, r3
 811b900:	3710      	adds	r7, #16
 811b902:	46bd      	mov	sp, r7
 811b904:	bd80      	pop	{r7, pc}
 811b906:	bf00      	nop
 811b908:	240126a0 	.word	0x240126a0
 811b90c:	240126b6 	.word	0x240126b6
 811b910:	0811b5c5 	.word	0x0811b5c5
 811b914:	006ddd00 	.word	0x006ddd00

0811b918 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 811b918:	b580      	push	{r7, lr}
 811b91a:	b084      	sub	sp, #16
 811b91c:	af00      	add	r7, sp, #0
 811b91e:	4603      	mov	r3, r0
 811b920:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 811b922:	2040      	movs	r0, #64	@ 0x40
 811b924:	f7ff ff72 	bl	811b80c <tcp_alloc>
 811b928:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 811b92a:	68fb      	ldr	r3, [r7, #12]
}
 811b92c:	4618      	mov	r0, r3
 811b92e:	3710      	adds	r7, #16
 811b930:	46bd      	mov	sp, r7
 811b932:	bd80      	pop	{r7, pc}

0811b934 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 811b934:	b580      	push	{r7, lr}
 811b936:	b082      	sub	sp, #8
 811b938:	af00      	add	r7, sp, #0
 811b93a:	6078      	str	r0, [r7, #4]
 811b93c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 811b93e:	f7f4 fa3f 	bl	810fdc0 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 811b942:	687b      	ldr	r3, [r7, #4]
 811b944:	2b00      	cmp	r3, #0
 811b946:	d002      	beq.n	811b94e <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 811b948:	687b      	ldr	r3, [r7, #4]
 811b94a:	683a      	ldr	r2, [r7, #0]
 811b94c:	611a      	str	r2, [r3, #16]
  }
}
 811b94e:	bf00      	nop
 811b950:	3708      	adds	r7, #8
 811b952:	46bd      	mov	sp, r7
 811b954:	bd80      	pop	{r7, pc}
	...

0811b958 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 811b958:	b580      	push	{r7, lr}
 811b95a:	b082      	sub	sp, #8
 811b95c:	af00      	add	r7, sp, #0
 811b95e:	6078      	str	r0, [r7, #4]
 811b960:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 811b962:	f7f4 fa2d 	bl	810fdc0 <sys_check_core_locking>
  if (pcb != NULL) {
 811b966:	687b      	ldr	r3, [r7, #4]
 811b968:	2b00      	cmp	r3, #0
 811b96a:	d00e      	beq.n	811b98a <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 811b96c:	687b      	ldr	r3, [r7, #4]
 811b96e:	7d1b      	ldrb	r3, [r3, #20]
 811b970:	2b01      	cmp	r3, #1
 811b972:	d106      	bne.n	811b982 <tcp_recv+0x2a>
 811b974:	4b07      	ldr	r3, [pc, #28]	@ (811b994 <tcp_recv+0x3c>)
 811b976:	f240 72df 	movw	r2, #2015	@ 0x7df
 811b97a:	4907      	ldr	r1, [pc, #28]	@ (811b998 <tcp_recv+0x40>)
 811b97c:	4807      	ldr	r0, [pc, #28]	@ (811b99c <tcp_recv+0x44>)
 811b97e:	f006 fa01 	bl	8121d84 <iprintf>
    pcb->recv = recv;
 811b982:	687b      	ldr	r3, [r7, #4]
 811b984:	683a      	ldr	r2, [r7, #0]
 811b986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 811b98a:	bf00      	nop
 811b98c:	3708      	adds	r7, #8
 811b98e:	46bd      	mov	sp, r7
 811b990:	bd80      	pop	{r7, pc}
 811b992:	bf00      	nop
 811b994:	08126e3c 	.word	0x08126e3c
 811b998:	08127410 	.word	0x08127410
 811b99c:	08126eb8 	.word	0x08126eb8

0811b9a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 811b9a0:	b580      	push	{r7, lr}
 811b9a2:	b082      	sub	sp, #8
 811b9a4:	af00      	add	r7, sp, #0
 811b9a6:	6078      	str	r0, [r7, #4]
 811b9a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 811b9aa:	f7f4 fa09 	bl	810fdc0 <sys_check_core_locking>
  if (pcb != NULL) {
 811b9ae:	687b      	ldr	r3, [r7, #4]
 811b9b0:	2b00      	cmp	r3, #0
 811b9b2:	d00e      	beq.n	811b9d2 <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 811b9b4:	687b      	ldr	r3, [r7, #4]
 811b9b6:	7d1b      	ldrb	r3, [r3, #20]
 811b9b8:	2b01      	cmp	r3, #1
 811b9ba:	d106      	bne.n	811b9ca <tcp_sent+0x2a>
 811b9bc:	4b07      	ldr	r3, [pc, #28]	@ (811b9dc <tcp_sent+0x3c>)
 811b9be:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 811b9c2:	4907      	ldr	r1, [pc, #28]	@ (811b9e0 <tcp_sent+0x40>)
 811b9c4:	4807      	ldr	r0, [pc, #28]	@ (811b9e4 <tcp_sent+0x44>)
 811b9c6:	f006 f9dd 	bl	8121d84 <iprintf>
    pcb->sent = sent;
 811b9ca:	687b      	ldr	r3, [r7, #4]
 811b9cc:	683a      	ldr	r2, [r7, #0]
 811b9ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 811b9d2:	bf00      	nop
 811b9d4:	3708      	adds	r7, #8
 811b9d6:	46bd      	mov	sp, r7
 811b9d8:	bd80      	pop	{r7, pc}
 811b9da:	bf00      	nop
 811b9dc:	08126e3c 	.word	0x08126e3c
 811b9e0:	08127438 	.word	0x08127438
 811b9e4:	08126eb8 	.word	0x08126eb8

0811b9e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 811b9e8:	b580      	push	{r7, lr}
 811b9ea:	b082      	sub	sp, #8
 811b9ec:	af00      	add	r7, sp, #0
 811b9ee:	6078      	str	r0, [r7, #4]
 811b9f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 811b9f2:	f7f4 f9e5 	bl	810fdc0 <sys_check_core_locking>
  if (pcb != NULL) {
 811b9f6:	687b      	ldr	r3, [r7, #4]
 811b9f8:	2b00      	cmp	r3, #0
 811b9fa:	d00e      	beq.n	811ba1a <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 811b9fc:	687b      	ldr	r3, [r7, #4]
 811b9fe:	7d1b      	ldrb	r3, [r3, #20]
 811ba00:	2b01      	cmp	r3, #1
 811ba02:	d106      	bne.n	811ba12 <tcp_err+0x2a>
 811ba04:	4b07      	ldr	r3, [pc, #28]	@ (811ba24 <tcp_err+0x3c>)
 811ba06:	f640 020d 	movw	r2, #2061	@ 0x80d
 811ba0a:	4907      	ldr	r1, [pc, #28]	@ (811ba28 <tcp_err+0x40>)
 811ba0c:	4807      	ldr	r0, [pc, #28]	@ (811ba2c <tcp_err+0x44>)
 811ba0e:	f006 f9b9 	bl	8121d84 <iprintf>
    pcb->errf = err;
 811ba12:	687b      	ldr	r3, [r7, #4]
 811ba14:	683a      	ldr	r2, [r7, #0]
 811ba16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 811ba1a:	bf00      	nop
 811ba1c:	3708      	adds	r7, #8
 811ba1e:	46bd      	mov	sp, r7
 811ba20:	bd80      	pop	{r7, pc}
 811ba22:	bf00      	nop
 811ba24:	08126e3c 	.word	0x08126e3c
 811ba28:	08127460 	.word	0x08127460
 811ba2c:	08126eb8 	.word	0x08126eb8

0811ba30 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 811ba30:	b580      	push	{r7, lr}
 811ba32:	b084      	sub	sp, #16
 811ba34:	af00      	add	r7, sp, #0
 811ba36:	60f8      	str	r0, [r7, #12]
 811ba38:	60b9      	str	r1, [r7, #8]
 811ba3a:	4613      	mov	r3, r2
 811ba3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 811ba3e:	f7f4 f9bf 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 811ba42:	68fb      	ldr	r3, [r7, #12]
 811ba44:	2b00      	cmp	r3, #0
 811ba46:	d107      	bne.n	811ba58 <tcp_poll+0x28>
 811ba48:	4b0e      	ldr	r3, [pc, #56]	@ (811ba84 <tcp_poll+0x54>)
 811ba4a:	f640 023d 	movw	r2, #2109	@ 0x83d
 811ba4e:	490e      	ldr	r1, [pc, #56]	@ (811ba88 <tcp_poll+0x58>)
 811ba50:	480e      	ldr	r0, [pc, #56]	@ (811ba8c <tcp_poll+0x5c>)
 811ba52:	f006 f997 	bl	8121d84 <iprintf>
 811ba56:	e011      	b.n	811ba7c <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 811ba58:	68fb      	ldr	r3, [r7, #12]
 811ba5a:	7d1b      	ldrb	r3, [r3, #20]
 811ba5c:	2b01      	cmp	r3, #1
 811ba5e:	d106      	bne.n	811ba6e <tcp_poll+0x3e>
 811ba60:	4b08      	ldr	r3, [pc, #32]	@ (811ba84 <tcp_poll+0x54>)
 811ba62:	f640 023e 	movw	r2, #2110	@ 0x83e
 811ba66:	490a      	ldr	r1, [pc, #40]	@ (811ba90 <tcp_poll+0x60>)
 811ba68:	4808      	ldr	r0, [pc, #32]	@ (811ba8c <tcp_poll+0x5c>)
 811ba6a:	f006 f98b 	bl	8121d84 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 811ba6e:	68fb      	ldr	r3, [r7, #12]
 811ba70:	68ba      	ldr	r2, [r7, #8]
 811ba72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 811ba76:	68fb      	ldr	r3, [r7, #12]
 811ba78:	79fa      	ldrb	r2, [r7, #7]
 811ba7a:	775a      	strb	r2, [r3, #29]
}
 811ba7c:	3710      	adds	r7, #16
 811ba7e:	46bd      	mov	sp, r7
 811ba80:	bd80      	pop	{r7, pc}
 811ba82:	bf00      	nop
 811ba84:	08126e3c 	.word	0x08126e3c
 811ba88:	08127488 	.word	0x08127488
 811ba8c:	08126eb8 	.word	0x08126eb8
 811ba90:	081274a0 	.word	0x081274a0

0811ba94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 811ba94:	b580      	push	{r7, lr}
 811ba96:	b082      	sub	sp, #8
 811ba98:	af00      	add	r7, sp, #0
 811ba9a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 811ba9c:	687b      	ldr	r3, [r7, #4]
 811ba9e:	2b00      	cmp	r3, #0
 811baa0:	d107      	bne.n	811bab2 <tcp_pcb_purge+0x1e>
 811baa2:	4b21      	ldr	r3, [pc, #132]	@ (811bb28 <tcp_pcb_purge+0x94>)
 811baa4:	f640 0251 	movw	r2, #2129	@ 0x851
 811baa8:	4920      	ldr	r1, [pc, #128]	@ (811bb2c <tcp_pcb_purge+0x98>)
 811baaa:	4821      	ldr	r0, [pc, #132]	@ (811bb30 <tcp_pcb_purge+0x9c>)
 811baac:	f006 f96a 	bl	8121d84 <iprintf>
 811bab0:	e037      	b.n	811bb22 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 811bab2:	687b      	ldr	r3, [r7, #4]
 811bab4:	7d1b      	ldrb	r3, [r3, #20]
 811bab6:	2b00      	cmp	r3, #0
 811bab8:	d033      	beq.n	811bb22 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 811baba:	687b      	ldr	r3, [r7, #4]
 811babc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 811babe:	2b0a      	cmp	r3, #10
 811bac0:	d02f      	beq.n	811bb22 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 811bac2:	687b      	ldr	r3, [r7, #4]
 811bac4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 811bac6:	2b01      	cmp	r3, #1
 811bac8:	d02b      	beq.n	811bb22 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 811baca:	687b      	ldr	r3, [r7, #4]
 811bacc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bace:	2b00      	cmp	r3, #0
 811bad0:	d007      	beq.n	811bae2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 811bad2:	687b      	ldr	r3, [r7, #4]
 811bad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bad6:	4618      	mov	r0, r3
 811bad8:	f7fd ff48 	bl	811996c <pbuf_free>
      pcb->refused_data = NULL;
 811badc:	687b      	ldr	r3, [r7, #4]
 811bade:	2200      	movs	r2, #0
 811bae0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811bae2:	687b      	ldr	r3, [r7, #4]
 811bae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811bae6:	2b00      	cmp	r3, #0
 811bae8:	d002      	beq.n	811baf0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 811baea:	6878      	ldr	r0, [r7, #4]
 811baec:	f000 f986 	bl	811bdfc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 811baf0:	687b      	ldr	r3, [r7, #4]
 811baf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811baf6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 811baf8:	687b      	ldr	r3, [r7, #4]
 811bafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811bafc:	4618      	mov	r0, r3
 811bafe:	f7ff fd07 	bl	811b510 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 811bb02:	687b      	ldr	r3, [r7, #4]
 811bb04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811bb06:	4618      	mov	r0, r3
 811bb08:	f7ff fd02 	bl	811b510 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 811bb0c:	687b      	ldr	r3, [r7, #4]
 811bb0e:	2200      	movs	r2, #0
 811bb10:	66da      	str	r2, [r3, #108]	@ 0x6c
 811bb12:	687b      	ldr	r3, [r7, #4]
 811bb14:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811bb16:	687b      	ldr	r3, [r7, #4]
 811bb18:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 811bb1a:	687b      	ldr	r3, [r7, #4]
 811bb1c:	2200      	movs	r2, #0
 811bb1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 811bb22:	3708      	adds	r7, #8
 811bb24:	46bd      	mov	sp, r7
 811bb26:	bd80      	pop	{r7, pc}
 811bb28:	08126e3c 	.word	0x08126e3c
 811bb2c:	081274c0 	.word	0x081274c0
 811bb30:	08126eb8 	.word	0x08126eb8

0811bb34 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 811bb34:	b580      	push	{r7, lr}
 811bb36:	b084      	sub	sp, #16
 811bb38:	af00      	add	r7, sp, #0
 811bb3a:	6078      	str	r0, [r7, #4]
 811bb3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 811bb3e:	683b      	ldr	r3, [r7, #0]
 811bb40:	2b00      	cmp	r3, #0
 811bb42:	d106      	bne.n	811bb52 <tcp_pcb_remove+0x1e>
 811bb44:	4b3e      	ldr	r3, [pc, #248]	@ (811bc40 <tcp_pcb_remove+0x10c>)
 811bb46:	f640 0283 	movw	r2, #2179	@ 0x883
 811bb4a:	493e      	ldr	r1, [pc, #248]	@ (811bc44 <tcp_pcb_remove+0x110>)
 811bb4c:	483e      	ldr	r0, [pc, #248]	@ (811bc48 <tcp_pcb_remove+0x114>)
 811bb4e:	f006 f919 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 811bb52:	687b      	ldr	r3, [r7, #4]
 811bb54:	2b00      	cmp	r3, #0
 811bb56:	d106      	bne.n	811bb66 <tcp_pcb_remove+0x32>
 811bb58:	4b39      	ldr	r3, [pc, #228]	@ (811bc40 <tcp_pcb_remove+0x10c>)
 811bb5a:	f640 0284 	movw	r2, #2180	@ 0x884
 811bb5e:	493b      	ldr	r1, [pc, #236]	@ (811bc4c <tcp_pcb_remove+0x118>)
 811bb60:	4839      	ldr	r0, [pc, #228]	@ (811bc48 <tcp_pcb_remove+0x114>)
 811bb62:	f006 f90f 	bl	8121d84 <iprintf>

  TCP_RMV(pcblist, pcb);
 811bb66:	687b      	ldr	r3, [r7, #4]
 811bb68:	681b      	ldr	r3, [r3, #0]
 811bb6a:	683a      	ldr	r2, [r7, #0]
 811bb6c:	429a      	cmp	r2, r3
 811bb6e:	d105      	bne.n	811bb7c <tcp_pcb_remove+0x48>
 811bb70:	687b      	ldr	r3, [r7, #4]
 811bb72:	681b      	ldr	r3, [r3, #0]
 811bb74:	68da      	ldr	r2, [r3, #12]
 811bb76:	687b      	ldr	r3, [r7, #4]
 811bb78:	601a      	str	r2, [r3, #0]
 811bb7a:	e013      	b.n	811bba4 <tcp_pcb_remove+0x70>
 811bb7c:	687b      	ldr	r3, [r7, #4]
 811bb7e:	681b      	ldr	r3, [r3, #0]
 811bb80:	60fb      	str	r3, [r7, #12]
 811bb82:	e00c      	b.n	811bb9e <tcp_pcb_remove+0x6a>
 811bb84:	68fb      	ldr	r3, [r7, #12]
 811bb86:	68db      	ldr	r3, [r3, #12]
 811bb88:	683a      	ldr	r2, [r7, #0]
 811bb8a:	429a      	cmp	r2, r3
 811bb8c:	d104      	bne.n	811bb98 <tcp_pcb_remove+0x64>
 811bb8e:	683b      	ldr	r3, [r7, #0]
 811bb90:	68da      	ldr	r2, [r3, #12]
 811bb92:	68fb      	ldr	r3, [r7, #12]
 811bb94:	60da      	str	r2, [r3, #12]
 811bb96:	e005      	b.n	811bba4 <tcp_pcb_remove+0x70>
 811bb98:	68fb      	ldr	r3, [r7, #12]
 811bb9a:	68db      	ldr	r3, [r3, #12]
 811bb9c:	60fb      	str	r3, [r7, #12]
 811bb9e:	68fb      	ldr	r3, [r7, #12]
 811bba0:	2b00      	cmp	r3, #0
 811bba2:	d1ef      	bne.n	811bb84 <tcp_pcb_remove+0x50>
 811bba4:	683b      	ldr	r3, [r7, #0]
 811bba6:	2200      	movs	r2, #0
 811bba8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811bbaa:	6838      	ldr	r0, [r7, #0]
 811bbac:	f7ff ff72 	bl	811ba94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 811bbb0:	683b      	ldr	r3, [r7, #0]
 811bbb2:	7d1b      	ldrb	r3, [r3, #20]
 811bbb4:	2b0a      	cmp	r3, #10
 811bbb6:	d013      	beq.n	811bbe0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 811bbb8:	683b      	ldr	r3, [r7, #0]
 811bbba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 811bbbc:	2b01      	cmp	r3, #1
 811bbbe:	d00f      	beq.n	811bbe0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 811bbc0:	683b      	ldr	r3, [r7, #0]
 811bbc2:	8b5b      	ldrh	r3, [r3, #26]
 811bbc4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 811bbc8:	2b00      	cmp	r3, #0
 811bbca:	d009      	beq.n	811bbe0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 811bbcc:	683b      	ldr	r3, [r7, #0]
 811bbce:	8b5b      	ldrh	r3, [r3, #26]
 811bbd0:	f043 0302 	orr.w	r3, r3, #2
 811bbd4:	b29a      	uxth	r2, r3
 811bbd6:	683b      	ldr	r3, [r7, #0]
 811bbd8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811bbda:	6838      	ldr	r0, [r7, #0]
 811bbdc:	f003 fbc4 	bl	811f368 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 811bbe0:	683b      	ldr	r3, [r7, #0]
 811bbe2:	7d1b      	ldrb	r3, [r3, #20]
 811bbe4:	2b01      	cmp	r3, #1
 811bbe6:	d020      	beq.n	811bc2a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 811bbe8:	683b      	ldr	r3, [r7, #0]
 811bbea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811bbec:	2b00      	cmp	r3, #0
 811bbee:	d006      	beq.n	811bbfe <tcp_pcb_remove+0xca>
 811bbf0:	4b13      	ldr	r3, [pc, #76]	@ (811bc40 <tcp_pcb_remove+0x10c>)
 811bbf2:	f640 0293 	movw	r2, #2195	@ 0x893
 811bbf6:	4916      	ldr	r1, [pc, #88]	@ (811bc50 <tcp_pcb_remove+0x11c>)
 811bbf8:	4813      	ldr	r0, [pc, #76]	@ (811bc48 <tcp_pcb_remove+0x114>)
 811bbfa:	f006 f8c3 	bl	8121d84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 811bbfe:	683b      	ldr	r3, [r7, #0]
 811bc00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811bc02:	2b00      	cmp	r3, #0
 811bc04:	d006      	beq.n	811bc14 <tcp_pcb_remove+0xe0>
 811bc06:	4b0e      	ldr	r3, [pc, #56]	@ (811bc40 <tcp_pcb_remove+0x10c>)
 811bc08:	f640 0294 	movw	r2, #2196	@ 0x894
 811bc0c:	4911      	ldr	r1, [pc, #68]	@ (811bc54 <tcp_pcb_remove+0x120>)
 811bc0e:	480e      	ldr	r0, [pc, #56]	@ (811bc48 <tcp_pcb_remove+0x114>)
 811bc10:	f006 f8b8 	bl	8121d84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 811bc14:	683b      	ldr	r3, [r7, #0]
 811bc16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811bc18:	2b00      	cmp	r3, #0
 811bc1a:	d006      	beq.n	811bc2a <tcp_pcb_remove+0xf6>
 811bc1c:	4b08      	ldr	r3, [pc, #32]	@ (811bc40 <tcp_pcb_remove+0x10c>)
 811bc1e:	f640 0296 	movw	r2, #2198	@ 0x896
 811bc22:	490d      	ldr	r1, [pc, #52]	@ (811bc58 <tcp_pcb_remove+0x124>)
 811bc24:	4808      	ldr	r0, [pc, #32]	@ (811bc48 <tcp_pcb_remove+0x114>)
 811bc26:	f006 f8ad 	bl	8121d84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 811bc2a:	683b      	ldr	r3, [r7, #0]
 811bc2c:	2200      	movs	r2, #0
 811bc2e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 811bc30:	683b      	ldr	r3, [r7, #0]
 811bc32:	2200      	movs	r2, #0
 811bc34:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 811bc36:	bf00      	nop
 811bc38:	3710      	adds	r7, #16
 811bc3a:	46bd      	mov	sp, r7
 811bc3c:	bd80      	pop	{r7, pc}
 811bc3e:	bf00      	nop
 811bc40:	08126e3c 	.word	0x08126e3c
 811bc44:	081274dc 	.word	0x081274dc
 811bc48:	08126eb8 	.word	0x08126eb8
 811bc4c:	081274f8 	.word	0x081274f8
 811bc50:	08127518 	.word	0x08127518
 811bc54:	08127530 	.word	0x08127530
 811bc58:	0812754c 	.word	0x0812754c

0811bc5c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 811bc5c:	b580      	push	{r7, lr}
 811bc5e:	b082      	sub	sp, #8
 811bc60:	af00      	add	r7, sp, #0
 811bc62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 811bc64:	687b      	ldr	r3, [r7, #4]
 811bc66:	2b00      	cmp	r3, #0
 811bc68:	d106      	bne.n	811bc78 <tcp_next_iss+0x1c>
 811bc6a:	4b0a      	ldr	r3, [pc, #40]	@ (811bc94 <tcp_next_iss+0x38>)
 811bc6c:	f640 02af 	movw	r2, #2223	@ 0x8af
 811bc70:	4909      	ldr	r1, [pc, #36]	@ (811bc98 <tcp_next_iss+0x3c>)
 811bc72:	480a      	ldr	r0, [pc, #40]	@ (811bc9c <tcp_next_iss+0x40>)
 811bc74:	f006 f886 	bl	8121d84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 811bc78:	4b09      	ldr	r3, [pc, #36]	@ (811bca0 <tcp_next_iss+0x44>)
 811bc7a:	681a      	ldr	r2, [r3, #0]
 811bc7c:	4b09      	ldr	r3, [pc, #36]	@ (811bca4 <tcp_next_iss+0x48>)
 811bc7e:	681b      	ldr	r3, [r3, #0]
 811bc80:	4413      	add	r3, r2
 811bc82:	4a07      	ldr	r2, [pc, #28]	@ (811bca0 <tcp_next_iss+0x44>)
 811bc84:	6013      	str	r3, [r2, #0]
  return iss;
 811bc86:	4b06      	ldr	r3, [pc, #24]	@ (811bca0 <tcp_next_iss+0x44>)
 811bc88:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811bc8a:	4618      	mov	r0, r3
 811bc8c:	3708      	adds	r7, #8
 811bc8e:	46bd      	mov	sp, r7
 811bc90:	bd80      	pop	{r7, pc}
 811bc92:	bf00      	nop
 811bc94:	08126e3c 	.word	0x08126e3c
 811bc98:	08127564 	.word	0x08127564
 811bc9c:	08126eb8 	.word	0x08126eb8
 811bca0:	2400004c 	.word	0x2400004c
 811bca4:	240126a0 	.word	0x240126a0

0811bca8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 811bca8:	b580      	push	{r7, lr}
 811bcaa:	b086      	sub	sp, #24
 811bcac:	af00      	add	r7, sp, #0
 811bcae:	4603      	mov	r3, r0
 811bcb0:	60b9      	str	r1, [r7, #8]
 811bcb2:	607a      	str	r2, [r7, #4]
 811bcb4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 811bcb6:	687b      	ldr	r3, [r7, #4]
 811bcb8:	2b00      	cmp	r3, #0
 811bcba:	d106      	bne.n	811bcca <tcp_eff_send_mss_netif+0x22>
 811bcbc:	4b14      	ldr	r3, [pc, #80]	@ (811bd10 <tcp_eff_send_mss_netif+0x68>)
 811bcbe:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 811bcc2:	4914      	ldr	r1, [pc, #80]	@ (811bd14 <tcp_eff_send_mss_netif+0x6c>)
 811bcc4:	4814      	ldr	r0, [pc, #80]	@ (811bd18 <tcp_eff_send_mss_netif+0x70>)
 811bcc6:	f006 f85d 	bl	8121d84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 811bcca:	68bb      	ldr	r3, [r7, #8]
 811bccc:	2b00      	cmp	r3, #0
 811bcce:	d101      	bne.n	811bcd4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 811bcd0:	89fb      	ldrh	r3, [r7, #14]
 811bcd2:	e019      	b.n	811bd08 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 811bcd4:	68bb      	ldr	r3, [r7, #8]
 811bcd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811bcd8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 811bcda:	8afb      	ldrh	r3, [r7, #22]
 811bcdc:	2b00      	cmp	r3, #0
 811bcde:	d012      	beq.n	811bd06 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 811bce0:	2328      	movs	r3, #40	@ 0x28
 811bce2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 811bce4:	8afa      	ldrh	r2, [r7, #22]
 811bce6:	8abb      	ldrh	r3, [r7, #20]
 811bce8:	429a      	cmp	r2, r3
 811bcea:	d904      	bls.n	811bcf6 <tcp_eff_send_mss_netif+0x4e>
 811bcec:	8afa      	ldrh	r2, [r7, #22]
 811bcee:	8abb      	ldrh	r3, [r7, #20]
 811bcf0:	1ad3      	subs	r3, r2, r3
 811bcf2:	b29b      	uxth	r3, r3
 811bcf4:	e000      	b.n	811bcf8 <tcp_eff_send_mss_netif+0x50>
 811bcf6:	2300      	movs	r3, #0
 811bcf8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 811bcfa:	8a7a      	ldrh	r2, [r7, #18]
 811bcfc:	89fb      	ldrh	r3, [r7, #14]
 811bcfe:	4293      	cmp	r3, r2
 811bd00:	bf28      	it	cs
 811bd02:	4613      	movcs	r3, r2
 811bd04:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 811bd06:	89fb      	ldrh	r3, [r7, #14]
}
 811bd08:	4618      	mov	r0, r3
 811bd0a:	3718      	adds	r7, #24
 811bd0c:	46bd      	mov	sp, r7
 811bd0e:	bd80      	pop	{r7, pc}
 811bd10:	08126e3c 	.word	0x08126e3c
 811bd14:	08127580 	.word	0x08127580
 811bd18:	08126eb8 	.word	0x08126eb8

0811bd1c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 811bd1c:	b580      	push	{r7, lr}
 811bd1e:	b084      	sub	sp, #16
 811bd20:	af00      	add	r7, sp, #0
 811bd22:	6078      	str	r0, [r7, #4]
 811bd24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 811bd26:	683b      	ldr	r3, [r7, #0]
 811bd28:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 811bd2a:	687b      	ldr	r3, [r7, #4]
 811bd2c:	2b00      	cmp	r3, #0
 811bd2e:	d119      	bne.n	811bd64 <tcp_netif_ip_addr_changed_pcblist+0x48>
 811bd30:	4b10      	ldr	r3, [pc, #64]	@ (811bd74 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 811bd32:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 811bd36:	4910      	ldr	r1, [pc, #64]	@ (811bd78 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 811bd38:	4810      	ldr	r0, [pc, #64]	@ (811bd7c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 811bd3a:	f006 f823 	bl	8121d84 <iprintf>

  while (pcb != NULL) {
 811bd3e:	e011      	b.n	811bd64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 811bd40:	68fb      	ldr	r3, [r7, #12]
 811bd42:	681a      	ldr	r2, [r3, #0]
 811bd44:	687b      	ldr	r3, [r7, #4]
 811bd46:	681b      	ldr	r3, [r3, #0]
 811bd48:	429a      	cmp	r2, r3
 811bd4a:	d108      	bne.n	811bd5e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 811bd4c:	68fb      	ldr	r3, [r7, #12]
 811bd4e:	68db      	ldr	r3, [r3, #12]
 811bd50:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 811bd52:	68f8      	ldr	r0, [r7, #12]
 811bd54:	f7fe fd08 	bl	811a768 <tcp_abort>
      pcb = next;
 811bd58:	68bb      	ldr	r3, [r7, #8]
 811bd5a:	60fb      	str	r3, [r7, #12]
 811bd5c:	e002      	b.n	811bd64 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 811bd5e:	68fb      	ldr	r3, [r7, #12]
 811bd60:	68db      	ldr	r3, [r3, #12]
 811bd62:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 811bd64:	68fb      	ldr	r3, [r7, #12]
 811bd66:	2b00      	cmp	r3, #0
 811bd68:	d1ea      	bne.n	811bd40 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 811bd6a:	bf00      	nop
 811bd6c:	bf00      	nop
 811bd6e:	3710      	adds	r7, #16
 811bd70:	46bd      	mov	sp, r7
 811bd72:	bd80      	pop	{r7, pc}
 811bd74:	08126e3c 	.word	0x08126e3c
 811bd78:	081275a8 	.word	0x081275a8
 811bd7c:	08126eb8 	.word	0x08126eb8

0811bd80 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811bd80:	b580      	push	{r7, lr}
 811bd82:	b084      	sub	sp, #16
 811bd84:	af00      	add	r7, sp, #0
 811bd86:	6078      	str	r0, [r7, #4]
 811bd88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 811bd8a:	687b      	ldr	r3, [r7, #4]
 811bd8c:	2b00      	cmp	r3, #0
 811bd8e:	d02a      	beq.n	811bde6 <tcp_netif_ip_addr_changed+0x66>
 811bd90:	687b      	ldr	r3, [r7, #4]
 811bd92:	681b      	ldr	r3, [r3, #0]
 811bd94:	2b00      	cmp	r3, #0
 811bd96:	d026      	beq.n	811bde6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 811bd98:	4b15      	ldr	r3, [pc, #84]	@ (811bdf0 <tcp_netif_ip_addr_changed+0x70>)
 811bd9a:	681b      	ldr	r3, [r3, #0]
 811bd9c:	4619      	mov	r1, r3
 811bd9e:	6878      	ldr	r0, [r7, #4]
 811bda0:	f7ff ffbc 	bl	811bd1c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 811bda4:	4b13      	ldr	r3, [pc, #76]	@ (811bdf4 <tcp_netif_ip_addr_changed+0x74>)
 811bda6:	681b      	ldr	r3, [r3, #0]
 811bda8:	4619      	mov	r1, r3
 811bdaa:	6878      	ldr	r0, [r7, #4]
 811bdac:	f7ff ffb6 	bl	811bd1c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 811bdb0:	683b      	ldr	r3, [r7, #0]
 811bdb2:	2b00      	cmp	r3, #0
 811bdb4:	d017      	beq.n	811bde6 <tcp_netif_ip_addr_changed+0x66>
 811bdb6:	683b      	ldr	r3, [r7, #0]
 811bdb8:	681b      	ldr	r3, [r3, #0]
 811bdba:	2b00      	cmp	r3, #0
 811bdbc:	d013      	beq.n	811bde6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811bdbe:	4b0e      	ldr	r3, [pc, #56]	@ (811bdf8 <tcp_netif_ip_addr_changed+0x78>)
 811bdc0:	681b      	ldr	r3, [r3, #0]
 811bdc2:	60fb      	str	r3, [r7, #12]
 811bdc4:	e00c      	b.n	811bde0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 811bdc6:	68fb      	ldr	r3, [r7, #12]
 811bdc8:	681a      	ldr	r2, [r3, #0]
 811bdca:	687b      	ldr	r3, [r7, #4]
 811bdcc:	681b      	ldr	r3, [r3, #0]
 811bdce:	429a      	cmp	r2, r3
 811bdd0:	d103      	bne.n	811bdda <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 811bdd2:	683b      	ldr	r3, [r7, #0]
 811bdd4:	681a      	ldr	r2, [r3, #0]
 811bdd6:	68fb      	ldr	r3, [r7, #12]
 811bdd8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811bdda:	68fb      	ldr	r3, [r7, #12]
 811bddc:	68db      	ldr	r3, [r3, #12]
 811bdde:	60fb      	str	r3, [r7, #12]
 811bde0:	68fb      	ldr	r3, [r7, #12]
 811bde2:	2b00      	cmp	r3, #0
 811bde4:	d1ef      	bne.n	811bdc6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 811bde6:	bf00      	nop
 811bde8:	3710      	adds	r7, #16
 811bdea:	46bd      	mov	sp, r7
 811bdec:	bd80      	pop	{r7, pc}
 811bdee:	bf00      	nop
 811bdf0:	240126ac 	.word	0x240126ac
 811bdf4:	240126a4 	.word	0x240126a4
 811bdf8:	240126a8 	.word	0x240126a8

0811bdfc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 811bdfc:	b580      	push	{r7, lr}
 811bdfe:	b082      	sub	sp, #8
 811be00:	af00      	add	r7, sp, #0
 811be02:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 811be04:	687b      	ldr	r3, [r7, #4]
 811be06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811be08:	2b00      	cmp	r3, #0
 811be0a:	d007      	beq.n	811be1c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 811be0c:	687b      	ldr	r3, [r7, #4]
 811be0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811be10:	4618      	mov	r0, r3
 811be12:	f7ff fb7d 	bl	811b510 <tcp_segs_free>
    pcb->ooseq = NULL;
 811be16:	687b      	ldr	r3, [r7, #4]
 811be18:	2200      	movs	r2, #0
 811be1a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 811be1c:	bf00      	nop
 811be1e:	3708      	adds	r7, #8
 811be20:	46bd      	mov	sp, r7
 811be22:	bd80      	pop	{r7, pc}

0811be24 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 811be24:	b590      	push	{r4, r7, lr}
 811be26:	b08d      	sub	sp, #52	@ 0x34
 811be28:	af04      	add	r7, sp, #16
 811be2a:	6078      	str	r0, [r7, #4]
 811be2c:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 811be2e:	f7f3 ffc7 	bl	810fdc0 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 811be32:	687b      	ldr	r3, [r7, #4]
 811be34:	2b00      	cmp	r3, #0
 811be36:	d105      	bne.n	811be44 <tcp_input+0x20>
 811be38:	4b9b      	ldr	r3, [pc, #620]	@ (811c0a8 <tcp_input+0x284>)
 811be3a:	2283      	movs	r2, #131	@ 0x83
 811be3c:	499b      	ldr	r1, [pc, #620]	@ (811c0ac <tcp_input+0x288>)
 811be3e:	489c      	ldr	r0, [pc, #624]	@ (811c0b0 <tcp_input+0x28c>)
 811be40:	f005 ffa0 	bl	8121d84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 811be44:	687b      	ldr	r3, [r7, #4]
 811be46:	685b      	ldr	r3, [r3, #4]
 811be48:	4a9a      	ldr	r2, [pc, #616]	@ (811c0b4 <tcp_input+0x290>)
 811be4a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 811be4c:	687b      	ldr	r3, [r7, #4]
 811be4e:	895b      	ldrh	r3, [r3, #10]
 811be50:	2b13      	cmp	r3, #19
 811be52:	f240 83d1 	bls.w	811c5f8 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811be56:	4b98      	ldr	r3, [pc, #608]	@ (811c0b8 <tcp_input+0x294>)
 811be58:	695b      	ldr	r3, [r3, #20]
 811be5a:	4a97      	ldr	r2, [pc, #604]	@ (811c0b8 <tcp_input+0x294>)
 811be5c:	6812      	ldr	r2, [r2, #0]
 811be5e:	4611      	mov	r1, r2
 811be60:	4618      	mov	r0, r3
 811be62:	f7f9 fcbb 	bl	81157dc <ip4_addr_isbroadcast_u32>
 811be66:	4603      	mov	r3, r0
 811be68:	2b00      	cmp	r3, #0
 811be6a:	f040 83c7 	bne.w	811c5fc <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 811be6e:	4b92      	ldr	r3, [pc, #584]	@ (811c0b8 <tcp_input+0x294>)
 811be70:	695b      	ldr	r3, [r3, #20]
 811be72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811be76:	2be0      	cmp	r3, #224	@ 0xe0
 811be78:	f000 83c0 	beq.w	811c5fc <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 811be7c:	4b8d      	ldr	r3, [pc, #564]	@ (811c0b4 <tcp_input+0x290>)
 811be7e:	681b      	ldr	r3, [r3, #0]
 811be80:	899b      	ldrh	r3, [r3, #12]
 811be82:	b29b      	uxth	r3, r3
 811be84:	4618      	mov	r0, r3
 811be86:	f7f7 ff31 	bl	8113cec <lwip_htons>
 811be8a:	4603      	mov	r3, r0
 811be8c:	0b1b      	lsrs	r3, r3, #12
 811be8e:	b29b      	uxth	r3, r3
 811be90:	b2db      	uxtb	r3, r3
 811be92:	009b      	lsls	r3, r3, #2
 811be94:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 811be96:	7cbb      	ldrb	r3, [r7, #18]
 811be98:	2b13      	cmp	r3, #19
 811be9a:	f240 83b1 	bls.w	811c600 <tcp_input+0x7dc>
 811be9e:	7cbb      	ldrb	r3, [r7, #18]
 811bea0:	b29a      	uxth	r2, r3
 811bea2:	687b      	ldr	r3, [r7, #4]
 811bea4:	891b      	ldrh	r3, [r3, #8]
 811bea6:	429a      	cmp	r2, r3
 811bea8:	f200 83aa 	bhi.w	811c600 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 811beac:	7cbb      	ldrb	r3, [r7, #18]
 811beae:	b29b      	uxth	r3, r3
 811beb0:	3b14      	subs	r3, #20
 811beb2:	b29a      	uxth	r2, r3
 811beb4:	4b81      	ldr	r3, [pc, #516]	@ (811c0bc <tcp_input+0x298>)
 811beb6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 811beb8:	4b81      	ldr	r3, [pc, #516]	@ (811c0c0 <tcp_input+0x29c>)
 811beba:	2200      	movs	r2, #0
 811bebc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 811bebe:	687b      	ldr	r3, [r7, #4]
 811bec0:	895a      	ldrh	r2, [r3, #10]
 811bec2:	7cbb      	ldrb	r3, [r7, #18]
 811bec4:	b29b      	uxth	r3, r3
 811bec6:	429a      	cmp	r2, r3
 811bec8:	d309      	bcc.n	811bede <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 811beca:	4b7c      	ldr	r3, [pc, #496]	@ (811c0bc <tcp_input+0x298>)
 811becc:	881a      	ldrh	r2, [r3, #0]
 811bece:	4b7d      	ldr	r3, [pc, #500]	@ (811c0c4 <tcp_input+0x2a0>)
 811bed0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 811bed2:	7cbb      	ldrb	r3, [r7, #18]
 811bed4:	4619      	mov	r1, r3
 811bed6:	6878      	ldr	r0, [r7, #4]
 811bed8:	f7fd fcc2 	bl	8119860 <pbuf_remove_header>
 811bedc:	e04e      	b.n	811bf7c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 811bede:	687b      	ldr	r3, [r7, #4]
 811bee0:	681b      	ldr	r3, [r3, #0]
 811bee2:	2b00      	cmp	r3, #0
 811bee4:	d105      	bne.n	811bef2 <tcp_input+0xce>
 811bee6:	4b70      	ldr	r3, [pc, #448]	@ (811c0a8 <tcp_input+0x284>)
 811bee8:	22c2      	movs	r2, #194	@ 0xc2
 811beea:	4977      	ldr	r1, [pc, #476]	@ (811c0c8 <tcp_input+0x2a4>)
 811beec:	4870      	ldr	r0, [pc, #448]	@ (811c0b0 <tcp_input+0x28c>)
 811beee:	f005 ff49 	bl	8121d84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 811bef2:	2114      	movs	r1, #20
 811bef4:	6878      	ldr	r0, [r7, #4]
 811bef6:	f7fd fcb3 	bl	8119860 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 811befa:	687b      	ldr	r3, [r7, #4]
 811befc:	895a      	ldrh	r2, [r3, #10]
 811befe:	4b71      	ldr	r3, [pc, #452]	@ (811c0c4 <tcp_input+0x2a0>)
 811bf00:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 811bf02:	4b6e      	ldr	r3, [pc, #440]	@ (811c0bc <tcp_input+0x298>)
 811bf04:	881a      	ldrh	r2, [r3, #0]
 811bf06:	4b6f      	ldr	r3, [pc, #444]	@ (811c0c4 <tcp_input+0x2a0>)
 811bf08:	881b      	ldrh	r3, [r3, #0]
 811bf0a:	1ad3      	subs	r3, r2, r3
 811bf0c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 811bf0e:	4b6d      	ldr	r3, [pc, #436]	@ (811c0c4 <tcp_input+0x2a0>)
 811bf10:	881b      	ldrh	r3, [r3, #0]
 811bf12:	4619      	mov	r1, r3
 811bf14:	6878      	ldr	r0, [r7, #4]
 811bf16:	f7fd fca3 	bl	8119860 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 811bf1a:	687b      	ldr	r3, [r7, #4]
 811bf1c:	681b      	ldr	r3, [r3, #0]
 811bf1e:	895b      	ldrh	r3, [r3, #10]
 811bf20:	8a3a      	ldrh	r2, [r7, #16]
 811bf22:	429a      	cmp	r2, r3
 811bf24:	f200 836e 	bhi.w	811c604 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 811bf28:	687b      	ldr	r3, [r7, #4]
 811bf2a:	681b      	ldr	r3, [r3, #0]
 811bf2c:	685b      	ldr	r3, [r3, #4]
 811bf2e:	4a64      	ldr	r2, [pc, #400]	@ (811c0c0 <tcp_input+0x29c>)
 811bf30:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 811bf32:	687b      	ldr	r3, [r7, #4]
 811bf34:	681b      	ldr	r3, [r3, #0]
 811bf36:	8a3a      	ldrh	r2, [r7, #16]
 811bf38:	4611      	mov	r1, r2
 811bf3a:	4618      	mov	r0, r3
 811bf3c:	f7fd fc90 	bl	8119860 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 811bf40:	687b      	ldr	r3, [r7, #4]
 811bf42:	891a      	ldrh	r2, [r3, #8]
 811bf44:	8a3b      	ldrh	r3, [r7, #16]
 811bf46:	1ad3      	subs	r3, r2, r3
 811bf48:	b29a      	uxth	r2, r3
 811bf4a:	687b      	ldr	r3, [r7, #4]
 811bf4c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 811bf4e:	687b      	ldr	r3, [r7, #4]
 811bf50:	895b      	ldrh	r3, [r3, #10]
 811bf52:	2b00      	cmp	r3, #0
 811bf54:	d005      	beq.n	811bf62 <tcp_input+0x13e>
 811bf56:	4b54      	ldr	r3, [pc, #336]	@ (811c0a8 <tcp_input+0x284>)
 811bf58:	22df      	movs	r2, #223	@ 0xdf
 811bf5a:	495c      	ldr	r1, [pc, #368]	@ (811c0cc <tcp_input+0x2a8>)
 811bf5c:	4854      	ldr	r0, [pc, #336]	@ (811c0b0 <tcp_input+0x28c>)
 811bf5e:	f005 ff11 	bl	8121d84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 811bf62:	687b      	ldr	r3, [r7, #4]
 811bf64:	891a      	ldrh	r2, [r3, #8]
 811bf66:	687b      	ldr	r3, [r7, #4]
 811bf68:	681b      	ldr	r3, [r3, #0]
 811bf6a:	891b      	ldrh	r3, [r3, #8]
 811bf6c:	429a      	cmp	r2, r3
 811bf6e:	d005      	beq.n	811bf7c <tcp_input+0x158>
 811bf70:	4b4d      	ldr	r3, [pc, #308]	@ (811c0a8 <tcp_input+0x284>)
 811bf72:	22e0      	movs	r2, #224	@ 0xe0
 811bf74:	4956      	ldr	r1, [pc, #344]	@ (811c0d0 <tcp_input+0x2ac>)
 811bf76:	484e      	ldr	r0, [pc, #312]	@ (811c0b0 <tcp_input+0x28c>)
 811bf78:	f005 ff04 	bl	8121d84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 811bf7c:	4b4d      	ldr	r3, [pc, #308]	@ (811c0b4 <tcp_input+0x290>)
 811bf7e:	681b      	ldr	r3, [r3, #0]
 811bf80:	881b      	ldrh	r3, [r3, #0]
 811bf82:	b29b      	uxth	r3, r3
 811bf84:	4a4b      	ldr	r2, [pc, #300]	@ (811c0b4 <tcp_input+0x290>)
 811bf86:	6814      	ldr	r4, [r2, #0]
 811bf88:	4618      	mov	r0, r3
 811bf8a:	f7f7 feaf 	bl	8113cec <lwip_htons>
 811bf8e:	4603      	mov	r3, r0
 811bf90:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 811bf92:	4b48      	ldr	r3, [pc, #288]	@ (811c0b4 <tcp_input+0x290>)
 811bf94:	681b      	ldr	r3, [r3, #0]
 811bf96:	885b      	ldrh	r3, [r3, #2]
 811bf98:	b29b      	uxth	r3, r3
 811bf9a:	4a46      	ldr	r2, [pc, #280]	@ (811c0b4 <tcp_input+0x290>)
 811bf9c:	6814      	ldr	r4, [r2, #0]
 811bf9e:	4618      	mov	r0, r3
 811bfa0:	f7f7 fea4 	bl	8113cec <lwip_htons>
 811bfa4:	4603      	mov	r3, r0
 811bfa6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 811bfa8:	4b42      	ldr	r3, [pc, #264]	@ (811c0b4 <tcp_input+0x290>)
 811bfaa:	681b      	ldr	r3, [r3, #0]
 811bfac:	685b      	ldr	r3, [r3, #4]
 811bfae:	4a41      	ldr	r2, [pc, #260]	@ (811c0b4 <tcp_input+0x290>)
 811bfb0:	6814      	ldr	r4, [r2, #0]
 811bfb2:	4618      	mov	r0, r3
 811bfb4:	f7f7 feaf 	bl	8113d16 <lwip_htonl>
 811bfb8:	4603      	mov	r3, r0
 811bfba:	6063      	str	r3, [r4, #4]
 811bfbc:	6863      	ldr	r3, [r4, #4]
 811bfbe:	4a45      	ldr	r2, [pc, #276]	@ (811c0d4 <tcp_input+0x2b0>)
 811bfc0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 811bfc2:	4b3c      	ldr	r3, [pc, #240]	@ (811c0b4 <tcp_input+0x290>)
 811bfc4:	681b      	ldr	r3, [r3, #0]
 811bfc6:	689b      	ldr	r3, [r3, #8]
 811bfc8:	4a3a      	ldr	r2, [pc, #232]	@ (811c0b4 <tcp_input+0x290>)
 811bfca:	6814      	ldr	r4, [r2, #0]
 811bfcc:	4618      	mov	r0, r3
 811bfce:	f7f7 fea2 	bl	8113d16 <lwip_htonl>
 811bfd2:	4603      	mov	r3, r0
 811bfd4:	60a3      	str	r3, [r4, #8]
 811bfd6:	68a3      	ldr	r3, [r4, #8]
 811bfd8:	4a3f      	ldr	r2, [pc, #252]	@ (811c0d8 <tcp_input+0x2b4>)
 811bfda:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 811bfdc:	4b35      	ldr	r3, [pc, #212]	@ (811c0b4 <tcp_input+0x290>)
 811bfde:	681b      	ldr	r3, [r3, #0]
 811bfe0:	89db      	ldrh	r3, [r3, #14]
 811bfe2:	b29b      	uxth	r3, r3
 811bfe4:	4a33      	ldr	r2, [pc, #204]	@ (811c0b4 <tcp_input+0x290>)
 811bfe6:	6814      	ldr	r4, [r2, #0]
 811bfe8:	4618      	mov	r0, r3
 811bfea:	f7f7 fe7f 	bl	8113cec <lwip_htons>
 811bfee:	4603      	mov	r3, r0
 811bff0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 811bff2:	4b30      	ldr	r3, [pc, #192]	@ (811c0b4 <tcp_input+0x290>)
 811bff4:	681b      	ldr	r3, [r3, #0]
 811bff6:	899b      	ldrh	r3, [r3, #12]
 811bff8:	b29b      	uxth	r3, r3
 811bffa:	4618      	mov	r0, r3
 811bffc:	f7f7 fe76 	bl	8113cec <lwip_htons>
 811c000:	4603      	mov	r3, r0
 811c002:	b2db      	uxtb	r3, r3
 811c004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811c008:	b2da      	uxtb	r2, r3
 811c00a:	4b34      	ldr	r3, [pc, #208]	@ (811c0dc <tcp_input+0x2b8>)
 811c00c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 811c00e:	687b      	ldr	r3, [r7, #4]
 811c010:	891a      	ldrh	r2, [r3, #8]
 811c012:	4b33      	ldr	r3, [pc, #204]	@ (811c0e0 <tcp_input+0x2bc>)
 811c014:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 811c016:	4b31      	ldr	r3, [pc, #196]	@ (811c0dc <tcp_input+0x2b8>)
 811c018:	781b      	ldrb	r3, [r3, #0]
 811c01a:	f003 0303 	and.w	r3, r3, #3
 811c01e:	2b00      	cmp	r3, #0
 811c020:	d00c      	beq.n	811c03c <tcp_input+0x218>
    tcplen++;
 811c022:	4b2f      	ldr	r3, [pc, #188]	@ (811c0e0 <tcp_input+0x2bc>)
 811c024:	881b      	ldrh	r3, [r3, #0]
 811c026:	3301      	adds	r3, #1
 811c028:	b29a      	uxth	r2, r3
 811c02a:	4b2d      	ldr	r3, [pc, #180]	@ (811c0e0 <tcp_input+0x2bc>)
 811c02c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 811c02e:	687b      	ldr	r3, [r7, #4]
 811c030:	891a      	ldrh	r2, [r3, #8]
 811c032:	4b2b      	ldr	r3, [pc, #172]	@ (811c0e0 <tcp_input+0x2bc>)
 811c034:	881b      	ldrh	r3, [r3, #0]
 811c036:	429a      	cmp	r2, r3
 811c038:	f200 82e6 	bhi.w	811c608 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 811c03c:	2300      	movs	r3, #0
 811c03e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811c040:	4b28      	ldr	r3, [pc, #160]	@ (811c0e4 <tcp_input+0x2c0>)
 811c042:	681b      	ldr	r3, [r3, #0]
 811c044:	61fb      	str	r3, [r7, #28]
 811c046:	e09d      	b.n	811c184 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 811c048:	69fb      	ldr	r3, [r7, #28]
 811c04a:	7d1b      	ldrb	r3, [r3, #20]
 811c04c:	2b00      	cmp	r3, #0
 811c04e:	d105      	bne.n	811c05c <tcp_input+0x238>
 811c050:	4b15      	ldr	r3, [pc, #84]	@ (811c0a8 <tcp_input+0x284>)
 811c052:	22fb      	movs	r2, #251	@ 0xfb
 811c054:	4924      	ldr	r1, [pc, #144]	@ (811c0e8 <tcp_input+0x2c4>)
 811c056:	4816      	ldr	r0, [pc, #88]	@ (811c0b0 <tcp_input+0x28c>)
 811c058:	f005 fe94 	bl	8121d84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 811c05c:	69fb      	ldr	r3, [r7, #28]
 811c05e:	7d1b      	ldrb	r3, [r3, #20]
 811c060:	2b0a      	cmp	r3, #10
 811c062:	d105      	bne.n	811c070 <tcp_input+0x24c>
 811c064:	4b10      	ldr	r3, [pc, #64]	@ (811c0a8 <tcp_input+0x284>)
 811c066:	22fc      	movs	r2, #252	@ 0xfc
 811c068:	4920      	ldr	r1, [pc, #128]	@ (811c0ec <tcp_input+0x2c8>)
 811c06a:	4811      	ldr	r0, [pc, #68]	@ (811c0b0 <tcp_input+0x28c>)
 811c06c:	f005 fe8a 	bl	8121d84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 811c070:	69fb      	ldr	r3, [r7, #28]
 811c072:	7d1b      	ldrb	r3, [r3, #20]
 811c074:	2b01      	cmp	r3, #1
 811c076:	d105      	bne.n	811c084 <tcp_input+0x260>
 811c078:	4b0b      	ldr	r3, [pc, #44]	@ (811c0a8 <tcp_input+0x284>)
 811c07a:	22fd      	movs	r2, #253	@ 0xfd
 811c07c:	491c      	ldr	r1, [pc, #112]	@ (811c0f0 <tcp_input+0x2cc>)
 811c07e:	480c      	ldr	r0, [pc, #48]	@ (811c0b0 <tcp_input+0x28c>)
 811c080:	f005 fe80 	bl	8121d84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811c084:	69fb      	ldr	r3, [r7, #28]
 811c086:	7a1b      	ldrb	r3, [r3, #8]
 811c088:	2b00      	cmp	r3, #0
 811c08a:	d033      	beq.n	811c0f4 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811c08c:	69fb      	ldr	r3, [r7, #28]
 811c08e:	7a1a      	ldrb	r2, [r3, #8]
 811c090:	4b09      	ldr	r3, [pc, #36]	@ (811c0b8 <tcp_input+0x294>)
 811c092:	685b      	ldr	r3, [r3, #4]
 811c094:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811c098:	3301      	adds	r3, #1
 811c09a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811c09c:	429a      	cmp	r2, r3
 811c09e:	d029      	beq.n	811c0f4 <tcp_input+0x2d0>
      prev = pcb;
 811c0a0:	69fb      	ldr	r3, [r7, #28]
 811c0a2:	61bb      	str	r3, [r7, #24]
      continue;
 811c0a4:	e06b      	b.n	811c17e <tcp_input+0x35a>
 811c0a6:	bf00      	nop
 811c0a8:	081275dc 	.word	0x081275dc
 811c0ac:	08127648 	.word	0x08127648
 811c0b0:	08127660 	.word	0x08127660
 811c0b4:	240126c8 	.word	0x240126c8
 811c0b8:	2400a164 	.word	0x2400a164
 811c0bc:	240126cc 	.word	0x240126cc
 811c0c0:	240126d0 	.word	0x240126d0
 811c0c4:	240126ce 	.word	0x240126ce
 811c0c8:	08127688 	.word	0x08127688
 811c0cc:	08127698 	.word	0x08127698
 811c0d0:	081276a4 	.word	0x081276a4
 811c0d4:	240126d8 	.word	0x240126d8
 811c0d8:	240126dc 	.word	0x240126dc
 811c0dc:	240126e4 	.word	0x240126e4
 811c0e0:	240126e2 	.word	0x240126e2
 811c0e4:	240126ac 	.word	0x240126ac
 811c0e8:	081276c4 	.word	0x081276c4
 811c0ec:	081276ec 	.word	0x081276ec
 811c0f0:	08127718 	.word	0x08127718
    }

    if (pcb->remote_port == tcphdr->src &&
 811c0f4:	69fb      	ldr	r3, [r7, #28]
 811c0f6:	8b1a      	ldrh	r2, [r3, #24]
 811c0f8:	4b72      	ldr	r3, [pc, #456]	@ (811c2c4 <tcp_input+0x4a0>)
 811c0fa:	681b      	ldr	r3, [r3, #0]
 811c0fc:	881b      	ldrh	r3, [r3, #0]
 811c0fe:	b29b      	uxth	r3, r3
 811c100:	429a      	cmp	r2, r3
 811c102:	d13a      	bne.n	811c17a <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 811c104:	69fb      	ldr	r3, [r7, #28]
 811c106:	8ada      	ldrh	r2, [r3, #22]
 811c108:	4b6e      	ldr	r3, [pc, #440]	@ (811c2c4 <tcp_input+0x4a0>)
 811c10a:	681b      	ldr	r3, [r3, #0]
 811c10c:	885b      	ldrh	r3, [r3, #2]
 811c10e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 811c110:	429a      	cmp	r2, r3
 811c112:	d132      	bne.n	811c17a <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811c114:	69fb      	ldr	r3, [r7, #28]
 811c116:	685a      	ldr	r2, [r3, #4]
 811c118:	4b6b      	ldr	r3, [pc, #428]	@ (811c2c8 <tcp_input+0x4a4>)
 811c11a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 811c11c:	429a      	cmp	r2, r3
 811c11e:	d12c      	bne.n	811c17a <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811c120:	69fb      	ldr	r3, [r7, #28]
 811c122:	681a      	ldr	r2, [r3, #0]
 811c124:	4b68      	ldr	r3, [pc, #416]	@ (811c2c8 <tcp_input+0x4a4>)
 811c126:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811c128:	429a      	cmp	r2, r3
 811c12a:	d126      	bne.n	811c17a <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 811c12c:	69fb      	ldr	r3, [r7, #28]
 811c12e:	68db      	ldr	r3, [r3, #12]
 811c130:	69fa      	ldr	r2, [r7, #28]
 811c132:	429a      	cmp	r2, r3
 811c134:	d106      	bne.n	811c144 <tcp_input+0x320>
 811c136:	4b65      	ldr	r3, [pc, #404]	@ (811c2cc <tcp_input+0x4a8>)
 811c138:	f240 120d 	movw	r2, #269	@ 0x10d
 811c13c:	4964      	ldr	r1, [pc, #400]	@ (811c2d0 <tcp_input+0x4ac>)
 811c13e:	4865      	ldr	r0, [pc, #404]	@ (811c2d4 <tcp_input+0x4b0>)
 811c140:	f005 fe20 	bl	8121d84 <iprintf>
      if (prev != NULL) {
 811c144:	69bb      	ldr	r3, [r7, #24]
 811c146:	2b00      	cmp	r3, #0
 811c148:	d00a      	beq.n	811c160 <tcp_input+0x33c>
        prev->next = pcb->next;
 811c14a:	69fb      	ldr	r3, [r7, #28]
 811c14c:	68da      	ldr	r2, [r3, #12]
 811c14e:	69bb      	ldr	r3, [r7, #24]
 811c150:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 811c152:	4b61      	ldr	r3, [pc, #388]	@ (811c2d8 <tcp_input+0x4b4>)
 811c154:	681a      	ldr	r2, [r3, #0]
 811c156:	69fb      	ldr	r3, [r7, #28]
 811c158:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 811c15a:	4a5f      	ldr	r2, [pc, #380]	@ (811c2d8 <tcp_input+0x4b4>)
 811c15c:	69fb      	ldr	r3, [r7, #28]
 811c15e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 811c160:	69fb      	ldr	r3, [r7, #28]
 811c162:	68db      	ldr	r3, [r3, #12]
 811c164:	69fa      	ldr	r2, [r7, #28]
 811c166:	429a      	cmp	r2, r3
 811c168:	d111      	bne.n	811c18e <tcp_input+0x36a>
 811c16a:	4b58      	ldr	r3, [pc, #352]	@ (811c2cc <tcp_input+0x4a8>)
 811c16c:	f240 1215 	movw	r2, #277	@ 0x115
 811c170:	495a      	ldr	r1, [pc, #360]	@ (811c2dc <tcp_input+0x4b8>)
 811c172:	4858      	ldr	r0, [pc, #352]	@ (811c2d4 <tcp_input+0x4b0>)
 811c174:	f005 fe06 	bl	8121d84 <iprintf>
      break;
 811c178:	e009      	b.n	811c18e <tcp_input+0x36a>
    }
    prev = pcb;
 811c17a:	69fb      	ldr	r3, [r7, #28]
 811c17c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811c17e:	69fb      	ldr	r3, [r7, #28]
 811c180:	68db      	ldr	r3, [r3, #12]
 811c182:	61fb      	str	r3, [r7, #28]
 811c184:	69fb      	ldr	r3, [r7, #28]
 811c186:	2b00      	cmp	r3, #0
 811c188:	f47f af5e 	bne.w	811c048 <tcp_input+0x224>
 811c18c:	e000      	b.n	811c190 <tcp_input+0x36c>
      break;
 811c18e:	bf00      	nop
  }

  if (pcb == NULL) {
 811c190:	69fb      	ldr	r3, [r7, #28]
 811c192:	2b00      	cmp	r3, #0
 811c194:	f040 80aa 	bne.w	811c2ec <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811c198:	4b51      	ldr	r3, [pc, #324]	@ (811c2e0 <tcp_input+0x4bc>)
 811c19a:	681b      	ldr	r3, [r3, #0]
 811c19c:	61fb      	str	r3, [r7, #28]
 811c19e:	e03f      	b.n	811c220 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811c1a0:	69fb      	ldr	r3, [r7, #28]
 811c1a2:	7d1b      	ldrb	r3, [r3, #20]
 811c1a4:	2b0a      	cmp	r3, #10
 811c1a6:	d006      	beq.n	811c1b6 <tcp_input+0x392>
 811c1a8:	4b48      	ldr	r3, [pc, #288]	@ (811c2cc <tcp_input+0x4a8>)
 811c1aa:	f240 121f 	movw	r2, #287	@ 0x11f
 811c1ae:	494d      	ldr	r1, [pc, #308]	@ (811c2e4 <tcp_input+0x4c0>)
 811c1b0:	4848      	ldr	r0, [pc, #288]	@ (811c2d4 <tcp_input+0x4b0>)
 811c1b2:	f005 fde7 	bl	8121d84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811c1b6:	69fb      	ldr	r3, [r7, #28]
 811c1b8:	7a1b      	ldrb	r3, [r3, #8]
 811c1ba:	2b00      	cmp	r3, #0
 811c1bc:	d009      	beq.n	811c1d2 <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811c1be:	69fb      	ldr	r3, [r7, #28]
 811c1c0:	7a1a      	ldrb	r2, [r3, #8]
 811c1c2:	4b41      	ldr	r3, [pc, #260]	@ (811c2c8 <tcp_input+0x4a4>)
 811c1c4:	685b      	ldr	r3, [r3, #4]
 811c1c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811c1ca:	3301      	adds	r3, #1
 811c1cc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811c1ce:	429a      	cmp	r2, r3
 811c1d0:	d122      	bne.n	811c218 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 811c1d2:	69fb      	ldr	r3, [r7, #28]
 811c1d4:	8b1a      	ldrh	r2, [r3, #24]
 811c1d6:	4b3b      	ldr	r3, [pc, #236]	@ (811c2c4 <tcp_input+0x4a0>)
 811c1d8:	681b      	ldr	r3, [r3, #0]
 811c1da:	881b      	ldrh	r3, [r3, #0]
 811c1dc:	b29b      	uxth	r3, r3
 811c1de:	429a      	cmp	r2, r3
 811c1e0:	d11b      	bne.n	811c21a <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 811c1e2:	69fb      	ldr	r3, [r7, #28]
 811c1e4:	8ada      	ldrh	r2, [r3, #22]
 811c1e6:	4b37      	ldr	r3, [pc, #220]	@ (811c2c4 <tcp_input+0x4a0>)
 811c1e8:	681b      	ldr	r3, [r3, #0]
 811c1ea:	885b      	ldrh	r3, [r3, #2]
 811c1ec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 811c1ee:	429a      	cmp	r2, r3
 811c1f0:	d113      	bne.n	811c21a <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811c1f2:	69fb      	ldr	r3, [r7, #28]
 811c1f4:	685a      	ldr	r2, [r3, #4]
 811c1f6:	4b34      	ldr	r3, [pc, #208]	@ (811c2c8 <tcp_input+0x4a4>)
 811c1f8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 811c1fa:	429a      	cmp	r2, r3
 811c1fc:	d10d      	bne.n	811c21a <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811c1fe:	69fb      	ldr	r3, [r7, #28]
 811c200:	681a      	ldr	r2, [r3, #0]
 811c202:	4b31      	ldr	r3, [pc, #196]	@ (811c2c8 <tcp_input+0x4a4>)
 811c204:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811c206:	429a      	cmp	r2, r3
 811c208:	d107      	bne.n	811c21a <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 811c20a:	69f8      	ldr	r0, [r7, #28]
 811c20c:	f000 fb56 	bl	811c8bc <tcp_timewait_input>
        }
        pbuf_free(p);
 811c210:	6878      	ldr	r0, [r7, #4]
 811c212:	f7fd fbab 	bl	811996c <pbuf_free>
        return;
 811c216:	e1fd      	b.n	811c614 <tcp_input+0x7f0>
        continue;
 811c218:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811c21a:	69fb      	ldr	r3, [r7, #28]
 811c21c:	68db      	ldr	r3, [r3, #12]
 811c21e:	61fb      	str	r3, [r7, #28]
 811c220:	69fb      	ldr	r3, [r7, #28]
 811c222:	2b00      	cmp	r3, #0
 811c224:	d1bc      	bne.n	811c1a0 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 811c226:	2300      	movs	r3, #0
 811c228:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811c22a:	4b2f      	ldr	r3, [pc, #188]	@ (811c2e8 <tcp_input+0x4c4>)
 811c22c:	681b      	ldr	r3, [r3, #0]
 811c22e:	617b      	str	r3, [r7, #20]
 811c230:	e02a      	b.n	811c288 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811c232:	697b      	ldr	r3, [r7, #20]
 811c234:	7a1b      	ldrb	r3, [r3, #8]
 811c236:	2b00      	cmp	r3, #0
 811c238:	d00c      	beq.n	811c254 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811c23a:	697b      	ldr	r3, [r7, #20]
 811c23c:	7a1a      	ldrb	r2, [r3, #8]
 811c23e:	4b22      	ldr	r3, [pc, #136]	@ (811c2c8 <tcp_input+0x4a4>)
 811c240:	685b      	ldr	r3, [r3, #4]
 811c242:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811c246:	3301      	adds	r3, #1
 811c248:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811c24a:	429a      	cmp	r2, r3
 811c24c:	d002      	beq.n	811c254 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 811c24e:	697b      	ldr	r3, [r7, #20]
 811c250:	61bb      	str	r3, [r7, #24]
        continue;
 811c252:	e016      	b.n	811c282 <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 811c254:	697b      	ldr	r3, [r7, #20]
 811c256:	8ada      	ldrh	r2, [r3, #22]
 811c258:	4b1a      	ldr	r3, [pc, #104]	@ (811c2c4 <tcp_input+0x4a0>)
 811c25a:	681b      	ldr	r3, [r3, #0]
 811c25c:	885b      	ldrh	r3, [r3, #2]
 811c25e:	b29b      	uxth	r3, r3
 811c260:	429a      	cmp	r2, r3
 811c262:	d10c      	bne.n	811c27e <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 811c264:	697b      	ldr	r3, [r7, #20]
 811c266:	681a      	ldr	r2, [r3, #0]
 811c268:	4b17      	ldr	r3, [pc, #92]	@ (811c2c8 <tcp_input+0x4a4>)
 811c26a:	695b      	ldr	r3, [r3, #20]
 811c26c:	429a      	cmp	r2, r3
 811c26e:	d00f      	beq.n	811c290 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 811c270:	697b      	ldr	r3, [r7, #20]
 811c272:	2b00      	cmp	r3, #0
 811c274:	d00d      	beq.n	811c292 <tcp_input+0x46e>
 811c276:	697b      	ldr	r3, [r7, #20]
 811c278:	681b      	ldr	r3, [r3, #0]
 811c27a:	2b00      	cmp	r3, #0
 811c27c:	d009      	beq.n	811c292 <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 811c27e:	697b      	ldr	r3, [r7, #20]
 811c280:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811c282:	697b      	ldr	r3, [r7, #20]
 811c284:	68db      	ldr	r3, [r3, #12]
 811c286:	617b      	str	r3, [r7, #20]
 811c288:	697b      	ldr	r3, [r7, #20]
 811c28a:	2b00      	cmp	r3, #0
 811c28c:	d1d1      	bne.n	811c232 <tcp_input+0x40e>
 811c28e:	e000      	b.n	811c292 <tcp_input+0x46e>
            break;
 811c290:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 811c292:	697b      	ldr	r3, [r7, #20]
 811c294:	2b00      	cmp	r3, #0
 811c296:	d029      	beq.n	811c2ec <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 811c298:	69bb      	ldr	r3, [r7, #24]
 811c29a:	2b00      	cmp	r3, #0
 811c29c:	d00a      	beq.n	811c2b4 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 811c29e:	697b      	ldr	r3, [r7, #20]
 811c2a0:	68da      	ldr	r2, [r3, #12]
 811c2a2:	69bb      	ldr	r3, [r7, #24]
 811c2a4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811c2a6:	4b10      	ldr	r3, [pc, #64]	@ (811c2e8 <tcp_input+0x4c4>)
 811c2a8:	681a      	ldr	r2, [r3, #0]
 811c2aa:	697b      	ldr	r3, [r7, #20]
 811c2ac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 811c2ae:	4a0e      	ldr	r2, [pc, #56]	@ (811c2e8 <tcp_input+0x4c4>)
 811c2b0:	697b      	ldr	r3, [r7, #20]
 811c2b2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 811c2b4:	6978      	ldr	r0, [r7, #20]
 811c2b6:	f000 fa03 	bl	811c6c0 <tcp_listen_input>
      }
      pbuf_free(p);
 811c2ba:	6878      	ldr	r0, [r7, #4]
 811c2bc:	f7fd fb56 	bl	811996c <pbuf_free>
      return;
 811c2c0:	e1a8      	b.n	811c614 <tcp_input+0x7f0>
 811c2c2:	bf00      	nop
 811c2c4:	240126c8 	.word	0x240126c8
 811c2c8:	2400a164 	.word	0x2400a164
 811c2cc:	081275dc 	.word	0x081275dc
 811c2d0:	08127740 	.word	0x08127740
 811c2d4:	08127660 	.word	0x08127660
 811c2d8:	240126ac 	.word	0x240126ac
 811c2dc:	0812776c 	.word	0x0812776c
 811c2e0:	240126b0 	.word	0x240126b0
 811c2e4:	08127798 	.word	0x08127798
 811c2e8:	240126a8 	.word	0x240126a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 811c2ec:	69fb      	ldr	r3, [r7, #28]
 811c2ee:	2b00      	cmp	r3, #0
 811c2f0:	f000 8158 	beq.w	811c5a4 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 811c2f4:	4b95      	ldr	r3, [pc, #596]	@ (811c54c <tcp_input+0x728>)
 811c2f6:	2200      	movs	r2, #0
 811c2f8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 811c2fa:	687b      	ldr	r3, [r7, #4]
 811c2fc:	891a      	ldrh	r2, [r3, #8]
 811c2fe:	4b93      	ldr	r3, [pc, #588]	@ (811c54c <tcp_input+0x728>)
 811c300:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 811c302:	4a92      	ldr	r2, [pc, #584]	@ (811c54c <tcp_input+0x728>)
 811c304:	687b      	ldr	r3, [r7, #4]
 811c306:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 811c308:	4b91      	ldr	r3, [pc, #580]	@ (811c550 <tcp_input+0x72c>)
 811c30a:	681b      	ldr	r3, [r3, #0]
 811c30c:	4a8f      	ldr	r2, [pc, #572]	@ (811c54c <tcp_input+0x728>)
 811c30e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 811c310:	4b90      	ldr	r3, [pc, #576]	@ (811c554 <tcp_input+0x730>)
 811c312:	2200      	movs	r2, #0
 811c314:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 811c316:	4b90      	ldr	r3, [pc, #576]	@ (811c558 <tcp_input+0x734>)
 811c318:	2200      	movs	r2, #0
 811c31a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 811c31c:	4b8f      	ldr	r3, [pc, #572]	@ (811c55c <tcp_input+0x738>)
 811c31e:	2200      	movs	r2, #0
 811c320:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 811c322:	4b8f      	ldr	r3, [pc, #572]	@ (811c560 <tcp_input+0x73c>)
 811c324:	781b      	ldrb	r3, [r3, #0]
 811c326:	f003 0308 	and.w	r3, r3, #8
 811c32a:	2b00      	cmp	r3, #0
 811c32c:	d006      	beq.n	811c33c <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 811c32e:	687b      	ldr	r3, [r7, #4]
 811c330:	7b5b      	ldrb	r3, [r3, #13]
 811c332:	f043 0301 	orr.w	r3, r3, #1
 811c336:	b2da      	uxtb	r2, r3
 811c338:	687b      	ldr	r3, [r7, #4]
 811c33a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 811c33c:	69fb      	ldr	r3, [r7, #28]
 811c33e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811c340:	2b00      	cmp	r3, #0
 811c342:	d017      	beq.n	811c374 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811c344:	69f8      	ldr	r0, [r7, #28]
 811c346:	f7ff f867 	bl	811b418 <tcp_process_refused_data>
 811c34a:	4603      	mov	r3, r0
 811c34c:	f113 0f0d 	cmn.w	r3, #13
 811c350:	d007      	beq.n	811c362 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811c352:	69fb      	ldr	r3, [r7, #28]
 811c354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811c356:	2b00      	cmp	r3, #0
 811c358:	d00c      	beq.n	811c374 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811c35a:	4b82      	ldr	r3, [pc, #520]	@ (811c564 <tcp_input+0x740>)
 811c35c:	881b      	ldrh	r3, [r3, #0]
 811c35e:	2b00      	cmp	r3, #0
 811c360:	d008      	beq.n	811c374 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811c362:	69fb      	ldr	r3, [r7, #28]
 811c364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811c366:	2b00      	cmp	r3, #0
 811c368:	f040 80e3 	bne.w	811c532 <tcp_input+0x70e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 811c36c:	69f8      	ldr	r0, [r7, #28]
 811c36e:	f003 fe03 	bl	811ff78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811c372:	e0de      	b.n	811c532 <tcp_input+0x70e>
      }
    }
    tcp_input_pcb = pcb;
 811c374:	4a7c      	ldr	r2, [pc, #496]	@ (811c568 <tcp_input+0x744>)
 811c376:	69fb      	ldr	r3, [r7, #28]
 811c378:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 811c37a:	69f8      	ldr	r0, [r7, #28]
 811c37c:	f000 fb18 	bl	811c9b0 <tcp_process>
 811c380:	4603      	mov	r3, r0
 811c382:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 811c384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811c388:	f113 0f0d 	cmn.w	r3, #13
 811c38c:	f000 80d3 	beq.w	811c536 <tcp_input+0x712>
      if (recv_flags & TF_RESET) {
 811c390:	4b71      	ldr	r3, [pc, #452]	@ (811c558 <tcp_input+0x734>)
 811c392:	781b      	ldrb	r3, [r3, #0]
 811c394:	f003 0308 	and.w	r3, r3, #8
 811c398:	2b00      	cmp	r3, #0
 811c39a:	d015      	beq.n	811c3c8 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 811c39c:	69fb      	ldr	r3, [r7, #28]
 811c39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c3a2:	2b00      	cmp	r3, #0
 811c3a4:	d008      	beq.n	811c3b8 <tcp_input+0x594>
 811c3a6:	69fb      	ldr	r3, [r7, #28]
 811c3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c3ac:	69fa      	ldr	r2, [r7, #28]
 811c3ae:	6912      	ldr	r2, [r2, #16]
 811c3b0:	f06f 010d 	mvn.w	r1, #13
 811c3b4:	4610      	mov	r0, r2
 811c3b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811c3b8:	69f9      	ldr	r1, [r7, #28]
 811c3ba:	486c      	ldr	r0, [pc, #432]	@ (811c56c <tcp_input+0x748>)
 811c3bc:	f7ff fbba 	bl	811bb34 <tcp_pcb_remove>
        tcp_free(pcb);
 811c3c0:	69f8      	ldr	r0, [r7, #28]
 811c3c2:	f7fd fee5 	bl	811a190 <tcp_free>
 811c3c6:	e0da      	b.n	811c57e <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 811c3c8:	2300      	movs	r3, #0
 811c3ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 811c3cc:	4b63      	ldr	r3, [pc, #396]	@ (811c55c <tcp_input+0x738>)
 811c3ce:	881b      	ldrh	r3, [r3, #0]
 811c3d0:	2b00      	cmp	r3, #0
 811c3d2:	d01d      	beq.n	811c410 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 811c3d4:	4b61      	ldr	r3, [pc, #388]	@ (811c55c <tcp_input+0x738>)
 811c3d6:	881b      	ldrh	r3, [r3, #0]
 811c3d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 811c3da:	69fb      	ldr	r3, [r7, #28]
 811c3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811c3e0:	2b00      	cmp	r3, #0
 811c3e2:	d00a      	beq.n	811c3fa <tcp_input+0x5d6>
 811c3e4:	69fb      	ldr	r3, [r7, #28]
 811c3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811c3ea:	69fa      	ldr	r2, [r7, #28]
 811c3ec:	6910      	ldr	r0, [r2, #16]
 811c3ee:	89fa      	ldrh	r2, [r7, #14]
 811c3f0:	69f9      	ldr	r1, [r7, #28]
 811c3f2:	4798      	blx	r3
 811c3f4:	4603      	mov	r3, r0
 811c3f6:	74fb      	strb	r3, [r7, #19]
 811c3f8:	e001      	b.n	811c3fe <tcp_input+0x5da>
 811c3fa:	2300      	movs	r3, #0
 811c3fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811c3fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811c402:	f113 0f0d 	cmn.w	r3, #13
 811c406:	f000 8098 	beq.w	811c53a <tcp_input+0x716>
              goto aborted;
            }
          }
          recv_acked = 0;
 811c40a:	4b54      	ldr	r3, [pc, #336]	@ (811c55c <tcp_input+0x738>)
 811c40c:	2200      	movs	r2, #0
 811c40e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 811c410:	69f8      	ldr	r0, [r7, #28]
 811c412:	f000 f915 	bl	811c640 <tcp_input_delayed_close>
 811c416:	4603      	mov	r3, r0
 811c418:	2b00      	cmp	r3, #0
 811c41a:	f040 8090 	bne.w	811c53e <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 811c41e:	4b4d      	ldr	r3, [pc, #308]	@ (811c554 <tcp_input+0x730>)
 811c420:	681b      	ldr	r3, [r3, #0]
 811c422:	2b00      	cmp	r3, #0
 811c424:	d041      	beq.n	811c4aa <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 811c426:	69fb      	ldr	r3, [r7, #28]
 811c428:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811c42a:	2b00      	cmp	r3, #0
 811c42c:	d006      	beq.n	811c43c <tcp_input+0x618>
 811c42e:	4b50      	ldr	r3, [pc, #320]	@ (811c570 <tcp_input+0x74c>)
 811c430:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811c434:	494f      	ldr	r1, [pc, #316]	@ (811c574 <tcp_input+0x750>)
 811c436:	4850      	ldr	r0, [pc, #320]	@ (811c578 <tcp_input+0x754>)
 811c438:	f005 fca4 	bl	8121d84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 811c43c:	69fb      	ldr	r3, [r7, #28]
 811c43e:	8b5b      	ldrh	r3, [r3, #26]
 811c440:	f003 0310 	and.w	r3, r3, #16
 811c444:	2b00      	cmp	r3, #0
 811c446:	d008      	beq.n	811c45a <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 811c448:	4b42      	ldr	r3, [pc, #264]	@ (811c554 <tcp_input+0x730>)
 811c44a:	681b      	ldr	r3, [r3, #0]
 811c44c:	4618      	mov	r0, r3
 811c44e:	f7fd fa8d 	bl	811996c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 811c452:	69f8      	ldr	r0, [r7, #28]
 811c454:	f7fe f988 	bl	811a768 <tcp_abort>
            goto aborted;
 811c458:	e091      	b.n	811c57e <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 811c45a:	69fb      	ldr	r3, [r7, #28]
 811c45c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811c460:	2b00      	cmp	r3, #0
 811c462:	d00c      	beq.n	811c47e <tcp_input+0x65a>
 811c464:	69fb      	ldr	r3, [r7, #28]
 811c466:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811c46a:	69fb      	ldr	r3, [r7, #28]
 811c46c:	6918      	ldr	r0, [r3, #16]
 811c46e:	4b39      	ldr	r3, [pc, #228]	@ (811c554 <tcp_input+0x730>)
 811c470:	681a      	ldr	r2, [r3, #0]
 811c472:	2300      	movs	r3, #0
 811c474:	69f9      	ldr	r1, [r7, #28]
 811c476:	47a0      	blx	r4
 811c478:	4603      	mov	r3, r0
 811c47a:	74fb      	strb	r3, [r7, #19]
 811c47c:	e008      	b.n	811c490 <tcp_input+0x66c>
 811c47e:	4b35      	ldr	r3, [pc, #212]	@ (811c554 <tcp_input+0x730>)
 811c480:	681a      	ldr	r2, [r3, #0]
 811c482:	2300      	movs	r3, #0
 811c484:	69f9      	ldr	r1, [r7, #28]
 811c486:	2000      	movs	r0, #0
 811c488:	f7ff f89c 	bl	811b5c4 <tcp_recv_null>
 811c48c:	4603      	mov	r3, r0
 811c48e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 811c490:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811c494:	f113 0f0d 	cmn.w	r3, #13
 811c498:	d053      	beq.n	811c542 <tcp_input+0x71e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 811c49a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811c49e:	2b00      	cmp	r3, #0
 811c4a0:	d003      	beq.n	811c4aa <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811c4a2:	4b2c      	ldr	r3, [pc, #176]	@ (811c554 <tcp_input+0x730>)
 811c4a4:	681a      	ldr	r2, [r3, #0]
 811c4a6:	69fb      	ldr	r3, [r7, #28]
 811c4a8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 811c4aa:	4b2b      	ldr	r3, [pc, #172]	@ (811c558 <tcp_input+0x734>)
 811c4ac:	781b      	ldrb	r3, [r3, #0]
 811c4ae:	f003 0320 	and.w	r3, r3, #32
 811c4b2:	2b00      	cmp	r3, #0
 811c4b4:	d030      	beq.n	811c518 <tcp_input+0x6f4>
          if (pcb->refused_data != NULL) {
 811c4b6:	69fb      	ldr	r3, [r7, #28]
 811c4b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811c4ba:	2b00      	cmp	r3, #0
 811c4bc:	d009      	beq.n	811c4d2 <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 811c4be:	69fb      	ldr	r3, [r7, #28]
 811c4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811c4c2:	7b5a      	ldrb	r2, [r3, #13]
 811c4c4:	69fb      	ldr	r3, [r7, #28]
 811c4c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811c4c8:	f042 0220 	orr.w	r2, r2, #32
 811c4cc:	b2d2      	uxtb	r2, r2
 811c4ce:	735a      	strb	r2, [r3, #13]
 811c4d0:	e022      	b.n	811c518 <tcp_input+0x6f4>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811c4d2:	69fb      	ldr	r3, [r7, #28]
 811c4d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811c4d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 811c4da:	d005      	beq.n	811c4e8 <tcp_input+0x6c4>
              pcb->rcv_wnd++;
 811c4dc:	69fb      	ldr	r3, [r7, #28]
 811c4de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811c4e0:	3301      	adds	r3, #1
 811c4e2:	b29a      	uxth	r2, r3
 811c4e4:	69fb      	ldr	r3, [r7, #28]
 811c4e6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 811c4e8:	69fb      	ldr	r3, [r7, #28]
 811c4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811c4ee:	2b00      	cmp	r3, #0
 811c4f0:	d00b      	beq.n	811c50a <tcp_input+0x6e6>
 811c4f2:	69fb      	ldr	r3, [r7, #28]
 811c4f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811c4f8:	69fb      	ldr	r3, [r7, #28]
 811c4fa:	6918      	ldr	r0, [r3, #16]
 811c4fc:	2300      	movs	r3, #0
 811c4fe:	2200      	movs	r2, #0
 811c500:	69f9      	ldr	r1, [r7, #28]
 811c502:	47a0      	blx	r4
 811c504:	4603      	mov	r3, r0
 811c506:	74fb      	strb	r3, [r7, #19]
 811c508:	e001      	b.n	811c50e <tcp_input+0x6ea>
 811c50a:	2300      	movs	r3, #0
 811c50c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811c50e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811c512:	f113 0f0d 	cmn.w	r3, #13
 811c516:	d016      	beq.n	811c546 <tcp_input+0x722>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 811c518:	4b13      	ldr	r3, [pc, #76]	@ (811c568 <tcp_input+0x744>)
 811c51a:	2200      	movs	r2, #0
 811c51c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 811c51e:	69f8      	ldr	r0, [r7, #28]
 811c520:	f000 f88e 	bl	811c640 <tcp_input_delayed_close>
 811c524:	4603      	mov	r3, r0
 811c526:	2b00      	cmp	r3, #0
 811c528:	d128      	bne.n	811c57c <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 811c52a:	69f8      	ldr	r0, [r7, #28]
 811c52c:	f002 ff1c 	bl	811f368 <tcp_output>
 811c530:	e025      	b.n	811c57e <tcp_input+0x75a>
        goto aborted;
 811c532:	bf00      	nop
 811c534:	e023      	b.n	811c57e <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 811c536:	bf00      	nop
 811c538:	e021      	b.n	811c57e <tcp_input+0x75a>
              goto aborted;
 811c53a:	bf00      	nop
 811c53c:	e01f      	b.n	811c57e <tcp_input+0x75a>
          goto aborted;
 811c53e:	bf00      	nop
 811c540:	e01d      	b.n	811c57e <tcp_input+0x75a>
            goto aborted;
 811c542:	bf00      	nop
 811c544:	e01b      	b.n	811c57e <tcp_input+0x75a>
              goto aborted;
 811c546:	bf00      	nop
 811c548:	e019      	b.n	811c57e <tcp_input+0x75a>
 811c54a:	bf00      	nop
 811c54c:	240126b8 	.word	0x240126b8
 811c550:	240126c8 	.word	0x240126c8
 811c554:	240126e8 	.word	0x240126e8
 811c558:	240126e5 	.word	0x240126e5
 811c55c:	240126e0 	.word	0x240126e0
 811c560:	240126e4 	.word	0x240126e4
 811c564:	240126e2 	.word	0x240126e2
 811c568:	240126ec 	.word	0x240126ec
 811c56c:	240126ac 	.word	0x240126ac
 811c570:	081275dc 	.word	0x081275dc
 811c574:	081277c8 	.word	0x081277c8
 811c578:	08127660 	.word	0x08127660
          goto aborted;
 811c57c:	bf00      	nop
    tcp_input_pcb = NULL;
 811c57e:	4b27      	ldr	r3, [pc, #156]	@ (811c61c <tcp_input+0x7f8>)
 811c580:	2200      	movs	r2, #0
 811c582:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 811c584:	4b26      	ldr	r3, [pc, #152]	@ (811c620 <tcp_input+0x7fc>)
 811c586:	2200      	movs	r2, #0
 811c588:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 811c58a:	4b26      	ldr	r3, [pc, #152]	@ (811c624 <tcp_input+0x800>)
 811c58c:	685b      	ldr	r3, [r3, #4]
 811c58e:	2b00      	cmp	r3, #0
 811c590:	d03f      	beq.n	811c612 <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 811c592:	4b24      	ldr	r3, [pc, #144]	@ (811c624 <tcp_input+0x800>)
 811c594:	685b      	ldr	r3, [r3, #4]
 811c596:	4618      	mov	r0, r3
 811c598:	f7fd f9e8 	bl	811996c <pbuf_free>
      inseg.p = NULL;
 811c59c:	4b21      	ldr	r3, [pc, #132]	@ (811c624 <tcp_input+0x800>)
 811c59e:	2200      	movs	r2, #0
 811c5a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 811c5a2:	e036      	b.n	811c612 <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 811c5a4:	4b20      	ldr	r3, [pc, #128]	@ (811c628 <tcp_input+0x804>)
 811c5a6:	681b      	ldr	r3, [r3, #0]
 811c5a8:	899b      	ldrh	r3, [r3, #12]
 811c5aa:	b29b      	uxth	r3, r3
 811c5ac:	4618      	mov	r0, r3
 811c5ae:	f7f7 fb9d 	bl	8113cec <lwip_htons>
 811c5b2:	4603      	mov	r3, r0
 811c5b4:	b2db      	uxtb	r3, r3
 811c5b6:	f003 0304 	and.w	r3, r3, #4
 811c5ba:	2b00      	cmp	r3, #0
 811c5bc:	d118      	bne.n	811c5f0 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c5be:	4b1b      	ldr	r3, [pc, #108]	@ (811c62c <tcp_input+0x808>)
 811c5c0:	6819      	ldr	r1, [r3, #0]
 811c5c2:	4b1b      	ldr	r3, [pc, #108]	@ (811c630 <tcp_input+0x80c>)
 811c5c4:	881b      	ldrh	r3, [r3, #0]
 811c5c6:	461a      	mov	r2, r3
 811c5c8:	4b1a      	ldr	r3, [pc, #104]	@ (811c634 <tcp_input+0x810>)
 811c5ca:	681b      	ldr	r3, [r3, #0]
 811c5cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c5ce:	4b16      	ldr	r3, [pc, #88]	@ (811c628 <tcp_input+0x804>)
 811c5d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c5d2:	885b      	ldrh	r3, [r3, #2]
 811c5d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c5d6:	4a14      	ldr	r2, [pc, #80]	@ (811c628 <tcp_input+0x804>)
 811c5d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c5da:	8812      	ldrh	r2, [r2, #0]
 811c5dc:	b292      	uxth	r2, r2
 811c5de:	9202      	str	r2, [sp, #8]
 811c5e0:	9301      	str	r3, [sp, #4]
 811c5e2:	4b15      	ldr	r3, [pc, #84]	@ (811c638 <tcp_input+0x814>)
 811c5e4:	9300      	str	r3, [sp, #0]
 811c5e6:	4b15      	ldr	r3, [pc, #84]	@ (811c63c <tcp_input+0x818>)
 811c5e8:	4602      	mov	r2, r0
 811c5ea:	2000      	movs	r0, #0
 811c5ec:	f003 fc72 	bl	811fed4 <tcp_rst>
    pbuf_free(p);
 811c5f0:	6878      	ldr	r0, [r7, #4]
 811c5f2:	f7fd f9bb 	bl	811996c <pbuf_free>
  return;
 811c5f6:	e00c      	b.n	811c612 <tcp_input+0x7ee>
    goto dropped;
 811c5f8:	bf00      	nop
 811c5fa:	e006      	b.n	811c60a <tcp_input+0x7e6>
    goto dropped;
 811c5fc:	bf00      	nop
 811c5fe:	e004      	b.n	811c60a <tcp_input+0x7e6>
    goto dropped;
 811c600:	bf00      	nop
 811c602:	e002      	b.n	811c60a <tcp_input+0x7e6>
      goto dropped;
 811c604:	bf00      	nop
 811c606:	e000      	b.n	811c60a <tcp_input+0x7e6>
      goto dropped;
 811c608:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 811c60a:	6878      	ldr	r0, [r7, #4]
 811c60c:	f7fd f9ae 	bl	811996c <pbuf_free>
 811c610:	e000      	b.n	811c614 <tcp_input+0x7f0>
  return;
 811c612:	bf00      	nop
}
 811c614:	3724      	adds	r7, #36	@ 0x24
 811c616:	46bd      	mov	sp, r7
 811c618:	bd90      	pop	{r4, r7, pc}
 811c61a:	bf00      	nop
 811c61c:	240126ec 	.word	0x240126ec
 811c620:	240126e8 	.word	0x240126e8
 811c624:	240126b8 	.word	0x240126b8
 811c628:	240126c8 	.word	0x240126c8
 811c62c:	240126dc 	.word	0x240126dc
 811c630:	240126e2 	.word	0x240126e2
 811c634:	240126d8 	.word	0x240126d8
 811c638:	2400a174 	.word	0x2400a174
 811c63c:	2400a178 	.word	0x2400a178

0811c640 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 811c640:	b580      	push	{r7, lr}
 811c642:	b082      	sub	sp, #8
 811c644:	af00      	add	r7, sp, #0
 811c646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 811c648:	687b      	ldr	r3, [r7, #4]
 811c64a:	2b00      	cmp	r3, #0
 811c64c:	d106      	bne.n	811c65c <tcp_input_delayed_close+0x1c>
 811c64e:	4b17      	ldr	r3, [pc, #92]	@ (811c6ac <tcp_input_delayed_close+0x6c>)
 811c650:	f240 225a 	movw	r2, #602	@ 0x25a
 811c654:	4916      	ldr	r1, [pc, #88]	@ (811c6b0 <tcp_input_delayed_close+0x70>)
 811c656:	4817      	ldr	r0, [pc, #92]	@ (811c6b4 <tcp_input_delayed_close+0x74>)
 811c658:	f005 fb94 	bl	8121d84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 811c65c:	4b16      	ldr	r3, [pc, #88]	@ (811c6b8 <tcp_input_delayed_close+0x78>)
 811c65e:	781b      	ldrb	r3, [r3, #0]
 811c660:	f003 0310 	and.w	r3, r3, #16
 811c664:	2b00      	cmp	r3, #0
 811c666:	d01c      	beq.n	811c6a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 811c668:	687b      	ldr	r3, [r7, #4]
 811c66a:	8b5b      	ldrh	r3, [r3, #26]
 811c66c:	f003 0310 	and.w	r3, r3, #16
 811c670:	2b00      	cmp	r3, #0
 811c672:	d10d      	bne.n	811c690 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 811c674:	687b      	ldr	r3, [r7, #4]
 811c676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c67a:	2b00      	cmp	r3, #0
 811c67c:	d008      	beq.n	811c690 <tcp_input_delayed_close+0x50>
 811c67e:	687b      	ldr	r3, [r7, #4]
 811c680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c684:	687a      	ldr	r2, [r7, #4]
 811c686:	6912      	ldr	r2, [r2, #16]
 811c688:	f06f 010e 	mvn.w	r1, #14
 811c68c:	4610      	mov	r0, r2
 811c68e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811c690:	6879      	ldr	r1, [r7, #4]
 811c692:	480a      	ldr	r0, [pc, #40]	@ (811c6bc <tcp_input_delayed_close+0x7c>)
 811c694:	f7ff fa4e 	bl	811bb34 <tcp_pcb_remove>
    tcp_free(pcb);
 811c698:	6878      	ldr	r0, [r7, #4]
 811c69a:	f7fd fd79 	bl	811a190 <tcp_free>
    return 1;
 811c69e:	2301      	movs	r3, #1
 811c6a0:	e000      	b.n	811c6a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 811c6a2:	2300      	movs	r3, #0
}
 811c6a4:	4618      	mov	r0, r3
 811c6a6:	3708      	adds	r7, #8
 811c6a8:	46bd      	mov	sp, r7
 811c6aa:	bd80      	pop	{r7, pc}
 811c6ac:	081275dc 	.word	0x081275dc
 811c6b0:	081277e4 	.word	0x081277e4
 811c6b4:	08127660 	.word	0x08127660
 811c6b8:	240126e5 	.word	0x240126e5
 811c6bc:	240126ac 	.word	0x240126ac

0811c6c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 811c6c0:	b590      	push	{r4, r7, lr}
 811c6c2:	b08b      	sub	sp, #44	@ 0x2c
 811c6c4:	af04      	add	r7, sp, #16
 811c6c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 811c6c8:	4b6f      	ldr	r3, [pc, #444]	@ (811c888 <tcp_listen_input+0x1c8>)
 811c6ca:	781b      	ldrb	r3, [r3, #0]
 811c6cc:	f003 0304 	and.w	r3, r3, #4
 811c6d0:	2b00      	cmp	r3, #0
 811c6d2:	f040 80d2 	bne.w	811c87a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 811c6d6:	687b      	ldr	r3, [r7, #4]
 811c6d8:	2b00      	cmp	r3, #0
 811c6da:	d106      	bne.n	811c6ea <tcp_listen_input+0x2a>
 811c6dc:	4b6b      	ldr	r3, [pc, #428]	@ (811c88c <tcp_listen_input+0x1cc>)
 811c6de:	f240 2281 	movw	r2, #641	@ 0x281
 811c6e2:	496b      	ldr	r1, [pc, #428]	@ (811c890 <tcp_listen_input+0x1d0>)
 811c6e4:	486b      	ldr	r0, [pc, #428]	@ (811c894 <tcp_listen_input+0x1d4>)
 811c6e6:	f005 fb4d 	bl	8121d84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 811c6ea:	4b67      	ldr	r3, [pc, #412]	@ (811c888 <tcp_listen_input+0x1c8>)
 811c6ec:	781b      	ldrb	r3, [r3, #0]
 811c6ee:	f003 0310 	and.w	r3, r3, #16
 811c6f2:	2b00      	cmp	r3, #0
 811c6f4:	d019      	beq.n	811c72a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c6f6:	4b68      	ldr	r3, [pc, #416]	@ (811c898 <tcp_listen_input+0x1d8>)
 811c6f8:	6819      	ldr	r1, [r3, #0]
 811c6fa:	4b68      	ldr	r3, [pc, #416]	@ (811c89c <tcp_listen_input+0x1dc>)
 811c6fc:	881b      	ldrh	r3, [r3, #0]
 811c6fe:	461a      	mov	r2, r3
 811c700:	4b67      	ldr	r3, [pc, #412]	@ (811c8a0 <tcp_listen_input+0x1e0>)
 811c702:	681b      	ldr	r3, [r3, #0]
 811c704:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c706:	4b67      	ldr	r3, [pc, #412]	@ (811c8a4 <tcp_listen_input+0x1e4>)
 811c708:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c70a:	885b      	ldrh	r3, [r3, #2]
 811c70c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c70e:	4a65      	ldr	r2, [pc, #404]	@ (811c8a4 <tcp_listen_input+0x1e4>)
 811c710:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c712:	8812      	ldrh	r2, [r2, #0]
 811c714:	b292      	uxth	r2, r2
 811c716:	9202      	str	r2, [sp, #8]
 811c718:	9301      	str	r3, [sp, #4]
 811c71a:	4b63      	ldr	r3, [pc, #396]	@ (811c8a8 <tcp_listen_input+0x1e8>)
 811c71c:	9300      	str	r3, [sp, #0]
 811c71e:	4b63      	ldr	r3, [pc, #396]	@ (811c8ac <tcp_listen_input+0x1ec>)
 811c720:	4602      	mov	r2, r0
 811c722:	6878      	ldr	r0, [r7, #4]
 811c724:	f003 fbd6 	bl	811fed4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 811c728:	e0a9      	b.n	811c87e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 811c72a:	4b57      	ldr	r3, [pc, #348]	@ (811c888 <tcp_listen_input+0x1c8>)
 811c72c:	781b      	ldrb	r3, [r3, #0]
 811c72e:	f003 0302 	and.w	r3, r3, #2
 811c732:	2b00      	cmp	r3, #0
 811c734:	f000 80a3 	beq.w	811c87e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 811c738:	687b      	ldr	r3, [r7, #4]
 811c73a:	7d5b      	ldrb	r3, [r3, #21]
 811c73c:	4618      	mov	r0, r3
 811c73e:	f7ff f865 	bl	811b80c <tcp_alloc>
 811c742:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 811c744:	697b      	ldr	r3, [r7, #20]
 811c746:	2b00      	cmp	r3, #0
 811c748:	d111      	bne.n	811c76e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811c74a:	687b      	ldr	r3, [r7, #4]
 811c74c:	699b      	ldr	r3, [r3, #24]
 811c74e:	2b00      	cmp	r3, #0
 811c750:	d00a      	beq.n	811c768 <tcp_listen_input+0xa8>
 811c752:	687b      	ldr	r3, [r7, #4]
 811c754:	699b      	ldr	r3, [r3, #24]
 811c756:	687a      	ldr	r2, [r7, #4]
 811c758:	6910      	ldr	r0, [r2, #16]
 811c75a:	f04f 32ff 	mov.w	r2, #4294967295
 811c75e:	2100      	movs	r1, #0
 811c760:	4798      	blx	r3
 811c762:	4603      	mov	r3, r0
 811c764:	73bb      	strb	r3, [r7, #14]
      return;
 811c766:	e08b      	b.n	811c880 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811c768:	23f0      	movs	r3, #240	@ 0xf0
 811c76a:	73bb      	strb	r3, [r7, #14]
      return;
 811c76c:	e088      	b.n	811c880 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 811c76e:	4b50      	ldr	r3, [pc, #320]	@ (811c8b0 <tcp_listen_input+0x1f0>)
 811c770:	695a      	ldr	r2, [r3, #20]
 811c772:	697b      	ldr	r3, [r7, #20]
 811c774:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 811c776:	4b4e      	ldr	r3, [pc, #312]	@ (811c8b0 <tcp_listen_input+0x1f0>)
 811c778:	691a      	ldr	r2, [r3, #16]
 811c77a:	697b      	ldr	r3, [r7, #20]
 811c77c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 811c77e:	687b      	ldr	r3, [r7, #4]
 811c780:	8ada      	ldrh	r2, [r3, #22]
 811c782:	697b      	ldr	r3, [r7, #20]
 811c784:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 811c786:	4b47      	ldr	r3, [pc, #284]	@ (811c8a4 <tcp_listen_input+0x1e4>)
 811c788:	681b      	ldr	r3, [r3, #0]
 811c78a:	881b      	ldrh	r3, [r3, #0]
 811c78c:	b29a      	uxth	r2, r3
 811c78e:	697b      	ldr	r3, [r7, #20]
 811c790:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811c792:	697b      	ldr	r3, [r7, #20]
 811c794:	2203      	movs	r2, #3
 811c796:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 811c798:	4b41      	ldr	r3, [pc, #260]	@ (811c8a0 <tcp_listen_input+0x1e0>)
 811c79a:	681b      	ldr	r3, [r3, #0]
 811c79c:	1c5a      	adds	r2, r3, #1
 811c79e:	697b      	ldr	r3, [r7, #20]
 811c7a0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811c7a2:	697b      	ldr	r3, [r7, #20]
 811c7a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c7a6:	697b      	ldr	r3, [r7, #20]
 811c7a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 811c7aa:	6978      	ldr	r0, [r7, #20]
 811c7ac:	f7ff fa56 	bl	811bc5c <tcp_next_iss>
 811c7b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811c7b2:	697b      	ldr	r3, [r7, #20]
 811c7b4:	693a      	ldr	r2, [r7, #16]
 811c7b6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 811c7b8:	697b      	ldr	r3, [r7, #20]
 811c7ba:	693a      	ldr	r2, [r7, #16]
 811c7bc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811c7be:	697b      	ldr	r3, [r7, #20]
 811c7c0:	693a      	ldr	r2, [r7, #16]
 811c7c2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 811c7c4:	697b      	ldr	r3, [r7, #20]
 811c7c6:	693a      	ldr	r2, [r7, #16]
 811c7c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 811c7ca:	4b35      	ldr	r3, [pc, #212]	@ (811c8a0 <tcp_listen_input+0x1e0>)
 811c7cc:	681b      	ldr	r3, [r3, #0]
 811c7ce:	1e5a      	subs	r2, r3, #1
 811c7d0:	697b      	ldr	r3, [r7, #20]
 811c7d2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 811c7d4:	687b      	ldr	r3, [r7, #4]
 811c7d6:	691a      	ldr	r2, [r3, #16]
 811c7d8:	697b      	ldr	r3, [r7, #20]
 811c7da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 811c7dc:	697b      	ldr	r3, [r7, #20]
 811c7de:	687a      	ldr	r2, [r7, #4]
 811c7e0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811c7e2:	687b      	ldr	r3, [r7, #4]
 811c7e4:	7a5b      	ldrb	r3, [r3, #9]
 811c7e6:	f003 030c 	and.w	r3, r3, #12
 811c7ea:	b2da      	uxtb	r2, r3
 811c7ec:	697b      	ldr	r3, [r7, #20]
 811c7ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 811c7f0:	687b      	ldr	r3, [r7, #4]
 811c7f2:	7a1a      	ldrb	r2, [r3, #8]
 811c7f4:	697b      	ldr	r3, [r7, #20]
 811c7f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 811c7f8:	4b2e      	ldr	r3, [pc, #184]	@ (811c8b4 <tcp_listen_input+0x1f4>)
 811c7fa:	681a      	ldr	r2, [r3, #0]
 811c7fc:	697b      	ldr	r3, [r7, #20]
 811c7fe:	60da      	str	r2, [r3, #12]
 811c800:	4a2c      	ldr	r2, [pc, #176]	@ (811c8b4 <tcp_listen_input+0x1f4>)
 811c802:	697b      	ldr	r3, [r7, #20]
 811c804:	6013      	str	r3, [r2, #0]
 811c806:	f003 fed7 	bl	81205b8 <tcp_timer_needed>
 811c80a:	4b2b      	ldr	r3, [pc, #172]	@ (811c8b8 <tcp_listen_input+0x1f8>)
 811c80c:	2201      	movs	r2, #1
 811c80e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 811c810:	6978      	ldr	r0, [r7, #20]
 811c812:	f001 fd8b 	bl	811e32c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 811c816:	4b23      	ldr	r3, [pc, #140]	@ (811c8a4 <tcp_listen_input+0x1e4>)
 811c818:	681b      	ldr	r3, [r3, #0]
 811c81a:	89db      	ldrh	r3, [r3, #14]
 811c81c:	b29a      	uxth	r2, r3
 811c81e:	697b      	ldr	r3, [r7, #20]
 811c820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 811c824:	697b      	ldr	r3, [r7, #20]
 811c826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811c82a:	697b      	ldr	r3, [r7, #20]
 811c82c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 811c830:	697b      	ldr	r3, [r7, #20]
 811c832:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811c834:	697b      	ldr	r3, [r7, #20]
 811c836:	3304      	adds	r3, #4
 811c838:	4618      	mov	r0, r3
 811c83a:	f7f8 fd35 	bl	81152a8 <ip4_route>
 811c83e:	4601      	mov	r1, r0
 811c840:	697b      	ldr	r3, [r7, #20]
 811c842:	3304      	adds	r3, #4
 811c844:	461a      	mov	r2, r3
 811c846:	4620      	mov	r0, r4
 811c848:	f7ff fa2e 	bl	811bca8 <tcp_eff_send_mss_netif>
 811c84c:	4603      	mov	r3, r0
 811c84e:	461a      	mov	r2, r3
 811c850:	697b      	ldr	r3, [r7, #20]
 811c852:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 811c854:	2112      	movs	r1, #18
 811c856:	6978      	ldr	r0, [r7, #20]
 811c858:	f002 fc98 	bl	811f18c <tcp_enqueue_flags>
 811c85c:	4603      	mov	r3, r0
 811c85e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 811c860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811c864:	2b00      	cmp	r3, #0
 811c866:	d004      	beq.n	811c872 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 811c868:	2100      	movs	r1, #0
 811c86a:	6978      	ldr	r0, [r7, #20]
 811c86c:	f7fd febc 	bl	811a5e8 <tcp_abandon>
      return;
 811c870:	e006      	b.n	811c880 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 811c872:	6978      	ldr	r0, [r7, #20]
 811c874:	f002 fd78 	bl	811f368 <tcp_output>
  return;
 811c878:	e001      	b.n	811c87e <tcp_listen_input+0x1be>
    return;
 811c87a:	bf00      	nop
 811c87c:	e000      	b.n	811c880 <tcp_listen_input+0x1c0>
  return;
 811c87e:	bf00      	nop
}
 811c880:	371c      	adds	r7, #28
 811c882:	46bd      	mov	sp, r7
 811c884:	bd90      	pop	{r4, r7, pc}
 811c886:	bf00      	nop
 811c888:	240126e4 	.word	0x240126e4
 811c88c:	081275dc 	.word	0x081275dc
 811c890:	0812780c 	.word	0x0812780c
 811c894:	08127660 	.word	0x08127660
 811c898:	240126dc 	.word	0x240126dc
 811c89c:	240126e2 	.word	0x240126e2
 811c8a0:	240126d8 	.word	0x240126d8
 811c8a4:	240126c8 	.word	0x240126c8
 811c8a8:	2400a174 	.word	0x2400a174
 811c8ac:	2400a178 	.word	0x2400a178
 811c8b0:	2400a164 	.word	0x2400a164
 811c8b4:	240126ac 	.word	0x240126ac
 811c8b8:	240126b4 	.word	0x240126b4

0811c8bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 811c8bc:	b580      	push	{r7, lr}
 811c8be:	b086      	sub	sp, #24
 811c8c0:	af04      	add	r7, sp, #16
 811c8c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 811c8c4:	4b2f      	ldr	r3, [pc, #188]	@ (811c984 <tcp_timewait_input+0xc8>)
 811c8c6:	781b      	ldrb	r3, [r3, #0]
 811c8c8:	f003 0304 	and.w	r3, r3, #4
 811c8cc:	2b00      	cmp	r3, #0
 811c8ce:	d153      	bne.n	811c978 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 811c8d0:	687b      	ldr	r3, [r7, #4]
 811c8d2:	2b00      	cmp	r3, #0
 811c8d4:	d106      	bne.n	811c8e4 <tcp_timewait_input+0x28>
 811c8d6:	4b2c      	ldr	r3, [pc, #176]	@ (811c988 <tcp_timewait_input+0xcc>)
 811c8d8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 811c8dc:	492b      	ldr	r1, [pc, #172]	@ (811c98c <tcp_timewait_input+0xd0>)
 811c8de:	482c      	ldr	r0, [pc, #176]	@ (811c990 <tcp_timewait_input+0xd4>)
 811c8e0:	f005 fa50 	bl	8121d84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 811c8e4:	4b27      	ldr	r3, [pc, #156]	@ (811c984 <tcp_timewait_input+0xc8>)
 811c8e6:	781b      	ldrb	r3, [r3, #0]
 811c8e8:	f003 0302 	and.w	r3, r3, #2
 811c8ec:	2b00      	cmp	r3, #0
 811c8ee:	d02a      	beq.n	811c946 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 811c8f0:	4b28      	ldr	r3, [pc, #160]	@ (811c994 <tcp_timewait_input+0xd8>)
 811c8f2:	681a      	ldr	r2, [r3, #0]
 811c8f4:	687b      	ldr	r3, [r7, #4]
 811c8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c8f8:	1ad3      	subs	r3, r2, r3
 811c8fa:	2b00      	cmp	r3, #0
 811c8fc:	db2d      	blt.n	811c95a <tcp_timewait_input+0x9e>
 811c8fe:	4b25      	ldr	r3, [pc, #148]	@ (811c994 <tcp_timewait_input+0xd8>)
 811c900:	681a      	ldr	r2, [r3, #0]
 811c902:	687b      	ldr	r3, [r7, #4]
 811c904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c906:	6879      	ldr	r1, [r7, #4]
 811c908:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811c90a:	440b      	add	r3, r1
 811c90c:	1ad3      	subs	r3, r2, r3
 811c90e:	2b00      	cmp	r3, #0
 811c910:	dc23      	bgt.n	811c95a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c912:	4b21      	ldr	r3, [pc, #132]	@ (811c998 <tcp_timewait_input+0xdc>)
 811c914:	6819      	ldr	r1, [r3, #0]
 811c916:	4b21      	ldr	r3, [pc, #132]	@ (811c99c <tcp_timewait_input+0xe0>)
 811c918:	881b      	ldrh	r3, [r3, #0]
 811c91a:	461a      	mov	r2, r3
 811c91c:	4b1d      	ldr	r3, [pc, #116]	@ (811c994 <tcp_timewait_input+0xd8>)
 811c91e:	681b      	ldr	r3, [r3, #0]
 811c920:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c922:	4b1f      	ldr	r3, [pc, #124]	@ (811c9a0 <tcp_timewait_input+0xe4>)
 811c924:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c926:	885b      	ldrh	r3, [r3, #2]
 811c928:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c92a:	4a1d      	ldr	r2, [pc, #116]	@ (811c9a0 <tcp_timewait_input+0xe4>)
 811c92c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c92e:	8812      	ldrh	r2, [r2, #0]
 811c930:	b292      	uxth	r2, r2
 811c932:	9202      	str	r2, [sp, #8]
 811c934:	9301      	str	r3, [sp, #4]
 811c936:	4b1b      	ldr	r3, [pc, #108]	@ (811c9a4 <tcp_timewait_input+0xe8>)
 811c938:	9300      	str	r3, [sp, #0]
 811c93a:	4b1b      	ldr	r3, [pc, #108]	@ (811c9a8 <tcp_timewait_input+0xec>)
 811c93c:	4602      	mov	r2, r0
 811c93e:	6878      	ldr	r0, [r7, #4]
 811c940:	f003 fac8 	bl	811fed4 <tcp_rst>
      return;
 811c944:	e01b      	b.n	811c97e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 811c946:	4b0f      	ldr	r3, [pc, #60]	@ (811c984 <tcp_timewait_input+0xc8>)
 811c948:	781b      	ldrb	r3, [r3, #0]
 811c94a:	f003 0301 	and.w	r3, r3, #1
 811c94e:	2b00      	cmp	r3, #0
 811c950:	d003      	beq.n	811c95a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 811c952:	4b16      	ldr	r3, [pc, #88]	@ (811c9ac <tcp_timewait_input+0xf0>)
 811c954:	681a      	ldr	r2, [r3, #0]
 811c956:	687b      	ldr	r3, [r7, #4]
 811c958:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 811c95a:	4b10      	ldr	r3, [pc, #64]	@ (811c99c <tcp_timewait_input+0xe0>)
 811c95c:	881b      	ldrh	r3, [r3, #0]
 811c95e:	2b00      	cmp	r3, #0
 811c960:	d00c      	beq.n	811c97c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 811c962:	687b      	ldr	r3, [r7, #4]
 811c964:	8b5b      	ldrh	r3, [r3, #26]
 811c966:	f043 0302 	orr.w	r3, r3, #2
 811c96a:	b29a      	uxth	r2, r3
 811c96c:	687b      	ldr	r3, [r7, #4]
 811c96e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811c970:	6878      	ldr	r0, [r7, #4]
 811c972:	f002 fcf9 	bl	811f368 <tcp_output>
  }
  return;
 811c976:	e001      	b.n	811c97c <tcp_timewait_input+0xc0>
    return;
 811c978:	bf00      	nop
 811c97a:	e000      	b.n	811c97e <tcp_timewait_input+0xc2>
  return;
 811c97c:	bf00      	nop
}
 811c97e:	3708      	adds	r7, #8
 811c980:	46bd      	mov	sp, r7
 811c982:	bd80      	pop	{r7, pc}
 811c984:	240126e4 	.word	0x240126e4
 811c988:	081275dc 	.word	0x081275dc
 811c98c:	0812782c 	.word	0x0812782c
 811c990:	08127660 	.word	0x08127660
 811c994:	240126d8 	.word	0x240126d8
 811c998:	240126dc 	.word	0x240126dc
 811c99c:	240126e2 	.word	0x240126e2
 811c9a0:	240126c8 	.word	0x240126c8
 811c9a4:	2400a174 	.word	0x2400a174
 811c9a8:	2400a178 	.word	0x2400a178
 811c9ac:	240126a0 	.word	0x240126a0

0811c9b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 811c9b0:	b590      	push	{r4, r7, lr}
 811c9b2:	b08d      	sub	sp, #52	@ 0x34
 811c9b4:	af04      	add	r7, sp, #16
 811c9b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 811c9b8:	2300      	movs	r3, #0
 811c9ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 811c9bc:	2300      	movs	r3, #0
 811c9be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 811c9c0:	687b      	ldr	r3, [r7, #4]
 811c9c2:	2b00      	cmp	r3, #0
 811c9c4:	d106      	bne.n	811c9d4 <tcp_process+0x24>
 811c9c6:	4b9d      	ldr	r3, [pc, #628]	@ (811cc3c <tcp_process+0x28c>)
 811c9c8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 811c9cc:	499c      	ldr	r1, [pc, #624]	@ (811cc40 <tcp_process+0x290>)
 811c9ce:	489d      	ldr	r0, [pc, #628]	@ (811cc44 <tcp_process+0x294>)
 811c9d0:	f005 f9d8 	bl	8121d84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 811c9d4:	4b9c      	ldr	r3, [pc, #624]	@ (811cc48 <tcp_process+0x298>)
 811c9d6:	781b      	ldrb	r3, [r3, #0]
 811c9d8:	f003 0304 	and.w	r3, r3, #4
 811c9dc:	2b00      	cmp	r3, #0
 811c9de:	d04e      	beq.n	811ca7e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 811c9e0:	687b      	ldr	r3, [r7, #4]
 811c9e2:	7d1b      	ldrb	r3, [r3, #20]
 811c9e4:	2b02      	cmp	r3, #2
 811c9e6:	d108      	bne.n	811c9fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 811c9e8:	687b      	ldr	r3, [r7, #4]
 811c9ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811c9ec:	4b97      	ldr	r3, [pc, #604]	@ (811cc4c <tcp_process+0x29c>)
 811c9ee:	681b      	ldr	r3, [r3, #0]
 811c9f0:	429a      	cmp	r2, r3
 811c9f2:	d123      	bne.n	811ca3c <tcp_process+0x8c>
        acceptable = 1;
 811c9f4:	2301      	movs	r3, #1
 811c9f6:	76fb      	strb	r3, [r7, #27]
 811c9f8:	e020      	b.n	811ca3c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 811c9fa:	687b      	ldr	r3, [r7, #4]
 811c9fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c9fe:	4b94      	ldr	r3, [pc, #592]	@ (811cc50 <tcp_process+0x2a0>)
 811ca00:	681b      	ldr	r3, [r3, #0]
 811ca02:	429a      	cmp	r2, r3
 811ca04:	d102      	bne.n	811ca0c <tcp_process+0x5c>
        acceptable = 1;
 811ca06:	2301      	movs	r3, #1
 811ca08:	76fb      	strb	r3, [r7, #27]
 811ca0a:	e017      	b.n	811ca3c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811ca0c:	4b90      	ldr	r3, [pc, #576]	@ (811cc50 <tcp_process+0x2a0>)
 811ca0e:	681a      	ldr	r2, [r3, #0]
 811ca10:	687b      	ldr	r3, [r7, #4]
 811ca12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ca14:	1ad3      	subs	r3, r2, r3
 811ca16:	2b00      	cmp	r3, #0
 811ca18:	db10      	blt.n	811ca3c <tcp_process+0x8c>
 811ca1a:	4b8d      	ldr	r3, [pc, #564]	@ (811cc50 <tcp_process+0x2a0>)
 811ca1c:	681a      	ldr	r2, [r3, #0]
 811ca1e:	687b      	ldr	r3, [r7, #4]
 811ca20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ca22:	6879      	ldr	r1, [r7, #4]
 811ca24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811ca26:	440b      	add	r3, r1
 811ca28:	1ad3      	subs	r3, r2, r3
 811ca2a:	2b00      	cmp	r3, #0
 811ca2c:	dc06      	bgt.n	811ca3c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 811ca2e:	687b      	ldr	r3, [r7, #4]
 811ca30:	8b5b      	ldrh	r3, [r3, #26]
 811ca32:	f043 0302 	orr.w	r3, r3, #2
 811ca36:	b29a      	uxth	r2, r3
 811ca38:	687b      	ldr	r3, [r7, #4]
 811ca3a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 811ca3c:	7efb      	ldrb	r3, [r7, #27]
 811ca3e:	2b00      	cmp	r3, #0
 811ca40:	d01b      	beq.n	811ca7a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 811ca42:	687b      	ldr	r3, [r7, #4]
 811ca44:	7d1b      	ldrb	r3, [r3, #20]
 811ca46:	2b00      	cmp	r3, #0
 811ca48:	d106      	bne.n	811ca58 <tcp_process+0xa8>
 811ca4a:	4b7c      	ldr	r3, [pc, #496]	@ (811cc3c <tcp_process+0x28c>)
 811ca4c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 811ca50:	4980      	ldr	r1, [pc, #512]	@ (811cc54 <tcp_process+0x2a4>)
 811ca52:	487c      	ldr	r0, [pc, #496]	@ (811cc44 <tcp_process+0x294>)
 811ca54:	f005 f996 	bl	8121d84 <iprintf>
      recv_flags |= TF_RESET;
 811ca58:	4b7f      	ldr	r3, [pc, #508]	@ (811cc58 <tcp_process+0x2a8>)
 811ca5a:	781b      	ldrb	r3, [r3, #0]
 811ca5c:	f043 0308 	orr.w	r3, r3, #8
 811ca60:	b2da      	uxtb	r2, r3
 811ca62:	4b7d      	ldr	r3, [pc, #500]	@ (811cc58 <tcp_process+0x2a8>)
 811ca64:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 811ca66:	687b      	ldr	r3, [r7, #4]
 811ca68:	8b5b      	ldrh	r3, [r3, #26]
 811ca6a:	f023 0301 	bic.w	r3, r3, #1
 811ca6e:	b29a      	uxth	r2, r3
 811ca70:	687b      	ldr	r3, [r7, #4]
 811ca72:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 811ca74:	f06f 030d 	mvn.w	r3, #13
 811ca78:	e37a      	b.n	811d170 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 811ca7a:	2300      	movs	r3, #0
 811ca7c:	e378      	b.n	811d170 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 811ca7e:	4b72      	ldr	r3, [pc, #456]	@ (811cc48 <tcp_process+0x298>)
 811ca80:	781b      	ldrb	r3, [r3, #0]
 811ca82:	f003 0302 	and.w	r3, r3, #2
 811ca86:	2b00      	cmp	r3, #0
 811ca88:	d010      	beq.n	811caac <tcp_process+0xfc>
 811ca8a:	687b      	ldr	r3, [r7, #4]
 811ca8c:	7d1b      	ldrb	r3, [r3, #20]
 811ca8e:	2b02      	cmp	r3, #2
 811ca90:	d00c      	beq.n	811caac <tcp_process+0xfc>
 811ca92:	687b      	ldr	r3, [r7, #4]
 811ca94:	7d1b      	ldrb	r3, [r3, #20]
 811ca96:	2b03      	cmp	r3, #3
 811ca98:	d008      	beq.n	811caac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 811ca9a:	687b      	ldr	r3, [r7, #4]
 811ca9c:	8b5b      	ldrh	r3, [r3, #26]
 811ca9e:	f043 0302 	orr.w	r3, r3, #2
 811caa2:	b29a      	uxth	r2, r3
 811caa4:	687b      	ldr	r3, [r7, #4]
 811caa6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 811caa8:	2300      	movs	r3, #0
 811caaa:	e361      	b.n	811d170 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 811caac:	687b      	ldr	r3, [r7, #4]
 811caae:	8b5b      	ldrh	r3, [r3, #26]
 811cab0:	f003 0310 	and.w	r3, r3, #16
 811cab4:	2b00      	cmp	r3, #0
 811cab6:	d103      	bne.n	811cac0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 811cab8:	4b68      	ldr	r3, [pc, #416]	@ (811cc5c <tcp_process+0x2ac>)
 811caba:	681a      	ldr	r2, [r3, #0]
 811cabc:	687b      	ldr	r3, [r7, #4]
 811cabe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 811cac0:	687b      	ldr	r3, [r7, #4]
 811cac2:	2200      	movs	r2, #0
 811cac4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 811cac8:	687b      	ldr	r3, [r7, #4]
 811caca:	2200      	movs	r2, #0
 811cacc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 811cad0:	6878      	ldr	r0, [r7, #4]
 811cad2:	f001 fc2b 	bl	811e32c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 811cad6:	687b      	ldr	r3, [r7, #4]
 811cad8:	7d1b      	ldrb	r3, [r3, #20]
 811cada:	3b02      	subs	r3, #2
 811cadc:	2b07      	cmp	r3, #7
 811cade:	f200 8337 	bhi.w	811d150 <tcp_process+0x7a0>
 811cae2:	a201      	add	r2, pc, #4	@ (adr r2, 811cae8 <tcp_process+0x138>)
 811cae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811cae8:	0811cb09 	.word	0x0811cb09
 811caec:	0811cd39 	.word	0x0811cd39
 811caf0:	0811ceb1 	.word	0x0811ceb1
 811caf4:	0811cedb 	.word	0x0811cedb
 811caf8:	0811cfff 	.word	0x0811cfff
 811cafc:	0811ceb1 	.word	0x0811ceb1
 811cb00:	0811d08b 	.word	0x0811d08b
 811cb04:	0811d11b 	.word	0x0811d11b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 811cb08:	4b4f      	ldr	r3, [pc, #316]	@ (811cc48 <tcp_process+0x298>)
 811cb0a:	781b      	ldrb	r3, [r3, #0]
 811cb0c:	f003 0310 	and.w	r3, r3, #16
 811cb10:	2b00      	cmp	r3, #0
 811cb12:	f000 80e4 	beq.w	811ccde <tcp_process+0x32e>
 811cb16:	4b4c      	ldr	r3, [pc, #304]	@ (811cc48 <tcp_process+0x298>)
 811cb18:	781b      	ldrb	r3, [r3, #0]
 811cb1a:	f003 0302 	and.w	r3, r3, #2
 811cb1e:	2b00      	cmp	r3, #0
 811cb20:	f000 80dd 	beq.w	811ccde <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 811cb24:	687b      	ldr	r3, [r7, #4]
 811cb26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811cb28:	1c5a      	adds	r2, r3, #1
 811cb2a:	4b48      	ldr	r3, [pc, #288]	@ (811cc4c <tcp_process+0x29c>)
 811cb2c:	681b      	ldr	r3, [r3, #0]
 811cb2e:	429a      	cmp	r2, r3
 811cb30:	f040 80d5 	bne.w	811ccde <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 811cb34:	4b46      	ldr	r3, [pc, #280]	@ (811cc50 <tcp_process+0x2a0>)
 811cb36:	681b      	ldr	r3, [r3, #0]
 811cb38:	1c5a      	adds	r2, r3, #1
 811cb3a:	687b      	ldr	r3, [r7, #4]
 811cb3c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811cb3e:	687b      	ldr	r3, [r7, #4]
 811cb40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811cb42:	687b      	ldr	r3, [r7, #4]
 811cb44:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 811cb46:	4b41      	ldr	r3, [pc, #260]	@ (811cc4c <tcp_process+0x29c>)
 811cb48:	681a      	ldr	r2, [r3, #0]
 811cb4a:	687b      	ldr	r3, [r7, #4]
 811cb4c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 811cb4e:	4b44      	ldr	r3, [pc, #272]	@ (811cc60 <tcp_process+0x2b0>)
 811cb50:	681b      	ldr	r3, [r3, #0]
 811cb52:	89db      	ldrh	r3, [r3, #14]
 811cb54:	b29a      	uxth	r2, r3
 811cb56:	687b      	ldr	r3, [r7, #4]
 811cb58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 811cb5c:	687b      	ldr	r3, [r7, #4]
 811cb5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811cb62:	687b      	ldr	r3, [r7, #4]
 811cb64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 811cb68:	4b39      	ldr	r3, [pc, #228]	@ (811cc50 <tcp_process+0x2a0>)
 811cb6a:	681b      	ldr	r3, [r3, #0]
 811cb6c:	1e5a      	subs	r2, r3, #1
 811cb6e:	687b      	ldr	r3, [r7, #4]
 811cb70:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 811cb72:	687b      	ldr	r3, [r7, #4]
 811cb74:	2204      	movs	r2, #4
 811cb76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 811cb78:	687b      	ldr	r3, [r7, #4]
 811cb7a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811cb7c:	687b      	ldr	r3, [r7, #4]
 811cb7e:	3304      	adds	r3, #4
 811cb80:	4618      	mov	r0, r3
 811cb82:	f7f8 fb91 	bl	81152a8 <ip4_route>
 811cb86:	4601      	mov	r1, r0
 811cb88:	687b      	ldr	r3, [r7, #4]
 811cb8a:	3304      	adds	r3, #4
 811cb8c:	461a      	mov	r2, r3
 811cb8e:	4620      	mov	r0, r4
 811cb90:	f7ff f88a 	bl	811bca8 <tcp_eff_send_mss_netif>
 811cb94:	4603      	mov	r3, r0
 811cb96:	461a      	mov	r2, r3
 811cb98:	687b      	ldr	r3, [r7, #4]
 811cb9a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811cb9c:	687b      	ldr	r3, [r7, #4]
 811cb9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cba0:	009a      	lsls	r2, r3, #2
 811cba2:	687b      	ldr	r3, [r7, #4]
 811cba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cba6:	005b      	lsls	r3, r3, #1
 811cba8:	f241 111c 	movw	r1, #4380	@ 0x111c
 811cbac:	428b      	cmp	r3, r1
 811cbae:	bf38      	it	cc
 811cbb0:	460b      	movcc	r3, r1
 811cbb2:	429a      	cmp	r2, r3
 811cbb4:	d204      	bcs.n	811cbc0 <tcp_process+0x210>
 811cbb6:	687b      	ldr	r3, [r7, #4]
 811cbb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cbba:	009b      	lsls	r3, r3, #2
 811cbbc:	b29b      	uxth	r3, r3
 811cbbe:	e00d      	b.n	811cbdc <tcp_process+0x22c>
 811cbc0:	687b      	ldr	r3, [r7, #4]
 811cbc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cbc4:	005b      	lsls	r3, r3, #1
 811cbc6:	f241 121c 	movw	r2, #4380	@ 0x111c
 811cbca:	4293      	cmp	r3, r2
 811cbcc:	d904      	bls.n	811cbd8 <tcp_process+0x228>
 811cbce:	687b      	ldr	r3, [r7, #4]
 811cbd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cbd2:	005b      	lsls	r3, r3, #1
 811cbd4:	b29b      	uxth	r3, r3
 811cbd6:	e001      	b.n	811cbdc <tcp_process+0x22c>
 811cbd8:	f241 131c 	movw	r3, #4380	@ 0x111c
 811cbdc:	687a      	ldr	r2, [r7, #4]
 811cbde:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 811cbe2:	687b      	ldr	r3, [r7, #4]
 811cbe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811cbe8:	2b00      	cmp	r3, #0
 811cbea:	d106      	bne.n	811cbfa <tcp_process+0x24a>
 811cbec:	4b13      	ldr	r3, [pc, #76]	@ (811cc3c <tcp_process+0x28c>)
 811cbee:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 811cbf2:	491c      	ldr	r1, [pc, #112]	@ (811cc64 <tcp_process+0x2b4>)
 811cbf4:	4813      	ldr	r0, [pc, #76]	@ (811cc44 <tcp_process+0x294>)
 811cbf6:	f005 f8c5 	bl	8121d84 <iprintf>
        --pcb->snd_queuelen;
 811cbfa:	687b      	ldr	r3, [r7, #4]
 811cbfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811cc00:	3b01      	subs	r3, #1
 811cc02:	b29a      	uxth	r2, r3
 811cc04:	687b      	ldr	r3, [r7, #4]
 811cc06:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 811cc0a:	687b      	ldr	r3, [r7, #4]
 811cc0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811cc0e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 811cc10:	69fb      	ldr	r3, [r7, #28]
 811cc12:	2b00      	cmp	r3, #0
 811cc14:	d12a      	bne.n	811cc6c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 811cc16:	687b      	ldr	r3, [r7, #4]
 811cc18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811cc1a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 811cc1c:	69fb      	ldr	r3, [r7, #28]
 811cc1e:	2b00      	cmp	r3, #0
 811cc20:	d106      	bne.n	811cc30 <tcp_process+0x280>
 811cc22:	4b06      	ldr	r3, [pc, #24]	@ (811cc3c <tcp_process+0x28c>)
 811cc24:	f44f 725d 	mov.w	r2, #884	@ 0x374
 811cc28:	490f      	ldr	r1, [pc, #60]	@ (811cc68 <tcp_process+0x2b8>)
 811cc2a:	4806      	ldr	r0, [pc, #24]	@ (811cc44 <tcp_process+0x294>)
 811cc2c:	f005 f8aa 	bl	8121d84 <iprintf>
          pcb->unsent = rseg->next;
 811cc30:	69fb      	ldr	r3, [r7, #28]
 811cc32:	681a      	ldr	r2, [r3, #0]
 811cc34:	687b      	ldr	r3, [r7, #4]
 811cc36:	66da      	str	r2, [r3, #108]	@ 0x6c
 811cc38:	e01c      	b.n	811cc74 <tcp_process+0x2c4>
 811cc3a:	bf00      	nop
 811cc3c:	081275dc 	.word	0x081275dc
 811cc40:	0812784c 	.word	0x0812784c
 811cc44:	08127660 	.word	0x08127660
 811cc48:	240126e4 	.word	0x240126e4
 811cc4c:	240126dc 	.word	0x240126dc
 811cc50:	240126d8 	.word	0x240126d8
 811cc54:	08127868 	.word	0x08127868
 811cc58:	240126e5 	.word	0x240126e5
 811cc5c:	240126a0 	.word	0x240126a0
 811cc60:	240126c8 	.word	0x240126c8
 811cc64:	08127888 	.word	0x08127888
 811cc68:	081278a0 	.word	0x081278a0
        } else {
          pcb->unacked = rseg->next;
 811cc6c:	69fb      	ldr	r3, [r7, #28]
 811cc6e:	681a      	ldr	r2, [r3, #0]
 811cc70:	687b      	ldr	r3, [r7, #4]
 811cc72:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 811cc74:	69f8      	ldr	r0, [r7, #28]
 811cc76:	f7fe fc60 	bl	811b53a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 811cc7a:	687b      	ldr	r3, [r7, #4]
 811cc7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811cc7e:	2b00      	cmp	r3, #0
 811cc80:	d104      	bne.n	811cc8c <tcp_process+0x2dc>
          pcb->rtime = -1;
 811cc82:	687b      	ldr	r3, [r7, #4]
 811cc84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811cc88:	861a      	strh	r2, [r3, #48]	@ 0x30
 811cc8a:	e006      	b.n	811cc9a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 811cc8c:	687b      	ldr	r3, [r7, #4]
 811cc8e:	2200      	movs	r2, #0
 811cc90:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811cc92:	687b      	ldr	r3, [r7, #4]
 811cc94:	2200      	movs	r2, #0
 811cc96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 811cc9a:	687b      	ldr	r3, [r7, #4]
 811cc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811cca0:	2b00      	cmp	r3, #0
 811cca2:	d00a      	beq.n	811ccba <tcp_process+0x30a>
 811cca4:	687b      	ldr	r3, [r7, #4]
 811cca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811ccaa:	687a      	ldr	r2, [r7, #4]
 811ccac:	6910      	ldr	r0, [r2, #16]
 811ccae:	2200      	movs	r2, #0
 811ccb0:	6879      	ldr	r1, [r7, #4]
 811ccb2:	4798      	blx	r3
 811ccb4:	4603      	mov	r3, r0
 811ccb6:	76bb      	strb	r3, [r7, #26]
 811ccb8:	e001      	b.n	811ccbe <tcp_process+0x30e>
 811ccba:	2300      	movs	r3, #0
 811ccbc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 811ccbe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811ccc2:	f113 0f0d 	cmn.w	r3, #13
 811ccc6:	d102      	bne.n	811ccce <tcp_process+0x31e>
          return ERR_ABRT;
 811ccc8:	f06f 030c 	mvn.w	r3, #12
 811cccc:	e250      	b.n	811d170 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 811ccce:	687b      	ldr	r3, [r7, #4]
 811ccd0:	8b5b      	ldrh	r3, [r3, #26]
 811ccd2:	f043 0302 	orr.w	r3, r3, #2
 811ccd6:	b29a      	uxth	r2, r3
 811ccd8:	687b      	ldr	r3, [r7, #4]
 811ccda:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 811ccdc:	e23a      	b.n	811d154 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 811ccde:	4b98      	ldr	r3, [pc, #608]	@ (811cf40 <tcp_process+0x590>)
 811cce0:	781b      	ldrb	r3, [r3, #0]
 811cce2:	f003 0310 	and.w	r3, r3, #16
 811cce6:	2b00      	cmp	r3, #0
 811cce8:	f000 8234 	beq.w	811d154 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ccec:	4b95      	ldr	r3, [pc, #596]	@ (811cf44 <tcp_process+0x594>)
 811ccee:	6819      	ldr	r1, [r3, #0]
 811ccf0:	4b95      	ldr	r3, [pc, #596]	@ (811cf48 <tcp_process+0x598>)
 811ccf2:	881b      	ldrh	r3, [r3, #0]
 811ccf4:	461a      	mov	r2, r3
 811ccf6:	4b95      	ldr	r3, [pc, #596]	@ (811cf4c <tcp_process+0x59c>)
 811ccf8:	681b      	ldr	r3, [r3, #0]
 811ccfa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811ccfc:	4b94      	ldr	r3, [pc, #592]	@ (811cf50 <tcp_process+0x5a0>)
 811ccfe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811cd00:	885b      	ldrh	r3, [r3, #2]
 811cd02:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811cd04:	4a92      	ldr	r2, [pc, #584]	@ (811cf50 <tcp_process+0x5a0>)
 811cd06:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811cd08:	8812      	ldrh	r2, [r2, #0]
 811cd0a:	b292      	uxth	r2, r2
 811cd0c:	9202      	str	r2, [sp, #8]
 811cd0e:	9301      	str	r3, [sp, #4]
 811cd10:	4b90      	ldr	r3, [pc, #576]	@ (811cf54 <tcp_process+0x5a4>)
 811cd12:	9300      	str	r3, [sp, #0]
 811cd14:	4b90      	ldr	r3, [pc, #576]	@ (811cf58 <tcp_process+0x5a8>)
 811cd16:	4602      	mov	r2, r0
 811cd18:	6878      	ldr	r0, [r7, #4]
 811cd1a:	f003 f8db 	bl	811fed4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 811cd1e:	687b      	ldr	r3, [r7, #4]
 811cd20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811cd24:	2b05      	cmp	r3, #5
 811cd26:	f200 8215 	bhi.w	811d154 <tcp_process+0x7a4>
          pcb->rtime = 0;
 811cd2a:	687b      	ldr	r3, [r7, #4]
 811cd2c:	2200      	movs	r2, #0
 811cd2e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 811cd30:	6878      	ldr	r0, [r7, #4]
 811cd32:	f002 fea7 	bl	811fa84 <tcp_rexmit_rto>
      break;
 811cd36:	e20d      	b.n	811d154 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 811cd38:	4b81      	ldr	r3, [pc, #516]	@ (811cf40 <tcp_process+0x590>)
 811cd3a:	781b      	ldrb	r3, [r3, #0]
 811cd3c:	f003 0310 	and.w	r3, r3, #16
 811cd40:	2b00      	cmp	r3, #0
 811cd42:	f000 80a1 	beq.w	811ce88 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811cd46:	4b7f      	ldr	r3, [pc, #508]	@ (811cf44 <tcp_process+0x594>)
 811cd48:	681a      	ldr	r2, [r3, #0]
 811cd4a:	687b      	ldr	r3, [r7, #4]
 811cd4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811cd4e:	1ad3      	subs	r3, r2, r3
 811cd50:	3b01      	subs	r3, #1
 811cd52:	2b00      	cmp	r3, #0
 811cd54:	db7e      	blt.n	811ce54 <tcp_process+0x4a4>
 811cd56:	4b7b      	ldr	r3, [pc, #492]	@ (811cf44 <tcp_process+0x594>)
 811cd58:	681a      	ldr	r2, [r3, #0]
 811cd5a:	687b      	ldr	r3, [r7, #4]
 811cd5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811cd5e:	1ad3      	subs	r3, r2, r3
 811cd60:	2b00      	cmp	r3, #0
 811cd62:	dc77      	bgt.n	811ce54 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 811cd64:	687b      	ldr	r3, [r7, #4]
 811cd66:	2204      	movs	r2, #4
 811cd68:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 811cd6a:	687b      	ldr	r3, [r7, #4]
 811cd6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811cd6e:	2b00      	cmp	r3, #0
 811cd70:	d102      	bne.n	811cd78 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 811cd72:	23fa      	movs	r3, #250	@ 0xfa
 811cd74:	76bb      	strb	r3, [r7, #26]
 811cd76:	e01d      	b.n	811cdb4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 811cd78:	687b      	ldr	r3, [r7, #4]
 811cd7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811cd7c:	699b      	ldr	r3, [r3, #24]
 811cd7e:	2b00      	cmp	r3, #0
 811cd80:	d106      	bne.n	811cd90 <tcp_process+0x3e0>
 811cd82:	4b76      	ldr	r3, [pc, #472]	@ (811cf5c <tcp_process+0x5ac>)
 811cd84:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 811cd88:	4975      	ldr	r1, [pc, #468]	@ (811cf60 <tcp_process+0x5b0>)
 811cd8a:	4876      	ldr	r0, [pc, #472]	@ (811cf64 <tcp_process+0x5b4>)
 811cd8c:	f004 fffa 	bl	8121d84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 811cd90:	687b      	ldr	r3, [r7, #4]
 811cd92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811cd94:	699b      	ldr	r3, [r3, #24]
 811cd96:	2b00      	cmp	r3, #0
 811cd98:	d00a      	beq.n	811cdb0 <tcp_process+0x400>
 811cd9a:	687b      	ldr	r3, [r7, #4]
 811cd9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811cd9e:	699b      	ldr	r3, [r3, #24]
 811cda0:	687a      	ldr	r2, [r7, #4]
 811cda2:	6910      	ldr	r0, [r2, #16]
 811cda4:	2200      	movs	r2, #0
 811cda6:	6879      	ldr	r1, [r7, #4]
 811cda8:	4798      	blx	r3
 811cdaa:	4603      	mov	r3, r0
 811cdac:	76bb      	strb	r3, [r7, #26]
 811cdae:	e001      	b.n	811cdb4 <tcp_process+0x404>
 811cdb0:	23f0      	movs	r3, #240	@ 0xf0
 811cdb2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 811cdb4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811cdb8:	2b00      	cmp	r3, #0
 811cdba:	d00a      	beq.n	811cdd2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 811cdbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811cdc0:	f113 0f0d 	cmn.w	r3, #13
 811cdc4:	d002      	beq.n	811cdcc <tcp_process+0x41c>
              tcp_abort(pcb);
 811cdc6:	6878      	ldr	r0, [r7, #4]
 811cdc8:	f7fd fcce 	bl	811a768 <tcp_abort>
            }
            return ERR_ABRT;
 811cdcc:	f06f 030c 	mvn.w	r3, #12
 811cdd0:	e1ce      	b.n	811d170 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 811cdd2:	6878      	ldr	r0, [r7, #4]
 811cdd4:	f000 fae0 	bl	811d398 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 811cdd8:	4b63      	ldr	r3, [pc, #396]	@ (811cf68 <tcp_process+0x5b8>)
 811cdda:	881b      	ldrh	r3, [r3, #0]
 811cddc:	2b00      	cmp	r3, #0
 811cdde:	d005      	beq.n	811cdec <tcp_process+0x43c>
            recv_acked--;
 811cde0:	4b61      	ldr	r3, [pc, #388]	@ (811cf68 <tcp_process+0x5b8>)
 811cde2:	881b      	ldrh	r3, [r3, #0]
 811cde4:	3b01      	subs	r3, #1
 811cde6:	b29a      	uxth	r2, r3
 811cde8:	4b5f      	ldr	r3, [pc, #380]	@ (811cf68 <tcp_process+0x5b8>)
 811cdea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811cdec:	687b      	ldr	r3, [r7, #4]
 811cdee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cdf0:	009a      	lsls	r2, r3, #2
 811cdf2:	687b      	ldr	r3, [r7, #4]
 811cdf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811cdf6:	005b      	lsls	r3, r3, #1
 811cdf8:	f241 111c 	movw	r1, #4380	@ 0x111c
 811cdfc:	428b      	cmp	r3, r1
 811cdfe:	bf38      	it	cc
 811ce00:	460b      	movcc	r3, r1
 811ce02:	429a      	cmp	r2, r3
 811ce04:	d204      	bcs.n	811ce10 <tcp_process+0x460>
 811ce06:	687b      	ldr	r3, [r7, #4]
 811ce08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811ce0a:	009b      	lsls	r3, r3, #2
 811ce0c:	b29b      	uxth	r3, r3
 811ce0e:	e00d      	b.n	811ce2c <tcp_process+0x47c>
 811ce10:	687b      	ldr	r3, [r7, #4]
 811ce12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811ce14:	005b      	lsls	r3, r3, #1
 811ce16:	f241 121c 	movw	r2, #4380	@ 0x111c
 811ce1a:	4293      	cmp	r3, r2
 811ce1c:	d904      	bls.n	811ce28 <tcp_process+0x478>
 811ce1e:	687b      	ldr	r3, [r7, #4]
 811ce20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811ce22:	005b      	lsls	r3, r3, #1
 811ce24:	b29b      	uxth	r3, r3
 811ce26:	e001      	b.n	811ce2c <tcp_process+0x47c>
 811ce28:	f241 131c 	movw	r3, #4380	@ 0x111c
 811ce2c:	687a      	ldr	r2, [r7, #4]
 811ce2e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 811ce32:	4b4e      	ldr	r3, [pc, #312]	@ (811cf6c <tcp_process+0x5bc>)
 811ce34:	781b      	ldrb	r3, [r3, #0]
 811ce36:	f003 0320 	and.w	r3, r3, #32
 811ce3a:	2b00      	cmp	r3, #0
 811ce3c:	d037      	beq.n	811ceae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 811ce3e:	687b      	ldr	r3, [r7, #4]
 811ce40:	8b5b      	ldrh	r3, [r3, #26]
 811ce42:	f043 0302 	orr.w	r3, r3, #2
 811ce46:	b29a      	uxth	r2, r3
 811ce48:	687b      	ldr	r3, [r7, #4]
 811ce4a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 811ce4c:	687b      	ldr	r3, [r7, #4]
 811ce4e:	2207      	movs	r2, #7
 811ce50:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 811ce52:	e02c      	b.n	811ceae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ce54:	4b3b      	ldr	r3, [pc, #236]	@ (811cf44 <tcp_process+0x594>)
 811ce56:	6819      	ldr	r1, [r3, #0]
 811ce58:	4b3b      	ldr	r3, [pc, #236]	@ (811cf48 <tcp_process+0x598>)
 811ce5a:	881b      	ldrh	r3, [r3, #0]
 811ce5c:	461a      	mov	r2, r3
 811ce5e:	4b3b      	ldr	r3, [pc, #236]	@ (811cf4c <tcp_process+0x59c>)
 811ce60:	681b      	ldr	r3, [r3, #0]
 811ce62:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811ce64:	4b3a      	ldr	r3, [pc, #232]	@ (811cf50 <tcp_process+0x5a0>)
 811ce66:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ce68:	885b      	ldrh	r3, [r3, #2]
 811ce6a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811ce6c:	4a38      	ldr	r2, [pc, #224]	@ (811cf50 <tcp_process+0x5a0>)
 811ce6e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811ce70:	8812      	ldrh	r2, [r2, #0]
 811ce72:	b292      	uxth	r2, r2
 811ce74:	9202      	str	r2, [sp, #8]
 811ce76:	9301      	str	r3, [sp, #4]
 811ce78:	4b36      	ldr	r3, [pc, #216]	@ (811cf54 <tcp_process+0x5a4>)
 811ce7a:	9300      	str	r3, [sp, #0]
 811ce7c:	4b36      	ldr	r3, [pc, #216]	@ (811cf58 <tcp_process+0x5a8>)
 811ce7e:	4602      	mov	r2, r0
 811ce80:	6878      	ldr	r0, [r7, #4]
 811ce82:	f003 f827 	bl	811fed4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 811ce86:	e167      	b.n	811d158 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 811ce88:	4b2d      	ldr	r3, [pc, #180]	@ (811cf40 <tcp_process+0x590>)
 811ce8a:	781b      	ldrb	r3, [r3, #0]
 811ce8c:	f003 0302 	and.w	r3, r3, #2
 811ce90:	2b00      	cmp	r3, #0
 811ce92:	f000 8161 	beq.w	811d158 <tcp_process+0x7a8>
 811ce96:	687b      	ldr	r3, [r7, #4]
 811ce98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ce9a:	1e5a      	subs	r2, r3, #1
 811ce9c:	4b2b      	ldr	r3, [pc, #172]	@ (811cf4c <tcp_process+0x59c>)
 811ce9e:	681b      	ldr	r3, [r3, #0]
 811cea0:	429a      	cmp	r2, r3
 811cea2:	f040 8159 	bne.w	811d158 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 811cea6:	6878      	ldr	r0, [r7, #4]
 811cea8:	f002 fe0e 	bl	811fac8 <tcp_rexmit>
      break;
 811ceac:	e154      	b.n	811d158 <tcp_process+0x7a8>
 811ceae:	e153      	b.n	811d158 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 811ceb0:	6878      	ldr	r0, [r7, #4]
 811ceb2:	f000 fa71 	bl	811d398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 811ceb6:	4b2d      	ldr	r3, [pc, #180]	@ (811cf6c <tcp_process+0x5bc>)
 811ceb8:	781b      	ldrb	r3, [r3, #0]
 811ceba:	f003 0320 	and.w	r3, r3, #32
 811cebe:	2b00      	cmp	r3, #0
 811cec0:	f000 814c 	beq.w	811d15c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 811cec4:	687b      	ldr	r3, [r7, #4]
 811cec6:	8b5b      	ldrh	r3, [r3, #26]
 811cec8:	f043 0302 	orr.w	r3, r3, #2
 811cecc:	b29a      	uxth	r2, r3
 811cece:	687b      	ldr	r3, [r7, #4]
 811ced0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 811ced2:	687b      	ldr	r3, [r7, #4]
 811ced4:	2207      	movs	r2, #7
 811ced6:	751a      	strb	r2, [r3, #20]
      }
      break;
 811ced8:	e140      	b.n	811d15c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 811ceda:	6878      	ldr	r0, [r7, #4]
 811cedc:	f000 fa5c 	bl	811d398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811cee0:	4b22      	ldr	r3, [pc, #136]	@ (811cf6c <tcp_process+0x5bc>)
 811cee2:	781b      	ldrb	r3, [r3, #0]
 811cee4:	f003 0320 	and.w	r3, r3, #32
 811cee8:	2b00      	cmp	r3, #0
 811ceea:	d071      	beq.n	811cfd0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811ceec:	4b14      	ldr	r3, [pc, #80]	@ (811cf40 <tcp_process+0x590>)
 811ceee:	781b      	ldrb	r3, [r3, #0]
 811cef0:	f003 0310 	and.w	r3, r3, #16
 811cef4:	2b00      	cmp	r3, #0
 811cef6:	d060      	beq.n	811cfba <tcp_process+0x60a>
 811cef8:	687b      	ldr	r3, [r7, #4]
 811cefa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811cefc:	4b11      	ldr	r3, [pc, #68]	@ (811cf44 <tcp_process+0x594>)
 811cefe:	681b      	ldr	r3, [r3, #0]
 811cf00:	429a      	cmp	r2, r3
 811cf02:	d15a      	bne.n	811cfba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 811cf04:	687b      	ldr	r3, [r7, #4]
 811cf06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811cf08:	2b00      	cmp	r3, #0
 811cf0a:	d156      	bne.n	811cfba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 811cf0c:	687b      	ldr	r3, [r7, #4]
 811cf0e:	8b5b      	ldrh	r3, [r3, #26]
 811cf10:	f043 0302 	orr.w	r3, r3, #2
 811cf14:	b29a      	uxth	r2, r3
 811cf16:	687b      	ldr	r3, [r7, #4]
 811cf18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 811cf1a:	6878      	ldr	r0, [r7, #4]
 811cf1c:	f7fe fdba 	bl	811ba94 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 811cf20:	4b13      	ldr	r3, [pc, #76]	@ (811cf70 <tcp_process+0x5c0>)
 811cf22:	681b      	ldr	r3, [r3, #0]
 811cf24:	687a      	ldr	r2, [r7, #4]
 811cf26:	429a      	cmp	r2, r3
 811cf28:	d105      	bne.n	811cf36 <tcp_process+0x586>
 811cf2a:	4b11      	ldr	r3, [pc, #68]	@ (811cf70 <tcp_process+0x5c0>)
 811cf2c:	681b      	ldr	r3, [r3, #0]
 811cf2e:	68db      	ldr	r3, [r3, #12]
 811cf30:	4a0f      	ldr	r2, [pc, #60]	@ (811cf70 <tcp_process+0x5c0>)
 811cf32:	6013      	str	r3, [r2, #0]
 811cf34:	e02e      	b.n	811cf94 <tcp_process+0x5e4>
 811cf36:	4b0e      	ldr	r3, [pc, #56]	@ (811cf70 <tcp_process+0x5c0>)
 811cf38:	681b      	ldr	r3, [r3, #0]
 811cf3a:	617b      	str	r3, [r7, #20]
 811cf3c:	e027      	b.n	811cf8e <tcp_process+0x5de>
 811cf3e:	bf00      	nop
 811cf40:	240126e4 	.word	0x240126e4
 811cf44:	240126dc 	.word	0x240126dc
 811cf48:	240126e2 	.word	0x240126e2
 811cf4c:	240126d8 	.word	0x240126d8
 811cf50:	240126c8 	.word	0x240126c8
 811cf54:	2400a174 	.word	0x2400a174
 811cf58:	2400a178 	.word	0x2400a178
 811cf5c:	081275dc 	.word	0x081275dc
 811cf60:	081278b4 	.word	0x081278b4
 811cf64:	08127660 	.word	0x08127660
 811cf68:	240126e0 	.word	0x240126e0
 811cf6c:	240126e5 	.word	0x240126e5
 811cf70:	240126ac 	.word	0x240126ac
 811cf74:	697b      	ldr	r3, [r7, #20]
 811cf76:	68db      	ldr	r3, [r3, #12]
 811cf78:	687a      	ldr	r2, [r7, #4]
 811cf7a:	429a      	cmp	r2, r3
 811cf7c:	d104      	bne.n	811cf88 <tcp_process+0x5d8>
 811cf7e:	687b      	ldr	r3, [r7, #4]
 811cf80:	68da      	ldr	r2, [r3, #12]
 811cf82:	697b      	ldr	r3, [r7, #20]
 811cf84:	60da      	str	r2, [r3, #12]
 811cf86:	e005      	b.n	811cf94 <tcp_process+0x5e4>
 811cf88:	697b      	ldr	r3, [r7, #20]
 811cf8a:	68db      	ldr	r3, [r3, #12]
 811cf8c:	617b      	str	r3, [r7, #20]
 811cf8e:	697b      	ldr	r3, [r7, #20]
 811cf90:	2b00      	cmp	r3, #0
 811cf92:	d1ef      	bne.n	811cf74 <tcp_process+0x5c4>
 811cf94:	687b      	ldr	r3, [r7, #4]
 811cf96:	2200      	movs	r2, #0
 811cf98:	60da      	str	r2, [r3, #12]
 811cf9a:	4b77      	ldr	r3, [pc, #476]	@ (811d178 <tcp_process+0x7c8>)
 811cf9c:	2201      	movs	r2, #1
 811cf9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 811cfa0:	687b      	ldr	r3, [r7, #4]
 811cfa2:	220a      	movs	r2, #10
 811cfa4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 811cfa6:	4b75      	ldr	r3, [pc, #468]	@ (811d17c <tcp_process+0x7cc>)
 811cfa8:	681a      	ldr	r2, [r3, #0]
 811cfaa:	687b      	ldr	r3, [r7, #4]
 811cfac:	60da      	str	r2, [r3, #12]
 811cfae:	4a73      	ldr	r2, [pc, #460]	@ (811d17c <tcp_process+0x7cc>)
 811cfb0:	687b      	ldr	r3, [r7, #4]
 811cfb2:	6013      	str	r3, [r2, #0]
 811cfb4:	f003 fb00 	bl	81205b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 811cfb8:	e0d2      	b.n	811d160 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 811cfba:	687b      	ldr	r3, [r7, #4]
 811cfbc:	8b5b      	ldrh	r3, [r3, #26]
 811cfbe:	f043 0302 	orr.w	r3, r3, #2
 811cfc2:	b29a      	uxth	r2, r3
 811cfc4:	687b      	ldr	r3, [r7, #4]
 811cfc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 811cfc8:	687b      	ldr	r3, [r7, #4]
 811cfca:	2208      	movs	r2, #8
 811cfcc:	751a      	strb	r2, [r3, #20]
      break;
 811cfce:	e0c7      	b.n	811d160 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811cfd0:	4b6b      	ldr	r3, [pc, #428]	@ (811d180 <tcp_process+0x7d0>)
 811cfd2:	781b      	ldrb	r3, [r3, #0]
 811cfd4:	f003 0310 	and.w	r3, r3, #16
 811cfd8:	2b00      	cmp	r3, #0
 811cfda:	f000 80c1 	beq.w	811d160 <tcp_process+0x7b0>
 811cfde:	687b      	ldr	r3, [r7, #4]
 811cfe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811cfe2:	4b68      	ldr	r3, [pc, #416]	@ (811d184 <tcp_process+0x7d4>)
 811cfe4:	681b      	ldr	r3, [r3, #0]
 811cfe6:	429a      	cmp	r2, r3
 811cfe8:	f040 80ba 	bne.w	811d160 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 811cfec:	687b      	ldr	r3, [r7, #4]
 811cfee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811cff0:	2b00      	cmp	r3, #0
 811cff2:	f040 80b5 	bne.w	811d160 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 811cff6:	687b      	ldr	r3, [r7, #4]
 811cff8:	2206      	movs	r2, #6
 811cffa:	751a      	strb	r2, [r3, #20]
      break;
 811cffc:	e0b0      	b.n	811d160 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 811cffe:	6878      	ldr	r0, [r7, #4]
 811d000:	f000 f9ca 	bl	811d398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811d004:	4b60      	ldr	r3, [pc, #384]	@ (811d188 <tcp_process+0x7d8>)
 811d006:	781b      	ldrb	r3, [r3, #0]
 811d008:	f003 0320 	and.w	r3, r3, #32
 811d00c:	2b00      	cmp	r3, #0
 811d00e:	f000 80a9 	beq.w	811d164 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 811d012:	687b      	ldr	r3, [r7, #4]
 811d014:	8b5b      	ldrh	r3, [r3, #26]
 811d016:	f043 0302 	orr.w	r3, r3, #2
 811d01a:	b29a      	uxth	r2, r3
 811d01c:	687b      	ldr	r3, [r7, #4]
 811d01e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 811d020:	6878      	ldr	r0, [r7, #4]
 811d022:	f7fe fd37 	bl	811ba94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811d026:	4b59      	ldr	r3, [pc, #356]	@ (811d18c <tcp_process+0x7dc>)
 811d028:	681b      	ldr	r3, [r3, #0]
 811d02a:	687a      	ldr	r2, [r7, #4]
 811d02c:	429a      	cmp	r2, r3
 811d02e:	d105      	bne.n	811d03c <tcp_process+0x68c>
 811d030:	4b56      	ldr	r3, [pc, #344]	@ (811d18c <tcp_process+0x7dc>)
 811d032:	681b      	ldr	r3, [r3, #0]
 811d034:	68db      	ldr	r3, [r3, #12]
 811d036:	4a55      	ldr	r2, [pc, #340]	@ (811d18c <tcp_process+0x7dc>)
 811d038:	6013      	str	r3, [r2, #0]
 811d03a:	e013      	b.n	811d064 <tcp_process+0x6b4>
 811d03c:	4b53      	ldr	r3, [pc, #332]	@ (811d18c <tcp_process+0x7dc>)
 811d03e:	681b      	ldr	r3, [r3, #0]
 811d040:	613b      	str	r3, [r7, #16]
 811d042:	e00c      	b.n	811d05e <tcp_process+0x6ae>
 811d044:	693b      	ldr	r3, [r7, #16]
 811d046:	68db      	ldr	r3, [r3, #12]
 811d048:	687a      	ldr	r2, [r7, #4]
 811d04a:	429a      	cmp	r2, r3
 811d04c:	d104      	bne.n	811d058 <tcp_process+0x6a8>
 811d04e:	687b      	ldr	r3, [r7, #4]
 811d050:	68da      	ldr	r2, [r3, #12]
 811d052:	693b      	ldr	r3, [r7, #16]
 811d054:	60da      	str	r2, [r3, #12]
 811d056:	e005      	b.n	811d064 <tcp_process+0x6b4>
 811d058:	693b      	ldr	r3, [r7, #16]
 811d05a:	68db      	ldr	r3, [r3, #12]
 811d05c:	613b      	str	r3, [r7, #16]
 811d05e:	693b      	ldr	r3, [r7, #16]
 811d060:	2b00      	cmp	r3, #0
 811d062:	d1ef      	bne.n	811d044 <tcp_process+0x694>
 811d064:	687b      	ldr	r3, [r7, #4]
 811d066:	2200      	movs	r2, #0
 811d068:	60da      	str	r2, [r3, #12]
 811d06a:	4b43      	ldr	r3, [pc, #268]	@ (811d178 <tcp_process+0x7c8>)
 811d06c:	2201      	movs	r2, #1
 811d06e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811d070:	687b      	ldr	r3, [r7, #4]
 811d072:	220a      	movs	r2, #10
 811d074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811d076:	4b41      	ldr	r3, [pc, #260]	@ (811d17c <tcp_process+0x7cc>)
 811d078:	681a      	ldr	r2, [r3, #0]
 811d07a:	687b      	ldr	r3, [r7, #4]
 811d07c:	60da      	str	r2, [r3, #12]
 811d07e:	4a3f      	ldr	r2, [pc, #252]	@ (811d17c <tcp_process+0x7cc>)
 811d080:	687b      	ldr	r3, [r7, #4]
 811d082:	6013      	str	r3, [r2, #0]
 811d084:	f003 fa98 	bl	81205b8 <tcp_timer_needed>
      }
      break;
 811d088:	e06c      	b.n	811d164 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 811d08a:	6878      	ldr	r0, [r7, #4]
 811d08c:	f000 f984 	bl	811d398 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811d090:	4b3b      	ldr	r3, [pc, #236]	@ (811d180 <tcp_process+0x7d0>)
 811d092:	781b      	ldrb	r3, [r3, #0]
 811d094:	f003 0310 	and.w	r3, r3, #16
 811d098:	2b00      	cmp	r3, #0
 811d09a:	d065      	beq.n	811d168 <tcp_process+0x7b8>
 811d09c:	687b      	ldr	r3, [r7, #4]
 811d09e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811d0a0:	4b38      	ldr	r3, [pc, #224]	@ (811d184 <tcp_process+0x7d4>)
 811d0a2:	681b      	ldr	r3, [r3, #0]
 811d0a4:	429a      	cmp	r2, r3
 811d0a6:	d15f      	bne.n	811d168 <tcp_process+0x7b8>
 811d0a8:	687b      	ldr	r3, [r7, #4]
 811d0aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d0ac:	2b00      	cmp	r3, #0
 811d0ae:	d15b      	bne.n	811d168 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 811d0b0:	6878      	ldr	r0, [r7, #4]
 811d0b2:	f7fe fcef 	bl	811ba94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811d0b6:	4b35      	ldr	r3, [pc, #212]	@ (811d18c <tcp_process+0x7dc>)
 811d0b8:	681b      	ldr	r3, [r3, #0]
 811d0ba:	687a      	ldr	r2, [r7, #4]
 811d0bc:	429a      	cmp	r2, r3
 811d0be:	d105      	bne.n	811d0cc <tcp_process+0x71c>
 811d0c0:	4b32      	ldr	r3, [pc, #200]	@ (811d18c <tcp_process+0x7dc>)
 811d0c2:	681b      	ldr	r3, [r3, #0]
 811d0c4:	68db      	ldr	r3, [r3, #12]
 811d0c6:	4a31      	ldr	r2, [pc, #196]	@ (811d18c <tcp_process+0x7dc>)
 811d0c8:	6013      	str	r3, [r2, #0]
 811d0ca:	e013      	b.n	811d0f4 <tcp_process+0x744>
 811d0cc:	4b2f      	ldr	r3, [pc, #188]	@ (811d18c <tcp_process+0x7dc>)
 811d0ce:	681b      	ldr	r3, [r3, #0]
 811d0d0:	60fb      	str	r3, [r7, #12]
 811d0d2:	e00c      	b.n	811d0ee <tcp_process+0x73e>
 811d0d4:	68fb      	ldr	r3, [r7, #12]
 811d0d6:	68db      	ldr	r3, [r3, #12]
 811d0d8:	687a      	ldr	r2, [r7, #4]
 811d0da:	429a      	cmp	r2, r3
 811d0dc:	d104      	bne.n	811d0e8 <tcp_process+0x738>
 811d0de:	687b      	ldr	r3, [r7, #4]
 811d0e0:	68da      	ldr	r2, [r3, #12]
 811d0e2:	68fb      	ldr	r3, [r7, #12]
 811d0e4:	60da      	str	r2, [r3, #12]
 811d0e6:	e005      	b.n	811d0f4 <tcp_process+0x744>
 811d0e8:	68fb      	ldr	r3, [r7, #12]
 811d0ea:	68db      	ldr	r3, [r3, #12]
 811d0ec:	60fb      	str	r3, [r7, #12]
 811d0ee:	68fb      	ldr	r3, [r7, #12]
 811d0f0:	2b00      	cmp	r3, #0
 811d0f2:	d1ef      	bne.n	811d0d4 <tcp_process+0x724>
 811d0f4:	687b      	ldr	r3, [r7, #4]
 811d0f6:	2200      	movs	r2, #0
 811d0f8:	60da      	str	r2, [r3, #12]
 811d0fa:	4b1f      	ldr	r3, [pc, #124]	@ (811d178 <tcp_process+0x7c8>)
 811d0fc:	2201      	movs	r2, #1
 811d0fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811d100:	687b      	ldr	r3, [r7, #4]
 811d102:	220a      	movs	r2, #10
 811d104:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811d106:	4b1d      	ldr	r3, [pc, #116]	@ (811d17c <tcp_process+0x7cc>)
 811d108:	681a      	ldr	r2, [r3, #0]
 811d10a:	687b      	ldr	r3, [r7, #4]
 811d10c:	60da      	str	r2, [r3, #12]
 811d10e:	4a1b      	ldr	r2, [pc, #108]	@ (811d17c <tcp_process+0x7cc>)
 811d110:	687b      	ldr	r3, [r7, #4]
 811d112:	6013      	str	r3, [r2, #0]
 811d114:	f003 fa50 	bl	81205b8 <tcp_timer_needed>
      }
      break;
 811d118:	e026      	b.n	811d168 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 811d11a:	6878      	ldr	r0, [r7, #4]
 811d11c:	f000 f93c 	bl	811d398 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811d120:	4b17      	ldr	r3, [pc, #92]	@ (811d180 <tcp_process+0x7d0>)
 811d122:	781b      	ldrb	r3, [r3, #0]
 811d124:	f003 0310 	and.w	r3, r3, #16
 811d128:	2b00      	cmp	r3, #0
 811d12a:	d01f      	beq.n	811d16c <tcp_process+0x7bc>
 811d12c:	687b      	ldr	r3, [r7, #4]
 811d12e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811d130:	4b14      	ldr	r3, [pc, #80]	@ (811d184 <tcp_process+0x7d4>)
 811d132:	681b      	ldr	r3, [r3, #0]
 811d134:	429a      	cmp	r2, r3
 811d136:	d119      	bne.n	811d16c <tcp_process+0x7bc>
 811d138:	687b      	ldr	r3, [r7, #4]
 811d13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d13c:	2b00      	cmp	r3, #0
 811d13e:	d115      	bne.n	811d16c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 811d140:	4b11      	ldr	r3, [pc, #68]	@ (811d188 <tcp_process+0x7d8>)
 811d142:	781b      	ldrb	r3, [r3, #0]
 811d144:	f043 0310 	orr.w	r3, r3, #16
 811d148:	b2da      	uxtb	r2, r3
 811d14a:	4b0f      	ldr	r3, [pc, #60]	@ (811d188 <tcp_process+0x7d8>)
 811d14c:	701a      	strb	r2, [r3, #0]
      }
      break;
 811d14e:	e00d      	b.n	811d16c <tcp_process+0x7bc>
    default:
      break;
 811d150:	bf00      	nop
 811d152:	e00c      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d154:	bf00      	nop
 811d156:	e00a      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d158:	bf00      	nop
 811d15a:	e008      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d15c:	bf00      	nop
 811d15e:	e006      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d160:	bf00      	nop
 811d162:	e004      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d164:	bf00      	nop
 811d166:	e002      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d168:	bf00      	nop
 811d16a:	e000      	b.n	811d16e <tcp_process+0x7be>
      break;
 811d16c:	bf00      	nop
  }
  return ERR_OK;
 811d16e:	2300      	movs	r3, #0
}
 811d170:	4618      	mov	r0, r3
 811d172:	3724      	adds	r7, #36	@ 0x24
 811d174:	46bd      	mov	sp, r7
 811d176:	bd90      	pop	{r4, r7, pc}
 811d178:	240126b4 	.word	0x240126b4
 811d17c:	240126b0 	.word	0x240126b0
 811d180:	240126e4 	.word	0x240126e4
 811d184:	240126dc 	.word	0x240126dc
 811d188:	240126e5 	.word	0x240126e5
 811d18c:	240126ac 	.word	0x240126ac

0811d190 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 811d190:	b590      	push	{r4, r7, lr}
 811d192:	b085      	sub	sp, #20
 811d194:	af00      	add	r7, sp, #0
 811d196:	6078      	str	r0, [r7, #4]
 811d198:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 811d19a:	687b      	ldr	r3, [r7, #4]
 811d19c:	2b00      	cmp	r3, #0
 811d19e:	d106      	bne.n	811d1ae <tcp_oos_insert_segment+0x1e>
 811d1a0:	4b3b      	ldr	r3, [pc, #236]	@ (811d290 <tcp_oos_insert_segment+0x100>)
 811d1a2:	f240 421f 	movw	r2, #1055	@ 0x41f
 811d1a6:	493b      	ldr	r1, [pc, #236]	@ (811d294 <tcp_oos_insert_segment+0x104>)
 811d1a8:	483b      	ldr	r0, [pc, #236]	@ (811d298 <tcp_oos_insert_segment+0x108>)
 811d1aa:	f004 fdeb 	bl	8121d84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811d1ae:	687b      	ldr	r3, [r7, #4]
 811d1b0:	68db      	ldr	r3, [r3, #12]
 811d1b2:	899b      	ldrh	r3, [r3, #12]
 811d1b4:	b29b      	uxth	r3, r3
 811d1b6:	4618      	mov	r0, r3
 811d1b8:	f7f6 fd98 	bl	8113cec <lwip_htons>
 811d1bc:	4603      	mov	r3, r0
 811d1be:	b2db      	uxtb	r3, r3
 811d1c0:	f003 0301 	and.w	r3, r3, #1
 811d1c4:	2b00      	cmp	r3, #0
 811d1c6:	d028      	beq.n	811d21a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 811d1c8:	6838      	ldr	r0, [r7, #0]
 811d1ca:	f7fe f9a1 	bl	811b510 <tcp_segs_free>
    next = NULL;
 811d1ce:	2300      	movs	r3, #0
 811d1d0:	603b      	str	r3, [r7, #0]
 811d1d2:	e056      	b.n	811d282 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811d1d4:	683b      	ldr	r3, [r7, #0]
 811d1d6:	68db      	ldr	r3, [r3, #12]
 811d1d8:	899b      	ldrh	r3, [r3, #12]
 811d1da:	b29b      	uxth	r3, r3
 811d1dc:	4618      	mov	r0, r3
 811d1de:	f7f6 fd85 	bl	8113cec <lwip_htons>
 811d1e2:	4603      	mov	r3, r0
 811d1e4:	b2db      	uxtb	r3, r3
 811d1e6:	f003 0301 	and.w	r3, r3, #1
 811d1ea:	2b00      	cmp	r3, #0
 811d1ec:	d00d      	beq.n	811d20a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 811d1ee:	687b      	ldr	r3, [r7, #4]
 811d1f0:	68db      	ldr	r3, [r3, #12]
 811d1f2:	899b      	ldrh	r3, [r3, #12]
 811d1f4:	b29c      	uxth	r4, r3
 811d1f6:	2001      	movs	r0, #1
 811d1f8:	f7f6 fd78 	bl	8113cec <lwip_htons>
 811d1fc:	4603      	mov	r3, r0
 811d1fe:	461a      	mov	r2, r3
 811d200:	687b      	ldr	r3, [r7, #4]
 811d202:	68db      	ldr	r3, [r3, #12]
 811d204:	4322      	orrs	r2, r4
 811d206:	b292      	uxth	r2, r2
 811d208:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 811d20a:	683b      	ldr	r3, [r7, #0]
 811d20c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 811d20e:	683b      	ldr	r3, [r7, #0]
 811d210:	681b      	ldr	r3, [r3, #0]
 811d212:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 811d214:	68f8      	ldr	r0, [r7, #12]
 811d216:	f7fe f990 	bl	811b53a <tcp_seg_free>
    while (next &&
 811d21a:	683b      	ldr	r3, [r7, #0]
 811d21c:	2b00      	cmp	r3, #0
 811d21e:	d00e      	beq.n	811d23e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 811d220:	687b      	ldr	r3, [r7, #4]
 811d222:	891b      	ldrh	r3, [r3, #8]
 811d224:	461a      	mov	r2, r3
 811d226:	4b1d      	ldr	r3, [pc, #116]	@ (811d29c <tcp_oos_insert_segment+0x10c>)
 811d228:	681b      	ldr	r3, [r3, #0]
 811d22a:	441a      	add	r2, r3
 811d22c:	683b      	ldr	r3, [r7, #0]
 811d22e:	68db      	ldr	r3, [r3, #12]
 811d230:	685b      	ldr	r3, [r3, #4]
 811d232:	6839      	ldr	r1, [r7, #0]
 811d234:	8909      	ldrh	r1, [r1, #8]
 811d236:	440b      	add	r3, r1
 811d238:	1ad3      	subs	r3, r2, r3
    while (next &&
 811d23a:	2b00      	cmp	r3, #0
 811d23c:	daca      	bge.n	811d1d4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 811d23e:	683b      	ldr	r3, [r7, #0]
 811d240:	2b00      	cmp	r3, #0
 811d242:	d01e      	beq.n	811d282 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 811d244:	687b      	ldr	r3, [r7, #4]
 811d246:	891b      	ldrh	r3, [r3, #8]
 811d248:	461a      	mov	r2, r3
 811d24a:	4b14      	ldr	r3, [pc, #80]	@ (811d29c <tcp_oos_insert_segment+0x10c>)
 811d24c:	681b      	ldr	r3, [r3, #0]
 811d24e:	441a      	add	r2, r3
 811d250:	683b      	ldr	r3, [r7, #0]
 811d252:	68db      	ldr	r3, [r3, #12]
 811d254:	685b      	ldr	r3, [r3, #4]
 811d256:	1ad3      	subs	r3, r2, r3
    if (next &&
 811d258:	2b00      	cmp	r3, #0
 811d25a:	dd12      	ble.n	811d282 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 811d25c:	683b      	ldr	r3, [r7, #0]
 811d25e:	68db      	ldr	r3, [r3, #12]
 811d260:	685b      	ldr	r3, [r3, #4]
 811d262:	b29a      	uxth	r2, r3
 811d264:	4b0d      	ldr	r3, [pc, #52]	@ (811d29c <tcp_oos_insert_segment+0x10c>)
 811d266:	681b      	ldr	r3, [r3, #0]
 811d268:	b29b      	uxth	r3, r3
 811d26a:	1ad3      	subs	r3, r2, r3
 811d26c:	b29a      	uxth	r2, r3
 811d26e:	687b      	ldr	r3, [r7, #4]
 811d270:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 811d272:	687b      	ldr	r3, [r7, #4]
 811d274:	685a      	ldr	r2, [r3, #4]
 811d276:	687b      	ldr	r3, [r7, #4]
 811d278:	891b      	ldrh	r3, [r3, #8]
 811d27a:	4619      	mov	r1, r3
 811d27c:	4610      	mov	r0, r2
 811d27e:	f7fc f9f1 	bl	8119664 <pbuf_realloc>
    }
  }
  cseg->next = next;
 811d282:	687b      	ldr	r3, [r7, #4]
 811d284:	683a      	ldr	r2, [r7, #0]
 811d286:	601a      	str	r2, [r3, #0]
}
 811d288:	bf00      	nop
 811d28a:	3714      	adds	r7, #20
 811d28c:	46bd      	mov	sp, r7
 811d28e:	bd90      	pop	{r4, r7, pc}
 811d290:	081275dc 	.word	0x081275dc
 811d294:	081278d4 	.word	0x081278d4
 811d298:	08127660 	.word	0x08127660
 811d29c:	240126d8 	.word	0x240126d8

0811d2a0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 811d2a0:	b5b0      	push	{r4, r5, r7, lr}
 811d2a2:	b086      	sub	sp, #24
 811d2a4:	af00      	add	r7, sp, #0
 811d2a6:	60f8      	str	r0, [r7, #12]
 811d2a8:	60b9      	str	r1, [r7, #8]
 811d2aa:	607a      	str	r2, [r7, #4]
 811d2ac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 811d2ae:	e03e      	b.n	811d32e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 811d2b0:	68bb      	ldr	r3, [r7, #8]
 811d2b2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 811d2b4:	68bb      	ldr	r3, [r7, #8]
 811d2b6:	681b      	ldr	r3, [r3, #0]
 811d2b8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 811d2ba:	697b      	ldr	r3, [r7, #20]
 811d2bc:	685b      	ldr	r3, [r3, #4]
 811d2be:	4618      	mov	r0, r3
 811d2c0:	f7fc fbe2 	bl	8119a88 <pbuf_clen>
 811d2c4:	4603      	mov	r3, r0
 811d2c6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 811d2c8:	68fb      	ldr	r3, [r7, #12]
 811d2ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811d2ce:	8a7a      	ldrh	r2, [r7, #18]
 811d2d0:	429a      	cmp	r2, r3
 811d2d2:	d906      	bls.n	811d2e2 <tcp_free_acked_segments+0x42>
 811d2d4:	4b2a      	ldr	r3, [pc, #168]	@ (811d380 <tcp_free_acked_segments+0xe0>)
 811d2d6:	f240 4257 	movw	r2, #1111	@ 0x457
 811d2da:	492a      	ldr	r1, [pc, #168]	@ (811d384 <tcp_free_acked_segments+0xe4>)
 811d2dc:	482a      	ldr	r0, [pc, #168]	@ (811d388 <tcp_free_acked_segments+0xe8>)
 811d2de:	f004 fd51 	bl	8121d84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 811d2e2:	68fb      	ldr	r3, [r7, #12]
 811d2e4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 811d2e8:	8a7b      	ldrh	r3, [r7, #18]
 811d2ea:	1ad3      	subs	r3, r2, r3
 811d2ec:	b29a      	uxth	r2, r3
 811d2ee:	68fb      	ldr	r3, [r7, #12]
 811d2f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 811d2f4:	697b      	ldr	r3, [r7, #20]
 811d2f6:	891a      	ldrh	r2, [r3, #8]
 811d2f8:	4b24      	ldr	r3, [pc, #144]	@ (811d38c <tcp_free_acked_segments+0xec>)
 811d2fa:	881b      	ldrh	r3, [r3, #0]
 811d2fc:	4413      	add	r3, r2
 811d2fe:	b29a      	uxth	r2, r3
 811d300:	4b22      	ldr	r3, [pc, #136]	@ (811d38c <tcp_free_acked_segments+0xec>)
 811d302:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 811d304:	6978      	ldr	r0, [r7, #20]
 811d306:	f7fe f918 	bl	811b53a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 811d30a:	68fb      	ldr	r3, [r7, #12]
 811d30c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811d310:	2b00      	cmp	r3, #0
 811d312:	d00c      	beq.n	811d32e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 811d314:	68bb      	ldr	r3, [r7, #8]
 811d316:	2b00      	cmp	r3, #0
 811d318:	d109      	bne.n	811d32e <tcp_free_acked_segments+0x8e>
 811d31a:	683b      	ldr	r3, [r7, #0]
 811d31c:	2b00      	cmp	r3, #0
 811d31e:	d106      	bne.n	811d32e <tcp_free_acked_segments+0x8e>
 811d320:	4b17      	ldr	r3, [pc, #92]	@ (811d380 <tcp_free_acked_segments+0xe0>)
 811d322:	f240 4261 	movw	r2, #1121	@ 0x461
 811d326:	491a      	ldr	r1, [pc, #104]	@ (811d390 <tcp_free_acked_segments+0xf0>)
 811d328:	4817      	ldr	r0, [pc, #92]	@ (811d388 <tcp_free_acked_segments+0xe8>)
 811d32a:	f004 fd2b 	bl	8121d84 <iprintf>
  while (seg_list != NULL &&
 811d32e:	68bb      	ldr	r3, [r7, #8]
 811d330:	2b00      	cmp	r3, #0
 811d332:	d020      	beq.n	811d376 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 811d334:	68bb      	ldr	r3, [r7, #8]
 811d336:	68db      	ldr	r3, [r3, #12]
 811d338:	685b      	ldr	r3, [r3, #4]
 811d33a:	4618      	mov	r0, r3
 811d33c:	f7f6 fceb 	bl	8113d16 <lwip_htonl>
 811d340:	4604      	mov	r4, r0
 811d342:	68bb      	ldr	r3, [r7, #8]
 811d344:	891b      	ldrh	r3, [r3, #8]
 811d346:	461d      	mov	r5, r3
 811d348:	68bb      	ldr	r3, [r7, #8]
 811d34a:	68db      	ldr	r3, [r3, #12]
 811d34c:	899b      	ldrh	r3, [r3, #12]
 811d34e:	b29b      	uxth	r3, r3
 811d350:	4618      	mov	r0, r3
 811d352:	f7f6 fccb 	bl	8113cec <lwip_htons>
 811d356:	4603      	mov	r3, r0
 811d358:	b2db      	uxtb	r3, r3
 811d35a:	f003 0303 	and.w	r3, r3, #3
 811d35e:	2b00      	cmp	r3, #0
 811d360:	d001      	beq.n	811d366 <tcp_free_acked_segments+0xc6>
 811d362:	2301      	movs	r3, #1
 811d364:	e000      	b.n	811d368 <tcp_free_acked_segments+0xc8>
 811d366:	2300      	movs	r3, #0
 811d368:	442b      	add	r3, r5
 811d36a:	18e2      	adds	r2, r4, r3
 811d36c:	4b09      	ldr	r3, [pc, #36]	@ (811d394 <tcp_free_acked_segments+0xf4>)
 811d36e:	681b      	ldr	r3, [r3, #0]
 811d370:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811d372:	2b00      	cmp	r3, #0
 811d374:	dd9c      	ble.n	811d2b0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 811d376:	68bb      	ldr	r3, [r7, #8]
}
 811d378:	4618      	mov	r0, r3
 811d37a:	3718      	adds	r7, #24
 811d37c:	46bd      	mov	sp, r7
 811d37e:	bdb0      	pop	{r4, r5, r7, pc}
 811d380:	081275dc 	.word	0x081275dc
 811d384:	081278fc 	.word	0x081278fc
 811d388:	08127660 	.word	0x08127660
 811d38c:	240126e0 	.word	0x240126e0
 811d390:	08127924 	.word	0x08127924
 811d394:	240126dc 	.word	0x240126dc

0811d398 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 811d398:	b5b0      	push	{r4, r5, r7, lr}
 811d39a:	b094      	sub	sp, #80	@ 0x50
 811d39c:	af00      	add	r7, sp, #0
 811d39e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 811d3a0:	2300      	movs	r3, #0
 811d3a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 811d3a4:	687b      	ldr	r3, [r7, #4]
 811d3a6:	2b00      	cmp	r3, #0
 811d3a8:	d106      	bne.n	811d3b8 <tcp_receive+0x20>
 811d3aa:	4b91      	ldr	r3, [pc, #580]	@ (811d5f0 <tcp_receive+0x258>)
 811d3ac:	f240 427b 	movw	r2, #1147	@ 0x47b
 811d3b0:	4990      	ldr	r1, [pc, #576]	@ (811d5f4 <tcp_receive+0x25c>)
 811d3b2:	4891      	ldr	r0, [pc, #580]	@ (811d5f8 <tcp_receive+0x260>)
 811d3b4:	f004 fce6 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 811d3b8:	687b      	ldr	r3, [r7, #4]
 811d3ba:	7d1b      	ldrb	r3, [r3, #20]
 811d3bc:	2b03      	cmp	r3, #3
 811d3be:	d806      	bhi.n	811d3ce <tcp_receive+0x36>
 811d3c0:	4b8b      	ldr	r3, [pc, #556]	@ (811d5f0 <tcp_receive+0x258>)
 811d3c2:	f240 427c 	movw	r2, #1148	@ 0x47c
 811d3c6:	498d      	ldr	r1, [pc, #564]	@ (811d5fc <tcp_receive+0x264>)
 811d3c8:	488b      	ldr	r0, [pc, #556]	@ (811d5f8 <tcp_receive+0x260>)
 811d3ca:	f004 fcdb 	bl	8121d84 <iprintf>

  if (flags & TCP_ACK) {
 811d3ce:	4b8c      	ldr	r3, [pc, #560]	@ (811d600 <tcp_receive+0x268>)
 811d3d0:	781b      	ldrb	r3, [r3, #0]
 811d3d2:	f003 0310 	and.w	r3, r3, #16
 811d3d6:	2b00      	cmp	r3, #0
 811d3d8:	f000 8264 	beq.w	811d8a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 811d3dc:	687b      	ldr	r3, [r7, #4]
 811d3de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811d3e2:	461a      	mov	r2, r3
 811d3e4:	687b      	ldr	r3, [r7, #4]
 811d3e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811d3e8:	4413      	add	r3, r2
 811d3ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811d3ec:	687b      	ldr	r3, [r7, #4]
 811d3ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811d3f0:	4b84      	ldr	r3, [pc, #528]	@ (811d604 <tcp_receive+0x26c>)
 811d3f2:	681b      	ldr	r3, [r3, #0]
 811d3f4:	1ad3      	subs	r3, r2, r3
 811d3f6:	2b00      	cmp	r3, #0
 811d3f8:	db1b      	blt.n	811d432 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811d3fa:	687b      	ldr	r3, [r7, #4]
 811d3fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811d3fe:	4b81      	ldr	r3, [pc, #516]	@ (811d604 <tcp_receive+0x26c>)
 811d400:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811d402:	429a      	cmp	r2, r3
 811d404:	d106      	bne.n	811d414 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811d406:	687b      	ldr	r3, [r7, #4]
 811d408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811d40a:	4b7f      	ldr	r3, [pc, #508]	@ (811d608 <tcp_receive+0x270>)
 811d40c:	681b      	ldr	r3, [r3, #0]
 811d40e:	1ad3      	subs	r3, r2, r3
 811d410:	2b00      	cmp	r3, #0
 811d412:	db0e      	blt.n	811d432 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811d414:	687b      	ldr	r3, [r7, #4]
 811d416:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811d418:	4b7b      	ldr	r3, [pc, #492]	@ (811d608 <tcp_receive+0x270>)
 811d41a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811d41c:	429a      	cmp	r2, r3
 811d41e:	d125      	bne.n	811d46c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811d420:	4b7a      	ldr	r3, [pc, #488]	@ (811d60c <tcp_receive+0x274>)
 811d422:	681b      	ldr	r3, [r3, #0]
 811d424:	89db      	ldrh	r3, [r3, #14]
 811d426:	b29a      	uxth	r2, r3
 811d428:	687b      	ldr	r3, [r7, #4]
 811d42a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811d42e:	429a      	cmp	r2, r3
 811d430:	d91c      	bls.n	811d46c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 811d432:	4b76      	ldr	r3, [pc, #472]	@ (811d60c <tcp_receive+0x274>)
 811d434:	681b      	ldr	r3, [r3, #0]
 811d436:	89db      	ldrh	r3, [r3, #14]
 811d438:	b29a      	uxth	r2, r3
 811d43a:	687b      	ldr	r3, [r7, #4]
 811d43c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 811d440:	687b      	ldr	r3, [r7, #4]
 811d442:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 811d446:	687b      	ldr	r3, [r7, #4]
 811d448:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811d44c:	429a      	cmp	r2, r3
 811d44e:	d205      	bcs.n	811d45c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 811d450:	687b      	ldr	r3, [r7, #4]
 811d452:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811d456:	687b      	ldr	r3, [r7, #4]
 811d458:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 811d45c:	4b69      	ldr	r3, [pc, #420]	@ (811d604 <tcp_receive+0x26c>)
 811d45e:	681a      	ldr	r2, [r3, #0]
 811d460:	687b      	ldr	r3, [r7, #4]
 811d462:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 811d464:	4b68      	ldr	r3, [pc, #416]	@ (811d608 <tcp_receive+0x270>)
 811d466:	681a      	ldr	r2, [r3, #0]
 811d468:	687b      	ldr	r3, [r7, #4]
 811d46a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 811d46c:	4b66      	ldr	r3, [pc, #408]	@ (811d608 <tcp_receive+0x270>)
 811d46e:	681a      	ldr	r2, [r3, #0]
 811d470:	687b      	ldr	r3, [r7, #4]
 811d472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811d474:	1ad3      	subs	r3, r2, r3
 811d476:	2b00      	cmp	r3, #0
 811d478:	dc58      	bgt.n	811d52c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 811d47a:	4b65      	ldr	r3, [pc, #404]	@ (811d610 <tcp_receive+0x278>)
 811d47c:	881b      	ldrh	r3, [r3, #0]
 811d47e:	2b00      	cmp	r3, #0
 811d480:	d14b      	bne.n	811d51a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811d482:	687b      	ldr	r3, [r7, #4]
 811d484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811d486:	687a      	ldr	r2, [r7, #4]
 811d488:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 811d48c:	4413      	add	r3, r2
 811d48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811d490:	429a      	cmp	r2, r3
 811d492:	d142      	bne.n	811d51a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 811d494:	687b      	ldr	r3, [r7, #4]
 811d496:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811d49a:	2b00      	cmp	r3, #0
 811d49c:	db3d      	blt.n	811d51a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 811d49e:	687b      	ldr	r3, [r7, #4]
 811d4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811d4a2:	4b59      	ldr	r3, [pc, #356]	@ (811d608 <tcp_receive+0x270>)
 811d4a4:	681b      	ldr	r3, [r3, #0]
 811d4a6:	429a      	cmp	r2, r3
 811d4a8:	d137      	bne.n	811d51a <tcp_receive+0x182>
              found_dupack = 1;
 811d4aa:	2301      	movs	r3, #1
 811d4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 811d4ae:	687b      	ldr	r3, [r7, #4]
 811d4b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d4b4:	2bff      	cmp	r3, #255	@ 0xff
 811d4b6:	d007      	beq.n	811d4c8 <tcp_receive+0x130>
                ++pcb->dupacks;
 811d4b8:	687b      	ldr	r3, [r7, #4]
 811d4ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d4be:	3301      	adds	r3, #1
 811d4c0:	b2da      	uxtb	r2, r3
 811d4c2:	687b      	ldr	r3, [r7, #4]
 811d4c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 811d4c8:	687b      	ldr	r3, [r7, #4]
 811d4ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d4ce:	2b03      	cmp	r3, #3
 811d4d0:	d91b      	bls.n	811d50a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811d4d2:	687b      	ldr	r3, [r7, #4]
 811d4d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d4d8:	687b      	ldr	r3, [r7, #4]
 811d4da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d4dc:	4413      	add	r3, r2
 811d4de:	b29a      	uxth	r2, r3
 811d4e0:	687b      	ldr	r3, [r7, #4]
 811d4e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d4e6:	429a      	cmp	r2, r3
 811d4e8:	d30a      	bcc.n	811d500 <tcp_receive+0x168>
 811d4ea:	687b      	ldr	r3, [r7, #4]
 811d4ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d4f0:	687b      	ldr	r3, [r7, #4]
 811d4f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d4f4:	4413      	add	r3, r2
 811d4f6:	b29a      	uxth	r2, r3
 811d4f8:	687b      	ldr	r3, [r7, #4]
 811d4fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d4fe:	e004      	b.n	811d50a <tcp_receive+0x172>
 811d500:	687b      	ldr	r3, [r7, #4]
 811d502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d506:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 811d50a:	687b      	ldr	r3, [r7, #4]
 811d50c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d510:	2b02      	cmp	r3, #2
 811d512:	d902      	bls.n	811d51a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 811d514:	6878      	ldr	r0, [r7, #4]
 811d516:	f002 fb43 	bl	811fba0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 811d51a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811d51c:	2b00      	cmp	r3, #0
 811d51e:	f040 8161 	bne.w	811d7e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 811d522:	687b      	ldr	r3, [r7, #4]
 811d524:	2200      	movs	r2, #0
 811d526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 811d52a:	e15b      	b.n	811d7e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d52c:	4b36      	ldr	r3, [pc, #216]	@ (811d608 <tcp_receive+0x270>)
 811d52e:	681a      	ldr	r2, [r3, #0]
 811d530:	687b      	ldr	r3, [r7, #4]
 811d532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811d534:	1ad3      	subs	r3, r2, r3
 811d536:	3b01      	subs	r3, #1
 811d538:	2b00      	cmp	r3, #0
 811d53a:	f2c0 814e 	blt.w	811d7da <tcp_receive+0x442>
 811d53e:	4b32      	ldr	r3, [pc, #200]	@ (811d608 <tcp_receive+0x270>)
 811d540:	681a      	ldr	r2, [r3, #0]
 811d542:	687b      	ldr	r3, [r7, #4]
 811d544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811d546:	1ad3      	subs	r3, r2, r3
 811d548:	2b00      	cmp	r3, #0
 811d54a:	f300 8146 	bgt.w	811d7da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 811d54e:	687b      	ldr	r3, [r7, #4]
 811d550:	8b5b      	ldrh	r3, [r3, #26]
 811d552:	f003 0304 	and.w	r3, r3, #4
 811d556:	2b00      	cmp	r3, #0
 811d558:	d010      	beq.n	811d57c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 811d55a:	687b      	ldr	r3, [r7, #4]
 811d55c:	8b5b      	ldrh	r3, [r3, #26]
 811d55e:	f023 0304 	bic.w	r3, r3, #4
 811d562:	b29a      	uxth	r2, r3
 811d564:	687b      	ldr	r3, [r7, #4]
 811d566:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 811d568:	687b      	ldr	r3, [r7, #4]
 811d56a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811d56e:	687b      	ldr	r3, [r7, #4]
 811d570:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 811d574:	687b      	ldr	r3, [r7, #4]
 811d576:	2200      	movs	r2, #0
 811d578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 811d57c:	687b      	ldr	r3, [r7, #4]
 811d57e:	2200      	movs	r2, #0
 811d580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811d584:	687b      	ldr	r3, [r7, #4]
 811d586:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d58a:	10db      	asrs	r3, r3, #3
 811d58c:	b21b      	sxth	r3, r3
 811d58e:	b29a      	uxth	r2, r3
 811d590:	687b      	ldr	r3, [r7, #4]
 811d592:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d596:	b29b      	uxth	r3, r3
 811d598:	4413      	add	r3, r2
 811d59a:	b29b      	uxth	r3, r3
 811d59c:	b21a      	sxth	r2, r3
 811d59e:	687b      	ldr	r3, [r7, #4]
 811d5a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 811d5a4:	4b18      	ldr	r3, [pc, #96]	@ (811d608 <tcp_receive+0x270>)
 811d5a6:	681b      	ldr	r3, [r3, #0]
 811d5a8:	b29a      	uxth	r2, r3
 811d5aa:	687b      	ldr	r3, [r7, #4]
 811d5ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811d5ae:	b29b      	uxth	r3, r3
 811d5b0:	1ad3      	subs	r3, r2, r3
 811d5b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 811d5b4:	687b      	ldr	r3, [r7, #4]
 811d5b6:	2200      	movs	r2, #0
 811d5b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 811d5bc:	4b12      	ldr	r3, [pc, #72]	@ (811d608 <tcp_receive+0x270>)
 811d5be:	681a      	ldr	r2, [r3, #0]
 811d5c0:	687b      	ldr	r3, [r7, #4]
 811d5c2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 811d5c4:	687b      	ldr	r3, [r7, #4]
 811d5c6:	7d1b      	ldrb	r3, [r3, #20]
 811d5c8:	2b03      	cmp	r3, #3
 811d5ca:	f240 8097 	bls.w	811d6fc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 811d5ce:	687b      	ldr	r3, [r7, #4]
 811d5d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d5d4:	687b      	ldr	r3, [r7, #4]
 811d5d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811d5da:	429a      	cmp	r2, r3
 811d5dc:	d245      	bcs.n	811d66a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 811d5de:	687b      	ldr	r3, [r7, #4]
 811d5e0:	8b5b      	ldrh	r3, [r3, #26]
 811d5e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811d5e6:	2b00      	cmp	r3, #0
 811d5e8:	d014      	beq.n	811d614 <tcp_receive+0x27c>
 811d5ea:	2301      	movs	r3, #1
 811d5ec:	e013      	b.n	811d616 <tcp_receive+0x27e>
 811d5ee:	bf00      	nop
 811d5f0:	081275dc 	.word	0x081275dc
 811d5f4:	08127944 	.word	0x08127944
 811d5f8:	08127660 	.word	0x08127660
 811d5fc:	08127960 	.word	0x08127960
 811d600:	240126e4 	.word	0x240126e4
 811d604:	240126d8 	.word	0x240126d8
 811d608:	240126dc 	.word	0x240126dc
 811d60c:	240126c8 	.word	0x240126c8
 811d610:	240126e2 	.word	0x240126e2
 811d614:	2302      	movs	r3, #2
 811d616:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 811d61a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 811d61e:	b29a      	uxth	r2, r3
 811d620:	687b      	ldr	r3, [r7, #4]
 811d622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d624:	fb12 f303 	smulbb	r3, r2, r3
 811d628:	b29b      	uxth	r3, r3
 811d62a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 811d62c:	4293      	cmp	r3, r2
 811d62e:	bf28      	it	cs
 811d630:	4613      	movcs	r3, r2
 811d632:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 811d634:	687b      	ldr	r3, [r7, #4]
 811d636:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d63a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811d63c:	4413      	add	r3, r2
 811d63e:	b29a      	uxth	r2, r3
 811d640:	687b      	ldr	r3, [r7, #4]
 811d642:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d646:	429a      	cmp	r2, r3
 811d648:	d309      	bcc.n	811d65e <tcp_receive+0x2c6>
 811d64a:	687b      	ldr	r3, [r7, #4]
 811d64c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d650:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811d652:	4413      	add	r3, r2
 811d654:	b29a      	uxth	r2, r3
 811d656:	687b      	ldr	r3, [r7, #4]
 811d658:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d65c:	e04e      	b.n	811d6fc <tcp_receive+0x364>
 811d65e:	687b      	ldr	r3, [r7, #4]
 811d660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d664:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d668:	e048      	b.n	811d6fc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 811d66a:	687b      	ldr	r3, [r7, #4]
 811d66c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d670:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811d672:	4413      	add	r3, r2
 811d674:	b29a      	uxth	r2, r3
 811d676:	687b      	ldr	r3, [r7, #4]
 811d678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 811d67c:	429a      	cmp	r2, r3
 811d67e:	d309      	bcc.n	811d694 <tcp_receive+0x2fc>
 811d680:	687b      	ldr	r3, [r7, #4]
 811d682:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d686:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811d688:	4413      	add	r3, r2
 811d68a:	b29a      	uxth	r2, r3
 811d68c:	687b      	ldr	r3, [r7, #4]
 811d68e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811d692:	e004      	b.n	811d69e <tcp_receive+0x306>
 811d694:	687b      	ldr	r3, [r7, #4]
 811d696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d69a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811d69e:	687b      	ldr	r3, [r7, #4]
 811d6a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d6a4:	687b      	ldr	r3, [r7, #4]
 811d6a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d6aa:	429a      	cmp	r2, r3
 811d6ac:	d326      	bcc.n	811d6fc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811d6ae:	687b      	ldr	r3, [r7, #4]
 811d6b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d6b4:	687b      	ldr	r3, [r7, #4]
 811d6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d6ba:	1ad3      	subs	r3, r2, r3
 811d6bc:	b29a      	uxth	r2, r3
 811d6be:	687b      	ldr	r3, [r7, #4]
 811d6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 811d6c4:	687b      	ldr	r3, [r7, #4]
 811d6c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d6ca:	687b      	ldr	r3, [r7, #4]
 811d6cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d6ce:	4413      	add	r3, r2
 811d6d0:	b29a      	uxth	r2, r3
 811d6d2:	687b      	ldr	r3, [r7, #4]
 811d6d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d6d8:	429a      	cmp	r2, r3
 811d6da:	d30a      	bcc.n	811d6f2 <tcp_receive+0x35a>
 811d6dc:	687b      	ldr	r3, [r7, #4]
 811d6de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d6e2:	687b      	ldr	r3, [r7, #4]
 811d6e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d6e6:	4413      	add	r3, r2
 811d6e8:	b29a      	uxth	r2, r3
 811d6ea:	687b      	ldr	r3, [r7, #4]
 811d6ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d6f0:	e004      	b.n	811d6fc <tcp_receive+0x364>
 811d6f2:	687b      	ldr	r3, [r7, #4]
 811d6f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d6f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 811d6fc:	687b      	ldr	r3, [r7, #4]
 811d6fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 811d700:	687b      	ldr	r3, [r7, #4]
 811d702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d704:	4a98      	ldr	r2, [pc, #608]	@ (811d968 <tcp_receive+0x5d0>)
 811d706:	6878      	ldr	r0, [r7, #4]
 811d708:	f7ff fdca 	bl	811d2a0 <tcp_free_acked_segments>
 811d70c:	4602      	mov	r2, r0
 811d70e:	687b      	ldr	r3, [r7, #4]
 811d710:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 811d712:	687b      	ldr	r3, [r7, #4]
 811d714:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 811d716:	687b      	ldr	r3, [r7, #4]
 811d718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d71a:	4a94      	ldr	r2, [pc, #592]	@ (811d96c <tcp_receive+0x5d4>)
 811d71c:	6878      	ldr	r0, [r7, #4]
 811d71e:	f7ff fdbf 	bl	811d2a0 <tcp_free_acked_segments>
 811d722:	4602      	mov	r2, r0
 811d724:	687b      	ldr	r3, [r7, #4]
 811d726:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 811d728:	687b      	ldr	r3, [r7, #4]
 811d72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d72c:	2b00      	cmp	r3, #0
 811d72e:	d104      	bne.n	811d73a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 811d730:	687b      	ldr	r3, [r7, #4]
 811d732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d736:	861a      	strh	r2, [r3, #48]	@ 0x30
 811d738:	e002      	b.n	811d740 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 811d73a:	687b      	ldr	r3, [r7, #4]
 811d73c:	2200      	movs	r2, #0
 811d73e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 811d740:	687b      	ldr	r3, [r7, #4]
 811d742:	2200      	movs	r2, #0
 811d744:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 811d746:	687b      	ldr	r3, [r7, #4]
 811d748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d74a:	2b00      	cmp	r3, #0
 811d74c:	d103      	bne.n	811d756 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 811d74e:	687b      	ldr	r3, [r7, #4]
 811d750:	2200      	movs	r2, #0
 811d752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 811d756:	687b      	ldr	r3, [r7, #4]
 811d758:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811d75c:	4b84      	ldr	r3, [pc, #528]	@ (811d970 <tcp_receive+0x5d8>)
 811d75e:	881b      	ldrh	r3, [r3, #0]
 811d760:	4413      	add	r3, r2
 811d762:	b29a      	uxth	r2, r3
 811d764:	687b      	ldr	r3, [r7, #4]
 811d766:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 811d76a:	687b      	ldr	r3, [r7, #4]
 811d76c:	8b5b      	ldrh	r3, [r3, #26]
 811d76e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811d772:	2b00      	cmp	r3, #0
 811d774:	d035      	beq.n	811d7e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 811d776:	687b      	ldr	r3, [r7, #4]
 811d778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d77a:	2b00      	cmp	r3, #0
 811d77c:	d118      	bne.n	811d7b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 811d77e:	687b      	ldr	r3, [r7, #4]
 811d780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d782:	2b00      	cmp	r3, #0
 811d784:	d00c      	beq.n	811d7a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 811d786:	687b      	ldr	r3, [r7, #4]
 811d788:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811d78a:	687b      	ldr	r3, [r7, #4]
 811d78c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d78e:	68db      	ldr	r3, [r3, #12]
 811d790:	685b      	ldr	r3, [r3, #4]
 811d792:	4618      	mov	r0, r3
 811d794:	f7f6 fabf 	bl	8113d16 <lwip_htonl>
 811d798:	4603      	mov	r3, r0
 811d79a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 811d79c:	2b00      	cmp	r3, #0
 811d79e:	dc20      	bgt.n	811d7e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 811d7a0:	687b      	ldr	r3, [r7, #4]
 811d7a2:	8b5b      	ldrh	r3, [r3, #26]
 811d7a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811d7a8:	b29a      	uxth	r2, r3
 811d7aa:	687b      	ldr	r3, [r7, #4]
 811d7ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d7ae:	e018      	b.n	811d7e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 811d7b0:	687b      	ldr	r3, [r7, #4]
 811d7b2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811d7b4:	687b      	ldr	r3, [r7, #4]
 811d7b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d7b8:	68db      	ldr	r3, [r3, #12]
 811d7ba:	685b      	ldr	r3, [r3, #4]
 811d7bc:	4618      	mov	r0, r3
 811d7be:	f7f6 faaa 	bl	8113d16 <lwip_htonl>
 811d7c2:	4603      	mov	r3, r0
 811d7c4:	1ae3      	subs	r3, r4, r3
 811d7c6:	2b00      	cmp	r3, #0
 811d7c8:	dc0b      	bgt.n	811d7e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 811d7ca:	687b      	ldr	r3, [r7, #4]
 811d7cc:	8b5b      	ldrh	r3, [r3, #26]
 811d7ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811d7d2:	b29a      	uxth	r2, r3
 811d7d4:	687b      	ldr	r3, [r7, #4]
 811d7d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d7d8:	e003      	b.n	811d7e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 811d7da:	6878      	ldr	r0, [r7, #4]
 811d7dc:	f002 fbcc 	bl	811ff78 <tcp_send_empty_ack>
 811d7e0:	e000      	b.n	811d7e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d7e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 811d7e4:	687b      	ldr	r3, [r7, #4]
 811d7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811d7e8:	2b00      	cmp	r3, #0
 811d7ea:	d05b      	beq.n	811d8a4 <tcp_receive+0x50c>
 811d7ec:	687b      	ldr	r3, [r7, #4]
 811d7ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811d7f0:	4b60      	ldr	r3, [pc, #384]	@ (811d974 <tcp_receive+0x5dc>)
 811d7f2:	681b      	ldr	r3, [r3, #0]
 811d7f4:	1ad3      	subs	r3, r2, r3
 811d7f6:	2b00      	cmp	r3, #0
 811d7f8:	da54      	bge.n	811d8a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 811d7fa:	4b5f      	ldr	r3, [pc, #380]	@ (811d978 <tcp_receive+0x5e0>)
 811d7fc:	681b      	ldr	r3, [r3, #0]
 811d7fe:	b29a      	uxth	r2, r3
 811d800:	687b      	ldr	r3, [r7, #4]
 811d802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811d804:	b29b      	uxth	r3, r3
 811d806:	1ad3      	subs	r3, r2, r3
 811d808:	b29b      	uxth	r3, r3
 811d80a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 811d80e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811d812:	687b      	ldr	r3, [r7, #4]
 811d814:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d818:	10db      	asrs	r3, r3, #3
 811d81a:	b21b      	sxth	r3, r3
 811d81c:	b29b      	uxth	r3, r3
 811d81e:	1ad3      	subs	r3, r2, r3
 811d820:	b29b      	uxth	r3, r3
 811d822:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 811d826:	687b      	ldr	r3, [r7, #4]
 811d828:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d82c:	b29a      	uxth	r2, r3
 811d82e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811d832:	4413      	add	r3, r2
 811d834:	b29b      	uxth	r3, r3
 811d836:	b21a      	sxth	r2, r3
 811d838:	687b      	ldr	r3, [r7, #4]
 811d83a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 811d83c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 811d840:	2b00      	cmp	r3, #0
 811d842:	da05      	bge.n	811d850 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 811d844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811d848:	425b      	negs	r3, r3
 811d84a:	b29b      	uxth	r3, r3
 811d84c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 811d850:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811d854:	687b      	ldr	r3, [r7, #4]
 811d856:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d85a:	109b      	asrs	r3, r3, #2
 811d85c:	b21b      	sxth	r3, r3
 811d85e:	b29b      	uxth	r3, r3
 811d860:	1ad3      	subs	r3, r2, r3
 811d862:	b29b      	uxth	r3, r3
 811d864:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 811d868:	687b      	ldr	r3, [r7, #4]
 811d86a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d86e:	b29a      	uxth	r2, r3
 811d870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811d874:	4413      	add	r3, r2
 811d876:	b29b      	uxth	r3, r3
 811d878:	b21a      	sxth	r2, r3
 811d87a:	687b      	ldr	r3, [r7, #4]
 811d87c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811d87e:	687b      	ldr	r3, [r7, #4]
 811d880:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d884:	10db      	asrs	r3, r3, #3
 811d886:	b21b      	sxth	r3, r3
 811d888:	b29a      	uxth	r2, r3
 811d88a:	687b      	ldr	r3, [r7, #4]
 811d88c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d890:	b29b      	uxth	r3, r3
 811d892:	4413      	add	r3, r2
 811d894:	b29b      	uxth	r3, r3
 811d896:	b21a      	sxth	r2, r3
 811d898:	687b      	ldr	r3, [r7, #4]
 811d89a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811d89e:	687b      	ldr	r3, [r7, #4]
 811d8a0:	2200      	movs	r2, #0
 811d8a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 811d8a4:	4b35      	ldr	r3, [pc, #212]	@ (811d97c <tcp_receive+0x5e4>)
 811d8a6:	881b      	ldrh	r3, [r3, #0]
 811d8a8:	2b00      	cmp	r3, #0
 811d8aa:	f000 84df 	beq.w	811e26c <tcp_receive+0xed4>
 811d8ae:	687b      	ldr	r3, [r7, #4]
 811d8b0:	7d1b      	ldrb	r3, [r3, #20]
 811d8b2:	2b06      	cmp	r3, #6
 811d8b4:	f200 84da 	bhi.w	811e26c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811d8b8:	687b      	ldr	r3, [r7, #4]
 811d8ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d8bc:	4b30      	ldr	r3, [pc, #192]	@ (811d980 <tcp_receive+0x5e8>)
 811d8be:	681b      	ldr	r3, [r3, #0]
 811d8c0:	1ad3      	subs	r3, r2, r3
 811d8c2:	3b01      	subs	r3, #1
 811d8c4:	2b00      	cmp	r3, #0
 811d8c6:	f2c0 808f 	blt.w	811d9e8 <tcp_receive+0x650>
 811d8ca:	687b      	ldr	r3, [r7, #4]
 811d8cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d8ce:	4b2b      	ldr	r3, [pc, #172]	@ (811d97c <tcp_receive+0x5e4>)
 811d8d0:	881b      	ldrh	r3, [r3, #0]
 811d8d2:	4619      	mov	r1, r3
 811d8d4:	4b2a      	ldr	r3, [pc, #168]	@ (811d980 <tcp_receive+0x5e8>)
 811d8d6:	681b      	ldr	r3, [r3, #0]
 811d8d8:	440b      	add	r3, r1
 811d8da:	1ad3      	subs	r3, r2, r3
 811d8dc:	3301      	adds	r3, #1
 811d8de:	2b00      	cmp	r3, #0
 811d8e0:	f300 8082 	bgt.w	811d9e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 811d8e4:	4b27      	ldr	r3, [pc, #156]	@ (811d984 <tcp_receive+0x5ec>)
 811d8e6:	685b      	ldr	r3, [r3, #4]
 811d8e8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 811d8ea:	687b      	ldr	r3, [r7, #4]
 811d8ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d8ee:	4b24      	ldr	r3, [pc, #144]	@ (811d980 <tcp_receive+0x5e8>)
 811d8f0:	681b      	ldr	r3, [r3, #0]
 811d8f2:	1ad3      	subs	r3, r2, r3
 811d8f4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 811d8f6:	4b23      	ldr	r3, [pc, #140]	@ (811d984 <tcp_receive+0x5ec>)
 811d8f8:	685b      	ldr	r3, [r3, #4]
 811d8fa:	2b00      	cmp	r3, #0
 811d8fc:	d106      	bne.n	811d90c <tcp_receive+0x574>
 811d8fe:	4b22      	ldr	r3, [pc, #136]	@ (811d988 <tcp_receive+0x5f0>)
 811d900:	f240 5294 	movw	r2, #1428	@ 0x594
 811d904:	4921      	ldr	r1, [pc, #132]	@ (811d98c <tcp_receive+0x5f4>)
 811d906:	4822      	ldr	r0, [pc, #136]	@ (811d990 <tcp_receive+0x5f8>)
 811d908:	f004 fa3c 	bl	8121d84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 811d90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d90e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 811d912:	4293      	cmp	r3, r2
 811d914:	d906      	bls.n	811d924 <tcp_receive+0x58c>
 811d916:	4b1c      	ldr	r3, [pc, #112]	@ (811d988 <tcp_receive+0x5f0>)
 811d918:	f240 5295 	movw	r2, #1429	@ 0x595
 811d91c:	491d      	ldr	r1, [pc, #116]	@ (811d994 <tcp_receive+0x5fc>)
 811d91e:	481c      	ldr	r0, [pc, #112]	@ (811d990 <tcp_receive+0x5f8>)
 811d920:	f004 fa30 	bl	8121d84 <iprintf>
      off = (u16_t)off32;
 811d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 811d92a:	4b16      	ldr	r3, [pc, #88]	@ (811d984 <tcp_receive+0x5ec>)
 811d92c:	685b      	ldr	r3, [r3, #4]
 811d92e:	891b      	ldrh	r3, [r3, #8]
 811d930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811d934:	429a      	cmp	r2, r3
 811d936:	d906      	bls.n	811d946 <tcp_receive+0x5ae>
 811d938:	4b13      	ldr	r3, [pc, #76]	@ (811d988 <tcp_receive+0x5f0>)
 811d93a:	f240 5297 	movw	r2, #1431	@ 0x597
 811d93e:	4916      	ldr	r1, [pc, #88]	@ (811d998 <tcp_receive+0x600>)
 811d940:	4813      	ldr	r0, [pc, #76]	@ (811d990 <tcp_receive+0x5f8>)
 811d942:	f004 fa1f 	bl	8121d84 <iprintf>
      inseg.len -= off;
 811d946:	4b0f      	ldr	r3, [pc, #60]	@ (811d984 <tcp_receive+0x5ec>)
 811d948:	891a      	ldrh	r2, [r3, #8]
 811d94a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811d94e:	1ad3      	subs	r3, r2, r3
 811d950:	b29a      	uxth	r2, r3
 811d952:	4b0c      	ldr	r3, [pc, #48]	@ (811d984 <tcp_receive+0x5ec>)
 811d954:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 811d956:	4b0b      	ldr	r3, [pc, #44]	@ (811d984 <tcp_receive+0x5ec>)
 811d958:	685b      	ldr	r3, [r3, #4]
 811d95a:	891a      	ldrh	r2, [r3, #8]
 811d95c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811d960:	1ad3      	subs	r3, r2, r3
 811d962:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 811d964:	e02a      	b.n	811d9bc <tcp_receive+0x624>
 811d966:	bf00      	nop
 811d968:	0812797c 	.word	0x0812797c
 811d96c:	08127984 	.word	0x08127984
 811d970:	240126e0 	.word	0x240126e0
 811d974:	240126dc 	.word	0x240126dc
 811d978:	240126a0 	.word	0x240126a0
 811d97c:	240126e2 	.word	0x240126e2
 811d980:	240126d8 	.word	0x240126d8
 811d984:	240126b8 	.word	0x240126b8
 811d988:	081275dc 	.word	0x081275dc
 811d98c:	0812798c 	.word	0x0812798c
 811d990:	08127660 	.word	0x08127660
 811d994:	0812799c 	.word	0x0812799c
 811d998:	081279ac 	.word	0x081279ac
        off -= p->len;
 811d99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d99e:	895b      	ldrh	r3, [r3, #10]
 811d9a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811d9a4:	1ad3      	subs	r3, r2, r3
 811d9a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 811d9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d9ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811d9ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811d9b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d9b2:	2200      	movs	r2, #0
 811d9b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 811d9b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d9b8:	681b      	ldr	r3, [r3, #0]
 811d9ba:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 811d9bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d9be:	895b      	ldrh	r3, [r3, #10]
 811d9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811d9c4:	429a      	cmp	r2, r3
 811d9c6:	d8e9      	bhi.n	811d99c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 811d9c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811d9cc:	4619      	mov	r1, r3
 811d9ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811d9d0:	f7fb ff46 	bl	8119860 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 811d9d4:	687b      	ldr	r3, [r7, #4]
 811d9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d9d8:	4a90      	ldr	r2, [pc, #576]	@ (811dc1c <tcp_receive+0x884>)
 811d9da:	6013      	str	r3, [r2, #0]
 811d9dc:	4b90      	ldr	r3, [pc, #576]	@ (811dc20 <tcp_receive+0x888>)
 811d9de:	68db      	ldr	r3, [r3, #12]
 811d9e0:	4a8e      	ldr	r2, [pc, #568]	@ (811dc1c <tcp_receive+0x884>)
 811d9e2:	6812      	ldr	r2, [r2, #0]
 811d9e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811d9e6:	e00d      	b.n	811da04 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 811d9e8:	4b8c      	ldr	r3, [pc, #560]	@ (811dc1c <tcp_receive+0x884>)
 811d9ea:	681a      	ldr	r2, [r3, #0]
 811d9ec:	687b      	ldr	r3, [r7, #4]
 811d9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d9f0:	1ad3      	subs	r3, r2, r3
 811d9f2:	2b00      	cmp	r3, #0
 811d9f4:	da06      	bge.n	811da04 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 811d9f6:	687b      	ldr	r3, [r7, #4]
 811d9f8:	8b5b      	ldrh	r3, [r3, #26]
 811d9fa:	f043 0302 	orr.w	r3, r3, #2
 811d9fe:	b29a      	uxth	r2, r3
 811da00:	687b      	ldr	r3, [r7, #4]
 811da02:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811da04:	4b85      	ldr	r3, [pc, #532]	@ (811dc1c <tcp_receive+0x884>)
 811da06:	681a      	ldr	r2, [r3, #0]
 811da08:	687b      	ldr	r3, [r7, #4]
 811da0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811da0c:	1ad3      	subs	r3, r2, r3
 811da0e:	2b00      	cmp	r3, #0
 811da10:	f2c0 8427 	blt.w	811e262 <tcp_receive+0xeca>
 811da14:	4b81      	ldr	r3, [pc, #516]	@ (811dc1c <tcp_receive+0x884>)
 811da16:	681a      	ldr	r2, [r3, #0]
 811da18:	687b      	ldr	r3, [r7, #4]
 811da1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811da1c:	6879      	ldr	r1, [r7, #4]
 811da1e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811da20:	440b      	add	r3, r1
 811da22:	1ad3      	subs	r3, r2, r3
 811da24:	3301      	adds	r3, #1
 811da26:	2b00      	cmp	r3, #0
 811da28:	f300 841b 	bgt.w	811e262 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 811da2c:	687b      	ldr	r3, [r7, #4]
 811da2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811da30:	4b7a      	ldr	r3, [pc, #488]	@ (811dc1c <tcp_receive+0x884>)
 811da32:	681b      	ldr	r3, [r3, #0]
 811da34:	429a      	cmp	r2, r3
 811da36:	f040 8298 	bne.w	811df6a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 811da3a:	4b79      	ldr	r3, [pc, #484]	@ (811dc20 <tcp_receive+0x888>)
 811da3c:	891c      	ldrh	r4, [r3, #8]
 811da3e:	4b78      	ldr	r3, [pc, #480]	@ (811dc20 <tcp_receive+0x888>)
 811da40:	68db      	ldr	r3, [r3, #12]
 811da42:	899b      	ldrh	r3, [r3, #12]
 811da44:	b29b      	uxth	r3, r3
 811da46:	4618      	mov	r0, r3
 811da48:	f7f6 f950 	bl	8113cec <lwip_htons>
 811da4c:	4603      	mov	r3, r0
 811da4e:	b2db      	uxtb	r3, r3
 811da50:	f003 0303 	and.w	r3, r3, #3
 811da54:	2b00      	cmp	r3, #0
 811da56:	d001      	beq.n	811da5c <tcp_receive+0x6c4>
 811da58:	2301      	movs	r3, #1
 811da5a:	e000      	b.n	811da5e <tcp_receive+0x6c6>
 811da5c:	2300      	movs	r3, #0
 811da5e:	4423      	add	r3, r4
 811da60:	b29a      	uxth	r2, r3
 811da62:	4b70      	ldr	r3, [pc, #448]	@ (811dc24 <tcp_receive+0x88c>)
 811da64:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 811da66:	687b      	ldr	r3, [r7, #4]
 811da68:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811da6a:	4b6e      	ldr	r3, [pc, #440]	@ (811dc24 <tcp_receive+0x88c>)
 811da6c:	881b      	ldrh	r3, [r3, #0]
 811da6e:	429a      	cmp	r2, r3
 811da70:	d274      	bcs.n	811db5c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811da72:	4b6b      	ldr	r3, [pc, #428]	@ (811dc20 <tcp_receive+0x888>)
 811da74:	68db      	ldr	r3, [r3, #12]
 811da76:	899b      	ldrh	r3, [r3, #12]
 811da78:	b29b      	uxth	r3, r3
 811da7a:	4618      	mov	r0, r3
 811da7c:	f7f6 f936 	bl	8113cec <lwip_htons>
 811da80:	4603      	mov	r3, r0
 811da82:	b2db      	uxtb	r3, r3
 811da84:	f003 0301 	and.w	r3, r3, #1
 811da88:	2b00      	cmp	r3, #0
 811da8a:	d01e      	beq.n	811daca <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 811da8c:	4b64      	ldr	r3, [pc, #400]	@ (811dc20 <tcp_receive+0x888>)
 811da8e:	68db      	ldr	r3, [r3, #12]
 811da90:	899b      	ldrh	r3, [r3, #12]
 811da92:	b29b      	uxth	r3, r3
 811da94:	b21b      	sxth	r3, r3
 811da96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811da9a:	b21c      	sxth	r4, r3
 811da9c:	4b60      	ldr	r3, [pc, #384]	@ (811dc20 <tcp_receive+0x888>)
 811da9e:	68db      	ldr	r3, [r3, #12]
 811daa0:	899b      	ldrh	r3, [r3, #12]
 811daa2:	b29b      	uxth	r3, r3
 811daa4:	4618      	mov	r0, r3
 811daa6:	f7f6 f921 	bl	8113cec <lwip_htons>
 811daaa:	4603      	mov	r3, r0
 811daac:	b2db      	uxtb	r3, r3
 811daae:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811dab2:	b29b      	uxth	r3, r3
 811dab4:	4618      	mov	r0, r3
 811dab6:	f7f6 f919 	bl	8113cec <lwip_htons>
 811daba:	4603      	mov	r3, r0
 811dabc:	b21b      	sxth	r3, r3
 811dabe:	4323      	orrs	r3, r4
 811dac0:	b21a      	sxth	r2, r3
 811dac2:	4b57      	ldr	r3, [pc, #348]	@ (811dc20 <tcp_receive+0x888>)
 811dac4:	68db      	ldr	r3, [r3, #12]
 811dac6:	b292      	uxth	r2, r2
 811dac8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 811daca:	687b      	ldr	r3, [r7, #4]
 811dacc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811dace:	4b54      	ldr	r3, [pc, #336]	@ (811dc20 <tcp_receive+0x888>)
 811dad0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811dad2:	4b53      	ldr	r3, [pc, #332]	@ (811dc20 <tcp_receive+0x888>)
 811dad4:	68db      	ldr	r3, [r3, #12]
 811dad6:	899b      	ldrh	r3, [r3, #12]
 811dad8:	b29b      	uxth	r3, r3
 811dada:	4618      	mov	r0, r3
 811dadc:	f7f6 f906 	bl	8113cec <lwip_htons>
 811dae0:	4603      	mov	r3, r0
 811dae2:	b2db      	uxtb	r3, r3
 811dae4:	f003 0302 	and.w	r3, r3, #2
 811dae8:	2b00      	cmp	r3, #0
 811daea:	d005      	beq.n	811daf8 <tcp_receive+0x760>
            inseg.len -= 1;
 811daec:	4b4c      	ldr	r3, [pc, #304]	@ (811dc20 <tcp_receive+0x888>)
 811daee:	891b      	ldrh	r3, [r3, #8]
 811daf0:	3b01      	subs	r3, #1
 811daf2:	b29a      	uxth	r2, r3
 811daf4:	4b4a      	ldr	r3, [pc, #296]	@ (811dc20 <tcp_receive+0x888>)
 811daf6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 811daf8:	4b49      	ldr	r3, [pc, #292]	@ (811dc20 <tcp_receive+0x888>)
 811dafa:	685b      	ldr	r3, [r3, #4]
 811dafc:	4a48      	ldr	r2, [pc, #288]	@ (811dc20 <tcp_receive+0x888>)
 811dafe:	8912      	ldrh	r2, [r2, #8]
 811db00:	4611      	mov	r1, r2
 811db02:	4618      	mov	r0, r3
 811db04:	f7fb fdae 	bl	8119664 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 811db08:	4b45      	ldr	r3, [pc, #276]	@ (811dc20 <tcp_receive+0x888>)
 811db0a:	891c      	ldrh	r4, [r3, #8]
 811db0c:	4b44      	ldr	r3, [pc, #272]	@ (811dc20 <tcp_receive+0x888>)
 811db0e:	68db      	ldr	r3, [r3, #12]
 811db10:	899b      	ldrh	r3, [r3, #12]
 811db12:	b29b      	uxth	r3, r3
 811db14:	4618      	mov	r0, r3
 811db16:	f7f6 f8e9 	bl	8113cec <lwip_htons>
 811db1a:	4603      	mov	r3, r0
 811db1c:	b2db      	uxtb	r3, r3
 811db1e:	f003 0303 	and.w	r3, r3, #3
 811db22:	2b00      	cmp	r3, #0
 811db24:	d001      	beq.n	811db2a <tcp_receive+0x792>
 811db26:	2301      	movs	r3, #1
 811db28:	e000      	b.n	811db2c <tcp_receive+0x794>
 811db2a:	2300      	movs	r3, #0
 811db2c:	4423      	add	r3, r4
 811db2e:	b29a      	uxth	r2, r3
 811db30:	4b3c      	ldr	r3, [pc, #240]	@ (811dc24 <tcp_receive+0x88c>)
 811db32:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811db34:	4b3b      	ldr	r3, [pc, #236]	@ (811dc24 <tcp_receive+0x88c>)
 811db36:	881b      	ldrh	r3, [r3, #0]
 811db38:	461a      	mov	r2, r3
 811db3a:	4b38      	ldr	r3, [pc, #224]	@ (811dc1c <tcp_receive+0x884>)
 811db3c:	681b      	ldr	r3, [r3, #0]
 811db3e:	441a      	add	r2, r3
 811db40:	687b      	ldr	r3, [r7, #4]
 811db42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811db44:	6879      	ldr	r1, [r7, #4]
 811db46:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811db48:	440b      	add	r3, r1
 811db4a:	429a      	cmp	r2, r3
 811db4c:	d006      	beq.n	811db5c <tcp_receive+0x7c4>
 811db4e:	4b36      	ldr	r3, [pc, #216]	@ (811dc28 <tcp_receive+0x890>)
 811db50:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 811db54:	4935      	ldr	r1, [pc, #212]	@ (811dc2c <tcp_receive+0x894>)
 811db56:	4836      	ldr	r0, [pc, #216]	@ (811dc30 <tcp_receive+0x898>)
 811db58:	f004 f914 	bl	8121d84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 811db5c:	687b      	ldr	r3, [r7, #4]
 811db5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811db60:	2b00      	cmp	r3, #0
 811db62:	f000 80e6 	beq.w	811dd32 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811db66:	4b2e      	ldr	r3, [pc, #184]	@ (811dc20 <tcp_receive+0x888>)
 811db68:	68db      	ldr	r3, [r3, #12]
 811db6a:	899b      	ldrh	r3, [r3, #12]
 811db6c:	b29b      	uxth	r3, r3
 811db6e:	4618      	mov	r0, r3
 811db70:	f7f6 f8bc 	bl	8113cec <lwip_htons>
 811db74:	4603      	mov	r3, r0
 811db76:	b2db      	uxtb	r3, r3
 811db78:	f003 0301 	and.w	r3, r3, #1
 811db7c:	2b00      	cmp	r3, #0
 811db7e:	d010      	beq.n	811dba2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 811db80:	e00a      	b.n	811db98 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811db82:	687b      	ldr	r3, [r7, #4]
 811db84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811db86:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 811db88:	687b      	ldr	r3, [r7, #4]
 811db8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811db8c:	681a      	ldr	r2, [r3, #0]
 811db8e:	687b      	ldr	r3, [r7, #4]
 811db90:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811db92:	68f8      	ldr	r0, [r7, #12]
 811db94:	f7fd fcd1 	bl	811b53a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 811db98:	687b      	ldr	r3, [r7, #4]
 811db9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811db9c:	2b00      	cmp	r3, #0
 811db9e:	d1f0      	bne.n	811db82 <tcp_receive+0x7ea>
 811dba0:	e0c7      	b.n	811dd32 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811dba2:	687b      	ldr	r3, [r7, #4]
 811dba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 811dba8:	e051      	b.n	811dc4e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811dbaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dbac:	68db      	ldr	r3, [r3, #12]
 811dbae:	899b      	ldrh	r3, [r3, #12]
 811dbb0:	b29b      	uxth	r3, r3
 811dbb2:	4618      	mov	r0, r3
 811dbb4:	f7f6 f89a 	bl	8113cec <lwip_htons>
 811dbb8:	4603      	mov	r3, r0
 811dbba:	b2db      	uxtb	r3, r3
 811dbbc:	f003 0301 	and.w	r3, r3, #1
 811dbc0:	2b00      	cmp	r3, #0
 811dbc2:	d03c      	beq.n	811dc3e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 811dbc4:	4b16      	ldr	r3, [pc, #88]	@ (811dc20 <tcp_receive+0x888>)
 811dbc6:	68db      	ldr	r3, [r3, #12]
 811dbc8:	899b      	ldrh	r3, [r3, #12]
 811dbca:	b29b      	uxth	r3, r3
 811dbcc:	4618      	mov	r0, r3
 811dbce:	f7f6 f88d 	bl	8113cec <lwip_htons>
 811dbd2:	4603      	mov	r3, r0
 811dbd4:	b2db      	uxtb	r3, r3
 811dbd6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811dbda:	2b00      	cmp	r3, #0
 811dbdc:	d12f      	bne.n	811dc3e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811dbde:	4b10      	ldr	r3, [pc, #64]	@ (811dc20 <tcp_receive+0x888>)
 811dbe0:	68db      	ldr	r3, [r3, #12]
 811dbe2:	899b      	ldrh	r3, [r3, #12]
 811dbe4:	b29c      	uxth	r4, r3
 811dbe6:	2001      	movs	r0, #1
 811dbe8:	f7f6 f880 	bl	8113cec <lwip_htons>
 811dbec:	4603      	mov	r3, r0
 811dbee:	461a      	mov	r2, r3
 811dbf0:	4b0b      	ldr	r3, [pc, #44]	@ (811dc20 <tcp_receive+0x888>)
 811dbf2:	68db      	ldr	r3, [r3, #12]
 811dbf4:	4322      	orrs	r2, r4
 811dbf6:	b292      	uxth	r2, r2
 811dbf8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 811dbfa:	4b09      	ldr	r3, [pc, #36]	@ (811dc20 <tcp_receive+0x888>)
 811dbfc:	891c      	ldrh	r4, [r3, #8]
 811dbfe:	4b08      	ldr	r3, [pc, #32]	@ (811dc20 <tcp_receive+0x888>)
 811dc00:	68db      	ldr	r3, [r3, #12]
 811dc02:	899b      	ldrh	r3, [r3, #12]
 811dc04:	b29b      	uxth	r3, r3
 811dc06:	4618      	mov	r0, r3
 811dc08:	f7f6 f870 	bl	8113cec <lwip_htons>
 811dc0c:	4603      	mov	r3, r0
 811dc0e:	b2db      	uxtb	r3, r3
 811dc10:	f003 0303 	and.w	r3, r3, #3
 811dc14:	2b00      	cmp	r3, #0
 811dc16:	d00d      	beq.n	811dc34 <tcp_receive+0x89c>
 811dc18:	2301      	movs	r3, #1
 811dc1a:	e00c      	b.n	811dc36 <tcp_receive+0x89e>
 811dc1c:	240126d8 	.word	0x240126d8
 811dc20:	240126b8 	.word	0x240126b8
 811dc24:	240126e2 	.word	0x240126e2
 811dc28:	081275dc 	.word	0x081275dc
 811dc2c:	081279bc 	.word	0x081279bc
 811dc30:	08127660 	.word	0x08127660
 811dc34:	2300      	movs	r3, #0
 811dc36:	4423      	add	r3, r4
 811dc38:	b29a      	uxth	r2, r3
 811dc3a:	4b98      	ldr	r3, [pc, #608]	@ (811de9c <tcp_receive+0xb04>)
 811dc3c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 811dc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc40:	613b      	str	r3, [r7, #16]
              next = next->next;
 811dc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc44:	681b      	ldr	r3, [r3, #0]
 811dc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 811dc48:	6938      	ldr	r0, [r7, #16]
 811dc4a:	f7fd fc76 	bl	811b53a <tcp_seg_free>
            while (next &&
 811dc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc50:	2b00      	cmp	r3, #0
 811dc52:	d00e      	beq.n	811dc72 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 811dc54:	4b91      	ldr	r3, [pc, #580]	@ (811de9c <tcp_receive+0xb04>)
 811dc56:	881b      	ldrh	r3, [r3, #0]
 811dc58:	461a      	mov	r2, r3
 811dc5a:	4b91      	ldr	r3, [pc, #580]	@ (811dea0 <tcp_receive+0xb08>)
 811dc5c:	681b      	ldr	r3, [r3, #0]
 811dc5e:	441a      	add	r2, r3
 811dc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc62:	68db      	ldr	r3, [r3, #12]
 811dc64:	685b      	ldr	r3, [r3, #4]
 811dc66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 811dc68:	8909      	ldrh	r1, [r1, #8]
 811dc6a:	440b      	add	r3, r1
 811dc6c:	1ad3      	subs	r3, r2, r3
            while (next &&
 811dc6e:	2b00      	cmp	r3, #0
 811dc70:	da9b      	bge.n	811dbaa <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 811dc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc74:	2b00      	cmp	r3, #0
 811dc76:	d059      	beq.n	811dd2c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 811dc78:	4b88      	ldr	r3, [pc, #544]	@ (811de9c <tcp_receive+0xb04>)
 811dc7a:	881b      	ldrh	r3, [r3, #0]
 811dc7c:	461a      	mov	r2, r3
 811dc7e:	4b88      	ldr	r3, [pc, #544]	@ (811dea0 <tcp_receive+0xb08>)
 811dc80:	681b      	ldr	r3, [r3, #0]
 811dc82:	441a      	add	r2, r3
 811dc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc86:	68db      	ldr	r3, [r3, #12]
 811dc88:	685b      	ldr	r3, [r3, #4]
 811dc8a:	1ad3      	subs	r3, r2, r3
            if (next &&
 811dc8c:	2b00      	cmp	r3, #0
 811dc8e:	dd4d      	ble.n	811dd2c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 811dc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dc92:	68db      	ldr	r3, [r3, #12]
 811dc94:	685b      	ldr	r3, [r3, #4]
 811dc96:	b29a      	uxth	r2, r3
 811dc98:	4b81      	ldr	r3, [pc, #516]	@ (811dea0 <tcp_receive+0xb08>)
 811dc9a:	681b      	ldr	r3, [r3, #0]
 811dc9c:	b29b      	uxth	r3, r3
 811dc9e:	1ad3      	subs	r3, r2, r3
 811dca0:	b29a      	uxth	r2, r3
 811dca2:	4b80      	ldr	r3, [pc, #512]	@ (811dea4 <tcp_receive+0xb0c>)
 811dca4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811dca6:	4b7f      	ldr	r3, [pc, #508]	@ (811dea4 <tcp_receive+0xb0c>)
 811dca8:	68db      	ldr	r3, [r3, #12]
 811dcaa:	899b      	ldrh	r3, [r3, #12]
 811dcac:	b29b      	uxth	r3, r3
 811dcae:	4618      	mov	r0, r3
 811dcb0:	f7f6 f81c 	bl	8113cec <lwip_htons>
 811dcb4:	4603      	mov	r3, r0
 811dcb6:	b2db      	uxtb	r3, r3
 811dcb8:	f003 0302 	and.w	r3, r3, #2
 811dcbc:	2b00      	cmp	r3, #0
 811dcbe:	d005      	beq.n	811dccc <tcp_receive+0x934>
                inseg.len -= 1;
 811dcc0:	4b78      	ldr	r3, [pc, #480]	@ (811dea4 <tcp_receive+0xb0c>)
 811dcc2:	891b      	ldrh	r3, [r3, #8]
 811dcc4:	3b01      	subs	r3, #1
 811dcc6:	b29a      	uxth	r2, r3
 811dcc8:	4b76      	ldr	r3, [pc, #472]	@ (811dea4 <tcp_receive+0xb0c>)
 811dcca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 811dccc:	4b75      	ldr	r3, [pc, #468]	@ (811dea4 <tcp_receive+0xb0c>)
 811dcce:	685b      	ldr	r3, [r3, #4]
 811dcd0:	4a74      	ldr	r2, [pc, #464]	@ (811dea4 <tcp_receive+0xb0c>)
 811dcd2:	8912      	ldrh	r2, [r2, #8]
 811dcd4:	4611      	mov	r1, r2
 811dcd6:	4618      	mov	r0, r3
 811dcd8:	f7fb fcc4 	bl	8119664 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 811dcdc:	4b71      	ldr	r3, [pc, #452]	@ (811dea4 <tcp_receive+0xb0c>)
 811dcde:	891c      	ldrh	r4, [r3, #8]
 811dce0:	4b70      	ldr	r3, [pc, #448]	@ (811dea4 <tcp_receive+0xb0c>)
 811dce2:	68db      	ldr	r3, [r3, #12]
 811dce4:	899b      	ldrh	r3, [r3, #12]
 811dce6:	b29b      	uxth	r3, r3
 811dce8:	4618      	mov	r0, r3
 811dcea:	f7f5 ffff 	bl	8113cec <lwip_htons>
 811dcee:	4603      	mov	r3, r0
 811dcf0:	b2db      	uxtb	r3, r3
 811dcf2:	f003 0303 	and.w	r3, r3, #3
 811dcf6:	2b00      	cmp	r3, #0
 811dcf8:	d001      	beq.n	811dcfe <tcp_receive+0x966>
 811dcfa:	2301      	movs	r3, #1
 811dcfc:	e000      	b.n	811dd00 <tcp_receive+0x968>
 811dcfe:	2300      	movs	r3, #0
 811dd00:	4423      	add	r3, r4
 811dd02:	b29a      	uxth	r2, r3
 811dd04:	4b65      	ldr	r3, [pc, #404]	@ (811de9c <tcp_receive+0xb04>)
 811dd06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 811dd08:	4b64      	ldr	r3, [pc, #400]	@ (811de9c <tcp_receive+0xb04>)
 811dd0a:	881b      	ldrh	r3, [r3, #0]
 811dd0c:	461a      	mov	r2, r3
 811dd0e:	4b64      	ldr	r3, [pc, #400]	@ (811dea0 <tcp_receive+0xb08>)
 811dd10:	681b      	ldr	r3, [r3, #0]
 811dd12:	441a      	add	r2, r3
 811dd14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811dd16:	68db      	ldr	r3, [r3, #12]
 811dd18:	685b      	ldr	r3, [r3, #4]
 811dd1a:	429a      	cmp	r2, r3
 811dd1c:	d006      	beq.n	811dd2c <tcp_receive+0x994>
 811dd1e:	4b62      	ldr	r3, [pc, #392]	@ (811dea8 <tcp_receive+0xb10>)
 811dd20:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 811dd24:	4961      	ldr	r1, [pc, #388]	@ (811deac <tcp_receive+0xb14>)
 811dd26:	4862      	ldr	r0, [pc, #392]	@ (811deb0 <tcp_receive+0xb18>)
 811dd28:	f004 f82c 	bl	8121d84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 811dd2c:	687b      	ldr	r3, [r7, #4]
 811dd2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811dd30:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 811dd32:	4b5a      	ldr	r3, [pc, #360]	@ (811de9c <tcp_receive+0xb04>)
 811dd34:	881b      	ldrh	r3, [r3, #0]
 811dd36:	461a      	mov	r2, r3
 811dd38:	4b59      	ldr	r3, [pc, #356]	@ (811dea0 <tcp_receive+0xb08>)
 811dd3a:	681b      	ldr	r3, [r3, #0]
 811dd3c:	441a      	add	r2, r3
 811dd3e:	687b      	ldr	r3, [r7, #4]
 811dd40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 811dd42:	687b      	ldr	r3, [r7, #4]
 811dd44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811dd46:	4b55      	ldr	r3, [pc, #340]	@ (811de9c <tcp_receive+0xb04>)
 811dd48:	881b      	ldrh	r3, [r3, #0]
 811dd4a:	429a      	cmp	r2, r3
 811dd4c:	d206      	bcs.n	811dd5c <tcp_receive+0x9c4>
 811dd4e:	4b56      	ldr	r3, [pc, #344]	@ (811dea8 <tcp_receive+0xb10>)
 811dd50:	f240 6207 	movw	r2, #1543	@ 0x607
 811dd54:	4957      	ldr	r1, [pc, #348]	@ (811deb4 <tcp_receive+0xb1c>)
 811dd56:	4856      	ldr	r0, [pc, #344]	@ (811deb0 <tcp_receive+0xb18>)
 811dd58:	f004 f814 	bl	8121d84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 811dd5c:	687b      	ldr	r3, [r7, #4]
 811dd5e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811dd60:	4b4e      	ldr	r3, [pc, #312]	@ (811de9c <tcp_receive+0xb04>)
 811dd62:	881b      	ldrh	r3, [r3, #0]
 811dd64:	1ad3      	subs	r3, r2, r3
 811dd66:	b29a      	uxth	r2, r3
 811dd68:	687b      	ldr	r3, [r7, #4]
 811dd6a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 811dd6c:	6878      	ldr	r0, [r7, #4]
 811dd6e:	f7fc fda1 	bl	811a8b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 811dd72:	4b4c      	ldr	r3, [pc, #304]	@ (811dea4 <tcp_receive+0xb0c>)
 811dd74:	685b      	ldr	r3, [r3, #4]
 811dd76:	891b      	ldrh	r3, [r3, #8]
 811dd78:	2b00      	cmp	r3, #0
 811dd7a:	d006      	beq.n	811dd8a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 811dd7c:	4b49      	ldr	r3, [pc, #292]	@ (811dea4 <tcp_receive+0xb0c>)
 811dd7e:	685b      	ldr	r3, [r3, #4]
 811dd80:	4a4d      	ldr	r2, [pc, #308]	@ (811deb8 <tcp_receive+0xb20>)
 811dd82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 811dd84:	4b47      	ldr	r3, [pc, #284]	@ (811dea4 <tcp_receive+0xb0c>)
 811dd86:	2200      	movs	r2, #0
 811dd88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811dd8a:	4b46      	ldr	r3, [pc, #280]	@ (811dea4 <tcp_receive+0xb0c>)
 811dd8c:	68db      	ldr	r3, [r3, #12]
 811dd8e:	899b      	ldrh	r3, [r3, #12]
 811dd90:	b29b      	uxth	r3, r3
 811dd92:	4618      	mov	r0, r3
 811dd94:	f7f5 ffaa 	bl	8113cec <lwip_htons>
 811dd98:	4603      	mov	r3, r0
 811dd9a:	b2db      	uxtb	r3, r3
 811dd9c:	f003 0301 	and.w	r3, r3, #1
 811dda0:	2b00      	cmp	r3, #0
 811dda2:	f000 80b8 	beq.w	811df16 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 811dda6:	4b45      	ldr	r3, [pc, #276]	@ (811debc <tcp_receive+0xb24>)
 811dda8:	781b      	ldrb	r3, [r3, #0]
 811ddaa:	f043 0320 	orr.w	r3, r3, #32
 811ddae:	b2da      	uxtb	r2, r3
 811ddb0:	4b42      	ldr	r3, [pc, #264]	@ (811debc <tcp_receive+0xb24>)
 811ddb2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 811ddb4:	e0af      	b.n	811df16 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 811ddb6:	687b      	ldr	r3, [r7, #4]
 811ddb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ddba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 811ddbc:	687b      	ldr	r3, [r7, #4]
 811ddbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811ddc0:	68db      	ldr	r3, [r3, #12]
 811ddc2:	685b      	ldr	r3, [r3, #4]
 811ddc4:	4a36      	ldr	r2, [pc, #216]	@ (811dea0 <tcp_receive+0xb08>)
 811ddc6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 811ddc8:	68bb      	ldr	r3, [r7, #8]
 811ddca:	891b      	ldrh	r3, [r3, #8]
 811ddcc:	461c      	mov	r4, r3
 811ddce:	68bb      	ldr	r3, [r7, #8]
 811ddd0:	68db      	ldr	r3, [r3, #12]
 811ddd2:	899b      	ldrh	r3, [r3, #12]
 811ddd4:	b29b      	uxth	r3, r3
 811ddd6:	4618      	mov	r0, r3
 811ddd8:	f7f5 ff88 	bl	8113cec <lwip_htons>
 811dddc:	4603      	mov	r3, r0
 811ddde:	b2db      	uxtb	r3, r3
 811dde0:	f003 0303 	and.w	r3, r3, #3
 811dde4:	2b00      	cmp	r3, #0
 811dde6:	d001      	beq.n	811ddec <tcp_receive+0xa54>
 811dde8:	2301      	movs	r3, #1
 811ddea:	e000      	b.n	811ddee <tcp_receive+0xa56>
 811ddec:	2300      	movs	r3, #0
 811ddee:	191a      	adds	r2, r3, r4
 811ddf0:	687b      	ldr	r3, [r7, #4]
 811ddf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ddf4:	441a      	add	r2, r3
 811ddf6:	687b      	ldr	r3, [r7, #4]
 811ddf8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 811ddfa:	687b      	ldr	r3, [r7, #4]
 811ddfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811ddfe:	461c      	mov	r4, r3
 811de00:	68bb      	ldr	r3, [r7, #8]
 811de02:	891b      	ldrh	r3, [r3, #8]
 811de04:	461d      	mov	r5, r3
 811de06:	68bb      	ldr	r3, [r7, #8]
 811de08:	68db      	ldr	r3, [r3, #12]
 811de0a:	899b      	ldrh	r3, [r3, #12]
 811de0c:	b29b      	uxth	r3, r3
 811de0e:	4618      	mov	r0, r3
 811de10:	f7f5 ff6c 	bl	8113cec <lwip_htons>
 811de14:	4603      	mov	r3, r0
 811de16:	b2db      	uxtb	r3, r3
 811de18:	f003 0303 	and.w	r3, r3, #3
 811de1c:	2b00      	cmp	r3, #0
 811de1e:	d001      	beq.n	811de24 <tcp_receive+0xa8c>
 811de20:	2301      	movs	r3, #1
 811de22:	e000      	b.n	811de26 <tcp_receive+0xa8e>
 811de24:	2300      	movs	r3, #0
 811de26:	442b      	add	r3, r5
 811de28:	429c      	cmp	r4, r3
 811de2a:	d206      	bcs.n	811de3a <tcp_receive+0xaa2>
 811de2c:	4b1e      	ldr	r3, [pc, #120]	@ (811dea8 <tcp_receive+0xb10>)
 811de2e:	f240 622b 	movw	r2, #1579	@ 0x62b
 811de32:	4923      	ldr	r1, [pc, #140]	@ (811dec0 <tcp_receive+0xb28>)
 811de34:	481e      	ldr	r0, [pc, #120]	@ (811deb0 <tcp_receive+0xb18>)
 811de36:	f003 ffa5 	bl	8121d84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 811de3a:	68bb      	ldr	r3, [r7, #8]
 811de3c:	891b      	ldrh	r3, [r3, #8]
 811de3e:	461c      	mov	r4, r3
 811de40:	68bb      	ldr	r3, [r7, #8]
 811de42:	68db      	ldr	r3, [r3, #12]
 811de44:	899b      	ldrh	r3, [r3, #12]
 811de46:	b29b      	uxth	r3, r3
 811de48:	4618      	mov	r0, r3
 811de4a:	f7f5 ff4f 	bl	8113cec <lwip_htons>
 811de4e:	4603      	mov	r3, r0
 811de50:	b2db      	uxtb	r3, r3
 811de52:	f003 0303 	and.w	r3, r3, #3
 811de56:	2b00      	cmp	r3, #0
 811de58:	d001      	beq.n	811de5e <tcp_receive+0xac6>
 811de5a:	2301      	movs	r3, #1
 811de5c:	e000      	b.n	811de60 <tcp_receive+0xac8>
 811de5e:	2300      	movs	r3, #0
 811de60:	1919      	adds	r1, r3, r4
 811de62:	687b      	ldr	r3, [r7, #4]
 811de64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811de66:	b28b      	uxth	r3, r1
 811de68:	1ad3      	subs	r3, r2, r3
 811de6a:	b29a      	uxth	r2, r3
 811de6c:	687b      	ldr	r3, [r7, #4]
 811de6e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 811de70:	6878      	ldr	r0, [r7, #4]
 811de72:	f7fc fd1f 	bl	811a8b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 811de76:	68bb      	ldr	r3, [r7, #8]
 811de78:	685b      	ldr	r3, [r3, #4]
 811de7a:	891b      	ldrh	r3, [r3, #8]
 811de7c:	2b00      	cmp	r3, #0
 811de7e:	d028      	beq.n	811ded2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 811de80:	4b0d      	ldr	r3, [pc, #52]	@ (811deb8 <tcp_receive+0xb20>)
 811de82:	681b      	ldr	r3, [r3, #0]
 811de84:	2b00      	cmp	r3, #0
 811de86:	d01d      	beq.n	811dec4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 811de88:	4b0b      	ldr	r3, [pc, #44]	@ (811deb8 <tcp_receive+0xb20>)
 811de8a:	681a      	ldr	r2, [r3, #0]
 811de8c:	68bb      	ldr	r3, [r7, #8]
 811de8e:	685b      	ldr	r3, [r3, #4]
 811de90:	4619      	mov	r1, r3
 811de92:	4610      	mov	r0, r2
 811de94:	f7fb fe38 	bl	8119b08 <pbuf_cat>
 811de98:	e018      	b.n	811decc <tcp_receive+0xb34>
 811de9a:	bf00      	nop
 811de9c:	240126e2 	.word	0x240126e2
 811dea0:	240126d8 	.word	0x240126d8
 811dea4:	240126b8 	.word	0x240126b8
 811dea8:	081275dc 	.word	0x081275dc
 811deac:	081279f4 	.word	0x081279f4
 811deb0:	08127660 	.word	0x08127660
 811deb4:	08127a30 	.word	0x08127a30
 811deb8:	240126e8 	.word	0x240126e8
 811debc:	240126e5 	.word	0x240126e5
 811dec0:	08127a50 	.word	0x08127a50
            } else {
              recv_data = cseg->p;
 811dec4:	68bb      	ldr	r3, [r7, #8]
 811dec6:	685b      	ldr	r3, [r3, #4]
 811dec8:	4a70      	ldr	r2, [pc, #448]	@ (811e08c <tcp_receive+0xcf4>)
 811deca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 811decc:	68bb      	ldr	r3, [r7, #8]
 811dece:	2200      	movs	r2, #0
 811ded0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811ded2:	68bb      	ldr	r3, [r7, #8]
 811ded4:	68db      	ldr	r3, [r3, #12]
 811ded6:	899b      	ldrh	r3, [r3, #12]
 811ded8:	b29b      	uxth	r3, r3
 811deda:	4618      	mov	r0, r3
 811dedc:	f7f5 ff06 	bl	8113cec <lwip_htons>
 811dee0:	4603      	mov	r3, r0
 811dee2:	b2db      	uxtb	r3, r3
 811dee4:	f003 0301 	and.w	r3, r3, #1
 811dee8:	2b00      	cmp	r3, #0
 811deea:	d00d      	beq.n	811df08 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 811deec:	4b68      	ldr	r3, [pc, #416]	@ (811e090 <tcp_receive+0xcf8>)
 811deee:	781b      	ldrb	r3, [r3, #0]
 811def0:	f043 0320 	orr.w	r3, r3, #32
 811def4:	b2da      	uxtb	r2, r3
 811def6:	4b66      	ldr	r3, [pc, #408]	@ (811e090 <tcp_receive+0xcf8>)
 811def8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 811defa:	687b      	ldr	r3, [r7, #4]
 811defc:	7d1b      	ldrb	r3, [r3, #20]
 811defe:	2b04      	cmp	r3, #4
 811df00:	d102      	bne.n	811df08 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 811df02:	687b      	ldr	r3, [r7, #4]
 811df04:	2207      	movs	r2, #7
 811df06:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 811df08:	68bb      	ldr	r3, [r7, #8]
 811df0a:	681a      	ldr	r2, [r3, #0]
 811df0c:	687b      	ldr	r3, [r7, #4]
 811df0e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 811df10:	68b8      	ldr	r0, [r7, #8]
 811df12:	f7fd fb12 	bl	811b53a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 811df16:	687b      	ldr	r3, [r7, #4]
 811df18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811df1a:	2b00      	cmp	r3, #0
 811df1c:	d008      	beq.n	811df30 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 811df1e:	687b      	ldr	r3, [r7, #4]
 811df20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811df22:	68db      	ldr	r3, [r3, #12]
 811df24:	685a      	ldr	r2, [r3, #4]
 811df26:	687b      	ldr	r3, [r7, #4]
 811df28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 811df2a:	429a      	cmp	r2, r3
 811df2c:	f43f af43 	beq.w	811ddb6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 811df30:	687b      	ldr	r3, [r7, #4]
 811df32:	8b5b      	ldrh	r3, [r3, #26]
 811df34:	f003 0301 	and.w	r3, r3, #1
 811df38:	2b00      	cmp	r3, #0
 811df3a:	d00e      	beq.n	811df5a <tcp_receive+0xbc2>
 811df3c:	687b      	ldr	r3, [r7, #4]
 811df3e:	8b5b      	ldrh	r3, [r3, #26]
 811df40:	f023 0301 	bic.w	r3, r3, #1
 811df44:	b29a      	uxth	r2, r3
 811df46:	687b      	ldr	r3, [r7, #4]
 811df48:	835a      	strh	r2, [r3, #26]
 811df4a:	687b      	ldr	r3, [r7, #4]
 811df4c:	8b5b      	ldrh	r3, [r3, #26]
 811df4e:	f043 0302 	orr.w	r3, r3, #2
 811df52:	b29a      	uxth	r2, r3
 811df54:	687b      	ldr	r3, [r7, #4]
 811df56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811df58:	e187      	b.n	811e26a <tcp_receive+0xed2>
        tcp_ack(pcb);
 811df5a:	687b      	ldr	r3, [r7, #4]
 811df5c:	8b5b      	ldrh	r3, [r3, #26]
 811df5e:	f043 0301 	orr.w	r3, r3, #1
 811df62:	b29a      	uxth	r2, r3
 811df64:	687b      	ldr	r3, [r7, #4]
 811df66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811df68:	e17f      	b.n	811e26a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 811df6a:	687b      	ldr	r3, [r7, #4]
 811df6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811df6e:	2b00      	cmp	r3, #0
 811df70:	d106      	bne.n	811df80 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 811df72:	4848      	ldr	r0, [pc, #288]	@ (811e094 <tcp_receive+0xcfc>)
 811df74:	f7fd fafa 	bl	811b56c <tcp_seg_copy>
 811df78:	4602      	mov	r2, r0
 811df7a:	687b      	ldr	r3, [r7, #4]
 811df7c:	675a      	str	r2, [r3, #116]	@ 0x74
 811df7e:	e16c      	b.n	811e25a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 811df80:	2300      	movs	r3, #0
 811df82:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811df84:	687b      	ldr	r3, [r7, #4]
 811df86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811df88:	63bb      	str	r3, [r7, #56]	@ 0x38
 811df8a:	e156      	b.n	811e23a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 811df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811df8e:	68db      	ldr	r3, [r3, #12]
 811df90:	685a      	ldr	r2, [r3, #4]
 811df92:	4b41      	ldr	r3, [pc, #260]	@ (811e098 <tcp_receive+0xd00>)
 811df94:	681b      	ldr	r3, [r3, #0]
 811df96:	429a      	cmp	r2, r3
 811df98:	d11d      	bne.n	811dfd6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 811df9a:	4b3e      	ldr	r3, [pc, #248]	@ (811e094 <tcp_receive+0xcfc>)
 811df9c:	891a      	ldrh	r2, [r3, #8]
 811df9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dfa0:	891b      	ldrh	r3, [r3, #8]
 811dfa2:	429a      	cmp	r2, r3
 811dfa4:	f240 814e 	bls.w	811e244 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811dfa8:	483a      	ldr	r0, [pc, #232]	@ (811e094 <tcp_receive+0xcfc>)
 811dfaa:	f7fd fadf 	bl	811b56c <tcp_seg_copy>
 811dfae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 811dfb0:	697b      	ldr	r3, [r7, #20]
 811dfb2:	2b00      	cmp	r3, #0
 811dfb4:	f000 8148 	beq.w	811e248 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 811dfb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dfba:	2b00      	cmp	r3, #0
 811dfbc:	d003      	beq.n	811dfc6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 811dfbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dfc0:	697a      	ldr	r2, [r7, #20]
 811dfc2:	601a      	str	r2, [r3, #0]
 811dfc4:	e002      	b.n	811dfcc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 811dfc6:	687b      	ldr	r3, [r7, #4]
 811dfc8:	697a      	ldr	r2, [r7, #20]
 811dfca:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 811dfcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811dfce:	6978      	ldr	r0, [r7, #20]
 811dfd0:	f7ff f8de 	bl	811d190 <tcp_oos_insert_segment>
                }
                break;
 811dfd4:	e138      	b.n	811e248 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 811dfd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dfd8:	2b00      	cmp	r3, #0
 811dfda:	d117      	bne.n	811e00c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 811dfdc:	4b2e      	ldr	r3, [pc, #184]	@ (811e098 <tcp_receive+0xd00>)
 811dfde:	681a      	ldr	r2, [r3, #0]
 811dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dfe2:	68db      	ldr	r3, [r3, #12]
 811dfe4:	685b      	ldr	r3, [r3, #4]
 811dfe6:	1ad3      	subs	r3, r2, r3
 811dfe8:	2b00      	cmp	r3, #0
 811dfea:	da57      	bge.n	811e09c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811dfec:	4829      	ldr	r0, [pc, #164]	@ (811e094 <tcp_receive+0xcfc>)
 811dfee:	f7fd fabd 	bl	811b56c <tcp_seg_copy>
 811dff2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 811dff4:	69bb      	ldr	r3, [r7, #24]
 811dff6:	2b00      	cmp	r3, #0
 811dff8:	f000 8128 	beq.w	811e24c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 811dffc:	687b      	ldr	r3, [r7, #4]
 811dffe:	69ba      	ldr	r2, [r7, #24]
 811e000:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 811e002:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811e004:	69b8      	ldr	r0, [r7, #24]
 811e006:	f7ff f8c3 	bl	811d190 <tcp_oos_insert_segment>
                  }
                  break;
 811e00a:	e11f      	b.n	811e24c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 811e00c:	4b22      	ldr	r3, [pc, #136]	@ (811e098 <tcp_receive+0xd00>)
 811e00e:	681a      	ldr	r2, [r3, #0]
 811e010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e012:	68db      	ldr	r3, [r3, #12]
 811e014:	685b      	ldr	r3, [r3, #4]
 811e016:	1ad3      	subs	r3, r2, r3
 811e018:	3b01      	subs	r3, #1
 811e01a:	2b00      	cmp	r3, #0
 811e01c:	db3e      	blt.n	811e09c <tcp_receive+0xd04>
 811e01e:	4b1e      	ldr	r3, [pc, #120]	@ (811e098 <tcp_receive+0xd00>)
 811e020:	681a      	ldr	r2, [r3, #0]
 811e022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e024:	68db      	ldr	r3, [r3, #12]
 811e026:	685b      	ldr	r3, [r3, #4]
 811e028:	1ad3      	subs	r3, r2, r3
 811e02a:	3301      	adds	r3, #1
 811e02c:	2b00      	cmp	r3, #0
 811e02e:	dc35      	bgt.n	811e09c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811e030:	4818      	ldr	r0, [pc, #96]	@ (811e094 <tcp_receive+0xcfc>)
 811e032:	f7fd fa9b 	bl	811b56c <tcp_seg_copy>
 811e036:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 811e038:	69fb      	ldr	r3, [r7, #28]
 811e03a:	2b00      	cmp	r3, #0
 811e03c:	f000 8108 	beq.w	811e250 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 811e040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e042:	68db      	ldr	r3, [r3, #12]
 811e044:	685b      	ldr	r3, [r3, #4]
 811e046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811e048:	8912      	ldrh	r2, [r2, #8]
 811e04a:	441a      	add	r2, r3
 811e04c:	4b12      	ldr	r3, [pc, #72]	@ (811e098 <tcp_receive+0xd00>)
 811e04e:	681b      	ldr	r3, [r3, #0]
 811e050:	1ad3      	subs	r3, r2, r3
 811e052:	2b00      	cmp	r3, #0
 811e054:	dd12      	ble.n	811e07c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 811e056:	4b10      	ldr	r3, [pc, #64]	@ (811e098 <tcp_receive+0xd00>)
 811e058:	681b      	ldr	r3, [r3, #0]
 811e05a:	b29a      	uxth	r2, r3
 811e05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e05e:	68db      	ldr	r3, [r3, #12]
 811e060:	685b      	ldr	r3, [r3, #4]
 811e062:	b29b      	uxth	r3, r3
 811e064:	1ad3      	subs	r3, r2, r3
 811e066:	b29a      	uxth	r2, r3
 811e068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e06a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 811e06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e06e:	685a      	ldr	r2, [r3, #4]
 811e070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e072:	891b      	ldrh	r3, [r3, #8]
 811e074:	4619      	mov	r1, r3
 811e076:	4610      	mov	r0, r2
 811e078:	f7fb faf4 	bl	8119664 <pbuf_realloc>
                    }
                    prev->next = cseg;
 811e07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e07e:	69fa      	ldr	r2, [r7, #28]
 811e080:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 811e082:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811e084:	69f8      	ldr	r0, [r7, #28]
 811e086:	f7ff f883 	bl	811d190 <tcp_oos_insert_segment>
                  }
                  break;
 811e08a:	e0e1      	b.n	811e250 <tcp_receive+0xeb8>
 811e08c:	240126e8 	.word	0x240126e8
 811e090:	240126e5 	.word	0x240126e5
 811e094:	240126b8 	.word	0x240126b8
 811e098:	240126d8 	.word	0x240126d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 811e09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e09e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 811e0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e0a2:	681b      	ldr	r3, [r3, #0]
 811e0a4:	2b00      	cmp	r3, #0
 811e0a6:	f040 80c5 	bne.w	811e234 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 811e0aa:	4b7f      	ldr	r3, [pc, #508]	@ (811e2a8 <tcp_receive+0xf10>)
 811e0ac:	681a      	ldr	r2, [r3, #0]
 811e0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e0b0:	68db      	ldr	r3, [r3, #12]
 811e0b2:	685b      	ldr	r3, [r3, #4]
 811e0b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 811e0b6:	2b00      	cmp	r3, #0
 811e0b8:	f340 80bc 	ble.w	811e234 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811e0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e0be:	68db      	ldr	r3, [r3, #12]
 811e0c0:	899b      	ldrh	r3, [r3, #12]
 811e0c2:	b29b      	uxth	r3, r3
 811e0c4:	4618      	mov	r0, r3
 811e0c6:	f7f5 fe11 	bl	8113cec <lwip_htons>
 811e0ca:	4603      	mov	r3, r0
 811e0cc:	b2db      	uxtb	r3, r3
 811e0ce:	f003 0301 	and.w	r3, r3, #1
 811e0d2:	2b00      	cmp	r3, #0
 811e0d4:	f040 80be 	bne.w	811e254 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 811e0d8:	4874      	ldr	r0, [pc, #464]	@ (811e2ac <tcp_receive+0xf14>)
 811e0da:	f7fd fa47 	bl	811b56c <tcp_seg_copy>
 811e0de:	4602      	mov	r2, r0
 811e0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e0e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 811e0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e0e6:	681b      	ldr	r3, [r3, #0]
 811e0e8:	2b00      	cmp	r3, #0
 811e0ea:	f000 80b5 	beq.w	811e258 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 811e0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e0f0:	68db      	ldr	r3, [r3, #12]
 811e0f2:	685b      	ldr	r3, [r3, #4]
 811e0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 811e0f6:	8912      	ldrh	r2, [r2, #8]
 811e0f8:	441a      	add	r2, r3
 811e0fa:	4b6b      	ldr	r3, [pc, #428]	@ (811e2a8 <tcp_receive+0xf10>)
 811e0fc:	681b      	ldr	r3, [r3, #0]
 811e0fe:	1ad3      	subs	r3, r2, r3
 811e100:	2b00      	cmp	r3, #0
 811e102:	dd12      	ble.n	811e12a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 811e104:	4b68      	ldr	r3, [pc, #416]	@ (811e2a8 <tcp_receive+0xf10>)
 811e106:	681b      	ldr	r3, [r3, #0]
 811e108:	b29a      	uxth	r2, r3
 811e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e10c:	68db      	ldr	r3, [r3, #12]
 811e10e:	685b      	ldr	r3, [r3, #4]
 811e110:	b29b      	uxth	r3, r3
 811e112:	1ad3      	subs	r3, r2, r3
 811e114:	b29a      	uxth	r2, r3
 811e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e118:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 811e11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e11c:	685a      	ldr	r2, [r3, #4]
 811e11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e120:	891b      	ldrh	r3, [r3, #8]
 811e122:	4619      	mov	r1, r3
 811e124:	4610      	mov	r0, r2
 811e126:	f7fb fa9d 	bl	8119664 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 811e12a:	4b61      	ldr	r3, [pc, #388]	@ (811e2b0 <tcp_receive+0xf18>)
 811e12c:	881b      	ldrh	r3, [r3, #0]
 811e12e:	461a      	mov	r2, r3
 811e130:	4b5d      	ldr	r3, [pc, #372]	@ (811e2a8 <tcp_receive+0xf10>)
 811e132:	681b      	ldr	r3, [r3, #0]
 811e134:	441a      	add	r2, r3
 811e136:	687b      	ldr	r3, [r7, #4]
 811e138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e13a:	6879      	ldr	r1, [r7, #4]
 811e13c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811e13e:	440b      	add	r3, r1
 811e140:	1ad3      	subs	r3, r2, r3
 811e142:	2b00      	cmp	r3, #0
 811e144:	f340 8088 	ble.w	811e258 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 811e148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e14a:	681b      	ldr	r3, [r3, #0]
 811e14c:	68db      	ldr	r3, [r3, #12]
 811e14e:	899b      	ldrh	r3, [r3, #12]
 811e150:	b29b      	uxth	r3, r3
 811e152:	4618      	mov	r0, r3
 811e154:	f7f5 fdca 	bl	8113cec <lwip_htons>
 811e158:	4603      	mov	r3, r0
 811e15a:	b2db      	uxtb	r3, r3
 811e15c:	f003 0301 	and.w	r3, r3, #1
 811e160:	2b00      	cmp	r3, #0
 811e162:	d021      	beq.n	811e1a8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 811e164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e166:	681b      	ldr	r3, [r3, #0]
 811e168:	68db      	ldr	r3, [r3, #12]
 811e16a:	899b      	ldrh	r3, [r3, #12]
 811e16c:	b29b      	uxth	r3, r3
 811e16e:	b21b      	sxth	r3, r3
 811e170:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811e174:	b21c      	sxth	r4, r3
 811e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e178:	681b      	ldr	r3, [r3, #0]
 811e17a:	68db      	ldr	r3, [r3, #12]
 811e17c:	899b      	ldrh	r3, [r3, #12]
 811e17e:	b29b      	uxth	r3, r3
 811e180:	4618      	mov	r0, r3
 811e182:	f7f5 fdb3 	bl	8113cec <lwip_htons>
 811e186:	4603      	mov	r3, r0
 811e188:	b2db      	uxtb	r3, r3
 811e18a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811e18e:	b29b      	uxth	r3, r3
 811e190:	4618      	mov	r0, r3
 811e192:	f7f5 fdab 	bl	8113cec <lwip_htons>
 811e196:	4603      	mov	r3, r0
 811e198:	b21b      	sxth	r3, r3
 811e19a:	4323      	orrs	r3, r4
 811e19c:	b21a      	sxth	r2, r3
 811e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e1a0:	681b      	ldr	r3, [r3, #0]
 811e1a2:	68db      	ldr	r3, [r3, #12]
 811e1a4:	b292      	uxth	r2, r2
 811e1a6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 811e1a8:	687b      	ldr	r3, [r7, #4]
 811e1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e1ac:	b29a      	uxth	r2, r3
 811e1ae:	687b      	ldr	r3, [r7, #4]
 811e1b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811e1b2:	4413      	add	r3, r2
 811e1b4:	b299      	uxth	r1, r3
 811e1b6:	4b3c      	ldr	r3, [pc, #240]	@ (811e2a8 <tcp_receive+0xf10>)
 811e1b8:	681b      	ldr	r3, [r3, #0]
 811e1ba:	b29a      	uxth	r2, r3
 811e1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e1be:	681b      	ldr	r3, [r3, #0]
 811e1c0:	1a8a      	subs	r2, r1, r2
 811e1c2:	b292      	uxth	r2, r2
 811e1c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 811e1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e1c8:	681b      	ldr	r3, [r3, #0]
 811e1ca:	685a      	ldr	r2, [r3, #4]
 811e1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e1ce:	681b      	ldr	r3, [r3, #0]
 811e1d0:	891b      	ldrh	r3, [r3, #8]
 811e1d2:	4619      	mov	r1, r3
 811e1d4:	4610      	mov	r0, r2
 811e1d6:	f7fb fa45 	bl	8119664 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 811e1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e1dc:	681b      	ldr	r3, [r3, #0]
 811e1de:	891c      	ldrh	r4, [r3, #8]
 811e1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e1e2:	681b      	ldr	r3, [r3, #0]
 811e1e4:	68db      	ldr	r3, [r3, #12]
 811e1e6:	899b      	ldrh	r3, [r3, #12]
 811e1e8:	b29b      	uxth	r3, r3
 811e1ea:	4618      	mov	r0, r3
 811e1ec:	f7f5 fd7e 	bl	8113cec <lwip_htons>
 811e1f0:	4603      	mov	r3, r0
 811e1f2:	b2db      	uxtb	r3, r3
 811e1f4:	f003 0303 	and.w	r3, r3, #3
 811e1f8:	2b00      	cmp	r3, #0
 811e1fa:	d001      	beq.n	811e200 <tcp_receive+0xe68>
 811e1fc:	2301      	movs	r3, #1
 811e1fe:	e000      	b.n	811e202 <tcp_receive+0xe6a>
 811e200:	2300      	movs	r3, #0
 811e202:	4423      	add	r3, r4
 811e204:	b29a      	uxth	r2, r3
 811e206:	4b2a      	ldr	r3, [pc, #168]	@ (811e2b0 <tcp_receive+0xf18>)
 811e208:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811e20a:	4b29      	ldr	r3, [pc, #164]	@ (811e2b0 <tcp_receive+0xf18>)
 811e20c:	881b      	ldrh	r3, [r3, #0]
 811e20e:	461a      	mov	r2, r3
 811e210:	4b25      	ldr	r3, [pc, #148]	@ (811e2a8 <tcp_receive+0xf10>)
 811e212:	681b      	ldr	r3, [r3, #0]
 811e214:	441a      	add	r2, r3
 811e216:	687b      	ldr	r3, [r7, #4]
 811e218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e21a:	6879      	ldr	r1, [r7, #4]
 811e21c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811e21e:	440b      	add	r3, r1
 811e220:	429a      	cmp	r2, r3
 811e222:	d019      	beq.n	811e258 <tcp_receive+0xec0>
 811e224:	4b23      	ldr	r3, [pc, #140]	@ (811e2b4 <tcp_receive+0xf1c>)
 811e226:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 811e22a:	4923      	ldr	r1, [pc, #140]	@ (811e2b8 <tcp_receive+0xf20>)
 811e22c:	4823      	ldr	r0, [pc, #140]	@ (811e2bc <tcp_receive+0xf24>)
 811e22e:	f003 fda9 	bl	8121d84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 811e232:	e011      	b.n	811e258 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811e234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e236:	681b      	ldr	r3, [r3, #0]
 811e238:	63bb      	str	r3, [r7, #56]	@ 0x38
 811e23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e23c:	2b00      	cmp	r3, #0
 811e23e:	f47f aea5 	bne.w	811df8c <tcp_receive+0xbf4>
 811e242:	e00a      	b.n	811e25a <tcp_receive+0xec2>
                break;
 811e244:	bf00      	nop
 811e246:	e008      	b.n	811e25a <tcp_receive+0xec2>
                break;
 811e248:	bf00      	nop
 811e24a:	e006      	b.n	811e25a <tcp_receive+0xec2>
                  break;
 811e24c:	bf00      	nop
 811e24e:	e004      	b.n	811e25a <tcp_receive+0xec2>
                  break;
 811e250:	bf00      	nop
 811e252:	e002      	b.n	811e25a <tcp_receive+0xec2>
                  break;
 811e254:	bf00      	nop
 811e256:	e000      	b.n	811e25a <tcp_receive+0xec2>
                break;
 811e258:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 811e25a:	6878      	ldr	r0, [r7, #4]
 811e25c:	f001 fe8c 	bl	811ff78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 811e260:	e003      	b.n	811e26a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 811e262:	6878      	ldr	r0, [r7, #4]
 811e264:	f001 fe88 	bl	811ff78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811e268:	e01a      	b.n	811e2a0 <tcp_receive+0xf08>
 811e26a:	e019      	b.n	811e2a0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 811e26c:	4b0e      	ldr	r3, [pc, #56]	@ (811e2a8 <tcp_receive+0xf10>)
 811e26e:	681a      	ldr	r2, [r3, #0]
 811e270:	687b      	ldr	r3, [r7, #4]
 811e272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e274:	1ad3      	subs	r3, r2, r3
 811e276:	2b00      	cmp	r3, #0
 811e278:	db0a      	blt.n	811e290 <tcp_receive+0xef8>
 811e27a:	4b0b      	ldr	r3, [pc, #44]	@ (811e2a8 <tcp_receive+0xf10>)
 811e27c:	681a      	ldr	r2, [r3, #0]
 811e27e:	687b      	ldr	r3, [r7, #4]
 811e280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811e282:	6879      	ldr	r1, [r7, #4]
 811e284:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811e286:	440b      	add	r3, r1
 811e288:	1ad3      	subs	r3, r2, r3
 811e28a:	3301      	adds	r3, #1
 811e28c:	2b00      	cmp	r3, #0
 811e28e:	dd07      	ble.n	811e2a0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 811e290:	687b      	ldr	r3, [r7, #4]
 811e292:	8b5b      	ldrh	r3, [r3, #26]
 811e294:	f043 0302 	orr.w	r3, r3, #2
 811e298:	b29a      	uxth	r2, r3
 811e29a:	687b      	ldr	r3, [r7, #4]
 811e29c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 811e29e:	e7ff      	b.n	811e2a0 <tcp_receive+0xf08>
 811e2a0:	bf00      	nop
 811e2a2:	3750      	adds	r7, #80	@ 0x50
 811e2a4:	46bd      	mov	sp, r7
 811e2a6:	bdb0      	pop	{r4, r5, r7, pc}
 811e2a8:	240126d8 	.word	0x240126d8
 811e2ac:	240126b8 	.word	0x240126b8
 811e2b0:	240126e2 	.word	0x240126e2
 811e2b4:	081275dc 	.word	0x081275dc
 811e2b8:	081279bc 	.word	0x081279bc
 811e2bc:	08127660 	.word	0x08127660

0811e2c0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 811e2c0:	b480      	push	{r7}
 811e2c2:	b083      	sub	sp, #12
 811e2c4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 811e2c6:	4b15      	ldr	r3, [pc, #84]	@ (811e31c <tcp_get_next_optbyte+0x5c>)
 811e2c8:	881b      	ldrh	r3, [r3, #0]
 811e2ca:	1c5a      	adds	r2, r3, #1
 811e2cc:	b291      	uxth	r1, r2
 811e2ce:	4a13      	ldr	r2, [pc, #76]	@ (811e31c <tcp_get_next_optbyte+0x5c>)
 811e2d0:	8011      	strh	r1, [r2, #0]
 811e2d2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 811e2d4:	4b12      	ldr	r3, [pc, #72]	@ (811e320 <tcp_get_next_optbyte+0x60>)
 811e2d6:	681b      	ldr	r3, [r3, #0]
 811e2d8:	2b00      	cmp	r3, #0
 811e2da:	d004      	beq.n	811e2e6 <tcp_get_next_optbyte+0x26>
 811e2dc:	4b11      	ldr	r3, [pc, #68]	@ (811e324 <tcp_get_next_optbyte+0x64>)
 811e2de:	881b      	ldrh	r3, [r3, #0]
 811e2e0:	88fa      	ldrh	r2, [r7, #6]
 811e2e2:	429a      	cmp	r2, r3
 811e2e4:	d208      	bcs.n	811e2f8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 811e2e6:	4b10      	ldr	r3, [pc, #64]	@ (811e328 <tcp_get_next_optbyte+0x68>)
 811e2e8:	681b      	ldr	r3, [r3, #0]
 811e2ea:	3314      	adds	r3, #20
 811e2ec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 811e2ee:	88fb      	ldrh	r3, [r7, #6]
 811e2f0:	683a      	ldr	r2, [r7, #0]
 811e2f2:	4413      	add	r3, r2
 811e2f4:	781b      	ldrb	r3, [r3, #0]
 811e2f6:	e00b      	b.n	811e310 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 811e2f8:	88fb      	ldrh	r3, [r7, #6]
 811e2fa:	b2da      	uxtb	r2, r3
 811e2fc:	4b09      	ldr	r3, [pc, #36]	@ (811e324 <tcp_get_next_optbyte+0x64>)
 811e2fe:	881b      	ldrh	r3, [r3, #0]
 811e300:	b2db      	uxtb	r3, r3
 811e302:	1ad3      	subs	r3, r2, r3
 811e304:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 811e306:	4b06      	ldr	r3, [pc, #24]	@ (811e320 <tcp_get_next_optbyte+0x60>)
 811e308:	681a      	ldr	r2, [r3, #0]
 811e30a:	797b      	ldrb	r3, [r7, #5]
 811e30c:	4413      	add	r3, r2
 811e30e:	781b      	ldrb	r3, [r3, #0]
  }
}
 811e310:	4618      	mov	r0, r3
 811e312:	370c      	adds	r7, #12
 811e314:	46bd      	mov	sp, r7
 811e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 811e31a:	4770      	bx	lr
 811e31c:	240126d4 	.word	0x240126d4
 811e320:	240126d0 	.word	0x240126d0
 811e324:	240126ce 	.word	0x240126ce
 811e328:	240126c8 	.word	0x240126c8

0811e32c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 811e32c:	b580      	push	{r7, lr}
 811e32e:	b084      	sub	sp, #16
 811e330:	af00      	add	r7, sp, #0
 811e332:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 811e334:	687b      	ldr	r3, [r7, #4]
 811e336:	2b00      	cmp	r3, #0
 811e338:	d106      	bne.n	811e348 <tcp_parseopt+0x1c>
 811e33a:	4b32      	ldr	r3, [pc, #200]	@ (811e404 <tcp_parseopt+0xd8>)
 811e33c:	f240 727d 	movw	r2, #1917	@ 0x77d
 811e340:	4931      	ldr	r1, [pc, #196]	@ (811e408 <tcp_parseopt+0xdc>)
 811e342:	4832      	ldr	r0, [pc, #200]	@ (811e40c <tcp_parseopt+0xe0>)
 811e344:	f003 fd1e 	bl	8121d84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 811e348:	4b31      	ldr	r3, [pc, #196]	@ (811e410 <tcp_parseopt+0xe4>)
 811e34a:	881b      	ldrh	r3, [r3, #0]
 811e34c:	2b00      	cmp	r3, #0
 811e34e:	d056      	beq.n	811e3fe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811e350:	4b30      	ldr	r3, [pc, #192]	@ (811e414 <tcp_parseopt+0xe8>)
 811e352:	2200      	movs	r2, #0
 811e354:	801a      	strh	r2, [r3, #0]
 811e356:	e046      	b.n	811e3e6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 811e358:	f7ff ffb2 	bl	811e2c0 <tcp_get_next_optbyte>
 811e35c:	4603      	mov	r3, r0
 811e35e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 811e360:	7bfb      	ldrb	r3, [r7, #15]
 811e362:	2b02      	cmp	r3, #2
 811e364:	d006      	beq.n	811e374 <tcp_parseopt+0x48>
 811e366:	2b02      	cmp	r3, #2
 811e368:	dc2a      	bgt.n	811e3c0 <tcp_parseopt+0x94>
 811e36a:	2b00      	cmp	r3, #0
 811e36c:	d042      	beq.n	811e3f4 <tcp_parseopt+0xc8>
 811e36e:	2b01      	cmp	r3, #1
 811e370:	d038      	beq.n	811e3e4 <tcp_parseopt+0xb8>
 811e372:	e025      	b.n	811e3c0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 811e374:	f7ff ffa4 	bl	811e2c0 <tcp_get_next_optbyte>
 811e378:	4603      	mov	r3, r0
 811e37a:	2b04      	cmp	r3, #4
 811e37c:	d13c      	bne.n	811e3f8 <tcp_parseopt+0xcc>
 811e37e:	4b25      	ldr	r3, [pc, #148]	@ (811e414 <tcp_parseopt+0xe8>)
 811e380:	881b      	ldrh	r3, [r3, #0]
 811e382:	3301      	adds	r3, #1
 811e384:	4a22      	ldr	r2, [pc, #136]	@ (811e410 <tcp_parseopt+0xe4>)
 811e386:	8812      	ldrh	r2, [r2, #0]
 811e388:	4293      	cmp	r3, r2
 811e38a:	da35      	bge.n	811e3f8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 811e38c:	f7ff ff98 	bl	811e2c0 <tcp_get_next_optbyte>
 811e390:	4603      	mov	r3, r0
 811e392:	021b      	lsls	r3, r3, #8
 811e394:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 811e396:	f7ff ff93 	bl	811e2c0 <tcp_get_next_optbyte>
 811e39a:	4603      	mov	r3, r0
 811e39c:	461a      	mov	r2, r3
 811e39e:	89bb      	ldrh	r3, [r7, #12]
 811e3a0:	4313      	orrs	r3, r2
 811e3a2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 811e3a4:	89bb      	ldrh	r3, [r7, #12]
 811e3a6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 811e3aa:	d804      	bhi.n	811e3b6 <tcp_parseopt+0x8a>
 811e3ac:	89bb      	ldrh	r3, [r7, #12]
 811e3ae:	2b00      	cmp	r3, #0
 811e3b0:	d001      	beq.n	811e3b6 <tcp_parseopt+0x8a>
 811e3b2:	89ba      	ldrh	r2, [r7, #12]
 811e3b4:	e001      	b.n	811e3ba <tcp_parseopt+0x8e>
 811e3b6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811e3ba:	687b      	ldr	r3, [r7, #4]
 811e3bc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 811e3be:	e012      	b.n	811e3e6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811e3c0:	f7ff ff7e 	bl	811e2c0 <tcp_get_next_optbyte>
 811e3c4:	4603      	mov	r3, r0
 811e3c6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 811e3c8:	7afb      	ldrb	r3, [r7, #11]
 811e3ca:	2b01      	cmp	r3, #1
 811e3cc:	d916      	bls.n	811e3fc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 811e3ce:	7afb      	ldrb	r3, [r7, #11]
 811e3d0:	b29a      	uxth	r2, r3
 811e3d2:	4b10      	ldr	r3, [pc, #64]	@ (811e414 <tcp_parseopt+0xe8>)
 811e3d4:	881b      	ldrh	r3, [r3, #0]
 811e3d6:	4413      	add	r3, r2
 811e3d8:	b29b      	uxth	r3, r3
 811e3da:	3b02      	subs	r3, #2
 811e3dc:	b29a      	uxth	r2, r3
 811e3de:	4b0d      	ldr	r3, [pc, #52]	@ (811e414 <tcp_parseopt+0xe8>)
 811e3e0:	801a      	strh	r2, [r3, #0]
 811e3e2:	e000      	b.n	811e3e6 <tcp_parseopt+0xba>
          break;
 811e3e4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811e3e6:	4b0b      	ldr	r3, [pc, #44]	@ (811e414 <tcp_parseopt+0xe8>)
 811e3e8:	881a      	ldrh	r2, [r3, #0]
 811e3ea:	4b09      	ldr	r3, [pc, #36]	@ (811e410 <tcp_parseopt+0xe4>)
 811e3ec:	881b      	ldrh	r3, [r3, #0]
 811e3ee:	429a      	cmp	r2, r3
 811e3f0:	d3b2      	bcc.n	811e358 <tcp_parseopt+0x2c>
 811e3f2:	e004      	b.n	811e3fe <tcp_parseopt+0xd2>
          return;
 811e3f4:	bf00      	nop
 811e3f6:	e002      	b.n	811e3fe <tcp_parseopt+0xd2>
            return;
 811e3f8:	bf00      	nop
 811e3fa:	e000      	b.n	811e3fe <tcp_parseopt+0xd2>
            return;
 811e3fc:	bf00      	nop
      }
    }
  }
}
 811e3fe:	3710      	adds	r7, #16
 811e400:	46bd      	mov	sp, r7
 811e402:	bd80      	pop	{r7, pc}
 811e404:	081275dc 	.word	0x081275dc
 811e408:	08127a78 	.word	0x08127a78
 811e40c:	08127660 	.word	0x08127660
 811e410:	240126cc 	.word	0x240126cc
 811e414:	240126d4 	.word	0x240126d4

0811e418 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 811e418:	b480      	push	{r7}
 811e41a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 811e41c:	4b05      	ldr	r3, [pc, #20]	@ (811e434 <tcp_trigger_input_pcb_close+0x1c>)
 811e41e:	781b      	ldrb	r3, [r3, #0]
 811e420:	f043 0310 	orr.w	r3, r3, #16
 811e424:	b2da      	uxtb	r2, r3
 811e426:	4b03      	ldr	r3, [pc, #12]	@ (811e434 <tcp_trigger_input_pcb_close+0x1c>)
 811e428:	701a      	strb	r2, [r3, #0]
}
 811e42a:	bf00      	nop
 811e42c:	46bd      	mov	sp, r7
 811e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 811e432:	4770      	bx	lr
 811e434:	240126e5 	.word	0x240126e5

0811e438 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 811e438:	b580      	push	{r7, lr}
 811e43a:	b084      	sub	sp, #16
 811e43c:	af00      	add	r7, sp, #0
 811e43e:	60f8      	str	r0, [r7, #12]
 811e440:	60b9      	str	r1, [r7, #8]
 811e442:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 811e444:	68fb      	ldr	r3, [r7, #12]
 811e446:	2b00      	cmp	r3, #0
 811e448:	d00a      	beq.n	811e460 <tcp_route+0x28>
 811e44a:	68fb      	ldr	r3, [r7, #12]
 811e44c:	7a1b      	ldrb	r3, [r3, #8]
 811e44e:	2b00      	cmp	r3, #0
 811e450:	d006      	beq.n	811e460 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 811e452:	68fb      	ldr	r3, [r7, #12]
 811e454:	7a1b      	ldrb	r3, [r3, #8]
 811e456:	4618      	mov	r0, r3
 811e458:	f7fa fefc 	bl	8119254 <netif_get_by_index>
 811e45c:	4603      	mov	r3, r0
 811e45e:	e003      	b.n	811e468 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 811e460:	6878      	ldr	r0, [r7, #4]
 811e462:	f7f6 ff21 	bl	81152a8 <ip4_route>
 811e466:	4603      	mov	r3, r0
  }
}
 811e468:	4618      	mov	r0, r3
 811e46a:	3710      	adds	r7, #16
 811e46c:	46bd      	mov	sp, r7
 811e46e:	bd80      	pop	{r7, pc}

0811e470 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 811e470:	b590      	push	{r4, r7, lr}
 811e472:	b087      	sub	sp, #28
 811e474:	af00      	add	r7, sp, #0
 811e476:	60f8      	str	r0, [r7, #12]
 811e478:	60b9      	str	r1, [r7, #8]
 811e47a:	603b      	str	r3, [r7, #0]
 811e47c:	4613      	mov	r3, r2
 811e47e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 811e480:	68fb      	ldr	r3, [r7, #12]
 811e482:	2b00      	cmp	r3, #0
 811e484:	d105      	bne.n	811e492 <tcp_create_segment+0x22>
 811e486:	4b43      	ldr	r3, [pc, #268]	@ (811e594 <tcp_create_segment+0x124>)
 811e488:	22a3      	movs	r2, #163	@ 0xa3
 811e48a:	4943      	ldr	r1, [pc, #268]	@ (811e598 <tcp_create_segment+0x128>)
 811e48c:	4843      	ldr	r0, [pc, #268]	@ (811e59c <tcp_create_segment+0x12c>)
 811e48e:	f003 fc79 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 811e492:	68bb      	ldr	r3, [r7, #8]
 811e494:	2b00      	cmp	r3, #0
 811e496:	d105      	bne.n	811e4a4 <tcp_create_segment+0x34>
 811e498:	4b3e      	ldr	r3, [pc, #248]	@ (811e594 <tcp_create_segment+0x124>)
 811e49a:	22a4      	movs	r2, #164	@ 0xa4
 811e49c:	4940      	ldr	r1, [pc, #256]	@ (811e5a0 <tcp_create_segment+0x130>)
 811e49e:	483f      	ldr	r0, [pc, #252]	@ (811e59c <tcp_create_segment+0x12c>)
 811e4a0:	f003 fc70 	bl	8121d84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811e4a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811e4a8:	009b      	lsls	r3, r3, #2
 811e4aa:	b2db      	uxtb	r3, r3
 811e4ac:	f003 0304 	and.w	r3, r3, #4
 811e4b0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 811e4b2:	2003      	movs	r0, #3
 811e4b4:	f7f8 fcaa 	bl	8116e0c <memp_malloc>
 811e4b8:	6138      	str	r0, [r7, #16]
 811e4ba:	693b      	ldr	r3, [r7, #16]
 811e4bc:	2b00      	cmp	r3, #0
 811e4be:	d104      	bne.n	811e4ca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 811e4c0:	68b8      	ldr	r0, [r7, #8]
 811e4c2:	f7fb fa53 	bl	811996c <pbuf_free>
    return NULL;
 811e4c6:	2300      	movs	r3, #0
 811e4c8:	e060      	b.n	811e58c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 811e4ca:	693b      	ldr	r3, [r7, #16]
 811e4cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811e4d0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 811e4d2:	693b      	ldr	r3, [r7, #16]
 811e4d4:	2200      	movs	r2, #0
 811e4d6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 811e4d8:	693b      	ldr	r3, [r7, #16]
 811e4da:	68ba      	ldr	r2, [r7, #8]
 811e4dc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 811e4de:	68bb      	ldr	r3, [r7, #8]
 811e4e0:	891a      	ldrh	r2, [r3, #8]
 811e4e2:	7dfb      	ldrb	r3, [r7, #23]
 811e4e4:	b29b      	uxth	r3, r3
 811e4e6:	429a      	cmp	r2, r3
 811e4e8:	d205      	bcs.n	811e4f6 <tcp_create_segment+0x86>
 811e4ea:	4b2a      	ldr	r3, [pc, #168]	@ (811e594 <tcp_create_segment+0x124>)
 811e4ec:	22b0      	movs	r2, #176	@ 0xb0
 811e4ee:	492d      	ldr	r1, [pc, #180]	@ (811e5a4 <tcp_create_segment+0x134>)
 811e4f0:	482a      	ldr	r0, [pc, #168]	@ (811e59c <tcp_create_segment+0x12c>)
 811e4f2:	f003 fc47 	bl	8121d84 <iprintf>
  seg->len = p->tot_len - optlen;
 811e4f6:	68bb      	ldr	r3, [r7, #8]
 811e4f8:	891a      	ldrh	r2, [r3, #8]
 811e4fa:	7dfb      	ldrb	r3, [r7, #23]
 811e4fc:	b29b      	uxth	r3, r3
 811e4fe:	1ad3      	subs	r3, r2, r3
 811e500:	b29a      	uxth	r2, r3
 811e502:	693b      	ldr	r3, [r7, #16]
 811e504:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 811e506:	2114      	movs	r1, #20
 811e508:	68b8      	ldr	r0, [r7, #8]
 811e50a:	f7fb f999 	bl	8119840 <pbuf_add_header>
 811e50e:	4603      	mov	r3, r0
 811e510:	2b00      	cmp	r3, #0
 811e512:	d004      	beq.n	811e51e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 811e514:	6938      	ldr	r0, [r7, #16]
 811e516:	f7fd f810 	bl	811b53a <tcp_seg_free>
    return NULL;
 811e51a:	2300      	movs	r3, #0
 811e51c:	e036      	b.n	811e58c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 811e51e:	693b      	ldr	r3, [r7, #16]
 811e520:	685b      	ldr	r3, [r3, #4]
 811e522:	685a      	ldr	r2, [r3, #4]
 811e524:	693b      	ldr	r3, [r7, #16]
 811e526:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 811e528:	68fb      	ldr	r3, [r7, #12]
 811e52a:	8ada      	ldrh	r2, [r3, #22]
 811e52c:	693b      	ldr	r3, [r7, #16]
 811e52e:	68dc      	ldr	r4, [r3, #12]
 811e530:	4610      	mov	r0, r2
 811e532:	f7f5 fbdb 	bl	8113cec <lwip_htons>
 811e536:	4603      	mov	r3, r0
 811e538:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 811e53a:	68fb      	ldr	r3, [r7, #12]
 811e53c:	8b1a      	ldrh	r2, [r3, #24]
 811e53e:	693b      	ldr	r3, [r7, #16]
 811e540:	68dc      	ldr	r4, [r3, #12]
 811e542:	4610      	mov	r0, r2
 811e544:	f7f5 fbd2 	bl	8113cec <lwip_htons>
 811e548:	4603      	mov	r3, r0
 811e54a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 811e54c:	693b      	ldr	r3, [r7, #16]
 811e54e:	68dc      	ldr	r4, [r3, #12]
 811e550:	6838      	ldr	r0, [r7, #0]
 811e552:	f7f5 fbe0 	bl	8113d16 <lwip_htonl>
 811e556:	4603      	mov	r3, r0
 811e558:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 811e55a:	7dfb      	ldrb	r3, [r7, #23]
 811e55c:	089b      	lsrs	r3, r3, #2
 811e55e:	b2db      	uxtb	r3, r3
 811e560:	3305      	adds	r3, #5
 811e562:	b29b      	uxth	r3, r3
 811e564:	031b      	lsls	r3, r3, #12
 811e566:	b29a      	uxth	r2, r3
 811e568:	79fb      	ldrb	r3, [r7, #7]
 811e56a:	b29b      	uxth	r3, r3
 811e56c:	4313      	orrs	r3, r2
 811e56e:	b29a      	uxth	r2, r3
 811e570:	693b      	ldr	r3, [r7, #16]
 811e572:	68dc      	ldr	r4, [r3, #12]
 811e574:	4610      	mov	r0, r2
 811e576:	f7f5 fbb9 	bl	8113cec <lwip_htons>
 811e57a:	4603      	mov	r3, r0
 811e57c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 811e57e:	693b      	ldr	r3, [r7, #16]
 811e580:	68db      	ldr	r3, [r3, #12]
 811e582:	2200      	movs	r2, #0
 811e584:	749a      	strb	r2, [r3, #18]
 811e586:	2200      	movs	r2, #0
 811e588:	74da      	strb	r2, [r3, #19]
  return seg;
 811e58a:	693b      	ldr	r3, [r7, #16]
}
 811e58c:	4618      	mov	r0, r3
 811e58e:	371c      	adds	r7, #28
 811e590:	46bd      	mov	sp, r7
 811e592:	bd90      	pop	{r4, r7, pc}
 811e594:	08127a94 	.word	0x08127a94
 811e598:	08127b00 	.word	0x08127b00
 811e59c:	08127b20 	.word	0x08127b20
 811e5a0:	08127b48 	.word	0x08127b48
 811e5a4:	08127b6c 	.word	0x08127b6c

0811e5a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 811e5a8:	b580      	push	{r7, lr}
 811e5aa:	b086      	sub	sp, #24
 811e5ac:	af00      	add	r7, sp, #0
 811e5ae:	607b      	str	r3, [r7, #4]
 811e5b0:	4603      	mov	r3, r0
 811e5b2:	73fb      	strb	r3, [r7, #15]
 811e5b4:	460b      	mov	r3, r1
 811e5b6:	81bb      	strh	r3, [r7, #12]
 811e5b8:	4613      	mov	r3, r2
 811e5ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 811e5bc:	89bb      	ldrh	r3, [r7, #12]
 811e5be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 811e5c0:	687b      	ldr	r3, [r7, #4]
 811e5c2:	2b00      	cmp	r3, #0
 811e5c4:	d105      	bne.n	811e5d2 <tcp_pbuf_prealloc+0x2a>
 811e5c6:	4b30      	ldr	r3, [pc, #192]	@ (811e688 <tcp_pbuf_prealloc+0xe0>)
 811e5c8:	22e8      	movs	r2, #232	@ 0xe8
 811e5ca:	4930      	ldr	r1, [pc, #192]	@ (811e68c <tcp_pbuf_prealloc+0xe4>)
 811e5cc:	4830      	ldr	r0, [pc, #192]	@ (811e690 <tcp_pbuf_prealloc+0xe8>)
 811e5ce:	f003 fbd9 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 811e5d2:	6a3b      	ldr	r3, [r7, #32]
 811e5d4:	2b00      	cmp	r3, #0
 811e5d6:	d105      	bne.n	811e5e4 <tcp_pbuf_prealloc+0x3c>
 811e5d8:	4b2b      	ldr	r3, [pc, #172]	@ (811e688 <tcp_pbuf_prealloc+0xe0>)
 811e5da:	22e9      	movs	r2, #233	@ 0xe9
 811e5dc:	492d      	ldr	r1, [pc, #180]	@ (811e694 <tcp_pbuf_prealloc+0xec>)
 811e5de:	482c      	ldr	r0, [pc, #176]	@ (811e690 <tcp_pbuf_prealloc+0xe8>)
 811e5e0:	f003 fbd0 	bl	8121d84 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 811e5e4:	89ba      	ldrh	r2, [r7, #12]
 811e5e6:	897b      	ldrh	r3, [r7, #10]
 811e5e8:	429a      	cmp	r2, r3
 811e5ea:	d221      	bcs.n	811e630 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811e5ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 811e5f0:	f003 0302 	and.w	r3, r3, #2
 811e5f4:	2b00      	cmp	r3, #0
 811e5f6:	d111      	bne.n	811e61c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 811e5f8:	6a3b      	ldr	r3, [r7, #32]
 811e5fa:	8b5b      	ldrh	r3, [r3, #26]
 811e5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811e600:	2b00      	cmp	r3, #0
 811e602:	d115      	bne.n	811e630 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 811e604:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811e608:	2b00      	cmp	r3, #0
 811e60a:	d007      	beq.n	811e61c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 811e60c:	6a3b      	ldr	r3, [r7, #32]
 811e60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 811e610:	2b00      	cmp	r3, #0
 811e612:	d103      	bne.n	811e61c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 811e614:	6a3b      	ldr	r3, [r7, #32]
 811e616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 811e618:	2b00      	cmp	r3, #0
 811e61a:	d009      	beq.n	811e630 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 811e61c:	89bb      	ldrh	r3, [r7, #12]
 811e61e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 811e622:	f023 0203 	bic.w	r2, r3, #3
 811e626:	897b      	ldrh	r3, [r7, #10]
 811e628:	4293      	cmp	r3, r2
 811e62a:	bf28      	it	cs
 811e62c:	4613      	movcs	r3, r2
 811e62e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 811e630:	8af9      	ldrh	r1, [r7, #22]
 811e632:	7bfb      	ldrb	r3, [r7, #15]
 811e634:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811e638:	4618      	mov	r0, r3
 811e63a:	f7fa feb5 	bl	81193a8 <pbuf_alloc>
 811e63e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811e640:	693b      	ldr	r3, [r7, #16]
 811e642:	2b00      	cmp	r3, #0
 811e644:	d101      	bne.n	811e64a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 811e646:	2300      	movs	r3, #0
 811e648:	e019      	b.n	811e67e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 811e64a:	693b      	ldr	r3, [r7, #16]
 811e64c:	681b      	ldr	r3, [r3, #0]
 811e64e:	2b00      	cmp	r3, #0
 811e650:	d006      	beq.n	811e660 <tcp_pbuf_prealloc+0xb8>
 811e652:	4b0d      	ldr	r3, [pc, #52]	@ (811e688 <tcp_pbuf_prealloc+0xe0>)
 811e654:	f240 120b 	movw	r2, #267	@ 0x10b
 811e658:	490f      	ldr	r1, [pc, #60]	@ (811e698 <tcp_pbuf_prealloc+0xf0>)
 811e65a:	480d      	ldr	r0, [pc, #52]	@ (811e690 <tcp_pbuf_prealloc+0xe8>)
 811e65c:	f003 fb92 	bl	8121d84 <iprintf>
  *oversize = p->len - length;
 811e660:	693b      	ldr	r3, [r7, #16]
 811e662:	895a      	ldrh	r2, [r3, #10]
 811e664:	89bb      	ldrh	r3, [r7, #12]
 811e666:	1ad3      	subs	r3, r2, r3
 811e668:	b29a      	uxth	r2, r3
 811e66a:	687b      	ldr	r3, [r7, #4]
 811e66c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 811e66e:	693b      	ldr	r3, [r7, #16]
 811e670:	89ba      	ldrh	r2, [r7, #12]
 811e672:	811a      	strh	r2, [r3, #8]
 811e674:	693b      	ldr	r3, [r7, #16]
 811e676:	891a      	ldrh	r2, [r3, #8]
 811e678:	693b      	ldr	r3, [r7, #16]
 811e67a:	815a      	strh	r2, [r3, #10]
  return p;
 811e67c:	693b      	ldr	r3, [r7, #16]
}
 811e67e:	4618      	mov	r0, r3
 811e680:	3718      	adds	r7, #24
 811e682:	46bd      	mov	sp, r7
 811e684:	bd80      	pop	{r7, pc}
 811e686:	bf00      	nop
 811e688:	08127a94 	.word	0x08127a94
 811e68c:	08127b84 	.word	0x08127b84
 811e690:	08127b20 	.word	0x08127b20
 811e694:	08127ba8 	.word	0x08127ba8
 811e698:	08127bc8 	.word	0x08127bc8

0811e69c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 811e69c:	b580      	push	{r7, lr}
 811e69e:	b082      	sub	sp, #8
 811e6a0:	af00      	add	r7, sp, #0
 811e6a2:	6078      	str	r0, [r7, #4]
 811e6a4:	460b      	mov	r3, r1
 811e6a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 811e6a8:	687b      	ldr	r3, [r7, #4]
 811e6aa:	2b00      	cmp	r3, #0
 811e6ac:	d106      	bne.n	811e6bc <tcp_write_checks+0x20>
 811e6ae:	4b33      	ldr	r3, [pc, #204]	@ (811e77c <tcp_write_checks+0xe0>)
 811e6b0:	f240 1233 	movw	r2, #307	@ 0x133
 811e6b4:	4932      	ldr	r1, [pc, #200]	@ (811e780 <tcp_write_checks+0xe4>)
 811e6b6:	4833      	ldr	r0, [pc, #204]	@ (811e784 <tcp_write_checks+0xe8>)
 811e6b8:	f003 fb64 	bl	8121d84 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 811e6bc:	687b      	ldr	r3, [r7, #4]
 811e6be:	7d1b      	ldrb	r3, [r3, #20]
 811e6c0:	2b04      	cmp	r3, #4
 811e6c2:	d00e      	beq.n	811e6e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 811e6c4:	687b      	ldr	r3, [r7, #4]
 811e6c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 811e6c8:	2b07      	cmp	r3, #7
 811e6ca:	d00a      	beq.n	811e6e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 811e6cc:	687b      	ldr	r3, [r7, #4]
 811e6ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 811e6d0:	2b02      	cmp	r3, #2
 811e6d2:	d006      	beq.n	811e6e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 811e6d4:	687b      	ldr	r3, [r7, #4]
 811e6d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 811e6d8:	2b03      	cmp	r3, #3
 811e6da:	d002      	beq.n	811e6e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 811e6dc:	f06f 030a 	mvn.w	r3, #10
 811e6e0:	e048      	b.n	811e774 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 811e6e2:	887b      	ldrh	r3, [r7, #2]
 811e6e4:	2b00      	cmp	r3, #0
 811e6e6:	d101      	bne.n	811e6ec <tcp_write_checks+0x50>
    return ERR_OK;
 811e6e8:	2300      	movs	r3, #0
 811e6ea:	e043      	b.n	811e774 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 811e6ec:	687b      	ldr	r3, [r7, #4]
 811e6ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811e6f2:	887a      	ldrh	r2, [r7, #2]
 811e6f4:	429a      	cmp	r2, r3
 811e6f6:	d909      	bls.n	811e70c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811e6f8:	687b      	ldr	r3, [r7, #4]
 811e6fa:	8b5b      	ldrh	r3, [r3, #26]
 811e6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811e700:	b29a      	uxth	r2, r3
 811e702:	687b      	ldr	r3, [r7, #4]
 811e704:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 811e706:	f04f 33ff 	mov.w	r3, #4294967295
 811e70a:	e033      	b.n	811e774 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 811e70c:	687b      	ldr	r3, [r7, #4]
 811e70e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e712:	2b08      	cmp	r3, #8
 811e714:	d909      	bls.n	811e72a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811e716:	687b      	ldr	r3, [r7, #4]
 811e718:	8b5b      	ldrh	r3, [r3, #26]
 811e71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811e71e:	b29a      	uxth	r2, r3
 811e720:	687b      	ldr	r3, [r7, #4]
 811e722:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 811e724:	f04f 33ff 	mov.w	r3, #4294967295
 811e728:	e024      	b.n	811e774 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 811e72a:	687b      	ldr	r3, [r7, #4]
 811e72c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e730:	2b00      	cmp	r3, #0
 811e732:	d00f      	beq.n	811e754 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 811e734:	687b      	ldr	r3, [r7, #4]
 811e736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e738:	2b00      	cmp	r3, #0
 811e73a:	d11a      	bne.n	811e772 <tcp_write_checks+0xd6>
 811e73c:	687b      	ldr	r3, [r7, #4]
 811e73e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e740:	2b00      	cmp	r3, #0
 811e742:	d116      	bne.n	811e772 <tcp_write_checks+0xd6>
 811e744:	4b0d      	ldr	r3, [pc, #52]	@ (811e77c <tcp_write_checks+0xe0>)
 811e746:	f240 1255 	movw	r2, #341	@ 0x155
 811e74a:	490f      	ldr	r1, [pc, #60]	@ (811e788 <tcp_write_checks+0xec>)
 811e74c:	480d      	ldr	r0, [pc, #52]	@ (811e784 <tcp_write_checks+0xe8>)
 811e74e:	f003 fb19 	bl	8121d84 <iprintf>
 811e752:	e00e      	b.n	811e772 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 811e754:	687b      	ldr	r3, [r7, #4]
 811e756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e758:	2b00      	cmp	r3, #0
 811e75a:	d103      	bne.n	811e764 <tcp_write_checks+0xc8>
 811e75c:	687b      	ldr	r3, [r7, #4]
 811e75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e760:	2b00      	cmp	r3, #0
 811e762:	d006      	beq.n	811e772 <tcp_write_checks+0xd6>
 811e764:	4b05      	ldr	r3, [pc, #20]	@ (811e77c <tcp_write_checks+0xe0>)
 811e766:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 811e76a:	4908      	ldr	r1, [pc, #32]	@ (811e78c <tcp_write_checks+0xf0>)
 811e76c:	4805      	ldr	r0, [pc, #20]	@ (811e784 <tcp_write_checks+0xe8>)
 811e76e:	f003 fb09 	bl	8121d84 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 811e772:	2300      	movs	r3, #0
}
 811e774:	4618      	mov	r0, r3
 811e776:	3708      	adds	r7, #8
 811e778:	46bd      	mov	sp, r7
 811e77a:	bd80      	pop	{r7, pc}
 811e77c:	08127a94 	.word	0x08127a94
 811e780:	08127bdc 	.word	0x08127bdc
 811e784:	08127b20 	.word	0x08127b20
 811e788:	08127bfc 	.word	0x08127bfc
 811e78c:	08127c38 	.word	0x08127c38

0811e790 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 811e790:	b590      	push	{r4, r7, lr}
 811e792:	b09b      	sub	sp, #108	@ 0x6c
 811e794:	af04      	add	r7, sp, #16
 811e796:	60f8      	str	r0, [r7, #12]
 811e798:	60b9      	str	r1, [r7, #8]
 811e79a:	4611      	mov	r1, r2
 811e79c:	461a      	mov	r2, r3
 811e79e:	460b      	mov	r3, r1
 811e7a0:	80fb      	strh	r3, [r7, #6]
 811e7a2:	4613      	mov	r3, r2
 811e7a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 811e7a6:	2300      	movs	r3, #0
 811e7a8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 811e7aa:	2300      	movs	r3, #0
 811e7ac:	653b      	str	r3, [r7, #80]	@ 0x50
 811e7ae:	2300      	movs	r3, #0
 811e7b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811e7b2:	2300      	movs	r3, #0
 811e7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 811e7b6:	2300      	movs	r3, #0
 811e7b8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 811e7ba:	2300      	movs	r3, #0
 811e7bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 811e7c0:	2300      	movs	r3, #0
 811e7c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 811e7c6:	2300      	movs	r3, #0
 811e7c8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 811e7ca:	2300      	movs	r3, #0
 811e7cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 811e7ce:	2300      	movs	r3, #0
 811e7d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 811e7d2:	68fb      	ldr	r3, [r7, #12]
 811e7d4:	2b00      	cmp	r3, #0
 811e7d6:	d109      	bne.n	811e7ec <tcp_write+0x5c>
 811e7d8:	4ba5      	ldr	r3, [pc, #660]	@ (811ea70 <tcp_write+0x2e0>)
 811e7da:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 811e7de:	49a5      	ldr	r1, [pc, #660]	@ (811ea74 <tcp_write+0x2e4>)
 811e7e0:	48a5      	ldr	r0, [pc, #660]	@ (811ea78 <tcp_write+0x2e8>)
 811e7e2:	f003 facf 	bl	8121d84 <iprintf>
 811e7e6:	f06f 030f 	mvn.w	r3, #15
 811e7ea:	e32c      	b.n	811ee46 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 811e7ec:	68fb      	ldr	r3, [r7, #12]
 811e7ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 811e7f2:	085b      	lsrs	r3, r3, #1
 811e7f4:	b29a      	uxth	r2, r3
 811e7f6:	68fb      	ldr	r3, [r7, #12]
 811e7f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e7fa:	4293      	cmp	r3, r2
 811e7fc:	bf28      	it	cs
 811e7fe:	4613      	movcs	r3, r2
 811e800:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 811e802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811e804:	2b00      	cmp	r3, #0
 811e806:	d102      	bne.n	811e80e <tcp_write+0x7e>
 811e808:	68fb      	ldr	r3, [r7, #12]
 811e80a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e80c:	e000      	b.n	811e810 <tcp_write+0x80>
 811e80e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811e810:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT_CORE_LOCKED();
 811e812:	f7f1 fad5 	bl	810fdc0 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 811e816:	68bb      	ldr	r3, [r7, #8]
 811e818:	2b00      	cmp	r3, #0
 811e81a:	d109      	bne.n	811e830 <tcp_write+0xa0>
 811e81c:	4b94      	ldr	r3, [pc, #592]	@ (811ea70 <tcp_write+0x2e0>)
 811e81e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 811e822:	4996      	ldr	r1, [pc, #600]	@ (811ea7c <tcp_write+0x2ec>)
 811e824:	4894      	ldr	r0, [pc, #592]	@ (811ea78 <tcp_write+0x2e8>)
 811e826:	f003 faad 	bl	8121d84 <iprintf>
 811e82a:	f06f 030f 	mvn.w	r3, #15
 811e82e:	e30a      	b.n	811ee46 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 811e830:	88fb      	ldrh	r3, [r7, #6]
 811e832:	4619      	mov	r1, r3
 811e834:	68f8      	ldr	r0, [r7, #12]
 811e836:	f7ff ff31 	bl	811e69c <tcp_write_checks>
 811e83a:	4603      	mov	r3, r0
 811e83c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 811e840:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 811e844:	2b00      	cmp	r3, #0
 811e846:	d002      	beq.n	811e84e <tcp_write+0xbe>
    return err;
 811e848:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 811e84c:	e2fb      	b.n	811ee46 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 811e84e:	68fb      	ldr	r3, [r7, #12]
 811e850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e854:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811e858:	2300      	movs	r3, #0
 811e85a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 811e85e:	68fb      	ldr	r3, [r7, #12]
 811e860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e862:	2b00      	cmp	r3, #0
 811e864:	f000 80f6 	beq.w	811ea54 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811e868:	68fb      	ldr	r3, [r7, #12]
 811e86a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e86c:	653b      	str	r3, [r7, #80]	@ 0x50
 811e86e:	e002      	b.n	811e876 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 811e870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e872:	681b      	ldr	r3, [r3, #0]
 811e874:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811e876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e878:	681b      	ldr	r3, [r3, #0]
 811e87a:	2b00      	cmp	r3, #0
 811e87c:	d1f8      	bne.n	811e870 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 811e87e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e880:	7a9b      	ldrb	r3, [r3, #10]
 811e882:	009b      	lsls	r3, r3, #2
 811e884:	b29b      	uxth	r3, r3
 811e886:	f003 0304 	and.w	r3, r3, #4
 811e88a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 811e88c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811e88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e890:	891b      	ldrh	r3, [r3, #8]
 811e892:	4619      	mov	r1, r3
 811e894:	8c3b      	ldrh	r3, [r7, #32]
 811e896:	440b      	add	r3, r1
 811e898:	429a      	cmp	r2, r3
 811e89a:	da06      	bge.n	811e8aa <tcp_write+0x11a>
 811e89c:	4b74      	ldr	r3, [pc, #464]	@ (811ea70 <tcp_write+0x2e0>)
 811e89e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811e8a2:	4977      	ldr	r1, [pc, #476]	@ (811ea80 <tcp_write+0x2f0>)
 811e8a4:	4874      	ldr	r0, [pc, #464]	@ (811ea78 <tcp_write+0x2e8>)
 811e8a6:	f003 fa6d 	bl	8121d84 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 811e8aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e8ac:	891a      	ldrh	r2, [r3, #8]
 811e8ae:	8c3b      	ldrh	r3, [r7, #32]
 811e8b0:	4413      	add	r3, r2
 811e8b2:	b29b      	uxth	r3, r3
 811e8b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811e8b6:	1ad3      	subs	r3, r2, r3
 811e8b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 811e8ba:	68fb      	ldr	r3, [r7, #12]
 811e8bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811e8c0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 811e8c2:	8a7b      	ldrh	r3, [r7, #18]
 811e8c4:	2b00      	cmp	r3, #0
 811e8c6:	d026      	beq.n	811e916 <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 811e8c8:	8a7b      	ldrh	r3, [r7, #18]
 811e8ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811e8cc:	429a      	cmp	r2, r3
 811e8ce:	d206      	bcs.n	811e8de <tcp_write+0x14e>
 811e8d0:	4b67      	ldr	r3, [pc, #412]	@ (811ea70 <tcp_write+0x2e0>)
 811e8d2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 811e8d6:	496b      	ldr	r1, [pc, #428]	@ (811ea84 <tcp_write+0x2f4>)
 811e8d8:	4867      	ldr	r0, [pc, #412]	@ (811ea78 <tcp_write+0x2e8>)
 811e8da:	f003 fa53 	bl	8121d84 <iprintf>
      seg = last_unsent;
 811e8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e8e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 811e8e2:	8a7b      	ldrh	r3, [r7, #18]
 811e8e4:	88fa      	ldrh	r2, [r7, #6]
 811e8e6:	4293      	cmp	r3, r2
 811e8e8:	bf28      	it	cs
 811e8ea:	4613      	movcs	r3, r2
 811e8ec:	b29b      	uxth	r3, r3
 811e8ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811e8f0:	4293      	cmp	r3, r2
 811e8f2:	bf28      	it	cs
 811e8f4:	4613      	movcs	r3, r2
 811e8f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 811e8f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811e8fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811e8fe:	4413      	add	r3, r2
 811e900:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 811e904:	8a7a      	ldrh	r2, [r7, #18]
 811e906:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811e908:	1ad3      	subs	r3, r2, r3
 811e90a:	b29b      	uxth	r3, r3
 811e90c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 811e90e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811e910:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811e912:	1ad3      	subs	r3, r2, r3
 811e914:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 811e916:	8a7b      	ldrh	r3, [r7, #18]
 811e918:	2b00      	cmp	r3, #0
 811e91a:	d00b      	beq.n	811e934 <tcp_write+0x1a4>
 811e91c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811e920:	88fb      	ldrh	r3, [r7, #6]
 811e922:	429a      	cmp	r2, r3
 811e924:	d006      	beq.n	811e934 <tcp_write+0x1a4>
 811e926:	4b52      	ldr	r3, [pc, #328]	@ (811ea70 <tcp_write+0x2e0>)
 811e928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 811e92c:	4956      	ldr	r1, [pc, #344]	@ (811ea88 <tcp_write+0x2f8>)
 811e92e:	4852      	ldr	r0, [pc, #328]	@ (811ea78 <tcp_write+0x2e8>)
 811e930:	f003 fa28 	bl	8121d84 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 811e934:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811e938:	88fb      	ldrh	r3, [r7, #6]
 811e93a:	429a      	cmp	r2, r3
 811e93c:	f080 8167 	bcs.w	811ec0e <tcp_write+0x47e>
 811e940:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811e942:	2b00      	cmp	r3, #0
 811e944:	f000 8163 	beq.w	811ec0e <tcp_write+0x47e>
 811e948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e94a:	891b      	ldrh	r3, [r3, #8]
 811e94c:	2b00      	cmp	r3, #0
 811e94e:	f000 815e 	beq.w	811ec0e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 811e952:	88fa      	ldrh	r2, [r7, #6]
 811e954:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811e958:	1ad2      	subs	r2, r2, r3
 811e95a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811e95c:	4293      	cmp	r3, r2
 811e95e:	bfa8      	it	ge
 811e960:	4613      	movge	r3, r2
 811e962:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 811e964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e966:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 811e968:	797b      	ldrb	r3, [r7, #5]
 811e96a:	f003 0301 	and.w	r3, r3, #1
 811e96e:	2b00      	cmp	r3, #0
 811e970:	d027      	beq.n	811e9c2 <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 811e972:	f107 0012 	add.w	r0, r7, #18
 811e976:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811e978:	8bf9      	ldrh	r1, [r7, #30]
 811e97a:	2301      	movs	r3, #1
 811e97c:	9302      	str	r3, [sp, #8]
 811e97e:	797b      	ldrb	r3, [r7, #5]
 811e980:	9301      	str	r3, [sp, #4]
 811e982:	68fb      	ldr	r3, [r7, #12]
 811e984:	9300      	str	r3, [sp, #0]
 811e986:	4603      	mov	r3, r0
 811e988:	2000      	movs	r0, #0
 811e98a:	f7ff fe0d 	bl	811e5a8 <tcp_pbuf_prealloc>
 811e98e:	6578      	str	r0, [r7, #84]	@ 0x54
 811e990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e992:	2b00      	cmp	r3, #0
 811e994:	f000 8225 	beq.w	811ede2 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 811e998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e99a:	6858      	ldr	r0, [r3, #4]
 811e99c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811e9a0:	68ba      	ldr	r2, [r7, #8]
 811e9a2:	4413      	add	r3, r2
 811e9a4:	8bfa      	ldrh	r2, [r7, #30]
 811e9a6:	4619      	mov	r1, r3
 811e9a8:	f003 fc8d 	bl	81222c6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 811e9ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 811e9ae:	f7fb f86b 	bl	8119a88 <pbuf_clen>
 811e9b2:	4603      	mov	r3, r0
 811e9b4:	461a      	mov	r2, r3
 811e9b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811e9ba:	4413      	add	r3, r2
 811e9bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 811e9c0:	e041      	b.n	811ea46 <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 811e9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e9c4:	685b      	ldr	r3, [r3, #4]
 811e9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 811e9c8:	e002      	b.n	811e9d0 <tcp_write+0x240>
 811e9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e9cc:	681b      	ldr	r3, [r3, #0]
 811e9ce:	637b      	str	r3, [r7, #52]	@ 0x34
 811e9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e9d2:	681b      	ldr	r3, [r3, #0]
 811e9d4:	2b00      	cmp	r3, #0
 811e9d6:	d1f8      	bne.n	811e9ca <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811e9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e9da:	7b1b      	ldrb	r3, [r3, #12]
 811e9dc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 811e9e0:	2b00      	cmp	r3, #0
 811e9e2:	d115      	bne.n	811ea10 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 811e9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e9e6:	685b      	ldr	r3, [r3, #4]
 811e9e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811e9ea:	8952      	ldrh	r2, [r2, #10]
 811e9ec:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811e9ee:	68ba      	ldr	r2, [r7, #8]
 811e9f0:	429a      	cmp	r2, r3
 811e9f2:	d10d      	bne.n	811ea10 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 811e9f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811e9f8:	2b00      	cmp	r3, #0
 811e9fa:	d006      	beq.n	811ea0a <tcp_write+0x27a>
 811e9fc:	4b1c      	ldr	r3, [pc, #112]	@ (811ea70 <tcp_write+0x2e0>)
 811e9fe:	f240 2231 	movw	r2, #561	@ 0x231
 811ea02:	4922      	ldr	r1, [pc, #136]	@ (811ea8c <tcp_write+0x2fc>)
 811ea04:	481c      	ldr	r0, [pc, #112]	@ (811ea78 <tcp_write+0x2e8>)
 811ea06:	f003 f9bd 	bl	8121d84 <iprintf>
          extendlen = seglen;
 811ea0a:	8bfb      	ldrh	r3, [r7, #30]
 811ea0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 811ea0e:	e01a      	b.n	811ea46 <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 811ea10:	8bfb      	ldrh	r3, [r7, #30]
 811ea12:	2201      	movs	r2, #1
 811ea14:	4619      	mov	r1, r3
 811ea16:	2000      	movs	r0, #0
 811ea18:	f7fa fcc6 	bl	81193a8 <pbuf_alloc>
 811ea1c:	6578      	str	r0, [r7, #84]	@ 0x54
 811ea1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811ea20:	2b00      	cmp	r3, #0
 811ea22:	f000 81e0 	beq.w	811ede6 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 811ea26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811ea2a:	68ba      	ldr	r2, [r7, #8]
 811ea2c:	441a      	add	r2, r3
 811ea2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811ea30:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 811ea32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 811ea34:	f7fb f828 	bl	8119a88 <pbuf_clen>
 811ea38:	4603      	mov	r3, r0
 811ea3a:	461a      	mov	r2, r3
 811ea3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811ea40:	4413      	add	r3, r2
 811ea42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 811ea46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811ea4a:	8bfb      	ldrh	r3, [r7, #30]
 811ea4c:	4413      	add	r3, r2
 811ea4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 811ea52:	e0dc      	b.n	811ec0e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 811ea54:	68fb      	ldr	r3, [r7, #12]
 811ea56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811ea5a:	2b00      	cmp	r3, #0
 811ea5c:	f000 80d7 	beq.w	811ec0e <tcp_write+0x47e>
 811ea60:	4b03      	ldr	r3, [pc, #12]	@ (811ea70 <tcp_write+0x2e0>)
 811ea62:	f240 224a 	movw	r2, #586	@ 0x24a
 811ea66:	490a      	ldr	r1, [pc, #40]	@ (811ea90 <tcp_write+0x300>)
 811ea68:	4803      	ldr	r0, [pc, #12]	@ (811ea78 <tcp_write+0x2e8>)
 811ea6a:	f003 f98b 	bl	8121d84 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 811ea6e:	e0ce      	b.n	811ec0e <tcp_write+0x47e>
 811ea70:	08127a94 	.word	0x08127a94
 811ea74:	08127c6c 	.word	0x08127c6c
 811ea78:	08127b20 	.word	0x08127b20
 811ea7c:	08127c84 	.word	0x08127c84
 811ea80:	08127cb8 	.word	0x08127cb8
 811ea84:	08127cd0 	.word	0x08127cd0
 811ea88:	08127cf0 	.word	0x08127cf0
 811ea8c:	08127d10 	.word	0x08127d10
 811ea90:	08127d3c 	.word	0x08127d3c
    struct pbuf *p;
    u16_t left = len - pos;
 811ea94:	88fa      	ldrh	r2, [r7, #6]
 811ea96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811ea9a:	1ad3      	subs	r3, r2, r3
 811ea9c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 811ea9e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811eaa2:	b29b      	uxth	r3, r3
 811eaa4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811eaa6:	1ad3      	subs	r3, r2, r3
 811eaa8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 811eaaa:	8b7a      	ldrh	r2, [r7, #26]
 811eaac:	8bbb      	ldrh	r3, [r7, #28]
 811eaae:	4293      	cmp	r3, r2
 811eab0:	bf28      	it	cs
 811eab2:	4613      	movcs	r3, r2
 811eab4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 811eab6:	797b      	ldrb	r3, [r7, #5]
 811eab8:	f003 0301 	and.w	r3, r3, #1
 811eabc:	2b00      	cmp	r3, #0
 811eabe:	d036      	beq.n	811eb2e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 811eac0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811eac4:	b29a      	uxth	r2, r3
 811eac6:	8b3b      	ldrh	r3, [r7, #24]
 811eac8:	4413      	add	r3, r2
 811eaca:	b299      	uxth	r1, r3
 811eacc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811eace:	2b00      	cmp	r3, #0
 811ead0:	bf0c      	ite	eq
 811ead2:	2301      	moveq	r3, #1
 811ead4:	2300      	movne	r3, #0
 811ead6:	b2db      	uxtb	r3, r3
 811ead8:	f107 0012 	add.w	r0, r7, #18
 811eadc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811eade:	9302      	str	r3, [sp, #8]
 811eae0:	797b      	ldrb	r3, [r7, #5]
 811eae2:	9301      	str	r3, [sp, #4]
 811eae4:	68fb      	ldr	r3, [r7, #12]
 811eae6:	9300      	str	r3, [sp, #0]
 811eae8:	4603      	mov	r3, r0
 811eaea:	2036      	movs	r0, #54	@ 0x36
 811eaec:	f7ff fd5c 	bl	811e5a8 <tcp_pbuf_prealloc>
 811eaf0:	6338      	str	r0, [r7, #48]	@ 0x30
 811eaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811eaf4:	2b00      	cmp	r3, #0
 811eaf6:	f000 8178 	beq.w	811edea <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 811eafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811eafc:	895b      	ldrh	r3, [r3, #10]
 811eafe:	8b3a      	ldrh	r2, [r7, #24]
 811eb00:	429a      	cmp	r2, r3
 811eb02:	d906      	bls.n	811eb12 <tcp_write+0x382>
 811eb04:	4b8c      	ldr	r3, [pc, #560]	@ (811ed38 <tcp_write+0x5a8>)
 811eb06:	f240 2266 	movw	r2, #614	@ 0x266
 811eb0a:	498c      	ldr	r1, [pc, #560]	@ (811ed3c <tcp_write+0x5ac>)
 811eb0c:	488c      	ldr	r0, [pc, #560]	@ (811ed40 <tcp_write+0x5b0>)
 811eb0e:	f003 f939 	bl	8121d84 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 811eb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811eb14:	685a      	ldr	r2, [r3, #4]
 811eb16:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811eb1a:	18d0      	adds	r0, r2, r3
 811eb1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811eb20:	68ba      	ldr	r2, [r7, #8]
 811eb22:	4413      	add	r3, r2
 811eb24:	8b3a      	ldrh	r2, [r7, #24]
 811eb26:	4619      	mov	r1, r3
 811eb28:	f003 fbcd 	bl	81222c6 <memcpy>
 811eb2c:	e02f      	b.n	811eb8e <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 811eb2e:	8a7b      	ldrh	r3, [r7, #18]
 811eb30:	2b00      	cmp	r3, #0
 811eb32:	d006      	beq.n	811eb42 <tcp_write+0x3b2>
 811eb34:	4b80      	ldr	r3, [pc, #512]	@ (811ed38 <tcp_write+0x5a8>)
 811eb36:	f240 2271 	movw	r2, #625	@ 0x271
 811eb3a:	4982      	ldr	r1, [pc, #520]	@ (811ed44 <tcp_write+0x5b4>)
 811eb3c:	4880      	ldr	r0, [pc, #512]	@ (811ed40 <tcp_write+0x5b0>)
 811eb3e:	f003 f921 	bl	8121d84 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 811eb42:	8b3b      	ldrh	r3, [r7, #24]
 811eb44:	2201      	movs	r2, #1
 811eb46:	4619      	mov	r1, r3
 811eb48:	2036      	movs	r0, #54	@ 0x36
 811eb4a:	f7fa fc2d 	bl	81193a8 <pbuf_alloc>
 811eb4e:	6178      	str	r0, [r7, #20]
 811eb50:	697b      	ldr	r3, [r7, #20]
 811eb52:	2b00      	cmp	r3, #0
 811eb54:	f000 814b 	beq.w	811edee <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 811eb58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811eb5c:	68ba      	ldr	r2, [r7, #8]
 811eb5e:	441a      	add	r2, r3
 811eb60:	697b      	ldr	r3, [r7, #20]
 811eb62:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 811eb64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811eb68:	b29b      	uxth	r3, r3
 811eb6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811eb6e:	4619      	mov	r1, r3
 811eb70:	2036      	movs	r0, #54	@ 0x36
 811eb72:	f7fa fc19 	bl	81193a8 <pbuf_alloc>
 811eb76:	6338      	str	r0, [r7, #48]	@ 0x30
 811eb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811eb7a:	2b00      	cmp	r3, #0
 811eb7c:	d103      	bne.n	811eb86 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 811eb7e:	6978      	ldr	r0, [r7, #20]
 811eb80:	f7fa fef4 	bl	811996c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 811eb84:	e136      	b.n	811edf4 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 811eb86:	6979      	ldr	r1, [r7, #20]
 811eb88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811eb8a:	f7fa ffbd 	bl	8119b08 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 811eb8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811eb90:	f7fa ff7a 	bl	8119a88 <pbuf_clen>
 811eb94:	4603      	mov	r3, r0
 811eb96:	461a      	mov	r2, r3
 811eb98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811eb9c:	4413      	add	r3, r2
 811eb9e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 811eba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811eba6:	2b09      	cmp	r3, #9
 811eba8:	d903      	bls.n	811ebb2 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 811ebaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811ebac:	f7fa fede 	bl	811996c <pbuf_free>
      goto memerr;
 811ebb0:	e120      	b.n	811edf4 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 811ebb2:	68fb      	ldr	r3, [r7, #12]
 811ebb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 811ebb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811ebba:	441a      	add	r2, r3
 811ebbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ebc0:	9300      	str	r3, [sp, #0]
 811ebc2:	4613      	mov	r3, r2
 811ebc4:	2200      	movs	r2, #0
 811ebc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 811ebc8:	68f8      	ldr	r0, [r7, #12]
 811ebca:	f7ff fc51 	bl	811e470 <tcp_create_segment>
 811ebce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 811ebd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811ebd2:	2b00      	cmp	r3, #0
 811ebd4:	f000 810d 	beq.w	811edf2 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 811ebd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811ebda:	2b00      	cmp	r3, #0
 811ebdc:	d102      	bne.n	811ebe4 <tcp_write+0x454>
      queue = seg;
 811ebde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811ebe0:	647b      	str	r3, [r7, #68]	@ 0x44
 811ebe2:	e00c      	b.n	811ebfe <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 811ebe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811ebe6:	2b00      	cmp	r3, #0
 811ebe8:	d106      	bne.n	811ebf8 <tcp_write+0x468>
 811ebea:	4b53      	ldr	r3, [pc, #332]	@ (811ed38 <tcp_write+0x5a8>)
 811ebec:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811ebf0:	4955      	ldr	r1, [pc, #340]	@ (811ed48 <tcp_write+0x5b8>)
 811ebf2:	4853      	ldr	r0, [pc, #332]	@ (811ed40 <tcp_write+0x5b0>)
 811ebf4:	f003 f8c6 	bl	8121d84 <iprintf>
      prev_seg->next = seg;
 811ebf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811ebfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 811ebfc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 811ebfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811ec00:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 811ec02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811ec06:	8b3b      	ldrh	r3, [r7, #24]
 811ec08:	4413      	add	r3, r2
 811ec0a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 811ec0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811ec12:	88fb      	ldrh	r3, [r7, #6]
 811ec14:	429a      	cmp	r2, r3
 811ec16:	f4ff af3d 	bcc.w	811ea94 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 811ec1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811ec1c:	2b00      	cmp	r3, #0
 811ec1e:	d02c      	beq.n	811ec7a <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 811ec20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ec22:	685b      	ldr	r3, [r3, #4]
 811ec24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811ec26:	e01e      	b.n	811ec66 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 811ec28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec2a:	891a      	ldrh	r2, [r3, #8]
 811ec2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811ec2e:	4413      	add	r3, r2
 811ec30:	b29a      	uxth	r2, r3
 811ec32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec34:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 811ec36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec38:	681b      	ldr	r3, [r3, #0]
 811ec3a:	2b00      	cmp	r3, #0
 811ec3c:	d110      	bne.n	811ec60 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 811ec3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec40:	685b      	ldr	r3, [r3, #4]
 811ec42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811ec44:	8952      	ldrh	r2, [r2, #10]
 811ec46:	4413      	add	r3, r2
 811ec48:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 811ec4a:	68b9      	ldr	r1, [r7, #8]
 811ec4c:	4618      	mov	r0, r3
 811ec4e:	f003 fb3a 	bl	81222c6 <memcpy>
        p->len += oversize_used;
 811ec52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec54:	895a      	ldrh	r2, [r3, #10]
 811ec56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811ec58:	4413      	add	r3, r2
 811ec5a:	b29a      	uxth	r2, r3
 811ec5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec5e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 811ec60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec62:	681b      	ldr	r3, [r3, #0]
 811ec64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ec68:	2b00      	cmp	r3, #0
 811ec6a:	d1dd      	bne.n	811ec28 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 811ec6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ec6e:	891a      	ldrh	r2, [r3, #8]
 811ec70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811ec72:	4413      	add	r3, r2
 811ec74:	b29a      	uxth	r2, r3
 811ec76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ec78:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 811ec7a:	8a7a      	ldrh	r2, [r7, #18]
 811ec7c:	68fb      	ldr	r3, [r7, #12]
 811ec7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 811ec82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811ec84:	2b00      	cmp	r3, #0
 811ec86:	d018      	beq.n	811ecba <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 811ec88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ec8a:	2b00      	cmp	r3, #0
 811ec8c:	d106      	bne.n	811ec9c <tcp_write+0x50c>
 811ec8e:	4b2a      	ldr	r3, [pc, #168]	@ (811ed38 <tcp_write+0x5a8>)
 811ec90:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 811ec94:	492d      	ldr	r1, [pc, #180]	@ (811ed4c <tcp_write+0x5bc>)
 811ec96:	482a      	ldr	r0, [pc, #168]	@ (811ed40 <tcp_write+0x5b0>)
 811ec98:	f003 f874 	bl	8121d84 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 811ec9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ec9e:	685b      	ldr	r3, [r3, #4]
 811eca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 811eca2:	4618      	mov	r0, r3
 811eca4:	f7fa ff30 	bl	8119b08 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 811eca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ecaa:	891a      	ldrh	r2, [r3, #8]
 811ecac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811ecae:	891b      	ldrh	r3, [r3, #8]
 811ecb0:	4413      	add	r3, r2
 811ecb2:	b29a      	uxth	r2, r3
 811ecb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ecb6:	811a      	strh	r2, [r3, #8]
 811ecb8:	e037      	b.n	811ed2a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 811ecba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811ecbc:	2b00      	cmp	r3, #0
 811ecbe:	d034      	beq.n	811ed2a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 811ecc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ecc2:	2b00      	cmp	r3, #0
 811ecc4:	d003      	beq.n	811ecce <tcp_write+0x53e>
 811ecc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ecc8:	685b      	ldr	r3, [r3, #4]
 811ecca:	2b00      	cmp	r3, #0
 811eccc:	d106      	bne.n	811ecdc <tcp_write+0x54c>
 811ecce:	4b1a      	ldr	r3, [pc, #104]	@ (811ed38 <tcp_write+0x5a8>)
 811ecd0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 811ecd4:	491e      	ldr	r1, [pc, #120]	@ (811ed50 <tcp_write+0x5c0>)
 811ecd6:	481a      	ldr	r0, [pc, #104]	@ (811ed40 <tcp_write+0x5b0>)
 811ecd8:	f003 f854 	bl	8121d84 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 811ecdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ecde:	685b      	ldr	r3, [r3, #4]
 811ece0:	62bb      	str	r3, [r7, #40]	@ 0x28
 811ece2:	e009      	b.n	811ecf8 <tcp_write+0x568>
      p->tot_len += extendlen;
 811ece4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ece6:	891a      	ldrh	r2, [r3, #8]
 811ece8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811ecea:	4413      	add	r3, r2
 811ecec:	b29a      	uxth	r2, r3
 811ecee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ecf0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 811ecf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ecf4:	681b      	ldr	r3, [r3, #0]
 811ecf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 811ecf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ecfa:	681b      	ldr	r3, [r3, #0]
 811ecfc:	2b00      	cmp	r3, #0
 811ecfe:	d1f1      	bne.n	811ece4 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 811ed00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ed02:	891a      	ldrh	r2, [r3, #8]
 811ed04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811ed06:	4413      	add	r3, r2
 811ed08:	b29a      	uxth	r2, r3
 811ed0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ed0c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 811ed0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ed10:	895a      	ldrh	r2, [r3, #10]
 811ed12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811ed14:	4413      	add	r3, r2
 811ed16:	b29a      	uxth	r2, r3
 811ed18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ed1a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 811ed1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ed1e:	891a      	ldrh	r2, [r3, #8]
 811ed20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811ed22:	4413      	add	r3, r2
 811ed24:	b29a      	uxth	r2, r3
 811ed26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ed28:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 811ed2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ed2c:	2b00      	cmp	r3, #0
 811ed2e:	d111      	bne.n	811ed54 <tcp_write+0x5c4>
    pcb->unsent = queue;
 811ed30:	68fb      	ldr	r3, [r7, #12]
 811ed32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 811ed34:	66da      	str	r2, [r3, #108]	@ 0x6c
 811ed36:	e010      	b.n	811ed5a <tcp_write+0x5ca>
 811ed38:	08127a94 	.word	0x08127a94
 811ed3c:	08127d6c 	.word	0x08127d6c
 811ed40:	08127b20 	.word	0x08127b20
 811ed44:	08127dac 	.word	0x08127dac
 811ed48:	08127dbc 	.word	0x08127dbc
 811ed4c:	08127dd0 	.word	0x08127dd0
 811ed50:	08127e08 	.word	0x08127e08
  } else {
    last_unsent->next = queue;
 811ed54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811ed56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 811ed58:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 811ed5a:	68fb      	ldr	r3, [r7, #12]
 811ed5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 811ed5e:	88fb      	ldrh	r3, [r7, #6]
 811ed60:	441a      	add	r2, r3
 811ed62:	68fb      	ldr	r3, [r7, #12]
 811ed64:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 811ed66:	68fb      	ldr	r3, [r7, #12]
 811ed68:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811ed6c:	88fb      	ldrh	r3, [r7, #6]
 811ed6e:	1ad3      	subs	r3, r2, r3
 811ed70:	b29a      	uxth	r2, r3
 811ed72:	68fb      	ldr	r3, [r7, #12]
 811ed74:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 811ed78:	68fb      	ldr	r3, [r7, #12]
 811ed7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 811ed7e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 811ed82:	68fb      	ldr	r3, [r7, #12]
 811ed84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ed88:	2b00      	cmp	r3, #0
 811ed8a:	d00e      	beq.n	811edaa <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 811ed8c:	68fb      	ldr	r3, [r7, #12]
 811ed8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811ed90:	2b00      	cmp	r3, #0
 811ed92:	d10a      	bne.n	811edaa <tcp_write+0x61a>
 811ed94:	68fb      	ldr	r3, [r7, #12]
 811ed96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ed98:	2b00      	cmp	r3, #0
 811ed9a:	d106      	bne.n	811edaa <tcp_write+0x61a>
 811ed9c:	4b2c      	ldr	r3, [pc, #176]	@ (811ee50 <tcp_write+0x6c0>)
 811ed9e:	f240 3212 	movw	r2, #786	@ 0x312
 811eda2:	492c      	ldr	r1, [pc, #176]	@ (811ee54 <tcp_write+0x6c4>)
 811eda4:	482c      	ldr	r0, [pc, #176]	@ (811ee58 <tcp_write+0x6c8>)
 811eda6:	f002 ffed 	bl	8121d84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 811edaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811edac:	2b00      	cmp	r3, #0
 811edae:	d016      	beq.n	811edde <tcp_write+0x64e>
 811edb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811edb2:	68db      	ldr	r3, [r3, #12]
 811edb4:	2b00      	cmp	r3, #0
 811edb6:	d012      	beq.n	811edde <tcp_write+0x64e>
 811edb8:	797b      	ldrb	r3, [r7, #5]
 811edba:	f003 0302 	and.w	r3, r3, #2
 811edbe:	2b00      	cmp	r3, #0
 811edc0:	d10d      	bne.n	811edde <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 811edc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811edc4:	68db      	ldr	r3, [r3, #12]
 811edc6:	899b      	ldrh	r3, [r3, #12]
 811edc8:	b29c      	uxth	r4, r3
 811edca:	2008      	movs	r0, #8
 811edcc:	f7f4 ff8e 	bl	8113cec <lwip_htons>
 811edd0:	4603      	mov	r3, r0
 811edd2:	461a      	mov	r2, r3
 811edd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811edd6:	68db      	ldr	r3, [r3, #12]
 811edd8:	4322      	orrs	r2, r4
 811edda:	b292      	uxth	r2, r2
 811eddc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 811edde:	2300      	movs	r3, #0
 811ede0:	e031      	b.n	811ee46 <tcp_write+0x6b6>
          goto memerr;
 811ede2:	bf00      	nop
 811ede4:	e006      	b.n	811edf4 <tcp_write+0x664>
            goto memerr;
 811ede6:	bf00      	nop
 811ede8:	e004      	b.n	811edf4 <tcp_write+0x664>
        goto memerr;
 811edea:	bf00      	nop
 811edec:	e002      	b.n	811edf4 <tcp_write+0x664>
        goto memerr;
 811edee:	bf00      	nop
 811edf0:	e000      	b.n	811edf4 <tcp_write+0x664>
      goto memerr;
 811edf2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811edf4:	68fb      	ldr	r3, [r7, #12]
 811edf6:	8b5b      	ldrh	r3, [r3, #26]
 811edf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811edfc:	b29a      	uxth	r2, r3
 811edfe:	68fb      	ldr	r3, [r7, #12]
 811ee00:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 811ee02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811ee04:	2b00      	cmp	r3, #0
 811ee06:	d002      	beq.n	811ee0e <tcp_write+0x67e>
    pbuf_free(concat_p);
 811ee08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 811ee0a:	f7fa fdaf 	bl	811996c <pbuf_free>
  }
  if (queue != NULL) {
 811ee0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811ee10:	2b00      	cmp	r3, #0
 811ee12:	d002      	beq.n	811ee1a <tcp_write+0x68a>
    tcp_segs_free(queue);
 811ee14:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811ee16:	f7fc fb7b 	bl	811b510 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 811ee1a:	68fb      	ldr	r3, [r7, #12]
 811ee1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ee20:	2b00      	cmp	r3, #0
 811ee22:	d00e      	beq.n	811ee42 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 811ee24:	68fb      	ldr	r3, [r7, #12]
 811ee26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811ee28:	2b00      	cmp	r3, #0
 811ee2a:	d10a      	bne.n	811ee42 <tcp_write+0x6b2>
 811ee2c:	68fb      	ldr	r3, [r7, #12]
 811ee2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ee30:	2b00      	cmp	r3, #0
 811ee32:	d106      	bne.n	811ee42 <tcp_write+0x6b2>
 811ee34:	4b06      	ldr	r3, [pc, #24]	@ (811ee50 <tcp_write+0x6c0>)
 811ee36:	f240 3227 	movw	r2, #807	@ 0x327
 811ee3a:	4906      	ldr	r1, [pc, #24]	@ (811ee54 <tcp_write+0x6c4>)
 811ee3c:	4806      	ldr	r0, [pc, #24]	@ (811ee58 <tcp_write+0x6c8>)
 811ee3e:	f002 ffa1 	bl	8121d84 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 811ee42:	f04f 33ff 	mov.w	r3, #4294967295
}
 811ee46:	4618      	mov	r0, r3
 811ee48:	375c      	adds	r7, #92	@ 0x5c
 811ee4a:	46bd      	mov	sp, r7
 811ee4c:	bd90      	pop	{r4, r7, pc}
 811ee4e:	bf00      	nop
 811ee50:	08127a94 	.word	0x08127a94
 811ee54:	08127e40 	.word	0x08127e40
 811ee58:	08127b20 	.word	0x08127b20

0811ee5c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 811ee5c:	b590      	push	{r4, r7, lr}
 811ee5e:	b08b      	sub	sp, #44	@ 0x2c
 811ee60:	af02      	add	r7, sp, #8
 811ee62:	6078      	str	r0, [r7, #4]
 811ee64:	460b      	mov	r3, r1
 811ee66:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 811ee68:	2300      	movs	r3, #0
 811ee6a:	61fb      	str	r3, [r7, #28]
 811ee6c:	2300      	movs	r3, #0
 811ee6e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 811ee70:	2300      	movs	r3, #0
 811ee72:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 811ee74:	687b      	ldr	r3, [r7, #4]
 811ee76:	2b00      	cmp	r3, #0
 811ee78:	d106      	bne.n	811ee88 <tcp_split_unsent_seg+0x2c>
 811ee7a:	4b95      	ldr	r3, [pc, #596]	@ (811f0d0 <tcp_split_unsent_seg+0x274>)
 811ee7c:	f240 324b 	movw	r2, #843	@ 0x34b
 811ee80:	4994      	ldr	r1, [pc, #592]	@ (811f0d4 <tcp_split_unsent_seg+0x278>)
 811ee82:	4895      	ldr	r0, [pc, #596]	@ (811f0d8 <tcp_split_unsent_seg+0x27c>)
 811ee84:	f002 ff7e 	bl	8121d84 <iprintf>

  useg = pcb->unsent;
 811ee88:	687b      	ldr	r3, [r7, #4]
 811ee8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ee8c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 811ee8e:	697b      	ldr	r3, [r7, #20]
 811ee90:	2b00      	cmp	r3, #0
 811ee92:	d102      	bne.n	811ee9a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 811ee94:	f04f 33ff 	mov.w	r3, #4294967295
 811ee98:	e116      	b.n	811f0c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 811ee9a:	887b      	ldrh	r3, [r7, #2]
 811ee9c:	2b00      	cmp	r3, #0
 811ee9e:	d109      	bne.n	811eeb4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 811eea0:	4b8b      	ldr	r3, [pc, #556]	@ (811f0d0 <tcp_split_unsent_seg+0x274>)
 811eea2:	f240 3253 	movw	r2, #851	@ 0x353
 811eea6:	498d      	ldr	r1, [pc, #564]	@ (811f0dc <tcp_split_unsent_seg+0x280>)
 811eea8:	488b      	ldr	r0, [pc, #556]	@ (811f0d8 <tcp_split_unsent_seg+0x27c>)
 811eeaa:	f002 ff6b 	bl	8121d84 <iprintf>
    return ERR_VAL;
 811eeae:	f06f 0305 	mvn.w	r3, #5
 811eeb2:	e109      	b.n	811f0c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 811eeb4:	697b      	ldr	r3, [r7, #20]
 811eeb6:	891b      	ldrh	r3, [r3, #8]
 811eeb8:	887a      	ldrh	r2, [r7, #2]
 811eeba:	429a      	cmp	r2, r3
 811eebc:	d301      	bcc.n	811eec2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 811eebe:	2300      	movs	r3, #0
 811eec0:	e102      	b.n	811f0c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 811eec2:	687b      	ldr	r3, [r7, #4]
 811eec4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811eec6:	887a      	ldrh	r2, [r7, #2]
 811eec8:	429a      	cmp	r2, r3
 811eeca:	d906      	bls.n	811eeda <tcp_split_unsent_seg+0x7e>
 811eecc:	4b80      	ldr	r3, [pc, #512]	@ (811f0d0 <tcp_split_unsent_seg+0x274>)
 811eece:	f240 325b 	movw	r2, #859	@ 0x35b
 811eed2:	4983      	ldr	r1, [pc, #524]	@ (811f0e0 <tcp_split_unsent_seg+0x284>)
 811eed4:	4880      	ldr	r0, [pc, #512]	@ (811f0d8 <tcp_split_unsent_seg+0x27c>)
 811eed6:	f002 ff55 	bl	8121d84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 811eeda:	697b      	ldr	r3, [r7, #20]
 811eedc:	891b      	ldrh	r3, [r3, #8]
 811eede:	2b00      	cmp	r3, #0
 811eee0:	d106      	bne.n	811eef0 <tcp_split_unsent_seg+0x94>
 811eee2:	4b7b      	ldr	r3, [pc, #492]	@ (811f0d0 <tcp_split_unsent_seg+0x274>)
 811eee4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 811eee8:	497e      	ldr	r1, [pc, #504]	@ (811f0e4 <tcp_split_unsent_seg+0x288>)
 811eeea:	487b      	ldr	r0, [pc, #492]	@ (811f0d8 <tcp_split_unsent_seg+0x27c>)
 811eeec:	f002 ff4a 	bl	8121d84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 811eef0:	697b      	ldr	r3, [r7, #20]
 811eef2:	7a9b      	ldrb	r3, [r3, #10]
 811eef4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 811eef6:	7bfb      	ldrb	r3, [r7, #15]
 811eef8:	009b      	lsls	r3, r3, #2
 811eefa:	b2db      	uxtb	r3, r3
 811eefc:	f003 0304 	and.w	r3, r3, #4
 811ef00:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 811ef02:	697b      	ldr	r3, [r7, #20]
 811ef04:	891a      	ldrh	r2, [r3, #8]
 811ef06:	887b      	ldrh	r3, [r7, #2]
 811ef08:	1ad3      	subs	r3, r2, r3
 811ef0a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 811ef0c:	7bbb      	ldrb	r3, [r7, #14]
 811ef0e:	b29a      	uxth	r2, r3
 811ef10:	89bb      	ldrh	r3, [r7, #12]
 811ef12:	4413      	add	r3, r2
 811ef14:	b29b      	uxth	r3, r3
 811ef16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811ef1a:	4619      	mov	r1, r3
 811ef1c:	2036      	movs	r0, #54	@ 0x36
 811ef1e:	f7fa fa43 	bl	81193a8 <pbuf_alloc>
 811ef22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811ef24:	693b      	ldr	r3, [r7, #16]
 811ef26:	2b00      	cmp	r3, #0
 811ef28:	f000 80b7 	beq.w	811f09a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 811ef2c:	697b      	ldr	r3, [r7, #20]
 811ef2e:	685b      	ldr	r3, [r3, #4]
 811ef30:	891a      	ldrh	r2, [r3, #8]
 811ef32:	697b      	ldr	r3, [r7, #20]
 811ef34:	891b      	ldrh	r3, [r3, #8]
 811ef36:	1ad3      	subs	r3, r2, r3
 811ef38:	b29a      	uxth	r2, r3
 811ef3a:	887b      	ldrh	r3, [r7, #2]
 811ef3c:	4413      	add	r3, r2
 811ef3e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 811ef40:	697b      	ldr	r3, [r7, #20]
 811ef42:	6858      	ldr	r0, [r3, #4]
 811ef44:	693b      	ldr	r3, [r7, #16]
 811ef46:	685a      	ldr	r2, [r3, #4]
 811ef48:	7bbb      	ldrb	r3, [r7, #14]
 811ef4a:	18d1      	adds	r1, r2, r3
 811ef4c:	897b      	ldrh	r3, [r7, #10]
 811ef4e:	89ba      	ldrh	r2, [r7, #12]
 811ef50:	f7fa ff12 	bl	8119d78 <pbuf_copy_partial>
 811ef54:	4603      	mov	r3, r0
 811ef56:	461a      	mov	r2, r3
 811ef58:	89bb      	ldrh	r3, [r7, #12]
 811ef5a:	4293      	cmp	r3, r2
 811ef5c:	f040 809f 	bne.w	811f09e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 811ef60:	697b      	ldr	r3, [r7, #20]
 811ef62:	68db      	ldr	r3, [r3, #12]
 811ef64:	899b      	ldrh	r3, [r3, #12]
 811ef66:	b29b      	uxth	r3, r3
 811ef68:	4618      	mov	r0, r3
 811ef6a:	f7f4 febf 	bl	8113cec <lwip_htons>
 811ef6e:	4603      	mov	r3, r0
 811ef70:	b2db      	uxtb	r3, r3
 811ef72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811ef76:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 811ef78:	2300      	movs	r3, #0
 811ef7a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 811ef7c:	7efb      	ldrb	r3, [r7, #27]
 811ef7e:	f003 0308 	and.w	r3, r3, #8
 811ef82:	2b00      	cmp	r3, #0
 811ef84:	d007      	beq.n	811ef96 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 811ef86:	7efb      	ldrb	r3, [r7, #27]
 811ef88:	f023 0308 	bic.w	r3, r3, #8
 811ef8c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 811ef8e:	7ebb      	ldrb	r3, [r7, #26]
 811ef90:	f043 0308 	orr.w	r3, r3, #8
 811ef94:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 811ef96:	7efb      	ldrb	r3, [r7, #27]
 811ef98:	f003 0301 	and.w	r3, r3, #1
 811ef9c:	2b00      	cmp	r3, #0
 811ef9e:	d007      	beq.n	811efb0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 811efa0:	7efb      	ldrb	r3, [r7, #27]
 811efa2:	f023 0301 	bic.w	r3, r3, #1
 811efa6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 811efa8:	7ebb      	ldrb	r3, [r7, #26]
 811efaa:	f043 0301 	orr.w	r3, r3, #1
 811efae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 811efb0:	697b      	ldr	r3, [r7, #20]
 811efb2:	68db      	ldr	r3, [r3, #12]
 811efb4:	685b      	ldr	r3, [r3, #4]
 811efb6:	4618      	mov	r0, r3
 811efb8:	f7f4 fead 	bl	8113d16 <lwip_htonl>
 811efbc:	4602      	mov	r2, r0
 811efbe:	887b      	ldrh	r3, [r7, #2]
 811efc0:	18d1      	adds	r1, r2, r3
 811efc2:	7eba      	ldrb	r2, [r7, #26]
 811efc4:	7bfb      	ldrb	r3, [r7, #15]
 811efc6:	9300      	str	r3, [sp, #0]
 811efc8:	460b      	mov	r3, r1
 811efca:	6939      	ldr	r1, [r7, #16]
 811efcc:	6878      	ldr	r0, [r7, #4]
 811efce:	f7ff fa4f 	bl	811e470 <tcp_create_segment>
 811efd2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 811efd4:	69fb      	ldr	r3, [r7, #28]
 811efd6:	2b00      	cmp	r3, #0
 811efd8:	d063      	beq.n	811f0a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 811efda:	697b      	ldr	r3, [r7, #20]
 811efdc:	685b      	ldr	r3, [r3, #4]
 811efde:	4618      	mov	r0, r3
 811efe0:	f7fa fd52 	bl	8119a88 <pbuf_clen>
 811efe4:	4603      	mov	r3, r0
 811efe6:	461a      	mov	r2, r3
 811efe8:	687b      	ldr	r3, [r7, #4]
 811efea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811efee:	1a9b      	subs	r3, r3, r2
 811eff0:	b29a      	uxth	r2, r3
 811eff2:	687b      	ldr	r3, [r7, #4]
 811eff4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 811eff8:	697b      	ldr	r3, [r7, #20]
 811effa:	6858      	ldr	r0, [r3, #4]
 811effc:	697b      	ldr	r3, [r7, #20]
 811effe:	685b      	ldr	r3, [r3, #4]
 811f000:	891a      	ldrh	r2, [r3, #8]
 811f002:	89bb      	ldrh	r3, [r7, #12]
 811f004:	1ad3      	subs	r3, r2, r3
 811f006:	b29b      	uxth	r3, r3
 811f008:	4619      	mov	r1, r3
 811f00a:	f7fa fb2b 	bl	8119664 <pbuf_realloc>
  useg->len -= remainder;
 811f00e:	697b      	ldr	r3, [r7, #20]
 811f010:	891a      	ldrh	r2, [r3, #8]
 811f012:	89bb      	ldrh	r3, [r7, #12]
 811f014:	1ad3      	subs	r3, r2, r3
 811f016:	b29a      	uxth	r2, r3
 811f018:	697b      	ldr	r3, [r7, #20]
 811f01a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 811f01c:	697b      	ldr	r3, [r7, #20]
 811f01e:	68db      	ldr	r3, [r3, #12]
 811f020:	899b      	ldrh	r3, [r3, #12]
 811f022:	b29c      	uxth	r4, r3
 811f024:	7efb      	ldrb	r3, [r7, #27]
 811f026:	b29b      	uxth	r3, r3
 811f028:	4618      	mov	r0, r3
 811f02a:	f7f4 fe5f 	bl	8113cec <lwip_htons>
 811f02e:	4603      	mov	r3, r0
 811f030:	461a      	mov	r2, r3
 811f032:	697b      	ldr	r3, [r7, #20]
 811f034:	68db      	ldr	r3, [r3, #12]
 811f036:	4322      	orrs	r2, r4
 811f038:	b292      	uxth	r2, r2
 811f03a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 811f03c:	697b      	ldr	r3, [r7, #20]
 811f03e:	685b      	ldr	r3, [r3, #4]
 811f040:	4618      	mov	r0, r3
 811f042:	f7fa fd21 	bl	8119a88 <pbuf_clen>
 811f046:	4603      	mov	r3, r0
 811f048:	461a      	mov	r2, r3
 811f04a:	687b      	ldr	r3, [r7, #4]
 811f04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f050:	4413      	add	r3, r2
 811f052:	b29a      	uxth	r2, r3
 811f054:	687b      	ldr	r3, [r7, #4]
 811f056:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811f05a:	69fb      	ldr	r3, [r7, #28]
 811f05c:	685b      	ldr	r3, [r3, #4]
 811f05e:	4618      	mov	r0, r3
 811f060:	f7fa fd12 	bl	8119a88 <pbuf_clen>
 811f064:	4603      	mov	r3, r0
 811f066:	461a      	mov	r2, r3
 811f068:	687b      	ldr	r3, [r7, #4]
 811f06a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f06e:	4413      	add	r3, r2
 811f070:	b29a      	uxth	r2, r3
 811f072:	687b      	ldr	r3, [r7, #4]
 811f074:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 811f078:	697b      	ldr	r3, [r7, #20]
 811f07a:	681a      	ldr	r2, [r3, #0]
 811f07c:	69fb      	ldr	r3, [r7, #28]
 811f07e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 811f080:	697b      	ldr	r3, [r7, #20]
 811f082:	69fa      	ldr	r2, [r7, #28]
 811f084:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 811f086:	69fb      	ldr	r3, [r7, #28]
 811f088:	681b      	ldr	r3, [r3, #0]
 811f08a:	2b00      	cmp	r3, #0
 811f08c:	d103      	bne.n	811f096 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 811f08e:	687b      	ldr	r3, [r7, #4]
 811f090:	2200      	movs	r2, #0
 811f092:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 811f096:	2300      	movs	r3, #0
 811f098:	e016      	b.n	811f0c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 811f09a:	bf00      	nop
 811f09c:	e002      	b.n	811f0a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 811f09e:	bf00      	nop
 811f0a0:	e000      	b.n	811f0a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 811f0a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 811f0a4:	69fb      	ldr	r3, [r7, #28]
 811f0a6:	2b00      	cmp	r3, #0
 811f0a8:	d006      	beq.n	811f0b8 <tcp_split_unsent_seg+0x25c>
 811f0aa:	4b09      	ldr	r3, [pc, #36]	@ (811f0d0 <tcp_split_unsent_seg+0x274>)
 811f0ac:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 811f0b0:	490d      	ldr	r1, [pc, #52]	@ (811f0e8 <tcp_split_unsent_seg+0x28c>)
 811f0b2:	4809      	ldr	r0, [pc, #36]	@ (811f0d8 <tcp_split_unsent_seg+0x27c>)
 811f0b4:	f002 fe66 	bl	8121d84 <iprintf>
  if (p != NULL) {
 811f0b8:	693b      	ldr	r3, [r7, #16]
 811f0ba:	2b00      	cmp	r3, #0
 811f0bc:	d002      	beq.n	811f0c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 811f0be:	6938      	ldr	r0, [r7, #16]
 811f0c0:	f7fa fc54 	bl	811996c <pbuf_free>
  }

  return ERR_MEM;
 811f0c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 811f0c8:	4618      	mov	r0, r3
 811f0ca:	3724      	adds	r7, #36	@ 0x24
 811f0cc:	46bd      	mov	sp, r7
 811f0ce:	bd90      	pop	{r4, r7, pc}
 811f0d0:	08127a94 	.word	0x08127a94
 811f0d4:	08127e60 	.word	0x08127e60
 811f0d8:	08127b20 	.word	0x08127b20
 811f0dc:	08127e84 	.word	0x08127e84
 811f0e0:	08127ea8 	.word	0x08127ea8
 811f0e4:	08127eb8 	.word	0x08127eb8
 811f0e8:	08127ec8 	.word	0x08127ec8

0811f0ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 811f0ec:	b590      	push	{r4, r7, lr}
 811f0ee:	b085      	sub	sp, #20
 811f0f0:	af00      	add	r7, sp, #0
 811f0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 811f0f4:	687b      	ldr	r3, [r7, #4]
 811f0f6:	2b00      	cmp	r3, #0
 811f0f8:	d106      	bne.n	811f108 <tcp_send_fin+0x1c>
 811f0fa:	4b21      	ldr	r3, [pc, #132]	@ (811f180 <tcp_send_fin+0x94>)
 811f0fc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 811f100:	4920      	ldr	r1, [pc, #128]	@ (811f184 <tcp_send_fin+0x98>)
 811f102:	4821      	ldr	r0, [pc, #132]	@ (811f188 <tcp_send_fin+0x9c>)
 811f104:	f002 fe3e 	bl	8121d84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 811f108:	687b      	ldr	r3, [r7, #4]
 811f10a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f10c:	2b00      	cmp	r3, #0
 811f10e:	d02e      	beq.n	811f16e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811f110:	687b      	ldr	r3, [r7, #4]
 811f112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f114:	60fb      	str	r3, [r7, #12]
 811f116:	e002      	b.n	811f11e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 811f118:	68fb      	ldr	r3, [r7, #12]
 811f11a:	681b      	ldr	r3, [r3, #0]
 811f11c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811f11e:	68fb      	ldr	r3, [r7, #12]
 811f120:	681b      	ldr	r3, [r3, #0]
 811f122:	2b00      	cmp	r3, #0
 811f124:	d1f8      	bne.n	811f118 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 811f126:	68fb      	ldr	r3, [r7, #12]
 811f128:	68db      	ldr	r3, [r3, #12]
 811f12a:	899b      	ldrh	r3, [r3, #12]
 811f12c:	b29b      	uxth	r3, r3
 811f12e:	4618      	mov	r0, r3
 811f130:	f7f4 fddc 	bl	8113cec <lwip_htons>
 811f134:	4603      	mov	r3, r0
 811f136:	b2db      	uxtb	r3, r3
 811f138:	f003 0307 	and.w	r3, r3, #7
 811f13c:	2b00      	cmp	r3, #0
 811f13e:	d116      	bne.n	811f16e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 811f140:	68fb      	ldr	r3, [r7, #12]
 811f142:	68db      	ldr	r3, [r3, #12]
 811f144:	899b      	ldrh	r3, [r3, #12]
 811f146:	b29c      	uxth	r4, r3
 811f148:	2001      	movs	r0, #1
 811f14a:	f7f4 fdcf 	bl	8113cec <lwip_htons>
 811f14e:	4603      	mov	r3, r0
 811f150:	461a      	mov	r2, r3
 811f152:	68fb      	ldr	r3, [r7, #12]
 811f154:	68db      	ldr	r3, [r3, #12]
 811f156:	4322      	orrs	r2, r4
 811f158:	b292      	uxth	r2, r2
 811f15a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 811f15c:	687b      	ldr	r3, [r7, #4]
 811f15e:	8b5b      	ldrh	r3, [r3, #26]
 811f160:	f043 0320 	orr.w	r3, r3, #32
 811f164:	b29a      	uxth	r2, r3
 811f166:	687b      	ldr	r3, [r7, #4]
 811f168:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 811f16a:	2300      	movs	r3, #0
 811f16c:	e004      	b.n	811f178 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 811f16e:	2101      	movs	r1, #1
 811f170:	6878      	ldr	r0, [r7, #4]
 811f172:	f000 f80b 	bl	811f18c <tcp_enqueue_flags>
 811f176:	4603      	mov	r3, r0
}
 811f178:	4618      	mov	r0, r3
 811f17a:	3714      	adds	r7, #20
 811f17c:	46bd      	mov	sp, r7
 811f17e:	bd90      	pop	{r4, r7, pc}
 811f180:	08127a94 	.word	0x08127a94
 811f184:	08127ed4 	.word	0x08127ed4
 811f188:	08127b20 	.word	0x08127b20

0811f18c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 811f18c:	b580      	push	{r7, lr}
 811f18e:	b08a      	sub	sp, #40	@ 0x28
 811f190:	af02      	add	r7, sp, #8
 811f192:	6078      	str	r0, [r7, #4]
 811f194:	460b      	mov	r3, r1
 811f196:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 811f198:	2300      	movs	r3, #0
 811f19a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 811f19c:	2300      	movs	r3, #0
 811f19e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 811f1a0:	78fb      	ldrb	r3, [r7, #3]
 811f1a2:	f003 0303 	and.w	r3, r3, #3
 811f1a6:	2b00      	cmp	r3, #0
 811f1a8:	d106      	bne.n	811f1b8 <tcp_enqueue_flags+0x2c>
 811f1aa:	4b67      	ldr	r3, [pc, #412]	@ (811f348 <tcp_enqueue_flags+0x1bc>)
 811f1ac:	f240 4211 	movw	r2, #1041	@ 0x411
 811f1b0:	4966      	ldr	r1, [pc, #408]	@ (811f34c <tcp_enqueue_flags+0x1c0>)
 811f1b2:	4867      	ldr	r0, [pc, #412]	@ (811f350 <tcp_enqueue_flags+0x1c4>)
 811f1b4:	f002 fde6 	bl	8121d84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 811f1b8:	687b      	ldr	r3, [r7, #4]
 811f1ba:	2b00      	cmp	r3, #0
 811f1bc:	d106      	bne.n	811f1cc <tcp_enqueue_flags+0x40>
 811f1be:	4b62      	ldr	r3, [pc, #392]	@ (811f348 <tcp_enqueue_flags+0x1bc>)
 811f1c0:	f240 4213 	movw	r2, #1043	@ 0x413
 811f1c4:	4963      	ldr	r1, [pc, #396]	@ (811f354 <tcp_enqueue_flags+0x1c8>)
 811f1c6:	4862      	ldr	r0, [pc, #392]	@ (811f350 <tcp_enqueue_flags+0x1c4>)
 811f1c8:	f002 fddc 	bl	8121d84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 811f1cc:	78fb      	ldrb	r3, [r7, #3]
 811f1ce:	f003 0302 	and.w	r3, r3, #2
 811f1d2:	2b00      	cmp	r3, #0
 811f1d4:	d001      	beq.n	811f1da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 811f1d6:	2301      	movs	r3, #1
 811f1d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811f1da:	7ffb      	ldrb	r3, [r7, #31]
 811f1dc:	009b      	lsls	r3, r3, #2
 811f1de:	b2db      	uxtb	r3, r3
 811f1e0:	f003 0304 	and.w	r3, r3, #4
 811f1e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 811f1e6:	7dfb      	ldrb	r3, [r7, #23]
 811f1e8:	b29b      	uxth	r3, r3
 811f1ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811f1ee:	4619      	mov	r1, r3
 811f1f0:	2036      	movs	r0, #54	@ 0x36
 811f1f2:	f7fa f8d9 	bl	81193a8 <pbuf_alloc>
 811f1f6:	6138      	str	r0, [r7, #16]
 811f1f8:	693b      	ldr	r3, [r7, #16]
 811f1fa:	2b00      	cmp	r3, #0
 811f1fc:	d109      	bne.n	811f212 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811f1fe:	687b      	ldr	r3, [r7, #4]
 811f200:	8b5b      	ldrh	r3, [r3, #26]
 811f202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811f206:	b29a      	uxth	r2, r3
 811f208:	687b      	ldr	r3, [r7, #4]
 811f20a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811f20c:	f04f 33ff 	mov.w	r3, #4294967295
 811f210:	e095      	b.n	811f33e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 811f212:	693b      	ldr	r3, [r7, #16]
 811f214:	895a      	ldrh	r2, [r3, #10]
 811f216:	7dfb      	ldrb	r3, [r7, #23]
 811f218:	b29b      	uxth	r3, r3
 811f21a:	429a      	cmp	r2, r3
 811f21c:	d206      	bcs.n	811f22c <tcp_enqueue_flags+0xa0>
 811f21e:	4b4a      	ldr	r3, [pc, #296]	@ (811f348 <tcp_enqueue_flags+0x1bc>)
 811f220:	f240 4239 	movw	r2, #1081	@ 0x439
 811f224:	494c      	ldr	r1, [pc, #304]	@ (811f358 <tcp_enqueue_flags+0x1cc>)
 811f226:	484a      	ldr	r0, [pc, #296]	@ (811f350 <tcp_enqueue_flags+0x1c4>)
 811f228:	f002 fdac 	bl	8121d84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 811f22c:	687b      	ldr	r3, [r7, #4]
 811f22e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 811f230:	78fa      	ldrb	r2, [r7, #3]
 811f232:	7ffb      	ldrb	r3, [r7, #31]
 811f234:	9300      	str	r3, [sp, #0]
 811f236:	460b      	mov	r3, r1
 811f238:	6939      	ldr	r1, [r7, #16]
 811f23a:	6878      	ldr	r0, [r7, #4]
 811f23c:	f7ff f918 	bl	811e470 <tcp_create_segment>
 811f240:	60f8      	str	r0, [r7, #12]
 811f242:	68fb      	ldr	r3, [r7, #12]
 811f244:	2b00      	cmp	r3, #0
 811f246:	d109      	bne.n	811f25c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811f248:	687b      	ldr	r3, [r7, #4]
 811f24a:	8b5b      	ldrh	r3, [r3, #26]
 811f24c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811f250:	b29a      	uxth	r2, r3
 811f252:	687b      	ldr	r3, [r7, #4]
 811f254:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811f256:	f04f 33ff 	mov.w	r3, #4294967295
 811f25a:	e070      	b.n	811f33e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 811f25c:	68fb      	ldr	r3, [r7, #12]
 811f25e:	68db      	ldr	r3, [r3, #12]
 811f260:	f003 0303 	and.w	r3, r3, #3
 811f264:	2b00      	cmp	r3, #0
 811f266:	d006      	beq.n	811f276 <tcp_enqueue_flags+0xea>
 811f268:	4b37      	ldr	r3, [pc, #220]	@ (811f348 <tcp_enqueue_flags+0x1bc>)
 811f26a:	f240 4242 	movw	r2, #1090	@ 0x442
 811f26e:	493b      	ldr	r1, [pc, #236]	@ (811f35c <tcp_enqueue_flags+0x1d0>)
 811f270:	4837      	ldr	r0, [pc, #220]	@ (811f350 <tcp_enqueue_flags+0x1c4>)
 811f272:	f002 fd87 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 811f276:	68fb      	ldr	r3, [r7, #12]
 811f278:	891b      	ldrh	r3, [r3, #8]
 811f27a:	2b00      	cmp	r3, #0
 811f27c:	d006      	beq.n	811f28c <tcp_enqueue_flags+0x100>
 811f27e:	4b32      	ldr	r3, [pc, #200]	@ (811f348 <tcp_enqueue_flags+0x1bc>)
 811f280:	f240 4243 	movw	r2, #1091	@ 0x443
 811f284:	4936      	ldr	r1, [pc, #216]	@ (811f360 <tcp_enqueue_flags+0x1d4>)
 811f286:	4832      	ldr	r0, [pc, #200]	@ (811f350 <tcp_enqueue_flags+0x1c4>)
 811f288:	f002 fd7c 	bl	8121d84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 811f28c:	687b      	ldr	r3, [r7, #4]
 811f28e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f290:	2b00      	cmp	r3, #0
 811f292:	d103      	bne.n	811f29c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 811f294:	687b      	ldr	r3, [r7, #4]
 811f296:	68fa      	ldr	r2, [r7, #12]
 811f298:	66da      	str	r2, [r3, #108]	@ 0x6c
 811f29a:	e00d      	b.n	811f2b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 811f29c:	687b      	ldr	r3, [r7, #4]
 811f29e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f2a0:	61bb      	str	r3, [r7, #24]
 811f2a2:	e002      	b.n	811f2aa <tcp_enqueue_flags+0x11e>
 811f2a4:	69bb      	ldr	r3, [r7, #24]
 811f2a6:	681b      	ldr	r3, [r3, #0]
 811f2a8:	61bb      	str	r3, [r7, #24]
 811f2aa:	69bb      	ldr	r3, [r7, #24]
 811f2ac:	681b      	ldr	r3, [r3, #0]
 811f2ae:	2b00      	cmp	r3, #0
 811f2b0:	d1f8      	bne.n	811f2a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 811f2b2:	69bb      	ldr	r3, [r7, #24]
 811f2b4:	68fa      	ldr	r2, [r7, #12]
 811f2b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 811f2b8:	687b      	ldr	r3, [r7, #4]
 811f2ba:	2200      	movs	r2, #0
 811f2bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 811f2c0:	78fb      	ldrb	r3, [r7, #3]
 811f2c2:	f003 0302 	and.w	r3, r3, #2
 811f2c6:	2b00      	cmp	r3, #0
 811f2c8:	d104      	bne.n	811f2d4 <tcp_enqueue_flags+0x148>
 811f2ca:	78fb      	ldrb	r3, [r7, #3]
 811f2cc:	f003 0301 	and.w	r3, r3, #1
 811f2d0:	2b00      	cmp	r3, #0
 811f2d2:	d004      	beq.n	811f2de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 811f2d4:	687b      	ldr	r3, [r7, #4]
 811f2d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 811f2d8:	1c5a      	adds	r2, r3, #1
 811f2da:	687b      	ldr	r3, [r7, #4]
 811f2dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 811f2de:	78fb      	ldrb	r3, [r7, #3]
 811f2e0:	f003 0301 	and.w	r3, r3, #1
 811f2e4:	2b00      	cmp	r3, #0
 811f2e6:	d006      	beq.n	811f2f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 811f2e8:	687b      	ldr	r3, [r7, #4]
 811f2ea:	8b5b      	ldrh	r3, [r3, #26]
 811f2ec:	f043 0320 	orr.w	r3, r3, #32
 811f2f0:	b29a      	uxth	r2, r3
 811f2f2:	687b      	ldr	r3, [r7, #4]
 811f2f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811f2f6:	68fb      	ldr	r3, [r7, #12]
 811f2f8:	685b      	ldr	r3, [r3, #4]
 811f2fa:	4618      	mov	r0, r3
 811f2fc:	f7fa fbc4 	bl	8119a88 <pbuf_clen>
 811f300:	4603      	mov	r3, r0
 811f302:	461a      	mov	r2, r3
 811f304:	687b      	ldr	r3, [r7, #4]
 811f306:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f30a:	4413      	add	r3, r2
 811f30c:	b29a      	uxth	r2, r3
 811f30e:	687b      	ldr	r3, [r7, #4]
 811f310:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 811f314:	687b      	ldr	r3, [r7, #4]
 811f316:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f31a:	2b00      	cmp	r3, #0
 811f31c:	d00e      	beq.n	811f33c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 811f31e:	687b      	ldr	r3, [r7, #4]
 811f320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f322:	2b00      	cmp	r3, #0
 811f324:	d10a      	bne.n	811f33c <tcp_enqueue_flags+0x1b0>
 811f326:	687b      	ldr	r3, [r7, #4]
 811f328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f32a:	2b00      	cmp	r3, #0
 811f32c:	d106      	bne.n	811f33c <tcp_enqueue_flags+0x1b0>
 811f32e:	4b06      	ldr	r3, [pc, #24]	@ (811f348 <tcp_enqueue_flags+0x1bc>)
 811f330:	f240 4265 	movw	r2, #1125	@ 0x465
 811f334:	490b      	ldr	r1, [pc, #44]	@ (811f364 <tcp_enqueue_flags+0x1d8>)
 811f336:	4806      	ldr	r0, [pc, #24]	@ (811f350 <tcp_enqueue_flags+0x1c4>)
 811f338:	f002 fd24 	bl	8121d84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 811f33c:	2300      	movs	r3, #0
}
 811f33e:	4618      	mov	r0, r3
 811f340:	3720      	adds	r7, #32
 811f342:	46bd      	mov	sp, r7
 811f344:	bd80      	pop	{r7, pc}
 811f346:	bf00      	nop
 811f348:	08127a94 	.word	0x08127a94
 811f34c:	08127ef0 	.word	0x08127ef0
 811f350:	08127b20 	.word	0x08127b20
 811f354:	08127f48 	.word	0x08127f48
 811f358:	08127f68 	.word	0x08127f68
 811f35c:	08127fa4 	.word	0x08127fa4
 811f360:	08127fbc 	.word	0x08127fbc
 811f364:	08127fe8 	.word	0x08127fe8

0811f368 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 811f368:	b5b0      	push	{r4, r5, r7, lr}
 811f36a:	b08a      	sub	sp, #40	@ 0x28
 811f36c:	af00      	add	r7, sp, #0
 811f36e:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 811f370:	f7f0 fd26 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 811f374:	687b      	ldr	r3, [r7, #4]
 811f376:	2b00      	cmp	r3, #0
 811f378:	d106      	bne.n	811f388 <tcp_output+0x20>
 811f37a:	4b8a      	ldr	r3, [pc, #552]	@ (811f5a4 <tcp_output+0x23c>)
 811f37c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 811f380:	4989      	ldr	r1, [pc, #548]	@ (811f5a8 <tcp_output+0x240>)
 811f382:	488a      	ldr	r0, [pc, #552]	@ (811f5ac <tcp_output+0x244>)
 811f384:	f002 fcfe 	bl	8121d84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 811f388:	687b      	ldr	r3, [r7, #4]
 811f38a:	7d1b      	ldrb	r3, [r3, #20]
 811f38c:	2b01      	cmp	r3, #1
 811f38e:	d106      	bne.n	811f39e <tcp_output+0x36>
 811f390:	4b84      	ldr	r3, [pc, #528]	@ (811f5a4 <tcp_output+0x23c>)
 811f392:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 811f396:	4986      	ldr	r1, [pc, #536]	@ (811f5b0 <tcp_output+0x248>)
 811f398:	4884      	ldr	r0, [pc, #528]	@ (811f5ac <tcp_output+0x244>)
 811f39a:	f002 fcf3 	bl	8121d84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 811f39e:	4b85      	ldr	r3, [pc, #532]	@ (811f5b4 <tcp_output+0x24c>)
 811f3a0:	681b      	ldr	r3, [r3, #0]
 811f3a2:	687a      	ldr	r2, [r7, #4]
 811f3a4:	429a      	cmp	r2, r3
 811f3a6:	d101      	bne.n	811f3ac <tcp_output+0x44>
    return ERR_OK;
 811f3a8:	2300      	movs	r3, #0
 811f3aa:	e1ce      	b.n	811f74a <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 811f3ac:	687b      	ldr	r3, [r7, #4]
 811f3ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811f3b2:	687b      	ldr	r3, [r7, #4]
 811f3b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f3b8:	4293      	cmp	r3, r2
 811f3ba:	bf28      	it	cs
 811f3bc:	4613      	movcs	r3, r2
 811f3be:	b29b      	uxth	r3, r3
 811f3c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 811f3c2:	687b      	ldr	r3, [r7, #4]
 811f3c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f3c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 811f3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f3ca:	2b00      	cmp	r3, #0
 811f3cc:	d10b      	bne.n	811f3e6 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 811f3ce:	687b      	ldr	r3, [r7, #4]
 811f3d0:	8b5b      	ldrh	r3, [r3, #26]
 811f3d2:	f003 0302 	and.w	r3, r3, #2
 811f3d6:	2b00      	cmp	r3, #0
 811f3d8:	f000 81aa 	beq.w	811f730 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 811f3dc:	6878      	ldr	r0, [r7, #4]
 811f3de:	f000 fdcb 	bl	811ff78 <tcp_send_empty_ack>
 811f3e2:	4603      	mov	r3, r0
 811f3e4:	e1b1      	b.n	811f74a <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 811f3e6:	6879      	ldr	r1, [r7, #4]
 811f3e8:	687b      	ldr	r3, [r7, #4]
 811f3ea:	3304      	adds	r3, #4
 811f3ec:	461a      	mov	r2, r3
 811f3ee:	6878      	ldr	r0, [r7, #4]
 811f3f0:	f7ff f822 	bl	811e438 <tcp_route>
 811f3f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 811f3f6:	697b      	ldr	r3, [r7, #20]
 811f3f8:	2b00      	cmp	r3, #0
 811f3fa:	d102      	bne.n	811f402 <tcp_output+0x9a>
    return ERR_RTE;
 811f3fc:	f06f 0303 	mvn.w	r3, #3
 811f400:	e1a3      	b.n	811f74a <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 811f402:	687b      	ldr	r3, [r7, #4]
 811f404:	2b00      	cmp	r3, #0
 811f406:	d003      	beq.n	811f410 <tcp_output+0xa8>
 811f408:	687b      	ldr	r3, [r7, #4]
 811f40a:	681b      	ldr	r3, [r3, #0]
 811f40c:	2b00      	cmp	r3, #0
 811f40e:	d111      	bne.n	811f434 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 811f410:	697b      	ldr	r3, [r7, #20]
 811f412:	2b00      	cmp	r3, #0
 811f414:	d002      	beq.n	811f41c <tcp_output+0xb4>
 811f416:	697b      	ldr	r3, [r7, #20]
 811f418:	3304      	adds	r3, #4
 811f41a:	e000      	b.n	811f41e <tcp_output+0xb6>
 811f41c:	2300      	movs	r3, #0
 811f41e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 811f420:	693b      	ldr	r3, [r7, #16]
 811f422:	2b00      	cmp	r3, #0
 811f424:	d102      	bne.n	811f42c <tcp_output+0xc4>
      return ERR_RTE;
 811f426:	f06f 0303 	mvn.w	r3, #3
 811f42a:	e18e      	b.n	811f74a <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811f42c:	693b      	ldr	r3, [r7, #16]
 811f42e:	681a      	ldr	r2, [r3, #0]
 811f430:	687b      	ldr	r3, [r7, #4]
 811f432:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 811f434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f436:	68db      	ldr	r3, [r3, #12]
 811f438:	685b      	ldr	r3, [r3, #4]
 811f43a:	4618      	mov	r0, r3
 811f43c:	f7f4 fc6b 	bl	8113d16 <lwip_htonl>
 811f440:	4602      	mov	r2, r0
 811f442:	687b      	ldr	r3, [r7, #4]
 811f444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f446:	1ad3      	subs	r3, r2, r3
 811f448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f44a:	8912      	ldrh	r2, [r2, #8]
 811f44c:	4413      	add	r3, r2
 811f44e:	69ba      	ldr	r2, [r7, #24]
 811f450:	429a      	cmp	r2, r3
 811f452:	d227      	bcs.n	811f4a4 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 811f454:	687b      	ldr	r3, [r7, #4]
 811f456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f45a:	461a      	mov	r2, r3
 811f45c:	69bb      	ldr	r3, [r7, #24]
 811f45e:	4293      	cmp	r3, r2
 811f460:	d114      	bne.n	811f48c <tcp_output+0x124>
 811f462:	687b      	ldr	r3, [r7, #4]
 811f464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f466:	2b00      	cmp	r3, #0
 811f468:	d110      	bne.n	811f48c <tcp_output+0x124>
 811f46a:	687b      	ldr	r3, [r7, #4]
 811f46c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811f470:	2b00      	cmp	r3, #0
 811f472:	d10b      	bne.n	811f48c <tcp_output+0x124>
      pcb->persist_cnt = 0;
 811f474:	687b      	ldr	r3, [r7, #4]
 811f476:	2200      	movs	r2, #0
 811f478:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 811f47c:	687b      	ldr	r3, [r7, #4]
 811f47e:	2201      	movs	r2, #1
 811f480:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 811f484:	687b      	ldr	r3, [r7, #4]
 811f486:	2200      	movs	r2, #0
 811f488:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 811f48c:	687b      	ldr	r3, [r7, #4]
 811f48e:	8b5b      	ldrh	r3, [r3, #26]
 811f490:	f003 0302 	and.w	r3, r3, #2
 811f494:	2b00      	cmp	r3, #0
 811f496:	f000 814d 	beq.w	811f734 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 811f49a:	6878      	ldr	r0, [r7, #4]
 811f49c:	f000 fd6c 	bl	811ff78 <tcp_send_empty_ack>
 811f4a0:	4603      	mov	r3, r0
 811f4a2:	e152      	b.n	811f74a <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 811f4a4:	687b      	ldr	r3, [r7, #4]
 811f4a6:	2200      	movs	r2, #0
 811f4a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 811f4ac:	687b      	ldr	r3, [r7, #4]
 811f4ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f4b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 811f4b2:	6a3b      	ldr	r3, [r7, #32]
 811f4b4:	2b00      	cmp	r3, #0
 811f4b6:	f000 811c 	beq.w	811f6f2 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 811f4ba:	e002      	b.n	811f4c2 <tcp_output+0x15a>
 811f4bc:	6a3b      	ldr	r3, [r7, #32]
 811f4be:	681b      	ldr	r3, [r3, #0]
 811f4c0:	623b      	str	r3, [r7, #32]
 811f4c2:	6a3b      	ldr	r3, [r7, #32]
 811f4c4:	681b      	ldr	r3, [r3, #0]
 811f4c6:	2b00      	cmp	r3, #0
 811f4c8:	d1f8      	bne.n	811f4bc <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 811f4ca:	e112      	b.n	811f6f2 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 811f4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f4ce:	68db      	ldr	r3, [r3, #12]
 811f4d0:	899b      	ldrh	r3, [r3, #12]
 811f4d2:	b29b      	uxth	r3, r3
 811f4d4:	4618      	mov	r0, r3
 811f4d6:	f7f4 fc09 	bl	8113cec <lwip_htons>
 811f4da:	4603      	mov	r3, r0
 811f4dc:	b2db      	uxtb	r3, r3
 811f4de:	f003 0304 	and.w	r3, r3, #4
 811f4e2:	2b00      	cmp	r3, #0
 811f4e4:	d006      	beq.n	811f4f4 <tcp_output+0x18c>
 811f4e6:	4b2f      	ldr	r3, [pc, #188]	@ (811f5a4 <tcp_output+0x23c>)
 811f4e8:	f240 5236 	movw	r2, #1334	@ 0x536
 811f4ec:	4932      	ldr	r1, [pc, #200]	@ (811f5b8 <tcp_output+0x250>)
 811f4ee:	482f      	ldr	r0, [pc, #188]	@ (811f5ac <tcp_output+0x244>)
 811f4f0:	f002 fc48 	bl	8121d84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811f4f4:	687b      	ldr	r3, [r7, #4]
 811f4f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f4f8:	2b00      	cmp	r3, #0
 811f4fa:	d01f      	beq.n	811f53c <tcp_output+0x1d4>
 811f4fc:	687b      	ldr	r3, [r7, #4]
 811f4fe:	8b5b      	ldrh	r3, [r3, #26]
 811f500:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 811f504:	2b00      	cmp	r3, #0
 811f506:	d119      	bne.n	811f53c <tcp_output+0x1d4>
 811f508:	687b      	ldr	r3, [r7, #4]
 811f50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f50c:	2b00      	cmp	r3, #0
 811f50e:	d00b      	beq.n	811f528 <tcp_output+0x1c0>
 811f510:	687b      	ldr	r3, [r7, #4]
 811f512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f514:	681b      	ldr	r3, [r3, #0]
 811f516:	2b00      	cmp	r3, #0
 811f518:	d110      	bne.n	811f53c <tcp_output+0x1d4>
 811f51a:	687b      	ldr	r3, [r7, #4]
 811f51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f51e:	891a      	ldrh	r2, [r3, #8]
 811f520:	687b      	ldr	r3, [r7, #4]
 811f522:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f524:	429a      	cmp	r2, r3
 811f526:	d209      	bcs.n	811f53c <tcp_output+0x1d4>
 811f528:	687b      	ldr	r3, [r7, #4]
 811f52a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811f52e:	2b00      	cmp	r3, #0
 811f530:	d004      	beq.n	811f53c <tcp_output+0x1d4>
 811f532:	687b      	ldr	r3, [r7, #4]
 811f534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f538:	2b08      	cmp	r3, #8
 811f53a:	d901      	bls.n	811f540 <tcp_output+0x1d8>
 811f53c:	2301      	movs	r3, #1
 811f53e:	e000      	b.n	811f542 <tcp_output+0x1da>
 811f540:	2300      	movs	r3, #0
 811f542:	2b00      	cmp	r3, #0
 811f544:	d106      	bne.n	811f554 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 811f546:	687b      	ldr	r3, [r7, #4]
 811f548:	8b5b      	ldrh	r3, [r3, #26]
 811f54a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811f54e:	2b00      	cmp	r3, #0
 811f550:	f000 80e4 	beq.w	811f71c <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 811f554:	687b      	ldr	r3, [r7, #4]
 811f556:	7d1b      	ldrb	r3, [r3, #20]
 811f558:	2b02      	cmp	r3, #2
 811f55a:	d00d      	beq.n	811f578 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 811f55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f55e:	68db      	ldr	r3, [r3, #12]
 811f560:	899b      	ldrh	r3, [r3, #12]
 811f562:	b29c      	uxth	r4, r3
 811f564:	2010      	movs	r0, #16
 811f566:	f7f4 fbc1 	bl	8113cec <lwip_htons>
 811f56a:	4603      	mov	r3, r0
 811f56c:	461a      	mov	r2, r3
 811f56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f570:	68db      	ldr	r3, [r3, #12]
 811f572:	4322      	orrs	r2, r4
 811f574:	b292      	uxth	r2, r2
 811f576:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 811f578:	697a      	ldr	r2, [r7, #20]
 811f57a:	6879      	ldr	r1, [r7, #4]
 811f57c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811f57e:	f000 f909 	bl	811f794 <tcp_output_segment>
 811f582:	4603      	mov	r3, r0
 811f584:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 811f586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811f58a:	2b00      	cmp	r3, #0
 811f58c:	d016      	beq.n	811f5bc <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811f58e:	687b      	ldr	r3, [r7, #4]
 811f590:	8b5b      	ldrh	r3, [r3, #26]
 811f592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811f596:	b29a      	uxth	r2, r3
 811f598:	687b      	ldr	r3, [r7, #4]
 811f59a:	835a      	strh	r2, [r3, #26]
      return err;
 811f59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811f5a0:	e0d3      	b.n	811f74a <tcp_output+0x3e2>
 811f5a2:	bf00      	nop
 811f5a4:	08127a94 	.word	0x08127a94
 811f5a8:	08128010 	.word	0x08128010
 811f5ac:	08127b20 	.word	0x08127b20
 811f5b0:	08128028 	.word	0x08128028
 811f5b4:	240126ec 	.word	0x240126ec
 811f5b8:	08128050 	.word	0x08128050
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 811f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f5be:	681a      	ldr	r2, [r3, #0]
 811f5c0:	687b      	ldr	r3, [r7, #4]
 811f5c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 811f5c4:	687b      	ldr	r3, [r7, #4]
 811f5c6:	7d1b      	ldrb	r3, [r3, #20]
 811f5c8:	2b02      	cmp	r3, #2
 811f5ca:	d006      	beq.n	811f5da <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811f5cc:	687b      	ldr	r3, [r7, #4]
 811f5ce:	8b5b      	ldrh	r3, [r3, #26]
 811f5d0:	f023 0303 	bic.w	r3, r3, #3
 811f5d4:	b29a      	uxth	r2, r3
 811f5d6:	687b      	ldr	r3, [r7, #4]
 811f5d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811f5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f5dc:	68db      	ldr	r3, [r3, #12]
 811f5de:	685b      	ldr	r3, [r3, #4]
 811f5e0:	4618      	mov	r0, r3
 811f5e2:	f7f4 fb98 	bl	8113d16 <lwip_htonl>
 811f5e6:	4604      	mov	r4, r0
 811f5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f5ea:	891b      	ldrh	r3, [r3, #8]
 811f5ec:	461d      	mov	r5, r3
 811f5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f5f0:	68db      	ldr	r3, [r3, #12]
 811f5f2:	899b      	ldrh	r3, [r3, #12]
 811f5f4:	b29b      	uxth	r3, r3
 811f5f6:	4618      	mov	r0, r3
 811f5f8:	f7f4 fb78 	bl	8113cec <lwip_htons>
 811f5fc:	4603      	mov	r3, r0
 811f5fe:	b2db      	uxtb	r3, r3
 811f600:	f003 0303 	and.w	r3, r3, #3
 811f604:	2b00      	cmp	r3, #0
 811f606:	d001      	beq.n	811f60c <tcp_output+0x2a4>
 811f608:	2301      	movs	r3, #1
 811f60a:	e000      	b.n	811f60e <tcp_output+0x2a6>
 811f60c:	2300      	movs	r3, #0
 811f60e:	442b      	add	r3, r5
 811f610:	4423      	add	r3, r4
 811f612:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811f614:	687b      	ldr	r3, [r7, #4]
 811f616:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811f618:	68bb      	ldr	r3, [r7, #8]
 811f61a:	1ad3      	subs	r3, r2, r3
 811f61c:	2b00      	cmp	r3, #0
 811f61e:	da02      	bge.n	811f626 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 811f620:	687b      	ldr	r3, [r7, #4]
 811f622:	68ba      	ldr	r2, [r7, #8]
 811f624:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 811f626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f628:	891b      	ldrh	r3, [r3, #8]
 811f62a:	461c      	mov	r4, r3
 811f62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f62e:	68db      	ldr	r3, [r3, #12]
 811f630:	899b      	ldrh	r3, [r3, #12]
 811f632:	b29b      	uxth	r3, r3
 811f634:	4618      	mov	r0, r3
 811f636:	f7f4 fb59 	bl	8113cec <lwip_htons>
 811f63a:	4603      	mov	r3, r0
 811f63c:	b2db      	uxtb	r3, r3
 811f63e:	f003 0303 	and.w	r3, r3, #3
 811f642:	2b00      	cmp	r3, #0
 811f644:	d001      	beq.n	811f64a <tcp_output+0x2e2>
 811f646:	2301      	movs	r3, #1
 811f648:	e000      	b.n	811f64c <tcp_output+0x2e4>
 811f64a:	2300      	movs	r3, #0
 811f64c:	4423      	add	r3, r4
 811f64e:	2b00      	cmp	r3, #0
 811f650:	d049      	beq.n	811f6e6 <tcp_output+0x37e>
      seg->next = NULL;
 811f652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f654:	2200      	movs	r2, #0
 811f656:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 811f658:	687b      	ldr	r3, [r7, #4]
 811f65a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f65c:	2b00      	cmp	r3, #0
 811f65e:	d105      	bne.n	811f66c <tcp_output+0x304>
        pcb->unacked = seg;
 811f660:	687b      	ldr	r3, [r7, #4]
 811f662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f664:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 811f666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f668:	623b      	str	r3, [r7, #32]
 811f66a:	e03f      	b.n	811f6ec <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 811f66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f66e:	68db      	ldr	r3, [r3, #12]
 811f670:	685b      	ldr	r3, [r3, #4]
 811f672:	4618      	mov	r0, r3
 811f674:	f7f4 fb4f 	bl	8113d16 <lwip_htonl>
 811f678:	4604      	mov	r4, r0
 811f67a:	6a3b      	ldr	r3, [r7, #32]
 811f67c:	68db      	ldr	r3, [r3, #12]
 811f67e:	685b      	ldr	r3, [r3, #4]
 811f680:	4618      	mov	r0, r3
 811f682:	f7f4 fb48 	bl	8113d16 <lwip_htonl>
 811f686:	4603      	mov	r3, r0
 811f688:	1ae3      	subs	r3, r4, r3
 811f68a:	2b00      	cmp	r3, #0
 811f68c:	da24      	bge.n	811f6d8 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 811f68e:	687b      	ldr	r3, [r7, #4]
 811f690:	3370      	adds	r3, #112	@ 0x70
 811f692:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811f694:	e002      	b.n	811f69c <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 811f696:	69fb      	ldr	r3, [r7, #28]
 811f698:	681b      	ldr	r3, [r3, #0]
 811f69a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811f69c:	69fb      	ldr	r3, [r7, #28]
 811f69e:	681b      	ldr	r3, [r3, #0]
 811f6a0:	2b00      	cmp	r3, #0
 811f6a2:	d011      	beq.n	811f6c8 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811f6a4:	69fb      	ldr	r3, [r7, #28]
 811f6a6:	681b      	ldr	r3, [r3, #0]
 811f6a8:	68db      	ldr	r3, [r3, #12]
 811f6aa:	685b      	ldr	r3, [r3, #4]
 811f6ac:	4618      	mov	r0, r3
 811f6ae:	f7f4 fb32 	bl	8113d16 <lwip_htonl>
 811f6b2:	4604      	mov	r4, r0
 811f6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f6b6:	68db      	ldr	r3, [r3, #12]
 811f6b8:	685b      	ldr	r3, [r3, #4]
 811f6ba:	4618      	mov	r0, r3
 811f6bc:	f7f4 fb2b 	bl	8113d16 <lwip_htonl>
 811f6c0:	4603      	mov	r3, r0
 811f6c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 811f6c4:	2b00      	cmp	r3, #0
 811f6c6:	dbe6      	blt.n	811f696 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 811f6c8:	69fb      	ldr	r3, [r7, #28]
 811f6ca:	681a      	ldr	r2, [r3, #0]
 811f6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f6ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 811f6d0:	69fb      	ldr	r3, [r7, #28]
 811f6d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f6d4:	601a      	str	r2, [r3, #0]
 811f6d6:	e009      	b.n	811f6ec <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 811f6d8:	6a3b      	ldr	r3, [r7, #32]
 811f6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f6dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811f6de:	6a3b      	ldr	r3, [r7, #32]
 811f6e0:	681b      	ldr	r3, [r3, #0]
 811f6e2:	623b      	str	r3, [r7, #32]
 811f6e4:	e002      	b.n	811f6ec <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 811f6e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811f6e8:	f7fb ff27 	bl	811b53a <tcp_seg_free>
    }
    seg = pcb->unsent;
 811f6ec:	687b      	ldr	r3, [r7, #4]
 811f6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f6f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 811f6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f6f4:	2b00      	cmp	r3, #0
 811f6f6:	d012      	beq.n	811f71e <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 811f6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f6fa:	68db      	ldr	r3, [r3, #12]
 811f6fc:	685b      	ldr	r3, [r3, #4]
 811f6fe:	4618      	mov	r0, r3
 811f700:	f7f4 fb09 	bl	8113d16 <lwip_htonl>
 811f704:	4602      	mov	r2, r0
 811f706:	687b      	ldr	r3, [r7, #4]
 811f708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f70a:	1ad3      	subs	r3, r2, r3
 811f70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f70e:	8912      	ldrh	r2, [r2, #8]
 811f710:	4413      	add	r3, r2
  while (seg != NULL &&
 811f712:	69ba      	ldr	r2, [r7, #24]
 811f714:	429a      	cmp	r2, r3
 811f716:	f4bf aed9 	bcs.w	811f4cc <tcp_output+0x164>
 811f71a:	e000      	b.n	811f71e <tcp_output+0x3b6>
      break;
 811f71c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 811f71e:	687b      	ldr	r3, [r7, #4]
 811f720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f722:	2b00      	cmp	r3, #0
 811f724:	d108      	bne.n	811f738 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811f726:	687b      	ldr	r3, [r7, #4]
 811f728:	2200      	movs	r2, #0
 811f72a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 811f72e:	e004      	b.n	811f73a <tcp_output+0x3d2>
    goto output_done;
 811f730:	bf00      	nop
 811f732:	e002      	b.n	811f73a <tcp_output+0x3d2>
    goto output_done;
 811f734:	bf00      	nop
 811f736:	e000      	b.n	811f73a <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 811f738:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 811f73a:	687b      	ldr	r3, [r7, #4]
 811f73c:	8b5b      	ldrh	r3, [r3, #26]
 811f73e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 811f742:	b29a      	uxth	r2, r3
 811f744:	687b      	ldr	r3, [r7, #4]
 811f746:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 811f748:	2300      	movs	r3, #0
}
 811f74a:	4618      	mov	r0, r3
 811f74c:	3728      	adds	r7, #40	@ 0x28
 811f74e:	46bd      	mov	sp, r7
 811f750:	bdb0      	pop	{r4, r5, r7, pc}
 811f752:	bf00      	nop

0811f754 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 811f754:	b580      	push	{r7, lr}
 811f756:	b082      	sub	sp, #8
 811f758:	af00      	add	r7, sp, #0
 811f75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 811f75c:	687b      	ldr	r3, [r7, #4]
 811f75e:	2b00      	cmp	r3, #0
 811f760:	d106      	bne.n	811f770 <tcp_output_segment_busy+0x1c>
 811f762:	4b09      	ldr	r3, [pc, #36]	@ (811f788 <tcp_output_segment_busy+0x34>)
 811f764:	f240 529a 	movw	r2, #1434	@ 0x59a
 811f768:	4908      	ldr	r1, [pc, #32]	@ (811f78c <tcp_output_segment_busy+0x38>)
 811f76a:	4809      	ldr	r0, [pc, #36]	@ (811f790 <tcp_output_segment_busy+0x3c>)
 811f76c:	f002 fb0a 	bl	8121d84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 811f770:	687b      	ldr	r3, [r7, #4]
 811f772:	685b      	ldr	r3, [r3, #4]
 811f774:	7b9b      	ldrb	r3, [r3, #14]
 811f776:	2b01      	cmp	r3, #1
 811f778:	d001      	beq.n	811f77e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811f77a:	2301      	movs	r3, #1
 811f77c:	e000      	b.n	811f780 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 811f77e:	2300      	movs	r3, #0
}
 811f780:	4618      	mov	r0, r3
 811f782:	3708      	adds	r7, #8
 811f784:	46bd      	mov	sp, r7
 811f786:	bd80      	pop	{r7, pc}
 811f788:	08127a94 	.word	0x08127a94
 811f78c:	08128068 	.word	0x08128068
 811f790:	08127b20 	.word	0x08127b20

0811f794 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 811f794:	b5b0      	push	{r4, r5, r7, lr}
 811f796:	b08c      	sub	sp, #48	@ 0x30
 811f798:	af04      	add	r7, sp, #16
 811f79a:	60f8      	str	r0, [r7, #12]
 811f79c:	60b9      	str	r1, [r7, #8]
 811f79e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 811f7a0:	68fb      	ldr	r3, [r7, #12]
 811f7a2:	2b00      	cmp	r3, #0
 811f7a4:	d106      	bne.n	811f7b4 <tcp_output_segment+0x20>
 811f7a6:	4b64      	ldr	r3, [pc, #400]	@ (811f938 <tcp_output_segment+0x1a4>)
 811f7a8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 811f7ac:	4963      	ldr	r1, [pc, #396]	@ (811f93c <tcp_output_segment+0x1a8>)
 811f7ae:	4864      	ldr	r0, [pc, #400]	@ (811f940 <tcp_output_segment+0x1ac>)
 811f7b0:	f002 fae8 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 811f7b4:	68bb      	ldr	r3, [r7, #8]
 811f7b6:	2b00      	cmp	r3, #0
 811f7b8:	d106      	bne.n	811f7c8 <tcp_output_segment+0x34>
 811f7ba:	4b5f      	ldr	r3, [pc, #380]	@ (811f938 <tcp_output_segment+0x1a4>)
 811f7bc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 811f7c0:	4960      	ldr	r1, [pc, #384]	@ (811f944 <tcp_output_segment+0x1b0>)
 811f7c2:	485f      	ldr	r0, [pc, #380]	@ (811f940 <tcp_output_segment+0x1ac>)
 811f7c4:	f002 fade 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 811f7c8:	687b      	ldr	r3, [r7, #4]
 811f7ca:	2b00      	cmp	r3, #0
 811f7cc:	d106      	bne.n	811f7dc <tcp_output_segment+0x48>
 811f7ce:	4b5a      	ldr	r3, [pc, #360]	@ (811f938 <tcp_output_segment+0x1a4>)
 811f7d0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 811f7d4:	495c      	ldr	r1, [pc, #368]	@ (811f948 <tcp_output_segment+0x1b4>)
 811f7d6:	485a      	ldr	r0, [pc, #360]	@ (811f940 <tcp_output_segment+0x1ac>)
 811f7d8:	f002 fad4 	bl	8121d84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 811f7dc:	68f8      	ldr	r0, [r7, #12]
 811f7de:	f7ff ffb9 	bl	811f754 <tcp_output_segment_busy>
 811f7e2:	4603      	mov	r3, r0
 811f7e4:	2b00      	cmp	r3, #0
 811f7e6:	d001      	beq.n	811f7ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 811f7e8:	2300      	movs	r3, #0
 811f7ea:	e0a1      	b.n	811f930 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 811f7ec:	68bb      	ldr	r3, [r7, #8]
 811f7ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f7f0:	68fb      	ldr	r3, [r7, #12]
 811f7f2:	68dc      	ldr	r4, [r3, #12]
 811f7f4:	4610      	mov	r0, r2
 811f7f6:	f7f4 fa8e 	bl	8113d16 <lwip_htonl>
 811f7fa:	4603      	mov	r3, r0
 811f7fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811f7fe:	68bb      	ldr	r3, [r7, #8]
 811f800:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811f802:	68fb      	ldr	r3, [r7, #12]
 811f804:	68dc      	ldr	r4, [r3, #12]
 811f806:	4610      	mov	r0, r2
 811f808:	f7f4 fa70 	bl	8113cec <lwip_htons>
 811f80c:	4603      	mov	r3, r0
 811f80e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811f810:	68bb      	ldr	r3, [r7, #8]
 811f812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f814:	68ba      	ldr	r2, [r7, #8]
 811f816:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811f818:	441a      	add	r2, r3
 811f81a:	68bb      	ldr	r3, [r7, #8]
 811f81c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 811f81e:	68fb      	ldr	r3, [r7, #12]
 811f820:	68db      	ldr	r3, [r3, #12]
 811f822:	3314      	adds	r3, #20
 811f824:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 811f826:	68fb      	ldr	r3, [r7, #12]
 811f828:	7a9b      	ldrb	r3, [r3, #10]
 811f82a:	f003 0301 	and.w	r3, r3, #1
 811f82e:	2b00      	cmp	r3, #0
 811f830:	d015      	beq.n	811f85e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 811f832:	68bb      	ldr	r3, [r7, #8]
 811f834:	3304      	adds	r3, #4
 811f836:	461a      	mov	r2, r3
 811f838:	6879      	ldr	r1, [r7, #4]
 811f83a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 811f83e:	f7fc fa33 	bl	811bca8 <tcp_eff_send_mss_netif>
 811f842:	4603      	mov	r3, r0
 811f844:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 811f846:	8b7b      	ldrh	r3, [r7, #26]
 811f848:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 811f84c:	4618      	mov	r0, r3
 811f84e:	f7f4 fa62 	bl	8113d16 <lwip_htonl>
 811f852:	4602      	mov	r2, r0
 811f854:	69fb      	ldr	r3, [r7, #28]
 811f856:	601a      	str	r2, [r3, #0]
    opts += 1;
 811f858:	69fb      	ldr	r3, [r7, #28]
 811f85a:	3304      	adds	r3, #4
 811f85c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 811f85e:	68bb      	ldr	r3, [r7, #8]
 811f860:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811f864:	2b00      	cmp	r3, #0
 811f866:	da02      	bge.n	811f86e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 811f868:	68bb      	ldr	r3, [r7, #8]
 811f86a:	2200      	movs	r2, #0
 811f86c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811f86e:	68bb      	ldr	r3, [r7, #8]
 811f870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811f872:	2b00      	cmp	r3, #0
 811f874:	d10c      	bne.n	811f890 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 811f876:	4b35      	ldr	r3, [pc, #212]	@ (811f94c <tcp_output_segment+0x1b8>)
 811f878:	681a      	ldr	r2, [r3, #0]
 811f87a:	68bb      	ldr	r3, [r7, #8]
 811f87c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 811f87e:	68fb      	ldr	r3, [r7, #12]
 811f880:	68db      	ldr	r3, [r3, #12]
 811f882:	685b      	ldr	r3, [r3, #4]
 811f884:	4618      	mov	r0, r3
 811f886:	f7f4 fa46 	bl	8113d16 <lwip_htonl>
 811f88a:	4602      	mov	r2, r0
 811f88c:	68bb      	ldr	r3, [r7, #8]
 811f88e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 811f890:	68fb      	ldr	r3, [r7, #12]
 811f892:	68da      	ldr	r2, [r3, #12]
 811f894:	68fb      	ldr	r3, [r7, #12]
 811f896:	685b      	ldr	r3, [r3, #4]
 811f898:	685b      	ldr	r3, [r3, #4]
 811f89a:	1ad3      	subs	r3, r2, r3
 811f89c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 811f89e:	68fb      	ldr	r3, [r7, #12]
 811f8a0:	685b      	ldr	r3, [r3, #4]
 811f8a2:	8959      	ldrh	r1, [r3, #10]
 811f8a4:	68fb      	ldr	r3, [r7, #12]
 811f8a6:	685b      	ldr	r3, [r3, #4]
 811f8a8:	8b3a      	ldrh	r2, [r7, #24]
 811f8aa:	1a8a      	subs	r2, r1, r2
 811f8ac:	b292      	uxth	r2, r2
 811f8ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 811f8b0:	68fb      	ldr	r3, [r7, #12]
 811f8b2:	685b      	ldr	r3, [r3, #4]
 811f8b4:	8919      	ldrh	r1, [r3, #8]
 811f8b6:	68fb      	ldr	r3, [r7, #12]
 811f8b8:	685b      	ldr	r3, [r3, #4]
 811f8ba:	8b3a      	ldrh	r2, [r7, #24]
 811f8bc:	1a8a      	subs	r2, r1, r2
 811f8be:	b292      	uxth	r2, r2
 811f8c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 811f8c2:	68fb      	ldr	r3, [r7, #12]
 811f8c4:	685b      	ldr	r3, [r3, #4]
 811f8c6:	68fa      	ldr	r2, [r7, #12]
 811f8c8:	68d2      	ldr	r2, [r2, #12]
 811f8ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 811f8cc:	68fb      	ldr	r3, [r7, #12]
 811f8ce:	68db      	ldr	r3, [r3, #12]
 811f8d0:	2200      	movs	r2, #0
 811f8d2:	741a      	strb	r2, [r3, #16]
 811f8d4:	2200      	movs	r2, #0
 811f8d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 811f8d8:	68fb      	ldr	r3, [r7, #12]
 811f8da:	68da      	ldr	r2, [r3, #12]
 811f8dc:	68fb      	ldr	r3, [r7, #12]
 811f8de:	7a9b      	ldrb	r3, [r3, #10]
 811f8e0:	f003 0301 	and.w	r3, r3, #1
 811f8e4:	2b00      	cmp	r3, #0
 811f8e6:	d001      	beq.n	811f8ec <tcp_output_segment+0x158>
 811f8e8:	2318      	movs	r3, #24
 811f8ea:	e000      	b.n	811f8ee <tcp_output_segment+0x15a>
 811f8ec:	2314      	movs	r3, #20
 811f8ee:	4413      	add	r3, r2
 811f8f0:	69fa      	ldr	r2, [r7, #28]
 811f8f2:	429a      	cmp	r2, r3
 811f8f4:	d006      	beq.n	811f904 <tcp_output_segment+0x170>
 811f8f6:	4b10      	ldr	r3, [pc, #64]	@ (811f938 <tcp_output_segment+0x1a4>)
 811f8f8:	f240 621c 	movw	r2, #1564	@ 0x61c
 811f8fc:	4914      	ldr	r1, [pc, #80]	@ (811f950 <tcp_output_segment+0x1bc>)
 811f8fe:	4810      	ldr	r0, [pc, #64]	@ (811f940 <tcp_output_segment+0x1ac>)
 811f900:	f002 fa40 	bl	8121d84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 811f904:	68fb      	ldr	r3, [r7, #12]
 811f906:	6858      	ldr	r0, [r3, #4]
 811f908:	68b9      	ldr	r1, [r7, #8]
 811f90a:	68bb      	ldr	r3, [r7, #8]
 811f90c:	1d1c      	adds	r4, r3, #4
 811f90e:	68bb      	ldr	r3, [r7, #8]
 811f910:	7add      	ldrb	r5, [r3, #11]
 811f912:	68bb      	ldr	r3, [r7, #8]
 811f914:	7a9b      	ldrb	r3, [r3, #10]
 811f916:	687a      	ldr	r2, [r7, #4]
 811f918:	9202      	str	r2, [sp, #8]
 811f91a:	2206      	movs	r2, #6
 811f91c:	9201      	str	r2, [sp, #4]
 811f91e:	9300      	str	r3, [sp, #0]
 811f920:	462b      	mov	r3, r5
 811f922:	4622      	mov	r2, r4
 811f924:	f7f5 fe80 	bl	8115628 <ip4_output_if>
 811f928:	4603      	mov	r3, r0
 811f92a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 811f92c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811f930:	4618      	mov	r0, r3
 811f932:	3720      	adds	r7, #32
 811f934:	46bd      	mov	sp, r7
 811f936:	bdb0      	pop	{r4, r5, r7, pc}
 811f938:	08127a94 	.word	0x08127a94
 811f93c:	08128090 	.word	0x08128090
 811f940:	08127b20 	.word	0x08127b20
 811f944:	081280b0 	.word	0x081280b0
 811f948:	081280d0 	.word	0x081280d0
 811f94c:	240126a0 	.word	0x240126a0
 811f950:	081280f4 	.word	0x081280f4

0811f954 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 811f954:	b5b0      	push	{r4, r5, r7, lr}
 811f956:	b084      	sub	sp, #16
 811f958:	af00      	add	r7, sp, #0
 811f95a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 811f95c:	687b      	ldr	r3, [r7, #4]
 811f95e:	2b00      	cmp	r3, #0
 811f960:	d106      	bne.n	811f970 <tcp_rexmit_rto_prepare+0x1c>
 811f962:	4b31      	ldr	r3, [pc, #196]	@ (811fa28 <tcp_rexmit_rto_prepare+0xd4>)
 811f964:	f240 6263 	movw	r2, #1635	@ 0x663
 811f968:	4930      	ldr	r1, [pc, #192]	@ (811fa2c <tcp_rexmit_rto_prepare+0xd8>)
 811f96a:	4831      	ldr	r0, [pc, #196]	@ (811fa30 <tcp_rexmit_rto_prepare+0xdc>)
 811f96c:	f002 fa0a 	bl	8121d84 <iprintf>

  if (pcb->unacked == NULL) {
 811f970:	687b      	ldr	r3, [r7, #4]
 811f972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f974:	2b00      	cmp	r3, #0
 811f976:	d102      	bne.n	811f97e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 811f978:	f06f 0305 	mvn.w	r3, #5
 811f97c:	e050      	b.n	811fa20 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811f97e:	687b      	ldr	r3, [r7, #4]
 811f980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f982:	60fb      	str	r3, [r7, #12]
 811f984:	e00b      	b.n	811f99e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 811f986:	68f8      	ldr	r0, [r7, #12]
 811f988:	f7ff fee4 	bl	811f754 <tcp_output_segment_busy>
 811f98c:	4603      	mov	r3, r0
 811f98e:	2b00      	cmp	r3, #0
 811f990:	d002      	beq.n	811f998 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 811f992:	f06f 0305 	mvn.w	r3, #5
 811f996:	e043      	b.n	811fa20 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811f998:	68fb      	ldr	r3, [r7, #12]
 811f99a:	681b      	ldr	r3, [r3, #0]
 811f99c:	60fb      	str	r3, [r7, #12]
 811f99e:	68fb      	ldr	r3, [r7, #12]
 811f9a0:	681b      	ldr	r3, [r3, #0]
 811f9a2:	2b00      	cmp	r3, #0
 811f9a4:	d1ef      	bne.n	811f986 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 811f9a6:	68f8      	ldr	r0, [r7, #12]
 811f9a8:	f7ff fed4 	bl	811f754 <tcp_output_segment_busy>
 811f9ac:	4603      	mov	r3, r0
 811f9ae:	2b00      	cmp	r3, #0
 811f9b0:	d002      	beq.n	811f9b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 811f9b2:	f06f 0305 	mvn.w	r3, #5
 811f9b6:	e033      	b.n	811fa20 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 811f9b8:	687b      	ldr	r3, [r7, #4]
 811f9ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811f9bc:	68fb      	ldr	r3, [r7, #12]
 811f9be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 811f9c0:	687b      	ldr	r3, [r7, #4]
 811f9c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 811f9c4:	687b      	ldr	r3, [r7, #4]
 811f9c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 811f9c8:	687b      	ldr	r3, [r7, #4]
 811f9ca:	2200      	movs	r2, #0
 811f9cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 811f9ce:	687b      	ldr	r3, [r7, #4]
 811f9d0:	8b5b      	ldrh	r3, [r3, #26]
 811f9d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 811f9d6:	b29a      	uxth	r2, r3
 811f9d8:	687b      	ldr	r3, [r7, #4]
 811f9da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811f9dc:	68fb      	ldr	r3, [r7, #12]
 811f9de:	68db      	ldr	r3, [r3, #12]
 811f9e0:	685b      	ldr	r3, [r3, #4]
 811f9e2:	4618      	mov	r0, r3
 811f9e4:	f7f4 f997 	bl	8113d16 <lwip_htonl>
 811f9e8:	4604      	mov	r4, r0
 811f9ea:	68fb      	ldr	r3, [r7, #12]
 811f9ec:	891b      	ldrh	r3, [r3, #8]
 811f9ee:	461d      	mov	r5, r3
 811f9f0:	68fb      	ldr	r3, [r7, #12]
 811f9f2:	68db      	ldr	r3, [r3, #12]
 811f9f4:	899b      	ldrh	r3, [r3, #12]
 811f9f6:	b29b      	uxth	r3, r3
 811f9f8:	4618      	mov	r0, r3
 811f9fa:	f7f4 f977 	bl	8113cec <lwip_htons>
 811f9fe:	4603      	mov	r3, r0
 811fa00:	b2db      	uxtb	r3, r3
 811fa02:	f003 0303 	and.w	r3, r3, #3
 811fa06:	2b00      	cmp	r3, #0
 811fa08:	d001      	beq.n	811fa0e <tcp_rexmit_rto_prepare+0xba>
 811fa0a:	2301      	movs	r3, #1
 811fa0c:	e000      	b.n	811fa10 <tcp_rexmit_rto_prepare+0xbc>
 811fa0e:	2300      	movs	r3, #0
 811fa10:	442b      	add	r3, r5
 811fa12:	18e2      	adds	r2, r4, r3
 811fa14:	687b      	ldr	r3, [r7, #4]
 811fa16:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 811fa18:	687b      	ldr	r3, [r7, #4]
 811fa1a:	2200      	movs	r2, #0
 811fa1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 811fa1e:	2300      	movs	r3, #0
}
 811fa20:	4618      	mov	r0, r3
 811fa22:	3710      	adds	r7, #16
 811fa24:	46bd      	mov	sp, r7
 811fa26:	bdb0      	pop	{r4, r5, r7, pc}
 811fa28:	08127a94 	.word	0x08127a94
 811fa2c:	08128108 	.word	0x08128108
 811fa30:	08127b20 	.word	0x08127b20

0811fa34 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 811fa34:	b580      	push	{r7, lr}
 811fa36:	b082      	sub	sp, #8
 811fa38:	af00      	add	r7, sp, #0
 811fa3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 811fa3c:	687b      	ldr	r3, [r7, #4]
 811fa3e:	2b00      	cmp	r3, #0
 811fa40:	d106      	bne.n	811fa50 <tcp_rexmit_rto_commit+0x1c>
 811fa42:	4b0d      	ldr	r3, [pc, #52]	@ (811fa78 <tcp_rexmit_rto_commit+0x44>)
 811fa44:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811fa48:	490c      	ldr	r1, [pc, #48]	@ (811fa7c <tcp_rexmit_rto_commit+0x48>)
 811fa4a:	480d      	ldr	r0, [pc, #52]	@ (811fa80 <tcp_rexmit_rto_commit+0x4c>)
 811fa4c:	f002 f99a 	bl	8121d84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 811fa50:	687b      	ldr	r3, [r7, #4]
 811fa52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811fa56:	2bff      	cmp	r3, #255	@ 0xff
 811fa58:	d007      	beq.n	811fa6a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 811fa5a:	687b      	ldr	r3, [r7, #4]
 811fa5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811fa60:	3301      	adds	r3, #1
 811fa62:	b2da      	uxtb	r2, r3
 811fa64:	687b      	ldr	r3, [r7, #4]
 811fa66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811fa6a:	6878      	ldr	r0, [r7, #4]
 811fa6c:	f7ff fc7c 	bl	811f368 <tcp_output>
}
 811fa70:	bf00      	nop
 811fa72:	3708      	adds	r7, #8
 811fa74:	46bd      	mov	sp, r7
 811fa76:	bd80      	pop	{r7, pc}
 811fa78:	08127a94 	.word	0x08127a94
 811fa7c:	0812812c 	.word	0x0812812c
 811fa80:	08127b20 	.word	0x08127b20

0811fa84 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 811fa84:	b580      	push	{r7, lr}
 811fa86:	b082      	sub	sp, #8
 811fa88:	af00      	add	r7, sp, #0
 811fa8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 811fa8c:	687b      	ldr	r3, [r7, #4]
 811fa8e:	2b00      	cmp	r3, #0
 811fa90:	d106      	bne.n	811faa0 <tcp_rexmit_rto+0x1c>
 811fa92:	4b0a      	ldr	r3, [pc, #40]	@ (811fabc <tcp_rexmit_rto+0x38>)
 811fa94:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 811fa98:	4909      	ldr	r1, [pc, #36]	@ (811fac0 <tcp_rexmit_rto+0x3c>)
 811fa9a:	480a      	ldr	r0, [pc, #40]	@ (811fac4 <tcp_rexmit_rto+0x40>)
 811fa9c:	f002 f972 	bl	8121d84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 811faa0:	6878      	ldr	r0, [r7, #4]
 811faa2:	f7ff ff57 	bl	811f954 <tcp_rexmit_rto_prepare>
 811faa6:	4603      	mov	r3, r0
 811faa8:	2b00      	cmp	r3, #0
 811faaa:	d102      	bne.n	811fab2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 811faac:	6878      	ldr	r0, [r7, #4]
 811faae:	f7ff ffc1 	bl	811fa34 <tcp_rexmit_rto_commit>
  }
}
 811fab2:	bf00      	nop
 811fab4:	3708      	adds	r7, #8
 811fab6:	46bd      	mov	sp, r7
 811fab8:	bd80      	pop	{r7, pc}
 811faba:	bf00      	nop
 811fabc:	08127a94 	.word	0x08127a94
 811fac0:	08128150 	.word	0x08128150
 811fac4:	08127b20 	.word	0x08127b20

0811fac8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 811fac8:	b590      	push	{r4, r7, lr}
 811faca:	b085      	sub	sp, #20
 811facc:	af00      	add	r7, sp, #0
 811face:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 811fad0:	687b      	ldr	r3, [r7, #4]
 811fad2:	2b00      	cmp	r3, #0
 811fad4:	d106      	bne.n	811fae4 <tcp_rexmit+0x1c>
 811fad6:	4b2f      	ldr	r3, [pc, #188]	@ (811fb94 <tcp_rexmit+0xcc>)
 811fad8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 811fadc:	492e      	ldr	r1, [pc, #184]	@ (811fb98 <tcp_rexmit+0xd0>)
 811fade:	482f      	ldr	r0, [pc, #188]	@ (811fb9c <tcp_rexmit+0xd4>)
 811fae0:	f002 f950 	bl	8121d84 <iprintf>

  if (pcb->unacked == NULL) {
 811fae4:	687b      	ldr	r3, [r7, #4]
 811fae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811fae8:	2b00      	cmp	r3, #0
 811faea:	d102      	bne.n	811faf2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 811faec:	f06f 0305 	mvn.w	r3, #5
 811faf0:	e04c      	b.n	811fb8c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 811faf2:	687b      	ldr	r3, [r7, #4]
 811faf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811faf6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 811faf8:	68b8      	ldr	r0, [r7, #8]
 811fafa:	f7ff fe2b 	bl	811f754 <tcp_output_segment_busy>
 811fafe:	4603      	mov	r3, r0
 811fb00:	2b00      	cmp	r3, #0
 811fb02:	d002      	beq.n	811fb0a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 811fb04:	f06f 0305 	mvn.w	r3, #5
 811fb08:	e040      	b.n	811fb8c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 811fb0a:	68bb      	ldr	r3, [r7, #8]
 811fb0c:	681a      	ldr	r2, [r3, #0]
 811fb0e:	687b      	ldr	r3, [r7, #4]
 811fb10:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 811fb12:	687b      	ldr	r3, [r7, #4]
 811fb14:	336c      	adds	r3, #108	@ 0x6c
 811fb16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811fb18:	e002      	b.n	811fb20 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 811fb1a:	68fb      	ldr	r3, [r7, #12]
 811fb1c:	681b      	ldr	r3, [r3, #0]
 811fb1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811fb20:	68fb      	ldr	r3, [r7, #12]
 811fb22:	681b      	ldr	r3, [r3, #0]
 811fb24:	2b00      	cmp	r3, #0
 811fb26:	d011      	beq.n	811fb4c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811fb28:	68fb      	ldr	r3, [r7, #12]
 811fb2a:	681b      	ldr	r3, [r3, #0]
 811fb2c:	68db      	ldr	r3, [r3, #12]
 811fb2e:	685b      	ldr	r3, [r3, #4]
 811fb30:	4618      	mov	r0, r3
 811fb32:	f7f4 f8f0 	bl	8113d16 <lwip_htonl>
 811fb36:	4604      	mov	r4, r0
 811fb38:	68bb      	ldr	r3, [r7, #8]
 811fb3a:	68db      	ldr	r3, [r3, #12]
 811fb3c:	685b      	ldr	r3, [r3, #4]
 811fb3e:	4618      	mov	r0, r3
 811fb40:	f7f4 f8e9 	bl	8113d16 <lwip_htonl>
 811fb44:	4603      	mov	r3, r0
 811fb46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 811fb48:	2b00      	cmp	r3, #0
 811fb4a:	dbe6      	blt.n	811fb1a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 811fb4c:	68fb      	ldr	r3, [r7, #12]
 811fb4e:	681a      	ldr	r2, [r3, #0]
 811fb50:	68bb      	ldr	r3, [r7, #8]
 811fb52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 811fb54:	68fb      	ldr	r3, [r7, #12]
 811fb56:	68ba      	ldr	r2, [r7, #8]
 811fb58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 811fb5a:	68bb      	ldr	r3, [r7, #8]
 811fb5c:	681b      	ldr	r3, [r3, #0]
 811fb5e:	2b00      	cmp	r3, #0
 811fb60:	d103      	bne.n	811fb6a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811fb62:	687b      	ldr	r3, [r7, #4]
 811fb64:	2200      	movs	r2, #0
 811fb66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 811fb6a:	687b      	ldr	r3, [r7, #4]
 811fb6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811fb70:	2bff      	cmp	r3, #255	@ 0xff
 811fb72:	d007      	beq.n	811fb84 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 811fb74:	687b      	ldr	r3, [r7, #4]
 811fb76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811fb7a:	3301      	adds	r3, #1
 811fb7c:	b2da      	uxtb	r2, r3
 811fb7e:	687b      	ldr	r3, [r7, #4]
 811fb80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 811fb84:	687b      	ldr	r3, [r7, #4]
 811fb86:	2200      	movs	r2, #0
 811fb88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 811fb8a:	2300      	movs	r3, #0
}
 811fb8c:	4618      	mov	r0, r3
 811fb8e:	3714      	adds	r7, #20
 811fb90:	46bd      	mov	sp, r7
 811fb92:	bd90      	pop	{r4, r7, pc}
 811fb94:	08127a94 	.word	0x08127a94
 811fb98:	0812816c 	.word	0x0812816c
 811fb9c:	08127b20 	.word	0x08127b20

0811fba0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 811fba0:	b580      	push	{r7, lr}
 811fba2:	b082      	sub	sp, #8
 811fba4:	af00      	add	r7, sp, #0
 811fba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 811fba8:	687b      	ldr	r3, [r7, #4]
 811fbaa:	2b00      	cmp	r3, #0
 811fbac:	d106      	bne.n	811fbbc <tcp_rexmit_fast+0x1c>
 811fbae:	4b2a      	ldr	r3, [pc, #168]	@ (811fc58 <tcp_rexmit_fast+0xb8>)
 811fbb0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 811fbb4:	4929      	ldr	r1, [pc, #164]	@ (811fc5c <tcp_rexmit_fast+0xbc>)
 811fbb6:	482a      	ldr	r0, [pc, #168]	@ (811fc60 <tcp_rexmit_fast+0xc0>)
 811fbb8:	f002 f8e4 	bl	8121d84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 811fbbc:	687b      	ldr	r3, [r7, #4]
 811fbbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811fbc0:	2b00      	cmp	r3, #0
 811fbc2:	d045      	beq.n	811fc50 <tcp_rexmit_fast+0xb0>
 811fbc4:	687b      	ldr	r3, [r7, #4]
 811fbc6:	8b5b      	ldrh	r3, [r3, #26]
 811fbc8:	f003 0304 	and.w	r3, r3, #4
 811fbcc:	2b00      	cmp	r3, #0
 811fbce:	d13f      	bne.n	811fc50 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 811fbd0:	6878      	ldr	r0, [r7, #4]
 811fbd2:	f7ff ff79 	bl	811fac8 <tcp_rexmit>
 811fbd6:	4603      	mov	r3, r0
 811fbd8:	2b00      	cmp	r3, #0
 811fbda:	d139      	bne.n	811fc50 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 811fbdc:	687b      	ldr	r3, [r7, #4]
 811fbde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811fbe2:	687b      	ldr	r3, [r7, #4]
 811fbe4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811fbe8:	4293      	cmp	r3, r2
 811fbea:	bf28      	it	cs
 811fbec:	4613      	movcs	r3, r2
 811fbee:	b29b      	uxth	r3, r3
 811fbf0:	2b00      	cmp	r3, #0
 811fbf2:	da00      	bge.n	811fbf6 <tcp_rexmit_fast+0x56>
 811fbf4:	3301      	adds	r3, #1
 811fbf6:	105b      	asrs	r3, r3, #1
 811fbf8:	b29a      	uxth	r2, r3
 811fbfa:	687b      	ldr	r3, [r7, #4]
 811fbfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 811fc00:	687b      	ldr	r3, [r7, #4]
 811fc02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811fc06:	461a      	mov	r2, r3
 811fc08:	687b      	ldr	r3, [r7, #4]
 811fc0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811fc0c:	005b      	lsls	r3, r3, #1
 811fc0e:	429a      	cmp	r2, r3
 811fc10:	d206      	bcs.n	811fc20 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 811fc12:	687b      	ldr	r3, [r7, #4]
 811fc14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811fc16:	005b      	lsls	r3, r3, #1
 811fc18:	b29a      	uxth	r2, r3
 811fc1a:	687b      	ldr	r3, [r7, #4]
 811fc1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 811fc20:	687b      	ldr	r3, [r7, #4]
 811fc22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811fc26:	687b      	ldr	r3, [r7, #4]
 811fc28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811fc2a:	4619      	mov	r1, r3
 811fc2c:	0049      	lsls	r1, r1, #1
 811fc2e:	440b      	add	r3, r1
 811fc30:	b29b      	uxth	r3, r3
 811fc32:	4413      	add	r3, r2
 811fc34:	b29a      	uxth	r2, r3
 811fc36:	687b      	ldr	r3, [r7, #4]
 811fc38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 811fc3c:	687b      	ldr	r3, [r7, #4]
 811fc3e:	8b5b      	ldrh	r3, [r3, #26]
 811fc40:	f043 0304 	orr.w	r3, r3, #4
 811fc44:	b29a      	uxth	r2, r3
 811fc46:	687b      	ldr	r3, [r7, #4]
 811fc48:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 811fc4a:	687b      	ldr	r3, [r7, #4]
 811fc4c:	2200      	movs	r2, #0
 811fc4e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 811fc50:	bf00      	nop
 811fc52:	3708      	adds	r7, #8
 811fc54:	46bd      	mov	sp, r7
 811fc56:	bd80      	pop	{r7, pc}
 811fc58:	08127a94 	.word	0x08127a94
 811fc5c:	08128184 	.word	0x08128184
 811fc60:	08127b20 	.word	0x08127b20

0811fc64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 811fc64:	b580      	push	{r7, lr}
 811fc66:	b086      	sub	sp, #24
 811fc68:	af00      	add	r7, sp, #0
 811fc6a:	60f8      	str	r0, [r7, #12]
 811fc6c:	607b      	str	r3, [r7, #4]
 811fc6e:	460b      	mov	r3, r1
 811fc70:	817b      	strh	r3, [r7, #10]
 811fc72:	4613      	mov	r3, r2
 811fc74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 811fc76:	897a      	ldrh	r2, [r7, #10]
 811fc78:	893b      	ldrh	r3, [r7, #8]
 811fc7a:	4413      	add	r3, r2
 811fc7c:	b29b      	uxth	r3, r3
 811fc7e:	3314      	adds	r3, #20
 811fc80:	b29b      	uxth	r3, r3
 811fc82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811fc86:	4619      	mov	r1, r3
 811fc88:	2022      	movs	r0, #34	@ 0x22
 811fc8a:	f7f9 fb8d 	bl	81193a8 <pbuf_alloc>
 811fc8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 811fc90:	697b      	ldr	r3, [r7, #20]
 811fc92:	2b00      	cmp	r3, #0
 811fc94:	d04d      	beq.n	811fd32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 811fc96:	897b      	ldrh	r3, [r7, #10]
 811fc98:	3313      	adds	r3, #19
 811fc9a:	697a      	ldr	r2, [r7, #20]
 811fc9c:	8952      	ldrh	r2, [r2, #10]
 811fc9e:	4293      	cmp	r3, r2
 811fca0:	db06      	blt.n	811fcb0 <tcp_output_alloc_header_common+0x4c>
 811fca2:	4b26      	ldr	r3, [pc, #152]	@ (811fd3c <tcp_output_alloc_header_common+0xd8>)
 811fca4:	f240 7223 	movw	r2, #1827	@ 0x723
 811fca8:	4925      	ldr	r1, [pc, #148]	@ (811fd40 <tcp_output_alloc_header_common+0xdc>)
 811fcaa:	4826      	ldr	r0, [pc, #152]	@ (811fd44 <tcp_output_alloc_header_common+0xe0>)
 811fcac:	f002 f86a 	bl	8121d84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 811fcb0:	697b      	ldr	r3, [r7, #20]
 811fcb2:	685b      	ldr	r3, [r3, #4]
 811fcb4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 811fcb6:	8c3b      	ldrh	r3, [r7, #32]
 811fcb8:	4618      	mov	r0, r3
 811fcba:	f7f4 f817 	bl	8113cec <lwip_htons>
 811fcbe:	4603      	mov	r3, r0
 811fcc0:	461a      	mov	r2, r3
 811fcc2:	693b      	ldr	r3, [r7, #16]
 811fcc4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 811fcc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811fcc8:	4618      	mov	r0, r3
 811fcca:	f7f4 f80f 	bl	8113cec <lwip_htons>
 811fcce:	4603      	mov	r3, r0
 811fcd0:	461a      	mov	r2, r3
 811fcd2:	693b      	ldr	r3, [r7, #16]
 811fcd4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 811fcd6:	693b      	ldr	r3, [r7, #16]
 811fcd8:	687a      	ldr	r2, [r7, #4]
 811fcda:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 811fcdc:	68f8      	ldr	r0, [r7, #12]
 811fcde:	f7f4 f81a 	bl	8113d16 <lwip_htonl>
 811fce2:	4602      	mov	r2, r0
 811fce4:	693b      	ldr	r3, [r7, #16]
 811fce6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 811fce8:	897b      	ldrh	r3, [r7, #10]
 811fcea:	089b      	lsrs	r3, r3, #2
 811fcec:	b29b      	uxth	r3, r3
 811fcee:	3305      	adds	r3, #5
 811fcf0:	b29b      	uxth	r3, r3
 811fcf2:	031b      	lsls	r3, r3, #12
 811fcf4:	b29a      	uxth	r2, r3
 811fcf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811fcfa:	b29b      	uxth	r3, r3
 811fcfc:	4313      	orrs	r3, r2
 811fcfe:	b29b      	uxth	r3, r3
 811fd00:	4618      	mov	r0, r3
 811fd02:	f7f3 fff3 	bl	8113cec <lwip_htons>
 811fd06:	4603      	mov	r3, r0
 811fd08:	461a      	mov	r2, r3
 811fd0a:	693b      	ldr	r3, [r7, #16]
 811fd0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 811fd0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811fd10:	4618      	mov	r0, r3
 811fd12:	f7f3 ffeb 	bl	8113cec <lwip_htons>
 811fd16:	4603      	mov	r3, r0
 811fd18:	461a      	mov	r2, r3
 811fd1a:	693b      	ldr	r3, [r7, #16]
 811fd1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 811fd1e:	693b      	ldr	r3, [r7, #16]
 811fd20:	2200      	movs	r2, #0
 811fd22:	741a      	strb	r2, [r3, #16]
 811fd24:	2200      	movs	r2, #0
 811fd26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 811fd28:	693b      	ldr	r3, [r7, #16]
 811fd2a:	2200      	movs	r2, #0
 811fd2c:	749a      	strb	r2, [r3, #18]
 811fd2e:	2200      	movs	r2, #0
 811fd30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 811fd32:	697b      	ldr	r3, [r7, #20]
}
 811fd34:	4618      	mov	r0, r3
 811fd36:	3718      	adds	r7, #24
 811fd38:	46bd      	mov	sp, r7
 811fd3a:	bd80      	pop	{r7, pc}
 811fd3c:	08127a94 	.word	0x08127a94
 811fd40:	081281a4 	.word	0x081281a4
 811fd44:	08127b20 	.word	0x08127b20

0811fd48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 811fd48:	b5b0      	push	{r4, r5, r7, lr}
 811fd4a:	b08a      	sub	sp, #40	@ 0x28
 811fd4c:	af04      	add	r7, sp, #16
 811fd4e:	60f8      	str	r0, [r7, #12]
 811fd50:	607b      	str	r3, [r7, #4]
 811fd52:	460b      	mov	r3, r1
 811fd54:	817b      	strh	r3, [r7, #10]
 811fd56:	4613      	mov	r3, r2
 811fd58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 811fd5a:	68fb      	ldr	r3, [r7, #12]
 811fd5c:	2b00      	cmp	r3, #0
 811fd5e:	d106      	bne.n	811fd6e <tcp_output_alloc_header+0x26>
 811fd60:	4b15      	ldr	r3, [pc, #84]	@ (811fdb8 <tcp_output_alloc_header+0x70>)
 811fd62:	f240 7242 	movw	r2, #1858	@ 0x742
 811fd66:	4915      	ldr	r1, [pc, #84]	@ (811fdbc <tcp_output_alloc_header+0x74>)
 811fd68:	4815      	ldr	r0, [pc, #84]	@ (811fdc0 <tcp_output_alloc_header+0x78>)
 811fd6a:	f002 f80b 	bl	8121d84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 811fd6e:	68fb      	ldr	r3, [r7, #12]
 811fd70:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 811fd72:	68fb      	ldr	r3, [r7, #12]
 811fd74:	8adb      	ldrh	r3, [r3, #22]
 811fd76:	68fa      	ldr	r2, [r7, #12]
 811fd78:	8b12      	ldrh	r2, [r2, #24]
 811fd7a:	68f9      	ldr	r1, [r7, #12]
 811fd7c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 811fd7e:	893d      	ldrh	r5, [r7, #8]
 811fd80:	897c      	ldrh	r4, [r7, #10]
 811fd82:	9103      	str	r1, [sp, #12]
 811fd84:	2110      	movs	r1, #16
 811fd86:	9102      	str	r1, [sp, #8]
 811fd88:	9201      	str	r2, [sp, #4]
 811fd8a:	9300      	str	r3, [sp, #0]
 811fd8c:	687b      	ldr	r3, [r7, #4]
 811fd8e:	462a      	mov	r2, r5
 811fd90:	4621      	mov	r1, r4
 811fd92:	f7ff ff67 	bl	811fc64 <tcp_output_alloc_header_common>
 811fd96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 811fd98:	697b      	ldr	r3, [r7, #20]
 811fd9a:	2b00      	cmp	r3, #0
 811fd9c:	d006      	beq.n	811fdac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811fd9e:	68fb      	ldr	r3, [r7, #12]
 811fda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811fda2:	68fa      	ldr	r2, [r7, #12]
 811fda4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811fda6:	441a      	add	r2, r3
 811fda8:	68fb      	ldr	r3, [r7, #12]
 811fdaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 811fdac:	697b      	ldr	r3, [r7, #20]
}
 811fdae:	4618      	mov	r0, r3
 811fdb0:	3718      	adds	r7, #24
 811fdb2:	46bd      	mov	sp, r7
 811fdb4:	bdb0      	pop	{r4, r5, r7, pc}
 811fdb6:	bf00      	nop
 811fdb8:	08127a94 	.word	0x08127a94
 811fdbc:	081281d4 	.word	0x081281d4
 811fdc0:	08127b20 	.word	0x08127b20

0811fdc4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 811fdc4:	b580      	push	{r7, lr}
 811fdc6:	b088      	sub	sp, #32
 811fdc8:	af00      	add	r7, sp, #0
 811fdca:	60f8      	str	r0, [r7, #12]
 811fdcc:	60b9      	str	r1, [r7, #8]
 811fdce:	4611      	mov	r1, r2
 811fdd0:	461a      	mov	r2, r3
 811fdd2:	460b      	mov	r3, r1
 811fdd4:	71fb      	strb	r3, [r7, #7]
 811fdd6:	4613      	mov	r3, r2
 811fdd8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 811fdda:	2300      	movs	r3, #0
 811fddc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 811fdde:	68bb      	ldr	r3, [r7, #8]
 811fde0:	2b00      	cmp	r3, #0
 811fde2:	d106      	bne.n	811fdf2 <tcp_output_fill_options+0x2e>
 811fde4:	4b12      	ldr	r3, [pc, #72]	@ (811fe30 <tcp_output_fill_options+0x6c>)
 811fde6:	f240 7256 	movw	r2, #1878	@ 0x756
 811fdea:	4912      	ldr	r1, [pc, #72]	@ (811fe34 <tcp_output_fill_options+0x70>)
 811fdec:	4812      	ldr	r0, [pc, #72]	@ (811fe38 <tcp_output_fill_options+0x74>)
 811fdee:	f001 ffc9 	bl	8121d84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 811fdf2:	68bb      	ldr	r3, [r7, #8]
 811fdf4:	685b      	ldr	r3, [r3, #4]
 811fdf6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 811fdf8:	69bb      	ldr	r3, [r7, #24]
 811fdfa:	3314      	adds	r3, #20
 811fdfc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 811fdfe:	8bfb      	ldrh	r3, [r7, #30]
 811fe00:	009b      	lsls	r3, r3, #2
 811fe02:	461a      	mov	r2, r3
 811fe04:	79fb      	ldrb	r3, [r7, #7]
 811fe06:	009b      	lsls	r3, r3, #2
 811fe08:	f003 0304 	and.w	r3, r3, #4
 811fe0c:	4413      	add	r3, r2
 811fe0e:	3314      	adds	r3, #20
 811fe10:	69ba      	ldr	r2, [r7, #24]
 811fe12:	4413      	add	r3, r2
 811fe14:	697a      	ldr	r2, [r7, #20]
 811fe16:	429a      	cmp	r2, r3
 811fe18:	d006      	beq.n	811fe28 <tcp_output_fill_options+0x64>
 811fe1a:	4b05      	ldr	r3, [pc, #20]	@ (811fe30 <tcp_output_fill_options+0x6c>)
 811fe1c:	f240 7275 	movw	r2, #1909	@ 0x775
 811fe20:	4906      	ldr	r1, [pc, #24]	@ (811fe3c <tcp_output_fill_options+0x78>)
 811fe22:	4805      	ldr	r0, [pc, #20]	@ (811fe38 <tcp_output_fill_options+0x74>)
 811fe24:	f001 ffae 	bl	8121d84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 811fe28:	bf00      	nop
 811fe2a:	3720      	adds	r7, #32
 811fe2c:	46bd      	mov	sp, r7
 811fe2e:	bd80      	pop	{r7, pc}
 811fe30:	08127a94 	.word	0x08127a94
 811fe34:	081281fc 	.word	0x081281fc
 811fe38:	08127b20 	.word	0x08127b20
 811fe3c:	081280f4 	.word	0x081280f4

0811fe40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 811fe40:	b580      	push	{r7, lr}
 811fe42:	b08a      	sub	sp, #40	@ 0x28
 811fe44:	af04      	add	r7, sp, #16
 811fe46:	60f8      	str	r0, [r7, #12]
 811fe48:	60b9      	str	r1, [r7, #8]
 811fe4a:	607a      	str	r2, [r7, #4]
 811fe4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 811fe4e:	68bb      	ldr	r3, [r7, #8]
 811fe50:	2b00      	cmp	r3, #0
 811fe52:	d106      	bne.n	811fe62 <tcp_output_control_segment+0x22>
 811fe54:	4b1c      	ldr	r3, [pc, #112]	@ (811fec8 <tcp_output_control_segment+0x88>)
 811fe56:	f240 7287 	movw	r2, #1927	@ 0x787
 811fe5a:	491c      	ldr	r1, [pc, #112]	@ (811fecc <tcp_output_control_segment+0x8c>)
 811fe5c:	481c      	ldr	r0, [pc, #112]	@ (811fed0 <tcp_output_control_segment+0x90>)
 811fe5e:	f001 ff91 	bl	8121d84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 811fe62:	683a      	ldr	r2, [r7, #0]
 811fe64:	6879      	ldr	r1, [r7, #4]
 811fe66:	68f8      	ldr	r0, [r7, #12]
 811fe68:	f7fe fae6 	bl	811e438 <tcp_route>
 811fe6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 811fe6e:	693b      	ldr	r3, [r7, #16]
 811fe70:	2b00      	cmp	r3, #0
 811fe72:	d102      	bne.n	811fe7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 811fe74:	23fc      	movs	r3, #252	@ 0xfc
 811fe76:	75fb      	strb	r3, [r7, #23]
 811fe78:	e01c      	b.n	811feb4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 811fe7a:	68fb      	ldr	r3, [r7, #12]
 811fe7c:	2b00      	cmp	r3, #0
 811fe7e:	d006      	beq.n	811fe8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 811fe80:	68fb      	ldr	r3, [r7, #12]
 811fe82:	7adb      	ldrb	r3, [r3, #11]
 811fe84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 811fe86:	68fb      	ldr	r3, [r7, #12]
 811fe88:	7a9b      	ldrb	r3, [r3, #10]
 811fe8a:	757b      	strb	r3, [r7, #21]
 811fe8c:	e003      	b.n	811fe96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 811fe8e:	23ff      	movs	r3, #255	@ 0xff
 811fe90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 811fe92:	2300      	movs	r3, #0
 811fe94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 811fe96:	7dba      	ldrb	r2, [r7, #22]
 811fe98:	693b      	ldr	r3, [r7, #16]
 811fe9a:	9302      	str	r3, [sp, #8]
 811fe9c:	2306      	movs	r3, #6
 811fe9e:	9301      	str	r3, [sp, #4]
 811fea0:	7d7b      	ldrb	r3, [r7, #21]
 811fea2:	9300      	str	r3, [sp, #0]
 811fea4:	4613      	mov	r3, r2
 811fea6:	683a      	ldr	r2, [r7, #0]
 811fea8:	6879      	ldr	r1, [r7, #4]
 811feaa:	68b8      	ldr	r0, [r7, #8]
 811feac:	f7f5 fbbc 	bl	8115628 <ip4_output_if>
 811feb0:	4603      	mov	r3, r0
 811feb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 811feb4:	68b8      	ldr	r0, [r7, #8]
 811feb6:	f7f9 fd59 	bl	811996c <pbuf_free>
  return err;
 811feba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811febe:	4618      	mov	r0, r3
 811fec0:	3718      	adds	r7, #24
 811fec2:	46bd      	mov	sp, r7
 811fec4:	bd80      	pop	{r7, pc}
 811fec6:	bf00      	nop
 811fec8:	08127a94 	.word	0x08127a94
 811fecc:	08128224 	.word	0x08128224
 811fed0:	08127b20 	.word	0x08127b20

0811fed4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 811fed4:	b590      	push	{r4, r7, lr}
 811fed6:	b08b      	sub	sp, #44	@ 0x2c
 811fed8:	af04      	add	r7, sp, #16
 811feda:	60f8      	str	r0, [r7, #12]
 811fedc:	60b9      	str	r1, [r7, #8]
 811fede:	607a      	str	r2, [r7, #4]
 811fee0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 811fee2:	683b      	ldr	r3, [r7, #0]
 811fee4:	2b00      	cmp	r3, #0
 811fee6:	d106      	bne.n	811fef6 <tcp_rst+0x22>
 811fee8:	4b1f      	ldr	r3, [pc, #124]	@ (811ff68 <tcp_rst+0x94>)
 811feea:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811feee:	491f      	ldr	r1, [pc, #124]	@ (811ff6c <tcp_rst+0x98>)
 811fef0:	481f      	ldr	r0, [pc, #124]	@ (811ff70 <tcp_rst+0x9c>)
 811fef2:	f001 ff47 	bl	8121d84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 811fef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fef8:	2b00      	cmp	r3, #0
 811fefa:	d106      	bne.n	811ff0a <tcp_rst+0x36>
 811fefc:	4b1a      	ldr	r3, [pc, #104]	@ (811ff68 <tcp_rst+0x94>)
 811fefe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 811ff02:	491c      	ldr	r1, [pc, #112]	@ (811ff74 <tcp_rst+0xa0>)
 811ff04:	481a      	ldr	r0, [pc, #104]	@ (811ff70 <tcp_rst+0x9c>)
 811ff06:	f001 ff3d 	bl	8121d84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811ff0a:	2300      	movs	r3, #0
 811ff0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 811ff0e:	f246 0308 	movw	r3, #24584	@ 0x6008
 811ff12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 811ff14:	7dfb      	ldrb	r3, [r7, #23]
 811ff16:	b29c      	uxth	r4, r3
 811ff18:	68b8      	ldr	r0, [r7, #8]
 811ff1a:	f7f3 fefc 	bl	8113d16 <lwip_htonl>
 811ff1e:	4602      	mov	r2, r0
 811ff20:	8abb      	ldrh	r3, [r7, #20]
 811ff22:	9303      	str	r3, [sp, #12]
 811ff24:	2314      	movs	r3, #20
 811ff26:	9302      	str	r3, [sp, #8]
 811ff28:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 811ff2a:	9301      	str	r3, [sp, #4]
 811ff2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811ff2e:	9300      	str	r3, [sp, #0]
 811ff30:	4613      	mov	r3, r2
 811ff32:	2200      	movs	r2, #0
 811ff34:	4621      	mov	r1, r4
 811ff36:	6878      	ldr	r0, [r7, #4]
 811ff38:	f7ff fe94 	bl	811fc64 <tcp_output_alloc_header_common>
 811ff3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 811ff3e:	693b      	ldr	r3, [r7, #16]
 811ff40:	2b00      	cmp	r3, #0
 811ff42:	d00c      	beq.n	811ff5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811ff44:	7dfb      	ldrb	r3, [r7, #23]
 811ff46:	2200      	movs	r2, #0
 811ff48:	6939      	ldr	r1, [r7, #16]
 811ff4a:	68f8      	ldr	r0, [r7, #12]
 811ff4c:	f7ff ff3a 	bl	811fdc4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 811ff50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811ff52:	683a      	ldr	r2, [r7, #0]
 811ff54:	6939      	ldr	r1, [r7, #16]
 811ff56:	68f8      	ldr	r0, [r7, #12]
 811ff58:	f7ff ff72 	bl	811fe40 <tcp_output_control_segment>
 811ff5c:	e000      	b.n	811ff60 <tcp_rst+0x8c>
    return;
 811ff5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 811ff60:	371c      	adds	r7, #28
 811ff62:	46bd      	mov	sp, r7
 811ff64:	bd90      	pop	{r4, r7, pc}
 811ff66:	bf00      	nop
 811ff68:	08127a94 	.word	0x08127a94
 811ff6c:	08128250 	.word	0x08128250
 811ff70:	08127b20 	.word	0x08127b20
 811ff74:	0812826c 	.word	0x0812826c

0811ff78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 811ff78:	b590      	push	{r4, r7, lr}
 811ff7a:	b087      	sub	sp, #28
 811ff7c:	af00      	add	r7, sp, #0
 811ff7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 811ff80:	2300      	movs	r3, #0
 811ff82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 811ff84:	2300      	movs	r3, #0
 811ff86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 811ff88:	687b      	ldr	r3, [r7, #4]
 811ff8a:	2b00      	cmp	r3, #0
 811ff8c:	d106      	bne.n	811ff9c <tcp_send_empty_ack+0x24>
 811ff8e:	4b28      	ldr	r3, [pc, #160]	@ (8120030 <tcp_send_empty_ack+0xb8>)
 811ff90:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 811ff94:	4927      	ldr	r1, [pc, #156]	@ (8120034 <tcp_send_empty_ack+0xbc>)
 811ff96:	4828      	ldr	r0, [pc, #160]	@ (8120038 <tcp_send_empty_ack+0xc0>)
 811ff98:	f001 fef4 	bl	8121d84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811ff9c:	7dfb      	ldrb	r3, [r7, #23]
 811ff9e:	009b      	lsls	r3, r3, #2
 811ffa0:	b2db      	uxtb	r3, r3
 811ffa2:	f003 0304 	and.w	r3, r3, #4
 811ffa6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 811ffa8:	7d7b      	ldrb	r3, [r7, #21]
 811ffaa:	b29c      	uxth	r4, r3
 811ffac:	687b      	ldr	r3, [r7, #4]
 811ffae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ffb0:	4618      	mov	r0, r3
 811ffb2:	f7f3 feb0 	bl	8113d16 <lwip_htonl>
 811ffb6:	4603      	mov	r3, r0
 811ffb8:	2200      	movs	r2, #0
 811ffba:	4621      	mov	r1, r4
 811ffbc:	6878      	ldr	r0, [r7, #4]
 811ffbe:	f7ff fec3 	bl	811fd48 <tcp_output_alloc_header>
 811ffc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811ffc4:	693b      	ldr	r3, [r7, #16]
 811ffc6:	2b00      	cmp	r3, #0
 811ffc8:	d109      	bne.n	811ffde <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ffca:	687b      	ldr	r3, [r7, #4]
 811ffcc:	8b5b      	ldrh	r3, [r3, #26]
 811ffce:	f043 0303 	orr.w	r3, r3, #3
 811ffd2:	b29a      	uxth	r2, r3
 811ffd4:	687b      	ldr	r3, [r7, #4]
 811ffd6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 811ffd8:	f06f 0301 	mvn.w	r3, #1
 811ffdc:	e023      	b.n	8120026 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 811ffde:	7dbb      	ldrb	r3, [r7, #22]
 811ffe0:	7dfa      	ldrb	r2, [r7, #23]
 811ffe2:	6939      	ldr	r1, [r7, #16]
 811ffe4:	6878      	ldr	r0, [r7, #4]
 811ffe6:	f7ff feed 	bl	811fdc4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ffea:	687a      	ldr	r2, [r7, #4]
 811ffec:	687b      	ldr	r3, [r7, #4]
 811ffee:	3304      	adds	r3, #4
 811fff0:	6939      	ldr	r1, [r7, #16]
 811fff2:	6878      	ldr	r0, [r7, #4]
 811fff4:	f7ff ff24 	bl	811fe40 <tcp_output_control_segment>
 811fff8:	4603      	mov	r3, r0
 811fffa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 811fffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8120000:	2b00      	cmp	r3, #0
 8120002:	d007      	beq.n	8120014 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8120004:	687b      	ldr	r3, [r7, #4]
 8120006:	8b5b      	ldrh	r3, [r3, #26]
 8120008:	f043 0303 	orr.w	r3, r3, #3
 812000c:	b29a      	uxth	r2, r3
 812000e:	687b      	ldr	r3, [r7, #4]
 8120010:	835a      	strh	r2, [r3, #26]
 8120012:	e006      	b.n	8120022 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8120014:	687b      	ldr	r3, [r7, #4]
 8120016:	8b5b      	ldrh	r3, [r3, #26]
 8120018:	f023 0303 	bic.w	r3, r3, #3
 812001c:	b29a      	uxth	r2, r3
 812001e:	687b      	ldr	r3, [r7, #4]
 8120020:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8120022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8120026:	4618      	mov	r0, r3
 8120028:	371c      	adds	r7, #28
 812002a:	46bd      	mov	sp, r7
 812002c:	bd90      	pop	{r4, r7, pc}
 812002e:	bf00      	nop
 8120030:	08127a94 	.word	0x08127a94
 8120034:	08128288 	.word	0x08128288
 8120038:	08127b20 	.word	0x08127b20

0812003c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 812003c:	b590      	push	{r4, r7, lr}
 812003e:	b087      	sub	sp, #28
 8120040:	af00      	add	r7, sp, #0
 8120042:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8120044:	2300      	movs	r3, #0
 8120046:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8120048:	687b      	ldr	r3, [r7, #4]
 812004a:	2b00      	cmp	r3, #0
 812004c:	d106      	bne.n	812005c <tcp_keepalive+0x20>
 812004e:	4b18      	ldr	r3, [pc, #96]	@ (81200b0 <tcp_keepalive+0x74>)
 8120050:	f640 0224 	movw	r2, #2084	@ 0x824
 8120054:	4917      	ldr	r1, [pc, #92]	@ (81200b4 <tcp_keepalive+0x78>)
 8120056:	4818      	ldr	r0, [pc, #96]	@ (81200b8 <tcp_keepalive+0x7c>)
 8120058:	f001 fe94 	bl	8121d84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 812005c:	7dfb      	ldrb	r3, [r7, #23]
 812005e:	b29c      	uxth	r4, r3
 8120060:	687b      	ldr	r3, [r7, #4]
 8120062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8120064:	3b01      	subs	r3, #1
 8120066:	4618      	mov	r0, r3
 8120068:	f7f3 fe55 	bl	8113d16 <lwip_htonl>
 812006c:	4603      	mov	r3, r0
 812006e:	2200      	movs	r2, #0
 8120070:	4621      	mov	r1, r4
 8120072:	6878      	ldr	r0, [r7, #4]
 8120074:	f7ff fe68 	bl	811fd48 <tcp_output_alloc_header>
 8120078:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 812007a:	693b      	ldr	r3, [r7, #16]
 812007c:	2b00      	cmp	r3, #0
 812007e:	d102      	bne.n	8120086 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8120080:	f04f 33ff 	mov.w	r3, #4294967295
 8120084:	e010      	b.n	81200a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8120086:	7dfb      	ldrb	r3, [r7, #23]
 8120088:	2200      	movs	r2, #0
 812008a:	6939      	ldr	r1, [r7, #16]
 812008c:	6878      	ldr	r0, [r7, #4]
 812008e:	f7ff fe99 	bl	811fdc4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8120092:	687a      	ldr	r2, [r7, #4]
 8120094:	687b      	ldr	r3, [r7, #4]
 8120096:	3304      	adds	r3, #4
 8120098:	6939      	ldr	r1, [r7, #16]
 812009a:	6878      	ldr	r0, [r7, #4]
 812009c:	f7ff fed0 	bl	811fe40 <tcp_output_control_segment>
 81200a0:	4603      	mov	r3, r0
 81200a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 81200a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81200a8:	4618      	mov	r0, r3
 81200aa:	371c      	adds	r7, #28
 81200ac:	46bd      	mov	sp, r7
 81200ae:	bd90      	pop	{r4, r7, pc}
 81200b0:	08127a94 	.word	0x08127a94
 81200b4:	081282a8 	.word	0x081282a8
 81200b8:	08127b20 	.word	0x08127b20

081200bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 81200bc:	b590      	push	{r4, r7, lr}
 81200be:	b08b      	sub	sp, #44	@ 0x2c
 81200c0:	af00      	add	r7, sp, #0
 81200c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81200c4:	2300      	movs	r3, #0
 81200c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 81200ca:	687b      	ldr	r3, [r7, #4]
 81200cc:	2b00      	cmp	r3, #0
 81200ce:	d106      	bne.n	81200de <tcp_zero_window_probe+0x22>
 81200d0:	4b4c      	ldr	r3, [pc, #304]	@ (8120204 <tcp_zero_window_probe+0x148>)
 81200d2:	f640 024f 	movw	r2, #2127	@ 0x84f
 81200d6:	494c      	ldr	r1, [pc, #304]	@ (8120208 <tcp_zero_window_probe+0x14c>)
 81200d8:	484c      	ldr	r0, [pc, #304]	@ (812020c <tcp_zero_window_probe+0x150>)
 81200da:	f001 fe53 	bl	8121d84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 81200de:	687b      	ldr	r3, [r7, #4]
 81200e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81200e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 81200e4:	6a3b      	ldr	r3, [r7, #32]
 81200e6:	2b00      	cmp	r3, #0
 81200e8:	d101      	bne.n	81200ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 81200ea:	2300      	movs	r3, #0
 81200ec:	e086      	b.n	81201fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 81200ee:	687b      	ldr	r3, [r7, #4]
 81200f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 81200f4:	2bff      	cmp	r3, #255	@ 0xff
 81200f6:	d007      	beq.n	8120108 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 81200f8:	687b      	ldr	r3, [r7, #4]
 81200fa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 81200fe:	3301      	adds	r3, #1
 8120100:	b2da      	uxtb	r2, r3
 8120102:	687b      	ldr	r3, [r7, #4]
 8120104:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8120108:	6a3b      	ldr	r3, [r7, #32]
 812010a:	68db      	ldr	r3, [r3, #12]
 812010c:	899b      	ldrh	r3, [r3, #12]
 812010e:	b29b      	uxth	r3, r3
 8120110:	4618      	mov	r0, r3
 8120112:	f7f3 fdeb 	bl	8113cec <lwip_htons>
 8120116:	4603      	mov	r3, r0
 8120118:	b2db      	uxtb	r3, r3
 812011a:	f003 0301 	and.w	r3, r3, #1
 812011e:	2b00      	cmp	r3, #0
 8120120:	d005      	beq.n	812012e <tcp_zero_window_probe+0x72>
 8120122:	6a3b      	ldr	r3, [r7, #32]
 8120124:	891b      	ldrh	r3, [r3, #8]
 8120126:	2b00      	cmp	r3, #0
 8120128:	d101      	bne.n	812012e <tcp_zero_window_probe+0x72>
 812012a:	2301      	movs	r3, #1
 812012c:	e000      	b.n	8120130 <tcp_zero_window_probe+0x74>
 812012e:	2300      	movs	r3, #0
 8120130:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8120132:	7ffb      	ldrb	r3, [r7, #31]
 8120134:	2b00      	cmp	r3, #0
 8120136:	bf0c      	ite	eq
 8120138:	2301      	moveq	r3, #1
 812013a:	2300      	movne	r3, #0
 812013c:	b2db      	uxtb	r3, r3
 812013e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8120140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8120144:	b299      	uxth	r1, r3
 8120146:	6a3b      	ldr	r3, [r7, #32]
 8120148:	68db      	ldr	r3, [r3, #12]
 812014a:	685b      	ldr	r3, [r3, #4]
 812014c:	8bba      	ldrh	r2, [r7, #28]
 812014e:	6878      	ldr	r0, [r7, #4]
 8120150:	f7ff fdfa 	bl	811fd48 <tcp_output_alloc_header>
 8120154:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8120156:	69bb      	ldr	r3, [r7, #24]
 8120158:	2b00      	cmp	r3, #0
 812015a:	d102      	bne.n	8120162 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 812015c:	f04f 33ff 	mov.w	r3, #4294967295
 8120160:	e04c      	b.n	81201fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8120162:	69bb      	ldr	r3, [r7, #24]
 8120164:	685b      	ldr	r3, [r3, #4]
 8120166:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8120168:	7ffb      	ldrb	r3, [r7, #31]
 812016a:	2b00      	cmp	r3, #0
 812016c:	d011      	beq.n	8120192 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 812016e:	697b      	ldr	r3, [r7, #20]
 8120170:	899b      	ldrh	r3, [r3, #12]
 8120172:	b29b      	uxth	r3, r3
 8120174:	b21b      	sxth	r3, r3
 8120176:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 812017a:	b21c      	sxth	r4, r3
 812017c:	2011      	movs	r0, #17
 812017e:	f7f3 fdb5 	bl	8113cec <lwip_htons>
 8120182:	4603      	mov	r3, r0
 8120184:	b21b      	sxth	r3, r3
 8120186:	4323      	orrs	r3, r4
 8120188:	b21b      	sxth	r3, r3
 812018a:	b29a      	uxth	r2, r3
 812018c:	697b      	ldr	r3, [r7, #20]
 812018e:	819a      	strh	r2, [r3, #12]
 8120190:	e010      	b.n	81201b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8120192:	69bb      	ldr	r3, [r7, #24]
 8120194:	685b      	ldr	r3, [r3, #4]
 8120196:	3314      	adds	r3, #20
 8120198:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 812019a:	6a3b      	ldr	r3, [r7, #32]
 812019c:	6858      	ldr	r0, [r3, #4]
 812019e:	6a3b      	ldr	r3, [r7, #32]
 81201a0:	685b      	ldr	r3, [r3, #4]
 81201a2:	891a      	ldrh	r2, [r3, #8]
 81201a4:	6a3b      	ldr	r3, [r7, #32]
 81201a6:	891b      	ldrh	r3, [r3, #8]
 81201a8:	1ad3      	subs	r3, r2, r3
 81201aa:	b29b      	uxth	r3, r3
 81201ac:	2201      	movs	r2, #1
 81201ae:	6939      	ldr	r1, [r7, #16]
 81201b0:	f7f9 fde2 	bl	8119d78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 81201b4:	6a3b      	ldr	r3, [r7, #32]
 81201b6:	68db      	ldr	r3, [r3, #12]
 81201b8:	685b      	ldr	r3, [r3, #4]
 81201ba:	4618      	mov	r0, r3
 81201bc:	f7f3 fdab 	bl	8113d16 <lwip_htonl>
 81201c0:	4603      	mov	r3, r0
 81201c2:	3301      	adds	r3, #1
 81201c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 81201c6:	687b      	ldr	r3, [r7, #4]
 81201c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81201ca:	68fb      	ldr	r3, [r7, #12]
 81201cc:	1ad3      	subs	r3, r2, r3
 81201ce:	2b00      	cmp	r3, #0
 81201d0:	da02      	bge.n	81201d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 81201d2:	687b      	ldr	r3, [r7, #4]
 81201d4:	68fa      	ldr	r2, [r7, #12]
 81201d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 81201d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81201dc:	2200      	movs	r2, #0
 81201de:	69b9      	ldr	r1, [r7, #24]
 81201e0:	6878      	ldr	r0, [r7, #4]
 81201e2:	f7ff fdef 	bl	811fdc4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 81201e6:	687a      	ldr	r2, [r7, #4]
 81201e8:	687b      	ldr	r3, [r7, #4]
 81201ea:	3304      	adds	r3, #4
 81201ec:	69b9      	ldr	r1, [r7, #24]
 81201ee:	6878      	ldr	r0, [r7, #4]
 81201f0:	f7ff fe26 	bl	811fe40 <tcp_output_control_segment>
 81201f4:	4603      	mov	r3, r0
 81201f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 81201f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 81201fc:	4618      	mov	r0, r3
 81201fe:	372c      	adds	r7, #44	@ 0x2c
 8120200:	46bd      	mov	sp, r7
 8120202:	bd90      	pop	{r4, r7, pc}
 8120204:	08127a94 	.word	0x08127a94
 8120208:	081282c4 	.word	0x081282c4
 812020c:	08127b20 	.word	0x08127b20

08120210 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8120210:	b580      	push	{r7, lr}
 8120212:	b084      	sub	sp, #16
 8120214:	af00      	add	r7, sp, #0
 8120216:	6078      	str	r0, [r7, #4]
 8120218:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 812021a:	f7ef fdd1 	bl	810fdc0 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 812021e:	f000 fb4f 	bl	81208c0 <sys_timeouts_sleeptime>
 8120222:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8120224:	68fb      	ldr	r3, [r7, #12]
 8120226:	f1b3 3fff 	cmp.w	r3, #4294967295
 812022a:	d109      	bne.n	8120240 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 812022c:	f7ef fdba 	bl	810fda4 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8120230:	2200      	movs	r2, #0
 8120232:	6839      	ldr	r1, [r7, #0]
 8120234:	6878      	ldr	r0, [r7, #4]
 8120236:	f7f9 feda 	bl	8119fee <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 812023a:	f7ef fda3 	bl	810fd84 <sys_lock_tcpip_core>
    return;
 812023e:	e016      	b.n	812026e <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 8120240:	68fb      	ldr	r3, [r7, #12]
 8120242:	2b00      	cmp	r3, #0
 8120244:	d102      	bne.n	812024c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8120246:	f000 faff 	bl	8120848 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 812024a:	e7e6      	b.n	812021a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 812024c:	f7ef fdaa 	bl	810fda4 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8120250:	68fa      	ldr	r2, [r7, #12]
 8120252:	6839      	ldr	r1, [r7, #0]
 8120254:	6878      	ldr	r0, [r7, #4]
 8120256:	f7f9 feca 	bl	8119fee <sys_arch_mbox_fetch>
 812025a:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 812025c:	f7ef fd92 	bl	810fd84 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8120260:	68bb      	ldr	r3, [r7, #8]
 8120262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8120266:	d102      	bne.n	812026e <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8120268:	f000 faee 	bl	8120848 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 812026c:	e7d5      	b.n	812021a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 812026e:	3710      	adds	r7, #16
 8120270:	46bd      	mov	sp, r7
 8120272:	bd80      	pop	{r7, pc}

08120274 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8120274:	b580      	push	{r7, lr}
 8120276:	b084      	sub	sp, #16
 8120278:	af00      	add	r7, sp, #0
 812027a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 812027c:	f7ef fdd6 	bl	810fe2c <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8120280:	f7ef fd80 	bl	810fd84 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8120284:	4b0f      	ldr	r3, [pc, #60]	@ (81202c4 <tcpip_thread+0x50>)
 8120286:	681b      	ldr	r3, [r3, #0]
 8120288:	2b00      	cmp	r3, #0
 812028a:	d005      	beq.n	8120298 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 812028c:	4b0d      	ldr	r3, [pc, #52]	@ (81202c4 <tcpip_thread+0x50>)
 812028e:	681b      	ldr	r3, [r3, #0]
 8120290:	4a0d      	ldr	r2, [pc, #52]	@ (81202c8 <tcpip_thread+0x54>)
 8120292:	6812      	ldr	r2, [r2, #0]
 8120294:	4610      	mov	r0, r2
 8120296:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8120298:	f107 030c 	add.w	r3, r7, #12
 812029c:	4619      	mov	r1, r3
 812029e:	480b      	ldr	r0, [pc, #44]	@ (81202cc <tcpip_thread+0x58>)
 81202a0:	f7ff ffb6 	bl	8120210 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 81202a4:	68fb      	ldr	r3, [r7, #12]
 81202a6:	2b00      	cmp	r3, #0
 81202a8:	d106      	bne.n	81202b8 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 81202aa:	4b09      	ldr	r3, [pc, #36]	@ (81202d0 <tcpip_thread+0x5c>)
 81202ac:	2291      	movs	r2, #145	@ 0x91
 81202ae:	4909      	ldr	r1, [pc, #36]	@ (81202d4 <tcpip_thread+0x60>)
 81202b0:	4809      	ldr	r0, [pc, #36]	@ (81202d8 <tcpip_thread+0x64>)
 81202b2:	f001 fd67 	bl	8121d84 <iprintf>
      continue;
 81202b6:	e003      	b.n	81202c0 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 81202b8:	68fb      	ldr	r3, [r7, #12]
 81202ba:	4618      	mov	r0, r3
 81202bc:	f000 f80e 	bl	81202dc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 81202c0:	e7ea      	b.n	8120298 <tcpip_thread+0x24>
 81202c2:	bf00      	nop
 81202c4:	240126f0 	.word	0x240126f0
 81202c8:	240126f4 	.word	0x240126f4
 81202cc:	240126f8 	.word	0x240126f8
 81202d0:	081282e8 	.word	0x081282e8
 81202d4:	08128350 	.word	0x08128350
 81202d8:	08128370 	.word	0x08128370

081202dc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 81202dc:	b580      	push	{r7, lr}
 81202de:	b082      	sub	sp, #8
 81202e0:	af00      	add	r7, sp, #0
 81202e2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 81202e4:	687b      	ldr	r3, [r7, #4]
 81202e6:	781b      	ldrb	r3, [r3, #0]
 81202e8:	2b02      	cmp	r3, #2
 81202ea:	d026      	beq.n	812033a <tcpip_thread_handle_msg+0x5e>
 81202ec:	2b02      	cmp	r3, #2
 81202ee:	dc2b      	bgt.n	8120348 <tcpip_thread_handle_msg+0x6c>
 81202f0:	2b00      	cmp	r3, #0
 81202f2:	d002      	beq.n	81202fa <tcpip_thread_handle_msg+0x1e>
 81202f4:	2b01      	cmp	r3, #1
 81202f6:	d015      	beq.n	8120324 <tcpip_thread_handle_msg+0x48>
 81202f8:	e026      	b.n	8120348 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 81202fa:	687b      	ldr	r3, [r7, #4]
 81202fc:	68db      	ldr	r3, [r3, #12]
 81202fe:	687a      	ldr	r2, [r7, #4]
 8120300:	6850      	ldr	r0, [r2, #4]
 8120302:	687a      	ldr	r2, [r7, #4]
 8120304:	6892      	ldr	r2, [r2, #8]
 8120306:	4611      	mov	r1, r2
 8120308:	4798      	blx	r3
 812030a:	4603      	mov	r3, r0
 812030c:	2b00      	cmp	r3, #0
 812030e:	d004      	beq.n	812031a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8120310:	687b      	ldr	r3, [r7, #4]
 8120312:	685b      	ldr	r3, [r3, #4]
 8120314:	4618      	mov	r0, r3
 8120316:	f7f9 fb29 	bl	811996c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 812031a:	6879      	ldr	r1, [r7, #4]
 812031c:	2009      	movs	r0, #9
 812031e:	f7f6 fdeb 	bl	8116ef8 <memp_free>
      break;
 8120322:	e018      	b.n	8120356 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8120324:	687b      	ldr	r3, [r7, #4]
 8120326:	685b      	ldr	r3, [r3, #4]
 8120328:	687a      	ldr	r2, [r7, #4]
 812032a:	6892      	ldr	r2, [r2, #8]
 812032c:	4610      	mov	r0, r2
 812032e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8120330:	6879      	ldr	r1, [r7, #4]
 8120332:	2008      	movs	r0, #8
 8120334:	f7f6 fde0 	bl	8116ef8 <memp_free>
      break;
 8120338:	e00d      	b.n	8120356 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 812033a:	687b      	ldr	r3, [r7, #4]
 812033c:	685b      	ldr	r3, [r3, #4]
 812033e:	687a      	ldr	r2, [r7, #4]
 8120340:	6892      	ldr	r2, [r2, #8]
 8120342:	4610      	mov	r0, r2
 8120344:	4798      	blx	r3
      break;
 8120346:	e006      	b.n	8120356 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8120348:	4b05      	ldr	r3, [pc, #20]	@ (8120360 <tcpip_thread_handle_msg+0x84>)
 812034a:	22cf      	movs	r2, #207	@ 0xcf
 812034c:	4905      	ldr	r1, [pc, #20]	@ (8120364 <tcpip_thread_handle_msg+0x88>)
 812034e:	4806      	ldr	r0, [pc, #24]	@ (8120368 <tcpip_thread_handle_msg+0x8c>)
 8120350:	f001 fd18 	bl	8121d84 <iprintf>
      break;
 8120354:	bf00      	nop
  }
}
 8120356:	bf00      	nop
 8120358:	3708      	adds	r7, #8
 812035a:	46bd      	mov	sp, r7
 812035c:	bd80      	pop	{r7, pc}
 812035e:	bf00      	nop
 8120360:	081282e8 	.word	0x081282e8
 8120364:	08128350 	.word	0x08128350
 8120368:	08128370 	.word	0x08128370

0812036c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 812036c:	b580      	push	{r7, lr}
 812036e:	b086      	sub	sp, #24
 8120370:	af00      	add	r7, sp, #0
 8120372:	60f8      	str	r0, [r7, #12]
 8120374:	60b9      	str	r1, [r7, #8]
 8120376:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8120378:	481a      	ldr	r0, [pc, #104]	@ (81203e4 <tcpip_inpkt+0x78>)
 812037a:	f7f9 fe69 	bl	811a050 <sys_mbox_valid>
 812037e:	4603      	mov	r3, r0
 8120380:	2b00      	cmp	r3, #0
 8120382:	d105      	bne.n	8120390 <tcpip_inpkt+0x24>
 8120384:	4b18      	ldr	r3, [pc, #96]	@ (81203e8 <tcpip_inpkt+0x7c>)
 8120386:	22fc      	movs	r2, #252	@ 0xfc
 8120388:	4918      	ldr	r1, [pc, #96]	@ (81203ec <tcpip_inpkt+0x80>)
 812038a:	4819      	ldr	r0, [pc, #100]	@ (81203f0 <tcpip_inpkt+0x84>)
 812038c:	f001 fcfa 	bl	8121d84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8120390:	2009      	movs	r0, #9
 8120392:	f7f6 fd3b 	bl	8116e0c <memp_malloc>
 8120396:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8120398:	697b      	ldr	r3, [r7, #20]
 812039a:	2b00      	cmp	r3, #0
 812039c:	d102      	bne.n	81203a4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 812039e:	f04f 33ff 	mov.w	r3, #4294967295
 81203a2:	e01a      	b.n	81203da <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 81203a4:	697b      	ldr	r3, [r7, #20]
 81203a6:	2200      	movs	r2, #0
 81203a8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 81203aa:	697b      	ldr	r3, [r7, #20]
 81203ac:	68fa      	ldr	r2, [r7, #12]
 81203ae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 81203b0:	697b      	ldr	r3, [r7, #20]
 81203b2:	68ba      	ldr	r2, [r7, #8]
 81203b4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 81203b6:	697b      	ldr	r3, [r7, #20]
 81203b8:	687a      	ldr	r2, [r7, #4]
 81203ba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 81203bc:	6979      	ldr	r1, [r7, #20]
 81203be:	4809      	ldr	r0, [pc, #36]	@ (81203e4 <tcpip_inpkt+0x78>)
 81203c0:	f7f9 fdfb 	bl	8119fba <sys_mbox_trypost>
 81203c4:	4603      	mov	r3, r0
 81203c6:	2b00      	cmp	r3, #0
 81203c8:	d006      	beq.n	81203d8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 81203ca:	6979      	ldr	r1, [r7, #20]
 81203cc:	2009      	movs	r0, #9
 81203ce:	f7f6 fd93 	bl	8116ef8 <memp_free>
    return ERR_MEM;
 81203d2:	f04f 33ff 	mov.w	r3, #4294967295
 81203d6:	e000      	b.n	81203da <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 81203d8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 81203da:	4618      	mov	r0, r3
 81203dc:	3718      	adds	r7, #24
 81203de:	46bd      	mov	sp, r7
 81203e0:	bd80      	pop	{r7, pc}
 81203e2:	bf00      	nop
 81203e4:	240126f8 	.word	0x240126f8
 81203e8:	081282e8 	.word	0x081282e8
 81203ec:	08128398 	.word	0x08128398
 81203f0:	08128370 	.word	0x08128370

081203f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 81203f4:	b580      	push	{r7, lr}
 81203f6:	b082      	sub	sp, #8
 81203f8:	af00      	add	r7, sp, #0
 81203fa:	6078      	str	r0, [r7, #4]
 81203fc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 81203fe:	683b      	ldr	r3, [r7, #0]
 8120400:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8120404:	f003 0318 	and.w	r3, r3, #24
 8120408:	2b00      	cmp	r3, #0
 812040a:	d006      	beq.n	812041a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 812040c:	4a08      	ldr	r2, [pc, #32]	@ (8120430 <tcpip_input+0x3c>)
 812040e:	6839      	ldr	r1, [r7, #0]
 8120410:	6878      	ldr	r0, [r7, #4]
 8120412:	f7ff ffab 	bl	812036c <tcpip_inpkt>
 8120416:	4603      	mov	r3, r0
 8120418:	e005      	b.n	8120426 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 812041a:	4a06      	ldr	r2, [pc, #24]	@ (8120434 <tcpip_input+0x40>)
 812041c:	6839      	ldr	r1, [r7, #0]
 812041e:	6878      	ldr	r0, [r7, #4]
 8120420:	f7ff ffa4 	bl	812036c <tcpip_inpkt>
 8120424:	4603      	mov	r3, r0
}
 8120426:	4618      	mov	r0, r3
 8120428:	3708      	adds	r7, #8
 812042a:	46bd      	mov	sp, r7
 812042c:	bd80      	pop	{r7, pc}
 812042e:	bf00      	nop
 8120430:	08114be9 	.word	0x08114be9
 8120434:	081153dd 	.word	0x081153dd

08120438 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8120438:	b580      	push	{r7, lr}
 812043a:	b084      	sub	sp, #16
 812043c:	af00      	add	r7, sp, #0
 812043e:	6078      	str	r0, [r7, #4]
 8120440:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8120442:	4819      	ldr	r0, [pc, #100]	@ (81204a8 <tcpip_try_callback+0x70>)
 8120444:	f7f9 fe04 	bl	811a050 <sys_mbox_valid>
 8120448:	4603      	mov	r3, r0
 812044a:	2b00      	cmp	r3, #0
 812044c:	d106      	bne.n	812045c <tcpip_try_callback+0x24>
 812044e:	4b17      	ldr	r3, [pc, #92]	@ (81204ac <tcpip_try_callback+0x74>)
 8120450:	f240 125d 	movw	r2, #349	@ 0x15d
 8120454:	4916      	ldr	r1, [pc, #88]	@ (81204b0 <tcpip_try_callback+0x78>)
 8120456:	4817      	ldr	r0, [pc, #92]	@ (81204b4 <tcpip_try_callback+0x7c>)
 8120458:	f001 fc94 	bl	8121d84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 812045c:	2008      	movs	r0, #8
 812045e:	f7f6 fcd5 	bl	8116e0c <memp_malloc>
 8120462:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8120464:	68fb      	ldr	r3, [r7, #12]
 8120466:	2b00      	cmp	r3, #0
 8120468:	d102      	bne.n	8120470 <tcpip_try_callback+0x38>
    return ERR_MEM;
 812046a:	f04f 33ff 	mov.w	r3, #4294967295
 812046e:	e017      	b.n	81204a0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8120470:	68fb      	ldr	r3, [r7, #12]
 8120472:	2201      	movs	r2, #1
 8120474:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8120476:	68fb      	ldr	r3, [r7, #12]
 8120478:	687a      	ldr	r2, [r7, #4]
 812047a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 812047c:	68fb      	ldr	r3, [r7, #12]
 812047e:	683a      	ldr	r2, [r7, #0]
 8120480:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8120482:	68f9      	ldr	r1, [r7, #12]
 8120484:	4808      	ldr	r0, [pc, #32]	@ (81204a8 <tcpip_try_callback+0x70>)
 8120486:	f7f9 fd98 	bl	8119fba <sys_mbox_trypost>
 812048a:	4603      	mov	r3, r0
 812048c:	2b00      	cmp	r3, #0
 812048e:	d006      	beq.n	812049e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8120490:	68f9      	ldr	r1, [r7, #12]
 8120492:	2008      	movs	r0, #8
 8120494:	f7f6 fd30 	bl	8116ef8 <memp_free>
    return ERR_MEM;
 8120498:	f04f 33ff 	mov.w	r3, #4294967295
 812049c:	e000      	b.n	81204a0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 812049e:	2300      	movs	r3, #0
}
 81204a0:	4618      	mov	r0, r3
 81204a2:	3710      	adds	r7, #16
 81204a4:	46bd      	mov	sp, r7
 81204a6:	bd80      	pop	{r7, pc}
 81204a8:	240126f8 	.word	0x240126f8
 81204ac:	081282e8 	.word	0x081282e8
 81204b0:	08128398 	.word	0x08128398
 81204b4:	08128370 	.word	0x08128370

081204b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 81204b8:	b580      	push	{r7, lr}
 81204ba:	b084      	sub	sp, #16
 81204bc:	af00      	add	r7, sp, #0
 81204be:	60f8      	str	r0, [r7, #12]
 81204c0:	60b9      	str	r1, [r7, #8]
 81204c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 81204c4:	f7ef fc5e 	bl	810fd84 <sys_lock_tcpip_core>
  fn(apimsg);
 81204c8:	68fb      	ldr	r3, [r7, #12]
 81204ca:	68b8      	ldr	r0, [r7, #8]
 81204cc:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 81204ce:	f7ef fc69 	bl	810fda4 <sys_unlock_tcpip_core>
  return ERR_OK;
 81204d2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 81204d4:	4618      	mov	r0, r3
 81204d6:	3710      	adds	r7, #16
 81204d8:	46bd      	mov	sp, r7
 81204da:	bd80      	pop	{r7, pc}

081204dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 81204dc:	b580      	push	{r7, lr}
 81204de:	b084      	sub	sp, #16
 81204e0:	af02      	add	r7, sp, #8
 81204e2:	6078      	str	r0, [r7, #4]
 81204e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 81204e6:	f7f4 fec7 	bl	8115278 <lwip_init>

  tcpip_init_done = initfunc;
 81204ea:	4a17      	ldr	r2, [pc, #92]	@ (8120548 <tcpip_init+0x6c>)
 81204ec:	687b      	ldr	r3, [r7, #4]
 81204ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 81204f0:	4a16      	ldr	r2, [pc, #88]	@ (812054c <tcpip_init+0x70>)
 81204f2:	683b      	ldr	r3, [r7, #0]
 81204f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 81204f6:	2110      	movs	r1, #16
 81204f8:	4815      	ldr	r0, [pc, #84]	@ (8120550 <tcpip_init+0x74>)
 81204fa:	f7f9 fd44 	bl	8119f86 <sys_mbox_new>
 81204fe:	4603      	mov	r3, r0
 8120500:	2b00      	cmp	r3, #0
 8120502:	d006      	beq.n	8120512 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8120504:	4b13      	ldr	r3, [pc, #76]	@ (8120554 <tcpip_init+0x78>)
 8120506:	f240 2261 	movw	r2, #609	@ 0x261
 812050a:	4913      	ldr	r1, [pc, #76]	@ (8120558 <tcpip_init+0x7c>)
 812050c:	4813      	ldr	r0, [pc, #76]	@ (812055c <tcpip_init+0x80>)
 812050e:	f001 fc39 	bl	8121d84 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8120512:	4813      	ldr	r0, [pc, #76]	@ (8120560 <tcpip_init+0x84>)
 8120514:	f7f9 fdba 	bl	811a08c <sys_mutex_new>
 8120518:	4603      	mov	r3, r0
 812051a:	2b00      	cmp	r3, #0
 812051c:	d006      	beq.n	812052c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 812051e:	4b0d      	ldr	r3, [pc, #52]	@ (8120554 <tcpip_init+0x78>)
 8120520:	f240 2265 	movw	r2, #613	@ 0x265
 8120524:	490f      	ldr	r1, [pc, #60]	@ (8120564 <tcpip_init+0x88>)
 8120526:	480d      	ldr	r0, [pc, #52]	@ (812055c <tcpip_init+0x80>)
 8120528:	f001 fc2c 	bl	8121d84 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 812052c:	2318      	movs	r3, #24
 812052e:	9300      	str	r3, [sp, #0]
 8120530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8120534:	2200      	movs	r2, #0
 8120536:	490c      	ldr	r1, [pc, #48]	@ (8120568 <tcpip_init+0x8c>)
 8120538:	480c      	ldr	r0, [pc, #48]	@ (812056c <tcpip_init+0x90>)
 812053a:	f7f9 fdd9 	bl	811a0f0 <sys_thread_new>
}
 812053e:	bf00      	nop
 8120540:	3708      	adds	r7, #8
 8120542:	46bd      	mov	sp, r7
 8120544:	bd80      	pop	{r7, pc}
 8120546:	bf00      	nop
 8120548:	240126f0 	.word	0x240126f0
 812054c:	240126f4 	.word	0x240126f4
 8120550:	240126f8 	.word	0x240126f8
 8120554:	081282e8 	.word	0x081282e8
 8120558:	081283a8 	.word	0x081283a8
 812055c:	08128370 	.word	0x08128370
 8120560:	240126fc 	.word	0x240126fc
 8120564:	081283cc 	.word	0x081283cc
 8120568:	08120275 	.word	0x08120275
 812056c:	081283f0 	.word	0x081283f0

08120570 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8120570:	b580      	push	{r7, lr}
 8120572:	b082      	sub	sp, #8
 8120574:	af00      	add	r7, sp, #0
 8120576:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8120578:	f7f9 fe42 	bl	811a200 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 812057c:	4b0a      	ldr	r3, [pc, #40]	@ (81205a8 <tcpip_tcp_timer+0x38>)
 812057e:	681b      	ldr	r3, [r3, #0]
 8120580:	2b00      	cmp	r3, #0
 8120582:	d103      	bne.n	812058c <tcpip_tcp_timer+0x1c>
 8120584:	4b09      	ldr	r3, [pc, #36]	@ (81205ac <tcpip_tcp_timer+0x3c>)
 8120586:	681b      	ldr	r3, [r3, #0]
 8120588:	2b00      	cmp	r3, #0
 812058a:	d005      	beq.n	8120598 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 812058c:	2200      	movs	r2, #0
 812058e:	4908      	ldr	r1, [pc, #32]	@ (81205b0 <tcpip_tcp_timer+0x40>)
 8120590:	20fa      	movs	r0, #250	@ 0xfa
 8120592:	f000 f8f5 	bl	8120780 <sys_timeout>
 8120596:	e003      	b.n	81205a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8120598:	4b06      	ldr	r3, [pc, #24]	@ (81205b4 <tcpip_tcp_timer+0x44>)
 812059a:	2200      	movs	r2, #0
 812059c:	601a      	str	r2, [r3, #0]
  }
}
 812059e:	bf00      	nop
 81205a0:	bf00      	nop
 81205a2:	3708      	adds	r7, #8
 81205a4:	46bd      	mov	sp, r7
 81205a6:	bd80      	pop	{r7, pc}
 81205a8:	240126ac 	.word	0x240126ac
 81205ac:	240126b0 	.word	0x240126b0
 81205b0:	08120571 	.word	0x08120571
 81205b4:	24012708 	.word	0x24012708

081205b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 81205b8:	b580      	push	{r7, lr}
 81205ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 81205bc:	f7ef fc00 	bl	810fdc0 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 81205c0:	4b0a      	ldr	r3, [pc, #40]	@ (81205ec <tcp_timer_needed+0x34>)
 81205c2:	681b      	ldr	r3, [r3, #0]
 81205c4:	2b00      	cmp	r3, #0
 81205c6:	d10f      	bne.n	81205e8 <tcp_timer_needed+0x30>
 81205c8:	4b09      	ldr	r3, [pc, #36]	@ (81205f0 <tcp_timer_needed+0x38>)
 81205ca:	681b      	ldr	r3, [r3, #0]
 81205cc:	2b00      	cmp	r3, #0
 81205ce:	d103      	bne.n	81205d8 <tcp_timer_needed+0x20>
 81205d0:	4b08      	ldr	r3, [pc, #32]	@ (81205f4 <tcp_timer_needed+0x3c>)
 81205d2:	681b      	ldr	r3, [r3, #0]
 81205d4:	2b00      	cmp	r3, #0
 81205d6:	d007      	beq.n	81205e8 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 81205d8:	4b04      	ldr	r3, [pc, #16]	@ (81205ec <tcp_timer_needed+0x34>)
 81205da:	2201      	movs	r2, #1
 81205dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 81205de:	2200      	movs	r2, #0
 81205e0:	4905      	ldr	r1, [pc, #20]	@ (81205f8 <tcp_timer_needed+0x40>)
 81205e2:	20fa      	movs	r0, #250	@ 0xfa
 81205e4:	f000 f8cc 	bl	8120780 <sys_timeout>
  }
}
 81205e8:	bf00      	nop
 81205ea:	bd80      	pop	{r7, pc}
 81205ec:	24012708 	.word	0x24012708
 81205f0:	240126ac 	.word	0x240126ac
 81205f4:	240126b0 	.word	0x240126b0
 81205f8:	08120571 	.word	0x08120571

081205fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 81205fc:	b580      	push	{r7, lr}
 81205fe:	b086      	sub	sp, #24
 8120600:	af00      	add	r7, sp, #0
 8120602:	60f8      	str	r0, [r7, #12]
 8120604:	60b9      	str	r1, [r7, #8]
 8120606:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8120608:	200a      	movs	r0, #10
 812060a:	f7f6 fbff 	bl	8116e0c <memp_malloc>
 812060e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8120610:	693b      	ldr	r3, [r7, #16]
 8120612:	2b00      	cmp	r3, #0
 8120614:	d109      	bne.n	812062a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8120616:	693b      	ldr	r3, [r7, #16]
 8120618:	2b00      	cmp	r3, #0
 812061a:	d151      	bne.n	81206c0 <sys_timeout_abs+0xc4>
 812061c:	4b2a      	ldr	r3, [pc, #168]	@ (81206c8 <sys_timeout_abs+0xcc>)
 812061e:	22be      	movs	r2, #190	@ 0xbe
 8120620:	492a      	ldr	r1, [pc, #168]	@ (81206cc <sys_timeout_abs+0xd0>)
 8120622:	482b      	ldr	r0, [pc, #172]	@ (81206d0 <sys_timeout_abs+0xd4>)
 8120624:	f001 fbae 	bl	8121d84 <iprintf>
    return;
 8120628:	e04a      	b.n	81206c0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 812062a:	693b      	ldr	r3, [r7, #16]
 812062c:	2200      	movs	r2, #0
 812062e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8120630:	693b      	ldr	r3, [r7, #16]
 8120632:	68ba      	ldr	r2, [r7, #8]
 8120634:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8120636:	693b      	ldr	r3, [r7, #16]
 8120638:	687a      	ldr	r2, [r7, #4]
 812063a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 812063c:	693b      	ldr	r3, [r7, #16]
 812063e:	68fa      	ldr	r2, [r7, #12]
 8120640:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8120642:	4b24      	ldr	r3, [pc, #144]	@ (81206d4 <sys_timeout_abs+0xd8>)
 8120644:	681b      	ldr	r3, [r3, #0]
 8120646:	2b00      	cmp	r3, #0
 8120648:	d103      	bne.n	8120652 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 812064a:	4a22      	ldr	r2, [pc, #136]	@ (81206d4 <sys_timeout_abs+0xd8>)
 812064c:	693b      	ldr	r3, [r7, #16]
 812064e:	6013      	str	r3, [r2, #0]
    return;
 8120650:	e037      	b.n	81206c2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8120652:	693b      	ldr	r3, [r7, #16]
 8120654:	685a      	ldr	r2, [r3, #4]
 8120656:	4b1f      	ldr	r3, [pc, #124]	@ (81206d4 <sys_timeout_abs+0xd8>)
 8120658:	681b      	ldr	r3, [r3, #0]
 812065a:	685b      	ldr	r3, [r3, #4]
 812065c:	1ad3      	subs	r3, r2, r3
 812065e:	0fdb      	lsrs	r3, r3, #31
 8120660:	f003 0301 	and.w	r3, r3, #1
 8120664:	b2db      	uxtb	r3, r3
 8120666:	2b00      	cmp	r3, #0
 8120668:	d007      	beq.n	812067a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 812066a:	4b1a      	ldr	r3, [pc, #104]	@ (81206d4 <sys_timeout_abs+0xd8>)
 812066c:	681a      	ldr	r2, [r3, #0]
 812066e:	693b      	ldr	r3, [r7, #16]
 8120670:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8120672:	4a18      	ldr	r2, [pc, #96]	@ (81206d4 <sys_timeout_abs+0xd8>)
 8120674:	693b      	ldr	r3, [r7, #16]
 8120676:	6013      	str	r3, [r2, #0]
 8120678:	e023      	b.n	81206c2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 812067a:	4b16      	ldr	r3, [pc, #88]	@ (81206d4 <sys_timeout_abs+0xd8>)
 812067c:	681b      	ldr	r3, [r3, #0]
 812067e:	617b      	str	r3, [r7, #20]
 8120680:	e01a      	b.n	81206b8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8120682:	697b      	ldr	r3, [r7, #20]
 8120684:	681b      	ldr	r3, [r3, #0]
 8120686:	2b00      	cmp	r3, #0
 8120688:	d00b      	beq.n	81206a2 <sys_timeout_abs+0xa6>
 812068a:	693b      	ldr	r3, [r7, #16]
 812068c:	685a      	ldr	r2, [r3, #4]
 812068e:	697b      	ldr	r3, [r7, #20]
 8120690:	681b      	ldr	r3, [r3, #0]
 8120692:	685b      	ldr	r3, [r3, #4]
 8120694:	1ad3      	subs	r3, r2, r3
 8120696:	0fdb      	lsrs	r3, r3, #31
 8120698:	f003 0301 	and.w	r3, r3, #1
 812069c:	b2db      	uxtb	r3, r3
 812069e:	2b00      	cmp	r3, #0
 81206a0:	d007      	beq.n	81206b2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 81206a2:	697b      	ldr	r3, [r7, #20]
 81206a4:	681a      	ldr	r2, [r3, #0]
 81206a6:	693b      	ldr	r3, [r7, #16]
 81206a8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 81206aa:	697b      	ldr	r3, [r7, #20]
 81206ac:	693a      	ldr	r2, [r7, #16]
 81206ae:	601a      	str	r2, [r3, #0]
        break;
 81206b0:	e007      	b.n	81206c2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 81206b2:	697b      	ldr	r3, [r7, #20]
 81206b4:	681b      	ldr	r3, [r3, #0]
 81206b6:	617b      	str	r3, [r7, #20]
 81206b8:	697b      	ldr	r3, [r7, #20]
 81206ba:	2b00      	cmp	r3, #0
 81206bc:	d1e1      	bne.n	8120682 <sys_timeout_abs+0x86>
 81206be:	e000      	b.n	81206c2 <sys_timeout_abs+0xc6>
    return;
 81206c0:	bf00      	nop
      }
    }
  }
}
 81206c2:	3718      	adds	r7, #24
 81206c4:	46bd      	mov	sp, r7
 81206c6:	bd80      	pop	{r7, pc}
 81206c8:	08128400 	.word	0x08128400
 81206cc:	0812846c 	.word	0x0812846c
 81206d0:	081284ac 	.word	0x081284ac
 81206d4:	24012700 	.word	0x24012700

081206d8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 81206d8:	b580      	push	{r7, lr}
 81206da:	b086      	sub	sp, #24
 81206dc:	af00      	add	r7, sp, #0
 81206de:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 81206e0:	687b      	ldr	r3, [r7, #4]
 81206e2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 81206e4:	697b      	ldr	r3, [r7, #20]
 81206e6:	685b      	ldr	r3, [r3, #4]
 81206e8:	4798      	blx	r3

  now = sys_now();
 81206ea:	f7ef f909 	bl	810f900 <sys_now>
 81206ee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 81206f0:	697b      	ldr	r3, [r7, #20]
 81206f2:	681a      	ldr	r2, [r3, #0]
 81206f4:	4b0f      	ldr	r3, [pc, #60]	@ (8120734 <lwip_cyclic_timer+0x5c>)
 81206f6:	681b      	ldr	r3, [r3, #0]
 81206f8:	4413      	add	r3, r2
 81206fa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 81206fc:	68fa      	ldr	r2, [r7, #12]
 81206fe:	693b      	ldr	r3, [r7, #16]
 8120700:	1ad3      	subs	r3, r2, r3
 8120702:	0fdb      	lsrs	r3, r3, #31
 8120704:	f003 0301 	and.w	r3, r3, #1
 8120708:	b2db      	uxtb	r3, r3
 812070a:	2b00      	cmp	r3, #0
 812070c:	d009      	beq.n	8120722 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 812070e:	697b      	ldr	r3, [r7, #20]
 8120710:	681a      	ldr	r2, [r3, #0]
 8120712:	693b      	ldr	r3, [r7, #16]
 8120714:	4413      	add	r3, r2
 8120716:	687a      	ldr	r2, [r7, #4]
 8120718:	4907      	ldr	r1, [pc, #28]	@ (8120738 <lwip_cyclic_timer+0x60>)
 812071a:	4618      	mov	r0, r3
 812071c:	f7ff ff6e 	bl	81205fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8120720:	e004      	b.n	812072c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8120722:	687a      	ldr	r2, [r7, #4]
 8120724:	4904      	ldr	r1, [pc, #16]	@ (8120738 <lwip_cyclic_timer+0x60>)
 8120726:	68f8      	ldr	r0, [r7, #12]
 8120728:	f7ff ff68 	bl	81205fc <sys_timeout_abs>
}
 812072c:	bf00      	nop
 812072e:	3718      	adds	r7, #24
 8120730:	46bd      	mov	sp, r7
 8120732:	bd80      	pop	{r7, pc}
 8120734:	24012704 	.word	0x24012704
 8120738:	081206d9 	.word	0x081206d9

0812073c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 812073c:	b580      	push	{r7, lr}
 812073e:	b082      	sub	sp, #8
 8120740:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8120742:	2301      	movs	r3, #1
 8120744:	607b      	str	r3, [r7, #4]
 8120746:	e00e      	b.n	8120766 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8120748:	4a0b      	ldr	r2, [pc, #44]	@ (8120778 <sys_timeouts_init+0x3c>)
 812074a:	687b      	ldr	r3, [r7, #4]
 812074c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8120750:	687b      	ldr	r3, [r7, #4]
 8120752:	00db      	lsls	r3, r3, #3
 8120754:	4a08      	ldr	r2, [pc, #32]	@ (8120778 <sys_timeouts_init+0x3c>)
 8120756:	4413      	add	r3, r2
 8120758:	461a      	mov	r2, r3
 812075a:	4908      	ldr	r1, [pc, #32]	@ (812077c <sys_timeouts_init+0x40>)
 812075c:	f000 f810 	bl	8120780 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8120760:	687b      	ldr	r3, [r7, #4]
 8120762:	3301      	adds	r3, #1
 8120764:	607b      	str	r3, [r7, #4]
 8120766:	687b      	ldr	r3, [r7, #4]
 8120768:	2b02      	cmp	r3, #2
 812076a:	d9ed      	bls.n	8120748 <sys_timeouts_init+0xc>
  }
}
 812076c:	bf00      	nop
 812076e:	bf00      	nop
 8120770:	3708      	adds	r7, #8
 8120772:	46bd      	mov	sp, r7
 8120774:	bd80      	pop	{r7, pc}
 8120776:	bf00      	nop
 8120778:	08128a5c 	.word	0x08128a5c
 812077c:	081206d9 	.word	0x081206d9

08120780 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8120780:	b580      	push	{r7, lr}
 8120782:	b086      	sub	sp, #24
 8120784:	af00      	add	r7, sp, #0
 8120786:	60f8      	str	r0, [r7, #12]
 8120788:	60b9      	str	r1, [r7, #8]
 812078a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 812078c:	f7ef fb18 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8120790:	68fb      	ldr	r3, [r7, #12]
 8120792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8120796:	d306      	bcc.n	81207a6 <sys_timeout+0x26>
 8120798:	4b0a      	ldr	r3, [pc, #40]	@ (81207c4 <sys_timeout+0x44>)
 812079a:	f240 1229 	movw	r2, #297	@ 0x129
 812079e:	490a      	ldr	r1, [pc, #40]	@ (81207c8 <sys_timeout+0x48>)
 81207a0:	480a      	ldr	r0, [pc, #40]	@ (81207cc <sys_timeout+0x4c>)
 81207a2:	f001 faef 	bl	8121d84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 81207a6:	f7ef f8ab 	bl	810f900 <sys_now>
 81207aa:	4602      	mov	r2, r0
 81207ac:	68fb      	ldr	r3, [r7, #12]
 81207ae:	4413      	add	r3, r2
 81207b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 81207b2:	687a      	ldr	r2, [r7, #4]
 81207b4:	68b9      	ldr	r1, [r7, #8]
 81207b6:	6978      	ldr	r0, [r7, #20]
 81207b8:	f7ff ff20 	bl	81205fc <sys_timeout_abs>
#endif
}
 81207bc:	bf00      	nop
 81207be:	3718      	adds	r7, #24
 81207c0:	46bd      	mov	sp, r7
 81207c2:	bd80      	pop	{r7, pc}
 81207c4:	08128400 	.word	0x08128400
 81207c8:	081284d4 	.word	0x081284d4
 81207cc:	081284ac 	.word	0x081284ac

081207d0 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 81207d0:	b580      	push	{r7, lr}
 81207d2:	b084      	sub	sp, #16
 81207d4:	af00      	add	r7, sp, #0
 81207d6:	6078      	str	r0, [r7, #4]
 81207d8:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();
 81207da:	f7ef faf1 	bl	810fdc0 <sys_check_core_locking>

  if (next_timeout == NULL) {
 81207de:	4b19      	ldr	r3, [pc, #100]	@ (8120844 <sys_untimeout+0x74>)
 81207e0:	681b      	ldr	r3, [r3, #0]
 81207e2:	2b00      	cmp	r3, #0
 81207e4:	d029      	beq.n	812083a <sys_untimeout+0x6a>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 81207e6:	4b17      	ldr	r3, [pc, #92]	@ (8120844 <sys_untimeout+0x74>)
 81207e8:	681b      	ldr	r3, [r3, #0]
 81207ea:	60bb      	str	r3, [r7, #8]
 81207ec:	2300      	movs	r3, #0
 81207ee:	60fb      	str	r3, [r7, #12]
 81207f0:	e01f      	b.n	8120832 <sys_untimeout+0x62>
    if ((t->h == handler) && (t->arg == arg)) {
 81207f2:	68bb      	ldr	r3, [r7, #8]
 81207f4:	689b      	ldr	r3, [r3, #8]
 81207f6:	687a      	ldr	r2, [r7, #4]
 81207f8:	429a      	cmp	r2, r3
 81207fa:	d115      	bne.n	8120828 <sys_untimeout+0x58>
 81207fc:	68bb      	ldr	r3, [r7, #8]
 81207fe:	68db      	ldr	r3, [r3, #12]
 8120800:	683a      	ldr	r2, [r7, #0]
 8120802:	429a      	cmp	r2, r3
 8120804:	d110      	bne.n	8120828 <sys_untimeout+0x58>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8120806:	68fb      	ldr	r3, [r7, #12]
 8120808:	2b00      	cmp	r3, #0
 812080a:	d104      	bne.n	8120816 <sys_untimeout+0x46>
        next_timeout = t->next;
 812080c:	68bb      	ldr	r3, [r7, #8]
 812080e:	681b      	ldr	r3, [r3, #0]
 8120810:	4a0c      	ldr	r2, [pc, #48]	@ (8120844 <sys_untimeout+0x74>)
 8120812:	6013      	str	r3, [r2, #0]
 8120814:	e003      	b.n	812081e <sys_untimeout+0x4e>
      } else {
        prev_t->next = t->next;
 8120816:	68bb      	ldr	r3, [r7, #8]
 8120818:	681a      	ldr	r2, [r3, #0]
 812081a:	68fb      	ldr	r3, [r7, #12]
 812081c:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 812081e:	68b9      	ldr	r1, [r7, #8]
 8120820:	200a      	movs	r0, #10
 8120822:	f7f6 fb69 	bl	8116ef8 <memp_free>
      return;
 8120826:	e009      	b.n	812083c <sys_untimeout+0x6c>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8120828:	68bb      	ldr	r3, [r7, #8]
 812082a:	60fb      	str	r3, [r7, #12]
 812082c:	68bb      	ldr	r3, [r7, #8]
 812082e:	681b      	ldr	r3, [r3, #0]
 8120830:	60bb      	str	r3, [r7, #8]
 8120832:	68bb      	ldr	r3, [r7, #8]
 8120834:	2b00      	cmp	r3, #0
 8120836:	d1dc      	bne.n	81207f2 <sys_untimeout+0x22>
    }
  }
  return;
 8120838:	e000      	b.n	812083c <sys_untimeout+0x6c>
    return;
 812083a:	bf00      	nop
}
 812083c:	3710      	adds	r7, #16
 812083e:	46bd      	mov	sp, r7
 8120840:	bd80      	pop	{r7, pc}
 8120842:	bf00      	nop
 8120844:	24012700 	.word	0x24012700

08120848 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8120848:	b580      	push	{r7, lr}
 812084a:	b084      	sub	sp, #16
 812084c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 812084e:	f7ef fab7 	bl	810fdc0 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8120852:	f7ef f855 	bl	810f900 <sys_now>
 8120856:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8120858:	4b17      	ldr	r3, [pc, #92]	@ (81208b8 <sys_check_timeouts+0x70>)
 812085a:	681b      	ldr	r3, [r3, #0]
 812085c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 812085e:	68bb      	ldr	r3, [r7, #8]
 8120860:	2b00      	cmp	r3, #0
 8120862:	d022      	beq.n	81208aa <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8120864:	68bb      	ldr	r3, [r7, #8]
 8120866:	685b      	ldr	r3, [r3, #4]
 8120868:	68fa      	ldr	r2, [r7, #12]
 812086a:	1ad3      	subs	r3, r2, r3
 812086c:	0fdb      	lsrs	r3, r3, #31
 812086e:	f003 0301 	and.w	r3, r3, #1
 8120872:	b2db      	uxtb	r3, r3
 8120874:	2b00      	cmp	r3, #0
 8120876:	d11a      	bne.n	81208ae <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8120878:	68bb      	ldr	r3, [r7, #8]
 812087a:	681b      	ldr	r3, [r3, #0]
 812087c:	4a0e      	ldr	r2, [pc, #56]	@ (81208b8 <sys_check_timeouts+0x70>)
 812087e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8120880:	68bb      	ldr	r3, [r7, #8]
 8120882:	689b      	ldr	r3, [r3, #8]
 8120884:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8120886:	68bb      	ldr	r3, [r7, #8]
 8120888:	68db      	ldr	r3, [r3, #12]
 812088a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 812088c:	68bb      	ldr	r3, [r7, #8]
 812088e:	685b      	ldr	r3, [r3, #4]
 8120890:	4a0a      	ldr	r2, [pc, #40]	@ (81208bc <sys_check_timeouts+0x74>)
 8120892:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8120894:	68b9      	ldr	r1, [r7, #8]
 8120896:	200a      	movs	r0, #10
 8120898:	f7f6 fb2e 	bl	8116ef8 <memp_free>
    if (handler != NULL) {
 812089c:	687b      	ldr	r3, [r7, #4]
 812089e:	2b00      	cmp	r3, #0
 81208a0:	d0da      	beq.n	8120858 <sys_check_timeouts+0x10>
      handler(arg);
 81208a2:	687b      	ldr	r3, [r7, #4]
 81208a4:	6838      	ldr	r0, [r7, #0]
 81208a6:	4798      	blx	r3
  do {
 81208a8:	e7d6      	b.n	8120858 <sys_check_timeouts+0x10>
      return;
 81208aa:	bf00      	nop
 81208ac:	e000      	b.n	81208b0 <sys_check_timeouts+0x68>
      return;
 81208ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 81208b0:	3710      	adds	r7, #16
 81208b2:	46bd      	mov	sp, r7
 81208b4:	bd80      	pop	{r7, pc}
 81208b6:	bf00      	nop
 81208b8:	24012700 	.word	0x24012700
 81208bc:	24012704 	.word	0x24012704

081208c0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 81208c0:	b580      	push	{r7, lr}
 81208c2:	b082      	sub	sp, #8
 81208c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 81208c6:	f7ef fa7b 	bl	810fdc0 <sys_check_core_locking>

  if (next_timeout == NULL) {
 81208ca:	4b16      	ldr	r3, [pc, #88]	@ (8120924 <sys_timeouts_sleeptime+0x64>)
 81208cc:	681b      	ldr	r3, [r3, #0]
 81208ce:	2b00      	cmp	r3, #0
 81208d0:	d102      	bne.n	81208d8 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 81208d2:	f04f 33ff 	mov.w	r3, #4294967295
 81208d6:	e020      	b.n	812091a <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 81208d8:	f7ef f812 	bl	810f900 <sys_now>
 81208dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 81208de:	4b11      	ldr	r3, [pc, #68]	@ (8120924 <sys_timeouts_sleeptime+0x64>)
 81208e0:	681b      	ldr	r3, [r3, #0]
 81208e2:	685a      	ldr	r2, [r3, #4]
 81208e4:	687b      	ldr	r3, [r7, #4]
 81208e6:	1ad3      	subs	r3, r2, r3
 81208e8:	0fdb      	lsrs	r3, r3, #31
 81208ea:	f003 0301 	and.w	r3, r3, #1
 81208ee:	b2db      	uxtb	r3, r3
 81208f0:	2b00      	cmp	r3, #0
 81208f2:	d001      	beq.n	81208f8 <sys_timeouts_sleeptime+0x38>
    return 0;
 81208f4:	2300      	movs	r3, #0
 81208f6:	e010      	b.n	812091a <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 81208f8:	4b0a      	ldr	r3, [pc, #40]	@ (8120924 <sys_timeouts_sleeptime+0x64>)
 81208fa:	681b      	ldr	r3, [r3, #0]
 81208fc:	685a      	ldr	r2, [r3, #4]
 81208fe:	687b      	ldr	r3, [r7, #4]
 8120900:	1ad3      	subs	r3, r2, r3
 8120902:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8120904:	683b      	ldr	r3, [r7, #0]
 8120906:	2b00      	cmp	r3, #0
 8120908:	da06      	bge.n	8120918 <sys_timeouts_sleeptime+0x58>
 812090a:	4b07      	ldr	r3, [pc, #28]	@ (8120928 <sys_timeouts_sleeptime+0x68>)
 812090c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8120910:	4906      	ldr	r1, [pc, #24]	@ (812092c <sys_timeouts_sleeptime+0x6c>)
 8120912:	4807      	ldr	r0, [pc, #28]	@ (8120930 <sys_timeouts_sleeptime+0x70>)
 8120914:	f001 fa36 	bl	8121d84 <iprintf>
    return ret;
 8120918:	683b      	ldr	r3, [r7, #0]
  }
}
 812091a:	4618      	mov	r0, r3
 812091c:	3708      	adds	r7, #8
 812091e:	46bd      	mov	sp, r7
 8120920:	bd80      	pop	{r7, pc}
 8120922:	bf00      	nop
 8120924:	24012700 	.word	0x24012700
 8120928:	08128400 	.word	0x08128400
 812092c:	0812850c 	.word	0x0812850c
 8120930:	081284ac 	.word	0x081284ac

08120934 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8120934:	b580      	push	{r7, lr}
 8120936:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8120938:	f000 fc6a 	bl	8121210 <rand>
 812093c:	4603      	mov	r3, r0
 812093e:	b29b      	uxth	r3, r3
 8120940:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8120944:	b29b      	uxth	r3, r3
 8120946:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 812094a:	b29a      	uxth	r2, r3
 812094c:	4b01      	ldr	r3, [pc, #4]	@ (8120954 <udp_init+0x20>)
 812094e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8120950:	bf00      	nop
 8120952:	bd80      	pop	{r7, pc}
 8120954:	24000050 	.word	0x24000050

08120958 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8120958:	b480      	push	{r7}
 812095a:	b083      	sub	sp, #12
 812095c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 812095e:	2300      	movs	r3, #0
 8120960:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8120962:	4b17      	ldr	r3, [pc, #92]	@ (81209c0 <udp_new_port+0x68>)
 8120964:	881b      	ldrh	r3, [r3, #0]
 8120966:	1c5a      	adds	r2, r3, #1
 8120968:	b291      	uxth	r1, r2
 812096a:	4a15      	ldr	r2, [pc, #84]	@ (81209c0 <udp_new_port+0x68>)
 812096c:	8011      	strh	r1, [r2, #0]
 812096e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8120972:	4293      	cmp	r3, r2
 8120974:	d103      	bne.n	812097e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8120976:	4b12      	ldr	r3, [pc, #72]	@ (81209c0 <udp_new_port+0x68>)
 8120978:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 812097c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 812097e:	4b11      	ldr	r3, [pc, #68]	@ (81209c4 <udp_new_port+0x6c>)
 8120980:	681b      	ldr	r3, [r3, #0]
 8120982:	603b      	str	r3, [r7, #0]
 8120984:	e011      	b.n	81209aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8120986:	683b      	ldr	r3, [r7, #0]
 8120988:	8a5a      	ldrh	r2, [r3, #18]
 812098a:	4b0d      	ldr	r3, [pc, #52]	@ (81209c0 <udp_new_port+0x68>)
 812098c:	881b      	ldrh	r3, [r3, #0]
 812098e:	429a      	cmp	r2, r3
 8120990:	d108      	bne.n	81209a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8120992:	88fb      	ldrh	r3, [r7, #6]
 8120994:	3301      	adds	r3, #1
 8120996:	80fb      	strh	r3, [r7, #6]
 8120998:	88fb      	ldrh	r3, [r7, #6]
 812099a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 812099e:	d3e0      	bcc.n	8120962 <udp_new_port+0xa>
        return 0;
 81209a0:	2300      	movs	r3, #0
 81209a2:	e007      	b.n	81209b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81209a4:	683b      	ldr	r3, [r7, #0]
 81209a6:	68db      	ldr	r3, [r3, #12]
 81209a8:	603b      	str	r3, [r7, #0]
 81209aa:	683b      	ldr	r3, [r7, #0]
 81209ac:	2b00      	cmp	r3, #0
 81209ae:	d1ea      	bne.n	8120986 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 81209b0:	4b03      	ldr	r3, [pc, #12]	@ (81209c0 <udp_new_port+0x68>)
 81209b2:	881b      	ldrh	r3, [r3, #0]
}
 81209b4:	4618      	mov	r0, r3
 81209b6:	370c      	adds	r7, #12
 81209b8:	46bd      	mov	sp, r7
 81209ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81209be:	4770      	bx	lr
 81209c0:	24000050 	.word	0x24000050
 81209c4:	2401270c 	.word	0x2401270c

081209c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 81209c8:	b580      	push	{r7, lr}
 81209ca:	b084      	sub	sp, #16
 81209cc:	af00      	add	r7, sp, #0
 81209ce:	60f8      	str	r0, [r7, #12]
 81209d0:	60b9      	str	r1, [r7, #8]
 81209d2:	4613      	mov	r3, r2
 81209d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 81209d6:	68fb      	ldr	r3, [r7, #12]
 81209d8:	2b00      	cmp	r3, #0
 81209da:	d105      	bne.n	81209e8 <udp_input_local_match+0x20>
 81209dc:	4b27      	ldr	r3, [pc, #156]	@ (8120a7c <udp_input_local_match+0xb4>)
 81209de:	2287      	movs	r2, #135	@ 0x87
 81209e0:	4927      	ldr	r1, [pc, #156]	@ (8120a80 <udp_input_local_match+0xb8>)
 81209e2:	4828      	ldr	r0, [pc, #160]	@ (8120a84 <udp_input_local_match+0xbc>)
 81209e4:	f001 f9ce 	bl	8121d84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 81209e8:	68bb      	ldr	r3, [r7, #8]
 81209ea:	2b00      	cmp	r3, #0
 81209ec:	d105      	bne.n	81209fa <udp_input_local_match+0x32>
 81209ee:	4b23      	ldr	r3, [pc, #140]	@ (8120a7c <udp_input_local_match+0xb4>)
 81209f0:	2288      	movs	r2, #136	@ 0x88
 81209f2:	4925      	ldr	r1, [pc, #148]	@ (8120a88 <udp_input_local_match+0xc0>)
 81209f4:	4823      	ldr	r0, [pc, #140]	@ (8120a84 <udp_input_local_match+0xbc>)
 81209f6:	f001 f9c5 	bl	8121d84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81209fa:	68fb      	ldr	r3, [r7, #12]
 81209fc:	7a1b      	ldrb	r3, [r3, #8]
 81209fe:	2b00      	cmp	r3, #0
 8120a00:	d00b      	beq.n	8120a1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8120a02:	68fb      	ldr	r3, [r7, #12]
 8120a04:	7a1a      	ldrb	r2, [r3, #8]
 8120a06:	4b21      	ldr	r3, [pc, #132]	@ (8120a8c <udp_input_local_match+0xc4>)
 8120a08:	685b      	ldr	r3, [r3, #4]
 8120a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8120a0e:	3301      	adds	r3, #1
 8120a10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8120a12:	429a      	cmp	r2, r3
 8120a14:	d001      	beq.n	8120a1a <udp_input_local_match+0x52>
    return 0;
 8120a16:	2300      	movs	r3, #0
 8120a18:	e02b      	b.n	8120a72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8120a1a:	79fb      	ldrb	r3, [r7, #7]
 8120a1c:	2b00      	cmp	r3, #0
 8120a1e:	d018      	beq.n	8120a52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8120a20:	68fb      	ldr	r3, [r7, #12]
 8120a22:	2b00      	cmp	r3, #0
 8120a24:	d013      	beq.n	8120a4e <udp_input_local_match+0x86>
 8120a26:	68fb      	ldr	r3, [r7, #12]
 8120a28:	681b      	ldr	r3, [r3, #0]
 8120a2a:	2b00      	cmp	r3, #0
 8120a2c:	d00f      	beq.n	8120a4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8120a2e:	4b17      	ldr	r3, [pc, #92]	@ (8120a8c <udp_input_local_match+0xc4>)
 8120a30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8120a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8120a36:	d00a      	beq.n	8120a4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8120a38:	68fb      	ldr	r3, [r7, #12]
 8120a3a:	681a      	ldr	r2, [r3, #0]
 8120a3c:	4b13      	ldr	r3, [pc, #76]	@ (8120a8c <udp_input_local_match+0xc4>)
 8120a3e:	695b      	ldr	r3, [r3, #20]
 8120a40:	405a      	eors	r2, r3
 8120a42:	68bb      	ldr	r3, [r7, #8]
 8120a44:	3308      	adds	r3, #8
 8120a46:	681b      	ldr	r3, [r3, #0]
 8120a48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8120a4a:	2b00      	cmp	r3, #0
 8120a4c:	d110      	bne.n	8120a70 <udp_input_local_match+0xa8>
          return 1;
 8120a4e:	2301      	movs	r3, #1
 8120a50:	e00f      	b.n	8120a72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8120a52:	68fb      	ldr	r3, [r7, #12]
 8120a54:	2b00      	cmp	r3, #0
 8120a56:	d009      	beq.n	8120a6c <udp_input_local_match+0xa4>
 8120a58:	68fb      	ldr	r3, [r7, #12]
 8120a5a:	681b      	ldr	r3, [r3, #0]
 8120a5c:	2b00      	cmp	r3, #0
 8120a5e:	d005      	beq.n	8120a6c <udp_input_local_match+0xa4>
 8120a60:	68fb      	ldr	r3, [r7, #12]
 8120a62:	681a      	ldr	r2, [r3, #0]
 8120a64:	4b09      	ldr	r3, [pc, #36]	@ (8120a8c <udp_input_local_match+0xc4>)
 8120a66:	695b      	ldr	r3, [r3, #20]
 8120a68:	429a      	cmp	r2, r3
 8120a6a:	d101      	bne.n	8120a70 <udp_input_local_match+0xa8>
        return 1;
 8120a6c:	2301      	movs	r3, #1
 8120a6e:	e000      	b.n	8120a72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8120a70:	2300      	movs	r3, #0
}
 8120a72:	4618      	mov	r0, r3
 8120a74:	3710      	adds	r7, #16
 8120a76:	46bd      	mov	sp, r7
 8120a78:	bd80      	pop	{r7, pc}
 8120a7a:	bf00      	nop
 8120a7c:	08128520 	.word	0x08128520
 8120a80:	08128588 	.word	0x08128588
 8120a84:	081285ac 	.word	0x081285ac
 8120a88:	081285d4 	.word	0x081285d4
 8120a8c:	2400a164 	.word	0x2400a164

08120a90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8120a90:	b590      	push	{r4, r7, lr}
 8120a92:	b08d      	sub	sp, #52	@ 0x34
 8120a94:	af02      	add	r7, sp, #8
 8120a96:	6078      	str	r0, [r7, #4]
 8120a98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8120a9a:	2300      	movs	r3, #0
 8120a9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8120a9e:	f7ef f98f 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8120aa2:	687b      	ldr	r3, [r7, #4]
 8120aa4:	2b00      	cmp	r3, #0
 8120aa6:	d105      	bne.n	8120ab4 <udp_input+0x24>
 8120aa8:	4b7c      	ldr	r3, [pc, #496]	@ (8120c9c <udp_input+0x20c>)
 8120aaa:	22cf      	movs	r2, #207	@ 0xcf
 8120aac:	497c      	ldr	r1, [pc, #496]	@ (8120ca0 <udp_input+0x210>)
 8120aae:	487d      	ldr	r0, [pc, #500]	@ (8120ca4 <udp_input+0x214>)
 8120ab0:	f001 f968 	bl	8121d84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8120ab4:	683b      	ldr	r3, [r7, #0]
 8120ab6:	2b00      	cmp	r3, #0
 8120ab8:	d105      	bne.n	8120ac6 <udp_input+0x36>
 8120aba:	4b78      	ldr	r3, [pc, #480]	@ (8120c9c <udp_input+0x20c>)
 8120abc:	22d0      	movs	r2, #208	@ 0xd0
 8120abe:	497a      	ldr	r1, [pc, #488]	@ (8120ca8 <udp_input+0x218>)
 8120ac0:	4878      	ldr	r0, [pc, #480]	@ (8120ca4 <udp_input+0x214>)
 8120ac2:	f001 f95f 	bl	8121d84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8120ac6:	687b      	ldr	r3, [r7, #4]
 8120ac8:	895b      	ldrh	r3, [r3, #10]
 8120aca:	2b07      	cmp	r3, #7
 8120acc:	d803      	bhi.n	8120ad6 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8120ace:	6878      	ldr	r0, [r7, #4]
 8120ad0:	f7f8 ff4c 	bl	811996c <pbuf_free>
    goto end;
 8120ad4:	e0de      	b.n	8120c94 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8120ad6:	687b      	ldr	r3, [r7, #4]
 8120ad8:	685b      	ldr	r3, [r3, #4]
 8120ada:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8120adc:	4b73      	ldr	r3, [pc, #460]	@ (8120cac <udp_input+0x21c>)
 8120ade:	695b      	ldr	r3, [r3, #20]
 8120ae0:	4a72      	ldr	r2, [pc, #456]	@ (8120cac <udp_input+0x21c>)
 8120ae2:	6812      	ldr	r2, [r2, #0]
 8120ae4:	4611      	mov	r1, r2
 8120ae6:	4618      	mov	r0, r3
 8120ae8:	f7f4 fe78 	bl	81157dc <ip4_addr_isbroadcast_u32>
 8120aec:	4603      	mov	r3, r0
 8120aee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8120af0:	697b      	ldr	r3, [r7, #20]
 8120af2:	881b      	ldrh	r3, [r3, #0]
 8120af4:	b29b      	uxth	r3, r3
 8120af6:	4618      	mov	r0, r3
 8120af8:	f7f3 f8f8 	bl	8113cec <lwip_htons>
 8120afc:	4603      	mov	r3, r0
 8120afe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8120b00:	697b      	ldr	r3, [r7, #20]
 8120b02:	885b      	ldrh	r3, [r3, #2]
 8120b04:	b29b      	uxth	r3, r3
 8120b06:	4618      	mov	r0, r3
 8120b08:	f7f3 f8f0 	bl	8113cec <lwip_htons>
 8120b0c:	4603      	mov	r3, r0
 8120b0e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8120b10:	2300      	movs	r3, #0
 8120b12:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8120b14:	2300      	movs	r3, #0
 8120b16:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8120b18:	2300      	movs	r3, #0
 8120b1a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8120b1c:	4b64      	ldr	r3, [pc, #400]	@ (8120cb0 <udp_input+0x220>)
 8120b1e:	681b      	ldr	r3, [r3, #0]
 8120b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8120b22:	e054      	b.n	8120bce <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8120b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b26:	8a5b      	ldrh	r3, [r3, #18]
 8120b28:	89fa      	ldrh	r2, [r7, #14]
 8120b2a:	429a      	cmp	r2, r3
 8120b2c:	d14a      	bne.n	8120bc4 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8120b2e:	7cfb      	ldrb	r3, [r7, #19]
 8120b30:	461a      	mov	r2, r3
 8120b32:	6839      	ldr	r1, [r7, #0]
 8120b34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8120b36:	f7ff ff47 	bl	81209c8 <udp_input_local_match>
 8120b3a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8120b3c:	2b00      	cmp	r3, #0
 8120b3e:	d041      	beq.n	8120bc4 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8120b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b42:	7c1b      	ldrb	r3, [r3, #16]
 8120b44:	f003 0304 	and.w	r3, r3, #4
 8120b48:	2b00      	cmp	r3, #0
 8120b4a:	d11d      	bne.n	8120b88 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8120b4c:	69fb      	ldr	r3, [r7, #28]
 8120b4e:	2b00      	cmp	r3, #0
 8120b50:	d102      	bne.n	8120b58 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8120b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b54:	61fb      	str	r3, [r7, #28]
 8120b56:	e017      	b.n	8120b88 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8120b58:	7cfb      	ldrb	r3, [r7, #19]
 8120b5a:	2b00      	cmp	r3, #0
 8120b5c:	d014      	beq.n	8120b88 <udp_input+0xf8>
 8120b5e:	4b53      	ldr	r3, [pc, #332]	@ (8120cac <udp_input+0x21c>)
 8120b60:	695b      	ldr	r3, [r3, #20]
 8120b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8120b66:	d10f      	bne.n	8120b88 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8120b68:	69fb      	ldr	r3, [r7, #28]
 8120b6a:	681a      	ldr	r2, [r3, #0]
 8120b6c:	683b      	ldr	r3, [r7, #0]
 8120b6e:	3304      	adds	r3, #4
 8120b70:	681b      	ldr	r3, [r3, #0]
 8120b72:	429a      	cmp	r2, r3
 8120b74:	d008      	beq.n	8120b88 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8120b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b78:	681a      	ldr	r2, [r3, #0]
 8120b7a:	683b      	ldr	r3, [r7, #0]
 8120b7c:	3304      	adds	r3, #4
 8120b7e:	681b      	ldr	r3, [r3, #0]
 8120b80:	429a      	cmp	r2, r3
 8120b82:	d101      	bne.n	8120b88 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8120b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b86:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8120b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b8a:	8a9b      	ldrh	r3, [r3, #20]
 8120b8c:	8a3a      	ldrh	r2, [r7, #16]
 8120b8e:	429a      	cmp	r2, r3
 8120b90:	d118      	bne.n	8120bc4 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8120b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b94:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8120b96:	2b00      	cmp	r3, #0
 8120b98:	d005      	beq.n	8120ba6 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8120b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120b9c:	685a      	ldr	r2, [r3, #4]
 8120b9e:	4b43      	ldr	r3, [pc, #268]	@ (8120cac <udp_input+0x21c>)
 8120ba0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8120ba2:	429a      	cmp	r2, r3
 8120ba4:	d10e      	bne.n	8120bc4 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8120ba6:	6a3b      	ldr	r3, [r7, #32]
 8120ba8:	2b00      	cmp	r3, #0
 8120baa:	d014      	beq.n	8120bd6 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8120bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bae:	68da      	ldr	r2, [r3, #12]
 8120bb0:	6a3b      	ldr	r3, [r7, #32]
 8120bb2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8120bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8120cb0 <udp_input+0x220>)
 8120bb6:	681a      	ldr	r2, [r3, #0]
 8120bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8120bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8120cb0 <udp_input+0x220>)
 8120bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bc0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8120bc2:	e008      	b.n	8120bd6 <udp_input+0x146>
      }
    }

    prev = pcb;
 8120bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bc6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8120bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bca:	68db      	ldr	r3, [r3, #12]
 8120bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8120bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bd0:	2b00      	cmp	r3, #0
 8120bd2:	d1a7      	bne.n	8120b24 <udp_input+0x94>
 8120bd4:	e000      	b.n	8120bd8 <udp_input+0x148>
        break;
 8120bd6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8120bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120bda:	2b00      	cmp	r3, #0
 8120bdc:	d101      	bne.n	8120be2 <udp_input+0x152>
    pcb = uncon_pcb;
 8120bde:	69fb      	ldr	r3, [r7, #28]
 8120be0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8120be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120be4:	2b00      	cmp	r3, #0
 8120be6:	d002      	beq.n	8120bee <udp_input+0x15e>
    for_us = 1;
 8120be8:	2301      	movs	r3, #1
 8120bea:	76fb      	strb	r3, [r7, #27]
 8120bec:	e00a      	b.n	8120c04 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8120bee:	683b      	ldr	r3, [r7, #0]
 8120bf0:	3304      	adds	r3, #4
 8120bf2:	681a      	ldr	r2, [r3, #0]
 8120bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8120cac <udp_input+0x21c>)
 8120bf6:	695b      	ldr	r3, [r3, #20]
 8120bf8:	429a      	cmp	r2, r3
 8120bfa:	bf0c      	ite	eq
 8120bfc:	2301      	moveq	r3, #1
 8120bfe:	2300      	movne	r3, #0
 8120c00:	b2db      	uxtb	r3, r3
 8120c02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8120c04:	7efb      	ldrb	r3, [r7, #27]
 8120c06:	2b00      	cmp	r3, #0
 8120c08:	d041      	beq.n	8120c8e <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8120c0a:	2108      	movs	r1, #8
 8120c0c:	6878      	ldr	r0, [r7, #4]
 8120c0e:	f7f8 fe27 	bl	8119860 <pbuf_remove_header>
 8120c12:	4603      	mov	r3, r0
 8120c14:	2b00      	cmp	r3, #0
 8120c16:	d00a      	beq.n	8120c2e <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8120c18:	4b20      	ldr	r3, [pc, #128]	@ (8120c9c <udp_input+0x20c>)
 8120c1a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8120c1e:	4925      	ldr	r1, [pc, #148]	@ (8120cb4 <udp_input+0x224>)
 8120c20:	4820      	ldr	r0, [pc, #128]	@ (8120ca4 <udp_input+0x214>)
 8120c22:	f001 f8af 	bl	8121d84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8120c26:	6878      	ldr	r0, [r7, #4]
 8120c28:	f7f8 fea0 	bl	811996c <pbuf_free>
      goto end;
 8120c2c:	e032      	b.n	8120c94 <udp_input+0x204>
    }

    if (pcb != NULL) {
 8120c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120c30:	2b00      	cmp	r3, #0
 8120c32:	d012      	beq.n	8120c5a <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8120c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120c36:	699b      	ldr	r3, [r3, #24]
 8120c38:	2b00      	cmp	r3, #0
 8120c3a:	d00a      	beq.n	8120c52 <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8120c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120c3e:	699c      	ldr	r4, [r3, #24]
 8120c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120c42:	69d8      	ldr	r0, [r3, #28]
 8120c44:	8a3b      	ldrh	r3, [r7, #16]
 8120c46:	9300      	str	r3, [sp, #0]
 8120c48:	4b1b      	ldr	r3, [pc, #108]	@ (8120cb8 <udp_input+0x228>)
 8120c4a:	687a      	ldr	r2, [r7, #4]
 8120c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8120c4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8120c50:	e021      	b.n	8120c96 <udp_input+0x206>
        pbuf_free(p);
 8120c52:	6878      	ldr	r0, [r7, #4]
 8120c54:	f7f8 fe8a 	bl	811996c <pbuf_free>
        goto end;
 8120c58:	e01c      	b.n	8120c94 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8120c5a:	7cfb      	ldrb	r3, [r7, #19]
 8120c5c:	2b00      	cmp	r3, #0
 8120c5e:	d112      	bne.n	8120c86 <udp_input+0x1f6>
 8120c60:	4b12      	ldr	r3, [pc, #72]	@ (8120cac <udp_input+0x21c>)
 8120c62:	695b      	ldr	r3, [r3, #20]
 8120c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8120c68:	2be0      	cmp	r3, #224	@ 0xe0
 8120c6a:	d00c      	beq.n	8120c86 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8120c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8120cac <udp_input+0x21c>)
 8120c6e:	899b      	ldrh	r3, [r3, #12]
 8120c70:	3308      	adds	r3, #8
 8120c72:	b29b      	uxth	r3, r3
 8120c74:	b21b      	sxth	r3, r3
 8120c76:	4619      	mov	r1, r3
 8120c78:	6878      	ldr	r0, [r7, #4]
 8120c7a:	f7f8 fe64 	bl	8119946 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8120c7e:	2103      	movs	r1, #3
 8120c80:	6878      	ldr	r0, [r7, #4]
 8120c82:	f7f4 f9a9 	bl	8114fd8 <icmp_dest_unreach>
      pbuf_free(p);
 8120c86:	6878      	ldr	r0, [r7, #4]
 8120c88:	f7f8 fe70 	bl	811996c <pbuf_free>
  return;
 8120c8c:	e003      	b.n	8120c96 <udp_input+0x206>
    pbuf_free(p);
 8120c8e:	6878      	ldr	r0, [r7, #4]
 8120c90:	f7f8 fe6c 	bl	811996c <pbuf_free>
  return;
 8120c94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8120c96:	372c      	adds	r7, #44	@ 0x2c
 8120c98:	46bd      	mov	sp, r7
 8120c9a:	bd90      	pop	{r4, r7, pc}
 8120c9c:	08128520 	.word	0x08128520
 8120ca0:	081285fc 	.word	0x081285fc
 8120ca4:	081285ac 	.word	0x081285ac
 8120ca8:	08128614 	.word	0x08128614
 8120cac:	2400a164 	.word	0x2400a164
 8120cb0:	2401270c 	.word	0x2401270c
 8120cb4:	08128630 	.word	0x08128630
 8120cb8:	2400a174 	.word	0x2400a174

08120cbc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8120cbc:	b580      	push	{r7, lr}
 8120cbe:	b082      	sub	sp, #8
 8120cc0:	af00      	add	r7, sp, #0
 8120cc2:	6078      	str	r0, [r7, #4]
 8120cc4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8120cc6:	687b      	ldr	r3, [r7, #4]
 8120cc8:	2b00      	cmp	r3, #0
 8120cca:	d109      	bne.n	8120ce0 <udp_send+0x24>
 8120ccc:	4b11      	ldr	r3, [pc, #68]	@ (8120d14 <udp_send+0x58>)
 8120cce:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8120cd2:	4911      	ldr	r1, [pc, #68]	@ (8120d18 <udp_send+0x5c>)
 8120cd4:	4811      	ldr	r0, [pc, #68]	@ (8120d1c <udp_send+0x60>)
 8120cd6:	f001 f855 	bl	8121d84 <iprintf>
 8120cda:	f06f 030f 	mvn.w	r3, #15
 8120cde:	e015      	b.n	8120d0c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8120ce0:	683b      	ldr	r3, [r7, #0]
 8120ce2:	2b00      	cmp	r3, #0
 8120ce4:	d109      	bne.n	8120cfa <udp_send+0x3e>
 8120ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8120d14 <udp_send+0x58>)
 8120ce8:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8120cec:	490c      	ldr	r1, [pc, #48]	@ (8120d20 <udp_send+0x64>)
 8120cee:	480b      	ldr	r0, [pc, #44]	@ (8120d1c <udp_send+0x60>)
 8120cf0:	f001 f848 	bl	8121d84 <iprintf>
 8120cf4:	f06f 030f 	mvn.w	r3, #15
 8120cf8:	e008      	b.n	8120d0c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8120cfa:	687b      	ldr	r3, [r7, #4]
 8120cfc:	1d1a      	adds	r2, r3, #4
 8120cfe:	687b      	ldr	r3, [r7, #4]
 8120d00:	8a9b      	ldrh	r3, [r3, #20]
 8120d02:	6839      	ldr	r1, [r7, #0]
 8120d04:	6878      	ldr	r0, [r7, #4]
 8120d06:	f000 f80d 	bl	8120d24 <udp_sendto>
 8120d0a:	4603      	mov	r3, r0
}
 8120d0c:	4618      	mov	r0, r3
 8120d0e:	3708      	adds	r7, #8
 8120d10:	46bd      	mov	sp, r7
 8120d12:	bd80      	pop	{r7, pc}
 8120d14:	08128520 	.word	0x08128520
 8120d18:	0812864c 	.word	0x0812864c
 8120d1c:	081285ac 	.word	0x081285ac
 8120d20:	08128664 	.word	0x08128664

08120d24 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8120d24:	b580      	push	{r7, lr}
 8120d26:	b088      	sub	sp, #32
 8120d28:	af02      	add	r7, sp, #8
 8120d2a:	60f8      	str	r0, [r7, #12]
 8120d2c:	60b9      	str	r1, [r7, #8]
 8120d2e:	607a      	str	r2, [r7, #4]
 8120d30:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8120d32:	68fb      	ldr	r3, [r7, #12]
 8120d34:	2b00      	cmp	r3, #0
 8120d36:	d109      	bne.n	8120d4c <udp_sendto+0x28>
 8120d38:	4b23      	ldr	r3, [pc, #140]	@ (8120dc8 <udp_sendto+0xa4>)
 8120d3a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8120d3e:	4923      	ldr	r1, [pc, #140]	@ (8120dcc <udp_sendto+0xa8>)
 8120d40:	4823      	ldr	r0, [pc, #140]	@ (8120dd0 <udp_sendto+0xac>)
 8120d42:	f001 f81f 	bl	8121d84 <iprintf>
 8120d46:	f06f 030f 	mvn.w	r3, #15
 8120d4a:	e038      	b.n	8120dbe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8120d4c:	68bb      	ldr	r3, [r7, #8]
 8120d4e:	2b00      	cmp	r3, #0
 8120d50:	d109      	bne.n	8120d66 <udp_sendto+0x42>
 8120d52:	4b1d      	ldr	r3, [pc, #116]	@ (8120dc8 <udp_sendto+0xa4>)
 8120d54:	f240 2219 	movw	r2, #537	@ 0x219
 8120d58:	491e      	ldr	r1, [pc, #120]	@ (8120dd4 <udp_sendto+0xb0>)
 8120d5a:	481d      	ldr	r0, [pc, #116]	@ (8120dd0 <udp_sendto+0xac>)
 8120d5c:	f001 f812 	bl	8121d84 <iprintf>
 8120d60:	f06f 030f 	mvn.w	r3, #15
 8120d64:	e02b      	b.n	8120dbe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8120d66:	687b      	ldr	r3, [r7, #4]
 8120d68:	2b00      	cmp	r3, #0
 8120d6a:	d109      	bne.n	8120d80 <udp_sendto+0x5c>
 8120d6c:	4b16      	ldr	r3, [pc, #88]	@ (8120dc8 <udp_sendto+0xa4>)
 8120d6e:	f240 221a 	movw	r2, #538	@ 0x21a
 8120d72:	4919      	ldr	r1, [pc, #100]	@ (8120dd8 <udp_sendto+0xb4>)
 8120d74:	4816      	ldr	r0, [pc, #88]	@ (8120dd0 <udp_sendto+0xac>)
 8120d76:	f001 f805 	bl	8121d84 <iprintf>
 8120d7a:	f06f 030f 	mvn.w	r3, #15
 8120d7e:	e01e      	b.n	8120dbe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8120d80:	68fb      	ldr	r3, [r7, #12]
 8120d82:	7a1b      	ldrb	r3, [r3, #8]
 8120d84:	2b00      	cmp	r3, #0
 8120d86:	d006      	beq.n	8120d96 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8120d88:	68fb      	ldr	r3, [r7, #12]
 8120d8a:	7a1b      	ldrb	r3, [r3, #8]
 8120d8c:	4618      	mov	r0, r3
 8120d8e:	f7f8 fa61 	bl	8119254 <netif_get_by_index>
 8120d92:	6178      	str	r0, [r7, #20]
 8120d94:	e003      	b.n	8120d9e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8120d96:	6878      	ldr	r0, [r7, #4]
 8120d98:	f7f4 fa86 	bl	81152a8 <ip4_route>
 8120d9c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8120d9e:	697b      	ldr	r3, [r7, #20]
 8120da0:	2b00      	cmp	r3, #0
 8120da2:	d102      	bne.n	8120daa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8120da4:	f06f 0303 	mvn.w	r3, #3
 8120da8:	e009      	b.n	8120dbe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8120daa:	887a      	ldrh	r2, [r7, #2]
 8120dac:	697b      	ldr	r3, [r7, #20]
 8120dae:	9300      	str	r3, [sp, #0]
 8120db0:	4613      	mov	r3, r2
 8120db2:	687a      	ldr	r2, [r7, #4]
 8120db4:	68b9      	ldr	r1, [r7, #8]
 8120db6:	68f8      	ldr	r0, [r7, #12]
 8120db8:	f000 f810 	bl	8120ddc <udp_sendto_if>
 8120dbc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8120dbe:	4618      	mov	r0, r3
 8120dc0:	3718      	adds	r7, #24
 8120dc2:	46bd      	mov	sp, r7
 8120dc4:	bd80      	pop	{r7, pc}
 8120dc6:	bf00      	nop
 8120dc8:	08128520 	.word	0x08128520
 8120dcc:	0812867c 	.word	0x0812867c
 8120dd0:	081285ac 	.word	0x081285ac
 8120dd4:	08128694 	.word	0x08128694
 8120dd8:	081286b0 	.word	0x081286b0

08120ddc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8120ddc:	b580      	push	{r7, lr}
 8120dde:	b088      	sub	sp, #32
 8120de0:	af02      	add	r7, sp, #8
 8120de2:	60f8      	str	r0, [r7, #12]
 8120de4:	60b9      	str	r1, [r7, #8]
 8120de6:	607a      	str	r2, [r7, #4]
 8120de8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8120dea:	68fb      	ldr	r3, [r7, #12]
 8120dec:	2b00      	cmp	r3, #0
 8120dee:	d109      	bne.n	8120e04 <udp_sendto_if+0x28>
 8120df0:	4b2e      	ldr	r3, [pc, #184]	@ (8120eac <udp_sendto_if+0xd0>)
 8120df2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120df6:	492e      	ldr	r1, [pc, #184]	@ (8120eb0 <udp_sendto_if+0xd4>)
 8120df8:	482e      	ldr	r0, [pc, #184]	@ (8120eb4 <udp_sendto_if+0xd8>)
 8120dfa:	f000 ffc3 	bl	8121d84 <iprintf>
 8120dfe:	f06f 030f 	mvn.w	r3, #15
 8120e02:	e04f      	b.n	8120ea4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8120e04:	68bb      	ldr	r3, [r7, #8]
 8120e06:	2b00      	cmp	r3, #0
 8120e08:	d109      	bne.n	8120e1e <udp_sendto_if+0x42>
 8120e0a:	4b28      	ldr	r3, [pc, #160]	@ (8120eac <udp_sendto_if+0xd0>)
 8120e0c:	f240 2281 	movw	r2, #641	@ 0x281
 8120e10:	4929      	ldr	r1, [pc, #164]	@ (8120eb8 <udp_sendto_if+0xdc>)
 8120e12:	4828      	ldr	r0, [pc, #160]	@ (8120eb4 <udp_sendto_if+0xd8>)
 8120e14:	f000 ffb6 	bl	8121d84 <iprintf>
 8120e18:	f06f 030f 	mvn.w	r3, #15
 8120e1c:	e042      	b.n	8120ea4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8120e1e:	687b      	ldr	r3, [r7, #4]
 8120e20:	2b00      	cmp	r3, #0
 8120e22:	d109      	bne.n	8120e38 <udp_sendto_if+0x5c>
 8120e24:	4b21      	ldr	r3, [pc, #132]	@ (8120eac <udp_sendto_if+0xd0>)
 8120e26:	f240 2282 	movw	r2, #642	@ 0x282
 8120e2a:	4924      	ldr	r1, [pc, #144]	@ (8120ebc <udp_sendto_if+0xe0>)
 8120e2c:	4821      	ldr	r0, [pc, #132]	@ (8120eb4 <udp_sendto_if+0xd8>)
 8120e2e:	f000 ffa9 	bl	8121d84 <iprintf>
 8120e32:	f06f 030f 	mvn.w	r3, #15
 8120e36:	e035      	b.n	8120ea4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8120e38:	6a3b      	ldr	r3, [r7, #32]
 8120e3a:	2b00      	cmp	r3, #0
 8120e3c:	d109      	bne.n	8120e52 <udp_sendto_if+0x76>
 8120e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8120eac <udp_sendto_if+0xd0>)
 8120e40:	f240 2283 	movw	r2, #643	@ 0x283
 8120e44:	491e      	ldr	r1, [pc, #120]	@ (8120ec0 <udp_sendto_if+0xe4>)
 8120e46:	481b      	ldr	r0, [pc, #108]	@ (8120eb4 <udp_sendto_if+0xd8>)
 8120e48:	f000 ff9c 	bl	8121d84 <iprintf>
 8120e4c:	f06f 030f 	mvn.w	r3, #15
 8120e50:	e028      	b.n	8120ea4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8120e52:	68fb      	ldr	r3, [r7, #12]
 8120e54:	2b00      	cmp	r3, #0
 8120e56:	d009      	beq.n	8120e6c <udp_sendto_if+0x90>
 8120e58:	68fb      	ldr	r3, [r7, #12]
 8120e5a:	681b      	ldr	r3, [r3, #0]
 8120e5c:	2b00      	cmp	r3, #0
 8120e5e:	d005      	beq.n	8120e6c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8120e60:	68fb      	ldr	r3, [r7, #12]
 8120e62:	681b      	ldr	r3, [r3, #0]
 8120e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8120e68:	2be0      	cmp	r3, #224	@ 0xe0
 8120e6a:	d103      	bne.n	8120e74 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8120e6c:	6a3b      	ldr	r3, [r7, #32]
 8120e6e:	3304      	adds	r3, #4
 8120e70:	617b      	str	r3, [r7, #20]
 8120e72:	e00b      	b.n	8120e8c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8120e74:	68fb      	ldr	r3, [r7, #12]
 8120e76:	681a      	ldr	r2, [r3, #0]
 8120e78:	6a3b      	ldr	r3, [r7, #32]
 8120e7a:	3304      	adds	r3, #4
 8120e7c:	681b      	ldr	r3, [r3, #0]
 8120e7e:	429a      	cmp	r2, r3
 8120e80:	d002      	beq.n	8120e88 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8120e82:	f06f 0303 	mvn.w	r3, #3
 8120e86:	e00d      	b.n	8120ea4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8120e88:	68fb      	ldr	r3, [r7, #12]
 8120e8a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8120e8c:	887a      	ldrh	r2, [r7, #2]
 8120e8e:	697b      	ldr	r3, [r7, #20]
 8120e90:	9301      	str	r3, [sp, #4]
 8120e92:	6a3b      	ldr	r3, [r7, #32]
 8120e94:	9300      	str	r3, [sp, #0]
 8120e96:	4613      	mov	r3, r2
 8120e98:	687a      	ldr	r2, [r7, #4]
 8120e9a:	68b9      	ldr	r1, [r7, #8]
 8120e9c:	68f8      	ldr	r0, [r7, #12]
 8120e9e:	f000 f811 	bl	8120ec4 <udp_sendto_if_src>
 8120ea2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8120ea4:	4618      	mov	r0, r3
 8120ea6:	3718      	adds	r7, #24
 8120ea8:	46bd      	mov	sp, r7
 8120eaa:	bd80      	pop	{r7, pc}
 8120eac:	08128520 	.word	0x08128520
 8120eb0:	081286cc 	.word	0x081286cc
 8120eb4:	081285ac 	.word	0x081285ac
 8120eb8:	081286e8 	.word	0x081286e8
 8120ebc:	08128704 	.word	0x08128704
 8120ec0:	08128724 	.word	0x08128724

08120ec4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8120ec4:	b580      	push	{r7, lr}
 8120ec6:	b08c      	sub	sp, #48	@ 0x30
 8120ec8:	af04      	add	r7, sp, #16
 8120eca:	60f8      	str	r0, [r7, #12]
 8120ecc:	60b9      	str	r1, [r7, #8]
 8120ece:	607a      	str	r2, [r7, #4]
 8120ed0:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 8120ed2:	f7ee ff75 	bl	810fdc0 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8120ed6:	68fb      	ldr	r3, [r7, #12]
 8120ed8:	2b00      	cmp	r3, #0
 8120eda:	d109      	bne.n	8120ef0 <udp_sendto_if_src+0x2c>
 8120edc:	4b65      	ldr	r3, [pc, #404]	@ (8121074 <udp_sendto_if_src+0x1b0>)
 8120ede:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8120ee2:	4965      	ldr	r1, [pc, #404]	@ (8121078 <udp_sendto_if_src+0x1b4>)
 8120ee4:	4865      	ldr	r0, [pc, #404]	@ (812107c <udp_sendto_if_src+0x1b8>)
 8120ee6:	f000 ff4d 	bl	8121d84 <iprintf>
 8120eea:	f06f 030f 	mvn.w	r3, #15
 8120eee:	e0bc      	b.n	812106a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8120ef0:	68bb      	ldr	r3, [r7, #8]
 8120ef2:	2b00      	cmp	r3, #0
 8120ef4:	d109      	bne.n	8120f0a <udp_sendto_if_src+0x46>
 8120ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8121074 <udp_sendto_if_src+0x1b0>)
 8120ef8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8120efc:	4960      	ldr	r1, [pc, #384]	@ (8121080 <udp_sendto_if_src+0x1bc>)
 8120efe:	485f      	ldr	r0, [pc, #380]	@ (812107c <udp_sendto_if_src+0x1b8>)
 8120f00:	f000 ff40 	bl	8121d84 <iprintf>
 8120f04:	f06f 030f 	mvn.w	r3, #15
 8120f08:	e0af      	b.n	812106a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8120f0a:	687b      	ldr	r3, [r7, #4]
 8120f0c:	2b00      	cmp	r3, #0
 8120f0e:	d109      	bne.n	8120f24 <udp_sendto_if_src+0x60>
 8120f10:	4b58      	ldr	r3, [pc, #352]	@ (8121074 <udp_sendto_if_src+0x1b0>)
 8120f12:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8120f16:	495b      	ldr	r1, [pc, #364]	@ (8121084 <udp_sendto_if_src+0x1c0>)
 8120f18:	4858      	ldr	r0, [pc, #352]	@ (812107c <udp_sendto_if_src+0x1b8>)
 8120f1a:	f000 ff33 	bl	8121d84 <iprintf>
 8120f1e:	f06f 030f 	mvn.w	r3, #15
 8120f22:	e0a2      	b.n	812106a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8120f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120f26:	2b00      	cmp	r3, #0
 8120f28:	d109      	bne.n	8120f3e <udp_sendto_if_src+0x7a>
 8120f2a:	4b52      	ldr	r3, [pc, #328]	@ (8121074 <udp_sendto_if_src+0x1b0>)
 8120f2c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8120f30:	4955      	ldr	r1, [pc, #340]	@ (8121088 <udp_sendto_if_src+0x1c4>)
 8120f32:	4852      	ldr	r0, [pc, #328]	@ (812107c <udp_sendto_if_src+0x1b8>)
 8120f34:	f000 ff26 	bl	8121d84 <iprintf>
 8120f38:	f06f 030f 	mvn.w	r3, #15
 8120f3c:	e095      	b.n	812106a <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8120f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8120f40:	2b00      	cmp	r3, #0
 8120f42:	d109      	bne.n	8120f58 <udp_sendto_if_src+0x94>
 8120f44:	4b4b      	ldr	r3, [pc, #300]	@ (8121074 <udp_sendto_if_src+0x1b0>)
 8120f46:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8120f4a:	4950      	ldr	r1, [pc, #320]	@ (812108c <udp_sendto_if_src+0x1c8>)
 8120f4c:	484b      	ldr	r0, [pc, #300]	@ (812107c <udp_sendto_if_src+0x1b8>)
 8120f4e:	f000 ff19 	bl	8121d84 <iprintf>
 8120f52:	f06f 030f 	mvn.w	r3, #15
 8120f56:	e088      	b.n	812106a <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8120f58:	68fb      	ldr	r3, [r7, #12]
 8120f5a:	8a5b      	ldrh	r3, [r3, #18]
 8120f5c:	2b00      	cmp	r3, #0
 8120f5e:	d10f      	bne.n	8120f80 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8120f60:	68f9      	ldr	r1, [r7, #12]
 8120f62:	68fb      	ldr	r3, [r7, #12]
 8120f64:	8a5b      	ldrh	r3, [r3, #18]
 8120f66:	461a      	mov	r2, r3
 8120f68:	68f8      	ldr	r0, [r7, #12]
 8120f6a:	f000 f893 	bl	8121094 <udp_bind>
 8120f6e:	4603      	mov	r3, r0
 8120f70:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8120f72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8120f76:	2b00      	cmp	r3, #0
 8120f78:	d002      	beq.n	8120f80 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8120f7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8120f7e:	e074      	b.n	812106a <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8120f80:	68bb      	ldr	r3, [r7, #8]
 8120f82:	891b      	ldrh	r3, [r3, #8]
 8120f84:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8120f88:	4293      	cmp	r3, r2
 8120f8a:	d902      	bls.n	8120f92 <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8120f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8120f90:	e06b      	b.n	812106a <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8120f92:	2108      	movs	r1, #8
 8120f94:	68b8      	ldr	r0, [r7, #8]
 8120f96:	f7f8 fc53 	bl	8119840 <pbuf_add_header>
 8120f9a:	4603      	mov	r3, r0
 8120f9c:	2b00      	cmp	r3, #0
 8120f9e:	d015      	beq.n	8120fcc <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8120fa0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120fa4:	2108      	movs	r1, #8
 8120fa6:	2022      	movs	r0, #34	@ 0x22
 8120fa8:	f7f8 f9fe 	bl	81193a8 <pbuf_alloc>
 8120fac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8120fae:	69fb      	ldr	r3, [r7, #28]
 8120fb0:	2b00      	cmp	r3, #0
 8120fb2:	d102      	bne.n	8120fba <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8120fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8120fb8:	e057      	b.n	812106a <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8120fba:	68bb      	ldr	r3, [r7, #8]
 8120fbc:	891b      	ldrh	r3, [r3, #8]
 8120fbe:	2b00      	cmp	r3, #0
 8120fc0:	d006      	beq.n	8120fd0 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8120fc2:	68b9      	ldr	r1, [r7, #8]
 8120fc4:	69f8      	ldr	r0, [r7, #28]
 8120fc6:	f7f8 fdf5 	bl	8119bb4 <pbuf_chain>
 8120fca:	e001      	b.n	8120fd0 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8120fcc:	68bb      	ldr	r3, [r7, #8]
 8120fce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8120fd0:	69fb      	ldr	r3, [r7, #28]
 8120fd2:	895b      	ldrh	r3, [r3, #10]
 8120fd4:	2b07      	cmp	r3, #7
 8120fd6:	d806      	bhi.n	8120fe6 <udp_sendto_if_src+0x122>
 8120fd8:	4b26      	ldr	r3, [pc, #152]	@ (8121074 <udp_sendto_if_src+0x1b0>)
 8120fda:	f240 320d 	movw	r2, #781	@ 0x30d
 8120fde:	492c      	ldr	r1, [pc, #176]	@ (8121090 <udp_sendto_if_src+0x1cc>)
 8120fe0:	4826      	ldr	r0, [pc, #152]	@ (812107c <udp_sendto_if_src+0x1b8>)
 8120fe2:	f000 fecf 	bl	8121d84 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8120fe6:	69fb      	ldr	r3, [r7, #28]
 8120fe8:	685b      	ldr	r3, [r3, #4]
 8120fea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8120fec:	68fb      	ldr	r3, [r7, #12]
 8120fee:	8a5b      	ldrh	r3, [r3, #18]
 8120ff0:	4618      	mov	r0, r3
 8120ff2:	f7f2 fe7b 	bl	8113cec <lwip_htons>
 8120ff6:	4603      	mov	r3, r0
 8120ff8:	461a      	mov	r2, r3
 8120ffa:	697b      	ldr	r3, [r7, #20]
 8120ffc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8120ffe:	887b      	ldrh	r3, [r7, #2]
 8121000:	4618      	mov	r0, r3
 8121002:	f7f2 fe73 	bl	8113cec <lwip_htons>
 8121006:	4603      	mov	r3, r0
 8121008:	461a      	mov	r2, r3
 812100a:	697b      	ldr	r3, [r7, #20]
 812100c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 812100e:	697b      	ldr	r3, [r7, #20]
 8121010:	2200      	movs	r2, #0
 8121012:	719a      	strb	r2, [r3, #6]
 8121014:	2200      	movs	r2, #0
 8121016:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8121018:	69fb      	ldr	r3, [r7, #28]
 812101a:	891b      	ldrh	r3, [r3, #8]
 812101c:	4618      	mov	r0, r3
 812101e:	f7f2 fe65 	bl	8113cec <lwip_htons>
 8121022:	4603      	mov	r3, r0
 8121024:	461a      	mov	r2, r3
 8121026:	697b      	ldr	r3, [r7, #20]
 8121028:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 812102a:	2311      	movs	r3, #17
 812102c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 812102e:	68fb      	ldr	r3, [r7, #12]
 8121030:	7adb      	ldrb	r3, [r3, #11]
 8121032:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8121034:	68fb      	ldr	r3, [r7, #12]
 8121036:	7a9b      	ldrb	r3, [r3, #10]
 8121038:	7cb9      	ldrb	r1, [r7, #18]
 812103a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 812103c:	9202      	str	r2, [sp, #8]
 812103e:	7cfa      	ldrb	r2, [r7, #19]
 8121040:	9201      	str	r2, [sp, #4]
 8121042:	9300      	str	r3, [sp, #0]
 8121044:	460b      	mov	r3, r1
 8121046:	687a      	ldr	r2, [r7, #4]
 8121048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 812104a:	69f8      	ldr	r0, [r7, #28]
 812104c:	f7f4 fb16 	bl	811567c <ip4_output_if_src>
 8121050:	4603      	mov	r3, r0
 8121052:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8121054:	69fa      	ldr	r2, [r7, #28]
 8121056:	68bb      	ldr	r3, [r7, #8]
 8121058:	429a      	cmp	r2, r3
 812105a:	d004      	beq.n	8121066 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 812105c:	69f8      	ldr	r0, [r7, #28]
 812105e:	f7f8 fc85 	bl	811996c <pbuf_free>
    q = NULL;
 8121062:	2300      	movs	r3, #0
 8121064:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8121066:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 812106a:	4618      	mov	r0, r3
 812106c:	3720      	adds	r7, #32
 812106e:	46bd      	mov	sp, r7
 8121070:	bd80      	pop	{r7, pc}
 8121072:	bf00      	nop
 8121074:	08128520 	.word	0x08128520
 8121078:	08128744 	.word	0x08128744
 812107c:	081285ac 	.word	0x081285ac
 8121080:	08128764 	.word	0x08128764
 8121084:	08128784 	.word	0x08128784
 8121088:	081287a8 	.word	0x081287a8
 812108c:	081287cc 	.word	0x081287cc
 8121090:	081287f0 	.word	0x081287f0

08121094 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8121094:	b580      	push	{r7, lr}
 8121096:	b086      	sub	sp, #24
 8121098:	af00      	add	r7, sp, #0
 812109a:	60f8      	str	r0, [r7, #12]
 812109c:	60b9      	str	r1, [r7, #8]
 812109e:	4613      	mov	r3, r2
 81210a0:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 81210a2:	f7ee fe8d 	bl	810fdc0 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 81210a6:	68bb      	ldr	r3, [r7, #8]
 81210a8:	2b00      	cmp	r3, #0
 81210aa:	d101      	bne.n	81210b0 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 81210ac:	4b39      	ldr	r3, [pc, #228]	@ (8121194 <udp_bind+0x100>)
 81210ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 81210b0:	68fb      	ldr	r3, [r7, #12]
 81210b2:	2b00      	cmp	r3, #0
 81210b4:	d109      	bne.n	81210ca <udp_bind+0x36>
 81210b6:	4b38      	ldr	r3, [pc, #224]	@ (8121198 <udp_bind+0x104>)
 81210b8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 81210bc:	4937      	ldr	r1, [pc, #220]	@ (812119c <udp_bind+0x108>)
 81210be:	4838      	ldr	r0, [pc, #224]	@ (81211a0 <udp_bind+0x10c>)
 81210c0:	f000 fe60 	bl	8121d84 <iprintf>
 81210c4:	f06f 030f 	mvn.w	r3, #15
 81210c8:	e060      	b.n	812118c <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 81210ca:	2300      	movs	r3, #0
 81210cc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81210ce:	4b35      	ldr	r3, [pc, #212]	@ (81211a4 <udp_bind+0x110>)
 81210d0:	681b      	ldr	r3, [r3, #0]
 81210d2:	617b      	str	r3, [r7, #20]
 81210d4:	e009      	b.n	81210ea <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 81210d6:	68fa      	ldr	r2, [r7, #12]
 81210d8:	697b      	ldr	r3, [r7, #20]
 81210da:	429a      	cmp	r2, r3
 81210dc:	d102      	bne.n	81210e4 <udp_bind+0x50>
      rebind = 1;
 81210de:	2301      	movs	r3, #1
 81210e0:	74fb      	strb	r3, [r7, #19]
      break;
 81210e2:	e005      	b.n	81210f0 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81210e4:	697b      	ldr	r3, [r7, #20]
 81210e6:	68db      	ldr	r3, [r3, #12]
 81210e8:	617b      	str	r3, [r7, #20]
 81210ea:	697b      	ldr	r3, [r7, #20]
 81210ec:	2b00      	cmp	r3, #0
 81210ee:	d1f2      	bne.n	81210d6 <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 81210f0:	88fb      	ldrh	r3, [r7, #6]
 81210f2:	2b00      	cmp	r3, #0
 81210f4:	d109      	bne.n	812110a <udp_bind+0x76>
    port = udp_new_port();
 81210f6:	f7ff fc2f 	bl	8120958 <udp_new_port>
 81210fa:	4603      	mov	r3, r0
 81210fc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 81210fe:	88fb      	ldrh	r3, [r7, #6]
 8121100:	2b00      	cmp	r3, #0
 8121102:	d12c      	bne.n	812115e <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8121104:	f06f 0307 	mvn.w	r3, #7
 8121108:	e040      	b.n	812118c <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 812110a:	4b26      	ldr	r3, [pc, #152]	@ (81211a4 <udp_bind+0x110>)
 812110c:	681b      	ldr	r3, [r3, #0]
 812110e:	617b      	str	r3, [r7, #20]
 8121110:	e022      	b.n	8121158 <udp_bind+0xc4>
      if (pcb != ipcb) {
 8121112:	68fa      	ldr	r2, [r7, #12]
 8121114:	697b      	ldr	r3, [r7, #20]
 8121116:	429a      	cmp	r2, r3
 8121118:	d01b      	beq.n	8121152 <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 812111a:	697b      	ldr	r3, [r7, #20]
 812111c:	8a5b      	ldrh	r3, [r3, #18]
 812111e:	88fa      	ldrh	r2, [r7, #6]
 8121120:	429a      	cmp	r2, r3
 8121122:	d116      	bne.n	8121152 <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8121124:	697b      	ldr	r3, [r7, #20]
 8121126:	681a      	ldr	r2, [r3, #0]
 8121128:	68bb      	ldr	r3, [r7, #8]
 812112a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 812112c:	429a      	cmp	r2, r3
 812112e:	d00d      	beq.n	812114c <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8121130:	68bb      	ldr	r3, [r7, #8]
 8121132:	2b00      	cmp	r3, #0
 8121134:	d00a      	beq.n	812114c <udp_bind+0xb8>
 8121136:	68bb      	ldr	r3, [r7, #8]
 8121138:	681b      	ldr	r3, [r3, #0]
 812113a:	2b00      	cmp	r3, #0
 812113c:	d006      	beq.n	812114c <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 812113e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8121140:	2b00      	cmp	r3, #0
 8121142:	d003      	beq.n	812114c <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 8121144:	697b      	ldr	r3, [r7, #20]
 8121146:	681b      	ldr	r3, [r3, #0]
 8121148:	2b00      	cmp	r3, #0
 812114a:	d102      	bne.n	8121152 <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 812114c:	f06f 0307 	mvn.w	r3, #7
 8121150:	e01c      	b.n	812118c <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8121152:	697b      	ldr	r3, [r7, #20]
 8121154:	68db      	ldr	r3, [r3, #12]
 8121156:	617b      	str	r3, [r7, #20]
 8121158:	697b      	ldr	r3, [r7, #20]
 812115a:	2b00      	cmp	r3, #0
 812115c:	d1d9      	bne.n	8121112 <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 812115e:	68bb      	ldr	r3, [r7, #8]
 8121160:	2b00      	cmp	r3, #0
 8121162:	d002      	beq.n	812116a <udp_bind+0xd6>
 8121164:	68bb      	ldr	r3, [r7, #8]
 8121166:	681b      	ldr	r3, [r3, #0]
 8121168:	e000      	b.n	812116c <udp_bind+0xd8>
 812116a:	2300      	movs	r3, #0
 812116c:	68fa      	ldr	r2, [r7, #12]
 812116e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8121170:	68fb      	ldr	r3, [r7, #12]
 8121172:	88fa      	ldrh	r2, [r7, #6]
 8121174:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8121176:	7cfb      	ldrb	r3, [r7, #19]
 8121178:	2b00      	cmp	r3, #0
 812117a:	d106      	bne.n	812118a <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 812117c:	4b09      	ldr	r3, [pc, #36]	@ (81211a4 <udp_bind+0x110>)
 812117e:	681a      	ldr	r2, [r3, #0]
 8121180:	68fb      	ldr	r3, [r7, #12]
 8121182:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8121184:	4a07      	ldr	r2, [pc, #28]	@ (81211a4 <udp_bind+0x110>)
 8121186:	68fb      	ldr	r3, [r7, #12]
 8121188:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 812118a:	2300      	movs	r3, #0
}
 812118c:	4618      	mov	r0, r3
 812118e:	3718      	adds	r7, #24
 8121190:	46bd      	mov	sp, r7
 8121192:	bd80      	pop	{r7, pc}
 8121194:	08128960 	.word	0x08128960
 8121198:	08128520 	.word	0x08128520
 812119c:	08128820 	.word	0x08128820
 81211a0:	081285ac 	.word	0x081285ac
 81211a4:	2401270c 	.word	0x2401270c

081211a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 81211a8:	b480      	push	{r7}
 81211aa:	b085      	sub	sp, #20
 81211ac:	af00      	add	r7, sp, #0
 81211ae:	6078      	str	r0, [r7, #4]
 81211b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 81211b2:	687b      	ldr	r3, [r7, #4]
 81211b4:	2b00      	cmp	r3, #0
 81211b6:	d01e      	beq.n	81211f6 <udp_netif_ip_addr_changed+0x4e>
 81211b8:	687b      	ldr	r3, [r7, #4]
 81211ba:	681b      	ldr	r3, [r3, #0]
 81211bc:	2b00      	cmp	r3, #0
 81211be:	d01a      	beq.n	81211f6 <udp_netif_ip_addr_changed+0x4e>
 81211c0:	683b      	ldr	r3, [r7, #0]
 81211c2:	2b00      	cmp	r3, #0
 81211c4:	d017      	beq.n	81211f6 <udp_netif_ip_addr_changed+0x4e>
 81211c6:	683b      	ldr	r3, [r7, #0]
 81211c8:	681b      	ldr	r3, [r3, #0]
 81211ca:	2b00      	cmp	r3, #0
 81211cc:	d013      	beq.n	81211f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 81211ce:	4b0d      	ldr	r3, [pc, #52]	@ (8121204 <udp_netif_ip_addr_changed+0x5c>)
 81211d0:	681b      	ldr	r3, [r3, #0]
 81211d2:	60fb      	str	r3, [r7, #12]
 81211d4:	e00c      	b.n	81211f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 81211d6:	68fb      	ldr	r3, [r7, #12]
 81211d8:	681a      	ldr	r2, [r3, #0]
 81211da:	687b      	ldr	r3, [r7, #4]
 81211dc:	681b      	ldr	r3, [r3, #0]
 81211de:	429a      	cmp	r2, r3
 81211e0:	d103      	bne.n	81211ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 81211e2:	683b      	ldr	r3, [r7, #0]
 81211e4:	681a      	ldr	r2, [r3, #0]
 81211e6:	68fb      	ldr	r3, [r7, #12]
 81211e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 81211ea:	68fb      	ldr	r3, [r7, #12]
 81211ec:	68db      	ldr	r3, [r3, #12]
 81211ee:	60fb      	str	r3, [r7, #12]
 81211f0:	68fb      	ldr	r3, [r7, #12]
 81211f2:	2b00      	cmp	r3, #0
 81211f4:	d1ef      	bne.n	81211d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 81211f6:	bf00      	nop
 81211f8:	3714      	adds	r7, #20
 81211fa:	46bd      	mov	sp, r7
 81211fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8121200:	4770      	bx	lr
 8121202:	bf00      	nop
 8121204:	2401270c 	.word	0x2401270c

08121208 <atoi>:
 8121208:	220a      	movs	r2, #10
 812120a:	2100      	movs	r1, #0
 812120c:	f000 b8b8 	b.w	8121380 <strtol>

08121210 <rand>:
 8121210:	4b16      	ldr	r3, [pc, #88]	@ (812126c <rand+0x5c>)
 8121212:	b510      	push	{r4, lr}
 8121214:	681c      	ldr	r4, [r3, #0]
 8121216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8121218:	b9b3      	cbnz	r3, 8121248 <rand+0x38>
 812121a:	2018      	movs	r0, #24
 812121c:	f001 fea8 	bl	8122f70 <malloc>
 8121220:	4602      	mov	r2, r0
 8121222:	6320      	str	r0, [r4, #48]	@ 0x30
 8121224:	b920      	cbnz	r0, 8121230 <rand+0x20>
 8121226:	4b12      	ldr	r3, [pc, #72]	@ (8121270 <rand+0x60>)
 8121228:	4812      	ldr	r0, [pc, #72]	@ (8121274 <rand+0x64>)
 812122a:	2152      	movs	r1, #82	@ 0x52
 812122c:	f001 f85a 	bl	81222e4 <__assert_func>
 8121230:	4911      	ldr	r1, [pc, #68]	@ (8121278 <rand+0x68>)
 8121232:	4b12      	ldr	r3, [pc, #72]	@ (812127c <rand+0x6c>)
 8121234:	e9c0 1300 	strd	r1, r3, [r0]
 8121238:	4b11      	ldr	r3, [pc, #68]	@ (8121280 <rand+0x70>)
 812123a:	6083      	str	r3, [r0, #8]
 812123c:	230b      	movs	r3, #11
 812123e:	8183      	strh	r3, [r0, #12]
 8121240:	2100      	movs	r1, #0
 8121242:	2001      	movs	r0, #1
 8121244:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8121248:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 812124a:	480e      	ldr	r0, [pc, #56]	@ (8121284 <rand+0x74>)
 812124c:	690b      	ldr	r3, [r1, #16]
 812124e:	694c      	ldr	r4, [r1, #20]
 8121250:	4a0d      	ldr	r2, [pc, #52]	@ (8121288 <rand+0x78>)
 8121252:	4358      	muls	r0, r3
 8121254:	fb02 0004 	mla	r0, r2, r4, r0
 8121258:	fba3 3202 	umull	r3, r2, r3, r2
 812125c:	3301      	adds	r3, #1
 812125e:	eb40 0002 	adc.w	r0, r0, r2
 8121262:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8121266:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 812126a:	bd10      	pop	{r4, pc}
 812126c:	24000060 	.word	0x24000060
 8121270:	08128a74 	.word	0x08128a74
 8121274:	08128a8b 	.word	0x08128a8b
 8121278:	abcd330e 	.word	0xabcd330e
 812127c:	e66d1234 	.word	0xe66d1234
 8121280:	0005deec 	.word	0x0005deec
 8121284:	5851f42d 	.word	0x5851f42d
 8121288:	4c957f2d 	.word	0x4c957f2d

0812128c <_strtol_l.constprop.0>:
 812128c:	2b24      	cmp	r3, #36	@ 0x24
 812128e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8121292:	4686      	mov	lr, r0
 8121294:	4690      	mov	r8, r2
 8121296:	d801      	bhi.n	812129c <_strtol_l.constprop.0+0x10>
 8121298:	2b01      	cmp	r3, #1
 812129a:	d106      	bne.n	81212aa <_strtol_l.constprop.0+0x1e>
 812129c:	f000 ffe6 	bl	812226c <__errno>
 81212a0:	2316      	movs	r3, #22
 81212a2:	6003      	str	r3, [r0, #0]
 81212a4:	2000      	movs	r0, #0
 81212a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81212aa:	4834      	ldr	r0, [pc, #208]	@ (812137c <_strtol_l.constprop.0+0xf0>)
 81212ac:	460d      	mov	r5, r1
 81212ae:	462a      	mov	r2, r5
 81212b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 81212b4:	5d06      	ldrb	r6, [r0, r4]
 81212b6:	f016 0608 	ands.w	r6, r6, #8
 81212ba:	d1f8      	bne.n	81212ae <_strtol_l.constprop.0+0x22>
 81212bc:	2c2d      	cmp	r4, #45	@ 0x2d
 81212be:	d12d      	bne.n	812131c <_strtol_l.constprop.0+0x90>
 81212c0:	782c      	ldrb	r4, [r5, #0]
 81212c2:	2601      	movs	r6, #1
 81212c4:	1c95      	adds	r5, r2, #2
 81212c6:	f033 0210 	bics.w	r2, r3, #16
 81212ca:	d109      	bne.n	81212e0 <_strtol_l.constprop.0+0x54>
 81212cc:	2c30      	cmp	r4, #48	@ 0x30
 81212ce:	d12a      	bne.n	8121326 <_strtol_l.constprop.0+0x9a>
 81212d0:	782a      	ldrb	r2, [r5, #0]
 81212d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 81212d6:	2a58      	cmp	r2, #88	@ 0x58
 81212d8:	d125      	bne.n	8121326 <_strtol_l.constprop.0+0x9a>
 81212da:	786c      	ldrb	r4, [r5, #1]
 81212dc:	2310      	movs	r3, #16
 81212de:	3502      	adds	r5, #2
 81212e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 81212e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 81212e8:	2200      	movs	r2, #0
 81212ea:	fbbc f9f3 	udiv	r9, ip, r3
 81212ee:	4610      	mov	r0, r2
 81212f0:	fb03 ca19 	mls	sl, r3, r9, ip
 81212f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 81212f8:	2f09      	cmp	r7, #9
 81212fa:	d81b      	bhi.n	8121334 <_strtol_l.constprop.0+0xa8>
 81212fc:	463c      	mov	r4, r7
 81212fe:	42a3      	cmp	r3, r4
 8121300:	dd27      	ble.n	8121352 <_strtol_l.constprop.0+0xc6>
 8121302:	1c57      	adds	r7, r2, #1
 8121304:	d007      	beq.n	8121316 <_strtol_l.constprop.0+0x8a>
 8121306:	4581      	cmp	r9, r0
 8121308:	d320      	bcc.n	812134c <_strtol_l.constprop.0+0xc0>
 812130a:	d101      	bne.n	8121310 <_strtol_l.constprop.0+0x84>
 812130c:	45a2      	cmp	sl, r4
 812130e:	db1d      	blt.n	812134c <_strtol_l.constprop.0+0xc0>
 8121310:	fb00 4003 	mla	r0, r0, r3, r4
 8121314:	2201      	movs	r2, #1
 8121316:	f815 4b01 	ldrb.w	r4, [r5], #1
 812131a:	e7eb      	b.n	81212f4 <_strtol_l.constprop.0+0x68>
 812131c:	2c2b      	cmp	r4, #43	@ 0x2b
 812131e:	bf04      	itt	eq
 8121320:	782c      	ldrbeq	r4, [r5, #0]
 8121322:	1c95      	addeq	r5, r2, #2
 8121324:	e7cf      	b.n	81212c6 <_strtol_l.constprop.0+0x3a>
 8121326:	2b00      	cmp	r3, #0
 8121328:	d1da      	bne.n	81212e0 <_strtol_l.constprop.0+0x54>
 812132a:	2c30      	cmp	r4, #48	@ 0x30
 812132c:	bf0c      	ite	eq
 812132e:	2308      	moveq	r3, #8
 8121330:	230a      	movne	r3, #10
 8121332:	e7d5      	b.n	81212e0 <_strtol_l.constprop.0+0x54>
 8121334:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8121338:	2f19      	cmp	r7, #25
 812133a:	d801      	bhi.n	8121340 <_strtol_l.constprop.0+0xb4>
 812133c:	3c37      	subs	r4, #55	@ 0x37
 812133e:	e7de      	b.n	81212fe <_strtol_l.constprop.0+0x72>
 8121340:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8121344:	2f19      	cmp	r7, #25
 8121346:	d804      	bhi.n	8121352 <_strtol_l.constprop.0+0xc6>
 8121348:	3c57      	subs	r4, #87	@ 0x57
 812134a:	e7d8      	b.n	81212fe <_strtol_l.constprop.0+0x72>
 812134c:	f04f 32ff 	mov.w	r2, #4294967295
 8121350:	e7e1      	b.n	8121316 <_strtol_l.constprop.0+0x8a>
 8121352:	1c53      	adds	r3, r2, #1
 8121354:	d108      	bne.n	8121368 <_strtol_l.constprop.0+0xdc>
 8121356:	2322      	movs	r3, #34	@ 0x22
 8121358:	f8ce 3000 	str.w	r3, [lr]
 812135c:	4660      	mov	r0, ip
 812135e:	f1b8 0f00 	cmp.w	r8, #0
 8121362:	d0a0      	beq.n	81212a6 <_strtol_l.constprop.0+0x1a>
 8121364:	1e69      	subs	r1, r5, #1
 8121366:	e006      	b.n	8121376 <_strtol_l.constprop.0+0xea>
 8121368:	b106      	cbz	r6, 812136c <_strtol_l.constprop.0+0xe0>
 812136a:	4240      	negs	r0, r0
 812136c:	f1b8 0f00 	cmp.w	r8, #0
 8121370:	d099      	beq.n	81212a6 <_strtol_l.constprop.0+0x1a>
 8121372:	2a00      	cmp	r2, #0
 8121374:	d1f6      	bne.n	8121364 <_strtol_l.constprop.0+0xd8>
 8121376:	f8c8 1000 	str.w	r1, [r8]
 812137a:	e794      	b.n	81212a6 <_strtol_l.constprop.0+0x1a>
 812137c:	08128ae4 	.word	0x08128ae4

08121380 <strtol>:
 8121380:	4613      	mov	r3, r2
 8121382:	460a      	mov	r2, r1
 8121384:	4601      	mov	r1, r0
 8121386:	4802      	ldr	r0, [pc, #8]	@ (8121390 <strtol+0x10>)
 8121388:	6800      	ldr	r0, [r0, #0]
 812138a:	f7ff bf7f 	b.w	812128c <_strtol_l.constprop.0>
 812138e:	bf00      	nop
 8121390:	24000060 	.word	0x24000060

08121394 <__cvt>:
 8121394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8121396:	ed2d 8b02 	vpush	{d8}
 812139a:	eeb0 8b40 	vmov.f64	d8, d0
 812139e:	b085      	sub	sp, #20
 81213a0:	4617      	mov	r7, r2
 81213a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 81213a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 81213a6:	ee18 2a90 	vmov	r2, s17
 81213aa:	f025 0520 	bic.w	r5, r5, #32
 81213ae:	2a00      	cmp	r2, #0
 81213b0:	bfb6      	itet	lt
 81213b2:	222d      	movlt	r2, #45	@ 0x2d
 81213b4:	2200      	movge	r2, #0
 81213b6:	eeb1 8b40 	vneglt.f64	d8, d0
 81213ba:	2d46      	cmp	r5, #70	@ 0x46
 81213bc:	460c      	mov	r4, r1
 81213be:	701a      	strb	r2, [r3, #0]
 81213c0:	d004      	beq.n	81213cc <__cvt+0x38>
 81213c2:	2d45      	cmp	r5, #69	@ 0x45
 81213c4:	d100      	bne.n	81213c8 <__cvt+0x34>
 81213c6:	3401      	adds	r4, #1
 81213c8:	2102      	movs	r1, #2
 81213ca:	e000      	b.n	81213ce <__cvt+0x3a>
 81213cc:	2103      	movs	r1, #3
 81213ce:	ab03      	add	r3, sp, #12
 81213d0:	9301      	str	r3, [sp, #4]
 81213d2:	ab02      	add	r3, sp, #8
 81213d4:	9300      	str	r3, [sp, #0]
 81213d6:	4622      	mov	r2, r4
 81213d8:	4633      	mov	r3, r6
 81213da:	eeb0 0b48 	vmov.f64	d0, d8
 81213de:	f001 f827 	bl	8122430 <_dtoa_r>
 81213e2:	2d47      	cmp	r5, #71	@ 0x47
 81213e4:	d114      	bne.n	8121410 <__cvt+0x7c>
 81213e6:	07fb      	lsls	r3, r7, #31
 81213e8:	d50a      	bpl.n	8121400 <__cvt+0x6c>
 81213ea:	1902      	adds	r2, r0, r4
 81213ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 81213f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81213f4:	bf08      	it	eq
 81213f6:	9203      	streq	r2, [sp, #12]
 81213f8:	2130      	movs	r1, #48	@ 0x30
 81213fa:	9b03      	ldr	r3, [sp, #12]
 81213fc:	4293      	cmp	r3, r2
 81213fe:	d319      	bcc.n	8121434 <__cvt+0xa0>
 8121400:	9b03      	ldr	r3, [sp, #12]
 8121402:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8121404:	1a1b      	subs	r3, r3, r0
 8121406:	6013      	str	r3, [r2, #0]
 8121408:	b005      	add	sp, #20
 812140a:	ecbd 8b02 	vpop	{d8}
 812140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8121410:	2d46      	cmp	r5, #70	@ 0x46
 8121412:	eb00 0204 	add.w	r2, r0, r4
 8121416:	d1e9      	bne.n	81213ec <__cvt+0x58>
 8121418:	7803      	ldrb	r3, [r0, #0]
 812141a:	2b30      	cmp	r3, #48	@ 0x30
 812141c:	d107      	bne.n	812142e <__cvt+0x9a>
 812141e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8121422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8121426:	bf1c      	itt	ne
 8121428:	f1c4 0401 	rsbne	r4, r4, #1
 812142c:	6034      	strne	r4, [r6, #0]
 812142e:	6833      	ldr	r3, [r6, #0]
 8121430:	441a      	add	r2, r3
 8121432:	e7db      	b.n	81213ec <__cvt+0x58>
 8121434:	1c5c      	adds	r4, r3, #1
 8121436:	9403      	str	r4, [sp, #12]
 8121438:	7019      	strb	r1, [r3, #0]
 812143a:	e7de      	b.n	81213fa <__cvt+0x66>

0812143c <__exponent>:
 812143c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 812143e:	2900      	cmp	r1, #0
 8121440:	bfba      	itte	lt
 8121442:	4249      	neglt	r1, r1
 8121444:	232d      	movlt	r3, #45	@ 0x2d
 8121446:	232b      	movge	r3, #43	@ 0x2b
 8121448:	2909      	cmp	r1, #9
 812144a:	7002      	strb	r2, [r0, #0]
 812144c:	7043      	strb	r3, [r0, #1]
 812144e:	dd29      	ble.n	81214a4 <__exponent+0x68>
 8121450:	f10d 0307 	add.w	r3, sp, #7
 8121454:	461d      	mov	r5, r3
 8121456:	270a      	movs	r7, #10
 8121458:	461a      	mov	r2, r3
 812145a:	fbb1 f6f7 	udiv	r6, r1, r7
 812145e:	fb07 1416 	mls	r4, r7, r6, r1
 8121462:	3430      	adds	r4, #48	@ 0x30
 8121464:	f802 4c01 	strb.w	r4, [r2, #-1]
 8121468:	460c      	mov	r4, r1
 812146a:	2c63      	cmp	r4, #99	@ 0x63
 812146c:	f103 33ff 	add.w	r3, r3, #4294967295
 8121470:	4631      	mov	r1, r6
 8121472:	dcf1      	bgt.n	8121458 <__exponent+0x1c>
 8121474:	3130      	adds	r1, #48	@ 0x30
 8121476:	1e94      	subs	r4, r2, #2
 8121478:	f803 1c01 	strb.w	r1, [r3, #-1]
 812147c:	1c41      	adds	r1, r0, #1
 812147e:	4623      	mov	r3, r4
 8121480:	42ab      	cmp	r3, r5
 8121482:	d30a      	bcc.n	812149a <__exponent+0x5e>
 8121484:	f10d 0309 	add.w	r3, sp, #9
 8121488:	1a9b      	subs	r3, r3, r2
 812148a:	42ac      	cmp	r4, r5
 812148c:	bf88      	it	hi
 812148e:	2300      	movhi	r3, #0
 8121490:	3302      	adds	r3, #2
 8121492:	4403      	add	r3, r0
 8121494:	1a18      	subs	r0, r3, r0
 8121496:	b003      	add	sp, #12
 8121498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 812149a:	f813 6b01 	ldrb.w	r6, [r3], #1
 812149e:	f801 6f01 	strb.w	r6, [r1, #1]!
 81214a2:	e7ed      	b.n	8121480 <__exponent+0x44>
 81214a4:	2330      	movs	r3, #48	@ 0x30
 81214a6:	3130      	adds	r1, #48	@ 0x30
 81214a8:	7083      	strb	r3, [r0, #2]
 81214aa:	70c1      	strb	r1, [r0, #3]
 81214ac:	1d03      	adds	r3, r0, #4
 81214ae:	e7f1      	b.n	8121494 <__exponent+0x58>

081214b0 <_printf_float>:
 81214b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81214b4:	b08d      	sub	sp, #52	@ 0x34
 81214b6:	460c      	mov	r4, r1
 81214b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81214bc:	4616      	mov	r6, r2
 81214be:	461f      	mov	r7, r3
 81214c0:	4605      	mov	r5, r0
 81214c2:	f000 fe33 	bl	812212c <_localeconv_r>
 81214c6:	f8d0 b000 	ldr.w	fp, [r0]
 81214ca:	4658      	mov	r0, fp
 81214cc:	f7de ff68 	bl	81003a0 <strlen>
 81214d0:	2300      	movs	r3, #0
 81214d2:	930a      	str	r3, [sp, #40]	@ 0x28
 81214d4:	f8d8 3000 	ldr.w	r3, [r8]
 81214d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 81214dc:	6822      	ldr	r2, [r4, #0]
 81214de:	9005      	str	r0, [sp, #20]
 81214e0:	3307      	adds	r3, #7
 81214e2:	f023 0307 	bic.w	r3, r3, #7
 81214e6:	f103 0108 	add.w	r1, r3, #8
 81214ea:	f8c8 1000 	str.w	r1, [r8]
 81214ee:	ed93 0b00 	vldr	d0, [r3]
 81214f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8121750 <_printf_float+0x2a0>
 81214f6:	eeb0 7bc0 	vabs.f64	d7, d0
 81214fa:	eeb4 7b46 	vcmp.f64	d7, d6
 81214fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8121502:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8121506:	dd24      	ble.n	8121552 <_printf_float+0xa2>
 8121508:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 812150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8121510:	d502      	bpl.n	8121518 <_printf_float+0x68>
 8121512:	232d      	movs	r3, #45	@ 0x2d
 8121514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8121518:	498f      	ldr	r1, [pc, #572]	@ (8121758 <_printf_float+0x2a8>)
 812151a:	4b90      	ldr	r3, [pc, #576]	@ (812175c <_printf_float+0x2ac>)
 812151c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8121520:	bf94      	ite	ls
 8121522:	4688      	movls	r8, r1
 8121524:	4698      	movhi	r8, r3
 8121526:	f022 0204 	bic.w	r2, r2, #4
 812152a:	2303      	movs	r3, #3
 812152c:	6123      	str	r3, [r4, #16]
 812152e:	6022      	str	r2, [r4, #0]
 8121530:	f04f 0a00 	mov.w	sl, #0
 8121534:	9700      	str	r7, [sp, #0]
 8121536:	4633      	mov	r3, r6
 8121538:	aa0b      	add	r2, sp, #44	@ 0x2c
 812153a:	4621      	mov	r1, r4
 812153c:	4628      	mov	r0, r5
 812153e:	f000 f9d1 	bl	81218e4 <_printf_common>
 8121542:	3001      	adds	r0, #1
 8121544:	f040 8089 	bne.w	812165a <_printf_float+0x1aa>
 8121548:	f04f 30ff 	mov.w	r0, #4294967295
 812154c:	b00d      	add	sp, #52	@ 0x34
 812154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8121552:	eeb4 0b40 	vcmp.f64	d0, d0
 8121556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 812155a:	d709      	bvc.n	8121570 <_printf_float+0xc0>
 812155c:	ee10 3a90 	vmov	r3, s1
 8121560:	2b00      	cmp	r3, #0
 8121562:	bfbc      	itt	lt
 8121564:	232d      	movlt	r3, #45	@ 0x2d
 8121566:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 812156a:	497d      	ldr	r1, [pc, #500]	@ (8121760 <_printf_float+0x2b0>)
 812156c:	4b7d      	ldr	r3, [pc, #500]	@ (8121764 <_printf_float+0x2b4>)
 812156e:	e7d5      	b.n	812151c <_printf_float+0x6c>
 8121570:	6863      	ldr	r3, [r4, #4]
 8121572:	1c59      	adds	r1, r3, #1
 8121574:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8121578:	d139      	bne.n	81215ee <_printf_float+0x13e>
 812157a:	2306      	movs	r3, #6
 812157c:	6063      	str	r3, [r4, #4]
 812157e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8121582:	2300      	movs	r3, #0
 8121584:	6022      	str	r2, [r4, #0]
 8121586:	9303      	str	r3, [sp, #12]
 8121588:	ab0a      	add	r3, sp, #40	@ 0x28
 812158a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 812158e:	ab09      	add	r3, sp, #36	@ 0x24
 8121590:	9300      	str	r3, [sp, #0]
 8121592:	6861      	ldr	r1, [r4, #4]
 8121594:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8121598:	4628      	mov	r0, r5
 812159a:	f7ff fefb 	bl	8121394 <__cvt>
 812159e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81215a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81215a4:	4680      	mov	r8, r0
 81215a6:	d129      	bne.n	81215fc <_printf_float+0x14c>
 81215a8:	1cc8      	adds	r0, r1, #3
 81215aa:	db02      	blt.n	81215b2 <_printf_float+0x102>
 81215ac:	6863      	ldr	r3, [r4, #4]
 81215ae:	4299      	cmp	r1, r3
 81215b0:	dd41      	ble.n	8121636 <_printf_float+0x186>
 81215b2:	f1a9 0902 	sub.w	r9, r9, #2
 81215b6:	fa5f f989 	uxtb.w	r9, r9
 81215ba:	3901      	subs	r1, #1
 81215bc:	464a      	mov	r2, r9
 81215be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 81215c2:	9109      	str	r1, [sp, #36]	@ 0x24
 81215c4:	f7ff ff3a 	bl	812143c <__exponent>
 81215c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 81215ca:	1813      	adds	r3, r2, r0
 81215cc:	2a01      	cmp	r2, #1
 81215ce:	4682      	mov	sl, r0
 81215d0:	6123      	str	r3, [r4, #16]
 81215d2:	dc02      	bgt.n	81215da <_printf_float+0x12a>
 81215d4:	6822      	ldr	r2, [r4, #0]
 81215d6:	07d2      	lsls	r2, r2, #31
 81215d8:	d501      	bpl.n	81215de <_printf_float+0x12e>
 81215da:	3301      	adds	r3, #1
 81215dc:	6123      	str	r3, [r4, #16]
 81215de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 81215e2:	2b00      	cmp	r3, #0
 81215e4:	d0a6      	beq.n	8121534 <_printf_float+0x84>
 81215e6:	232d      	movs	r3, #45	@ 0x2d
 81215e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81215ec:	e7a2      	b.n	8121534 <_printf_float+0x84>
 81215ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81215f2:	d1c4      	bne.n	812157e <_printf_float+0xce>
 81215f4:	2b00      	cmp	r3, #0
 81215f6:	d1c2      	bne.n	812157e <_printf_float+0xce>
 81215f8:	2301      	movs	r3, #1
 81215fa:	e7bf      	b.n	812157c <_printf_float+0xcc>
 81215fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8121600:	d9db      	bls.n	81215ba <_printf_float+0x10a>
 8121602:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8121606:	d118      	bne.n	812163a <_printf_float+0x18a>
 8121608:	2900      	cmp	r1, #0
 812160a:	6863      	ldr	r3, [r4, #4]
 812160c:	dd0b      	ble.n	8121626 <_printf_float+0x176>
 812160e:	6121      	str	r1, [r4, #16]
 8121610:	b913      	cbnz	r3, 8121618 <_printf_float+0x168>
 8121612:	6822      	ldr	r2, [r4, #0]
 8121614:	07d0      	lsls	r0, r2, #31
 8121616:	d502      	bpl.n	812161e <_printf_float+0x16e>
 8121618:	3301      	adds	r3, #1
 812161a:	440b      	add	r3, r1
 812161c:	6123      	str	r3, [r4, #16]
 812161e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8121620:	f04f 0a00 	mov.w	sl, #0
 8121624:	e7db      	b.n	81215de <_printf_float+0x12e>
 8121626:	b913      	cbnz	r3, 812162e <_printf_float+0x17e>
 8121628:	6822      	ldr	r2, [r4, #0]
 812162a:	07d2      	lsls	r2, r2, #31
 812162c:	d501      	bpl.n	8121632 <_printf_float+0x182>
 812162e:	3302      	adds	r3, #2
 8121630:	e7f4      	b.n	812161c <_printf_float+0x16c>
 8121632:	2301      	movs	r3, #1
 8121634:	e7f2      	b.n	812161c <_printf_float+0x16c>
 8121636:	f04f 0967 	mov.w	r9, #103	@ 0x67
 812163a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 812163c:	4299      	cmp	r1, r3
 812163e:	db05      	blt.n	812164c <_printf_float+0x19c>
 8121640:	6823      	ldr	r3, [r4, #0]
 8121642:	6121      	str	r1, [r4, #16]
 8121644:	07d8      	lsls	r0, r3, #31
 8121646:	d5ea      	bpl.n	812161e <_printf_float+0x16e>
 8121648:	1c4b      	adds	r3, r1, #1
 812164a:	e7e7      	b.n	812161c <_printf_float+0x16c>
 812164c:	2900      	cmp	r1, #0
 812164e:	bfd4      	ite	le
 8121650:	f1c1 0202 	rsble	r2, r1, #2
 8121654:	2201      	movgt	r2, #1
 8121656:	4413      	add	r3, r2
 8121658:	e7e0      	b.n	812161c <_printf_float+0x16c>
 812165a:	6823      	ldr	r3, [r4, #0]
 812165c:	055a      	lsls	r2, r3, #21
 812165e:	d407      	bmi.n	8121670 <_printf_float+0x1c0>
 8121660:	6923      	ldr	r3, [r4, #16]
 8121662:	4642      	mov	r2, r8
 8121664:	4631      	mov	r1, r6
 8121666:	4628      	mov	r0, r5
 8121668:	47b8      	blx	r7
 812166a:	3001      	adds	r0, #1
 812166c:	d12a      	bne.n	81216c4 <_printf_float+0x214>
 812166e:	e76b      	b.n	8121548 <_printf_float+0x98>
 8121670:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8121674:	f240 80e0 	bls.w	8121838 <_printf_float+0x388>
 8121678:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 812167c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8121680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8121684:	d133      	bne.n	81216ee <_printf_float+0x23e>
 8121686:	4a38      	ldr	r2, [pc, #224]	@ (8121768 <_printf_float+0x2b8>)
 8121688:	2301      	movs	r3, #1
 812168a:	4631      	mov	r1, r6
 812168c:	4628      	mov	r0, r5
 812168e:	47b8      	blx	r7
 8121690:	3001      	adds	r0, #1
 8121692:	f43f af59 	beq.w	8121548 <_printf_float+0x98>
 8121696:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 812169a:	4543      	cmp	r3, r8
 812169c:	db02      	blt.n	81216a4 <_printf_float+0x1f4>
 812169e:	6823      	ldr	r3, [r4, #0]
 81216a0:	07d8      	lsls	r0, r3, #31
 81216a2:	d50f      	bpl.n	81216c4 <_printf_float+0x214>
 81216a4:	9b05      	ldr	r3, [sp, #20]
 81216a6:	465a      	mov	r2, fp
 81216a8:	4631      	mov	r1, r6
 81216aa:	4628      	mov	r0, r5
 81216ac:	47b8      	blx	r7
 81216ae:	3001      	adds	r0, #1
 81216b0:	f43f af4a 	beq.w	8121548 <_printf_float+0x98>
 81216b4:	f04f 0900 	mov.w	r9, #0
 81216b8:	f108 38ff 	add.w	r8, r8, #4294967295
 81216bc:	f104 0a1a 	add.w	sl, r4, #26
 81216c0:	45c8      	cmp	r8, r9
 81216c2:	dc09      	bgt.n	81216d8 <_printf_float+0x228>
 81216c4:	6823      	ldr	r3, [r4, #0]
 81216c6:	079b      	lsls	r3, r3, #30
 81216c8:	f100 8107 	bmi.w	81218da <_printf_float+0x42a>
 81216cc:	68e0      	ldr	r0, [r4, #12]
 81216ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81216d0:	4298      	cmp	r0, r3
 81216d2:	bfb8      	it	lt
 81216d4:	4618      	movlt	r0, r3
 81216d6:	e739      	b.n	812154c <_printf_float+0x9c>
 81216d8:	2301      	movs	r3, #1
 81216da:	4652      	mov	r2, sl
 81216dc:	4631      	mov	r1, r6
 81216de:	4628      	mov	r0, r5
 81216e0:	47b8      	blx	r7
 81216e2:	3001      	adds	r0, #1
 81216e4:	f43f af30 	beq.w	8121548 <_printf_float+0x98>
 81216e8:	f109 0901 	add.w	r9, r9, #1
 81216ec:	e7e8      	b.n	81216c0 <_printf_float+0x210>
 81216ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81216f0:	2b00      	cmp	r3, #0
 81216f2:	dc3b      	bgt.n	812176c <_printf_float+0x2bc>
 81216f4:	4a1c      	ldr	r2, [pc, #112]	@ (8121768 <_printf_float+0x2b8>)
 81216f6:	2301      	movs	r3, #1
 81216f8:	4631      	mov	r1, r6
 81216fa:	4628      	mov	r0, r5
 81216fc:	47b8      	blx	r7
 81216fe:	3001      	adds	r0, #1
 8121700:	f43f af22 	beq.w	8121548 <_printf_float+0x98>
 8121704:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8121708:	ea59 0303 	orrs.w	r3, r9, r3
 812170c:	d102      	bne.n	8121714 <_printf_float+0x264>
 812170e:	6823      	ldr	r3, [r4, #0]
 8121710:	07d9      	lsls	r1, r3, #31
 8121712:	d5d7      	bpl.n	81216c4 <_printf_float+0x214>
 8121714:	9b05      	ldr	r3, [sp, #20]
 8121716:	465a      	mov	r2, fp
 8121718:	4631      	mov	r1, r6
 812171a:	4628      	mov	r0, r5
 812171c:	47b8      	blx	r7
 812171e:	3001      	adds	r0, #1
 8121720:	f43f af12 	beq.w	8121548 <_printf_float+0x98>
 8121724:	f04f 0a00 	mov.w	sl, #0
 8121728:	f104 0b1a 	add.w	fp, r4, #26
 812172c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 812172e:	425b      	negs	r3, r3
 8121730:	4553      	cmp	r3, sl
 8121732:	dc01      	bgt.n	8121738 <_printf_float+0x288>
 8121734:	464b      	mov	r3, r9
 8121736:	e794      	b.n	8121662 <_printf_float+0x1b2>
 8121738:	2301      	movs	r3, #1
 812173a:	465a      	mov	r2, fp
 812173c:	4631      	mov	r1, r6
 812173e:	4628      	mov	r0, r5
 8121740:	47b8      	blx	r7
 8121742:	3001      	adds	r0, #1
 8121744:	f43f af00 	beq.w	8121548 <_printf_float+0x98>
 8121748:	f10a 0a01 	add.w	sl, sl, #1
 812174c:	e7ee      	b.n	812172c <_printf_float+0x27c>
 812174e:	bf00      	nop
 8121750:	ffffffff 	.word	0xffffffff
 8121754:	7fefffff 	.word	0x7fefffff
 8121758:	08128be4 	.word	0x08128be4
 812175c:	08128be8 	.word	0x08128be8
 8121760:	08128bec 	.word	0x08128bec
 8121764:	08128bf0 	.word	0x08128bf0
 8121768:	08128bf4 	.word	0x08128bf4
 812176c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 812176e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8121772:	4553      	cmp	r3, sl
 8121774:	bfa8      	it	ge
 8121776:	4653      	movge	r3, sl
 8121778:	2b00      	cmp	r3, #0
 812177a:	4699      	mov	r9, r3
 812177c:	dc37      	bgt.n	81217ee <_printf_float+0x33e>
 812177e:	2300      	movs	r3, #0
 8121780:	9307      	str	r3, [sp, #28]
 8121782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8121786:	f104 021a 	add.w	r2, r4, #26
 812178a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 812178c:	9907      	ldr	r1, [sp, #28]
 812178e:	9306      	str	r3, [sp, #24]
 8121790:	eba3 0309 	sub.w	r3, r3, r9
 8121794:	428b      	cmp	r3, r1
 8121796:	dc31      	bgt.n	81217fc <_printf_float+0x34c>
 8121798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 812179a:	459a      	cmp	sl, r3
 812179c:	dc3b      	bgt.n	8121816 <_printf_float+0x366>
 812179e:	6823      	ldr	r3, [r4, #0]
 81217a0:	07da      	lsls	r2, r3, #31
 81217a2:	d438      	bmi.n	8121816 <_printf_float+0x366>
 81217a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81217a6:	ebaa 0903 	sub.w	r9, sl, r3
 81217aa:	9b06      	ldr	r3, [sp, #24]
 81217ac:	ebaa 0303 	sub.w	r3, sl, r3
 81217b0:	4599      	cmp	r9, r3
 81217b2:	bfa8      	it	ge
 81217b4:	4699      	movge	r9, r3
 81217b6:	f1b9 0f00 	cmp.w	r9, #0
 81217ba:	dc34      	bgt.n	8121826 <_printf_float+0x376>
 81217bc:	f04f 0800 	mov.w	r8, #0
 81217c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81217c4:	f104 0b1a 	add.w	fp, r4, #26
 81217c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81217ca:	ebaa 0303 	sub.w	r3, sl, r3
 81217ce:	eba3 0309 	sub.w	r3, r3, r9
 81217d2:	4543      	cmp	r3, r8
 81217d4:	f77f af76 	ble.w	81216c4 <_printf_float+0x214>
 81217d8:	2301      	movs	r3, #1
 81217da:	465a      	mov	r2, fp
 81217dc:	4631      	mov	r1, r6
 81217de:	4628      	mov	r0, r5
 81217e0:	47b8      	blx	r7
 81217e2:	3001      	adds	r0, #1
 81217e4:	f43f aeb0 	beq.w	8121548 <_printf_float+0x98>
 81217e8:	f108 0801 	add.w	r8, r8, #1
 81217ec:	e7ec      	b.n	81217c8 <_printf_float+0x318>
 81217ee:	4642      	mov	r2, r8
 81217f0:	4631      	mov	r1, r6
 81217f2:	4628      	mov	r0, r5
 81217f4:	47b8      	blx	r7
 81217f6:	3001      	adds	r0, #1
 81217f8:	d1c1      	bne.n	812177e <_printf_float+0x2ce>
 81217fa:	e6a5      	b.n	8121548 <_printf_float+0x98>
 81217fc:	2301      	movs	r3, #1
 81217fe:	4631      	mov	r1, r6
 8121800:	4628      	mov	r0, r5
 8121802:	9206      	str	r2, [sp, #24]
 8121804:	47b8      	blx	r7
 8121806:	3001      	adds	r0, #1
 8121808:	f43f ae9e 	beq.w	8121548 <_printf_float+0x98>
 812180c:	9b07      	ldr	r3, [sp, #28]
 812180e:	9a06      	ldr	r2, [sp, #24]
 8121810:	3301      	adds	r3, #1
 8121812:	9307      	str	r3, [sp, #28]
 8121814:	e7b9      	b.n	812178a <_printf_float+0x2da>
 8121816:	9b05      	ldr	r3, [sp, #20]
 8121818:	465a      	mov	r2, fp
 812181a:	4631      	mov	r1, r6
 812181c:	4628      	mov	r0, r5
 812181e:	47b8      	blx	r7
 8121820:	3001      	adds	r0, #1
 8121822:	d1bf      	bne.n	81217a4 <_printf_float+0x2f4>
 8121824:	e690      	b.n	8121548 <_printf_float+0x98>
 8121826:	9a06      	ldr	r2, [sp, #24]
 8121828:	464b      	mov	r3, r9
 812182a:	4442      	add	r2, r8
 812182c:	4631      	mov	r1, r6
 812182e:	4628      	mov	r0, r5
 8121830:	47b8      	blx	r7
 8121832:	3001      	adds	r0, #1
 8121834:	d1c2      	bne.n	81217bc <_printf_float+0x30c>
 8121836:	e687      	b.n	8121548 <_printf_float+0x98>
 8121838:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 812183c:	f1b9 0f01 	cmp.w	r9, #1
 8121840:	dc01      	bgt.n	8121846 <_printf_float+0x396>
 8121842:	07db      	lsls	r3, r3, #31
 8121844:	d536      	bpl.n	81218b4 <_printf_float+0x404>
 8121846:	2301      	movs	r3, #1
 8121848:	4642      	mov	r2, r8
 812184a:	4631      	mov	r1, r6
 812184c:	4628      	mov	r0, r5
 812184e:	47b8      	blx	r7
 8121850:	3001      	adds	r0, #1
 8121852:	f43f ae79 	beq.w	8121548 <_printf_float+0x98>
 8121856:	9b05      	ldr	r3, [sp, #20]
 8121858:	465a      	mov	r2, fp
 812185a:	4631      	mov	r1, r6
 812185c:	4628      	mov	r0, r5
 812185e:	47b8      	blx	r7
 8121860:	3001      	adds	r0, #1
 8121862:	f43f ae71 	beq.w	8121548 <_printf_float+0x98>
 8121866:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 812186a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 812186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8121872:	f109 39ff 	add.w	r9, r9, #4294967295
 8121876:	d018      	beq.n	81218aa <_printf_float+0x3fa>
 8121878:	464b      	mov	r3, r9
 812187a:	f108 0201 	add.w	r2, r8, #1
 812187e:	4631      	mov	r1, r6
 8121880:	4628      	mov	r0, r5
 8121882:	47b8      	blx	r7
 8121884:	3001      	adds	r0, #1
 8121886:	d10c      	bne.n	81218a2 <_printf_float+0x3f2>
 8121888:	e65e      	b.n	8121548 <_printf_float+0x98>
 812188a:	2301      	movs	r3, #1
 812188c:	465a      	mov	r2, fp
 812188e:	4631      	mov	r1, r6
 8121890:	4628      	mov	r0, r5
 8121892:	47b8      	blx	r7
 8121894:	3001      	adds	r0, #1
 8121896:	f43f ae57 	beq.w	8121548 <_printf_float+0x98>
 812189a:	f108 0801 	add.w	r8, r8, #1
 812189e:	45c8      	cmp	r8, r9
 81218a0:	dbf3      	blt.n	812188a <_printf_float+0x3da>
 81218a2:	4653      	mov	r3, sl
 81218a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 81218a8:	e6dc      	b.n	8121664 <_printf_float+0x1b4>
 81218aa:	f04f 0800 	mov.w	r8, #0
 81218ae:	f104 0b1a 	add.w	fp, r4, #26
 81218b2:	e7f4      	b.n	812189e <_printf_float+0x3ee>
 81218b4:	2301      	movs	r3, #1
 81218b6:	4642      	mov	r2, r8
 81218b8:	e7e1      	b.n	812187e <_printf_float+0x3ce>
 81218ba:	2301      	movs	r3, #1
 81218bc:	464a      	mov	r2, r9
 81218be:	4631      	mov	r1, r6
 81218c0:	4628      	mov	r0, r5
 81218c2:	47b8      	blx	r7
 81218c4:	3001      	adds	r0, #1
 81218c6:	f43f ae3f 	beq.w	8121548 <_printf_float+0x98>
 81218ca:	f108 0801 	add.w	r8, r8, #1
 81218ce:	68e3      	ldr	r3, [r4, #12]
 81218d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81218d2:	1a5b      	subs	r3, r3, r1
 81218d4:	4543      	cmp	r3, r8
 81218d6:	dcf0      	bgt.n	81218ba <_printf_float+0x40a>
 81218d8:	e6f8      	b.n	81216cc <_printf_float+0x21c>
 81218da:	f04f 0800 	mov.w	r8, #0
 81218de:	f104 0919 	add.w	r9, r4, #25
 81218e2:	e7f4      	b.n	81218ce <_printf_float+0x41e>

081218e4 <_printf_common>:
 81218e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81218e8:	4616      	mov	r6, r2
 81218ea:	4698      	mov	r8, r3
 81218ec:	688a      	ldr	r2, [r1, #8]
 81218ee:	690b      	ldr	r3, [r1, #16]
 81218f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81218f4:	4293      	cmp	r3, r2
 81218f6:	bfb8      	it	lt
 81218f8:	4613      	movlt	r3, r2
 81218fa:	6033      	str	r3, [r6, #0]
 81218fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8121900:	4607      	mov	r7, r0
 8121902:	460c      	mov	r4, r1
 8121904:	b10a      	cbz	r2, 812190a <_printf_common+0x26>
 8121906:	3301      	adds	r3, #1
 8121908:	6033      	str	r3, [r6, #0]
 812190a:	6823      	ldr	r3, [r4, #0]
 812190c:	0699      	lsls	r1, r3, #26
 812190e:	bf42      	ittt	mi
 8121910:	6833      	ldrmi	r3, [r6, #0]
 8121912:	3302      	addmi	r3, #2
 8121914:	6033      	strmi	r3, [r6, #0]
 8121916:	6825      	ldr	r5, [r4, #0]
 8121918:	f015 0506 	ands.w	r5, r5, #6
 812191c:	d106      	bne.n	812192c <_printf_common+0x48>
 812191e:	f104 0a19 	add.w	sl, r4, #25
 8121922:	68e3      	ldr	r3, [r4, #12]
 8121924:	6832      	ldr	r2, [r6, #0]
 8121926:	1a9b      	subs	r3, r3, r2
 8121928:	42ab      	cmp	r3, r5
 812192a:	dc26      	bgt.n	812197a <_printf_common+0x96>
 812192c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8121930:	6822      	ldr	r2, [r4, #0]
 8121932:	3b00      	subs	r3, #0
 8121934:	bf18      	it	ne
 8121936:	2301      	movne	r3, #1
 8121938:	0692      	lsls	r2, r2, #26
 812193a:	d42b      	bmi.n	8121994 <_printf_common+0xb0>
 812193c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8121940:	4641      	mov	r1, r8
 8121942:	4638      	mov	r0, r7
 8121944:	47c8      	blx	r9
 8121946:	3001      	adds	r0, #1
 8121948:	d01e      	beq.n	8121988 <_printf_common+0xa4>
 812194a:	6823      	ldr	r3, [r4, #0]
 812194c:	6922      	ldr	r2, [r4, #16]
 812194e:	f003 0306 	and.w	r3, r3, #6
 8121952:	2b04      	cmp	r3, #4
 8121954:	bf02      	ittt	eq
 8121956:	68e5      	ldreq	r5, [r4, #12]
 8121958:	6833      	ldreq	r3, [r6, #0]
 812195a:	1aed      	subeq	r5, r5, r3
 812195c:	68a3      	ldr	r3, [r4, #8]
 812195e:	bf0c      	ite	eq
 8121960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8121964:	2500      	movne	r5, #0
 8121966:	4293      	cmp	r3, r2
 8121968:	bfc4      	itt	gt
 812196a:	1a9b      	subgt	r3, r3, r2
 812196c:	18ed      	addgt	r5, r5, r3
 812196e:	2600      	movs	r6, #0
 8121970:	341a      	adds	r4, #26
 8121972:	42b5      	cmp	r5, r6
 8121974:	d11a      	bne.n	81219ac <_printf_common+0xc8>
 8121976:	2000      	movs	r0, #0
 8121978:	e008      	b.n	812198c <_printf_common+0xa8>
 812197a:	2301      	movs	r3, #1
 812197c:	4652      	mov	r2, sl
 812197e:	4641      	mov	r1, r8
 8121980:	4638      	mov	r0, r7
 8121982:	47c8      	blx	r9
 8121984:	3001      	adds	r0, #1
 8121986:	d103      	bne.n	8121990 <_printf_common+0xac>
 8121988:	f04f 30ff 	mov.w	r0, #4294967295
 812198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8121990:	3501      	adds	r5, #1
 8121992:	e7c6      	b.n	8121922 <_printf_common+0x3e>
 8121994:	18e1      	adds	r1, r4, r3
 8121996:	1c5a      	adds	r2, r3, #1
 8121998:	2030      	movs	r0, #48	@ 0x30
 812199a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 812199e:	4422      	add	r2, r4
 81219a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81219a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81219a8:	3302      	adds	r3, #2
 81219aa:	e7c7      	b.n	812193c <_printf_common+0x58>
 81219ac:	2301      	movs	r3, #1
 81219ae:	4622      	mov	r2, r4
 81219b0:	4641      	mov	r1, r8
 81219b2:	4638      	mov	r0, r7
 81219b4:	47c8      	blx	r9
 81219b6:	3001      	adds	r0, #1
 81219b8:	d0e6      	beq.n	8121988 <_printf_common+0xa4>
 81219ba:	3601      	adds	r6, #1
 81219bc:	e7d9      	b.n	8121972 <_printf_common+0x8e>
	...

081219c0 <_printf_i>:
 81219c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81219c4:	7e0f      	ldrb	r7, [r1, #24]
 81219c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 81219c8:	2f78      	cmp	r7, #120	@ 0x78
 81219ca:	4691      	mov	r9, r2
 81219cc:	4680      	mov	r8, r0
 81219ce:	460c      	mov	r4, r1
 81219d0:	469a      	mov	sl, r3
 81219d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 81219d6:	d807      	bhi.n	81219e8 <_printf_i+0x28>
 81219d8:	2f62      	cmp	r7, #98	@ 0x62
 81219da:	d80a      	bhi.n	81219f2 <_printf_i+0x32>
 81219dc:	2f00      	cmp	r7, #0
 81219de:	f000 80d2 	beq.w	8121b86 <_printf_i+0x1c6>
 81219e2:	2f58      	cmp	r7, #88	@ 0x58
 81219e4:	f000 80b9 	beq.w	8121b5a <_printf_i+0x19a>
 81219e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81219ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 81219f0:	e03a      	b.n	8121a68 <_printf_i+0xa8>
 81219f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 81219f6:	2b15      	cmp	r3, #21
 81219f8:	d8f6      	bhi.n	81219e8 <_printf_i+0x28>
 81219fa:	a101      	add	r1, pc, #4	@ (adr r1, 8121a00 <_printf_i+0x40>)
 81219fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8121a00:	08121a59 	.word	0x08121a59
 8121a04:	08121a6d 	.word	0x08121a6d
 8121a08:	081219e9 	.word	0x081219e9
 8121a0c:	081219e9 	.word	0x081219e9
 8121a10:	081219e9 	.word	0x081219e9
 8121a14:	081219e9 	.word	0x081219e9
 8121a18:	08121a6d 	.word	0x08121a6d
 8121a1c:	081219e9 	.word	0x081219e9
 8121a20:	081219e9 	.word	0x081219e9
 8121a24:	081219e9 	.word	0x081219e9
 8121a28:	081219e9 	.word	0x081219e9
 8121a2c:	08121b6d 	.word	0x08121b6d
 8121a30:	08121a97 	.word	0x08121a97
 8121a34:	08121b27 	.word	0x08121b27
 8121a38:	081219e9 	.word	0x081219e9
 8121a3c:	081219e9 	.word	0x081219e9
 8121a40:	08121b8f 	.word	0x08121b8f
 8121a44:	081219e9 	.word	0x081219e9
 8121a48:	08121a97 	.word	0x08121a97
 8121a4c:	081219e9 	.word	0x081219e9
 8121a50:	081219e9 	.word	0x081219e9
 8121a54:	08121b2f 	.word	0x08121b2f
 8121a58:	6833      	ldr	r3, [r6, #0]
 8121a5a:	1d1a      	adds	r2, r3, #4
 8121a5c:	681b      	ldr	r3, [r3, #0]
 8121a5e:	6032      	str	r2, [r6, #0]
 8121a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8121a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8121a68:	2301      	movs	r3, #1
 8121a6a:	e09d      	b.n	8121ba8 <_printf_i+0x1e8>
 8121a6c:	6833      	ldr	r3, [r6, #0]
 8121a6e:	6820      	ldr	r0, [r4, #0]
 8121a70:	1d19      	adds	r1, r3, #4
 8121a72:	6031      	str	r1, [r6, #0]
 8121a74:	0606      	lsls	r6, r0, #24
 8121a76:	d501      	bpl.n	8121a7c <_printf_i+0xbc>
 8121a78:	681d      	ldr	r5, [r3, #0]
 8121a7a:	e003      	b.n	8121a84 <_printf_i+0xc4>
 8121a7c:	0645      	lsls	r5, r0, #25
 8121a7e:	d5fb      	bpl.n	8121a78 <_printf_i+0xb8>
 8121a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8121a84:	2d00      	cmp	r5, #0
 8121a86:	da03      	bge.n	8121a90 <_printf_i+0xd0>
 8121a88:	232d      	movs	r3, #45	@ 0x2d
 8121a8a:	426d      	negs	r5, r5
 8121a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8121a90:	4859      	ldr	r0, [pc, #356]	@ (8121bf8 <_printf_i+0x238>)
 8121a92:	230a      	movs	r3, #10
 8121a94:	e011      	b.n	8121aba <_printf_i+0xfa>
 8121a96:	6821      	ldr	r1, [r4, #0]
 8121a98:	6833      	ldr	r3, [r6, #0]
 8121a9a:	0608      	lsls	r0, r1, #24
 8121a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8121aa0:	d402      	bmi.n	8121aa8 <_printf_i+0xe8>
 8121aa2:	0649      	lsls	r1, r1, #25
 8121aa4:	bf48      	it	mi
 8121aa6:	b2ad      	uxthmi	r5, r5
 8121aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8121aaa:	4853      	ldr	r0, [pc, #332]	@ (8121bf8 <_printf_i+0x238>)
 8121aac:	6033      	str	r3, [r6, #0]
 8121aae:	bf14      	ite	ne
 8121ab0:	230a      	movne	r3, #10
 8121ab2:	2308      	moveq	r3, #8
 8121ab4:	2100      	movs	r1, #0
 8121ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8121aba:	6866      	ldr	r6, [r4, #4]
 8121abc:	60a6      	str	r6, [r4, #8]
 8121abe:	2e00      	cmp	r6, #0
 8121ac0:	bfa2      	ittt	ge
 8121ac2:	6821      	ldrge	r1, [r4, #0]
 8121ac4:	f021 0104 	bicge.w	r1, r1, #4
 8121ac8:	6021      	strge	r1, [r4, #0]
 8121aca:	b90d      	cbnz	r5, 8121ad0 <_printf_i+0x110>
 8121acc:	2e00      	cmp	r6, #0
 8121ace:	d04b      	beq.n	8121b68 <_printf_i+0x1a8>
 8121ad0:	4616      	mov	r6, r2
 8121ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8121ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8121ada:	5dc7      	ldrb	r7, [r0, r7]
 8121adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8121ae0:	462f      	mov	r7, r5
 8121ae2:	42bb      	cmp	r3, r7
 8121ae4:	460d      	mov	r5, r1
 8121ae6:	d9f4      	bls.n	8121ad2 <_printf_i+0x112>
 8121ae8:	2b08      	cmp	r3, #8
 8121aea:	d10b      	bne.n	8121b04 <_printf_i+0x144>
 8121aec:	6823      	ldr	r3, [r4, #0]
 8121aee:	07df      	lsls	r7, r3, #31
 8121af0:	d508      	bpl.n	8121b04 <_printf_i+0x144>
 8121af2:	6923      	ldr	r3, [r4, #16]
 8121af4:	6861      	ldr	r1, [r4, #4]
 8121af6:	4299      	cmp	r1, r3
 8121af8:	bfde      	ittt	le
 8121afa:	2330      	movle	r3, #48	@ 0x30
 8121afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8121b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8121b04:	1b92      	subs	r2, r2, r6
 8121b06:	6122      	str	r2, [r4, #16]
 8121b08:	f8cd a000 	str.w	sl, [sp]
 8121b0c:	464b      	mov	r3, r9
 8121b0e:	aa03      	add	r2, sp, #12
 8121b10:	4621      	mov	r1, r4
 8121b12:	4640      	mov	r0, r8
 8121b14:	f7ff fee6 	bl	81218e4 <_printf_common>
 8121b18:	3001      	adds	r0, #1
 8121b1a:	d14a      	bne.n	8121bb2 <_printf_i+0x1f2>
 8121b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8121b20:	b004      	add	sp, #16
 8121b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8121b26:	6823      	ldr	r3, [r4, #0]
 8121b28:	f043 0320 	orr.w	r3, r3, #32
 8121b2c:	6023      	str	r3, [r4, #0]
 8121b2e:	4833      	ldr	r0, [pc, #204]	@ (8121bfc <_printf_i+0x23c>)
 8121b30:	2778      	movs	r7, #120	@ 0x78
 8121b32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8121b36:	6823      	ldr	r3, [r4, #0]
 8121b38:	6831      	ldr	r1, [r6, #0]
 8121b3a:	061f      	lsls	r7, r3, #24
 8121b3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8121b40:	d402      	bmi.n	8121b48 <_printf_i+0x188>
 8121b42:	065f      	lsls	r7, r3, #25
 8121b44:	bf48      	it	mi
 8121b46:	b2ad      	uxthmi	r5, r5
 8121b48:	6031      	str	r1, [r6, #0]
 8121b4a:	07d9      	lsls	r1, r3, #31
 8121b4c:	bf44      	itt	mi
 8121b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8121b52:	6023      	strmi	r3, [r4, #0]
 8121b54:	b11d      	cbz	r5, 8121b5e <_printf_i+0x19e>
 8121b56:	2310      	movs	r3, #16
 8121b58:	e7ac      	b.n	8121ab4 <_printf_i+0xf4>
 8121b5a:	4827      	ldr	r0, [pc, #156]	@ (8121bf8 <_printf_i+0x238>)
 8121b5c:	e7e9      	b.n	8121b32 <_printf_i+0x172>
 8121b5e:	6823      	ldr	r3, [r4, #0]
 8121b60:	f023 0320 	bic.w	r3, r3, #32
 8121b64:	6023      	str	r3, [r4, #0]
 8121b66:	e7f6      	b.n	8121b56 <_printf_i+0x196>
 8121b68:	4616      	mov	r6, r2
 8121b6a:	e7bd      	b.n	8121ae8 <_printf_i+0x128>
 8121b6c:	6833      	ldr	r3, [r6, #0]
 8121b6e:	6825      	ldr	r5, [r4, #0]
 8121b70:	6961      	ldr	r1, [r4, #20]
 8121b72:	1d18      	adds	r0, r3, #4
 8121b74:	6030      	str	r0, [r6, #0]
 8121b76:	062e      	lsls	r6, r5, #24
 8121b78:	681b      	ldr	r3, [r3, #0]
 8121b7a:	d501      	bpl.n	8121b80 <_printf_i+0x1c0>
 8121b7c:	6019      	str	r1, [r3, #0]
 8121b7e:	e002      	b.n	8121b86 <_printf_i+0x1c6>
 8121b80:	0668      	lsls	r0, r5, #25
 8121b82:	d5fb      	bpl.n	8121b7c <_printf_i+0x1bc>
 8121b84:	8019      	strh	r1, [r3, #0]
 8121b86:	2300      	movs	r3, #0
 8121b88:	6123      	str	r3, [r4, #16]
 8121b8a:	4616      	mov	r6, r2
 8121b8c:	e7bc      	b.n	8121b08 <_printf_i+0x148>
 8121b8e:	6833      	ldr	r3, [r6, #0]
 8121b90:	1d1a      	adds	r2, r3, #4
 8121b92:	6032      	str	r2, [r6, #0]
 8121b94:	681e      	ldr	r6, [r3, #0]
 8121b96:	6862      	ldr	r2, [r4, #4]
 8121b98:	2100      	movs	r1, #0
 8121b9a:	4630      	mov	r0, r6
 8121b9c:	f7de fbb0 	bl	8100300 <memchr>
 8121ba0:	b108      	cbz	r0, 8121ba6 <_printf_i+0x1e6>
 8121ba2:	1b80      	subs	r0, r0, r6
 8121ba4:	6060      	str	r0, [r4, #4]
 8121ba6:	6863      	ldr	r3, [r4, #4]
 8121ba8:	6123      	str	r3, [r4, #16]
 8121baa:	2300      	movs	r3, #0
 8121bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8121bb0:	e7aa      	b.n	8121b08 <_printf_i+0x148>
 8121bb2:	6923      	ldr	r3, [r4, #16]
 8121bb4:	4632      	mov	r2, r6
 8121bb6:	4649      	mov	r1, r9
 8121bb8:	4640      	mov	r0, r8
 8121bba:	47d0      	blx	sl
 8121bbc:	3001      	adds	r0, #1
 8121bbe:	d0ad      	beq.n	8121b1c <_printf_i+0x15c>
 8121bc0:	6823      	ldr	r3, [r4, #0]
 8121bc2:	079b      	lsls	r3, r3, #30
 8121bc4:	d413      	bmi.n	8121bee <_printf_i+0x22e>
 8121bc6:	68e0      	ldr	r0, [r4, #12]
 8121bc8:	9b03      	ldr	r3, [sp, #12]
 8121bca:	4298      	cmp	r0, r3
 8121bcc:	bfb8      	it	lt
 8121bce:	4618      	movlt	r0, r3
 8121bd0:	e7a6      	b.n	8121b20 <_printf_i+0x160>
 8121bd2:	2301      	movs	r3, #1
 8121bd4:	4632      	mov	r2, r6
 8121bd6:	4649      	mov	r1, r9
 8121bd8:	4640      	mov	r0, r8
 8121bda:	47d0      	blx	sl
 8121bdc:	3001      	adds	r0, #1
 8121bde:	d09d      	beq.n	8121b1c <_printf_i+0x15c>
 8121be0:	3501      	adds	r5, #1
 8121be2:	68e3      	ldr	r3, [r4, #12]
 8121be4:	9903      	ldr	r1, [sp, #12]
 8121be6:	1a5b      	subs	r3, r3, r1
 8121be8:	42ab      	cmp	r3, r5
 8121bea:	dcf2      	bgt.n	8121bd2 <_printf_i+0x212>
 8121bec:	e7eb      	b.n	8121bc6 <_printf_i+0x206>
 8121bee:	2500      	movs	r5, #0
 8121bf0:	f104 0619 	add.w	r6, r4, #25
 8121bf4:	e7f5      	b.n	8121be2 <_printf_i+0x222>
 8121bf6:	bf00      	nop
 8121bf8:	08128bf6 	.word	0x08128bf6
 8121bfc:	08128c07 	.word	0x08128c07

08121c00 <std>:
 8121c00:	2300      	movs	r3, #0
 8121c02:	b510      	push	{r4, lr}
 8121c04:	4604      	mov	r4, r0
 8121c06:	e9c0 3300 	strd	r3, r3, [r0]
 8121c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8121c0e:	6083      	str	r3, [r0, #8]
 8121c10:	8181      	strh	r1, [r0, #12]
 8121c12:	6643      	str	r3, [r0, #100]	@ 0x64
 8121c14:	81c2      	strh	r2, [r0, #14]
 8121c16:	6183      	str	r3, [r0, #24]
 8121c18:	4619      	mov	r1, r3
 8121c1a:	2208      	movs	r2, #8
 8121c1c:	305c      	adds	r0, #92	@ 0x5c
 8121c1e:	f000 fa57 	bl	81220d0 <memset>
 8121c22:	4b0d      	ldr	r3, [pc, #52]	@ (8121c58 <std+0x58>)
 8121c24:	6263      	str	r3, [r4, #36]	@ 0x24
 8121c26:	4b0d      	ldr	r3, [pc, #52]	@ (8121c5c <std+0x5c>)
 8121c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8121c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8121c60 <std+0x60>)
 8121c2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8121c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8121c64 <std+0x64>)
 8121c30:	6323      	str	r3, [r4, #48]	@ 0x30
 8121c32:	4b0d      	ldr	r3, [pc, #52]	@ (8121c68 <std+0x68>)
 8121c34:	6224      	str	r4, [r4, #32]
 8121c36:	429c      	cmp	r4, r3
 8121c38:	d006      	beq.n	8121c48 <std+0x48>
 8121c3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8121c3e:	4294      	cmp	r4, r2
 8121c40:	d002      	beq.n	8121c48 <std+0x48>
 8121c42:	33d0      	adds	r3, #208	@ 0xd0
 8121c44:	429c      	cmp	r4, r3
 8121c46:	d105      	bne.n	8121c54 <std+0x54>
 8121c48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8121c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8121c50:	f000 bb36 	b.w	81222c0 <__retarget_lock_init_recursive>
 8121c54:	bd10      	pop	{r4, pc}
 8121c56:	bf00      	nop
 8121c58:	08121ecd 	.word	0x08121ecd
 8121c5c:	08121eef 	.word	0x08121eef
 8121c60:	08121f27 	.word	0x08121f27
 8121c64:	08121f4b 	.word	0x08121f4b
 8121c68:	24012710 	.word	0x24012710

08121c6c <stdio_exit_handler>:
 8121c6c:	4a02      	ldr	r2, [pc, #8]	@ (8121c78 <stdio_exit_handler+0xc>)
 8121c6e:	4903      	ldr	r1, [pc, #12]	@ (8121c7c <stdio_exit_handler+0x10>)
 8121c70:	4803      	ldr	r0, [pc, #12]	@ (8121c80 <stdio_exit_handler+0x14>)
 8121c72:	f000 b869 	b.w	8121d48 <_fwalk_sglue>
 8121c76:	bf00      	nop
 8121c78:	24000054 	.word	0x24000054
 8121c7c:	08123e1d 	.word	0x08123e1d
 8121c80:	24000064 	.word	0x24000064

08121c84 <cleanup_stdio>:
 8121c84:	6841      	ldr	r1, [r0, #4]
 8121c86:	4b0c      	ldr	r3, [pc, #48]	@ (8121cb8 <cleanup_stdio+0x34>)
 8121c88:	4299      	cmp	r1, r3
 8121c8a:	b510      	push	{r4, lr}
 8121c8c:	4604      	mov	r4, r0
 8121c8e:	d001      	beq.n	8121c94 <cleanup_stdio+0x10>
 8121c90:	f002 f8c4 	bl	8123e1c <_fflush_r>
 8121c94:	68a1      	ldr	r1, [r4, #8]
 8121c96:	4b09      	ldr	r3, [pc, #36]	@ (8121cbc <cleanup_stdio+0x38>)
 8121c98:	4299      	cmp	r1, r3
 8121c9a:	d002      	beq.n	8121ca2 <cleanup_stdio+0x1e>
 8121c9c:	4620      	mov	r0, r4
 8121c9e:	f002 f8bd 	bl	8123e1c <_fflush_r>
 8121ca2:	68e1      	ldr	r1, [r4, #12]
 8121ca4:	4b06      	ldr	r3, [pc, #24]	@ (8121cc0 <cleanup_stdio+0x3c>)
 8121ca6:	4299      	cmp	r1, r3
 8121ca8:	d004      	beq.n	8121cb4 <cleanup_stdio+0x30>
 8121caa:	4620      	mov	r0, r4
 8121cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8121cb0:	f002 b8b4 	b.w	8123e1c <_fflush_r>
 8121cb4:	bd10      	pop	{r4, pc}
 8121cb6:	bf00      	nop
 8121cb8:	24012710 	.word	0x24012710
 8121cbc:	24012778 	.word	0x24012778
 8121cc0:	240127e0 	.word	0x240127e0

08121cc4 <global_stdio_init.part.0>:
 8121cc4:	b510      	push	{r4, lr}
 8121cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8121cf4 <global_stdio_init.part.0+0x30>)
 8121cc8:	4c0b      	ldr	r4, [pc, #44]	@ (8121cf8 <global_stdio_init.part.0+0x34>)
 8121cca:	4a0c      	ldr	r2, [pc, #48]	@ (8121cfc <global_stdio_init.part.0+0x38>)
 8121ccc:	601a      	str	r2, [r3, #0]
 8121cce:	4620      	mov	r0, r4
 8121cd0:	2200      	movs	r2, #0
 8121cd2:	2104      	movs	r1, #4
 8121cd4:	f7ff ff94 	bl	8121c00 <std>
 8121cd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8121cdc:	2201      	movs	r2, #1
 8121cde:	2109      	movs	r1, #9
 8121ce0:	f7ff ff8e 	bl	8121c00 <std>
 8121ce4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8121ce8:	2202      	movs	r2, #2
 8121cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8121cee:	2112      	movs	r1, #18
 8121cf0:	f7ff bf86 	b.w	8121c00 <std>
 8121cf4:	24012848 	.word	0x24012848
 8121cf8:	24012710 	.word	0x24012710
 8121cfc:	08121c6d 	.word	0x08121c6d

08121d00 <__sfp_lock_acquire>:
 8121d00:	4801      	ldr	r0, [pc, #4]	@ (8121d08 <__sfp_lock_acquire+0x8>)
 8121d02:	f000 bade 	b.w	81222c2 <__retarget_lock_acquire_recursive>
 8121d06:	bf00      	nop
 8121d08:	24012851 	.word	0x24012851

08121d0c <__sfp_lock_release>:
 8121d0c:	4801      	ldr	r0, [pc, #4]	@ (8121d14 <__sfp_lock_release+0x8>)
 8121d0e:	f000 bad9 	b.w	81222c4 <__retarget_lock_release_recursive>
 8121d12:	bf00      	nop
 8121d14:	24012851 	.word	0x24012851

08121d18 <__sinit>:
 8121d18:	b510      	push	{r4, lr}
 8121d1a:	4604      	mov	r4, r0
 8121d1c:	f7ff fff0 	bl	8121d00 <__sfp_lock_acquire>
 8121d20:	6a23      	ldr	r3, [r4, #32]
 8121d22:	b11b      	cbz	r3, 8121d2c <__sinit+0x14>
 8121d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8121d28:	f7ff bff0 	b.w	8121d0c <__sfp_lock_release>
 8121d2c:	4b04      	ldr	r3, [pc, #16]	@ (8121d40 <__sinit+0x28>)
 8121d2e:	6223      	str	r3, [r4, #32]
 8121d30:	4b04      	ldr	r3, [pc, #16]	@ (8121d44 <__sinit+0x2c>)
 8121d32:	681b      	ldr	r3, [r3, #0]
 8121d34:	2b00      	cmp	r3, #0
 8121d36:	d1f5      	bne.n	8121d24 <__sinit+0xc>
 8121d38:	f7ff ffc4 	bl	8121cc4 <global_stdio_init.part.0>
 8121d3c:	e7f2      	b.n	8121d24 <__sinit+0xc>
 8121d3e:	bf00      	nop
 8121d40:	08121c85 	.word	0x08121c85
 8121d44:	24012848 	.word	0x24012848

08121d48 <_fwalk_sglue>:
 8121d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8121d4c:	4607      	mov	r7, r0
 8121d4e:	4688      	mov	r8, r1
 8121d50:	4614      	mov	r4, r2
 8121d52:	2600      	movs	r6, #0
 8121d54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8121d58:	f1b9 0901 	subs.w	r9, r9, #1
 8121d5c:	d505      	bpl.n	8121d6a <_fwalk_sglue+0x22>
 8121d5e:	6824      	ldr	r4, [r4, #0]
 8121d60:	2c00      	cmp	r4, #0
 8121d62:	d1f7      	bne.n	8121d54 <_fwalk_sglue+0xc>
 8121d64:	4630      	mov	r0, r6
 8121d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8121d6a:	89ab      	ldrh	r3, [r5, #12]
 8121d6c:	2b01      	cmp	r3, #1
 8121d6e:	d907      	bls.n	8121d80 <_fwalk_sglue+0x38>
 8121d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8121d74:	3301      	adds	r3, #1
 8121d76:	d003      	beq.n	8121d80 <_fwalk_sglue+0x38>
 8121d78:	4629      	mov	r1, r5
 8121d7a:	4638      	mov	r0, r7
 8121d7c:	47c0      	blx	r8
 8121d7e:	4306      	orrs	r6, r0
 8121d80:	3568      	adds	r5, #104	@ 0x68
 8121d82:	e7e9      	b.n	8121d58 <_fwalk_sglue+0x10>

08121d84 <iprintf>:
 8121d84:	b40f      	push	{r0, r1, r2, r3}
 8121d86:	b507      	push	{r0, r1, r2, lr}
 8121d88:	4906      	ldr	r1, [pc, #24]	@ (8121da4 <iprintf+0x20>)
 8121d8a:	ab04      	add	r3, sp, #16
 8121d8c:	6808      	ldr	r0, [r1, #0]
 8121d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8121d92:	6881      	ldr	r1, [r0, #8]
 8121d94:	9301      	str	r3, [sp, #4]
 8121d96:	f001 fea5 	bl	8123ae4 <_vfiprintf_r>
 8121d9a:	b003      	add	sp, #12
 8121d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8121da0:	b004      	add	sp, #16
 8121da2:	4770      	bx	lr
 8121da4:	24000060 	.word	0x24000060

08121da8 <_puts_r>:
 8121da8:	6a03      	ldr	r3, [r0, #32]
 8121daa:	b570      	push	{r4, r5, r6, lr}
 8121dac:	6884      	ldr	r4, [r0, #8]
 8121dae:	4605      	mov	r5, r0
 8121db0:	460e      	mov	r6, r1
 8121db2:	b90b      	cbnz	r3, 8121db8 <_puts_r+0x10>
 8121db4:	f7ff ffb0 	bl	8121d18 <__sinit>
 8121db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8121dba:	07db      	lsls	r3, r3, #31
 8121dbc:	d405      	bmi.n	8121dca <_puts_r+0x22>
 8121dbe:	89a3      	ldrh	r3, [r4, #12]
 8121dc0:	0598      	lsls	r0, r3, #22
 8121dc2:	d402      	bmi.n	8121dca <_puts_r+0x22>
 8121dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8121dc6:	f000 fa7c 	bl	81222c2 <__retarget_lock_acquire_recursive>
 8121dca:	89a3      	ldrh	r3, [r4, #12]
 8121dcc:	0719      	lsls	r1, r3, #28
 8121dce:	d502      	bpl.n	8121dd6 <_puts_r+0x2e>
 8121dd0:	6923      	ldr	r3, [r4, #16]
 8121dd2:	2b00      	cmp	r3, #0
 8121dd4:	d135      	bne.n	8121e42 <_puts_r+0x9a>
 8121dd6:	4621      	mov	r1, r4
 8121dd8:	4628      	mov	r0, r5
 8121dda:	f000 f8f9 	bl	8121fd0 <__swsetup_r>
 8121dde:	b380      	cbz	r0, 8121e42 <_puts_r+0x9a>
 8121de0:	f04f 35ff 	mov.w	r5, #4294967295
 8121de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8121de6:	07da      	lsls	r2, r3, #31
 8121de8:	d405      	bmi.n	8121df6 <_puts_r+0x4e>
 8121dea:	89a3      	ldrh	r3, [r4, #12]
 8121dec:	059b      	lsls	r3, r3, #22
 8121dee:	d402      	bmi.n	8121df6 <_puts_r+0x4e>
 8121df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8121df2:	f000 fa67 	bl	81222c4 <__retarget_lock_release_recursive>
 8121df6:	4628      	mov	r0, r5
 8121df8:	bd70      	pop	{r4, r5, r6, pc}
 8121dfa:	2b00      	cmp	r3, #0
 8121dfc:	da04      	bge.n	8121e08 <_puts_r+0x60>
 8121dfe:	69a2      	ldr	r2, [r4, #24]
 8121e00:	429a      	cmp	r2, r3
 8121e02:	dc17      	bgt.n	8121e34 <_puts_r+0x8c>
 8121e04:	290a      	cmp	r1, #10
 8121e06:	d015      	beq.n	8121e34 <_puts_r+0x8c>
 8121e08:	6823      	ldr	r3, [r4, #0]
 8121e0a:	1c5a      	adds	r2, r3, #1
 8121e0c:	6022      	str	r2, [r4, #0]
 8121e0e:	7019      	strb	r1, [r3, #0]
 8121e10:	68a3      	ldr	r3, [r4, #8]
 8121e12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8121e16:	3b01      	subs	r3, #1
 8121e18:	60a3      	str	r3, [r4, #8]
 8121e1a:	2900      	cmp	r1, #0
 8121e1c:	d1ed      	bne.n	8121dfa <_puts_r+0x52>
 8121e1e:	2b00      	cmp	r3, #0
 8121e20:	da11      	bge.n	8121e46 <_puts_r+0x9e>
 8121e22:	4622      	mov	r2, r4
 8121e24:	210a      	movs	r1, #10
 8121e26:	4628      	mov	r0, r5
 8121e28:	f000 f893 	bl	8121f52 <__swbuf_r>
 8121e2c:	3001      	adds	r0, #1
 8121e2e:	d0d7      	beq.n	8121de0 <_puts_r+0x38>
 8121e30:	250a      	movs	r5, #10
 8121e32:	e7d7      	b.n	8121de4 <_puts_r+0x3c>
 8121e34:	4622      	mov	r2, r4
 8121e36:	4628      	mov	r0, r5
 8121e38:	f000 f88b 	bl	8121f52 <__swbuf_r>
 8121e3c:	3001      	adds	r0, #1
 8121e3e:	d1e7      	bne.n	8121e10 <_puts_r+0x68>
 8121e40:	e7ce      	b.n	8121de0 <_puts_r+0x38>
 8121e42:	3e01      	subs	r6, #1
 8121e44:	e7e4      	b.n	8121e10 <_puts_r+0x68>
 8121e46:	6823      	ldr	r3, [r4, #0]
 8121e48:	1c5a      	adds	r2, r3, #1
 8121e4a:	6022      	str	r2, [r4, #0]
 8121e4c:	220a      	movs	r2, #10
 8121e4e:	701a      	strb	r2, [r3, #0]
 8121e50:	e7ee      	b.n	8121e30 <_puts_r+0x88>
	...

08121e54 <puts>:
 8121e54:	4b02      	ldr	r3, [pc, #8]	@ (8121e60 <puts+0xc>)
 8121e56:	4601      	mov	r1, r0
 8121e58:	6818      	ldr	r0, [r3, #0]
 8121e5a:	f7ff bfa5 	b.w	8121da8 <_puts_r>
 8121e5e:	bf00      	nop
 8121e60:	24000060 	.word	0x24000060

08121e64 <sniprintf>:
 8121e64:	b40c      	push	{r2, r3}
 8121e66:	b530      	push	{r4, r5, lr}
 8121e68:	4b17      	ldr	r3, [pc, #92]	@ (8121ec8 <sniprintf+0x64>)
 8121e6a:	1e0c      	subs	r4, r1, #0
 8121e6c:	681d      	ldr	r5, [r3, #0]
 8121e6e:	b09d      	sub	sp, #116	@ 0x74
 8121e70:	da08      	bge.n	8121e84 <sniprintf+0x20>
 8121e72:	238b      	movs	r3, #139	@ 0x8b
 8121e74:	602b      	str	r3, [r5, #0]
 8121e76:	f04f 30ff 	mov.w	r0, #4294967295
 8121e7a:	b01d      	add	sp, #116	@ 0x74
 8121e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8121e80:	b002      	add	sp, #8
 8121e82:	4770      	bx	lr
 8121e84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8121e88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8121e8c:	bf14      	ite	ne
 8121e8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8121e92:	4623      	moveq	r3, r4
 8121e94:	9304      	str	r3, [sp, #16]
 8121e96:	9307      	str	r3, [sp, #28]
 8121e98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8121e9c:	9002      	str	r0, [sp, #8]
 8121e9e:	9006      	str	r0, [sp, #24]
 8121ea0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8121ea4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8121ea6:	ab21      	add	r3, sp, #132	@ 0x84
 8121ea8:	a902      	add	r1, sp, #8
 8121eaa:	4628      	mov	r0, r5
 8121eac:	9301      	str	r3, [sp, #4]
 8121eae:	f001 fcf3 	bl	8123898 <_svfiprintf_r>
 8121eb2:	1c43      	adds	r3, r0, #1
 8121eb4:	bfbc      	itt	lt
 8121eb6:	238b      	movlt	r3, #139	@ 0x8b
 8121eb8:	602b      	strlt	r3, [r5, #0]
 8121eba:	2c00      	cmp	r4, #0
 8121ebc:	d0dd      	beq.n	8121e7a <sniprintf+0x16>
 8121ebe:	9b02      	ldr	r3, [sp, #8]
 8121ec0:	2200      	movs	r2, #0
 8121ec2:	701a      	strb	r2, [r3, #0]
 8121ec4:	e7d9      	b.n	8121e7a <sniprintf+0x16>
 8121ec6:	bf00      	nop
 8121ec8:	24000060 	.word	0x24000060

08121ecc <__sread>:
 8121ecc:	b510      	push	{r4, lr}
 8121ece:	460c      	mov	r4, r1
 8121ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8121ed4:	f000 f9a6 	bl	8122224 <_read_r>
 8121ed8:	2800      	cmp	r0, #0
 8121eda:	bfab      	itete	ge
 8121edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8121ede:	89a3      	ldrhlt	r3, [r4, #12]
 8121ee0:	181b      	addge	r3, r3, r0
 8121ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8121ee6:	bfac      	ite	ge
 8121ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8121eea:	81a3      	strhlt	r3, [r4, #12]
 8121eec:	bd10      	pop	{r4, pc}

08121eee <__swrite>:
 8121eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8121ef2:	461f      	mov	r7, r3
 8121ef4:	898b      	ldrh	r3, [r1, #12]
 8121ef6:	05db      	lsls	r3, r3, #23
 8121ef8:	4605      	mov	r5, r0
 8121efa:	460c      	mov	r4, r1
 8121efc:	4616      	mov	r6, r2
 8121efe:	d505      	bpl.n	8121f0c <__swrite+0x1e>
 8121f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8121f04:	2302      	movs	r3, #2
 8121f06:	2200      	movs	r2, #0
 8121f08:	f000 f97a 	bl	8122200 <_lseek_r>
 8121f0c:	89a3      	ldrh	r3, [r4, #12]
 8121f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8121f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8121f16:	81a3      	strh	r3, [r4, #12]
 8121f18:	4632      	mov	r2, r6
 8121f1a:	463b      	mov	r3, r7
 8121f1c:	4628      	mov	r0, r5
 8121f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8121f22:	f000 b991 	b.w	8122248 <_write_r>

08121f26 <__sseek>:
 8121f26:	b510      	push	{r4, lr}
 8121f28:	460c      	mov	r4, r1
 8121f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8121f2e:	f000 f967 	bl	8122200 <_lseek_r>
 8121f32:	1c43      	adds	r3, r0, #1
 8121f34:	89a3      	ldrh	r3, [r4, #12]
 8121f36:	bf15      	itete	ne
 8121f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8121f3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8121f3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8121f42:	81a3      	strheq	r3, [r4, #12]
 8121f44:	bf18      	it	ne
 8121f46:	81a3      	strhne	r3, [r4, #12]
 8121f48:	bd10      	pop	{r4, pc}

08121f4a <__sclose>:
 8121f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8121f4e:	f000 b8f1 	b.w	8122134 <_close_r>

08121f52 <__swbuf_r>:
 8121f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8121f54:	460e      	mov	r6, r1
 8121f56:	4614      	mov	r4, r2
 8121f58:	4605      	mov	r5, r0
 8121f5a:	b118      	cbz	r0, 8121f64 <__swbuf_r+0x12>
 8121f5c:	6a03      	ldr	r3, [r0, #32]
 8121f5e:	b90b      	cbnz	r3, 8121f64 <__swbuf_r+0x12>
 8121f60:	f7ff feda 	bl	8121d18 <__sinit>
 8121f64:	69a3      	ldr	r3, [r4, #24]
 8121f66:	60a3      	str	r3, [r4, #8]
 8121f68:	89a3      	ldrh	r3, [r4, #12]
 8121f6a:	071a      	lsls	r2, r3, #28
 8121f6c:	d501      	bpl.n	8121f72 <__swbuf_r+0x20>
 8121f6e:	6923      	ldr	r3, [r4, #16]
 8121f70:	b943      	cbnz	r3, 8121f84 <__swbuf_r+0x32>
 8121f72:	4621      	mov	r1, r4
 8121f74:	4628      	mov	r0, r5
 8121f76:	f000 f82b 	bl	8121fd0 <__swsetup_r>
 8121f7a:	b118      	cbz	r0, 8121f84 <__swbuf_r+0x32>
 8121f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8121f80:	4638      	mov	r0, r7
 8121f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8121f84:	6823      	ldr	r3, [r4, #0]
 8121f86:	6922      	ldr	r2, [r4, #16]
 8121f88:	1a98      	subs	r0, r3, r2
 8121f8a:	6963      	ldr	r3, [r4, #20]
 8121f8c:	b2f6      	uxtb	r6, r6
 8121f8e:	4283      	cmp	r3, r0
 8121f90:	4637      	mov	r7, r6
 8121f92:	dc05      	bgt.n	8121fa0 <__swbuf_r+0x4e>
 8121f94:	4621      	mov	r1, r4
 8121f96:	4628      	mov	r0, r5
 8121f98:	f001 ff40 	bl	8123e1c <_fflush_r>
 8121f9c:	2800      	cmp	r0, #0
 8121f9e:	d1ed      	bne.n	8121f7c <__swbuf_r+0x2a>
 8121fa0:	68a3      	ldr	r3, [r4, #8]
 8121fa2:	3b01      	subs	r3, #1
 8121fa4:	60a3      	str	r3, [r4, #8]
 8121fa6:	6823      	ldr	r3, [r4, #0]
 8121fa8:	1c5a      	adds	r2, r3, #1
 8121faa:	6022      	str	r2, [r4, #0]
 8121fac:	701e      	strb	r6, [r3, #0]
 8121fae:	6962      	ldr	r2, [r4, #20]
 8121fb0:	1c43      	adds	r3, r0, #1
 8121fb2:	429a      	cmp	r2, r3
 8121fb4:	d004      	beq.n	8121fc0 <__swbuf_r+0x6e>
 8121fb6:	89a3      	ldrh	r3, [r4, #12]
 8121fb8:	07db      	lsls	r3, r3, #31
 8121fba:	d5e1      	bpl.n	8121f80 <__swbuf_r+0x2e>
 8121fbc:	2e0a      	cmp	r6, #10
 8121fbe:	d1df      	bne.n	8121f80 <__swbuf_r+0x2e>
 8121fc0:	4621      	mov	r1, r4
 8121fc2:	4628      	mov	r0, r5
 8121fc4:	f001 ff2a 	bl	8123e1c <_fflush_r>
 8121fc8:	2800      	cmp	r0, #0
 8121fca:	d0d9      	beq.n	8121f80 <__swbuf_r+0x2e>
 8121fcc:	e7d6      	b.n	8121f7c <__swbuf_r+0x2a>
	...

08121fd0 <__swsetup_r>:
 8121fd0:	b538      	push	{r3, r4, r5, lr}
 8121fd2:	4b29      	ldr	r3, [pc, #164]	@ (8122078 <__swsetup_r+0xa8>)
 8121fd4:	4605      	mov	r5, r0
 8121fd6:	6818      	ldr	r0, [r3, #0]
 8121fd8:	460c      	mov	r4, r1
 8121fda:	b118      	cbz	r0, 8121fe4 <__swsetup_r+0x14>
 8121fdc:	6a03      	ldr	r3, [r0, #32]
 8121fde:	b90b      	cbnz	r3, 8121fe4 <__swsetup_r+0x14>
 8121fe0:	f7ff fe9a 	bl	8121d18 <__sinit>
 8121fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8121fe8:	0719      	lsls	r1, r3, #28
 8121fea:	d422      	bmi.n	8122032 <__swsetup_r+0x62>
 8121fec:	06da      	lsls	r2, r3, #27
 8121fee:	d407      	bmi.n	8122000 <__swsetup_r+0x30>
 8121ff0:	2209      	movs	r2, #9
 8121ff2:	602a      	str	r2, [r5, #0]
 8121ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8121ff8:	81a3      	strh	r3, [r4, #12]
 8121ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8121ffe:	e033      	b.n	8122068 <__swsetup_r+0x98>
 8122000:	0758      	lsls	r0, r3, #29
 8122002:	d512      	bpl.n	812202a <__swsetup_r+0x5a>
 8122004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8122006:	b141      	cbz	r1, 812201a <__swsetup_r+0x4a>
 8122008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 812200c:	4299      	cmp	r1, r3
 812200e:	d002      	beq.n	8122016 <__swsetup_r+0x46>
 8122010:	4628      	mov	r0, r5
 8122012:	f000 ff63 	bl	8122edc <_free_r>
 8122016:	2300      	movs	r3, #0
 8122018:	6363      	str	r3, [r4, #52]	@ 0x34
 812201a:	89a3      	ldrh	r3, [r4, #12]
 812201c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8122020:	81a3      	strh	r3, [r4, #12]
 8122022:	2300      	movs	r3, #0
 8122024:	6063      	str	r3, [r4, #4]
 8122026:	6923      	ldr	r3, [r4, #16]
 8122028:	6023      	str	r3, [r4, #0]
 812202a:	89a3      	ldrh	r3, [r4, #12]
 812202c:	f043 0308 	orr.w	r3, r3, #8
 8122030:	81a3      	strh	r3, [r4, #12]
 8122032:	6923      	ldr	r3, [r4, #16]
 8122034:	b94b      	cbnz	r3, 812204a <__swsetup_r+0x7a>
 8122036:	89a3      	ldrh	r3, [r4, #12]
 8122038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 812203c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8122040:	d003      	beq.n	812204a <__swsetup_r+0x7a>
 8122042:	4621      	mov	r1, r4
 8122044:	4628      	mov	r0, r5
 8122046:	f001 ff49 	bl	8123edc <__smakebuf_r>
 812204a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 812204e:	f013 0201 	ands.w	r2, r3, #1
 8122052:	d00a      	beq.n	812206a <__swsetup_r+0x9a>
 8122054:	2200      	movs	r2, #0
 8122056:	60a2      	str	r2, [r4, #8]
 8122058:	6962      	ldr	r2, [r4, #20]
 812205a:	4252      	negs	r2, r2
 812205c:	61a2      	str	r2, [r4, #24]
 812205e:	6922      	ldr	r2, [r4, #16]
 8122060:	b942      	cbnz	r2, 8122074 <__swsetup_r+0xa4>
 8122062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8122066:	d1c5      	bne.n	8121ff4 <__swsetup_r+0x24>
 8122068:	bd38      	pop	{r3, r4, r5, pc}
 812206a:	0799      	lsls	r1, r3, #30
 812206c:	bf58      	it	pl
 812206e:	6962      	ldrpl	r2, [r4, #20]
 8122070:	60a2      	str	r2, [r4, #8]
 8122072:	e7f4      	b.n	812205e <__swsetup_r+0x8e>
 8122074:	2000      	movs	r0, #0
 8122076:	e7f7      	b.n	8122068 <__swsetup_r+0x98>
 8122078:	24000060 	.word	0x24000060

0812207c <memcmp>:
 812207c:	b510      	push	{r4, lr}
 812207e:	3901      	subs	r1, #1
 8122080:	4402      	add	r2, r0
 8122082:	4290      	cmp	r0, r2
 8122084:	d101      	bne.n	812208a <memcmp+0xe>
 8122086:	2000      	movs	r0, #0
 8122088:	e005      	b.n	8122096 <memcmp+0x1a>
 812208a:	7803      	ldrb	r3, [r0, #0]
 812208c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8122090:	42a3      	cmp	r3, r4
 8122092:	d001      	beq.n	8122098 <memcmp+0x1c>
 8122094:	1b18      	subs	r0, r3, r4
 8122096:	bd10      	pop	{r4, pc}
 8122098:	3001      	adds	r0, #1
 812209a:	e7f2      	b.n	8122082 <memcmp+0x6>

0812209c <memmove>:
 812209c:	4288      	cmp	r0, r1
 812209e:	b510      	push	{r4, lr}
 81220a0:	eb01 0402 	add.w	r4, r1, r2
 81220a4:	d902      	bls.n	81220ac <memmove+0x10>
 81220a6:	4284      	cmp	r4, r0
 81220a8:	4623      	mov	r3, r4
 81220aa:	d807      	bhi.n	81220bc <memmove+0x20>
 81220ac:	1e43      	subs	r3, r0, #1
 81220ae:	42a1      	cmp	r1, r4
 81220b0:	d008      	beq.n	81220c4 <memmove+0x28>
 81220b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 81220b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 81220ba:	e7f8      	b.n	81220ae <memmove+0x12>
 81220bc:	4402      	add	r2, r0
 81220be:	4601      	mov	r1, r0
 81220c0:	428a      	cmp	r2, r1
 81220c2:	d100      	bne.n	81220c6 <memmove+0x2a>
 81220c4:	bd10      	pop	{r4, pc}
 81220c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81220ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81220ce:	e7f7      	b.n	81220c0 <memmove+0x24>

081220d0 <memset>:
 81220d0:	4402      	add	r2, r0
 81220d2:	4603      	mov	r3, r0
 81220d4:	4293      	cmp	r3, r2
 81220d6:	d100      	bne.n	81220da <memset+0xa>
 81220d8:	4770      	bx	lr
 81220da:	f803 1b01 	strb.w	r1, [r3], #1
 81220de:	e7f9      	b.n	81220d4 <memset+0x4>

081220e0 <strncmp>:
 81220e0:	b510      	push	{r4, lr}
 81220e2:	b16a      	cbz	r2, 8122100 <strncmp+0x20>
 81220e4:	3901      	subs	r1, #1
 81220e6:	1884      	adds	r4, r0, r2
 81220e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 81220ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81220f0:	429a      	cmp	r2, r3
 81220f2:	d103      	bne.n	81220fc <strncmp+0x1c>
 81220f4:	42a0      	cmp	r0, r4
 81220f6:	d001      	beq.n	81220fc <strncmp+0x1c>
 81220f8:	2a00      	cmp	r2, #0
 81220fa:	d1f5      	bne.n	81220e8 <strncmp+0x8>
 81220fc:	1ad0      	subs	r0, r2, r3
 81220fe:	bd10      	pop	{r4, pc}
 8122100:	4610      	mov	r0, r2
 8122102:	e7fc      	b.n	81220fe <strncmp+0x1e>

08122104 <strncpy>:
 8122104:	b510      	push	{r4, lr}
 8122106:	3901      	subs	r1, #1
 8122108:	4603      	mov	r3, r0
 812210a:	b132      	cbz	r2, 812211a <strncpy+0x16>
 812210c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8122110:	f803 4b01 	strb.w	r4, [r3], #1
 8122114:	3a01      	subs	r2, #1
 8122116:	2c00      	cmp	r4, #0
 8122118:	d1f7      	bne.n	812210a <strncpy+0x6>
 812211a:	441a      	add	r2, r3
 812211c:	2100      	movs	r1, #0
 812211e:	4293      	cmp	r3, r2
 8122120:	d100      	bne.n	8122124 <strncpy+0x20>
 8122122:	bd10      	pop	{r4, pc}
 8122124:	f803 1b01 	strb.w	r1, [r3], #1
 8122128:	e7f9      	b.n	812211e <strncpy+0x1a>
	...

0812212c <_localeconv_r>:
 812212c:	4800      	ldr	r0, [pc, #0]	@ (8122130 <_localeconv_r+0x4>)
 812212e:	4770      	bx	lr
 8122130:	240001a0 	.word	0x240001a0

08122134 <_close_r>:
 8122134:	b538      	push	{r3, r4, r5, lr}
 8122136:	4d06      	ldr	r5, [pc, #24]	@ (8122150 <_close_r+0x1c>)
 8122138:	2300      	movs	r3, #0
 812213a:	4604      	mov	r4, r0
 812213c:	4608      	mov	r0, r1
 812213e:	602b      	str	r3, [r5, #0]
 8122140:	f7e0 f972 	bl	8102428 <_close>
 8122144:	1c43      	adds	r3, r0, #1
 8122146:	d102      	bne.n	812214e <_close_r+0x1a>
 8122148:	682b      	ldr	r3, [r5, #0]
 812214a:	b103      	cbz	r3, 812214e <_close_r+0x1a>
 812214c:	6023      	str	r3, [r4, #0]
 812214e:	bd38      	pop	{r3, r4, r5, pc}
 8122150:	2401284c 	.word	0x2401284c

08122154 <_reclaim_reent>:
 8122154:	4b29      	ldr	r3, [pc, #164]	@ (81221fc <_reclaim_reent+0xa8>)
 8122156:	681b      	ldr	r3, [r3, #0]
 8122158:	4283      	cmp	r3, r0
 812215a:	b570      	push	{r4, r5, r6, lr}
 812215c:	4604      	mov	r4, r0
 812215e:	d04b      	beq.n	81221f8 <_reclaim_reent+0xa4>
 8122160:	69c3      	ldr	r3, [r0, #28]
 8122162:	b1ab      	cbz	r3, 8122190 <_reclaim_reent+0x3c>
 8122164:	68db      	ldr	r3, [r3, #12]
 8122166:	b16b      	cbz	r3, 8122184 <_reclaim_reent+0x30>
 8122168:	2500      	movs	r5, #0
 812216a:	69e3      	ldr	r3, [r4, #28]
 812216c:	68db      	ldr	r3, [r3, #12]
 812216e:	5959      	ldr	r1, [r3, r5]
 8122170:	2900      	cmp	r1, #0
 8122172:	d13b      	bne.n	81221ec <_reclaim_reent+0x98>
 8122174:	3504      	adds	r5, #4
 8122176:	2d80      	cmp	r5, #128	@ 0x80
 8122178:	d1f7      	bne.n	812216a <_reclaim_reent+0x16>
 812217a:	69e3      	ldr	r3, [r4, #28]
 812217c:	4620      	mov	r0, r4
 812217e:	68d9      	ldr	r1, [r3, #12]
 8122180:	f000 feac 	bl	8122edc <_free_r>
 8122184:	69e3      	ldr	r3, [r4, #28]
 8122186:	6819      	ldr	r1, [r3, #0]
 8122188:	b111      	cbz	r1, 8122190 <_reclaim_reent+0x3c>
 812218a:	4620      	mov	r0, r4
 812218c:	f000 fea6 	bl	8122edc <_free_r>
 8122190:	6961      	ldr	r1, [r4, #20]
 8122192:	b111      	cbz	r1, 812219a <_reclaim_reent+0x46>
 8122194:	4620      	mov	r0, r4
 8122196:	f000 fea1 	bl	8122edc <_free_r>
 812219a:	69e1      	ldr	r1, [r4, #28]
 812219c:	b111      	cbz	r1, 81221a4 <_reclaim_reent+0x50>
 812219e:	4620      	mov	r0, r4
 81221a0:	f000 fe9c 	bl	8122edc <_free_r>
 81221a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 81221a6:	b111      	cbz	r1, 81221ae <_reclaim_reent+0x5a>
 81221a8:	4620      	mov	r0, r4
 81221aa:	f000 fe97 	bl	8122edc <_free_r>
 81221ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81221b0:	b111      	cbz	r1, 81221b8 <_reclaim_reent+0x64>
 81221b2:	4620      	mov	r0, r4
 81221b4:	f000 fe92 	bl	8122edc <_free_r>
 81221b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 81221ba:	b111      	cbz	r1, 81221c2 <_reclaim_reent+0x6e>
 81221bc:	4620      	mov	r0, r4
 81221be:	f000 fe8d 	bl	8122edc <_free_r>
 81221c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 81221c4:	b111      	cbz	r1, 81221cc <_reclaim_reent+0x78>
 81221c6:	4620      	mov	r0, r4
 81221c8:	f000 fe88 	bl	8122edc <_free_r>
 81221cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 81221ce:	b111      	cbz	r1, 81221d6 <_reclaim_reent+0x82>
 81221d0:	4620      	mov	r0, r4
 81221d2:	f000 fe83 	bl	8122edc <_free_r>
 81221d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 81221d8:	b111      	cbz	r1, 81221e0 <_reclaim_reent+0x8c>
 81221da:	4620      	mov	r0, r4
 81221dc:	f000 fe7e 	bl	8122edc <_free_r>
 81221e0:	6a23      	ldr	r3, [r4, #32]
 81221e2:	b14b      	cbz	r3, 81221f8 <_reclaim_reent+0xa4>
 81221e4:	4620      	mov	r0, r4
 81221e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 81221ea:	4718      	bx	r3
 81221ec:	680e      	ldr	r6, [r1, #0]
 81221ee:	4620      	mov	r0, r4
 81221f0:	f000 fe74 	bl	8122edc <_free_r>
 81221f4:	4631      	mov	r1, r6
 81221f6:	e7bb      	b.n	8122170 <_reclaim_reent+0x1c>
 81221f8:	bd70      	pop	{r4, r5, r6, pc}
 81221fa:	bf00      	nop
 81221fc:	24000060 	.word	0x24000060

08122200 <_lseek_r>:
 8122200:	b538      	push	{r3, r4, r5, lr}
 8122202:	4d07      	ldr	r5, [pc, #28]	@ (8122220 <_lseek_r+0x20>)
 8122204:	4604      	mov	r4, r0
 8122206:	4608      	mov	r0, r1
 8122208:	4611      	mov	r1, r2
 812220a:	2200      	movs	r2, #0
 812220c:	602a      	str	r2, [r5, #0]
 812220e:	461a      	mov	r2, r3
 8122210:	f7e0 f931 	bl	8102476 <_lseek>
 8122214:	1c43      	adds	r3, r0, #1
 8122216:	d102      	bne.n	812221e <_lseek_r+0x1e>
 8122218:	682b      	ldr	r3, [r5, #0]
 812221a:	b103      	cbz	r3, 812221e <_lseek_r+0x1e>
 812221c:	6023      	str	r3, [r4, #0]
 812221e:	bd38      	pop	{r3, r4, r5, pc}
 8122220:	2401284c 	.word	0x2401284c

08122224 <_read_r>:
 8122224:	b538      	push	{r3, r4, r5, lr}
 8122226:	4d07      	ldr	r5, [pc, #28]	@ (8122244 <_read_r+0x20>)
 8122228:	4604      	mov	r4, r0
 812222a:	4608      	mov	r0, r1
 812222c:	4611      	mov	r1, r2
 812222e:	2200      	movs	r2, #0
 8122230:	602a      	str	r2, [r5, #0]
 8122232:	461a      	mov	r2, r3
 8122234:	f7e0 f8db 	bl	81023ee <_read>
 8122238:	1c43      	adds	r3, r0, #1
 812223a:	d102      	bne.n	8122242 <_read_r+0x1e>
 812223c:	682b      	ldr	r3, [r5, #0]
 812223e:	b103      	cbz	r3, 8122242 <_read_r+0x1e>
 8122240:	6023      	str	r3, [r4, #0]
 8122242:	bd38      	pop	{r3, r4, r5, pc}
 8122244:	2401284c 	.word	0x2401284c

08122248 <_write_r>:
 8122248:	b538      	push	{r3, r4, r5, lr}
 812224a:	4d07      	ldr	r5, [pc, #28]	@ (8122268 <_write_r+0x20>)
 812224c:	4604      	mov	r4, r0
 812224e:	4608      	mov	r0, r1
 8122250:	4611      	mov	r1, r2
 8122252:	2200      	movs	r2, #0
 8122254:	602a      	str	r2, [r5, #0]
 8122256:	461a      	mov	r2, r3
 8122258:	f7de fff1 	bl	810123e <_write>
 812225c:	1c43      	adds	r3, r0, #1
 812225e:	d102      	bne.n	8122266 <_write_r+0x1e>
 8122260:	682b      	ldr	r3, [r5, #0]
 8122262:	b103      	cbz	r3, 8122266 <_write_r+0x1e>
 8122264:	6023      	str	r3, [r4, #0]
 8122266:	bd38      	pop	{r3, r4, r5, pc}
 8122268:	2401284c 	.word	0x2401284c

0812226c <__errno>:
 812226c:	4b01      	ldr	r3, [pc, #4]	@ (8122274 <__errno+0x8>)
 812226e:	6818      	ldr	r0, [r3, #0]
 8122270:	4770      	bx	lr
 8122272:	bf00      	nop
 8122274:	24000060 	.word	0x24000060

08122278 <__libc_init_array>:
 8122278:	b570      	push	{r4, r5, r6, lr}
 812227a:	4d0d      	ldr	r5, [pc, #52]	@ (81222b0 <__libc_init_array+0x38>)
 812227c:	4c0d      	ldr	r4, [pc, #52]	@ (81222b4 <__libc_init_array+0x3c>)
 812227e:	1b64      	subs	r4, r4, r5
 8122280:	10a4      	asrs	r4, r4, #2
 8122282:	2600      	movs	r6, #0
 8122284:	42a6      	cmp	r6, r4
 8122286:	d109      	bne.n	812229c <__libc_init_array+0x24>
 8122288:	4d0b      	ldr	r5, [pc, #44]	@ (81222b8 <__libc_init_array+0x40>)
 812228a:	4c0c      	ldr	r4, [pc, #48]	@ (81222bc <__libc_init_array+0x44>)
 812228c:	f001 ff48 	bl	8124120 <_init>
 8122290:	1b64      	subs	r4, r4, r5
 8122292:	10a4      	asrs	r4, r4, #2
 8122294:	2600      	movs	r6, #0
 8122296:	42a6      	cmp	r6, r4
 8122298:	d105      	bne.n	81222a6 <__libc_init_array+0x2e>
 812229a:	bd70      	pop	{r4, r5, r6, pc}
 812229c:	f855 3b04 	ldr.w	r3, [r5], #4
 81222a0:	4798      	blx	r3
 81222a2:	3601      	adds	r6, #1
 81222a4:	e7ee      	b.n	8122284 <__libc_init_array+0xc>
 81222a6:	f855 3b04 	ldr.w	r3, [r5], #4
 81222aa:	4798      	blx	r3
 81222ac:	3601      	adds	r6, #1
 81222ae:	e7f2      	b.n	8122296 <__libc_init_array+0x1e>
 81222b0:	08128e44 	.word	0x08128e44
 81222b4:	08128e44 	.word	0x08128e44
 81222b8:	08128e44 	.word	0x08128e44
 81222bc:	08128e48 	.word	0x08128e48

081222c0 <__retarget_lock_init_recursive>:
 81222c0:	4770      	bx	lr

081222c2 <__retarget_lock_acquire_recursive>:
 81222c2:	4770      	bx	lr

081222c4 <__retarget_lock_release_recursive>:
 81222c4:	4770      	bx	lr

081222c6 <memcpy>:
 81222c6:	440a      	add	r2, r1
 81222c8:	4291      	cmp	r1, r2
 81222ca:	f100 33ff 	add.w	r3, r0, #4294967295
 81222ce:	d100      	bne.n	81222d2 <memcpy+0xc>
 81222d0:	4770      	bx	lr
 81222d2:	b510      	push	{r4, lr}
 81222d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 81222d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 81222dc:	4291      	cmp	r1, r2
 81222de:	d1f9      	bne.n	81222d4 <memcpy+0xe>
 81222e0:	bd10      	pop	{r4, pc}
	...

081222e4 <__assert_func>:
 81222e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81222e6:	4614      	mov	r4, r2
 81222e8:	461a      	mov	r2, r3
 81222ea:	4b09      	ldr	r3, [pc, #36]	@ (8122310 <__assert_func+0x2c>)
 81222ec:	681b      	ldr	r3, [r3, #0]
 81222ee:	4605      	mov	r5, r0
 81222f0:	68d8      	ldr	r0, [r3, #12]
 81222f2:	b954      	cbnz	r4, 812230a <__assert_func+0x26>
 81222f4:	4b07      	ldr	r3, [pc, #28]	@ (8122314 <__assert_func+0x30>)
 81222f6:	461c      	mov	r4, r3
 81222f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81222fc:	9100      	str	r1, [sp, #0]
 81222fe:	462b      	mov	r3, r5
 8122300:	4905      	ldr	r1, [pc, #20]	@ (8122318 <__assert_func+0x34>)
 8122302:	f001 fdb3 	bl	8123e6c <fiprintf>
 8122306:	f001 fe57 	bl	8123fb8 <abort>
 812230a:	4b04      	ldr	r3, [pc, #16]	@ (812231c <__assert_func+0x38>)
 812230c:	e7f4      	b.n	81222f8 <__assert_func+0x14>
 812230e:	bf00      	nop
 8122310:	24000060 	.word	0x24000060
 8122314:	08128c53 	.word	0x08128c53
 8122318:	08128c25 	.word	0x08128c25
 812231c:	08128c18 	.word	0x08128c18

08122320 <quorem>:
 8122320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8122324:	6903      	ldr	r3, [r0, #16]
 8122326:	690c      	ldr	r4, [r1, #16]
 8122328:	42a3      	cmp	r3, r4
 812232a:	4607      	mov	r7, r0
 812232c:	db7e      	blt.n	812242c <quorem+0x10c>
 812232e:	3c01      	subs	r4, #1
 8122330:	f101 0814 	add.w	r8, r1, #20
 8122334:	00a3      	lsls	r3, r4, #2
 8122336:	f100 0514 	add.w	r5, r0, #20
 812233a:	9300      	str	r3, [sp, #0]
 812233c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8122340:	9301      	str	r3, [sp, #4]
 8122342:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8122346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 812234a:	3301      	adds	r3, #1
 812234c:	429a      	cmp	r2, r3
 812234e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8122352:	fbb2 f6f3 	udiv	r6, r2, r3
 8122356:	d32e      	bcc.n	81223b6 <quorem+0x96>
 8122358:	f04f 0a00 	mov.w	sl, #0
 812235c:	46c4      	mov	ip, r8
 812235e:	46ae      	mov	lr, r5
 8122360:	46d3      	mov	fp, sl
 8122362:	f85c 3b04 	ldr.w	r3, [ip], #4
 8122366:	b298      	uxth	r0, r3
 8122368:	fb06 a000 	mla	r0, r6, r0, sl
 812236c:	0c02      	lsrs	r2, r0, #16
 812236e:	0c1b      	lsrs	r3, r3, #16
 8122370:	fb06 2303 	mla	r3, r6, r3, r2
 8122374:	f8de 2000 	ldr.w	r2, [lr]
 8122378:	b280      	uxth	r0, r0
 812237a:	b292      	uxth	r2, r2
 812237c:	1a12      	subs	r2, r2, r0
 812237e:	445a      	add	r2, fp
 8122380:	f8de 0000 	ldr.w	r0, [lr]
 8122384:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8122388:	b29b      	uxth	r3, r3
 812238a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 812238e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8122392:	b292      	uxth	r2, r2
 8122394:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8122398:	45e1      	cmp	r9, ip
 812239a:	f84e 2b04 	str.w	r2, [lr], #4
 812239e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81223a2:	d2de      	bcs.n	8122362 <quorem+0x42>
 81223a4:	9b00      	ldr	r3, [sp, #0]
 81223a6:	58eb      	ldr	r3, [r5, r3]
 81223a8:	b92b      	cbnz	r3, 81223b6 <quorem+0x96>
 81223aa:	9b01      	ldr	r3, [sp, #4]
 81223ac:	3b04      	subs	r3, #4
 81223ae:	429d      	cmp	r5, r3
 81223b0:	461a      	mov	r2, r3
 81223b2:	d32f      	bcc.n	8122414 <quorem+0xf4>
 81223b4:	613c      	str	r4, [r7, #16]
 81223b6:	4638      	mov	r0, r7
 81223b8:	f001 f90a 	bl	81235d0 <__mcmp>
 81223bc:	2800      	cmp	r0, #0
 81223be:	db25      	blt.n	812240c <quorem+0xec>
 81223c0:	4629      	mov	r1, r5
 81223c2:	2000      	movs	r0, #0
 81223c4:	f858 2b04 	ldr.w	r2, [r8], #4
 81223c8:	f8d1 c000 	ldr.w	ip, [r1]
 81223cc:	fa1f fe82 	uxth.w	lr, r2
 81223d0:	fa1f f38c 	uxth.w	r3, ip
 81223d4:	eba3 030e 	sub.w	r3, r3, lr
 81223d8:	4403      	add	r3, r0
 81223da:	0c12      	lsrs	r2, r2, #16
 81223dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 81223e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 81223e4:	b29b      	uxth	r3, r3
 81223e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81223ea:	45c1      	cmp	r9, r8
 81223ec:	f841 3b04 	str.w	r3, [r1], #4
 81223f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 81223f4:	d2e6      	bcs.n	81223c4 <quorem+0xa4>
 81223f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81223fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81223fe:	b922      	cbnz	r2, 812240a <quorem+0xea>
 8122400:	3b04      	subs	r3, #4
 8122402:	429d      	cmp	r5, r3
 8122404:	461a      	mov	r2, r3
 8122406:	d30b      	bcc.n	8122420 <quorem+0x100>
 8122408:	613c      	str	r4, [r7, #16]
 812240a:	3601      	adds	r6, #1
 812240c:	4630      	mov	r0, r6
 812240e:	b003      	add	sp, #12
 8122410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8122414:	6812      	ldr	r2, [r2, #0]
 8122416:	3b04      	subs	r3, #4
 8122418:	2a00      	cmp	r2, #0
 812241a:	d1cb      	bne.n	81223b4 <quorem+0x94>
 812241c:	3c01      	subs	r4, #1
 812241e:	e7c6      	b.n	81223ae <quorem+0x8e>
 8122420:	6812      	ldr	r2, [r2, #0]
 8122422:	3b04      	subs	r3, #4
 8122424:	2a00      	cmp	r2, #0
 8122426:	d1ef      	bne.n	8122408 <quorem+0xe8>
 8122428:	3c01      	subs	r4, #1
 812242a:	e7ea      	b.n	8122402 <quorem+0xe2>
 812242c:	2000      	movs	r0, #0
 812242e:	e7ee      	b.n	812240e <quorem+0xee>

08122430 <_dtoa_r>:
 8122430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8122434:	ed2d 8b02 	vpush	{d8}
 8122438:	69c7      	ldr	r7, [r0, #28]
 812243a:	b091      	sub	sp, #68	@ 0x44
 812243c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8122440:	ec55 4b10 	vmov	r4, r5, d0
 8122444:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8122446:	9107      	str	r1, [sp, #28]
 8122448:	4681      	mov	r9, r0
 812244a:	9209      	str	r2, [sp, #36]	@ 0x24
 812244c:	930d      	str	r3, [sp, #52]	@ 0x34
 812244e:	b97f      	cbnz	r7, 8122470 <_dtoa_r+0x40>
 8122450:	2010      	movs	r0, #16
 8122452:	f000 fd8d 	bl	8122f70 <malloc>
 8122456:	4602      	mov	r2, r0
 8122458:	f8c9 001c 	str.w	r0, [r9, #28]
 812245c:	b920      	cbnz	r0, 8122468 <_dtoa_r+0x38>
 812245e:	4ba0      	ldr	r3, [pc, #640]	@ (81226e0 <_dtoa_r+0x2b0>)
 8122460:	21ef      	movs	r1, #239	@ 0xef
 8122462:	48a0      	ldr	r0, [pc, #640]	@ (81226e4 <_dtoa_r+0x2b4>)
 8122464:	f7ff ff3e 	bl	81222e4 <__assert_func>
 8122468:	e9c0 7701 	strd	r7, r7, [r0, #4]
 812246c:	6007      	str	r7, [r0, #0]
 812246e:	60c7      	str	r7, [r0, #12]
 8122470:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8122474:	6819      	ldr	r1, [r3, #0]
 8122476:	b159      	cbz	r1, 8122490 <_dtoa_r+0x60>
 8122478:	685a      	ldr	r2, [r3, #4]
 812247a:	604a      	str	r2, [r1, #4]
 812247c:	2301      	movs	r3, #1
 812247e:	4093      	lsls	r3, r2
 8122480:	608b      	str	r3, [r1, #8]
 8122482:	4648      	mov	r0, r9
 8122484:	f000 fe6a 	bl	812315c <_Bfree>
 8122488:	f8d9 301c 	ldr.w	r3, [r9, #28]
 812248c:	2200      	movs	r2, #0
 812248e:	601a      	str	r2, [r3, #0]
 8122490:	1e2b      	subs	r3, r5, #0
 8122492:	bfbb      	ittet	lt
 8122494:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8122498:	9303      	strlt	r3, [sp, #12]
 812249a:	2300      	movge	r3, #0
 812249c:	2201      	movlt	r2, #1
 812249e:	bfac      	ite	ge
 81224a0:	6033      	strge	r3, [r6, #0]
 81224a2:	6032      	strlt	r2, [r6, #0]
 81224a4:	4b90      	ldr	r3, [pc, #576]	@ (81226e8 <_dtoa_r+0x2b8>)
 81224a6:	9e03      	ldr	r6, [sp, #12]
 81224a8:	43b3      	bics	r3, r6
 81224aa:	d110      	bne.n	81224ce <_dtoa_r+0x9e>
 81224ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 81224ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 81224b2:	6013      	str	r3, [r2, #0]
 81224b4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 81224b8:	4323      	orrs	r3, r4
 81224ba:	f000 84de 	beq.w	8122e7a <_dtoa_r+0xa4a>
 81224be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 81224c0:	4f8a      	ldr	r7, [pc, #552]	@ (81226ec <_dtoa_r+0x2bc>)
 81224c2:	2b00      	cmp	r3, #0
 81224c4:	f000 84e0 	beq.w	8122e88 <_dtoa_r+0xa58>
 81224c8:	1cfb      	adds	r3, r7, #3
 81224ca:	f000 bcdb 	b.w	8122e84 <_dtoa_r+0xa54>
 81224ce:	ed9d 8b02 	vldr	d8, [sp, #8]
 81224d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 81224d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81224da:	d10a      	bne.n	81224f2 <_dtoa_r+0xc2>
 81224dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 81224de:	2301      	movs	r3, #1
 81224e0:	6013      	str	r3, [r2, #0]
 81224e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 81224e4:	b113      	cbz	r3, 81224ec <_dtoa_r+0xbc>
 81224e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 81224e8:	4b81      	ldr	r3, [pc, #516]	@ (81226f0 <_dtoa_r+0x2c0>)
 81224ea:	6013      	str	r3, [r2, #0]
 81224ec:	4f81      	ldr	r7, [pc, #516]	@ (81226f4 <_dtoa_r+0x2c4>)
 81224ee:	f000 bccb 	b.w	8122e88 <_dtoa_r+0xa58>
 81224f2:	aa0e      	add	r2, sp, #56	@ 0x38
 81224f4:	a90f      	add	r1, sp, #60	@ 0x3c
 81224f6:	4648      	mov	r0, r9
 81224f8:	eeb0 0b48 	vmov.f64	d0, d8
 81224fc:	f001 f918 	bl	8123730 <__d2b>
 8122500:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8122504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8122506:	9001      	str	r0, [sp, #4]
 8122508:	2b00      	cmp	r3, #0
 812250a:	d045      	beq.n	8122598 <_dtoa_r+0x168>
 812250c:	eeb0 7b48 	vmov.f64	d7, d8
 8122510:	ee18 1a90 	vmov	r1, s17
 8122514:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8122518:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 812251c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8122520:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8122524:	2500      	movs	r5, #0
 8122526:	ee07 1a90 	vmov	s15, r1
 812252a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 812252e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 81226c8 <_dtoa_r+0x298>
 8122532:	ee37 7b46 	vsub.f64	d7, d7, d6
 8122536:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 81226d0 <_dtoa_r+0x2a0>
 812253a:	eea7 6b05 	vfma.f64	d6, d7, d5
 812253e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 81226d8 <_dtoa_r+0x2a8>
 8122542:	ee07 3a90 	vmov	s15, r3
 8122546:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 812254a:	eeb0 7b46 	vmov.f64	d7, d6
 812254e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8122552:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8122556:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 812255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 812255e:	ee16 8a90 	vmov	r8, s13
 8122562:	d508      	bpl.n	8122576 <_dtoa_r+0x146>
 8122564:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8122568:	eeb4 6b47 	vcmp.f64	d6, d7
 812256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8122570:	bf18      	it	ne
 8122572:	f108 38ff 	addne.w	r8, r8, #4294967295
 8122576:	f1b8 0f16 	cmp.w	r8, #22
 812257a:	d82b      	bhi.n	81225d4 <_dtoa_r+0x1a4>
 812257c:	495e      	ldr	r1, [pc, #376]	@ (81226f8 <_dtoa_r+0x2c8>)
 812257e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8122582:	ed91 7b00 	vldr	d7, [r1]
 8122586:	eeb4 8bc7 	vcmpe.f64	d8, d7
 812258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 812258e:	d501      	bpl.n	8122594 <_dtoa_r+0x164>
 8122590:	f108 38ff 	add.w	r8, r8, #4294967295
 8122594:	2100      	movs	r1, #0
 8122596:	e01e      	b.n	81225d6 <_dtoa_r+0x1a6>
 8122598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 812259a:	4413      	add	r3, r2
 812259c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 81225a0:	2920      	cmp	r1, #32
 81225a2:	bfc1      	itttt	gt
 81225a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 81225a8:	408e      	lslgt	r6, r1
 81225aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 81225ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 81225b2:	bfd6      	itet	le
 81225b4:	f1c1 0120 	rsble	r1, r1, #32
 81225b8:	4331      	orrgt	r1, r6
 81225ba:	fa04 f101 	lslle.w	r1, r4, r1
 81225be:	ee07 1a90 	vmov	s15, r1
 81225c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 81225c6:	3b01      	subs	r3, #1
 81225c8:	ee17 1a90 	vmov	r1, s15
 81225cc:	2501      	movs	r5, #1
 81225ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 81225d2:	e7a8      	b.n	8122526 <_dtoa_r+0xf6>
 81225d4:	2101      	movs	r1, #1
 81225d6:	1ad2      	subs	r2, r2, r3
 81225d8:	1e53      	subs	r3, r2, #1
 81225da:	9306      	str	r3, [sp, #24]
 81225dc:	bf45      	ittet	mi
 81225de:	f1c2 0301 	rsbmi	r3, r2, #1
 81225e2:	9305      	strmi	r3, [sp, #20]
 81225e4:	2300      	movpl	r3, #0
 81225e6:	2300      	movmi	r3, #0
 81225e8:	bf4c      	ite	mi
 81225ea:	9306      	strmi	r3, [sp, #24]
 81225ec:	9305      	strpl	r3, [sp, #20]
 81225ee:	f1b8 0f00 	cmp.w	r8, #0
 81225f2:	910c      	str	r1, [sp, #48]	@ 0x30
 81225f4:	db18      	blt.n	8122628 <_dtoa_r+0x1f8>
 81225f6:	9b06      	ldr	r3, [sp, #24]
 81225f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 81225fc:	4443      	add	r3, r8
 81225fe:	9306      	str	r3, [sp, #24]
 8122600:	2300      	movs	r3, #0
 8122602:	9a07      	ldr	r2, [sp, #28]
 8122604:	2a09      	cmp	r2, #9
 8122606:	d849      	bhi.n	812269c <_dtoa_r+0x26c>
 8122608:	2a05      	cmp	r2, #5
 812260a:	bfc4      	itt	gt
 812260c:	3a04      	subgt	r2, #4
 812260e:	9207      	strgt	r2, [sp, #28]
 8122610:	9a07      	ldr	r2, [sp, #28]
 8122612:	f1a2 0202 	sub.w	r2, r2, #2
 8122616:	bfcc      	ite	gt
 8122618:	2400      	movgt	r4, #0
 812261a:	2401      	movle	r4, #1
 812261c:	2a03      	cmp	r2, #3
 812261e:	d848      	bhi.n	81226b2 <_dtoa_r+0x282>
 8122620:	e8df f002 	tbb	[pc, r2]
 8122624:	3a2c2e0b 	.word	0x3a2c2e0b
 8122628:	9b05      	ldr	r3, [sp, #20]
 812262a:	2200      	movs	r2, #0
 812262c:	eba3 0308 	sub.w	r3, r3, r8
 8122630:	9305      	str	r3, [sp, #20]
 8122632:	920a      	str	r2, [sp, #40]	@ 0x28
 8122634:	f1c8 0300 	rsb	r3, r8, #0
 8122638:	e7e3      	b.n	8122602 <_dtoa_r+0x1d2>
 812263a:	2200      	movs	r2, #0
 812263c:	9208      	str	r2, [sp, #32]
 812263e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8122640:	2a00      	cmp	r2, #0
 8122642:	dc39      	bgt.n	81226b8 <_dtoa_r+0x288>
 8122644:	f04f 0b01 	mov.w	fp, #1
 8122648:	46da      	mov	sl, fp
 812264a:	465a      	mov	r2, fp
 812264c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8122650:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8122654:	2100      	movs	r1, #0
 8122656:	2004      	movs	r0, #4
 8122658:	f100 0614 	add.w	r6, r0, #20
 812265c:	4296      	cmp	r6, r2
 812265e:	d930      	bls.n	81226c2 <_dtoa_r+0x292>
 8122660:	6079      	str	r1, [r7, #4]
 8122662:	4648      	mov	r0, r9
 8122664:	9304      	str	r3, [sp, #16]
 8122666:	f000 fd39 	bl	81230dc <_Balloc>
 812266a:	9b04      	ldr	r3, [sp, #16]
 812266c:	4607      	mov	r7, r0
 812266e:	2800      	cmp	r0, #0
 8122670:	d146      	bne.n	8122700 <_dtoa_r+0x2d0>
 8122672:	4b22      	ldr	r3, [pc, #136]	@ (81226fc <_dtoa_r+0x2cc>)
 8122674:	4602      	mov	r2, r0
 8122676:	f240 11af 	movw	r1, #431	@ 0x1af
 812267a:	e6f2      	b.n	8122462 <_dtoa_r+0x32>
 812267c:	2201      	movs	r2, #1
 812267e:	e7dd      	b.n	812263c <_dtoa_r+0x20c>
 8122680:	2200      	movs	r2, #0
 8122682:	9208      	str	r2, [sp, #32]
 8122684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8122686:	eb08 0b02 	add.w	fp, r8, r2
 812268a:	f10b 0a01 	add.w	sl, fp, #1
 812268e:	4652      	mov	r2, sl
 8122690:	2a01      	cmp	r2, #1
 8122692:	bfb8      	it	lt
 8122694:	2201      	movlt	r2, #1
 8122696:	e7db      	b.n	8122650 <_dtoa_r+0x220>
 8122698:	2201      	movs	r2, #1
 812269a:	e7f2      	b.n	8122682 <_dtoa_r+0x252>
 812269c:	2401      	movs	r4, #1
 812269e:	2200      	movs	r2, #0
 81226a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 81226a4:	f04f 3bff 	mov.w	fp, #4294967295
 81226a8:	2100      	movs	r1, #0
 81226aa:	46da      	mov	sl, fp
 81226ac:	2212      	movs	r2, #18
 81226ae:	9109      	str	r1, [sp, #36]	@ 0x24
 81226b0:	e7ce      	b.n	8122650 <_dtoa_r+0x220>
 81226b2:	2201      	movs	r2, #1
 81226b4:	9208      	str	r2, [sp, #32]
 81226b6:	e7f5      	b.n	81226a4 <_dtoa_r+0x274>
 81226b8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 81226bc:	46da      	mov	sl, fp
 81226be:	465a      	mov	r2, fp
 81226c0:	e7c6      	b.n	8122650 <_dtoa_r+0x220>
 81226c2:	3101      	adds	r1, #1
 81226c4:	0040      	lsls	r0, r0, #1
 81226c6:	e7c7      	b.n	8122658 <_dtoa_r+0x228>
 81226c8:	636f4361 	.word	0x636f4361
 81226cc:	3fd287a7 	.word	0x3fd287a7
 81226d0:	8b60c8b3 	.word	0x8b60c8b3
 81226d4:	3fc68a28 	.word	0x3fc68a28
 81226d8:	509f79fb 	.word	0x509f79fb
 81226dc:	3fd34413 	.word	0x3fd34413
 81226e0:	08128a74 	.word	0x08128a74
 81226e4:	08128c61 	.word	0x08128c61
 81226e8:	7ff00000 	.word	0x7ff00000
 81226ec:	08128c5d 	.word	0x08128c5d
 81226f0:	08128bf5 	.word	0x08128bf5
 81226f4:	08128bf4 	.word	0x08128bf4
 81226f8:	08128d58 	.word	0x08128d58
 81226fc:	08128cb9 	.word	0x08128cb9
 8122700:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8122704:	f1ba 0f0e 	cmp.w	sl, #14
 8122708:	6010      	str	r0, [r2, #0]
 812270a:	d86f      	bhi.n	81227ec <_dtoa_r+0x3bc>
 812270c:	2c00      	cmp	r4, #0
 812270e:	d06d      	beq.n	81227ec <_dtoa_r+0x3bc>
 8122710:	f1b8 0f00 	cmp.w	r8, #0
 8122714:	f340 80c2 	ble.w	812289c <_dtoa_r+0x46c>
 8122718:	4aca      	ldr	r2, [pc, #808]	@ (8122a44 <_dtoa_r+0x614>)
 812271a:	f008 010f 	and.w	r1, r8, #15
 812271e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8122722:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8122726:	ed92 7b00 	vldr	d7, [r2]
 812272a:	ea4f 1128 	mov.w	r1, r8, asr #4
 812272e:	f000 80a9 	beq.w	8122884 <_dtoa_r+0x454>
 8122732:	4ac5      	ldr	r2, [pc, #788]	@ (8122a48 <_dtoa_r+0x618>)
 8122734:	ed92 6b08 	vldr	d6, [r2, #32]
 8122738:	ee88 6b06 	vdiv.f64	d6, d8, d6
 812273c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8122740:	f001 010f 	and.w	r1, r1, #15
 8122744:	2203      	movs	r2, #3
 8122746:	48c0      	ldr	r0, [pc, #768]	@ (8122a48 <_dtoa_r+0x618>)
 8122748:	2900      	cmp	r1, #0
 812274a:	f040 809d 	bne.w	8122888 <_dtoa_r+0x458>
 812274e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8122752:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8122756:	ed8d 7b02 	vstr	d7, [sp, #8]
 812275a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 812275c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8122760:	2900      	cmp	r1, #0
 8122762:	f000 80c1 	beq.w	81228e8 <_dtoa_r+0x4b8>
 8122766:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 812276a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 812276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8122772:	f140 80b9 	bpl.w	81228e8 <_dtoa_r+0x4b8>
 8122776:	f1ba 0f00 	cmp.w	sl, #0
 812277a:	f000 80b5 	beq.w	81228e8 <_dtoa_r+0x4b8>
 812277e:	f1bb 0f00 	cmp.w	fp, #0
 8122782:	dd31      	ble.n	81227e8 <_dtoa_r+0x3b8>
 8122784:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8122788:	ee27 7b06 	vmul.f64	d7, d7, d6
 812278c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8122790:	f108 31ff 	add.w	r1, r8, #4294967295
 8122794:	9104      	str	r1, [sp, #16]
 8122796:	3201      	adds	r2, #1
 8122798:	465c      	mov	r4, fp
 812279a:	ed9d 6b02 	vldr	d6, [sp, #8]
 812279e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 81227a2:	ee07 2a90 	vmov	s15, r2
 81227a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 81227aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 81227ae:	ee15 2a90 	vmov	r2, s11
 81227b2:	ec51 0b15 	vmov	r0, r1, d5
 81227b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 81227ba:	2c00      	cmp	r4, #0
 81227bc:	f040 8098 	bne.w	81228f0 <_dtoa_r+0x4c0>
 81227c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 81227c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 81227c8:	ec41 0b17 	vmov	d7, r0, r1
 81227cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 81227d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81227d4:	f300 8261 	bgt.w	8122c9a <_dtoa_r+0x86a>
 81227d8:	eeb1 7b47 	vneg.f64	d7, d7
 81227dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 81227e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81227e4:	f100 80f5 	bmi.w	81229d2 <_dtoa_r+0x5a2>
 81227e8:	ed8d 8b02 	vstr	d8, [sp, #8]
 81227ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 81227ee:	2a00      	cmp	r2, #0
 81227f0:	f2c0 812c 	blt.w	8122a4c <_dtoa_r+0x61c>
 81227f4:	f1b8 0f0e 	cmp.w	r8, #14
 81227f8:	f300 8128 	bgt.w	8122a4c <_dtoa_r+0x61c>
 81227fc:	4b91      	ldr	r3, [pc, #580]	@ (8122a44 <_dtoa_r+0x614>)
 81227fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8122802:	ed93 6b00 	vldr	d6, [r3]
 8122806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8122808:	2b00      	cmp	r3, #0
 812280a:	da03      	bge.n	8122814 <_dtoa_r+0x3e4>
 812280c:	f1ba 0f00 	cmp.w	sl, #0
 8122810:	f340 80d2 	ble.w	81229b8 <_dtoa_r+0x588>
 8122814:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8122818:	ed9d 7b02 	vldr	d7, [sp, #8]
 812281c:	463e      	mov	r6, r7
 812281e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8122822:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8122826:	ee15 3a10 	vmov	r3, s10
 812282a:	3330      	adds	r3, #48	@ 0x30
 812282c:	f806 3b01 	strb.w	r3, [r6], #1
 8122830:	1bf3      	subs	r3, r6, r7
 8122832:	459a      	cmp	sl, r3
 8122834:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8122838:	eea3 7b46 	vfms.f64	d7, d3, d6
 812283c:	f040 80f8 	bne.w	8122a30 <_dtoa_r+0x600>
 8122840:	ee37 7b07 	vadd.f64	d7, d7, d7
 8122844:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8122848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 812284c:	f300 80dd 	bgt.w	8122a0a <_dtoa_r+0x5da>
 8122850:	eeb4 7b46 	vcmp.f64	d7, d6
 8122854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8122858:	d104      	bne.n	8122864 <_dtoa_r+0x434>
 812285a:	ee15 3a10 	vmov	r3, s10
 812285e:	07db      	lsls	r3, r3, #31
 8122860:	f100 80d3 	bmi.w	8122a0a <_dtoa_r+0x5da>
 8122864:	9901      	ldr	r1, [sp, #4]
 8122866:	4648      	mov	r0, r9
 8122868:	f000 fc78 	bl	812315c <_Bfree>
 812286c:	2300      	movs	r3, #0
 812286e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8122870:	7033      	strb	r3, [r6, #0]
 8122872:	f108 0301 	add.w	r3, r8, #1
 8122876:	6013      	str	r3, [r2, #0]
 8122878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 812287a:	2b00      	cmp	r3, #0
 812287c:	f000 8304 	beq.w	8122e88 <_dtoa_r+0xa58>
 8122880:	601e      	str	r6, [r3, #0]
 8122882:	e301      	b.n	8122e88 <_dtoa_r+0xa58>
 8122884:	2202      	movs	r2, #2
 8122886:	e75e      	b.n	8122746 <_dtoa_r+0x316>
 8122888:	07cc      	lsls	r4, r1, #31
 812288a:	d504      	bpl.n	8122896 <_dtoa_r+0x466>
 812288c:	ed90 6b00 	vldr	d6, [r0]
 8122890:	3201      	adds	r2, #1
 8122892:	ee27 7b06 	vmul.f64	d7, d7, d6
 8122896:	1049      	asrs	r1, r1, #1
 8122898:	3008      	adds	r0, #8
 812289a:	e755      	b.n	8122748 <_dtoa_r+0x318>
 812289c:	d022      	beq.n	81228e4 <_dtoa_r+0x4b4>
 812289e:	f1c8 0100 	rsb	r1, r8, #0
 81228a2:	4a68      	ldr	r2, [pc, #416]	@ (8122a44 <_dtoa_r+0x614>)
 81228a4:	f001 000f 	and.w	r0, r1, #15
 81228a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 81228ac:	ed92 7b00 	vldr	d7, [r2]
 81228b0:	ee28 7b07 	vmul.f64	d7, d8, d7
 81228b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 81228b8:	4863      	ldr	r0, [pc, #396]	@ (8122a48 <_dtoa_r+0x618>)
 81228ba:	1109      	asrs	r1, r1, #4
 81228bc:	2400      	movs	r4, #0
 81228be:	2202      	movs	r2, #2
 81228c0:	b929      	cbnz	r1, 81228ce <_dtoa_r+0x49e>
 81228c2:	2c00      	cmp	r4, #0
 81228c4:	f43f af49 	beq.w	812275a <_dtoa_r+0x32a>
 81228c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 81228cc:	e745      	b.n	812275a <_dtoa_r+0x32a>
 81228ce:	07ce      	lsls	r6, r1, #31
 81228d0:	d505      	bpl.n	81228de <_dtoa_r+0x4ae>
 81228d2:	ed90 6b00 	vldr	d6, [r0]
 81228d6:	3201      	adds	r2, #1
 81228d8:	2401      	movs	r4, #1
 81228da:	ee27 7b06 	vmul.f64	d7, d7, d6
 81228de:	1049      	asrs	r1, r1, #1
 81228e0:	3008      	adds	r0, #8
 81228e2:	e7ed      	b.n	81228c0 <_dtoa_r+0x490>
 81228e4:	2202      	movs	r2, #2
 81228e6:	e738      	b.n	812275a <_dtoa_r+0x32a>
 81228e8:	f8cd 8010 	str.w	r8, [sp, #16]
 81228ec:	4654      	mov	r4, sl
 81228ee:	e754      	b.n	812279a <_dtoa_r+0x36a>
 81228f0:	4a54      	ldr	r2, [pc, #336]	@ (8122a44 <_dtoa_r+0x614>)
 81228f2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 81228f6:	ed12 4b02 	vldr	d4, [r2, #-8]
 81228fa:	9a08      	ldr	r2, [sp, #32]
 81228fc:	ec41 0b17 	vmov	d7, r0, r1
 8122900:	443c      	add	r4, r7
 8122902:	b34a      	cbz	r2, 8122958 <_dtoa_r+0x528>
 8122904:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8122908:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 812290c:	463e      	mov	r6, r7
 812290e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8122912:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8122916:	ee35 7b47 	vsub.f64	d7, d5, d7
 812291a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 812291e:	ee14 2a90 	vmov	r2, s9
 8122922:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8122926:	3230      	adds	r2, #48	@ 0x30
 8122928:	ee36 6b45 	vsub.f64	d6, d6, d5
 812292c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8122930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8122934:	f806 2b01 	strb.w	r2, [r6], #1
 8122938:	d438      	bmi.n	81229ac <_dtoa_r+0x57c>
 812293a:	ee32 5b46 	vsub.f64	d5, d2, d6
 812293e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8122942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8122946:	d462      	bmi.n	8122a0e <_dtoa_r+0x5de>
 8122948:	42a6      	cmp	r6, r4
 812294a:	f43f af4d 	beq.w	81227e8 <_dtoa_r+0x3b8>
 812294e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8122952:	ee26 6b03 	vmul.f64	d6, d6, d3
 8122956:	e7e0      	b.n	812291a <_dtoa_r+0x4ea>
 8122958:	4621      	mov	r1, r4
 812295a:	463e      	mov	r6, r7
 812295c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8122960:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8122964:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8122968:	ee14 2a90 	vmov	r2, s9
 812296c:	3230      	adds	r2, #48	@ 0x30
 812296e:	f806 2b01 	strb.w	r2, [r6], #1
 8122972:	42a6      	cmp	r6, r4
 8122974:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8122978:	ee36 6b45 	vsub.f64	d6, d6, d5
 812297c:	d119      	bne.n	81229b2 <_dtoa_r+0x582>
 812297e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8122982:	ee37 4b05 	vadd.f64	d4, d7, d5
 8122986:	eeb4 6bc4 	vcmpe.f64	d6, d4
 812298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 812298e:	dc3e      	bgt.n	8122a0e <_dtoa_r+0x5de>
 8122990:	ee35 5b47 	vsub.f64	d5, d5, d7
 8122994:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8122998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 812299c:	f57f af24 	bpl.w	81227e8 <_dtoa_r+0x3b8>
 81229a0:	460e      	mov	r6, r1
 81229a2:	3901      	subs	r1, #1
 81229a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 81229a8:	2b30      	cmp	r3, #48	@ 0x30
 81229aa:	d0f9      	beq.n	81229a0 <_dtoa_r+0x570>
 81229ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 81229b0:	e758      	b.n	8122864 <_dtoa_r+0x434>
 81229b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 81229b6:	e7d5      	b.n	8122964 <_dtoa_r+0x534>
 81229b8:	d10b      	bne.n	81229d2 <_dtoa_r+0x5a2>
 81229ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 81229be:	ee26 6b07 	vmul.f64	d6, d6, d7
 81229c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 81229c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 81229ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81229ce:	f2c0 8161 	blt.w	8122c94 <_dtoa_r+0x864>
 81229d2:	2400      	movs	r4, #0
 81229d4:	4625      	mov	r5, r4
 81229d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81229d8:	43db      	mvns	r3, r3
 81229da:	9304      	str	r3, [sp, #16]
 81229dc:	463e      	mov	r6, r7
 81229de:	f04f 0800 	mov.w	r8, #0
 81229e2:	4621      	mov	r1, r4
 81229e4:	4648      	mov	r0, r9
 81229e6:	f000 fbb9 	bl	812315c <_Bfree>
 81229ea:	2d00      	cmp	r5, #0
 81229ec:	d0de      	beq.n	81229ac <_dtoa_r+0x57c>
 81229ee:	f1b8 0f00 	cmp.w	r8, #0
 81229f2:	d005      	beq.n	8122a00 <_dtoa_r+0x5d0>
 81229f4:	45a8      	cmp	r8, r5
 81229f6:	d003      	beq.n	8122a00 <_dtoa_r+0x5d0>
 81229f8:	4641      	mov	r1, r8
 81229fa:	4648      	mov	r0, r9
 81229fc:	f000 fbae 	bl	812315c <_Bfree>
 8122a00:	4629      	mov	r1, r5
 8122a02:	4648      	mov	r0, r9
 8122a04:	f000 fbaa 	bl	812315c <_Bfree>
 8122a08:	e7d0      	b.n	81229ac <_dtoa_r+0x57c>
 8122a0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8122a0e:	4633      	mov	r3, r6
 8122a10:	461e      	mov	r6, r3
 8122a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8122a16:	2a39      	cmp	r2, #57	@ 0x39
 8122a18:	d106      	bne.n	8122a28 <_dtoa_r+0x5f8>
 8122a1a:	429f      	cmp	r7, r3
 8122a1c:	d1f8      	bne.n	8122a10 <_dtoa_r+0x5e0>
 8122a1e:	9a04      	ldr	r2, [sp, #16]
 8122a20:	3201      	adds	r2, #1
 8122a22:	9204      	str	r2, [sp, #16]
 8122a24:	2230      	movs	r2, #48	@ 0x30
 8122a26:	703a      	strb	r2, [r7, #0]
 8122a28:	781a      	ldrb	r2, [r3, #0]
 8122a2a:	3201      	adds	r2, #1
 8122a2c:	701a      	strb	r2, [r3, #0]
 8122a2e:	e7bd      	b.n	81229ac <_dtoa_r+0x57c>
 8122a30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8122a34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8122a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8122a3c:	f47f aeef 	bne.w	812281e <_dtoa_r+0x3ee>
 8122a40:	e710      	b.n	8122864 <_dtoa_r+0x434>
 8122a42:	bf00      	nop
 8122a44:	08128d58 	.word	0x08128d58
 8122a48:	08128d30 	.word	0x08128d30
 8122a4c:	9908      	ldr	r1, [sp, #32]
 8122a4e:	2900      	cmp	r1, #0
 8122a50:	f000 80e3 	beq.w	8122c1a <_dtoa_r+0x7ea>
 8122a54:	9907      	ldr	r1, [sp, #28]
 8122a56:	2901      	cmp	r1, #1
 8122a58:	f300 80c8 	bgt.w	8122bec <_dtoa_r+0x7bc>
 8122a5c:	2d00      	cmp	r5, #0
 8122a5e:	f000 80c1 	beq.w	8122be4 <_dtoa_r+0x7b4>
 8122a62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8122a66:	9e05      	ldr	r6, [sp, #20]
 8122a68:	461c      	mov	r4, r3
 8122a6a:	9304      	str	r3, [sp, #16]
 8122a6c:	9b05      	ldr	r3, [sp, #20]
 8122a6e:	4413      	add	r3, r2
 8122a70:	9305      	str	r3, [sp, #20]
 8122a72:	9b06      	ldr	r3, [sp, #24]
 8122a74:	2101      	movs	r1, #1
 8122a76:	4413      	add	r3, r2
 8122a78:	4648      	mov	r0, r9
 8122a7a:	9306      	str	r3, [sp, #24]
 8122a7c:	f000 fc22 	bl	81232c4 <__i2b>
 8122a80:	9b04      	ldr	r3, [sp, #16]
 8122a82:	4605      	mov	r5, r0
 8122a84:	b166      	cbz	r6, 8122aa0 <_dtoa_r+0x670>
 8122a86:	9a06      	ldr	r2, [sp, #24]
 8122a88:	2a00      	cmp	r2, #0
 8122a8a:	dd09      	ble.n	8122aa0 <_dtoa_r+0x670>
 8122a8c:	42b2      	cmp	r2, r6
 8122a8e:	9905      	ldr	r1, [sp, #20]
 8122a90:	bfa8      	it	ge
 8122a92:	4632      	movge	r2, r6
 8122a94:	1a89      	subs	r1, r1, r2
 8122a96:	9105      	str	r1, [sp, #20]
 8122a98:	9906      	ldr	r1, [sp, #24]
 8122a9a:	1ab6      	subs	r6, r6, r2
 8122a9c:	1a8a      	subs	r2, r1, r2
 8122a9e:	9206      	str	r2, [sp, #24]
 8122aa0:	b1fb      	cbz	r3, 8122ae2 <_dtoa_r+0x6b2>
 8122aa2:	9a08      	ldr	r2, [sp, #32]
 8122aa4:	2a00      	cmp	r2, #0
 8122aa6:	f000 80bc 	beq.w	8122c22 <_dtoa_r+0x7f2>
 8122aaa:	b19c      	cbz	r4, 8122ad4 <_dtoa_r+0x6a4>
 8122aac:	4629      	mov	r1, r5
 8122aae:	4622      	mov	r2, r4
 8122ab0:	4648      	mov	r0, r9
 8122ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8122ab4:	f000 fcc6 	bl	8123444 <__pow5mult>
 8122ab8:	9a01      	ldr	r2, [sp, #4]
 8122aba:	4601      	mov	r1, r0
 8122abc:	4605      	mov	r5, r0
 8122abe:	4648      	mov	r0, r9
 8122ac0:	f000 fc16 	bl	81232f0 <__multiply>
 8122ac4:	9901      	ldr	r1, [sp, #4]
 8122ac6:	9004      	str	r0, [sp, #16]
 8122ac8:	4648      	mov	r0, r9
 8122aca:	f000 fb47 	bl	812315c <_Bfree>
 8122ace:	9a04      	ldr	r2, [sp, #16]
 8122ad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8122ad2:	9201      	str	r2, [sp, #4]
 8122ad4:	1b1a      	subs	r2, r3, r4
 8122ad6:	d004      	beq.n	8122ae2 <_dtoa_r+0x6b2>
 8122ad8:	9901      	ldr	r1, [sp, #4]
 8122ada:	4648      	mov	r0, r9
 8122adc:	f000 fcb2 	bl	8123444 <__pow5mult>
 8122ae0:	9001      	str	r0, [sp, #4]
 8122ae2:	2101      	movs	r1, #1
 8122ae4:	4648      	mov	r0, r9
 8122ae6:	f000 fbed 	bl	81232c4 <__i2b>
 8122aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8122aec:	4604      	mov	r4, r0
 8122aee:	2b00      	cmp	r3, #0
 8122af0:	f000 81d0 	beq.w	8122e94 <_dtoa_r+0xa64>
 8122af4:	461a      	mov	r2, r3
 8122af6:	4601      	mov	r1, r0
 8122af8:	4648      	mov	r0, r9
 8122afa:	f000 fca3 	bl	8123444 <__pow5mult>
 8122afe:	9b07      	ldr	r3, [sp, #28]
 8122b00:	2b01      	cmp	r3, #1
 8122b02:	4604      	mov	r4, r0
 8122b04:	f300 8095 	bgt.w	8122c32 <_dtoa_r+0x802>
 8122b08:	9b02      	ldr	r3, [sp, #8]
 8122b0a:	2b00      	cmp	r3, #0
 8122b0c:	f040 808b 	bne.w	8122c26 <_dtoa_r+0x7f6>
 8122b10:	9b03      	ldr	r3, [sp, #12]
 8122b12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8122b16:	2a00      	cmp	r2, #0
 8122b18:	f040 8087 	bne.w	8122c2a <_dtoa_r+0x7fa>
 8122b1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8122b20:	0d12      	lsrs	r2, r2, #20
 8122b22:	0512      	lsls	r2, r2, #20
 8122b24:	2a00      	cmp	r2, #0
 8122b26:	f000 8082 	beq.w	8122c2e <_dtoa_r+0x7fe>
 8122b2a:	9b05      	ldr	r3, [sp, #20]
 8122b2c:	3301      	adds	r3, #1
 8122b2e:	9305      	str	r3, [sp, #20]
 8122b30:	9b06      	ldr	r3, [sp, #24]
 8122b32:	3301      	adds	r3, #1
 8122b34:	9306      	str	r3, [sp, #24]
 8122b36:	2301      	movs	r3, #1
 8122b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8122b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8122b3c:	2b00      	cmp	r3, #0
 8122b3e:	f000 81af 	beq.w	8122ea0 <_dtoa_r+0xa70>
 8122b42:	6922      	ldr	r2, [r4, #16]
 8122b44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8122b48:	6910      	ldr	r0, [r2, #16]
 8122b4a:	f000 fb6f 	bl	812322c <__hi0bits>
 8122b4e:	f1c0 0020 	rsb	r0, r0, #32
 8122b52:	9b06      	ldr	r3, [sp, #24]
 8122b54:	4418      	add	r0, r3
 8122b56:	f010 001f 	ands.w	r0, r0, #31
 8122b5a:	d076      	beq.n	8122c4a <_dtoa_r+0x81a>
 8122b5c:	f1c0 0220 	rsb	r2, r0, #32
 8122b60:	2a04      	cmp	r2, #4
 8122b62:	dd69      	ble.n	8122c38 <_dtoa_r+0x808>
 8122b64:	9b05      	ldr	r3, [sp, #20]
 8122b66:	f1c0 001c 	rsb	r0, r0, #28
 8122b6a:	4403      	add	r3, r0
 8122b6c:	9305      	str	r3, [sp, #20]
 8122b6e:	9b06      	ldr	r3, [sp, #24]
 8122b70:	4406      	add	r6, r0
 8122b72:	4403      	add	r3, r0
 8122b74:	9306      	str	r3, [sp, #24]
 8122b76:	9b05      	ldr	r3, [sp, #20]
 8122b78:	2b00      	cmp	r3, #0
 8122b7a:	dd05      	ble.n	8122b88 <_dtoa_r+0x758>
 8122b7c:	9901      	ldr	r1, [sp, #4]
 8122b7e:	461a      	mov	r2, r3
 8122b80:	4648      	mov	r0, r9
 8122b82:	f000 fcb9 	bl	81234f8 <__lshift>
 8122b86:	9001      	str	r0, [sp, #4]
 8122b88:	9b06      	ldr	r3, [sp, #24]
 8122b8a:	2b00      	cmp	r3, #0
 8122b8c:	dd05      	ble.n	8122b9a <_dtoa_r+0x76a>
 8122b8e:	4621      	mov	r1, r4
 8122b90:	461a      	mov	r2, r3
 8122b92:	4648      	mov	r0, r9
 8122b94:	f000 fcb0 	bl	81234f8 <__lshift>
 8122b98:	4604      	mov	r4, r0
 8122b9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8122b9c:	2b00      	cmp	r3, #0
 8122b9e:	d056      	beq.n	8122c4e <_dtoa_r+0x81e>
 8122ba0:	9801      	ldr	r0, [sp, #4]
 8122ba2:	4621      	mov	r1, r4
 8122ba4:	f000 fd14 	bl	81235d0 <__mcmp>
 8122ba8:	2800      	cmp	r0, #0
 8122baa:	da50      	bge.n	8122c4e <_dtoa_r+0x81e>
 8122bac:	f108 33ff 	add.w	r3, r8, #4294967295
 8122bb0:	9304      	str	r3, [sp, #16]
 8122bb2:	9901      	ldr	r1, [sp, #4]
 8122bb4:	2300      	movs	r3, #0
 8122bb6:	220a      	movs	r2, #10
 8122bb8:	4648      	mov	r0, r9
 8122bba:	f000 faf1 	bl	81231a0 <__multadd>
 8122bbe:	9b08      	ldr	r3, [sp, #32]
 8122bc0:	9001      	str	r0, [sp, #4]
 8122bc2:	2b00      	cmp	r3, #0
 8122bc4:	f000 816e 	beq.w	8122ea4 <_dtoa_r+0xa74>
 8122bc8:	4629      	mov	r1, r5
 8122bca:	2300      	movs	r3, #0
 8122bcc:	220a      	movs	r2, #10
 8122bce:	4648      	mov	r0, r9
 8122bd0:	f000 fae6 	bl	81231a0 <__multadd>
 8122bd4:	f1bb 0f00 	cmp.w	fp, #0
 8122bd8:	4605      	mov	r5, r0
 8122bda:	dc64      	bgt.n	8122ca6 <_dtoa_r+0x876>
 8122bdc:	9b07      	ldr	r3, [sp, #28]
 8122bde:	2b02      	cmp	r3, #2
 8122be0:	dc3e      	bgt.n	8122c60 <_dtoa_r+0x830>
 8122be2:	e060      	b.n	8122ca6 <_dtoa_r+0x876>
 8122be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8122be6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8122bea:	e73c      	b.n	8122a66 <_dtoa_r+0x636>
 8122bec:	f10a 34ff 	add.w	r4, sl, #4294967295
 8122bf0:	42a3      	cmp	r3, r4
 8122bf2:	bfbf      	itttt	lt
 8122bf4:	1ae2      	sublt	r2, r4, r3
 8122bf6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8122bf8:	189b      	addlt	r3, r3, r2
 8122bfa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8122bfc:	bfae      	itee	ge
 8122bfe:	1b1c      	subge	r4, r3, r4
 8122c00:	4623      	movlt	r3, r4
 8122c02:	2400      	movlt	r4, #0
 8122c04:	f1ba 0f00 	cmp.w	sl, #0
 8122c08:	bfb5      	itete	lt
 8122c0a:	9a05      	ldrlt	r2, [sp, #20]
 8122c0c:	9e05      	ldrge	r6, [sp, #20]
 8122c0e:	eba2 060a 	sublt.w	r6, r2, sl
 8122c12:	4652      	movge	r2, sl
 8122c14:	bfb8      	it	lt
 8122c16:	2200      	movlt	r2, #0
 8122c18:	e727      	b.n	8122a6a <_dtoa_r+0x63a>
 8122c1a:	9e05      	ldr	r6, [sp, #20]
 8122c1c:	9d08      	ldr	r5, [sp, #32]
 8122c1e:	461c      	mov	r4, r3
 8122c20:	e730      	b.n	8122a84 <_dtoa_r+0x654>
 8122c22:	461a      	mov	r2, r3
 8122c24:	e758      	b.n	8122ad8 <_dtoa_r+0x6a8>
 8122c26:	2300      	movs	r3, #0
 8122c28:	e786      	b.n	8122b38 <_dtoa_r+0x708>
 8122c2a:	9b02      	ldr	r3, [sp, #8]
 8122c2c:	e784      	b.n	8122b38 <_dtoa_r+0x708>
 8122c2e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8122c30:	e783      	b.n	8122b3a <_dtoa_r+0x70a>
 8122c32:	2300      	movs	r3, #0
 8122c34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8122c36:	e784      	b.n	8122b42 <_dtoa_r+0x712>
 8122c38:	d09d      	beq.n	8122b76 <_dtoa_r+0x746>
 8122c3a:	9b05      	ldr	r3, [sp, #20]
 8122c3c:	321c      	adds	r2, #28
 8122c3e:	4413      	add	r3, r2
 8122c40:	9305      	str	r3, [sp, #20]
 8122c42:	9b06      	ldr	r3, [sp, #24]
 8122c44:	4416      	add	r6, r2
 8122c46:	4413      	add	r3, r2
 8122c48:	e794      	b.n	8122b74 <_dtoa_r+0x744>
 8122c4a:	4602      	mov	r2, r0
 8122c4c:	e7f5      	b.n	8122c3a <_dtoa_r+0x80a>
 8122c4e:	f1ba 0f00 	cmp.w	sl, #0
 8122c52:	f8cd 8010 	str.w	r8, [sp, #16]
 8122c56:	46d3      	mov	fp, sl
 8122c58:	dc21      	bgt.n	8122c9e <_dtoa_r+0x86e>
 8122c5a:	9b07      	ldr	r3, [sp, #28]
 8122c5c:	2b02      	cmp	r3, #2
 8122c5e:	dd1e      	ble.n	8122c9e <_dtoa_r+0x86e>
 8122c60:	f1bb 0f00 	cmp.w	fp, #0
 8122c64:	f47f aeb7 	bne.w	81229d6 <_dtoa_r+0x5a6>
 8122c68:	4621      	mov	r1, r4
 8122c6a:	465b      	mov	r3, fp
 8122c6c:	2205      	movs	r2, #5
 8122c6e:	4648      	mov	r0, r9
 8122c70:	f000 fa96 	bl	81231a0 <__multadd>
 8122c74:	4601      	mov	r1, r0
 8122c76:	4604      	mov	r4, r0
 8122c78:	9801      	ldr	r0, [sp, #4]
 8122c7a:	f000 fca9 	bl	81235d0 <__mcmp>
 8122c7e:	2800      	cmp	r0, #0
 8122c80:	f77f aea9 	ble.w	81229d6 <_dtoa_r+0x5a6>
 8122c84:	463e      	mov	r6, r7
 8122c86:	2331      	movs	r3, #49	@ 0x31
 8122c88:	f806 3b01 	strb.w	r3, [r6], #1
 8122c8c:	9b04      	ldr	r3, [sp, #16]
 8122c8e:	3301      	adds	r3, #1
 8122c90:	9304      	str	r3, [sp, #16]
 8122c92:	e6a4      	b.n	81229de <_dtoa_r+0x5ae>
 8122c94:	f8cd 8010 	str.w	r8, [sp, #16]
 8122c98:	4654      	mov	r4, sl
 8122c9a:	4625      	mov	r5, r4
 8122c9c:	e7f2      	b.n	8122c84 <_dtoa_r+0x854>
 8122c9e:	9b08      	ldr	r3, [sp, #32]
 8122ca0:	2b00      	cmp	r3, #0
 8122ca2:	f000 8103 	beq.w	8122eac <_dtoa_r+0xa7c>
 8122ca6:	2e00      	cmp	r6, #0
 8122ca8:	dd05      	ble.n	8122cb6 <_dtoa_r+0x886>
 8122caa:	4629      	mov	r1, r5
 8122cac:	4632      	mov	r2, r6
 8122cae:	4648      	mov	r0, r9
 8122cb0:	f000 fc22 	bl	81234f8 <__lshift>
 8122cb4:	4605      	mov	r5, r0
 8122cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8122cb8:	2b00      	cmp	r3, #0
 8122cba:	d058      	beq.n	8122d6e <_dtoa_r+0x93e>
 8122cbc:	6869      	ldr	r1, [r5, #4]
 8122cbe:	4648      	mov	r0, r9
 8122cc0:	f000 fa0c 	bl	81230dc <_Balloc>
 8122cc4:	4606      	mov	r6, r0
 8122cc6:	b928      	cbnz	r0, 8122cd4 <_dtoa_r+0x8a4>
 8122cc8:	4b82      	ldr	r3, [pc, #520]	@ (8122ed4 <_dtoa_r+0xaa4>)
 8122cca:	4602      	mov	r2, r0
 8122ccc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8122cd0:	f7ff bbc7 	b.w	8122462 <_dtoa_r+0x32>
 8122cd4:	692a      	ldr	r2, [r5, #16]
 8122cd6:	3202      	adds	r2, #2
 8122cd8:	0092      	lsls	r2, r2, #2
 8122cda:	f105 010c 	add.w	r1, r5, #12
 8122cde:	300c      	adds	r0, #12
 8122ce0:	f7ff faf1 	bl	81222c6 <memcpy>
 8122ce4:	2201      	movs	r2, #1
 8122ce6:	4631      	mov	r1, r6
 8122ce8:	4648      	mov	r0, r9
 8122cea:	f000 fc05 	bl	81234f8 <__lshift>
 8122cee:	1c7b      	adds	r3, r7, #1
 8122cf0:	9305      	str	r3, [sp, #20]
 8122cf2:	eb07 030b 	add.w	r3, r7, fp
 8122cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8122cf8:	9b02      	ldr	r3, [sp, #8]
 8122cfa:	f003 0301 	and.w	r3, r3, #1
 8122cfe:	46a8      	mov	r8, r5
 8122d00:	9308      	str	r3, [sp, #32]
 8122d02:	4605      	mov	r5, r0
 8122d04:	9b05      	ldr	r3, [sp, #20]
 8122d06:	9801      	ldr	r0, [sp, #4]
 8122d08:	4621      	mov	r1, r4
 8122d0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8122d0e:	f7ff fb07 	bl	8122320 <quorem>
 8122d12:	4641      	mov	r1, r8
 8122d14:	9002      	str	r0, [sp, #8]
 8122d16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8122d1a:	9801      	ldr	r0, [sp, #4]
 8122d1c:	f000 fc58 	bl	81235d0 <__mcmp>
 8122d20:	462a      	mov	r2, r5
 8122d22:	9006      	str	r0, [sp, #24]
 8122d24:	4621      	mov	r1, r4
 8122d26:	4648      	mov	r0, r9
 8122d28:	f000 fc6e 	bl	8123608 <__mdiff>
 8122d2c:	68c2      	ldr	r2, [r0, #12]
 8122d2e:	4606      	mov	r6, r0
 8122d30:	b9fa      	cbnz	r2, 8122d72 <_dtoa_r+0x942>
 8122d32:	4601      	mov	r1, r0
 8122d34:	9801      	ldr	r0, [sp, #4]
 8122d36:	f000 fc4b 	bl	81235d0 <__mcmp>
 8122d3a:	4602      	mov	r2, r0
 8122d3c:	4631      	mov	r1, r6
 8122d3e:	4648      	mov	r0, r9
 8122d40:	920a      	str	r2, [sp, #40]	@ 0x28
 8122d42:	f000 fa0b 	bl	812315c <_Bfree>
 8122d46:	9b07      	ldr	r3, [sp, #28]
 8122d48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8122d4a:	9e05      	ldr	r6, [sp, #20]
 8122d4c:	ea43 0102 	orr.w	r1, r3, r2
 8122d50:	9b08      	ldr	r3, [sp, #32]
 8122d52:	4319      	orrs	r1, r3
 8122d54:	d10f      	bne.n	8122d76 <_dtoa_r+0x946>
 8122d56:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8122d5a:	d028      	beq.n	8122dae <_dtoa_r+0x97e>
 8122d5c:	9b06      	ldr	r3, [sp, #24]
 8122d5e:	2b00      	cmp	r3, #0
 8122d60:	dd02      	ble.n	8122d68 <_dtoa_r+0x938>
 8122d62:	9b02      	ldr	r3, [sp, #8]
 8122d64:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8122d68:	f88b a000 	strb.w	sl, [fp]
 8122d6c:	e639      	b.n	81229e2 <_dtoa_r+0x5b2>
 8122d6e:	4628      	mov	r0, r5
 8122d70:	e7bd      	b.n	8122cee <_dtoa_r+0x8be>
 8122d72:	2201      	movs	r2, #1
 8122d74:	e7e2      	b.n	8122d3c <_dtoa_r+0x90c>
 8122d76:	9b06      	ldr	r3, [sp, #24]
 8122d78:	2b00      	cmp	r3, #0
 8122d7a:	db04      	blt.n	8122d86 <_dtoa_r+0x956>
 8122d7c:	9907      	ldr	r1, [sp, #28]
 8122d7e:	430b      	orrs	r3, r1
 8122d80:	9908      	ldr	r1, [sp, #32]
 8122d82:	430b      	orrs	r3, r1
 8122d84:	d120      	bne.n	8122dc8 <_dtoa_r+0x998>
 8122d86:	2a00      	cmp	r2, #0
 8122d88:	ddee      	ble.n	8122d68 <_dtoa_r+0x938>
 8122d8a:	9901      	ldr	r1, [sp, #4]
 8122d8c:	2201      	movs	r2, #1
 8122d8e:	4648      	mov	r0, r9
 8122d90:	f000 fbb2 	bl	81234f8 <__lshift>
 8122d94:	4621      	mov	r1, r4
 8122d96:	9001      	str	r0, [sp, #4]
 8122d98:	f000 fc1a 	bl	81235d0 <__mcmp>
 8122d9c:	2800      	cmp	r0, #0
 8122d9e:	dc03      	bgt.n	8122da8 <_dtoa_r+0x978>
 8122da0:	d1e2      	bne.n	8122d68 <_dtoa_r+0x938>
 8122da2:	f01a 0f01 	tst.w	sl, #1
 8122da6:	d0df      	beq.n	8122d68 <_dtoa_r+0x938>
 8122da8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8122dac:	d1d9      	bne.n	8122d62 <_dtoa_r+0x932>
 8122dae:	2339      	movs	r3, #57	@ 0x39
 8122db0:	f88b 3000 	strb.w	r3, [fp]
 8122db4:	4633      	mov	r3, r6
 8122db6:	461e      	mov	r6, r3
 8122db8:	3b01      	subs	r3, #1
 8122dba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8122dbe:	2a39      	cmp	r2, #57	@ 0x39
 8122dc0:	d053      	beq.n	8122e6a <_dtoa_r+0xa3a>
 8122dc2:	3201      	adds	r2, #1
 8122dc4:	701a      	strb	r2, [r3, #0]
 8122dc6:	e60c      	b.n	81229e2 <_dtoa_r+0x5b2>
 8122dc8:	2a00      	cmp	r2, #0
 8122dca:	dd07      	ble.n	8122ddc <_dtoa_r+0x9ac>
 8122dcc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8122dd0:	d0ed      	beq.n	8122dae <_dtoa_r+0x97e>
 8122dd2:	f10a 0301 	add.w	r3, sl, #1
 8122dd6:	f88b 3000 	strb.w	r3, [fp]
 8122dda:	e602      	b.n	81229e2 <_dtoa_r+0x5b2>
 8122ddc:	9b05      	ldr	r3, [sp, #20]
 8122dde:	9a05      	ldr	r2, [sp, #20]
 8122de0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8122de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8122de6:	4293      	cmp	r3, r2
 8122de8:	d029      	beq.n	8122e3e <_dtoa_r+0xa0e>
 8122dea:	9901      	ldr	r1, [sp, #4]
 8122dec:	2300      	movs	r3, #0
 8122dee:	220a      	movs	r2, #10
 8122df0:	4648      	mov	r0, r9
 8122df2:	f000 f9d5 	bl	81231a0 <__multadd>
 8122df6:	45a8      	cmp	r8, r5
 8122df8:	9001      	str	r0, [sp, #4]
 8122dfa:	f04f 0300 	mov.w	r3, #0
 8122dfe:	f04f 020a 	mov.w	r2, #10
 8122e02:	4641      	mov	r1, r8
 8122e04:	4648      	mov	r0, r9
 8122e06:	d107      	bne.n	8122e18 <_dtoa_r+0x9e8>
 8122e08:	f000 f9ca 	bl	81231a0 <__multadd>
 8122e0c:	4680      	mov	r8, r0
 8122e0e:	4605      	mov	r5, r0
 8122e10:	9b05      	ldr	r3, [sp, #20]
 8122e12:	3301      	adds	r3, #1
 8122e14:	9305      	str	r3, [sp, #20]
 8122e16:	e775      	b.n	8122d04 <_dtoa_r+0x8d4>
 8122e18:	f000 f9c2 	bl	81231a0 <__multadd>
 8122e1c:	4629      	mov	r1, r5
 8122e1e:	4680      	mov	r8, r0
 8122e20:	2300      	movs	r3, #0
 8122e22:	220a      	movs	r2, #10
 8122e24:	4648      	mov	r0, r9
 8122e26:	f000 f9bb 	bl	81231a0 <__multadd>
 8122e2a:	4605      	mov	r5, r0
 8122e2c:	e7f0      	b.n	8122e10 <_dtoa_r+0x9e0>
 8122e2e:	f1bb 0f00 	cmp.w	fp, #0
 8122e32:	bfcc      	ite	gt
 8122e34:	465e      	movgt	r6, fp
 8122e36:	2601      	movle	r6, #1
 8122e38:	443e      	add	r6, r7
 8122e3a:	f04f 0800 	mov.w	r8, #0
 8122e3e:	9901      	ldr	r1, [sp, #4]
 8122e40:	2201      	movs	r2, #1
 8122e42:	4648      	mov	r0, r9
 8122e44:	f000 fb58 	bl	81234f8 <__lshift>
 8122e48:	4621      	mov	r1, r4
 8122e4a:	9001      	str	r0, [sp, #4]
 8122e4c:	f000 fbc0 	bl	81235d0 <__mcmp>
 8122e50:	2800      	cmp	r0, #0
 8122e52:	dcaf      	bgt.n	8122db4 <_dtoa_r+0x984>
 8122e54:	d102      	bne.n	8122e5c <_dtoa_r+0xa2c>
 8122e56:	f01a 0f01 	tst.w	sl, #1
 8122e5a:	d1ab      	bne.n	8122db4 <_dtoa_r+0x984>
 8122e5c:	4633      	mov	r3, r6
 8122e5e:	461e      	mov	r6, r3
 8122e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8122e64:	2a30      	cmp	r2, #48	@ 0x30
 8122e66:	d0fa      	beq.n	8122e5e <_dtoa_r+0xa2e>
 8122e68:	e5bb      	b.n	81229e2 <_dtoa_r+0x5b2>
 8122e6a:	429f      	cmp	r7, r3
 8122e6c:	d1a3      	bne.n	8122db6 <_dtoa_r+0x986>
 8122e6e:	9b04      	ldr	r3, [sp, #16]
 8122e70:	3301      	adds	r3, #1
 8122e72:	9304      	str	r3, [sp, #16]
 8122e74:	2331      	movs	r3, #49	@ 0x31
 8122e76:	703b      	strb	r3, [r7, #0]
 8122e78:	e5b3      	b.n	81229e2 <_dtoa_r+0x5b2>
 8122e7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8122e7c:	4f16      	ldr	r7, [pc, #88]	@ (8122ed8 <_dtoa_r+0xaa8>)
 8122e7e:	b11b      	cbz	r3, 8122e88 <_dtoa_r+0xa58>
 8122e80:	f107 0308 	add.w	r3, r7, #8
 8122e84:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8122e86:	6013      	str	r3, [r2, #0]
 8122e88:	4638      	mov	r0, r7
 8122e8a:	b011      	add	sp, #68	@ 0x44
 8122e8c:	ecbd 8b02 	vpop	{d8}
 8122e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8122e94:	9b07      	ldr	r3, [sp, #28]
 8122e96:	2b01      	cmp	r3, #1
 8122e98:	f77f ae36 	ble.w	8122b08 <_dtoa_r+0x6d8>
 8122e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8122e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8122ea0:	2001      	movs	r0, #1
 8122ea2:	e656      	b.n	8122b52 <_dtoa_r+0x722>
 8122ea4:	f1bb 0f00 	cmp.w	fp, #0
 8122ea8:	f77f aed7 	ble.w	8122c5a <_dtoa_r+0x82a>
 8122eac:	463e      	mov	r6, r7
 8122eae:	9801      	ldr	r0, [sp, #4]
 8122eb0:	4621      	mov	r1, r4
 8122eb2:	f7ff fa35 	bl	8122320 <quorem>
 8122eb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8122eba:	f806 ab01 	strb.w	sl, [r6], #1
 8122ebe:	1bf2      	subs	r2, r6, r7
 8122ec0:	4593      	cmp	fp, r2
 8122ec2:	ddb4      	ble.n	8122e2e <_dtoa_r+0x9fe>
 8122ec4:	9901      	ldr	r1, [sp, #4]
 8122ec6:	2300      	movs	r3, #0
 8122ec8:	220a      	movs	r2, #10
 8122eca:	4648      	mov	r0, r9
 8122ecc:	f000 f968 	bl	81231a0 <__multadd>
 8122ed0:	9001      	str	r0, [sp, #4]
 8122ed2:	e7ec      	b.n	8122eae <_dtoa_r+0xa7e>
 8122ed4:	08128cb9 	.word	0x08128cb9
 8122ed8:	08128c54 	.word	0x08128c54

08122edc <_free_r>:
 8122edc:	b538      	push	{r3, r4, r5, lr}
 8122ede:	4605      	mov	r5, r0
 8122ee0:	2900      	cmp	r1, #0
 8122ee2:	d041      	beq.n	8122f68 <_free_r+0x8c>
 8122ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8122ee8:	1f0c      	subs	r4, r1, #4
 8122eea:	2b00      	cmp	r3, #0
 8122eec:	bfb8      	it	lt
 8122eee:	18e4      	addlt	r4, r4, r3
 8122ef0:	f000 f8e8 	bl	81230c4 <__malloc_lock>
 8122ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8122f6c <_free_r+0x90>)
 8122ef6:	6813      	ldr	r3, [r2, #0]
 8122ef8:	b933      	cbnz	r3, 8122f08 <_free_r+0x2c>
 8122efa:	6063      	str	r3, [r4, #4]
 8122efc:	6014      	str	r4, [r2, #0]
 8122efe:	4628      	mov	r0, r5
 8122f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8122f04:	f000 b8e4 	b.w	81230d0 <__malloc_unlock>
 8122f08:	42a3      	cmp	r3, r4
 8122f0a:	d908      	bls.n	8122f1e <_free_r+0x42>
 8122f0c:	6820      	ldr	r0, [r4, #0]
 8122f0e:	1821      	adds	r1, r4, r0
 8122f10:	428b      	cmp	r3, r1
 8122f12:	bf01      	itttt	eq
 8122f14:	6819      	ldreq	r1, [r3, #0]
 8122f16:	685b      	ldreq	r3, [r3, #4]
 8122f18:	1809      	addeq	r1, r1, r0
 8122f1a:	6021      	streq	r1, [r4, #0]
 8122f1c:	e7ed      	b.n	8122efa <_free_r+0x1e>
 8122f1e:	461a      	mov	r2, r3
 8122f20:	685b      	ldr	r3, [r3, #4]
 8122f22:	b10b      	cbz	r3, 8122f28 <_free_r+0x4c>
 8122f24:	42a3      	cmp	r3, r4
 8122f26:	d9fa      	bls.n	8122f1e <_free_r+0x42>
 8122f28:	6811      	ldr	r1, [r2, #0]
 8122f2a:	1850      	adds	r0, r2, r1
 8122f2c:	42a0      	cmp	r0, r4
 8122f2e:	d10b      	bne.n	8122f48 <_free_r+0x6c>
 8122f30:	6820      	ldr	r0, [r4, #0]
 8122f32:	4401      	add	r1, r0
 8122f34:	1850      	adds	r0, r2, r1
 8122f36:	4283      	cmp	r3, r0
 8122f38:	6011      	str	r1, [r2, #0]
 8122f3a:	d1e0      	bne.n	8122efe <_free_r+0x22>
 8122f3c:	6818      	ldr	r0, [r3, #0]
 8122f3e:	685b      	ldr	r3, [r3, #4]
 8122f40:	6053      	str	r3, [r2, #4]
 8122f42:	4408      	add	r0, r1
 8122f44:	6010      	str	r0, [r2, #0]
 8122f46:	e7da      	b.n	8122efe <_free_r+0x22>
 8122f48:	d902      	bls.n	8122f50 <_free_r+0x74>
 8122f4a:	230c      	movs	r3, #12
 8122f4c:	602b      	str	r3, [r5, #0]
 8122f4e:	e7d6      	b.n	8122efe <_free_r+0x22>
 8122f50:	6820      	ldr	r0, [r4, #0]
 8122f52:	1821      	adds	r1, r4, r0
 8122f54:	428b      	cmp	r3, r1
 8122f56:	bf04      	itt	eq
 8122f58:	6819      	ldreq	r1, [r3, #0]
 8122f5a:	685b      	ldreq	r3, [r3, #4]
 8122f5c:	6063      	str	r3, [r4, #4]
 8122f5e:	bf04      	itt	eq
 8122f60:	1809      	addeq	r1, r1, r0
 8122f62:	6021      	streq	r1, [r4, #0]
 8122f64:	6054      	str	r4, [r2, #4]
 8122f66:	e7ca      	b.n	8122efe <_free_r+0x22>
 8122f68:	bd38      	pop	{r3, r4, r5, pc}
 8122f6a:	bf00      	nop
 8122f6c:	24012858 	.word	0x24012858

08122f70 <malloc>:
 8122f70:	4b02      	ldr	r3, [pc, #8]	@ (8122f7c <malloc+0xc>)
 8122f72:	4601      	mov	r1, r0
 8122f74:	6818      	ldr	r0, [r3, #0]
 8122f76:	f000 b825 	b.w	8122fc4 <_malloc_r>
 8122f7a:	bf00      	nop
 8122f7c:	24000060 	.word	0x24000060

08122f80 <sbrk_aligned>:
 8122f80:	b570      	push	{r4, r5, r6, lr}
 8122f82:	4e0f      	ldr	r6, [pc, #60]	@ (8122fc0 <sbrk_aligned+0x40>)
 8122f84:	460c      	mov	r4, r1
 8122f86:	6831      	ldr	r1, [r6, #0]
 8122f88:	4605      	mov	r5, r0
 8122f8a:	b911      	cbnz	r1, 8122f92 <sbrk_aligned+0x12>
 8122f8c:	f001 f804 	bl	8123f98 <_sbrk_r>
 8122f90:	6030      	str	r0, [r6, #0]
 8122f92:	4621      	mov	r1, r4
 8122f94:	4628      	mov	r0, r5
 8122f96:	f000 ffff 	bl	8123f98 <_sbrk_r>
 8122f9a:	1c43      	adds	r3, r0, #1
 8122f9c:	d103      	bne.n	8122fa6 <sbrk_aligned+0x26>
 8122f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8122fa2:	4620      	mov	r0, r4
 8122fa4:	bd70      	pop	{r4, r5, r6, pc}
 8122fa6:	1cc4      	adds	r4, r0, #3
 8122fa8:	f024 0403 	bic.w	r4, r4, #3
 8122fac:	42a0      	cmp	r0, r4
 8122fae:	d0f8      	beq.n	8122fa2 <sbrk_aligned+0x22>
 8122fb0:	1a21      	subs	r1, r4, r0
 8122fb2:	4628      	mov	r0, r5
 8122fb4:	f000 fff0 	bl	8123f98 <_sbrk_r>
 8122fb8:	3001      	adds	r0, #1
 8122fba:	d1f2      	bne.n	8122fa2 <sbrk_aligned+0x22>
 8122fbc:	e7ef      	b.n	8122f9e <sbrk_aligned+0x1e>
 8122fbe:	bf00      	nop
 8122fc0:	24012854 	.word	0x24012854

08122fc4 <_malloc_r>:
 8122fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8122fc8:	1ccd      	adds	r5, r1, #3
 8122fca:	f025 0503 	bic.w	r5, r5, #3
 8122fce:	3508      	adds	r5, #8
 8122fd0:	2d0c      	cmp	r5, #12
 8122fd2:	bf38      	it	cc
 8122fd4:	250c      	movcc	r5, #12
 8122fd6:	2d00      	cmp	r5, #0
 8122fd8:	4606      	mov	r6, r0
 8122fda:	db01      	blt.n	8122fe0 <_malloc_r+0x1c>
 8122fdc:	42a9      	cmp	r1, r5
 8122fde:	d904      	bls.n	8122fea <_malloc_r+0x26>
 8122fe0:	230c      	movs	r3, #12
 8122fe2:	6033      	str	r3, [r6, #0]
 8122fe4:	2000      	movs	r0, #0
 8122fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8122fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81230c0 <_malloc_r+0xfc>
 8122fee:	f000 f869 	bl	81230c4 <__malloc_lock>
 8122ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8122ff6:	461c      	mov	r4, r3
 8122ff8:	bb44      	cbnz	r4, 812304c <_malloc_r+0x88>
 8122ffa:	4629      	mov	r1, r5
 8122ffc:	4630      	mov	r0, r6
 8122ffe:	f7ff ffbf 	bl	8122f80 <sbrk_aligned>
 8123002:	1c43      	adds	r3, r0, #1
 8123004:	4604      	mov	r4, r0
 8123006:	d158      	bne.n	81230ba <_malloc_r+0xf6>
 8123008:	f8d8 4000 	ldr.w	r4, [r8]
 812300c:	4627      	mov	r7, r4
 812300e:	2f00      	cmp	r7, #0
 8123010:	d143      	bne.n	812309a <_malloc_r+0xd6>
 8123012:	2c00      	cmp	r4, #0
 8123014:	d04b      	beq.n	81230ae <_malloc_r+0xea>
 8123016:	6823      	ldr	r3, [r4, #0]
 8123018:	4639      	mov	r1, r7
 812301a:	4630      	mov	r0, r6
 812301c:	eb04 0903 	add.w	r9, r4, r3
 8123020:	f000 ffba 	bl	8123f98 <_sbrk_r>
 8123024:	4581      	cmp	r9, r0
 8123026:	d142      	bne.n	81230ae <_malloc_r+0xea>
 8123028:	6821      	ldr	r1, [r4, #0]
 812302a:	1a6d      	subs	r5, r5, r1
 812302c:	4629      	mov	r1, r5
 812302e:	4630      	mov	r0, r6
 8123030:	f7ff ffa6 	bl	8122f80 <sbrk_aligned>
 8123034:	3001      	adds	r0, #1
 8123036:	d03a      	beq.n	81230ae <_malloc_r+0xea>
 8123038:	6823      	ldr	r3, [r4, #0]
 812303a:	442b      	add	r3, r5
 812303c:	6023      	str	r3, [r4, #0]
 812303e:	f8d8 3000 	ldr.w	r3, [r8]
 8123042:	685a      	ldr	r2, [r3, #4]
 8123044:	bb62      	cbnz	r2, 81230a0 <_malloc_r+0xdc>
 8123046:	f8c8 7000 	str.w	r7, [r8]
 812304a:	e00f      	b.n	812306c <_malloc_r+0xa8>
 812304c:	6822      	ldr	r2, [r4, #0]
 812304e:	1b52      	subs	r2, r2, r5
 8123050:	d420      	bmi.n	8123094 <_malloc_r+0xd0>
 8123052:	2a0b      	cmp	r2, #11
 8123054:	d917      	bls.n	8123086 <_malloc_r+0xc2>
 8123056:	1961      	adds	r1, r4, r5
 8123058:	42a3      	cmp	r3, r4
 812305a:	6025      	str	r5, [r4, #0]
 812305c:	bf18      	it	ne
 812305e:	6059      	strne	r1, [r3, #4]
 8123060:	6863      	ldr	r3, [r4, #4]
 8123062:	bf08      	it	eq
 8123064:	f8c8 1000 	streq.w	r1, [r8]
 8123068:	5162      	str	r2, [r4, r5]
 812306a:	604b      	str	r3, [r1, #4]
 812306c:	4630      	mov	r0, r6
 812306e:	f000 f82f 	bl	81230d0 <__malloc_unlock>
 8123072:	f104 000b 	add.w	r0, r4, #11
 8123076:	1d23      	adds	r3, r4, #4
 8123078:	f020 0007 	bic.w	r0, r0, #7
 812307c:	1ac2      	subs	r2, r0, r3
 812307e:	bf1c      	itt	ne
 8123080:	1a1b      	subne	r3, r3, r0
 8123082:	50a3      	strne	r3, [r4, r2]
 8123084:	e7af      	b.n	8122fe6 <_malloc_r+0x22>
 8123086:	6862      	ldr	r2, [r4, #4]
 8123088:	42a3      	cmp	r3, r4
 812308a:	bf0c      	ite	eq
 812308c:	f8c8 2000 	streq.w	r2, [r8]
 8123090:	605a      	strne	r2, [r3, #4]
 8123092:	e7eb      	b.n	812306c <_malloc_r+0xa8>
 8123094:	4623      	mov	r3, r4
 8123096:	6864      	ldr	r4, [r4, #4]
 8123098:	e7ae      	b.n	8122ff8 <_malloc_r+0x34>
 812309a:	463c      	mov	r4, r7
 812309c:	687f      	ldr	r7, [r7, #4]
 812309e:	e7b6      	b.n	812300e <_malloc_r+0x4a>
 81230a0:	461a      	mov	r2, r3
 81230a2:	685b      	ldr	r3, [r3, #4]
 81230a4:	42a3      	cmp	r3, r4
 81230a6:	d1fb      	bne.n	81230a0 <_malloc_r+0xdc>
 81230a8:	2300      	movs	r3, #0
 81230aa:	6053      	str	r3, [r2, #4]
 81230ac:	e7de      	b.n	812306c <_malloc_r+0xa8>
 81230ae:	230c      	movs	r3, #12
 81230b0:	6033      	str	r3, [r6, #0]
 81230b2:	4630      	mov	r0, r6
 81230b4:	f000 f80c 	bl	81230d0 <__malloc_unlock>
 81230b8:	e794      	b.n	8122fe4 <_malloc_r+0x20>
 81230ba:	6005      	str	r5, [r0, #0]
 81230bc:	e7d6      	b.n	812306c <_malloc_r+0xa8>
 81230be:	bf00      	nop
 81230c0:	24012858 	.word	0x24012858

081230c4 <__malloc_lock>:
 81230c4:	4801      	ldr	r0, [pc, #4]	@ (81230cc <__malloc_lock+0x8>)
 81230c6:	f7ff b8fc 	b.w	81222c2 <__retarget_lock_acquire_recursive>
 81230ca:	bf00      	nop
 81230cc:	24012850 	.word	0x24012850

081230d0 <__malloc_unlock>:
 81230d0:	4801      	ldr	r0, [pc, #4]	@ (81230d8 <__malloc_unlock+0x8>)
 81230d2:	f7ff b8f7 	b.w	81222c4 <__retarget_lock_release_recursive>
 81230d6:	bf00      	nop
 81230d8:	24012850 	.word	0x24012850

081230dc <_Balloc>:
 81230dc:	b570      	push	{r4, r5, r6, lr}
 81230de:	69c6      	ldr	r6, [r0, #28]
 81230e0:	4604      	mov	r4, r0
 81230e2:	460d      	mov	r5, r1
 81230e4:	b976      	cbnz	r6, 8123104 <_Balloc+0x28>
 81230e6:	2010      	movs	r0, #16
 81230e8:	f7ff ff42 	bl	8122f70 <malloc>
 81230ec:	4602      	mov	r2, r0
 81230ee:	61e0      	str	r0, [r4, #28]
 81230f0:	b920      	cbnz	r0, 81230fc <_Balloc+0x20>
 81230f2:	4b18      	ldr	r3, [pc, #96]	@ (8123154 <_Balloc+0x78>)
 81230f4:	4818      	ldr	r0, [pc, #96]	@ (8123158 <_Balloc+0x7c>)
 81230f6:	216b      	movs	r1, #107	@ 0x6b
 81230f8:	f7ff f8f4 	bl	81222e4 <__assert_func>
 81230fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8123100:	6006      	str	r6, [r0, #0]
 8123102:	60c6      	str	r6, [r0, #12]
 8123104:	69e6      	ldr	r6, [r4, #28]
 8123106:	68f3      	ldr	r3, [r6, #12]
 8123108:	b183      	cbz	r3, 812312c <_Balloc+0x50>
 812310a:	69e3      	ldr	r3, [r4, #28]
 812310c:	68db      	ldr	r3, [r3, #12]
 812310e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8123112:	b9b8      	cbnz	r0, 8123144 <_Balloc+0x68>
 8123114:	2101      	movs	r1, #1
 8123116:	fa01 f605 	lsl.w	r6, r1, r5
 812311a:	1d72      	adds	r2, r6, #5
 812311c:	0092      	lsls	r2, r2, #2
 812311e:	4620      	mov	r0, r4
 8123120:	f000 ff51 	bl	8123fc6 <_calloc_r>
 8123124:	b160      	cbz	r0, 8123140 <_Balloc+0x64>
 8123126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 812312a:	e00e      	b.n	812314a <_Balloc+0x6e>
 812312c:	2221      	movs	r2, #33	@ 0x21
 812312e:	2104      	movs	r1, #4
 8123130:	4620      	mov	r0, r4
 8123132:	f000 ff48 	bl	8123fc6 <_calloc_r>
 8123136:	69e3      	ldr	r3, [r4, #28]
 8123138:	60f0      	str	r0, [r6, #12]
 812313a:	68db      	ldr	r3, [r3, #12]
 812313c:	2b00      	cmp	r3, #0
 812313e:	d1e4      	bne.n	812310a <_Balloc+0x2e>
 8123140:	2000      	movs	r0, #0
 8123142:	bd70      	pop	{r4, r5, r6, pc}
 8123144:	6802      	ldr	r2, [r0, #0]
 8123146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 812314a:	2300      	movs	r3, #0
 812314c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8123150:	e7f7      	b.n	8123142 <_Balloc+0x66>
 8123152:	bf00      	nop
 8123154:	08128a74 	.word	0x08128a74
 8123158:	08128cca 	.word	0x08128cca

0812315c <_Bfree>:
 812315c:	b570      	push	{r4, r5, r6, lr}
 812315e:	69c6      	ldr	r6, [r0, #28]
 8123160:	4605      	mov	r5, r0
 8123162:	460c      	mov	r4, r1
 8123164:	b976      	cbnz	r6, 8123184 <_Bfree+0x28>
 8123166:	2010      	movs	r0, #16
 8123168:	f7ff ff02 	bl	8122f70 <malloc>
 812316c:	4602      	mov	r2, r0
 812316e:	61e8      	str	r0, [r5, #28]
 8123170:	b920      	cbnz	r0, 812317c <_Bfree+0x20>
 8123172:	4b09      	ldr	r3, [pc, #36]	@ (8123198 <_Bfree+0x3c>)
 8123174:	4809      	ldr	r0, [pc, #36]	@ (812319c <_Bfree+0x40>)
 8123176:	218f      	movs	r1, #143	@ 0x8f
 8123178:	f7ff f8b4 	bl	81222e4 <__assert_func>
 812317c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8123180:	6006      	str	r6, [r0, #0]
 8123182:	60c6      	str	r6, [r0, #12]
 8123184:	b13c      	cbz	r4, 8123196 <_Bfree+0x3a>
 8123186:	69eb      	ldr	r3, [r5, #28]
 8123188:	6862      	ldr	r2, [r4, #4]
 812318a:	68db      	ldr	r3, [r3, #12]
 812318c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8123190:	6021      	str	r1, [r4, #0]
 8123192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8123196:	bd70      	pop	{r4, r5, r6, pc}
 8123198:	08128a74 	.word	0x08128a74
 812319c:	08128cca 	.word	0x08128cca

081231a0 <__multadd>:
 81231a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81231a4:	690d      	ldr	r5, [r1, #16]
 81231a6:	4607      	mov	r7, r0
 81231a8:	460c      	mov	r4, r1
 81231aa:	461e      	mov	r6, r3
 81231ac:	f101 0c14 	add.w	ip, r1, #20
 81231b0:	2000      	movs	r0, #0
 81231b2:	f8dc 3000 	ldr.w	r3, [ip]
 81231b6:	b299      	uxth	r1, r3
 81231b8:	fb02 6101 	mla	r1, r2, r1, r6
 81231bc:	0c1e      	lsrs	r6, r3, #16
 81231be:	0c0b      	lsrs	r3, r1, #16
 81231c0:	fb02 3306 	mla	r3, r2, r6, r3
 81231c4:	b289      	uxth	r1, r1
 81231c6:	3001      	adds	r0, #1
 81231c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 81231cc:	4285      	cmp	r5, r0
 81231ce:	f84c 1b04 	str.w	r1, [ip], #4
 81231d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 81231d6:	dcec      	bgt.n	81231b2 <__multadd+0x12>
 81231d8:	b30e      	cbz	r6, 812321e <__multadd+0x7e>
 81231da:	68a3      	ldr	r3, [r4, #8]
 81231dc:	42ab      	cmp	r3, r5
 81231de:	dc19      	bgt.n	8123214 <__multadd+0x74>
 81231e0:	6861      	ldr	r1, [r4, #4]
 81231e2:	4638      	mov	r0, r7
 81231e4:	3101      	adds	r1, #1
 81231e6:	f7ff ff79 	bl	81230dc <_Balloc>
 81231ea:	4680      	mov	r8, r0
 81231ec:	b928      	cbnz	r0, 81231fa <__multadd+0x5a>
 81231ee:	4602      	mov	r2, r0
 81231f0:	4b0c      	ldr	r3, [pc, #48]	@ (8123224 <__multadd+0x84>)
 81231f2:	480d      	ldr	r0, [pc, #52]	@ (8123228 <__multadd+0x88>)
 81231f4:	21ba      	movs	r1, #186	@ 0xba
 81231f6:	f7ff f875 	bl	81222e4 <__assert_func>
 81231fa:	6922      	ldr	r2, [r4, #16]
 81231fc:	3202      	adds	r2, #2
 81231fe:	f104 010c 	add.w	r1, r4, #12
 8123202:	0092      	lsls	r2, r2, #2
 8123204:	300c      	adds	r0, #12
 8123206:	f7ff f85e 	bl	81222c6 <memcpy>
 812320a:	4621      	mov	r1, r4
 812320c:	4638      	mov	r0, r7
 812320e:	f7ff ffa5 	bl	812315c <_Bfree>
 8123212:	4644      	mov	r4, r8
 8123214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8123218:	3501      	adds	r5, #1
 812321a:	615e      	str	r6, [r3, #20]
 812321c:	6125      	str	r5, [r4, #16]
 812321e:	4620      	mov	r0, r4
 8123220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8123224:	08128cb9 	.word	0x08128cb9
 8123228:	08128cca 	.word	0x08128cca

0812322c <__hi0bits>:
 812322c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8123230:	4603      	mov	r3, r0
 8123232:	bf36      	itet	cc
 8123234:	0403      	lslcc	r3, r0, #16
 8123236:	2000      	movcs	r0, #0
 8123238:	2010      	movcc	r0, #16
 812323a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 812323e:	bf3c      	itt	cc
 8123240:	021b      	lslcc	r3, r3, #8
 8123242:	3008      	addcc	r0, #8
 8123244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8123248:	bf3c      	itt	cc
 812324a:	011b      	lslcc	r3, r3, #4
 812324c:	3004      	addcc	r0, #4
 812324e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8123252:	bf3c      	itt	cc
 8123254:	009b      	lslcc	r3, r3, #2
 8123256:	3002      	addcc	r0, #2
 8123258:	2b00      	cmp	r3, #0
 812325a:	db05      	blt.n	8123268 <__hi0bits+0x3c>
 812325c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8123260:	f100 0001 	add.w	r0, r0, #1
 8123264:	bf08      	it	eq
 8123266:	2020      	moveq	r0, #32
 8123268:	4770      	bx	lr

0812326a <__lo0bits>:
 812326a:	6803      	ldr	r3, [r0, #0]
 812326c:	4602      	mov	r2, r0
 812326e:	f013 0007 	ands.w	r0, r3, #7
 8123272:	d00b      	beq.n	812328c <__lo0bits+0x22>
 8123274:	07d9      	lsls	r1, r3, #31
 8123276:	d421      	bmi.n	81232bc <__lo0bits+0x52>
 8123278:	0798      	lsls	r0, r3, #30
 812327a:	bf49      	itett	mi
 812327c:	085b      	lsrmi	r3, r3, #1
 812327e:	089b      	lsrpl	r3, r3, #2
 8123280:	2001      	movmi	r0, #1
 8123282:	6013      	strmi	r3, [r2, #0]
 8123284:	bf5c      	itt	pl
 8123286:	6013      	strpl	r3, [r2, #0]
 8123288:	2002      	movpl	r0, #2
 812328a:	4770      	bx	lr
 812328c:	b299      	uxth	r1, r3
 812328e:	b909      	cbnz	r1, 8123294 <__lo0bits+0x2a>
 8123290:	0c1b      	lsrs	r3, r3, #16
 8123292:	2010      	movs	r0, #16
 8123294:	b2d9      	uxtb	r1, r3
 8123296:	b909      	cbnz	r1, 812329c <__lo0bits+0x32>
 8123298:	3008      	adds	r0, #8
 812329a:	0a1b      	lsrs	r3, r3, #8
 812329c:	0719      	lsls	r1, r3, #28
 812329e:	bf04      	itt	eq
 81232a0:	091b      	lsreq	r3, r3, #4
 81232a2:	3004      	addeq	r0, #4
 81232a4:	0799      	lsls	r1, r3, #30
 81232a6:	bf04      	itt	eq
 81232a8:	089b      	lsreq	r3, r3, #2
 81232aa:	3002      	addeq	r0, #2
 81232ac:	07d9      	lsls	r1, r3, #31
 81232ae:	d403      	bmi.n	81232b8 <__lo0bits+0x4e>
 81232b0:	085b      	lsrs	r3, r3, #1
 81232b2:	f100 0001 	add.w	r0, r0, #1
 81232b6:	d003      	beq.n	81232c0 <__lo0bits+0x56>
 81232b8:	6013      	str	r3, [r2, #0]
 81232ba:	4770      	bx	lr
 81232bc:	2000      	movs	r0, #0
 81232be:	4770      	bx	lr
 81232c0:	2020      	movs	r0, #32
 81232c2:	4770      	bx	lr

081232c4 <__i2b>:
 81232c4:	b510      	push	{r4, lr}
 81232c6:	460c      	mov	r4, r1
 81232c8:	2101      	movs	r1, #1
 81232ca:	f7ff ff07 	bl	81230dc <_Balloc>
 81232ce:	4602      	mov	r2, r0
 81232d0:	b928      	cbnz	r0, 81232de <__i2b+0x1a>
 81232d2:	4b05      	ldr	r3, [pc, #20]	@ (81232e8 <__i2b+0x24>)
 81232d4:	4805      	ldr	r0, [pc, #20]	@ (81232ec <__i2b+0x28>)
 81232d6:	f240 1145 	movw	r1, #325	@ 0x145
 81232da:	f7ff f803 	bl	81222e4 <__assert_func>
 81232de:	2301      	movs	r3, #1
 81232e0:	6144      	str	r4, [r0, #20]
 81232e2:	6103      	str	r3, [r0, #16]
 81232e4:	bd10      	pop	{r4, pc}
 81232e6:	bf00      	nop
 81232e8:	08128cb9 	.word	0x08128cb9
 81232ec:	08128cca 	.word	0x08128cca

081232f0 <__multiply>:
 81232f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81232f4:	4614      	mov	r4, r2
 81232f6:	690a      	ldr	r2, [r1, #16]
 81232f8:	6923      	ldr	r3, [r4, #16]
 81232fa:	429a      	cmp	r2, r3
 81232fc:	bfa8      	it	ge
 81232fe:	4623      	movge	r3, r4
 8123300:	460f      	mov	r7, r1
 8123302:	bfa4      	itt	ge
 8123304:	460c      	movge	r4, r1
 8123306:	461f      	movge	r7, r3
 8123308:	f8d4 a010 	ldr.w	sl, [r4, #16]
 812330c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8123310:	68a3      	ldr	r3, [r4, #8]
 8123312:	6861      	ldr	r1, [r4, #4]
 8123314:	eb0a 0609 	add.w	r6, sl, r9
 8123318:	42b3      	cmp	r3, r6
 812331a:	b085      	sub	sp, #20
 812331c:	bfb8      	it	lt
 812331e:	3101      	addlt	r1, #1
 8123320:	f7ff fedc 	bl	81230dc <_Balloc>
 8123324:	b930      	cbnz	r0, 8123334 <__multiply+0x44>
 8123326:	4602      	mov	r2, r0
 8123328:	4b44      	ldr	r3, [pc, #272]	@ (812343c <__multiply+0x14c>)
 812332a:	4845      	ldr	r0, [pc, #276]	@ (8123440 <__multiply+0x150>)
 812332c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8123330:	f7fe ffd8 	bl	81222e4 <__assert_func>
 8123334:	f100 0514 	add.w	r5, r0, #20
 8123338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 812333c:	462b      	mov	r3, r5
 812333e:	2200      	movs	r2, #0
 8123340:	4543      	cmp	r3, r8
 8123342:	d321      	bcc.n	8123388 <__multiply+0x98>
 8123344:	f107 0114 	add.w	r1, r7, #20
 8123348:	f104 0214 	add.w	r2, r4, #20
 812334c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8123350:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8123354:	9302      	str	r3, [sp, #8]
 8123356:	1b13      	subs	r3, r2, r4
 8123358:	3b15      	subs	r3, #21
 812335a:	f023 0303 	bic.w	r3, r3, #3
 812335e:	3304      	adds	r3, #4
 8123360:	f104 0715 	add.w	r7, r4, #21
 8123364:	42ba      	cmp	r2, r7
 8123366:	bf38      	it	cc
 8123368:	2304      	movcc	r3, #4
 812336a:	9301      	str	r3, [sp, #4]
 812336c:	9b02      	ldr	r3, [sp, #8]
 812336e:	9103      	str	r1, [sp, #12]
 8123370:	428b      	cmp	r3, r1
 8123372:	d80c      	bhi.n	812338e <__multiply+0x9e>
 8123374:	2e00      	cmp	r6, #0
 8123376:	dd03      	ble.n	8123380 <__multiply+0x90>
 8123378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 812337c:	2b00      	cmp	r3, #0
 812337e:	d05b      	beq.n	8123438 <__multiply+0x148>
 8123380:	6106      	str	r6, [r0, #16]
 8123382:	b005      	add	sp, #20
 8123384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8123388:	f843 2b04 	str.w	r2, [r3], #4
 812338c:	e7d8      	b.n	8123340 <__multiply+0x50>
 812338e:	f8b1 a000 	ldrh.w	sl, [r1]
 8123392:	f1ba 0f00 	cmp.w	sl, #0
 8123396:	d024      	beq.n	81233e2 <__multiply+0xf2>
 8123398:	f104 0e14 	add.w	lr, r4, #20
 812339c:	46a9      	mov	r9, r5
 812339e:	f04f 0c00 	mov.w	ip, #0
 81233a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 81233a6:	f8d9 3000 	ldr.w	r3, [r9]
 81233aa:	fa1f fb87 	uxth.w	fp, r7
 81233ae:	b29b      	uxth	r3, r3
 81233b0:	fb0a 330b 	mla	r3, sl, fp, r3
 81233b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 81233b8:	f8d9 7000 	ldr.w	r7, [r9]
 81233bc:	4463      	add	r3, ip
 81233be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81233c2:	fb0a c70b 	mla	r7, sl, fp, ip
 81233c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 81233ca:	b29b      	uxth	r3, r3
 81233cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81233d0:	4572      	cmp	r2, lr
 81233d2:	f849 3b04 	str.w	r3, [r9], #4
 81233d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81233da:	d8e2      	bhi.n	81233a2 <__multiply+0xb2>
 81233dc:	9b01      	ldr	r3, [sp, #4]
 81233de:	f845 c003 	str.w	ip, [r5, r3]
 81233e2:	9b03      	ldr	r3, [sp, #12]
 81233e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81233e8:	3104      	adds	r1, #4
 81233ea:	f1b9 0f00 	cmp.w	r9, #0
 81233ee:	d021      	beq.n	8123434 <__multiply+0x144>
 81233f0:	682b      	ldr	r3, [r5, #0]
 81233f2:	f104 0c14 	add.w	ip, r4, #20
 81233f6:	46ae      	mov	lr, r5
 81233f8:	f04f 0a00 	mov.w	sl, #0
 81233fc:	f8bc b000 	ldrh.w	fp, [ip]
 8123400:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8123404:	fb09 770b 	mla	r7, r9, fp, r7
 8123408:	4457      	add	r7, sl
 812340a:	b29b      	uxth	r3, r3
 812340c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8123410:	f84e 3b04 	str.w	r3, [lr], #4
 8123414:	f85c 3b04 	ldr.w	r3, [ip], #4
 8123418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 812341c:	f8be 3000 	ldrh.w	r3, [lr]
 8123420:	fb09 330a 	mla	r3, r9, sl, r3
 8123424:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8123428:	4562      	cmp	r2, ip
 812342a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 812342e:	d8e5      	bhi.n	81233fc <__multiply+0x10c>
 8123430:	9f01      	ldr	r7, [sp, #4]
 8123432:	51eb      	str	r3, [r5, r7]
 8123434:	3504      	adds	r5, #4
 8123436:	e799      	b.n	812336c <__multiply+0x7c>
 8123438:	3e01      	subs	r6, #1
 812343a:	e79b      	b.n	8123374 <__multiply+0x84>
 812343c:	08128cb9 	.word	0x08128cb9
 8123440:	08128cca 	.word	0x08128cca

08123444 <__pow5mult>:
 8123444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8123448:	4615      	mov	r5, r2
 812344a:	f012 0203 	ands.w	r2, r2, #3
 812344e:	4607      	mov	r7, r0
 8123450:	460e      	mov	r6, r1
 8123452:	d007      	beq.n	8123464 <__pow5mult+0x20>
 8123454:	4c25      	ldr	r4, [pc, #148]	@ (81234ec <__pow5mult+0xa8>)
 8123456:	3a01      	subs	r2, #1
 8123458:	2300      	movs	r3, #0
 812345a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 812345e:	f7ff fe9f 	bl	81231a0 <__multadd>
 8123462:	4606      	mov	r6, r0
 8123464:	10ad      	asrs	r5, r5, #2
 8123466:	d03d      	beq.n	81234e4 <__pow5mult+0xa0>
 8123468:	69fc      	ldr	r4, [r7, #28]
 812346a:	b97c      	cbnz	r4, 812348c <__pow5mult+0x48>
 812346c:	2010      	movs	r0, #16
 812346e:	f7ff fd7f 	bl	8122f70 <malloc>
 8123472:	4602      	mov	r2, r0
 8123474:	61f8      	str	r0, [r7, #28]
 8123476:	b928      	cbnz	r0, 8123484 <__pow5mult+0x40>
 8123478:	4b1d      	ldr	r3, [pc, #116]	@ (81234f0 <__pow5mult+0xac>)
 812347a:	481e      	ldr	r0, [pc, #120]	@ (81234f4 <__pow5mult+0xb0>)
 812347c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8123480:	f7fe ff30 	bl	81222e4 <__assert_func>
 8123484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8123488:	6004      	str	r4, [r0, #0]
 812348a:	60c4      	str	r4, [r0, #12]
 812348c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8123490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8123494:	b94c      	cbnz	r4, 81234aa <__pow5mult+0x66>
 8123496:	f240 2171 	movw	r1, #625	@ 0x271
 812349a:	4638      	mov	r0, r7
 812349c:	f7ff ff12 	bl	81232c4 <__i2b>
 81234a0:	2300      	movs	r3, #0
 81234a2:	f8c8 0008 	str.w	r0, [r8, #8]
 81234a6:	4604      	mov	r4, r0
 81234a8:	6003      	str	r3, [r0, #0]
 81234aa:	f04f 0900 	mov.w	r9, #0
 81234ae:	07eb      	lsls	r3, r5, #31
 81234b0:	d50a      	bpl.n	81234c8 <__pow5mult+0x84>
 81234b2:	4631      	mov	r1, r6
 81234b4:	4622      	mov	r2, r4
 81234b6:	4638      	mov	r0, r7
 81234b8:	f7ff ff1a 	bl	81232f0 <__multiply>
 81234bc:	4631      	mov	r1, r6
 81234be:	4680      	mov	r8, r0
 81234c0:	4638      	mov	r0, r7
 81234c2:	f7ff fe4b 	bl	812315c <_Bfree>
 81234c6:	4646      	mov	r6, r8
 81234c8:	106d      	asrs	r5, r5, #1
 81234ca:	d00b      	beq.n	81234e4 <__pow5mult+0xa0>
 81234cc:	6820      	ldr	r0, [r4, #0]
 81234ce:	b938      	cbnz	r0, 81234e0 <__pow5mult+0x9c>
 81234d0:	4622      	mov	r2, r4
 81234d2:	4621      	mov	r1, r4
 81234d4:	4638      	mov	r0, r7
 81234d6:	f7ff ff0b 	bl	81232f0 <__multiply>
 81234da:	6020      	str	r0, [r4, #0]
 81234dc:	f8c0 9000 	str.w	r9, [r0]
 81234e0:	4604      	mov	r4, r0
 81234e2:	e7e4      	b.n	81234ae <__pow5mult+0x6a>
 81234e4:	4630      	mov	r0, r6
 81234e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81234ea:	bf00      	nop
 81234ec:	08128d24 	.word	0x08128d24
 81234f0:	08128a74 	.word	0x08128a74
 81234f4:	08128cca 	.word	0x08128cca

081234f8 <__lshift>:
 81234f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81234fc:	460c      	mov	r4, r1
 81234fe:	6849      	ldr	r1, [r1, #4]
 8123500:	6923      	ldr	r3, [r4, #16]
 8123502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8123506:	68a3      	ldr	r3, [r4, #8]
 8123508:	4607      	mov	r7, r0
 812350a:	4691      	mov	r9, r2
 812350c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8123510:	f108 0601 	add.w	r6, r8, #1
 8123514:	42b3      	cmp	r3, r6
 8123516:	db0b      	blt.n	8123530 <__lshift+0x38>
 8123518:	4638      	mov	r0, r7
 812351a:	f7ff fddf 	bl	81230dc <_Balloc>
 812351e:	4605      	mov	r5, r0
 8123520:	b948      	cbnz	r0, 8123536 <__lshift+0x3e>
 8123522:	4602      	mov	r2, r0
 8123524:	4b28      	ldr	r3, [pc, #160]	@ (81235c8 <__lshift+0xd0>)
 8123526:	4829      	ldr	r0, [pc, #164]	@ (81235cc <__lshift+0xd4>)
 8123528:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 812352c:	f7fe feda 	bl	81222e4 <__assert_func>
 8123530:	3101      	adds	r1, #1
 8123532:	005b      	lsls	r3, r3, #1
 8123534:	e7ee      	b.n	8123514 <__lshift+0x1c>
 8123536:	2300      	movs	r3, #0
 8123538:	f100 0114 	add.w	r1, r0, #20
 812353c:	f100 0210 	add.w	r2, r0, #16
 8123540:	4618      	mov	r0, r3
 8123542:	4553      	cmp	r3, sl
 8123544:	db33      	blt.n	81235ae <__lshift+0xb6>
 8123546:	6920      	ldr	r0, [r4, #16]
 8123548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 812354c:	f104 0314 	add.w	r3, r4, #20
 8123550:	f019 091f 	ands.w	r9, r9, #31
 8123554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8123558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 812355c:	d02b      	beq.n	81235b6 <__lshift+0xbe>
 812355e:	f1c9 0e20 	rsb	lr, r9, #32
 8123562:	468a      	mov	sl, r1
 8123564:	2200      	movs	r2, #0
 8123566:	6818      	ldr	r0, [r3, #0]
 8123568:	fa00 f009 	lsl.w	r0, r0, r9
 812356c:	4310      	orrs	r0, r2
 812356e:	f84a 0b04 	str.w	r0, [sl], #4
 8123572:	f853 2b04 	ldr.w	r2, [r3], #4
 8123576:	459c      	cmp	ip, r3
 8123578:	fa22 f20e 	lsr.w	r2, r2, lr
 812357c:	d8f3      	bhi.n	8123566 <__lshift+0x6e>
 812357e:	ebac 0304 	sub.w	r3, ip, r4
 8123582:	3b15      	subs	r3, #21
 8123584:	f023 0303 	bic.w	r3, r3, #3
 8123588:	3304      	adds	r3, #4
 812358a:	f104 0015 	add.w	r0, r4, #21
 812358e:	4584      	cmp	ip, r0
 8123590:	bf38      	it	cc
 8123592:	2304      	movcc	r3, #4
 8123594:	50ca      	str	r2, [r1, r3]
 8123596:	b10a      	cbz	r2, 812359c <__lshift+0xa4>
 8123598:	f108 0602 	add.w	r6, r8, #2
 812359c:	3e01      	subs	r6, #1
 812359e:	4638      	mov	r0, r7
 81235a0:	612e      	str	r6, [r5, #16]
 81235a2:	4621      	mov	r1, r4
 81235a4:	f7ff fdda 	bl	812315c <_Bfree>
 81235a8:	4628      	mov	r0, r5
 81235aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81235ae:	f842 0f04 	str.w	r0, [r2, #4]!
 81235b2:	3301      	adds	r3, #1
 81235b4:	e7c5      	b.n	8123542 <__lshift+0x4a>
 81235b6:	3904      	subs	r1, #4
 81235b8:	f853 2b04 	ldr.w	r2, [r3], #4
 81235bc:	f841 2f04 	str.w	r2, [r1, #4]!
 81235c0:	459c      	cmp	ip, r3
 81235c2:	d8f9      	bhi.n	81235b8 <__lshift+0xc0>
 81235c4:	e7ea      	b.n	812359c <__lshift+0xa4>
 81235c6:	bf00      	nop
 81235c8:	08128cb9 	.word	0x08128cb9
 81235cc:	08128cca 	.word	0x08128cca

081235d0 <__mcmp>:
 81235d0:	690a      	ldr	r2, [r1, #16]
 81235d2:	4603      	mov	r3, r0
 81235d4:	6900      	ldr	r0, [r0, #16]
 81235d6:	1a80      	subs	r0, r0, r2
 81235d8:	b530      	push	{r4, r5, lr}
 81235da:	d10e      	bne.n	81235fa <__mcmp+0x2a>
 81235dc:	3314      	adds	r3, #20
 81235de:	3114      	adds	r1, #20
 81235e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 81235e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 81235e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 81235ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 81235f0:	4295      	cmp	r5, r2
 81235f2:	d003      	beq.n	81235fc <__mcmp+0x2c>
 81235f4:	d205      	bcs.n	8123602 <__mcmp+0x32>
 81235f6:	f04f 30ff 	mov.w	r0, #4294967295
 81235fa:	bd30      	pop	{r4, r5, pc}
 81235fc:	42a3      	cmp	r3, r4
 81235fe:	d3f3      	bcc.n	81235e8 <__mcmp+0x18>
 8123600:	e7fb      	b.n	81235fa <__mcmp+0x2a>
 8123602:	2001      	movs	r0, #1
 8123604:	e7f9      	b.n	81235fa <__mcmp+0x2a>
	...

08123608 <__mdiff>:
 8123608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 812360c:	4689      	mov	r9, r1
 812360e:	4606      	mov	r6, r0
 8123610:	4611      	mov	r1, r2
 8123612:	4648      	mov	r0, r9
 8123614:	4614      	mov	r4, r2
 8123616:	f7ff ffdb 	bl	81235d0 <__mcmp>
 812361a:	1e05      	subs	r5, r0, #0
 812361c:	d112      	bne.n	8123644 <__mdiff+0x3c>
 812361e:	4629      	mov	r1, r5
 8123620:	4630      	mov	r0, r6
 8123622:	f7ff fd5b 	bl	81230dc <_Balloc>
 8123626:	4602      	mov	r2, r0
 8123628:	b928      	cbnz	r0, 8123636 <__mdiff+0x2e>
 812362a:	4b3f      	ldr	r3, [pc, #252]	@ (8123728 <__mdiff+0x120>)
 812362c:	f240 2137 	movw	r1, #567	@ 0x237
 8123630:	483e      	ldr	r0, [pc, #248]	@ (812372c <__mdiff+0x124>)
 8123632:	f7fe fe57 	bl	81222e4 <__assert_func>
 8123636:	2301      	movs	r3, #1
 8123638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 812363c:	4610      	mov	r0, r2
 812363e:	b003      	add	sp, #12
 8123640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8123644:	bfbc      	itt	lt
 8123646:	464b      	movlt	r3, r9
 8123648:	46a1      	movlt	r9, r4
 812364a:	4630      	mov	r0, r6
 812364c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8123650:	bfba      	itte	lt
 8123652:	461c      	movlt	r4, r3
 8123654:	2501      	movlt	r5, #1
 8123656:	2500      	movge	r5, #0
 8123658:	f7ff fd40 	bl	81230dc <_Balloc>
 812365c:	4602      	mov	r2, r0
 812365e:	b918      	cbnz	r0, 8123668 <__mdiff+0x60>
 8123660:	4b31      	ldr	r3, [pc, #196]	@ (8123728 <__mdiff+0x120>)
 8123662:	f240 2145 	movw	r1, #581	@ 0x245
 8123666:	e7e3      	b.n	8123630 <__mdiff+0x28>
 8123668:	f8d9 7010 	ldr.w	r7, [r9, #16]
 812366c:	6926      	ldr	r6, [r4, #16]
 812366e:	60c5      	str	r5, [r0, #12]
 8123670:	f109 0310 	add.w	r3, r9, #16
 8123674:	f109 0514 	add.w	r5, r9, #20
 8123678:	f104 0e14 	add.w	lr, r4, #20
 812367c:	f100 0b14 	add.w	fp, r0, #20
 8123680:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8123684:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8123688:	9301      	str	r3, [sp, #4]
 812368a:	46d9      	mov	r9, fp
 812368c:	f04f 0c00 	mov.w	ip, #0
 8123690:	9b01      	ldr	r3, [sp, #4]
 8123692:	f85e 0b04 	ldr.w	r0, [lr], #4
 8123696:	f853 af04 	ldr.w	sl, [r3, #4]!
 812369a:	9301      	str	r3, [sp, #4]
 812369c:	fa1f f38a 	uxth.w	r3, sl
 81236a0:	4619      	mov	r1, r3
 81236a2:	b283      	uxth	r3, r0
 81236a4:	1acb      	subs	r3, r1, r3
 81236a6:	0c00      	lsrs	r0, r0, #16
 81236a8:	4463      	add	r3, ip
 81236aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 81236ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 81236b2:	b29b      	uxth	r3, r3
 81236b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 81236b8:	4576      	cmp	r6, lr
 81236ba:	f849 3b04 	str.w	r3, [r9], #4
 81236be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 81236c2:	d8e5      	bhi.n	8123690 <__mdiff+0x88>
 81236c4:	1b33      	subs	r3, r6, r4
 81236c6:	3b15      	subs	r3, #21
 81236c8:	f023 0303 	bic.w	r3, r3, #3
 81236cc:	3415      	adds	r4, #21
 81236ce:	3304      	adds	r3, #4
 81236d0:	42a6      	cmp	r6, r4
 81236d2:	bf38      	it	cc
 81236d4:	2304      	movcc	r3, #4
 81236d6:	441d      	add	r5, r3
 81236d8:	445b      	add	r3, fp
 81236da:	461e      	mov	r6, r3
 81236dc:	462c      	mov	r4, r5
 81236de:	4544      	cmp	r4, r8
 81236e0:	d30e      	bcc.n	8123700 <__mdiff+0xf8>
 81236e2:	f108 0103 	add.w	r1, r8, #3
 81236e6:	1b49      	subs	r1, r1, r5
 81236e8:	f021 0103 	bic.w	r1, r1, #3
 81236ec:	3d03      	subs	r5, #3
 81236ee:	45a8      	cmp	r8, r5
 81236f0:	bf38      	it	cc
 81236f2:	2100      	movcc	r1, #0
 81236f4:	440b      	add	r3, r1
 81236f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81236fa:	b191      	cbz	r1, 8123722 <__mdiff+0x11a>
 81236fc:	6117      	str	r7, [r2, #16]
 81236fe:	e79d      	b.n	812363c <__mdiff+0x34>
 8123700:	f854 1b04 	ldr.w	r1, [r4], #4
 8123704:	46e6      	mov	lr, ip
 8123706:	0c08      	lsrs	r0, r1, #16
 8123708:	fa1c fc81 	uxtah	ip, ip, r1
 812370c:	4471      	add	r1, lr
 812370e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8123712:	b289      	uxth	r1, r1
 8123714:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8123718:	f846 1b04 	str.w	r1, [r6], #4
 812371c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8123720:	e7dd      	b.n	81236de <__mdiff+0xd6>
 8123722:	3f01      	subs	r7, #1
 8123724:	e7e7      	b.n	81236f6 <__mdiff+0xee>
 8123726:	bf00      	nop
 8123728:	08128cb9 	.word	0x08128cb9
 812372c:	08128cca 	.word	0x08128cca

08123730 <__d2b>:
 8123730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8123734:	460f      	mov	r7, r1
 8123736:	2101      	movs	r1, #1
 8123738:	ec59 8b10 	vmov	r8, r9, d0
 812373c:	4616      	mov	r6, r2
 812373e:	f7ff fccd 	bl	81230dc <_Balloc>
 8123742:	4604      	mov	r4, r0
 8123744:	b930      	cbnz	r0, 8123754 <__d2b+0x24>
 8123746:	4602      	mov	r2, r0
 8123748:	4b23      	ldr	r3, [pc, #140]	@ (81237d8 <__d2b+0xa8>)
 812374a:	4824      	ldr	r0, [pc, #144]	@ (81237dc <__d2b+0xac>)
 812374c:	f240 310f 	movw	r1, #783	@ 0x30f
 8123750:	f7fe fdc8 	bl	81222e4 <__assert_func>
 8123754:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8123758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 812375c:	b10d      	cbz	r5, 8123762 <__d2b+0x32>
 812375e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8123762:	9301      	str	r3, [sp, #4]
 8123764:	f1b8 0300 	subs.w	r3, r8, #0
 8123768:	d023      	beq.n	81237b2 <__d2b+0x82>
 812376a:	4668      	mov	r0, sp
 812376c:	9300      	str	r3, [sp, #0]
 812376e:	f7ff fd7c 	bl	812326a <__lo0bits>
 8123772:	e9dd 1200 	ldrd	r1, r2, [sp]
 8123776:	b1d0      	cbz	r0, 81237ae <__d2b+0x7e>
 8123778:	f1c0 0320 	rsb	r3, r0, #32
 812377c:	fa02 f303 	lsl.w	r3, r2, r3
 8123780:	430b      	orrs	r3, r1
 8123782:	40c2      	lsrs	r2, r0
 8123784:	6163      	str	r3, [r4, #20]
 8123786:	9201      	str	r2, [sp, #4]
 8123788:	9b01      	ldr	r3, [sp, #4]
 812378a:	61a3      	str	r3, [r4, #24]
 812378c:	2b00      	cmp	r3, #0
 812378e:	bf0c      	ite	eq
 8123790:	2201      	moveq	r2, #1
 8123792:	2202      	movne	r2, #2
 8123794:	6122      	str	r2, [r4, #16]
 8123796:	b1a5      	cbz	r5, 81237c2 <__d2b+0x92>
 8123798:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 812379c:	4405      	add	r5, r0
 812379e:	603d      	str	r5, [r7, #0]
 81237a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 81237a4:	6030      	str	r0, [r6, #0]
 81237a6:	4620      	mov	r0, r4
 81237a8:	b003      	add	sp, #12
 81237aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81237ae:	6161      	str	r1, [r4, #20]
 81237b0:	e7ea      	b.n	8123788 <__d2b+0x58>
 81237b2:	a801      	add	r0, sp, #4
 81237b4:	f7ff fd59 	bl	812326a <__lo0bits>
 81237b8:	9b01      	ldr	r3, [sp, #4]
 81237ba:	6163      	str	r3, [r4, #20]
 81237bc:	3020      	adds	r0, #32
 81237be:	2201      	movs	r2, #1
 81237c0:	e7e8      	b.n	8123794 <__d2b+0x64>
 81237c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 81237c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 81237ca:	6038      	str	r0, [r7, #0]
 81237cc:	6918      	ldr	r0, [r3, #16]
 81237ce:	f7ff fd2d 	bl	812322c <__hi0bits>
 81237d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 81237d6:	e7e5      	b.n	81237a4 <__d2b+0x74>
 81237d8:	08128cb9 	.word	0x08128cb9
 81237dc:	08128cca 	.word	0x08128cca

081237e0 <__ssputs_r>:
 81237e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81237e4:	688e      	ldr	r6, [r1, #8]
 81237e6:	461f      	mov	r7, r3
 81237e8:	42be      	cmp	r6, r7
 81237ea:	680b      	ldr	r3, [r1, #0]
 81237ec:	4682      	mov	sl, r0
 81237ee:	460c      	mov	r4, r1
 81237f0:	4690      	mov	r8, r2
 81237f2:	d82d      	bhi.n	8123850 <__ssputs_r+0x70>
 81237f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81237f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 81237fc:	d026      	beq.n	812384c <__ssputs_r+0x6c>
 81237fe:	6965      	ldr	r5, [r4, #20]
 8123800:	6909      	ldr	r1, [r1, #16]
 8123802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8123806:	eba3 0901 	sub.w	r9, r3, r1
 812380a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 812380e:	1c7b      	adds	r3, r7, #1
 8123810:	444b      	add	r3, r9
 8123812:	106d      	asrs	r5, r5, #1
 8123814:	429d      	cmp	r5, r3
 8123816:	bf38      	it	cc
 8123818:	461d      	movcc	r5, r3
 812381a:	0553      	lsls	r3, r2, #21
 812381c:	d527      	bpl.n	812386e <__ssputs_r+0x8e>
 812381e:	4629      	mov	r1, r5
 8123820:	f7ff fbd0 	bl	8122fc4 <_malloc_r>
 8123824:	4606      	mov	r6, r0
 8123826:	b360      	cbz	r0, 8123882 <__ssputs_r+0xa2>
 8123828:	6921      	ldr	r1, [r4, #16]
 812382a:	464a      	mov	r2, r9
 812382c:	f7fe fd4b 	bl	81222c6 <memcpy>
 8123830:	89a3      	ldrh	r3, [r4, #12]
 8123832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8123836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 812383a:	81a3      	strh	r3, [r4, #12]
 812383c:	6126      	str	r6, [r4, #16]
 812383e:	6165      	str	r5, [r4, #20]
 8123840:	444e      	add	r6, r9
 8123842:	eba5 0509 	sub.w	r5, r5, r9
 8123846:	6026      	str	r6, [r4, #0]
 8123848:	60a5      	str	r5, [r4, #8]
 812384a:	463e      	mov	r6, r7
 812384c:	42be      	cmp	r6, r7
 812384e:	d900      	bls.n	8123852 <__ssputs_r+0x72>
 8123850:	463e      	mov	r6, r7
 8123852:	6820      	ldr	r0, [r4, #0]
 8123854:	4632      	mov	r2, r6
 8123856:	4641      	mov	r1, r8
 8123858:	f7fe fc20 	bl	812209c <memmove>
 812385c:	68a3      	ldr	r3, [r4, #8]
 812385e:	1b9b      	subs	r3, r3, r6
 8123860:	60a3      	str	r3, [r4, #8]
 8123862:	6823      	ldr	r3, [r4, #0]
 8123864:	4433      	add	r3, r6
 8123866:	6023      	str	r3, [r4, #0]
 8123868:	2000      	movs	r0, #0
 812386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 812386e:	462a      	mov	r2, r5
 8123870:	f000 fbcf 	bl	8124012 <_realloc_r>
 8123874:	4606      	mov	r6, r0
 8123876:	2800      	cmp	r0, #0
 8123878:	d1e0      	bne.n	812383c <__ssputs_r+0x5c>
 812387a:	6921      	ldr	r1, [r4, #16]
 812387c:	4650      	mov	r0, sl
 812387e:	f7ff fb2d 	bl	8122edc <_free_r>
 8123882:	230c      	movs	r3, #12
 8123884:	f8ca 3000 	str.w	r3, [sl]
 8123888:	89a3      	ldrh	r3, [r4, #12]
 812388a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 812388e:	81a3      	strh	r3, [r4, #12]
 8123890:	f04f 30ff 	mov.w	r0, #4294967295
 8123894:	e7e9      	b.n	812386a <__ssputs_r+0x8a>
	...

08123898 <_svfiprintf_r>:
 8123898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 812389c:	4698      	mov	r8, r3
 812389e:	898b      	ldrh	r3, [r1, #12]
 81238a0:	061b      	lsls	r3, r3, #24
 81238a2:	b09d      	sub	sp, #116	@ 0x74
 81238a4:	4607      	mov	r7, r0
 81238a6:	460d      	mov	r5, r1
 81238a8:	4614      	mov	r4, r2
 81238aa:	d510      	bpl.n	81238ce <_svfiprintf_r+0x36>
 81238ac:	690b      	ldr	r3, [r1, #16]
 81238ae:	b973      	cbnz	r3, 81238ce <_svfiprintf_r+0x36>
 81238b0:	2140      	movs	r1, #64	@ 0x40
 81238b2:	f7ff fb87 	bl	8122fc4 <_malloc_r>
 81238b6:	6028      	str	r0, [r5, #0]
 81238b8:	6128      	str	r0, [r5, #16]
 81238ba:	b930      	cbnz	r0, 81238ca <_svfiprintf_r+0x32>
 81238bc:	230c      	movs	r3, #12
 81238be:	603b      	str	r3, [r7, #0]
 81238c0:	f04f 30ff 	mov.w	r0, #4294967295
 81238c4:	b01d      	add	sp, #116	@ 0x74
 81238c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81238ca:	2340      	movs	r3, #64	@ 0x40
 81238cc:	616b      	str	r3, [r5, #20]
 81238ce:	2300      	movs	r3, #0
 81238d0:	9309      	str	r3, [sp, #36]	@ 0x24
 81238d2:	2320      	movs	r3, #32
 81238d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81238d8:	f8cd 800c 	str.w	r8, [sp, #12]
 81238dc:	2330      	movs	r3, #48	@ 0x30
 81238de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8123a7c <_svfiprintf_r+0x1e4>
 81238e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81238e6:	f04f 0901 	mov.w	r9, #1
 81238ea:	4623      	mov	r3, r4
 81238ec:	469a      	mov	sl, r3
 81238ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 81238f2:	b10a      	cbz	r2, 81238f8 <_svfiprintf_r+0x60>
 81238f4:	2a25      	cmp	r2, #37	@ 0x25
 81238f6:	d1f9      	bne.n	81238ec <_svfiprintf_r+0x54>
 81238f8:	ebba 0b04 	subs.w	fp, sl, r4
 81238fc:	d00b      	beq.n	8123916 <_svfiprintf_r+0x7e>
 81238fe:	465b      	mov	r3, fp
 8123900:	4622      	mov	r2, r4
 8123902:	4629      	mov	r1, r5
 8123904:	4638      	mov	r0, r7
 8123906:	f7ff ff6b 	bl	81237e0 <__ssputs_r>
 812390a:	3001      	adds	r0, #1
 812390c:	f000 80a7 	beq.w	8123a5e <_svfiprintf_r+0x1c6>
 8123910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8123912:	445a      	add	r2, fp
 8123914:	9209      	str	r2, [sp, #36]	@ 0x24
 8123916:	f89a 3000 	ldrb.w	r3, [sl]
 812391a:	2b00      	cmp	r3, #0
 812391c:	f000 809f 	beq.w	8123a5e <_svfiprintf_r+0x1c6>
 8123920:	2300      	movs	r3, #0
 8123922:	f04f 32ff 	mov.w	r2, #4294967295
 8123926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 812392a:	f10a 0a01 	add.w	sl, sl, #1
 812392e:	9304      	str	r3, [sp, #16]
 8123930:	9307      	str	r3, [sp, #28]
 8123932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8123936:	931a      	str	r3, [sp, #104]	@ 0x68
 8123938:	4654      	mov	r4, sl
 812393a:	2205      	movs	r2, #5
 812393c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123940:	484e      	ldr	r0, [pc, #312]	@ (8123a7c <_svfiprintf_r+0x1e4>)
 8123942:	f7dc fcdd 	bl	8100300 <memchr>
 8123946:	9a04      	ldr	r2, [sp, #16]
 8123948:	b9d8      	cbnz	r0, 8123982 <_svfiprintf_r+0xea>
 812394a:	06d0      	lsls	r0, r2, #27
 812394c:	bf44      	itt	mi
 812394e:	2320      	movmi	r3, #32
 8123950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8123954:	0711      	lsls	r1, r2, #28
 8123956:	bf44      	itt	mi
 8123958:	232b      	movmi	r3, #43	@ 0x2b
 812395a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 812395e:	f89a 3000 	ldrb.w	r3, [sl]
 8123962:	2b2a      	cmp	r3, #42	@ 0x2a
 8123964:	d015      	beq.n	8123992 <_svfiprintf_r+0xfa>
 8123966:	9a07      	ldr	r2, [sp, #28]
 8123968:	4654      	mov	r4, sl
 812396a:	2000      	movs	r0, #0
 812396c:	f04f 0c0a 	mov.w	ip, #10
 8123970:	4621      	mov	r1, r4
 8123972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8123976:	3b30      	subs	r3, #48	@ 0x30
 8123978:	2b09      	cmp	r3, #9
 812397a:	d94b      	bls.n	8123a14 <_svfiprintf_r+0x17c>
 812397c:	b1b0      	cbz	r0, 81239ac <_svfiprintf_r+0x114>
 812397e:	9207      	str	r2, [sp, #28]
 8123980:	e014      	b.n	81239ac <_svfiprintf_r+0x114>
 8123982:	eba0 0308 	sub.w	r3, r0, r8
 8123986:	fa09 f303 	lsl.w	r3, r9, r3
 812398a:	4313      	orrs	r3, r2
 812398c:	9304      	str	r3, [sp, #16]
 812398e:	46a2      	mov	sl, r4
 8123990:	e7d2      	b.n	8123938 <_svfiprintf_r+0xa0>
 8123992:	9b03      	ldr	r3, [sp, #12]
 8123994:	1d19      	adds	r1, r3, #4
 8123996:	681b      	ldr	r3, [r3, #0]
 8123998:	9103      	str	r1, [sp, #12]
 812399a:	2b00      	cmp	r3, #0
 812399c:	bfbb      	ittet	lt
 812399e:	425b      	neglt	r3, r3
 81239a0:	f042 0202 	orrlt.w	r2, r2, #2
 81239a4:	9307      	strge	r3, [sp, #28]
 81239a6:	9307      	strlt	r3, [sp, #28]
 81239a8:	bfb8      	it	lt
 81239aa:	9204      	strlt	r2, [sp, #16]
 81239ac:	7823      	ldrb	r3, [r4, #0]
 81239ae:	2b2e      	cmp	r3, #46	@ 0x2e
 81239b0:	d10a      	bne.n	81239c8 <_svfiprintf_r+0x130>
 81239b2:	7863      	ldrb	r3, [r4, #1]
 81239b4:	2b2a      	cmp	r3, #42	@ 0x2a
 81239b6:	d132      	bne.n	8123a1e <_svfiprintf_r+0x186>
 81239b8:	9b03      	ldr	r3, [sp, #12]
 81239ba:	1d1a      	adds	r2, r3, #4
 81239bc:	681b      	ldr	r3, [r3, #0]
 81239be:	9203      	str	r2, [sp, #12]
 81239c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 81239c4:	3402      	adds	r4, #2
 81239c6:	9305      	str	r3, [sp, #20]
 81239c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8123a8c <_svfiprintf_r+0x1f4>
 81239cc:	7821      	ldrb	r1, [r4, #0]
 81239ce:	2203      	movs	r2, #3
 81239d0:	4650      	mov	r0, sl
 81239d2:	f7dc fc95 	bl	8100300 <memchr>
 81239d6:	b138      	cbz	r0, 81239e8 <_svfiprintf_r+0x150>
 81239d8:	9b04      	ldr	r3, [sp, #16]
 81239da:	eba0 000a 	sub.w	r0, r0, sl
 81239de:	2240      	movs	r2, #64	@ 0x40
 81239e0:	4082      	lsls	r2, r0
 81239e2:	4313      	orrs	r3, r2
 81239e4:	3401      	adds	r4, #1
 81239e6:	9304      	str	r3, [sp, #16]
 81239e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81239ec:	4824      	ldr	r0, [pc, #144]	@ (8123a80 <_svfiprintf_r+0x1e8>)
 81239ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81239f2:	2206      	movs	r2, #6
 81239f4:	f7dc fc84 	bl	8100300 <memchr>
 81239f8:	2800      	cmp	r0, #0
 81239fa:	d036      	beq.n	8123a6a <_svfiprintf_r+0x1d2>
 81239fc:	4b21      	ldr	r3, [pc, #132]	@ (8123a84 <_svfiprintf_r+0x1ec>)
 81239fe:	bb1b      	cbnz	r3, 8123a48 <_svfiprintf_r+0x1b0>
 8123a00:	9b03      	ldr	r3, [sp, #12]
 8123a02:	3307      	adds	r3, #7
 8123a04:	f023 0307 	bic.w	r3, r3, #7
 8123a08:	3308      	adds	r3, #8
 8123a0a:	9303      	str	r3, [sp, #12]
 8123a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8123a0e:	4433      	add	r3, r6
 8123a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8123a12:	e76a      	b.n	81238ea <_svfiprintf_r+0x52>
 8123a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8123a18:	460c      	mov	r4, r1
 8123a1a:	2001      	movs	r0, #1
 8123a1c:	e7a8      	b.n	8123970 <_svfiprintf_r+0xd8>
 8123a1e:	2300      	movs	r3, #0
 8123a20:	3401      	adds	r4, #1
 8123a22:	9305      	str	r3, [sp, #20]
 8123a24:	4619      	mov	r1, r3
 8123a26:	f04f 0c0a 	mov.w	ip, #10
 8123a2a:	4620      	mov	r0, r4
 8123a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8123a30:	3a30      	subs	r2, #48	@ 0x30
 8123a32:	2a09      	cmp	r2, #9
 8123a34:	d903      	bls.n	8123a3e <_svfiprintf_r+0x1a6>
 8123a36:	2b00      	cmp	r3, #0
 8123a38:	d0c6      	beq.n	81239c8 <_svfiprintf_r+0x130>
 8123a3a:	9105      	str	r1, [sp, #20]
 8123a3c:	e7c4      	b.n	81239c8 <_svfiprintf_r+0x130>
 8123a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8123a42:	4604      	mov	r4, r0
 8123a44:	2301      	movs	r3, #1
 8123a46:	e7f0      	b.n	8123a2a <_svfiprintf_r+0x192>
 8123a48:	ab03      	add	r3, sp, #12
 8123a4a:	9300      	str	r3, [sp, #0]
 8123a4c:	462a      	mov	r2, r5
 8123a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8123a88 <_svfiprintf_r+0x1f0>)
 8123a50:	a904      	add	r1, sp, #16
 8123a52:	4638      	mov	r0, r7
 8123a54:	f7fd fd2c 	bl	81214b0 <_printf_float>
 8123a58:	1c42      	adds	r2, r0, #1
 8123a5a:	4606      	mov	r6, r0
 8123a5c:	d1d6      	bne.n	8123a0c <_svfiprintf_r+0x174>
 8123a5e:	89ab      	ldrh	r3, [r5, #12]
 8123a60:	065b      	lsls	r3, r3, #25
 8123a62:	f53f af2d 	bmi.w	81238c0 <_svfiprintf_r+0x28>
 8123a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8123a68:	e72c      	b.n	81238c4 <_svfiprintf_r+0x2c>
 8123a6a:	ab03      	add	r3, sp, #12
 8123a6c:	9300      	str	r3, [sp, #0]
 8123a6e:	462a      	mov	r2, r5
 8123a70:	4b05      	ldr	r3, [pc, #20]	@ (8123a88 <_svfiprintf_r+0x1f0>)
 8123a72:	a904      	add	r1, sp, #16
 8123a74:	4638      	mov	r0, r7
 8123a76:	f7fd ffa3 	bl	81219c0 <_printf_i>
 8123a7a:	e7ed      	b.n	8123a58 <_svfiprintf_r+0x1c0>
 8123a7c:	08128e20 	.word	0x08128e20
 8123a80:	08128e2a 	.word	0x08128e2a
 8123a84:	081214b1 	.word	0x081214b1
 8123a88:	081237e1 	.word	0x081237e1
 8123a8c:	08128e26 	.word	0x08128e26

08123a90 <__sfputc_r>:
 8123a90:	6893      	ldr	r3, [r2, #8]
 8123a92:	3b01      	subs	r3, #1
 8123a94:	2b00      	cmp	r3, #0
 8123a96:	b410      	push	{r4}
 8123a98:	6093      	str	r3, [r2, #8]
 8123a9a:	da08      	bge.n	8123aae <__sfputc_r+0x1e>
 8123a9c:	6994      	ldr	r4, [r2, #24]
 8123a9e:	42a3      	cmp	r3, r4
 8123aa0:	db01      	blt.n	8123aa6 <__sfputc_r+0x16>
 8123aa2:	290a      	cmp	r1, #10
 8123aa4:	d103      	bne.n	8123aae <__sfputc_r+0x1e>
 8123aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8123aaa:	f7fe ba52 	b.w	8121f52 <__swbuf_r>
 8123aae:	6813      	ldr	r3, [r2, #0]
 8123ab0:	1c58      	adds	r0, r3, #1
 8123ab2:	6010      	str	r0, [r2, #0]
 8123ab4:	7019      	strb	r1, [r3, #0]
 8123ab6:	4608      	mov	r0, r1
 8123ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8123abc:	4770      	bx	lr

08123abe <__sfputs_r>:
 8123abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8123ac0:	4606      	mov	r6, r0
 8123ac2:	460f      	mov	r7, r1
 8123ac4:	4614      	mov	r4, r2
 8123ac6:	18d5      	adds	r5, r2, r3
 8123ac8:	42ac      	cmp	r4, r5
 8123aca:	d101      	bne.n	8123ad0 <__sfputs_r+0x12>
 8123acc:	2000      	movs	r0, #0
 8123ace:	e007      	b.n	8123ae0 <__sfputs_r+0x22>
 8123ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123ad4:	463a      	mov	r2, r7
 8123ad6:	4630      	mov	r0, r6
 8123ad8:	f7ff ffda 	bl	8123a90 <__sfputc_r>
 8123adc:	1c43      	adds	r3, r0, #1
 8123ade:	d1f3      	bne.n	8123ac8 <__sfputs_r+0xa>
 8123ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08123ae4 <_vfiprintf_r>:
 8123ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8123ae8:	460d      	mov	r5, r1
 8123aea:	b09d      	sub	sp, #116	@ 0x74
 8123aec:	4614      	mov	r4, r2
 8123aee:	4698      	mov	r8, r3
 8123af0:	4606      	mov	r6, r0
 8123af2:	b118      	cbz	r0, 8123afc <_vfiprintf_r+0x18>
 8123af4:	6a03      	ldr	r3, [r0, #32]
 8123af6:	b90b      	cbnz	r3, 8123afc <_vfiprintf_r+0x18>
 8123af8:	f7fe f90e 	bl	8121d18 <__sinit>
 8123afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123afe:	07d9      	lsls	r1, r3, #31
 8123b00:	d405      	bmi.n	8123b0e <_vfiprintf_r+0x2a>
 8123b02:	89ab      	ldrh	r3, [r5, #12]
 8123b04:	059a      	lsls	r2, r3, #22
 8123b06:	d402      	bmi.n	8123b0e <_vfiprintf_r+0x2a>
 8123b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8123b0a:	f7fe fbda 	bl	81222c2 <__retarget_lock_acquire_recursive>
 8123b0e:	89ab      	ldrh	r3, [r5, #12]
 8123b10:	071b      	lsls	r3, r3, #28
 8123b12:	d501      	bpl.n	8123b18 <_vfiprintf_r+0x34>
 8123b14:	692b      	ldr	r3, [r5, #16]
 8123b16:	b99b      	cbnz	r3, 8123b40 <_vfiprintf_r+0x5c>
 8123b18:	4629      	mov	r1, r5
 8123b1a:	4630      	mov	r0, r6
 8123b1c:	f7fe fa58 	bl	8121fd0 <__swsetup_r>
 8123b20:	b170      	cbz	r0, 8123b40 <_vfiprintf_r+0x5c>
 8123b22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123b24:	07dc      	lsls	r4, r3, #31
 8123b26:	d504      	bpl.n	8123b32 <_vfiprintf_r+0x4e>
 8123b28:	f04f 30ff 	mov.w	r0, #4294967295
 8123b2c:	b01d      	add	sp, #116	@ 0x74
 8123b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8123b32:	89ab      	ldrh	r3, [r5, #12]
 8123b34:	0598      	lsls	r0, r3, #22
 8123b36:	d4f7      	bmi.n	8123b28 <_vfiprintf_r+0x44>
 8123b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8123b3a:	f7fe fbc3 	bl	81222c4 <__retarget_lock_release_recursive>
 8123b3e:	e7f3      	b.n	8123b28 <_vfiprintf_r+0x44>
 8123b40:	2300      	movs	r3, #0
 8123b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8123b44:	2320      	movs	r3, #32
 8123b46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8123b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8123b4e:	2330      	movs	r3, #48	@ 0x30
 8123b50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8123d00 <_vfiprintf_r+0x21c>
 8123b54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8123b58:	f04f 0901 	mov.w	r9, #1
 8123b5c:	4623      	mov	r3, r4
 8123b5e:	469a      	mov	sl, r3
 8123b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8123b64:	b10a      	cbz	r2, 8123b6a <_vfiprintf_r+0x86>
 8123b66:	2a25      	cmp	r2, #37	@ 0x25
 8123b68:	d1f9      	bne.n	8123b5e <_vfiprintf_r+0x7a>
 8123b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8123b6e:	d00b      	beq.n	8123b88 <_vfiprintf_r+0xa4>
 8123b70:	465b      	mov	r3, fp
 8123b72:	4622      	mov	r2, r4
 8123b74:	4629      	mov	r1, r5
 8123b76:	4630      	mov	r0, r6
 8123b78:	f7ff ffa1 	bl	8123abe <__sfputs_r>
 8123b7c:	3001      	adds	r0, #1
 8123b7e:	f000 80a7 	beq.w	8123cd0 <_vfiprintf_r+0x1ec>
 8123b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8123b84:	445a      	add	r2, fp
 8123b86:	9209      	str	r2, [sp, #36]	@ 0x24
 8123b88:	f89a 3000 	ldrb.w	r3, [sl]
 8123b8c:	2b00      	cmp	r3, #0
 8123b8e:	f000 809f 	beq.w	8123cd0 <_vfiprintf_r+0x1ec>
 8123b92:	2300      	movs	r3, #0
 8123b94:	f04f 32ff 	mov.w	r2, #4294967295
 8123b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8123b9c:	f10a 0a01 	add.w	sl, sl, #1
 8123ba0:	9304      	str	r3, [sp, #16]
 8123ba2:	9307      	str	r3, [sp, #28]
 8123ba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8123ba8:	931a      	str	r3, [sp, #104]	@ 0x68
 8123baa:	4654      	mov	r4, sl
 8123bac:	2205      	movs	r2, #5
 8123bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123bb2:	4853      	ldr	r0, [pc, #332]	@ (8123d00 <_vfiprintf_r+0x21c>)
 8123bb4:	f7dc fba4 	bl	8100300 <memchr>
 8123bb8:	9a04      	ldr	r2, [sp, #16]
 8123bba:	b9d8      	cbnz	r0, 8123bf4 <_vfiprintf_r+0x110>
 8123bbc:	06d1      	lsls	r1, r2, #27
 8123bbe:	bf44      	itt	mi
 8123bc0:	2320      	movmi	r3, #32
 8123bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8123bc6:	0713      	lsls	r3, r2, #28
 8123bc8:	bf44      	itt	mi
 8123bca:	232b      	movmi	r3, #43	@ 0x2b
 8123bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8123bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8123bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8123bd6:	d015      	beq.n	8123c04 <_vfiprintf_r+0x120>
 8123bd8:	9a07      	ldr	r2, [sp, #28]
 8123bda:	4654      	mov	r4, sl
 8123bdc:	2000      	movs	r0, #0
 8123bde:	f04f 0c0a 	mov.w	ip, #10
 8123be2:	4621      	mov	r1, r4
 8123be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8123be8:	3b30      	subs	r3, #48	@ 0x30
 8123bea:	2b09      	cmp	r3, #9
 8123bec:	d94b      	bls.n	8123c86 <_vfiprintf_r+0x1a2>
 8123bee:	b1b0      	cbz	r0, 8123c1e <_vfiprintf_r+0x13a>
 8123bf0:	9207      	str	r2, [sp, #28]
 8123bf2:	e014      	b.n	8123c1e <_vfiprintf_r+0x13a>
 8123bf4:	eba0 0308 	sub.w	r3, r0, r8
 8123bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8123bfc:	4313      	orrs	r3, r2
 8123bfe:	9304      	str	r3, [sp, #16]
 8123c00:	46a2      	mov	sl, r4
 8123c02:	e7d2      	b.n	8123baa <_vfiprintf_r+0xc6>
 8123c04:	9b03      	ldr	r3, [sp, #12]
 8123c06:	1d19      	adds	r1, r3, #4
 8123c08:	681b      	ldr	r3, [r3, #0]
 8123c0a:	9103      	str	r1, [sp, #12]
 8123c0c:	2b00      	cmp	r3, #0
 8123c0e:	bfbb      	ittet	lt
 8123c10:	425b      	neglt	r3, r3
 8123c12:	f042 0202 	orrlt.w	r2, r2, #2
 8123c16:	9307      	strge	r3, [sp, #28]
 8123c18:	9307      	strlt	r3, [sp, #28]
 8123c1a:	bfb8      	it	lt
 8123c1c:	9204      	strlt	r2, [sp, #16]
 8123c1e:	7823      	ldrb	r3, [r4, #0]
 8123c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8123c22:	d10a      	bne.n	8123c3a <_vfiprintf_r+0x156>
 8123c24:	7863      	ldrb	r3, [r4, #1]
 8123c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8123c28:	d132      	bne.n	8123c90 <_vfiprintf_r+0x1ac>
 8123c2a:	9b03      	ldr	r3, [sp, #12]
 8123c2c:	1d1a      	adds	r2, r3, #4
 8123c2e:	681b      	ldr	r3, [r3, #0]
 8123c30:	9203      	str	r2, [sp, #12]
 8123c32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8123c36:	3402      	adds	r4, #2
 8123c38:	9305      	str	r3, [sp, #20]
 8123c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8123d10 <_vfiprintf_r+0x22c>
 8123c3e:	7821      	ldrb	r1, [r4, #0]
 8123c40:	2203      	movs	r2, #3
 8123c42:	4650      	mov	r0, sl
 8123c44:	f7dc fb5c 	bl	8100300 <memchr>
 8123c48:	b138      	cbz	r0, 8123c5a <_vfiprintf_r+0x176>
 8123c4a:	9b04      	ldr	r3, [sp, #16]
 8123c4c:	eba0 000a 	sub.w	r0, r0, sl
 8123c50:	2240      	movs	r2, #64	@ 0x40
 8123c52:	4082      	lsls	r2, r0
 8123c54:	4313      	orrs	r3, r2
 8123c56:	3401      	adds	r4, #1
 8123c58:	9304      	str	r3, [sp, #16]
 8123c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8123c5e:	4829      	ldr	r0, [pc, #164]	@ (8123d04 <_vfiprintf_r+0x220>)
 8123c60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8123c64:	2206      	movs	r2, #6
 8123c66:	f7dc fb4b 	bl	8100300 <memchr>
 8123c6a:	2800      	cmp	r0, #0
 8123c6c:	d03f      	beq.n	8123cee <_vfiprintf_r+0x20a>
 8123c6e:	4b26      	ldr	r3, [pc, #152]	@ (8123d08 <_vfiprintf_r+0x224>)
 8123c70:	bb1b      	cbnz	r3, 8123cba <_vfiprintf_r+0x1d6>
 8123c72:	9b03      	ldr	r3, [sp, #12]
 8123c74:	3307      	adds	r3, #7
 8123c76:	f023 0307 	bic.w	r3, r3, #7
 8123c7a:	3308      	adds	r3, #8
 8123c7c:	9303      	str	r3, [sp, #12]
 8123c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8123c80:	443b      	add	r3, r7
 8123c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8123c84:	e76a      	b.n	8123b5c <_vfiprintf_r+0x78>
 8123c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8123c8a:	460c      	mov	r4, r1
 8123c8c:	2001      	movs	r0, #1
 8123c8e:	e7a8      	b.n	8123be2 <_vfiprintf_r+0xfe>
 8123c90:	2300      	movs	r3, #0
 8123c92:	3401      	adds	r4, #1
 8123c94:	9305      	str	r3, [sp, #20]
 8123c96:	4619      	mov	r1, r3
 8123c98:	f04f 0c0a 	mov.w	ip, #10
 8123c9c:	4620      	mov	r0, r4
 8123c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8123ca2:	3a30      	subs	r2, #48	@ 0x30
 8123ca4:	2a09      	cmp	r2, #9
 8123ca6:	d903      	bls.n	8123cb0 <_vfiprintf_r+0x1cc>
 8123ca8:	2b00      	cmp	r3, #0
 8123caa:	d0c6      	beq.n	8123c3a <_vfiprintf_r+0x156>
 8123cac:	9105      	str	r1, [sp, #20]
 8123cae:	e7c4      	b.n	8123c3a <_vfiprintf_r+0x156>
 8123cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8123cb4:	4604      	mov	r4, r0
 8123cb6:	2301      	movs	r3, #1
 8123cb8:	e7f0      	b.n	8123c9c <_vfiprintf_r+0x1b8>
 8123cba:	ab03      	add	r3, sp, #12
 8123cbc:	9300      	str	r3, [sp, #0]
 8123cbe:	462a      	mov	r2, r5
 8123cc0:	4b12      	ldr	r3, [pc, #72]	@ (8123d0c <_vfiprintf_r+0x228>)
 8123cc2:	a904      	add	r1, sp, #16
 8123cc4:	4630      	mov	r0, r6
 8123cc6:	f7fd fbf3 	bl	81214b0 <_printf_float>
 8123cca:	4607      	mov	r7, r0
 8123ccc:	1c78      	adds	r0, r7, #1
 8123cce:	d1d6      	bne.n	8123c7e <_vfiprintf_r+0x19a>
 8123cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8123cd2:	07d9      	lsls	r1, r3, #31
 8123cd4:	d405      	bmi.n	8123ce2 <_vfiprintf_r+0x1fe>
 8123cd6:	89ab      	ldrh	r3, [r5, #12]
 8123cd8:	059a      	lsls	r2, r3, #22
 8123cda:	d402      	bmi.n	8123ce2 <_vfiprintf_r+0x1fe>
 8123cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8123cde:	f7fe faf1 	bl	81222c4 <__retarget_lock_release_recursive>
 8123ce2:	89ab      	ldrh	r3, [r5, #12]
 8123ce4:	065b      	lsls	r3, r3, #25
 8123ce6:	f53f af1f 	bmi.w	8123b28 <_vfiprintf_r+0x44>
 8123cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8123cec:	e71e      	b.n	8123b2c <_vfiprintf_r+0x48>
 8123cee:	ab03      	add	r3, sp, #12
 8123cf0:	9300      	str	r3, [sp, #0]
 8123cf2:	462a      	mov	r2, r5
 8123cf4:	4b05      	ldr	r3, [pc, #20]	@ (8123d0c <_vfiprintf_r+0x228>)
 8123cf6:	a904      	add	r1, sp, #16
 8123cf8:	4630      	mov	r0, r6
 8123cfa:	f7fd fe61 	bl	81219c0 <_printf_i>
 8123cfe:	e7e4      	b.n	8123cca <_vfiprintf_r+0x1e6>
 8123d00:	08128e20 	.word	0x08128e20
 8123d04:	08128e2a 	.word	0x08128e2a
 8123d08:	081214b1 	.word	0x081214b1
 8123d0c:	08123abf 	.word	0x08123abf
 8123d10:	08128e26 	.word	0x08128e26

08123d14 <__sflush_r>:
 8123d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8123d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8123d1c:	0716      	lsls	r6, r2, #28
 8123d1e:	4605      	mov	r5, r0
 8123d20:	460c      	mov	r4, r1
 8123d22:	d454      	bmi.n	8123dce <__sflush_r+0xba>
 8123d24:	684b      	ldr	r3, [r1, #4]
 8123d26:	2b00      	cmp	r3, #0
 8123d28:	dc02      	bgt.n	8123d30 <__sflush_r+0x1c>
 8123d2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8123d2c:	2b00      	cmp	r3, #0
 8123d2e:	dd48      	ble.n	8123dc2 <__sflush_r+0xae>
 8123d30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8123d32:	2e00      	cmp	r6, #0
 8123d34:	d045      	beq.n	8123dc2 <__sflush_r+0xae>
 8123d36:	2300      	movs	r3, #0
 8123d38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8123d3c:	682f      	ldr	r7, [r5, #0]
 8123d3e:	6a21      	ldr	r1, [r4, #32]
 8123d40:	602b      	str	r3, [r5, #0]
 8123d42:	d030      	beq.n	8123da6 <__sflush_r+0x92>
 8123d44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8123d46:	89a3      	ldrh	r3, [r4, #12]
 8123d48:	0759      	lsls	r1, r3, #29
 8123d4a:	d505      	bpl.n	8123d58 <__sflush_r+0x44>
 8123d4c:	6863      	ldr	r3, [r4, #4]
 8123d4e:	1ad2      	subs	r2, r2, r3
 8123d50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8123d52:	b10b      	cbz	r3, 8123d58 <__sflush_r+0x44>
 8123d54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8123d56:	1ad2      	subs	r2, r2, r3
 8123d58:	2300      	movs	r3, #0
 8123d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8123d5c:	6a21      	ldr	r1, [r4, #32]
 8123d5e:	4628      	mov	r0, r5
 8123d60:	47b0      	blx	r6
 8123d62:	1c43      	adds	r3, r0, #1
 8123d64:	89a3      	ldrh	r3, [r4, #12]
 8123d66:	d106      	bne.n	8123d76 <__sflush_r+0x62>
 8123d68:	6829      	ldr	r1, [r5, #0]
 8123d6a:	291d      	cmp	r1, #29
 8123d6c:	d82b      	bhi.n	8123dc6 <__sflush_r+0xb2>
 8123d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8123e18 <__sflush_r+0x104>)
 8123d70:	410a      	asrs	r2, r1
 8123d72:	07d6      	lsls	r6, r2, #31
 8123d74:	d427      	bmi.n	8123dc6 <__sflush_r+0xb2>
 8123d76:	2200      	movs	r2, #0
 8123d78:	6062      	str	r2, [r4, #4]
 8123d7a:	04d9      	lsls	r1, r3, #19
 8123d7c:	6922      	ldr	r2, [r4, #16]
 8123d7e:	6022      	str	r2, [r4, #0]
 8123d80:	d504      	bpl.n	8123d8c <__sflush_r+0x78>
 8123d82:	1c42      	adds	r2, r0, #1
 8123d84:	d101      	bne.n	8123d8a <__sflush_r+0x76>
 8123d86:	682b      	ldr	r3, [r5, #0]
 8123d88:	b903      	cbnz	r3, 8123d8c <__sflush_r+0x78>
 8123d8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8123d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8123d8e:	602f      	str	r7, [r5, #0]
 8123d90:	b1b9      	cbz	r1, 8123dc2 <__sflush_r+0xae>
 8123d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8123d96:	4299      	cmp	r1, r3
 8123d98:	d002      	beq.n	8123da0 <__sflush_r+0x8c>
 8123d9a:	4628      	mov	r0, r5
 8123d9c:	f7ff f89e 	bl	8122edc <_free_r>
 8123da0:	2300      	movs	r3, #0
 8123da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8123da4:	e00d      	b.n	8123dc2 <__sflush_r+0xae>
 8123da6:	2301      	movs	r3, #1
 8123da8:	4628      	mov	r0, r5
 8123daa:	47b0      	blx	r6
 8123dac:	4602      	mov	r2, r0
 8123dae:	1c50      	adds	r0, r2, #1
 8123db0:	d1c9      	bne.n	8123d46 <__sflush_r+0x32>
 8123db2:	682b      	ldr	r3, [r5, #0]
 8123db4:	2b00      	cmp	r3, #0
 8123db6:	d0c6      	beq.n	8123d46 <__sflush_r+0x32>
 8123db8:	2b1d      	cmp	r3, #29
 8123dba:	d001      	beq.n	8123dc0 <__sflush_r+0xac>
 8123dbc:	2b16      	cmp	r3, #22
 8123dbe:	d11e      	bne.n	8123dfe <__sflush_r+0xea>
 8123dc0:	602f      	str	r7, [r5, #0]
 8123dc2:	2000      	movs	r0, #0
 8123dc4:	e022      	b.n	8123e0c <__sflush_r+0xf8>
 8123dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8123dca:	b21b      	sxth	r3, r3
 8123dcc:	e01b      	b.n	8123e06 <__sflush_r+0xf2>
 8123dce:	690f      	ldr	r7, [r1, #16]
 8123dd0:	2f00      	cmp	r7, #0
 8123dd2:	d0f6      	beq.n	8123dc2 <__sflush_r+0xae>
 8123dd4:	0793      	lsls	r3, r2, #30
 8123dd6:	680e      	ldr	r6, [r1, #0]
 8123dd8:	bf08      	it	eq
 8123dda:	694b      	ldreq	r3, [r1, #20]
 8123ddc:	600f      	str	r7, [r1, #0]
 8123dde:	bf18      	it	ne
 8123de0:	2300      	movne	r3, #0
 8123de2:	eba6 0807 	sub.w	r8, r6, r7
 8123de6:	608b      	str	r3, [r1, #8]
 8123de8:	f1b8 0f00 	cmp.w	r8, #0
 8123dec:	dde9      	ble.n	8123dc2 <__sflush_r+0xae>
 8123dee:	6a21      	ldr	r1, [r4, #32]
 8123df0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8123df2:	4643      	mov	r3, r8
 8123df4:	463a      	mov	r2, r7
 8123df6:	4628      	mov	r0, r5
 8123df8:	47b0      	blx	r6
 8123dfa:	2800      	cmp	r0, #0
 8123dfc:	dc08      	bgt.n	8123e10 <__sflush_r+0xfc>
 8123dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8123e06:	81a3      	strh	r3, [r4, #12]
 8123e08:	f04f 30ff 	mov.w	r0, #4294967295
 8123e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8123e10:	4407      	add	r7, r0
 8123e12:	eba8 0800 	sub.w	r8, r8, r0
 8123e16:	e7e7      	b.n	8123de8 <__sflush_r+0xd4>
 8123e18:	dfbffffe 	.word	0xdfbffffe

08123e1c <_fflush_r>:
 8123e1c:	b538      	push	{r3, r4, r5, lr}
 8123e1e:	690b      	ldr	r3, [r1, #16]
 8123e20:	4605      	mov	r5, r0
 8123e22:	460c      	mov	r4, r1
 8123e24:	b913      	cbnz	r3, 8123e2c <_fflush_r+0x10>
 8123e26:	2500      	movs	r5, #0
 8123e28:	4628      	mov	r0, r5
 8123e2a:	bd38      	pop	{r3, r4, r5, pc}
 8123e2c:	b118      	cbz	r0, 8123e36 <_fflush_r+0x1a>
 8123e2e:	6a03      	ldr	r3, [r0, #32]
 8123e30:	b90b      	cbnz	r3, 8123e36 <_fflush_r+0x1a>
 8123e32:	f7fd ff71 	bl	8121d18 <__sinit>
 8123e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123e3a:	2b00      	cmp	r3, #0
 8123e3c:	d0f3      	beq.n	8123e26 <_fflush_r+0xa>
 8123e3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8123e40:	07d0      	lsls	r0, r2, #31
 8123e42:	d404      	bmi.n	8123e4e <_fflush_r+0x32>
 8123e44:	0599      	lsls	r1, r3, #22
 8123e46:	d402      	bmi.n	8123e4e <_fflush_r+0x32>
 8123e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8123e4a:	f7fe fa3a 	bl	81222c2 <__retarget_lock_acquire_recursive>
 8123e4e:	4628      	mov	r0, r5
 8123e50:	4621      	mov	r1, r4
 8123e52:	f7ff ff5f 	bl	8123d14 <__sflush_r>
 8123e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8123e58:	07da      	lsls	r2, r3, #31
 8123e5a:	4605      	mov	r5, r0
 8123e5c:	d4e4      	bmi.n	8123e28 <_fflush_r+0xc>
 8123e5e:	89a3      	ldrh	r3, [r4, #12]
 8123e60:	059b      	lsls	r3, r3, #22
 8123e62:	d4e1      	bmi.n	8123e28 <_fflush_r+0xc>
 8123e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8123e66:	f7fe fa2d 	bl	81222c4 <__retarget_lock_release_recursive>
 8123e6a:	e7dd      	b.n	8123e28 <_fflush_r+0xc>

08123e6c <fiprintf>:
 8123e6c:	b40e      	push	{r1, r2, r3}
 8123e6e:	b503      	push	{r0, r1, lr}
 8123e70:	4601      	mov	r1, r0
 8123e72:	ab03      	add	r3, sp, #12
 8123e74:	4805      	ldr	r0, [pc, #20]	@ (8123e8c <fiprintf+0x20>)
 8123e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8123e7a:	6800      	ldr	r0, [r0, #0]
 8123e7c:	9301      	str	r3, [sp, #4]
 8123e7e:	f7ff fe31 	bl	8123ae4 <_vfiprintf_r>
 8123e82:	b002      	add	sp, #8
 8123e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8123e88:	b003      	add	sp, #12
 8123e8a:	4770      	bx	lr
 8123e8c:	24000060 	.word	0x24000060

08123e90 <__swhatbuf_r>:
 8123e90:	b570      	push	{r4, r5, r6, lr}
 8123e92:	460c      	mov	r4, r1
 8123e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8123e98:	2900      	cmp	r1, #0
 8123e9a:	b096      	sub	sp, #88	@ 0x58
 8123e9c:	4615      	mov	r5, r2
 8123e9e:	461e      	mov	r6, r3
 8123ea0:	da0d      	bge.n	8123ebe <__swhatbuf_r+0x2e>
 8123ea2:	89a3      	ldrh	r3, [r4, #12]
 8123ea4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8123ea8:	f04f 0100 	mov.w	r1, #0
 8123eac:	bf14      	ite	ne
 8123eae:	2340      	movne	r3, #64	@ 0x40
 8123eb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8123eb4:	2000      	movs	r0, #0
 8123eb6:	6031      	str	r1, [r6, #0]
 8123eb8:	602b      	str	r3, [r5, #0]
 8123eba:	b016      	add	sp, #88	@ 0x58
 8123ebc:	bd70      	pop	{r4, r5, r6, pc}
 8123ebe:	466a      	mov	r2, sp
 8123ec0:	f000 f848 	bl	8123f54 <_fstat_r>
 8123ec4:	2800      	cmp	r0, #0
 8123ec6:	dbec      	blt.n	8123ea2 <__swhatbuf_r+0x12>
 8123ec8:	9901      	ldr	r1, [sp, #4]
 8123eca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8123ece:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8123ed2:	4259      	negs	r1, r3
 8123ed4:	4159      	adcs	r1, r3
 8123ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8123eda:	e7eb      	b.n	8123eb4 <__swhatbuf_r+0x24>

08123edc <__smakebuf_r>:
 8123edc:	898b      	ldrh	r3, [r1, #12]
 8123ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8123ee0:	079d      	lsls	r5, r3, #30
 8123ee2:	4606      	mov	r6, r0
 8123ee4:	460c      	mov	r4, r1
 8123ee6:	d507      	bpl.n	8123ef8 <__smakebuf_r+0x1c>
 8123ee8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8123eec:	6023      	str	r3, [r4, #0]
 8123eee:	6123      	str	r3, [r4, #16]
 8123ef0:	2301      	movs	r3, #1
 8123ef2:	6163      	str	r3, [r4, #20]
 8123ef4:	b003      	add	sp, #12
 8123ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8123ef8:	ab01      	add	r3, sp, #4
 8123efa:	466a      	mov	r2, sp
 8123efc:	f7ff ffc8 	bl	8123e90 <__swhatbuf_r>
 8123f00:	9f00      	ldr	r7, [sp, #0]
 8123f02:	4605      	mov	r5, r0
 8123f04:	4639      	mov	r1, r7
 8123f06:	4630      	mov	r0, r6
 8123f08:	f7ff f85c 	bl	8122fc4 <_malloc_r>
 8123f0c:	b948      	cbnz	r0, 8123f22 <__smakebuf_r+0x46>
 8123f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123f12:	059a      	lsls	r2, r3, #22
 8123f14:	d4ee      	bmi.n	8123ef4 <__smakebuf_r+0x18>
 8123f16:	f023 0303 	bic.w	r3, r3, #3
 8123f1a:	f043 0302 	orr.w	r3, r3, #2
 8123f1e:	81a3      	strh	r3, [r4, #12]
 8123f20:	e7e2      	b.n	8123ee8 <__smakebuf_r+0xc>
 8123f22:	89a3      	ldrh	r3, [r4, #12]
 8123f24:	6020      	str	r0, [r4, #0]
 8123f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8123f2a:	81a3      	strh	r3, [r4, #12]
 8123f2c:	9b01      	ldr	r3, [sp, #4]
 8123f2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8123f32:	b15b      	cbz	r3, 8123f4c <__smakebuf_r+0x70>
 8123f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8123f38:	4630      	mov	r0, r6
 8123f3a:	f000 f81d 	bl	8123f78 <_isatty_r>
 8123f3e:	b128      	cbz	r0, 8123f4c <__smakebuf_r+0x70>
 8123f40:	89a3      	ldrh	r3, [r4, #12]
 8123f42:	f023 0303 	bic.w	r3, r3, #3
 8123f46:	f043 0301 	orr.w	r3, r3, #1
 8123f4a:	81a3      	strh	r3, [r4, #12]
 8123f4c:	89a3      	ldrh	r3, [r4, #12]
 8123f4e:	431d      	orrs	r5, r3
 8123f50:	81a5      	strh	r5, [r4, #12]
 8123f52:	e7cf      	b.n	8123ef4 <__smakebuf_r+0x18>

08123f54 <_fstat_r>:
 8123f54:	b538      	push	{r3, r4, r5, lr}
 8123f56:	4d07      	ldr	r5, [pc, #28]	@ (8123f74 <_fstat_r+0x20>)
 8123f58:	2300      	movs	r3, #0
 8123f5a:	4604      	mov	r4, r0
 8123f5c:	4608      	mov	r0, r1
 8123f5e:	4611      	mov	r1, r2
 8123f60:	602b      	str	r3, [r5, #0]
 8123f62:	f7de fa6d 	bl	8102440 <_fstat>
 8123f66:	1c43      	adds	r3, r0, #1
 8123f68:	d102      	bne.n	8123f70 <_fstat_r+0x1c>
 8123f6a:	682b      	ldr	r3, [r5, #0]
 8123f6c:	b103      	cbz	r3, 8123f70 <_fstat_r+0x1c>
 8123f6e:	6023      	str	r3, [r4, #0]
 8123f70:	bd38      	pop	{r3, r4, r5, pc}
 8123f72:	bf00      	nop
 8123f74:	2401284c 	.word	0x2401284c

08123f78 <_isatty_r>:
 8123f78:	b538      	push	{r3, r4, r5, lr}
 8123f7a:	4d06      	ldr	r5, [pc, #24]	@ (8123f94 <_isatty_r+0x1c>)
 8123f7c:	2300      	movs	r3, #0
 8123f7e:	4604      	mov	r4, r0
 8123f80:	4608      	mov	r0, r1
 8123f82:	602b      	str	r3, [r5, #0]
 8123f84:	f7de fa6c 	bl	8102460 <_isatty>
 8123f88:	1c43      	adds	r3, r0, #1
 8123f8a:	d102      	bne.n	8123f92 <_isatty_r+0x1a>
 8123f8c:	682b      	ldr	r3, [r5, #0]
 8123f8e:	b103      	cbz	r3, 8123f92 <_isatty_r+0x1a>
 8123f90:	6023      	str	r3, [r4, #0]
 8123f92:	bd38      	pop	{r3, r4, r5, pc}
 8123f94:	2401284c 	.word	0x2401284c

08123f98 <_sbrk_r>:
 8123f98:	b538      	push	{r3, r4, r5, lr}
 8123f9a:	4d06      	ldr	r5, [pc, #24]	@ (8123fb4 <_sbrk_r+0x1c>)
 8123f9c:	2300      	movs	r3, #0
 8123f9e:	4604      	mov	r4, r0
 8123fa0:	4608      	mov	r0, r1
 8123fa2:	602b      	str	r3, [r5, #0]
 8123fa4:	f7de fa74 	bl	8102490 <_sbrk>
 8123fa8:	1c43      	adds	r3, r0, #1
 8123faa:	d102      	bne.n	8123fb2 <_sbrk_r+0x1a>
 8123fac:	682b      	ldr	r3, [r5, #0]
 8123fae:	b103      	cbz	r3, 8123fb2 <_sbrk_r+0x1a>
 8123fb0:	6023      	str	r3, [r4, #0]
 8123fb2:	bd38      	pop	{r3, r4, r5, pc}
 8123fb4:	2401284c 	.word	0x2401284c

08123fb8 <abort>:
 8123fb8:	b508      	push	{r3, lr}
 8123fba:	2006      	movs	r0, #6
 8123fbc:	f000 f88c 	bl	81240d8 <raise>
 8123fc0:	2001      	movs	r0, #1
 8123fc2:	f7de fa09 	bl	81023d8 <_exit>

08123fc6 <_calloc_r>:
 8123fc6:	b570      	push	{r4, r5, r6, lr}
 8123fc8:	fba1 5402 	umull	r5, r4, r1, r2
 8123fcc:	b93c      	cbnz	r4, 8123fde <_calloc_r+0x18>
 8123fce:	4629      	mov	r1, r5
 8123fd0:	f7fe fff8 	bl	8122fc4 <_malloc_r>
 8123fd4:	4606      	mov	r6, r0
 8123fd6:	b928      	cbnz	r0, 8123fe4 <_calloc_r+0x1e>
 8123fd8:	2600      	movs	r6, #0
 8123fda:	4630      	mov	r0, r6
 8123fdc:	bd70      	pop	{r4, r5, r6, pc}
 8123fde:	220c      	movs	r2, #12
 8123fe0:	6002      	str	r2, [r0, #0]
 8123fe2:	e7f9      	b.n	8123fd8 <_calloc_r+0x12>
 8123fe4:	462a      	mov	r2, r5
 8123fe6:	4621      	mov	r1, r4
 8123fe8:	f7fe f872 	bl	81220d0 <memset>
 8123fec:	e7f5      	b.n	8123fda <_calloc_r+0x14>

08123fee <__ascii_mbtowc>:
 8123fee:	b082      	sub	sp, #8
 8123ff0:	b901      	cbnz	r1, 8123ff4 <__ascii_mbtowc+0x6>
 8123ff2:	a901      	add	r1, sp, #4
 8123ff4:	b142      	cbz	r2, 8124008 <__ascii_mbtowc+0x1a>
 8123ff6:	b14b      	cbz	r3, 812400c <__ascii_mbtowc+0x1e>
 8123ff8:	7813      	ldrb	r3, [r2, #0]
 8123ffa:	600b      	str	r3, [r1, #0]
 8123ffc:	7812      	ldrb	r2, [r2, #0]
 8123ffe:	1e10      	subs	r0, r2, #0
 8124000:	bf18      	it	ne
 8124002:	2001      	movne	r0, #1
 8124004:	b002      	add	sp, #8
 8124006:	4770      	bx	lr
 8124008:	4610      	mov	r0, r2
 812400a:	e7fb      	b.n	8124004 <__ascii_mbtowc+0x16>
 812400c:	f06f 0001 	mvn.w	r0, #1
 8124010:	e7f8      	b.n	8124004 <__ascii_mbtowc+0x16>

08124012 <_realloc_r>:
 8124012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8124016:	4680      	mov	r8, r0
 8124018:	4615      	mov	r5, r2
 812401a:	460c      	mov	r4, r1
 812401c:	b921      	cbnz	r1, 8124028 <_realloc_r+0x16>
 812401e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8124022:	4611      	mov	r1, r2
 8124024:	f7fe bfce 	b.w	8122fc4 <_malloc_r>
 8124028:	b92a      	cbnz	r2, 8124036 <_realloc_r+0x24>
 812402a:	f7fe ff57 	bl	8122edc <_free_r>
 812402e:	2400      	movs	r4, #0
 8124030:	4620      	mov	r0, r4
 8124032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8124036:	f000 f86b 	bl	8124110 <_malloc_usable_size_r>
 812403a:	4285      	cmp	r5, r0
 812403c:	4606      	mov	r6, r0
 812403e:	d802      	bhi.n	8124046 <_realloc_r+0x34>
 8124040:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8124044:	d8f4      	bhi.n	8124030 <_realloc_r+0x1e>
 8124046:	4629      	mov	r1, r5
 8124048:	4640      	mov	r0, r8
 812404a:	f7fe ffbb 	bl	8122fc4 <_malloc_r>
 812404e:	4607      	mov	r7, r0
 8124050:	2800      	cmp	r0, #0
 8124052:	d0ec      	beq.n	812402e <_realloc_r+0x1c>
 8124054:	42b5      	cmp	r5, r6
 8124056:	462a      	mov	r2, r5
 8124058:	4621      	mov	r1, r4
 812405a:	bf28      	it	cs
 812405c:	4632      	movcs	r2, r6
 812405e:	f7fe f932 	bl	81222c6 <memcpy>
 8124062:	4621      	mov	r1, r4
 8124064:	4640      	mov	r0, r8
 8124066:	f7fe ff39 	bl	8122edc <_free_r>
 812406a:	463c      	mov	r4, r7
 812406c:	e7e0      	b.n	8124030 <_realloc_r+0x1e>

0812406e <__ascii_wctomb>:
 812406e:	4603      	mov	r3, r0
 8124070:	4608      	mov	r0, r1
 8124072:	b141      	cbz	r1, 8124086 <__ascii_wctomb+0x18>
 8124074:	2aff      	cmp	r2, #255	@ 0xff
 8124076:	d904      	bls.n	8124082 <__ascii_wctomb+0x14>
 8124078:	228a      	movs	r2, #138	@ 0x8a
 812407a:	601a      	str	r2, [r3, #0]
 812407c:	f04f 30ff 	mov.w	r0, #4294967295
 8124080:	4770      	bx	lr
 8124082:	700a      	strb	r2, [r1, #0]
 8124084:	2001      	movs	r0, #1
 8124086:	4770      	bx	lr

08124088 <_raise_r>:
 8124088:	291f      	cmp	r1, #31
 812408a:	b538      	push	{r3, r4, r5, lr}
 812408c:	4605      	mov	r5, r0
 812408e:	460c      	mov	r4, r1
 8124090:	d904      	bls.n	812409c <_raise_r+0x14>
 8124092:	2316      	movs	r3, #22
 8124094:	6003      	str	r3, [r0, #0]
 8124096:	f04f 30ff 	mov.w	r0, #4294967295
 812409a:	bd38      	pop	{r3, r4, r5, pc}
 812409c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 812409e:	b112      	cbz	r2, 81240a6 <_raise_r+0x1e>
 81240a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81240a4:	b94b      	cbnz	r3, 81240ba <_raise_r+0x32>
 81240a6:	4628      	mov	r0, r5
 81240a8:	f000 f830 	bl	812410c <_getpid_r>
 81240ac:	4622      	mov	r2, r4
 81240ae:	4601      	mov	r1, r0
 81240b0:	4628      	mov	r0, r5
 81240b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81240b6:	f000 b817 	b.w	81240e8 <_kill_r>
 81240ba:	2b01      	cmp	r3, #1
 81240bc:	d00a      	beq.n	81240d4 <_raise_r+0x4c>
 81240be:	1c59      	adds	r1, r3, #1
 81240c0:	d103      	bne.n	81240ca <_raise_r+0x42>
 81240c2:	2316      	movs	r3, #22
 81240c4:	6003      	str	r3, [r0, #0]
 81240c6:	2001      	movs	r0, #1
 81240c8:	e7e7      	b.n	812409a <_raise_r+0x12>
 81240ca:	2100      	movs	r1, #0
 81240cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 81240d0:	4620      	mov	r0, r4
 81240d2:	4798      	blx	r3
 81240d4:	2000      	movs	r0, #0
 81240d6:	e7e0      	b.n	812409a <_raise_r+0x12>

081240d8 <raise>:
 81240d8:	4b02      	ldr	r3, [pc, #8]	@ (81240e4 <raise+0xc>)
 81240da:	4601      	mov	r1, r0
 81240dc:	6818      	ldr	r0, [r3, #0]
 81240de:	f7ff bfd3 	b.w	8124088 <_raise_r>
 81240e2:	bf00      	nop
 81240e4:	24000060 	.word	0x24000060

081240e8 <_kill_r>:
 81240e8:	b538      	push	{r3, r4, r5, lr}
 81240ea:	4d07      	ldr	r5, [pc, #28]	@ (8124108 <_kill_r+0x20>)
 81240ec:	2300      	movs	r3, #0
 81240ee:	4604      	mov	r4, r0
 81240f0:	4608      	mov	r0, r1
 81240f2:	4611      	mov	r1, r2
 81240f4:	602b      	str	r3, [r5, #0]
 81240f6:	f7de f95d 	bl	81023b4 <_kill>
 81240fa:	1c43      	adds	r3, r0, #1
 81240fc:	d102      	bne.n	8124104 <_kill_r+0x1c>
 81240fe:	682b      	ldr	r3, [r5, #0]
 8124100:	b103      	cbz	r3, 8124104 <_kill_r+0x1c>
 8124102:	6023      	str	r3, [r4, #0]
 8124104:	bd38      	pop	{r3, r4, r5, pc}
 8124106:	bf00      	nop
 8124108:	2401284c 	.word	0x2401284c

0812410c <_getpid_r>:
 812410c:	f7de b94a 	b.w	81023a4 <_getpid>

08124110 <_malloc_usable_size_r>:
 8124110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8124114:	1f18      	subs	r0, r3, #4
 8124116:	2b00      	cmp	r3, #0
 8124118:	bfbc      	itt	lt
 812411a:	580b      	ldrlt	r3, [r1, r0]
 812411c:	18c0      	addlt	r0, r0, r3
 812411e:	4770      	bx	lr

08124120 <_init>:
 8124120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8124122:	bf00      	nop
 8124124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8124126:	bc08      	pop	{r3}
 8124128:	469e      	mov	lr, r3
 812412a:	4770      	bx	lr

0812412c <_fini>:
 812412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 812412e:	bf00      	nop
 8124130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8124132:	bc08      	pop	{r3}
 8124134:	469e      	mov	lr, r3
 8124136:	4770      	bx	lr
