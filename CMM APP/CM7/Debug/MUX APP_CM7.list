
MUX APP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ec0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dcc  08024160  08024160  00025160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028f2c  08028f2c  0002a21c  2**0
                  CONTENTS
  4 .ARM          00000008  08028f2c  08028f2c  00029f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028f34  08028f34  0002a21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028f34  08028f34  00029f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08028f38  08028f38  00029f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  24000000  08028f3c  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001263c  2400021c  08029158  0002a21c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24012858  08029158  0002a858  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  0002b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002a21c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046a6c  00000000  00000000  0002a24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009a2e  00000000  00000000  00070cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fd0  00000000  00000000  0007a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025fa  00000000  00000000  0007d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032189  00000000  00000000  0007fcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001118b  00000000  00000000  000b1e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d828  00000000  00000000  000c300c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d0834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400021c 	.word	0x2400021c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024148 	.word	0x08024148

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000220 	.word	0x24000220
 80002dc:	08024148 	.word	0x08024148

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a4:	4b3d      	ldr	r3, [pc, #244]	@ (800079c <SystemInit+0xfc>)
 80006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006aa:	4a3c      	ldr	r2, [pc, #240]	@ (800079c <SystemInit+0xfc>)
 80006ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <SystemInit+0xfc>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	4a38      	ldr	r2, [pc, #224]	@ (800079c <SystemInit+0xfc>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c0:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 030f 	and.w	r3, r3, #15
 80006c8:	2b06      	cmp	r3, #6
 80006ca:	d807      	bhi.n	80006dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006cc:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <SystemInit+0x100>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f023 030f 	bic.w	r3, r3, #15
 80006d4:	4a32      	ldr	r2, [pc, #200]	@ (80007a0 <SystemInit+0x100>)
 80006d6:	f043 0307 	orr.w	r3, r3, #7
 80006da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006dc:	4b31      	ldr	r3, [pc, #196]	@ (80007a4 <SystemInit+0x104>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a30      	ldr	r2, [pc, #192]	@ (80007a4 <SystemInit+0x104>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <SystemInit+0x104>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x104>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	492c      	ldr	r1, [pc, #176]	@ (80007a4 <SystemInit+0x104>)
 80006f4:	4b2c      	ldr	r3, [pc, #176]	@ (80007a8 <SystemInit+0x108>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	2b00      	cmp	r3, #0
 8000704:	d007      	beq.n	8000716 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <SystemInit+0x100>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f023 030f 	bic.w	r3, r3, #15
 800070e:	4a24      	ldr	r2, [pc, #144]	@ (80007a0 <SystemInit+0x100>)
 8000710:	f043 0307 	orr.w	r3, r3, #7
 8000714:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x104>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x104>)
 800072a:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <SystemInit+0x10c>)
 800072c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <SystemInit+0x104>)
 8000730:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <SystemInit+0x110>)
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x104>)
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <SystemInit+0x114>)
 8000738:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <SystemInit+0x104>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <SystemInit+0x114>)
 8000744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <SystemInit+0x104>)
 800074e:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <SystemInit+0x114>)
 8000750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <SystemInit+0x104>)
 8000754:	2200      	movs	r2, #0
 8000756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x104>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a11      	ldr	r2, [pc, #68]	@ (80007a4 <SystemInit+0x104>)
 800075e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x104>)
 8000766:	2200      	movs	r2, #0
 8000768:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <SystemInit+0x118>)
 800076c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <SystemInit+0x118>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <SystemInit+0x11c>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <SystemInit+0x120>)
 800077c:	4013      	ands	r3, r2
 800077e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000782:	d202      	bcs.n	800078a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <SystemInit+0x124>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <SystemInit+0x128>)
 800078c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000790:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <mqtt_incoming_data_cb>:
  * @param  data: Pointer to the data received.
  * @param  len: Length of the data received.
  * @param  flags: Flags indicating additional information about the data.
  * @retval None
  */
static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	4611      	mov	r1, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	460b      	mov	r3, r1
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	4613      	mov	r3, r2
 80007e0:	717b      	strb	r3, [r7, #5]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	617b      	str	r3, [r7, #20]
    LWIP_UNUSED_ARG(flags);

    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" data cb: len %d\n", client_info->client_id, (int)len));
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	88fa      	ldrh	r2, [r7, #6]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <mqtt_incoming_data_cb+0x3c>)
 80007f0:	f021 fadc 	bl	8021dac <iprintf>

    // Call the topic handler function with the current topic and data
    handle_incoming_topic_data(current_topic, (const char *)data, len);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <mqtt_incoming_data_cb+0x40>)
 80007fc:	f000 fb66 	bl	8000ecc <handle_incoming_topic_data>
}
 8000800:	bf00      	nop
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08024168 	.word	0x08024168
 800080c:	2400023c 	.word	0x2400023c

08000810 <mqtt_incoming_publish_cb>:
  * @param  arg: User-defined argument, in this case, the client information structure.
  * @param  topic: The topic on which the message was published.
  * @param  tot_len: The total length of the message.
  * @retval None
  */
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	617b      	str	r3, [r7, #20]

    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" publish cb: topic %s, len %d\n", client_info->client_id, topic, (int)tot_len));
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	4807      	ldr	r0, [pc, #28]	@ (8000848 <mqtt_incoming_publish_cb+0x38>)
 800082a:	f021 fabf 	bl	8021dac <iprintf>

    // Store the topic for use in data callback
    strncpy(current_topic, topic, sizeof(current_topic) - 1);
 800082e:	22ff      	movs	r2, #255	@ 0xff
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	4806      	ldr	r0, [pc, #24]	@ (800084c <mqtt_incoming_publish_cb+0x3c>)
 8000834:	f021 fc7a 	bl	802212c <strncpy>
    current_topic[sizeof(current_topic) - 1] = '\0'; // Ensure null-termination
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <mqtt_incoming_publish_cb+0x3c>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0802418c 	.word	0x0802418c
 800084c:	2400023c 	.word	0x2400023c

08000850 <mqtt_request_cb>:
  * @brief  Callback function for publish/subscribe/unsubscribe requests.
  * @param  arg: User-defined argument, in this case, the client information structure.
  * @param  err: The error status of the request.
  * @retval None
  */
void mqtt_request_cb(void *arg, err_t err) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60fb      	str	r3, [r7, #12]

    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" request cb: err %d\n", client_info->client_id, (int)err));
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000868:	4619      	mov	r1, r3
 800086a:	4809      	ldr	r0, [pc, #36]	@ (8000890 <mqtt_request_cb+0x40>)
 800086c:	f021 fa9e 	bl	8021dac <iprintf>

    if (err != ERR_OK) {
 8000870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d007      	beq.n	8000888 <mqtt_request_cb+0x38>
        // Implement error handling logic here
        LWIP_PLATFORM_DIAG(("Request failed for client \"%s\" with error %d\n", client_info->client_id, err));
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <mqtt_request_cb+0x44>)
 8000884:	f021 fa92 	bl	8021dac <iprintf>
    }
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	080241bc 	.word	0x080241bc
 8000894:	080241e4 	.word	0x080241e4

08000898 <mqtt_connection_cb>:
  * @param  client: Pointer to the MQTT client instance.
  * @param  arg: User-defined argument, in this case, the client information structure.
  * @param  status: Connection status of the MQTT client.
  * @retval None
  */
static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b0ac      	sub	sp, #176	@ 0xb0
 800089c:	af04      	add	r7, sp, #16
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	80fb      	strh	r3, [r7, #6]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    LWIP_UNUSED_ARG(client);

    LWIP_PLATFORM_DIAG(("MQTT client \"%s\" connection cb: status %d\n", client_info->client_id, (int)status));
 80008ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4829      	ldr	r0, [pc, #164]	@ (800095c <mqtt_connection_cb+0xc4>)
 80008b8:	f021 fa78 	bl	8021dac <iprintf>

    if (status == MQTT_CONNECT_ACCEPTED) {
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d13e      	bne.n	8000940 <mqtt_connection_cb+0xa8>
        // Subscribe to topics upon successful connection
        mqtt_subscribe_to_topics(client, client_info, slot);
 80008c2:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <mqtt_connection_cb+0xc8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f000 fc17 	bl	8001100 <mqtt_subscribe_to_topics>

        // Publish a message upon connection
        const char *connect_message = "Online";
 80008d2:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <mqtt_connection_cb+0xcc>)
 80008d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        char topic[128];
        snprintf(topic, sizeof(topic), "CMM/slot%d/status", slot); // Use the slot number in the status topic
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <mqtt_connection_cb+0xc8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f107 0014 	add.w	r0, r7, #20
 80008e0:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <mqtt_connection_cb+0xd0>)
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	f021 fad2 	bl	8021e8c <sniprintf>
        err_t err = mqtt_publish(client,
                           topic,                   // Topic
                           connect_message,         // Message
                           strlen(connect_message), // Message length
 80008e8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80008ec:	f7ff fd58 	bl	80003a0 <strlen>
 80008f0:	4603      	mov	r3, r0
        err_t err = mqtt_publish(client,
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	f107 0114 	add.w	r1, r7, #20
 80008f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80008fc:	9303      	str	r3, [sp, #12]
 80008fe:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <mqtt_connection_cb+0xd4>)
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	2301      	movs	r3, #1
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	2301      	movs	r3, #1
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4613      	mov	r3, r2
 800090c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f017 fc65 	bl	80181e0 <mqtt_publish>
 8000916:	4603      	mov	r3, r0
 8000918:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                           1,                       // QoS level
                           1,                       // Retain flag
                           mqtt_request_cb,         // Callback function
                           LWIP_CONST_CAST(void*, client_info)); // Callback argument

        if (err != ERR_OK) {
 800091c:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <mqtt_connection_cb+0x9a>
            LWIP_PLATFORM_DIAG(("Failed to publish connection message, error %d\n", err));
 8000924:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	@ (8000970 <mqtt_connection_cb+0xd8>)
 800092c:	f021 fa3e 	bl	8021dac <iprintf>
        // Handle connection failure or disconnection
        LWIP_PLATFORM_DIAG(("MQTT client \"%s\" failed to connect or disconnected with status %d. Reconnecting...\n", client_info->client_id, status));
        // Implement reconnection logic here
        mqtt_example_init();  // Call the init function to reconnect
    }
}
 8000930:	e010      	b.n	8000954 <mqtt_connection_cb+0xbc>
            LWIP_PLATFORM_DIAG(("Published connection message to topic %s\n", topic));
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	480e      	ldr	r0, [pc, #56]	@ (8000974 <mqtt_connection_cb+0xdc>)
 800093a:	f021 fa37 	bl	8021dac <iprintf>
}
 800093e:	e009      	b.n	8000954 <mqtt_connection_cb+0xbc>
        LWIP_PLATFORM_DIAG(("MQTT client \"%s\" failed to connect or disconnected with status %d. Reconnecting...\n", client_info->client_id, status));
 8000940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	@ (8000978 <mqtt_connection_cb+0xe0>)
 800094c:	f021 fa2e 	bl	8021dac <iprintf>
        mqtt_example_init();  // Call the init function to reconnect
 8000950:	f000 f814 	bl	800097c <mqtt_example_init>
}
 8000954:	bf00      	nop
 8000956:	37a0      	adds	r7, #160	@ 0xa0
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08024214 	.word	0x08024214
 8000960:	24000650 	.word	0x24000650
 8000964:	08024240 	.word	0x08024240
 8000968:	08024248 	.word	0x08024248
 800096c:	08000851 	.word	0x08000851
 8000970:	0802425c 	.word	0x0802425c
 8000974:	0802428c 	.word	0x0802428c
 8000978:	080242b8 	.word	0x080242b8

0800097c <mqtt_example_init>:
/**
  * @brief  Initialization function for the MQTT client.
  *         Sets up the MQTT client instance and connects to the broker.
  * @retval None
  */
void mqtt_example_init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af02      	add	r7, sp, #8
    #if LWIP_TCP
    mqtt_client = mqtt_client_new();
 8000982:	f017 fe0b 	bl	801859c <mqtt_client_new>
 8000986:	4603      	mov	r3, r0
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <mqtt_example_init+0x74>)
 800098a:	6013      	str	r3, [r2, #0]
    if (mqtt_client == NULL) {
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <mqtt_example_init+0x74>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d103      	bne.n	800099c <mqtt_example_init+0x20>
        LWIP_PLATFORM_DIAG(("Failed to create MQTT client\n"));
 8000994:	4817      	ldr	r0, [pc, #92]	@ (80009f4 <mqtt_example_init+0x78>)
 8000996:	f021 fa71 	bl	8021e7c <puts>
        return;
 800099a:	e026      	b.n	80009ea <mqtt_example_init+0x6e>
    }

    // Generate the unique client ID and Will topic based on slot number
    snprintf(mqtt_client_id, sizeof(mqtt_client_id), "CMM%d", slot);
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <mqtt_example_init+0x7c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <mqtt_example_init+0x80>)
 80009a2:	2114      	movs	r1, #20
 80009a4:	4816      	ldr	r0, [pc, #88]	@ (8000a00 <mqtt_example_init+0x84>)
 80009a6:	f021 fa71 	bl	8021e8c <sniprintf>
    snprintf(mqtt_will_topic, sizeof(mqtt_will_topic), "CMM/slot%d/status", slot);
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <mqtt_example_init+0x7c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <mqtt_example_init+0x88>)
 80009b0:	2132      	movs	r1, #50	@ 0x32
 80009b2:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <mqtt_example_init+0x8c>)
 80009b4:	f021 fa6a 	bl	8021e8c <sniprintf>

    mqtt_client_info.client_id = mqtt_client_id;  // Assign unique Client ID
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <mqtt_example_init+0x90>)
 80009ba:	4a11      	ldr	r2, [pc, #68]	@ (8000a00 <mqtt_example_init+0x84>)
 80009bc:	601a      	str	r2, [r3, #0]
    mqtt_client_info.will_topic = mqtt_will_topic;  // Assign unique Will topic
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <mqtt_example_init+0x90>)
 80009c0:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <mqtt_example_init+0x8c>)
 80009c2:	611a      	str	r2, [r3, #16]

    mqtt_client_connect(mqtt_client,
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <mqtt_example_init+0x74>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <mqtt_example_init+0x90>)
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <mqtt_example_init+0x90>)
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <mqtt_example_init+0x94>)
 80009d2:	f240 725b 	movw	r2, #1883	@ 0x75b
 80009d6:	490f      	ldr	r1, [pc, #60]	@ (8000a14 <mqtt_example_init+0x98>)
 80009d8:	f017 fdec 	bl	80185b4 <mqtt_client_connect>
                        &mqtt_ip, MQTT_PORT,
                        mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
                        &mqtt_client_info);

    mqtt_set_inpub_callback(mqtt_client,
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <mqtt_example_init+0x74>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <mqtt_example_init+0x90>)
 80009e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <mqtt_example_init+0x9c>)
 80009e4:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <mqtt_example_init+0xa0>)
 80009e6:	f017 fdaf 	bl	8018548 <mqtt_set_inpub_callback>
                            mqtt_incoming_publish_cb,
                            mqtt_incoming_data_cb,
                            LWIP_CONST_CAST(void*, &mqtt_client_info));
    #endif /* LWIP_TCP */
}
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000238 	.word	0x24000238
 80009f4:	0802430c 	.word	0x0802430c
 80009f8:	24000650 	.word	0x24000650
 80009fc:	0802432c 	.word	0x0802432c
 8000a00:	24000370 	.word	0x24000370
 8000a04:	08024248 	.word	0x08024248
 8000a08:	2400033c 	.word	0x2400033c
 8000a0c:	2400000c 	.word	0x2400000c
 8000a10:	08000899 	.word	0x08000899
 8000a14:	24000008 	.word	0x24000008
 8000a18:	080007cd 	.word	0x080007cd
 8000a1c:	08000811 	.word	0x08000811

08000a20 <handle_trigger_state>:
  * @brief  Handle the trigger state message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_trigger_state(const char *message, size_t len) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling trigger state: %.*s\n", (int)len, message));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <handle_trigger_state+0x20>)
 8000a32:	f021 f9bb 	bl	8021dac <iprintf>
    // Add logic here
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08024334 	.word	0x08024334

08000a44 <handle_serial_protocol>:
  * @brief  Handle the serial protocol message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_protocol(const char *message, size_t len) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial protocol: %.*s\n", (int)len, message));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	@ (8000aac <handle_serial_protocol+0x68>)
 8000a56:	f021 f9a9 	bl	8021dac <iprintf>

    // Compare message with supported protocols
    if (strncmp(message, "RS232", len) == 0) {
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4914      	ldr	r1, [pc, #80]	@ (8000ab0 <handle_serial_protocol+0x6c>)
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f021 fb52 	bl	8022108 <strncmp>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d106      	bne.n	8000a78 <handle_serial_protocol+0x34>
        Switch_RS_Mode(RS232_MODE);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f001 f968 	bl	8001d40 <Switch_RS_Mode>
        LWIP_PLATFORM_DIAG(("Switched to RS232 mode\n"));
 8000a70:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <handle_serial_protocol+0x70>)
 8000a72:	f021 fa03 	bl	8021e7c <puts>
        Switch_RS_Mode(RS485_MODE);
        LWIP_PLATFORM_DIAG(("Switched to RS485 mode\n"));
    } else {
        LWIP_PLATFORM_DIAG(("Unknown serial protocol: %.*s\n", (int)len, message));
    }
}
 8000a76:	e014      	b.n	8000aa2 <handle_serial_protocol+0x5e>
    } else if (strncmp(message, "RS485", len) == 0) {
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	490f      	ldr	r1, [pc, #60]	@ (8000ab8 <handle_serial_protocol+0x74>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f021 fb43 	bl	8022108 <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d106      	bne.n	8000a96 <handle_serial_protocol+0x52>
        Switch_RS_Mode(RS485_MODE);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f001 f959 	bl	8001d40 <Switch_RS_Mode>
        LWIP_PLATFORM_DIAG(("Switched to RS485 mode\n"));
 8000a8e:	480b      	ldr	r0, [pc, #44]	@ (8000abc <handle_serial_protocol+0x78>)
 8000a90:	f021 f9f4 	bl	8021e7c <puts>
}
 8000a94:	e005      	b.n	8000aa2 <handle_serial_protocol+0x5e>
        LWIP_PLATFORM_DIAG(("Unknown serial protocol: %.*s\n", (int)len, message));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <handle_serial_protocol+0x7c>)
 8000a9e:	f021 f985 	bl	8021dac <iprintf>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08024354 	.word	0x08024354
 8000ab0:	08024374 	.word	0x08024374
 8000ab4:	0802437c 	.word	0x0802437c
 8000ab8:	08024394 	.word	0x08024394
 8000abc:	0802439c 	.word	0x0802439c
 8000ac0:	080243b4 	.word	0x080243b4

08000ac4 <handle_serial_baudrate>:
  * @brief  Handle the serial baudrate message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_baudrate(const char *message, size_t len) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial baudrate: %.*s\n", (int)len, message));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4827      	ldr	r0, [pc, #156]	@ (8000b74 <handle_serial_baudrate+0xb0>)
 8000ad6:	f021 f969 	bl	8021dac <iprintf>

    // Create a temporary buffer to store the message and ensure null-termination
    char baudrate_str[16];  // Adjust the size as necessary for your use case
    if (len < sizeof(baudrate_str)) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d816      	bhi.n	8000b0e <handle_serial_baudrate+0x4a>
        memcpy(baudrate_str, message, len);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f021 fc00 	bl	80222ee <memcpy>
        baudrate_str[len] = '\0';  // Null-terminate the string
 8000aee:	f107 020c 	add.w	r2, r7, #12
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
        LWIP_PLATFORM_DIAG(("Baudrate message too long\n"));
        return;
    }

    // Convert message to an integer (baudrate)
    int new_baudrate = atoi(baudrate_str);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4618      	mov	r0, r3
 8000b00:	f020 fb96 	bl	8021230 <atoi>
 8000b04:	61f8      	str	r0, [r7, #28]

    if (new_baudrate > 0) {
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dd29      	ble.n	8000b60 <handle_serial_baudrate+0x9c>
 8000b0c:	e003      	b.n	8000b16 <handle_serial_baudrate+0x52>
        LWIP_PLATFORM_DIAG(("Baudrate message too long\n"));
 8000b0e:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <handle_serial_baudrate+0xb4>)
 8000b10:	f021 f9b4 	bl	8021e7c <puts>
 8000b14:	e02a      	b.n	8000b6c <handle_serial_baudrate+0xa8>
        // Update the baud rate dynamically for USART2 (RS232)
        huart2.Init.BaudRate = new_baudrate;
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <handle_serial_baudrate+0xb8>)
 8000b1a:	6053      	str	r3, [r2, #4]
        if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b1c:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <handle_serial_baudrate+0xb8>)
 8000b1e:	f00c fb23 	bl	800d168 <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d004      	beq.n	8000b32 <handle_serial_baudrate+0x6e>
            LWIP_PLATFORM_DIAG(("Failed to set baudrate for USART2 (RS232): %d\n", new_baudrate));
 8000b28:	69f9      	ldr	r1, [r7, #28]
 8000b2a:	4815      	ldr	r0, [pc, #84]	@ (8000b80 <handle_serial_baudrate+0xbc>)
 8000b2c:	f021 f93e 	bl	8021dac <iprintf>
 8000b30:	e003      	b.n	8000b3a <handle_serial_baudrate+0x76>
        } else {
            LWIP_PLATFORM_DIAG(("Baudrate for USART2 (RS232) set to %d\n", new_baudrate));
 8000b32:	69f9      	ldr	r1, [r7, #28]
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <handle_serial_baudrate+0xc0>)
 8000b36:	f021 f939 	bl	8021dac <iprintf>
        }

        // Update the baud rate dynamically for USART3 (RS485)
        huart3.Init.BaudRate = new_baudrate;
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <handle_serial_baudrate+0xc4>)
 8000b3e:	6053      	str	r3, [r2, #4]
        if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000b40:	4811      	ldr	r0, [pc, #68]	@ (8000b88 <handle_serial_baudrate+0xc4>)
 8000b42:	f00c fb11 	bl	800d168 <HAL_UART_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <handle_serial_baudrate+0x92>
            LWIP_PLATFORM_DIAG(("Failed to set baudrate for USART3 (RS485): %d\n", new_baudrate));
 8000b4c:	69f9      	ldr	r1, [r7, #28]
 8000b4e:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <handle_serial_baudrate+0xc8>)
 8000b50:	f021 f92c 	bl	8021dac <iprintf>
 8000b54:	e00a      	b.n	8000b6c <handle_serial_baudrate+0xa8>
        } else {
            LWIP_PLATFORM_DIAG(("Baudrate for USART3 (RS485) set to %d\n", new_baudrate));
 8000b56:	69f9      	ldr	r1, [r7, #28]
 8000b58:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <handle_serial_baudrate+0xcc>)
 8000b5a:	f021 f927 	bl	8021dac <iprintf>
 8000b5e:	e005      	b.n	8000b6c <handle_serial_baudrate+0xa8>

        // Adjust the buffer and UDP packet size based on the new baud rate
//        update_buffer_and_udp_size(new_baudrate);

    } else {
        LWIP_PLATFORM_DIAG(("Invalid baudrate: %.*s\n", (int)len, message));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4619      	mov	r1, r3
 8000b66:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <handle_serial_baudrate+0xd0>)
 8000b68:	f021 f920 	bl	8021dac <iprintf>
    }
}
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	080243d4 	.word	0x080243d4
 8000b78:	080243f4 	.word	0x080243f4
 8000b7c:	24000434 	.word	0x24000434
 8000b80:	08024410 	.word	0x08024410
 8000b84:	08024440 	.word	0x08024440
 8000b88:	240004c8 	.word	0x240004c8
 8000b8c:	08024468 	.word	0x08024468
 8000b90:	08024498 	.word	0x08024498
 8000b94:	080244c0 	.word	0x080244c0

08000b98 <handle_serial_flowcontrol>:
  * @brief  Handle the serial flow control message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_flowcontrol(const char *message, size_t len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial flow control: %.*s\n", (int)len, message));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <handle_serial_flowcontrol+0x20>)
 8000baa:	f021 f8ff 	bl	8021dac <iprintf>
    // Add logic here
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	080244d8 	.word	0x080244d8

08000bbc <handle_serial_databits>:
  * @brief  Handle the serial data bits message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_databits(const char *message, size_t len) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial data bits: %.*s\n", (int)len, message));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481f      	ldr	r0, [pc, #124]	@ (8000c4c <handle_serial_databits+0x90>)
 8000bce:	f021 f8ed 	bl	8021dac <iprintf>

    if (strncmp(message, "7", len) == 0) {
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	491e      	ldr	r1, [pc, #120]	@ (8000c50 <handle_serial_databits+0x94>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f021 fa96 	bl	8022108 <strncmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d104      	bne.n	8000bec <handle_serial_databits+0x30>
        huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <handle_serial_databits+0x98>)
 8000be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	e01f      	b.n	8000c2c <handle_serial_databits+0x70>
    } else if (strncmp(message, "8", len) == 0) {
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	491a      	ldr	r1, [pc, #104]	@ (8000c58 <handle_serial_databits+0x9c>)
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f021 fa89 	bl	8022108 <strncmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d103      	bne.n	8000c04 <handle_serial_databits+0x48>
        huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <handle_serial_databits+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	e013      	b.n	8000c2c <handle_serial_databits+0x70>
    } else if (strncmp(message, "9", len) == 0) {
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4915      	ldr	r1, [pc, #84]	@ (8000c5c <handle_serial_databits+0xa0>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f021 fa7d 	bl	8022108 <strncmp>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d104      	bne.n	8000c1e <handle_serial_databits+0x62>
        huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <handle_serial_databits+0x98>)
 8000c16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	e006      	b.n	8000c2c <handle_serial_databits+0x70>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown data bits: %.*s\n", (int)len, message));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	4619      	mov	r1, r3
 8000c24:	480e      	ldr	r0, [pc, #56]	@ (8000c60 <handle_serial_databits+0xa4>)
 8000c26:	f021 f8c1 	bl	8021dac <iprintf>
        return;
 8000c2a:	e00c      	b.n	8000c46 <handle_serial_databits+0x8a>
    }

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <handle_serial_databits+0x98>)
 8000c2e:	f00c fa9b 	bl	800d168 <HAL_UART_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <handle_serial_databits+0x84>
        LWIP_PLATFORM_DIAG(("Failed to set data bits\n"));
 8000c38:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <handle_serial_databits+0xa8>)
 8000c3a:	f021 f91f 	bl	8021e7c <puts>
 8000c3e:	e002      	b.n	8000c46 <handle_serial_databits+0x8a>
    } else {
        LWIP_PLATFORM_DIAG(("Data bits set successfully\n"));
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <handle_serial_databits+0xac>)
 8000c42:	f021 f91b 	bl	8021e7c <puts>
    }
}
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	080244fc 	.word	0x080244fc
 8000c50:	08024520 	.word	0x08024520
 8000c54:	24000434 	.word	0x24000434
 8000c58:	08024524 	.word	0x08024524
 8000c5c:	08024528 	.word	0x08024528
 8000c60:	0802452c 	.word	0x0802452c
 8000c64:	08024548 	.word	0x08024548
 8000c68:	08024560 	.word	0x08024560

08000c6c <handle_serial_parity>:
  * @brief  Handle the serial parity message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_parity(const char *message, size_t len) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial parity: %.*s\n", (int)len, message));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481f      	ldr	r0, [pc, #124]	@ (8000cfc <handle_serial_parity+0x90>)
 8000c7e:	f021 f895 	bl	8021dac <iprintf>

    if (strncmp(message, "NONE", len) == 0) {
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	491e      	ldr	r1, [pc, #120]	@ (8000d00 <handle_serial_parity+0x94>)
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f021 fa3e 	bl	8022108 <strncmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <handle_serial_parity+0x2e>
        huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <handle_serial_parity+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	e020      	b.n	8000cdc <handle_serial_parity+0x70>
    } else if (strncmp(message, "EVEN", len) == 0) {
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	491a      	ldr	r1, [pc, #104]	@ (8000d08 <handle_serial_parity+0x9c>)
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f021 fa32 	bl	8022108 <strncmp>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d104      	bne.n	8000cb4 <handle_serial_parity+0x48>
        huart2.Init.Parity = UART_PARITY_EVEN;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <handle_serial_parity+0x98>)
 8000cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cb0:	611a      	str	r2, [r3, #16]
 8000cb2:	e013      	b.n	8000cdc <handle_serial_parity+0x70>
    } else if (strncmp(message, "ODD", len) == 0) {
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4915      	ldr	r1, [pc, #84]	@ (8000d0c <handle_serial_parity+0xa0>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f021 fa25 	bl	8022108 <strncmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d104      	bne.n	8000cce <handle_serial_parity+0x62>
        huart2.Init.Parity = UART_PARITY_ODD;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <handle_serial_parity+0x98>)
 8000cc6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	e006      	b.n	8000cdc <handle_serial_parity+0x70>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown parity: %.*s\n", (int)len, message));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <handle_serial_parity+0xa4>)
 8000cd6:	f021 f869 	bl	8021dac <iprintf>
        return;
 8000cda:	e00c      	b.n	8000cf6 <handle_serial_parity+0x8a>
    }

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <handle_serial_parity+0x98>)
 8000cde:	f00c fa43 	bl	800d168 <HAL_UART_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <handle_serial_parity+0x84>
        LWIP_PLATFORM_DIAG(("Failed to set parity\n"));
 8000ce8:	480a      	ldr	r0, [pc, #40]	@ (8000d14 <handle_serial_parity+0xa8>)
 8000cea:	f021 f8c7 	bl	8021e7c <puts>
 8000cee:	e002      	b.n	8000cf6 <handle_serial_parity+0x8a>
    } else {
        LWIP_PLATFORM_DIAG(("Parity set successfully\n"));
 8000cf0:	4809      	ldr	r0, [pc, #36]	@ (8000d18 <handle_serial_parity+0xac>)
 8000cf2:	f021 f8c3 	bl	8021e7c <puts>
    }
}
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	0802457c 	.word	0x0802457c
 8000d00:	0802459c 	.word	0x0802459c
 8000d04:	24000434 	.word	0x24000434
 8000d08:	080245a4 	.word	0x080245a4
 8000d0c:	080245ac 	.word	0x080245ac
 8000d10:	080245b0 	.word	0x080245b0
 8000d14:	080245c8 	.word	0x080245c8
 8000d18:	080245e0 	.word	0x080245e0

08000d1c <handle_serial_stopbits>:
  * @brief  Handle the serial stop bits message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_serial_stopbits(const char *message, size_t len) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling serial stop bits: %.*s\n", (int)len, message));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4826      	ldr	r0, [pc, #152]	@ (8000dc8 <handle_serial_stopbits+0xac>)
 8000d2e:	f021 f83d 	bl	8021dac <iprintf>

    if (strncmp(message, "0.5", len) == 0) {
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	4925      	ldr	r1, [pc, #148]	@ (8000dcc <handle_serial_stopbits+0xb0>)
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f021 f9e6 	bl	8022108 <strncmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d104      	bne.n	8000d4c <handle_serial_stopbits+0x30>
        huart2.Init.StopBits = UART_STOPBITS_0_5;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <handle_serial_stopbits+0xb4>)
 8000d44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	e02c      	b.n	8000da6 <handle_serial_stopbits+0x8a>
    } else if (strncmp(message, "1", len) == 0) {
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	4921      	ldr	r1, [pc, #132]	@ (8000dd4 <handle_serial_stopbits+0xb8>)
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f021 f9d9 	bl	8022108 <strncmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <handle_serial_stopbits+0x48>
        huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <handle_serial_stopbits+0xb4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	e020      	b.n	8000da6 <handle_serial_stopbits+0x8a>
    } else if (strncmp(message, "1.5", len) == 0) {
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	491c      	ldr	r1, [pc, #112]	@ (8000dd8 <handle_serial_stopbits+0xbc>)
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f021 f9cd 	bl	8022108 <strncmp>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d104      	bne.n	8000d7e <handle_serial_stopbits+0x62>
        huart2.Init.StopBits = UART_STOPBITS_1_5;
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <handle_serial_stopbits+0xb4>)
 8000d76:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	e013      	b.n	8000da6 <handle_serial_stopbits+0x8a>
    } else if (strncmp(message, "2", len) == 0) {
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	4916      	ldr	r1, [pc, #88]	@ (8000ddc <handle_serial_stopbits+0xc0>)
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f021 f9c0 	bl	8022108 <strncmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d104      	bne.n	8000d98 <handle_serial_stopbits+0x7c>
        huart2.Init.StopBits = UART_STOPBITS_2;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <handle_serial_stopbits+0xb4>)
 8000d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	e006      	b.n	8000da6 <handle_serial_stopbits+0x8a>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown stop bits: %.*s\n", (int)len, message));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4810      	ldr	r0, [pc, #64]	@ (8000de0 <handle_serial_stopbits+0xc4>)
 8000da0:	f021 f804 	bl	8021dac <iprintf>
        return;
 8000da4:	e00c      	b.n	8000dc0 <handle_serial_stopbits+0xa4>
    }

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <handle_serial_stopbits+0xb4>)
 8000da8:	f00c f9de 	bl	800d168 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <handle_serial_stopbits+0x9e>
        LWIP_PLATFORM_DIAG(("Failed to set stop bits\n"));
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <handle_serial_stopbits+0xc8>)
 8000db4:	f021 f862 	bl	8021e7c <puts>
 8000db8:	e002      	b.n	8000dc0 <handle_serial_stopbits+0xa4>
    } else {
        LWIP_PLATFORM_DIAG(("Stop bits set successfully\n"));
 8000dba:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <handle_serial_stopbits+0xcc>)
 8000dbc:	f021 f85e 	bl	8021e7c <puts>
    }
}
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	080245f8 	.word	0x080245f8
 8000dcc:	0802461c 	.word	0x0802461c
 8000dd0:	24000434 	.word	0x24000434
 8000dd4:	08024620 	.word	0x08024620
 8000dd8:	08024624 	.word	0x08024624
 8000ddc:	08024628 	.word	0x08024628
 8000de0:	0802462c 	.word	0x0802462c
 8000de4:	08024648 	.word	0x08024648
 8000de8:	08024660 	.word	0x08024660

08000dec <handle_ethernet_speed>:
  * @brief  Handle the Ethernet speed message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_ethernet_speed(const char *message, size_t len) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling Ethernet speed: %.*s\n", (int)len, message));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <handle_ethernet_speed+0x20>)
 8000dfe:	f020 ffd5 	bl	8021dac <iprintf>
    // Add logic here
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0802467c 	.word	0x0802467c

08000e10 <handle_enable_iap>:
  *         jumping to the IAP code located at address 0x08000000.
  * @param  message: The received MQTT message indicating the IAP action.
  * @param  len: Length of the received message.
  * @retval None
  */
void handle_enable_iap(const char *message, size_t len) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    // Print the received message for debugging
    LWIP_PLATFORM_DIAG(("Handling enable IAP: %.*s\n", (int)len, message));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <handle_enable_iap+0x60>)
 8000e22:	f020 ffc3 	bl	8021dac <iprintf>

    if (strncmp(message, "ENABLE", len) == 0) {
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4912      	ldr	r1, [pc, #72]	@ (8000e74 <handle_enable_iap+0x64>)
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f021 f96c 	bl	8022108 <strncmp>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d112      	bne.n	8000e5c <handle_enable_iap+0x4c>
        // Write the IAP flag to SRAM4
        volatile uint32_t *iap_flag_address = (uint32_t *)IAP_FLAG_ADDRESS;
 8000e36:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000e3a:	60fb      	str	r3, [r7, #12]
        *iap_flag_address = IAP_FLAG_VALUE;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <handle_enable_iap+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
        LWIP_PLATFORM_DIAG(("IAP flag set at address 0x%08X with value 0x%08X\n", (unsigned int)IAP_FLAG_ADDRESS, IAP_FLAG_VALUE));
 8000e42:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <handle_enable_iap+0x68>)
 8000e44:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <handle_enable_iap+0x6c>)
 8000e4a:	f020 ffaf 	bl	8021dac <iprintf>

        // Add a small delay to ensure the flag is written
        HAL_Delay(500);
 8000e4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e52:	f001 fd1d 	bl	8002890 <HAL_Delay>

        // Reset the system to jump to IAP
        HAL_NVIC_SystemReset();
 8000e56:	f003 f898 	bl	8003f8a <HAL_NVIC_SystemReset>
    } else {
        LWIP_PLATFORM_DIAG(("Unknown IAP command: %.*s\n", (int)len, message));
    }
}
 8000e5a:	e005      	b.n	8000e68 <handle_enable_iap+0x58>
        LWIP_PLATFORM_DIAG(("Unknown IAP command: %.*s\n", (int)len, message));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <handle_enable_iap+0x70>)
 8000e64:	f020 ffa2 	bl	8021dac <iprintf>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0802469c 	.word	0x0802469c
 8000e74:	080246b8 	.word	0x080246b8
 8000e78:	deadbeef 	.word	0xdeadbeef
 8000e7c:	080246c0 	.word	0x080246c0
 8000e80:	080246f4 	.word	0x080246f4

08000e84 <handle_status_ethernet_link>:
  * @brief  Handle the Ethernet link status message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_status_ethernet_link(const char *message, size_t len) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling Ethernet link status: %.*s\n", (int)len, message));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <handle_status_ethernet_link+0x20>)
 8000e96:	f020 ff89 	bl	8021dac <iprintf>
    // Add logic here
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08024710 	.word	0x08024710

08000ea8 <handle_status_ethernet_activity>:
  * @brief  Handle the Ethernet activity status message.
  * @param  message: The payload of the message received.
  * @param  len: The length of the message.
  * @retval None
  */
void handle_status_ethernet_activity(const char *message, size_t len) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    LWIP_PLATFORM_DIAG(("Handling Ethernet activity status: %.*s\n", (int)len, message));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <handle_status_ethernet_activity+0x20>)
 8000eba:	f020 ff77 	bl	8021dac <iprintf>
    // Add logic here
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08024738 	.word	0x08024738

08000ecc <handle_incoming_topic_data>:
void handle_status_slot_number(const char *message, size_t len) {
    LWIP_PLATFORM_DIAG(("Handling slot number status: %.*s\n", (int)len, message));
    // Add logic here
}

void handle_incoming_topic_data(const char *topic, const char *data, size_t len) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0a4      	sub	sp, #144	@ 0x90
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
    char topic_buffer[128];  // Buffer to hold the dynamically generated topic strings

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/trigger/state", slot);
 8000ed8:	4b7c      	ldr	r3, [pc, #496]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f107 0010 	add.w	r0, r7, #16
 8000ee0:	4a7b      	ldr	r2, [pc, #492]	@ (80010d0 <handle_incoming_topic_data+0x204>)
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	f020 ffd2 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff f9f6 	bl	80002e0 <strcmp>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <handle_incoming_topic_data+0x38>
        handle_trigger_state(data, len);
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	68b8      	ldr	r0, [r7, #8]
 8000efe:	f7ff fd8f 	bl	8000a20 <handle_trigger_state>
        return;
 8000f02:	e0df      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/serial/protocol", slot);
 8000f04:	4b71      	ldr	r3, [pc, #452]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f107 0010 	add.w	r0, r7, #16
 8000f0c:	4a71      	ldr	r2, [pc, #452]	@ (80010d4 <handle_incoming_topic_data+0x208>)
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	f020 ffbc 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff f9e0 	bl	80002e0 <strcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d104      	bne.n	8000f30 <handle_incoming_topic_data+0x64>
        handle_serial_protocol(data, len);
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff fd8b 	bl	8000a44 <handle_serial_protocol>
        return;
 8000f2e:	e0c9      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/serial/baudrate", slot);
 8000f30:	4b66      	ldr	r3, [pc, #408]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f107 0010 	add.w	r0, r7, #16
 8000f38:	4a67      	ldr	r2, [pc, #412]	@ (80010d8 <handle_incoming_topic_data+0x20c>)
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	f020 ffa6 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff f9ca 	bl	80002e0 <strcmp>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d104      	bne.n	8000f5c <handle_incoming_topic_data+0x90>
        handle_serial_baudrate(data, len);
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f7ff fdb5 	bl	8000ac4 <handle_serial_baudrate>
        return;
 8000f5a:	e0b3      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/serial/flowcontrol", slot);
 8000f5c:	4b5b      	ldr	r3, [pc, #364]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f107 0010 	add.w	r0, r7, #16
 8000f64:	4a5d      	ldr	r2, [pc, #372]	@ (80010dc <handle_incoming_topic_data+0x210>)
 8000f66:	2180      	movs	r1, #128	@ 0x80
 8000f68:	f020 ff90 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff f9b4 	bl	80002e0 <strcmp>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <handle_incoming_topic_data+0xbc>
        handle_serial_flowcontrol(data, len);
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f7ff fe09 	bl	8000b98 <handle_serial_flowcontrol>
        return;
 8000f86:	e09d      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/serial/databits", slot);
 8000f88:	4b50      	ldr	r3, [pc, #320]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f107 0010 	add.w	r0, r7, #16
 8000f90:	4a53      	ldr	r2, [pc, #332]	@ (80010e0 <handle_incoming_topic_data+0x214>)
 8000f92:	2180      	movs	r1, #128	@ 0x80
 8000f94:	f020 ff7a 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff f99e 	bl	80002e0 <strcmp>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d104      	bne.n	8000fb4 <handle_incoming_topic_data+0xe8>
        handle_serial_databits(data, len);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fe05 	bl	8000bbc <handle_serial_databits>
        return;
 8000fb2:	e087      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/serial/parity", slot);
 8000fb4:	4b45      	ldr	r3, [pc, #276]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f107 0010 	add.w	r0, r7, #16
 8000fbc:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <handle_incoming_topic_data+0x218>)
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	f020 ff64 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff f988 	bl	80002e0 <strcmp>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <handle_incoming_topic_data+0x114>
        handle_serial_parity(data, len);
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	68b8      	ldr	r0, [r7, #8]
 8000fda:	f7ff fe47 	bl	8000c6c <handle_serial_parity>
        return;
 8000fde:	e071      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/serial/stopbits", slot);
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f107 0010 	add.w	r0, r7, #16
 8000fe8:	4a3f      	ldr	r2, [pc, #252]	@ (80010e8 <handle_incoming_topic_data+0x21c>)
 8000fea:	2180      	movs	r1, #128	@ 0x80
 8000fec:	f020 ff4e 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff f972 	bl	80002e0 <strcmp>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d104      	bne.n	800100c <handle_incoming_topic_data+0x140>
        handle_serial_stopbits(data, len);
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	68b8      	ldr	r0, [r7, #8]
 8001006:	f7ff fe89 	bl	8000d1c <handle_serial_stopbits>
        return;
 800100a:	e05b      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/ethernet/speed", slot);
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <handle_incoming_topic_data+0x200>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f107 0010 	add.w	r0, r7, #16
 8001014:	4a35      	ldr	r2, [pc, #212]	@ (80010ec <handle_incoming_topic_data+0x220>)
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	f020 ff38 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff f95c 	bl	80002e0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <handle_incoming_topic_data+0x16c>
        handle_ethernet_speed(data, len);
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f7ff fedb 	bl	8000dec <handle_ethernet_speed>
        return;
 8001036:	e045      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/control/iap", slot);
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <handle_incoming_topic_data+0x200>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f107 0010 	add.w	r0, r7, #16
 8001040:	4a2b      	ldr	r2, [pc, #172]	@ (80010f0 <handle_incoming_topic_data+0x224>)
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	f020 ff22 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff f946 	bl	80002e0 <strcmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d104      	bne.n	8001064 <handle_incoming_topic_data+0x198>
        handle_enable_iap(data, len);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f7ff fed7 	bl	8000e10 <handle_enable_iap>
        return;
 8001062:	e02f      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/status/ethernet/link", slot);
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f107 0010 	add.w	r0, r7, #16
 800106c:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <handle_incoming_topic_data+0x228>)
 800106e:	2180      	movs	r1, #128	@ 0x80
 8001070:	f020 ff0c 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f7ff f930 	bl	80002e0 <strcmp>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <handle_incoming_topic_data+0x1c4>
        handle_status_ethernet_link(data, len);
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f7ff fefb 	bl	8000e84 <handle_status_ethernet_link>
        return;
 800108e:	e019      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    snprintf(topic_buffer, sizeof(topic_buffer), "CMB/slot%d/status/ethernet/activity", slot);
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <handle_incoming_topic_data+0x200>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f107 0010 	add.w	r0, r7, #16
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <handle_incoming_topic_data+0x22c>)
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	f020 fef6 	bl	8021e8c <sniprintf>
    if (strcmp(topic, topic_buffer) == 0) {
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff f91a 	bl	80002e0 <strcmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d104      	bne.n	80010bc <handle_incoming_topic_data+0x1f0>
        handle_status_ethernet_activity(data, len);
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f7ff fef7 	bl	8000ea8 <handle_status_ethernet_activity>
        return;
 80010ba:	e003      	b.n	80010c4 <handle_incoming_topic_data+0x1f8>
    }

    LWIP_PLATFORM_DIAG(("Unknown topic: %s\n", topic));
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	480f      	ldr	r0, [pc, #60]	@ (80010fc <handle_incoming_topic_data+0x230>)
 80010c0:	f020 fe74 	bl	8021dac <iprintf>
}
 80010c4:	3790      	adds	r7, #144	@ 0x90
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24000650 	.word	0x24000650
 80010d0:	08024788 	.word	0x08024788
 80010d4:	080247ac 	.word	0x080247ac
 80010d8:	080247d0 	.word	0x080247d0
 80010dc:	080247f4 	.word	0x080247f4
 80010e0:	0802481c 	.word	0x0802481c
 80010e4:	08024840 	.word	0x08024840
 80010e8:	08024864 	.word	0x08024864
 80010ec:	08024888 	.word	0x08024888
 80010f0:	080248ac 	.word	0x080248ac
 80010f4:	080248c4 	.word	0x080248c4
 80010f8:	080248e4 	.word	0x080248e4
 80010fc:	08024908 	.word	0x08024908

08001100 <mqtt_subscribe_to_topics>:
  * @param  client: Pointer to the MQTT client.
  * @param  client_info: Pointer to the client-specific information.
  * @param  slot: Slot number for topic subscription.
  * @retval None
  */
void mqtt_subscribe_to_topics(mqtt_client_t *client, const struct mqtt_connect_client_info_t* client_info, int slot) {
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b0b4      	sub	sp, #208	@ 0xd0
 8001104:	af02      	add	r7, sp, #8
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
    err_t err;
    char topic[128];

    // List of all the topics to subscribe to
    const char* topics[] = {
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <mqtt_subscribe_to_topics+0xa8>)
 800110e:	f107 0414 	add.w	r4, r7, #20
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        "status/ethernet/link",
        "status/ethernet/activity",
    };

    // Subscribe to each topic in the list with QoS 1
    for (size_t i = 0; i < sizeof(topics) / sizeof(topics[0]); i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800112a:	e034      	b.n	8001196 <mqtt_subscribe_to_topics+0x96>
        snprintf(topic, sizeof(topic), "CMB/slot%d/%s", slot, topics[i]); // Build the topic string with slot
 800112c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	33c8      	adds	r3, #200	@ 0xc8
 8001134:	443b      	add	r3, r7
 8001136:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800113a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <mqtt_subscribe_to_topics+0xac>)
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	f020 fea1 	bl	8021e8c <sniprintf>
        err = mqtt_sub_unsub(client, topic, 1, mqtt_request_cb, LWIP_CONST_CAST(void*, client_info), 1);
 800114a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800114e:	2301      	movs	r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <mqtt_subscribe_to_topics+0xb0>)
 8001158:	2201      	movs	r2, #1
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f017 f91a 	bl	8018394 <mqtt_sub_unsub>
 8001160:	4603      	mov	r3, r0
 8001162:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (err != ERR_OK) {
 8001166:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <mqtt_subscribe_to_topics+0x80>
            LWIP_PLATFORM_DIAG(("Failed to subscribe to %s, error %d\n", topic, err));
 800116e:	f997 20c3 	ldrsb.w	r2, [r7, #195]	@ 0xc3
 8001172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001176:	4619      	mov	r1, r3
 8001178:	480e      	ldr	r0, [pc, #56]	@ (80011b4 <mqtt_subscribe_to_topics+0xb4>)
 800117a:	f020 fe17 	bl	8021dac <iprintf>
 800117e:	e005      	b.n	800118c <mqtt_subscribe_to_topics+0x8c>
        } else {
            LWIP_PLATFORM_DIAG(("Successfully subscribed to %s\n", topic));
 8001180:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001184:	4619      	mov	r1, r3
 8001186:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <mqtt_subscribe_to_topics+0xb8>)
 8001188:	f020 fe10 	bl	8021dac <iprintf>
    for (size_t i = 0; i < sizeof(topics) / sizeof(topics[0]); i++) {
 800118c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001190:	3301      	adds	r3, #1
 8001192:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d9c6      	bls.n	800112c <mqtt_subscribe_to_topics+0x2c>
        }
    }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	37c8      	adds	r7, #200	@ 0xc8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}
 80011a8:	08024a78 	.word	0x08024a78
 80011ac:	0802491c 	.word	0x0802491c
 80011b0:	08000851 	.word	0x08000851
 80011b4:	0802492c 	.word	0x0802492c
 80011b8:	08024954 	.word	0x08024954

080011bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e4:	e000      	b.n	80011e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f9      	beq.n	80011e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_write>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern mqtt_client_t* mqtt_client;  // Declare the external MQTT client instance
int _write(int file, char *ptr, int len)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e009      	b.n	8001230 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ffc9 	bl	80011bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf1      	blt.n	800121c <_write+0x12>
  }
  return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800124a:	f000 fcab 	bl	8001ba4 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800124e:	4b43      	ldr	r3, [pc, #268]	@ (800135c <main+0x118>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d11b      	bne.n	8001292 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800125a:	f3bf 8f4f 	dsb	sy
}
 800125e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001260:	f3bf 8f6f 	isb	sy
}
 8001264:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <main+0x118>)
 8001268:	2200      	movs	r2, #0
 800126a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
}
 8001272:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001274:	f3bf 8f6f 	isb	sy
}
 8001278:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800127a:	4b38      	ldr	r3, [pc, #224]	@ (800135c <main+0x118>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a37      	ldr	r2, [pc, #220]	@ (800135c <main+0x118>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001286:	f3bf 8f4f 	dsb	sy
}
 800128a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800128c:	f3bf 8f6f 	isb	sy
}
 8001290:	e000      	b.n	8001294 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001292:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001294:	4b31      	ldr	r3, [pc, #196]	@ (800135c <main+0x118>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d138      	bne.n	8001312 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012a0:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <main+0x118>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012a8:	f3bf 8f4f 	dsb	sy
}
 80012ac:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <main+0x118>)
 80012b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b4:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	0b5b      	lsrs	r3, r3, #13
 80012ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012be:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012c8:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	015a      	lsls	r2, r3, #5
 80012ce:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80012d2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012d8:	4920      	ldr	r1, [pc, #128]	@ (800135c <main+0x118>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ef      	bne.n	80012ca <main+0x86>
    } while(sets-- != 0U);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1e5a      	subs	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e5      	bne.n	80012c0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80012f4:	f3bf 8f4f 	dsb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <main+0x118>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a17      	ldr	r2, [pc, #92]	@ (800135c <main+0x118>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001304:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001306:	f3bf 8f4f 	dsb	sy
}
 800130a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800130c:	f3bf 8f6f 	isb	sy
}
 8001310:	e000      	b.n	8001314 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001312:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f001 fa60 	bl	80027d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f82a 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 fa66 	bl	80017ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001320:	f000 fa3c 	bl	800179c <MX_DMA_Init>
  MX_TIM1_Init();
 8001324:	f000 f94e 	bl	80015c4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001328:	f000 f9a0 	bl	800166c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800132c:	f000 f9ea 	bl	8001704 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001330:	f000 f8d8 	bl	80014e4 <MX_ADC3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001334:	f000 f8ca 	bl	80014cc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  printf("Initializing\n");
 8001338:	4809      	ldr	r0, [pc, #36]	@ (8001360 <main+0x11c>)
 800133a:	f020 fd9f 	bl	8021e7c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800133e:	f00e fe35 	bl	800ffac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <main+0x120>)
 8001344:	2100      	movs	r1, #0
 8001346:	4808      	ldr	r0, [pc, #32]	@ (8001368 <main+0x124>)
 8001348:	f00e fe8f 	bl	801006a <osThreadNew>
 800134c:	4603      	mov	r3, r0
 800134e:	4a07      	ldr	r2, [pc, #28]	@ (800136c <main+0x128>)
 8001350:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001352:	f00e fe4f 	bl	800fff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001356:	bf00      	nop
 8001358:	e7fd      	b.n	8001356 <main+0x112>
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	08024ab0 	.word	0x08024ab0
 8001364:	080289dc 	.word	0x080289dc
 8001368:	08001a11 	.word	0x08001a11
 800136c:	2400064c 	.word	0x2400064c

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b09e      	sub	sp, #120	@ 0x78
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137a:	224c      	movs	r2, #76	@ 0x4c
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f020 feba 	bl	80220f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f020 feb3 	bl	80220f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001392:	2002      	movs	r0, #2
 8001394:	f007 fc40 	bl	8008c18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	4b48      	ldr	r3, [pc, #288]	@ (80014c0 <SystemClock_Config+0x150>)
 800139e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a0:	4a47      	ldr	r2, [pc, #284]	@ (80014c0 <SystemClock_Config+0x150>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80013a8:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <SystemClock_Config+0x150>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <SystemClock_Config+0x154>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a43      	ldr	r2, [pc, #268]	@ (80014c4 <SystemClock_Config+0x154>)
 80013b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <SystemClock_Config+0x154>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013ca:	bf00      	nop
 80013cc:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <SystemClock_Config+0x154>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013d8:	d1f8      	bne.n	80013cc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <SystemClock_Config+0x158>)
 80013dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013e0:	4a39      	ldr	r2, [pc, #228]	@ (80014c8 <SystemClock_Config+0x158>)
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <SystemClock_Config+0x158>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <SystemClock_Config+0x154>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <SystemClock_Config+0x154>)
 8001402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <SystemClock_Config+0x154>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <SystemClock_Config+0x150>)
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	4a2a      	ldr	r2, [pc, #168]	@ (80014c0 <SystemClock_Config+0x150>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800141e:	4b28      	ldr	r3, [pc, #160]	@ (80014c0 <SystemClock_Config+0x150>)
 8001420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142a:	bf00      	nop
 800142c:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <SystemClock_Config+0x154>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001438:	d1f8      	bne.n	800142c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143a:	2301      	movs	r3, #1
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800143e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001448:	2302      	movs	r3, #2
 800144a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001450:	2340      	movs	r3, #64	@ 0x40
 8001452:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001460:	230c      	movs	r3, #12
 8001462:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001464:	2300      	movs	r3, #0
 8001466:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001470:	4618      	mov	r0, r3
 8001472:	f007 fc2b 	bl	8008ccc <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800147c:	f000 fbf6 	bl	8001c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001480:	233f      	movs	r3, #63	@ 0x3f
 8001482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2303      	movs	r3, #3
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001490:	2340      	movs	r3, #64	@ 0x40
 8001492:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001498:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800149e:	2340      	movs	r3, #64	@ 0x40
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f008 f869 	bl	8009580 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80014b4:	f000 fbda 	bl	8001c6c <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3778      	adds	r7, #120	@ 0x78
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58000400 	.word	0x58000400
 80014c4:	58024800 	.word	0x58024800
 80014c8:	58024400 	.word	0x58024400

080014cc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2105      	movs	r1, #5
 80014d4:	2006      	movs	r0, #6
 80014d6:	f002 fd30 	bl	8003f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014da:	2006      	movs	r0, #6
 80014dc:	f002 fd47 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <MX_ADC3_Init+0xd8>)
 8001500:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001502:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001510:	2204      	movs	r2, #4
 8001512:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001514:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001516:	2200      	movs	r2, #0
 8001518:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800151c:	2200      	movs	r2, #0
 800151e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001522:	2201      	movs	r2, #1
 8001524:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001554:	2201      	movs	r2, #1
 8001556:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001558:	4817      	ldr	r0, [pc, #92]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800155a:	f001 fbbf 	bl	8002cdc <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001564:	f000 fb82 	bl	8001c6c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800156e:	4812      	ldr	r0, [pc, #72]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 8001570:	f001 fbb4 	bl	8002cdc <HAL_ADC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 800157a:	f000 fb77 	bl	8001c6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_ADC3_Init+0xdc>)
 8001580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001582:	2306      	movs	r3, #6
 8001584:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001586:	2307      	movs	r3, #7
 8001588:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800158e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001590:	2304      	movs	r3, #4
 8001592:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_ADC3_Init+0xd4>)
 80015a2:	f001 ff09 	bl	80033b8 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80015ac:	f000 fb5e 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	24000384 	.word	0x24000384
 80015bc:	58026000 	.word	0x58026000
 80015c0:	cb840000 	.word	0xcb840000

080015c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <MX_TIM1_Init+0xa0>)
 80015e4:	4a20      	ldr	r2, [pc, #128]	@ (8001668 <MX_TIM1_Init+0xa4>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <MX_TIM1_Init+0xa0>)
 80015ea:	223b      	movs	r2, #59	@ 0x3b
 80015ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_TIM1_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <MX_TIM1_Init+0xa0>)
 80015f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_TIM1_Init+0xa0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MX_TIM1_Init+0xa0>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_TIM1_Init+0xa0>)
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <MX_TIM1_Init+0xa0>)
 8001610:	f00b f8c2 	bl	800c798 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800161a:	f000 fb27 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	@ (8001664 <MX_TIM1_Init+0xa0>)
 800162c:	f00b fa8c 	bl	800cb48 <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001636:	f000 fb19 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <MX_TIM1_Init+0xa0>)
 800164c:	f00b fce0 	bl	800d010 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001656:	f000 fb09 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240003e8 	.word	0x240003e8
 8001668:	40010000 	.word	0x40010000

0800166c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001672:	4a23      	ldr	r2, [pc, #140]	@ (8001700 <MX_USART2_UART_Init+0x94>)
 8001674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b4:	4811      	ldr	r0, [pc, #68]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016b6:	f00b fd57 	bl	800d168 <HAL_UART_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016c0:	f000 fad4 	bl	8001c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016c8:	f00d fbbf 	bl	800ee4a <HAL_UARTEx_SetTxFifoThreshold>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f000 facb 	bl	8001c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4808      	ldr	r0, [pc, #32]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016da:	f00d fbf4 	bl	800eec6 <HAL_UARTEx_SetRxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 fac2 	bl	8001c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_USART2_UART_Init+0x90>)
 80016ea:	f00d fb75 	bl	800edd8 <HAL_UARTEx_DisableFifoMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 faba 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	24000434 	.word	0x24000434
 8001700:	40004400 	.word	0x40004400

08001704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 800170a:	4a23      	ldr	r2, [pc, #140]	@ (8001798 <MX_USART3_UART_Init+0x94>)
 800170c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 800172a:	2204      	movs	r2, #4
 800172c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174c:	4811      	ldr	r0, [pc, #68]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 800174e:	f00b fd0b 	bl	800d168 <HAL_UART_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001758:	f000 fa88 	bl	8001c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	480d      	ldr	r0, [pc, #52]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001760:	f00d fb73 	bl	800ee4a <HAL_UARTEx_SetTxFifoThreshold>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800176a:	f000 fa7f 	bl	8001c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4808      	ldr	r0, [pc, #32]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001772:	f00d fba8 	bl	800eec6 <HAL_UARTEx_SetRxFifoThreshold>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800177c:	f000 fa76 	bl	8001c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_USART3_UART_Init+0x90>)
 8001782:	f00d fb29 	bl	800edd8 <HAL_UARTEx_DisableFifoMode>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800178c:	f000 fa6e 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	240004c8 	.word	0x240004c8
 8001798:	40004800 	.word	0x40004800

0800179c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_DMA_Init+0x4c>)
 80017a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017a8:	4a0f      	ldr	r2, [pc, #60]	@ (80017e8 <MX_DMA_Init+0x4c>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <MX_DMA_Init+0x4c>)
 80017b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2105      	movs	r1, #5
 80017c4:	200b      	movs	r0, #11
 80017c6:	f002 fbb8 	bl	8003f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017ca:	200b      	movs	r0, #11
 80017cc:	f002 fbcf 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	200c      	movs	r0, #12
 80017d6:	f002 fbb0 	bl	8003f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017da:	200c      	movs	r0, #12
 80017dc:	f002 fbc7 	bl	8003f6e <HAL_NVIC_EnableIRQ>

}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	58024400 	.word	0x58024400

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b6c      	ldr	r3, [pc, #432]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	4a6a      	ldr	r2, [pc, #424]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001812:	4b68      	ldr	r3, [pc, #416]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b64      	ldr	r3, [pc, #400]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	4a63      	ldr	r2, [pc, #396]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001830:	4b60      	ldr	r3, [pc, #384]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	4b5d      	ldr	r3, [pc, #372]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	4a5b      	ldr	r2, [pc, #364]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184e:	4b59      	ldr	r3, [pc, #356]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	4b55      	ldr	r3, [pc, #340]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	4a54      	ldr	r2, [pc, #336]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186c:	4b51      	ldr	r3, [pc, #324]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	4b4e      	ldr	r3, [pc, #312]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	4a4c      	ldr	r2, [pc, #304]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188a:	4b4a      	ldr	r3, [pc, #296]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001898:	4b46      	ldr	r3, [pc, #280]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	4a45      	ldr	r2, [pc, #276]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a8:	4b42      	ldr	r3, [pc, #264]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b6:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018bc:	4a3d      	ldr	r2, [pc, #244]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 80018be:	f043 0320 	orr.w	r3, r3, #32
 80018c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c6:	4b3b      	ldr	r3, [pc, #236]	@ (80019b4 <MX_GPIO_Init+0x1c8>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MIIM_MDIO_Pin|MIIM_MDC_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80018da:	4837      	ldr	r0, [pc, #220]	@ (80019b8 <MX_GPIO_Init+0x1cc>)
 80018dc:	f007 f968 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_DE_RE_Pin|RS_MODE_SELECT_Pin|TRIGGER_OUT_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f240 4114 	movw	r1, #1044	@ 0x414
 80018e6:	4835      	ldr	r0, [pc, #212]	@ (80019bc <MX_GPIO_Init+0x1d0>)
 80018e8:	f007 f962 	bl	8008bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MIIM_MDIO_Pin */
  GPIO_InitStruct.Pin = MIIM_MDIO_Pin;
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MIIM_MDIO_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	482d      	ldr	r0, [pc, #180]	@ (80019b8 <MX_GPIO_Init+0x1cc>)
 8001904:	f006 ff8c 	bl	8008820 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_IN_Pin */
  GPIO_InitStruct.Pin = TRIGGER_IN_Pin;
 8001908:	2301      	movs	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800190c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TRIGGER_IN_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	4828      	ldr	r0, [pc, #160]	@ (80019c0 <MX_GPIO_Init+0x1d4>)
 800191e:	f006 ff7f 	bl	8008820 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIIM_MDC_Pin */
  GPIO_InitStruct.Pin = MIIM_MDC_Pin;
 8001922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800192c:	2302      	movs	r3, #2
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MIIM_MDC_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	481f      	ldr	r0, [pc, #124]	@ (80019b8 <MX_GPIO_Init+0x1cc>)
 800193c:	f006 ff70 	bl	8008820 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_DE_RE_Pin RS_MODE_SELECT_Pin */
  GPIO_InitStruct.Pin = RS485_DE_RE_Pin|RS_MODE_SELECT_Pin;
 8001940:	2314      	movs	r3, #20
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001948:	2302      	movs	r3, #2
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4819      	ldr	r0, [pc, #100]	@ (80019bc <MX_GPIO_Init+0x1d0>)
 8001958:	f006 ff62 	bl	8008820 <HAL_GPIO_Init>

  /*Configure GPIO pin : IP_SEL_0_Pin */
  GPIO_InitStruct.Pin = IP_SEL_0_Pin;
 800195c:	2310      	movs	r3, #16
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001964:	2302      	movs	r3, #2
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IP_SEL_0_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4815      	ldr	r0, [pc, #84]	@ (80019c4 <MX_GPIO_Init+0x1d8>)
 8001970:	f006 ff56 	bl	8008820 <HAL_GPIO_Init>

  /*Configure GPIO pins : IP_SEL_1_Pin IP_SEL_2_Pin IP_SEL_3_Pin IP_SEL_4_Pin */
  GPIO_InitStruct.Pin = IP_SEL_1_Pin|IP_SEL_2_Pin|IP_SEL_3_Pin|IP_SEL_4_Pin;
 8001974:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <MX_GPIO_Init+0x1d8>)
 800198a:	f006 ff49 	bl	8008820 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_OUT_Pin */
  GPIO_InitStruct.Pin = TRIGGER_OUT_Pin;
 800198e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001998:	2302      	movs	r3, #2
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIGGER_OUT_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_GPIO_Init+0x1d0>)
 80019a8:	f006 ff3a 	bl	8008820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ac:	bf00      	nop
 80019ae:	3730      	adds	r7, #48	@ 0x30
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	58024400 	.word	0x58024400
 80019b8:	58020400 	.word	0x58020400
 80019bc:	58020c00 	.word	0x58020c00
 80019c0:	58021000 	.word	0x58021000
 80019c4:	58021400 	.word	0x58021400

080019c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  GPIO EXTI callback
  * @param  GPIO_Pin: Specifies the pins connected to EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
    // Check if the interrupt is triggered by TRIGGER_IN_Pin
    if (GPIO_Pin == TRIGGER_IN_Pin)
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d111      	bne.n	80019fc <HAL_GPIO_EXTI_Callback+0x34>
    {
        // Read the state of the pin
        GPIO_PinState pinState = HAL_GPIO_ReadPin(TRIGGER_IN_GPIO_Port, TRIGGER_IN_Pin);
 80019d8:	2101      	movs	r1, #1
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x3c>)
 80019dc:	f007 f8d0 	bl	8008b80 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

        // Send UDP message based on the pin state
        if (pinState == GPIO_PIN_RESET)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d104      	bne.n	80019f4 <HAL_GPIO_EXTI_Callback+0x2c>
        {
//            HAL_GPIO_WritePin(TRIGGER_OUT_GPIO_Port, TRIGGER_OUT_Pin, GPIO_PIN_SET);
        	udpsend_trigger("1", 1); // For trigger data
 80019ea:	2101      	movs	r1, #1
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x40>)
 80019ee:	f000 fd2d 	bl	800244c <udpsend_trigger>
        {
//            HAL_GPIO_WritePin(TRIGGER_OUT_GPIO_Port, TRIGGER_OUT_Pin, GPIO_PIN_RESET);
        	udpsend_trigger("0", 1); // For trigger data
        }
    }
}
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_EXTI_Callback+0x34>
        	udpsend_trigger("0", 1); // For trigger data
 80019f4:	2101      	movs	r1, #1
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x44>)
 80019f8:	f000 fd28 	bl	800244c <udpsend_trigger>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	58021000 	.word	0x58021000
 8001a08:	08024ac0 	.word	0x08024ac0
 8001a0c:	08024ac4 	.word	0x08024ac4

08001a10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b0b5      	sub	sp, #212	@ 0xd4
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
    osDelay(1000);
 8001a18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a1c:	f00e fbc3 	bl	80101a6 <osDelay>
  MX_LWIP_Init();
 8001a20:	f00d fade 	bl	800efe0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
    osDelay(1000);
 8001a24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a28:	f00e fbbd 	bl	80101a6 <osDelay>
    ETH_PHY_IO_WriteReg(0, 0, 8448);
 8001a2c:	f44f 5204 	mov.w	r2, #8448	@ 0x2100
 8001a30:	2100      	movs	r1, #0
 8001a32:	2000      	movs	r0, #0
 8001a34:	f00e f8bc 	bl	800fbb0 <ETH_PHY_IO_WriteReg>
    osDelay(1000);
 8001a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3c:	f00e fbb3 	bl	80101a6 <osDelay>
    mqtt_example_init();  // Initial MQTT connection
 8001a40:	f7fe ff9c 	bl	800097c <mqtt_example_init>
    // Variable to store ADC values and temperature
    uint32_t adc_value;
    float temperature;

    // Get the calibration values from memory
    uint16_t ts_cal1 = *TS_CAL1_ADDR;
 8001a44:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <StartDefaultTask+0x15c>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    uint16_t ts_cal2 = *TS_CAL2_ADDR;
 8001a4c:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <StartDefaultTask+0x160>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc

    const float TS_CAL1_TEMP = 30.0f;
 8001a54:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <StartDefaultTask+0x164>)
 8001a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    const float TS_CAL2_TEMP = 110.0f;
 8001a5a:	4b47      	ldr	r3, [pc, #284]	@ (8001b78 <StartDefaultTask+0x168>)
 8001a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    // Topic for publishing temperature updates
    char temperature_topic[128];
    snprintf(temperature_topic, sizeof(temperature_topic), "CMM/slot%d/status/temperature", slot);
 8001a60:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <StartDefaultTask+0x16c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001a68:	4a45      	ldr	r2, [pc, #276]	@ (8001b80 <StartDefaultTask+0x170>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	f020 fa0e 	bl	8021e8c <sniprintf>
    extern struct mqtt_connect_client_info_t mqtt_client_info;
    for (;;)
    {
        // Check if MQTT client is connected
        if (mqtt_client_is_connected(mqtt_client)) {
 8001a70:	4b44      	ldr	r3, [pc, #272]	@ (8001b84 <StartDefaultTask+0x174>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f017 f81f 	bl	8018ab8 <mqtt_client_is_connected>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d06a      	beq.n	8001b56 <StartDefaultTask+0x146>
            // MQTT client is connected, proceed to read sensor and publish data

            // Start ADC conversion for temperature
            HAL_ADC_Start(&hadc3);
 8001a80:	4841      	ldr	r0, [pc, #260]	@ (8001b88 <StartDefaultTask+0x178>)
 8001a82:	f001 facd 	bl	8003020 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	483f      	ldr	r0, [pc, #252]	@ (8001b88 <StartDefaultTask+0x178>)
 8001a8c:	f001 fb92 	bl	80031b4 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 8001a90:	483d      	ldr	r0, [pc, #244]	@ (8001b88 <StartDefaultTask+0x178>)
 8001a92:	f001 fc83 	bl	800339c <HAL_ADC_GetValue>
 8001a96:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

            // Calculate temperature
            temperature = ((float)(adc_value - ts_cal1) * (TS_CAL2_TEMP - TS_CAL1_TEMP) / (float)(ts_cal2 - ts_cal1)) + TS_CAL1_TEMP;
 8001a9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aac:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8001ab0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001ab4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ab8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001abc:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8001ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

            // Print and publish the temperature
            printf("Temperature: %.2f°C\n", temperature);
 8001ade:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001ae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ae6:	ec53 2b17 	vmov	r2, r3, d7
 8001aea:	4828      	ldr	r0, [pc, #160]	@ (8001b8c <StartDefaultTask+0x17c>)
 8001aec:	f020 f95e 	bl	8021dac <iprintf>

            // Publish temperature data to the MQTT broker
            char temperature_message[32];
            snprintf(temperature_message, sizeof(temperature_message), "%.2f", temperature);
 8001af0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	ed8d 7b00 	vstr	d7, [sp]
 8001b00:	4a23      	ldr	r2, [pc, #140]	@ (8001b90 <StartDefaultTask+0x180>)
 8001b02:	2120      	movs	r1, #32
 8001b04:	4618      	mov	r0, r3
 8001b06:	f020 f9c1 	bl	8021e8c <sniprintf>

            err_t err = mqtt_publish(mqtt_client,
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <StartDefaultTask+0x174>)
 8001b0c:	681c      	ldr	r4, [r3, #0]
                                     temperature_topic,          // Topic
                                     temperature_message,        // Message
                                     strlen(temperature_message),// Message length
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fc44 	bl	80003a0 <strlen>
 8001b18:	4603      	mov	r3, r0
            err_t err = mqtt_publish(mqtt_client,
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f107 0208 	add.w	r2, r7, #8
 8001b20:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001b24:	481b      	ldr	r0, [pc, #108]	@ (8001b94 <StartDefaultTask+0x184>)
 8001b26:	9003      	str	r0, [sp, #12]
 8001b28:	481b      	ldr	r0, [pc, #108]	@ (8001b98 <StartDefaultTask+0x188>)
 8001b2a:	9002      	str	r0, [sp, #8]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	9001      	str	r0, [sp, #4]
 8001b30:	2001      	movs	r0, #1
 8001b32:	9000      	str	r0, [sp, #0]
 8001b34:	4620      	mov	r0, r4
 8001b36:	f016 fb53 	bl	80181e0 <mqtt_publish>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                                     1,                          // QoS level
                                     0,                          // Retain flag
                                     mqtt_request_cb,            // Callback function
                                     LWIP_CONST_CAST(void*, &mqtt_client_info)); // Callback argument

            if (err != ERR_OK) {
 8001b40:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <StartDefaultTask+0x150>
                LWIP_PLATFORM_DIAG(("Failed to publish temperature, error %d\n", err));
 8001b48:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4813      	ldr	r0, [pc, #76]	@ (8001b9c <StartDefaultTask+0x18c>)
 8001b50:	f020 f92c 	bl	8021dac <iprintf>
 8001b54:	e004      	b.n	8001b60 <StartDefaultTask+0x150>
            }
        } else {
            // MQTT client is not connected, attempt to reconnect
            LWIP_PLATFORM_DIAG(("MQTT client not connected, attempting to reconnect...\n"));
 8001b56:	4812      	ldr	r0, [pc, #72]	@ (8001ba0 <StartDefaultTask+0x190>)
 8001b58:	f020 f990 	bl	8021e7c <puts>
            mqtt_example_init();  // Attempt to reconnect
 8001b5c:	f7fe ff0e 	bl	800097c <mqtt_example_init>
        }

        // Delay for 2 seconds
        osDelay(2000);
 8001b60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b64:	f00e fb1f 	bl	80101a6 <osDelay>
        if (mqtt_client_is_connected(mqtt_client)) {
 8001b68:	e782      	b.n	8001a70 <StartDefaultTask+0x60>
 8001b6a:	bf00      	nop
 8001b6c:	1ff1e820 	.word	0x1ff1e820
 8001b70:	1ff1e840 	.word	0x1ff1e840
 8001b74:	41f00000 	.word	0x41f00000
 8001b78:	42dc0000 	.word	0x42dc0000
 8001b7c:	24000650 	.word	0x24000650
 8001b80:	08024ac8 	.word	0x08024ac8
 8001b84:	24000238 	.word	0x24000238
 8001b88:	24000384 	.word	0x24000384
 8001b8c:	08024ae8 	.word	0x08024ae8
 8001b90:	08024b00 	.word	0x08024b00
 8001b94:	2400000c 	.word	0x2400000c
 8001b98:	08000851 	.word	0x08000851
 8001b9c:	08024b08 	.word	0x08024b08
 8001ba0:	08024b34 	.word	0x08024b34

08001ba4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001bb6:	f002 f9ed 	bl	8003f94 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001bca:	2387      	movs	r3, #135	@ 0x87
 8001bcc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001be6:	463b      	mov	r3, r7
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fa0b 	bl	8004004 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MPU_Config+0x9c>)
 8001bf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001c02:	2303      	movs	r3, #3
 8001c04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 f9f9 	bl	8004004 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001c12:	2302      	movs	r3, #2
 8001c14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <MPU_Config+0xa0>)
 8001c18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c22:	2301      	movs	r3, #1
 8001c24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 f9e9 	bl	8004004 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c32:	2004      	movs	r0, #4
 8001c34:	f002 f9c6 	bl	8003fc4 <HAL_MPU_Enable>

}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	30020000 	.word	0x30020000
 8001c44:	30040000 	.word	0x30040000

08001c48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c5a:	f000 fdf9 	bl	8002850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40001400 	.word	0x40001400

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <Error_Handler+0x8>

08001c78 <HAL_UART_RxCpltCallback>:
/**
  * @brief  Callback function when DMA transfer is complete or half-complete.
  *         This function processes the data and sends it over UDP.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)  // RS485
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x38>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d104      	bne.n	8001c94 <HAL_UART_RxCpltCallback+0x1c>
    {
        // Process received RS485 data (entire buffer received)
        Process_DMA_RxData(RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);
 8001c8a:	211e      	movs	r1, #30
 8001c8c:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x3c>)
 8001c8e:	f000 f83b 	bl	8001d08 <Process_DMA_RxData>
    else if (huart->Instance == USART2)  // RS232
    {
        // Process received RS232 data (entire buffer received)
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);
    }
}
 8001c92:	e008      	b.n	8001ca6 <HAL_UART_RxCpltCallback+0x2e>
    else if (huart->Instance == USART2)  // RS232
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x40>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d103      	bne.n	8001ca6 <HAL_UART_RxCpltCallback+0x2e>
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);
 8001c9e:	211e      	movs	r1, #30
 8001ca0:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <HAL_UART_RxCpltCallback+0x44>)
 8001ca2:	f000 f831 	bl	8001d08 <Process_DMA_RxData>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40004800 	.word	0x40004800
 8001cb4:	24000674 	.word	0x24000674
 8001cb8:	40004400 	.word	0x40004400
 8001cbc:	24000654 	.word	0x24000654

08001cc0 <HAL_UART_RxHalfCpltCallback>:
/**
  * @brief  Callback function when DMA half-transfer is complete.
  *         This function processes half of the data.
  */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)  // RS485
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <HAL_UART_RxHalfCpltCallback+0x38>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d104      	bne.n	8001cdc <HAL_UART_RxHalfCpltCallback+0x1c>
    {
        // Process the first half of the RS485 buffer
        Process_DMA_RxData(RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE / 2);
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	4809      	ldr	r0, [pc, #36]	@ (8001cfc <HAL_UART_RxHalfCpltCallback+0x3c>)
 8001cd6:	f000 f817 	bl	8001d08 <Process_DMA_RxData>
    else if (huart->Instance == USART2)  // RS232
    {
        // Process the first half of the RS232 buffer
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE / 2);
    }
}
 8001cda:	e008      	b.n	8001cee <HAL_UART_RxHalfCpltCallback+0x2e>
    else if (huart->Instance == USART2)  // RS232
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_UART_RxHalfCpltCallback+0x40>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d103      	bne.n	8001cee <HAL_UART_RxHalfCpltCallback+0x2e>
        Process_DMA_RxData(RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE / 2);
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <HAL_UART_RxHalfCpltCallback+0x44>)
 8001cea:	f000 f80d 	bl	8001d08 <Process_DMA_RxData>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40004800 	.word	0x40004800
 8001cfc:	24000674 	.word	0x24000674
 8001d00:	40004400 	.word	0x40004400
 8001d04:	24000654 	.word	0x24000654

08001d08 <Process_DMA_RxData>:
  * @brief  Processes the received UART data from DMA buffer and sends it over UDP.
  * @param  data: Pointer to the DMA buffer containing received data.
  * @param  len: Length of the received data to process.
  */
void Process_DMA_RxData(uint8_t *data, uint16_t len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
    // Iterate through the received data and send each byte over UDP
    for (uint16_t i = 0; i < len; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	81fb      	strh	r3, [r7, #14]
 8001d18:	e009      	b.n	8001d2e <Process_DMA_RxData+0x26>
    {
        udpsend_serial((const char *)&data[i], 1);  // Send each byte as a separate UDP packet
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	2101      	movs	r1, #1
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fbd6 	bl	80024d4 <udpsend_serial>
    for (uint16_t i = 0; i < len; i++)
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	81fb      	strh	r3, [r7, #14]
 8001d2e:	89fa      	ldrh	r2, [r7, #14]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d3f1      	bcc.n	8001d1a <Process_DMA_RxData+0x12>
    }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <Switch_RS_Mode>:
/**
  * @brief  Switches the mode of serial communication between RS232 and RS485.
  * @param  RS_Mode: Mode to switch to (RS232_MODE or RS485_MODE).
  */
void Switch_RS_Mode(uint8_t RS_Mode)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
    mode = RS_Mode;  // Set the global mode variable
 8001d4a:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <Switch_RS_Mode+0x5c>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	7013      	strb	r3, [r2, #0]

    if (RS_Mode == RS232_MODE)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <Switch_RS_Mode+0x32>
    {
        HAL_GPIO_WritePin(RS_MODE_SELECT_GPIO_Port, RS_MODE_SELECT_Pin, GPIO_PIN_RESET);  // Switch to RS232
 8001d56:	2200      	movs	r2, #0
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <Switch_RS_Mode+0x60>)
 8001d5c:	f006 ff28 	bl	8008bb0 <HAL_GPIO_WritePin>
        HAL_UART_Receive_DMA(&huart2, RS232_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);  // Restart DMA reception for RS232
 8001d60:	221e      	movs	r2, #30
 8001d62:	4910      	ldr	r1, [pc, #64]	@ (8001da4 <Switch_RS_Mode+0x64>)
 8001d64:	4810      	ldr	r0, [pc, #64]	@ (8001da8 <Switch_RS_Mode+0x68>)
 8001d66:	f00b fa4f 	bl	800d208 <HAL_UART_Receive_DMA>
        printf("Switched to RS232 mode\n");
 8001d6a:	4810      	ldr	r0, [pc, #64]	@ (8001dac <Switch_RS_Mode+0x6c>)
 8001d6c:	f020 f886 	bl	8021e7c <puts>
    {
        HAL_GPIO_WritePin(RS_MODE_SELECT_GPIO_Port, RS_MODE_SELECT_Pin, GPIO_PIN_SET);  // Switch to RS485
        HAL_UART_Receive_DMA(&huart3, RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);  // Restart DMA reception for RS485
        printf("Switched to RS485 mode\n");
    }
}
 8001d70:	e00f      	b.n	8001d92 <Switch_RS_Mode+0x52>
    else if (RS_Mode == RS485_MODE)
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10c      	bne.n	8001d92 <Switch_RS_Mode+0x52>
        HAL_GPIO_WritePin(RS_MODE_SELECT_GPIO_Port, RS_MODE_SELECT_Pin, GPIO_PIN_SET);  // Switch to RS485
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <Switch_RS_Mode+0x60>)
 8001d7e:	f006 ff17 	bl	8008bb0 <HAL_GPIO_WritePin>
        HAL_UART_Receive_DMA(&huart3, RS485_DMA_RxBuffer, DMA_RX_BUFFER_SIZE);  // Restart DMA reception for RS485
 8001d82:	221e      	movs	r2, #30
 8001d84:	490a      	ldr	r1, [pc, #40]	@ (8001db0 <Switch_RS_Mode+0x70>)
 8001d86:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <Switch_RS_Mode+0x74>)
 8001d88:	f00b fa3e 	bl	800d208 <HAL_UART_Receive_DMA>
        printf("Switched to RS485 mode\n");
 8001d8c:	480a      	ldr	r0, [pc, #40]	@ (8001db8 <Switch_RS_Mode+0x78>)
 8001d8e:	f020 f875 	bl	8021e7c <puts>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	24000692 	.word	0x24000692
 8001da0:	58020c00 	.word	0x58020c00
 8001da4:	24000654 	.word	0x24000654
 8001da8:	24000434 	.word	0x24000434
 8001dac:	08024b6c 	.word	0x08024b6c
 8001db0:	24000674 	.word	0x24000674
 8001db4:	240004c8 	.word	0x240004c8
 8001db8:	08024b84 	.word	0x08024b84

08001dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <HAL_MspInit+0x38>)
 8001dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_MspInit+0x38>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_MspInit+0x38>)
 8001dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	210f      	movs	r1, #15
 8001de4:	f06f 0001 	mvn.w	r0, #1
 8001de8:	f002 f8a7 	bl	8003f3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	58024400 	.word	0x58024400

08001df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0b6      	sub	sp, #216	@ 0xd8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	22c8      	movs	r2, #200	@ 0xc8
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f020 f975 	bl	80220f8 <memset>
  if(hadc->Instance==ADC3)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <HAL_ADC_MspInit+0x8c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d131      	bne.n	8001e7c <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 64;
 8001e28:	2340      	movs	r3, #64	@ 0x40
 8001e2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 16;
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e38:	23c0      	movs	r3, #192	@ 0xc0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f007 ff64 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001e5a:	f7ff ff07 	bl	8001c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_ADC_MspInit+0x90>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_ADC_MspInit+0x90>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_ADC_MspInit+0x90>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	37d8      	adds	r7, #216	@ 0xd8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58026000 	.word	0x58026000
 8001e88:	58024400 	.word	0x58024400

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ea4:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	58024400 	.word	0x58024400

08001ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0be      	sub	sp, #248	@ 0xf8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0318 	add.w	r3, r7, #24
 8001eec:	22c8      	movs	r2, #200	@ 0xc8
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f020 f901 	bl	80220f8 <memset>
  if(huart->Instance==USART2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8f      	ldr	r2, [pc, #572]	@ (8002138 <HAL_UART_MspInit+0x268>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 8088 	bne.w	8002012 <HAL_UART_MspInit+0x142>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f02:	f04f 0202 	mov.w	r2, #2
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f14:	f107 0318 	add.w	r3, r7, #24
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f007 feff 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001f24:	f7ff fea2 	bl	8001c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f28:	4b84      	ldr	r3, [pc, #528]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8001f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f2e:	4a83      	ldr	r2, [pc, #524]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f38:	4b80      	ldr	r3, [pc, #512]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8001f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b7d      	ldr	r3, [pc, #500]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4c:	4a7b      	ldr	r2, [pc, #492]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f56:	4b79      	ldr	r3, [pc, #484]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001f64:	2360      	movs	r3, #96	@ 0x60
 8001f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f82:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f86:	4619      	mov	r1, r3
 8001f88:	486d      	ldr	r0, [pc, #436]	@ (8002140 <HAL_UART_MspInit+0x270>)
 8001f8a:	f006 fc49 	bl	8008820 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001f90:	4a6d      	ldr	r2, [pc, #436]	@ (8002148 <HAL_UART_MspInit+0x278>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001f94:	4b6b      	ldr	r3, [pc, #428]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001f96:	222b      	movs	r2, #43	@ 0x2b
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b68      	ldr	r3, [pc, #416]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b67      	ldr	r3, [pc, #412]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fae:	4b65      	ldr	r3, [pc, #404]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb4:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001fba:	4b62      	ldr	r3, [pc, #392]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001fc2:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fca:	4b5e      	ldr	r3, [pc, #376]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fcc:	2204      	movs	r2, #4
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001fdc:	4b59      	ldr	r3, [pc, #356]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fe2:	4858      	ldr	r0, [pc, #352]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001fe4:	f002 f862 	bl	80040ac <HAL_DMA_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8001fee:	f7ff fe3d 	bl	8001c6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a53      	ldr	r2, [pc, #332]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ffa:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <HAL_UART_MspInit+0x274>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2105      	movs	r1, #5
 8002004:	2026      	movs	r0, #38	@ 0x26
 8002006:	f001 ff98 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800200a:	2026      	movs	r0, #38	@ 0x26
 800200c:	f001 ffaf 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002010:	e08d      	b.n	800212e <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART3)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a4d      	ldr	r2, [pc, #308]	@ (800214c <HAL_UART_MspInit+0x27c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	f040 8088 	bne.w	800212e <HAL_UART_MspInit+0x25e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800201e:	f04f 0202 	mov.w	r2, #2
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002030:	f107 0318 	add.w	r3, r7, #24
 8002034:	4618      	mov	r0, r3
 8002036:	f007 fe71 	bl	8009d1c <HAL_RCCEx_PeriphCLKConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0x174>
      Error_Handler();
 8002040:	f7ff fe14 	bl	8001c6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002044:	4b3d      	ldr	r3, [pc, #244]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8002046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800204a:	4a3c      	ldr	r2, [pc, #240]	@ (800213c <HAL_UART_MspInit+0x26c>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002050:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002054:	4b39      	ldr	r3, [pc, #228]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8002056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800205a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	4b36      	ldr	r3, [pc, #216]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002068:	4a34      	ldr	r2, [pc, #208]	@ (800213c <HAL_UART_MspInit+0x26c>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002072:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_UART_MspInit+0x26c>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002080:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002084:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209a:	2307      	movs	r3, #7
 800209c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020a4:	4619      	mov	r1, r3
 80020a6:	482a      	ldr	r0, [pc, #168]	@ (8002150 <HAL_UART_MspInit+0x280>)
 80020a8:	f006 fbba 	bl	8008820 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80020ac:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002158 <HAL_UART_MspInit+0x288>)
 80020b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80020b2:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020b4:	222d      	movs	r2, #45	@ 0x2d
 80020b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b8:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c4:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020de:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020ea:	2204      	movs	r2, #4
 80020ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80020ee:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80020f4:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80020fa:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <HAL_UART_MspInit+0x284>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002100:	4814      	ldr	r0, [pc, #80]	@ (8002154 <HAL_UART_MspInit+0x284>)
 8002102:	f001 ffd3 	bl	80040ac <HAL_DMA_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800210c:	f7ff fdae 	bl	8001c6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a10      	ldr	r2, [pc, #64]	@ (8002154 <HAL_UART_MspInit+0x284>)
 8002114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002118:	4a0e      	ldr	r2, [pc, #56]	@ (8002154 <HAL_UART_MspInit+0x284>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2105      	movs	r1, #5
 8002122:	2027      	movs	r0, #39	@ 0x27
 8002124:	f001 ff09 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002128:	2027      	movs	r0, #39	@ 0x27
 800212a:	f001 ff20 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	37f8      	adds	r7, #248	@ 0xf8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400
 800213c:	58024400 	.word	0x58024400
 8002140:	58020c00 	.word	0x58020c00
 8002144:	2400055c 	.word	0x2400055c
 8002148:	40020028 	.word	0x40020028
 800214c:	40004800 	.word	0x40004800
 8002150:	58020800 	.word	0x58020800
 8002154:	240005d4 	.word	0x240005d4
 8002158:	40020010 	.word	0x40020010

0800215c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b090      	sub	sp, #64	@ 0x40
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	d827      	bhi.n	80021ba <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800216a:	2200      	movs	r2, #0
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	2037      	movs	r0, #55	@ 0x37
 8002170:	f001 fee3 	bl	8003f3a <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002174:	2037      	movs	r0, #55	@ 0x37
 8002176:	f001 fefa 	bl	8003f6e <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800217a:	4a29      	ldr	r2, [pc, #164]	@ (8002220 <HAL_InitTick+0xc4>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002180:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <HAL_InitTick+0xc8>)
 8002182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002186:	4a27      	ldr	r2, [pc, #156]	@ (8002224 <HAL_InitTick+0xc8>)
 8002188:	f043 0320 	orr.w	r3, r3, #32
 800218c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002190:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <HAL_InitTick+0xc8>)
 8002192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800219e:	f107 0210 	add.w	r2, r7, #16
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f007 fd75 	bl	8009c98 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <HAL_InitTick+0x6a>
 80021b8:	e001      	b.n	80021be <HAL_InitTick+0x62>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e02b      	b.n	8002216 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021be:	f007 fd3f 	bl	8009c40 <HAL_RCC_GetPCLK1Freq>
 80021c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80021c4:	e004      	b.n	80021d0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021c6:	f007 fd3b 	bl	8009c40 <HAL_RCC_GetPCLK1Freq>
 80021ca:	4603      	mov	r3, r0
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <HAL_InitTick+0xcc>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	0c9b      	lsrs	r3, r3, #18
 80021da:	3b01      	subs	r3, #1
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_InitTick+0xd0>)
 80021e0:	4a13      	ldr	r2, [pc, #76]	@ (8002230 <HAL_InitTick+0xd4>)
 80021e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_InitTick+0xd0>)
 80021e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021ea:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80021ec:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <HAL_InitTick+0xd0>)
 80021ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_InitTick+0xd0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <HAL_InitTick+0xd0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80021fe:	480b      	ldr	r0, [pc, #44]	@ (800222c <HAL_InitTick+0xd0>)
 8002200:	f00a faca 	bl	800c798 <HAL_TIM_Base_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d104      	bne.n	8002214 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800220a:	4808      	ldr	r0, [pc, #32]	@ (800222c <HAL_InitTick+0xd0>)
 800220c:	f00a fb1c 	bl	800c848 <HAL_TIM_Base_Start_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	e000      	b.n	8002216 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	3740      	adds	r7, #64	@ 0x40
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	24000028 	.word	0x24000028
 8002224:	58024400 	.word	0x58024400
 8002228:	431bde83 	.word	0x431bde83
 800222c:	24000694 	.word	0x24000694
 8002230:	40001400 	.word	0x40001400

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <NMI_Handler+0x4>

0800223c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <MemManage_Handler+0x4>

0800224c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <BusFault_Handler+0x4>

08002254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <UsageFault_Handler+0x4>

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIGGER_IN_Pin);
 800226e:	2001      	movs	r0, #1
 8002270:	f006 fcb7 	bl	8008be2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <DMA1_Stream0_IRQHandler+0x10>)
 800227e:	f003 fa3f 	bl	8005700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	240005d4 	.word	0x240005d4

0800228c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <DMA1_Stream1_IRQHandler+0x10>)
 8002292:	f003 fa35 	bl	8005700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2400055c 	.word	0x2400055c

080022a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <USART2_IRQHandler+0x10>)
 80022a6:	f00a fffb 	bl	800d2a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	24000434 	.word	0x24000434

080022b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <USART3_IRQHandler+0x10>)
 80022ba:	f00a fff1 	bl	800d2a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	240004c8 	.word	0x240004c8

080022c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <TIM7_IRQHandler+0x10>)
 80022ce:	f00a fb33 	bl	800c938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	24000694 	.word	0x24000694

080022dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <ETH_IRQHandler+0x10>)
 80022e2:	f005 f8f3 	bl	80074cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	24000774 	.word	0x24000774

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_kill>:

int _kill(int pid, int sig)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <_kill+0x20>)
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
  return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	24012848 	.word	0x24012848

08002324 <_exit>:

void _exit (int status)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ffe5 	bl	8002300 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <_exit+0x12>

0800233a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e00a      	b.n	8002362 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234c:	f3af 8000 	nop.w
 8002350:	4601      	mov	r1, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	60ba      	str	r2, [r7, #8]
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	dbf0      	blt.n	800234c <_read+0x12>
  }

  return len;
 800236a:	687b      	ldr	r3, [r7, #4]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800239c:	605a      	str	r2, [r3, #4]
  return 0;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_isatty>:

int _isatty(int file)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d205      	bcs.n	8002418 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <_sbrk+0x6c>)
 800240e:	220c      	movs	r2, #12
 8002410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	e009      	b.n	800242c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	4a06      	ldr	r2, [pc, #24]	@ (8002440 <_sbrk+0x64>)
 8002428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	24080000 	.word	0x24080000
 800243c:	00000400 	.word	0x00000400
 8002440:	240006e0 	.word	0x240006e0
 8002444:	24012858 	.word	0x24012858
 8002448:	24012848 	.word	0x24012848

0800244c <udpsend_trigger>:
  * @param  data: Pointer to the data to be sent.
  * @param  len: Length of the data.
  * @retval None
  */
void udpsend_trigger(const char *data, size_t len)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    err_t err;
    struct netbuf *buf = netbuf_new();
 8002456:	f016 fb51 	bl	8018afc <netbuf_new>
 800245a:	60f8      	str	r0, [r7, #12]

    if (buf == NULL)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <udpsend_trigger+0x1e>
    {
        printf("Failed to create netbuf for trigger data\n");
 8002462:	4817      	ldr	r0, [pc, #92]	@ (80024c0 <udpsend_trigger+0x74>)
 8002464:	f01f fd0a 	bl	8021e7c <puts>
        return;
 8002468:	e027      	b.n	80024ba <udpsend_trigger+0x6e>
    }

    /* Reference the data directly without copying */
    if (netbuf_ref(buf, data, len) != ERR_OK)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f016 fbc0 	bl	8018bf8 <netbuf_ref>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <udpsend_trigger+0x40>
    {
        printf("Failed to reference trigger data\n");
 800247e:	4811      	ldr	r0, [pc, #68]	@ (80024c4 <udpsend_trigger+0x78>)
 8002480:	f01f fcfc 	bl	8021e7c <puts>
        netbuf_delete(buf);
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f016 fb4d 	bl	8018b24 <netbuf_delete>
        return;
 800248a:	e016      	b.n	80024ba <udpsend_trigger+0x6e>
    }

    /* Send trigger data to the server's IP on the receiving port */
    err = netconn_sendto(conn_send_trigger, buf, &server_addr, LOCAL_PORT_RECV);
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <udpsend_trigger+0x7c>)
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	f241 338e 	movw	r3, #5006	@ 0x138e
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <udpsend_trigger+0x80>)
 8002496:	68f9      	ldr	r1, [r7, #12]
 8002498:	f011 fbdf 	bl	8013c5a <netconn_sendto>
 800249c:	4603      	mov	r3, r0
 800249e:	72fb      	strb	r3, [r7, #11]
    if (err != ERR_OK)
 80024a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <udpsend_trigger+0x68>
    {
        printf("Failed to send trigger data: %d\n", err);
 80024a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4808      	ldr	r0, [pc, #32]	@ (80024d0 <udpsend_trigger+0x84>)
 80024b0:	f01f fc7c 	bl	8021dac <iprintf>
    }

    netbuf_delete(buf);
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f016 fb35 	bl	8018b24 <netbuf_delete>
}
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	08024c00 	.word	0x08024c00
 80024c4:	08024c2c 	.word	0x08024c2c
 80024c8:	240006e4 	.word	0x240006e4
 80024cc:	240006ec 	.word	0x240006ec
 80024d0:	08024c50 	.word	0x08024c50

080024d4 <udpsend_serial>:
  * @param  data: Pointer to the data to be sent.
  * @param  len: Length of the data.
  * @retval None
  */
void udpsend_serial(const char *data, size_t len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    err_t err;
    struct netbuf *buf = netbuf_new();
 80024de:	f016 fb0d 	bl	8018afc <netbuf_new>
 80024e2:	6178      	str	r0, [r7, #20]

    if (buf == NULL)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <udpsend_serial+0x1e>
    {
        printf("Failed to create netbuf for serial data\n");
 80024ea:	481d      	ldr	r0, [pc, #116]	@ (8002560 <udpsend_serial+0x8c>)
 80024ec:	f01f fcc6 	bl	8021e7c <puts>
        return;
 80024f0:	e032      	b.n	8002558 <udpsend_serial+0x84>
    }

    // Allocate space and copy the single byte (or data of size `len`)
    char *udp_data = (char*)netbuf_alloc(buf, len);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6978      	ldr	r0, [r7, #20]
 80024fa:	f016 fb33 	bl	8018b64 <netbuf_alloc>
 80024fe:	6138      	str	r0, [r7, #16]
    if (udp_data == NULL)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <udpsend_serial+0x40>
    {
        printf("Failed to allocate space for serial data\n");
 8002506:	4817      	ldr	r0, [pc, #92]	@ (8002564 <udpsend_serial+0x90>)
 8002508:	f01f fcb8 	bl	8021e7c <puts>
        netbuf_delete(buf);
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f016 fb09 	bl	8018b24 <netbuf_delete>
        return;
 8002512:	e021      	b.n	8002558 <udpsend_serial+0x84>
    }

    memcpy(udp_data, data, len);  // Copy the data (usually 1 byte)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	6938      	ldr	r0, [r7, #16]
 800251a:	f01f fee8 	bl	80222ee <memcpy>

    // Debugging: Log the byte being sent
    printf("Sending serial byte: %.*s\n", (int)len, udp_data);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4619      	mov	r1, r3
 8002524:	4810      	ldr	r0, [pc, #64]	@ (8002568 <udpsend_serial+0x94>)
 8002526:	f01f fc41 	bl	8021dac <iprintf>

    // Send the byte to the server's IP on the receiving port
    err = netconn_sendto(conn_send_serial, buf, &server_addr, LOCAL_PORT_RECV);
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <udpsend_serial+0x98>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	f241 338e 	movw	r3, #5006	@ 0x138e
 8002532:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <udpsend_serial+0x9c>)
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	f011 fb90 	bl	8013c5a <netconn_sendto>
 800253a:	4603      	mov	r3, r0
 800253c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK)
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <udpsend_serial+0x7e>
    {
        printf("Failed to send serial data: %d\n", err);
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4619      	mov	r1, r3
 800254c:	4809      	ldr	r0, [pc, #36]	@ (8002574 <udpsend_serial+0xa0>)
 800254e:	f01f fc2d 	bl	8021dac <iprintf>
    }

    netbuf_delete(buf);
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f016 fae6 	bl	8018b24 <netbuf_delete>
}
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	08024c74 	.word	0x08024c74
 8002564:	08024c9c 	.word	0x08024c9c
 8002568:	08024cc8 	.word	0x08024cc8
 800256c:	240006e8 	.word	0x240006e8
 8002570:	240006ec 	.word	0x240006ec
 8002574:	08024ce4 	.word	0x08024ce4

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800257c:	f7fe f890 	bl	80006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002582:	490d      	ldr	r1, [pc, #52]	@ (80025b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002584:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002588:	e002      	b.n	8002590 <LoopCopyDataInit>

0800258a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800258c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258e:	3304      	adds	r3, #4

08002590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002594:	d3f9      	bcc.n	800258a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002598:	4c0a      	ldr	r4, [pc, #40]	@ (80025c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800259c:	e001      	b.n	80025a2 <LoopFillZerobss>

0800259e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a0:	3204      	adds	r2, #4

080025a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a4:	d3fb      	bcc.n	800259e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025a6:	f01f fe7b 	bl	80222a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7fe fe4b 	bl	8001244 <main>
  bx  lr
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025b8:	2400021c 	.word	0x2400021c
  ldr r2, =_sidata
 80025bc:	08028f3c 	.word	0x08028f3c
  ldr r2, =_sbss
 80025c0:	2400021c 	.word	0x2400021c
  ldr r4, =_ebss
 80025c4:	24012858 	.word	0x24012858

080025c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC3_IRQHandler>

080025ca <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <LAN8742_RegisterBusIO+0x28>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <LAN8742_RegisterBusIO+0x28>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <LAN8742_RegisterBusIO+0x28>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	e014      	b.n	8002622 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d139      	bne.n	80026be <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e01c      	b.n	800269e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f107 020c 	add.w	r2, r7, #12
 800266c:	2112      	movs	r1, #18
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	4798      	blx	r3
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	da03      	bge.n	8002680 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002678:	f06f 0304 	mvn.w	r3, #4
 800267c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800267e:	e00b      	b.n	8002698 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d105      	bne.n	8002698 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
         break;
 8002696:	e005      	b.n	80026a4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	d9df      	bls.n	8002664 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	d902      	bls.n	80026b2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80026ac:	f06f 0302 	mvn.w	r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80026be:	693b      	ldr	r3, [r7, #16]
 }
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6810      	ldr	r0, [r2, #0]
 80026dc:	f107 020c 	add.w	r2, r7, #12
 80026e0:	2101      	movs	r1, #1
 80026e2:	4798      	blx	r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da02      	bge.n	80026f0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026ea:	f06f 0304 	mvn.w	r3, #4
 80026ee:	e06e      	b.n	80027ce <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6810      	ldr	r0, [r2, #0]
 80026f8:	f107 020c 	add.w	r2, r7, #12
 80026fc:	2101      	movs	r1, #1
 80026fe:	4798      	blx	r3
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	da02      	bge.n	800270c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002706:	f06f 0304 	mvn.w	r3, #4
 800270a:	e060      	b.n	80027ce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002716:	2301      	movs	r3, #1
 8002718:	e059      	b.n	80027ce <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6810      	ldr	r0, [r2, #0]
 8002722:	f107 020c 	add.w	r2, r7, #12
 8002726:	2100      	movs	r1, #0
 8002728:	4798      	blx	r3
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	da02      	bge.n	8002736 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002730:	f06f 0304 	mvn.w	r3, #4
 8002734:	e04b      	b.n	80027ce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11b      	bne.n	8002778 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <LAN8742_GetLinkState+0x90>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002754:	2302      	movs	r3, #2
 8002756:	e03a      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002762:	2303      	movs	r3, #3
 8002764:	e033      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002770:	2304      	movs	r3, #4
 8002772:	e02c      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002774:	2305      	movs	r3, #5
 8002776:	e02a      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6810      	ldr	r0, [r2, #0]
 8002780:	f107 020c 	add.w	r2, r7, #12
 8002784:	211f      	movs	r1, #31
 8002786:	4798      	blx	r3
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	da02      	bge.n	8002794 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800278e:	f06f 0304 	mvn.w	r3, #4
 8002792:	e01c      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800279e:	2306      	movs	r3, #6
 80027a0:	e015      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 031c 	and.w	r3, r3, #28
 80027a8:	2b18      	cmp	r3, #24
 80027aa:	d101      	bne.n	80027b0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027ac:	2302      	movs	r3, #2
 80027ae:	e00e      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 031c 	and.w	r3, r3, #28
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d101      	bne.n	80027be <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e007      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 031c 	and.w	r3, r3, #28
 80027c4:	2b14      	cmp	r3, #20
 80027c6:	d101      	bne.n	80027cc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027c8:	2304      	movs	r3, #4
 80027ca:	e000      	b.n	80027ce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027cc:	2305      	movs	r3, #5
    }
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027de:	2003      	movs	r0, #3
 80027e0:	f001 fba0 	bl	8003f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027e4:	f007 f882 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_Init+0x68>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	4913      	ldr	r1, [pc, #76]	@ (8002844 <HAL_Init+0x6c>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002802:	4b0f      	ldr	r3, [pc, #60]	@ (8002840 <HAL_Init+0x68>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4a0e      	ldr	r2, [pc, #56]	@ (8002844 <HAL_Init+0x6c>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_Init+0x70>)
 800281a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800281c:	4a0b      	ldr	r2, [pc, #44]	@ (800284c <HAL_Init+0x74>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002822:	200f      	movs	r0, #15
 8002824:	f7ff fc9a 	bl	800215c <HAL_InitTick>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e002      	b.n	8002838 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002832:	f7ff fac3 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	58024400 	.word	0x58024400
 8002844:	080289cc 	.word	0x080289cc
 8002848:	24000004 	.word	0x24000004
 800284c:	24000000 	.word	0x24000000

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2400002c 	.word	0x2400002c
 8002874:	240006f0 	.word	0x240006f0

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	240006f0 	.word	0x240006f0

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2400002c 	.word	0x2400002c

080028d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80028dc:	4b03      	ldr	r3, [pc, #12]	@ (80028ec <HAL_GetREVID+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0c1b      	lsrs	r3, r3, #16
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	5c001000 	.word	0x5c001000

080028f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002900:	4904      	ldr	r1, [pc, #16]	@ (8002914 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	58000400 	.word	0x58000400

08002918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3360      	adds	r3, #96	@ 0x60
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	611a      	str	r2, [r3, #16]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b087      	sub	sp, #28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3360      	adds	r3, #96	@ 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3330      	adds	r3, #48	@ 0x30
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	4413      	add	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	211f      	movs	r1, #31
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 011f 	and.w	r1, r3, #31
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	0e5b      	lsrs	r3, r3, #25
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	0d1b      	lsrs	r3, r3, #20
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2107      	movs	r1, #7
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	401a      	ands	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	0d1b      	lsrs	r3, r3, #20
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	431a      	orrs	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0318 	and.w	r3, r3, #24
 8002b1e:	4908      	ldr	r1, [pc, #32]	@ (8002b40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b20:	40d9      	lsrs	r1, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	400b      	ands	r3, r1
 8002b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	000fffff 	.word	0x000fffff

08002b44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 031f 	and.w	r3, r3, #31
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6093      	str	r3, [r2, #8]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	5fffffc0 	.word	0x5fffffc0

08002ba0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb4:	d101      	bne.n	8002bba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <LL_ADC_EnableInternalRegulator+0x24>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	6fffffc0 	.word	0x6fffffc0

08002bf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <LL_ADC_Enable+0x24>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	7fffffc0 	.word	0x7fffffc0

08002c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_ADC_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_ADC_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <LL_ADC_REG_StartConversion+0x24>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	7fffffc0 	.word	0x7fffffc0

08002c90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d101      	bne.n	8002ca8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d101      	bne.n	8002cce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e18f      	b.n	8003016 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff f877 	bl	8001df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff3f 	bl	8002ba0 <LL_ADC_IsDeepPowerDownEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff25 	bl	8002b7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff5a 	bl	8002bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d114      	bne.n	8002d6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff3e 	bl	8002bc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d4c:	4b87      	ldr	r3, [pc, #540]	@ (8002f6c <HAL_ADC_Init+0x290>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	4a87      	ldr	r2, [pc, #540]	@ (8002f70 <HAL_ADC_Init+0x294>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d5e:	e002      	b.n	8002d66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff3d 	bl	8002bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff77 	bl	8002c90 <LL_ADC_REG_IsConversionOngoing>
 8002da2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8129 	bne.w	8003004 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 8125 	bne.w	8003004 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff36 	bl	8002c40 <LL_ADC_IsEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d136      	bne.n	8002e48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <HAL_ADC_Init+0x298>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_Init+0x112>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a63      	ldr	r2, [pc, #396]	@ (8002f78 <HAL_ADC_Init+0x29c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10e      	bne.n	8002e0c <HAL_ADC_Init+0x130>
 8002dee:	4861      	ldr	r0, [pc, #388]	@ (8002f74 <HAL_ADC_Init+0x298>)
 8002df0:	f7ff ff26 	bl	8002c40 <LL_ADC_IsEnabled>
 8002df4:	4604      	mov	r4, r0
 8002df6:	4860      	ldr	r0, [pc, #384]	@ (8002f78 <HAL_ADC_Init+0x29c>)
 8002df8:	f7ff ff22 	bl	8002c40 <LL_ADC_IsEnabled>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4323      	orrs	r3, r4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e008      	b.n	8002e1e <HAL_ADC_Init+0x142>
 8002e0c:	485b      	ldr	r0, [pc, #364]	@ (8002f7c <HAL_ADC_Init+0x2a0>)
 8002e0e:	f7ff ff17 	bl	8002c40 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a53      	ldr	r2, [pc, #332]	@ (8002f74 <HAL_ADC_Init+0x298>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_ADC_Init+0x15a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a51      	ldr	r2, [pc, #324]	@ (8002f78 <HAL_ADC_Init+0x29c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x15e>
 8002e36:	4a52      	ldr	r2, [pc, #328]	@ (8002f80 <HAL_ADC_Init+0x2a4>)
 8002e38:	e000      	b.n	8002e3c <HAL_ADC_Init+0x160>
 8002e3a:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_ADC_Init+0x2a8>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f7ff fd68 	bl	8002918 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e48:	f7ff fd46 	bl	80028d8 <HAL_GetREVID>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d914      	bls.n	8002e80 <HAL_ADC_Init+0x1a4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d110      	bne.n	8002e80 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7d5b      	ldrb	r3, [r3, #21]
 8002e62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7f1b      	ldrb	r3, [r3, #28]
 8002e74:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e76:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e78:	f043 030c 	orr.w	r3, r3, #12
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e00d      	b.n	8002e9c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7d5b      	ldrb	r3, [r3, #21]
 8002e84:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e8a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e90:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7f1b      	ldrb	r3, [r3, #28]
 8002e96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7f1b      	ldrb	r3, [r3, #28]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	045b      	lsls	r3, r3, #17
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <HAL_ADC_Init+0x2ac>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	69b9      	ldr	r1, [r7, #24]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fed2 	bl	8002c90 <LL_ADC_REG_IsConversionOngoing>
 8002eec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fedf 	bl	8002cb6 <LL_ADC_INJ_IsConversionOngoing>
 8002ef8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d15f      	bne.n	8002fc0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d15c      	bne.n	8002fc0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7d1b      	ldrb	r3, [r3, #20]
 8002f0a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f8c <HAL_ADC_Init+0x2b0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d130      	bne.n	8002f94 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <HAL_ADC_Init+0x2b4>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f46:	3a01      	subs	r2, #1
 8002f48:	0411      	lsls	r1, r2, #16
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f54:	4311      	orrs	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	611a      	str	r2, [r3, #16]
 8002f68:	e01c      	b.n	8002fa4 <HAL_ADC_Init+0x2c8>
 8002f6a:	bf00      	nop
 8002f6c:	24000000 	.word	0x24000000
 8002f70:	053e2d63 	.word	0x053e2d63
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40022100 	.word	0x40022100
 8002f7c:	58026000 	.word	0x58026000
 8002f80:	40022300 	.word	0x40022300
 8002f84:	58026300 	.word	0x58026300
 8002f88:	fff0c003 	.word	0xfff0c003
 8002f8c:	ffffbffc 	.word	0xffffbffc
 8002f90:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fde2 	bl	8003b84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f023 010f 	bic.w	r1, r3, #15
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	1e5a      	subs	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe0:	e007      	b.n	8002ff2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020f 	bic.w	r2, r2, #15
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
 8003002:	e007      	b.n	8003014 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	f043 0210 	orr.w	r2, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003014:	7ffb      	ldrb	r3, [r7, #31]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	@ 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop

08003020 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5c      	ldr	r2, [pc, #368]	@ (80031a0 <HAL_ADC_Start+0x180>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_ADC_Start+0x1c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5b      	ldr	r2, [pc, #364]	@ (80031a4 <HAL_ADC_Start+0x184>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_ADC_Start+0x20>
 800303c:	4b5a      	ldr	r3, [pc, #360]	@ (80031a8 <HAL_ADC_Start+0x188>)
 800303e:	e000      	b.n	8003042 <HAL_ADC_Start+0x22>
 8003040:	4b5a      	ldr	r3, [pc, #360]	@ (80031ac <HAL_ADC_Start+0x18c>)
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fd7e 	bl	8002b44 <LL_ADC_GetMultimode>
 8003048:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe1e 	bl	8002c90 <LL_ADC_REG_IsConversionOngoing>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 809a 	bne.w	8003190 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_ADC_Start+0x4a>
 8003066:	2302      	movs	r3, #2
 8003068:	e095      	b.n	8003196 <HAL_ADC_Start+0x176>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fcfc 	bl	8003a70 <ADC_Enable>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 8081 	bne.w	8003186 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003088:	4b49      	ldr	r3, [pc, #292]	@ (80031b0 <HAL_ADC_Start+0x190>)
 800308a:	4013      	ands	r3, r2
 800308c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a42      	ldr	r2, [pc, #264]	@ (80031a4 <HAL_ADC_Start+0x184>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d002      	beq.n	80030a4 <HAL_ADC_Start+0x84>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_Start+0x86>
 80030a4:	4b3e      	ldr	r3, [pc, #248]	@ (80031a0 <HAL_ADC_Start+0x180>)
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d002      	beq.n	80030b4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030cc:	d106      	bne.n	80030dc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f023 0206 	bic.w	r2, r3, #6
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80030da:	e002      	b.n	80030e2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	221c      	movs	r2, #28
 80030e8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2b      	ldr	r2, [pc, #172]	@ (80031a4 <HAL_ADC_Start+0x184>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d002      	beq.n	8003102 <HAL_ADC_Start+0xe2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	e000      	b.n	8003104 <HAL_ADC_Start+0xe4>
 8003102:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <HAL_ADC_Start+0x180>)
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	4293      	cmp	r3, r2
 800310a:	d008      	beq.n	800311e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d002      	beq.n	800311e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b09      	cmp	r3, #9
 800311c:	d114      	bne.n	8003148 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003130:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003134:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fd91 	bl	8002c68 <LL_ADC_REG_StartConversion>
 8003146:	e025      	b.n	8003194 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <HAL_ADC_Start+0x184>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d002      	beq.n	8003164 <HAL_ADC_Start+0x144>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e000      	b.n	8003166 <HAL_ADC_Start+0x146>
 8003164:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <HAL_ADC_Start+0x180>)
 8003166:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00f      	beq.n	8003194 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003178:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800317c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
 8003184:	e006      	b.n	8003194 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800318e:	e001      	b.n	8003194 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40022100 	.word	0x40022100
 80031a8:	40022300 	.word	0x40022300
 80031ac:	58026300 	.word	0x58026300
 80031b0:	fffff0fe 	.word	0xfffff0fe

080031b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a72      	ldr	r2, [pc, #456]	@ (800338c <HAL_ADC_PollForConversion+0x1d8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_ADC_PollForConversion+0x1e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a70      	ldr	r2, [pc, #448]	@ (8003390 <HAL_ADC_PollForConversion+0x1dc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_PollForConversion+0x22>
 80031d2:	4b70      	ldr	r3, [pc, #448]	@ (8003394 <HAL_ADC_PollForConversion+0x1e0>)
 80031d4:	e000      	b.n	80031d8 <HAL_ADC_PollForConversion+0x24>
 80031d6:	4b70      	ldr	r3, [pc, #448]	@ (8003398 <HAL_ADC_PollForConversion+0x1e4>)
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fcb3 	bl	8002b44 <LL_ADC_GetMultimode>
 80031de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d102      	bne.n	80031ee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031e8:	2308      	movs	r3, #8
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e037      	b.n	800325e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d002      	beq.n	8003200 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	d111      	bne.n	8003224 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0b1      	b.n	8003382 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800321e:	2304      	movs	r3, #4
 8003220:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003222:	e01c      	b.n	800325e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a58      	ldr	r2, [pc, #352]	@ (800338c <HAL_ADC_PollForConversion+0x1d8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_ADC_PollForConversion+0x84>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a57      	ldr	r2, [pc, #348]	@ (8003390 <HAL_ADC_PollForConversion+0x1dc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADC_PollForConversion+0x88>
 8003238:	4b56      	ldr	r3, [pc, #344]	@ (8003394 <HAL_ADC_PollForConversion+0x1e0>)
 800323a:	e000      	b.n	800323e <HAL_ADC_PollForConversion+0x8a>
 800323c:	4b56      	ldr	r3, [pc, #344]	@ (8003398 <HAL_ADC_PollForConversion+0x1e4>)
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fc8e 	bl	8002b60 <LL_ADC_GetMultiDMATransfer>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e093      	b.n	8003382 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800325a:	2304      	movs	r3, #4
 800325c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800325e:	f7ff fb0b 	bl	8002878 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003264:	e021      	b.n	80032aa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d01d      	beq.n	80032aa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800326e:	f7ff fb03 	bl	8002878 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <HAL_ADC_PollForConversion+0xd0>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d112      	bne.n	80032aa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10b      	bne.n	80032aa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e06b      	b.n	8003382 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0d6      	beq.n	8003266 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fbad 	bl	8002a28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01c      	beq.n	800330e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7d5b      	ldrb	r3, [r3, #21]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d118      	bne.n	800330e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d111      	bne.n	800330e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_ADC_PollForConversion+0x1dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d002      	beq.n	800331e <HAL_ADC_PollForConversion+0x16a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e000      	b.n	8003320 <HAL_ADC_PollForConversion+0x16c>
 800331e:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_ADC_PollForConversion+0x1d8>)
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4293      	cmp	r3, r2
 8003326:	d008      	beq.n	800333a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b05      	cmp	r3, #5
 8003332:	d002      	beq.n	800333a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b09      	cmp	r3, #9
 8003338:	d104      	bne.n	8003344 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e00c      	b.n	800335e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <HAL_ADC_PollForConversion+0x1dc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d002      	beq.n	8003354 <HAL_ADC_PollForConversion+0x1a0>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	e000      	b.n	8003356 <HAL_ADC_PollForConversion+0x1a2>
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_ADC_PollForConversion+0x1d8>)
 8003356:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e008      	b.n	8003380 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	220c      	movs	r2, #12
 800337e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40022000 	.word	0x40022000
 8003390:	40022100 	.word	0x40022100
 8003394:	40022300 	.word	0x40022300
 8003398:	58026300 	.word	0x58026300

0800339c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b0a1      	sub	sp, #132	@ 0x84
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_ADC_ConfigChannel+0x1b0>)
 80033d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x2a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e32e      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x688>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fc4e 	bl	8002c90 <LL_ADC_REG_IsConversionOngoing>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 8313 	bne.w	8003a22 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db2c      	blt.n	800345e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x6a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0e9b      	lsrs	r3, r3, #26
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	e016      	b.n	8003450 <HAL_ADC_ConfigChannel+0x98>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003432:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800343a:	2320      	movs	r3, #32
 800343c:	e003      	b.n	8003446 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800343e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2201      	movs	r2, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	69d1      	ldr	r1, [r2, #28]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	430b      	orrs	r3, r1
 800345c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f7ff faef 	bl	8002a4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fc0b 	bl	8002c90 <LL_ADC_REG_IsConversionOngoing>
 800347a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fc18 	bl	8002cb6 <LL_ADC_INJ_IsConversionOngoing>
 8003486:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 80b8 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003490:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 80b4 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fafe 	bl	8002aa6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034aa:	4b30      	ldr	r3, [pc, #192]	@ (800356c <HAL_ADC_ConfigChannel+0x1b4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034b6:	d10b      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x118>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	e01d      	b.n	800350c <HAL_ADC_ConfigChannel+0x154>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x13e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	e00a      	b.n	800350c <HAL_ADC_ConfigChannel+0x154>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d02c      	beq.n	8003570 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6919      	ldr	r1, [r3, #16]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003524:	f7ff fa2c 	bl	8002980 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6919      	ldr	r1, [r3, #16]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	7e5b      	ldrb	r3, [r3, #25]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_ADC_ConfigChannel+0x186>
 8003538:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800353c:	e000      	b.n	8003540 <HAL_ADC_ConfigChannel+0x188>
 800353e:	2300      	movs	r3, #0
 8003540:	461a      	mov	r2, r3
 8003542:	f7ff fa56 	bl	80029f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6919      	ldr	r1, [r3, #16]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	7e1b      	ldrb	r3, [r3, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d102      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1a4>
 8003556:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800355a:	e000      	b.n	800355e <HAL_ADC_ConfigChannel+0x1a6>
 800355c:	2300      	movs	r3, #0
 800355e:	461a      	mov	r2, r3
 8003560:	f7ff fa2e 	bl	80029c0 <LL_ADC_SetDataRightShift>
 8003564:	e04c      	b.n	8003600 <HAL_ADC_ConfigChannel+0x248>
 8003566:	bf00      	nop
 8003568:	47ff0000 	.word	0x47ff0000
 800356c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003576:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	069b      	lsls	r3, r3, #26
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035b6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	069b      	lsls	r3, r3, #26
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d107      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035da:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	069b      	lsls	r3, r3, #26
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fb1b 	bl	8002c40 <LL_ADC_IsEnabled>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 8211 	bne.w	8003a34 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6819      	ldr	r1, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f7ff fa6c 	bl	8002afc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4aa1      	ldr	r2, [pc, #644]	@ (80038b0 <HAL_ADC_ConfigChannel+0x4f8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	f040 812e 	bne.w	800388c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x2a0>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	3301      	adds	r3, #1
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2b09      	cmp	r3, #9
 800364e:	bf94      	ite	ls
 8003650:	2301      	movls	r3, #1
 8003652:	2300      	movhi	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e019      	b.n	800368c <HAL_ADC_ConfigChannel+0x2d4>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800366a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e003      	b.n	800367c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2b09      	cmp	r3, #9
 8003684:	bf94      	ite	ls
 8003686:	2301      	movls	r3, #1
 8003688:	2300      	movhi	r3, #0
 800368a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368c:	2b00      	cmp	r3, #0
 800368e:	d079      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x2f4>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	3301      	adds	r3, #1
 80036a4:	069b      	lsls	r3, r3, #26
 80036a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036aa:	e015      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x320>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80036c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x340>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	e017      	b.n	8003728 <HAL_ADC_ConfigChannel+0x370>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003708:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800370a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e003      	b.n	800371c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_ADC_ConfigChannel+0x396>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	051b      	lsls	r3, r3, #20
 800374c:	e018      	b.n	8003780 <HAL_ADC_ConfigChannel+0x3c8>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003766:	2320      	movs	r3, #32
 8003768:	e003      	b.n	8003772 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	e07e      	b.n	8003882 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x3e8>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	069b      	lsls	r3, r3, #26
 800379a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800379e:	e015      	b.n	80037cc <HAL_ADC_ConfigChannel+0x414>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80037bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	069b      	lsls	r3, r3, #26
 80037c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x434>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	3301      	adds	r3, #1
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	e017      	b.n	800381c <HAL_ADC_ConfigChannel+0x464>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	61bb      	str	r3, [r7, #24]
  return result;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x490>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	3b1e      	subs	r3, #30
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003846:	e01b      	b.n	8003880 <HAL_ADC_ConfigChannel+0x4c8>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	60fb      	str	r3, [r7, #12]
  return result;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	3b1e      	subs	r3, #30
 800387a:	051b      	lsls	r3, r3, #20
 800387c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003880:	430b      	orrs	r3, r1
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	4619      	mov	r1, r3
 8003888:	f7ff f90d 	bl	8002aa6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f280 80cf 	bge.w	8003a34 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a06      	ldr	r2, [pc, #24]	@ (80038b4 <HAL_ADC_ConfigChannel+0x4fc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x4f2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a04      	ldr	r2, [pc, #16]	@ (80038b8 <HAL_ADC_ConfigChannel+0x500>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10a      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x508>
 80038aa:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <HAL_ADC_ConfigChannel+0x504>)
 80038ac:	e009      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x50a>
 80038ae:	bf00      	nop
 80038b0:	47ff0000 	.word	0x47ff0000
 80038b4:	40022000 	.word	0x40022000
 80038b8:	40022100 	.word	0x40022100
 80038bc:	40022300 	.word	0x40022300
 80038c0:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <HAL_ADC_ConfigChannel+0x690>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f84e 	bl	8002964 <LL_ADC_GetCommonPathInternalCh>
 80038c8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <HAL_ADC_ConfigChannel+0x694>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_ADC_ConfigChannel+0x526>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a50 <HAL_ADC_ConfigChannel+0x698>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10e      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x544>
 80038de:	485b      	ldr	r0, [pc, #364]	@ (8003a4c <HAL_ADC_ConfigChannel+0x694>)
 80038e0:	f7ff f9ae 	bl	8002c40 <LL_ADC_IsEnabled>
 80038e4:	4604      	mov	r4, r0
 80038e6:	485a      	ldr	r0, [pc, #360]	@ (8003a50 <HAL_ADC_ConfigChannel+0x698>)
 80038e8:	f7ff f9aa 	bl	8002c40 <LL_ADC_IsEnabled>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4323      	orrs	r3, r4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e008      	b.n	800390e <HAL_ADC_ConfigChannel+0x556>
 80038fc:	4855      	ldr	r0, [pc, #340]	@ (8003a54 <HAL_ADC_ConfigChannel+0x69c>)
 80038fe:	f7ff f99f 	bl	8002c40 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d07d      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a50      	ldr	r2, [pc, #320]	@ (8003a58 <HAL_ADC_ConfigChannel+0x6a0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d130      	bne.n	800397e <HAL_ADC_ConfigChannel+0x5c6>
 800391c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800391e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d12b      	bne.n	800397e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a54 <HAL_ADC_ConfigChannel+0x69c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	f040 8081 	bne.w	8003a34 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a45      	ldr	r2, [pc, #276]	@ (8003a4c <HAL_ADC_ConfigChannel+0x694>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x58e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a43      	ldr	r2, [pc, #268]	@ (8003a50 <HAL_ADC_ConfigChannel+0x698>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x592>
 8003946:	4a45      	ldr	r2, [pc, #276]	@ (8003a5c <HAL_ADC_ConfigChannel+0x6a4>)
 8003948:	e000      	b.n	800394c <HAL_ADC_ConfigChannel+0x594>
 800394a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a48 <HAL_ADC_ConfigChannel+0x690>)
 800394c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800394e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f7fe fff2 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800395a:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <HAL_ADC_ConfigChannel+0x6a8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	4a40      	ldr	r2, [pc, #256]	@ (8003a64 <HAL_ADC_ConfigChannel+0x6ac>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	3301      	adds	r3, #1
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800396e:	e002      	b.n	8003976 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3b01      	subs	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800397c:	e05a      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a39      	ldr	r2, [pc, #228]	@ (8003a68 <HAL_ADC_ConfigChannel+0x6b0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d11e      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x60e>
 8003988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d119      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <HAL_ADC_ConfigChannel+0x69c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d14b      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a4c <HAL_ADC_ConfigChannel+0x694>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_ADC_ConfigChannel+0x5f8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a29      	ldr	r2, [pc, #164]	@ (8003a50 <HAL_ADC_ConfigChannel+0x698>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x5fc>
 80039b0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <HAL_ADC_ConfigChannel+0x6a4>)
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x5fe>
 80039b4:	4a24      	ldr	r2, [pc, #144]	@ (8003a48 <HAL_ADC_ConfigChannel+0x690>)
 80039b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f7fe ffbd 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039c4:	e036      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a28      	ldr	r2, [pc, #160]	@ (8003a6c <HAL_ADC_ConfigChannel+0x6b4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d131      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
 80039d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d12c      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1d      	ldr	r2, [pc, #116]	@ (8003a54 <HAL_ADC_ConfigChannel+0x69c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d127      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a18      	ldr	r2, [pc, #96]	@ (8003a4c <HAL_ADC_ConfigChannel+0x694>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_ADC_ConfigChannel+0x640>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a17      	ldr	r2, [pc, #92]	@ (8003a50 <HAL_ADC_ConfigChannel+0x698>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x644>
 80039f8:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <HAL_ADC_ConfigChannel+0x6a4>)
 80039fa:	e000      	b.n	80039fe <HAL_ADC_ConfigChannel+0x646>
 80039fc:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <HAL_ADC_ConfigChannel+0x690>)
 80039fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7fe ff99 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
 8003a0c:	e012      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a20:	e008      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	f043 0220 	orr.w	r2, r3, #32
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3784      	adds	r7, #132	@ 0x84
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	58026300 	.word	0x58026300
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40022100 	.word	0x40022100
 8003a54:	58026000 	.word	0x58026000
 8003a58:	cb840000 	.word	0xcb840000
 8003a5c:	40022300 	.word	0x40022300
 8003a60:	24000000 	.word	0x24000000
 8003a64:	053e2d63 	.word	0x053e2d63
 8003a68:	c7520000 	.word	0xc7520000
 8003a6c:	cfb80000 	.word	0xcfb80000

08003a70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff f8df 	bl	8002c40 <LL_ADC_IsEnabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d16e      	bne.n	8003b66 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <ADC_Enable+0x100>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e05a      	b.n	8003b68 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f8ae 	bl	8002c18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003abc:	f7fe fedc 	bl	8002878 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b74 <ADC_Enable+0x104>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <ADC_Enable+0x66>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a29      	ldr	r2, [pc, #164]	@ (8003b78 <ADC_Enable+0x108>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <ADC_Enable+0x6a>
 8003ad6:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <ADC_Enable+0x10c>)
 8003ad8:	e000      	b.n	8003adc <ADC_Enable+0x6c>
 8003ada:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <ADC_Enable+0x110>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f831 	bl	8002b44 <LL_ADC_GetMultimode>
 8003ae2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <ADC_Enable+0x108>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d002      	beq.n	8003af4 <ADC_Enable+0x84>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	e000      	b.n	8003af6 <ADC_Enable+0x86>
 8003af4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b74 <ADC_Enable+0x104>)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02c      	beq.n	8003b58 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d130      	bne.n	8003b66 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b04:	e028      	b.n	8003b58 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f898 	bl	8002c40 <LL_ADC_IsEnabled>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f87c 	bl	8002c18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b20:	f7fe feaa 	bl	8002878 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d914      	bls.n	8003b58 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d00d      	beq.n	8003b58 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	f043 0210 	orr.w	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e007      	b.n	8003b68 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d1cf      	bne.n	8003b06 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	8000003f 	.word	0x8000003f
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40022100 	.word	0x40022100
 8003b7c:	40022300 	.word	0x40022300
 8003b80:	58026300 	.word	0x58026300

08003b84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7a      	ldr	r2, [pc, #488]	@ (8003d7c <ADC_ConfigureBoostMode+0x1f8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <ADC_ConfigureBoostMode+0x1c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a79      	ldr	r2, [pc, #484]	@ (8003d80 <ADC_ConfigureBoostMode+0x1fc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <ADC_ConfigureBoostMode+0x30>
 8003ba0:	4b78      	ldr	r3, [pc, #480]	@ (8003d84 <ADC_ConfigureBoostMode+0x200>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e008      	b.n	8003bc6 <ADC_ConfigureBoostMode+0x42>
 8003bb4:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <ADC_ConfigureBoostMode+0x204>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01c      	beq.n	8003c04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003bca:	f006 f809 	bl	8009be0 <HAL_RCC_GetHCLKFreq>
 8003bce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bd8:	d010      	beq.n	8003bfc <ADC_ConfigureBoostMode+0x78>
 8003bda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bde:	d873      	bhi.n	8003cc8 <ADC_ConfigureBoostMode+0x144>
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be4:	d002      	beq.n	8003bec <ADC_ConfigureBoostMode+0x68>
 8003be6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bea:	d16d      	bne.n	8003cc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	60fb      	str	r3, [r7, #12]
        break;
 8003bfa:	e068      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	60fb      	str	r3, [r7, #12]
        break;
 8003c02:	e064      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003c04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	f007 fad0 	bl	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003c1a:	d051      	beq.n	8003cc0 <ADC_ConfigureBoostMode+0x13c>
 8003c1c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003c20:	d854      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c22:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003c26:	d047      	beq.n	8003cb8 <ADC_ConfigureBoostMode+0x134>
 8003c28:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003c2c:	d84e      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c2e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003c32:	d03d      	beq.n	8003cb0 <ADC_ConfigureBoostMode+0x12c>
 8003c34:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003c38:	d848      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c3e:	d033      	beq.n	8003ca8 <ADC_ConfigureBoostMode+0x124>
 8003c40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c44:	d842      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c46:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003c4a:	d029      	beq.n	8003ca0 <ADC_ConfigureBoostMode+0x11c>
 8003c4c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003c50:	d83c      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c52:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003c56:	d01a      	beq.n	8003c8e <ADC_ConfigureBoostMode+0x10a>
 8003c58:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003c5c:	d836      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c5e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c62:	d014      	beq.n	8003c8e <ADC_ConfigureBoostMode+0x10a>
 8003c64:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c68:	d830      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c6e:	d00e      	beq.n	8003c8e <ADC_ConfigureBoostMode+0x10a>
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c74:	d82a      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c7a:	d008      	beq.n	8003c8e <ADC_ConfigureBoostMode+0x10a>
 8003c7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c80:	d824      	bhi.n	8003ccc <ADC_ConfigureBoostMode+0x148>
 8003c82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c86:	d002      	beq.n	8003c8e <ADC_ConfigureBoostMode+0x10a>
 8003c88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c8c:	d11e      	bne.n	8003ccc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	0c9b      	lsrs	r3, r3, #18
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	60fb      	str	r3, [r7, #12]
        break;
 8003c9e:	e016      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
        break;
 8003ca6:	e012      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	60fb      	str	r3, [r7, #12]
        break;
 8003cae:	e00e      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	60fb      	str	r3, [r7, #12]
        break;
 8003cb6:	e00a      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	09db      	lsrs	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
        break;
 8003cbe:	e006      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	60fb      	str	r3, [r7, #12]
        break;
 8003cc6:	e002      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
        break;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ccc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cce:	f7fe fe03 	bl	80028d8 <HAL_GetREVID>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d815      	bhi.n	8003d08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a2b      	ldr	r2, [pc, #172]	@ (8003d8c <ADC_ConfigureBoostMode+0x208>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d908      	bls.n	8003cf6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003cf4:	e03e      	b.n	8003d74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d04:	609a      	str	r2, [r3, #8]
}
 8003d06:	e035      	b.n	8003d74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	@ (8003d90 <ADC_ConfigureBoostMode+0x20c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d808      	bhi.n	8003d28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d24:	609a      	str	r2, [r3, #8]
}
 8003d26:	e025      	b.n	8003d74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d94 <ADC_ConfigureBoostMode+0x210>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d80a      	bhi.n	8003d46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	e016      	b.n	8003d74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <ADC_ConfigureBoostMode+0x214>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d80a      	bhi.n	8003d64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d60:	609a      	str	r2, [r3, #8]
}
 8003d62:	e007      	b.n	8003d74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40022100 	.word	0x40022100
 8003d84:	40022300 	.word	0x40022300
 8003d88:	58026300 	.word	0x58026300
 8003d8c:	01312d00 	.word	0x01312d00
 8003d90:	005f5e10 	.word	0x005f5e10
 8003d94:	00bebc20 	.word	0x00bebc20
 8003d98:	017d7840 	.word	0x017d7840

08003d9c <__NVIC_SetPriorityGrouping>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x40>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003db8:	4013      	ands	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dc4:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dca:	4a04      	ldr	r2, [pc, #16]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x40>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60d3      	str	r3, [r2, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00
 8003de0:	05fa0000 	.word	0x05fa0000

08003de4 <__NVIC_GetPriorityGrouping>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <__NVIC_GetPriorityGrouping+0x18>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	f003 0307 	and.w	r3, r3, #7
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_EnableIRQ>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db0b      	blt.n	8003e2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	4907      	ldr	r1, [pc, #28]	@ (8003e38 <__NVIC_EnableIRQ+0x38>)
 8003e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000e100 	.word	0xe000e100

08003e3c <__NVIC_SetPriority>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	db0a      	blt.n	8003e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	490c      	ldr	r1, [pc, #48]	@ (8003e88 <__NVIC_SetPriority+0x4c>)
 8003e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e64:	e00a      	b.n	8003e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4908      	ldr	r1, [pc, #32]	@ (8003e8c <__NVIC_SetPriority+0x50>)
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	3b04      	subs	r3, #4
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	440b      	add	r3, r1
 8003e7a:	761a      	strb	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000e100 	.word	0xe000e100
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <NVIC_EncodePriority>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	@ 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1c3 0307 	rsb	r3, r3, #7
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf28      	it	cs
 8003eae:	2304      	movcs	r3, #4
 8003eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d902      	bls.n	8003ec0 <NVIC_EncodePriority+0x30>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3b03      	subs	r3, #3
 8003ebe:	e000      	b.n	8003ec2 <NVIC_EncodePriority+0x32>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	43d9      	mvns	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	4313      	orrs	r3, r2
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3724      	adds	r7, #36	@ 0x24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <__NVIC_SystemReset>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003efc:	f3bf 8f4f 	dsb	sy
}
 8003f00:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <__NVIC_SystemReset+0x24>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f0a:	4904      	ldr	r1, [pc, #16]	@ (8003f1c <__NVIC_SystemReset+0x24>)
 8003f0c:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <__NVIC_SystemReset+0x28>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f12:	f3bf 8f4f 	dsb	sy
}
 8003f16:	bf00      	nop
    __NOP();
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <__NVIC_SystemReset+0x20>
 8003f1c:	e000ed00 	.word	0xe000ed00
 8003f20:	05fa0004 	.word	0x05fa0004

08003f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff35 	bl	8003d9c <__NVIC_SetPriorityGrouping>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f48:	f7ff ff4c 	bl	8003de4 <__NVIC_GetPriorityGrouping>
 8003f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff9c 	bl	8003e90 <NVIC_EncodePriority>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff6b 	bl	8003e3c <__NVIC_SetPriority>
}
 8003f66:	bf00      	nop
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff3f 	bl	8003e00 <__NVIC_EnableIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003f8e:	f7ff ffb3 	bl	8003ef8 <__NVIC_SystemReset>
	...

08003f94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003f98:	f3bf 8f5f 	dmb	sy
}
 8003f9c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f9e:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <HAL_MPU_Disable+0x28>)
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	4a06      	ldr	r2, [pc, #24]	@ (8003fbc <HAL_MPU_Disable+0x28>)
 8003fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_MPU_Disable+0x2c>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	605a      	str	r2, [r3, #4]
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e000ed00 	.word	0xe000ed00
 8003fc0:	e000ed90 	.word	0xe000ed90

08003fc4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003ffc <HAL_MPU_Enable+0x38>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <HAL_MPU_Enable+0x3c>)
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <HAL_MPU_Enable+0x3c>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe2:	f3bf 8f4f 	dsb	sy
}
 8003fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fe8:	f3bf 8f6f 	isb	sy
}
 8003fec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000ed90 	.word	0xe000ed90
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	785a      	ldrb	r2, [r3, #1]
 8004010:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <HAL_MPU_ConfigRegion+0x7c>)
 8004012:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004014:	4b1a      	ldr	r3, [pc, #104]	@ (8004080 <HAL_MPU_ConfigRegion+0x7c>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	4a19      	ldr	r2, [pc, #100]	@ (8004080 <HAL_MPU_ConfigRegion+0x7c>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004020:	4a17      	ldr	r2, [pc, #92]	@ (8004080 <HAL_MPU_ConfigRegion+0x7c>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7b1b      	ldrb	r3, [r3, #12]
 800402c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7adb      	ldrb	r3, [r3, #11]
 8004032:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004034:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7a9b      	ldrb	r3, [r3, #10]
 800403a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800403c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7b5b      	ldrb	r3, [r3, #13]
 8004042:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7b9b      	ldrb	r3, [r3, #14]
 800404a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800404c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7bdb      	ldrb	r3, [r3, #15]
 8004052:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7a5b      	ldrb	r3, [r3, #9]
 800405a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800405c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7a1b      	ldrb	r3, [r3, #8]
 8004062:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004064:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800406c:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800406e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004070:	6113      	str	r3, [r2, #16]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000ed90 	.word	0xe000ed90

08004084 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004088:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <HAL_GetCurrentCPUID+0x24>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	2b07      	cmp	r3, #7
 8004094:	d101      	bne.n	800409a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004096:	2303      	movs	r3, #3
 8004098:	e000      	b.n	800409c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800409a:	2301      	movs	r3, #1
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7fe fbe0 	bl	8002878 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e316      	b.n	80046f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a66      	ldr	r2, [pc, #408]	@ (8004264 <HAL_DMA_Init+0x1b8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d04a      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a65      	ldr	r2, [pc, #404]	@ (8004268 <HAL_DMA_Init+0x1bc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d045      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a63      	ldr	r2, [pc, #396]	@ (800426c <HAL_DMA_Init+0x1c0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d040      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a62      	ldr	r2, [pc, #392]	@ (8004270 <HAL_DMA_Init+0x1c4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d03b      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a60      	ldr	r2, [pc, #384]	@ (8004274 <HAL_DMA_Init+0x1c8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d036      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004278 <HAL_DMA_Init+0x1cc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d031      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5d      	ldr	r2, [pc, #372]	@ (800427c <HAL_DMA_Init+0x1d0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d02c      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5c      	ldr	r2, [pc, #368]	@ (8004280 <HAL_DMA_Init+0x1d4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d027      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5a      	ldr	r2, [pc, #360]	@ (8004284 <HAL_DMA_Init+0x1d8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a59      	ldr	r2, [pc, #356]	@ (8004288 <HAL_DMA_Init+0x1dc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a57      	ldr	r2, [pc, #348]	@ (800428c <HAL_DMA_Init+0x1e0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a56      	ldr	r2, [pc, #344]	@ (8004290 <HAL_DMA_Init+0x1e4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a54      	ldr	r2, [pc, #336]	@ (8004294 <HAL_DMA_Init+0x1e8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a53      	ldr	r2, [pc, #332]	@ (8004298 <HAL_DMA_Init+0x1ec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a51      	ldr	r2, [pc, #324]	@ (800429c <HAL_DMA_Init+0x1f0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a50      	ldr	r2, [pc, #320]	@ (80042a0 <HAL_DMA_Init+0x1f4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_DMA_Init+0xbc>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_DMA_Init+0xbe>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 813b 	beq.w	80043e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a37      	ldr	r2, [pc, #220]	@ (8004264 <HAL_DMA_Init+0x1b8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04a      	beq.n	8004220 <HAL_DMA_Init+0x174>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a36      	ldr	r2, [pc, #216]	@ (8004268 <HAL_DMA_Init+0x1bc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d045      	beq.n	8004220 <HAL_DMA_Init+0x174>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a34      	ldr	r2, [pc, #208]	@ (800426c <HAL_DMA_Init+0x1c0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d040      	beq.n	8004220 <HAL_DMA_Init+0x174>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a33      	ldr	r2, [pc, #204]	@ (8004270 <HAL_DMA_Init+0x1c4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03b      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a31      	ldr	r2, [pc, #196]	@ (8004274 <HAL_DMA_Init+0x1c8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d036      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a30      	ldr	r2, [pc, #192]	@ (8004278 <HAL_DMA_Init+0x1cc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d031      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	@ (800427c <HAL_DMA_Init+0x1d0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02c      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <HAL_DMA_Init+0x1d4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d027      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_DMA_Init+0x1d8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2a      	ldr	r2, [pc, #168]	@ (8004288 <HAL_DMA_Init+0x1dc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01d      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a28      	ldr	r2, [pc, #160]	@ (800428c <HAL_DMA_Init+0x1e0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a27      	ldr	r2, [pc, #156]	@ (8004290 <HAL_DMA_Init+0x1e4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <HAL_DMA_Init+0x1e8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_DMA_Init+0x174>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <HAL_DMA_Init+0x1ec>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_DMA_Init+0x174>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_DMA_Init+0x1f0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_DMA_Init+0x174>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <HAL_DMA_Init+0x1f4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d108      	bne.n	8004232 <HAL_DMA_Init+0x186>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e007      	b.n	8004242 <HAL_DMA_Init+0x196>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004242:	e02f      	b.n	80042a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004244:	f7fe fb18 	bl	8002878 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b05      	cmp	r3, #5
 8004250:	d928      	bls.n	80042a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e246      	b.n	80046f2 <HAL_DMA_Init+0x646>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1c8      	bne.n	8004244 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4b83      	ldr	r3, [pc, #524]	@ (80044cc <HAL_DMA_Init+0x420>)
 80042be:	4013      	ands	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d107      	bne.n	8004308 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	4313      	orrs	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004308:	4b71      	ldr	r3, [pc, #452]	@ (80044d0 <HAL_DMA_Init+0x424>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b71      	ldr	r3, [pc, #452]	@ (80044d4 <HAL_DMA_Init+0x428>)
 800430e:	4013      	ands	r3, r2
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004314:	d328      	bcc.n	8004368 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b28      	cmp	r3, #40	@ 0x28
 800431c:	d903      	bls.n	8004326 <HAL_DMA_Init+0x27a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b2e      	cmp	r3, #46	@ 0x2e
 8004324:	d917      	bls.n	8004356 <HAL_DMA_Init+0x2aa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b3e      	cmp	r3, #62	@ 0x3e
 800432c:	d903      	bls.n	8004336 <HAL_DMA_Init+0x28a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b42      	cmp	r3, #66	@ 0x42
 8004334:	d90f      	bls.n	8004356 <HAL_DMA_Init+0x2aa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b46      	cmp	r3, #70	@ 0x46
 800433c:	d903      	bls.n	8004346 <HAL_DMA_Init+0x29a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b48      	cmp	r3, #72	@ 0x48
 8004344:	d907      	bls.n	8004356 <HAL_DMA_Init+0x2aa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b4e      	cmp	r3, #78	@ 0x4e
 800434c:	d905      	bls.n	800435a <HAL_DMA_Init+0x2ae>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b52      	cmp	r3, #82	@ 0x52
 8004354:	d801      	bhi.n	800435a <HAL_DMA_Init+0x2ae>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_DMA_Init+0x2b0>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004366:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	2b04      	cmp	r3, #4
 8004390:	d117      	bne.n	80043c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f002 fb33 	bl	8006a10 <DMA_CheckFifoParam>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2240      	movs	r2, #64	@ 0x40
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e197      	b.n	80046f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f002 fa6e 	bl	80068ac <DMA_CalcBaseAndBitshift>
 80043d0:	4603      	mov	r3, r0
 80043d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	223f      	movs	r2, #63	@ 0x3f
 80043de:	409a      	lsls	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	e0cd      	b.n	8004582 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3b      	ldr	r2, [pc, #236]	@ (80044d8 <HAL_DMA_Init+0x42c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a39      	ldr	r2, [pc, #228]	@ (80044dc <HAL_DMA_Init+0x430>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a38      	ldr	r2, [pc, #224]	@ (80044e0 <HAL_DMA_Init+0x434>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d018      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a36      	ldr	r2, [pc, #216]	@ (80044e4 <HAL_DMA_Init+0x438>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a35      	ldr	r2, [pc, #212]	@ (80044e8 <HAL_DMA_Init+0x43c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a33      	ldr	r2, [pc, #204]	@ (80044ec <HAL_DMA_Init+0x440>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a32      	ldr	r2, [pc, #200]	@ (80044f0 <HAL_DMA_Init+0x444>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a30      	ldr	r2, [pc, #192]	@ (80044f4 <HAL_DMA_Init+0x448>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <HAL_DMA_Init+0x38e>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_DMA_Init+0x390>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8097 	beq.w	8004570 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <HAL_DMA_Init+0x42c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d021      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	@ (80044dc <HAL_DMA_Init+0x430>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01c      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	@ (80044e0 <HAL_DMA_Init+0x434>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d017      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	@ (80044e4 <HAL_DMA_Init+0x438>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d012      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <HAL_DMA_Init+0x43c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00d      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	@ (80044ec <HAL_DMA_Init+0x440>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d008      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_DMA_Init+0x444>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <HAL_DMA_Init+0x448>)
 800448e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4b13      	ldr	r3, [pc, #76]	@ (80044f8 <HAL_DMA_Init+0x44c>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d021      	beq.n	80044fc <HAL_DMA_Init+0x450>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b80      	cmp	r3, #128	@ 0x80
 80044be:	d102      	bne.n	80044c6 <HAL_DMA_Init+0x41a>
 80044c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044c4:	e01b      	b.n	80044fe <HAL_DMA_Init+0x452>
 80044c6:	2300      	movs	r3, #0
 80044c8:	e019      	b.n	80044fe <HAL_DMA_Init+0x452>
 80044ca:	bf00      	nop
 80044cc:	fe10803f 	.word	0xfe10803f
 80044d0:	5c001000 	.word	0x5c001000
 80044d4:	ffff0000 	.word	0xffff0000
 80044d8:	58025408 	.word	0x58025408
 80044dc:	5802541c 	.word	0x5802541c
 80044e0:	58025430 	.word	0x58025430
 80044e4:	58025444 	.word	0x58025444
 80044e8:	58025458 	.word	0x58025458
 80044ec:	5802546c 	.word	0x5802546c
 80044f0:	58025480 	.word	0x58025480
 80044f4:	58025494 	.word	0x58025494
 80044f8:	fffe000f 	.word	0xfffe000f
 80044fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800450c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800451c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800452c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b6e      	ldr	r3, [pc, #440]	@ (80046fc <HAL_DMA_Init+0x650>)
 8004544:	4413      	add	r3, r2
 8004546:	4a6e      	ldr	r2, [pc, #440]	@ (8004700 <HAL_DMA_Init+0x654>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	009a      	lsls	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f002 f9a9 	bl	80068ac <DMA_CalcBaseAndBitshift>
 800455a:	4603      	mov	r3, r0
 800455c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2201      	movs	r2, #1
 8004568:	409a      	lsls	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e008      	b.n	8004582 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2240      	movs	r2, #64	@ 0x40
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0b7      	b.n	80046f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5f      	ldr	r2, [pc, #380]	@ (8004704 <HAL_DMA_Init+0x658>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d072      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a5d      	ldr	r2, [pc, #372]	@ (8004708 <HAL_DMA_Init+0x65c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d06d      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5c      	ldr	r2, [pc, #368]	@ (800470c <HAL_DMA_Init+0x660>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d068      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004710 <HAL_DMA_Init+0x664>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d063      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a59      	ldr	r2, [pc, #356]	@ (8004714 <HAL_DMA_Init+0x668>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d05e      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a57      	ldr	r2, [pc, #348]	@ (8004718 <HAL_DMA_Init+0x66c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d059      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a56      	ldr	r2, [pc, #344]	@ (800471c <HAL_DMA_Init+0x670>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d054      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a54      	ldr	r2, [pc, #336]	@ (8004720 <HAL_DMA_Init+0x674>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d04f      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a53      	ldr	r2, [pc, #332]	@ (8004724 <HAL_DMA_Init+0x678>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04a      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a51      	ldr	r2, [pc, #324]	@ (8004728 <HAL_DMA_Init+0x67c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d045      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a50      	ldr	r2, [pc, #320]	@ (800472c <HAL_DMA_Init+0x680>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d040      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004730 <HAL_DMA_Init+0x684>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d03b      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004734 <HAL_DMA_Init+0x688>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d036      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4b      	ldr	r2, [pc, #300]	@ (8004738 <HAL_DMA_Init+0x68c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d031      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4a      	ldr	r2, [pc, #296]	@ (800473c <HAL_DMA_Init+0x690>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d02c      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a48      	ldr	r2, [pc, #288]	@ (8004740 <HAL_DMA_Init+0x694>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d027      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a47      	ldr	r2, [pc, #284]	@ (8004744 <HAL_DMA_Init+0x698>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a45      	ldr	r2, [pc, #276]	@ (8004748 <HAL_DMA_Init+0x69c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01d      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a44      	ldr	r2, [pc, #272]	@ (800474c <HAL_DMA_Init+0x6a0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a42      	ldr	r2, [pc, #264]	@ (8004750 <HAL_DMA_Init+0x6a4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a41      	ldr	r2, [pc, #260]	@ (8004754 <HAL_DMA_Init+0x6a8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3f      	ldr	r2, [pc, #252]	@ (8004758 <HAL_DMA_Init+0x6ac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3e      	ldr	r2, [pc, #248]	@ (800475c <HAL_DMA_Init+0x6b0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3c      	ldr	r2, [pc, #240]	@ (8004760 <HAL_DMA_Init+0x6b4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_DMA_Init+0x5ca>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_DMA_Init+0x5cc>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d032      	beq.n	80046e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f002 fa43 	bl	8006b08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d102      	bne.n	8004690 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_DMA_Init+0x624>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d80c      	bhi.n	80046d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f002 fac0 	bl	8006c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	e008      	b.n	80046e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	a7fdabf8 	.word	0xa7fdabf8
 8004700:	cccccccd 	.word	0xcccccccd
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8
 8004744:	58025408 	.word	0x58025408
 8004748:	5802541c 	.word	0x5802541c
 800474c:	58025430 	.word	0x58025430
 8004750:	58025444 	.word	0x58025444
 8004754:	58025458 	.word	0x58025458
 8004758:	5802546c 	.word	0x5802546c
 800475c:	58025480 	.word	0x58025480
 8004760:	58025494 	.word	0x58025494

08004764 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e226      	b.n	8004bce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_DMA_Start_IT+0x2a>
 800478a:	2302      	movs	r3, #2
 800478c:	e21f      	b.n	8004bce <HAL_DMA_Start_IT+0x46a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	f040 820a 	bne.w	8004bb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a68      	ldr	r2, [pc, #416]	@ (8004958 <HAL_DMA_Start_IT+0x1f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d04a      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a66      	ldr	r2, [pc, #408]	@ (800495c <HAL_DMA_Start_IT+0x1f8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d045      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a65      	ldr	r2, [pc, #404]	@ (8004960 <HAL_DMA_Start_IT+0x1fc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d040      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a63      	ldr	r2, [pc, #396]	@ (8004964 <HAL_DMA_Start_IT+0x200>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03b      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a62      	ldr	r2, [pc, #392]	@ (8004968 <HAL_DMA_Start_IT+0x204>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a60      	ldr	r2, [pc, #384]	@ (800496c <HAL_DMA_Start_IT+0x208>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004970 <HAL_DMA_Start_IT+0x20c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d02c      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004974 <HAL_DMA_Start_IT+0x210>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d027      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5c      	ldr	r2, [pc, #368]	@ (8004978 <HAL_DMA_Start_IT+0x214>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5a      	ldr	r2, [pc, #360]	@ (800497c <HAL_DMA_Start_IT+0x218>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a59      	ldr	r2, [pc, #356]	@ (8004980 <HAL_DMA_Start_IT+0x21c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a57      	ldr	r2, [pc, #348]	@ (8004984 <HAL_DMA_Start_IT+0x220>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a56      	ldr	r2, [pc, #344]	@ (8004988 <HAL_DMA_Start_IT+0x224>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a54      	ldr	r2, [pc, #336]	@ (800498c <HAL_DMA_Start_IT+0x228>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a53      	ldr	r2, [pc, #332]	@ (8004990 <HAL_DMA_Start_IT+0x22c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_DMA_Start_IT+0xee>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a51      	ldr	r2, [pc, #324]	@ (8004994 <HAL_DMA_Start_IT+0x230>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <HAL_DMA_Start_IT+0x100>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e007      	b.n	8004874 <HAL_DMA_Start_IT+0x110>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f001 fe6a 	bl	8006554 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a34      	ldr	r2, [pc, #208]	@ (8004958 <HAL_DMA_Start_IT+0x1f4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d04a      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a33      	ldr	r2, [pc, #204]	@ (800495c <HAL_DMA_Start_IT+0x1f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d045      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a31      	ldr	r2, [pc, #196]	@ (8004960 <HAL_DMA_Start_IT+0x1fc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d040      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a30      	ldr	r2, [pc, #192]	@ (8004964 <HAL_DMA_Start_IT+0x200>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d03b      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004968 <HAL_DMA_Start_IT+0x204>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d036      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2d      	ldr	r2, [pc, #180]	@ (800496c <HAL_DMA_Start_IT+0x208>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d031      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004970 <HAL_DMA_Start_IT+0x20c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02c      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004974 <HAL_DMA_Start_IT+0x210>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d027      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a28      	ldr	r2, [pc, #160]	@ (8004978 <HAL_DMA_Start_IT+0x214>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a27      	ldr	r2, [pc, #156]	@ (800497c <HAL_DMA_Start_IT+0x218>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01d      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a25      	ldr	r2, [pc, #148]	@ (8004980 <HAL_DMA_Start_IT+0x21c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <HAL_DMA_Start_IT+0x220>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d013      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a22      	ldr	r2, [pc, #136]	@ (8004988 <HAL_DMA_Start_IT+0x224>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a21      	ldr	r2, [pc, #132]	@ (800498c <HAL_DMA_Start_IT+0x228>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1f      	ldr	r2, [pc, #124]	@ (8004990 <HAL_DMA_Start_IT+0x22c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_DMA_Start_IT+0x1bc>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <HAL_DMA_Start_IT+0x230>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_DMA_Start_IT+0x1c0>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_DMA_Start_IT+0x1c2>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d036      	beq.n	8004998 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 021e 	bic.w	r2, r3, #30
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0216 	orr.w	r2, r2, #22
 800493c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d03e      	beq.n	80049c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0208 	orr.w	r2, r2, #8
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e035      	b.n	80049c4 <HAL_DMA_Start_IT+0x260>
 8004958:	40020010 	.word	0x40020010
 800495c:	40020028 	.word	0x40020028
 8004960:	40020040 	.word	0x40020040
 8004964:	40020058 	.word	0x40020058
 8004968:	40020070 	.word	0x40020070
 800496c:	40020088 	.word	0x40020088
 8004970:	400200a0 	.word	0x400200a0
 8004974:	400200b8 	.word	0x400200b8
 8004978:	40020410 	.word	0x40020410
 800497c:	40020428 	.word	0x40020428
 8004980:	40020440 	.word	0x40020440
 8004984:	40020458 	.word	0x40020458
 8004988:	40020470 	.word	0x40020470
 800498c:	40020488 	.word	0x40020488
 8004990:	400204a0 	.word	0x400204a0
 8004994:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f023 020e 	bic.w	r2, r3, #14
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 020a 	orr.w	r2, r2, #10
 80049aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0204 	orr.w	r2, r2, #4
 80049c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a83      	ldr	r2, [pc, #524]	@ (8004bd8 <HAL_DMA_Start_IT+0x474>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d072      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a82      	ldr	r2, [pc, #520]	@ (8004bdc <HAL_DMA_Start_IT+0x478>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d06d      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a80      	ldr	r2, [pc, #512]	@ (8004be0 <HAL_DMA_Start_IT+0x47c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d068      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7f      	ldr	r2, [pc, #508]	@ (8004be4 <HAL_DMA_Start_IT+0x480>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d063      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a7d      	ldr	r2, [pc, #500]	@ (8004be8 <HAL_DMA_Start_IT+0x484>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d05e      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7c      	ldr	r2, [pc, #496]	@ (8004bec <HAL_DMA_Start_IT+0x488>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d059      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a7a      	ldr	r2, [pc, #488]	@ (8004bf0 <HAL_DMA_Start_IT+0x48c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d054      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a79      	ldr	r2, [pc, #484]	@ (8004bf4 <HAL_DMA_Start_IT+0x490>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04f      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a77      	ldr	r2, [pc, #476]	@ (8004bf8 <HAL_DMA_Start_IT+0x494>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d04a      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a76      	ldr	r2, [pc, #472]	@ (8004bfc <HAL_DMA_Start_IT+0x498>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d045      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a74      	ldr	r2, [pc, #464]	@ (8004c00 <HAL_DMA_Start_IT+0x49c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d040      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a73      	ldr	r2, [pc, #460]	@ (8004c04 <HAL_DMA_Start_IT+0x4a0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d03b      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a71      	ldr	r2, [pc, #452]	@ (8004c08 <HAL_DMA_Start_IT+0x4a4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d036      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a70      	ldr	r2, [pc, #448]	@ (8004c0c <HAL_DMA_Start_IT+0x4a8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d031      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a6e      	ldr	r2, [pc, #440]	@ (8004c10 <HAL_DMA_Start_IT+0x4ac>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02c      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8004c14 <HAL_DMA_Start_IT+0x4b0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d027      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a6b      	ldr	r2, [pc, #428]	@ (8004c18 <HAL_DMA_Start_IT+0x4b4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6a      	ldr	r2, [pc, #424]	@ (8004c1c <HAL_DMA_Start_IT+0x4b8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d01d      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a68      	ldr	r2, [pc, #416]	@ (8004c20 <HAL_DMA_Start_IT+0x4bc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a67      	ldr	r2, [pc, #412]	@ (8004c24 <HAL_DMA_Start_IT+0x4c0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_DMA_Start_IT+0x4c4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a64      	ldr	r2, [pc, #400]	@ (8004c2c <HAL_DMA_Start_IT+0x4c8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a62      	ldr	r2, [pc, #392]	@ (8004c30 <HAL_DMA_Start_IT+0x4cc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x350>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a61      	ldr	r2, [pc, #388]	@ (8004c34 <HAL_DMA_Start_IT+0x4d0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_DMA_Start_IT+0x354>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_DMA_Start_IT+0x356>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01a      	beq.n	8004af4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ada:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004af2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a37      	ldr	r2, [pc, #220]	@ (8004bd8 <HAL_DMA_Start_IT+0x474>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a36      	ldr	r2, [pc, #216]	@ (8004bdc <HAL_DMA_Start_IT+0x478>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a34      	ldr	r2, [pc, #208]	@ (8004be0 <HAL_DMA_Start_IT+0x47c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a33      	ldr	r2, [pc, #204]	@ (8004be4 <HAL_DMA_Start_IT+0x480>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a31      	ldr	r2, [pc, #196]	@ (8004be8 <HAL_DMA_Start_IT+0x484>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a30      	ldr	r2, [pc, #192]	@ (8004bec <HAL_DMA_Start_IT+0x488>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <HAL_DMA_Start_IT+0x48c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf4 <HAL_DMA_Start_IT+0x490>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_DMA_Start_IT+0x494>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2a      	ldr	r2, [pc, #168]	@ (8004bfc <HAL_DMA_Start_IT+0x498>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	@ (8004c00 <HAL_DMA_Start_IT+0x49c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a27      	ldr	r2, [pc, #156]	@ (8004c04 <HAL_DMA_Start_IT+0x4a0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a25      	ldr	r2, [pc, #148]	@ (8004c08 <HAL_DMA_Start_IT+0x4a4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <HAL_DMA_Start_IT+0x4a8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <HAL_DMA_Start_IT+0x4ac>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_Start_IT+0x430>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <HAL_DMA_Start_IT+0x4b0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <HAL_DMA_Start_IT+0x442>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e012      	b.n	8004bcc <HAL_DMA_Start_IT+0x468>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e009      	b.n	8004bcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
 8004c18:	58025408 	.word	0x58025408
 8004c1c:	5802541c 	.word	0x5802541c
 8004c20:	58025430 	.word	0x58025430
 8004c24:	58025444 	.word	0x58025444
 8004c28:	58025458 	.word	0x58025458
 8004c2c:	5802546c 	.word	0x5802546c
 8004c30:	58025480 	.word	0x58025480
 8004c34:	58025494 	.word	0x58025494

08004c38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c40:	f7fd fe1a 	bl	8002878 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e2dc      	b.n	800520a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d008      	beq.n	8004c6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2280      	movs	r2, #128	@ 0x80
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e2cd      	b.n	800520a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a76      	ldr	r2, [pc, #472]	@ (8004e4c <HAL_DMA_Abort+0x214>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d04a      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a74      	ldr	r2, [pc, #464]	@ (8004e50 <HAL_DMA_Abort+0x218>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d045      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a73      	ldr	r2, [pc, #460]	@ (8004e54 <HAL_DMA_Abort+0x21c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d040      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a71      	ldr	r2, [pc, #452]	@ (8004e58 <HAL_DMA_Abort+0x220>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d03b      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a70      	ldr	r2, [pc, #448]	@ (8004e5c <HAL_DMA_Abort+0x224>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d036      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e60 <HAL_DMA_Abort+0x228>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d031      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6d      	ldr	r2, [pc, #436]	@ (8004e64 <HAL_DMA_Abort+0x22c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d02c      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e68 <HAL_DMA_Abort+0x230>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d027      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e6c <HAL_DMA_Abort+0x234>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d022      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a68      	ldr	r2, [pc, #416]	@ (8004e70 <HAL_DMA_Abort+0x238>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01d      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a67      	ldr	r2, [pc, #412]	@ (8004e74 <HAL_DMA_Abort+0x23c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a65      	ldr	r2, [pc, #404]	@ (8004e78 <HAL_DMA_Abort+0x240>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a64      	ldr	r2, [pc, #400]	@ (8004e7c <HAL_DMA_Abort+0x244>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a62      	ldr	r2, [pc, #392]	@ (8004e80 <HAL_DMA_Abort+0x248>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a61      	ldr	r2, [pc, #388]	@ (8004e84 <HAL_DMA_Abort+0x24c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_DMA_Abort+0xd6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a5f      	ldr	r2, [pc, #380]	@ (8004e88 <HAL_DMA_Abort+0x250>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <HAL_DMA_Abort+0xda>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <HAL_DMA_Abort+0xdc>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 021e 	bic.w	r2, r2, #30
 8004d26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e00a      	b.n	8004d56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 020e 	bic.w	r2, r2, #14
 8004d4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e4c <HAL_DMA_Abort+0x214>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d072      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a3a      	ldr	r2, [pc, #232]	@ (8004e50 <HAL_DMA_Abort+0x218>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d06d      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a39      	ldr	r2, [pc, #228]	@ (8004e54 <HAL_DMA_Abort+0x21c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d068      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a37      	ldr	r2, [pc, #220]	@ (8004e58 <HAL_DMA_Abort+0x220>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d063      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a36      	ldr	r2, [pc, #216]	@ (8004e5c <HAL_DMA_Abort+0x224>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d05e      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a34      	ldr	r2, [pc, #208]	@ (8004e60 <HAL_DMA_Abort+0x228>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d059      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a33      	ldr	r2, [pc, #204]	@ (8004e64 <HAL_DMA_Abort+0x22c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d054      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a31      	ldr	r2, [pc, #196]	@ (8004e68 <HAL_DMA_Abort+0x230>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d04f      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a30      	ldr	r2, [pc, #192]	@ (8004e6c <HAL_DMA_Abort+0x234>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d04a      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2e      	ldr	r2, [pc, #184]	@ (8004e70 <HAL_DMA_Abort+0x238>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d045      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8004e74 <HAL_DMA_Abort+0x23c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d040      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e78 <HAL_DMA_Abort+0x240>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d03b      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e7c <HAL_DMA_Abort+0x244>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d036      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a28      	ldr	r2, [pc, #160]	@ (8004e80 <HAL_DMA_Abort+0x248>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d031      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <HAL_DMA_Abort+0x24c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d02c      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a25      	ldr	r2, [pc, #148]	@ (8004e88 <HAL_DMA_Abort+0x250>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d027      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a24      	ldr	r2, [pc, #144]	@ (8004e8c <HAL_DMA_Abort+0x254>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d022      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a22      	ldr	r2, [pc, #136]	@ (8004e90 <HAL_DMA_Abort+0x258>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01d      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a21      	ldr	r2, [pc, #132]	@ (8004e94 <HAL_DMA_Abort+0x25c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1f      	ldr	r2, [pc, #124]	@ (8004e98 <HAL_DMA_Abort+0x260>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <HAL_DMA_Abort+0x264>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea0 <HAL_DMA_Abort+0x268>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_DMA_Abort+0x26c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_DMA_Abort+0x20e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <HAL_DMA_Abort+0x270>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d132      	bne.n	8004eac <HAL_DMA_Abort+0x274>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e031      	b.n	8004eae <HAL_DMA_Abort+0x276>
 8004e4a:	bf00      	nop
 8004e4c:	40020010 	.word	0x40020010
 8004e50:	40020028 	.word	0x40020028
 8004e54:	40020040 	.word	0x40020040
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	40020070 	.word	0x40020070
 8004e60:	40020088 	.word	0x40020088
 8004e64:	400200a0 	.word	0x400200a0
 8004e68:	400200b8 	.word	0x400200b8
 8004e6c:	40020410 	.word	0x40020410
 8004e70:	40020428 	.word	0x40020428
 8004e74:	40020440 	.word	0x40020440
 8004e78:	40020458 	.word	0x40020458
 8004e7c:	40020470 	.word	0x40020470
 8004e80:	40020488 	.word	0x40020488
 8004e84:	400204a0 	.word	0x400204a0
 8004e88:	400204b8 	.word	0x400204b8
 8004e8c:	58025408 	.word	0x58025408
 8004e90:	5802541c 	.word	0x5802541c
 8004e94:	58025430 	.word	0x58025430
 8004e98:	58025444 	.word	0x58025444
 8004e9c:	58025458 	.word	0x58025458
 8004ea0:	5802546c 	.word	0x5802546c
 8004ea4:	58025480 	.word	0x58025480
 8004ea8:	58025494 	.word	0x58025494
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800507c <HAL_DMA_Abort+0x444>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8005080 <HAL_DMA_Abort+0x448>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6a      	ldr	r2, [pc, #424]	@ (8005084 <HAL_DMA_Abort+0x44c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a68      	ldr	r2, [pc, #416]	@ (8005088 <HAL_DMA_Abort+0x450>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a67      	ldr	r2, [pc, #412]	@ (800508c <HAL_DMA_Abort+0x454>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a65      	ldr	r2, [pc, #404]	@ (8005090 <HAL_DMA_Abort+0x458>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a64      	ldr	r2, [pc, #400]	@ (8005094 <HAL_DMA_Abort+0x45c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a62      	ldr	r2, [pc, #392]	@ (8005098 <HAL_DMA_Abort+0x460>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a61      	ldr	r2, [pc, #388]	@ (800509c <HAL_DMA_Abort+0x464>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a5f      	ldr	r2, [pc, #380]	@ (80050a0 <HAL_DMA_Abort+0x468>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a5e      	ldr	r2, [pc, #376]	@ (80050a4 <HAL_DMA_Abort+0x46c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a5c      	ldr	r2, [pc, #368]	@ (80050a8 <HAL_DMA_Abort+0x470>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80050ac <HAL_DMA_Abort+0x474>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a59      	ldr	r2, [pc, #356]	@ (80050b0 <HAL_DMA_Abort+0x478>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a58      	ldr	r2, [pc, #352]	@ (80050b4 <HAL_DMA_Abort+0x47c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_DMA_Abort+0x32a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a56      	ldr	r2, [pc, #344]	@ (80050b8 <HAL_DMA_Abort+0x480>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <HAL_DMA_Abort+0x33c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e007      	b.n	8004f84 <HAL_DMA_Abort+0x34c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f84:	e013      	b.n	8004fae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f86:	f7fd fc77 	bl	8002878 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d90c      	bls.n	8004fae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e12d      	b.n	800520a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800507c <HAL_DMA_Abort+0x444>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d04a      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005080 <HAL_DMA_Abort+0x448>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d045      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8005084 <HAL_DMA_Abort+0x44c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d040      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8005088 <HAL_DMA_Abort+0x450>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d03b      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a29      	ldr	r2, [pc, #164]	@ (800508c <HAL_DMA_Abort+0x454>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d036      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a27      	ldr	r2, [pc, #156]	@ (8005090 <HAL_DMA_Abort+0x458>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d031      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <HAL_DMA_Abort+0x45c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d02c      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a24      	ldr	r2, [pc, #144]	@ (8005098 <HAL_DMA_Abort+0x460>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d027      	beq.n	800505a <HAL_DMA_Abort+0x422>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a23      	ldr	r2, [pc, #140]	@ (800509c <HAL_DMA_Abort+0x464>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a21      	ldr	r2, [pc, #132]	@ (80050a0 <HAL_DMA_Abort+0x468>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_DMA_Abort+0x422>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a20      	ldr	r2, [pc, #128]	@ (80050a4 <HAL_DMA_Abort+0x46c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1e      	ldr	r2, [pc, #120]	@ (80050a8 <HAL_DMA_Abort+0x470>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1d      	ldr	r2, [pc, #116]	@ (80050ac <HAL_DMA_Abort+0x474>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_DMA_Abort+0x422>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <HAL_DMA_Abort+0x478>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <HAL_DMA_Abort+0x47c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_DMA_Abort+0x422>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <HAL_DMA_Abort+0x480>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <HAL_DMA_Abort+0x426>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_DMA_Abort+0x428>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02b      	beq.n	80050bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005068:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	223f      	movs	r2, #63	@ 0x3f
 8005074:	409a      	lsls	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	e02a      	b.n	80050d2 <HAL_DMA_Abort+0x49a>
 800507c:	40020010 	.word	0x40020010
 8005080:	40020028 	.word	0x40020028
 8005084:	40020040 	.word	0x40020040
 8005088:	40020058 	.word	0x40020058
 800508c:	40020070 	.word	0x40020070
 8005090:	40020088 	.word	0x40020088
 8005094:	400200a0 	.word	0x400200a0
 8005098:	400200b8 	.word	0x400200b8
 800509c:	40020410 	.word	0x40020410
 80050a0:	40020428 	.word	0x40020428
 80050a4:	40020440 	.word	0x40020440
 80050a8:	40020458 	.word	0x40020458
 80050ac:	40020470 	.word	0x40020470
 80050b0:	40020488 	.word	0x40020488
 80050b4:	400204a0 	.word	0x400204a0
 80050b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2201      	movs	r2, #1
 80050cc:	409a      	lsls	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4f      	ldr	r2, [pc, #316]	@ (8005214 <HAL_DMA_Abort+0x5dc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d072      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4d      	ldr	r2, [pc, #308]	@ (8005218 <HAL_DMA_Abort+0x5e0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d06d      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4c      	ldr	r2, [pc, #304]	@ (800521c <HAL_DMA_Abort+0x5e4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d068      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005220 <HAL_DMA_Abort+0x5e8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d063      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a49      	ldr	r2, [pc, #292]	@ (8005224 <HAL_DMA_Abort+0x5ec>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d05e      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a47      	ldr	r2, [pc, #284]	@ (8005228 <HAL_DMA_Abort+0x5f0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d059      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a46      	ldr	r2, [pc, #280]	@ (800522c <HAL_DMA_Abort+0x5f4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d054      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a44      	ldr	r2, [pc, #272]	@ (8005230 <HAL_DMA_Abort+0x5f8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d04f      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a43      	ldr	r2, [pc, #268]	@ (8005234 <HAL_DMA_Abort+0x5fc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d04a      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a41      	ldr	r2, [pc, #260]	@ (8005238 <HAL_DMA_Abort+0x600>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d045      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a40      	ldr	r2, [pc, #256]	@ (800523c <HAL_DMA_Abort+0x604>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d040      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a3e      	ldr	r2, [pc, #248]	@ (8005240 <HAL_DMA_Abort+0x608>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d03b      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a3d      	ldr	r2, [pc, #244]	@ (8005244 <HAL_DMA_Abort+0x60c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d036      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3b      	ldr	r2, [pc, #236]	@ (8005248 <HAL_DMA_Abort+0x610>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d031      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a3a      	ldr	r2, [pc, #232]	@ (800524c <HAL_DMA_Abort+0x614>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d02c      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a38      	ldr	r2, [pc, #224]	@ (8005250 <HAL_DMA_Abort+0x618>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d027      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a37      	ldr	r2, [pc, #220]	@ (8005254 <HAL_DMA_Abort+0x61c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a35      	ldr	r2, [pc, #212]	@ (8005258 <HAL_DMA_Abort+0x620>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01d      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a34      	ldr	r2, [pc, #208]	@ (800525c <HAL_DMA_Abort+0x624>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a32      	ldr	r2, [pc, #200]	@ (8005260 <HAL_DMA_Abort+0x628>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a31      	ldr	r2, [pc, #196]	@ (8005264 <HAL_DMA_Abort+0x62c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005268 <HAL_DMA_Abort+0x630>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2e      	ldr	r2, [pc, #184]	@ (800526c <HAL_DMA_Abort+0x634>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_DMA_Abort+0x58a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005270 <HAL_DMA_Abort+0x638>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_DMA_Abort+0x58e>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_DMA_Abort+0x590>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40020010 	.word	0x40020010
 8005218:	40020028 	.word	0x40020028
 800521c:	40020040 	.word	0x40020040
 8005220:	40020058 	.word	0x40020058
 8005224:	40020070 	.word	0x40020070
 8005228:	40020088 	.word	0x40020088
 800522c:	400200a0 	.word	0x400200a0
 8005230:	400200b8 	.word	0x400200b8
 8005234:	40020410 	.word	0x40020410
 8005238:	40020428 	.word	0x40020428
 800523c:	40020440 	.word	0x40020440
 8005240:	40020458 	.word	0x40020458
 8005244:	40020470 	.word	0x40020470
 8005248:	40020488 	.word	0x40020488
 800524c:	400204a0 	.word	0x400204a0
 8005250:	400204b8 	.word	0x400204b8
 8005254:	58025408 	.word	0x58025408
 8005258:	5802541c 	.word	0x5802541c
 800525c:	58025430 	.word	0x58025430
 8005260:	58025444 	.word	0x58025444
 8005264:	58025458 	.word	0x58025458
 8005268:	5802546c 	.word	0x5802546c
 800526c:	58025480 	.word	0x58025480
 8005270:	58025494 	.word	0x58025494

08005274 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e237      	b.n	80056f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d004      	beq.n	800529c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2280      	movs	r2, #128	@ 0x80
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e22c      	b.n	80056f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a5c      	ldr	r2, [pc, #368]	@ (8005414 <HAL_DMA_Abort_IT+0x1a0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d04a      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005418 <HAL_DMA_Abort_IT+0x1a4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d045      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a59      	ldr	r2, [pc, #356]	@ (800541c <HAL_DMA_Abort_IT+0x1a8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d040      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a58      	ldr	r2, [pc, #352]	@ (8005420 <HAL_DMA_Abort_IT+0x1ac>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d03b      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a56      	ldr	r2, [pc, #344]	@ (8005424 <HAL_DMA_Abort_IT+0x1b0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d036      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a55      	ldr	r2, [pc, #340]	@ (8005428 <HAL_DMA_Abort_IT+0x1b4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d031      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a53      	ldr	r2, [pc, #332]	@ (800542c <HAL_DMA_Abort_IT+0x1b8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d02c      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a52      	ldr	r2, [pc, #328]	@ (8005430 <HAL_DMA_Abort_IT+0x1bc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d027      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a50      	ldr	r2, [pc, #320]	@ (8005434 <HAL_DMA_Abort_IT+0x1c0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a4f      	ldr	r2, [pc, #316]	@ (8005438 <HAL_DMA_Abort_IT+0x1c4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d01d      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a4d      	ldr	r2, [pc, #308]	@ (800543c <HAL_DMA_Abort_IT+0x1c8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a4c      	ldr	r2, [pc, #304]	@ (8005440 <HAL_DMA_Abort_IT+0x1cc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a4a      	ldr	r2, [pc, #296]	@ (8005444 <HAL_DMA_Abort_IT+0x1d0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a49      	ldr	r2, [pc, #292]	@ (8005448 <HAL_DMA_Abort_IT+0x1d4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a47      	ldr	r2, [pc, #284]	@ (800544c <HAL_DMA_Abort_IT+0x1d8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_DMA_Abort_IT+0xc8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a46      	ldr	r2, [pc, #280]	@ (8005450 <HAL_DMA_Abort_IT+0x1dc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Abort_IT+0xcc>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_DMA_Abort_IT+0xce>
 8005340:	2300      	movs	r3, #0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8086 	beq.w	8005454 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2204      	movs	r2, #4
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2f      	ldr	r2, [pc, #188]	@ (8005414 <HAL_DMA_Abort_IT+0x1a0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04a      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2e      	ldr	r2, [pc, #184]	@ (8005418 <HAL_DMA_Abort_IT+0x1a4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d045      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2c      	ldr	r2, [pc, #176]	@ (800541c <HAL_DMA_Abort_IT+0x1a8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d040      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2b      	ldr	r2, [pc, #172]	@ (8005420 <HAL_DMA_Abort_IT+0x1ac>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03b      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a29      	ldr	r2, [pc, #164]	@ (8005424 <HAL_DMA_Abort_IT+0x1b0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d036      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a28      	ldr	r2, [pc, #160]	@ (8005428 <HAL_DMA_Abort_IT+0x1b4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d031      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a26      	ldr	r2, [pc, #152]	@ (800542c <HAL_DMA_Abort_IT+0x1b8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a25      	ldr	r2, [pc, #148]	@ (8005430 <HAL_DMA_Abort_IT+0x1bc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d027      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a23      	ldr	r2, [pc, #140]	@ (8005434 <HAL_DMA_Abort_IT+0x1c0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <HAL_DMA_Abort_IT+0x1c4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a20      	ldr	r2, [pc, #128]	@ (800543c <HAL_DMA_Abort_IT+0x1c8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005440 <HAL_DMA_Abort_IT+0x1cc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <HAL_DMA_Abort_IT+0x1d0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <HAL_DMA_Abort_IT+0x1d4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1a      	ldr	r2, [pc, #104]	@ (800544c <HAL_DMA_Abort_IT+0x1d8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x17c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a19      	ldr	r2, [pc, #100]	@ (8005450 <HAL_DMA_Abort_IT+0x1dc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <HAL_DMA_Abort_IT+0x18e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e178      	b.n	80056f4 <HAL_DMA_Abort_IT+0x480>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e16f      	b.n	80056f4 <HAL_DMA_Abort_IT+0x480>
 8005414:	40020010 	.word	0x40020010
 8005418:	40020028 	.word	0x40020028
 800541c:	40020040 	.word	0x40020040
 8005420:	40020058 	.word	0x40020058
 8005424:	40020070 	.word	0x40020070
 8005428:	40020088 	.word	0x40020088
 800542c:	400200a0 	.word	0x400200a0
 8005430:	400200b8 	.word	0x400200b8
 8005434:	40020410 	.word	0x40020410
 8005438:	40020428 	.word	0x40020428
 800543c:	40020440 	.word	0x40020440
 8005440:	40020458 	.word	0x40020458
 8005444:	40020470 	.word	0x40020470
 8005448:	40020488 	.word	0x40020488
 800544c:	400204a0 	.word	0x400204a0
 8005450:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 020e 	bic.w	r2, r2, #14
 8005462:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6c      	ldr	r2, [pc, #432]	@ (800561c <HAL_DMA_Abort_IT+0x3a8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d04a      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6b      	ldr	r2, [pc, #428]	@ (8005620 <HAL_DMA_Abort_IT+0x3ac>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d045      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a69      	ldr	r2, [pc, #420]	@ (8005624 <HAL_DMA_Abort_IT+0x3b0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d040      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a68      	ldr	r2, [pc, #416]	@ (8005628 <HAL_DMA_Abort_IT+0x3b4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d03b      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a66      	ldr	r2, [pc, #408]	@ (800562c <HAL_DMA_Abort_IT+0x3b8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d036      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a65      	ldr	r2, [pc, #404]	@ (8005630 <HAL_DMA_Abort_IT+0x3bc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d031      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a63      	ldr	r2, [pc, #396]	@ (8005634 <HAL_DMA_Abort_IT+0x3c0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d02c      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a62      	ldr	r2, [pc, #392]	@ (8005638 <HAL_DMA_Abort_IT+0x3c4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d027      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a60      	ldr	r2, [pc, #384]	@ (800563c <HAL_DMA_Abort_IT+0x3c8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5f      	ldr	r2, [pc, #380]	@ (8005640 <HAL_DMA_Abort_IT+0x3cc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d01d      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005644 <HAL_DMA_Abort_IT+0x3d0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5c      	ldr	r2, [pc, #368]	@ (8005648 <HAL_DMA_Abort_IT+0x3d4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5a      	ldr	r2, [pc, #360]	@ (800564c <HAL_DMA_Abort_IT+0x3d8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a59      	ldr	r2, [pc, #356]	@ (8005650 <HAL_DMA_Abort_IT+0x3dc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a57      	ldr	r2, [pc, #348]	@ (8005654 <HAL_DMA_Abort_IT+0x3e0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_DMA_Abort_IT+0x290>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a56      	ldr	r2, [pc, #344]	@ (8005658 <HAL_DMA_Abort_IT+0x3e4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <HAL_DMA_Abort_IT+0x2a2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e007      	b.n	8005526 <HAL_DMA_Abort_IT+0x2b2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a3c      	ldr	r2, [pc, #240]	@ (800561c <HAL_DMA_Abort_IT+0x3a8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d072      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3a      	ldr	r2, [pc, #232]	@ (8005620 <HAL_DMA_Abort_IT+0x3ac>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d06d      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a39      	ldr	r2, [pc, #228]	@ (8005624 <HAL_DMA_Abort_IT+0x3b0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d068      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a37      	ldr	r2, [pc, #220]	@ (8005628 <HAL_DMA_Abort_IT+0x3b4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d063      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a36      	ldr	r2, [pc, #216]	@ (800562c <HAL_DMA_Abort_IT+0x3b8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d05e      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a34      	ldr	r2, [pc, #208]	@ (8005630 <HAL_DMA_Abort_IT+0x3bc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d059      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a33      	ldr	r2, [pc, #204]	@ (8005634 <HAL_DMA_Abort_IT+0x3c0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d054      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a31      	ldr	r2, [pc, #196]	@ (8005638 <HAL_DMA_Abort_IT+0x3c4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d04f      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a30      	ldr	r2, [pc, #192]	@ (800563c <HAL_DMA_Abort_IT+0x3c8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d04a      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2e      	ldr	r2, [pc, #184]	@ (8005640 <HAL_DMA_Abort_IT+0x3cc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d045      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2d      	ldr	r2, [pc, #180]	@ (8005644 <HAL_DMA_Abort_IT+0x3d0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d040      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2b      	ldr	r2, [pc, #172]	@ (8005648 <HAL_DMA_Abort_IT+0x3d4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d03b      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2a      	ldr	r2, [pc, #168]	@ (800564c <HAL_DMA_Abort_IT+0x3d8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d036      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a28      	ldr	r2, [pc, #160]	@ (8005650 <HAL_DMA_Abort_IT+0x3dc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d031      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a27      	ldr	r2, [pc, #156]	@ (8005654 <HAL_DMA_Abort_IT+0x3e0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d02c      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a25      	ldr	r2, [pc, #148]	@ (8005658 <HAL_DMA_Abort_IT+0x3e4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d027      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a24      	ldr	r2, [pc, #144]	@ (800565c <HAL_DMA_Abort_IT+0x3e8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	@ (8005660 <HAL_DMA_Abort_IT+0x3ec>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01d      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a21      	ldr	r2, [pc, #132]	@ (8005664 <HAL_DMA_Abort_IT+0x3f0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005668 <HAL_DMA_Abort_IT+0x3f4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1e      	ldr	r2, [pc, #120]	@ (800566c <HAL_DMA_Abort_IT+0x3f8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <HAL_DMA_Abort_IT+0x3fc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1b      	ldr	r2, [pc, #108]	@ (8005674 <HAL_DMA_Abort_IT+0x400>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_Abort_IT+0x3a2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <HAL_DMA_Abort_IT+0x404>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d132      	bne.n	800567c <HAL_DMA_Abort_IT+0x408>
 8005616:	2301      	movs	r3, #1
 8005618:	e031      	b.n	800567e <HAL_DMA_Abort_IT+0x40a>
 800561a:	bf00      	nop
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
 800565c:	58025408 	.word	0x58025408
 8005660:	5802541c 	.word	0x5802541c
 8005664:	58025430 	.word	0x58025430
 8005668:	58025444 	.word	0x58025444
 800566c:	58025458 	.word	0x58025458
 8005670:	5802546c 	.word	0x5802546c
 8005674:	58025480 	.word	0x58025480
 8005678:	58025494 	.word	0x58025494
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d028      	beq.n	80056d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005690:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop

08005700 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800570c:	4b67      	ldr	r3, [pc, #412]	@ (80058ac <HAL_DMA_IRQHandler+0x1ac>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a67      	ldr	r2, [pc, #412]	@ (80058b0 <HAL_DMA_IRQHandler+0x1b0>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	0a9b      	lsrs	r3, r3, #10
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005724:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a5f      	ldr	r2, [pc, #380]	@ (80058b4 <HAL_DMA_IRQHandler+0x1b4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5d      	ldr	r2, [pc, #372]	@ (80058b8 <HAL_DMA_IRQHandler+0x1b8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a5c      	ldr	r2, [pc, #368]	@ (80058bc <HAL_DMA_IRQHandler+0x1bc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a5a      	ldr	r2, [pc, #360]	@ (80058c0 <HAL_DMA_IRQHandler+0x1c0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a59      	ldr	r2, [pc, #356]	@ (80058c4 <HAL_DMA_IRQHandler+0x1c4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a57      	ldr	r2, [pc, #348]	@ (80058c8 <HAL_DMA_IRQHandler+0x1c8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a56      	ldr	r2, [pc, #344]	@ (80058cc <HAL_DMA_IRQHandler+0x1cc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a54      	ldr	r2, [pc, #336]	@ (80058d0 <HAL_DMA_IRQHandler+0x1d0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a53      	ldr	r2, [pc, #332]	@ (80058d4 <HAL_DMA_IRQHandler+0x1d4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a51      	ldr	r2, [pc, #324]	@ (80058d8 <HAL_DMA_IRQHandler+0x1d8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a50      	ldr	r2, [pc, #320]	@ (80058dc <HAL_DMA_IRQHandler+0x1dc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a4e      	ldr	r2, [pc, #312]	@ (80058e0 <HAL_DMA_IRQHandler+0x1e0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a4d      	ldr	r2, [pc, #308]	@ (80058e4 <HAL_DMA_IRQHandler+0x1e4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a4b      	ldr	r2, [pc, #300]	@ (80058e8 <HAL_DMA_IRQHandler+0x1e8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a4a      	ldr	r2, [pc, #296]	@ (80058ec <HAL_DMA_IRQHandler+0x1ec>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_DMA_IRQHandler+0xd2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a48      	ldr	r2, [pc, #288]	@ (80058f0 <HAL_DMA_IRQHandler+0x1f0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_DMA_IRQHandler+0xd6>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_DMA_IRQHandler+0xd8>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 842b 	beq.w	8006034 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2208      	movs	r2, #8
 80057e8:	409a      	lsls	r2, r3
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80a2 	beq.w	8005938 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	@ (80058b4 <HAL_DMA_IRQHandler+0x1b4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d04a      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <HAL_DMA_IRQHandler+0x1b8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d045      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2b      	ldr	r2, [pc, #172]	@ (80058bc <HAL_DMA_IRQHandler+0x1bc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d040      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2a      	ldr	r2, [pc, #168]	@ (80058c0 <HAL_DMA_IRQHandler+0x1c0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d03b      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a28      	ldr	r2, [pc, #160]	@ (80058c4 <HAL_DMA_IRQHandler+0x1c4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d036      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a27      	ldr	r2, [pc, #156]	@ (80058c8 <HAL_DMA_IRQHandler+0x1c8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d031      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a25      	ldr	r2, [pc, #148]	@ (80058cc <HAL_DMA_IRQHandler+0x1cc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02c      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a24      	ldr	r2, [pc, #144]	@ (80058d0 <HAL_DMA_IRQHandler+0x1d0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <HAL_DMA_IRQHandler+0x1d4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a21      	ldr	r2, [pc, #132]	@ (80058d8 <HAL_DMA_IRQHandler+0x1d8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01d      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1f      	ldr	r2, [pc, #124]	@ (80058dc <HAL_DMA_IRQHandler+0x1dc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1e      	ldr	r2, [pc, #120]	@ (80058e0 <HAL_DMA_IRQHandler+0x1e0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1c      	ldr	r2, [pc, #112]	@ (80058e4 <HAL_DMA_IRQHandler+0x1e4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1b      	ldr	r2, [pc, #108]	@ (80058e8 <HAL_DMA_IRQHandler+0x1e8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a19      	ldr	r2, [pc, #100]	@ (80058ec <HAL_DMA_IRQHandler+0x1ec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_DMA_IRQHandler+0x194>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <HAL_DMA_IRQHandler+0x1f0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d12f      	bne.n	80058f4 <HAL_DMA_IRQHandler+0x1f4>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf14      	ite	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	2300      	moveq	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	e02e      	b.n	8005908 <HAL_DMA_IRQHandler+0x208>
 80058aa:	bf00      	nop
 80058ac:	24000000 	.word	0x24000000
 80058b0:	1b4e81b5 	.word	0x1b4e81b5
 80058b4:	40020010 	.word	0x40020010
 80058b8:	40020028 	.word	0x40020028
 80058bc:	40020040 	.word	0x40020040
 80058c0:	40020058 	.word	0x40020058
 80058c4:	40020070 	.word	0x40020070
 80058c8:	40020088 	.word	0x40020088
 80058cc:	400200a0 	.word	0x400200a0
 80058d0:	400200b8 	.word	0x400200b8
 80058d4:	40020410 	.word	0x40020410
 80058d8:	40020428 	.word	0x40020428
 80058dc:	40020440 	.word	0x40020440
 80058e0:	40020458 	.word	0x40020458
 80058e4:	40020470 	.word	0x40020470
 80058e8:	40020488 	.word	0x40020488
 80058ec:	400204a0 	.word	0x400204a0
 80058f0:	400204b8 	.word	0x400204b8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bf14      	ite	ne
 8005902:	2301      	movne	r3, #1
 8005904:	2300      	moveq	r3, #0
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d015      	beq.n	8005938 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2208      	movs	r2, #8
 8005926:	409a      	lsls	r2, r3
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005930:	f043 0201 	orr.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	fa22 f303 	lsr.w	r3, r2, r3
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d06e      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a69      	ldr	r2, [pc, #420]	@ (8005af8 <HAL_DMA_IRQHandler+0x3f8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d04a      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a67      	ldr	r2, [pc, #412]	@ (8005afc <HAL_DMA_IRQHandler+0x3fc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d045      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a66      	ldr	r2, [pc, #408]	@ (8005b00 <HAL_DMA_IRQHandler+0x400>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d040      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a64      	ldr	r2, [pc, #400]	@ (8005b04 <HAL_DMA_IRQHandler+0x404>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d03b      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a63      	ldr	r2, [pc, #396]	@ (8005b08 <HAL_DMA_IRQHandler+0x408>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d036      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a61      	ldr	r2, [pc, #388]	@ (8005b0c <HAL_DMA_IRQHandler+0x40c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d031      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a60      	ldr	r2, [pc, #384]	@ (8005b10 <HAL_DMA_IRQHandler+0x410>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d02c      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5e      	ldr	r2, [pc, #376]	@ (8005b14 <HAL_DMA_IRQHandler+0x414>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d027      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005b18 <HAL_DMA_IRQHandler+0x418>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d022      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5b      	ldr	r2, [pc, #364]	@ (8005b1c <HAL_DMA_IRQHandler+0x41c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01d      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a5a      	ldr	r2, [pc, #360]	@ (8005b20 <HAL_DMA_IRQHandler+0x420>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d018      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a58      	ldr	r2, [pc, #352]	@ (8005b24 <HAL_DMA_IRQHandler+0x424>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a57      	ldr	r2, [pc, #348]	@ (8005b28 <HAL_DMA_IRQHandler+0x428>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a55      	ldr	r2, [pc, #340]	@ (8005b2c <HAL_DMA_IRQHandler+0x42c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a54      	ldr	r2, [pc, #336]	@ (8005b30 <HAL_DMA_IRQHandler+0x430>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2ee>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a52      	ldr	r2, [pc, #328]	@ (8005b34 <HAL_DMA_IRQHandler+0x434>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10a      	bne.n	8005a04 <HAL_DMA_IRQHandler+0x304>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e003      	b.n	8005a0c <HAL_DMA_IRQHandler+0x30c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	2201      	movs	r2, #1
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	f043 0202 	orr.w	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	2204      	movs	r2, #4
 8005a36:	409a      	lsls	r2, r3
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 808f 	beq.w	8005b60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <HAL_DMA_IRQHandler+0x3f8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d04a      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	@ (8005afc <HAL_DMA_IRQHandler+0x3fc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d045      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a29      	ldr	r2, [pc, #164]	@ (8005b00 <HAL_DMA_IRQHandler+0x400>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d040      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a27      	ldr	r2, [pc, #156]	@ (8005b04 <HAL_DMA_IRQHandler+0x404>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d03b      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a26      	ldr	r2, [pc, #152]	@ (8005b08 <HAL_DMA_IRQHandler+0x408>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d036      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a24      	ldr	r2, [pc, #144]	@ (8005b0c <HAL_DMA_IRQHandler+0x40c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d031      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a23      	ldr	r2, [pc, #140]	@ (8005b10 <HAL_DMA_IRQHandler+0x410>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d02c      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a21      	ldr	r2, [pc, #132]	@ (8005b14 <HAL_DMA_IRQHandler+0x414>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d027      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a20      	ldr	r2, [pc, #128]	@ (8005b18 <HAL_DMA_IRQHandler+0x418>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d022      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b1c <HAL_DMA_IRQHandler+0x41c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01d      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8005b20 <HAL_DMA_IRQHandler+0x420>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d018      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <HAL_DMA_IRQHandler+0x424>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1a      	ldr	r2, [pc, #104]	@ (8005b28 <HAL_DMA_IRQHandler+0x428>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	@ (8005b2c <HAL_DMA_IRQHandler+0x42c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	@ (8005b30 <HAL_DMA_IRQHandler+0x430>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x3e2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <HAL_DMA_IRQHandler+0x434>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d12a      	bne.n	8005b38 <HAL_DMA_IRQHandler+0x438>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	e023      	b.n	8005b40 <HAL_DMA_IRQHandler+0x440>
 8005af8:	40020010 	.word	0x40020010
 8005afc:	40020028 	.word	0x40020028
 8005b00:	40020040 	.word	0x40020040
 8005b04:	40020058 	.word	0x40020058
 8005b08:	40020070 	.word	0x40020070
 8005b0c:	40020088 	.word	0x40020088
 8005b10:	400200a0 	.word	0x400200a0
 8005b14:	400200b8 	.word	0x400200b8
 8005b18:	40020410 	.word	0x40020410
 8005b1c:	40020428 	.word	0x40020428
 8005b20:	40020440 	.word	0x40020440
 8005b24:	40020458 	.word	0x40020458
 8005b28:	40020470 	.word	0x40020470
 8005b2c:	40020488 	.word	0x40020488
 8005b30:	400204a0 	.word	0x400204a0
 8005b34:	400204b8 	.word	0x400204b8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00d      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b58:	f043 0204 	orr.w	r2, r3, #4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2210      	movs	r2, #16
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80a6 	beq.w	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a85      	ldr	r2, [pc, #532]	@ (8005d90 <HAL_DMA_IRQHandler+0x690>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d04a      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a83      	ldr	r2, [pc, #524]	@ (8005d94 <HAL_DMA_IRQHandler+0x694>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d045      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a82      	ldr	r2, [pc, #520]	@ (8005d98 <HAL_DMA_IRQHandler+0x698>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d040      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a80      	ldr	r2, [pc, #512]	@ (8005d9c <HAL_DMA_IRQHandler+0x69c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d03b      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a7f      	ldr	r2, [pc, #508]	@ (8005da0 <HAL_DMA_IRQHandler+0x6a0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d036      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a7d      	ldr	r2, [pc, #500]	@ (8005da4 <HAL_DMA_IRQHandler+0x6a4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d031      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8005da8 <HAL_DMA_IRQHandler+0x6a8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d02c      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a7a      	ldr	r2, [pc, #488]	@ (8005dac <HAL_DMA_IRQHandler+0x6ac>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d027      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a79      	ldr	r2, [pc, #484]	@ (8005db0 <HAL_DMA_IRQHandler+0x6b0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d022      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a77      	ldr	r2, [pc, #476]	@ (8005db4 <HAL_DMA_IRQHandler+0x6b4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d01d      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a76      	ldr	r2, [pc, #472]	@ (8005db8 <HAL_DMA_IRQHandler+0x6b8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d018      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a74      	ldr	r2, [pc, #464]	@ (8005dbc <HAL_DMA_IRQHandler+0x6bc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a73      	ldr	r2, [pc, #460]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6c0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a71      	ldr	r2, [pc, #452]	@ (8005dc4 <HAL_DMA_IRQHandler+0x6c4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a70      	ldr	r2, [pc, #448]	@ (8005dc8 <HAL_DMA_IRQHandler+0x6c8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x516>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a6e      	ldr	r2, [pc, #440]	@ (8005dcc <HAL_DMA_IRQHandler+0x6cc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10a      	bne.n	8005c2c <HAL_DMA_IRQHandler+0x52c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e009      	b.n	8005c40 <HAL_DMA_IRQHandler+0x540>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d03e      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d108      	bne.n	8005c82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d024      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
 8005c80:	e01f      	b.n	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01b      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
 8005c92:	e016      	b.n	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0208 	bic.w	r2, r2, #8
 8005cb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2220      	movs	r2, #32
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8110 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <HAL_DMA_IRQHandler+0x690>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d94 <HAL_DMA_IRQHandler+0x694>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a29      	ldr	r2, [pc, #164]	@ (8005d98 <HAL_DMA_IRQHandler+0x698>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a28      	ldr	r2, [pc, #160]	@ (8005d9c <HAL_DMA_IRQHandler+0x69c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a26      	ldr	r2, [pc, #152]	@ (8005da0 <HAL_DMA_IRQHandler+0x6a0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a25      	ldr	r2, [pc, #148]	@ (8005da4 <HAL_DMA_IRQHandler+0x6a4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a23      	ldr	r2, [pc, #140]	@ (8005da8 <HAL_DMA_IRQHandler+0x6a8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a22      	ldr	r2, [pc, #136]	@ (8005dac <HAL_DMA_IRQHandler+0x6ac>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a20      	ldr	r2, [pc, #128]	@ (8005db0 <HAL_DMA_IRQHandler+0x6b0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1f      	ldr	r2, [pc, #124]	@ (8005db4 <HAL_DMA_IRQHandler+0x6b4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	@ (8005db8 <HAL_DMA_IRQHandler+0x6b8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dbc <HAL_DMA_IRQHandler+0x6bc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6c0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a19      	ldr	r2, [pc, #100]	@ (8005dc4 <HAL_DMA_IRQHandler+0x6c4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a17      	ldr	r2, [pc, #92]	@ (8005dc8 <HAL_DMA_IRQHandler+0x6c8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x678>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a16      	ldr	r2, [pc, #88]	@ (8005dcc <HAL_DMA_IRQHandler+0x6cc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d12b      	bne.n	8005dd0 <HAL_DMA_IRQHandler+0x6d0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e02a      	b.n	8005de4 <HAL_DMA_IRQHandler+0x6e4>
 8005d8e:	bf00      	nop
 8005d90:	40020010 	.word	0x40020010
 8005d94:	40020028 	.word	0x40020028
 8005d98:	40020040 	.word	0x40020040
 8005d9c:	40020058 	.word	0x40020058
 8005da0:	40020070 	.word	0x40020070
 8005da4:	40020088 	.word	0x40020088
 8005da8:	400200a0 	.word	0x400200a0
 8005dac:	400200b8 	.word	0x400200b8
 8005db0:	40020410 	.word	0x40020410
 8005db4:	40020428 	.word	0x40020428
 8005db8:	40020440 	.word	0x40020440
 8005dbc:	40020458 	.word	0x40020458
 8005dc0:	40020470 	.word	0x40020470
 8005dc4:	40020488 	.word	0x40020488
 8005dc8:	400204a0 	.word	0x400204a0
 8005dcc:	400204b8 	.word	0x400204b8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf14      	ite	ne
 8005dde:	2301      	movne	r3, #1
 8005de0:	2300      	moveq	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8087 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	2220      	movs	r2, #32
 8005df4:	409a      	lsls	r2, r3
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d139      	bne.n	8005e7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0216 	bic.w	r2, r2, #22
 8005e14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_DMA_IRQHandler+0x736>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0208 	bic.w	r2, r2, #8
 8005e44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	223f      	movs	r2, #63	@ 0x3f
 8005e50:	409a      	lsls	r2, r3
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 834a 	beq.w	8006504 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
          }
          return;
 8005e78:	e344      	b.n	8006504 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02c      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
 8005ea6:	e027      	b.n	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d023      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
 8005eb8:	e01e      	b.n	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10f      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0210 	bic.w	r2, r2, #16
 8005ed6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8306 	beq.w	800650e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8088 	beq.w	8006020 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2204      	movs	r2, #4
 8005f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006108 <HAL_DMA_IRQHandler+0xa08>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d04a      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a79      	ldr	r2, [pc, #484]	@ (800610c <HAL_DMA_IRQHandler+0xa0c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d045      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a77      	ldr	r2, [pc, #476]	@ (8006110 <HAL_DMA_IRQHandler+0xa10>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d040      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a76      	ldr	r2, [pc, #472]	@ (8006114 <HAL_DMA_IRQHandler+0xa14>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d03b      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a74      	ldr	r2, [pc, #464]	@ (8006118 <HAL_DMA_IRQHandler+0xa18>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d036      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a73      	ldr	r2, [pc, #460]	@ (800611c <HAL_DMA_IRQHandler+0xa1c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d031      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a71      	ldr	r2, [pc, #452]	@ (8006120 <HAL_DMA_IRQHandler+0xa20>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d02c      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a70      	ldr	r2, [pc, #448]	@ (8006124 <HAL_DMA_IRQHandler+0xa24>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d027      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006128 <HAL_DMA_IRQHandler+0xa28>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d022      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6d      	ldr	r2, [pc, #436]	@ (800612c <HAL_DMA_IRQHandler+0xa2c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d01d      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6b      	ldr	r2, [pc, #428]	@ (8006130 <HAL_DMA_IRQHandler+0xa30>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6a      	ldr	r2, [pc, #424]	@ (8006134 <HAL_DMA_IRQHandler+0xa34>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d013      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a68      	ldr	r2, [pc, #416]	@ (8006138 <HAL_DMA_IRQHandler+0xa38>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a67      	ldr	r2, [pc, #412]	@ (800613c <HAL_DMA_IRQHandler+0xa3c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a65      	ldr	r2, [pc, #404]	@ (8006140 <HAL_DMA_IRQHandler+0xa40>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0x8b8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a64      	ldr	r2, [pc, #400]	@ (8006144 <HAL_DMA_IRQHandler+0xa44>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d108      	bne.n	8005fca <HAL_DMA_IRQHandler+0x8ca>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	e007      	b.n	8005fda <HAL_DMA_IRQHandler+0x8da>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d307      	bcc.n	8005ff6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f2      	bne.n	8005fda <HAL_DMA_IRQHandler+0x8da>
 8005ff4:	e000      	b.n	8005ff8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ff6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2203      	movs	r2, #3
 800600a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800600e:	e003      	b.n	8006018 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8272 	beq.w	800650e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
 8006032:	e26c      	b.n	800650e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a43      	ldr	r2, [pc, #268]	@ (8006148 <HAL_DMA_IRQHandler+0xa48>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a42      	ldr	r2, [pc, #264]	@ (800614c <HAL_DMA_IRQHandler+0xa4c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d01d      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a40      	ldr	r2, [pc, #256]	@ (8006150 <HAL_DMA_IRQHandler+0xa50>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a3f      	ldr	r2, [pc, #252]	@ (8006154 <HAL_DMA_IRQHandler+0xa54>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a3d      	ldr	r2, [pc, #244]	@ (8006158 <HAL_DMA_IRQHandler+0xa58>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a3c      	ldr	r2, [pc, #240]	@ (800615c <HAL_DMA_IRQHandler+0xa5c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a3a      	ldr	r2, [pc, #232]	@ (8006160 <HAL_DMA_IRQHandler+0xa60>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_DMA_IRQHandler+0x984>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a39      	ldr	r2, [pc, #228]	@ (8006164 <HAL_DMA_IRQHandler+0xa64>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_DMA_IRQHandler+0x988>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_DMA_IRQHandler+0x98a>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 823f 	beq.w	800650e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2204      	movs	r2, #4
 80060a2:	409a      	lsls	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80cd 	beq.w	8006248 <HAL_DMA_IRQHandler+0xb48>
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80c7 	beq.w	8006248 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2204      	movs	r2, #4
 80060c4:	409a      	lsls	r2, r3
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d049      	beq.n	8006168 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8210 	beq.w	8006508 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060f0:	e20a      	b.n	8006508 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8206 	beq.w	8006508 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006104:	e200      	b.n	8006508 <HAL_DMA_IRQHandler+0xe08>
 8006106:	bf00      	nop
 8006108:	40020010 	.word	0x40020010
 800610c:	40020028 	.word	0x40020028
 8006110:	40020040 	.word	0x40020040
 8006114:	40020058 	.word	0x40020058
 8006118:	40020070 	.word	0x40020070
 800611c:	40020088 	.word	0x40020088
 8006120:	400200a0 	.word	0x400200a0
 8006124:	400200b8 	.word	0x400200b8
 8006128:	40020410 	.word	0x40020410
 800612c:	40020428 	.word	0x40020428
 8006130:	40020440 	.word	0x40020440
 8006134:	40020458 	.word	0x40020458
 8006138:	40020470 	.word	0x40020470
 800613c:	40020488 	.word	0x40020488
 8006140:	400204a0 	.word	0x400204a0
 8006144:	400204b8 	.word	0x400204b8
 8006148:	58025408 	.word	0x58025408
 800614c:	5802541c 	.word	0x5802541c
 8006150:	58025430 	.word	0x58025430
 8006154:	58025444 	.word	0x58025444
 8006158:	58025458 	.word	0x58025458
 800615c:	5802546c 	.word	0x5802546c
 8006160:	58025480 	.word	0x58025480
 8006164:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d160      	bne.n	8006234 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7f      	ldr	r2, [pc, #508]	@ (8006374 <HAL_DMA_IRQHandler+0xc74>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d04a      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7d      	ldr	r2, [pc, #500]	@ (8006378 <HAL_DMA_IRQHandler+0xc78>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d045      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a7c      	ldr	r2, [pc, #496]	@ (800637c <HAL_DMA_IRQHandler+0xc7c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d040      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a7a      	ldr	r2, [pc, #488]	@ (8006380 <HAL_DMA_IRQHandler+0xc80>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d03b      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a79      	ldr	r2, [pc, #484]	@ (8006384 <HAL_DMA_IRQHandler+0xc84>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d036      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a77      	ldr	r2, [pc, #476]	@ (8006388 <HAL_DMA_IRQHandler+0xc88>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d031      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a76      	ldr	r2, [pc, #472]	@ (800638c <HAL_DMA_IRQHandler+0xc8c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d02c      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a74      	ldr	r2, [pc, #464]	@ (8006390 <HAL_DMA_IRQHandler+0xc90>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d027      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a73      	ldr	r2, [pc, #460]	@ (8006394 <HAL_DMA_IRQHandler+0xc94>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d022      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a71      	ldr	r2, [pc, #452]	@ (8006398 <HAL_DMA_IRQHandler+0xc98>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01d      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a70      	ldr	r2, [pc, #448]	@ (800639c <HAL_DMA_IRQHandler+0xc9c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6e      	ldr	r2, [pc, #440]	@ (80063a0 <HAL_DMA_IRQHandler+0xca0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a6d      	ldr	r2, [pc, #436]	@ (80063a4 <HAL_DMA_IRQHandler+0xca4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a6b      	ldr	r2, [pc, #428]	@ (80063a8 <HAL_DMA_IRQHandler+0xca8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6a      	ldr	r2, [pc, #424]	@ (80063ac <HAL_DMA_IRQHandler+0xcac>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_DMA_IRQHandler+0xb12>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a68      	ldr	r2, [pc, #416]	@ (80063b0 <HAL_DMA_IRQHandler+0xcb0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d108      	bne.n	8006224 <HAL_DMA_IRQHandler+0xb24>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0208 	bic.w	r2, r2, #8
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e007      	b.n	8006234 <HAL_DMA_IRQHandler+0xb34>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8165 	beq.w	8006508 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006246:	e15f      	b.n	8006508 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2202      	movs	r2, #2
 8006252:	409a      	lsls	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80c5 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xce8>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80bf 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2202      	movs	r2, #2
 8006274:	409a      	lsls	r2, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d018      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 813a 	beq.w	800650c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062a0:	e134      	b.n	800650c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8130 	beq.w	800650c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b4:	e12a      	b.n	800650c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 8089 	bne.w	80063d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006374 <HAL_DMA_IRQHandler+0xc74>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <HAL_DMA_IRQHandler+0xc78>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a28      	ldr	r2, [pc, #160]	@ (800637c <HAL_DMA_IRQHandler+0xc7c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a26      	ldr	r2, [pc, #152]	@ (8006380 <HAL_DMA_IRQHandler+0xc80>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a25      	ldr	r2, [pc, #148]	@ (8006384 <HAL_DMA_IRQHandler+0xc84>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a23      	ldr	r2, [pc, #140]	@ (8006388 <HAL_DMA_IRQHandler+0xc88>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a22      	ldr	r2, [pc, #136]	@ (800638c <HAL_DMA_IRQHandler+0xc8c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <HAL_DMA_IRQHandler+0xc90>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1f      	ldr	r2, [pc, #124]	@ (8006394 <HAL_DMA_IRQHandler+0xc94>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1d      	ldr	r2, [pc, #116]	@ (8006398 <HAL_DMA_IRQHandler+0xc98>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1c      	ldr	r2, [pc, #112]	@ (800639c <HAL_DMA_IRQHandler+0xc9c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1a      	ldr	r2, [pc, #104]	@ (80063a0 <HAL_DMA_IRQHandler+0xca0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a19      	ldr	r2, [pc, #100]	@ (80063a4 <HAL_DMA_IRQHandler+0xca4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a17      	ldr	r2, [pc, #92]	@ (80063a8 <HAL_DMA_IRQHandler+0xca8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a16      	ldr	r2, [pc, #88]	@ (80063ac <HAL_DMA_IRQHandler+0xcac>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_DMA_IRQHandler+0xc62>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a14      	ldr	r2, [pc, #80]	@ (80063b0 <HAL_DMA_IRQHandler+0xcb0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d128      	bne.n	80063b4 <HAL_DMA_IRQHandler+0xcb4>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0214 	bic.w	r2, r2, #20
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e027      	b.n	80063c4 <HAL_DMA_IRQHandler+0xcc4>
 8006374:	40020010 	.word	0x40020010
 8006378:	40020028 	.word	0x40020028
 800637c:	40020040 	.word	0x40020040
 8006380:	40020058 	.word	0x40020058
 8006384:	40020070 	.word	0x40020070
 8006388:	40020088 	.word	0x40020088
 800638c:	400200a0 	.word	0x400200a0
 8006390:	400200b8 	.word	0x400200b8
 8006394:	40020410 	.word	0x40020410
 8006398:	40020428 	.word	0x40020428
 800639c:	40020440 	.word	0x40020440
 80063a0:	40020458 	.word	0x40020458
 80063a4:	40020470 	.word	0x40020470
 80063a8:	40020488 	.word	0x40020488
 80063ac:	400204a0 	.word	0x400204a0
 80063b0:	400204b8 	.word	0x400204b8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 020a 	bic.w	r2, r2, #10
 80063c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8097 	beq.w	800650c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e6:	e091      	b.n	800650c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2208      	movs	r2, #8
 80063f2:	409a      	lsls	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8088 	beq.w	800650e <HAL_DMA_IRQHandler+0xe0e>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8082 	beq.w	800650e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a41      	ldr	r2, [pc, #260]	@ (8006514 <HAL_DMA_IRQHandler+0xe14>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3f      	ldr	r2, [pc, #252]	@ (8006518 <HAL_DMA_IRQHandler+0xe18>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3e      	ldr	r2, [pc, #248]	@ (800651c <HAL_DMA_IRQHandler+0xe1c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3c      	ldr	r2, [pc, #240]	@ (8006520 <HAL_DMA_IRQHandler+0xe20>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a3b      	ldr	r2, [pc, #236]	@ (8006524 <HAL_DMA_IRQHandler+0xe24>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a39      	ldr	r2, [pc, #228]	@ (8006528 <HAL_DMA_IRQHandler+0xe28>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a38      	ldr	r2, [pc, #224]	@ (800652c <HAL_DMA_IRQHandler+0xe2c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a36      	ldr	r2, [pc, #216]	@ (8006530 <HAL_DMA_IRQHandler+0xe30>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a35      	ldr	r2, [pc, #212]	@ (8006534 <HAL_DMA_IRQHandler+0xe34>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a33      	ldr	r2, [pc, #204]	@ (8006538 <HAL_DMA_IRQHandler+0xe38>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a32      	ldr	r2, [pc, #200]	@ (800653c <HAL_DMA_IRQHandler+0xe3c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a30      	ldr	r2, [pc, #192]	@ (8006540 <HAL_DMA_IRQHandler+0xe40>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2f      	ldr	r2, [pc, #188]	@ (8006544 <HAL_DMA_IRQHandler+0xe44>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <HAL_DMA_IRQHandler+0xe48>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2c      	ldr	r2, [pc, #176]	@ (800654c <HAL_DMA_IRQHandler+0xe4c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_IRQHandler+0xdaa>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006550 <HAL_DMA_IRQHandler+0xe50>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <HAL_DMA_IRQHandler+0xdbc>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 021c 	bic.w	r2, r2, #28
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <HAL_DMA_IRQHandler+0xdcc>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 020e 	bic.w	r2, r2, #14
 80064ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2201      	movs	r2, #1
 80064d6:	409a      	lsls	r2, r3
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	e004      	b.n	800650e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800650c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800650e:	3728      	adds	r7, #40	@ 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40020010 	.word	0x40020010
 8006518:	40020028 	.word	0x40020028
 800651c:	40020040 	.word	0x40020040
 8006520:	40020058 	.word	0x40020058
 8006524:	40020070 	.word	0x40020070
 8006528:	40020088 	.word	0x40020088
 800652c:	400200a0 	.word	0x400200a0
 8006530:	400200b8 	.word	0x400200b8
 8006534:	40020410 	.word	0x40020410
 8006538:	40020428 	.word	0x40020428
 800653c:	40020440 	.word	0x40020440
 8006540:	40020458 	.word	0x40020458
 8006544:	40020470 	.word	0x40020470
 8006548:	40020488 	.word	0x40020488
 800654c:	400204a0 	.word	0x400204a0
 8006550:	400204b8 	.word	0x400204b8

08006554 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006566:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a7f      	ldr	r2, [pc, #508]	@ (8006770 <DMA_SetConfig+0x21c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d072      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a7d      	ldr	r2, [pc, #500]	@ (8006774 <DMA_SetConfig+0x220>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d06d      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a7c      	ldr	r2, [pc, #496]	@ (8006778 <DMA_SetConfig+0x224>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d068      	beq.n	800665e <DMA_SetConfig+0x10a>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a7a      	ldr	r2, [pc, #488]	@ (800677c <DMA_SetConfig+0x228>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d063      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a79      	ldr	r2, [pc, #484]	@ (8006780 <DMA_SetConfig+0x22c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d05e      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a77      	ldr	r2, [pc, #476]	@ (8006784 <DMA_SetConfig+0x230>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d059      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a76      	ldr	r2, [pc, #472]	@ (8006788 <DMA_SetConfig+0x234>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d054      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a74      	ldr	r2, [pc, #464]	@ (800678c <DMA_SetConfig+0x238>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d04f      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a73      	ldr	r2, [pc, #460]	@ (8006790 <DMA_SetConfig+0x23c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d04a      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a71      	ldr	r2, [pc, #452]	@ (8006794 <DMA_SetConfig+0x240>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d045      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a70      	ldr	r2, [pc, #448]	@ (8006798 <DMA_SetConfig+0x244>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d040      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a6e      	ldr	r2, [pc, #440]	@ (800679c <DMA_SetConfig+0x248>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d03b      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6d      	ldr	r2, [pc, #436]	@ (80067a0 <DMA_SetConfig+0x24c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d036      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a6b      	ldr	r2, [pc, #428]	@ (80067a4 <DMA_SetConfig+0x250>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d031      	beq.n	800665e <DMA_SetConfig+0x10a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6a      	ldr	r2, [pc, #424]	@ (80067a8 <DMA_SetConfig+0x254>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d02c      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a68      	ldr	r2, [pc, #416]	@ (80067ac <DMA_SetConfig+0x258>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d027      	beq.n	800665e <DMA_SetConfig+0x10a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a67      	ldr	r2, [pc, #412]	@ (80067b0 <DMA_SetConfig+0x25c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d022      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a65      	ldr	r2, [pc, #404]	@ (80067b4 <DMA_SetConfig+0x260>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d01d      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a64      	ldr	r2, [pc, #400]	@ (80067b8 <DMA_SetConfig+0x264>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d018      	beq.n	800665e <DMA_SetConfig+0x10a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a62      	ldr	r2, [pc, #392]	@ (80067bc <DMA_SetConfig+0x268>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a61      	ldr	r2, [pc, #388]	@ (80067c0 <DMA_SetConfig+0x26c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00e      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a5f      	ldr	r2, [pc, #380]	@ (80067c4 <DMA_SetConfig+0x270>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <DMA_SetConfig+0x10a>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a5e      	ldr	r2, [pc, #376]	@ (80067c8 <DMA_SetConfig+0x274>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <DMA_SetConfig+0x10a>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a5c      	ldr	r2, [pc, #368]	@ (80067cc <DMA_SetConfig+0x278>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d101      	bne.n	8006662 <DMA_SetConfig+0x10e>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <DMA_SetConfig+0x110>
 8006662:	2300      	movs	r3, #0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006670:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006682:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a39      	ldr	r2, [pc, #228]	@ (8006770 <DMA_SetConfig+0x21c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d04a      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a38      	ldr	r2, [pc, #224]	@ (8006774 <DMA_SetConfig+0x220>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d045      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a36      	ldr	r2, [pc, #216]	@ (8006778 <DMA_SetConfig+0x224>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d040      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a35      	ldr	r2, [pc, #212]	@ (800677c <DMA_SetConfig+0x228>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d03b      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <DMA_SetConfig+0x22c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d036      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a32      	ldr	r2, [pc, #200]	@ (8006784 <DMA_SetConfig+0x230>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d031      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a30      	ldr	r2, [pc, #192]	@ (8006788 <DMA_SetConfig+0x234>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d02c      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2f      	ldr	r2, [pc, #188]	@ (800678c <DMA_SetConfig+0x238>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d027      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <DMA_SetConfig+0x23c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d022      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <DMA_SetConfig+0x240>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01d      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006798 <DMA_SetConfig+0x244>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d018      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a29      	ldr	r2, [pc, #164]	@ (800679c <DMA_SetConfig+0x248>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <DMA_SetConfig+0x24c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a26      	ldr	r2, [pc, #152]	@ (80067a4 <DMA_SetConfig+0x250>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a24      	ldr	r2, [pc, #144]	@ (80067a8 <DMA_SetConfig+0x254>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <DMA_SetConfig+0x1d0>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a23      	ldr	r2, [pc, #140]	@ (80067ac <DMA_SetConfig+0x258>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <DMA_SetConfig+0x1d4>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <DMA_SetConfig+0x1d6>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d059      	beq.n	80067e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	223f      	movs	r2, #63	@ 0x3f
 8006738:	409a      	lsls	r2, r3
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800674c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	d138      	bne.n	80067d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800676e:	e086      	b.n	800687e <DMA_SetConfig+0x32a>
 8006770:	40020010 	.word	0x40020010
 8006774:	40020028 	.word	0x40020028
 8006778:	40020040 	.word	0x40020040
 800677c:	40020058 	.word	0x40020058
 8006780:	40020070 	.word	0x40020070
 8006784:	40020088 	.word	0x40020088
 8006788:	400200a0 	.word	0x400200a0
 800678c:	400200b8 	.word	0x400200b8
 8006790:	40020410 	.word	0x40020410
 8006794:	40020428 	.word	0x40020428
 8006798:	40020440 	.word	0x40020440
 800679c:	40020458 	.word	0x40020458
 80067a0:	40020470 	.word	0x40020470
 80067a4:	40020488 	.word	0x40020488
 80067a8:	400204a0 	.word	0x400204a0
 80067ac:	400204b8 	.word	0x400204b8
 80067b0:	58025408 	.word	0x58025408
 80067b4:	5802541c 	.word	0x5802541c
 80067b8:	58025430 	.word	0x58025430
 80067bc:	58025444 	.word	0x58025444
 80067c0:	58025458 	.word	0x58025458
 80067c4:	5802546c 	.word	0x5802546c
 80067c8:	58025480 	.word	0x58025480
 80067cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
}
 80067e0:	e04d      	b.n	800687e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a29      	ldr	r2, [pc, #164]	@ (800688c <DMA_SetConfig+0x338>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d022      	beq.n	8006832 <DMA_SetConfig+0x2de>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a27      	ldr	r2, [pc, #156]	@ (8006890 <DMA_SetConfig+0x33c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01d      	beq.n	8006832 <DMA_SetConfig+0x2de>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a26      	ldr	r2, [pc, #152]	@ (8006894 <DMA_SetConfig+0x340>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d018      	beq.n	8006832 <DMA_SetConfig+0x2de>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a24      	ldr	r2, [pc, #144]	@ (8006898 <DMA_SetConfig+0x344>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <DMA_SetConfig+0x2de>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a23      	ldr	r2, [pc, #140]	@ (800689c <DMA_SetConfig+0x348>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <DMA_SetConfig+0x2de>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <DMA_SetConfig+0x34c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <DMA_SetConfig+0x2de>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a20      	ldr	r2, [pc, #128]	@ (80068a4 <DMA_SetConfig+0x350>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <DMA_SetConfig+0x2de>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1e      	ldr	r2, [pc, #120]	@ (80068a8 <DMA_SetConfig+0x354>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <DMA_SetConfig+0x2e2>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <DMA_SetConfig+0x2e4>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d020      	beq.n	800687e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2201      	movs	r2, #1
 8006846:	409a      	lsls	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	d108      	bne.n	800686e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	60da      	str	r2, [r3, #12]
}
 800686c:	e007      	b.n	800687e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	60da      	str	r2, [r3, #12]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	58025408 	.word	0x58025408
 8006890:	5802541c 	.word	0x5802541c
 8006894:	58025430 	.word	0x58025430
 8006898:	58025444 	.word	0x58025444
 800689c:	58025458 	.word	0x58025458
 80068a0:	5802546c 	.word	0x5802546c
 80068a4:	58025480 	.word	0x58025480
 80068a8:	58025494 	.word	0x58025494

080068ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a42      	ldr	r2, [pc, #264]	@ (80069c4 <DMA_CalcBaseAndBitshift+0x118>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d04a      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a41      	ldr	r2, [pc, #260]	@ (80069c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d045      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a3f      	ldr	r2, [pc, #252]	@ (80069cc <DMA_CalcBaseAndBitshift+0x120>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d040      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3e      	ldr	r2, [pc, #248]	@ (80069d0 <DMA_CalcBaseAndBitshift+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d03b      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3c      	ldr	r2, [pc, #240]	@ (80069d4 <DMA_CalcBaseAndBitshift+0x128>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d036      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3b      	ldr	r2, [pc, #236]	@ (80069d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d031      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a39      	ldr	r2, [pc, #228]	@ (80069dc <DMA_CalcBaseAndBitshift+0x130>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d02c      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a38      	ldr	r2, [pc, #224]	@ (80069e0 <DMA_CalcBaseAndBitshift+0x134>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d027      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a36      	ldr	r2, [pc, #216]	@ (80069e4 <DMA_CalcBaseAndBitshift+0x138>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d022      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a35      	ldr	r2, [pc, #212]	@ (80069e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d01d      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a33      	ldr	r2, [pc, #204]	@ (80069ec <DMA_CalcBaseAndBitshift+0x140>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d018      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a32      	ldr	r2, [pc, #200]	@ (80069f0 <DMA_CalcBaseAndBitshift+0x144>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d013      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a30      	ldr	r2, [pc, #192]	@ (80069f4 <DMA_CalcBaseAndBitshift+0x148>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00e      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2f      	ldr	r2, [pc, #188]	@ (80069f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2d      	ldr	r2, [pc, #180]	@ (80069fc <DMA_CalcBaseAndBitshift+0x150>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <DMA_CalcBaseAndBitshift+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a00 <DMA_CalcBaseAndBitshift+0x154>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d101      	bne.n	8006958 <DMA_CalcBaseAndBitshift+0xac>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <DMA_CalcBaseAndBitshift+0xae>
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d024      	beq.n	80069a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	3b10      	subs	r3, #16
 8006966:	4a27      	ldr	r2, [pc, #156]	@ (8006a04 <DMA_CalcBaseAndBitshift+0x158>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	4a24      	ldr	r2, [pc, #144]	@ (8006a08 <DMA_CalcBaseAndBitshift+0x15c>)
 8006978:	5cd3      	ldrb	r3, [r2, r3]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d908      	bls.n	8006998 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a0c <DMA_CalcBaseAndBitshift+0x160>)
 800698e:	4013      	ands	r3, r2
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	659a      	str	r2, [r3, #88]	@ 0x58
 8006996:	e00d      	b.n	80069b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	4b1b      	ldr	r3, [pc, #108]	@ (8006a0c <DMA_CalcBaseAndBitshift+0x160>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069a6:	e005      	b.n	80069b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40020010 	.word	0x40020010
 80069c8:	40020028 	.word	0x40020028
 80069cc:	40020040 	.word	0x40020040
 80069d0:	40020058 	.word	0x40020058
 80069d4:	40020070 	.word	0x40020070
 80069d8:	40020088 	.word	0x40020088
 80069dc:	400200a0 	.word	0x400200a0
 80069e0:	400200b8 	.word	0x400200b8
 80069e4:	40020410 	.word	0x40020410
 80069e8:	40020428 	.word	0x40020428
 80069ec:	40020440 	.word	0x40020440
 80069f0:	40020458 	.word	0x40020458
 80069f4:	40020470 	.word	0x40020470
 80069f8:	40020488 	.word	0x40020488
 80069fc:	400204a0 	.word	0x400204a0
 8006a00:	400204b8 	.word	0x400204b8
 8006a04:	aaaaaaab 	.word	0xaaaaaaab
 8006a08:	08028a00 	.word	0x08028a00
 8006a0c:	fffffc00 	.word	0xfffffc00

08006a10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d120      	bne.n	8006a66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d858      	bhi.n	8006ade <DMA_CheckFifoParam+0xce>
 8006a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <DMA_CheckFifoParam+0x24>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a57 	.word	0x08006a57
 8006a3c:	08006a45 	.word	0x08006a45
 8006a40:	08006adf 	.word	0x08006adf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d048      	beq.n	8006ae2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a54:	e045      	b.n	8006ae2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a5e:	d142      	bne.n	8006ae6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a64:	e03f      	b.n	8006ae6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a6e:	d123      	bne.n	8006ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d838      	bhi.n	8006aea <DMA_CheckFifoParam+0xda>
 8006a78:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <DMA_CheckFifoParam+0x70>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006a97 	.word	0x08006a97
 8006a88:	08006a91 	.word	0x08006a91
 8006a8c:	08006aa9 	.word	0x08006aa9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
        break;
 8006a94:	e030      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d025      	beq.n	8006aee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006aa6:	e022      	b.n	8006aee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ab0:	d11f      	bne.n	8006af2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ab6:	e01c      	b.n	8006af2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d902      	bls.n	8006ac6 <DMA_CheckFifoParam+0xb6>
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d003      	beq.n	8006acc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ac4:	e018      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8006aca:	e015      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
    break;
 8006adc:	e00b      	b.n	8006af6 <DMA_CheckFifoParam+0xe6>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e00a      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e008      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e006      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        break;
 8006aea:	bf00      	nop
 8006aec:	e004      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        break;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
        break;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <DMA_CheckFifoParam+0xe8>
    break;
 8006af6:	bf00      	nop
    }
  }

  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop

08006b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a38      	ldr	r2, [pc, #224]	@ (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d022      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a36      	ldr	r2, [pc, #216]	@ (8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01d      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a35      	ldr	r2, [pc, #212]	@ (8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d018      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a33      	ldr	r2, [pc, #204]	@ (8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a32      	ldr	r2, [pc, #200]	@ (8006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00e      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a30      	ldr	r2, [pc, #192]	@ (8006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d009      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2f      	ldr	r2, [pc, #188]	@ (8006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d004      	beq.n	8006b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2d      	ldr	r2, [pc, #180]	@ (8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d101      	bne.n	8006b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	3b08      	subs	r3, #8
 8006b78:	4a28      	ldr	r2, [pc, #160]	@ (8006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	091b      	lsrs	r3, r3, #4
 8006b80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4b26      	ldr	r3, [pc, #152]	@ (8006c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006b94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006ba4:	e024      	b.n	8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	3b10      	subs	r3, #16
 8006bae:	4a1e      	ldr	r2, [pc, #120]	@ (8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a1c      	ldr	r2, [pc, #112]	@ (8006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d806      	bhi.n	8006bce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d902      	bls.n	8006bce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a16      	ldr	r2, [pc, #88]	@ (8006c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006be0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	2201      	movs	r2, #1
 8006bea:	409a      	lsls	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	58025408 	.word	0x58025408
 8006c00:	5802541c 	.word	0x5802541c
 8006c04:	58025430 	.word	0x58025430
 8006c08:	58025444 	.word	0x58025444
 8006c0c:	58025458 	.word	0x58025458
 8006c10:	5802546c 	.word	0x5802546c
 8006c14:	58025480 	.word	0x58025480
 8006c18:	58025494 	.word	0x58025494
 8006c1c:	cccccccd 	.word	0xcccccccd
 8006c20:	16009600 	.word	0x16009600
 8006c24:	58025880 	.word	0x58025880
 8006c28:	aaaaaaab 	.word	0xaaaaaaab
 8006c2c:	400204b8 	.word	0x400204b8
 8006c30:	4002040f 	.word	0x4002040f
 8006c34:	10008200 	.word	0x10008200
 8006c38:	40020880 	.word	0x40020880

08006c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04a      	beq.n	8006ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d847      	bhi.n	8006ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a25      	ldr	r2, [pc, #148]	@ (8006cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d022      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a24      	ldr	r2, [pc, #144]	@ (8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d01d      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a22      	ldr	r2, [pc, #136]	@ (8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d018      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a21      	ldr	r2, [pc, #132]	@ (8006d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d013      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1f      	ldr	r2, [pc, #124]	@ (8006d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00e      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d009      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d101      	bne.n	8006cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4b17      	ldr	r3, [pc, #92]	@ (8006d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a15      	ldr	r2, [pc, #84]	@ (8006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006cc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8006cc6:	e009      	b.n	8006cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4b14      	ldr	r3, [pc, #80]	@ (8006d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006cda:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	58025408 	.word	0x58025408
 8006cf8:	5802541c 	.word	0x5802541c
 8006cfc:	58025430 	.word	0x58025430
 8006d00:	58025444 	.word	0x58025444
 8006d04:	58025458 	.word	0x58025458
 8006d08:	5802546c 	.word	0x5802546c
 8006d0c:	58025480 	.word	0x58025480
 8006d10:	58025494 	.word	0x58025494
 8006d14:	1600963f 	.word	0x1600963f
 8006d18:	58025940 	.word	0x58025940
 8006d1c:	1000823f 	.word	0x1000823f
 8006d20:	40020940 	.word	0x40020940

08006d24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e0e3      	b.n	8006efe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2223      	movs	r2, #35	@ 0x23
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f008 fe51 	bl	800f9f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006f08 <HAL_ETH_Init+0x1e4>)
 8006d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d54:	4a6c      	ldr	r2, [pc, #432]	@ (8006f08 <HAL_ETH_Init+0x1e4>)
 8006d56:	f043 0302 	orr.w	r3, r3, #2
 8006d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f08 <HAL_ETH_Init+0x1e4>)
 8006d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	60bb      	str	r3, [r7, #8]
 8006d6a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7a1b      	ldrb	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006d74:	2000      	movs	r0, #0
 8006d76:	f7fb fdbb 	bl	80028f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8006d7a:	e003      	b.n	8006d84 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006d7c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006d80:	f7fb fdb6 	bl	80028f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006d84:	4b61      	ldr	r3, [pc, #388]	@ (8006f0c <HAL_ETH_Init+0x1e8>)
 8006d86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006da0:	f7fb fd6a 	bl	8002878 <HAL_GetTick>
 8006da4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006da6:	e011      	b.n	8006dcc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006da8:	f7fb fd66 	bl	8002878 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006db6:	d909      	bls.n	8006dcc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	22e0      	movs	r2, #224	@ 0xe0
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e098      	b.n	8006efe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e4      	bne.n	8006da8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff32 	bl	8007c48 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006de4:	f002 fefc 	bl	8009be0 <HAL_RCC_GetHCLKFreq>
 8006de8:	4603      	mov	r3, r0
 8006dea:	4a49      	ldr	r2, [pc, #292]	@ (8006f10 <HAL_ETH_Init+0x1ec>)
 8006dec:	fba2 2303 	umull	r2, r3, r2, r3
 8006df0:	0c9a      	lsrs	r2, r3, #18
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3a01      	subs	r2, #1
 8006df8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f92f 	bl	8008060 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006e0e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e1e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	22e0      	movs	r2, #224	@ 0xe0
 8006e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e05d      	b.n	8006efe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006e4e:	4b31      	ldr	r3, [pc, #196]	@ (8006f14 <HAL_ETH_Init+0x1f0>)
 8006e50:	4013      	ands	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6952      	ldr	r2, [r2, #20]
 8006e56:	0051      	lsls	r1, r2, #1
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e62:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f997 	bl	800819a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f9dd 	bl	800822c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	3305      	adds	r3, #5
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	021a      	lsls	r2, r3, #8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	3304      	adds	r3, #4
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	3303      	adds	r3, #3
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	061a      	lsls	r2, r3, #24
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	041b      	lsls	r3, r3, #16
 8006ea4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006eb0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006ebe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006ec0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <HAL_ETH_Init+0x1f4>)
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8006f1c <HAL_ETH_Init+0x1f8>)
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2210      	movs	r2, #16
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	58000400 	.word	0x58000400
 8006f10:	431bde83 	.word	0x431bde83
 8006f14:	ffff8001 	.word	0xffff8001
 8006f18:	0c020060 	.word	0x0c020060
 8006f1c:	0c20c000 	.word	0x0c20c000

08006f20 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d165      	bne.n	8006ffe <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2223      	movs	r2, #35	@ 0x23
 8006f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2204      	movs	r2, #4
 8006f44:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9e4 	bl	8007314 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f54:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f64:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f70:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	f043 0301 	orr.w	r3, r3, #1
 8006f7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f80:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8006f98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f9c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0202 	orr.w	r2, r2, #2
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fdc:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fee:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2223      	movs	r2, #35	@ 0x23
 8006ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e000      	b.n	8007000 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
  }
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007016:	2b23      	cmp	r3, #35	@ 0x23
 8007018:	d165      	bne.n	80070e6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2223      	movs	r2, #35	@ 0x23
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800702a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b30      	ldr	r3, [pc, #192]	@ (80070f4 <HAL_ETH_Stop_IT+0xec>)
 8007034:	400b      	ands	r3, r1
 8007036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800703a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007046:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007056:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007062:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007072:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0201 	orr.w	r2, r2, #1
 8007096:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0202 	bic.w	r2, r2, #2
 80070a8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e00e      	b.n	80070ce <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	3212      	adds	r2, #18
 80070b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ba:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d9ed      	bls.n	80070b0 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2210      	movs	r2, #16
 80070de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e000      	b.n	80070e8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	ffff2f3e 	.word	0xffff2f3e

080070f8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710e:	f043 0201 	orr.w	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e03a      	b.n	8007192 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007122:	2b23      	cmp	r3, #35	@ 0x23
 8007124:	d134      	bne.n	8007190 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800712e:	2201      	movs	r2, #1
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 f8d8 	bl	80082e8 <ETH_Prepare_Tx_Descriptors>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007144:	f043 0202 	orr.w	r2, r3, #2
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e01f      	b.n	8007192 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8007152:	f3bf 8f4f 	dsb	sy
}
 8007156:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	629a      	str	r2, [r3, #40]	@ 0x28
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007166:	2b03      	cmp	r3, #3
 8007168:	d904      	bls.n	8007174 <HAL_ETH_Transmit_IT+0x7c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	1f1a      	subs	r2, r3, #4
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3106      	adds	r1, #6
 8007180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007184:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007188:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e000      	b.n	8007192 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b088      	sub	sp, #32
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b8:	f043 0201 	orr.w	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e0a2      	b.n	800730c <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071cc:	2b23      	cmp	r3, #35	@ 0x23
 80071ce:	d001      	beq.n	80071d4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e09b      	b.n	800730c <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	3212      	adds	r2, #18
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ea:	f1c3 0304 	rsb	r3, r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80071f0:	e064      	b.n	80072bc <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_ETH_ReadData+0x88>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d03a      	beq.n	8007298 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8007272:	461a      	mov	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f008 fd80 	bl	800fd7c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2200      	movs	r2, #0
 8007296:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3301      	adds	r3, #1
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d902      	bls.n	80072aa <HAL_ETH_ReadData+0x110>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3b04      	subs	r3, #4
 80072a8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	3212      	adds	r2, #18
 80072b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	3301      	adds	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db06      	blt.n	80072d2 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d202      	bcs.n	80072d2 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d08f      	beq.n	80071f2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f814 	bl	8007314 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d108      	bne.n	800730a <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e000      	b.n	800730c <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800731c:	2300      	movs	r3, #0
 800731e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8007320:	2301      	movs	r3, #1
 8007322:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007328:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69fa      	ldr	r2, [r7, #28]
 800732e:	3212      	adds	r2, #18
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800733a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800733c:	e038      	b.n	80073b0 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d112      	bne.n	800736c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8007346:	f107 0308 	add.w	r3, r7, #8
 800734a:	4618      	mov	r0, r3
 800734c:	f008 fce6 	bl	800fd1c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	74fb      	strb	r3, [r7, #19]
 800735a:	e007      	b.n	800736c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	461a      	mov	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	461a      	mov	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800736c:	7cfb      	ldrb	r3, [r7, #19]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01e      	beq.n	80073b0 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	e003      	b.n	800738c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800738a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	2b03      	cmp	r3, #3
 8007396:	d902      	bls.n	800739e <ETH_UpdateDescriptor+0x8a>
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	3b04      	subs	r3, #4
 800739c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	3212      	adds	r2, #18
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	617b      	str	r3, [r7, #20]
      desccount--;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <ETH_UpdateDescriptor+0xa8>
 80073b6:	7cfb      	ldrb	r3, [r7, #19]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1c0      	bne.n	800733e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d01b      	beq.n	80073fe <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	3301      	adds	r3, #1
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80073d0:	f3bf 8f5f 	dmb	sy
}
 80073d4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6919      	ldr	r1, [r3, #16]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	18ca      	adds	r2, r1, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ee:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80073fe:	bf00      	nop
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3318      	adds	r3, #24
 8007412:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007418:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8007424:	e047      	b.n	80074b6 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8007426:	2301      	movs	r3, #1
 8007428:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	3b01      	subs	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3304      	adds	r3, #4
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	3301      	adds	r3, #1
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d902      	bls.n	8007452 <HAL_ETH_ReleaseTxPacket+0x4c>
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3b04      	subs	r3, #4
 8007450:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02c      	beq.n	80074b6 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68d9      	ldr	r1, [r3, #12]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4613      	mov	r3, r2
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	4413      	add	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	440b      	add	r3, r1
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	db1f      	blt.n	80074b2 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3304      	adds	r3, #4
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4618      	mov	r0, r3
 8007480:	f008 fce4 	bl	800fe4c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3304      	adds	r3, #4
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	2200      	movs	r2, #0
 8007490:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3301      	adds	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d902      	bls.n	80074a4 <HAL_ETH_ReleaseTxPacket+0x9e>
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074b0:	e001      	b.n	80074b6 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <HAL_ETH_ReleaseTxPacket+0xbc>
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1b1      	bne.n	8007426 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074dc:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074e6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80074ea:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80074f8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80074fa:	4b77      	ldr	r3, [pc, #476]	@ (80076d8 <HAL_ETH_IRQHandler+0x20c>)
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8007500:	4b76      	ldr	r3, [pc, #472]	@ (80076dc <HAL_ETH_IRQHandler+0x210>)
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_ETH_IRQHandler+0x66>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007522:	461a      	mov	r2, r3
 8007524:	f248 0340 	movw	r3, #32832	@ 0x8040
 8007528:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f007 ff77 	bl	800f420 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d010      	beq.n	800755e <HAL_ETH_IRQHandler+0x92>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800754e:	461a      	mov	r2, r3
 8007550:	f248 0301 	movw	r3, #32769	@ 0x8001
 8007554:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f007 ff71 	bl	800f440 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d047      	beq.n	80075f8 <HAL_ETH_IRQHandler+0x12c>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d042      	beq.n	80075f8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007578:	f043 0208 	orr.w	r2, r3, #8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01e      	beq.n	80075ca <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007594:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8007598:	f241 1302 	movw	r3, #4354	@ 0x1102
 800759c:	4013      	ands	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80075b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075bc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	22e0      	movs	r2, #224	@ 0xe0
 80075c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80075c8:	e013      	b.n	80075f2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80075d6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075e8:	461a      	mov	r2, r3
 80075ea:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80075ee:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f007 ff34 	bl	800f460 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8007608:	2b00      	cmp	r3, #0
 800760a:	d019      	beq.n	8007640 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007612:	f043 0210 	orr.w	r2, r3, #16
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	22e0      	movs	r2, #224	@ 0xe0
 800762e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f007 ff14 	bl	800f460 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00f      	beq.n	800766a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007652:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f83f 	bl	80076e0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f003 0320 	and.w	r3, r3, #32
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00f      	beq.n	8007694 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f834 	bl	80076f4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8007694:	f7fc fcf6 	bl	8004084 <HAL_GetCurrentCPUID>
 8007698:	4603      	mov	r3, r0
 800769a:	2b03      	cmp	r3, #3
 800769c:	d10c      	bne.n	80076b8 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d013      	beq.n	80076d0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80076a8:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <HAL_ETH_IRQHandler+0x20c>)
 80076aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80076ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f829 	bl	8007708 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80076b6:	e00b      	b.n	80076d0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <HAL_ETH_IRQHandler+0x210>)
 80076c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80076c8:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f81c 	bl	8007708 <HAL_ETH_WakeUpCallback>
}
 80076d0:	bf00      	nop
 80076d2:	3720      	adds	r7, #32
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	58000080 	.word	0x58000080
 80076dc:	580000c0 	.word	0x580000c0

080076e0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e03e      	b.n	80077bc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007746:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	055b      	lsls	r3, r3, #21
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	041b      	lsls	r3, r3, #16
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f043 030c 	orr.w	r3, r3, #12
 800776a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800777e:	f7fb f87b 	bl	8002878 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007784:	e009      	b.n	800779a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8007786:	f7fb f877 	bl	8002878 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007794:	d901      	bls.n	800779a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e010      	b.n	80077bc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1ed      	bne.n	8007786 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e03c      	b.n	8007860 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077ee:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	055b      	lsls	r3, r3, #21
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f023 030c 	bic.w	r3, r3, #12
 8007812:	f043 0304 	orr.w	r3, r3, #4
 8007816:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	b29a      	uxth	r2, r3
 8007824:	4b10      	ldr	r3, [pc, #64]	@ (8007868 <HAL_ETH_WritePHYRegister+0xa4>)
 8007826:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800782a:	4a0f      	ldr	r2, [pc, #60]	@ (8007868 <HAL_ETH_WritePHYRegister+0xa4>)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8007832:	f7fb f821 	bl	8002878 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007838:	e009      	b.n	800784e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800783a:	f7fb f81d 	bl	8002878 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007848:	d901      	bls.n	800784e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e008      	b.n	8007860 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1ed      	bne.n	800783a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40028000 	.word	0x40028000

0800786c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e1c3      	b.n	8007c08 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 020c 	and.w	r2, r3, #12
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	bf14      	ite	ne
 800789c:	2301      	movne	r3, #1
 800789e:	2300      	moveq	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bf0c      	ite	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	2300      	movne	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bf14      	ite	ne
 80078e2:	2301      	movne	r3, #1
 80078e4:	2300      	moveq	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	461a      	mov	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800790e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800792c:	2b00      	cmp	r3, #0
 800792e:	bf14      	ite	ne
 8007930:	2301      	movne	r3, #1
 8007932:	2300      	moveq	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf14      	ite	ne
 8007966:	2301      	movne	r3, #1
 8007968:	2300      	moveq	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007996:	2b00      	cmp	r3, #0
 8007998:	bf0c      	ite	eq
 800799a:	2301      	moveq	r3, #1
 800799c:	2300      	movne	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bf14      	ite	ne
 80079b4:	2301      	movne	r3, #1
 80079b6:	2300      	moveq	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bf14      	ite	ne
 80079ce:	2301      	movne	r3, #1
 80079d0:	2300      	moveq	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bf14      	ite	ne
 80079e8:	2301      	movne	r3, #1
 80079ea:	2300      	moveq	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80079fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bf14      	ite	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	2300      	moveq	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bf14      	ite	ne
 8007a2a:	2301      	movne	r3, #1
 8007a2c:	2300      	moveq	r3, #0
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8007a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bf14      	ite	ne
 8007a98:	2301      	movne	r3, #1
 8007a9a:	2300      	moveq	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf14      	ite	ne
 8007ab4:	2301      	movne	r3, #1
 8007ab6:	2300      	moveq	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	0e5b      	lsrs	r3, r3, #25
 8007aca:	f003 021f 	and.w	r2, r3, #31
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf0c      	ite	eq
 8007b26:	2301      	moveq	r3, #1
 8007b28:	2300      	movne	r3, #0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b76:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8007b94:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007ba4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bf14      	ite	ne
 8007bda:	2301      	movne	r3, #1
 8007bdc:	2300      	moveq	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e00b      	b.n	8007c40 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d105      	bne.n	8007c3e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f871 	bl	8007d1c <ETH_SetMACConfig>

    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007c62:	f001 ffbd 	bl	8009be0 <HAL_RCC_GetHCLKFreq>
 8007c66:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d804      	bhi.n	8007c7a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e022      	b.n	8007cc0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a16      	ldr	r2, [pc, #88]	@ (8007cd8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d204      	bcs.n	8007c8c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e019      	b.n	8007cc0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4a13      	ldr	r2, [pc, #76]	@ (8007cdc <HAL_ETH_SetMDIOClockRange+0x94>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d915      	bls.n	8007cc0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4a12      	ldr	r2, [pc, #72]	@ (8007ce0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d804      	bhi.n	8007ca6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e00c      	b.n	8007cc0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ce4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d804      	bhi.n	8007cb8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	e003      	b.n	8007cc0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8007cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	02160ebf 	.word	0x02160ebf
 8007cd8:	03938700 	.word	0x03938700
 8007cdc:	05f5e0ff 	.word	0x05f5e0ff
 8007ce0:	08f0d17f 	.word	0x08f0d17f
 8007ce4:	0ee6b27f 	.word	0x0ee6b27f

08007ce8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	791b      	ldrb	r3, [r3, #4]
 8007d34:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007d36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	7b1b      	ldrb	r3, [r3, #12]
 8007d3c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	7b5b      	ldrb	r3, [r3, #13]
 8007d44:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007d46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	7b9b      	ldrb	r3, [r3, #14]
 8007d4c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007d4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	7bdb      	ldrb	r3, [r3, #15]
 8007d54:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007d56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	7c12      	ldrb	r2, [r2, #16]
 8007d5c:	2a00      	cmp	r2, #0
 8007d5e:	d102      	bne.n	8007d66 <ETH_SetMACConfig+0x4a>
 8007d60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007d64:	e000      	b.n	8007d68 <ETH_SetMACConfig+0x4c>
 8007d66:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007d68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	7c52      	ldrb	r2, [r2, #17]
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	d102      	bne.n	8007d78 <ETH_SetMACConfig+0x5c>
 8007d72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d76:	e000      	b.n	8007d7a <ETH_SetMACConfig+0x5e>
 8007d78:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	7c9b      	ldrb	r3, [r3, #18]
 8007d80:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007d82:	431a      	orrs	r2, r3
               macconf->Speed |
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007d88:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007d8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	7f1b      	ldrb	r3, [r3, #28]
 8007d94:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	7f5b      	ldrb	r3, [r3, #29]
 8007d9c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007d9e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	7f92      	ldrb	r2, [r2, #30]
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d102      	bne.n	8007dae <ETH_SetMACConfig+0x92>
 8007da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007dac:	e000      	b.n	8007db0 <ETH_SetMACConfig+0x94>
 8007dae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007db0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	7fdb      	ldrb	r3, [r3, #31]
 8007db6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007db8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	d102      	bne.n	8007dca <ETH_SetMACConfig+0xae>
 8007dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007dc8:	e000      	b.n	8007dcc <ETH_SetMACConfig+0xb0>
 8007dca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007dcc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007dd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dda:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007ddc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4b56      	ldr	r3, [pc, #344]	@ (8007f48 <ETH_SetMACConfig+0x22c>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	430b      	orrs	r3, r1
 8007df8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e06:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007e08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e10:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007e12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e1a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007e1c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	d102      	bne.n	8007e2e <ETH_SetMACConfig+0x112>
 8007e28:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007e2c:	e000      	b.n	8007e30 <ETH_SetMACConfig+0x114>
 8007e2e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007e30:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	4b42      	ldr	r3, [pc, #264]	@ (8007f4c <ETH_SetMACConfig+0x230>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	68f9      	ldr	r1, [r7, #12]
 8007e4a:	430b      	orrs	r3, r1
 8007e4c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e54:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	4b3a      	ldr	r3, [pc, #232]	@ (8007f50 <ETH_SetMACConfig+0x234>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	68f9      	ldr	r1, [r7, #12]
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007e78:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007e7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	d101      	bne.n	8007e8e <ETH_SetMACConfig+0x172>
 8007e8a:	2280      	movs	r2, #128	@ 0x80
 8007e8c:	e000      	b.n	8007e90 <ETH_SetMACConfig+0x174>
 8007e8e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007e90:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e96:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ea2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	68f9      	ldr	r1, [r7, #12]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007eb8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8007ec0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ece:	f023 0103 	bic.w	r1, r3, #3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8007ee6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	d101      	bne.n	8007f0a <ETH_SetMACConfig+0x1ee>
 8007f06:	2240      	movs	r2, #64	@ 0x40
 8007f08:	e000      	b.n	8007f0c <ETH_SetMACConfig+0x1f0>
 8007f0a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007f0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007f14:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007f16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8007f1e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007f2c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	00048083 	.word	0x00048083
 8007f4c:	c0f88000 	.word	0xc0f88000
 8007f50:	fffffef0 	.word	0xfffffef0

08007f54 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	4b38      	ldr	r3, [pc, #224]	@ (800804c <ETH_SetDMAConfig+0xf8>)
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	6811      	ldr	r1, [r2, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	430b      	orrs	r3, r1
 8007f76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f7a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	791b      	ldrb	r3, [r3, #4]
 8007f80:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007f86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	7b1b      	ldrb	r3, [r3, #12]
 8007f8c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8008050 <ETH_SetDMAConfig+0xfc>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fac:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	7b5b      	ldrb	r3, [r3, #13]
 8007fb2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fc4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8007fc8:	4b22      	ldr	r3, [pc, #136]	@ (8008054 <ETH_SetDMAConfig+0x100>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6812      	ldr	r2, [r2, #0]
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fd8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	7d1b      	ldrb	r3, [r3, #20]
 8007fe4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007fe6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	7f5b      	ldrb	r3, [r3, #29]
 8007fec:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ffa:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8007ffe:	4b16      	ldr	r3, [pc, #88]	@ (8008058 <ETH_SetDMAConfig+0x104>)
 8008000:	4013      	ands	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6812      	ldr	r2, [r2, #0]
 8008006:	68f9      	ldr	r1, [r7, #12]
 8008008:	430b      	orrs	r3, r1
 800800a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800800e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	7f1b      	ldrb	r3, [r3, #28]
 8008016:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008028:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800802c:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <ETH_SetDMAConfig+0x108>)
 800802e:	4013      	ands	r3, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	6812      	ldr	r2, [r2, #0]
 8008034:	68f9      	ldr	r1, [r7, #12]
 8008036:	430b      	orrs	r3, r1
 8008038:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800803c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	ffff87fd 	.word	0xffff87fd
 8008050:	ffff2ffe 	.word	0xffff2ffe
 8008054:	fffec000 	.word	0xfffec000
 8008058:	ffc0efef 	.word	0xffc0efef
 800805c:	7fc0ffff 	.word	0x7fc0ffff

08008060 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b0a4      	sub	sp, #144	@ 0x90
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800806e:	2300      	movs	r3, #0
 8008070:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008072:	2300      	movs	r3, #0
 8008074:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008078:	2300      	movs	r3, #0
 800807a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800809c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80080a0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80080b8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80080bc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80080c4:	2300      	movs	r3, #0
 80080c6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80080da:	2300      	movs	r3, #0
 80080dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80080e2:	2300      	movs	r3, #0
 80080e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80080f8:	2320      	movs	r3, #32
 80080fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80080fe:	2301      	movs	r3, #1
 8008100:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008104:	2300      	movs	r3, #0
 8008106:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800810a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800810e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008110:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008114:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008116:	2300      	movs	r3, #0
 8008118:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800811c:	2302      	movs	r3, #2
 800811e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800812e:	2300      	movs	r3, #0
 8008130:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008134:	2301      	movs	r3, #1
 8008136:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800813a:	2300      	movs	r3, #0
 800813c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800813e:	2301      	movs	r3, #1
 8008140:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff fde6 	bl	8007d1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008150:	2301      	movs	r3, #1
 8008152:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008154:	2301      	movs	r3, #1
 8008156:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008158:	2300      	movs	r3, #0
 800815a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800815c:	2300      	movs	r3, #0
 800815e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008162:	2300      	movs	r3, #0
 8008164:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008166:	2300      	movs	r3, #0
 8008168:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800816a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800816e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008170:	2300      	movs	r3, #0
 8008172:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008174:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008178:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800817a:	2300      	movs	r3, #0
 800817c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8008180:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8008184:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008186:	f107 0308 	add.w	r3, r7, #8
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff fee1 	bl	8007f54 <ETH_SetDMAConfig>
}
 8008192:	bf00      	nop
 8008194:	3790      	adds	r7, #144	@ 0x90
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	e01d      	b.n	80081e4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68d9      	ldr	r1, [r3, #12]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4613      	mov	r3, r2
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	4413      	add	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	440b      	add	r3, r1
 80081b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	3206      	adds	r2, #6
 80081da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d9de      	bls.n	80081a8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f8:	461a      	mov	r2, r3
 80081fa:	2303      	movs	r3, #3
 80081fc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800820c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8008220:	bf00      	nop
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	e023      	b.n	8008282 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6919      	ldr	r1, [r3, #16]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4613      	mov	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	4413      	add	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	440b      	add	r3, r1
 800824a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008270:	68b9      	ldr	r1, [r7, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	3212      	adds	r2, #18
 8008278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d9d8      	bls.n	800823a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ae:	461a      	mov	r2, r3
 80082b0:	2303      	movs	r3, #3
 80082b2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082c2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082d6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b091      	sub	sp, #68	@ 0x44
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3318      	adds	r3, #24
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8008300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800830e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008312:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800832a:	d007      	beq.n	800833c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800832c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800832e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008330:	3304      	adds	r3, #4
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800833c:	2302      	movs	r3, #2
 800833e:	e266      	b.n	800880e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d044      	beq.n	80083d6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	4b75      	ldr	r3, [pc, #468]	@ (8008528 <ETH_Prepare_Tx_Descriptors+0x240>)
 8008352:	4013      	ands	r3, r2
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008358:	431a      	orrs	r2, r3
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008378:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d027      	beq.n	80083d6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	b29a      	uxth	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	431a      	orrs	r2, r3
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8008398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	431a      	orrs	r2, r3
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80083c4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80083d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0310 	and.w	r3, r3, #16
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	4b51      	ldr	r3, [pc, #324]	@ (800852c <ETH_Prepare_Tx_Descriptors+0x244>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	6992      	ldr	r2, [r2, #24]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d105      	bne.n	8008418 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	2b00      	cmp	r3, #0
 8008416:	d036      	beq.n	8008486 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8008424:	f3bf 8f5f 	dmb	sy
}
 8008428:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008438:	3301      	adds	r3, #1
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800843c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800843e:	2b03      	cmp	r3, #3
 8008440:	d902      	bls.n	8008448 <ETH_Prepare_Tx_Descriptors+0x160>
 8008442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008444:	3b04      	subs	r3, #4
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800844c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008450:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8008452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008454:	3301      	adds	r3, #1
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008464:	d10f      	bne.n	8008486 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	6a3a      	ldr	r2, [r7, #32]
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8008470:	f3bf 8f5f 	dmb	sy
}
 8008474:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8008482:	2302      	movs	r3, #2
 8008484:	e1c3      	b.n	800880e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8008486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008488:	3301      	adds	r3, #1
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800848c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	4b24      	ldr	r3, [pc, #144]	@ (800852c <ETH_Prepare_Tx_Descriptors+0x244>)
 800849c:	4013      	ands	r3, r2
 800849e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084a0:	6852      	ldr	r2, [r2, #4]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80084a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d012      	beq.n	80084d6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80084b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008530 <ETH_Prepare_Tx_Descriptors+0x248>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ca:	6852      	ldr	r2, [r2, #4]
 80084cc:	0412      	lsls	r2, r2, #16
 80084ce:	431a      	orrs	r2, r3
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	e008      	b.n	80084e8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	2200      	movs	r2, #0
 80084da:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <ETH_Prepare_Tx_Descriptors+0x248>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0310 	and.w	r3, r3, #16
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d021      	beq.n	8008538 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80084f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	04db      	lsls	r3, r3, #19
 8008502:	431a      	orrs	r2, r3
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800850e:	4013      	ands	r3, r2
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	69d2      	ldr	r2, [r2, #28]
 8008514:	431a      	orrs	r2, r3
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e02e      	b.n	8008586 <ETH_Prepare_Tx_Descriptors+0x29e>
 8008528:	ffff0000 	.word	0xffff0000
 800852c:	ffffc000 	.word	0xffffc000
 8008530:	c000ffff 	.word	0xc000ffff
 8008534:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	4b7b      	ldr	r3, [pc, #492]	@ (800872c <ETH_Prepare_Tx_Descriptors+0x444>)
 800853e:	4013      	ands	r3, r2
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	6852      	ldr	r2, [r2, #4]
 8008544:	431a      	orrs	r2, r3
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	431a      	orrs	r2, r3
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859e:	431a      	orrs	r2, r3
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80085ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ae:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80085bc:	f3bf 8f5f 	dmb	sy
}
 80085c0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 80da 	beq.w	8008790 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80085ee:	e0cf      	b.n	8008790 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80085fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fe:	3301      	adds	r3, #1
 8008600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008604:	2b03      	cmp	r3, #3
 8008606:	d902      	bls.n	800860e <ETH_Prepare_Tx_Descriptors+0x326>
 8008608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860a:	3b04      	subs	r3, #4
 800860c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800862c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008630:	d007      	beq.n	8008642 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008636:	3304      	adds	r3, #4
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d029      	beq.n	8008696 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8008650:	2300      	movs	r3, #0
 8008652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008654:	e019      	b.n	800868a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8008656:	f3bf 8f5f 	dmb	sy
}
 800865a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8008668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866a:	3301      	adds	r3, #1
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800866e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008670:	2b03      	cmp	r3, #3
 8008672:	d902      	bls.n	800867a <ETH_Prepare_Tx_Descriptors+0x392>
 8008674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008676:	3b04      	subs	r3, #4
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800867e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008682:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	3301      	adds	r3, #1
 8008688:	63bb      	str	r3, [r7, #56]	@ 0x38
 800868a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800868c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868e:	429a      	cmp	r2, r3
 8008690:	d3e1      	bcc.n	8008656 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8008692:	2302      	movs	r3, #2
 8008694:	e0bb      	b.n	800880e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8008696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008698:	3301      	adds	r3, #1
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80086a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008730 <ETH_Prepare_Tx_Descriptors+0x448>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086b6:	6852      	ldr	r2, [r2, #4]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80086be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d012      	beq.n	80086ec <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80086c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	4b16      	ldr	r3, [pc, #88]	@ (8008734 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80086dc:	4013      	ands	r3, r2
 80086de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086e0:	6852      	ldr	r2, [r2, #4]
 80086e2:	0412      	lsls	r2, r2, #16
 80086e4:	431a      	orrs	r2, r3
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	609a      	str	r2, [r3, #8]
 80086ea:	e008      	b.n	80086fe <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008734 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b00      	cmp	r3, #0
 8008708:	d018      	beq.n	800873c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <ETH_Prepare_Tx_Descriptors+0x450>)
 8008710:	4013      	ands	r3, r2
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	69d2      	ldr	r2, [r2, #28]
 8008716:	431a      	orrs	r2, r3
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e020      	b.n	800876c <ETH_Prepare_Tx_Descriptors+0x484>
 800872a:	bf00      	nop
 800872c:	ffff8000 	.word	0xffff8000
 8008730:	ffffc000 	.word	0xffffc000
 8008734:	c000ffff 	.word	0xc000ffff
 8008738:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	4b36      	ldr	r3, [pc, #216]	@ (800881c <ETH_Prepare_Tx_Descriptors+0x534>)
 8008742:	4013      	ands	r3, r2
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	6852      	ldr	r2, [r2, #4]
 8008748:	431a      	orrs	r2, r3
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	431a      	orrs	r2, r3
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800876c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876e:	3301      	adds	r3, #1
 8008770:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8008772:	f3bf 8f5f 	dmb	sy
}
 8008776:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8008790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f47f af2b 	bne.w	80085f0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	609a      	str	r2, [r3, #8]
 80087ac:	e005      	b.n	80087ba <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ce:	3304      	adds	r3, #4
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087da:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087dc:	f3ef 8310 	mrs	r3, PRIMASK
 80087e0:	613b      	str	r3, [r7, #16]
  return(result);
 80087e2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	2301      	movs	r3, #1
 80087e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f383 8810 	msr	PRIMASK, r3
}
 80087f0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	4413      	add	r3, r2
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f383 8810 	msr	PRIMASK, r3
}
 800880a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3744      	adds	r7, #68	@ 0x44
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	ffff8000 	.word	0xffff8000

08008820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008820:	b480      	push	{r7}
 8008822:	b089      	sub	sp, #36	@ 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800882a:	2300      	movs	r3, #0
 800882c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800882e:	4b89      	ldr	r3, [pc, #548]	@ (8008a54 <HAL_GPIO_Init+0x234>)
 8008830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008832:	e194      	b.n	8008b5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	2101      	movs	r1, #1
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	4013      	ands	r3, r2
 8008842:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 8186 	beq.w	8008b58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	2b01      	cmp	r3, #1
 8008856:	d005      	beq.n	8008864 <HAL_GPIO_Init+0x44>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f003 0303 	and.w	r3, r3, #3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d130      	bne.n	80088c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	2203      	movs	r2, #3
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	4013      	ands	r3, r2
 800887a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	fa02 f303 	lsl.w	r3, r2, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	4313      	orrs	r3, r2
 800888c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800889a:	2201      	movs	r2, #1
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	fa02 f303 	lsl.w	r3, r2, r3
 80088a2:	43db      	mvns	r3, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4013      	ands	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	091b      	lsrs	r3, r3, #4
 80088b0:	f003 0201 	and.w	r2, r3, #1
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	4313      	orrs	r3, r2
 80088be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d017      	beq.n	8008902 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	2203      	movs	r2, #3
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	43db      	mvns	r3, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	fa02 f303 	lsl.w	r3, r2, r3
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d123      	bne.n	8008956 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	08da      	lsrs	r2, r3, #3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3208      	adds	r2, #8
 8008916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	220f      	movs	r2, #15
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	43db      	mvns	r3, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	4013      	ands	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	4313      	orrs	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	08da      	lsrs	r2, r3, #3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3208      	adds	r2, #8
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	2203      	movs	r2, #3
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	43db      	mvns	r3, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4013      	ands	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f003 0203 	and.w	r2, r3, #3
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	fa02 f303 	lsl.w	r3, r2, r3
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	4313      	orrs	r3, r2
 8008982:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80e0 	beq.w	8008b58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008998:	4b2f      	ldr	r3, [pc, #188]	@ (8008a58 <HAL_GPIO_Init+0x238>)
 800899a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800899e:	4a2e      	ldr	r2, [pc, #184]	@ (8008a58 <HAL_GPIO_Init+0x238>)
 80089a0:	f043 0302 	orr.w	r3, r3, #2
 80089a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80089a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a58 <HAL_GPIO_Init+0x238>)
 80089aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089b6:	4a29      	ldr	r2, [pc, #164]	@ (8008a5c <HAL_GPIO_Init+0x23c>)
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	089b      	lsrs	r3, r3, #2
 80089bc:	3302      	adds	r3, #2
 80089be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	220f      	movs	r2, #15
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	43db      	mvns	r3, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4013      	ands	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a20      	ldr	r2, [pc, #128]	@ (8008a60 <HAL_GPIO_Init+0x240>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d052      	beq.n	8008a88 <HAL_GPIO_Init+0x268>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a64 <HAL_GPIO_Init+0x244>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d031      	beq.n	8008a4e <HAL_GPIO_Init+0x22e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008a68 <HAL_GPIO_Init+0x248>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d02b      	beq.n	8008a4a <HAL_GPIO_Init+0x22a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a6c <HAL_GPIO_Init+0x24c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d025      	beq.n	8008a46 <HAL_GPIO_Init+0x226>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008a70 <HAL_GPIO_Init+0x250>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d01f      	beq.n	8008a42 <HAL_GPIO_Init+0x222>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a1b      	ldr	r2, [pc, #108]	@ (8008a74 <HAL_GPIO_Init+0x254>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d019      	beq.n	8008a3e <HAL_GPIO_Init+0x21e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008a78 <HAL_GPIO_Init+0x258>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <HAL_GPIO_Init+0x21a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a19      	ldr	r2, [pc, #100]	@ (8008a7c <HAL_GPIO_Init+0x25c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00d      	beq.n	8008a36 <HAL_GPIO_Init+0x216>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a18      	ldr	r2, [pc, #96]	@ (8008a80 <HAL_GPIO_Init+0x260>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d007      	beq.n	8008a32 <HAL_GPIO_Init+0x212>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a17      	ldr	r2, [pc, #92]	@ (8008a84 <HAL_GPIO_Init+0x264>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d101      	bne.n	8008a2e <HAL_GPIO_Init+0x20e>
 8008a2a:	2309      	movs	r3, #9
 8008a2c:	e02d      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a2e:	230a      	movs	r3, #10
 8008a30:	e02b      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a32:	2308      	movs	r3, #8
 8008a34:	e029      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a36:	2307      	movs	r3, #7
 8008a38:	e027      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a3a:	2306      	movs	r3, #6
 8008a3c:	e025      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a3e:	2305      	movs	r3, #5
 8008a40:	e023      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a42:	2304      	movs	r3, #4
 8008a44:	e021      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a46:	2303      	movs	r3, #3
 8008a48:	e01f      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e01d      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e01b      	b.n	8008a8a <HAL_GPIO_Init+0x26a>
 8008a52:	bf00      	nop
 8008a54:	58000080 	.word	0x58000080
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	58000400 	.word	0x58000400
 8008a60:	58020000 	.word	0x58020000
 8008a64:	58020400 	.word	0x58020400
 8008a68:	58020800 	.word	0x58020800
 8008a6c:	58020c00 	.word	0x58020c00
 8008a70:	58021000 	.word	0x58021000
 8008a74:	58021400 	.word	0x58021400
 8008a78:	58021800 	.word	0x58021800
 8008a7c:	58021c00 	.word	0x58021c00
 8008a80:	58022000 	.word	0x58022000
 8008a84:	58022400 	.word	0x58022400
 8008a88:	2300      	movs	r3, #0
 8008a8a:	69fa      	ldr	r2, [r7, #28]
 8008a8c:	f002 0203 	and.w	r2, r2, #3
 8008a90:	0092      	lsls	r2, r2, #2
 8008a92:	4093      	lsls	r3, r2
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a9a:	4938      	ldr	r1, [pc, #224]	@ (8008b7c <HAL_GPIO_Init+0x35c>)
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ace:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	4013      	ands	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	43db      	mvns	r3, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	fa22 f303 	lsr.w	r3, r2, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f47f ae63 	bne.w	8008834 <HAL_GPIO_Init+0x14>
  }
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	3724      	adds	r7, #36	@ 0x24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	58000400 	.word	0x58000400

08008b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	887b      	ldrh	r3, [r7, #2]
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	73fb      	strb	r3, [r7, #15]
 8008b9c:	e001      	b.n	8008ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bc0:	787b      	ldrb	r3, [r7, #1]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bc6:	887a      	ldrh	r2, [r7, #2]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008bcc:	e003      	b.n	8008bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	041a      	lsls	r2, r3, #16
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	619a      	str	r2, [r3, #24]
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	4603      	mov	r3, r0
 8008bea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d008      	beq.n	8008c0e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f8 fedd 	bl	80019c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008c0e:	bf00      	nop
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c20:	4b29      	ldr	r3, [pc, #164]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	2b06      	cmp	r3, #6
 8008c2a:	d00a      	beq.n	8008c42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c2c:	4b26      	ldr	r3, [pc, #152]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d001      	beq.n	8008c3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e040      	b.n	8008cc0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e03e      	b.n	8008cc0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c42:	4b21      	ldr	r3, [pc, #132]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008c4a:	491f      	ldr	r1, [pc, #124]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c52:	f7f9 fe11 	bl	8002878 <HAL_GetTick>
 8008c56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c58:	e009      	b.n	8008c6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c5a:	f7f9 fe0d 	bl	8002878 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c68:	d901      	bls.n	8008c6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e028      	b.n	8008cc0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c6e:	4b16      	ldr	r3, [pc, #88]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c7a:	d1ee      	bne.n	8008c5a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b1e      	cmp	r3, #30
 8008c80:	d008      	beq.n	8008c94 <HAL_PWREx_ConfigSupply+0x7c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c86:	d005      	beq.n	8008c94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b1d      	cmp	r3, #29
 8008c8c:	d002      	beq.n	8008c94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c92:	d114      	bne.n	8008cbe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008c94:	f7f9 fdf0 	bl	8002878 <HAL_GetTick>
 8008c98:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c9a:	e009      	b.n	8008cb0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c9c:	f7f9 fdec 	bl	8002878 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008caa:	d901      	bls.n	8008cb0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e007      	b.n	8008cc0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008cb0:	4b05      	ldr	r3, [pc, #20]	@ (8008cc8 <HAL_PWREx_ConfigSupply+0xb0>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cbc:	d1ee      	bne.n	8008c9c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	58024800 	.word	0x58024800

08008ccc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	@ 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f000 bc48 	b.w	8009570 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 8088 	beq.w	8008dfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cee:	4b99      	ldr	r3, [pc, #612]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cf8:	4b96      	ldr	r3, [pc, #600]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d007      	beq.n	8008d14 <HAL_RCC_OscConfig+0x48>
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	2b18      	cmp	r3, #24
 8008d08:	d111      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62>
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d10c      	bne.n	8008d2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d14:	4b8f      	ldr	r3, [pc, #572]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d06d      	beq.n	8008dfc <HAL_RCC_OscConfig+0x130>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d169      	bne.n	8008dfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f000 bc21 	b.w	8009570 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d36:	d106      	bne.n	8008d46 <HAL_RCC_OscConfig+0x7a>
 8008d38:	4b86      	ldr	r3, [pc, #536]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a85      	ldr	r2, [pc, #532]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e02e      	b.n	8008da4 <HAL_RCC_OscConfig+0xd8>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10c      	bne.n	8008d68 <HAL_RCC_OscConfig+0x9c>
 8008d4e:	4b81      	ldr	r3, [pc, #516]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a80      	ldr	r2, [pc, #512]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	4b7e      	ldr	r3, [pc, #504]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a7d      	ldr	r2, [pc, #500]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	e01d      	b.n	8008da4 <HAL_RCC_OscConfig+0xd8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d70:	d10c      	bne.n	8008d8c <HAL_RCC_OscConfig+0xc0>
 8008d72:	4b78      	ldr	r3, [pc, #480]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a77      	ldr	r2, [pc, #476]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	4b75      	ldr	r3, [pc, #468]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a74      	ldr	r2, [pc, #464]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	e00b      	b.n	8008da4 <HAL_RCC_OscConfig+0xd8>
 8008d8c:	4b71      	ldr	r3, [pc, #452]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a70      	ldr	r2, [pc, #448]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	4b6e      	ldr	r3, [pc, #440]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d013      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7f9 fd64 	bl	8002878 <HAL_GetTick>
 8008db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008db4:	f7f9 fd60 	bl	8002878 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b64      	cmp	r3, #100	@ 0x64
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e3d4      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dc6:	4b63      	ldr	r3, [pc, #396]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f0      	beq.n	8008db4 <HAL_RCC_OscConfig+0xe8>
 8008dd2:	e014      	b.n	8008dfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7f9 fd50 	bl	8002878 <HAL_GetTick>
 8008dd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ddc:	f7f9 fd4c 	bl	8002878 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b64      	cmp	r3, #100	@ 0x64
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e3c0      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dee:	4b59      	ldr	r3, [pc, #356]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <HAL_RCC_OscConfig+0x110>
 8008dfa:	e000      	b.n	8008dfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 80ca 	beq.w	8008fa0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e0c:	4b51      	ldr	r3, [pc, #324]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e16:	4b4f      	ldr	r3, [pc, #316]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d007      	beq.n	8008e32 <HAL_RCC_OscConfig+0x166>
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	2b18      	cmp	r3, #24
 8008e26:	d156      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x20a>
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d151      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e32:	4b48      	ldr	r3, [pc, #288]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_RCC_OscConfig+0x17e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e392      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e4a:	4b42      	ldr	r3, [pc, #264]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f023 0219 	bic.w	r2, r3, #25
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	493f      	ldr	r1, [pc, #252]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5c:	f7f9 fd0c 	bl	8002878 <HAL_GetTick>
 8008e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e64:	f7f9 fd08 	bl	8002878 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e37c      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e76:	4b37      	ldr	r3, [pc, #220]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0f0      	beq.n	8008e64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e82:	f7f9 fd29 	bl	80028d8 <HAL_GetREVID>
 8008e86:	4603      	mov	r3, r0
 8008e88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d817      	bhi.n	8008ec0 <HAL_RCC_OscConfig+0x1f4>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b40      	cmp	r3, #64	@ 0x40
 8008e96:	d108      	bne.n	8008eaa <HAL_RCC_OscConfig+0x1de>
 8008e98:	4b2e      	ldr	r3, [pc, #184]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ea8:	e07a      	b.n	8008fa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	031b      	lsls	r3, r3, #12
 8008eb8:	4926      	ldr	r1, [pc, #152]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ebe:	e06f      	b.n	8008fa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ec0:	4b24      	ldr	r3, [pc, #144]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	061b      	lsls	r3, r3, #24
 8008ece:	4921      	ldr	r1, [pc, #132]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ed4:	e064      	b.n	8008fa0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d047      	beq.n	8008f6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ede:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f023 0219 	bic.w	r2, r3, #25
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	491a      	ldr	r1, [pc, #104]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7f9 fcc2 	bl	8002878 <HAL_GetTick>
 8008ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ef8:	f7f9 fcbe 	bl	8002878 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e332      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f0a:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f0      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f16:	f7f9 fcdf 	bl	80028d8 <HAL_GetREVID>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d819      	bhi.n	8008f58 <HAL_RCC_OscConfig+0x28c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	2b40      	cmp	r3, #64	@ 0x40
 8008f2a:	d108      	bne.n	8008f3e <HAL_RCC_OscConfig+0x272>
 8008f2c:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008f34:	4a07      	ldr	r2, [pc, #28]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f3a:	6053      	str	r3, [r2, #4]
 8008f3c:	e030      	b.n	8008fa0 <HAL_RCC_OscConfig+0x2d4>
 8008f3e:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	031b      	lsls	r3, r3, #12
 8008f4c:	4901      	ldr	r1, [pc, #4]	@ (8008f54 <HAL_RCC_OscConfig+0x288>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	604b      	str	r3, [r1, #4]
 8008f52:	e025      	b.n	8008fa0 <HAL_RCC_OscConfig+0x2d4>
 8008f54:	58024400 	.word	0x58024400
 8008f58:	4b9a      	ldr	r3, [pc, #616]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	061b      	lsls	r3, r3, #24
 8008f66:	4997      	ldr	r1, [pc, #604]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	604b      	str	r3, [r1, #4]
 8008f6c:	e018      	b.n	8008fa0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f6e:	4b95      	ldr	r3, [pc, #596]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a94      	ldr	r2, [pc, #592]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7a:	f7f9 fc7d 	bl	8002878 <HAL_GetTick>
 8008f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f80:	e008      	b.n	8008f94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f82:	f7f9 fc79 	bl	8002878 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e2ed      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f94:	4b8b      	ldr	r3, [pc, #556]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f0      	bne.n	8008f82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80a9 	beq.w	8009100 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fae:	4b85      	ldr	r3, [pc, #532]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fb8:	4b82      	ldr	r3, [pc, #520]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d007      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x308>
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b18      	cmp	r3, #24
 8008fc8:	d13a      	bne.n	8009040 <HAL_RCC_OscConfig+0x374>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d135      	bne.n	8009040 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <HAL_RCC_OscConfig+0x320>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	2b80      	cmp	r3, #128	@ 0x80
 8008fe6:	d001      	beq.n	8008fec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e2c1      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fec:	f7f9 fc74 	bl	80028d8 <HAL_GetREVID>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d817      	bhi.n	800902a <HAL_RCC_OscConfig+0x35e>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d108      	bne.n	8009014 <HAL_RCC_OscConfig+0x348>
 8009002:	4b70      	ldr	r3, [pc, #448]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800900a:	4a6e      	ldr	r2, [pc, #440]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800900c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009010:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009012:	e075      	b.n	8009100 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009014:	4b6b      	ldr	r3, [pc, #428]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	069b      	lsls	r3, r3, #26
 8009022:	4968      	ldr	r1, [pc, #416]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009024:	4313      	orrs	r3, r2
 8009026:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009028:	e06a      	b.n	8009100 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800902a:	4b66      	ldr	r3, [pc, #408]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	061b      	lsls	r3, r3, #24
 8009038:	4962      	ldr	r1, [pc, #392]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800903a:	4313      	orrs	r3, r2
 800903c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800903e:	e05f      	b.n	8009100 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d042      	beq.n	80090ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009048:	4b5e      	ldr	r3, [pc, #376]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a5d      	ldr	r2, [pc, #372]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800904e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7f9 fc10 	bl	8002878 <HAL_GetTick>
 8009058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800905c:	f7f9 fc0c 	bl	8002878 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e280      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800906e:	4b55      	ldr	r3, [pc, #340]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f0      	beq.n	800905c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800907a:	f7f9 fc2d 	bl	80028d8 <HAL_GetREVID>
 800907e:	4603      	mov	r3, r0
 8009080:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009084:	4293      	cmp	r3, r2
 8009086:	d817      	bhi.n	80090b8 <HAL_RCC_OscConfig+0x3ec>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	2b20      	cmp	r3, #32
 800908e:	d108      	bne.n	80090a2 <HAL_RCC_OscConfig+0x3d6>
 8009090:	4b4c      	ldr	r3, [pc, #304]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009098:	4a4a      	ldr	r2, [pc, #296]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800909a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800909e:	6053      	str	r3, [r2, #4]
 80090a0:	e02e      	b.n	8009100 <HAL_RCC_OscConfig+0x434>
 80090a2:	4b48      	ldr	r3, [pc, #288]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	069b      	lsls	r3, r3, #26
 80090b0:	4944      	ldr	r1, [pc, #272]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	604b      	str	r3, [r1, #4]
 80090b6:	e023      	b.n	8009100 <HAL_RCC_OscConfig+0x434>
 80090b8:	4b42      	ldr	r3, [pc, #264]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	061b      	lsls	r3, r3, #24
 80090c6:	493f      	ldr	r1, [pc, #252]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60cb      	str	r3, [r1, #12]
 80090cc:	e018      	b.n	8009100 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090ce:	4b3d      	ldr	r3, [pc, #244]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a3c      	ldr	r2, [pc, #240]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090da:	f7f9 fbcd 	bl	8002878 <HAL_GetTick>
 80090de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090e0:	e008      	b.n	80090f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80090e2:	f7f9 fbc9 	bl	8002878 <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d901      	bls.n	80090f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e23d      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090f4:	4b33      	ldr	r3, [pc, #204]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f0      	bne.n	80090e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d036      	beq.n	800917a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d019      	beq.n	8009148 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009114:	4b2b      	ldr	r3, [pc, #172]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009118:	4a2a      	ldr	r2, [pc, #168]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009120:	f7f9 fbaa 	bl	8002878 <HAL_GetTick>
 8009124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009128:	f7f9 fba6 	bl	8002878 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e21a      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800913a:	4b22      	ldr	r3, [pc, #136]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800913c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f0      	beq.n	8009128 <HAL_RCC_OscConfig+0x45c>
 8009146:	e018      	b.n	800917a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009148:	4b1e      	ldr	r3, [pc, #120]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800914a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800914c:	4a1d      	ldr	r2, [pc, #116]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 800914e:	f023 0301 	bic.w	r3, r3, #1
 8009152:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009154:	f7f9 fb90 	bl	8002878 <HAL_GetTick>
 8009158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800915a:	e008      	b.n	800916e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800915c:	f7f9 fb8c 	bl	8002878 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b02      	cmp	r3, #2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e200      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800916e:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f0      	bne.n	800915c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d039      	beq.n	80091fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d01c      	beq.n	80091c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800918e:	4b0d      	ldr	r3, [pc, #52]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a0c      	ldr	r2, [pc, #48]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 8009194:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009198:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800919a:	f7f9 fb6d 	bl	8002878 <HAL_GetTick>
 800919e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091a0:	e008      	b.n	80091b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091a2:	f7f9 fb69 	bl	8002878 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d901      	bls.n	80091b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e1dd      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091b4:	4b03      	ldr	r3, [pc, #12]	@ (80091c4 <HAL_RCC_OscConfig+0x4f8>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0f0      	beq.n	80091a2 <HAL_RCC_OscConfig+0x4d6>
 80091c0:	e01b      	b.n	80091fa <HAL_RCC_OscConfig+0x52e>
 80091c2:	bf00      	nop
 80091c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091c8:	4b9b      	ldr	r3, [pc, #620]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a9a      	ldr	r2, [pc, #616]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80091ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091d4:	f7f9 fb50 	bl	8002878 <HAL_GetTick>
 80091d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091dc:	f7f9 fb4c 	bl	8002878 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e1c0      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091ee:	4b92      	ldr	r3, [pc, #584]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f0      	bne.n	80091dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8081 	beq.w	800930a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009208:	4b8c      	ldr	r3, [pc, #560]	@ (800943c <HAL_RCC_OscConfig+0x770>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a8b      	ldr	r2, [pc, #556]	@ (800943c <HAL_RCC_OscConfig+0x770>)
 800920e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009214:	f7f9 fb30 	bl	8002878 <HAL_GetTick>
 8009218:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800921c:	f7f9 fb2c 	bl	8002878 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b64      	cmp	r3, #100	@ 0x64
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e1a0      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800922e:	4b83      	ldr	r3, [pc, #524]	@ (800943c <HAL_RCC_OscConfig+0x770>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0f0      	beq.n	800921c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d106      	bne.n	8009250 <HAL_RCC_OscConfig+0x584>
 8009242:	4b7d      	ldr	r3, [pc, #500]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009246:	4a7c      	ldr	r2, [pc, #496]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	6713      	str	r3, [r2, #112]	@ 0x70
 800924e:	e02d      	b.n	80092ac <HAL_RCC_OscConfig+0x5e0>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10c      	bne.n	8009272 <HAL_RCC_OscConfig+0x5a6>
 8009258:	4b77      	ldr	r3, [pc, #476]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800925a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925c:	4a76      	ldr	r2, [pc, #472]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800925e:	f023 0301 	bic.w	r3, r3, #1
 8009262:	6713      	str	r3, [r2, #112]	@ 0x70
 8009264:	4b74      	ldr	r3, [pc, #464]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009268:	4a73      	ldr	r2, [pc, #460]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800926a:	f023 0304 	bic.w	r3, r3, #4
 800926e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009270:	e01c      	b.n	80092ac <HAL_RCC_OscConfig+0x5e0>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b05      	cmp	r3, #5
 8009278:	d10c      	bne.n	8009294 <HAL_RCC_OscConfig+0x5c8>
 800927a:	4b6f      	ldr	r3, [pc, #444]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800927c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800927e:	4a6e      	ldr	r2, [pc, #440]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009280:	f043 0304 	orr.w	r3, r3, #4
 8009284:	6713      	str	r3, [r2, #112]	@ 0x70
 8009286:	4b6c      	ldr	r3, [pc, #432]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928a:	4a6b      	ldr	r2, [pc, #428]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	6713      	str	r3, [r2, #112]	@ 0x70
 8009292:	e00b      	b.n	80092ac <HAL_RCC_OscConfig+0x5e0>
 8009294:	4b68      	ldr	r3, [pc, #416]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009298:	4a67      	ldr	r2, [pc, #412]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	6713      	str	r3, [r2, #112]	@ 0x70
 80092a0:	4b65      	ldr	r3, [pc, #404]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80092a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a4:	4a64      	ldr	r2, [pc, #400]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80092a6:	f023 0304 	bic.w	r3, r3, #4
 80092aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d015      	beq.n	80092e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b4:	f7f9 fae0 	bl	8002878 <HAL_GetTick>
 80092b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ba:	e00a      	b.n	80092d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092bc:	f7f9 fadc 	bl	8002878 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e14e      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d2:	4b59      	ldr	r3, [pc, #356]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80092d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0ee      	beq.n	80092bc <HAL_RCC_OscConfig+0x5f0>
 80092de:	e014      	b.n	800930a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e0:	f7f9 faca 	bl	8002878 <HAL_GetTick>
 80092e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092e6:	e00a      	b.n	80092fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092e8:	f7f9 fac6 	bl	8002878 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d901      	bls.n	80092fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e138      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092fe:	4b4e      	ldr	r3, [pc, #312]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ee      	bne.n	80092e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 812d 	beq.w	800956e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009314:	4b48      	ldr	r3, [pc, #288]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800931c:	2b18      	cmp	r3, #24
 800931e:	f000 80bd 	beq.w	800949c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009326:	2b02      	cmp	r3, #2
 8009328:	f040 809e 	bne.w	8009468 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932c:	4b42      	ldr	r3, [pc, #264]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a41      	ldr	r2, [pc, #260]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009338:	f7f9 fa9e 	bl	8002878 <HAL_GetTick>
 800933c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009340:	f7f9 fa9a 	bl	8002878 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e10e      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009352:	4b39      	ldr	r3, [pc, #228]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1f0      	bne.n	8009340 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800935e:	4b36      	ldr	r3, [pc, #216]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009362:	4b37      	ldr	r3, [pc, #220]	@ (8009440 <HAL_RCC_OscConfig+0x774>)
 8009364:	4013      	ands	r3, r2
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800936e:	0112      	lsls	r2, r2, #4
 8009370:	430a      	orrs	r2, r1
 8009372:	4931      	ldr	r1, [pc, #196]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009374:	4313      	orrs	r3, r2
 8009376:	628b      	str	r3, [r1, #40]	@ 0x28
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937c:	3b01      	subs	r3, #1
 800937e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009386:	3b01      	subs	r3, #1
 8009388:	025b      	lsls	r3, r3, #9
 800938a:	b29b      	uxth	r3, r3
 800938c:	431a      	orrs	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009392:	3b01      	subs	r3, #1
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a0:	3b01      	subs	r3, #1
 80093a2:	061b      	lsls	r3, r3, #24
 80093a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093a8:	4923      	ldr	r1, [pc, #140]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80093ae:	4b22      	ldr	r3, [pc, #136]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b2:	4a21      	ldr	r2, [pc, #132]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093be:	4b21      	ldr	r3, [pc, #132]	@ (8009444 <HAL_RCC_OscConfig+0x778>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80093c6:	00d2      	lsls	r2, r2, #3
 80093c8:	491b      	ldr	r1, [pc, #108]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d2:	f023 020c 	bic.w	r2, r3, #12
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093da:	4917      	ldr	r1, [pc, #92]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093dc:	4313      	orrs	r3, r2
 80093de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093e0:	4b15      	ldr	r3, [pc, #84]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	f023 0202 	bic.w	r2, r3, #2
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ec:	4912      	ldr	r1, [pc, #72]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093f2:	4b11      	ldr	r3, [pc, #68]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f6:	4a10      	ldr	r2, [pc, #64]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 80093f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009402:	4a0d      	ldr	r2, [pc, #52]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800940a:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	4a0a      	ldr	r2, [pc, #40]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009416:	4b08      	ldr	r3, [pc, #32]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941a:	4a07      	ldr	r2, [pc, #28]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 800941c:	f043 0301 	orr.w	r3, r3, #1
 8009420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009422:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a04      	ldr	r2, [pc, #16]	@ (8009438 <HAL_RCC_OscConfig+0x76c>)
 8009428:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800942c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800942e:	f7f9 fa23 	bl	8002878 <HAL_GetTick>
 8009432:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009434:	e011      	b.n	800945a <HAL_RCC_OscConfig+0x78e>
 8009436:	bf00      	nop
 8009438:	58024400 	.word	0x58024400
 800943c:	58024800 	.word	0x58024800
 8009440:	fffffc0c 	.word	0xfffffc0c
 8009444:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009448:	f7f9 fa16 	bl	8002878 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e08a      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800945a:	4b47      	ldr	r3, [pc, #284]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f0      	beq.n	8009448 <HAL_RCC_OscConfig+0x77c>
 8009466:	e082      	b.n	800956e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009468:	4b43      	ldr	r3, [pc, #268]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a42      	ldr	r2, [pc, #264]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 800946e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009474:	f7f9 fa00 	bl	8002878 <HAL_GetTick>
 8009478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800947c:	f7f9 f9fc 	bl	8002878 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e070      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800948e:	4b3a      	ldr	r3, [pc, #232]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f0      	bne.n	800947c <HAL_RCC_OscConfig+0x7b0>
 800949a:	e068      	b.n	800956e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800949c:	4b36      	ldr	r3, [pc, #216]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 800949e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80094a2:	4b35      	ldr	r3, [pc, #212]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d031      	beq.n	8009514 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f003 0203 	and.w	r2, r3, #3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d12a      	bne.n	8009514 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d122      	bne.n	8009514 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094da:	429a      	cmp	r2, r3
 80094dc:	d11a      	bne.n	8009514 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	0a5b      	lsrs	r3, r3, #9
 80094e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d111      	bne.n	8009514 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094fe:	429a      	cmp	r2, r3
 8009500:	d108      	bne.n	8009514 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	0e1b      	lsrs	r3, r3, #24
 8009506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009510:	429a      	cmp	r2, r3
 8009512:	d001      	beq.n	8009518 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e02b      	b.n	8009570 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009518:	4b17      	ldr	r3, [pc, #92]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 800951a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009522:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	429a      	cmp	r2, r3
 800952c:	d01f      	beq.n	800956e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800952e:	4b12      	ldr	r3, [pc, #72]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	4a11      	ldr	r2, [pc, #68]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800953a:	f7f9 f99d 	bl	8002878 <HAL_GetTick>
 800953e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009540:	bf00      	nop
 8009542:	f7f9 f999 	bl	8002878 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	4293      	cmp	r3, r2
 800954c:	d0f9      	beq.n	8009542 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800954e:	4b0a      	ldr	r3, [pc, #40]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 8009550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009552:	4b0a      	ldr	r3, [pc, #40]	@ (800957c <HAL_RCC_OscConfig+0x8b0>)
 8009554:	4013      	ands	r3, r2
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800955a:	00d2      	lsls	r2, r2, #3
 800955c:	4906      	ldr	r1, [pc, #24]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 800955e:	4313      	orrs	r3, r2
 8009560:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009562:	4b05      	ldr	r3, [pc, #20]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	4a04      	ldr	r2, [pc, #16]	@ (8009578 <HAL_RCC_OscConfig+0x8ac>)
 8009568:	f043 0301 	orr.w	r3, r3, #1
 800956c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3730      	adds	r7, #48	@ 0x30
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	58024400 	.word	0x58024400
 800957c:	ffff0007 	.word	0xffff0007

08009580 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e19c      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009594:	4b8a      	ldr	r3, [pc, #552]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d910      	bls.n	80095c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095a2:	4b87      	ldr	r3, [pc, #540]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f023 020f 	bic.w	r2, r3, #15
 80095aa:	4985      	ldr	r1, [pc, #532]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095b2:	4b83      	ldr	r3, [pc, #524]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d001      	beq.n	80095c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e184      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d010      	beq.n	80095f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	4b7b      	ldr	r3, [pc, #492]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095dc:	429a      	cmp	r2, r3
 80095de:	d908      	bls.n	80095f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095e0:	4b78      	ldr	r3, [pc, #480]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	4975      	ldr	r1, [pc, #468]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d010      	beq.n	8009620 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	695a      	ldr	r2, [r3, #20]
 8009602:	4b70      	ldr	r3, [pc, #448]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800960a:	429a      	cmp	r2, r3
 800960c:	d908      	bls.n	8009620 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800960e:	4b6d      	ldr	r3, [pc, #436]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	496a      	ldr	r1, [pc, #424]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800961c:	4313      	orrs	r3, r2
 800961e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b00      	cmp	r3, #0
 800962a:	d010      	beq.n	800964e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	699a      	ldr	r2, [r3, #24]
 8009630:	4b64      	ldr	r3, [pc, #400]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009638:	429a      	cmp	r2, r3
 800963a:	d908      	bls.n	800964e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800963c:	4b61      	ldr	r3, [pc, #388]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	495e      	ldr	r1, [pc, #376]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800964a:	4313      	orrs	r3, r2
 800964c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	d010      	beq.n	800967c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69da      	ldr	r2, [r3, #28]
 800965e:	4b59      	ldr	r3, [pc, #356]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009666:	429a      	cmp	r2, r3
 8009668:	d908      	bls.n	800967c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800966a:	4b56      	ldr	r3, [pc, #344]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	4953      	ldr	r1, [pc, #332]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009678:	4313      	orrs	r3, r2
 800967a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d010      	beq.n	80096aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	4b4d      	ldr	r3, [pc, #308]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	429a      	cmp	r2, r3
 8009696:	d908      	bls.n	80096aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009698:	4b4a      	ldr	r3, [pc, #296]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	f023 020f 	bic.w	r2, r3, #15
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	4947      	ldr	r1, [pc, #284]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d055      	beq.n	8009762 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096b6:	4b43      	ldr	r3, [pc, #268]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	4940      	ldr	r1, [pc, #256]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d107      	bne.n	80096e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096d0:	4b3c      	ldr	r3, [pc, #240]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d121      	bne.n	8009720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e0f6      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d107      	bne.n	80096f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096e8:	4b36      	ldr	r3, [pc, #216]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d115      	bne.n	8009720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e0ea      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d107      	bne.n	8009710 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009700:	4b30      	ldr	r3, [pc, #192]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e0de      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009710:	4b2c      	ldr	r3, [pc, #176]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e0d6      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009720:	4b28      	ldr	r3, [pc, #160]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f023 0207 	bic.w	r2, r3, #7
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4925      	ldr	r1, [pc, #148]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800972e:	4313      	orrs	r3, r2
 8009730:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009732:	f7f9 f8a1 	bl	8002878 <HAL_GetTick>
 8009736:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009738:	e00a      	b.n	8009750 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800973a:	f7f9 f89d 	bl	8002878 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009748:	4293      	cmp	r3, r2
 800974a:	d901      	bls.n	8009750 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e0be      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009750:	4b1c      	ldr	r3, [pc, #112]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	429a      	cmp	r2, r3
 8009760:	d1eb      	bne.n	800973a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d010      	beq.n	8009790 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	4b14      	ldr	r3, [pc, #80]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	429a      	cmp	r2, r3
 800977c:	d208      	bcs.n	8009790 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800977e:	4b11      	ldr	r3, [pc, #68]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	f023 020f 	bic.w	r2, r3, #15
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	490e      	ldr	r1, [pc, #56]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 800978c:	4313      	orrs	r3, r2
 800978e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009790:	4b0b      	ldr	r3, [pc, #44]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d214      	bcs.n	80097c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979e:	4b08      	ldr	r3, [pc, #32]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f023 020f 	bic.w	r2, r3, #15
 80097a6:	4906      	ldr	r1, [pc, #24]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ae:	4b04      	ldr	r3, [pc, #16]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d005      	beq.n	80097c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e086      	b.n	80098ce <HAL_RCC_ClockConfig+0x34e>
 80097c0:	52002000 	.word	0x52002000
 80097c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d010      	beq.n	80097f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	4b3f      	ldr	r3, [pc, #252]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d208      	bcs.n	80097f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097e4:	4b3c      	ldr	r3, [pc, #240]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	4939      	ldr	r1, [pc, #228]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d010      	beq.n	8009824 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	4b34      	ldr	r3, [pc, #208]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800980e:	429a      	cmp	r2, r3
 8009810:	d208      	bcs.n	8009824 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009812:	4b31      	ldr	r3, [pc, #196]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	492e      	ldr	r1, [pc, #184]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009820:	4313      	orrs	r3, r2
 8009822:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	2b00      	cmp	r3, #0
 800982e:	d010      	beq.n	8009852 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	4b28      	ldr	r3, [pc, #160]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009836:	69db      	ldr	r3, [r3, #28]
 8009838:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800983c:	429a      	cmp	r2, r3
 800983e:	d208      	bcs.n	8009852 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009840:	4b25      	ldr	r3, [pc, #148]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	4922      	ldr	r1, [pc, #136]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 800984e:	4313      	orrs	r3, r2
 8009850:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	d010      	beq.n	8009880 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	69da      	ldr	r2, [r3, #28]
 8009862:	4b1d      	ldr	r3, [pc, #116]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800986a:	429a      	cmp	r2, r3
 800986c:	d208      	bcs.n	8009880 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800986e:	4b1a      	ldr	r3, [pc, #104]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	4917      	ldr	r1, [pc, #92]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 800987c:	4313      	orrs	r3, r2
 800987e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009880:	f000 f834 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 8009884:	4602      	mov	r2, r0
 8009886:	4b14      	ldr	r3, [pc, #80]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	0a1b      	lsrs	r3, r3, #8
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	4912      	ldr	r1, [pc, #72]	@ (80098dc <HAL_RCC_ClockConfig+0x35c>)
 8009892:	5ccb      	ldrb	r3, [r1, r3]
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	fa22 f303 	lsr.w	r3, r2, r3
 800989c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800989e:	4b0e      	ldr	r3, [pc, #56]	@ (80098d8 <HAL_RCC_ClockConfig+0x358>)
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	4a0d      	ldr	r2, [pc, #52]	@ (80098dc <HAL_RCC_ClockConfig+0x35c>)
 80098a8:	5cd3      	ldrb	r3, [r2, r3]
 80098aa:	f003 031f 	and.w	r3, r3, #31
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	fa22 f303 	lsr.w	r3, r2, r3
 80098b4:	4a0a      	ldr	r2, [pc, #40]	@ (80098e0 <HAL_RCC_ClockConfig+0x360>)
 80098b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098b8:	4a0a      	ldr	r2, [pc, #40]	@ (80098e4 <HAL_RCC_ClockConfig+0x364>)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80098be:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <HAL_RCC_ClockConfig+0x368>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7f8 fc4a 	bl	800215c <HAL_InitTick>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	58024400 	.word	0x58024400
 80098dc:	080289cc 	.word	0x080289cc
 80098e0:	24000004 	.word	0x24000004
 80098e4:	24000000 	.word	0x24000000
 80098e8:	24000028 	.word	0x24000028

080098ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b089      	sub	sp, #36	@ 0x24
 80098f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098f2:	4bb3      	ldr	r3, [pc, #716]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098fa:	2b18      	cmp	r3, #24
 80098fc:	f200 8155 	bhi.w	8009baa <HAL_RCC_GetSysClockFreq+0x2be>
 8009900:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	0800996d 	.word	0x0800996d
 800990c:	08009bab 	.word	0x08009bab
 8009910:	08009bab 	.word	0x08009bab
 8009914:	08009bab 	.word	0x08009bab
 8009918:	08009bab 	.word	0x08009bab
 800991c:	08009bab 	.word	0x08009bab
 8009920:	08009bab 	.word	0x08009bab
 8009924:	08009bab 	.word	0x08009bab
 8009928:	08009993 	.word	0x08009993
 800992c:	08009bab 	.word	0x08009bab
 8009930:	08009bab 	.word	0x08009bab
 8009934:	08009bab 	.word	0x08009bab
 8009938:	08009bab 	.word	0x08009bab
 800993c:	08009bab 	.word	0x08009bab
 8009940:	08009bab 	.word	0x08009bab
 8009944:	08009bab 	.word	0x08009bab
 8009948:	08009999 	.word	0x08009999
 800994c:	08009bab 	.word	0x08009bab
 8009950:	08009bab 	.word	0x08009bab
 8009954:	08009bab 	.word	0x08009bab
 8009958:	08009bab 	.word	0x08009bab
 800995c:	08009bab 	.word	0x08009bab
 8009960:	08009bab 	.word	0x08009bab
 8009964:	08009bab 	.word	0x08009bab
 8009968:	0800999f 	.word	0x0800999f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800996c:	4b94      	ldr	r3, [pc, #592]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d009      	beq.n	800998c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009978:	4b91      	ldr	r3, [pc, #580]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	08db      	lsrs	r3, r3, #3
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	4a90      	ldr	r2, [pc, #576]	@ (8009bc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009984:	fa22 f303 	lsr.w	r3, r2, r3
 8009988:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800998a:	e111      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800998c:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800998e:	61bb      	str	r3, [r7, #24]
      break;
 8009990:	e10e      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009992:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009994:	61bb      	str	r3, [r7, #24]
      break;
 8009996:	e10b      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009998:	4b8c      	ldr	r3, [pc, #560]	@ (8009bcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800999a:	61bb      	str	r3, [r7, #24]
      break;
 800999c:	e108      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800999e:	4b88      	ldr	r3, [pc, #544]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80099a8:	4b85      	ldr	r3, [pc, #532]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ac:	091b      	lsrs	r3, r3, #4
 80099ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80099b4:	4b82      	ldr	r3, [pc, #520]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80099be:	4b80      	ldr	r3, [pc, #512]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c2:	08db      	lsrs	r3, r3, #3
 80099c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	fb02 f303 	mul.w	r3, r2, r3
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 80e1 	beq.w	8009ba4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	f000 8083 	beq.w	8009af0 <HAL_RCC_GetSysClockFreq+0x204>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	f200 80a1 	bhi.w	8009b34 <HAL_RCC_GetSysClockFreq+0x248>
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_RCC_GetSysClockFreq+0x114>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d056      	beq.n	8009aac <HAL_RCC_GetSysClockFreq+0x1c0>
 80099fe:	e099      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a00:	4b6f      	ldr	r3, [pc, #444]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d02d      	beq.n	8009a68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	08db      	lsrs	r3, r3, #3
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	4a6b      	ldr	r2, [pc, #428]	@ (8009bc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a18:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	ee07 3a90 	vmov	s15, r3
 8009a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b62      	ldr	r3, [pc, #392]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009a66:	e087      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009bd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b51      	ldr	r3, [pc, #324]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a8e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aaa:	e065      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009bd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b40      	ldr	r3, [pc, #256]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ad2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aee:	e043      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009bdc <HAL_RCC_GetSysClockFreq+0x2f0>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b32:	e021      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009bd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b5a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b78:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b7c:	0a5b      	lsrs	r3, r3, #9
 8009b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b82:	3301      	adds	r3, #1
 8009b84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	ee07 3a90 	vmov	s15, r3
 8009b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9c:	ee17 3a90 	vmov	r3, s15
 8009ba0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009ba2:	e005      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61bb      	str	r3, [r7, #24]
      break;
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009baa:	4b07      	ldr	r3, [pc, #28]	@ (8009bc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009bac:	61bb      	str	r3, [r7, #24]
      break;
 8009bae:	bf00      	nop
  }

  return sysclockfreq;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3724      	adds	r7, #36	@ 0x24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	03d09000 	.word	0x03d09000
 8009bc8:	003d0900 	.word	0x003d0900
 8009bcc:	017d7840 	.word	0x017d7840
 8009bd0:	46000000 	.word	0x46000000
 8009bd4:	4c742400 	.word	0x4c742400
 8009bd8:	4a742400 	.word	0x4a742400
 8009bdc:	4bbebc20 	.word	0x4bbebc20

08009be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009be6:	f7ff fe81 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b10      	ldr	r3, [pc, #64]	@ (8009c30 <HAL_RCC_GetHCLKFreq+0x50>)
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	0a1b      	lsrs	r3, r3, #8
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	490f      	ldr	r1, [pc, #60]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bf8:	5ccb      	ldrb	r3, [r1, r3]
 8009bfa:	f003 031f 	and.w	r3, r3, #31
 8009bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009c02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c04:	4b0a      	ldr	r3, [pc, #40]	@ (8009c30 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	4a09      	ldr	r2, [pc, #36]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c0e:	5cd3      	ldrb	r3, [r2, r3]
 8009c10:	f003 031f 	and.w	r3, r3, #31
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1a:	4a07      	ldr	r2, [pc, #28]	@ (8009c38 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c1e:	4a07      	ldr	r2, [pc, #28]	@ (8009c3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c26:	681b      	ldr	r3, [r3, #0]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	58024400 	.word	0x58024400
 8009c34:	080289cc 	.word	0x080289cc
 8009c38:	24000004 	.word	0x24000004
 8009c3c:	24000000 	.word	0x24000000

08009c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c44:	f7ff ffcc 	bl	8009be0 <HAL_RCC_GetHCLKFreq>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	4b06      	ldr	r3, [pc, #24]	@ (8009c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	091b      	lsrs	r3, r3, #4
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	4904      	ldr	r1, [pc, #16]	@ (8009c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c56:	5ccb      	ldrb	r3, [r1, r3]
 8009c58:	f003 031f 	and.w	r3, r3, #31
 8009c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	58024400 	.word	0x58024400
 8009c68:	080289cc 	.word	0x080289cc

08009c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c70:	f7ff ffb6 	bl	8009be0 <HAL_RCC_GetHCLKFreq>
 8009c74:	4602      	mov	r2, r0
 8009c76:	4b06      	ldr	r3, [pc, #24]	@ (8009c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	f003 0307 	and.w	r3, r3, #7
 8009c80:	4904      	ldr	r1, [pc, #16]	@ (8009c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c82:	5ccb      	ldrb	r3, [r1, r3]
 8009c84:	f003 031f 	and.w	r3, r3, #31
 8009c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	58024400 	.word	0x58024400
 8009c94:	080289cc 	.word	0x080289cc

08009c98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	223f      	movs	r2, #63	@ 0x3f
 8009ca6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f003 0207 	and.w	r2, r3, #7
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009cb4:	4b17      	ldr	r3, [pc, #92]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009cc0:	4b14      	ldr	r3, [pc, #80]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	f003 020f 	and.w	r2, r3, #15
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009ccc:	4b11      	ldr	r3, [pc, #68]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009cf0:	4b08      	ldr	r3, [pc, #32]	@ (8009d14 <HAL_RCC_GetClockConfig+0x7c>)
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009cfc:	4b06      	ldr	r3, [pc, #24]	@ (8009d18 <HAL_RCC_GetClockConfig+0x80>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 020f 	and.w	r2, r3, #15
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	601a      	str	r2, [r3, #0]
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	58024400 	.word	0x58024400
 8009d18:	52002000 	.word	0x52002000

08009d1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d20:	b0cc      	sub	sp, #304	@ 0x130
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d40:	2500      	movs	r5, #0
 8009d42:	ea54 0305 	orrs.w	r3, r4, r5
 8009d46:	d049      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d52:	d02f      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d58:	d828      	bhi.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d5e:	d01a      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d64:	d822      	bhi.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d6e:	d007      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d70:	e01c      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d72:	4bb8      	ldr	r3, [pc, #736]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d76:	4ab7      	ldr	r2, [pc, #732]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d7e:	e01a      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d84:	3308      	adds	r3, #8
 8009d86:	2102      	movs	r1, #2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f002 fba1 	bl	800c4d0 <RCCEx_PLL2_Config>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d94:	e00f      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d9a:	3328      	adds	r3, #40	@ 0x28
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f002 fc48 	bl	800c634 <RCCEx_PLL3_Config>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009daa:	e004      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009db2:	e000      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009dbe:	4ba5      	ldr	r3, [pc, #660]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dcc:	4aa1      	ldr	r2, [pc, #644]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dd2:	e003      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009dd8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009de8:	f04f 0900 	mov.w	r9, #0
 8009dec:	ea58 0309 	orrs.w	r3, r8, r9
 8009df0:	d047      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d82a      	bhi.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e19 	.word	0x08009e19
 8009e08:	08009e27 	.word	0x08009e27
 8009e0c:	08009e3d 	.word	0x08009e3d
 8009e10:	08009e5b 	.word	0x08009e5b
 8009e14:	08009e5b 	.word	0x08009e5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e18:	4b8e      	ldr	r3, [pc, #568]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1c:	4a8d      	ldr	r2, [pc, #564]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e24:	e01a      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f002 fb4e 	bl	800c4d0 <RCCEx_PLL2_Config>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e3a:	e00f      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e40:	3328      	adds	r3, #40	@ 0x28
 8009e42:	2100      	movs	r1, #0
 8009e44:	4618      	mov	r0, r3
 8009e46:	f002 fbf5 	bl	800c634 <RCCEx_PLL3_Config>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e50:	e004      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009e58:	e000      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e64:	4b7b      	ldr	r3, [pc, #492]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e68:	f023 0107 	bic.w	r1, r3, #7
 8009e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e72:	4a78      	ldr	r2, [pc, #480]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e74:	430b      	orrs	r3, r1
 8009e76:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e78:	e003      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009e7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009e8e:	f04f 0b00 	mov.w	fp, #0
 8009e92:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e96:	d04c      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea2:	d030      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea8:	d829      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009eac:	d02d      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8009eb0:	d825      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009eb2:	2b80      	cmp	r3, #128	@ 0x80
 8009eb4:	d018      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009eb6:	2b80      	cmp	r3, #128	@ 0x80
 8009eb8:	d821      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009ebe:	2b40      	cmp	r3, #64	@ 0x40
 8009ec0:	d007      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009ec2:	e01c      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec4:	4b63      	ldr	r3, [pc, #396]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	4a62      	ldr	r2, [pc, #392]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ed0:	e01c      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f002 faf8 	bl	800c4d0 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ee6:	e011      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009eec:	3328      	adds	r3, #40	@ 0x28
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 fb9f 	bl	800c634 <RCCEx_PLL3_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009efc:	e006      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f14:	4b4f      	ldr	r3, [pc, #316]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f18:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f22:	4a4c      	ldr	r2, [pc, #304]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f24:	430b      	orrs	r3, r1
 8009f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009f2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009f3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009f42:	2300      	movs	r3, #0
 8009f44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8009f48:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	d053      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f5e:	d035      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f64:	d82e      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f6a:	d031      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009f6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f70:	d828      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f76:	d01a      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f7c:	d822      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009f82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f86:	d007      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009f88:	e01c      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f8a:	4b32      	ldr	r3, [pc, #200]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8e:	4a31      	ldr	r2, [pc, #196]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f96:	e01c      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f002 fa95 	bl	800c4d0 <RCCEx_PLL2_Config>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009fac:	e011      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fb2:	3328      	adds	r3, #40	@ 0x28
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f002 fb3c 	bl	800c634 <RCCEx_PLL3_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fc2:	e006      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009fca:	e002      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009fcc:	bf00      	nop
 8009fce:	e000      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10b      	bne.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009fda:	4b1e      	ldr	r3, [pc, #120]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fde:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009fea:	4a1a      	ldr	r2, [pc, #104]	@ (800a054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fec:	430b      	orrs	r3, r1
 8009fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ff0:	e003      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009ff6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a006:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a00a:	2300      	movs	r3, #0
 800a00c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a010:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a014:	460b      	mov	r3, r1
 800a016:	4313      	orrs	r3, r2
 800a018:	d056      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a01a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a01e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a026:	d038      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a028:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a02c:	d831      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a02e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a032:	d034      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a034:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a038:	d82b      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a03a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a03e:	d01d      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a044:	d825      	bhi.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a04a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a04e:	d00a      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a050:	e01f      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a052:	bf00      	nop
 800a054:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a058:	4ba2      	ldr	r3, [pc, #648]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05c:	4aa1      	ldr	r2, [pc, #644]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a064:	e01c      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a066:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a06a:	3308      	adds	r3, #8
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f002 fa2e 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a07a:	e011      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a07c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a080:	3328      	adds	r3, #40	@ 0x28
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f002 fad5 	bl	800c634 <RCCEx_PLL3_Config>
 800a08a:	4603      	mov	r3, r0
 800a08c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a090:	e006      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a098:	e002      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a09a:	bf00      	nop
 800a09c:	e000      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10b      	bne.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0a8:	4b8e      	ldr	r3, [pc, #568]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a0b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a0b8:	4a8a      	ldr	r2, [pc, #552]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0be:	e003      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a0c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a0c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a0d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a0de:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	d03a      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a0e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ee:	2b30      	cmp	r3, #48	@ 0x30
 800a0f0:	d01f      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a0f2:	2b30      	cmp	r3, #48	@ 0x30
 800a0f4:	d819      	bhi.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d00c      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a0fa:	2b20      	cmp	r3, #32
 800a0fc:	d815      	bhi.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d019      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a102:	2b10      	cmp	r3, #16
 800a104:	d111      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a106:	4b77      	ldr	r3, [pc, #476]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10a:	4a76      	ldr	r2, [pc, #472]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a10c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a112:	e011      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a118:	3308      	adds	r3, #8
 800a11a:	2102      	movs	r1, #2
 800a11c:	4618      	mov	r0, r3
 800a11e:	f002 f9d7 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a122:	4603      	mov	r3, r0
 800a124:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a128:	e006      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a130:	e002      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a132:	bf00      	nop
 800a134:	e000      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a136:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a138:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a140:	4b68      	ldr	r3, [pc, #416]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a144:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a14e:	4a65      	ldr	r2, [pc, #404]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a150:	430b      	orrs	r3, r1
 800a152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a154:	e003      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a15a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a15e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a16a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a16e:	2300      	movs	r3, #0
 800a170:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a174:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a178:	460b      	mov	r3, r1
 800a17a:	4313      	orrs	r3, r2
 800a17c:	d051      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a17e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a188:	d035      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a18a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a18e:	d82e      	bhi.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a190:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a194:	d031      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a196:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a19a:	d828      	bhi.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a19c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1a0:	d01a      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a1a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1a6:	d822      	bhi.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a1ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1b0:	d007      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a1b2:	e01c      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b4:	4b4b      	ldr	r3, [pc, #300]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b8:	4a4a      	ldr	r2, [pc, #296]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1c0:	e01c      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f002 f980 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1d6:	e011      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1dc:	3328      	adds	r3, #40	@ 0x28
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f002 fa27 	bl	800c634 <RCCEx_PLL3_Config>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1ec:	e006      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a1f4:	e002      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a1f6:	bf00      	nop
 800a1f8:	e000      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a1fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a204:	4b37      	ldr	r3, [pc, #220]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a208:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a20c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a212:	4a34      	ldr	r2, [pc, #208]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a214:	430b      	orrs	r3, r1
 800a216:	6513      	str	r3, [r2, #80]	@ 0x50
 800a218:	e003      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a21e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a22e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a232:	2300      	movs	r3, #0
 800a234:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a238:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4313      	orrs	r3, r2
 800a240:	d056      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a242:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a24c:	d033      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a24e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a252:	d82c      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a254:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a258:	d02f      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a25a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a25e:	d826      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a260:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a264:	d02b      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a266:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a26a:	d820      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a26c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a270:	d012      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a276:	d81a      	bhi.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d022      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a27c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a280:	d115      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a286:	3308      	adds	r3, #8
 800a288:	2101      	movs	r1, #1
 800a28a:	4618      	mov	r0, r3
 800a28c:	f002 f920 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a296:	e015      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a29c:	3328      	adds	r3, #40	@ 0x28
 800a29e:	2101      	movs	r1, #1
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 f9c7 	bl	800c634 <RCCEx_PLL3_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2ac:	e00a      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a2b4:	e006      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2b6:	bf00      	nop
 800a2b8:	e004      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2ba:	bf00      	nop
 800a2bc:	e002      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10d      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a2cc:	4b05      	ldr	r3, [pc, #20]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a2d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2da:	4a02      	ldr	r2, [pc, #8]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2e0:	e006      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a2ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a2fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a300:	2300      	movs	r3, #0
 800a302:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a306:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	d055      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a31c:	d033      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a31e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a322:	d82c      	bhi.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a328:	d02f      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a32a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32e:	d826      	bhi.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a330:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a334:	d02b      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a336:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a33a:	d820      	bhi.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a33c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a340:	d012      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a346:	d81a      	bhi.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d022      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a34c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a350:	d115      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a356:	3308      	adds	r3, #8
 800a358:	2101      	movs	r1, #1
 800a35a:	4618      	mov	r0, r3
 800a35c:	f002 f8b8 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a366:	e015      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a36c:	3328      	adds	r3, #40	@ 0x28
 800a36e:	2101      	movs	r1, #1
 800a370:	4618      	mov	r0, r3
 800a372:	f002 f95f 	bl	800c634 <RCCEx_PLL3_Config>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a37c:	e00a      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a384:	e006      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a386:	bf00      	nop
 800a388:	e004      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a38a:	bf00      	nop
 800a38c:	e002      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a38e:	bf00      	nop
 800a390:	e000      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a392:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a394:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10b      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a39c:	4bb6      	ldr	r3, [pc, #728]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a39e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3ac:	4ab2      	ldr	r2, [pc, #712]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3b2:	e003      	b.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a3b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a3bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a3c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	d02a      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800a3dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d011      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800a3e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ea:	d10a      	bne.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 f86b 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800a400:	e004      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a408:	e000      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800a40a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a40c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10a      	bne.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a414:	4b98      	ldr	r3, [pc, #608]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a418:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a41c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a422:	4a95      	ldr	r2, [pc, #596]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a424:	430b      	orrs	r3, r1
 800a426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a428:	e003      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a42e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a43e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a442:	2300      	movs	r3, #0
 800a444:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a448:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a44c:	460b      	mov	r3, r1
 800a44e:	4313      	orrs	r3, r2
 800a450:	d037      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45c:	d00e      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800a45e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a462:	d816      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x776>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d018      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800a468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a46c:	d111      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a46e:	4b82      	ldr	r3, [pc, #520]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	4a81      	ldr	r2, [pc, #516]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a47a:	e00f      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a47c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a480:	3308      	adds	r3, #8
 800a482:	2101      	movs	r1, #1
 800a484:	4618      	mov	r0, r3
 800a486:	f002 f823 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a490:	e004      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a498:	e000      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800a49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4a4:	4b74      	ldr	r3, [pc, #464]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a4ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4b2:	4a71      	ldr	r2, [pc, #452]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4b8:	e003      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a4be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a4ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4d8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	d03a      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a4e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d81d      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800a4ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800a4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f2:	bf00      	nop
 800a4f4:	0800a531 	.word	0x0800a531
 800a4f8:	0800a505 	.word	0x0800a505
 800a4fc:	0800a513 	.word	0x0800a513
 800a500:	0800a531 	.word	0x0800a531
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a504:	4b5c      	ldr	r3, [pc, #368]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a508:	4a5b      	ldr	r2, [pc, #364]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a50a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a50e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a510:	e00f      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a516:	3308      	adds	r3, #8
 800a518:	2102      	movs	r1, #2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 ffd8 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a526:	e004      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a52e:	e000      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800a530:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a532:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10a      	bne.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a53a:	4b4f      	ldr	r3, [pc, #316]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53e:	f023 0103 	bic.w	r1, r3, #3
 800a542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a548:	4a4b      	ldr	r2, [pc, #300]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a54a:	430b      	orrs	r3, r1
 800a54c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a54e:	e003      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a550:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a554:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a564:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a568:	2300      	movs	r3, #0
 800a56a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a56e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a572:	460b      	mov	r3, r1
 800a574:	4313      	orrs	r3, r2
 800a576:	f000 80a0 	beq.w	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a57a:	4b40      	ldr	r3, [pc, #256]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a3f      	ldr	r2, [pc, #252]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a586:	f7f8 f977 	bl	8002878 <HAL_GetTick>
 800a58a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a58e:	e00b      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a590:	f7f8 f972 	bl	8002878 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	2b64      	cmp	r3, #100	@ 0x64
 800a59e:	d903      	bls.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a5a6:	e005      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5a8:	4b34      	ldr	r3, [pc, #208]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0ed      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800a5b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d17a      	bne.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5bc:	4b2e      	ldr	r3, [pc, #184]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a5c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a5c8:	4053      	eors	r3, r2
 800a5ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d015      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5d2:	4b29      	ldr	r3, [pc, #164]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5de:	4b26      	ldr	r3, [pc, #152]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5e2:	4a25      	ldr	r2, [pc, #148]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5ea:	4b23      	ldr	r3, [pc, #140]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ee:	4a22      	ldr	r2, [pc, #136]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a5f6:	4a20      	ldr	r2, [pc, #128]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a5f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a5fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a602:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a60a:	d118      	bne.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a60c:	f7f8 f934 	bl	8002878 <HAL_GetTick>
 800a610:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a614:	e00d      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a616:	f7f8 f92f 	bl	8002878 <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a620:	1ad2      	subs	r2, r2, r3
 800a622:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a626:	429a      	cmp	r2, r3
 800a628:	d903      	bls.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800a630:	e005      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a632:	4b11      	ldr	r3, [pc, #68]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0eb      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800a63e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a642:	2b00      	cmp	r3, #0
 800a644:	d130      	bne.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a64a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a64e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a656:	d115      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800a658:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a668:	091a      	lsrs	r2, r3, #4
 800a66a:	4b05      	ldr	r3, [pc, #20]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	4a02      	ldr	r2, [pc, #8]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a670:	430b      	orrs	r3, r1
 800a672:	6113      	str	r3, [r2, #16]
 800a674:	e00c      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800a676:	bf00      	nop
 800a678:	58024400 	.word	0x58024400
 800a67c:	58024800 	.word	0x58024800
 800a680:	00ffffcf 	.word	0x00ffffcf
 800a684:	4bd4      	ldr	r3, [pc, #848]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	4ad3      	ldr	r2, [pc, #844]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a68a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a68e:	6113      	str	r3, [r2, #16]
 800a690:	4bd1      	ldr	r3, [pc, #836]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a692:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a69c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6a0:	4acd      	ldr	r2, [pc, #820]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6a6:	e008      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a6a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a6ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800a6b0:	e003      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a6b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a6ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	f002 0301 	and.w	r3, r2, #1
 800a6c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	f000 808b 	beq.w	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a6dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e4:	2b28      	cmp	r3, #40	@ 0x28
 800a6e6:	d86b      	bhi.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a7c9 	.word	0x0800a7c9
 800a6f4:	0800a7c1 	.word	0x0800a7c1
 800a6f8:	0800a7c1 	.word	0x0800a7c1
 800a6fc:	0800a7c1 	.word	0x0800a7c1
 800a700:	0800a7c1 	.word	0x0800a7c1
 800a704:	0800a7c1 	.word	0x0800a7c1
 800a708:	0800a7c1 	.word	0x0800a7c1
 800a70c:	0800a7c1 	.word	0x0800a7c1
 800a710:	0800a795 	.word	0x0800a795
 800a714:	0800a7c1 	.word	0x0800a7c1
 800a718:	0800a7c1 	.word	0x0800a7c1
 800a71c:	0800a7c1 	.word	0x0800a7c1
 800a720:	0800a7c1 	.word	0x0800a7c1
 800a724:	0800a7c1 	.word	0x0800a7c1
 800a728:	0800a7c1 	.word	0x0800a7c1
 800a72c:	0800a7c1 	.word	0x0800a7c1
 800a730:	0800a7ab 	.word	0x0800a7ab
 800a734:	0800a7c1 	.word	0x0800a7c1
 800a738:	0800a7c1 	.word	0x0800a7c1
 800a73c:	0800a7c1 	.word	0x0800a7c1
 800a740:	0800a7c1 	.word	0x0800a7c1
 800a744:	0800a7c1 	.word	0x0800a7c1
 800a748:	0800a7c1 	.word	0x0800a7c1
 800a74c:	0800a7c1 	.word	0x0800a7c1
 800a750:	0800a7c9 	.word	0x0800a7c9
 800a754:	0800a7c1 	.word	0x0800a7c1
 800a758:	0800a7c1 	.word	0x0800a7c1
 800a75c:	0800a7c1 	.word	0x0800a7c1
 800a760:	0800a7c1 	.word	0x0800a7c1
 800a764:	0800a7c1 	.word	0x0800a7c1
 800a768:	0800a7c1 	.word	0x0800a7c1
 800a76c:	0800a7c1 	.word	0x0800a7c1
 800a770:	0800a7c9 	.word	0x0800a7c9
 800a774:	0800a7c1 	.word	0x0800a7c1
 800a778:	0800a7c1 	.word	0x0800a7c1
 800a77c:	0800a7c1 	.word	0x0800a7c1
 800a780:	0800a7c1 	.word	0x0800a7c1
 800a784:	0800a7c1 	.word	0x0800a7c1
 800a788:	0800a7c1 	.word	0x0800a7c1
 800a78c:	0800a7c1 	.word	0x0800a7c1
 800a790:	0800a7c9 	.word	0x0800a7c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a798:	3308      	adds	r3, #8
 800a79a:	2101      	movs	r1, #1
 800a79c:	4618      	mov	r0, r3
 800a79e:	f001 fe97 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7a8:	e00f      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a7ae:	3328      	adds	r3, #40	@ 0x28
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 ff3e 	bl	800c634 <RCCEx_PLL3_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7be:	e004      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a7c6:	e000      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800a7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10b      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a7d2:	4b81      	ldr	r3, [pc, #516]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a7da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7e2:	4a7d      	ldr	r2, [pc, #500]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7e8:	e003      	b.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a7ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a7f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f002 0302 	and.w	r3, r2, #2
 800a7fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a802:	2300      	movs	r3, #0
 800a804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a808:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d042      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a818:	2b05      	cmp	r3, #5
 800a81a:	d825      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800a81c:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a871 	.word	0x0800a871
 800a828:	0800a83d 	.word	0x0800a83d
 800a82c:	0800a853 	.word	0x0800a853
 800a830:	0800a871 	.word	0x0800a871
 800a834:	0800a871 	.word	0x0800a871
 800a838:	0800a871 	.word	0x0800a871
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a83c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a840:	3308      	adds	r3, #8
 800a842:	2101      	movs	r1, #1
 800a844:	4618      	mov	r0, r3
 800a846:	f001 fe43 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a850:	e00f      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a856:	3328      	adds	r3, #40	@ 0x28
 800a858:	2101      	movs	r1, #1
 800a85a:	4618      	mov	r0, r3
 800a85c:	f001 feea 	bl	800c634 <RCCEx_PLL3_Config>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a866:	e004      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a86e:	e000      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800a870:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a872:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10a      	bne.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a87a:	4b57      	ldr	r3, [pc, #348]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a87e:	f023 0107 	bic.w	r1, r3, #7
 800a882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a888:	4a53      	ldr	r2, [pc, #332]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a88a:	430b      	orrs	r3, r1
 800a88c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a88e:	e003      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a890:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a894:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f002 0304 	and.w	r3, r2, #4
 800a8a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	d044      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a8b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a8bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8c0:	2b05      	cmp	r3, #5
 800a8c2:	d825      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800a8c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a919 	.word	0x0800a919
 800a8d0:	0800a8e5 	.word	0x0800a8e5
 800a8d4:	0800a8fb 	.word	0x0800a8fb
 800a8d8:	0800a919 	.word	0x0800a919
 800a8dc:	0800a919 	.word	0x0800a919
 800a8e0:	0800a919 	.word	0x0800a919
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f001 fdef 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8f8:	e00f      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a8fe:	3328      	adds	r3, #40	@ 0x28
 800a900:	2101      	movs	r1, #1
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fe96 	bl	800c634 <RCCEx_PLL3_Config>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a90e:	e004      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a916:	e000      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800a918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a91a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10b      	bne.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a922:	4b2d      	ldr	r3, [pc, #180]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a926:	f023 0107 	bic.w	r1, r3, #7
 800a92a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a92e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a932:	4a29      	ldr	r2, [pc, #164]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800a934:	430b      	orrs	r3, r1
 800a936:	6593      	str	r3, [r2, #88]	@ 0x58
 800a938:	e003      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a93a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a93e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f002 0320 	and.w	r3, r2, #32
 800a94e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a952:	2300      	movs	r3, #0
 800a954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a95c:	460b      	mov	r3, r1
 800a95e:	4313      	orrs	r3, r2
 800a960:	d057      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a96a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a96e:	d035      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800a970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a974:	d82c      	bhi.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a97a:	d031      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800a97c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a980:	d826      	bhi.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a982:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a986:	d02d      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800a988:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a98c:	d820      	bhi.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a98e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a992:	d012      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800a994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a998:	d81a      	bhi.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d024      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800a99e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9a2:	d115      	bne.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f001 fd8f 	bl	800c4d0 <RCCEx_PLL2_Config>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9b8:	e017      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a9be:	3328      	adds	r3, #40	@ 0x28
 800a9c0:	2102      	movs	r1, #2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 fe36 	bl	800c634 <RCCEx_PLL3_Config>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9ce:	e00c      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a9d6:	e008      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800a9d8:	58024400 	.word	0x58024400
        break;
 800a9dc:	bf00      	nop
 800a9de:	e004      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a9e0:	bf00      	nop
 800a9e2:	e002      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a9e4:	bf00      	nop
 800a9e6:	e000      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a9e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10b      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9f2:	4bc2      	ldr	r3, [pc, #776]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a9fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a9fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa02:	4abe      	ldr	r2, [pc, #760]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aa04:	430b      	orrs	r3, r1
 800aa06:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa08:	e003      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800aa0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aa1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aa22:	2300      	movs	r3, #0
 800aa24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aa28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	d055      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa3e:	d033      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800aa40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa44:	d82c      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa4a:	d02f      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800aa4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa50:	d826      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800aa52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa56:	d02b      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800aa58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa5c:	d820      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800aa5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa62:	d012      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800aa64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa68:	d81a      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d022      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800aa6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa72:	d115      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa78:	3308      	adds	r3, #8
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 fd27 	bl	800c4d0 <RCCEx_PLL2_Config>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa88:	e015      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa8e:	3328      	adds	r3, #40	@ 0x28
 800aa90:	2102      	movs	r1, #2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 fdce 	bl	800c634 <RCCEx_PLL3_Config>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa9e:	e00a      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800aaa6:	e006      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800aaa8:	bf00      	nop
 800aaaa:	e004      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800aaac:	bf00      	nop
 800aaae:	e002      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800aab0:	bf00      	nop
 800aab2:	e000      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800aab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aab6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10b      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aabe:	4b8f      	ldr	r3, [pc, #572]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aac2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aaca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aace:	4a8b      	ldr	r2, [pc, #556]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aad0:	430b      	orrs	r3, r1
 800aad2:	6593      	str	r3, [r2, #88]	@ 0x58
 800aad4:	e003      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800aada:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aaea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aaf4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4313      	orrs	r3, r2
 800aafc:	d055      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aafe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ab02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab0a:	d033      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800ab0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab10:	d82c      	bhi.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800ab12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab16:	d02f      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800ab18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab1c:	d826      	bhi.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800ab1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab22:	d02b      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800ab24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab28:	d820      	bhi.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800ab2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab2e:	d012      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800ab30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab34:	d81a      	bhi.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d022      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800ab3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab3e:	d115      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ab44:	3308      	adds	r3, #8
 800ab46:	2100      	movs	r1, #0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fcc1 	bl	800c4d0 <RCCEx_PLL2_Config>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab54:	e015      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ab5a:	3328      	adds	r3, #40	@ 0x28
 800ab5c:	2102      	movs	r1, #2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 fd68 	bl	800c634 <RCCEx_PLL3_Config>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab6a:	e00a      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ab72:	e006      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800ab74:	bf00      	nop
 800ab76:	e004      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800ab78:	bf00      	nop
 800ab7a:	e002      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800ab7c:	bf00      	nop
 800ab7e:	e000      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800ab80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10b      	bne.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab8a:	4b5c      	ldr	r3, [pc, #368]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ab8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab8e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ab92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ab96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab9a:	4a58      	ldr	r2, [pc, #352]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aba0:	e003      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800aba6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800abaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f002 0308 	and.w	r3, r2, #8
 800abb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abba:	2300      	movs	r3, #0
 800abbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abc0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800abc4:	460b      	mov	r3, r1
 800abc6:	4313      	orrs	r3, r2
 800abc8:	d01e      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800abca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800abce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abd6:	d10c      	bne.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800abdc:	3328      	adds	r3, #40	@ 0x28
 800abde:	2102      	movs	r1, #2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 fd27 	bl	800c634 <RCCEx_PLL3_Config>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800abf2:	4b42      	ldr	r3, [pc, #264]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800abf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800abfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac02:	4a3e      	ldr	r2, [pc, #248]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f002 0310 	and.w	r3, r2, #16
 800ac14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ac22:	460b      	mov	r3, r1
 800ac24:	4313      	orrs	r3, r2
 800ac26:	d01e      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac34:	d10c      	bne.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac3a:	3328      	adds	r3, #40	@ 0x28
 800ac3c:	2102      	movs	r1, #2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f001 fcf8 	bl	800c634 <RCCEx_PLL3_Config>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac50:	4b2a      	ldr	r3, [pc, #168]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac60:	4a26      	ldr	r2, [pc, #152]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac62:	430b      	orrs	r3, r1
 800ac64:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ac72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac76:	2300      	movs	r3, #0
 800ac78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ac80:	460b      	mov	r3, r1
 800ac82:	4313      	orrs	r3, r2
 800ac84:	d040      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ac8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac92:	d022      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800ac94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac98:	d81b      	bhi.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800ac9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aca2:	d00b      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800aca4:	e015      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800acaa:	3308      	adds	r3, #8
 800acac:	2100      	movs	r1, #0
 800acae:	4618      	mov	r0, r3
 800acb0:	f001 fc0e 	bl	800c4d0 <RCCEx_PLL2_Config>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acba:	e00f      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800acc0:	3328      	adds	r3, #40	@ 0x28
 800acc2:	2102      	movs	r1, #2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f001 fcb5 	bl	800c634 <RCCEx_PLL3_Config>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acd0:	e004      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800acd8:	e000      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800acda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10d      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ace4:	4b05      	ldr	r3, [pc, #20]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ace6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ace8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800acec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800acf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800acf4:	4a01      	ldr	r2, [pc, #4]	@ (800acfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800acf6:	430b      	orrs	r3, r1
 800acf8:	6593      	str	r3, [r2, #88]	@ 0x58
 800acfa:	e005      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800acfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ad04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ad14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad16:	2300      	movs	r3, #0
 800ad18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4313      	orrs	r3, r2
 800ad22:	d03b      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ad24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ad28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad30:	d01f      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800ad32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad36:	d818      	bhi.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800ad38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad3c:	d003      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800ad3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad42:	d007      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800ad44:	e011      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad46:	4b64      	ldr	r3, [pc, #400]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ad48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4a:	4a63      	ldr	r2, [pc, #396]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ad4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad52:	e00f      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ad58:	3328      	adds	r3, #40	@ 0x28
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f001 fc69 	bl	800c634 <RCCEx_PLL3_Config>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad68:	e004      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ad70:	e000      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800ad72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad7c:	4b56      	ldr	r3, [pc, #344]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ad7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad80:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ad88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad8c:	4a52      	ldr	r2, [pc, #328]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad92:	e003      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ad98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ada8:	673b      	str	r3, [r7, #112]	@ 0x70
 800adaa:	2300      	movs	r3, #0
 800adac:	677b      	str	r3, [r7, #116]	@ 0x74
 800adae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800adb2:	460b      	mov	r3, r1
 800adb4:	4313      	orrs	r3, r2
 800adb6:	d031      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800adb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800adbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800adc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc6:	d007      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800adc8:	e011      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adca:	4b43      	ldr	r3, [pc, #268]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800adcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adce:	4a42      	ldr	r2, [pc, #264]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800add0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800add4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800add6:	e00e      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800add8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800addc:	3308      	adds	r3, #8
 800adde:	2102      	movs	r1, #2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fb75 	bl	800c4d0 <RCCEx_PLL2_Config>
 800ade6:	4603      	mov	r3, r0
 800ade8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800adec:	e003      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800adf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800adfe:	4b36      	ldr	r3, [pc, #216]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ae00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae0c:	4a32      	ldr	r2, [pc, #200]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ae18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ae28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae32:	460b      	mov	r3, r1
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d00c      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae3c:	3328      	adds	r3, #40	@ 0x28
 800ae3e:	2102      	movs	r1, #2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 fbf7 	bl	800c634 <RCCEx_PLL3_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae5e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae60:	2300      	movs	r3, #0
 800ae62:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	d03a      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae7a:	d018      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800ae7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae80:	d811      	bhi.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800ae82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae86:	d014      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800ae88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae8c:	d80b      	bhi.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d011      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800ae92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae96:	d106      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae98:	4b0f      	ldr	r3, [pc, #60]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9c:	4a0e      	ldr	r2, [pc, #56]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ae9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aea4:	e008      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800aeac:	e004      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800aeae:	bf00      	nop
 800aeb0:	e002      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800aeb2:	bf00      	nop
 800aeb4:	e000      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800aeb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10d      	bne.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aec0:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800aec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aed0:	4a01      	ldr	r2, [pc, #4]	@ (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800aed2:	430b      	orrs	r3, r1
 800aed4:	6553      	str	r3, [r2, #84]	@ 0x54
 800aed6:	e005      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800aed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aedc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800aee0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aef2:	2300      	movs	r3, #0
 800aef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aef6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aefa:	460b      	mov	r3, r1
 800aefc:	4313      	orrs	r3, r2
 800aefe:	d009      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af00:	4baa      	ldr	r3, [pc, #680]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af0e:	4aa7      	ldr	r2, [pc, #668]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af10:	430b      	orrs	r3, r1
 800af12:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800af14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800af20:	653b      	str	r3, [r7, #80]	@ 0x50
 800af22:	2300      	movs	r3, #0
 800af24:	657b      	str	r3, [r7, #84]	@ 0x54
 800af26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800af2a:	460b      	mov	r3, r1
 800af2c:	4313      	orrs	r3, r2
 800af2e:	d00a      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800af30:	4b9e      	ldr	r3, [pc, #632]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800af38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800af40:	4a9a      	ldr	r2, [pc, #616]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af42:	430b      	orrs	r3, r1
 800af44:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af54:	2300      	movs	r3, #0
 800af56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af5c:	460b      	mov	r3, r1
 800af5e:	4313      	orrs	r3, r2
 800af60:	d009      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af62:	4b92      	ldr	r3, [pc, #584]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af66:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800af6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af70:	4a8e      	ldr	r2, [pc, #568]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af72:	430b      	orrs	r3, r1
 800af74:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800af82:	643b      	str	r3, [r7, #64]	@ 0x40
 800af84:	2300      	movs	r3, #0
 800af86:	647b      	str	r3, [r7, #68]	@ 0x44
 800af88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800af8c:	460b      	mov	r3, r1
 800af8e:	4313      	orrs	r3, r2
 800af90:	d00e      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af92:	4b86      	ldr	r3, [pc, #536]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	4a85      	ldr	r2, [pc, #532]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800af98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af9c:	6113      	str	r3, [r2, #16]
 800af9e:	4b83      	ldr	r3, [pc, #524]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800afa0:	6919      	ldr	r1, [r3, #16]
 800afa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800afa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800afaa:	4a80      	ldr	r2, [pc, #512]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800afac:	430b      	orrs	r3, r1
 800afae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800afb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800afbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afbe:	2300      	movs	r3, #0
 800afc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afc2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d009      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800afcc:	4b77      	ldr	r3, [pc, #476]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800afce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afd0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800afd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800afd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afda:	4a74      	ldr	r2, [pc, #464]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800afdc:	430b      	orrs	r3, r1
 800afde:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800afec:	633b      	str	r3, [r7, #48]	@ 0x30
 800afee:	2300      	movs	r3, #0
 800aff0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aff6:	460b      	mov	r3, r1
 800aff8:	4313      	orrs	r3, r2
 800affa:	d00a      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800affc:	4b6b      	ldr	r3, [pc, #428]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800affe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b000:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00c:	4a67      	ldr	r2, [pc, #412]	@ (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800b00e:	430b      	orrs	r3, r1
 800b010:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	2100      	movs	r1, #0
 800b01c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b024:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b028:	460b      	mov	r3, r1
 800b02a:	4313      	orrs	r3, r2
 800b02c:	d011      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b02e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b032:	3308      	adds	r3, #8
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f001 fa4a 	bl	800c4d0 <RCCEx_PLL2_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800b042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b04e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	2100      	movs	r1, #0
 800b05c:	6239      	str	r1, [r7, #32]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	627b      	str	r3, [r7, #36]	@ 0x24
 800b064:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b068:	460b      	mov	r3, r1
 800b06a:	4313      	orrs	r3, r2
 800b06c:	d011      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b06e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b072:	3308      	adds	r3, #8
 800b074:	2101      	movs	r1, #1
 800b076:	4618      	mov	r0, r3
 800b078:	f001 fa2a 	bl	800c4d0 <RCCEx_PLL2_Config>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800b082:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b08e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	2100      	movs	r1, #0
 800b09c:	61b9      	str	r1, [r7, #24]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	61fb      	str	r3, [r7, #28]
 800b0a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	d011      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	2102      	movs	r1, #2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 fa0a 	bl	800c4d0 <RCCEx_PLL2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800b0c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b0ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b0d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	2100      	movs	r1, #0
 800b0dc:	6139      	str	r1, [r7, #16]
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	d011      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b0f2:	3328      	adds	r3, #40	@ 0x28
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f001 fa9c 	bl	800c634 <RCCEx_PLL3_Config>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800b102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b10a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b10e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	2100      	movs	r1, #0
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	f003 0310 	and.w	r3, r3, #16
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b128:	460b      	mov	r3, r1
 800b12a:	4313      	orrs	r3, r2
 800b12c:	d011      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b12e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b132:	3328      	adds	r3, #40	@ 0x28
 800b134:	2101      	movs	r1, #1
 800b136:	4618      	mov	r0, r3
 800b138:	f001 fa7c 	bl	800c634 <RCCEx_PLL3_Config>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800b142:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b14e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	2100      	movs	r1, #0
 800b15c:	6039      	str	r1, [r7, #0]
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	607b      	str	r3, [r7, #4]
 800b164:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b168:	460b      	mov	r3, r1
 800b16a:	4313      	orrs	r3, r2
 800b16c:	d011      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b16e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b172:	3328      	adds	r3, #40	@ 0x28
 800b174:	2102      	movs	r1, #2
 800b176:	4618      	mov	r0, r3
 800b178:	f001 fa5c 	bl	800c634 <RCCEx_PLL3_Config>
 800b17c:	4603      	mov	r3, r0
 800b17e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800b182:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b18a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b18e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800b192:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	e000      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1ac:	58024400 	.word	0x58024400

0800b1b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b090      	sub	sp, #64	@ 0x40
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b1c2:	430b      	orrs	r3, r1
 800b1c4:	f040 8094 	bne.w	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b1c8:	4b9e      	ldr	r3, [pc, #632]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1cc:	f003 0307 	and.w	r3, r3, #7
 800b1d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	f200 8087 	bhi.w	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b1da:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b1f5 	.word	0x0800b1f5
 800b1e4:	0800b21d 	.word	0x0800b21d
 800b1e8:	0800b245 	.word	0x0800b245
 800b1ec:	0800b2e1 	.word	0x0800b2e1
 800b1f0:	0800b26d 	.word	0x0800b26d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1f4:	4b93      	ldr	r3, [pc, #588]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b200:	d108      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b206:	4618      	mov	r0, r3
 800b208:	f001 f810 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b210:	f000 bd45 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b218:	f000 bd41 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b21c:	4b89      	ldr	r3, [pc, #548]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b228:	d108      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22a:	f107 0318 	add.w	r3, r7, #24
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fd54 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b238:	f000 bd31 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b240:	f000 bd2d 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b244:	4b7f      	ldr	r3, [pc, #508]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b24c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b250:	d108      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b252:	f107 030c 	add.w	r3, r7, #12
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fe94 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b260:	f000 bd1d 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b268:	f000 bd19 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b26c:	4b75      	ldr	r3, [pc, #468]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b26e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b270:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b274:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b276:	4b73      	ldr	r3, [pc, #460]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0304 	and.w	r3, r3, #4
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d10c      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b288:	4b6e      	ldr	r3, [pc, #440]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	08db      	lsrs	r3, r3, #3
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	4a6d      	ldr	r2, [pc, #436]	@ (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b294:	fa22 f303 	lsr.w	r3, r2, r3
 800b298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b29a:	e01f      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b29c:	4b69      	ldr	r3, [pc, #420]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2a8:	d106      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2b0:	d102      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2b2:	4b66      	ldr	r3, [pc, #408]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2b6:	e011      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2b8:	4b62      	ldr	r3, [pc, #392]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2c4:	d106      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2cc:	d102      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2ce:	4b60      	ldr	r3, [pc, #384]	@ (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2d2:	e003      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2d8:	f000 bce1 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2dc:	f000 bcdf 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2e0:	4b5c      	ldr	r3, [pc, #368]	@ (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e4:	f000 bcdb 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ec:	f000 bcd7 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	f040 80ad 	bne.w	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b2fe:	4b51      	ldr	r3, [pc, #324]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b302:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b306:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b30e:	d056      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b316:	f200 8090 	bhi.w	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	2bc0      	cmp	r3, #192	@ 0xc0
 800b31e:	f000 8088 	beq.w	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b324:	2bc0      	cmp	r3, #192	@ 0xc0
 800b326:	f200 8088 	bhi.w	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	2b80      	cmp	r3, #128	@ 0x80
 800b32e:	d032      	beq.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b332:	2b80      	cmp	r3, #128	@ 0x80
 800b334:	f200 8081 	bhi.w	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	2b40      	cmp	r3, #64	@ 0x40
 800b342:	d014      	beq.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b344:	e079      	b.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b346:	4b3f      	ldr	r3, [pc, #252]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b34e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b352:	d108      	bne.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 ff67 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b362:	f000 bc9c 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36a:	f000 bc98 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b36e:	4b35      	ldr	r3, [pc, #212]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b37a:	d108      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b37c:	f107 0318 	add.w	r3, r7, #24
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fcab 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b38a:	f000 bc88 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b392:	f000 bc84 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b396:	4b2b      	ldr	r3, [pc, #172]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3a2:	d108      	bne.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3a4:	f107 030c 	add.w	r3, r7, #12
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fdeb 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b2:	f000 bc74 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ba:	f000 bc70 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3be:	4b21      	ldr	r3, [pc, #132]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3c8:	4b1e      	ldr	r3, [pc, #120]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b04      	cmp	r3, #4
 800b3d2:	d10c      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3da:	4b1a      	ldr	r3, [pc, #104]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	08db      	lsrs	r3, r3, #3
 800b3e0:	f003 0303 	and.w	r3, r3, #3
 800b3e4:	4a18      	ldr	r2, [pc, #96]	@ (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ec:	e01f      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3ee:	4b15      	ldr	r3, [pc, #84]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3fa:	d106      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b402:	d102      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b404:	4b11      	ldr	r3, [pc, #68]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b408:	e011      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b40a:	4b0e      	ldr	r3, [pc, #56]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b416:	d106      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b41e:	d102      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b420:	4b0b      	ldr	r3, [pc, #44]	@ (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b424:	e003      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b42a:	f000 bc38 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b42e:	f000 bc36 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b432:	4b08      	ldr	r3, [pc, #32]	@ (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b436:	f000 bc32 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b43e:	f000 bc2e 	b.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b442:	bf00      	nop
 800b444:	58024400 	.word	0x58024400
 800b448:	03d09000 	.word	0x03d09000
 800b44c:	003d0900 	.word	0x003d0900
 800b450:	017d7840 	.word	0x017d7840
 800b454:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b45c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b460:	430b      	orrs	r3, r1
 800b462:	f040 809c 	bne.w	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b466:	4b9e      	ldr	r3, [pc, #632]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b46a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b46e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b476:	d054      	beq.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b47e:	f200 808b 	bhi.w	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b488:	f000 8083 	beq.w	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b492:	f200 8081 	bhi.w	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b49c:	d02f      	beq.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4a4:	d878      	bhi.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4b2:	d012      	beq.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b4b4:	e070      	b.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4b6:	4b8a      	ldr	r3, [pc, #552]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4c2:	d107      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 feaf 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4d2:	e3e4      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d8:	e3e1      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4da:	4b81      	ldr	r3, [pc, #516]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4e6:	d107      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e8:	f107 0318 	add.w	r3, r7, #24
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fbf5 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4f6:	e3d2      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4fc:	e3cf      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4fe:	4b78      	ldr	r3, [pc, #480]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b50a:	d107      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b50c:	f107 030c 	add.w	r3, r7, #12
 800b510:	4618      	mov	r0, r3
 800b512:	f000 fd37 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b51a:	e3c0      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b520:	e3bd      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b522:	4b6f      	ldr	r3, [pc, #444]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b526:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b52a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b52c:	4b6c      	ldr	r3, [pc, #432]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b04      	cmp	r3, #4
 800b536:	d10c      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b53e:	4b68      	ldr	r3, [pc, #416]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	08db      	lsrs	r3, r3, #3
 800b544:	f003 0303 	and.w	r3, r3, #3
 800b548:	4a66      	ldr	r2, [pc, #408]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b54a:	fa22 f303 	lsr.w	r3, r2, r3
 800b54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b550:	e01e      	b.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b552:	4b63      	ldr	r3, [pc, #396]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b55e:	d106      	bne.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b566:	d102      	bne.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b568:	4b5f      	ldr	r3, [pc, #380]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b56c:	e010      	b.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b56e:	4b5c      	ldr	r3, [pc, #368]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b57a:	d106      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b582:	d102      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b584:	4b59      	ldr	r3, [pc, #356]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b588:	e002      	b.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b58e:	e386      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b590:	e385      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b592:	4b57      	ldr	r3, [pc, #348]	@ (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b596:	e382      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b59c:	e37f      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5a2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b5a6:	430b      	orrs	r3, r1
 800b5a8:	f040 80a7 	bne.w	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b5ac:	4b4c      	ldr	r3, [pc, #304]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5b0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b5b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5bc:	d055      	beq.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b5c4:	f200 8096 	bhi.w	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5ce:	f000 8084 	beq.w	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5d8:	f200 808c 	bhi.w	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5e2:	d030      	beq.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5ea:	f200 8083 	bhi.w	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5fa:	d012      	beq.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b5fc:	e07a      	b.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5fe:	4b38      	ldr	r3, [pc, #224]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b60a:	d107      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b60c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fe0b 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b61a:	e340      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b620:	e33d      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b622:	4b2f      	ldr	r3, [pc, #188]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b62a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b62e:	d107      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b630:	f107 0318 	add.w	r3, r7, #24
 800b634:	4618      	mov	r0, r3
 800b636:	f000 fb51 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b63e:	e32e      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b644:	e32b      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b646:	4b26      	ldr	r3, [pc, #152]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b64e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b652:	d107      	bne.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b654:	f107 030c 	add.w	r3, r7, #12
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 fc93 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b662:	e31c      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b668:	e319      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b66a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b66c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b66e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b672:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b674:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0304 	and.w	r3, r3, #4
 800b67c:	2b04      	cmp	r3, #4
 800b67e:	d10c      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b682:	2b00      	cmp	r3, #0
 800b684:	d109      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b686:	4b16      	ldr	r3, [pc, #88]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	08db      	lsrs	r3, r3, #3
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	4a14      	ldr	r2, [pc, #80]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b692:	fa22 f303 	lsr.w	r3, r2, r3
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b698:	e01e      	b.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b69a:	4b11      	ldr	r3, [pc, #68]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6a6:	d106      	bne.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6ae:	d102      	bne.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6b4:	e010      	b.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6c2:	d106      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6ca:	d102      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6cc:	4b07      	ldr	r3, [pc, #28]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6d0:	e002      	b.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6d6:	e2e2      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6d8:	e2e1      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6da:	4b05      	ldr	r3, [pc, #20]	@ (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6de:	e2de      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6e0:	58024400 	.word	0x58024400
 800b6e4:	03d09000 	.word	0x03d09000
 800b6e8:	003d0900 	.word	0x003d0900
 800b6ec:	017d7840 	.word	0x017d7840
 800b6f0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6f8:	e2d1      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b702:	430b      	orrs	r3, r1
 800b704:	f040 809c 	bne.w	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b708:	4b93      	ldr	r3, [pc, #588]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b70c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b710:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b718:	d054      	beq.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b720:	f200 808b 	bhi.w	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b726:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b72a:	f000 8083 	beq.w	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b730:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b734:	f200 8081 	bhi.w	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b73e:	d02f      	beq.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b746:	d878      	bhi.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d004      	beq.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b754:	d012      	beq.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b756:	e070      	b.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b758:	4b7f      	ldr	r3, [pc, #508]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b764:	d107      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fd5e 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b774:	e293      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b77a:	e290      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b77c:	4b76      	ldr	r3, [pc, #472]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b788:	d107      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b78a:	f107 0318 	add.w	r3, r7, #24
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 faa4 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b798:	e281      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b79e:	e27e      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7a0:	4b6d      	ldr	r3, [pc, #436]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ac:	d107      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ae:	f107 030c 	add.w	r3, r7, #12
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 fbe6 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7bc:	e26f      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7c2:	e26c      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7c4:	4b64      	ldr	r3, [pc, #400]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7ce:	4b62      	ldr	r3, [pc, #392]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d10c      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d109      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7e0:	4b5d      	ldr	r3, [pc, #372]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	08db      	lsrs	r3, r3, #3
 800b7e6:	f003 0303 	and.w	r3, r3, #3
 800b7ea:	4a5c      	ldr	r2, [pc, #368]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7f2:	e01e      	b.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7f4:	4b58      	ldr	r3, [pc, #352]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b800:	d106      	bne.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b808:	d102      	bne.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b80a:	4b55      	ldr	r3, [pc, #340]	@ (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b80e:	e010      	b.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b810:	4b51      	ldr	r3, [pc, #324]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b81c:	d106      	bne.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b824:	d102      	bne.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b826:	4b4f      	ldr	r3, [pc, #316]	@ (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b82a:	e002      	b.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b830:	e235      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b832:	e234      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b834:	4b4c      	ldr	r3, [pc, #304]	@ (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b838:	e231      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b83e:	e22e      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b844:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b848:	430b      	orrs	r3, r1
 800b84a:	f040 808f 	bne.w	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b84e:	4b42      	ldr	r3, [pc, #264]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b852:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b856:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b85e:	d06b      	beq.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b866:	d874      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b86e:	d056      	beq.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b872:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b876:	d86c      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b87e:	d03b      	beq.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b882:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b886:	d864      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b88e:	d021      	beq.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b896:	d85c      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d004      	beq.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a4:	d004      	beq.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b8a6:	e054      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b8a8:	f7fe f9ca 	bl	8009c40 <HAL_RCC_GetPCLK1Freq>
 800b8ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8ae:	e1f6      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8b0:	4b29      	ldr	r3, [pc, #164]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8bc:	d107      	bne.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8be:	f107 0318 	add.w	r3, r7, #24
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 fa0a 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8cc:	e1e7      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8d2:	e1e4      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8d4:	4b20      	ldr	r3, [pc, #128]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8e0:	d107      	bne.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8e2:	f107 030c 	add.w	r3, r7, #12
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 fb4c 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8f0:	e1d5      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f6:	e1d2      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8f8:	4b17      	ldr	r3, [pc, #92]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0304 	and.w	r3, r3, #4
 800b900:	2b04      	cmp	r3, #4
 800b902:	d109      	bne.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b904:	4b14      	ldr	r3, [pc, #80]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	08db      	lsrs	r3, r3, #3
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	4a13      	ldr	r2, [pc, #76]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b910:	fa22 f303 	lsr.w	r3, r2, r3
 800b914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b916:	e1c2      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91c:	e1bf      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b91e:	4b0e      	ldr	r3, [pc, #56]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b92a:	d102      	bne.n	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b92c:	4b0c      	ldr	r3, [pc, #48]	@ (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b930:	e1b5      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b936:	e1b2      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b938:	4b07      	ldr	r3, [pc, #28]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b944:	d102      	bne.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b946:	4b07      	ldr	r3, [pc, #28]	@ (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b94a:	e1a8      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b950:	e1a5      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b956:	e1a2      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b958:	58024400 	.word	0x58024400
 800b95c:	03d09000 	.word	0x03d09000
 800b960:	003d0900 	.word	0x003d0900
 800b964:	017d7840 	.word	0x017d7840
 800b968:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b970:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b974:	430b      	orrs	r3, r1
 800b976:	d173      	bne.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b978:	4b9c      	ldr	r3, [pc, #624]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b97a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b97c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b980:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b988:	d02f      	beq.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b990:	d863      	bhi.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b99e:	d012      	beq.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b9a0:	e05b      	b.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9a2:	4b92      	ldr	r3, [pc, #584]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9ae:	d107      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9b0:	f107 0318 	add.w	r3, r7, #24
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 f991 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9be:	e16e      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c4:	e16b      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9c6:	4b89      	ldr	r3, [pc, #548]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9d2:	d107      	bne.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9d4:	f107 030c 	add.w	r3, r7, #12
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 fad3 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e2:	e15c      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9e8:	e159      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9ea:	4b80      	ldr	r3, [pc, #512]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9f4:	4b7d      	ldr	r3, [pc, #500]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b04      	cmp	r3, #4
 800b9fe:	d10c      	bne.n	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ba00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d109      	bne.n	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba06:	4b79      	ldr	r3, [pc, #484]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	08db      	lsrs	r3, r3, #3
 800ba0c:	f003 0303 	and.w	r3, r3, #3
 800ba10:	4a77      	ldr	r2, [pc, #476]	@ (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ba12:	fa22 f303 	lsr.w	r3, r2, r3
 800ba16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba18:	e01e      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba1a:	4b74      	ldr	r3, [pc, #464]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba26:	d106      	bne.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ba28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba2e:	d102      	bne.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba30:	4b70      	ldr	r3, [pc, #448]	@ (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba34:	e010      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba36:	4b6d      	ldr	r3, [pc, #436]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba42:	d106      	bne.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ba44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba4a:	d102      	bne.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba4c:	4b6a      	ldr	r3, [pc, #424]	@ (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba50:	e002      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba56:	e122      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba58:	e121      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba5e:	e11e      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ba60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba64:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	d133      	bne.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ba6c:	4b5f      	ldr	r3, [pc, #380]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d004      	beq.n	800ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba82:	d012      	beq.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ba84:	e023      	b.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba86:	4b59      	ldr	r3, [pc, #356]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba92:	d107      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fbc7 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa2:	e0fc      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa8:	e0f9      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baaa:	4b50      	ldr	r3, [pc, #320]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bab6:	d107      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bab8:	f107 0318 	add.w	r3, r7, #24
 800babc:	4618      	mov	r0, r3
 800babe:	f000 f90d 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac6:	e0ea      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bacc:	e0e7      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad2:	e0e4      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800badc:	430b      	orrs	r3, r1
 800bade:	f040 808d 	bne.w	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bae2:	4b42      	ldr	r3, [pc, #264]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800baea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baf2:	d06b      	beq.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bafa:	d874      	bhi.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb02:	d056      	beq.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb0a:	d86c      	bhi.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb12:	d03b      	beq.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb1a:	d864      	bhi.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb22:	d021      	beq.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb2a:	d85c      	bhi.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb38:	d004      	beq.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bb3a:	e054      	b.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bb3c:	f000 f8b8 	bl	800bcb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb42:	e0ac      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb44:	4b29      	ldr	r3, [pc, #164]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb50:	d107      	bne.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb52:	f107 0318 	add.w	r3, r7, #24
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f8c0 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb60:	e09d      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb66:	e09a      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb68:	4b20      	ldr	r3, [pc, #128]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb74:	d107      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb76:	f107 030c 	add.w	r3, r7, #12
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 fa02 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb84:	e08b      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb8a:	e088      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb8c:	4b17      	ldr	r3, [pc, #92]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 0304 	and.w	r3, r3, #4
 800bb94:	2b04      	cmp	r3, #4
 800bb96:	d109      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb98:	4b14      	ldr	r3, [pc, #80]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	08db      	lsrs	r3, r3, #3
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	4a13      	ldr	r2, [pc, #76]	@ (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bba4:	fa22 f303 	lsr.w	r3, r2, r3
 800bba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbaa:	e078      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb0:	e075      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bbb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbbe:	d102      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc4:	e06b      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbca:	e068      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bbcc:	4b07      	ldr	r3, [pc, #28]	@ (800bbec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbd8:	d102      	bne.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bbda:	4b07      	ldr	r3, [pc, #28]	@ (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbde:	e05e      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe4:	e05b      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbea:	e058      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	03d09000 	.word	0x03d09000
 800bbf4:	003d0900 	.word	0x003d0900
 800bbf8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bc04:	430b      	orrs	r3, r1
 800bc06:	d148      	bne.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bc08:	4b27      	ldr	r3, [pc, #156]	@ (800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc18:	d02a      	beq.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc20:	d838      	bhi.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc2e:	d00d      	beq.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bc30:	e030      	b.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc32:	4b1d      	ldr	r3, [pc, #116]	@ (800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc3e:	d102      	bne.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bc40:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc44:	e02b      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc4a:	e028      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc4c:	4b16      	ldr	r3, [pc, #88]	@ (800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc58:	d107      	bne.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fae4 	bl	800c22c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc68:	e019      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc6e:	e016      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc70:	4b0d      	ldr	r3, [pc, #52]	@ (800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc7c:	d107      	bne.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc7e:	f107 0318 	add.w	r3, r7, #24
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f82a 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc8c:	e007      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc92:	e004      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc98:	e001      	b.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bc9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3740      	adds	r7, #64	@ 0x40
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	58024400 	.word	0x58024400
 800bcac:	017d7840 	.word	0x017d7840

0800bcb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bcb4:	f7fd ff94 	bl	8009be0 <HAL_RCC_GetHCLKFreq>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	4b06      	ldr	r3, [pc, #24]	@ (800bcd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	091b      	lsrs	r3, r3, #4
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	4904      	ldr	r1, [pc, #16]	@ (800bcd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bcc6:	5ccb      	ldrb	r3, [r1, r3]
 800bcc8:	f003 031f 	and.w	r3, r3, #31
 800bccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	58024400 	.word	0x58024400
 800bcd8:	080289cc 	.word	0x080289cc

0800bcdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b089      	sub	sp, #36	@ 0x24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bce4:	4ba1      	ldr	r3, [pc, #644]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce8:	f003 0303 	and.w	r3, r3, #3
 800bcec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bcee:	4b9f      	ldr	r3, [pc, #636]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf2:	0b1b      	lsrs	r3, r3, #12
 800bcf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bcfa:	4b9c      	ldr	r3, [pc, #624]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfe:	091b      	lsrs	r3, r3, #4
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bd06:	4b99      	ldr	r3, [pc, #612]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd0a:	08db      	lsrs	r3, r3, #3
 800bd0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	fb02 f303 	mul.w	r3, r2, r3
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 8111 	beq.w	800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	f000 8083 	beq.w	800be38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	f200 80a1 	bhi.w	800be7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d056      	beq.n	800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd46:	e099      	b.n	800be7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd48:	4b88      	ldr	r3, [pc, #544]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0320 	and.w	r3, r3, #32
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d02d      	beq.n	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd54:	4b85      	ldr	r3, [pc, #532]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	08db      	lsrs	r3, r3, #3
 800bd5a:	f003 0303 	and.w	r3, r3, #3
 800bd5e:	4a84      	ldr	r2, [pc, #528]	@ (800bf70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bd60:	fa22 f303 	lsr.w	r3, r2, r3
 800bd64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7e:	4b7b      	ldr	r3, [pc, #492]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bdae:	e087      	b.n	800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	ee07 3a90 	vmov	s15, r3
 800bdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc2:	4b6a      	ldr	r3, [pc, #424]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdf2:	e065      	b.n	800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be06:	4b59      	ldr	r3, [pc, #356]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be16:	ed97 6a03 	vldr	s12, [r7, #12]
 800be1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be36:	e043      	b.n	800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b48      	ldr	r3, [pc, #288]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be7a:	e021      	b.n	800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8e:	4b37      	ldr	r3, [pc, #220]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bebe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bec0:	4b2a      	ldr	r3, [pc, #168]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec4:	0a5b      	lsrs	r3, r3, #9
 800bec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beca:	ee07 3a90 	vmov	s15, r3
 800bece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beda:	edd7 6a07 	vldr	s13, [r7, #28]
 800bede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee6:	ee17 2a90 	vmov	r2, s15
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800beee:	4b1f      	ldr	r3, [pc, #124]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef2:	0c1b      	lsrs	r3, r3, #16
 800bef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bef8:	ee07 3a90 	vmov	s15, r3
 800befc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf08:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf14:	ee17 2a90 	vmov	r2, s15
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bf1c:	4b13      	ldr	r3, [pc, #76]	@ (800bf6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf20:	0e1b      	lsrs	r3, r3, #24
 800bf22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf36:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf42:	ee17 2a90 	vmov	r2, s15
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf4a:	e008      	b.n	800bf5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	609a      	str	r2, [r3, #8]
}
 800bf5e:	bf00      	nop
 800bf60:	3724      	adds	r7, #36	@ 0x24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	58024400 	.word	0x58024400
 800bf70:	03d09000 	.word	0x03d09000
 800bf74:	46000000 	.word	0x46000000
 800bf78:	4c742400 	.word	0x4c742400
 800bf7c:	4a742400 	.word	0x4a742400
 800bf80:	4bbebc20 	.word	0x4bbebc20

0800bf84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b089      	sub	sp, #36	@ 0x24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf8c:	4ba1      	ldr	r3, [pc, #644]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf90:	f003 0303 	and.w	r3, r3, #3
 800bf94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf96:	4b9f      	ldr	r3, [pc, #636]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf9a:	0d1b      	lsrs	r3, r3, #20
 800bf9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bfa2:	4b9c      	ldr	r3, [pc, #624]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa6:	0a1b      	lsrs	r3, r3, #8
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bfae:	4b99      	ldr	r3, [pc, #612]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfb2:	08db      	lsrs	r3, r3, #3
 800bfb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	fb02 f303 	mul.w	r3, r2, r3
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 8111 	beq.w	800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	f000 8083 	beq.w	800c0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	f200 80a1 	bhi.w	800c124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d056      	beq.n	800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bfee:	e099      	b.n	800c124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bff0:	4b88      	ldr	r3, [pc, #544]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0320 	and.w	r3, r3, #32
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d02d      	beq.n	800c058 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bffc:	4b85      	ldr	r3, [pc, #532]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	08db      	lsrs	r3, r3, #3
 800c002:	f003 0303 	and.w	r3, r3, #3
 800c006:	4a84      	ldr	r2, [pc, #528]	@ (800c218 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c008:	fa22 f303 	lsr.w	r3, r2, r3
 800c00c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	ee07 3a90 	vmov	s15, r3
 800c014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	ee07 3a90 	vmov	s15, r3
 800c01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c026:	4b7b      	ldr	r3, [pc, #492]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c036:	ed97 6a03 	vldr	s12, [r7, #12]
 800c03a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c052:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c056:	e087      	b.n	800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	ee07 3a90 	vmov	s15, r3
 800c05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c062:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c220 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c06a:	4b6a      	ldr	r3, [pc, #424]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c072:	ee07 3a90 	vmov	s15, r3
 800c076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c07e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c09a:	e065      	b.n	800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	ee07 3a90 	vmov	s15, r3
 800c0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ae:	4b59      	ldr	r3, [pc, #356]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b6:	ee07 3a90 	vmov	s15, r3
 800c0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0de:	e043      	b.n	800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f2:	4b48      	ldr	r3, [pc, #288]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c102:	ed97 6a03 	vldr	s12, [r7, #12]
 800c106:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c122:	e021      	b.n	800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c136:	4b37      	ldr	r3, [pc, #220]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13e:	ee07 3a90 	vmov	s15, r3
 800c142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c146:	ed97 6a03 	vldr	s12, [r7, #12]
 800c14a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c166:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c168:	4b2a      	ldr	r3, [pc, #168]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16c:	0a5b      	lsrs	r3, r3, #9
 800c16e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c17e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c182:	edd7 6a07 	vldr	s13, [r7, #28]
 800c186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c18a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c18e:	ee17 2a90 	vmov	r2, s15
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c196:	4b1f      	ldr	r3, [pc, #124]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19a:	0c1b      	lsrs	r3, r3, #16
 800c19c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1a0:	ee07 3a90 	vmov	s15, r3
 800c1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1bc:	ee17 2a90 	vmov	r2, s15
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c1c4:	4b13      	ldr	r3, [pc, #76]	@ (800c214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c8:	0e1b      	lsrs	r3, r3, #24
 800c1ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ce:	ee07 3a90 	vmov	s15, r3
 800c1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ea:	ee17 2a90 	vmov	r2, s15
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c1f2:	e008      	b.n	800c206 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	609a      	str	r2, [r3, #8]
}
 800c206:	bf00      	nop
 800c208:	3724      	adds	r7, #36	@ 0x24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	58024400 	.word	0x58024400
 800c218:	03d09000 	.word	0x03d09000
 800c21c:	46000000 	.word	0x46000000
 800c220:	4c742400 	.word	0x4c742400
 800c224:	4a742400 	.word	0x4a742400
 800c228:	4bbebc20 	.word	0x4bbebc20

0800c22c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b089      	sub	sp, #36	@ 0x24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c234:	4ba0      	ldr	r3, [pc, #640]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c238:	f003 0303 	and.w	r3, r3, #3
 800c23c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c23e:	4b9e      	ldr	r3, [pc, #632]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c242:	091b      	lsrs	r3, r3, #4
 800c244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c248:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c24a:	4b9b      	ldr	r3, [pc, #620]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c254:	4b98      	ldr	r3, [pc, #608]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c258:	08db      	lsrs	r3, r3, #3
 800c25a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c25e:	693a      	ldr	r2, [r7, #16]
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	ee07 3a90 	vmov	s15, r3
 800c268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 8111 	beq.w	800c49a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	f000 8083 	beq.w	800c386 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b02      	cmp	r3, #2
 800c284:	f200 80a1 	bhi.w	800c3ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d056      	beq.n	800c342 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c294:	e099      	b.n	800c3ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c296:	4b88      	ldr	r3, [pc, #544]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d02d      	beq.n	800c2fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2a2:	4b85      	ldr	r3, [pc, #532]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	08db      	lsrs	r3, r3, #3
 800c2a8:	f003 0303 	and.w	r3, r3, #3
 800c2ac:	4a83      	ldr	r2, [pc, #524]	@ (800c4bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	ee07 3a90 	vmov	s15, r3
 800c2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	ee07 3a90 	vmov	s15, r3
 800c2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2cc:	4b7a      	ldr	r3, [pc, #488]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d4:	ee07 3a90 	vmov	s15, r3
 800c2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c2fc:	e087      	b.n	800c40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	ee07 3a90 	vmov	s15, r3
 800c304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c308:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c310:	4b69      	ldr	r3, [pc, #420]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c318:	ee07 3a90 	vmov	s15, r3
 800c31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c320:	ed97 6a03 	vldr	s12, [r7, #12]
 800c324:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c340:	e065      	b.n	800c40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	ee07 3a90 	vmov	s15, r3
 800c348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c4c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c354:	4b58      	ldr	r3, [pc, #352]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35c:	ee07 3a90 	vmov	s15, r3
 800c360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c364:	ed97 6a03 	vldr	s12, [r7, #12]
 800c368:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c384:	e043      	b.n	800c40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	ee07 3a90 	vmov	s15, r3
 800c38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c390:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c4cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c398:	4b47      	ldr	r3, [pc, #284]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a0:	ee07 3a90 	vmov	s15, r3
 800c3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3c8:	e021      	b.n	800c40e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	ee07 3a90 	vmov	s15, r3
 800c3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3dc:	4b36      	ldr	r3, [pc, #216]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e4:	ee07 3a90 	vmov	s15, r3
 800c3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c40c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c40e:	4b2a      	ldr	r3, [pc, #168]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c412:	0a5b      	lsrs	r3, r3, #9
 800c414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c424:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c428:	edd7 6a07 	vldr	s13, [r7, #28]
 800c42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c434:	ee17 2a90 	vmov	r2, s15
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c43c:	4b1e      	ldr	r3, [pc, #120]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c440:	0c1b      	lsrs	r3, r3, #16
 800c442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c446:	ee07 3a90 	vmov	s15, r3
 800c44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c452:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c456:	edd7 6a07 	vldr	s13, [r7, #28]
 800c45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c462:	ee17 2a90 	vmov	r2, s15
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c46a:	4b13      	ldr	r3, [pc, #76]	@ (800c4b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46e:	0e1b      	lsrs	r3, r3, #24
 800c470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c474:	ee07 3a90 	vmov	s15, r3
 800c478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c47c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c480:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c484:	edd7 6a07 	vldr	s13, [r7, #28]
 800c488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c490:	ee17 2a90 	vmov	r2, s15
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c498:	e008      	b.n	800c4ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	609a      	str	r2, [r3, #8]
}
 800c4ac:	bf00      	nop
 800c4ae:	3724      	adds	r7, #36	@ 0x24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	58024400 	.word	0x58024400
 800c4bc:	03d09000 	.word	0x03d09000
 800c4c0:	46000000 	.word	0x46000000
 800c4c4:	4c742400 	.word	0x4c742400
 800c4c8:	4a742400 	.word	0x4a742400
 800c4cc:	4bbebc20 	.word	0x4bbebc20

0800c4d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4de:	4b53      	ldr	r3, [pc, #332]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d101      	bne.n	800c4ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e099      	b.n	800c622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c4ee:	4b4f      	ldr	r3, [pc, #316]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a4e      	ldr	r2, [pc, #312]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c4f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4fa:	f7f6 f9bd 	bl	8002878 <HAL_GetTick>
 800c4fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c500:	e008      	b.n	800c514 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c502:	f7f6 f9b9 	bl	8002878 <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d901      	bls.n	800c514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e086      	b.n	800c622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c514:	4b45      	ldr	r3, [pc, #276]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f0      	bne.n	800c502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c520:	4b42      	ldr	r3, [pc, #264]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c524:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	031b      	lsls	r3, r3, #12
 800c52e:	493f      	ldr	r1, [pc, #252]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c530:	4313      	orrs	r3, r2
 800c532:	628b      	str	r3, [r1, #40]	@ 0x28
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	3b01      	subs	r3, #1
 800c53a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	3b01      	subs	r3, #1
 800c544:	025b      	lsls	r3, r3, #9
 800c546:	b29b      	uxth	r3, r3
 800c548:	431a      	orrs	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	3b01      	subs	r3, #1
 800c550:	041b      	lsls	r3, r3, #16
 800c552:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	061b      	lsls	r3, r3, #24
 800c560:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c564:	4931      	ldr	r1, [pc, #196]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c566:	4313      	orrs	r3, r2
 800c568:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c56a:	4b30      	ldr	r3, [pc, #192]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c56e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	492d      	ldr	r1, [pc, #180]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c57c:	4b2b      	ldr	r3, [pc, #172]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c580:	f023 0220 	bic.w	r2, r3, #32
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	4928      	ldr	r1, [pc, #160]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c58e:	4b27      	ldr	r3, [pc, #156]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c592:	4a26      	ldr	r2, [pc, #152]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c594:	f023 0310 	bic.w	r3, r3, #16
 800c598:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c59a:	4b24      	ldr	r3, [pc, #144]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c59c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c59e:	4b24      	ldr	r3, [pc, #144]	@ (800c630 <RCCEx_PLL2_Config+0x160>)
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	69d2      	ldr	r2, [r2, #28]
 800c5a6:	00d2      	lsls	r2, r2, #3
 800c5a8:	4920      	ldr	r1, [pc, #128]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c5ae:	4b1f      	ldr	r3, [pc, #124]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b2:	4a1e      	ldr	r2, [pc, #120]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5b4:	f043 0310 	orr.w	r3, r3, #16
 800c5b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c4:	4a19      	ldr	r2, [pc, #100]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c5ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5cc:	e00f      	b.n	800c5ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d106      	bne.n	800c5e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c5d4:	4b15      	ldr	r3, [pc, #84]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d8:	4a14      	ldr	r2, [pc, #80]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5e0:	e005      	b.n	800c5ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c5e2:	4b12      	ldr	r3, [pc, #72]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e6:	4a11      	ldr	r2, [pc, #68]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c5ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a0e      	ldr	r2, [pc, #56]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c5f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5fa:	f7f6 f93d 	bl	8002878 <HAL_GetTick>
 800c5fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c600:	e008      	b.n	800c614 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c602:	f7f6 f939 	bl	8002878 <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e006      	b.n	800c622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c614:	4b05      	ldr	r3, [pc, #20]	@ (800c62c <RCCEx_PLL2_Config+0x15c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0f0      	beq.n	800c602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	58024400 	.word	0x58024400
 800c630:	ffff0007 	.word	0xffff0007

0800c634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c642:	4b53      	ldr	r3, [pc, #332]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d101      	bne.n	800c652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	e099      	b.n	800c786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c652:	4b4f      	ldr	r3, [pc, #316]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a4e      	ldr	r2, [pc, #312]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c65c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c65e:	f7f6 f90b 	bl	8002878 <HAL_GetTick>
 800c662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c664:	e008      	b.n	800c678 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c666:	f7f6 f907 	bl	8002878 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	2b02      	cmp	r3, #2
 800c672:	d901      	bls.n	800c678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	e086      	b.n	800c786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c678:	4b45      	ldr	r3, [pc, #276]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1f0      	bne.n	800c666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c684:	4b42      	ldr	r3, [pc, #264]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c688:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	051b      	lsls	r3, r3, #20
 800c692:	493f      	ldr	r1, [pc, #252]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c694:	4313      	orrs	r3, r2
 800c696:	628b      	str	r3, [r1, #40]	@ 0x28
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	025b      	lsls	r3, r3, #9
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	041b      	lsls	r3, r3, #16
 800c6b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	061b      	lsls	r3, r3, #24
 800c6c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c6c8:	4931      	ldr	r1, [pc, #196]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c6ce:	4b30      	ldr	r3, [pc, #192]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	492d      	ldr	r1, [pc, #180]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c6e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	4928      	ldr	r1, [pc, #160]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c6f2:	4b27      	ldr	r3, [pc, #156]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f6:	4a26      	ldr	r2, [pc, #152]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c6f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c6fe:	4b24      	ldr	r3, [pc, #144]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c702:	4b24      	ldr	r3, [pc, #144]	@ (800c794 <RCCEx_PLL3_Config+0x160>)
 800c704:	4013      	ands	r3, r2
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	69d2      	ldr	r2, [r2, #28]
 800c70a:	00d2      	lsls	r2, r2, #3
 800c70c:	4920      	ldr	r1, [pc, #128]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c712:	4b1f      	ldr	r3, [pc, #124]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c716:	4a1e      	ldr	r2, [pc, #120]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c71c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d106      	bne.n	800c732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c724:	4b1a      	ldr	r3, [pc, #104]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c728:	4a19      	ldr	r2, [pc, #100]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c72a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c72e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c730:	e00f      	b.n	800c752 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d106      	bne.n	800c746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c738:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c73c:	4a14      	ldr	r2, [pc, #80]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c73e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c742:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c744:	e005      	b.n	800c752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c746:	4b12      	ldr	r3, [pc, #72]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c74a:	4a11      	ldr	r2, [pc, #68]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c74c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c750:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c752:	4b0f      	ldr	r3, [pc, #60]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a0e      	ldr	r2, [pc, #56]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c75c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c75e:	f7f6 f88b 	bl	8002878 <HAL_GetTick>
 800c762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c764:	e008      	b.n	800c778 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c766:	f7f6 f887 	bl	8002878 <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	2b02      	cmp	r3, #2
 800c772:	d901      	bls.n	800c778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c774:	2303      	movs	r3, #3
 800c776:	e006      	b.n	800c786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c778:	4b05      	ldr	r3, [pc, #20]	@ (800c790 <RCCEx_PLL3_Config+0x15c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0f0      	beq.n	800c766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	58024400 	.word	0x58024400
 800c794:	ffff0007 	.word	0xffff0007

0800c798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e049      	b.n	800c83e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d106      	bne.n	800c7c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7f5 fb64 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4610      	mov	r0, r2
 800c7d8:	f000 fad6 	bl	800cd88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d001      	beq.n	800c860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e054      	b.n	800c90a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f042 0201 	orr.w	r2, r2, #1
 800c876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a26      	ldr	r2, [pc, #152]	@ (800c918 <HAL_TIM_Base_Start_IT+0xd0>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d022      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c88a:	d01d      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a22      	ldr	r2, [pc, #136]	@ (800c91c <HAL_TIM_Base_Start_IT+0xd4>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d018      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a21      	ldr	r2, [pc, #132]	@ (800c920 <HAL_TIM_Base_Start_IT+0xd8>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d013      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c924 <HAL_TIM_Base_Start_IT+0xdc>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d00e      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c928 <HAL_TIM_Base_Start_IT+0xe0>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d009      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a1c      	ldr	r2, [pc, #112]	@ (800c92c <HAL_TIM_Base_Start_IT+0xe4>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d004      	beq.n	800c8c8 <HAL_TIM_Base_Start_IT+0x80>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a1b      	ldr	r2, [pc, #108]	@ (800c930 <HAL_TIM_Base_Start_IT+0xe8>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d115      	bne.n	800c8f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	689a      	ldr	r2, [r3, #8]
 800c8ce:	4b19      	ldr	r3, [pc, #100]	@ (800c934 <HAL_TIM_Base_Start_IT+0xec>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b06      	cmp	r3, #6
 800c8d8:	d015      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0xbe>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8e0:	d011      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f042 0201 	orr.w	r2, r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8f2:	e008      	b.n	800c906 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f042 0201 	orr.w	r2, r2, #1
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	e000      	b.n	800c908 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	40010000 	.word	0x40010000
 800c91c:	40000400 	.word	0x40000400
 800c920:	40000800 	.word	0x40000800
 800c924:	40000c00 	.word	0x40000c00
 800c928:	40010400 	.word	0x40010400
 800c92c:	40001800 	.word	0x40001800
 800c930:	40014000 	.word	0x40014000
 800c934:	00010007 	.word	0x00010007

0800c938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d020      	beq.n	800c99c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d01b      	beq.n	800c99c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f06f 0202 	mvn.w	r2, #2
 800c96c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2201      	movs	r2, #1
 800c972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	f003 0303 	and.w	r3, r3, #3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d003      	beq.n	800c98a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f9e2 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800c988:	e005      	b.n	800c996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f9d4 	bl	800cd38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f9e5 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	f003 0304 	and.w	r3, r3, #4
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d020      	beq.n	800c9e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d01b      	beq.n	800c9e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f06f 0204 	mvn.w	r2, #4
 800c9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d003      	beq.n	800c9d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f9bc 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800c9d4:	e005      	b.n	800c9e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f9ae 	bl	800cd38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f9bf 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	f003 0308 	and.w	r3, r3, #8
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d020      	beq.n	800ca34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f003 0308 	and.w	r3, r3, #8
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01b      	beq.n	800ca34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f06f 0208 	mvn.w	r2, #8
 800ca04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2204      	movs	r2, #4
 800ca0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	f003 0303 	and.w	r3, r3, #3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f996 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800ca20:	e005      	b.n	800ca2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f988 	bl	800cd38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f999 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	f003 0310 	and.w	r3, r3, #16
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d020      	beq.n	800ca80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f003 0310 	and.w	r3, r3, #16
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d01b      	beq.n	800ca80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f06f 0210 	mvn.w	r2, #16
 800ca50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2208      	movs	r2, #8
 800ca56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f970 	bl	800cd4c <HAL_TIM_IC_CaptureCallback>
 800ca6c:	e005      	b.n	800ca7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f962 	bl	800cd38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f973 	bl	800cd60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	f003 0301 	and.w	r3, r3, #1
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00c      	beq.n	800caa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d007      	beq.n	800caa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f06f 0201 	mvn.w	r2, #1
 800ca9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7f5 f8d2 	bl	8001c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00c      	beq.n	800cad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d007      	beq.n	800cad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800caca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fb37 	bl	800d140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00c      	beq.n	800caf6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d007      	beq.n	800caf6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800caee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fb2f 	bl	800d154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00c      	beq.n	800cb1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d007      	beq.n	800cb1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cb12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f92d 	bl	800cd74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f003 0320 	and.w	r3, r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00c      	beq.n	800cb3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f003 0320 	and.w	r3, r3, #32
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d007      	beq.n	800cb3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f06f 0220 	mvn.w	r2, #32
 800cb36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 faf7 	bl	800d12c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb3e:	bf00      	nop
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d101      	bne.n	800cb64 <HAL_TIM_ConfigClockSource+0x1c>
 800cb60:	2302      	movs	r3, #2
 800cb62:	e0dc      	b.n	800cd1e <HAL_TIM_ConfigClockSource+0x1d6>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2202      	movs	r2, #2
 800cb70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	4b6a      	ldr	r3, [pc, #424]	@ (800cd28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb80:	4013      	ands	r3, r2
 800cb82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a64      	ldr	r2, [pc, #400]	@ (800cd2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	f000 80a9 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cba0:	4a62      	ldr	r2, [pc, #392]	@ (800cd2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	f200 80ae 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba8:	4a61      	ldr	r2, [pc, #388]	@ (800cd30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	f000 80a1 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbb0:	4a5f      	ldr	r2, [pc, #380]	@ (800cd30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	f200 80a6 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb8:	4a5e      	ldr	r2, [pc, #376]	@ (800cd34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	f000 8099 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbc0:	4a5c      	ldr	r2, [pc, #368]	@ (800cd34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	f200 809e 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbcc:	f000 8091 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbd4:	f200 8096 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbdc:	f000 8089 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbe4:	f200 808e 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbec:	d03e      	beq.n	800cc6c <HAL_TIM_ConfigClockSource+0x124>
 800cbee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbf2:	f200 8087 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbfa:	f000 8086 	beq.w	800cd0a <HAL_TIM_ConfigClockSource+0x1c2>
 800cbfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc02:	d87f      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc04:	2b70      	cmp	r3, #112	@ 0x70
 800cc06:	d01a      	beq.n	800cc3e <HAL_TIM_ConfigClockSource+0xf6>
 800cc08:	2b70      	cmp	r3, #112	@ 0x70
 800cc0a:	d87b      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc0c:	2b60      	cmp	r3, #96	@ 0x60
 800cc0e:	d050      	beq.n	800ccb2 <HAL_TIM_ConfigClockSource+0x16a>
 800cc10:	2b60      	cmp	r3, #96	@ 0x60
 800cc12:	d877      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc14:	2b50      	cmp	r3, #80	@ 0x50
 800cc16:	d03c      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x14a>
 800cc18:	2b50      	cmp	r3, #80	@ 0x50
 800cc1a:	d873      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc1c:	2b40      	cmp	r3, #64	@ 0x40
 800cc1e:	d058      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x18a>
 800cc20:	2b40      	cmp	r3, #64	@ 0x40
 800cc22:	d86f      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc24:	2b30      	cmp	r3, #48	@ 0x30
 800cc26:	d064      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc28:	2b30      	cmp	r3, #48	@ 0x30
 800cc2a:	d86b      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc2c:	2b20      	cmp	r3, #32
 800cc2e:	d060      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	d867      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d05c      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc38:	2b10      	cmp	r3, #16
 800cc3a:	d05a      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc3c:	e062      	b.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc4e:	f000 f9bf 	bl	800cfd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	609a      	str	r2, [r3, #8]
      break;
 800cc6a:	e04f      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc7c:	f000 f9a8 	bl	800cfd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc8e:	609a      	str	r2, [r3, #8]
      break;
 800cc90:	e03c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f000 f918 	bl	800ced4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2150      	movs	r1, #80	@ 0x50
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 f972 	bl	800cf94 <TIM_ITRx_SetConfig>
      break;
 800ccb0:	e02c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f000 f937 	bl	800cf32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2160      	movs	r1, #96	@ 0x60
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 f962 	bl	800cf94 <TIM_ITRx_SetConfig>
      break;
 800ccd0:	e01c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccde:	461a      	mov	r2, r3
 800cce0:	f000 f8f8 	bl	800ced4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2140      	movs	r1, #64	@ 0x40
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 f952 	bl	800cf94 <TIM_ITRx_SetConfig>
      break;
 800ccf0:	e00c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	f000 f949 	bl	800cf94 <TIM_ITRx_SetConfig>
      break;
 800cd02:	e003      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
      break;
 800cd08:	e000      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cd0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	ffceff88 	.word	0xffceff88
 800cd2c:	00100040 	.word	0x00100040
 800cd30:	00100030 	.word	0x00100030
 800cd34:	00100020 	.word	0x00100020

0800cd38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a46      	ldr	r2, [pc, #280]	@ (800ceb4 <TIM_Base_SetConfig+0x12c>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d013      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cda6:	d00f      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a43      	ldr	r2, [pc, #268]	@ (800ceb8 <TIM_Base_SetConfig+0x130>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d00b      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a42      	ldr	r2, [pc, #264]	@ (800cebc <TIM_Base_SetConfig+0x134>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d007      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a41      	ldr	r2, [pc, #260]	@ (800cec0 <TIM_Base_SetConfig+0x138>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d003      	beq.n	800cdc8 <TIM_Base_SetConfig+0x40>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a40      	ldr	r2, [pc, #256]	@ (800cec4 <TIM_Base_SetConfig+0x13c>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d108      	bne.n	800cdda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a35      	ldr	r2, [pc, #212]	@ (800ceb4 <TIM_Base_SetConfig+0x12c>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d01f      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cde8:	d01b      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a32      	ldr	r2, [pc, #200]	@ (800ceb8 <TIM_Base_SetConfig+0x130>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d017      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a31      	ldr	r2, [pc, #196]	@ (800cebc <TIM_Base_SetConfig+0x134>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d013      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a30      	ldr	r2, [pc, #192]	@ (800cec0 <TIM_Base_SetConfig+0x138>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d00f      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a2f      	ldr	r2, [pc, #188]	@ (800cec4 <TIM_Base_SetConfig+0x13c>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00b      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a2e      	ldr	r2, [pc, #184]	@ (800cec8 <TIM_Base_SetConfig+0x140>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d007      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a2d      	ldr	r2, [pc, #180]	@ (800cecc <TIM_Base_SetConfig+0x144>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d003      	beq.n	800ce22 <TIM_Base_SetConfig+0x9a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a2c      	ldr	r2, [pc, #176]	@ (800ced0 <TIM_Base_SetConfig+0x148>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d108      	bne.n	800ce34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	689a      	ldr	r2, [r3, #8]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a16      	ldr	r2, [pc, #88]	@ (800ceb4 <TIM_Base_SetConfig+0x12c>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d00f      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a18      	ldr	r2, [pc, #96]	@ (800cec4 <TIM_Base_SetConfig+0x13c>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d00b      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a17      	ldr	r2, [pc, #92]	@ (800cec8 <TIM_Base_SetConfig+0x140>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d007      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a16      	ldr	r2, [pc, #88]	@ (800cecc <TIM_Base_SetConfig+0x144>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d003      	beq.n	800ce80 <TIM_Base_SetConfig+0xf8>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a15      	ldr	r2, [pc, #84]	@ (800ced0 <TIM_Base_SetConfig+0x148>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d103      	bne.n	800ce88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	691a      	ldr	r2, [r3, #16]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	f003 0301 	and.w	r3, r3, #1
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d105      	bne.n	800cea6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	f023 0201 	bic.w	r2, r3, #1
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	611a      	str	r2, [r3, #16]
  }
}
 800cea6:	bf00      	nop
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	40010000 	.word	0x40010000
 800ceb8:	40000400 	.word	0x40000400
 800cebc:	40000800 	.word	0x40000800
 800cec0:	40000c00 	.word	0x40000c00
 800cec4:	40010400 	.word	0x40010400
 800cec8:	40014000 	.word	0x40014000
 800cecc:	40014400 	.word	0x40014400
 800ced0:	40014800 	.word	0x40014800

0800ced4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	f023 0201 	bic.w	r2, r3, #1
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cefe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	f023 030a 	bic.w	r3, r3, #10
 800cf10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	621a      	str	r2, [r3, #32]
}
 800cf26:	bf00      	nop
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf32:	b480      	push	{r7}
 800cf34:	b087      	sub	sp, #28
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6a1b      	ldr	r3, [r3, #32]
 800cf48:	f023 0210 	bic.w	r2, r3, #16
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	031b      	lsls	r3, r3, #12
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	011b      	lsls	r3, r3, #4
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	693a      	ldr	r2, [r7, #16]
 800cf7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	621a      	str	r2, [r3, #32]
}
 800cf86:	bf00      	nop
 800cf88:	371c      	adds	r7, #28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4b09      	ldr	r3, [pc, #36]	@ (800cfcc <TIM_ITRx_SetConfig+0x38>)
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	f043 0307 	orr.w	r3, r3, #7
 800cfb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	609a      	str	r2, [r3, #8]
}
 800cfbe:	bf00      	nop
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	ffcfff8f 	.word	0xffcfff8f

0800cfd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cfea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	021a      	lsls	r2, r3, #8
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	609a      	str	r2, [r3, #8]
}
 800d004:	bf00      	nop
 800d006:	371c      	adds	r7, #28
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d020:	2b01      	cmp	r3, #1
 800d022:	d101      	bne.n	800d028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d024:	2302      	movs	r3, #2
 800d026:	e06d      	b.n	800d104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a30      	ldr	r2, [pc, #192]	@ (800d110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d004      	beq.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a2f      	ldr	r2, [pc, #188]	@ (800d114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d108      	bne.n	800d06e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a20      	ldr	r2, [pc, #128]	@ (800d110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d022      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d09a:	d01d      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d118 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d018      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a1c      	ldr	r2, [pc, #112]	@ (800d11c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d013      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d120 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d00e      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a15      	ldr	r2, [pc, #84]	@ (800d114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d009      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a16      	ldr	r2, [pc, #88]	@ (800d124 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d004      	beq.n	800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a15      	ldr	r2, [pc, #84]	@ (800d128 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d10c      	bne.n	800d0f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3714      	adds	r7, #20
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	40010000 	.word	0x40010000
 800d114:	40010400 	.word	0x40010400
 800d118:	40000400 	.word	0x40000400
 800d11c:	40000800 	.word	0x40000800
 800d120:	40000c00 	.word	0x40000c00
 800d124:	40001800 	.word	0x40001800
 800d128:	40014000 	.word	0x40014000

0800d12c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d15c:	bf00      	nop
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	e042      	b.n	800d200 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7f4 fe9f 	bl	8001ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2224      	movs	r2, #36	@ 0x24
 800d196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f022 0201 	bic.w	r2, r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 f9b6 	bl	800e524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fc4b 	bl	800da54 <UART_SetConfig>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d101      	bne.n	800d1c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e01b      	b.n	800d200 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d1d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	689a      	ldr	r2, [r3, #8]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d1e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f042 0201 	orr.w	r2, r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f001 fa35 	bl	800e668 <UART_CheckIdleState>
 800d1fe:	4603      	mov	r3, r0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	@ 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	4613      	mov	r3, r2
 800d214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d21c:	2b20      	cmp	r3, #32
 800d21e:	d137      	bne.n	800d290 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <HAL_UART_Receive_DMA+0x24>
 800d226:	88fb      	ldrh	r3, [r7, #6]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	e030      	b.n	800d292 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a18      	ldr	r2, [pc, #96]	@ (800d29c <HAL_UART_Receive_DMA+0x94>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d01f      	beq.n	800d280 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d018      	beq.n	800d280 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	613b      	str	r3, [r7, #16]
   return(result);
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	461a      	mov	r2, r3
 800d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26c:	623b      	str	r3, [r7, #32]
 800d26e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	69f9      	ldr	r1, [r7, #28]
 800d272:	6a3a      	ldr	r2, [r7, #32]
 800d274:	e841 2300 	strex	r3, r2, [r1]
 800d278:	61bb      	str	r3, [r7, #24]
   return(result);
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e6      	bne.n	800d24e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	461a      	mov	r2, r3
 800d284:	68b9      	ldr	r1, [r7, #8]
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f001 fb06 	bl	800e898 <UART_Start_Receive_DMA>
 800d28c:	4603      	mov	r3, r0
 800d28e:	e000      	b.n	800d292 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d290:	2302      	movs	r3, #2
  }
}
 800d292:	4618      	mov	r0, r3
 800d294:	3728      	adds	r7, #40	@ 0x28
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	58000c00 	.word	0x58000c00

0800d2a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b0ba      	sub	sp, #232	@ 0xe8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	69db      	ldr	r3, [r3, #28]
 800d2ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d2ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d2d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d11b      	bne.n	800d314 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2e0:	f003 0320 	and.w	r3, r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d015      	beq.n	800d314 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2ec:	f003 0320 	and.w	r3, r3, #32
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d105      	bne.n	800d300 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d009      	beq.n	800d314 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d304:	2b00      	cmp	r3, #0
 800d306:	f000 8377 	beq.w	800d9f8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	4798      	blx	r3
      }
      return;
 800d312:	e371      	b.n	800d9f8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 8123 	beq.w	800d564 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d31e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d322:	4b8d      	ldr	r3, [pc, #564]	@ (800d558 <HAL_UART_IRQHandler+0x2b8>)
 800d324:	4013      	ands	r3, r2
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d32a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d32e:	4b8b      	ldr	r3, [pc, #556]	@ (800d55c <HAL_UART_IRQHandler+0x2bc>)
 800d330:	4013      	ands	r3, r2
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 8116 	beq.w	800d564 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d011      	beq.n	800d368 <HAL_UART_IRQHandler+0xc8>
 800d344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2201      	movs	r2, #1
 800d356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d35e:	f043 0201 	orr.w	r2, r3, #1
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d36c:	f003 0302 	and.w	r3, r3, #2
 800d370:	2b00      	cmp	r3, #0
 800d372:	d011      	beq.n	800d398 <HAL_UART_IRQHandler+0xf8>
 800d374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00b      	beq.n	800d398 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2202      	movs	r2, #2
 800d386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d38e:	f043 0204 	orr.w	r2, r3, #4
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d39c:	f003 0304 	and.w	r3, r3, #4
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d011      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x128>
 800d3a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2204      	movs	r2, #4
 800d3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3be:	f043 0202 	orr.w	r2, r3, #2
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3cc:	f003 0308 	and.w	r3, r3, #8
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d017      	beq.n	800d404 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3d8:	f003 0320 	and.w	r3, r3, #32
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d105      	bne.n	800d3ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d3e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d3e4:	4b5c      	ldr	r3, [pc, #368]	@ (800d558 <HAL_UART_IRQHandler+0x2b8>)
 800d3e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00b      	beq.n	800d404 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3fa:	f043 0208 	orr.w	r2, r3, #8
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d012      	beq.n	800d436 <HAL_UART_IRQHandler+0x196>
 800d410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d414:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00c      	beq.n	800d436 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d42c:	f043 0220 	orr.w	r2, r3, #32
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 82dd 	beq.w	800d9fc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d446:	f003 0320 	and.w	r3, r3, #32
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d013      	beq.n	800d476 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d452:	f003 0320 	and.w	r3, r3, #32
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d45e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d462:	2b00      	cmp	r3, #0
 800d464:	d007      	beq.n	800d476 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d47c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d48a:	2b40      	cmp	r3, #64	@ 0x40
 800d48c:	d005      	beq.n	800d49a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d48e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d492:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d496:	2b00      	cmp	r3, #0
 800d498:	d054      	beq.n	800d544 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f001 fae4 	bl	800ea68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4aa:	2b40      	cmp	r3, #64	@ 0x40
 800d4ac:	d146      	bne.n	800d53c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d4bc:	e853 3f00 	ldrex	r3, [r3]
 800d4c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d4c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d4c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d4da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d4de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d4e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d4ea:	e841 2300 	strex	r3, r2, [r1]
 800d4ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d4f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1d9      	bne.n	800d4ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d500:	2b00      	cmp	r3, #0
 800d502:	d017      	beq.n	800d534 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d50a:	4a15      	ldr	r2, [pc, #84]	@ (800d560 <HAL_UART_IRQHandler+0x2c0>)
 800d50c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d514:	4618      	mov	r0, r3
 800d516:	f7f7 fead 	bl	8005274 <HAL_DMA_Abort_IT>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d019      	beq.n	800d554 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d52e:	4610      	mov	r0, r2
 800d530:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d532:	e00f      	b.n	800d554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fa77 	bl	800da28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d53a:	e00b      	b.n	800d554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 fa73 	bl	800da28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d542:	e007      	b.n	800d554 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 fa6f 	bl	800da28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d552:	e253      	b.n	800d9fc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d554:	bf00      	nop
    return;
 800d556:	e251      	b.n	800d9fc <HAL_UART_IRQHandler+0x75c>
 800d558:	10000001 	.word	0x10000001
 800d55c:	04000120 	.word	0x04000120
 800d560:	0800ed1b 	.word	0x0800ed1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d568:	2b01      	cmp	r3, #1
 800d56a:	f040 81e7 	bne.w	800d93c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d572:	f003 0310 	and.w	r3, r3, #16
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 81e0 	beq.w	800d93c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d580:	f003 0310 	and.w	r3, r3, #16
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 81d9 	beq.w	800d93c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2210      	movs	r2, #16
 800d590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d59c:	2b40      	cmp	r3, #64	@ 0x40
 800d59e:	f040 8151 	bne.w	800d844 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a96      	ldr	r2, [pc, #600]	@ (800d804 <HAL_UART_IRQHandler+0x564>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d068      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a93      	ldr	r2, [pc, #588]	@ (800d808 <HAL_UART_IRQHandler+0x568>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d061      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a91      	ldr	r2, [pc, #580]	@ (800d80c <HAL_UART_IRQHandler+0x56c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d05a      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a8e      	ldr	r2, [pc, #568]	@ (800d810 <HAL_UART_IRQHandler+0x570>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d053      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a8c      	ldr	r2, [pc, #560]	@ (800d814 <HAL_UART_IRQHandler+0x574>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d04c      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a89      	ldr	r2, [pc, #548]	@ (800d818 <HAL_UART_IRQHandler+0x578>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d045      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a87      	ldr	r2, [pc, #540]	@ (800d81c <HAL_UART_IRQHandler+0x57c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d03e      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a84      	ldr	r2, [pc, #528]	@ (800d820 <HAL_UART_IRQHandler+0x580>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d037      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a82      	ldr	r2, [pc, #520]	@ (800d824 <HAL_UART_IRQHandler+0x584>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d030      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a7f      	ldr	r2, [pc, #508]	@ (800d828 <HAL_UART_IRQHandler+0x588>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d029      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a7d      	ldr	r2, [pc, #500]	@ (800d82c <HAL_UART_IRQHandler+0x58c>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d022      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a7a      	ldr	r2, [pc, #488]	@ (800d830 <HAL_UART_IRQHandler+0x590>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d01b      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a78      	ldr	r2, [pc, #480]	@ (800d834 <HAL_UART_IRQHandler+0x594>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d014      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a75      	ldr	r2, [pc, #468]	@ (800d838 <HAL_UART_IRQHandler+0x598>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d00d      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a73      	ldr	r2, [pc, #460]	@ (800d83c <HAL_UART_IRQHandler+0x59c>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d006      	beq.n	800d682 <HAL_UART_IRQHandler+0x3e2>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a70      	ldr	r2, [pc, #448]	@ (800d840 <HAL_UART_IRQHandler+0x5a0>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d106      	bne.n	800d690 <HAL_UART_IRQHandler+0x3f0>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	e005      	b.n	800d69c <HAL_UART_IRQHandler+0x3fc>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 81ab 	beq.w	800da00 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	f080 81a3 	bcs.w	800da00 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ca:	69db      	ldr	r3, [r3, #28]
 800d6cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6d0:	f000 8087 	beq.w	800d7e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d6e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d6fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d702:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d706:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d70a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d70e:	e841 2300 	strex	r3, r2, [r1]
 800d712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1da      	bne.n	800d6d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	3308      	adds	r3, #8
 800d724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d72e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d730:	f023 0301 	bic.w	r3, r3, #1
 800d734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3308      	adds	r3, #8
 800d73e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d742:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d746:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d748:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d74a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d74e:	e841 2300 	strex	r3, r2, [r1]
 800d752:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1e1      	bne.n	800d71e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	3308      	adds	r3, #8
 800d760:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d76a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d76c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	3308      	adds	r3, #8
 800d77a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d77e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d780:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d782:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d784:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d786:	e841 2300 	strex	r3, r2, [r1]
 800d78a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d78c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1e3      	bne.n	800d75a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2220      	movs	r2, #32
 800d796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7a8:	e853 3f00 	ldrex	r3, [r3]
 800d7ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7b0:	f023 0310 	bic.w	r3, r3, #16
 800d7b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7ca:	e841 2300 	strex	r3, r2, [r1]
 800d7ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1e4      	bne.n	800d7a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f7 fa2b 	bl	8004c38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2202      	movs	r2, #2
 800d7e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f91d 	bl	800da3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d802:	e0fd      	b.n	800da00 <HAL_UART_IRQHandler+0x760>
 800d804:	40020010 	.word	0x40020010
 800d808:	40020028 	.word	0x40020028
 800d80c:	40020040 	.word	0x40020040
 800d810:	40020058 	.word	0x40020058
 800d814:	40020070 	.word	0x40020070
 800d818:	40020088 	.word	0x40020088
 800d81c:	400200a0 	.word	0x400200a0
 800d820:	400200b8 	.word	0x400200b8
 800d824:	40020410 	.word	0x40020410
 800d828:	40020428 	.word	0x40020428
 800d82c:	40020440 	.word	0x40020440
 800d830:	40020458 	.word	0x40020458
 800d834:	40020470 	.word	0x40020470
 800d838:	40020488 	.word	0x40020488
 800d83c:	400204a0 	.word	0x400204a0
 800d840:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d850:	b29b      	uxth	r3, r3
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d85e:	b29b      	uxth	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 80cf 	beq.w	800da04 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 80ca 	beq.w	800da04 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d878:	e853 3f00 	ldrex	r3, [r3]
 800d87c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	461a      	mov	r2, r3
 800d88e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d892:	647b      	str	r3, [r7, #68]	@ 0x44
 800d894:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d89a:	e841 2300 	strex	r3, r2, [r1]
 800d89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1e4      	bne.n	800d870 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	e853 3f00 	ldrex	r3, [r3]
 800d8b4:	623b      	str	r3, [r7, #32]
   return(result);
 800d8b6:	6a3a      	ldr	r2, [r7, #32]
 800d8b8:	4b55      	ldr	r3, [pc, #340]	@ (800da10 <HAL_UART_IRQHandler+0x770>)
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d8ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8d2:	e841 2300 	strex	r3, r2, [r1]
 800d8d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1e3      	bne.n	800d8a6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2220      	movs	r2, #32
 800d8e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	e853 3f00 	ldrex	r3, [r3]
 800d8fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 0310 	bic.w	r3, r3, #16
 800d906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d914:	61fb      	str	r3, [r7, #28]
 800d916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d918:	69b9      	ldr	r1, [r7, #24]
 800d91a:	69fa      	ldr	r2, [r7, #28]
 800d91c:	e841 2300 	strex	r3, r2, [r1]
 800d920:	617b      	str	r3, [r7, #20]
   return(result);
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e4      	bne.n	800d8f2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2202      	movs	r2, #2
 800d92c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d92e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f881 	bl	800da3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d93a:	e063      	b.n	800da04 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00e      	beq.n	800d966 <HAL_UART_IRQHandler+0x6c6>
 800d948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d94c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d95c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f001 fa1c 	bl	800ed9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d964:	e051      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d014      	beq.n	800d99c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d105      	bne.n	800d98a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d97e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d008      	beq.n	800d99c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d03a      	beq.n	800da08 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	4798      	blx	r3
    }
    return;
 800d99a:	e035      	b.n	800da08 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d009      	beq.n	800d9bc <HAL_UART_IRQHandler+0x71c>
 800d9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d003      	beq.n	800d9bc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f001 f9c6 	bl	800ed46 <UART_EndTransmit_IT>
    return;
 800d9ba:	e026      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d009      	beq.n	800d9dc <HAL_UART_IRQHandler+0x73c>
 800d9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f001 f9f5 	bl	800edc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9da:	e016      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d010      	beq.n	800da0a <HAL_UART_IRQHandler+0x76a>
 800d9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da0c      	bge.n	800da0a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f001 f9dd 	bl	800edb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9f6:	e008      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
      return;
 800d9f8:	bf00      	nop
 800d9fa:	e006      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
    return;
 800d9fc:	bf00      	nop
 800d9fe:	e004      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
      return;
 800da00:	bf00      	nop
 800da02:	e002      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
      return;
 800da04:	bf00      	nop
 800da06:	e000      	b.n	800da0a <HAL_UART_IRQHandler+0x76a>
    return;
 800da08:	bf00      	nop
  }
}
 800da0a:	37e8      	adds	r7, #232	@ 0xe8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	effffffe 	.word	0xeffffffe

0800da14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da58:	b092      	sub	sp, #72	@ 0x48
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	689a      	ldr	r2, [r3, #8]
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	431a      	orrs	r2, r3
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	695b      	ldr	r3, [r3, #20]
 800da72:	431a      	orrs	r2, r3
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	4313      	orrs	r3, r2
 800da7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4bbe      	ldr	r3, [pc, #760]	@ (800dd7c <UART_SetConfig+0x328>)
 800da84:	4013      	ands	r3, r2
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	6812      	ldr	r2, [r2, #0]
 800da8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800da8c:	430b      	orrs	r3, r1
 800da8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	68da      	ldr	r2, [r3, #12]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	430a      	orrs	r2, r1
 800daa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4ab3      	ldr	r2, [pc, #716]	@ (800dd80 <UART_SetConfig+0x32c>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d004      	beq.n	800dac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dabc:	4313      	orrs	r3, r2
 800dabe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689a      	ldr	r2, [r3, #8]
 800dac6:	4baf      	ldr	r3, [pc, #700]	@ (800dd84 <UART_SetConfig+0x330>)
 800dac8:	4013      	ands	r3, r2
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	6812      	ldr	r2, [r2, #0]
 800dace:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dad0:	430b      	orrs	r3, r1
 800dad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dada:	f023 010f 	bic.w	r1, r3, #15
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	430a      	orrs	r2, r1
 800dae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4aa6      	ldr	r2, [pc, #664]	@ (800dd88 <UART_SetConfig+0x334>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d177      	bne.n	800dbe4 <UART_SetConfig+0x190>
 800daf4:	4ba5      	ldr	r3, [pc, #660]	@ (800dd8c <UART_SetConfig+0x338>)
 800daf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dafc:	2b28      	cmp	r3, #40	@ 0x28
 800dafe:	d86d      	bhi.n	800dbdc <UART_SetConfig+0x188>
 800db00:	a201      	add	r2, pc, #4	@ (adr r2, 800db08 <UART_SetConfig+0xb4>)
 800db02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db06:	bf00      	nop
 800db08:	0800dbad 	.word	0x0800dbad
 800db0c:	0800dbdd 	.word	0x0800dbdd
 800db10:	0800dbdd 	.word	0x0800dbdd
 800db14:	0800dbdd 	.word	0x0800dbdd
 800db18:	0800dbdd 	.word	0x0800dbdd
 800db1c:	0800dbdd 	.word	0x0800dbdd
 800db20:	0800dbdd 	.word	0x0800dbdd
 800db24:	0800dbdd 	.word	0x0800dbdd
 800db28:	0800dbb5 	.word	0x0800dbb5
 800db2c:	0800dbdd 	.word	0x0800dbdd
 800db30:	0800dbdd 	.word	0x0800dbdd
 800db34:	0800dbdd 	.word	0x0800dbdd
 800db38:	0800dbdd 	.word	0x0800dbdd
 800db3c:	0800dbdd 	.word	0x0800dbdd
 800db40:	0800dbdd 	.word	0x0800dbdd
 800db44:	0800dbdd 	.word	0x0800dbdd
 800db48:	0800dbbd 	.word	0x0800dbbd
 800db4c:	0800dbdd 	.word	0x0800dbdd
 800db50:	0800dbdd 	.word	0x0800dbdd
 800db54:	0800dbdd 	.word	0x0800dbdd
 800db58:	0800dbdd 	.word	0x0800dbdd
 800db5c:	0800dbdd 	.word	0x0800dbdd
 800db60:	0800dbdd 	.word	0x0800dbdd
 800db64:	0800dbdd 	.word	0x0800dbdd
 800db68:	0800dbc5 	.word	0x0800dbc5
 800db6c:	0800dbdd 	.word	0x0800dbdd
 800db70:	0800dbdd 	.word	0x0800dbdd
 800db74:	0800dbdd 	.word	0x0800dbdd
 800db78:	0800dbdd 	.word	0x0800dbdd
 800db7c:	0800dbdd 	.word	0x0800dbdd
 800db80:	0800dbdd 	.word	0x0800dbdd
 800db84:	0800dbdd 	.word	0x0800dbdd
 800db88:	0800dbcd 	.word	0x0800dbcd
 800db8c:	0800dbdd 	.word	0x0800dbdd
 800db90:	0800dbdd 	.word	0x0800dbdd
 800db94:	0800dbdd 	.word	0x0800dbdd
 800db98:	0800dbdd 	.word	0x0800dbdd
 800db9c:	0800dbdd 	.word	0x0800dbdd
 800dba0:	0800dbdd 	.word	0x0800dbdd
 800dba4:	0800dbdd 	.word	0x0800dbdd
 800dba8:	0800dbd5 	.word	0x0800dbd5
 800dbac:	2301      	movs	r3, #1
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e222      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbb4:	2304      	movs	r3, #4
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbba:	e21e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbbc:	2308      	movs	r3, #8
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbc2:	e21a      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbc4:	2310      	movs	r3, #16
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbca:	e216      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbcc:	2320      	movs	r3, #32
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd2:	e212      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbd4:	2340      	movs	r3, #64	@ 0x40
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbda:	e20e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbdc:	2380      	movs	r3, #128	@ 0x80
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe2:	e20a      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a69      	ldr	r2, [pc, #420]	@ (800dd90 <UART_SetConfig+0x33c>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d130      	bne.n	800dc50 <UART_SetConfig+0x1fc>
 800dbee:	4b67      	ldr	r3, [pc, #412]	@ (800dd8c <UART_SetConfig+0x338>)
 800dbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbf2:	f003 0307 	and.w	r3, r3, #7
 800dbf6:	2b05      	cmp	r3, #5
 800dbf8:	d826      	bhi.n	800dc48 <UART_SetConfig+0x1f4>
 800dbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800dc00 <UART_SetConfig+0x1ac>)
 800dbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc00:	0800dc19 	.word	0x0800dc19
 800dc04:	0800dc21 	.word	0x0800dc21
 800dc08:	0800dc29 	.word	0x0800dc29
 800dc0c:	0800dc31 	.word	0x0800dc31
 800dc10:	0800dc39 	.word	0x0800dc39
 800dc14:	0800dc41 	.word	0x0800dc41
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1e:	e1ec      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc20:	2304      	movs	r3, #4
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc26:	e1e8      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc28:	2308      	movs	r3, #8
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc2e:	e1e4      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc30:	2310      	movs	r3, #16
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc36:	e1e0      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc38:	2320      	movs	r3, #32
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3e:	e1dc      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc40:	2340      	movs	r3, #64	@ 0x40
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc46:	e1d8      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc48:	2380      	movs	r3, #128	@ 0x80
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4e:	e1d4      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a4f      	ldr	r2, [pc, #316]	@ (800dd94 <UART_SetConfig+0x340>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d130      	bne.n	800dcbc <UART_SetConfig+0x268>
 800dc5a:	4b4c      	ldr	r3, [pc, #304]	@ (800dd8c <UART_SetConfig+0x338>)
 800dc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc5e:	f003 0307 	and.w	r3, r3, #7
 800dc62:	2b05      	cmp	r3, #5
 800dc64:	d826      	bhi.n	800dcb4 <UART_SetConfig+0x260>
 800dc66:	a201      	add	r2, pc, #4	@ (adr r2, 800dc6c <UART_SetConfig+0x218>)
 800dc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6c:	0800dc85 	.word	0x0800dc85
 800dc70:	0800dc8d 	.word	0x0800dc8d
 800dc74:	0800dc95 	.word	0x0800dc95
 800dc78:	0800dc9d 	.word	0x0800dc9d
 800dc7c:	0800dca5 	.word	0x0800dca5
 800dc80:	0800dcad 	.word	0x0800dcad
 800dc84:	2300      	movs	r3, #0
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e1b6      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc8c:	2304      	movs	r3, #4
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc92:	e1b2      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc94:	2308      	movs	r3, #8
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9a:	e1ae      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dc9c:	2310      	movs	r3, #16
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca2:	e1aa      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dca4:	2320      	movs	r3, #32
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e1a6      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dcac:	2340      	movs	r3, #64	@ 0x40
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e1a2      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dcb4:	2380      	movs	r3, #128	@ 0x80
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcba:	e19e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a35      	ldr	r2, [pc, #212]	@ (800dd98 <UART_SetConfig+0x344>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d130      	bne.n	800dd28 <UART_SetConfig+0x2d4>
 800dcc6:	4b31      	ldr	r3, [pc, #196]	@ (800dd8c <UART_SetConfig+0x338>)
 800dcc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcca:	f003 0307 	and.w	r3, r3, #7
 800dcce:	2b05      	cmp	r3, #5
 800dcd0:	d826      	bhi.n	800dd20 <UART_SetConfig+0x2cc>
 800dcd2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd8 <UART_SetConfig+0x284>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dcf1 	.word	0x0800dcf1
 800dcdc:	0800dcf9 	.word	0x0800dcf9
 800dce0:	0800dd01 	.word	0x0800dd01
 800dce4:	0800dd09 	.word	0x0800dd09
 800dce8:	0800dd11 	.word	0x0800dd11
 800dcec:	0800dd19 	.word	0x0800dd19
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf6:	e180      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dcf8:	2304      	movs	r3, #4
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfe:	e17c      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd00:	2308      	movs	r3, #8
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd06:	e178      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd08:	2310      	movs	r3, #16
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd0e:	e174      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd10:	2320      	movs	r3, #32
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd16:	e170      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd18:	2340      	movs	r3, #64	@ 0x40
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1e:	e16c      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd20:	2380      	movs	r3, #128	@ 0x80
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd26:	e168      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a1b      	ldr	r2, [pc, #108]	@ (800dd9c <UART_SetConfig+0x348>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d142      	bne.n	800ddb8 <UART_SetConfig+0x364>
 800dd32:	4b16      	ldr	r3, [pc, #88]	@ (800dd8c <UART_SetConfig+0x338>)
 800dd34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd36:	f003 0307 	and.w	r3, r3, #7
 800dd3a:	2b05      	cmp	r3, #5
 800dd3c:	d838      	bhi.n	800ddb0 <UART_SetConfig+0x35c>
 800dd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd44 <UART_SetConfig+0x2f0>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dd5d 	.word	0x0800dd5d
 800dd48:	0800dd65 	.word	0x0800dd65
 800dd4c:	0800dd6d 	.word	0x0800dd6d
 800dd50:	0800dd75 	.word	0x0800dd75
 800dd54:	0800dda1 	.word	0x0800dda1
 800dd58:	0800dda9 	.word	0x0800dda9
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd62:	e14a      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd64:	2304      	movs	r3, #4
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd6a:	e146      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd72:	e142      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd74:	2310      	movs	r3, #16
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd7a:	e13e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dd7c:	cfff69f3 	.word	0xcfff69f3
 800dd80:	58000c00 	.word	0x58000c00
 800dd84:	11fff4ff 	.word	0x11fff4ff
 800dd88:	40011000 	.word	0x40011000
 800dd8c:	58024400 	.word	0x58024400
 800dd90:	40004400 	.word	0x40004400
 800dd94:	40004800 	.word	0x40004800
 800dd98:	40004c00 	.word	0x40004c00
 800dd9c:	40005000 	.word	0x40005000
 800dda0:	2320      	movs	r3, #32
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda6:	e128      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dda8:	2340      	movs	r3, #64	@ 0x40
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddae:	e124      	b.n	800dffa <UART_SetConfig+0x5a6>
 800ddb0:	2380      	movs	r3, #128	@ 0x80
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb6:	e120      	b.n	800dffa <UART_SetConfig+0x5a6>
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4acb      	ldr	r2, [pc, #812]	@ (800e0ec <UART_SetConfig+0x698>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d176      	bne.n	800deb0 <UART_SetConfig+0x45c>
 800ddc2:	4bcb      	ldr	r3, [pc, #812]	@ (800e0f0 <UART_SetConfig+0x69c>)
 800ddc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddca:	2b28      	cmp	r3, #40	@ 0x28
 800ddcc:	d86c      	bhi.n	800dea8 <UART_SetConfig+0x454>
 800ddce:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd4 <UART_SetConfig+0x380>)
 800ddd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd4:	0800de79 	.word	0x0800de79
 800ddd8:	0800dea9 	.word	0x0800dea9
 800dddc:	0800dea9 	.word	0x0800dea9
 800dde0:	0800dea9 	.word	0x0800dea9
 800dde4:	0800dea9 	.word	0x0800dea9
 800dde8:	0800dea9 	.word	0x0800dea9
 800ddec:	0800dea9 	.word	0x0800dea9
 800ddf0:	0800dea9 	.word	0x0800dea9
 800ddf4:	0800de81 	.word	0x0800de81
 800ddf8:	0800dea9 	.word	0x0800dea9
 800ddfc:	0800dea9 	.word	0x0800dea9
 800de00:	0800dea9 	.word	0x0800dea9
 800de04:	0800dea9 	.word	0x0800dea9
 800de08:	0800dea9 	.word	0x0800dea9
 800de0c:	0800dea9 	.word	0x0800dea9
 800de10:	0800dea9 	.word	0x0800dea9
 800de14:	0800de89 	.word	0x0800de89
 800de18:	0800dea9 	.word	0x0800dea9
 800de1c:	0800dea9 	.word	0x0800dea9
 800de20:	0800dea9 	.word	0x0800dea9
 800de24:	0800dea9 	.word	0x0800dea9
 800de28:	0800dea9 	.word	0x0800dea9
 800de2c:	0800dea9 	.word	0x0800dea9
 800de30:	0800dea9 	.word	0x0800dea9
 800de34:	0800de91 	.word	0x0800de91
 800de38:	0800dea9 	.word	0x0800dea9
 800de3c:	0800dea9 	.word	0x0800dea9
 800de40:	0800dea9 	.word	0x0800dea9
 800de44:	0800dea9 	.word	0x0800dea9
 800de48:	0800dea9 	.word	0x0800dea9
 800de4c:	0800dea9 	.word	0x0800dea9
 800de50:	0800dea9 	.word	0x0800dea9
 800de54:	0800de99 	.word	0x0800de99
 800de58:	0800dea9 	.word	0x0800dea9
 800de5c:	0800dea9 	.word	0x0800dea9
 800de60:	0800dea9 	.word	0x0800dea9
 800de64:	0800dea9 	.word	0x0800dea9
 800de68:	0800dea9 	.word	0x0800dea9
 800de6c:	0800dea9 	.word	0x0800dea9
 800de70:	0800dea9 	.word	0x0800dea9
 800de74:	0800dea1 	.word	0x0800dea1
 800de78:	2301      	movs	r3, #1
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de7e:	e0bc      	b.n	800dffa <UART_SetConfig+0x5a6>
 800de80:	2304      	movs	r3, #4
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de86:	e0b8      	b.n	800dffa <UART_SetConfig+0x5a6>
 800de88:	2308      	movs	r3, #8
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de8e:	e0b4      	b.n	800dffa <UART_SetConfig+0x5a6>
 800de90:	2310      	movs	r3, #16
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de96:	e0b0      	b.n	800dffa <UART_SetConfig+0x5a6>
 800de98:	2320      	movs	r3, #32
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9e:	e0ac      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dea0:	2340      	movs	r3, #64	@ 0x40
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea6:	e0a8      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dea8:	2380      	movs	r3, #128	@ 0x80
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deae:	e0a4      	b.n	800dffa <UART_SetConfig+0x5a6>
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a8f      	ldr	r2, [pc, #572]	@ (800e0f4 <UART_SetConfig+0x6a0>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d130      	bne.n	800df1c <UART_SetConfig+0x4c8>
 800deba:	4b8d      	ldr	r3, [pc, #564]	@ (800e0f0 <UART_SetConfig+0x69c>)
 800debc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800debe:	f003 0307 	and.w	r3, r3, #7
 800dec2:	2b05      	cmp	r3, #5
 800dec4:	d826      	bhi.n	800df14 <UART_SetConfig+0x4c0>
 800dec6:	a201      	add	r2, pc, #4	@ (adr r2, 800decc <UART_SetConfig+0x478>)
 800dec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800decc:	0800dee5 	.word	0x0800dee5
 800ded0:	0800deed 	.word	0x0800deed
 800ded4:	0800def5 	.word	0x0800def5
 800ded8:	0800defd 	.word	0x0800defd
 800dedc:	0800df05 	.word	0x0800df05
 800dee0:	0800df0d 	.word	0x0800df0d
 800dee4:	2300      	movs	r3, #0
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deea:	e086      	b.n	800dffa <UART_SetConfig+0x5a6>
 800deec:	2304      	movs	r3, #4
 800deee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def2:	e082      	b.n	800dffa <UART_SetConfig+0x5a6>
 800def4:	2308      	movs	r3, #8
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defa:	e07e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800defc:	2310      	movs	r3, #16
 800defe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df02:	e07a      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df04:	2320      	movs	r3, #32
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0a:	e076      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df0c:	2340      	movs	r3, #64	@ 0x40
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df12:	e072      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df14:	2380      	movs	r3, #128	@ 0x80
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1a:	e06e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a75      	ldr	r2, [pc, #468]	@ (800e0f8 <UART_SetConfig+0x6a4>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d130      	bne.n	800df88 <UART_SetConfig+0x534>
 800df26:	4b72      	ldr	r3, [pc, #456]	@ (800e0f0 <UART_SetConfig+0x69c>)
 800df28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df2a:	f003 0307 	and.w	r3, r3, #7
 800df2e:	2b05      	cmp	r3, #5
 800df30:	d826      	bhi.n	800df80 <UART_SetConfig+0x52c>
 800df32:	a201      	add	r2, pc, #4	@ (adr r2, 800df38 <UART_SetConfig+0x4e4>)
 800df34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df38:	0800df51 	.word	0x0800df51
 800df3c:	0800df59 	.word	0x0800df59
 800df40:	0800df61 	.word	0x0800df61
 800df44:	0800df69 	.word	0x0800df69
 800df48:	0800df71 	.word	0x0800df71
 800df4c:	0800df79 	.word	0x0800df79
 800df50:	2300      	movs	r3, #0
 800df52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df56:	e050      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df58:	2304      	movs	r3, #4
 800df5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df5e:	e04c      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df60:	2308      	movs	r3, #8
 800df62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df66:	e048      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df68:	2310      	movs	r3, #16
 800df6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df6e:	e044      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df70:	2320      	movs	r3, #32
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df76:	e040      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df78:	2340      	movs	r3, #64	@ 0x40
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7e:	e03c      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df80:	2380      	movs	r3, #128	@ 0x80
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df86:	e038      	b.n	800dffa <UART_SetConfig+0x5a6>
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a5b      	ldr	r2, [pc, #364]	@ (800e0fc <UART_SetConfig+0x6a8>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d130      	bne.n	800dff4 <UART_SetConfig+0x5a0>
 800df92:	4b57      	ldr	r3, [pc, #348]	@ (800e0f0 <UART_SetConfig+0x69c>)
 800df94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df96:	f003 0307 	and.w	r3, r3, #7
 800df9a:	2b05      	cmp	r3, #5
 800df9c:	d826      	bhi.n	800dfec <UART_SetConfig+0x598>
 800df9e:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa4 <UART_SetConfig+0x550>)
 800dfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa4:	0800dfbd 	.word	0x0800dfbd
 800dfa8:	0800dfc5 	.word	0x0800dfc5
 800dfac:	0800dfcd 	.word	0x0800dfcd
 800dfb0:	0800dfd5 	.word	0x0800dfd5
 800dfb4:	0800dfdd 	.word	0x0800dfdd
 800dfb8:	0800dfe5 	.word	0x0800dfe5
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfc2:	e01a      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfca:	e016      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dfcc:	2308      	movs	r3, #8
 800dfce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfd2:	e012      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dfd4:	2310      	movs	r3, #16
 800dfd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfda:	e00e      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dfdc:	2320      	movs	r3, #32
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe2:	e00a      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dfe4:	2340      	movs	r3, #64	@ 0x40
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfea:	e006      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dfec:	2380      	movs	r3, #128	@ 0x80
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff2:	e002      	b.n	800dffa <UART_SetConfig+0x5a6>
 800dff4:	2380      	movs	r3, #128	@ 0x80
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a3f      	ldr	r2, [pc, #252]	@ (800e0fc <UART_SetConfig+0x6a8>)
 800e000:	4293      	cmp	r3, r2
 800e002:	f040 80f8 	bne.w	800e1f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e006:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	dc46      	bgt.n	800e09c <UART_SetConfig+0x648>
 800e00e:	2b02      	cmp	r3, #2
 800e010:	f2c0 8082 	blt.w	800e118 <UART_SetConfig+0x6c4>
 800e014:	3b02      	subs	r3, #2
 800e016:	2b1e      	cmp	r3, #30
 800e018:	d87e      	bhi.n	800e118 <UART_SetConfig+0x6c4>
 800e01a:	a201      	add	r2, pc, #4	@ (adr r2, 800e020 <UART_SetConfig+0x5cc>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e0a3 	.word	0x0800e0a3
 800e024:	0800e119 	.word	0x0800e119
 800e028:	0800e0ab 	.word	0x0800e0ab
 800e02c:	0800e119 	.word	0x0800e119
 800e030:	0800e119 	.word	0x0800e119
 800e034:	0800e119 	.word	0x0800e119
 800e038:	0800e0bb 	.word	0x0800e0bb
 800e03c:	0800e119 	.word	0x0800e119
 800e040:	0800e119 	.word	0x0800e119
 800e044:	0800e119 	.word	0x0800e119
 800e048:	0800e119 	.word	0x0800e119
 800e04c:	0800e119 	.word	0x0800e119
 800e050:	0800e119 	.word	0x0800e119
 800e054:	0800e119 	.word	0x0800e119
 800e058:	0800e0cb 	.word	0x0800e0cb
 800e05c:	0800e119 	.word	0x0800e119
 800e060:	0800e119 	.word	0x0800e119
 800e064:	0800e119 	.word	0x0800e119
 800e068:	0800e119 	.word	0x0800e119
 800e06c:	0800e119 	.word	0x0800e119
 800e070:	0800e119 	.word	0x0800e119
 800e074:	0800e119 	.word	0x0800e119
 800e078:	0800e119 	.word	0x0800e119
 800e07c:	0800e119 	.word	0x0800e119
 800e080:	0800e119 	.word	0x0800e119
 800e084:	0800e119 	.word	0x0800e119
 800e088:	0800e119 	.word	0x0800e119
 800e08c:	0800e119 	.word	0x0800e119
 800e090:	0800e119 	.word	0x0800e119
 800e094:	0800e119 	.word	0x0800e119
 800e098:	0800e10b 	.word	0x0800e10b
 800e09c:	2b40      	cmp	r3, #64	@ 0x40
 800e09e:	d037      	beq.n	800e110 <UART_SetConfig+0x6bc>
 800e0a0:	e03a      	b.n	800e118 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e0a2:	f7fd fe05 	bl	800bcb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e0a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0a8:	e03c      	b.n	800e124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fd fe14 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0b8:	e034      	b.n	800e124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0ba:	f107 0318 	add.w	r3, r7, #24
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fd ff60 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0c8:	e02c      	b.n	800e124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0ca:	4b09      	ldr	r3, [pc, #36]	@ (800e0f0 <UART_SetConfig+0x69c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 0320 	and.w	r3, r3, #32
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d016      	beq.n	800e104 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0d6:	4b06      	ldr	r3, [pc, #24]	@ (800e0f0 <UART_SetConfig+0x69c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	08db      	lsrs	r3, r3, #3
 800e0dc:	f003 0303 	and.w	r3, r3, #3
 800e0e0:	4a07      	ldr	r2, [pc, #28]	@ (800e100 <UART_SetConfig+0x6ac>)
 800e0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0e8:	e01c      	b.n	800e124 <UART_SetConfig+0x6d0>
 800e0ea:	bf00      	nop
 800e0ec:	40011400 	.word	0x40011400
 800e0f0:	58024400 	.word	0x58024400
 800e0f4:	40007800 	.word	0x40007800
 800e0f8:	40007c00 	.word	0x40007c00
 800e0fc:	58000c00 	.word	0x58000c00
 800e100:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e104:	4b9d      	ldr	r3, [pc, #628]	@ (800e37c <UART_SetConfig+0x928>)
 800e106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e108:	e00c      	b.n	800e124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e10a:	4b9d      	ldr	r3, [pc, #628]	@ (800e380 <UART_SetConfig+0x92c>)
 800e10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e10e:	e009      	b.n	800e124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e116:	e005      	b.n	800e124 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e118:	2300      	movs	r3, #0
 800e11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e122:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e126:	2b00      	cmp	r3, #0
 800e128:	f000 81de 	beq.w	800e4e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e130:	4a94      	ldr	r2, [pc, #592]	@ (800e384 <UART_SetConfig+0x930>)
 800e132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e136:	461a      	mov	r2, r3
 800e138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e13e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	4613      	mov	r3, r2
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	4413      	add	r3, r2
 800e14a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d305      	bcc.n	800e15c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e158:	429a      	cmp	r2, r3
 800e15a:	d903      	bls.n	800e164 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e162:	e1c1      	b.n	800e4e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e166:	2200      	movs	r2, #0
 800e168:	60bb      	str	r3, [r7, #8]
 800e16a:	60fa      	str	r2, [r7, #12]
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e170:	4a84      	ldr	r2, [pc, #528]	@ (800e384 <UART_SetConfig+0x930>)
 800e172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e176:	b29b      	uxth	r3, r3
 800e178:	2200      	movs	r2, #0
 800e17a:	603b      	str	r3, [r7, #0]
 800e17c:	607a      	str	r2, [r7, #4]
 800e17e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e186:	f7f2 f913 	bl	80003b0 <__aeabi_uldivmod>
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	4610      	mov	r0, r2
 800e190:	4619      	mov	r1, r3
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	f04f 0300 	mov.w	r3, #0
 800e19a:	020b      	lsls	r3, r1, #8
 800e19c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e1a0:	0202      	lsls	r2, r0, #8
 800e1a2:	6979      	ldr	r1, [r7, #20]
 800e1a4:	6849      	ldr	r1, [r1, #4]
 800e1a6:	0849      	lsrs	r1, r1, #1
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	eb12 0804 	adds.w	r8, r2, r4
 800e1b2:	eb43 0905 	adc.w	r9, r3, r5
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	469a      	mov	sl, r3
 800e1be:	4693      	mov	fp, r2
 800e1c0:	4652      	mov	r2, sl
 800e1c2:	465b      	mov	r3, fp
 800e1c4:	4640      	mov	r0, r8
 800e1c6:	4649      	mov	r1, r9
 800e1c8:	f7f2 f8f2 	bl	80003b0 <__aeabi_uldivmod>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1da:	d308      	bcc.n	800e1ee <UART_SetConfig+0x79a>
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1e2:	d204      	bcs.n	800e1ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1ea:	60da      	str	r2, [r3, #12]
 800e1ec:	e17c      	b.n	800e4e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1f4:	e178      	b.n	800e4e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	69db      	ldr	r3, [r3, #28]
 800e1fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1fe:	f040 80c5 	bne.w	800e38c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e202:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e206:	2b20      	cmp	r3, #32
 800e208:	dc48      	bgt.n	800e29c <UART_SetConfig+0x848>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	db7b      	blt.n	800e306 <UART_SetConfig+0x8b2>
 800e20e:	2b20      	cmp	r3, #32
 800e210:	d879      	bhi.n	800e306 <UART_SetConfig+0x8b2>
 800e212:	a201      	add	r2, pc, #4	@ (adr r2, 800e218 <UART_SetConfig+0x7c4>)
 800e214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e218:	0800e2a3 	.word	0x0800e2a3
 800e21c:	0800e2ab 	.word	0x0800e2ab
 800e220:	0800e307 	.word	0x0800e307
 800e224:	0800e307 	.word	0x0800e307
 800e228:	0800e2b3 	.word	0x0800e2b3
 800e22c:	0800e307 	.word	0x0800e307
 800e230:	0800e307 	.word	0x0800e307
 800e234:	0800e307 	.word	0x0800e307
 800e238:	0800e2c3 	.word	0x0800e2c3
 800e23c:	0800e307 	.word	0x0800e307
 800e240:	0800e307 	.word	0x0800e307
 800e244:	0800e307 	.word	0x0800e307
 800e248:	0800e307 	.word	0x0800e307
 800e24c:	0800e307 	.word	0x0800e307
 800e250:	0800e307 	.word	0x0800e307
 800e254:	0800e307 	.word	0x0800e307
 800e258:	0800e2d3 	.word	0x0800e2d3
 800e25c:	0800e307 	.word	0x0800e307
 800e260:	0800e307 	.word	0x0800e307
 800e264:	0800e307 	.word	0x0800e307
 800e268:	0800e307 	.word	0x0800e307
 800e26c:	0800e307 	.word	0x0800e307
 800e270:	0800e307 	.word	0x0800e307
 800e274:	0800e307 	.word	0x0800e307
 800e278:	0800e307 	.word	0x0800e307
 800e27c:	0800e307 	.word	0x0800e307
 800e280:	0800e307 	.word	0x0800e307
 800e284:	0800e307 	.word	0x0800e307
 800e288:	0800e307 	.word	0x0800e307
 800e28c:	0800e307 	.word	0x0800e307
 800e290:	0800e307 	.word	0x0800e307
 800e294:	0800e307 	.word	0x0800e307
 800e298:	0800e2f9 	.word	0x0800e2f9
 800e29c:	2b40      	cmp	r3, #64	@ 0x40
 800e29e:	d02e      	beq.n	800e2fe <UART_SetConfig+0x8aa>
 800e2a0:	e031      	b.n	800e306 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2a2:	f7fb fccd 	bl	8009c40 <HAL_RCC_GetPCLK1Freq>
 800e2a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e2a8:	e033      	b.n	800e312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2aa:	f7fb fcdf 	bl	8009c6c <HAL_RCC_GetPCLK2Freq>
 800e2ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e2b0:	e02f      	b.n	800e312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fd fd10 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c0:	e027      	b.n	800e312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2c2:	f107 0318 	add.w	r3, r7, #24
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fd fe5c 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2d0:	e01f      	b.n	800e312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2d2:	4b2d      	ldr	r3, [pc, #180]	@ (800e388 <UART_SetConfig+0x934>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f003 0320 	and.w	r3, r3, #32
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d009      	beq.n	800e2f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2de:	4b2a      	ldr	r3, [pc, #168]	@ (800e388 <UART_SetConfig+0x934>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	08db      	lsrs	r3, r3, #3
 800e2e4:	f003 0303 	and.w	r3, r3, #3
 800e2e8:	4a24      	ldr	r2, [pc, #144]	@ (800e37c <UART_SetConfig+0x928>)
 800e2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2f0:	e00f      	b.n	800e312 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e2f2:	4b22      	ldr	r3, [pc, #136]	@ (800e37c <UART_SetConfig+0x928>)
 800e2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2f6:	e00c      	b.n	800e312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2f8:	4b21      	ldr	r3, [pc, #132]	@ (800e380 <UART_SetConfig+0x92c>)
 800e2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2fc:	e009      	b.n	800e312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e304:	e005      	b.n	800e312 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e306:	2300      	movs	r3, #0
 800e308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e314:	2b00      	cmp	r3, #0
 800e316:	f000 80e7 	beq.w	800e4e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e31e:	4a19      	ldr	r2, [pc, #100]	@ (800e384 <UART_SetConfig+0x930>)
 800e320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e324:	461a      	mov	r2, r3
 800e326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e328:	fbb3 f3f2 	udiv	r3, r3, r2
 800e32c:	005a      	lsls	r2, r3, #1
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	085b      	lsrs	r3, r3, #1
 800e334:	441a      	add	r2, r3
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e33e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e342:	2b0f      	cmp	r3, #15
 800e344:	d916      	bls.n	800e374 <UART_SetConfig+0x920>
 800e346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e34c:	d212      	bcs.n	800e374 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e350:	b29b      	uxth	r3, r3
 800e352:	f023 030f 	bic.w	r3, r3, #15
 800e356:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35a:	085b      	lsrs	r3, r3, #1
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	f003 0307 	and.w	r3, r3, #7
 800e362:	b29a      	uxth	r2, r3
 800e364:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e366:	4313      	orrs	r3, r2
 800e368:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	e0b9      	b.n	800e4e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e37a:	e0b5      	b.n	800e4e8 <UART_SetConfig+0xa94>
 800e37c:	03d09000 	.word	0x03d09000
 800e380:	003d0900 	.word	0x003d0900
 800e384:	08028a08 	.word	0x08028a08
 800e388:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e38c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e390:	2b20      	cmp	r3, #32
 800e392:	dc49      	bgt.n	800e428 <UART_SetConfig+0x9d4>
 800e394:	2b00      	cmp	r3, #0
 800e396:	db7c      	blt.n	800e492 <UART_SetConfig+0xa3e>
 800e398:	2b20      	cmp	r3, #32
 800e39a:	d87a      	bhi.n	800e492 <UART_SetConfig+0xa3e>
 800e39c:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a4 <UART_SetConfig+0x950>)
 800e39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a2:	bf00      	nop
 800e3a4:	0800e42f 	.word	0x0800e42f
 800e3a8:	0800e437 	.word	0x0800e437
 800e3ac:	0800e493 	.word	0x0800e493
 800e3b0:	0800e493 	.word	0x0800e493
 800e3b4:	0800e43f 	.word	0x0800e43f
 800e3b8:	0800e493 	.word	0x0800e493
 800e3bc:	0800e493 	.word	0x0800e493
 800e3c0:	0800e493 	.word	0x0800e493
 800e3c4:	0800e44f 	.word	0x0800e44f
 800e3c8:	0800e493 	.word	0x0800e493
 800e3cc:	0800e493 	.word	0x0800e493
 800e3d0:	0800e493 	.word	0x0800e493
 800e3d4:	0800e493 	.word	0x0800e493
 800e3d8:	0800e493 	.word	0x0800e493
 800e3dc:	0800e493 	.word	0x0800e493
 800e3e0:	0800e493 	.word	0x0800e493
 800e3e4:	0800e45f 	.word	0x0800e45f
 800e3e8:	0800e493 	.word	0x0800e493
 800e3ec:	0800e493 	.word	0x0800e493
 800e3f0:	0800e493 	.word	0x0800e493
 800e3f4:	0800e493 	.word	0x0800e493
 800e3f8:	0800e493 	.word	0x0800e493
 800e3fc:	0800e493 	.word	0x0800e493
 800e400:	0800e493 	.word	0x0800e493
 800e404:	0800e493 	.word	0x0800e493
 800e408:	0800e493 	.word	0x0800e493
 800e40c:	0800e493 	.word	0x0800e493
 800e410:	0800e493 	.word	0x0800e493
 800e414:	0800e493 	.word	0x0800e493
 800e418:	0800e493 	.word	0x0800e493
 800e41c:	0800e493 	.word	0x0800e493
 800e420:	0800e493 	.word	0x0800e493
 800e424:	0800e485 	.word	0x0800e485
 800e428:	2b40      	cmp	r3, #64	@ 0x40
 800e42a:	d02e      	beq.n	800e48a <UART_SetConfig+0xa36>
 800e42c:	e031      	b.n	800e492 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e42e:	f7fb fc07 	bl	8009c40 <HAL_RCC_GetPCLK1Freq>
 800e432:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e434:	e033      	b.n	800e49e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e436:	f7fb fc19 	bl	8009c6c <HAL_RCC_GetPCLK2Freq>
 800e43a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e43c:	e02f      	b.n	800e49e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e43e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e442:	4618      	mov	r0, r3
 800e444:	f7fd fc4a 	bl	800bcdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e44c:	e027      	b.n	800e49e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e44e:	f107 0318 	add.w	r3, r7, #24
 800e452:	4618      	mov	r0, r3
 800e454:	f7fd fd96 	bl	800bf84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e45c:	e01f      	b.n	800e49e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e45e:	4b2d      	ldr	r3, [pc, #180]	@ (800e514 <UART_SetConfig+0xac0>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f003 0320 	and.w	r3, r3, #32
 800e466:	2b00      	cmp	r3, #0
 800e468:	d009      	beq.n	800e47e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e46a:	4b2a      	ldr	r3, [pc, #168]	@ (800e514 <UART_SetConfig+0xac0>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	08db      	lsrs	r3, r3, #3
 800e470:	f003 0303 	and.w	r3, r3, #3
 800e474:	4a28      	ldr	r2, [pc, #160]	@ (800e518 <UART_SetConfig+0xac4>)
 800e476:	fa22 f303 	lsr.w	r3, r2, r3
 800e47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e47c:	e00f      	b.n	800e49e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e47e:	4b26      	ldr	r3, [pc, #152]	@ (800e518 <UART_SetConfig+0xac4>)
 800e480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e482:	e00c      	b.n	800e49e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e484:	4b25      	ldr	r3, [pc, #148]	@ (800e51c <UART_SetConfig+0xac8>)
 800e486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e488:	e009      	b.n	800e49e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e48a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e490:	e005      	b.n	800e49e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e492:	2300      	movs	r3, #0
 800e494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e49c:	bf00      	nop
    }

    if (pclk != 0U)
 800e49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d021      	beq.n	800e4e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e520 <UART_SetConfig+0xacc>)
 800e4aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	085b      	lsrs	r3, r3, #1
 800e4bc:	441a      	add	r2, r3
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ca:	2b0f      	cmp	r3, #15
 800e4cc:	d909      	bls.n	800e4e2 <UART_SetConfig+0xa8e>
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4d4:	d205      	bcs.n	800e4e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	60da      	str	r2, [r3, #12]
 800e4e0:	e002      	b.n	800e4e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	2200      	movs	r2, #0
 800e502:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e504:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3748      	adds	r7, #72	@ 0x48
 800e50c:	46bd      	mov	sp, r7
 800e50e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e512:	bf00      	nop
 800e514:	58024400 	.word	0x58024400
 800e518:	03d09000 	.word	0x03d09000
 800e51c:	003d0900 	.word	0x003d0900
 800e520:	08028a08 	.word	0x08028a08

0800e524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e530:	f003 0308 	and.w	r3, r3, #8
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00a      	beq.n	800e54e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	430a      	orrs	r2, r1
 800e54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	430a      	orrs	r2, r1
 800e56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00a      	beq.n	800e592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	430a      	orrs	r2, r1
 800e590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e596:	f003 0304 	and.w	r3, r3, #4
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00a      	beq.n	800e5b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	430a      	orrs	r2, r1
 800e5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b8:	f003 0310 	and.w	r3, r3, #16
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00a      	beq.n	800e5d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5da:	f003 0320 	and.w	r3, r3, #32
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00a      	beq.n	800e5f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	430a      	orrs	r2, r1
 800e5f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e600:	2b00      	cmp	r3, #0
 800e602:	d01a      	beq.n	800e63a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	430a      	orrs	r2, r1
 800e618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e61e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e622:	d10a      	bne.n	800e63a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	430a      	orrs	r2, r1
 800e638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00a      	beq.n	800e65c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	430a      	orrs	r2, r1
 800e65a:	605a      	str	r2, [r3, #4]
  }
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b098      	sub	sp, #96	@ 0x60
 800e66c:	af02      	add	r7, sp, #8
 800e66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e678:	f7f4 f8fe 	bl	8002878 <HAL_GetTick>
 800e67c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f003 0308 	and.w	r3, r3, #8
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d12f      	bne.n	800e6ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e68c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e694:	2200      	movs	r2, #0
 800e696:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f88e 	bl	800e7bc <UART_WaitOnFlagUntilTimeout>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d022      	beq.n	800e6ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ae:	e853 3f00 	ldrex	r3, [r3]
 800e6b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e6ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6cc:	e841 2300 	strex	r3, r2, [r1]
 800e6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e6      	bne.n	800e6a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2220      	movs	r2, #32
 800e6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	e063      	b.n	800e7b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f003 0304 	and.w	r3, r3, #4
 800e6f6:	2b04      	cmp	r3, #4
 800e6f8:	d149      	bne.n	800e78e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e702:	2200      	movs	r2, #0
 800e704:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f857 	bl	800e7bc <UART_WaitOnFlagUntilTimeout>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d03c      	beq.n	800e78e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	e853 3f00 	ldrex	r3, [r3]
 800e720:	623b      	str	r3, [r7, #32]
   return(result);
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	461a      	mov	r2, r3
 800e730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e732:	633b      	str	r3, [r7, #48]	@ 0x30
 800e734:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e73a:	e841 2300 	strex	r3, r2, [r1]
 800e73e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1e6      	bne.n	800e714 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3308      	adds	r3, #8
 800e74c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	e853 3f00 	ldrex	r3, [r3]
 800e754:	60fb      	str	r3, [r7, #12]
   return(result);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f023 0301 	bic.w	r3, r3, #1
 800e75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	3308      	adds	r3, #8
 800e764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e766:	61fa      	str	r2, [r7, #28]
 800e768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76a:	69b9      	ldr	r1, [r7, #24]
 800e76c:	69fa      	ldr	r2, [r7, #28]
 800e76e:	e841 2300 	strex	r3, r2, [r1]
 800e772:	617b      	str	r3, [r7, #20]
   return(result);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1e5      	bne.n	800e746 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2220      	movs	r2, #32
 800e77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e78a:	2303      	movs	r3, #3
 800e78c:	e012      	b.n	800e7b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2220      	movs	r2, #32
 800e792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2220      	movs	r2, #32
 800e79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3758      	adds	r7, #88	@ 0x58
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	603b      	str	r3, [r7, #0]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7cc:	e04f      	b.n	800e86e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d4:	d04b      	beq.n	800e86e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7d6:	f7f4 f84f 	bl	8002878 <HAL_GetTick>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	69ba      	ldr	r2, [r7, #24]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d302      	bcc.n	800e7ec <UART_WaitOnFlagUntilTimeout+0x30>
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d101      	bne.n	800e7f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e04e      	b.n	800e88e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f003 0304 	and.w	r3, r3, #4
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d037      	beq.n	800e86e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	2b80      	cmp	r3, #128	@ 0x80
 800e802:	d034      	beq.n	800e86e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b40      	cmp	r3, #64	@ 0x40
 800e808:	d031      	beq.n	800e86e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	69db      	ldr	r3, [r3, #28]
 800e810:	f003 0308 	and.w	r3, r3, #8
 800e814:	2b08      	cmp	r3, #8
 800e816:	d110      	bne.n	800e83a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2208      	movs	r2, #8
 800e81e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 f921 	bl	800ea68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2208      	movs	r2, #8
 800e82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2200      	movs	r2, #0
 800e832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	e029      	b.n	800e88e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	69db      	ldr	r3, [r3, #28]
 800e840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e848:	d111      	bne.n	800e86e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f000 f907 	bl	800ea68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2220      	movs	r2, #32
 800e85e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2200      	movs	r2, #0
 800e866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e00f      	b.n	800e88e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	69da      	ldr	r2, [r3, #28]
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4013      	ands	r3, r2
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	bf0c      	ite	eq
 800e87e:	2301      	moveq	r3, #1
 800e880:	2300      	movne	r3, #0
 800e882:	b2db      	uxtb	r3, r3
 800e884:	461a      	mov	r2, r3
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d0a0      	beq.n	800e7ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
	...

0800e898 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b096      	sub	sp, #88	@ 0x58
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	88fa      	ldrh	r2, [r7, #6]
 800e8b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2222      	movs	r2, #34	@ 0x22
 800e8c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d02d      	beq.n	800e92a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8d4:	4a40      	ldr	r2, [pc, #256]	@ (800e9d8 <UART_Start_Receive_DMA+0x140>)
 800e8d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8de:	4a3f      	ldr	r2, [pc, #252]	@ (800e9dc <UART_Start_Receive_DMA+0x144>)
 800e8e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e8:	4a3d      	ldr	r2, [pc, #244]	@ (800e9e0 <UART_Start_Receive_DMA+0x148>)
 800e8ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3324      	adds	r3, #36	@ 0x24
 800e902:	4619      	mov	r1, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e908:	461a      	mov	r2, r3
 800e90a:	88fb      	ldrh	r3, [r7, #6]
 800e90c:	f7f5 ff2a 	bl	8004764 <HAL_DMA_Start_IT>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d009      	beq.n	800e92a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2210      	movs	r2, #16
 800e91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2220      	movs	r2, #32
 800e922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	e051      	b.n	800e9ce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d018      	beq.n	800e964 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e93a:	e853 3f00 	ldrex	r3, [r3]
 800e93e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e946:	657b      	str	r3, [r7, #84]	@ 0x54
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	461a      	mov	r2, r3
 800e94e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e950:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e952:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e954:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e958:	e841 2300 	strex	r3, r2, [r1]
 800e95c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1e6      	bne.n	800e932 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3308      	adds	r3, #8
 800e96a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96e:	e853 3f00 	ldrex	r3, [r3]
 800e972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	f043 0301 	orr.w	r3, r3, #1
 800e97a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3308      	adds	r3, #8
 800e982:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e984:	637a      	str	r2, [r7, #52]	@ 0x34
 800e986:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e988:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e98a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e98c:	e841 2300 	strex	r3, r2, [r1]
 800e990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1e5      	bne.n	800e964 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3308      	adds	r3, #8
 800e99e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	e853 3f00 	ldrex	r3, [r3]
 800e9a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e9b8:	623a      	str	r2, [r7, #32]
 800e9ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9bc:	69f9      	ldr	r1, [r7, #28]
 800e9be:	6a3a      	ldr	r2, [r7, #32]
 800e9c0:	e841 2300 	strex	r3, r2, [r1]
 800e9c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e5      	bne.n	800e998 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3758      	adds	r7, #88	@ 0x58
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	0800eb35 	.word	0x0800eb35
 800e9dc:	0800ec5d 	.word	0x0800ec5d
 800e9e0:	0800ec9b 	.word	0x0800ec9b

0800e9e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b08f      	sub	sp, #60	@ 0x3c
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f2:	6a3b      	ldr	r3, [r7, #32]
 800e9f4:	e853 3f00 	ldrex	r3, [r3]
 800e9f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ea00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea0c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea12:	e841 2300 	strex	r3, r2, [r1]
 800ea16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1e6      	bne.n	800e9ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3308      	adds	r3, #8
 800ea24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	e853 3f00 	ldrex	r3, [r3]
 800ea2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ea34:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3308      	adds	r3, #8
 800ea3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea3e:	61ba      	str	r2, [r7, #24]
 800ea40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea42:	6979      	ldr	r1, [r7, #20]
 800ea44:	69ba      	ldr	r2, [r7, #24]
 800ea46:	e841 2300 	strex	r3, r2, [r1]
 800ea4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1e5      	bne.n	800ea1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2220      	movs	r2, #32
 800ea56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ea5a:	bf00      	nop
 800ea5c:	373c      	adds	r7, #60	@ 0x3c
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
	...

0800ea68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b095      	sub	sp, #84	@ 0x54
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea78:	e853 3f00 	ldrex	r3, [r3]
 800ea7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea96:	e841 2300 	strex	r3, r2, [r1]
 800ea9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e6      	bne.n	800ea70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	e853 3f00 	ldrex	r3, [r3]
 800eab0:	61fb      	str	r3, [r7, #28]
   return(result);
 800eab2:	69fa      	ldr	r2, [r7, #28]
 800eab4:	4b1e      	ldr	r3, [pc, #120]	@ (800eb30 <UART_EndRxTransfer+0xc8>)
 800eab6:	4013      	ands	r3, r2
 800eab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	3308      	adds	r3, #8
 800eac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eaca:	e841 2300 	strex	r3, r2, [r1]
 800eace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1e5      	bne.n	800eaa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d118      	bne.n	800eb10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	e853 3f00 	ldrex	r3, [r3]
 800eaea:	60bb      	str	r3, [r7, #8]
   return(result);
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	f023 0310 	bic.w	r3, r3, #16
 800eaf2:	647b      	str	r3, [r7, #68]	@ 0x44
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eafc:	61bb      	str	r3, [r7, #24]
 800eafe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb00:	6979      	ldr	r1, [r7, #20]
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	e841 2300 	strex	r3, r2, [r1]
 800eb08:	613b      	str	r3, [r7, #16]
   return(result);
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1e6      	bne.n	800eade <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2220      	movs	r2, #32
 800eb14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eb24:	bf00      	nop
 800eb26:	3754      	adds	r7, #84	@ 0x54
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	effffffe 	.word	0xeffffffe

0800eb34 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b09c      	sub	sp, #112	@ 0x70
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb40:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	69db      	ldr	r3, [r3, #28]
 800eb46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb4a:	d071      	beq.n	800ec30 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800eb4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb5c:	e853 3f00 	ldrex	r3, [r3]
 800eb60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eb62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eb78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eb7a:	e841 2300 	strex	r3, r2, [r1]
 800eb7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eb80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1e6      	bne.n	800eb54 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb90:	e853 3f00 	ldrex	r3, [r3]
 800eb94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb98:	f023 0301 	bic.w	r3, r3, #1
 800eb9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3308      	adds	r3, #8
 800eba4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eba6:	647a      	str	r2, [r7, #68]	@ 0x44
 800eba8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ebac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebae:	e841 2300 	strex	r3, r2, [r1]
 800ebb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ebb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1e5      	bne.n	800eb86 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ebba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc4:	e853 3f00 	ldrex	r3, [r3]
 800ebc8:	623b      	str	r3, [r7, #32]
   return(result);
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebd0:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	3308      	adds	r3, #8
 800ebd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ebda:	633a      	str	r2, [r7, #48]	@ 0x30
 800ebdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebe2:	e841 2300 	strex	r3, r2, [r1]
 800ebe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1e5      	bne.n	800ebba <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ebee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebf0:	2220      	movs	r2, #32
 800ebf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d118      	bne.n	800ec30 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	e853 3f00 	ldrex	r3, [r3]
 800ec0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f023 0310 	bic.w	r3, r3, #16
 800ec12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec1c:	61fb      	str	r3, [r7, #28]
 800ec1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec20:	69b9      	ldr	r1, [r7, #24]
 800ec22:	69fa      	ldr	r2, [r7, #28]
 800ec24:	e841 2300 	strex	r3, r2, [r1]
 800ec28:	617b      	str	r3, [r7, #20]
   return(result);
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1e6      	bne.n	800ebfe <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec32:	2200      	movs	r2, #0
 800ec34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d107      	bne.n	800ec4e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec44:	4619      	mov	r1, r3
 800ec46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec48:	f7fe fef8 	bl	800da3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec4c:	e002      	b.n	800ec54 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ec4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec50:	f7f3 f812 	bl	8001c78 <HAL_UART_RxCpltCallback>
}
 800ec54:	bf00      	nop
 800ec56:	3770      	adds	r7, #112	@ 0x70
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d109      	bne.n	800ec8c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec7e:	085b      	lsrs	r3, r3, #1
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	4619      	mov	r1, r3
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7fe fed9 	bl	800da3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec8a:	e002      	b.n	800ec92 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f7f3 f817 	bl	8001cc0 <HAL_UART_RxHalfCpltCallback>
}
 800ec92:	bf00      	nop
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b086      	sub	sp, #24
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eca6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecc2:	2b80      	cmp	r3, #128	@ 0x80
 800ecc4:	d109      	bne.n	800ecda <UART_DMAError+0x40>
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	2b21      	cmp	r3, #33	@ 0x21
 800ecca:	d106      	bne.n	800ecda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ecd4:	6978      	ldr	r0, [r7, #20]
 800ecd6:	f7ff fe85 	bl	800e9e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	689b      	ldr	r3, [r3, #8]
 800ece0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ece4:	2b40      	cmp	r3, #64	@ 0x40
 800ece6:	d109      	bne.n	800ecfc <UART_DMAError+0x62>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b22      	cmp	r3, #34	@ 0x22
 800ecec:	d106      	bne.n	800ecfc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ecf6:	6978      	ldr	r0, [r7, #20]
 800ecf8:	f7ff feb6 	bl	800ea68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed02:	f043 0210 	orr.w	r2, r3, #16
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed0c:	6978      	ldr	r0, [r7, #20]
 800ed0e:	f7fe fe8b 	bl	800da28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed12:	bf00      	nop
 800ed14:	3718      	adds	r7, #24
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f7fe fe75 	bl	800da28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b088      	sub	sp, #32
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	e853 3f00 	ldrex	r3, [r3]
 800ed5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed62:	61fb      	str	r3, [r7, #28]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed70:	6979      	ldr	r1, [r7, #20]
 800ed72:	69ba      	ldr	r2, [r7, #24]
 800ed74:	e841 2300 	strex	r3, r2, [r1]
 800ed78:	613b      	str	r3, [r7, #16]
   return(result);
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1e6      	bne.n	800ed4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2220      	movs	r2, #32
 800ed84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7fe fe40 	bl	800da14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed94:	bf00      	nop
 800ed96:	3720      	adds	r7, #32
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eda4:	bf00      	nop
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d101      	bne.n	800edee <HAL_UARTEx_DisableFifoMode+0x16>
 800edea:	2302      	movs	r3, #2
 800edec:	e027      	b.n	800ee3e <HAL_UARTEx_DisableFifoMode+0x66>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2201      	movs	r2, #1
 800edf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2224      	movs	r2, #36	@ 0x24
 800edfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f022 0201 	bic.w	r2, r2, #1
 800ee14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ee1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2220      	movs	r2, #32
 800ee30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr

0800ee4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b084      	sub	sp, #16
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d101      	bne.n	800ee62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee5e:	2302      	movs	r3, #2
 800ee60:	e02d      	b.n	800eebe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2224      	movs	r2, #36	@ 0x24
 800ee6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f022 0201 	bic.w	r2, r2, #1
 800ee88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f850 	bl	800ef44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2220      	movs	r2, #32
 800eeb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d101      	bne.n	800eede <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eeda:	2302      	movs	r3, #2
 800eedc:	e02d      	b.n	800ef3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2224      	movs	r2, #36	@ 0x24
 800eeea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f022 0201 	bic.w	r2, r2, #1
 800ef04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 f812 	bl	800ef44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2220      	movs	r2, #32
 800ef2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
	...

0800ef44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d108      	bne.n	800ef66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef64:	e031      	b.n	800efca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef66:	2310      	movs	r3, #16
 800ef68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef6a:	2310      	movs	r3, #16
 800ef6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	0e5b      	lsrs	r3, r3, #25
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	f003 0307 	and.w	r3, r3, #7
 800ef7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	0f5b      	lsrs	r3, r3, #29
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	f003 0307 	and.w	r3, r3, #7
 800ef8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef8e:	7bbb      	ldrb	r3, [r7, #14]
 800ef90:	7b3a      	ldrb	r2, [r7, #12]
 800ef92:	4911      	ldr	r1, [pc, #68]	@ (800efd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ef94:	5c8a      	ldrb	r2, [r1, r2]
 800ef96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef9a:	7b3a      	ldrb	r2, [r7, #12]
 800ef9c:	490f      	ldr	r1, [pc, #60]	@ (800efdc <UARTEx_SetNbDataToProcess+0x98>)
 800ef9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efac:	7bfb      	ldrb	r3, [r7, #15]
 800efae:	7b7a      	ldrb	r2, [r7, #13]
 800efb0:	4909      	ldr	r1, [pc, #36]	@ (800efd8 <UARTEx_SetNbDataToProcess+0x94>)
 800efb2:	5c8a      	ldrb	r2, [r1, r2]
 800efb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800efb8:	7b7a      	ldrb	r2, [r7, #13]
 800efba:	4908      	ldr	r1, [pc, #32]	@ (800efdc <UARTEx_SetNbDataToProcess+0x98>)
 800efbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800efca:	bf00      	nop
 800efcc:	3714      	adds	r7, #20
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	08028a20 	.word	0x08028a20
 800efdc:	08028a28 	.word	0x08028a28

0800efe0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800efe0:	b5b0      	push	{r4, r5, r7, lr}
 800efe2:	b0a6      	sub	sp, #152	@ 0x98
 800efe4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800efe6:	4b69      	ldr	r3, [pc, #420]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800efe8:	22c0      	movs	r2, #192	@ 0xc0
 800efea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800efec:	4b67      	ldr	r3, [pc, #412]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800efee:	22a8      	movs	r2, #168	@ 0xa8
 800eff0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 35;
 800eff2:	4b66      	ldr	r3, [pc, #408]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800eff4:	2223      	movs	r2, #35	@ 0x23
 800eff6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 84;
 800eff8:	4b64      	ldr	r3, [pc, #400]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800effa:	2254      	movs	r2, #84	@ 0x54
 800effc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800effe:	4b64      	ldr	r3, [pc, #400]	@ (800f190 <MX_LWIP_Init+0x1b0>)
 800f000:	22ff      	movs	r2, #255	@ 0xff
 800f002:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f004:	4b62      	ldr	r3, [pc, #392]	@ (800f190 <MX_LWIP_Init+0x1b0>)
 800f006:	22ff      	movs	r2, #255	@ 0xff
 800f008:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800f00a:	4b61      	ldr	r3, [pc, #388]	@ (800f190 <MX_LWIP_Init+0x1b0>)
 800f00c:	22ff      	movs	r2, #255	@ 0xff
 800f00e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f010:	4b5f      	ldr	r3, [pc, #380]	@ (800f190 <MX_LWIP_Init+0x1b0>)
 800f012:	2200      	movs	r2, #0
 800f014:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800f016:	4b5f      	ldr	r3, [pc, #380]	@ (800f194 <MX_LWIP_Init+0x1b4>)
 800f018:	2200      	movs	r2, #0
 800f01a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800f01c:	4b5d      	ldr	r3, [pc, #372]	@ (800f194 <MX_LWIP_Init+0x1b4>)
 800f01e:	2200      	movs	r2, #0
 800f020:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800f022:	4b5c      	ldr	r3, [pc, #368]	@ (800f194 <MX_LWIP_Init+0x1b4>)
 800f024:	2200      	movs	r2, #0
 800f026:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800f028:	4b5a      	ldr	r3, [pc, #360]	@ (800f194 <MX_LWIP_Init+0x1b4>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  uint8_t state = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  state |= (HAL_GPIO_ReadPin(GPIOF, IP_SEL_1_Pin) << 0);
 800f034:	2120      	movs	r1, #32
 800f036:	4858      	ldr	r0, [pc, #352]	@ (800f198 <MX_LWIP_Init+0x1b8>)
 800f038:	f7f9 fda2 	bl	8008b80 <HAL_GPIO_ReadPin>
 800f03c:	4603      	mov	r3, r0
 800f03e:	b25a      	sxtb	r2, r3
 800f040:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 800f044:	4313      	orrs	r3, r2
 800f046:	b25b      	sxtb	r3, r3
 800f048:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  state |= (HAL_GPIO_ReadPin(GPIOF, IP_SEL_2_Pin) << 1);
 800f04c:	2140      	movs	r1, #64	@ 0x40
 800f04e:	4852      	ldr	r0, [pc, #328]	@ (800f198 <MX_LWIP_Init+0x1b8>)
 800f050:	f7f9 fd96 	bl	8008b80 <HAL_GPIO_ReadPin>
 800f054:	4603      	mov	r3, r0
 800f056:	005b      	lsls	r3, r3, #1
 800f058:	b25a      	sxtb	r2, r3
 800f05a:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 800f05e:	4313      	orrs	r3, r2
 800f060:	b25b      	sxtb	r3, r3
 800f062:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  state |= (HAL_GPIO_ReadPin(GPIOF, IP_SEL_3_Pin) << 2);
 800f066:	2180      	movs	r1, #128	@ 0x80
 800f068:	484b      	ldr	r0, [pc, #300]	@ (800f198 <MX_LWIP_Init+0x1b8>)
 800f06a:	f7f9 fd89 	bl	8008b80 <HAL_GPIO_ReadPin>
 800f06e:	4603      	mov	r3, r0
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	b25a      	sxtb	r2, r3
 800f074:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 800f078:	4313      	orrs	r3, r2
 800f07a:	b25b      	sxtb	r3, r3
 800f07c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  state |= (HAL_GPIO_ReadPin(GPIOF, IP_SEL_4_Pin) << 3);
 800f080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f084:	4844      	ldr	r0, [pc, #272]	@ (800f198 <MX_LWIP_Init+0x1b8>)
 800f086:	f7f9 fd7b 	bl	8008b80 <HAL_GPIO_ReadPin>
 800f08a:	4603      	mov	r3, r0
 800f08c:	00db      	lsls	r3, r3, #3
 800f08e:	b25a      	sxtb	r2, r3
 800f090:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 800f094:	4313      	orrs	r3, r2
 800f096:	b25b      	sxtb	r3, r3
 800f098:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  slot = state;  // Set the global slot variable
 800f09c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f0a0:	4a3e      	ldr	r2, [pc, #248]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f0a2:	6013      	str	r3, [r2, #0]

  // Define the two IP tables (for local and remote IPs)
  const uint8_t ip_table_0[][4] = {
 800f0a4:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a0 <MX_LWIP_Init+0x1c0>)
 800f0a6:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800f0aa:	461d      	mov	r5, r3
 800f0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f0bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      {192, 168, 35, 63},  // Slot 13
      {192, 168, 35, 64},  // Slot 14
      {192, 168, 35, 65},  // Slot 15
  };

  const uint8_t ip_table_1[][4] = {
 800f0c0:	4b38      	ldr	r3, [pc, #224]	@ (800f1a4 <MX_LWIP_Init+0x1c4>)
 800f0c2:	1d3c      	adds	r4, r7, #4
 800f0c4:	461d      	mov	r5, r3
 800f0c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f0d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      {192, 168, 35, 114},  // Slot 14
      {192, 168, 35, 115},  // Slot 15
  };

  // Read the IP_SEL_0 pin and select the correct IP table
  GPIO_PinState ip_sel_0_state = HAL_GPIO_ReadPin(GPIOF, IP_SEL_0_Pin);
 800f0da:	2110      	movs	r1, #16
 800f0dc:	482e      	ldr	r0, [pc, #184]	@ (800f198 <MX_LWIP_Init+0x1b8>)
 800f0de:	f7f9 fd4f 	bl	8008b80 <HAL_GPIO_ReadPin>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

  if (slot < (sizeof(ip_table_0) / sizeof(ip_table_0[0]))) {
 800f0e8:	4b2c      	ldr	r3, [pc, #176]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b0f      	cmp	r3, #15
 800f0ee:	d85b      	bhi.n	800f1a8 <MX_LWIP_Init+0x1c8>
      if (ip_sel_0_state == GPIO_PIN_SET) {
 800f0f0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d124      	bne.n	800f142 <MX_LWIP_Init+0x162>
          // IP_SEL_0 is high, use ip_table_1 for local IP and ip_table_0 for remote IP
          IP_ADDRESS[0] = ip_table_1[slot][0];
 800f0f8:	4b28      	ldr	r3, [pc, #160]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	3388      	adds	r3, #136	@ 0x88
 800f100:	443b      	add	r3, r7
 800f102:	f813 2c84 	ldrb.w	r2, [r3, #-132]
 800f106:	4b21      	ldr	r3, [pc, #132]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f108:	701a      	strb	r2, [r3, #0]
          IP_ADDRESS[1] = ip_table_1[slot][1];
 800f10a:	4b24      	ldr	r3, [pc, #144]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	3388      	adds	r3, #136	@ 0x88
 800f112:	443b      	add	r3, r7
 800f114:	f813 2c83 	ldrb.w	r2, [r3, #-131]
 800f118:	4b1c      	ldr	r3, [pc, #112]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f11a:	705a      	strb	r2, [r3, #1]
          IP_ADDRESS[2] = ip_table_1[slot][2];
 800f11c:	4b1f      	ldr	r3, [pc, #124]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	3388      	adds	r3, #136	@ 0x88
 800f124:	443b      	add	r3, r7
 800f126:	f813 2c82 	ldrb.w	r2, [r3, #-130]
 800f12a:	4b18      	ldr	r3, [pc, #96]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f12c:	709a      	strb	r2, [r3, #2]
          IP_ADDRESS[3] = ip_table_1[slot][3];
 800f12e:	4b1b      	ldr	r3, [pc, #108]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	3388      	adds	r3, #136	@ 0x88
 800f136:	443b      	add	r3, r7
 800f138:	f813 2c81 	ldrb.w	r2, [r3, #-129]
 800f13c:	4b13      	ldr	r3, [pc, #76]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f13e:	70da      	strb	r2, [r3, #3]
 800f140:	e044      	b.n	800f1cc <MX_LWIP_Init+0x1ec>

          // Set the remote server IP from ip_table_0
//          udp_set_server_ip(ip_table_0[slot]);
      } else {
          // IP_SEL_0 is low, use ip_table_0 for local IP and ip_table_1 for remote IP
          IP_ADDRESS[0] = ip_table_0[slot][0];
 800f142:	4b16      	ldr	r3, [pc, #88]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	3388      	adds	r3, #136	@ 0x88
 800f14a:	443b      	add	r3, r7
 800f14c:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800f150:	4b0e      	ldr	r3, [pc, #56]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f152:	701a      	strb	r2, [r3, #0]
          IP_ADDRESS[1] = ip_table_0[slot][1];
 800f154:	4b11      	ldr	r3, [pc, #68]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	3388      	adds	r3, #136	@ 0x88
 800f15c:	443b      	add	r3, r7
 800f15e:	f813 2c43 	ldrb.w	r2, [r3, #-67]
 800f162:	4b0a      	ldr	r3, [pc, #40]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f164:	705a      	strb	r2, [r3, #1]
          IP_ADDRESS[2] = ip_table_0[slot][2];
 800f166:	4b0d      	ldr	r3, [pc, #52]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	3388      	adds	r3, #136	@ 0x88
 800f16e:	443b      	add	r3, r7
 800f170:	f813 2c42 	ldrb.w	r2, [r3, #-66]
 800f174:	4b05      	ldr	r3, [pc, #20]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f176:	709a      	strb	r2, [r3, #2]
          IP_ADDRESS[3] = ip_table_0[slot][3];
 800f178:	4b08      	ldr	r3, [pc, #32]	@ (800f19c <MX_LWIP_Init+0x1bc>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	3388      	adds	r3, #136	@ 0x88
 800f180:	443b      	add	r3, r7
 800f182:	f813 2c41 	ldrb.w	r2, [r3, #-65]
 800f186:	4b01      	ldr	r3, [pc, #4]	@ (800f18c <MX_LWIP_Init+0x1ac>)
 800f188:	70da      	strb	r2, [r3, #3]
 800f18a:	e01f      	b.n	800f1cc <MX_LWIP_Init+0x1ec>
 800f18c:	24000734 	.word	0x24000734
 800f190:	24000738 	.word	0x24000738
 800f194:	2400073c 	.word	0x2400073c
 800f198:	58021400 	.word	0x58021400
 800f19c:	24000650 	.word	0x24000650
 800f1a0:	08024e38 	.word	0x08024e38
 800f1a4:	08024e78 	.word	0x08024e78
          // Set the remote server IP from ip_table_1
//          udp_set_server_ip(ip_table_1[slot]);
      }
  } else {
      // Handle invalid slot number
      printf("Invalid slot number: %d\n", slot);
 800f1a8:	4b89      	ldr	r3, [pc, #548]	@ (800f3d0 <MX_LWIP_Init+0x3f0>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4889      	ldr	r0, [pc, #548]	@ (800f3d4 <MX_LWIP_Init+0x3f4>)
 800f1b0:	f012 fdfc 	bl	8021dac <iprintf>
      // Set a default IP address or handle error as needed
      IP_ADDRESS[0] = 192;
 800f1b4:	4b88      	ldr	r3, [pc, #544]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1b6:	22c0      	movs	r2, #192	@ 0xc0
 800f1b8:	701a      	strb	r2, [r3, #0]
      IP_ADDRESS[1] = 168;
 800f1ba:	4b87      	ldr	r3, [pc, #540]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1bc:	22a8      	movs	r2, #168	@ 0xa8
 800f1be:	705a      	strb	r2, [r3, #1]
      IP_ADDRESS[2] = 35;
 800f1c0:	4b85      	ldr	r3, [pc, #532]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1c2:	2223      	movs	r2, #35	@ 0x23
 800f1c4:	709a      	strb	r2, [r3, #2]
      IP_ADDRESS[3] = 50;  // Default IP address
 800f1c6:	4b84      	ldr	r3, [pc, #528]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1c8:	2232      	movs	r2, #50	@ 0x32
 800f1ca:	70da      	strb	r2, [r3, #3]
  }
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	f011 f998 	bl	8020504 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f1d4:	4b80      	ldr	r3, [pc, #512]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	061a      	lsls	r2, r3, #24
 800f1da:	4b7f      	ldr	r3, [pc, #508]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1dc:	785b      	ldrb	r3, [r3, #1]
 800f1de:	041b      	lsls	r3, r3, #16
 800f1e0:	431a      	orrs	r2, r3
 800f1e2:	4b7d      	ldr	r3, [pc, #500]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1e4:	789b      	ldrb	r3, [r3, #2]
 800f1e6:	021b      	lsls	r3, r3, #8
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	4a7b      	ldr	r2, [pc, #492]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1ec:	78d2      	ldrb	r2, [r2, #3]
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	061a      	lsls	r2, r3, #24
 800f1f2:	4b79      	ldr	r3, [pc, #484]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	0619      	lsls	r1, r3, #24
 800f1f8:	4b77      	ldr	r3, [pc, #476]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f1fa:	785b      	ldrb	r3, [r3, #1]
 800f1fc:	041b      	lsls	r3, r3, #16
 800f1fe:	4319      	orrs	r1, r3
 800f200:	4b75      	ldr	r3, [pc, #468]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f202:	789b      	ldrb	r3, [r3, #2]
 800f204:	021b      	lsls	r3, r3, #8
 800f206:	430b      	orrs	r3, r1
 800f208:	4973      	ldr	r1, [pc, #460]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f20a:	78c9      	ldrb	r1, [r1, #3]
 800f20c:	430b      	orrs	r3, r1
 800f20e:	021b      	lsls	r3, r3, #8
 800f210:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f214:	431a      	orrs	r2, r3
 800f216:	4b70      	ldr	r3, [pc, #448]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	0619      	lsls	r1, r3, #24
 800f21c:	4b6e      	ldr	r3, [pc, #440]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f21e:	785b      	ldrb	r3, [r3, #1]
 800f220:	041b      	lsls	r3, r3, #16
 800f222:	4319      	orrs	r1, r3
 800f224:	4b6c      	ldr	r3, [pc, #432]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f226:	789b      	ldrb	r3, [r3, #2]
 800f228:	021b      	lsls	r3, r3, #8
 800f22a:	430b      	orrs	r3, r1
 800f22c:	496a      	ldr	r1, [pc, #424]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f22e:	78c9      	ldrb	r1, [r1, #3]
 800f230:	430b      	orrs	r3, r1
 800f232:	0a1b      	lsrs	r3, r3, #8
 800f234:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f238:	431a      	orrs	r2, r3
 800f23a:	4b67      	ldr	r3, [pc, #412]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	0619      	lsls	r1, r3, #24
 800f240:	4b65      	ldr	r3, [pc, #404]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f242:	785b      	ldrb	r3, [r3, #1]
 800f244:	041b      	lsls	r3, r3, #16
 800f246:	4319      	orrs	r1, r3
 800f248:	4b63      	ldr	r3, [pc, #396]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f24a:	789b      	ldrb	r3, [r3, #2]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	430b      	orrs	r3, r1
 800f250:	4961      	ldr	r1, [pc, #388]	@ (800f3d8 <MX_LWIP_Init+0x3f8>)
 800f252:	78c9      	ldrb	r1, [r1, #3]
 800f254:	430b      	orrs	r3, r1
 800f256:	0e1b      	lsrs	r3, r3, #24
 800f258:	4313      	orrs	r3, r2
 800f25a:	4a60      	ldr	r2, [pc, #384]	@ (800f3dc <MX_LWIP_Init+0x3fc>)
 800f25c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f25e:	4b60      	ldr	r3, [pc, #384]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	061a      	lsls	r2, r3, #24
 800f264:	4b5e      	ldr	r3, [pc, #376]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f266:	785b      	ldrb	r3, [r3, #1]
 800f268:	041b      	lsls	r3, r3, #16
 800f26a:	431a      	orrs	r2, r3
 800f26c:	4b5c      	ldr	r3, [pc, #368]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f26e:	789b      	ldrb	r3, [r3, #2]
 800f270:	021b      	lsls	r3, r3, #8
 800f272:	4313      	orrs	r3, r2
 800f274:	4a5a      	ldr	r2, [pc, #360]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f276:	78d2      	ldrb	r2, [r2, #3]
 800f278:	4313      	orrs	r3, r2
 800f27a:	061a      	lsls	r2, r3, #24
 800f27c:	4b58      	ldr	r3, [pc, #352]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	0619      	lsls	r1, r3, #24
 800f282:	4b57      	ldr	r3, [pc, #348]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f284:	785b      	ldrb	r3, [r3, #1]
 800f286:	041b      	lsls	r3, r3, #16
 800f288:	4319      	orrs	r1, r3
 800f28a:	4b55      	ldr	r3, [pc, #340]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f28c:	789b      	ldrb	r3, [r3, #2]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	430b      	orrs	r3, r1
 800f292:	4953      	ldr	r1, [pc, #332]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f294:	78c9      	ldrb	r1, [r1, #3]
 800f296:	430b      	orrs	r3, r1
 800f298:	021b      	lsls	r3, r3, #8
 800f29a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f29e:	431a      	orrs	r2, r3
 800f2a0:	4b4f      	ldr	r3, [pc, #316]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	0619      	lsls	r1, r3, #24
 800f2a6:	4b4e      	ldr	r3, [pc, #312]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2a8:	785b      	ldrb	r3, [r3, #1]
 800f2aa:	041b      	lsls	r3, r3, #16
 800f2ac:	4319      	orrs	r1, r3
 800f2ae:	4b4c      	ldr	r3, [pc, #304]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2b0:	789b      	ldrb	r3, [r3, #2]
 800f2b2:	021b      	lsls	r3, r3, #8
 800f2b4:	430b      	orrs	r3, r1
 800f2b6:	494a      	ldr	r1, [pc, #296]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2b8:	78c9      	ldrb	r1, [r1, #3]
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	0a1b      	lsrs	r3, r3, #8
 800f2be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	4b46      	ldr	r3, [pc, #280]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	0619      	lsls	r1, r3, #24
 800f2ca:	4b45      	ldr	r3, [pc, #276]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2cc:	785b      	ldrb	r3, [r3, #1]
 800f2ce:	041b      	lsls	r3, r3, #16
 800f2d0:	4319      	orrs	r1, r3
 800f2d2:	4b43      	ldr	r3, [pc, #268]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2d4:	789b      	ldrb	r3, [r3, #2]
 800f2d6:	021b      	lsls	r3, r3, #8
 800f2d8:	430b      	orrs	r3, r1
 800f2da:	4941      	ldr	r1, [pc, #260]	@ (800f3e0 <MX_LWIP_Init+0x400>)
 800f2dc:	78c9      	ldrb	r1, [r1, #3]
 800f2de:	430b      	orrs	r3, r1
 800f2e0:	0e1b      	lsrs	r3, r3, #24
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	4a3f      	ldr	r2, [pc, #252]	@ (800f3e4 <MX_LWIP_Init+0x404>)
 800f2e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f2e8:	4b3f      	ldr	r3, [pc, #252]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	061a      	lsls	r2, r3, #24
 800f2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f2f0:	785b      	ldrb	r3, [r3, #1]
 800f2f2:	041b      	lsls	r3, r3, #16
 800f2f4:	431a      	orrs	r2, r3
 800f2f6:	4b3c      	ldr	r3, [pc, #240]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f2f8:	789b      	ldrb	r3, [r3, #2]
 800f2fa:	021b      	lsls	r3, r3, #8
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	4a3a      	ldr	r2, [pc, #232]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f300:	78d2      	ldrb	r2, [r2, #3]
 800f302:	4313      	orrs	r3, r2
 800f304:	061a      	lsls	r2, r3, #24
 800f306:	4b38      	ldr	r3, [pc, #224]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	0619      	lsls	r1, r3, #24
 800f30c:	4b36      	ldr	r3, [pc, #216]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f30e:	785b      	ldrb	r3, [r3, #1]
 800f310:	041b      	lsls	r3, r3, #16
 800f312:	4319      	orrs	r1, r3
 800f314:	4b34      	ldr	r3, [pc, #208]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f316:	789b      	ldrb	r3, [r3, #2]
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	430b      	orrs	r3, r1
 800f31c:	4932      	ldr	r1, [pc, #200]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f31e:	78c9      	ldrb	r1, [r1, #3]
 800f320:	430b      	orrs	r3, r1
 800f322:	021b      	lsls	r3, r3, #8
 800f324:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f328:	431a      	orrs	r2, r3
 800f32a:	4b2f      	ldr	r3, [pc, #188]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	0619      	lsls	r1, r3, #24
 800f330:	4b2d      	ldr	r3, [pc, #180]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f332:	785b      	ldrb	r3, [r3, #1]
 800f334:	041b      	lsls	r3, r3, #16
 800f336:	4319      	orrs	r1, r3
 800f338:	4b2b      	ldr	r3, [pc, #172]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f33a:	789b      	ldrb	r3, [r3, #2]
 800f33c:	021b      	lsls	r3, r3, #8
 800f33e:	430b      	orrs	r3, r1
 800f340:	4929      	ldr	r1, [pc, #164]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f342:	78c9      	ldrb	r1, [r1, #3]
 800f344:	430b      	orrs	r3, r1
 800f346:	0a1b      	lsrs	r3, r3, #8
 800f348:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f34c:	431a      	orrs	r2, r3
 800f34e:	4b26      	ldr	r3, [pc, #152]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	0619      	lsls	r1, r3, #24
 800f354:	4b24      	ldr	r3, [pc, #144]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f356:	785b      	ldrb	r3, [r3, #1]
 800f358:	041b      	lsls	r3, r3, #16
 800f35a:	4319      	orrs	r1, r3
 800f35c:	4b22      	ldr	r3, [pc, #136]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f35e:	789b      	ldrb	r3, [r3, #2]
 800f360:	021b      	lsls	r3, r3, #8
 800f362:	430b      	orrs	r3, r1
 800f364:	4920      	ldr	r1, [pc, #128]	@ (800f3e8 <MX_LWIP_Init+0x408>)
 800f366:	78c9      	ldrb	r1, [r1, #3]
 800f368:	430b      	orrs	r3, r1
 800f36a:	0e1b      	lsrs	r3, r3, #24
 800f36c:	4313      	orrs	r3, r2
 800f36e:	4a1f      	ldr	r2, [pc, #124]	@ (800f3ec <MX_LWIP_Init+0x40c>)
 800f370:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f372:	4b1f      	ldr	r3, [pc, #124]	@ (800f3f0 <MX_LWIP_Init+0x410>)
 800f374:	9302      	str	r3, [sp, #8]
 800f376:	4b1f      	ldr	r3, [pc, #124]	@ (800f3f4 <MX_LWIP_Init+0x414>)
 800f378:	9301      	str	r3, [sp, #4]
 800f37a:	2300      	movs	r3, #0
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	4b1b      	ldr	r3, [pc, #108]	@ (800f3ec <MX_LWIP_Init+0x40c>)
 800f380:	4a18      	ldr	r2, [pc, #96]	@ (800f3e4 <MX_LWIP_Init+0x404>)
 800f382:	4916      	ldr	r1, [pc, #88]	@ (800f3dc <MX_LWIP_Init+0x3fc>)
 800f384:	481c      	ldr	r0, [pc, #112]	@ (800f3f8 <MX_LWIP_Init+0x418>)
 800f386:	f009 fc89 	bl	8018c9c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f38a:	481b      	ldr	r0, [pc, #108]	@ (800f3f8 <MX_LWIP_Init+0x418>)
 800f38c:	f009 fe3c 	bl	8019008 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800f390:	4819      	ldr	r0, [pc, #100]	@ (800f3f8 <MX_LWIP_Init+0x418>)
 800f392:	f009 fe49 	bl	8019028 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f396:	4919      	ldr	r1, [pc, #100]	@ (800f3fc <MX_LWIP_Init+0x41c>)
 800f398:	4817      	ldr	r0, [pc, #92]	@ (800f3f8 <MX_LWIP_Init+0x418>)
 800f39a:	f009 ff4f 	bl	801923c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800f39e:	2224      	movs	r2, #36	@ 0x24
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	4817      	ldr	r0, [pc, #92]	@ (800f400 <MX_LWIP_Init+0x420>)
 800f3a4:	f012 fea8 	bl	80220f8 <memset>
  attributes.name = "EthLink";
 800f3a8:	4b15      	ldr	r3, [pc, #84]	@ (800f400 <MX_LWIP_Init+0x420>)
 800f3aa:	4a16      	ldr	r2, [pc, #88]	@ (800f404 <MX_LWIP_Init+0x424>)
 800f3ac:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800f3ae:	4b14      	ldr	r3, [pc, #80]	@ (800f400 <MX_LWIP_Init+0x420>)
 800f3b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f3b4:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800f3b6:	4b12      	ldr	r3, [pc, #72]	@ (800f400 <MX_LWIP_Init+0x420>)
 800f3b8:	2210      	movs	r2, #16
 800f3ba:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800f3bc:	4a10      	ldr	r2, [pc, #64]	@ (800f400 <MX_LWIP_Init+0x420>)
 800f3be:	490e      	ldr	r1, [pc, #56]	@ (800f3f8 <MX_LWIP_Init+0x418>)
 800f3c0:	4811      	ldr	r0, [pc, #68]	@ (800f408 <MX_LWIP_Init+0x428>)
 800f3c2:	f000 fe52 	bl	801006a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f3c6:	bf00      	nop
 800f3c8:	3788      	adds	r7, #136	@ 0x88
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	24000650 	.word	0x24000650
 800f3d4:	08024e14 	.word	0x08024e14
 800f3d8:	24000734 	.word	0x24000734
 800f3dc:	24000728 	.word	0x24000728
 800f3e0:	24000738 	.word	0x24000738
 800f3e4:	2400072c 	.word	0x2400072c
 800f3e8:	2400073c 	.word	0x2400073c
 800f3ec:	24000730 	.word	0x24000730
 800f3f0:	0802041d 	.word	0x0802041d
 800f3f4:	0800f945 	.word	0x0800f945
 800f3f8:	240006f4 	.word	0x240006f4
 800f3fc:	0800f40d 	.word	0x0800f40d
 800f400:	24000740 	.word	0x24000740
 800f404:	08024e30 	.word	0x08024e30
 800f408:	0800fbf5 	.word	0x0800fbf5

0800f40c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800f428:	4b04      	ldr	r3, [pc, #16]	@ (800f43c <HAL_ETH_RxCpltCallback+0x1c>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f001 f8bf 	bl	80105b0 <osSemaphoreRelease>
}
 800f432:	bf00      	nop
 800f434:	3708      	adds	r7, #8
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	2400076c 	.word	0x2400076c

0800f440 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800f448:	4b04      	ldr	r3, [pc, #16]	@ (800f45c <HAL_ETH_TxCpltCallback+0x1c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f001 f8af 	bl	80105b0 <osSemaphoreRelease>
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	24000770 	.word	0x24000770

0800f460 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7f8 fc4a 	bl	8007d02 <HAL_ETH_GetDMAError>
 800f46e:	4603      	mov	r3, r0
 800f470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f474:	2b80      	cmp	r3, #128	@ 0x80
 800f476:	d104      	bne.n	800f482 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800f478:	4b04      	ldr	r3, [pc, #16]	@ (800f48c <HAL_ETH_ErrorCallback+0x2c>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4618      	mov	r0, r3
 800f47e:	f001 f897 	bl	80105b0 <osSemaphoreRelease>
  }
}
 800f482:	bf00      	nop
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	2400076c 	.word	0x2400076c

0800f490 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b0ae      	sub	sp, #184	@ 0xb8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f498:	2300      	movs	r3, #0
 800f49a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t PHYLinkState = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  ETH_MACConfigTypeDef MACConf = {0};
 800f4aa:	f107 0320 	add.w	r3, r7, #32
 800f4ae:	2264      	movs	r2, #100	@ 0x64
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f012 fe20 	bl	80220f8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f4b8:	4b9a      	ldr	r3, [pc, #616]	@ (800f724 <low_level_init+0x294>)
 800f4ba:	4a9b      	ldr	r2, [pc, #620]	@ (800f728 <low_level_init+0x298>)
 800f4bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	763b      	strb	r3, [r7, #24]
  MACAddr[1] = 0x80;
 800f4c2:	2380      	movs	r3, #128	@ 0x80
 800f4c4:	767b      	strb	r3, [r7, #25]
  MACAddr[2] = 0xE1;
 800f4c6:	23e1      	movs	r3, #225	@ 0xe1
 800f4c8:	76bb      	strb	r3, [r7, #26]
  MACAddr[3] = 0x00;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	76fb      	strb	r3, [r7, #27]
  MACAddr[4] = 0x08;
 800f4ce:	2308      	movs	r3, #8
 800f4d0:	773b      	strb	r3, [r7, #28]
  MACAddr[5] = 0x04;
 800f4d2:	2304      	movs	r3, #4
 800f4d4:	777b      	strb	r3, [r7, #29]
  heth.Init.MACAddr = &MACAddr[0];
 800f4d6:	4a93      	ldr	r2, [pc, #588]	@ (800f724 <low_level_init+0x294>)
 800f4d8:	f107 0318 	add.w	r3, r7, #24
 800f4dc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f4de:	4b91      	ldr	r3, [pc, #580]	@ (800f724 <low_level_init+0x294>)
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f4e4:	4b8f      	ldr	r3, [pc, #572]	@ (800f724 <low_level_init+0x294>)
 800f4e6:	4a91      	ldr	r2, [pc, #580]	@ (800f72c <low_level_init+0x29c>)
 800f4e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f4ea:	4b8e      	ldr	r3, [pc, #568]	@ (800f724 <low_level_init+0x294>)
 800f4ec:	4a90      	ldr	r2, [pc, #576]	@ (800f730 <low_level_init+0x2a0>)
 800f4ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f4f0:	4b8c      	ldr	r3, [pc, #560]	@ (800f724 <low_level_init+0x294>)
 800f4f2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800f4f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  // Read the STM32 unique ID (96-bit value)
  uint32_t uid[3];
  uid[0] = *(uint32_t*)0x1FF1E800; // UID[31:0] - Low word (coordinates)
 800f4f8:	4b8e      	ldr	r3, [pc, #568]	@ (800f734 <low_level_init+0x2a4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	60fb      	str	r3, [r7, #12]
  uid[1] = *(uint32_t*)0x1FF1E804; // UID[63:32] - Middle word (wafer and part of lot number)
 800f4fe:	4b8e      	ldr	r3, [pc, #568]	@ (800f738 <low_level_init+0x2a8>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	613b      	str	r3, [r7, #16]
  uid[2] = *(uint32_t*)0x1FF1E808; // UID[95:64] - High word (remaining lot number)
 800f504:	4b8d      	ldr	r3, [pc, #564]	@ (800f73c <low_level_init+0x2ac>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	617b      	str	r3, [r7, #20]

  // Construct the MAC address using UID values to reduce duplicates
  MACAddr[0] = 0x00; // OUI - Fixed value
 800f50a:	2300      	movs	r3, #0
 800f50c:	763b      	strb	r3, [r7, #24]
  MACAddr[1] = 0x80; // OUI - Fixed value
 800f50e:	2380      	movs	r3, #128	@ 0x80
 800f510:	767b      	strb	r3, [r7, #25]
  MACAddr[2] = 0xE1; // OUI - Fixed value
 800f512:	23e1      	movs	r3, #225	@ 0xe1
 800f514:	76bb      	strb	r3, [r7, #26]
  // MACAddr[3]: Combine wafer number (UID[39:32]) with bits from lot number (UID[63:56])
  MACAddr[3] = (uint8_t)((uid[1] & 0xFF) ^ ((uid[2] >> 8) & 0xFF));
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	0a1b      	lsrs	r3, r3, #8
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	4053      	eors	r3, r2
 800f522:	b2db      	uxtb	r3, r3
 800f524:	76fb      	strb	r3, [r7, #27]
  // MACAddr[4]: X coordinate (UID[31:16])
  MACAddr[4] = (uint8_t)((uid[0] >> 16) & 0xFF);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	0c1b      	lsrs	r3, r3, #16
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	773b      	strb	r3, [r7, #28]
  // MACAddr[5]: Y coordinate (UID[15:0])
  MACAddr[5] = (uint8_t)(uid[0] & 0xFF);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	b2db      	uxtb	r3, r3
 800f532:	777b      	strb	r3, [r7, #29]

  heth.Init.MACAddr = &MACAddr[0];
 800f534:	4a7b      	ldr	r2, [pc, #492]	@ (800f724 <low_level_init+0x294>)
 800f536:	f107 0318 	add.w	r3, r7, #24
 800f53a:	6053      	str	r3, [r2, #4]
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f53c:	4879      	ldr	r0, [pc, #484]	@ (800f724 <low_level_init+0x294>)
 800f53e:	f7f7 fbf1 	bl	8006d24 <HAL_ETH_Init>
 800f542:	4603      	mov	r3, r0
 800f544:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f548:	2238      	movs	r2, #56	@ 0x38
 800f54a:	2100      	movs	r1, #0
 800f54c:	487c      	ldr	r0, [pc, #496]	@ (800f740 <low_level_init+0x2b0>)
 800f54e:	f012 fdd3 	bl	80220f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f552:	4b7b      	ldr	r3, [pc, #492]	@ (800f740 <low_level_init+0x2b0>)
 800f554:	2221      	movs	r2, #33	@ 0x21
 800f556:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f558:	4b79      	ldr	r3, [pc, #484]	@ (800f740 <low_level_init+0x2b0>)
 800f55a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800f55e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f560:	4b77      	ldr	r3, [pc, #476]	@ (800f740 <low_level_init+0x2b0>)
 800f562:	2200      	movs	r2, #0
 800f564:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f566:	4877      	ldr	r0, [pc, #476]	@ (800f744 <low_level_init+0x2b4>)
 800f568:	f007 fc21 	bl	8016dae <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2206      	movs	r2, #6
 800f570:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f574:	4b6b      	ldr	r3, [pc, #428]	@ (800f724 <low_level_init+0x294>)
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	781a      	ldrb	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f580:	4b68      	ldr	r3, [pc, #416]	@ (800f724 <low_level_init+0x294>)
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	785a      	ldrb	r2, [r3, #1]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f58c:	4b65      	ldr	r3, [pc, #404]	@ (800f724 <low_level_init+0x294>)
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	789a      	ldrb	r2, [r3, #2]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f598:	4b62      	ldr	r3, [pc, #392]	@ (800f724 <low_level_init+0x294>)
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	78da      	ldrb	r2, [r3, #3]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f5a4:	4b5f      	ldr	r3, [pc, #380]	@ (800f724 <low_level_init+0x294>)
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	791a      	ldrb	r2, [r3, #4]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f5b0:	4b5c      	ldr	r3, [pc, #368]	@ (800f724 <low_level_init+0x294>)
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	795a      	ldrb	r2, [r3, #5]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800f5c2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f5ca:	f043 030a 	orr.w	r3, r3, #10
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	2100      	movs	r1, #0
 800f5da:	2001      	movs	r0, #1
 800f5dc:	f000 ff0c 	bl	80103f8 <osSemaphoreNew>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	4a59      	ldr	r2, [pc, #356]	@ (800f748 <low_level_init+0x2b8>)
 800f5e4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	2001      	movs	r0, #1
 800f5ec:	f000 ff04 	bl	80103f8 <osSemaphoreNew>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	4a56      	ldr	r2, [pc, #344]	@ (800f74c <low_level_init+0x2bc>)
 800f5f4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800f5f6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800f5fa:	2224      	movs	r2, #36	@ 0x24
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	4618      	mov	r0, r3
 800f600:	f012 fd7a 	bl	80220f8 <memset>
  attributes.name = "EthIf";
 800f604:	4b52      	ldr	r3, [pc, #328]	@ (800f750 <low_level_init+0x2c0>)
 800f606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800f60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f60e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  attributes.priority = osPriorityRealtime;
 800f612:	2330      	movs	r3, #48	@ 0x30
 800f614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  osThreadNew(ethernetif_input, netif, &attributes);
 800f618:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800f61c:	461a      	mov	r2, r3
 800f61e:	6879      	ldr	r1, [r7, #4]
 800f620:	484c      	ldr	r0, [pc, #304]	@ (800f754 <low_level_init+0x2c4>)
 800f622:	f000 fd22 	bl	801006a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f626:	494c      	ldr	r1, [pc, #304]	@ (800f758 <low_level_init+0x2c8>)
 800f628:	484c      	ldr	r0, [pc, #304]	@ (800f75c <low_level_init+0x2cc>)
 800f62a:	f7f2 ffce 	bl	80025ca <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800f62e:	484b      	ldr	r0, [pc, #300]	@ (800f75c <low_level_init+0x2cc>)
 800f630:	f7f2 fffd 	bl	800262e <LAN8742_Init>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d006      	beq.n	800f648 <low_level_init+0x1b8>
  {
    netif_set_link_down(netif);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f009 fdcc 	bl	80191d8 <netif_set_link_down>
    netif_set_down(netif);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f009 fd5f 	bl	8019104 <netif_set_down>
 800f646:	e06a      	b.n	800f71e <low_level_init+0x28e>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800f648:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d164      	bne.n	800f71a <low_level_init+0x28a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f650:	4842      	ldr	r0, [pc, #264]	@ (800f75c <low_level_init+0x2cc>)
 800f652:	f7f3 f839 	bl	80026c8 <LAN8742_GetLinkState>
 800f656:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800f65a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f65e:	2b01      	cmp	r3, #1
 800f660:	dc06      	bgt.n	800f670 <low_level_init+0x1e0>
    {
      netif_set_link_down(netif);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f009 fdb8 	bl	80191d8 <netif_set_link_down>
      netif_set_down(netif);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f009 fd4b 	bl	8019104 <netif_set_down>
 800f66e:	e056      	b.n	800f71e <low_level_init+0x28e>
    }
    else
    {
      switch (PHYLinkState)
 800f670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f674:	3b02      	subs	r3, #2
 800f676:	2b03      	cmp	r3, #3
 800f678:	d82a      	bhi.n	800f6d0 <low_level_init+0x240>
 800f67a:	a201      	add	r2, pc, #4	@ (adr r2, 800f680 <low_level_init+0x1f0>)
 800f67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f680:	0800f691 	.word	0x0800f691
 800f684:	0800f6a3 	.word	0x0800f6a3
 800f688:	0800f6b3 	.word	0x0800f6b3
 800f68c:	0800f6c3 	.word	0x0800f6c3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800f690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_100M;
 800f698:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f69c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 800f6a0:	e01f      	b.n	800f6e2 <low_level_init+0x252>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_100M;
 800f6a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f6ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 800f6b0:	e017      	b.n	800f6e2 <low_level_init+0x252>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800f6b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f6b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_10M;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 800f6c0:	e00f      	b.n	800f6e2 <low_level_init+0x252>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_10M;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 800f6ce:	e008      	b.n	800f6e2 <low_level_init+0x252>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800f6d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        speed = ETH_SPEED_100M;
 800f6d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f6dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        break;
 800f6e0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f6e2:	f107 0320 	add.w	r3, r7, #32
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	480e      	ldr	r0, [pc, #56]	@ (800f724 <low_level_init+0x294>)
 800f6ea:	f7f8 f8bf 	bl	800786c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800f6ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    MACConf.Speed = speed;
 800f6f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f6f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f6fa:	f107 0320 	add.w	r3, r7, #32
 800f6fe:	4619      	mov	r1, r3
 800f700:	4808      	ldr	r0, [pc, #32]	@ (800f724 <low_level_init+0x294>)
 800f702:	f7f8 fa87 	bl	8007c14 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800f706:	4807      	ldr	r0, [pc, #28]	@ (800f724 <low_level_init+0x294>)
 800f708:	f7f7 fc0a 	bl	8006f20 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f009 fc8b 	bl	8019028 <netif_set_up>
    netif_set_link_up(netif);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f009 fd2a 	bl	801916c <netif_set_link_up>
 800f718:	e001      	b.n	800f71e <low_level_init+0x28e>
    }

  }
  else
  {
    Error_Handler();
 800f71a:	f7f2 faa7 	bl	8001c6c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f71e:	37b8      	adds	r7, #184	@ 0xb8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	24000774 	.word	0x24000774
 800f728:	40028000 	.word	0x40028000
 800f72c:	30040100 	.word	0x30040100
 800f730:	30040000 	.word	0x30040000
 800f734:	1ff1e800 	.word	0x1ff1e800
 800f738:	1ff1e804 	.word	0x1ff1e804
 800f73c:	1ff1e808 	.word	0x1ff1e808
 800f740:	24000824 	.word	0x24000824
 800f744:	08028a30 	.word	0x08028a30
 800f748:	2400076c 	.word	0x2400076c
 800f74c:	24000770 	.word	0x24000770
 800f750:	08024eb8 	.word	0x08024eb8
 800f754:	0800f8f1 	.word	0x0800f8f1
 800f758:	24000030 	.word	0x24000030
 800f75c:	2400085c 	.word	0x2400085c

0800f760 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b092      	sub	sp, #72	@ 0x48
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f76a:	2300      	movs	r3, #0
 800f76c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800f76e:	2300      	movs	r3, #0
 800f770:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800f772:	2300      	movs	r3, #0
 800f774:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f778:	f107 030c 	add.w	r3, r7, #12
 800f77c:	2230      	movs	r2, #48	@ 0x30
 800f77e:	2100      	movs	r1, #0
 800f780:	4618      	mov	r0, r3
 800f782:	f012 fcb9 	bl	80220f8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f786:	f107 030c 	add.w	r3, r7, #12
 800f78a:	2230      	movs	r2, #48	@ 0x30
 800f78c:	2100      	movs	r1, #0
 800f78e:	4618      	mov	r0, r3
 800f790:	f012 fcb2 	bl	80220f8 <memset>

  for(q = p; q != NULL; q = q->next)
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	643b      	str	r3, [r7, #64]	@ 0x40
 800f798:	e045      	b.n	800f826 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	d902      	bls.n	800f7a6 <low_level_output+0x46>
      return ERR_IF;
 800f7a0:	f06f 030b 	mvn.w	r3, #11
 800f7a4:	e07f      	b.n	800f8a6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800f7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7a8:	6859      	ldr	r1, [r3, #4]
 800f7aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	3348      	adds	r3, #72	@ 0x48
 800f7b6:	443b      	add	r3, r7
 800f7b8:	3b3c      	subs	r3, #60	@ 0x3c
 800f7ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f7bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7be:	895b      	ldrh	r3, [r3, #10]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	3348      	adds	r3, #72	@ 0x48
 800f7ce:	443b      	add	r3, r7
 800f7d0:	3b38      	subs	r3, #56	@ 0x38
 800f7d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d011      	beq.n	800f7fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7dc:	1e5a      	subs	r2, r3, #1
 800f7de:	f107 000c 	add.w	r0, r7, #12
 800f7e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	440b      	add	r3, r1
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	18c1      	adds	r1, r0, r3
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	005b      	lsls	r3, r3, #1
 800f7f2:	4413      	add	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	3348      	adds	r3, #72	@ 0x48
 800f7f8:	443b      	add	r3, r7
 800f7fa:	3b34      	subs	r3, #52	@ 0x34
 800f7fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d109      	bne.n	800f81a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f808:	4613      	mov	r3, r2
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	4413      	add	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	3348      	adds	r3, #72	@ 0x48
 800f812:	443b      	add	r3, r7
 800f814:	3b34      	subs	r3, #52	@ 0x34
 800f816:	2200      	movs	r2, #0
 800f818:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f81c:	3301      	adds	r3, #1
 800f81e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800f820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	643b      	str	r3, [r7, #64]	@ 0x40
 800f826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d1b6      	bne.n	800f79a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	891b      	ldrh	r3, [r3, #8]
 800f830:	461a      	mov	r2, r3
 800f832:	4b1f      	ldr	r3, [pc, #124]	@ (800f8b0 <low_level_output+0x150>)
 800f834:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f836:	4a1e      	ldr	r2, [pc, #120]	@ (800f8b0 <low_level_output+0x150>)
 800f838:	f107 030c 	add.w	r3, r7, #12
 800f83c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f83e:	4a1c      	ldr	r2, [pc, #112]	@ (800f8b0 <low_level_output+0x150>)
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800f844:	6838      	ldr	r0, [r7, #0]
 800f846:	f00a f94b 	bl	8019ae0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800f84a:	4919      	ldr	r1, [pc, #100]	@ (800f8b0 <low_level_output+0x150>)
 800f84c:	4819      	ldr	r0, [pc, #100]	@ (800f8b4 <low_level_output+0x154>)
 800f84e:	f7f7 fc53 	bl	80070f8 <HAL_ETH_Transmit_IT>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d103      	bne.n	800f860 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800f858:	2300      	movs	r3, #0
 800f85a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f85e:	e01b      	b.n	800f898 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800f860:	4814      	ldr	r0, [pc, #80]	@ (800f8b4 <low_level_output+0x154>)
 800f862:	f7f8 fa41 	bl	8007ce8 <HAL_ETH_GetError>
 800f866:	4603      	mov	r3, r0
 800f868:	f003 0302 	and.w	r3, r3, #2
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00d      	beq.n	800f88c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800f870:	4b11      	ldr	r3, [pc, #68]	@ (800f8b8 <low_level_output+0x158>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800f878:	4618      	mov	r0, r3
 800f87a:	f000 fe47 	bl	801050c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800f87e:	480d      	ldr	r0, [pc, #52]	@ (800f8b4 <low_level_output+0x154>)
 800f880:	f7f7 fdc1 	bl	8007406 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800f884:	23fe      	movs	r3, #254	@ 0xfe
 800f886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f88a:	e005      	b.n	800f898 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800f88c:	6838      	ldr	r0, [r7, #0]
 800f88e:	f00a f881 	bl	8019994 <pbuf_free>
        errval =  ERR_IF;
 800f892:	23f4      	movs	r3, #244	@ 0xf4
 800f894:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800f898:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f89c:	f113 0f02 	cmn.w	r3, #2
 800f8a0:	d0d3      	beq.n	800f84a <low_level_output+0xea>

  return errval;
 800f8a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3748      	adds	r7, #72	@ 0x48
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	24000824 	.word	0x24000824
 800f8b4:	24000774 	.word	0x24000774
 800f8b8:	24000770 	.word	0x24000770

0800f8bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f8c8:	4b07      	ldr	r3, [pc, #28]	@ (800f8e8 <low_level_input+0x2c>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d105      	bne.n	800f8dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f8d0:	f107 030c 	add.w	r3, r7, #12
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4805      	ldr	r0, [pc, #20]	@ (800f8ec <low_level_input+0x30>)
 800f8d8:	f7f7 fc5f 	bl	800719a <HAL_ETH_ReadData>
  }

  return p;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	24000768 	.word	0x24000768
 800f8ec:	24000774 	.word	0x24000774

0800f8f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f900:	4b0f      	ldr	r3, [pc, #60]	@ (800f940 <ethernetif_input+0x50>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f04f 31ff 	mov.w	r1, #4294967295
 800f908:	4618      	mov	r0, r3
 800f90a:	f000 fdff 	bl	801050c <osSemaphoreAcquire>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1f5      	bne.n	800f900 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800f914:	68b8      	ldr	r0, [r7, #8]
 800f916:	f7ff ffd1 	bl	800f8bc <low_level_input>
 800f91a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d00a      	beq.n	800f938 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	691b      	ldr	r3, [r3, #16]
 800f926:	68b9      	ldr	r1, [r7, #8]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	4798      	blx	r3
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d002      	beq.n	800f938 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f00a f82e 	bl	8019994 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1ea      	bne.n	800f914 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f93e:	e7df      	b.n	800f900 <ethernetif_input+0x10>
 800f940:	2400076c 	.word	0x2400076c

0800f944 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d106      	bne.n	800f960 <ethernetif_init+0x1c>
 800f952:	4b0e      	ldr	r3, [pc, #56]	@ (800f98c <ethernetif_init+0x48>)
 800f954:	f240 2229 	movw	r2, #553	@ 0x229
 800f958:	490d      	ldr	r1, [pc, #52]	@ (800f990 <ethernetif_init+0x4c>)
 800f95a:	480e      	ldr	r0, [pc, #56]	@ (800f994 <ethernetif_init+0x50>)
 800f95c:	f012 fa26 	bl	8021dac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2273      	movs	r2, #115	@ 0x73
 800f964:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2274      	movs	r2, #116	@ 0x74
 800f96c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a09      	ldr	r2, [pc, #36]	@ (800f998 <ethernetif_init+0x54>)
 800f974:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a08      	ldr	r2, [pc, #32]	@ (800f99c <ethernetif_init+0x58>)
 800f97a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7ff fd87 	bl	800f490 <low_level_init>

  return ERR_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	08024ec0 	.word	0x08024ec0
 800f990:	08024edc 	.word	0x08024edc
 800f994:	08024eec 	.word	0x08024eec
 800f998:	080146c5 	.word	0x080146c5
 800f99c:	0800f761 	.word	0x0800f761

0800f9a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f9ac:	68f9      	ldr	r1, [r7, #12]
 800f9ae:	4809      	ldr	r0, [pc, #36]	@ (800f9d4 <pbuf_free_custom+0x34>)
 800f9b0:	f007 faee 	bl	8016f90 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f9b4:	4b08      	ldr	r3, [pc, #32]	@ (800f9d8 <pbuf_free_custom+0x38>)
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d107      	bne.n	800f9cc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f9bc:	4b06      	ldr	r3, [pc, #24]	@ (800f9d8 <pbuf_free_custom+0x38>)
 800f9be:	2200      	movs	r2, #0
 800f9c0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800f9c2:	4b06      	ldr	r3, [pc, #24]	@ (800f9dc <pbuf_free_custom+0x3c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fdf2 	bl	80105b0 <osSemaphoreRelease>
  }
}
 800f9cc:	bf00      	nop
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	08028a30 	.word	0x08028a30
 800f9d8:	24000768 	.word	0x24000768
 800f9dc:	2400076c 	.word	0x2400076c

0800f9e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f9e4:	f7f2 ff48 	bl	8002878 <HAL_GetTick>
 800f9e8:	4603      	mov	r3, r0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	bd80      	pop	{r7, pc}
	...

0800f9f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b08e      	sub	sp, #56	@ 0x38
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f9f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	601a      	str	r2, [r3, #0]
 800fa00:	605a      	str	r2, [r3, #4]
 800fa02:	609a      	str	r2, [r3, #8]
 800fa04:	60da      	str	r2, [r3, #12]
 800fa06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a4d      	ldr	r2, [pc, #308]	@ (800fb44 <HAL_ETH_MspInit+0x154>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	f040 8093 	bne.w	800fb3a <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800fa14:	4b4c      	ldr	r3, [pc, #304]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa1a:	4a4b      	ldr	r2, [pc, #300]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fa24:	4b48      	ldr	r3, [pc, #288]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa2e:	623b      	str	r3, [r7, #32]
 800fa30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800fa32:	4b45      	ldr	r3, [pc, #276]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa38:	4a43      	ldr	r2, [pc, #268]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fa3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fa42:	4b41      	ldr	r3, [pc, #260]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa4c:	61fb      	str	r3, [r7, #28]
 800fa4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800fa50:	4b3d      	ldr	r3, [pc, #244]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa56:	4a3c      	ldr	r2, [pc, #240]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fa60:	4b39      	ldr	r3, [pc, #228]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa6a:	61bb      	str	r3, [r7, #24]
 800fa6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fa6e:	4b36      	ldr	r3, [pc, #216]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa74:	4a34      	ldr	r2, [pc, #208]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fa7e:	4b32      	ldr	r3, [pc, #200]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fa8c:	4b2e      	ldr	r3, [pc, #184]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa92:	4a2d      	ldr	r2, [pc, #180]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa94:	f043 0304 	orr.w	r3, r3, #4
 800fa98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fa9c:	4b2a      	ldr	r3, [pc, #168]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fa9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800faa2:	f003 0304 	and.w	r3, r3, #4
 800faa6:	613b      	str	r3, [r7, #16]
 800faa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800faaa:	4b27      	ldr	r3, [pc, #156]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800faac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fab0:	4a25      	ldr	r2, [pc, #148]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fab2:	f043 0301 	orr.w	r3, r3, #1
 800fab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800faba:	4b23      	ldr	r3, [pc, #140]	@ (800fb48 <HAL_ETH_MspInit+0x158>)
 800fabc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fac0:	f003 0301 	and.w	r3, r3, #1
 800fac4:	60fb      	str	r3, [r7, #12]
 800fac6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PA1     ------> ETH_REF_CLK
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_13;
 800fac8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800facc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800face:	2302      	movs	r3, #2
 800fad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fad6:	2303      	movs	r3, #3
 800fad8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fada:	230b      	movs	r3, #11
 800fadc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fae2:	4619      	mov	r1, r3
 800fae4:	4819      	ldr	r0, [pc, #100]	@ (800fb4c <HAL_ETH_MspInit+0x15c>)
 800fae6:	f7f8 fe9b 	bl	8008820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 800faea:	2332      	movs	r3, #50	@ 0x32
 800faec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800faee:	2302      	movs	r3, #2
 800faf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800faf6:	2303      	movs	r3, #3
 800faf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fafa:	230b      	movs	r3, #11
 800fafc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fafe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb02:	4619      	mov	r1, r3
 800fb04:	4812      	ldr	r0, [pc, #72]	@ (800fb50 <HAL_ETH_MspInit+0x160>)
 800fb06:	f7f8 fe8b 	bl	8008820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 800fb0a:	2386      	movs	r3, #134	@ 0x86
 800fb0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb0e:	2302      	movs	r3, #2
 800fb10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb12:	2300      	movs	r3, #0
 800fb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb16:	2303      	movs	r3, #3
 800fb18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fb1a:	230b      	movs	r3, #11
 800fb1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb22:	4619      	mov	r1, r3
 800fb24:	480b      	ldr	r0, [pc, #44]	@ (800fb54 <HAL_ETH_MspInit+0x164>)
 800fb26:	f7f8 fe7b 	bl	8008820 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	2105      	movs	r1, #5
 800fb2e:	203d      	movs	r0, #61	@ 0x3d
 800fb30:	f7f4 fa03 	bl	8003f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800fb34:	203d      	movs	r0, #61	@ 0x3d
 800fb36:	f7f4 fa1a 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800fb3a:	bf00      	nop
 800fb3c:	3738      	adds	r7, #56	@ 0x38
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	40028000 	.word	0x40028000
 800fb48:	58024400 	.word	0x58024400
 800fb4c:	58021800 	.word	0x58021800
 800fb50:	58020800 	.word	0x58020800
 800fb54:	58020000 	.word	0x58020000

0800fb58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800fb5c:	4802      	ldr	r0, [pc, #8]	@ (800fb68 <ETH_PHY_IO_Init+0x10>)
 800fb5e:	f7f8 f873 	bl	8007c48 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	24000774 	.word	0x24000774

0800fb6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	af00      	add	r7, sp, #0
  return 0;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	68f9      	ldr	r1, [r7, #12]
 800fb8e:	4807      	ldr	r0, [pc, #28]	@ (800fbac <ETH_PHY_IO_ReadReg+0x30>)
 800fb90:	f7f7 fdc4 	bl	800771c <HAL_ETH_ReadPHYRegister>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d002      	beq.n	800fba0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800fb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb9e:	e000      	b.n	800fba2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	24000774 	.word	0x24000774

0800fbb0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	68ba      	ldr	r2, [r7, #8]
 800fbc0:	68f9      	ldr	r1, [r7, #12]
 800fbc2:	4807      	ldr	r0, [pc, #28]	@ (800fbe0 <ETH_PHY_IO_WriteReg+0x30>)
 800fbc4:	f7f7 fdfe 	bl	80077c4 <HAL_ETH_WritePHYRegister>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d002      	beq.n	800fbd4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800fbce:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd2:	e000      	b.n	800fbd6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	24000774 	.word	0x24000774

0800fbe4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fbe8:	f7f2 fe46 	bl	8002878 <HAL_GetTick>
 800fbec:	4603      	mov	r3, r0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b0a0      	sub	sp, #128	@ 0x80
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800fbfc:	f107 0308 	add.w	r3, r7, #8
 800fc00:	2264      	movs	r2, #100	@ 0x64
 800fc02:	2100      	movs	r1, #0
 800fc04:	4618      	mov	r0, r3
 800fc06:	f012 fa77 	bl	80220f8 <memset>
  int32_t PHYLinkState = 0;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fc12:	2300      	movs	r3, #0
 800fc14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fc16:	2300      	movs	r3, #0
 800fc18:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
/* USER CODE BEGIN ETH link init */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 800fc1e:	f000 f921 	bl	800fe64 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fc22:	483c      	ldr	r0, [pc, #240]	@ (800fd14 <ethernet_link_thread+0x120>)
 800fc24:	f7f2 fd50 	bl	80026c8 <LAN8742_GetLinkState>
 800fc28:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800fc2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc30:	089b      	lsrs	r3, r3, #2
 800fc32:	f003 0301 	and.w	r3, r3, #1
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00c      	beq.n	800fc56 <ethernet_link_thread+0x62>
 800fc3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	dc09      	bgt.n	800fc56 <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 800fc42:	4835      	ldr	r0, [pc, #212]	@ (800fd18 <ethernet_link_thread+0x124>)
 800fc44:	f7f7 f9e0 	bl	8007008 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800fc48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc4a:	f009 fa5b 	bl	8019104 <netif_set_down>
    netif_set_link_down(netif);
 800fc4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc50:	f009 fac2 	bl	80191d8 <netif_set_link_down>
 800fc54:	e055      	b.n	800fd02 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800fc56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fc5c:	f003 0304 	and.w	r3, r3, #4
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d14e      	bne.n	800fd02 <ethernet_link_thread+0x10e>
 800fc64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	dd4b      	ble.n	800fd02 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 800fc6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc6c:	3b02      	subs	r3, #2
 800fc6e:	2b03      	cmp	r3, #3
 800fc70:	d82a      	bhi.n	800fcc8 <ethernet_link_thread+0xd4>
 800fc72:	a201      	add	r2, pc, #4	@ (adr r2, 800fc78 <ethernet_link_thread+0x84>)
 800fc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc78:	0800fc89 	.word	0x0800fc89
 800fc7c:	0800fc9b 	.word	0x0800fc9b
 800fc80:	0800fcab 	.word	0x0800fcab
 800fc84:	0800fcbb 	.word	0x0800fcbb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800fc88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fc8c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800fc8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fc92:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800fc94:	2301      	movs	r3, #1
 800fc96:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800fc98:	e017      	b.n	800fcca <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800fc9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fca2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800fca4:	2301      	movs	r3, #1
 800fca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800fca8:	e00f      	b.n	800fcca <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800fcaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fcae:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800fcb8:	e007      	b.n	800fcca <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800fcc6:	e000      	b.n	800fcca <ethernet_link_thread+0xd6>
    default:
      break;
 800fcc8:	bf00      	nop
    }

    if(linkchanged)
 800fcca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d018      	beq.n	800fd02 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fcd0:	f107 0308 	add.w	r3, r7, #8
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4810      	ldr	r0, [pc, #64]	@ (800fd18 <ethernet_link_thread+0x124>)
 800fcd8:	f7f7 fdc8 	bl	800786c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fcdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fcde:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800fce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fce2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fce4:	f107 0308 	add.w	r3, r7, #8
 800fce8:	4619      	mov	r1, r3
 800fcea:	480b      	ldr	r0, [pc, #44]	@ (800fd18 <ethernet_link_thread+0x124>)
 800fcec:	f7f7 ff92 	bl	8007c14 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800fcf0:	4809      	ldr	r0, [pc, #36]	@ (800fd18 <ethernet_link_thread+0x124>)
 800fcf2:	f7f7 f915 	bl	8006f20 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800fcf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fcf8:	f009 f996 	bl	8019028 <netif_set_up>
      netif_set_link_up(netif);
 800fcfc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fcfe:	f009 fa35 	bl	801916c <netif_set_link_up>
    }
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 800fd02:	f000 f8bf 	bl	800fe84 <sys_unlock_tcpip_core>
  osDelay(100);
 800fd06:	2064      	movs	r0, #100	@ 0x64
 800fd08:	f000 fa4d 	bl	80101a6 <osDelay>
  LOCK_TCPIP_CORE();
 800fd0c:	f000 f8aa 	bl	800fe64 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 800fd10:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fd12:	e786      	b.n	800fc22 <ethernet_link_thread+0x2e>
 800fd14:	2400085c 	.word	0x2400085c
 800fd18:	24000774 	.word	0x24000774

0800fd1c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af02      	add	r7, sp, #8
 800fd22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fd24:	4812      	ldr	r0, [pc, #72]	@ (800fd70 <HAL_ETH_RxAllocateCallback+0x54>)
 800fd26:	f007 f8bf 	bl	8016ea8 <memp_malloc_pool>
 800fd2a:	60f8      	str	r0, [r7, #12]
  if (p)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d014      	beq.n	800fd5c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f103 0220 	add.w	r2, r3, #32
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4a0d      	ldr	r2, [pc, #52]	@ (800fd74 <HAL_ETH_RxAllocateCallback+0x58>)
 800fd40:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800fd4a:	9201      	str	r2, [sp, #4]
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2241      	movs	r2, #65	@ 0x41
 800fd52:	2100      	movs	r1, #0
 800fd54:	2000      	movs	r0, #0
 800fd56:	f009 fc65 	bl	8019624 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800fd5a:	e005      	b.n	800fd68 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800fd5c:	4b06      	ldr	r3, [pc, #24]	@ (800fd78 <HAL_ETH_RxAllocateCallback+0x5c>)
 800fd5e:	2201      	movs	r2, #1
 800fd60:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	601a      	str	r2, [r3, #0]
}
 800fd68:	bf00      	nop
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	08028a30 	.word	0x08028a30
 800fd74:	0800f9a1 	.word	0x0800f9a1
 800fd78:	24000768 	.word	0x24000768

0800fd7c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b08d      	sub	sp, #52	@ 0x34
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]
 800fd88:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800fd92:	2300      	movs	r3, #0
 800fd94:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	3b20      	subs	r3, #32
 800fd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800fd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd9e:	2200      	movs	r2, #0
 800fda0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda4:	2200      	movs	r2, #0
 800fda6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdaa:	887a      	ldrh	r2, [r7, #2]
 800fdac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d103      	bne.n	800fdbe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdba:	601a      	str	r2, [r3, #0]
 800fdbc:	e003      	b.n	800fdc6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdc4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdd2:	e009      	b.n	800fde8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd6:	891a      	ldrh	r2, [r3, #8]
 800fdd8:	887b      	ldrh	r3, [r7, #2]
 800fdda:	4413      	add	r3, r2
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1f2      	bne.n	800fdd4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fdee:	887b      	ldrh	r3, [r7, #2]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	623a      	str	r2, [r7, #32]
 800fdf4:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	dd1d      	ble.n	800fe38 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fdfc:	6a3b      	ldr	r3, [r7, #32]
 800fdfe:	f003 021f 	and.w	r2, r3, #31
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	4413      	add	r3, r2
 800fe06:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fe08:	6a3b      	ldr	r3, [r7, #32]
 800fe0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fe0c:	f3bf 8f4f 	dsb	sy
}
 800fe10:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fe12:	4a0d      	ldr	r2, [pc, #52]	@ (800fe48 <HAL_ETH_RxLinkCallback+0xcc>)
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	3320      	adds	r3, #32
 800fe1e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	3b20      	subs	r3, #32
 800fe24:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	dcf2      	bgt.n	800fe12 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800fe2c:	f3bf 8f4f 	dsb	sy
}
 800fe30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fe32:	f3bf 8f6f 	isb	sy
}
 800fe36:	bf00      	nop
}
 800fe38:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fe3a:	bf00      	nop
 800fe3c:	3734      	adds	r7, #52	@ 0x34
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	e000ed00 	.word	0xe000ed00

0800fe4c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f009 fd9d 	bl	8019994 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 800fe64:	b580      	push	{r7, lr}
 800fe66:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 800fe68:	4804      	ldr	r0, [pc, #16]	@ (800fe7c <sys_lock_tcpip_core+0x18>)
 800fe6a:	f00a f939 	bl	801a0e0 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 800fe6e:	f000 f98f 	bl	8010190 <osThreadGetId>
 800fe72:	4603      	mov	r3, r0
 800fe74:	4a02      	ldr	r2, [pc, #8]	@ (800fe80 <sys_lock_tcpip_core+0x1c>)
 800fe76:	6013      	str	r3, [r2, #0]
}
 800fe78:	bf00      	nop
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	240126f8 	.word	0x240126f8
 800fe80:	2400087c 	.word	0x2400087c

0800fe84 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 800fe84:	b580      	push	{r7, lr}
 800fe86:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 800fe88:	4b03      	ldr	r3, [pc, #12]	@ (800fe98 <sys_unlock_tcpip_core+0x14>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 800fe8e:	4803      	ldr	r0, [pc, #12]	@ (800fe9c <sys_unlock_tcpip_core+0x18>)
 800fe90:	f00a f935 	bl	801a0fe <sys_mutex_unlock>
}
 800fe94:	bf00      	nop
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	2400087c 	.word	0x2400087c
 800fe9c:	240126f8 	.word	0x240126f8

0800fea0 <sys_check_core_locking>:

void sys_check_core_locking(void){
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 800fea6:	4b12      	ldr	r3, [pc, #72]	@ (800fef0 <sys_check_core_locking+0x50>)
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d006      	beq.n	800fec0 <sys_check_core_locking+0x20>
 800feb2:	4b10      	ldr	r3, [pc, #64]	@ (800fef4 <sys_check_core_locking+0x54>)
 800feb4:	f240 32d1 	movw	r2, #977	@ 0x3d1
 800feb8:	490f      	ldr	r1, [pc, #60]	@ (800fef8 <sys_check_core_locking+0x58>)
 800feba:	4810      	ldr	r0, [pc, #64]	@ (800fefc <sys_check_core_locking+0x5c>)
 800febc:	f011 ff76 	bl	8021dac <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 800fec0:	4b0f      	ldr	r3, [pc, #60]	@ (800ff00 <sys_check_core_locking+0x60>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00e      	beq.n	800fee6 <sys_check_core_locking+0x46>
	  osThreadId_t current_thread_id = osThreadGetId();
 800fec8:	f000 f962 	bl	8010190 <osThreadGetId>
 800fecc:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800fece:	4b0d      	ldr	r3, [pc, #52]	@ (800ff04 <sys_check_core_locking+0x64>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d006      	beq.n	800fee6 <sys_check_core_locking+0x46>
 800fed8:	4b06      	ldr	r3, [pc, #24]	@ (800fef4 <sys_check_core_locking+0x54>)
 800feda:	f240 32d7 	movw	r2, #983	@ 0x3d7
 800fede:	490a      	ldr	r1, [pc, #40]	@ (800ff08 <sys_check_core_locking+0x68>)
 800fee0:	4806      	ldr	r0, [pc, #24]	@ (800fefc <sys_check_core_locking+0x5c>)
 800fee2:	f011 ff63 	bl	8021dac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800fee6:	bf00      	nop
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	e000ed00 	.word	0xe000ed00
 800fef4:	08024ec0 	.word	0x08024ec0
 800fef8:	08024f14 	.word	0x08024f14
 800fefc:	08024eec 	.word	0x08024eec
 800ff00:	24000880 	.word	0x24000880
 800ff04:	2400087c 	.word	0x2400087c
 800ff08:	08024f3c 	.word	0x08024f3c

0800ff0c <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 800ff10:	f000 f93e 	bl	8010190 <osThreadGetId>
 800ff14:	4603      	mov	r3, r0
 800ff16:	4a02      	ldr	r2, [pc, #8]	@ (800ff20 <sys_mark_tcpip_thread+0x14>)
 800ff18:	6013      	str	r3, [r2, #0]
}
 800ff1a:	bf00      	nop
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	24000880 	.word	0x24000880

0800ff24 <__NVIC_SetPriority>:
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	6039      	str	r1, [r7, #0]
 800ff2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ff30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	db0a      	blt.n	800ff4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	490c      	ldr	r1, [pc, #48]	@ (800ff70 <__NVIC_SetPriority+0x4c>)
 800ff3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff42:	0112      	lsls	r2, r2, #4
 800ff44:	b2d2      	uxtb	r2, r2
 800ff46:	440b      	add	r3, r1
 800ff48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ff4c:	e00a      	b.n	800ff64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	4908      	ldr	r1, [pc, #32]	@ (800ff74 <__NVIC_SetPriority+0x50>)
 800ff54:	88fb      	ldrh	r3, [r7, #6]
 800ff56:	f003 030f 	and.w	r3, r3, #15
 800ff5a:	3b04      	subs	r3, #4
 800ff5c:	0112      	lsls	r2, r2, #4
 800ff5e:	b2d2      	uxtb	r2, r2
 800ff60:	440b      	add	r3, r1
 800ff62:	761a      	strb	r2, [r3, #24]
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	e000e100 	.word	0xe000e100
 800ff74:	e000ed00 	.word	0xe000ed00

0800ff78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ff7c:	4b05      	ldr	r3, [pc, #20]	@ (800ff94 <SysTick_Handler+0x1c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ff80:	f003 f912 	bl	80131a8 <xTaskGetSchedulerState>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d001      	beq.n	800ff8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ff8a:	f001 f91d 	bl	80111c8 <xPortSysTickHandler>
  }
}
 800ff8e:	bf00      	nop
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	e000e010 	.word	0xe000e010

0800ff98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	f06f 0004 	mvn.w	r0, #4
 800ffa2:	f7ff ffbf 	bl	800ff24 <__NVIC_SetPriority>
#endif
}
 800ffa6:	bf00      	nop
 800ffa8:	bd80      	pop	{r7, pc}
	...

0800ffac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffb2:	f3ef 8305 	mrs	r3, IPSR
 800ffb6:	603b      	str	r3, [r7, #0]
  return(result);
 800ffb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ffbe:	f06f 0305 	mvn.w	r3, #5
 800ffc2:	607b      	str	r3, [r7, #4]
 800ffc4:	e00c      	b.n	800ffe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ffc6:	4b0a      	ldr	r3, [pc, #40]	@ (800fff0 <osKernelInitialize+0x44>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d105      	bne.n	800ffda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ffce:	4b08      	ldr	r3, [pc, #32]	@ (800fff0 <osKernelInitialize+0x44>)
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	607b      	str	r3, [r7, #4]
 800ffd8:	e002      	b.n	800ffe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ffda:	f04f 33ff 	mov.w	r3, #4294967295
 800ffde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ffe0:	687b      	ldr	r3, [r7, #4]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	24000884 	.word	0x24000884

0800fff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fffa:	f3ef 8305 	mrs	r3, IPSR
 800fffe:	603b      	str	r3, [r7, #0]
  return(result);
 8010000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <osKernelStart+0x1a>
    stat = osErrorISR;
 8010006:	f06f 0305 	mvn.w	r3, #5
 801000a:	607b      	str	r3, [r7, #4]
 801000c:	e010      	b.n	8010030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801000e:	4b0b      	ldr	r3, [pc, #44]	@ (801003c <osKernelStart+0x48>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d109      	bne.n	801002a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010016:	f7ff ffbf 	bl	800ff98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801001a:	4b08      	ldr	r3, [pc, #32]	@ (801003c <osKernelStart+0x48>)
 801001c:	2202      	movs	r2, #2
 801001e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010020:	f002 fc3c 	bl	801289c <vTaskStartScheduler>
      stat = osOK;
 8010024:	2300      	movs	r3, #0
 8010026:	607b      	str	r3, [r7, #4]
 8010028:	e002      	b.n	8010030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801002a:	f04f 33ff 	mov.w	r3, #4294967295
 801002e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010030:	687b      	ldr	r3, [r7, #4]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	24000884 	.word	0x24000884

08010040 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010046:	f3ef 8305 	mrs	r3, IPSR
 801004a:	603b      	str	r3, [r7, #0]
  return(result);
 801004c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8010052:	f002 fd4f 	bl	8012af4 <xTaskGetTickCountFromISR>
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	e002      	b.n	8010060 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801005a:	f002 fd3b 	bl	8012ad4 <xTaskGetTickCount>
 801005e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8010060:	687b      	ldr	r3, [r7, #4]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801006a:	b580      	push	{r7, lr}
 801006c:	b08e      	sub	sp, #56	@ 0x38
 801006e:	af04      	add	r7, sp, #16
 8010070:	60f8      	str	r0, [r7, #12]
 8010072:	60b9      	str	r1, [r7, #8]
 8010074:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010076:	2300      	movs	r3, #0
 8010078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801007a:	f3ef 8305 	mrs	r3, IPSR
 801007e:	617b      	str	r3, [r7, #20]
  return(result);
 8010080:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010082:	2b00      	cmp	r3, #0
 8010084:	d17f      	bne.n	8010186 <osThreadNew+0x11c>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d07c      	beq.n	8010186 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 801008c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010090:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010092:	2318      	movs	r3, #24
 8010094:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010096:	2300      	movs	r3, #0
 8010098:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 801009a:	f04f 33ff 	mov.w	r3, #4294967295
 801009e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d045      	beq.n	8010132 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d002      	beq.n	80100b4 <osThreadNew+0x4a>
        name = attr->name;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	699b      	ldr	r3, [r3, #24]
 80100c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d008      	beq.n	80100da <osThreadNew+0x70>
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	2b38      	cmp	r3, #56	@ 0x38
 80100cc:	d805      	bhi.n	80100da <osThreadNew+0x70>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	f003 0301 	and.w	r3, r3, #1
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <osThreadNew+0x74>
        return (NULL);
 80100da:	2300      	movs	r3, #0
 80100dc:	e054      	b.n	8010188 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	695b      	ldr	r3, [r3, #20]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d003      	beq.n	80100ee <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	695b      	ldr	r3, [r3, #20]
 80100ea:	089b      	lsrs	r3, r3, #2
 80100ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00e      	beq.n	8010114 <osThreadNew+0xaa>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80100fc:	d90a      	bls.n	8010114 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010102:	2b00      	cmp	r3, #0
 8010104:	d006      	beq.n	8010114 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	695b      	ldr	r3, [r3, #20]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d002      	beq.n	8010114 <osThreadNew+0xaa>
        mem = 1;
 801010e:	2301      	movs	r3, #1
 8010110:	61bb      	str	r3, [r7, #24]
 8010112:	e010      	b.n	8010136 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10c      	bne.n	8010136 <osThreadNew+0xcc>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d108      	bne.n	8010136 <osThreadNew+0xcc>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d104      	bne.n	8010136 <osThreadNew+0xcc>
          mem = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	61bb      	str	r3, [r7, #24]
 8010130:	e001      	b.n	8010136 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8010132:	2300      	movs	r3, #0
 8010134:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d110      	bne.n	801015e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010144:	9202      	str	r2, [sp, #8]
 8010146:	9301      	str	r3, [sp, #4]
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	6a3a      	ldr	r2, [r7, #32]
 8010150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f002 f9ae 	bl	80124b4 <xTaskCreateStatic>
 8010158:	4603      	mov	r3, r0
 801015a:	613b      	str	r3, [r7, #16]
 801015c:	e013      	b.n	8010186 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d110      	bne.n	8010186 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010164:	6a3b      	ldr	r3, [r7, #32]
 8010166:	b29a      	uxth	r2, r3
 8010168:	f107 0310 	add.w	r3, r7, #16
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f002 f9fc 	bl	8012574 <xTaskCreate>
 801017c:	4603      	mov	r3, r0
 801017e:	2b01      	cmp	r3, #1
 8010180:	d001      	beq.n	8010186 <osThreadNew+0x11c>
            hTask = NULL;
 8010182:	2300      	movs	r3, #0
 8010184:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010186:	693b      	ldr	r3, [r7, #16]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3728      	adds	r7, #40	@ 0x28
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8010196:	f002 fff7 	bl	8013188 <xTaskGetCurrentTaskHandle>
 801019a:	6078      	str	r0, [r7, #4]

  return (id);
 801019c:	687b      	ldr	r3, [r7, #4]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b084      	sub	sp, #16
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101ae:	f3ef 8305 	mrs	r3, IPSR
 80101b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80101b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d003      	beq.n	80101c2 <osDelay+0x1c>
    stat = osErrorISR;
 80101ba:	f06f 0305 	mvn.w	r3, #5
 80101be:	60fb      	str	r3, [r7, #12]
 80101c0:	e007      	b.n	80101d2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f002 fb2f 	bl	8012830 <vTaskDelay>
    }
  }

  return (stat);
 80101d2:	68fb      	ldr	r3, [r7, #12]
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80101dc:	b580      	push	{r7, lr}
 80101de:	b088      	sub	sp, #32
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101e8:	f3ef 8305 	mrs	r3, IPSR
 80101ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80101ee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d174      	bne.n	80102de <osMutexNew+0x102>
    if (attr != NULL) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <osMutexNew+0x26>
      type = attr->attr_bits;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	61bb      	str	r3, [r7, #24]
 8010200:	e001      	b.n	8010206 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8010202:	2300      	movs	r3, #0
 8010204:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	2b00      	cmp	r3, #0
 801020e:	d002      	beq.n	8010216 <osMutexNew+0x3a>
      rmtx = 1U;
 8010210:	2301      	movs	r3, #1
 8010212:	617b      	str	r3, [r7, #20]
 8010214:	e001      	b.n	801021a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8010216:	2300      	movs	r3, #0
 8010218:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	f003 0308 	and.w	r3, r3, #8
 8010220:	2b00      	cmp	r3, #0
 8010222:	d15c      	bne.n	80102de <osMutexNew+0x102>
      mem = -1;
 8010224:	f04f 33ff 	mov.w	r3, #4294967295
 8010228:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d015      	beq.n	801025c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	689b      	ldr	r3, [r3, #8]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d006      	beq.n	8010246 <osMutexNew+0x6a>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	2b4f      	cmp	r3, #79	@ 0x4f
 801023e:	d902      	bls.n	8010246 <osMutexNew+0x6a>
          mem = 1;
 8010240:	2301      	movs	r3, #1
 8010242:	613b      	str	r3, [r7, #16]
 8010244:	e00c      	b.n	8010260 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d108      	bne.n	8010260 <osMutexNew+0x84>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d104      	bne.n	8010260 <osMutexNew+0x84>
            mem = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	613b      	str	r3, [r7, #16]
 801025a:	e001      	b.n	8010260 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	2b01      	cmp	r3, #1
 8010264:	d112      	bne.n	801028c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d007      	beq.n	801027c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	4619      	mov	r1, r3
 8010272:	2004      	movs	r0, #4
 8010274:	f001 f9b1 	bl	80115da <xQueueCreateMutexStatic>
 8010278:	61f8      	str	r0, [r7, #28]
 801027a:	e016      	b.n	80102aa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	4619      	mov	r1, r3
 8010282:	2001      	movs	r0, #1
 8010284:	f001 f9a9 	bl	80115da <xQueueCreateMutexStatic>
 8010288:	61f8      	str	r0, [r7, #28]
 801028a:	e00e      	b.n	80102aa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d10b      	bne.n	80102aa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d004      	beq.n	80102a2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010298:	2004      	movs	r0, #4
 801029a:	f001 f986 	bl	80115aa <xQueueCreateMutex>
 801029e:	61f8      	str	r0, [r7, #28]
 80102a0:	e003      	b.n	80102aa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80102a2:	2001      	movs	r0, #1
 80102a4:	f001 f981 	bl	80115aa <xQueueCreateMutex>
 80102a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00c      	beq.n	80102ca <osMutexNew+0xee>
        if (attr != NULL) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d003      	beq.n	80102be <osMutexNew+0xe2>
          name = attr->name;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	60fb      	str	r3, [r7, #12]
 80102bc:	e001      	b.n	80102c2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80102c2:	68f9      	ldr	r1, [r7, #12]
 80102c4:	69f8      	ldr	r0, [r7, #28]
 80102c6:	f002 f86d 	bl	80123a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d006      	beq.n	80102de <osMutexNew+0x102>
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d003      	beq.n	80102de <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	f043 0301 	orr.w	r3, r3, #1
 80102dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80102de:	69fb      	ldr	r3, [r7, #28]
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3720      	adds	r7, #32
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f023 0301 	bic.w	r3, r3, #1
 80102f8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8010302:	2300      	movs	r3, #0
 8010304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010306:	f3ef 8305 	mrs	r3, IPSR
 801030a:	60bb      	str	r3, [r7, #8]
  return(result);
 801030c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801030e:	2b00      	cmp	r3, #0
 8010310:	d003      	beq.n	801031a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8010312:	f06f 0305 	mvn.w	r3, #5
 8010316:	617b      	str	r3, [r7, #20]
 8010318:	e02c      	b.n	8010374 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d103      	bne.n	8010328 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8010320:	f06f 0303 	mvn.w	r3, #3
 8010324:	617b      	str	r3, [r7, #20]
 8010326:	e025      	b.n	8010374 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d011      	beq.n	8010352 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6938      	ldr	r0, [r7, #16]
 8010332:	f001 f9a2 	bl	801167a <xQueueTakeMutexRecursive>
 8010336:	4603      	mov	r3, r0
 8010338:	2b01      	cmp	r3, #1
 801033a:	d01b      	beq.n	8010374 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d003      	beq.n	801034a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8010342:	f06f 0301 	mvn.w	r3, #1
 8010346:	617b      	str	r3, [r7, #20]
 8010348:	e014      	b.n	8010374 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801034a:	f06f 0302 	mvn.w	r3, #2
 801034e:	617b      	str	r3, [r7, #20]
 8010350:	e010      	b.n	8010374 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010352:	6839      	ldr	r1, [r7, #0]
 8010354:	6938      	ldr	r0, [r7, #16]
 8010356:	f001 fd47 	bl	8011de8 <xQueueSemaphoreTake>
 801035a:	4603      	mov	r3, r0
 801035c:	2b01      	cmp	r3, #1
 801035e:	d009      	beq.n	8010374 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d003      	beq.n	801036e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8010366:	f06f 0301 	mvn.w	r3, #1
 801036a:	617b      	str	r3, [r7, #20]
 801036c:	e002      	b.n	8010374 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801036e:	f06f 0302 	mvn.w	r3, #2
 8010372:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8010374:	697b      	ldr	r3, [r7, #20]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3718      	adds	r7, #24
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801037e:	b580      	push	{r7, lr}
 8010380:	b086      	sub	sp, #24
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f023 0301 	bic.w	r3, r3, #1
 801038c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8010396:	2300      	movs	r3, #0
 8010398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801039a:	f3ef 8305 	mrs	r3, IPSR
 801039e:	60bb      	str	r3, [r7, #8]
  return(result);
 80103a0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d003      	beq.n	80103ae <osMutexRelease+0x30>
    stat = osErrorISR;
 80103a6:	f06f 0305 	mvn.w	r3, #5
 80103aa:	617b      	str	r3, [r7, #20]
 80103ac:	e01f      	b.n	80103ee <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d103      	bne.n	80103bc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80103b4:	f06f 0303 	mvn.w	r3, #3
 80103b8:	617b      	str	r3, [r7, #20]
 80103ba:	e018      	b.n	80103ee <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d009      	beq.n	80103d6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80103c2:	6938      	ldr	r0, [r7, #16]
 80103c4:	f001 f924 	bl	8011610 <xQueueGiveMutexRecursive>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d00f      	beq.n	80103ee <osMutexRelease+0x70>
        stat = osErrorResource;
 80103ce:	f06f 0302 	mvn.w	r3, #2
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	e00b      	b.n	80103ee <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80103d6:	2300      	movs	r3, #0
 80103d8:	2200      	movs	r2, #0
 80103da:	2100      	movs	r1, #0
 80103dc:	6938      	ldr	r0, [r7, #16]
 80103de:	f001 f9f1 	bl	80117c4 <xQueueGenericSend>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d002      	beq.n	80103ee <osMutexRelease+0x70>
        stat = osErrorResource;
 80103e8:	f06f 0302 	mvn.w	r3, #2
 80103ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80103ee:	697b      	ldr	r3, [r7, #20]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b08a      	sub	sp, #40	@ 0x28
 80103fc:	af02      	add	r7, sp, #8
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010404:	2300      	movs	r3, #0
 8010406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010408:	f3ef 8305 	mrs	r3, IPSR
 801040c:	613b      	str	r3, [r7, #16]
  return(result);
 801040e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010410:	2b00      	cmp	r3, #0
 8010412:	d175      	bne.n	8010500 <osSemaphoreNew+0x108>
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d072      	beq.n	8010500 <osSemaphoreNew+0x108>
 801041a:	68ba      	ldr	r2, [r7, #8]
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	429a      	cmp	r2, r3
 8010420:	d86e      	bhi.n	8010500 <osSemaphoreNew+0x108>
    mem = -1;
 8010422:	f04f 33ff 	mov.w	r3, #4294967295
 8010426:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d015      	beq.n	801045a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d006      	beq.n	8010444 <osSemaphoreNew+0x4c>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	2b4f      	cmp	r3, #79	@ 0x4f
 801043c:	d902      	bls.n	8010444 <osSemaphoreNew+0x4c>
        mem = 1;
 801043e:	2301      	movs	r3, #1
 8010440:	61bb      	str	r3, [r7, #24]
 8010442:	e00c      	b.n	801045e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d108      	bne.n	801045e <osSemaphoreNew+0x66>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d104      	bne.n	801045e <osSemaphoreNew+0x66>
          mem = 0;
 8010454:	2300      	movs	r3, #0
 8010456:	61bb      	str	r3, [r7, #24]
 8010458:	e001      	b.n	801045e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010464:	d04c      	beq.n	8010500 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d128      	bne.n	80104be <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	2b01      	cmp	r3, #1
 8010470:	d10a      	bne.n	8010488 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	2203      	movs	r2, #3
 8010478:	9200      	str	r2, [sp, #0]
 801047a:	2200      	movs	r2, #0
 801047c:	2100      	movs	r1, #0
 801047e:	2001      	movs	r0, #1
 8010480:	f000 ff9e 	bl	80113c0 <xQueueGenericCreateStatic>
 8010484:	61f8      	str	r0, [r7, #28]
 8010486:	e005      	b.n	8010494 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010488:	2203      	movs	r2, #3
 801048a:	2100      	movs	r1, #0
 801048c:	2001      	movs	r0, #1
 801048e:	f001 f814 	bl	80114ba <xQueueGenericCreate>
 8010492:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d022      	beq.n	80104e0 <osSemaphoreNew+0xe8>
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d01f      	beq.n	80104e0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80104a0:	2300      	movs	r3, #0
 80104a2:	2200      	movs	r2, #0
 80104a4:	2100      	movs	r1, #0
 80104a6:	69f8      	ldr	r0, [r7, #28]
 80104a8:	f001 f98c 	bl	80117c4 <xQueueGenericSend>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d016      	beq.n	80104e0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80104b2:	69f8      	ldr	r0, [r7, #28]
 80104b4:	f001 fe2a 	bl	801210c <vQueueDelete>
            hSemaphore = NULL;
 80104b8:	2300      	movs	r3, #0
 80104ba:	61fb      	str	r3, [r7, #28]
 80104bc:	e010      	b.n	80104e0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d108      	bne.n	80104d6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	461a      	mov	r2, r3
 80104ca:	68b9      	ldr	r1, [r7, #8]
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f001 f90b 	bl	80116e8 <xQueueCreateCountingSemaphoreStatic>
 80104d2:	61f8      	str	r0, [r7, #28]
 80104d4:	e004      	b.n	80104e0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80104d6:	68b9      	ldr	r1, [r7, #8]
 80104d8:	68f8      	ldr	r0, [r7, #12]
 80104da:	f001 f93e 	bl	801175a <xQueueCreateCountingSemaphore>
 80104de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00c      	beq.n	8010500 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d003      	beq.n	80104f4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	617b      	str	r3, [r7, #20]
 80104f2:	e001      	b.n	80104f8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80104f4:	2300      	movs	r3, #0
 80104f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80104f8:	6979      	ldr	r1, [r7, #20]
 80104fa:	69f8      	ldr	r0, [r7, #28]
 80104fc:	f001 ff52 	bl	80123a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010500:	69fb      	ldr	r3, [r7, #28]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3720      	adds	r7, #32
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
	...

0801050c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801050c:	b580      	push	{r7, lr}
 801050e:	b086      	sub	sp, #24
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801051a:	2300      	movs	r3, #0
 801051c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d103      	bne.n	801052c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010524:	f06f 0303 	mvn.w	r3, #3
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	e039      	b.n	80105a0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801052c:	f3ef 8305 	mrs	r3, IPSR
 8010530:	60fb      	str	r3, [r7, #12]
  return(result);
 8010532:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010534:	2b00      	cmp	r3, #0
 8010536:	d022      	beq.n	801057e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d003      	beq.n	8010546 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801053e:	f06f 0303 	mvn.w	r3, #3
 8010542:	617b      	str	r3, [r7, #20]
 8010544:	e02c      	b.n	80105a0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010546:	2300      	movs	r3, #0
 8010548:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801054a:	f107 0308 	add.w	r3, r7, #8
 801054e:	461a      	mov	r2, r3
 8010550:	2100      	movs	r1, #0
 8010552:	6938      	ldr	r0, [r7, #16]
 8010554:	f001 fd58 	bl	8012008 <xQueueReceiveFromISR>
 8010558:	4603      	mov	r3, r0
 801055a:	2b01      	cmp	r3, #1
 801055c:	d003      	beq.n	8010566 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801055e:	f06f 0302 	mvn.w	r3, #2
 8010562:	617b      	str	r3, [r7, #20]
 8010564:	e01c      	b.n	80105a0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d019      	beq.n	80105a0 <osSemaphoreAcquire+0x94>
 801056c:	4b0f      	ldr	r3, [pc, #60]	@ (80105ac <osSemaphoreAcquire+0xa0>)
 801056e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	f3bf 8f4f 	dsb	sy
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	e010      	b.n	80105a0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801057e:	6839      	ldr	r1, [r7, #0]
 8010580:	6938      	ldr	r0, [r7, #16]
 8010582:	f001 fc31 	bl	8011de8 <xQueueSemaphoreTake>
 8010586:	4603      	mov	r3, r0
 8010588:	2b01      	cmp	r3, #1
 801058a:	d009      	beq.n	80105a0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d003      	beq.n	801059a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010592:	f06f 0301 	mvn.w	r3, #1
 8010596:	617b      	str	r3, [r7, #20]
 8010598:	e002      	b.n	80105a0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801059a:	f06f 0302 	mvn.w	r3, #2
 801059e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80105a0:	697b      	ldr	r3, [r7, #20]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	e000ed04 	.word	0xe000ed04

080105b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80105bc:	2300      	movs	r3, #0
 80105be:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d103      	bne.n	80105ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80105c6:	f06f 0303 	mvn.w	r3, #3
 80105ca:	617b      	str	r3, [r7, #20]
 80105cc:	e02c      	b.n	8010628 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105ce:	f3ef 8305 	mrs	r3, IPSR
 80105d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80105d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d01a      	beq.n	8010610 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80105da:	2300      	movs	r3, #0
 80105dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80105de:	f107 0308 	add.w	r3, r7, #8
 80105e2:	4619      	mov	r1, r3
 80105e4:	6938      	ldr	r0, [r7, #16]
 80105e6:	f001 fa8d 	bl	8011b04 <xQueueGiveFromISR>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d003      	beq.n	80105f8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80105f0:	f06f 0302 	mvn.w	r3, #2
 80105f4:	617b      	str	r3, [r7, #20]
 80105f6:	e017      	b.n	8010628 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d014      	beq.n	8010628 <osSemaphoreRelease+0x78>
 80105fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010634 <osSemaphoreRelease+0x84>)
 8010600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	f3bf 8f6f 	isb	sy
 801060e:	e00b      	b.n	8010628 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010610:	2300      	movs	r3, #0
 8010612:	2200      	movs	r2, #0
 8010614:	2100      	movs	r1, #0
 8010616:	6938      	ldr	r0, [r7, #16]
 8010618:	f001 f8d4 	bl	80117c4 <xQueueGenericSend>
 801061c:	4603      	mov	r3, r0
 801061e:	2b01      	cmp	r3, #1
 8010620:	d002      	beq.n	8010628 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010622:	f06f 0302 	mvn.w	r3, #2
 8010626:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010628:	697b      	ldr	r3, [r7, #20]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	e000ed04 	.word	0xe000ed04

08010638 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010638:	b580      	push	{r7, lr}
 801063a:	b08a      	sub	sp, #40	@ 0x28
 801063c:	af02      	add	r7, sp, #8
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010644:	2300      	movs	r3, #0
 8010646:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010648:	f3ef 8305 	mrs	r3, IPSR
 801064c:	613b      	str	r3, [r7, #16]
  return(result);
 801064e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010650:	2b00      	cmp	r3, #0
 8010652:	d15f      	bne.n	8010714 <osMessageQueueNew+0xdc>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d05c      	beq.n	8010714 <osMessageQueueNew+0xdc>
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d059      	beq.n	8010714 <osMessageQueueNew+0xdc>
    mem = -1;
 8010660:	f04f 33ff 	mov.w	r3, #4294967295
 8010664:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d029      	beq.n	80106c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d012      	beq.n	801069a <osMessageQueueNew+0x62>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	2b4f      	cmp	r3, #79	@ 0x4f
 801067a:	d90e      	bls.n	801069a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010680:	2b00      	cmp	r3, #0
 8010682:	d00a      	beq.n	801069a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	695a      	ldr	r2, [r3, #20]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	68b9      	ldr	r1, [r7, #8]
 801068c:	fb01 f303 	mul.w	r3, r1, r3
 8010690:	429a      	cmp	r2, r3
 8010692:	d302      	bcc.n	801069a <osMessageQueueNew+0x62>
        mem = 1;
 8010694:	2301      	movs	r3, #1
 8010696:	61bb      	str	r3, [r7, #24]
 8010698:	e014      	b.n	80106c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d110      	bne.n	80106c4 <osMessageQueueNew+0x8c>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d10c      	bne.n	80106c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d108      	bne.n	80106c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	695b      	ldr	r3, [r3, #20]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d104      	bne.n	80106c4 <osMessageQueueNew+0x8c>
          mem = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	61bb      	str	r3, [r7, #24]
 80106be:	e001      	b.n	80106c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d10b      	bne.n	80106e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	691a      	ldr	r2, [r3, #16]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	2100      	movs	r1, #0
 80106d4:	9100      	str	r1, [sp, #0]
 80106d6:	68b9      	ldr	r1, [r7, #8]
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f000 fe71 	bl	80113c0 <xQueueGenericCreateStatic>
 80106de:	61f8      	str	r0, [r7, #28]
 80106e0:	e008      	b.n	80106f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d105      	bne.n	80106f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80106e8:	2200      	movs	r2, #0
 80106ea:	68b9      	ldr	r1, [r7, #8]
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 fee4 	bl	80114ba <xQueueGenericCreate>
 80106f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00c      	beq.n	8010714 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d003      	beq.n	8010708 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	617b      	str	r3, [r7, #20]
 8010706:	e001      	b.n	801070c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010708:	2300      	movs	r3, #0
 801070a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801070c:	6979      	ldr	r1, [r7, #20]
 801070e:	69f8      	ldr	r0, [r7, #28]
 8010710:	f001 fe48 	bl	80123a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010714:	69fb      	ldr	r3, [r7, #28]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3720      	adds	r7, #32
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
	...

08010720 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010720:	b580      	push	{r7, lr}
 8010722:	b088      	sub	sp, #32
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	603b      	str	r3, [r7, #0]
 801072c:	4613      	mov	r3, r2
 801072e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010734:	2300      	movs	r3, #0
 8010736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010738:	f3ef 8305 	mrs	r3, IPSR
 801073c:	617b      	str	r3, [r7, #20]
  return(result);
 801073e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010740:	2b00      	cmp	r3, #0
 8010742:	d028      	beq.n	8010796 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d005      	beq.n	8010756 <osMessageQueuePut+0x36>
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <osMessageQueuePut+0x36>
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d003      	beq.n	801075e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010756:	f06f 0303 	mvn.w	r3, #3
 801075a:	61fb      	str	r3, [r7, #28]
 801075c:	e038      	b.n	80107d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801075e:	2300      	movs	r3, #0
 8010760:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010762:	f107 0210 	add.w	r2, r7, #16
 8010766:	2300      	movs	r3, #0
 8010768:	68b9      	ldr	r1, [r7, #8]
 801076a:	69b8      	ldr	r0, [r7, #24]
 801076c:	f001 f92c 	bl	80119c8 <xQueueGenericSendFromISR>
 8010770:	4603      	mov	r3, r0
 8010772:	2b01      	cmp	r3, #1
 8010774:	d003      	beq.n	801077e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010776:	f06f 0302 	mvn.w	r3, #2
 801077a:	61fb      	str	r3, [r7, #28]
 801077c:	e028      	b.n	80107d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d025      	beq.n	80107d0 <osMessageQueuePut+0xb0>
 8010784:	4b15      	ldr	r3, [pc, #84]	@ (80107dc <osMessageQueuePut+0xbc>)
 8010786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	f3bf 8f4f 	dsb	sy
 8010790:	f3bf 8f6f 	isb	sy
 8010794:	e01c      	b.n	80107d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d002      	beq.n	80107a2 <osMessageQueuePut+0x82>
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d103      	bne.n	80107aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80107a2:	f06f 0303 	mvn.w	r3, #3
 80107a6:	61fb      	str	r3, [r7, #28]
 80107a8:	e012      	b.n	80107d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80107aa:	2300      	movs	r3, #0
 80107ac:	683a      	ldr	r2, [r7, #0]
 80107ae:	68b9      	ldr	r1, [r7, #8]
 80107b0:	69b8      	ldr	r0, [r7, #24]
 80107b2:	f001 f807 	bl	80117c4 <xQueueGenericSend>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d009      	beq.n	80107d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d003      	beq.n	80107ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80107c2:	f06f 0301 	mvn.w	r3, #1
 80107c6:	61fb      	str	r3, [r7, #28]
 80107c8:	e002      	b.n	80107d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80107ca:	f06f 0302 	mvn.w	r3, #2
 80107ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80107d0:	69fb      	ldr	r3, [r7, #28]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3720      	adds	r7, #32
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	e000ed04 	.word	0xe000ed04

080107e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107f6:	f3ef 8305 	mrs	r3, IPSR
 80107fa:	617b      	str	r3, [r7, #20]
  return(result);
 80107fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d028      	beq.n	8010854 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d005      	beq.n	8010814 <osMessageQueueGet+0x34>
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d002      	beq.n	8010814 <osMessageQueueGet+0x34>
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d003      	beq.n	801081c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010814:	f06f 0303 	mvn.w	r3, #3
 8010818:	61fb      	str	r3, [r7, #28]
 801081a:	e037      	b.n	801088c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801081c:	2300      	movs	r3, #0
 801081e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010820:	f107 0310 	add.w	r3, r7, #16
 8010824:	461a      	mov	r2, r3
 8010826:	68b9      	ldr	r1, [r7, #8]
 8010828:	69b8      	ldr	r0, [r7, #24]
 801082a:	f001 fbed 	bl	8012008 <xQueueReceiveFromISR>
 801082e:	4603      	mov	r3, r0
 8010830:	2b01      	cmp	r3, #1
 8010832:	d003      	beq.n	801083c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010834:	f06f 0302 	mvn.w	r3, #2
 8010838:	61fb      	str	r3, [r7, #28]
 801083a:	e027      	b.n	801088c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d024      	beq.n	801088c <osMessageQueueGet+0xac>
 8010842:	4b15      	ldr	r3, [pc, #84]	@ (8010898 <osMessageQueueGet+0xb8>)
 8010844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	f3bf 8f6f 	isb	sy
 8010852:	e01b      	b.n	801088c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d002      	beq.n	8010860 <osMessageQueueGet+0x80>
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d103      	bne.n	8010868 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010860:	f06f 0303 	mvn.w	r3, #3
 8010864:	61fb      	str	r3, [r7, #28]
 8010866:	e011      	b.n	801088c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	68b9      	ldr	r1, [r7, #8]
 801086c:	69b8      	ldr	r0, [r7, #24]
 801086e:	f001 f9d9 	bl	8011c24 <xQueueReceive>
 8010872:	4603      	mov	r3, r0
 8010874:	2b01      	cmp	r3, #1
 8010876:	d009      	beq.n	801088c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d003      	beq.n	8010886 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801087e:	f06f 0301 	mvn.w	r3, #1
 8010882:	61fb      	str	r3, [r7, #28]
 8010884:	e002      	b.n	801088c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010886:	f06f 0302 	mvn.w	r3, #2
 801088a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801088c:	69fb      	ldr	r3, [r7, #28]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3720      	adds	r7, #32
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	e000ed04 	.word	0xe000ed04

0801089c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	4a07      	ldr	r2, [pc, #28]	@ (80108c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80108ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	4a06      	ldr	r2, [pc, #24]	@ (80108cc <vApplicationGetIdleTaskMemory+0x30>)
 80108b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108ba:	601a      	str	r2, [r3, #0]
}
 80108bc:	bf00      	nop
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	24000888 	.word	0x24000888
 80108cc:	24000930 	.word	0x24000930

080108d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4a07      	ldr	r2, [pc, #28]	@ (80108fc <vApplicationGetTimerTaskMemory+0x2c>)
 80108e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	4a06      	ldr	r2, [pc, #24]	@ (8010900 <vApplicationGetTimerTaskMemory+0x30>)
 80108e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80108ee:	601a      	str	r2, [r3, #0]
}
 80108f0:	bf00      	nop
 80108f2:	3714      	adds	r7, #20
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr
 80108fc:	24001130 	.word	0x24001130
 8010900:	240011d8 	.word	0x240011d8

08010904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08a      	sub	sp, #40	@ 0x28
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801090c:	2300      	movs	r3, #0
 801090e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010910:	f002 f834 	bl	801297c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010914:	4b5c      	ldr	r3, [pc, #368]	@ (8010a88 <pvPortMalloc+0x184>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d101      	bne.n	8010920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801091c:	f000 f924 	bl	8010b68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010920:	4b5a      	ldr	r3, [pc, #360]	@ (8010a8c <pvPortMalloc+0x188>)
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4013      	ands	r3, r2
 8010928:	2b00      	cmp	r3, #0
 801092a:	f040 8095 	bne.w	8010a58 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01e      	beq.n	8010972 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010934:	2208      	movs	r2, #8
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4413      	add	r3, r2
 801093a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f003 0307 	and.w	r3, r3, #7
 8010942:	2b00      	cmp	r3, #0
 8010944:	d015      	beq.n	8010972 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f023 0307 	bic.w	r3, r3, #7
 801094c:	3308      	adds	r3, #8
 801094e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f003 0307 	and.w	r3, r3, #7
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00b      	beq.n	8010972 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801096c:	bf00      	nop
 801096e:	bf00      	nop
 8010970:	e7fd      	b.n	801096e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d06f      	beq.n	8010a58 <pvPortMalloc+0x154>
 8010978:	4b45      	ldr	r3, [pc, #276]	@ (8010a90 <pvPortMalloc+0x18c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d86a      	bhi.n	8010a58 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010982:	4b44      	ldr	r3, [pc, #272]	@ (8010a94 <pvPortMalloc+0x190>)
 8010984:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010986:	4b43      	ldr	r3, [pc, #268]	@ (8010a94 <pvPortMalloc+0x190>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801098c:	e004      	b.n	8010998 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010990:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d903      	bls.n	80109aa <pvPortMalloc+0xa6>
 80109a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1f1      	bne.n	801098e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80109aa:	4b37      	ldr	r3, [pc, #220]	@ (8010a88 <pvPortMalloc+0x184>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d051      	beq.n	8010a58 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2208      	movs	r2, #8
 80109ba:	4413      	add	r3, r2
 80109bc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c8:	685a      	ldr	r2, [r3, #4]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	1ad2      	subs	r2, r2, r3
 80109ce:	2308      	movs	r3, #8
 80109d0:	005b      	lsls	r3, r3, #1
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d920      	bls.n	8010a18 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80109d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4413      	add	r3, r2
 80109dc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109de:	69bb      	ldr	r3, [r7, #24]
 80109e0:	f003 0307 	and.w	r3, r3, #7
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d00b      	beq.n	8010a00 <pvPortMalloc+0xfc>
	__asm volatile
 80109e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ec:	f383 8811 	msr	BASEPRI, r3
 80109f0:	f3bf 8f6f 	isb	sy
 80109f4:	f3bf 8f4f 	dsb	sy
 80109f8:	613b      	str	r3, [r7, #16]
}
 80109fa:	bf00      	nop
 80109fc:	bf00      	nop
 80109fe:	e7fd      	b.n	80109fc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a02:	685a      	ldr	r2, [r3, #4]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	1ad2      	subs	r2, r2, r3
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a12:	69b8      	ldr	r0, [r7, #24]
 8010a14:	f000 f90a 	bl	8010c2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a18:	4b1d      	ldr	r3, [pc, #116]	@ (8010a90 <pvPortMalloc+0x18c>)
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	4a1b      	ldr	r2, [pc, #108]	@ (8010a90 <pvPortMalloc+0x18c>)
 8010a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a26:	4b1a      	ldr	r3, [pc, #104]	@ (8010a90 <pvPortMalloc+0x18c>)
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8010a98 <pvPortMalloc+0x194>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d203      	bcs.n	8010a3a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a32:	4b17      	ldr	r3, [pc, #92]	@ (8010a90 <pvPortMalloc+0x18c>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a18      	ldr	r2, [pc, #96]	@ (8010a98 <pvPortMalloc+0x194>)
 8010a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3c:	685a      	ldr	r2, [r3, #4]
 8010a3e:	4b13      	ldr	r3, [pc, #76]	@ (8010a8c <pvPortMalloc+0x188>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	431a      	orrs	r2, r3
 8010a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010a4e:	4b13      	ldr	r3, [pc, #76]	@ (8010a9c <pvPortMalloc+0x198>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3301      	adds	r3, #1
 8010a54:	4a11      	ldr	r2, [pc, #68]	@ (8010a9c <pvPortMalloc+0x198>)
 8010a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a58:	f001 ff9e 	bl	8012998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	f003 0307 	and.w	r3, r3, #7
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00b      	beq.n	8010a7e <pvPortMalloc+0x17a>
	__asm volatile
 8010a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	60fb      	str	r3, [r7, #12]
}
 8010a78:	bf00      	nop
 8010a7a:	bf00      	nop
 8010a7c:	e7fd      	b.n	8010a7a <pvPortMalloc+0x176>
	return pvReturn;
 8010a7e:	69fb      	ldr	r3, [r7, #28]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3728      	adds	r7, #40	@ 0x28
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	240099e0 	.word	0x240099e0
 8010a8c:	240099f4 	.word	0x240099f4
 8010a90:	240099e4 	.word	0x240099e4
 8010a94:	240099d8 	.word	0x240099d8
 8010a98:	240099e8 	.word	0x240099e8
 8010a9c:	240099ec 	.word	0x240099ec

08010aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d04f      	beq.n	8010b52 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010ab2:	2308      	movs	r3, #8
 8010ab4:	425b      	negs	r3, r3
 8010ab6:	697a      	ldr	r2, [r7, #20]
 8010ab8:	4413      	add	r3, r2
 8010aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	685a      	ldr	r2, [r3, #4]
 8010ac4:	4b25      	ldr	r3, [pc, #148]	@ (8010b5c <vPortFree+0xbc>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4013      	ands	r3, r2
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10b      	bne.n	8010ae6 <vPortFree+0x46>
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	60fb      	str	r3, [r7, #12]
}
 8010ae0:	bf00      	nop
 8010ae2:	bf00      	nop
 8010ae4:	e7fd      	b.n	8010ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <vPortFree+0x66>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	60bb      	str	r3, [r7, #8]
}
 8010b00:	bf00      	nop
 8010b02:	bf00      	nop
 8010b04:	e7fd      	b.n	8010b02 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	685a      	ldr	r2, [r3, #4]
 8010b0a:	4b14      	ldr	r3, [pc, #80]	@ (8010b5c <vPortFree+0xbc>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d01e      	beq.n	8010b52 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d11a      	bne.n	8010b52 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	685a      	ldr	r2, [r3, #4]
 8010b20:	4b0e      	ldr	r3, [pc, #56]	@ (8010b5c <vPortFree+0xbc>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	43db      	mvns	r3, r3
 8010b26:	401a      	ands	r2, r3
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b2c:	f001 ff26 	bl	801297c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	685a      	ldr	r2, [r3, #4]
 8010b34:	4b0a      	ldr	r3, [pc, #40]	@ (8010b60 <vPortFree+0xc0>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4413      	add	r3, r2
 8010b3a:	4a09      	ldr	r2, [pc, #36]	@ (8010b60 <vPortFree+0xc0>)
 8010b3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b3e:	6938      	ldr	r0, [r7, #16]
 8010b40:	f000 f874 	bl	8010c2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010b44:	4b07      	ldr	r3, [pc, #28]	@ (8010b64 <vPortFree+0xc4>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	4a06      	ldr	r2, [pc, #24]	@ (8010b64 <vPortFree+0xc4>)
 8010b4c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010b4e:	f001 ff23 	bl	8012998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b52:	bf00      	nop
 8010b54:	3718      	adds	r7, #24
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	240099f4 	.word	0x240099f4
 8010b60:	240099e4 	.word	0x240099e4
 8010b64:	240099f0 	.word	0x240099f0

08010b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b6e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8010b72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b74:	4b27      	ldr	r3, [pc, #156]	@ (8010c14 <prvHeapInit+0xac>)
 8010b76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f003 0307 	and.w	r3, r3, #7
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d00c      	beq.n	8010b9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	3307      	adds	r3, #7
 8010b86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f023 0307 	bic.w	r3, r3, #7
 8010b8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	4a1f      	ldr	r2, [pc, #124]	@ (8010c14 <prvHeapInit+0xac>)
 8010b98:	4413      	add	r3, r2
 8010b9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8010c18 <prvHeapInit+0xb0>)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8010c18 <prvHeapInit+0xb0>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010bb4:	2208      	movs	r2, #8
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	1a9b      	subs	r3, r3, r2
 8010bba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f023 0307 	bic.w	r3, r3, #7
 8010bc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	4a15      	ldr	r2, [pc, #84]	@ (8010c1c <prvHeapInit+0xb4>)
 8010bc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010bca:	4b14      	ldr	r3, [pc, #80]	@ (8010c1c <prvHeapInit+0xb4>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010bd2:	4b12      	ldr	r3, [pc, #72]	@ (8010c1c <prvHeapInit+0xb4>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	1ad2      	subs	r2, r2, r3
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010be8:	4b0c      	ldr	r3, [pc, #48]	@ (8010c1c <prvHeapInit+0xb4>)
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8010c20 <prvHeapInit+0xb8>)
 8010bf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	4a09      	ldr	r2, [pc, #36]	@ (8010c24 <prvHeapInit+0xbc>)
 8010bfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c00:	4b09      	ldr	r3, [pc, #36]	@ (8010c28 <prvHeapInit+0xc0>)
 8010c02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010c06:	601a      	str	r2, [r3, #0]
}
 8010c08:	bf00      	nop
 8010c0a:	3714      	adds	r7, #20
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr
 8010c14:	240021d8 	.word	0x240021d8
 8010c18:	240099d8 	.word	0x240099d8
 8010c1c:	240099e0 	.word	0x240099e0
 8010c20:	240099e8 	.word	0x240099e8
 8010c24:	240099e4 	.word	0x240099e4
 8010c28:	240099f4 	.word	0x240099f4

08010c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	b085      	sub	sp, #20
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c34:	4b28      	ldr	r3, [pc, #160]	@ (8010cd8 <prvInsertBlockIntoFreeList+0xac>)
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	e002      	b.n	8010c40 <prvInsertBlockIntoFreeList+0x14>
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	60fb      	str	r3, [r7, #12]
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d8f7      	bhi.n	8010c3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	68ba      	ldr	r2, [r7, #8]
 8010c54:	4413      	add	r3, r2
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d108      	bne.n	8010c6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	685a      	ldr	r2, [r3, #4]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	441a      	add	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	441a      	add	r2, r3
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d118      	bne.n	8010cb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	4b15      	ldr	r3, [pc, #84]	@ (8010cdc <prvInsertBlockIntoFreeList+0xb0>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d00d      	beq.n	8010caa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	441a      	add	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	601a      	str	r2, [r3, #0]
 8010ca8:	e008      	b.n	8010cbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010caa:	4b0c      	ldr	r3, [pc, #48]	@ (8010cdc <prvInsertBlockIntoFreeList+0xb0>)
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	601a      	str	r2, [r3, #0]
 8010cb2:	e003      	b.n	8010cbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d002      	beq.n	8010cca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cca:	bf00      	nop
 8010ccc:	3714      	adds	r7, #20
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	240099d8 	.word	0x240099d8
 8010cdc:	240099e0 	.word	0x240099e0

08010ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f103 0208 	add.w	r2, r3, #8
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f103 0208 	add.w	r2, r3, #8
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f103 0208 	add.w	r2, r3, #8
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010d14:	bf00      	nop
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010d2e:	bf00      	nop
 8010d30:	370c      	adds	r7, #12
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d3a:	b480      	push	{r7}
 8010d3c:	b085      	sub	sp, #20
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
 8010d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	689a      	ldr	r2, [r3, #8]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	683a      	ldr	r2, [r7, #0]
 8010d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	1c5a      	adds	r2, r3, #1
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	601a      	str	r2, [r3, #0]
}
 8010d76:	bf00      	nop
 8010d78:	3714      	adds	r7, #20
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr

08010d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d82:	b480      	push	{r7}
 8010d84:	b085      	sub	sp, #20
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d98:	d103      	bne.n	8010da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	60fb      	str	r3, [r7, #12]
 8010da0:	e00c      	b.n	8010dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3308      	adds	r3, #8
 8010da6:	60fb      	str	r3, [r7, #12]
 8010da8:	e002      	b.n	8010db0 <vListInsert+0x2e>
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d2f6      	bcs.n	8010daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	685a      	ldr	r2, [r3, #4]
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	683a      	ldr	r2, [r7, #0]
 8010dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	68fa      	ldr	r2, [r7, #12]
 8010dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	1c5a      	adds	r2, r3, #1
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	601a      	str	r2, [r3, #0]
}
 8010de8:	bf00      	nop
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010df4:	b480      	push	{r7}
 8010df6:	b085      	sub	sp, #20
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	691b      	ldr	r3, [r3, #16]
 8010e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	6892      	ldr	r2, [r2, #8]
 8010e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	689b      	ldr	r3, [r3, #8]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	6852      	ldr	r2, [r2, #4]
 8010e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d103      	bne.n	8010e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	689a      	ldr	r2, [r3, #8]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	1e5a      	subs	r2, r3, #1
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3714      	adds	r7, #20
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	3b04      	subs	r3, #4
 8010e58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3b04      	subs	r3, #4
 8010e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	f023 0201 	bic.w	r2, r3, #1
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	3b04      	subs	r3, #4
 8010e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010e78:	4a0c      	ldr	r2, [pc, #48]	@ (8010eac <pxPortInitialiseStack+0x64>)
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	3b14      	subs	r3, #20
 8010e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	3b04      	subs	r3, #4
 8010e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f06f 0202 	mvn.w	r2, #2
 8010e96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	3b20      	subs	r3, #32
 8010e9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3714      	adds	r7, #20
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	08010eb1 	.word	0x08010eb1

08010eb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b085      	sub	sp, #20
 8010eb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010eba:	4b13      	ldr	r3, [pc, #76]	@ (8010f08 <prvTaskExitError+0x58>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec2:	d00b      	beq.n	8010edc <prvTaskExitError+0x2c>
	__asm volatile
 8010ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ec8:	f383 8811 	msr	BASEPRI, r3
 8010ecc:	f3bf 8f6f 	isb	sy
 8010ed0:	f3bf 8f4f 	dsb	sy
 8010ed4:	60fb      	str	r3, [r7, #12]
}
 8010ed6:	bf00      	nop
 8010ed8:	bf00      	nop
 8010eda:	e7fd      	b.n	8010ed8 <prvTaskExitError+0x28>
	__asm volatile
 8010edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee0:	f383 8811 	msr	BASEPRI, r3
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	f3bf 8f4f 	dsb	sy
 8010eec:	60bb      	str	r3, [r7, #8]
}
 8010eee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010ef0:	bf00      	nop
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d0fc      	beq.n	8010ef2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010ef8:	bf00      	nop
 8010efa:	bf00      	nop
 8010efc:	3714      	adds	r7, #20
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	24000044 	.word	0x24000044
 8010f0c:	00000000 	.word	0x00000000

08010f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010f10:	4b07      	ldr	r3, [pc, #28]	@ (8010f30 <pxCurrentTCBConst2>)
 8010f12:	6819      	ldr	r1, [r3, #0]
 8010f14:	6808      	ldr	r0, [r1, #0]
 8010f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1a:	f380 8809 	msr	PSP, r0
 8010f1e:	f3bf 8f6f 	isb	sy
 8010f22:	f04f 0000 	mov.w	r0, #0
 8010f26:	f380 8811 	msr	BASEPRI, r0
 8010f2a:	4770      	bx	lr
 8010f2c:	f3af 8000 	nop.w

08010f30 <pxCurrentTCBConst2>:
 8010f30:	24009a40 	.word	0x24009a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010f34:	bf00      	nop
 8010f36:	bf00      	nop

08010f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010f38:	4808      	ldr	r0, [pc, #32]	@ (8010f5c <prvPortStartFirstTask+0x24>)
 8010f3a:	6800      	ldr	r0, [r0, #0]
 8010f3c:	6800      	ldr	r0, [r0, #0]
 8010f3e:	f380 8808 	msr	MSP, r0
 8010f42:	f04f 0000 	mov.w	r0, #0
 8010f46:	f380 8814 	msr	CONTROL, r0
 8010f4a:	b662      	cpsie	i
 8010f4c:	b661      	cpsie	f
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	df00      	svc	0
 8010f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010f5a:	bf00      	nop
 8010f5c:	e000ed08 	.word	0xe000ed08

08010f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010f66:	4b47      	ldr	r3, [pc, #284]	@ (8011084 <xPortStartScheduler+0x124>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a47      	ldr	r2, [pc, #284]	@ (8011088 <xPortStartScheduler+0x128>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d10b      	bne.n	8010f88 <xPortStartScheduler+0x28>
	__asm volatile
 8010f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f74:	f383 8811 	msr	BASEPRI, r3
 8010f78:	f3bf 8f6f 	isb	sy
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	613b      	str	r3, [r7, #16]
}
 8010f82:	bf00      	nop
 8010f84:	bf00      	nop
 8010f86:	e7fd      	b.n	8010f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010f88:	4b3e      	ldr	r3, [pc, #248]	@ (8011084 <xPortStartScheduler+0x124>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	4a3f      	ldr	r2, [pc, #252]	@ (801108c <xPortStartScheduler+0x12c>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d10b      	bne.n	8010faa <xPortStartScheduler+0x4a>
	__asm volatile
 8010f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	60fb      	str	r3, [r7, #12]
}
 8010fa4:	bf00      	nop
 8010fa6:	bf00      	nop
 8010fa8:	e7fd      	b.n	8010fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010faa:	4b39      	ldr	r3, [pc, #228]	@ (8011090 <xPortStartScheduler+0x130>)
 8010fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	22ff      	movs	r2, #255	@ 0xff
 8010fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010fc4:	78fb      	ldrb	r3, [r7, #3]
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	4b31      	ldr	r3, [pc, #196]	@ (8011094 <xPortStartScheduler+0x134>)
 8010fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010fd2:	4b31      	ldr	r3, [pc, #196]	@ (8011098 <xPortStartScheduler+0x138>)
 8010fd4:	2207      	movs	r2, #7
 8010fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fd8:	e009      	b.n	8010fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010fda:	4b2f      	ldr	r3, [pc, #188]	@ (8011098 <xPortStartScheduler+0x138>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8011098 <xPortStartScheduler+0x138>)
 8010fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010fe4:	78fb      	ldrb	r3, [r7, #3]
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fee:	78fb      	ldrb	r3, [r7, #3]
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ff6:	2b80      	cmp	r3, #128	@ 0x80
 8010ff8:	d0ef      	beq.n	8010fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ffa:	4b27      	ldr	r3, [pc, #156]	@ (8011098 <xPortStartScheduler+0x138>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f1c3 0307 	rsb	r3, r3, #7
 8011002:	2b04      	cmp	r3, #4
 8011004:	d00b      	beq.n	801101e <xPortStartScheduler+0xbe>
	__asm volatile
 8011006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801100a:	f383 8811 	msr	BASEPRI, r3
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	f3bf 8f4f 	dsb	sy
 8011016:	60bb      	str	r3, [r7, #8]
}
 8011018:	bf00      	nop
 801101a:	bf00      	nop
 801101c:	e7fd      	b.n	801101a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801101e:	4b1e      	ldr	r3, [pc, #120]	@ (8011098 <xPortStartScheduler+0x138>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	021b      	lsls	r3, r3, #8
 8011024:	4a1c      	ldr	r2, [pc, #112]	@ (8011098 <xPortStartScheduler+0x138>)
 8011026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011028:	4b1b      	ldr	r3, [pc, #108]	@ (8011098 <xPortStartScheduler+0x138>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011030:	4a19      	ldr	r2, [pc, #100]	@ (8011098 <xPortStartScheduler+0x138>)
 8011032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	b2da      	uxtb	r2, r3
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801103c:	4b17      	ldr	r3, [pc, #92]	@ (801109c <xPortStartScheduler+0x13c>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4a16      	ldr	r2, [pc, #88]	@ (801109c <xPortStartScheduler+0x13c>)
 8011042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011048:	4b14      	ldr	r3, [pc, #80]	@ (801109c <xPortStartScheduler+0x13c>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	4a13      	ldr	r2, [pc, #76]	@ (801109c <xPortStartScheduler+0x13c>)
 801104e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011054:	f000 f8da 	bl	801120c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011058:	4b11      	ldr	r3, [pc, #68]	@ (80110a0 <xPortStartScheduler+0x140>)
 801105a:	2200      	movs	r2, #0
 801105c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801105e:	f000 f8f9 	bl	8011254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011062:	4b10      	ldr	r3, [pc, #64]	@ (80110a4 <xPortStartScheduler+0x144>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4a0f      	ldr	r2, [pc, #60]	@ (80110a4 <xPortStartScheduler+0x144>)
 8011068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801106c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801106e:	f7ff ff63 	bl	8010f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011072:	f001 fe0b 	bl	8012c8c <vTaskSwitchContext>
	prvTaskExitError();
 8011076:	f7ff ff1b 	bl	8010eb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801107a:	2300      	movs	r3, #0
}
 801107c:	4618      	mov	r0, r3
 801107e:	3718      	adds	r7, #24
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}
 8011084:	e000ed00 	.word	0xe000ed00
 8011088:	410fc271 	.word	0x410fc271
 801108c:	410fc270 	.word	0x410fc270
 8011090:	e000e400 	.word	0xe000e400
 8011094:	240099f8 	.word	0x240099f8
 8011098:	240099fc 	.word	0x240099fc
 801109c:	e000ed20 	.word	0xe000ed20
 80110a0:	24000044 	.word	0x24000044
 80110a4:	e000ef34 	.word	0xe000ef34

080110a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
	__asm volatile
 80110ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	607b      	str	r3, [r7, #4]
}
 80110c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80110c2:	4b10      	ldr	r3, [pc, #64]	@ (8011104 <vPortEnterCritical+0x5c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	3301      	adds	r3, #1
 80110c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011104 <vPortEnterCritical+0x5c>)
 80110ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80110cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011104 <vPortEnterCritical+0x5c>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d110      	bne.n	80110f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80110d4:	4b0c      	ldr	r3, [pc, #48]	@ (8011108 <vPortEnterCritical+0x60>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00b      	beq.n	80110f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	603b      	str	r3, [r7, #0]
}
 80110f0:	bf00      	nop
 80110f2:	bf00      	nop
 80110f4:	e7fd      	b.n	80110f2 <vPortEnterCritical+0x4a>
	}
}
 80110f6:	bf00      	nop
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	24000044 	.word	0x24000044
 8011108:	e000ed04 	.word	0xe000ed04

0801110c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011112:	4b12      	ldr	r3, [pc, #72]	@ (801115c <vPortExitCritical+0x50>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10b      	bne.n	8011132 <vPortExitCritical+0x26>
	__asm volatile
 801111a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801111e:	f383 8811 	msr	BASEPRI, r3
 8011122:	f3bf 8f6f 	isb	sy
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	607b      	str	r3, [r7, #4]
}
 801112c:	bf00      	nop
 801112e:	bf00      	nop
 8011130:	e7fd      	b.n	801112e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011132:	4b0a      	ldr	r3, [pc, #40]	@ (801115c <vPortExitCritical+0x50>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	3b01      	subs	r3, #1
 8011138:	4a08      	ldr	r2, [pc, #32]	@ (801115c <vPortExitCritical+0x50>)
 801113a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801113c:	4b07      	ldr	r3, [pc, #28]	@ (801115c <vPortExitCritical+0x50>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d105      	bne.n	8011150 <vPortExitCritical+0x44>
 8011144:	2300      	movs	r3, #0
 8011146:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801114e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011150:	bf00      	nop
 8011152:	370c      	adds	r7, #12
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr
 801115c:	24000044 	.word	0x24000044

08011160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011160:	f3ef 8009 	mrs	r0, PSP
 8011164:	f3bf 8f6f 	isb	sy
 8011168:	4b15      	ldr	r3, [pc, #84]	@ (80111c0 <pxCurrentTCBConst>)
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	f01e 0f10 	tst.w	lr, #16
 8011170:	bf08      	it	eq
 8011172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801117a:	6010      	str	r0, [r2, #0]
 801117c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011184:	f380 8811 	msr	BASEPRI, r0
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f001 fd7c 	bl	8012c8c <vTaskSwitchContext>
 8011194:	f04f 0000 	mov.w	r0, #0
 8011198:	f380 8811 	msr	BASEPRI, r0
 801119c:	bc09      	pop	{r0, r3}
 801119e:	6819      	ldr	r1, [r3, #0]
 80111a0:	6808      	ldr	r0, [r1, #0]
 80111a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a6:	f01e 0f10 	tst.w	lr, #16
 80111aa:	bf08      	it	eq
 80111ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80111b0:	f380 8809 	msr	PSP, r0
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	f3af 8000 	nop.w

080111c0 <pxCurrentTCBConst>:
 80111c0:	24009a40 	.word	0x24009a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80111c4:	bf00      	nop
 80111c6:	bf00      	nop

080111c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	607b      	str	r3, [r7, #4]
}
 80111e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80111e2:	f001 fc99 	bl	8012b18 <xTaskIncrementTick>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d003      	beq.n	80111f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80111ec:	4b06      	ldr	r3, [pc, #24]	@ (8011208 <xPortSysTickHandler+0x40>)
 80111ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111f2:	601a      	str	r2, [r3, #0]
 80111f4:	2300      	movs	r3, #0
 80111f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	f383 8811 	msr	BASEPRI, r3
}
 80111fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	e000ed04 	.word	0xe000ed04

0801120c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801120c:	b480      	push	{r7}
 801120e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011210:	4b0b      	ldr	r3, [pc, #44]	@ (8011240 <vPortSetupTimerInterrupt+0x34>)
 8011212:	2200      	movs	r2, #0
 8011214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011216:	4b0b      	ldr	r3, [pc, #44]	@ (8011244 <vPortSetupTimerInterrupt+0x38>)
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801121c:	4b0a      	ldr	r3, [pc, #40]	@ (8011248 <vPortSetupTimerInterrupt+0x3c>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a0a      	ldr	r2, [pc, #40]	@ (801124c <vPortSetupTimerInterrupt+0x40>)
 8011222:	fba2 2303 	umull	r2, r3, r2, r3
 8011226:	099b      	lsrs	r3, r3, #6
 8011228:	4a09      	ldr	r2, [pc, #36]	@ (8011250 <vPortSetupTimerInterrupt+0x44>)
 801122a:	3b01      	subs	r3, #1
 801122c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801122e:	4b04      	ldr	r3, [pc, #16]	@ (8011240 <vPortSetupTimerInterrupt+0x34>)
 8011230:	2207      	movs	r2, #7
 8011232:	601a      	str	r2, [r3, #0]
}
 8011234:	bf00      	nop
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop
 8011240:	e000e010 	.word	0xe000e010
 8011244:	e000e018 	.word	0xe000e018
 8011248:	24000000 	.word	0x24000000
 801124c:	10624dd3 	.word	0x10624dd3
 8011250:	e000e014 	.word	0xe000e014

08011254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011264 <vPortEnableVFP+0x10>
 8011258:	6801      	ldr	r1, [r0, #0]
 801125a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801125e:	6001      	str	r1, [r0, #0]
 8011260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011262:	bf00      	nop
 8011264:	e000ed88 	.word	0xe000ed88

08011268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011268:	b480      	push	{r7}
 801126a:	b085      	sub	sp, #20
 801126c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801126e:	f3ef 8305 	mrs	r3, IPSR
 8011272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2b0f      	cmp	r3, #15
 8011278:	d915      	bls.n	80112a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801127a:	4a18      	ldr	r2, [pc, #96]	@ (80112dc <vPortValidateInterruptPriority+0x74>)
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	4413      	add	r3, r2
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011284:	4b16      	ldr	r3, [pc, #88]	@ (80112e0 <vPortValidateInterruptPriority+0x78>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	7afa      	ldrb	r2, [r7, #11]
 801128a:	429a      	cmp	r2, r3
 801128c:	d20b      	bcs.n	80112a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801128e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011292:	f383 8811 	msr	BASEPRI, r3
 8011296:	f3bf 8f6f 	isb	sy
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	607b      	str	r3, [r7, #4]
}
 80112a0:	bf00      	nop
 80112a2:	bf00      	nop
 80112a4:	e7fd      	b.n	80112a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80112a6:	4b0f      	ldr	r3, [pc, #60]	@ (80112e4 <vPortValidateInterruptPriority+0x7c>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80112ae:	4b0e      	ldr	r3, [pc, #56]	@ (80112e8 <vPortValidateInterruptPriority+0x80>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d90b      	bls.n	80112ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80112b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ba:	f383 8811 	msr	BASEPRI, r3
 80112be:	f3bf 8f6f 	isb	sy
 80112c2:	f3bf 8f4f 	dsb	sy
 80112c6:	603b      	str	r3, [r7, #0]
}
 80112c8:	bf00      	nop
 80112ca:	bf00      	nop
 80112cc:	e7fd      	b.n	80112ca <vPortValidateInterruptPriority+0x62>
	}
 80112ce:	bf00      	nop
 80112d0:	3714      	adds	r7, #20
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	e000e3f0 	.word	0xe000e3f0
 80112e0:	240099f8 	.word	0x240099f8
 80112e4:	e000ed0c 	.word	0xe000ed0c
 80112e8:	240099fc 	.word	0x240099fc

080112ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10b      	bne.n	8011318 <xQueueGenericReset+0x2c>
	__asm volatile
 8011300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011304:	f383 8811 	msr	BASEPRI, r3
 8011308:	f3bf 8f6f 	isb	sy
 801130c:	f3bf 8f4f 	dsb	sy
 8011310:	60bb      	str	r3, [r7, #8]
}
 8011312:	bf00      	nop
 8011314:	bf00      	nop
 8011316:	e7fd      	b.n	8011314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011318:	f7ff fec6 	bl	80110a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011324:	68f9      	ldr	r1, [r7, #12]
 8011326:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011328:	fb01 f303 	mul.w	r3, r1, r3
 801132c:	441a      	add	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2200      	movs	r2, #0
 8011336:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011348:	3b01      	subs	r3, #1
 801134a:	68f9      	ldr	r1, [r7, #12]
 801134c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801134e:	fb01 f303 	mul.w	r3, r1, r3
 8011352:	441a      	add	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	22ff      	movs	r2, #255	@ 0xff
 801135c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	22ff      	movs	r2, #255	@ 0xff
 8011364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d114      	bne.n	8011398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d01a      	beq.n	80113ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	3310      	adds	r3, #16
 801137a:	4618      	mov	r0, r3
 801137c:	f001 fd3e 	bl	8012dfc <xTaskRemoveFromEventList>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d012      	beq.n	80113ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011386:	4b0d      	ldr	r3, [pc, #52]	@ (80113bc <xQueueGenericReset+0xd0>)
 8011388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801138c:	601a      	str	r2, [r3, #0]
 801138e:	f3bf 8f4f 	dsb	sy
 8011392:	f3bf 8f6f 	isb	sy
 8011396:	e009      	b.n	80113ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	3310      	adds	r3, #16
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fc9f 	bl	8010ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	3324      	adds	r3, #36	@ 0x24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fc9a 	bl	8010ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80113ac:	f7ff feae 	bl	801110c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80113b0:	2301      	movs	r3, #1
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	e000ed04 	.word	0xe000ed04

080113c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b08e      	sub	sp, #56	@ 0x38
 80113c4:	af02      	add	r7, sp, #8
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10b      	bne.n	80113ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80113d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d8:	f383 8811 	msr	BASEPRI, r3
 80113dc:	f3bf 8f6f 	isb	sy
 80113e0:	f3bf 8f4f 	dsb	sy
 80113e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80113e6:	bf00      	nop
 80113e8:	bf00      	nop
 80113ea:	e7fd      	b.n	80113e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d10b      	bne.n	801140a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80113f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011404:	bf00      	nop
 8011406:	bf00      	nop
 8011408:	e7fd      	b.n	8011406 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d002      	beq.n	8011416 <xQueueGenericCreateStatic+0x56>
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <xQueueGenericCreateStatic+0x5a>
 8011416:	2301      	movs	r3, #1
 8011418:	e000      	b.n	801141c <xQueueGenericCreateStatic+0x5c>
 801141a:	2300      	movs	r3, #0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d10b      	bne.n	8011438 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8011420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	623b      	str	r3, [r7, #32]
}
 8011432:	bf00      	nop
 8011434:	bf00      	nop
 8011436:	e7fd      	b.n	8011434 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d102      	bne.n	8011444 <xQueueGenericCreateStatic+0x84>
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d101      	bne.n	8011448 <xQueueGenericCreateStatic+0x88>
 8011444:	2301      	movs	r3, #1
 8011446:	e000      	b.n	801144a <xQueueGenericCreateStatic+0x8a>
 8011448:	2300      	movs	r3, #0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d10b      	bne.n	8011466 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801144e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	61fb      	str	r3, [r7, #28]
}
 8011460:	bf00      	nop
 8011462:	bf00      	nop
 8011464:	e7fd      	b.n	8011462 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011466:	2350      	movs	r3, #80	@ 0x50
 8011468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b50      	cmp	r3, #80	@ 0x50
 801146e:	d00b      	beq.n	8011488 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8011470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	61bb      	str	r3, [r7, #24]
}
 8011482:	bf00      	nop
 8011484:	bf00      	nop
 8011486:	e7fd      	b.n	8011484 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801148e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00d      	beq.n	80114b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011496:	2201      	movs	r2, #1
 8011498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801149c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	4613      	mov	r3, r2
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	68b9      	ldr	r1, [r7, #8]
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f000 f840 	bl	8011530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80114b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3730      	adds	r7, #48	@ 0x30
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b08a      	sub	sp, #40	@ 0x28
 80114be:	af02      	add	r7, sp, #8
 80114c0:	60f8      	str	r0, [r7, #12]
 80114c2:	60b9      	str	r1, [r7, #8]
 80114c4:	4613      	mov	r3, r2
 80114c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d10b      	bne.n	80114e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80114ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d2:	f383 8811 	msr	BASEPRI, r3
 80114d6:	f3bf 8f6f 	isb	sy
 80114da:	f3bf 8f4f 	dsb	sy
 80114de:	613b      	str	r3, [r7, #16]
}
 80114e0:	bf00      	nop
 80114e2:	bf00      	nop
 80114e4:	e7fd      	b.n	80114e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	fb02 f303 	mul.w	r3, r2, r3
 80114ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	3350      	adds	r3, #80	@ 0x50
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff fa05 	bl	8010904 <pvPortMalloc>
 80114fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d011      	beq.n	8011526 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	3350      	adds	r3, #80	@ 0x50
 801150a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011514:	79fa      	ldrb	r2, [r7, #7]
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	4613      	mov	r3, r2
 801151c:	697a      	ldr	r2, [r7, #20]
 801151e:	68b9      	ldr	r1, [r7, #8]
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f000 f805 	bl	8011530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011526:	69bb      	ldr	r3, [r7, #24]
	}
 8011528:	4618      	mov	r0, r3
 801152a:	3720      	adds	r7, #32
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d103      	bne.n	801154c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	69ba      	ldr	r2, [r7, #24]
 8011548:	601a      	str	r2, [r3, #0]
 801154a:	e002      	b.n	8011552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	68fa      	ldr	r2, [r7, #12]
 8011556:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801155e:	2101      	movs	r1, #1
 8011560:	69b8      	ldr	r0, [r7, #24]
 8011562:	f7ff fec3 	bl	80112ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	78fa      	ldrb	r2, [r7, #3]
 801156a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801156e:	bf00      	nop
 8011570:	3710      	adds	r7, #16
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011576:	b580      	push	{r7, lr}
 8011578:	b082      	sub	sp, #8
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d00e      	beq.n	80115a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011596:	2300      	movs	r3, #0
 8011598:	2200      	movs	r2, #0
 801159a:	2100      	movs	r1, #0
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f000 f911 	bl	80117c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80115a2:	bf00      	nop
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b086      	sub	sp, #24
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	4603      	mov	r3, r0
 80115b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80115b4:	2301      	movs	r3, #1
 80115b6:	617b      	str	r3, [r7, #20]
 80115b8:	2300      	movs	r3, #0
 80115ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80115bc:	79fb      	ldrb	r3, [r7, #7]
 80115be:	461a      	mov	r2, r3
 80115c0:	6939      	ldr	r1, [r7, #16]
 80115c2:	6978      	ldr	r0, [r7, #20]
 80115c4:	f7ff ff79 	bl	80114ba <xQueueGenericCreate>
 80115c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7ff ffd3 	bl	8011576 <prvInitialiseMutex>

		return xNewQueue;
 80115d0:	68fb      	ldr	r3, [r7, #12]
	}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3718      	adds	r7, #24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b088      	sub	sp, #32
 80115de:	af02      	add	r7, sp, #8
 80115e0:	4603      	mov	r3, r0
 80115e2:	6039      	str	r1, [r7, #0]
 80115e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80115e6:	2301      	movs	r3, #1
 80115e8:	617b      	str	r3, [r7, #20]
 80115ea:	2300      	movs	r3, #0
 80115ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80115ee:	79fb      	ldrb	r3, [r7, #7]
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2200      	movs	r2, #0
 80115f6:	6939      	ldr	r1, [r7, #16]
 80115f8:	6978      	ldr	r0, [r7, #20]
 80115fa:	f7ff fee1 	bl	80113c0 <xQueueGenericCreateStatic>
 80115fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f7ff ffb8 	bl	8011576 <prvInitialiseMutex>

		return xNewQueue;
 8011606:	68fb      	ldr	r3, [r7, #12]
	}
 8011608:	4618      	mov	r0, r3
 801160a:	3718      	adds	r7, #24
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011610:	b590      	push	{r4, r7, lr}
 8011612:	b087      	sub	sp, #28
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10b      	bne.n	801163a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8011622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011626:	f383 8811 	msr	BASEPRI, r3
 801162a:	f3bf 8f6f 	isb	sy
 801162e:	f3bf 8f4f 	dsb	sy
 8011632:	60fb      	str	r3, [r7, #12]
}
 8011634:	bf00      	nop
 8011636:	bf00      	nop
 8011638:	e7fd      	b.n	8011636 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	689c      	ldr	r4, [r3, #8]
 801163e:	f001 fda3 	bl	8013188 <xTaskGetCurrentTaskHandle>
 8011642:	4603      	mov	r3, r0
 8011644:	429c      	cmp	r4, r3
 8011646:	d111      	bne.n	801166c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	1e5a      	subs	r2, r3, #1
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d105      	bne.n	8011666 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801165a:	2300      	movs	r3, #0
 801165c:	2200      	movs	r2, #0
 801165e:	2100      	movs	r1, #0
 8011660:	6938      	ldr	r0, [r7, #16]
 8011662:	f000 f8af 	bl	80117c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011666:	2301      	movs	r3, #1
 8011668:	617b      	str	r3, [r7, #20]
 801166a:	e001      	b.n	8011670 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801166c:	2300      	movs	r3, #0
 801166e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011670:	697b      	ldr	r3, [r7, #20]
	}
 8011672:	4618      	mov	r0, r3
 8011674:	371c      	adds	r7, #28
 8011676:	46bd      	mov	sp, r7
 8011678:	bd90      	pop	{r4, r7, pc}

0801167a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801167a:	b590      	push	{r4, r7, lr}
 801167c:	b087      	sub	sp, #28
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
 8011682:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d10b      	bne.n	80116a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 801168e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011692:	f383 8811 	msr	BASEPRI, r3
 8011696:	f3bf 8f6f 	isb	sy
 801169a:	f3bf 8f4f 	dsb	sy
 801169e:	60fb      	str	r3, [r7, #12]
}
 80116a0:	bf00      	nop
 80116a2:	bf00      	nop
 80116a4:	e7fd      	b.n	80116a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	689c      	ldr	r4, [r3, #8]
 80116aa:	f001 fd6d 	bl	8013188 <xTaskGetCurrentTaskHandle>
 80116ae:	4603      	mov	r3, r0
 80116b0:	429c      	cmp	r4, r3
 80116b2:	d107      	bne.n	80116c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80116be:	2301      	movs	r3, #1
 80116c0:	617b      	str	r3, [r7, #20]
 80116c2:	e00c      	b.n	80116de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80116c4:	6839      	ldr	r1, [r7, #0]
 80116c6:	6938      	ldr	r0, [r7, #16]
 80116c8:	f000 fb8e 	bl	8011de8 <xQueueSemaphoreTake>
 80116cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d004      	beq.n	80116de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80116de:	697b      	ldr	r3, [r7, #20]
	}
 80116e0:	4618      	mov	r0, r3
 80116e2:	371c      	adds	r7, #28
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd90      	pop	{r4, r7, pc}

080116e8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b08a      	sub	sp, #40	@ 0x28
 80116ec:	af02      	add	r7, sp, #8
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d10b      	bne.n	8011712 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80116fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fe:	f383 8811 	msr	BASEPRI, r3
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	f3bf 8f4f 	dsb	sy
 801170a:	61bb      	str	r3, [r7, #24]
}
 801170c:	bf00      	nop
 801170e:	bf00      	nop
 8011710:	e7fd      	b.n	801170e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011712:	68ba      	ldr	r2, [r7, #8]
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	429a      	cmp	r2, r3
 8011718:	d90b      	bls.n	8011732 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 801171a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801171e:	f383 8811 	msr	BASEPRI, r3
 8011722:	f3bf 8f6f 	isb	sy
 8011726:	f3bf 8f4f 	dsb	sy
 801172a:	617b      	str	r3, [r7, #20]
}
 801172c:	bf00      	nop
 801172e:	bf00      	nop
 8011730:	e7fd      	b.n	801172e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011732:	2302      	movs	r3, #2
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2200      	movs	r2, #0
 801173a:	2100      	movs	r1, #0
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7ff fe3f 	bl	80113c0 <xQueueGenericCreateStatic>
 8011742:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d002      	beq.n	8011750 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	68ba      	ldr	r2, [r7, #8]
 801174e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011750:	69fb      	ldr	r3, [r7, #28]
	}
 8011752:	4618      	mov	r0, r3
 8011754:	3720      	adds	r7, #32
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801175a:	b580      	push	{r7, lr}
 801175c:	b086      	sub	sp, #24
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d10b      	bne.n	8011782 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 801176a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801176e:	f383 8811 	msr	BASEPRI, r3
 8011772:	f3bf 8f6f 	isb	sy
 8011776:	f3bf 8f4f 	dsb	sy
 801177a:	613b      	str	r3, [r7, #16]
}
 801177c:	bf00      	nop
 801177e:	bf00      	nop
 8011780:	e7fd      	b.n	801177e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	429a      	cmp	r2, r3
 8011788:	d90b      	bls.n	80117a2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 801178a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801178e:	f383 8811 	msr	BASEPRI, r3
 8011792:	f3bf 8f6f 	isb	sy
 8011796:	f3bf 8f4f 	dsb	sy
 801179a:	60fb      	str	r3, [r7, #12]
}
 801179c:	bf00      	nop
 801179e:	bf00      	nop
 80117a0:	e7fd      	b.n	801179e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80117a2:	2202      	movs	r2, #2
 80117a4:	2100      	movs	r1, #0
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff fe87 	bl	80114ba <xQueueGenericCreate>
 80117ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d002      	beq.n	80117ba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80117ba:	697b      	ldr	r3, [r7, #20]
	}
 80117bc:	4618      	mov	r0, r3
 80117be:	3718      	adds	r7, #24
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b08e      	sub	sp, #56	@ 0x38
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80117d2:	2300      	movs	r3, #0
 80117d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80117da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d10b      	bne.n	80117f8 <xQueueGenericSend+0x34>
	__asm volatile
 80117e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e4:	f383 8811 	msr	BASEPRI, r3
 80117e8:	f3bf 8f6f 	isb	sy
 80117ec:	f3bf 8f4f 	dsb	sy
 80117f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80117f2:	bf00      	nop
 80117f4:	bf00      	nop
 80117f6:	e7fd      	b.n	80117f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d103      	bne.n	8011806 <xQueueGenericSend+0x42>
 80117fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011802:	2b00      	cmp	r3, #0
 8011804:	d101      	bne.n	801180a <xQueueGenericSend+0x46>
 8011806:	2301      	movs	r3, #1
 8011808:	e000      	b.n	801180c <xQueueGenericSend+0x48>
 801180a:	2300      	movs	r3, #0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d10b      	bne.n	8011828 <xQueueGenericSend+0x64>
	__asm volatile
 8011810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011814:	f383 8811 	msr	BASEPRI, r3
 8011818:	f3bf 8f6f 	isb	sy
 801181c:	f3bf 8f4f 	dsb	sy
 8011820:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011822:	bf00      	nop
 8011824:	bf00      	nop
 8011826:	e7fd      	b.n	8011824 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2b02      	cmp	r3, #2
 801182c:	d103      	bne.n	8011836 <xQueueGenericSend+0x72>
 801182e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011832:	2b01      	cmp	r3, #1
 8011834:	d101      	bne.n	801183a <xQueueGenericSend+0x76>
 8011836:	2301      	movs	r3, #1
 8011838:	e000      	b.n	801183c <xQueueGenericSend+0x78>
 801183a:	2300      	movs	r3, #0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d10b      	bne.n	8011858 <xQueueGenericSend+0x94>
	__asm volatile
 8011840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	623b      	str	r3, [r7, #32]
}
 8011852:	bf00      	nop
 8011854:	bf00      	nop
 8011856:	e7fd      	b.n	8011854 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011858:	f001 fca6 	bl	80131a8 <xTaskGetSchedulerState>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d102      	bne.n	8011868 <xQueueGenericSend+0xa4>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d101      	bne.n	801186c <xQueueGenericSend+0xa8>
 8011868:	2301      	movs	r3, #1
 801186a:	e000      	b.n	801186e <xQueueGenericSend+0xaa>
 801186c:	2300      	movs	r3, #0
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10b      	bne.n	801188a <xQueueGenericSend+0xc6>
	__asm volatile
 8011872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011876:	f383 8811 	msr	BASEPRI, r3
 801187a:	f3bf 8f6f 	isb	sy
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	61fb      	str	r3, [r7, #28]
}
 8011884:	bf00      	nop
 8011886:	bf00      	nop
 8011888:	e7fd      	b.n	8011886 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801188a:	f7ff fc0d 	bl	80110a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801188e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011896:	429a      	cmp	r2, r3
 8011898:	d302      	bcc.n	80118a0 <xQueueGenericSend+0xdc>
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	2b02      	cmp	r3, #2
 801189e:	d129      	bne.n	80118f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	68b9      	ldr	r1, [r7, #8]
 80118a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118a6:	f000 fc6d 	bl	8012184 <prvCopyDataToQueue>
 80118aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d010      	beq.n	80118d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b6:	3324      	adds	r3, #36	@ 0x24
 80118b8:	4618      	mov	r0, r3
 80118ba:	f001 fa9f 	bl	8012dfc <xTaskRemoveFromEventList>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d013      	beq.n	80118ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80118c4:	4b3f      	ldr	r3, [pc, #252]	@ (80119c4 <xQueueGenericSend+0x200>)
 80118c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	f3bf 8f4f 	dsb	sy
 80118d0:	f3bf 8f6f 	isb	sy
 80118d4:	e00a      	b.n	80118ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80118d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d007      	beq.n	80118ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80118dc:	4b39      	ldr	r3, [pc, #228]	@ (80119c4 <xQueueGenericSend+0x200>)
 80118de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118e2:	601a      	str	r2, [r3, #0]
 80118e4:	f3bf 8f4f 	dsb	sy
 80118e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80118ec:	f7ff fc0e 	bl	801110c <vPortExitCritical>
				return pdPASS;
 80118f0:	2301      	movs	r3, #1
 80118f2:	e063      	b.n	80119bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d103      	bne.n	8011902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80118fa:	f7ff fc07 	bl	801110c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80118fe:	2300      	movs	r3, #0
 8011900:	e05c      	b.n	80119bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011904:	2b00      	cmp	r3, #0
 8011906:	d106      	bne.n	8011916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011908:	f107 0314 	add.w	r3, r7, #20
 801190c:	4618      	mov	r0, r3
 801190e:	f001 fad9 	bl	8012ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011912:	2301      	movs	r3, #1
 8011914:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011916:	f7ff fbf9 	bl	801110c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801191a:	f001 f82f 	bl	801297c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801191e:	f7ff fbc3 	bl	80110a8 <vPortEnterCritical>
 8011922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011928:	b25b      	sxtb	r3, r3
 801192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801192e:	d103      	bne.n	8011938 <xQueueGenericSend+0x174>
 8011930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011932:	2200      	movs	r2, #0
 8011934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801193a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801193e:	b25b      	sxtb	r3, r3
 8011940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011944:	d103      	bne.n	801194e <xQueueGenericSend+0x18a>
 8011946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011948:	2200      	movs	r2, #0
 801194a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801194e:	f7ff fbdd 	bl	801110c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011952:	1d3a      	adds	r2, r7, #4
 8011954:	f107 0314 	add.w	r3, r7, #20
 8011958:	4611      	mov	r1, r2
 801195a:	4618      	mov	r0, r3
 801195c:	f001 fac8 	bl	8012ef0 <xTaskCheckForTimeOut>
 8011960:	4603      	mov	r3, r0
 8011962:	2b00      	cmp	r3, #0
 8011964:	d124      	bne.n	80119b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011968:	f000 fd04 	bl	8012374 <prvIsQueueFull>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d018      	beq.n	80119a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011974:	3310      	adds	r3, #16
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	4611      	mov	r1, r2
 801197a:	4618      	mov	r0, r3
 801197c:	f001 f9ec 	bl	8012d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011982:	f000 fc8f 	bl	80122a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011986:	f001 f807 	bl	8012998 <xTaskResumeAll>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	f47f af7c 	bne.w	801188a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011992:	4b0c      	ldr	r3, [pc, #48]	@ (80119c4 <xQueueGenericSend+0x200>)
 8011994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011998:	601a      	str	r2, [r3, #0]
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	f3bf 8f6f 	isb	sy
 80119a2:	e772      	b.n	801188a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80119a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119a6:	f000 fc7d 	bl	80122a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119aa:	f000 fff5 	bl	8012998 <xTaskResumeAll>
 80119ae:	e76c      	b.n	801188a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80119b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119b2:	f000 fc77 	bl	80122a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80119b6:	f000 ffef 	bl	8012998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80119ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3738      	adds	r7, #56	@ 0x38
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	e000ed04 	.word	0xe000ed04

080119c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b090      	sub	sp, #64	@ 0x40
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
 80119d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80119da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d10b      	bne.n	80119f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80119e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e4:	f383 8811 	msr	BASEPRI, r3
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	f3bf 8f4f 	dsb	sy
 80119f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80119f2:	bf00      	nop
 80119f4:	bf00      	nop
 80119f6:	e7fd      	b.n	80119f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d103      	bne.n	8011a06 <xQueueGenericSendFromISR+0x3e>
 80119fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d101      	bne.n	8011a0a <xQueueGenericSendFromISR+0x42>
 8011a06:	2301      	movs	r3, #1
 8011a08:	e000      	b.n	8011a0c <xQueueGenericSendFromISR+0x44>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d10b      	bne.n	8011a28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8011a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011a22:	bf00      	nop
 8011a24:	bf00      	nop
 8011a26:	e7fd      	b.n	8011a24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d103      	bne.n	8011a36 <xQueueGenericSendFromISR+0x6e>
 8011a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d101      	bne.n	8011a3a <xQueueGenericSendFromISR+0x72>
 8011a36:	2301      	movs	r3, #1
 8011a38:	e000      	b.n	8011a3c <xQueueGenericSendFromISR+0x74>
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d10b      	bne.n	8011a58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a44:	f383 8811 	msr	BASEPRI, r3
 8011a48:	f3bf 8f6f 	isb	sy
 8011a4c:	f3bf 8f4f 	dsb	sy
 8011a50:	623b      	str	r3, [r7, #32]
}
 8011a52:	bf00      	nop
 8011a54:	bf00      	nop
 8011a56:	e7fd      	b.n	8011a54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a58:	f7ff fc06 	bl	8011268 <vPortValidateInterruptPriority>
	__asm volatile
 8011a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8011a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a64:	f383 8811 	msr	BASEPRI, r3
 8011a68:	f3bf 8f6f 	isb	sy
 8011a6c:	f3bf 8f4f 	dsb	sy
 8011a70:	61fa      	str	r2, [r7, #28]
 8011a72:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8011a74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d302      	bcc.n	8011a8a <xQueueGenericSendFromISR+0xc2>
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	2b02      	cmp	r3, #2
 8011a88:	d12f      	bne.n	8011aea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	68b9      	ldr	r1, [r7, #8]
 8011a9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011aa0:	f000 fb70 	bl	8012184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011aa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8011aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aac:	d112      	bne.n	8011ad4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d016      	beq.n	8011ae4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab8:	3324      	adds	r3, #36	@ 0x24
 8011aba:	4618      	mov	r0, r3
 8011abc:	f001 f99e 	bl	8012dfc <xTaskRemoveFromEventList>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00e      	beq.n	8011ae4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d00b      	beq.n	8011ae4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	e007      	b.n	8011ae4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011ad8:	3301      	adds	r3, #1
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	b25a      	sxtb	r2, r3
 8011ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8011ae8:	e001      	b.n	8011aee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011aea:	2300      	movs	r3, #0
 8011aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011af0:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	f383 8811 	msr	BASEPRI, r3
}
 8011af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3740      	adds	r7, #64	@ 0x40
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08e      	sub	sp, #56	@ 0x38
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10b      	bne.n	8011b30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1c:	f383 8811 	msr	BASEPRI, r3
 8011b20:	f3bf 8f6f 	isb	sy
 8011b24:	f3bf 8f4f 	dsb	sy
 8011b28:	623b      	str	r3, [r7, #32]
}
 8011b2a:	bf00      	nop
 8011b2c:	bf00      	nop
 8011b2e:	e7fd      	b.n	8011b2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d00b      	beq.n	8011b50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8011b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b3c:	f383 8811 	msr	BASEPRI, r3
 8011b40:	f3bf 8f6f 	isb	sy
 8011b44:	f3bf 8f4f 	dsb	sy
 8011b48:	61fb      	str	r3, [r7, #28]
}
 8011b4a:	bf00      	nop
 8011b4c:	bf00      	nop
 8011b4e:	e7fd      	b.n	8011b4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d103      	bne.n	8011b60 <xQueueGiveFromISR+0x5c>
 8011b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b5a:	689b      	ldr	r3, [r3, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d101      	bne.n	8011b64 <xQueueGiveFromISR+0x60>
 8011b60:	2301      	movs	r3, #1
 8011b62:	e000      	b.n	8011b66 <xQueueGiveFromISR+0x62>
 8011b64:	2300      	movs	r3, #0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d10b      	bne.n	8011b82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8011b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b6e:	f383 8811 	msr	BASEPRI, r3
 8011b72:	f3bf 8f6f 	isb	sy
 8011b76:	f3bf 8f4f 	dsb	sy
 8011b7a:	61bb      	str	r3, [r7, #24]
}
 8011b7c:	bf00      	nop
 8011b7e:	bf00      	nop
 8011b80:	e7fd      	b.n	8011b7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b82:	f7ff fb71 	bl	8011268 <vPortValidateInterruptPriority>
	__asm volatile
 8011b86:	f3ef 8211 	mrs	r2, BASEPRI
 8011b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b8e:	f383 8811 	msr	BASEPRI, r3
 8011b92:	f3bf 8f6f 	isb	sy
 8011b96:	f3bf 8f4f 	dsb	sy
 8011b9a:	617a      	str	r2, [r7, #20]
 8011b9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011b9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d22b      	bcs.n	8011c0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bbe:	1c5a      	adds	r2, r3, #1
 8011bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bcc:	d112      	bne.n	8011bf4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d016      	beq.n	8011c04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd8:	3324      	adds	r3, #36	@ 0x24
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f001 f90e 	bl	8012dfc <xTaskRemoveFromEventList>
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00e      	beq.n	8011c04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d00b      	beq.n	8011c04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	601a      	str	r2, [r3, #0]
 8011bf2:	e007      	b.n	8011c04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	b25a      	sxtb	r2, r3
 8011bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011c04:	2301      	movs	r3, #1
 8011c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c08:	e001      	b.n	8011c0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	f383 8811 	msr	BASEPRI, r3
}
 8011c18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3738      	adds	r7, #56	@ 0x38
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b08c      	sub	sp, #48	@ 0x30
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011c30:	2300      	movs	r3, #0
 8011c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d10b      	bne.n	8011c56 <xQueueReceive+0x32>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	623b      	str	r3, [r7, #32]
}
 8011c50:	bf00      	nop
 8011c52:	bf00      	nop
 8011c54:	e7fd      	b.n	8011c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d103      	bne.n	8011c64 <xQueueReceive+0x40>
 8011c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d101      	bne.n	8011c68 <xQueueReceive+0x44>
 8011c64:	2301      	movs	r3, #1
 8011c66:	e000      	b.n	8011c6a <xQueueReceive+0x46>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d10b      	bne.n	8011c86 <xQueueReceive+0x62>
	__asm volatile
 8011c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	61fb      	str	r3, [r7, #28]
}
 8011c80:	bf00      	nop
 8011c82:	bf00      	nop
 8011c84:	e7fd      	b.n	8011c82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c86:	f001 fa8f 	bl	80131a8 <xTaskGetSchedulerState>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d102      	bne.n	8011c96 <xQueueReceive+0x72>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d101      	bne.n	8011c9a <xQueueReceive+0x76>
 8011c96:	2301      	movs	r3, #1
 8011c98:	e000      	b.n	8011c9c <xQueueReceive+0x78>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d10b      	bne.n	8011cb8 <xQueueReceive+0x94>
	__asm volatile
 8011ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca4:	f383 8811 	msr	BASEPRI, r3
 8011ca8:	f3bf 8f6f 	isb	sy
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	61bb      	str	r3, [r7, #24]
}
 8011cb2:	bf00      	nop
 8011cb4:	bf00      	nop
 8011cb6:	e7fd      	b.n	8011cb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011cb8:	f7ff f9f6 	bl	80110a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d01f      	beq.n	8011d08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011cc8:	68b9      	ldr	r1, [r7, #8]
 8011cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ccc:	f000 fac4 	bl	8012258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd2:	1e5a      	subs	r2, r3, #1
 8011cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cda:	691b      	ldr	r3, [r3, #16]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00f      	beq.n	8011d00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ce2:	3310      	adds	r3, #16
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f001 f889 	bl	8012dfc <xTaskRemoveFromEventList>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d007      	beq.n	8011d00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8011de4 <xQueueReceive+0x1c0>)
 8011cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d00:	f7ff fa04 	bl	801110c <vPortExitCritical>
				return pdPASS;
 8011d04:	2301      	movs	r3, #1
 8011d06:	e069      	b.n	8011ddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d103      	bne.n	8011d16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011d0e:	f7ff f9fd 	bl	801110c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011d12:	2300      	movs	r3, #0
 8011d14:	e062      	b.n	8011ddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d106      	bne.n	8011d2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d1c:	f107 0310 	add.w	r3, r7, #16
 8011d20:	4618      	mov	r0, r3
 8011d22:	f001 f8cf 	bl	8012ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d26:	2301      	movs	r3, #1
 8011d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d2a:	f7ff f9ef 	bl	801110c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d2e:	f000 fe25 	bl	801297c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d32:	f7ff f9b9 	bl	80110a8 <vPortEnterCritical>
 8011d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011d3c:	b25b      	sxtb	r3, r3
 8011d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d42:	d103      	bne.n	8011d4c <xQueueReceive+0x128>
 8011d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d46:	2200      	movs	r2, #0
 8011d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011d52:	b25b      	sxtb	r3, r3
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d103      	bne.n	8011d62 <xQueueReceive+0x13e>
 8011d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011d62:	f7ff f9d3 	bl	801110c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011d66:	1d3a      	adds	r2, r7, #4
 8011d68:	f107 0310 	add.w	r3, r7, #16
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f001 f8be 	bl	8012ef0 <xTaskCheckForTimeOut>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d123      	bne.n	8011dc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d7c:	f000 fae4 	bl	8012348 <prvIsQueueEmpty>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d017      	beq.n	8011db6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d88:	3324      	adds	r3, #36	@ 0x24
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f000 ffe2 	bl	8012d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d96:	f000 fa85 	bl	80122a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011d9a:	f000 fdfd 	bl	8012998 <xTaskResumeAll>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d189      	bne.n	8011cb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011da4:	4b0f      	ldr	r3, [pc, #60]	@ (8011de4 <xQueueReceive+0x1c0>)
 8011da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011daa:	601a      	str	r2, [r3, #0]
 8011dac:	f3bf 8f4f 	dsb	sy
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	e780      	b.n	8011cb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011db8:	f000 fa74 	bl	80122a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011dbc:	f000 fdec 	bl	8012998 <xTaskResumeAll>
 8011dc0:	e77a      	b.n	8011cb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dc4:	f000 fa6e 	bl	80122a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011dc8:	f000 fde6 	bl	8012998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dce:	f000 fabb 	bl	8012348 <prvIsQueueEmpty>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f43f af6f 	beq.w	8011cb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3730      	adds	r7, #48	@ 0x30
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	e000ed04 	.word	0xe000ed04

08011de8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08e      	sub	sp, #56	@ 0x38
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011df2:	2300      	movs	r3, #0
 8011df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d10b      	bne.n	8011e1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e08:	f383 8811 	msr	BASEPRI, r3
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	623b      	str	r3, [r7, #32]
}
 8011e16:	bf00      	nop
 8011e18:	bf00      	nop
 8011e1a:	e7fd      	b.n	8011e18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00b      	beq.n	8011e3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e28:	f383 8811 	msr	BASEPRI, r3
 8011e2c:	f3bf 8f6f 	isb	sy
 8011e30:	f3bf 8f4f 	dsb	sy
 8011e34:	61fb      	str	r3, [r7, #28]
}
 8011e36:	bf00      	nop
 8011e38:	bf00      	nop
 8011e3a:	e7fd      	b.n	8011e38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e3c:	f001 f9b4 	bl	80131a8 <xTaskGetSchedulerState>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d102      	bne.n	8011e4c <xQueueSemaphoreTake+0x64>
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d101      	bne.n	8011e50 <xQueueSemaphoreTake+0x68>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e000      	b.n	8011e52 <xQueueSemaphoreTake+0x6a>
 8011e50:	2300      	movs	r3, #0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10b      	bne.n	8011e6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	61bb      	str	r3, [r7, #24]
}
 8011e68:	bf00      	nop
 8011e6a:	bf00      	nop
 8011e6c:	e7fd      	b.n	8011e6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e6e:	f7ff f91b 	bl	80110a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d024      	beq.n	8011ec8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e80:	1e5a      	subs	r2, r3, #1
 8011e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d104      	bne.n	8011e98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011e8e:	f001 fb05 	bl	801349c <pvTaskIncrementMutexHeldCount>
 8011e92:	4602      	mov	r2, r0
 8011e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e9a:	691b      	ldr	r3, [r3, #16]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d00f      	beq.n	8011ec0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea2:	3310      	adds	r3, #16
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f000 ffa9 	bl	8012dfc <xTaskRemoveFromEventList>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d007      	beq.n	8011ec0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011eb0:	4b54      	ldr	r3, [pc, #336]	@ (8012004 <xQueueSemaphoreTake+0x21c>)
 8011eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011eb6:	601a      	str	r2, [r3, #0]
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011ec0:	f7ff f924 	bl	801110c <vPortExitCritical>
				return pdPASS;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e098      	b.n	8011ffa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d112      	bne.n	8011ef4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00b      	beq.n	8011eec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ed8:	f383 8811 	msr	BASEPRI, r3
 8011edc:	f3bf 8f6f 	isb	sy
 8011ee0:	f3bf 8f4f 	dsb	sy
 8011ee4:	617b      	str	r3, [r7, #20]
}
 8011ee6:	bf00      	nop
 8011ee8:	bf00      	nop
 8011eea:	e7fd      	b.n	8011ee8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011eec:	f7ff f90e 	bl	801110c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	e082      	b.n	8011ffa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d106      	bne.n	8011f08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011efa:	f107 030c 	add.w	r3, r7, #12
 8011efe:	4618      	mov	r0, r3
 8011f00:	f000 ffe0 	bl	8012ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f04:	2301      	movs	r3, #1
 8011f06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f08:	f7ff f900 	bl	801110c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f0c:	f000 fd36 	bl	801297c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f10:	f7ff f8ca 	bl	80110a8 <vPortEnterCritical>
 8011f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f1a:	b25b      	sxtb	r3, r3
 8011f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f20:	d103      	bne.n	8011f2a <xQueueSemaphoreTake+0x142>
 8011f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f24:	2200      	movs	r2, #0
 8011f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f30:	b25b      	sxtb	r3, r3
 8011f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f36:	d103      	bne.n	8011f40 <xQueueSemaphoreTake+0x158>
 8011f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011f40:	f7ff f8e4 	bl	801110c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f44:	463a      	mov	r2, r7
 8011f46:	f107 030c 	add.w	r3, r7, #12
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 ffcf 	bl	8012ef0 <xTaskCheckForTimeOut>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d132      	bne.n	8011fbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f5a:	f000 f9f5 	bl	8012348 <prvIsQueueEmpty>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d026      	beq.n	8011fb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d109      	bne.n	8011f80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011f6c:	f7ff f89c 	bl	80110a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f72:	689b      	ldr	r3, [r3, #8]
 8011f74:	4618      	mov	r0, r3
 8011f76:	f001 f935 	bl	80131e4 <xTaskPriorityInherit>
 8011f7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011f7c:	f7ff f8c6 	bl	801110c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f82:	3324      	adds	r3, #36	@ 0x24
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f000 fee5 	bl	8012d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f90:	f000 f988 	bl	80122a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f94:	f000 fd00 	bl	8012998 <xTaskResumeAll>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	f47f af67 	bne.w	8011e6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011fa0:	4b18      	ldr	r3, [pc, #96]	@ (8012004 <xQueueSemaphoreTake+0x21c>)
 8011fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fa6:	601a      	str	r2, [r3, #0]
 8011fa8:	f3bf 8f4f 	dsb	sy
 8011fac:	f3bf 8f6f 	isb	sy
 8011fb0:	e75d      	b.n	8011e6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011fb4:	f000 f976 	bl	80122a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011fb8:	f000 fcee 	bl	8012998 <xTaskResumeAll>
 8011fbc:	e757      	b.n	8011e6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011fbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011fc0:	f000 f970 	bl	80122a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011fc4:	f000 fce8 	bl	8012998 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011fca:	f000 f9bd 	bl	8012348 <prvIsQueueEmpty>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f43f af4c 	beq.w	8011e6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00d      	beq.n	8011ff8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011fdc:	f7ff f864 	bl	80110a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011fe2:	f000 f8b7 	bl	8012154 <prvGetDisinheritPriorityAfterTimeout>
 8011fe6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f001 f9d0 	bl	8013394 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011ff4:	f7ff f88a 	bl	801110c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3738      	adds	r7, #56	@ 0x38
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	e000ed04 	.word	0xe000ed04

08012008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b08e      	sub	sp, #56	@ 0x38
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801201a:	2b00      	cmp	r3, #0
 801201c:	d10b      	bne.n	8012036 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801201e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012022:	f383 8811 	msr	BASEPRI, r3
 8012026:	f3bf 8f6f 	isb	sy
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	623b      	str	r3, [r7, #32]
}
 8012030:	bf00      	nop
 8012032:	bf00      	nop
 8012034:	e7fd      	b.n	8012032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d103      	bne.n	8012044 <xQueueReceiveFromISR+0x3c>
 801203c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012040:	2b00      	cmp	r3, #0
 8012042:	d101      	bne.n	8012048 <xQueueReceiveFromISR+0x40>
 8012044:	2301      	movs	r3, #1
 8012046:	e000      	b.n	801204a <xQueueReceiveFromISR+0x42>
 8012048:	2300      	movs	r3, #0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d10b      	bne.n	8012066 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801204e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	61fb      	str	r3, [r7, #28]
}
 8012060:	bf00      	nop
 8012062:	bf00      	nop
 8012064:	e7fd      	b.n	8012062 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012066:	f7ff f8ff 	bl	8011268 <vPortValidateInterruptPriority>
	__asm volatile
 801206a:	f3ef 8211 	mrs	r2, BASEPRI
 801206e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012072:	f383 8811 	msr	BASEPRI, r3
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	f3bf 8f4f 	dsb	sy
 801207e:	61ba      	str	r2, [r7, #24]
 8012080:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012082:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012084:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801208a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801208e:	2b00      	cmp	r3, #0
 8012090:	d02f      	beq.n	80120f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801209c:	68b9      	ldr	r1, [r7, #8]
 801209e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80120a0:	f000 f8da 	bl	8012258 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80120a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a6:	1e5a      	subs	r2, r3, #1
 80120a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80120ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80120b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b4:	d112      	bne.n	80120dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b8:	691b      	ldr	r3, [r3, #16]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d016      	beq.n	80120ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120c0:	3310      	adds	r3, #16
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 fe9a 	bl	8012dfc <xTaskRemoveFromEventList>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00e      	beq.n	80120ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d00b      	beq.n	80120ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2201      	movs	r2, #1
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	e007      	b.n	80120ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80120dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120e0:	3301      	adds	r3, #1
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	b25a      	sxtb	r2, r3
 80120e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80120ec:	2301      	movs	r3, #1
 80120ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80120f0:	e001      	b.n	80120f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80120f2:	2300      	movs	r3, #0
 80120f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80120f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	f383 8811 	msr	BASEPRI, r3
}
 8012100:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012104:	4618      	mov	r0, r3
 8012106:	3738      	adds	r7, #56	@ 0x38
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10b      	bne.n	8012136 <vQueueDelete+0x2a>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	60bb      	str	r3, [r7, #8]
}
 8012130:	bf00      	nop
 8012132:	bf00      	nop
 8012134:	e7fd      	b.n	8012132 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012136:	68f8      	ldr	r0, [r7, #12]
 8012138:	f000 f95e 	bl	80123f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012142:	2b00      	cmp	r3, #0
 8012144:	d102      	bne.n	801214c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f7fe fcaa 	bl	8010aa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801214c:	bf00      	nop
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012154:	b480      	push	{r7}
 8012156:	b085      	sub	sp, #20
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012160:	2b00      	cmp	r3, #0
 8012162:	d006      	beq.n	8012172 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801216e:	60fb      	str	r3, [r7, #12]
 8012170:	e001      	b.n	8012176 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012172:	2300      	movs	r3, #0
 8012174:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012176:	68fb      	ldr	r3, [r7, #12]
	}
 8012178:	4618      	mov	r0, r3
 801217a:	3714      	adds	r7, #20
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b086      	sub	sp, #24
 8012188:	af00      	add	r7, sp, #0
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012190:	2300      	movs	r3, #0
 8012192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10d      	bne.n	80121be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d14d      	bne.n	8012246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	689b      	ldr	r3, [r3, #8]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f001 f880 	bl	80132b4 <xTaskPriorityDisinherit>
 80121b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2200      	movs	r2, #0
 80121ba:	609a      	str	r2, [r3, #8]
 80121bc:	e043      	b.n	8012246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d119      	bne.n	80121f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	6858      	ldr	r0, [r3, #4]
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121cc:	461a      	mov	r2, r3
 80121ce:	68b9      	ldr	r1, [r7, #8]
 80121d0:	f010 f88d 	bl	80222ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	685a      	ldr	r2, [r3, #4]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121dc:	441a      	add	r2, r3
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	685a      	ldr	r2, [r3, #4]
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	689b      	ldr	r3, [r3, #8]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d32b      	bcc.n	8012246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	605a      	str	r2, [r3, #4]
 80121f6:	e026      	b.n	8012246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	68d8      	ldr	r0, [r3, #12]
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012200:	461a      	mov	r2, r3
 8012202:	68b9      	ldr	r1, [r7, #8]
 8012204:	f010 f873 	bl	80222ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	68da      	ldr	r2, [r3, #12]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012210:	425b      	negs	r3, r3
 8012212:	441a      	add	r2, r3
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	68da      	ldr	r2, [r3, #12]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	429a      	cmp	r2, r3
 8012222:	d207      	bcs.n	8012234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	689a      	ldr	r2, [r3, #8]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801222c:	425b      	negs	r3, r3
 801222e:	441a      	add	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b02      	cmp	r3, #2
 8012238:	d105      	bne.n	8012246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d002      	beq.n	8012246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	3b01      	subs	r3, #1
 8012244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	1c5a      	adds	r2, r3, #1
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801224e:	697b      	ldr	r3, [r7, #20]
}
 8012250:	4618      	mov	r0, r3
 8012252:	3718      	adds	r7, #24
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012266:	2b00      	cmp	r3, #0
 8012268:	d018      	beq.n	801229c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	68da      	ldr	r2, [r3, #12]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012272:	441a      	add	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	68da      	ldr	r2, [r3, #12]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	429a      	cmp	r2, r3
 8012282:	d303      	bcc.n	801228c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	68d9      	ldr	r1, [r3, #12]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012294:	461a      	mov	r2, r3
 8012296:	6838      	ldr	r0, [r7, #0]
 8012298:	f010 f829 	bl	80222ee <memcpy>
	}
}
 801229c:	bf00      	nop
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80122ac:	f7fe fefc 	bl	80110a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80122b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80122b8:	e011      	b.n	80122de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d012      	beq.n	80122e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	3324      	adds	r3, #36	@ 0x24
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 fd98 	bl	8012dfc <xTaskRemoveFromEventList>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d001      	beq.n	80122d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80122d2:	f000 fe71 	bl	8012fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80122d6:	7bfb      	ldrb	r3, [r7, #15]
 80122d8:	3b01      	subs	r3, #1
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80122de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	dce9      	bgt.n	80122ba <prvUnlockQueue+0x16>
 80122e6:	e000      	b.n	80122ea <prvUnlockQueue+0x46>
					break;
 80122e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	22ff      	movs	r2, #255	@ 0xff
 80122ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80122f2:	f7fe ff0b 	bl	801110c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80122f6:	f7fe fed7 	bl	80110a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012302:	e011      	b.n	8012328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d012      	beq.n	8012332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3310      	adds	r3, #16
 8012310:	4618      	mov	r0, r3
 8012312:	f000 fd73 	bl	8012dfc <xTaskRemoveFromEventList>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801231c:	f000 fe4c 	bl	8012fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012320:	7bbb      	ldrb	r3, [r7, #14]
 8012322:	3b01      	subs	r3, #1
 8012324:	b2db      	uxtb	r3, r3
 8012326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801232c:	2b00      	cmp	r3, #0
 801232e:	dce9      	bgt.n	8012304 <prvUnlockQueue+0x60>
 8012330:	e000      	b.n	8012334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	22ff      	movs	r2, #255	@ 0xff
 8012338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801233c:	f7fe fee6 	bl	801110c <vPortExitCritical>
}
 8012340:	bf00      	nop
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012350:	f7fe feaa 	bl	80110a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012358:	2b00      	cmp	r3, #0
 801235a:	d102      	bne.n	8012362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801235c:	2301      	movs	r3, #1
 801235e:	60fb      	str	r3, [r7, #12]
 8012360:	e001      	b.n	8012366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012362:	2300      	movs	r3, #0
 8012364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012366:	f7fe fed1 	bl	801110c <vPortExitCritical>

	return xReturn;
 801236a:	68fb      	ldr	r3, [r7, #12]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801237c:	f7fe fe94 	bl	80110a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012388:	429a      	cmp	r2, r3
 801238a:	d102      	bne.n	8012392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801238c:	2301      	movs	r3, #1
 801238e:	60fb      	str	r3, [r7, #12]
 8012390:	e001      	b.n	8012396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012392:	2300      	movs	r3, #0
 8012394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012396:	f7fe feb9 	bl	801110c <vPortExitCritical>

	return xReturn;
 801239a:	68fb      	ldr	r3, [r7, #12]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80123ae:	2300      	movs	r3, #0
 80123b0:	60fb      	str	r3, [r7, #12]
 80123b2:	e014      	b.n	80123de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80123b4:	4a0f      	ldr	r2, [pc, #60]	@ (80123f4 <vQueueAddToRegistry+0x50>)
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d10b      	bne.n	80123d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80123c0:	490c      	ldr	r1, [pc, #48]	@ (80123f4 <vQueueAddToRegistry+0x50>)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	683a      	ldr	r2, [r7, #0]
 80123c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80123ca:	4a0a      	ldr	r2, [pc, #40]	@ (80123f4 <vQueueAddToRegistry+0x50>)
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	00db      	lsls	r3, r3, #3
 80123d0:	4413      	add	r3, r2
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80123d6:	e006      	b.n	80123e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	3301      	adds	r3, #1
 80123dc:	60fb      	str	r3, [r7, #12]
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	2b07      	cmp	r3, #7
 80123e2:	d9e7      	bls.n	80123b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80123e4:	bf00      	nop
 80123e6:	bf00      	nop
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	24009a00 	.word	0x24009a00

080123f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012400:	2300      	movs	r3, #0
 8012402:	60fb      	str	r3, [r7, #12]
 8012404:	e016      	b.n	8012434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012406:	4a10      	ldr	r2, [pc, #64]	@ (8012448 <vQueueUnregisterQueue+0x50>)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	00db      	lsls	r3, r3, #3
 801240c:	4413      	add	r3, r2
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	429a      	cmp	r2, r3
 8012414:	d10b      	bne.n	801242e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012416:	4a0c      	ldr	r2, [pc, #48]	@ (8012448 <vQueueUnregisterQueue+0x50>)
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	2100      	movs	r1, #0
 801241c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012420:	4a09      	ldr	r2, [pc, #36]	@ (8012448 <vQueueUnregisterQueue+0x50>)
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	00db      	lsls	r3, r3, #3
 8012426:	4413      	add	r3, r2
 8012428:	2200      	movs	r2, #0
 801242a:	605a      	str	r2, [r3, #4]
				break;
 801242c:	e006      	b.n	801243c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	3301      	adds	r3, #1
 8012432:	60fb      	str	r3, [r7, #12]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b07      	cmp	r3, #7
 8012438:	d9e5      	bls.n	8012406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801243a:	bf00      	nop
 801243c:	bf00      	nop
 801243e:	3714      	adds	r7, #20
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr
 8012448:	24009a00 	.word	0x24009a00

0801244c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801245c:	f7fe fe24 	bl	80110a8 <vPortEnterCritical>
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012466:	b25b      	sxtb	r3, r3
 8012468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801246c:	d103      	bne.n	8012476 <vQueueWaitForMessageRestricted+0x2a>
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	2200      	movs	r2, #0
 8012472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801247c:	b25b      	sxtb	r3, r3
 801247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012482:	d103      	bne.n	801248c <vQueueWaitForMessageRestricted+0x40>
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	2200      	movs	r2, #0
 8012488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801248c:	f7fe fe3e 	bl	801110c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012494:	2b00      	cmp	r3, #0
 8012496:	d106      	bne.n	80124a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	3324      	adds	r3, #36	@ 0x24
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	68b9      	ldr	r1, [r7, #8]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f000 fc7f 	bl	8012da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80124a6:	6978      	ldr	r0, [r7, #20]
 80124a8:	f7ff fefc 	bl	80122a4 <prvUnlockQueue>
	}
 80124ac:	bf00      	nop
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08e      	sub	sp, #56	@ 0x38
 80124b8:	af04      	add	r7, sp, #16
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80124c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10b      	bne.n	80124e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80124c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124cc:	f383 8811 	msr	BASEPRI, r3
 80124d0:	f3bf 8f6f 	isb	sy
 80124d4:	f3bf 8f4f 	dsb	sy
 80124d8:	623b      	str	r3, [r7, #32]
}
 80124da:	bf00      	nop
 80124dc:	bf00      	nop
 80124de:	e7fd      	b.n	80124dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80124e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10b      	bne.n	80124fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80124e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124ea:	f383 8811 	msr	BASEPRI, r3
 80124ee:	f3bf 8f6f 	isb	sy
 80124f2:	f3bf 8f4f 	dsb	sy
 80124f6:	61fb      	str	r3, [r7, #28]
}
 80124f8:	bf00      	nop
 80124fa:	bf00      	nop
 80124fc:	e7fd      	b.n	80124fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80124fe:	23a8      	movs	r3, #168	@ 0xa8
 8012500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	2ba8      	cmp	r3, #168	@ 0xa8
 8012506:	d00b      	beq.n	8012520 <xTaskCreateStatic+0x6c>
	__asm volatile
 8012508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801250c:	f383 8811 	msr	BASEPRI, r3
 8012510:	f3bf 8f6f 	isb	sy
 8012514:	f3bf 8f4f 	dsb	sy
 8012518:	61bb      	str	r3, [r7, #24]
}
 801251a:	bf00      	nop
 801251c:	bf00      	nop
 801251e:	e7fd      	b.n	801251c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012524:	2b00      	cmp	r3, #0
 8012526:	d01e      	beq.n	8012566 <xTaskCreateStatic+0xb2>
 8012528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801252a:	2b00      	cmp	r3, #0
 801252c:	d01b      	beq.n	8012566 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012530:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253a:	2202      	movs	r2, #2
 801253c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012540:	2300      	movs	r3, #0
 8012542:	9303      	str	r3, [sp, #12]
 8012544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012546:	9302      	str	r3, [sp, #8]
 8012548:	f107 0314 	add.w	r3, r7, #20
 801254c:	9301      	str	r3, [sp, #4]
 801254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	68b9      	ldr	r1, [r7, #8]
 8012558:	68f8      	ldr	r0, [r7, #12]
 801255a:	f000 f851 	bl	8012600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801255e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012560:	f000 f8f6 	bl	8012750 <prvAddNewTaskToReadyList>
 8012564:	e001      	b.n	801256a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8012566:	2300      	movs	r3, #0
 8012568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801256a:	697b      	ldr	r3, [r7, #20]
	}
 801256c:	4618      	mov	r0, r3
 801256e:	3728      	adds	r7, #40	@ 0x28
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012574:	b580      	push	{r7, lr}
 8012576:	b08c      	sub	sp, #48	@ 0x30
 8012578:	af04      	add	r7, sp, #16
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	603b      	str	r3, [r7, #0]
 8012580:	4613      	mov	r3, r2
 8012582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012584:	88fb      	ldrh	r3, [r7, #6]
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe f9bb 	bl	8010904 <pvPortMalloc>
 801258e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00e      	beq.n	80125b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012596:	20a8      	movs	r0, #168	@ 0xa8
 8012598:	f7fe f9b4 	bl	8010904 <pvPortMalloc>
 801259c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d003      	beq.n	80125ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	697a      	ldr	r2, [r7, #20]
 80125a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80125aa:	e005      	b.n	80125b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80125ac:	6978      	ldr	r0, [r7, #20]
 80125ae:	f7fe fa77 	bl	8010aa0 <vPortFree>
 80125b2:	e001      	b.n	80125b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80125b4:	2300      	movs	r3, #0
 80125b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d017      	beq.n	80125ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80125c6:	88fa      	ldrh	r2, [r7, #6]
 80125c8:	2300      	movs	r3, #0
 80125ca:	9303      	str	r3, [sp, #12]
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	9302      	str	r3, [sp, #8]
 80125d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	68b9      	ldr	r1, [r7, #8]
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f000 f80f 	bl	8012600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125e2:	69f8      	ldr	r0, [r7, #28]
 80125e4:	f000 f8b4 	bl	8012750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80125e8:	2301      	movs	r3, #1
 80125ea:	61bb      	str	r3, [r7, #24]
 80125ec:	e002      	b.n	80125f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80125ee:	f04f 33ff 	mov.w	r3, #4294967295
 80125f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80125f4:	69bb      	ldr	r3, [r7, #24]
	}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3720      	adds	r7, #32
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b088      	sub	sp, #32
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012610:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	461a      	mov	r2, r3
 8012618:	21a5      	movs	r1, #165	@ 0xa5
 801261a:	f00f fd6d 	bl	80220f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801261e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012622:	6879      	ldr	r1, [r7, #4]
 8012624:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012628:	440b      	add	r3, r1
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	4413      	add	r3, r2
 801262e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	f023 0307 	bic.w	r3, r3, #7
 8012636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012638:	69bb      	ldr	r3, [r7, #24]
 801263a:	f003 0307 	and.w	r3, r3, #7
 801263e:	2b00      	cmp	r3, #0
 8012640:	d00b      	beq.n	801265a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8012642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012646:	f383 8811 	msr	BASEPRI, r3
 801264a:	f3bf 8f6f 	isb	sy
 801264e:	f3bf 8f4f 	dsb	sy
 8012652:	617b      	str	r3, [r7, #20]
}
 8012654:	bf00      	nop
 8012656:	bf00      	nop
 8012658:	e7fd      	b.n	8012656 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d01f      	beq.n	80126a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012660:	2300      	movs	r3, #0
 8012662:	61fb      	str	r3, [r7, #28]
 8012664:	e012      	b.n	801268c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	4413      	add	r3, r2
 801266c:	7819      	ldrb	r1, [r3, #0]
 801266e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	4413      	add	r3, r2
 8012674:	3334      	adds	r3, #52	@ 0x34
 8012676:	460a      	mov	r2, r1
 8012678:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801267a:	68ba      	ldr	r2, [r7, #8]
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	4413      	add	r3, r2
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d006      	beq.n	8012694 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	3301      	adds	r3, #1
 801268a:	61fb      	str	r3, [r7, #28]
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	2b0f      	cmp	r3, #15
 8012690:	d9e9      	bls.n	8012666 <prvInitialiseNewTask+0x66>
 8012692:	e000      	b.n	8012696 <prvInitialiseNewTask+0x96>
			{
				break;
 8012694:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012698:	2200      	movs	r2, #0
 801269a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801269e:	e003      	b.n	80126a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80126a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126a2:	2200      	movs	r2, #0
 80126a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80126a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126aa:	2b37      	cmp	r3, #55	@ 0x37
 80126ac:	d901      	bls.n	80126b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80126ae:	2337      	movs	r3, #55	@ 0x37
 80126b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80126b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80126b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80126be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c0:	2200      	movs	r2, #0
 80126c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80126c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c6:	3304      	adds	r3, #4
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fe fb29 	bl	8010d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80126ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126d0:	3318      	adds	r3, #24
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fe fb24 	bl	8010d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80126d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80126e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80126e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80126ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f0:	2200      	movs	r2, #0
 80126f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80126f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f8:	2200      	movs	r2, #0
 80126fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80126fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012700:	3354      	adds	r3, #84	@ 0x54
 8012702:	224c      	movs	r2, #76	@ 0x4c
 8012704:	2100      	movs	r1, #0
 8012706:	4618      	mov	r0, r3
 8012708:	f00f fcf6 	bl	80220f8 <memset>
 801270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801270e:	4a0d      	ldr	r2, [pc, #52]	@ (8012744 <prvInitialiseNewTask+0x144>)
 8012710:	659a      	str	r2, [r3, #88]	@ 0x58
 8012712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012714:	4a0c      	ldr	r2, [pc, #48]	@ (8012748 <prvInitialiseNewTask+0x148>)
 8012716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801271a:	4a0c      	ldr	r2, [pc, #48]	@ (801274c <prvInitialiseNewTask+0x14c>)
 801271c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	68f9      	ldr	r1, [r7, #12]
 8012722:	69b8      	ldr	r0, [r7, #24]
 8012724:	f7fe fb90 	bl	8010e48 <pxPortInitialiseStack>
 8012728:	4602      	mov	r2, r0
 801272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801272c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801272e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801273a:	bf00      	nop
 801273c:	3720      	adds	r7, #32
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	2401270c 	.word	0x2401270c
 8012748:	24012774 	.word	0x24012774
 801274c:	240127dc 	.word	0x240127dc

08012750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012758:	f7fe fca6 	bl	80110a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801275c:	4b2d      	ldr	r3, [pc, #180]	@ (8012814 <prvAddNewTaskToReadyList+0xc4>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	3301      	adds	r3, #1
 8012762:	4a2c      	ldr	r2, [pc, #176]	@ (8012814 <prvAddNewTaskToReadyList+0xc4>)
 8012764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012766:	4b2c      	ldr	r3, [pc, #176]	@ (8012818 <prvAddNewTaskToReadyList+0xc8>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d109      	bne.n	8012782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801276e:	4a2a      	ldr	r2, [pc, #168]	@ (8012818 <prvAddNewTaskToReadyList+0xc8>)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012774:	4b27      	ldr	r3, [pc, #156]	@ (8012814 <prvAddNewTaskToReadyList+0xc4>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d110      	bne.n	801279e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801277c:	f000 fc40 	bl	8013000 <prvInitialiseTaskLists>
 8012780:	e00d      	b.n	801279e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012782:	4b26      	ldr	r3, [pc, #152]	@ (801281c <prvAddNewTaskToReadyList+0xcc>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d109      	bne.n	801279e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801278a:	4b23      	ldr	r3, [pc, #140]	@ (8012818 <prvAddNewTaskToReadyList+0xc8>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012794:	429a      	cmp	r2, r3
 8012796:	d802      	bhi.n	801279e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012798:	4a1f      	ldr	r2, [pc, #124]	@ (8012818 <prvAddNewTaskToReadyList+0xc8>)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801279e:	4b20      	ldr	r3, [pc, #128]	@ (8012820 <prvAddNewTaskToReadyList+0xd0>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	3301      	adds	r3, #1
 80127a4:	4a1e      	ldr	r2, [pc, #120]	@ (8012820 <prvAddNewTaskToReadyList+0xd0>)
 80127a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80127a8:	4b1d      	ldr	r3, [pc, #116]	@ (8012820 <prvAddNewTaskToReadyList+0xd0>)
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127b4:	4b1b      	ldr	r3, [pc, #108]	@ (8012824 <prvAddNewTaskToReadyList+0xd4>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d903      	bls.n	80127c4 <prvAddNewTaskToReadyList+0x74>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127c0:	4a18      	ldr	r2, [pc, #96]	@ (8012824 <prvAddNewTaskToReadyList+0xd4>)
 80127c2:	6013      	str	r3, [r2, #0]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127c8:	4613      	mov	r3, r2
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	4413      	add	r3, r2
 80127ce:	009b      	lsls	r3, r3, #2
 80127d0:	4a15      	ldr	r2, [pc, #84]	@ (8012828 <prvAddNewTaskToReadyList+0xd8>)
 80127d2:	441a      	add	r2, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	3304      	adds	r3, #4
 80127d8:	4619      	mov	r1, r3
 80127da:	4610      	mov	r0, r2
 80127dc:	f7fe faad 	bl	8010d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80127e0:	f7fe fc94 	bl	801110c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80127e4:	4b0d      	ldr	r3, [pc, #52]	@ (801281c <prvAddNewTaskToReadyList+0xcc>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00e      	beq.n	801280a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80127ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012818 <prvAddNewTaskToReadyList+0xc8>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d207      	bcs.n	801280a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80127fa:	4b0c      	ldr	r3, [pc, #48]	@ (801282c <prvAddNewTaskToReadyList+0xdc>)
 80127fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012800:	601a      	str	r2, [r3, #0]
 8012802:	f3bf 8f4f 	dsb	sy
 8012806:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801280a:	bf00      	nop
 801280c:	3708      	adds	r7, #8
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	24009f14 	.word	0x24009f14
 8012818:	24009a40 	.word	0x24009a40
 801281c:	24009f20 	.word	0x24009f20
 8012820:	24009f30 	.word	0x24009f30
 8012824:	24009f1c 	.word	0x24009f1c
 8012828:	24009a44 	.word	0x24009a44
 801282c:	e000ed04 	.word	0xe000ed04

08012830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012838:	2300      	movs	r3, #0
 801283a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d018      	beq.n	8012874 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012842:	4b14      	ldr	r3, [pc, #80]	@ (8012894 <vTaskDelay+0x64>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00b      	beq.n	8012862 <vTaskDelay+0x32>
	__asm volatile
 801284a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801284e:	f383 8811 	msr	BASEPRI, r3
 8012852:	f3bf 8f6f 	isb	sy
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	60bb      	str	r3, [r7, #8]
}
 801285c:	bf00      	nop
 801285e:	bf00      	nop
 8012860:	e7fd      	b.n	801285e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012862:	f000 f88b 	bl	801297c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012866:	2100      	movs	r1, #0
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 fe2b 	bl	80134c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801286e:	f000 f893 	bl	8012998 <xTaskResumeAll>
 8012872:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d107      	bne.n	801288a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801287a:	4b07      	ldr	r3, [pc, #28]	@ (8012898 <vTaskDelay+0x68>)
 801287c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012880:	601a      	str	r2, [r3, #0]
 8012882:	f3bf 8f4f 	dsb	sy
 8012886:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801288a:	bf00      	nop
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	24009f3c 	.word	0x24009f3c
 8012898:	e000ed04 	.word	0xe000ed04

0801289c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b08a      	sub	sp, #40	@ 0x28
 80128a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80128a2:	2300      	movs	r3, #0
 80128a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80128a6:	2300      	movs	r3, #0
 80128a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80128aa:	463a      	mov	r2, r7
 80128ac:	1d39      	adds	r1, r7, #4
 80128ae:	f107 0308 	add.w	r3, r7, #8
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7fd fff2 	bl	801089c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	9202      	str	r2, [sp, #8]
 80128c0:	9301      	str	r3, [sp, #4]
 80128c2:	2300      	movs	r3, #0
 80128c4:	9300      	str	r3, [sp, #0]
 80128c6:	2300      	movs	r3, #0
 80128c8:	460a      	mov	r2, r1
 80128ca:	4924      	ldr	r1, [pc, #144]	@ (801295c <vTaskStartScheduler+0xc0>)
 80128cc:	4824      	ldr	r0, [pc, #144]	@ (8012960 <vTaskStartScheduler+0xc4>)
 80128ce:	f7ff fdf1 	bl	80124b4 <xTaskCreateStatic>
 80128d2:	4603      	mov	r3, r0
 80128d4:	4a23      	ldr	r2, [pc, #140]	@ (8012964 <vTaskStartScheduler+0xc8>)
 80128d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80128d8:	4b22      	ldr	r3, [pc, #136]	@ (8012964 <vTaskStartScheduler+0xc8>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d002      	beq.n	80128e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80128e0:	2301      	movs	r3, #1
 80128e2:	617b      	str	r3, [r7, #20]
 80128e4:	e001      	b.n	80128ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d102      	bne.n	80128f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80128f0:	f000 fe3c 	bl	801356c <xTimerCreateTimerTask>
 80128f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d11b      	bne.n	8012934 <vTaskStartScheduler+0x98>
	__asm volatile
 80128fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	613b      	str	r3, [r7, #16]
}
 801290e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012910:	4b15      	ldr	r3, [pc, #84]	@ (8012968 <vTaskStartScheduler+0xcc>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	3354      	adds	r3, #84	@ 0x54
 8012916:	4a15      	ldr	r2, [pc, #84]	@ (801296c <vTaskStartScheduler+0xd0>)
 8012918:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801291a:	4b15      	ldr	r3, [pc, #84]	@ (8012970 <vTaskStartScheduler+0xd4>)
 801291c:	f04f 32ff 	mov.w	r2, #4294967295
 8012920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012922:	4b14      	ldr	r3, [pc, #80]	@ (8012974 <vTaskStartScheduler+0xd8>)
 8012924:	2201      	movs	r2, #1
 8012926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012928:	4b13      	ldr	r3, [pc, #76]	@ (8012978 <vTaskStartScheduler+0xdc>)
 801292a:	2200      	movs	r2, #0
 801292c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801292e:	f7fe fb17 	bl	8010f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012932:	e00f      	b.n	8012954 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293a:	d10b      	bne.n	8012954 <vTaskStartScheduler+0xb8>
	__asm volatile
 801293c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012940:	f383 8811 	msr	BASEPRI, r3
 8012944:	f3bf 8f6f 	isb	sy
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	60fb      	str	r3, [r7, #12]
}
 801294e:	bf00      	nop
 8012950:	bf00      	nop
 8012952:	e7fd      	b.n	8012950 <vTaskStartScheduler+0xb4>
}
 8012954:	bf00      	nop
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	08024f60 	.word	0x08024f60
 8012960:	08012fd1 	.word	0x08012fd1
 8012964:	24009f38 	.word	0x24009f38
 8012968:	24009a40 	.word	0x24009a40
 801296c:	24000060 	.word	0x24000060
 8012970:	24009f34 	.word	0x24009f34
 8012974:	24009f20 	.word	0x24009f20
 8012978:	24009f18 	.word	0x24009f18

0801297c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801297c:	b480      	push	{r7}
 801297e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012980:	4b04      	ldr	r3, [pc, #16]	@ (8012994 <vTaskSuspendAll+0x18>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	3301      	adds	r3, #1
 8012986:	4a03      	ldr	r2, [pc, #12]	@ (8012994 <vTaskSuspendAll+0x18>)
 8012988:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801298a:	bf00      	nop
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr
 8012994:	24009f3c 	.word	0x24009f3c

08012998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80129a2:	2300      	movs	r3, #0
 80129a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80129a6:	4b42      	ldr	r3, [pc, #264]	@ (8012ab0 <xTaskResumeAll+0x118>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d10b      	bne.n	80129c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	603b      	str	r3, [r7, #0]
}
 80129c0:	bf00      	nop
 80129c2:	bf00      	nop
 80129c4:	e7fd      	b.n	80129c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80129c6:	f7fe fb6f 	bl	80110a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80129ca:	4b39      	ldr	r3, [pc, #228]	@ (8012ab0 <xTaskResumeAll+0x118>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	3b01      	subs	r3, #1
 80129d0:	4a37      	ldr	r2, [pc, #220]	@ (8012ab0 <xTaskResumeAll+0x118>)
 80129d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129d4:	4b36      	ldr	r3, [pc, #216]	@ (8012ab0 <xTaskResumeAll+0x118>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d162      	bne.n	8012aa2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80129dc:	4b35      	ldr	r3, [pc, #212]	@ (8012ab4 <xTaskResumeAll+0x11c>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d05e      	beq.n	8012aa2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80129e4:	e02f      	b.n	8012a46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129e6:	4b34      	ldr	r3, [pc, #208]	@ (8012ab8 <xTaskResumeAll+0x120>)
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	3318      	adds	r3, #24
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe f9fe 	bl	8010df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	3304      	adds	r3, #4
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fe f9f9 	bl	8010df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a06:	4b2d      	ldr	r3, [pc, #180]	@ (8012abc <xTaskResumeAll+0x124>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d903      	bls.n	8012a16 <xTaskResumeAll+0x7e>
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a12:	4a2a      	ldr	r2, [pc, #168]	@ (8012abc <xTaskResumeAll+0x124>)
 8012a14:	6013      	str	r3, [r2, #0]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	4413      	add	r3, r2
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4a27      	ldr	r2, [pc, #156]	@ (8012ac0 <xTaskResumeAll+0x128>)
 8012a24:	441a      	add	r2, r3
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	3304      	adds	r3, #4
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	f7fe f984 	bl	8010d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a36:	4b23      	ldr	r3, [pc, #140]	@ (8012ac4 <xTaskResumeAll+0x12c>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d302      	bcc.n	8012a46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012a40:	4b21      	ldr	r3, [pc, #132]	@ (8012ac8 <xTaskResumeAll+0x130>)
 8012a42:	2201      	movs	r2, #1
 8012a44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a46:	4b1c      	ldr	r3, [pc, #112]	@ (8012ab8 <xTaskResumeAll+0x120>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d1cb      	bne.n	80129e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012a54:	f000 fb78 	bl	8013148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012a58:	4b1c      	ldr	r3, [pc, #112]	@ (8012acc <xTaskResumeAll+0x134>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d010      	beq.n	8012a86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012a64:	f000 f858 	bl	8012b18 <xTaskIncrementTick>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012a6e:	4b16      	ldr	r3, [pc, #88]	@ (8012ac8 <xTaskResumeAll+0x130>)
 8012a70:	2201      	movs	r2, #1
 8012a72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	3b01      	subs	r3, #1
 8012a78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d1f1      	bne.n	8012a64 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8012a80:	4b12      	ldr	r3, [pc, #72]	@ (8012acc <xTaskResumeAll+0x134>)
 8012a82:	2200      	movs	r2, #0
 8012a84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012a86:	4b10      	ldr	r3, [pc, #64]	@ (8012ac8 <xTaskResumeAll+0x130>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d009      	beq.n	8012aa2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012a92:	4b0f      	ldr	r3, [pc, #60]	@ (8012ad0 <xTaskResumeAll+0x138>)
 8012a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a98:	601a      	str	r2, [r3, #0]
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012aa2:	f7fe fb33 	bl	801110c <vPortExitCritical>

	return xAlreadyYielded;
 8012aa6:	68bb      	ldr	r3, [r7, #8]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	24009f3c 	.word	0x24009f3c
 8012ab4:	24009f14 	.word	0x24009f14
 8012ab8:	24009ed4 	.word	0x24009ed4
 8012abc:	24009f1c 	.word	0x24009f1c
 8012ac0:	24009a44 	.word	0x24009a44
 8012ac4:	24009a40 	.word	0x24009a40
 8012ac8:	24009f28 	.word	0x24009f28
 8012acc:	24009f24 	.word	0x24009f24
 8012ad0:	e000ed04 	.word	0xe000ed04

08012ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012ada:	4b05      	ldr	r3, [pc, #20]	@ (8012af0 <xTaskGetTickCount+0x1c>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012ae0:	687b      	ldr	r3, [r7, #4]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	370c      	adds	r7, #12
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	24009f18 	.word	0x24009f18

08012af4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012afa:	f7fe fbb5 	bl	8011268 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012afe:	2300      	movs	r3, #0
 8012b00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012b02:	4b04      	ldr	r3, [pc, #16]	@ (8012b14 <xTaskGetTickCountFromISR+0x20>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b08:	683b      	ldr	r3, [r7, #0]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	24009f18 	.word	0x24009f18

08012b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b22:	4b4f      	ldr	r3, [pc, #316]	@ (8012c60 <xTaskIncrementTick+0x148>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f040 8090 	bne.w	8012c4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8012c64 <xTaskIncrementTick+0x14c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	3301      	adds	r3, #1
 8012b32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012b34:	4a4b      	ldr	r2, [pc, #300]	@ (8012c64 <xTaskIncrementTick+0x14c>)
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d121      	bne.n	8012b84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012b40:	4b49      	ldr	r3, [pc, #292]	@ (8012c68 <xTaskIncrementTick+0x150>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d00b      	beq.n	8012b62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8012b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4e:	f383 8811 	msr	BASEPRI, r3
 8012b52:	f3bf 8f6f 	isb	sy
 8012b56:	f3bf 8f4f 	dsb	sy
 8012b5a:	603b      	str	r3, [r7, #0]
}
 8012b5c:	bf00      	nop
 8012b5e:	bf00      	nop
 8012b60:	e7fd      	b.n	8012b5e <xTaskIncrementTick+0x46>
 8012b62:	4b41      	ldr	r3, [pc, #260]	@ (8012c68 <xTaskIncrementTick+0x150>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	60fb      	str	r3, [r7, #12]
 8012b68:	4b40      	ldr	r3, [pc, #256]	@ (8012c6c <xTaskIncrementTick+0x154>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8012c68 <xTaskIncrementTick+0x150>)
 8012b6e:	6013      	str	r3, [r2, #0]
 8012b70:	4a3e      	ldr	r2, [pc, #248]	@ (8012c6c <xTaskIncrementTick+0x154>)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6013      	str	r3, [r2, #0]
 8012b76:	4b3e      	ldr	r3, [pc, #248]	@ (8012c70 <xTaskIncrementTick+0x158>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	4a3c      	ldr	r2, [pc, #240]	@ (8012c70 <xTaskIncrementTick+0x158>)
 8012b7e:	6013      	str	r3, [r2, #0]
 8012b80:	f000 fae2 	bl	8013148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012b84:	4b3b      	ldr	r3, [pc, #236]	@ (8012c74 <xTaskIncrementTick+0x15c>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	693a      	ldr	r2, [r7, #16]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d349      	bcc.n	8012c22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b8e:	4b36      	ldr	r3, [pc, #216]	@ (8012c68 <xTaskIncrementTick+0x150>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d104      	bne.n	8012ba2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b98:	4b36      	ldr	r3, [pc, #216]	@ (8012c74 <xTaskIncrementTick+0x15c>)
 8012b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b9e:	601a      	str	r2, [r3, #0]
					break;
 8012ba0:	e03f      	b.n	8012c22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ba2:	4b31      	ldr	r3, [pc, #196]	@ (8012c68 <xTaskIncrementTick+0x150>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012bb2:	693a      	ldr	r2, [r7, #16]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d203      	bcs.n	8012bc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012bba:	4a2e      	ldr	r2, [pc, #184]	@ (8012c74 <xTaskIncrementTick+0x15c>)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012bc0:	e02f      	b.n	8012c22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	3304      	adds	r3, #4
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fe f914 	bl	8010df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d004      	beq.n	8012bde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	3318      	adds	r3, #24
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe f90b 	bl	8010df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012be2:	4b25      	ldr	r3, [pc, #148]	@ (8012c78 <xTaskIncrementTick+0x160>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d903      	bls.n	8012bf2 <xTaskIncrementTick+0xda>
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bee:	4a22      	ldr	r2, [pc, #136]	@ (8012c78 <xTaskIncrementTick+0x160>)
 8012bf0:	6013      	str	r3, [r2, #0]
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bf6:	4613      	mov	r3, r2
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	4413      	add	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8012c7c <xTaskIncrementTick+0x164>)
 8012c00:	441a      	add	r2, r3
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	3304      	adds	r3, #4
 8012c06:	4619      	mov	r1, r3
 8012c08:	4610      	mov	r0, r2
 8012c0a:	f7fe f896 	bl	8010d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c12:	4b1b      	ldr	r3, [pc, #108]	@ (8012c80 <xTaskIncrementTick+0x168>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d3b8      	bcc.n	8012b8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c20:	e7b5      	b.n	8012b8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c22:	4b17      	ldr	r3, [pc, #92]	@ (8012c80 <xTaskIncrementTick+0x168>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c28:	4914      	ldr	r1, [pc, #80]	@ (8012c7c <xTaskIncrementTick+0x164>)
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	009b      	lsls	r3, r3, #2
 8012c2e:	4413      	add	r3, r2
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	440b      	add	r3, r1
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2b01      	cmp	r3, #1
 8012c38:	d901      	bls.n	8012c3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012c3e:	4b11      	ldr	r3, [pc, #68]	@ (8012c84 <xTaskIncrementTick+0x16c>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d007      	beq.n	8012c56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8012c46:	2301      	movs	r3, #1
 8012c48:	617b      	str	r3, [r7, #20]
 8012c4a:	e004      	b.n	8012c56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8012c88 <xTaskIncrementTick+0x170>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	3301      	adds	r3, #1
 8012c52:	4a0d      	ldr	r2, [pc, #52]	@ (8012c88 <xTaskIncrementTick+0x170>)
 8012c54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012c56:	697b      	ldr	r3, [r7, #20]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3718      	adds	r7, #24
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	24009f3c 	.word	0x24009f3c
 8012c64:	24009f18 	.word	0x24009f18
 8012c68:	24009ecc 	.word	0x24009ecc
 8012c6c:	24009ed0 	.word	0x24009ed0
 8012c70:	24009f2c 	.word	0x24009f2c
 8012c74:	24009f34 	.word	0x24009f34
 8012c78:	24009f1c 	.word	0x24009f1c
 8012c7c:	24009a44 	.word	0x24009a44
 8012c80:	24009a40 	.word	0x24009a40
 8012c84:	24009f28 	.word	0x24009f28
 8012c88:	24009f24 	.word	0x24009f24

08012c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012c92:	4b2b      	ldr	r3, [pc, #172]	@ (8012d40 <vTaskSwitchContext+0xb4>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d003      	beq.n	8012ca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8012d44 <vTaskSwitchContext+0xb8>)
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ca0:	e047      	b.n	8012d32 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8012ca2:	4b28      	ldr	r3, [pc, #160]	@ (8012d44 <vTaskSwitchContext+0xb8>)
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ca8:	4b27      	ldr	r3, [pc, #156]	@ (8012d48 <vTaskSwitchContext+0xbc>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	60fb      	str	r3, [r7, #12]
 8012cae:	e011      	b.n	8012cd4 <vTaskSwitchContext+0x48>
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d10b      	bne.n	8012cce <vTaskSwitchContext+0x42>
	__asm volatile
 8012cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cba:	f383 8811 	msr	BASEPRI, r3
 8012cbe:	f3bf 8f6f 	isb	sy
 8012cc2:	f3bf 8f4f 	dsb	sy
 8012cc6:	607b      	str	r3, [r7, #4]
}
 8012cc8:	bf00      	nop
 8012cca:	bf00      	nop
 8012ccc:	e7fd      	b.n	8012cca <vTaskSwitchContext+0x3e>
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	3b01      	subs	r3, #1
 8012cd2:	60fb      	str	r3, [r7, #12]
 8012cd4:	491d      	ldr	r1, [pc, #116]	@ (8012d4c <vTaskSwitchContext+0xc0>)
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	4613      	mov	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	440b      	add	r3, r1
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d0e3      	beq.n	8012cb0 <vTaskSwitchContext+0x24>
 8012ce8:	68fa      	ldr	r2, [r7, #12]
 8012cea:	4613      	mov	r3, r2
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	4413      	add	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4a16      	ldr	r2, [pc, #88]	@ (8012d4c <vTaskSwitchContext+0xc0>)
 8012cf4:	4413      	add	r3, r2
 8012cf6:	60bb      	str	r3, [r7, #8]
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	685a      	ldr	r2, [r3, #4]
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	605a      	str	r2, [r3, #4]
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	685a      	ldr	r2, [r3, #4]
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	3308      	adds	r3, #8
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d104      	bne.n	8012d18 <vTaskSwitchContext+0x8c>
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	685a      	ldr	r2, [r3, #4]
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	605a      	str	r2, [r3, #4]
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8012d50 <vTaskSwitchContext+0xc4>)
 8012d20:	6013      	str	r3, [r2, #0]
 8012d22:	4a09      	ldr	r2, [pc, #36]	@ (8012d48 <vTaskSwitchContext+0xbc>)
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012d28:	4b09      	ldr	r3, [pc, #36]	@ (8012d50 <vTaskSwitchContext+0xc4>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	3354      	adds	r3, #84	@ 0x54
 8012d2e:	4a09      	ldr	r2, [pc, #36]	@ (8012d54 <vTaskSwitchContext+0xc8>)
 8012d30:	6013      	str	r3, [r2, #0]
}
 8012d32:	bf00      	nop
 8012d34:	3714      	adds	r7, #20
 8012d36:	46bd      	mov	sp, r7
 8012d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3c:	4770      	bx	lr
 8012d3e:	bf00      	nop
 8012d40:	24009f3c 	.word	0x24009f3c
 8012d44:	24009f28 	.word	0x24009f28
 8012d48:	24009f1c 	.word	0x24009f1c
 8012d4c:	24009a44 	.word	0x24009a44
 8012d50:	24009a40 	.word	0x24009a40
 8012d54:	24000060 	.word	0x24000060

08012d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d10b      	bne.n	8012d80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d6c:	f383 8811 	msr	BASEPRI, r3
 8012d70:	f3bf 8f6f 	isb	sy
 8012d74:	f3bf 8f4f 	dsb	sy
 8012d78:	60fb      	str	r3, [r7, #12]
}
 8012d7a:	bf00      	nop
 8012d7c:	bf00      	nop
 8012d7e:	e7fd      	b.n	8012d7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012d80:	4b07      	ldr	r3, [pc, #28]	@ (8012da0 <vTaskPlaceOnEventList+0x48>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	3318      	adds	r3, #24
 8012d86:	4619      	mov	r1, r3
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f7fd fffa 	bl	8010d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012d8e:	2101      	movs	r1, #1
 8012d90:	6838      	ldr	r0, [r7, #0]
 8012d92:	f000 fb97 	bl	80134c4 <prvAddCurrentTaskToDelayedList>
}
 8012d96:	bf00      	nop
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	24009a40 	.word	0x24009a40

08012da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d10b      	bne.n	8012dce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8012db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dba:	f383 8811 	msr	BASEPRI, r3
 8012dbe:	f3bf 8f6f 	isb	sy
 8012dc2:	f3bf 8f4f 	dsb	sy
 8012dc6:	617b      	str	r3, [r7, #20]
}
 8012dc8:	bf00      	nop
 8012dca:	bf00      	nop
 8012dcc:	e7fd      	b.n	8012dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012dce:	4b0a      	ldr	r3, [pc, #40]	@ (8012df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	3318      	adds	r3, #24
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	68f8      	ldr	r0, [r7, #12]
 8012dd8:	f7fd ffaf 	bl	8010d3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d002      	beq.n	8012de8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012de2:	f04f 33ff 	mov.w	r3, #4294967295
 8012de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012de8:	6879      	ldr	r1, [r7, #4]
 8012dea:	68b8      	ldr	r0, [r7, #8]
 8012dec:	f000 fb6a 	bl	80134c4 <prvAddCurrentTaskToDelayedList>
	}
 8012df0:	bf00      	nop
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	24009a40 	.word	0x24009a40

08012dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b086      	sub	sp, #24
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d10b      	bne.n	8012e2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e16:	f383 8811 	msr	BASEPRI, r3
 8012e1a:	f3bf 8f6f 	isb	sy
 8012e1e:	f3bf 8f4f 	dsb	sy
 8012e22:	60fb      	str	r3, [r7, #12]
}
 8012e24:	bf00      	nop
 8012e26:	bf00      	nop
 8012e28:	e7fd      	b.n	8012e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	3318      	adds	r3, #24
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7fd ffe0 	bl	8010df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e34:	4b1d      	ldr	r3, [pc, #116]	@ (8012eac <xTaskRemoveFromEventList+0xb0>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d11d      	bne.n	8012e78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	3304      	adds	r3, #4
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fd ffd7 	bl	8010df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e4a:	4b19      	ldr	r3, [pc, #100]	@ (8012eb0 <xTaskRemoveFromEventList+0xb4>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d903      	bls.n	8012e5a <xTaskRemoveFromEventList+0x5e>
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e56:	4a16      	ldr	r2, [pc, #88]	@ (8012eb0 <xTaskRemoveFromEventList+0xb4>)
 8012e58:	6013      	str	r3, [r2, #0]
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e5e:	4613      	mov	r3, r2
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	4413      	add	r3, r2
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	4a13      	ldr	r2, [pc, #76]	@ (8012eb4 <xTaskRemoveFromEventList+0xb8>)
 8012e68:	441a      	add	r2, r3
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	3304      	adds	r3, #4
 8012e6e:	4619      	mov	r1, r3
 8012e70:	4610      	mov	r0, r2
 8012e72:	f7fd ff62 	bl	8010d3a <vListInsertEnd>
 8012e76:	e005      	b.n	8012e84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	3318      	adds	r3, #24
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	480e      	ldr	r0, [pc, #56]	@ (8012eb8 <xTaskRemoveFromEventList+0xbc>)
 8012e80:	f7fd ff5b 	bl	8010d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e88:	4b0c      	ldr	r3, [pc, #48]	@ (8012ebc <xTaskRemoveFromEventList+0xc0>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d905      	bls.n	8012e9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012e92:	2301      	movs	r3, #1
 8012e94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012e96:	4b0a      	ldr	r3, [pc, #40]	@ (8012ec0 <xTaskRemoveFromEventList+0xc4>)
 8012e98:	2201      	movs	r2, #1
 8012e9a:	601a      	str	r2, [r3, #0]
 8012e9c:	e001      	b.n	8012ea2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012ea2:	697b      	ldr	r3, [r7, #20]
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3718      	adds	r7, #24
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	24009f3c 	.word	0x24009f3c
 8012eb0:	24009f1c 	.word	0x24009f1c
 8012eb4:	24009a44 	.word	0x24009a44
 8012eb8:	24009ed4 	.word	0x24009ed4
 8012ebc:	24009a40 	.word	0x24009a40
 8012ec0:	24009f28 	.word	0x24009f28

08012ec4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ecc:	4b06      	ldr	r3, [pc, #24]	@ (8012ee8 <vTaskInternalSetTimeOutState+0x24>)
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ed4:	4b05      	ldr	r3, [pc, #20]	@ (8012eec <vTaskInternalSetTimeOutState+0x28>)
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	605a      	str	r2, [r3, #4]
}
 8012edc:	bf00      	nop
 8012ede:	370c      	adds	r7, #12
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr
 8012ee8:	24009f2c 	.word	0x24009f2c
 8012eec:	24009f18 	.word	0x24009f18

08012ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b088      	sub	sp, #32
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d10b      	bne.n	8012f18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f04:	f383 8811 	msr	BASEPRI, r3
 8012f08:	f3bf 8f6f 	isb	sy
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	613b      	str	r3, [r7, #16]
}
 8012f12:	bf00      	nop
 8012f14:	bf00      	nop
 8012f16:	e7fd      	b.n	8012f14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d10b      	bne.n	8012f36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f22:	f383 8811 	msr	BASEPRI, r3
 8012f26:	f3bf 8f6f 	isb	sy
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	60fb      	str	r3, [r7, #12]
}
 8012f30:	bf00      	nop
 8012f32:	bf00      	nop
 8012f34:	e7fd      	b.n	8012f32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012f36:	f7fe f8b7 	bl	80110a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8012fb0 <xTaskCheckForTimeOut+0xc0>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	69ba      	ldr	r2, [r7, #24]
 8012f46:	1ad3      	subs	r3, r2, r3
 8012f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f52:	d102      	bne.n	8012f5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f54:	2300      	movs	r3, #0
 8012f56:	61fb      	str	r3, [r7, #28]
 8012f58:	e023      	b.n	8012fa2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	4b15      	ldr	r3, [pc, #84]	@ (8012fb4 <xTaskCheckForTimeOut+0xc4>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d007      	beq.n	8012f76 <xTaskCheckForTimeOut+0x86>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	69ba      	ldr	r2, [r7, #24]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d302      	bcc.n	8012f76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012f70:	2301      	movs	r3, #1
 8012f72:	61fb      	str	r3, [r7, #28]
 8012f74:	e015      	b.n	8012fa2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	697a      	ldr	r2, [r7, #20]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d20b      	bcs.n	8012f98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	1ad2      	subs	r2, r2, r3
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7ff ff99 	bl	8012ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012f92:	2300      	movs	r3, #0
 8012f94:	61fb      	str	r3, [r7, #28]
 8012f96:	e004      	b.n	8012fa2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012fa2:	f7fe f8b3 	bl	801110c <vPortExitCritical>

	return xReturn;
 8012fa6:	69fb      	ldr	r3, [r7, #28]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3720      	adds	r7, #32
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	24009f18 	.word	0x24009f18
 8012fb4:	24009f2c 	.word	0x24009f2c

08012fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012fb8:	b480      	push	{r7}
 8012fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012fbc:	4b03      	ldr	r3, [pc, #12]	@ (8012fcc <vTaskMissedYield+0x14>)
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	601a      	str	r2, [r3, #0]
}
 8012fc2:	bf00      	nop
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	24009f28 	.word	0x24009f28

08012fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012fd8:	f000 f852 	bl	8013080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012fdc:	4b06      	ldr	r3, [pc, #24]	@ (8012ff8 <prvIdleTask+0x28>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2b01      	cmp	r3, #1
 8012fe2:	d9f9      	bls.n	8012fd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012fe4:	4b05      	ldr	r3, [pc, #20]	@ (8012ffc <prvIdleTask+0x2c>)
 8012fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fea:	601a      	str	r2, [r3, #0]
 8012fec:	f3bf 8f4f 	dsb	sy
 8012ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012ff4:	e7f0      	b.n	8012fd8 <prvIdleTask+0x8>
 8012ff6:	bf00      	nop
 8012ff8:	24009a44 	.word	0x24009a44
 8012ffc:	e000ed04 	.word	0xe000ed04

08013000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013006:	2300      	movs	r3, #0
 8013008:	607b      	str	r3, [r7, #4]
 801300a:	e00c      	b.n	8013026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801300c:	687a      	ldr	r2, [r7, #4]
 801300e:	4613      	mov	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	4413      	add	r3, r2
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	4a12      	ldr	r2, [pc, #72]	@ (8013060 <prvInitialiseTaskLists+0x60>)
 8013018:	4413      	add	r3, r2
 801301a:	4618      	mov	r0, r3
 801301c:	f7fd fe60 	bl	8010ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	3301      	adds	r3, #1
 8013024:	607b      	str	r3, [r7, #4]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b37      	cmp	r3, #55	@ 0x37
 801302a:	d9ef      	bls.n	801300c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801302c:	480d      	ldr	r0, [pc, #52]	@ (8013064 <prvInitialiseTaskLists+0x64>)
 801302e:	f7fd fe57 	bl	8010ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013032:	480d      	ldr	r0, [pc, #52]	@ (8013068 <prvInitialiseTaskLists+0x68>)
 8013034:	f7fd fe54 	bl	8010ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013038:	480c      	ldr	r0, [pc, #48]	@ (801306c <prvInitialiseTaskLists+0x6c>)
 801303a:	f7fd fe51 	bl	8010ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801303e:	480c      	ldr	r0, [pc, #48]	@ (8013070 <prvInitialiseTaskLists+0x70>)
 8013040:	f7fd fe4e 	bl	8010ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013044:	480b      	ldr	r0, [pc, #44]	@ (8013074 <prvInitialiseTaskLists+0x74>)
 8013046:	f7fd fe4b 	bl	8010ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801304a:	4b0b      	ldr	r3, [pc, #44]	@ (8013078 <prvInitialiseTaskLists+0x78>)
 801304c:	4a05      	ldr	r2, [pc, #20]	@ (8013064 <prvInitialiseTaskLists+0x64>)
 801304e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013050:	4b0a      	ldr	r3, [pc, #40]	@ (801307c <prvInitialiseTaskLists+0x7c>)
 8013052:	4a05      	ldr	r2, [pc, #20]	@ (8013068 <prvInitialiseTaskLists+0x68>)
 8013054:	601a      	str	r2, [r3, #0]
}
 8013056:	bf00      	nop
 8013058:	3708      	adds	r7, #8
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
 801305e:	bf00      	nop
 8013060:	24009a44 	.word	0x24009a44
 8013064:	24009ea4 	.word	0x24009ea4
 8013068:	24009eb8 	.word	0x24009eb8
 801306c:	24009ed4 	.word	0x24009ed4
 8013070:	24009ee8 	.word	0x24009ee8
 8013074:	24009f00 	.word	0x24009f00
 8013078:	24009ecc 	.word	0x24009ecc
 801307c:	24009ed0 	.word	0x24009ed0

08013080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013086:	e019      	b.n	80130bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013088:	f7fe f80e 	bl	80110a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801308c:	4b10      	ldr	r3, [pc, #64]	@ (80130d0 <prvCheckTasksWaitingTermination+0x50>)
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	68db      	ldr	r3, [r3, #12]
 8013092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	3304      	adds	r3, #4
 8013098:	4618      	mov	r0, r3
 801309a:	f7fd feab 	bl	8010df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801309e:	4b0d      	ldr	r3, [pc, #52]	@ (80130d4 <prvCheckTasksWaitingTermination+0x54>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	3b01      	subs	r3, #1
 80130a4:	4a0b      	ldr	r2, [pc, #44]	@ (80130d4 <prvCheckTasksWaitingTermination+0x54>)
 80130a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80130a8:	4b0b      	ldr	r3, [pc, #44]	@ (80130d8 <prvCheckTasksWaitingTermination+0x58>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	3b01      	subs	r3, #1
 80130ae:	4a0a      	ldr	r2, [pc, #40]	@ (80130d8 <prvCheckTasksWaitingTermination+0x58>)
 80130b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80130b2:	f7fe f82b 	bl	801110c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 f810 	bl	80130dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130bc:	4b06      	ldr	r3, [pc, #24]	@ (80130d8 <prvCheckTasksWaitingTermination+0x58>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d1e1      	bne.n	8013088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80130c4:	bf00      	nop
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	24009ee8 	.word	0x24009ee8
 80130d4:	24009f14 	.word	0x24009f14
 80130d8:	24009efc 	.word	0x24009efc

080130dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3354      	adds	r3, #84	@ 0x54
 80130e8:	4618      	mov	r0, r3
 80130ea:	f00f f847 	bl	802217c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d108      	bne.n	801310a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7fd fccf 	bl	8010aa0 <vPortFree>
				vPortFree( pxTCB );
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7fd fccc 	bl	8010aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013108:	e019      	b.n	801313e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8013110:	2b01      	cmp	r3, #1
 8013112:	d103      	bne.n	801311c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7fd fcc3 	bl	8010aa0 <vPortFree>
	}
 801311a:	e010      	b.n	801313e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8013122:	2b02      	cmp	r3, #2
 8013124:	d00b      	beq.n	801313e <prvDeleteTCB+0x62>
	__asm volatile
 8013126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801312a:	f383 8811 	msr	BASEPRI, r3
 801312e:	f3bf 8f6f 	isb	sy
 8013132:	f3bf 8f4f 	dsb	sy
 8013136:	60fb      	str	r3, [r7, #12]
}
 8013138:	bf00      	nop
 801313a:	bf00      	nop
 801313c:	e7fd      	b.n	801313a <prvDeleteTCB+0x5e>
	}
 801313e:	bf00      	nop
 8013140:	3710      	adds	r7, #16
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
	...

08013148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013148:	b480      	push	{r7}
 801314a:	b083      	sub	sp, #12
 801314c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801314e:	4b0c      	ldr	r3, [pc, #48]	@ (8013180 <prvResetNextTaskUnblockTime+0x38>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d104      	bne.n	8013162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013158:	4b0a      	ldr	r3, [pc, #40]	@ (8013184 <prvResetNextTaskUnblockTime+0x3c>)
 801315a:	f04f 32ff 	mov.w	r2, #4294967295
 801315e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013160:	e008      	b.n	8013174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013162:	4b07      	ldr	r3, [pc, #28]	@ (8013180 <prvResetNextTaskUnblockTime+0x38>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	4a04      	ldr	r2, [pc, #16]	@ (8013184 <prvResetNextTaskUnblockTime+0x3c>)
 8013172:	6013      	str	r3, [r2, #0]
}
 8013174:	bf00      	nop
 8013176:	370c      	adds	r7, #12
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr
 8013180:	24009ecc 	.word	0x24009ecc
 8013184:	24009f34 	.word	0x24009f34

08013188 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801318e:	4b05      	ldr	r3, [pc, #20]	@ (80131a4 <xTaskGetCurrentTaskHandle+0x1c>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013194:	687b      	ldr	r3, [r7, #4]
	}
 8013196:	4618      	mov	r0, r3
 8013198:	370c      	adds	r7, #12
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr
 80131a2:	bf00      	nop
 80131a4:	24009a40 	.word	0x24009a40

080131a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80131a8:	b480      	push	{r7}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80131ae:	4b0b      	ldr	r3, [pc, #44]	@ (80131dc <xTaskGetSchedulerState+0x34>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d102      	bne.n	80131bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80131b6:	2301      	movs	r3, #1
 80131b8:	607b      	str	r3, [r7, #4]
 80131ba:	e008      	b.n	80131ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131bc:	4b08      	ldr	r3, [pc, #32]	@ (80131e0 <xTaskGetSchedulerState+0x38>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d102      	bne.n	80131ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80131c4:	2302      	movs	r3, #2
 80131c6:	607b      	str	r3, [r7, #4]
 80131c8:	e001      	b.n	80131ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80131ca:	2300      	movs	r3, #0
 80131cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80131ce:	687b      	ldr	r3, [r7, #4]
	}
 80131d0:	4618      	mov	r0, r3
 80131d2:	370c      	adds	r7, #12
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr
 80131dc:	24009f20 	.word	0x24009f20
 80131e0:	24009f3c 	.word	0x24009f3c

080131e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b084      	sub	sp, #16
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80131f0:	2300      	movs	r3, #0
 80131f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d051      	beq.n	801329e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131fe:	4b2a      	ldr	r3, [pc, #168]	@ (80132a8 <xTaskPriorityInherit+0xc4>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013204:	429a      	cmp	r2, r3
 8013206:	d241      	bcs.n	801328c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	2b00      	cmp	r3, #0
 801320e:	db06      	blt.n	801321e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013210:	4b25      	ldr	r3, [pc, #148]	@ (80132a8 <xTaskPriorityInherit+0xc4>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013216:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	6959      	ldr	r1, [r3, #20]
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013226:	4613      	mov	r3, r2
 8013228:	009b      	lsls	r3, r3, #2
 801322a:	4413      	add	r3, r2
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	4a1f      	ldr	r2, [pc, #124]	@ (80132ac <xTaskPriorityInherit+0xc8>)
 8013230:	4413      	add	r3, r2
 8013232:	4299      	cmp	r1, r3
 8013234:	d122      	bne.n	801327c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	3304      	adds	r3, #4
 801323a:	4618      	mov	r0, r3
 801323c:	f7fd fdda 	bl	8010df4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013240:	4b19      	ldr	r3, [pc, #100]	@ (80132a8 <xTaskPriorityInherit+0xc4>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801324e:	4b18      	ldr	r3, [pc, #96]	@ (80132b0 <xTaskPriorityInherit+0xcc>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	429a      	cmp	r2, r3
 8013254:	d903      	bls.n	801325e <xTaskPriorityInherit+0x7a>
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801325a:	4a15      	ldr	r2, [pc, #84]	@ (80132b0 <xTaskPriorityInherit+0xcc>)
 801325c:	6013      	str	r3, [r2, #0]
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013262:	4613      	mov	r3, r2
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	4413      	add	r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	4a10      	ldr	r2, [pc, #64]	@ (80132ac <xTaskPriorityInherit+0xc8>)
 801326c:	441a      	add	r2, r3
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	3304      	adds	r3, #4
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7fd fd60 	bl	8010d3a <vListInsertEnd>
 801327a:	e004      	b.n	8013286 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801327c:	4b0a      	ldr	r3, [pc, #40]	@ (80132a8 <xTaskPriorityInherit+0xc4>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013286:	2301      	movs	r3, #1
 8013288:	60fb      	str	r3, [r7, #12]
 801328a:	e008      	b.n	801329e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013290:	4b05      	ldr	r3, [pc, #20]	@ (80132a8 <xTaskPriorityInherit+0xc4>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013296:	429a      	cmp	r2, r3
 8013298:	d201      	bcs.n	801329e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801329a:	2301      	movs	r3, #1
 801329c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801329e:	68fb      	ldr	r3, [r7, #12]
	}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3710      	adds	r7, #16
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	24009a40 	.word	0x24009a40
 80132ac:	24009a44 	.word	0x24009a44
 80132b0:	24009f1c 	.word	0x24009f1c

080132b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80132c0:	2300      	movs	r3, #0
 80132c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d058      	beq.n	801337c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80132ca:	4b2f      	ldr	r3, [pc, #188]	@ (8013388 <xTaskPriorityDisinherit+0xd4>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	693a      	ldr	r2, [r7, #16]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d00b      	beq.n	80132ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80132d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	60fb      	str	r3, [r7, #12]
}
 80132e6:	bf00      	nop
 80132e8:	bf00      	nop
 80132ea:	e7fd      	b.n	80132e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10b      	bne.n	801330c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80132f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132f8:	f383 8811 	msr	BASEPRI, r3
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	60bb      	str	r3, [r7, #8]
}
 8013306:	bf00      	nop
 8013308:	bf00      	nop
 801330a:	e7fd      	b.n	8013308 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013310:	1e5a      	subs	r2, r3, #1
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801331e:	429a      	cmp	r2, r3
 8013320:	d02c      	beq.n	801337c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013326:	2b00      	cmp	r3, #0
 8013328:	d128      	bne.n	801337c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	3304      	adds	r3, #4
 801332e:	4618      	mov	r0, r3
 8013330:	f7fd fd60 	bl	8010df4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013340:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801334c:	4b0f      	ldr	r3, [pc, #60]	@ (801338c <xTaskPriorityDisinherit+0xd8>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	429a      	cmp	r2, r3
 8013352:	d903      	bls.n	801335c <xTaskPriorityDisinherit+0xa8>
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013358:	4a0c      	ldr	r2, [pc, #48]	@ (801338c <xTaskPriorityDisinherit+0xd8>)
 801335a:	6013      	str	r3, [r2, #0]
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013360:	4613      	mov	r3, r2
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	4413      	add	r3, r2
 8013366:	009b      	lsls	r3, r3, #2
 8013368:	4a09      	ldr	r2, [pc, #36]	@ (8013390 <xTaskPriorityDisinherit+0xdc>)
 801336a:	441a      	add	r2, r3
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	3304      	adds	r3, #4
 8013370:	4619      	mov	r1, r3
 8013372:	4610      	mov	r0, r2
 8013374:	f7fd fce1 	bl	8010d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013378:	2301      	movs	r3, #1
 801337a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801337c:	697b      	ldr	r3, [r7, #20]
	}
 801337e:	4618      	mov	r0, r3
 8013380:	3718      	adds	r7, #24
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	24009a40 	.word	0x24009a40
 801338c:	24009f1c 	.word	0x24009f1c
 8013390:	24009a44 	.word	0x24009a44

08013394 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013394:	b580      	push	{r7, lr}
 8013396:	b088      	sub	sp, #32
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80133a2:	2301      	movs	r3, #1
 80133a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d06c      	beq.n	8013486 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d10b      	bne.n	80133cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80133b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133b8:	f383 8811 	msr	BASEPRI, r3
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	f3bf 8f4f 	dsb	sy
 80133c4:	60fb      	str	r3, [r7, #12]
}
 80133c6:	bf00      	nop
 80133c8:	bf00      	nop
 80133ca:	e7fd      	b.n	80133c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133d0:	683a      	ldr	r2, [r7, #0]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d902      	bls.n	80133dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	61fb      	str	r3, [r7, #28]
 80133da:	e002      	b.n	80133e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133e6:	69fa      	ldr	r2, [r7, #28]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d04c      	beq.n	8013486 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133f0:	697a      	ldr	r2, [r7, #20]
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d147      	bne.n	8013486 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80133f6:	4b26      	ldr	r3, [pc, #152]	@ (8013490 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	69ba      	ldr	r2, [r7, #24]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d10b      	bne.n	8013418 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8013400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	60bb      	str	r3, [r7, #8]
}
 8013412:	bf00      	nop
 8013414:	bf00      	nop
 8013416:	e7fd      	b.n	8013414 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801341c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	69fa      	ldr	r2, [r7, #28]
 8013422:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	699b      	ldr	r3, [r3, #24]
 8013428:	2b00      	cmp	r3, #0
 801342a:	db04      	blt.n	8013436 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	6959      	ldr	r1, [r3, #20]
 801343a:	693a      	ldr	r2, [r7, #16]
 801343c:	4613      	mov	r3, r2
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	4413      	add	r3, r2
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4a13      	ldr	r2, [pc, #76]	@ (8013494 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013446:	4413      	add	r3, r2
 8013448:	4299      	cmp	r1, r3
 801344a:	d11c      	bne.n	8013486 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801344c:	69bb      	ldr	r3, [r7, #24]
 801344e:	3304      	adds	r3, #4
 8013450:	4618      	mov	r0, r3
 8013452:	f7fd fccf 	bl	8010df4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801345a:	4b0f      	ldr	r3, [pc, #60]	@ (8013498 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	429a      	cmp	r2, r3
 8013460:	d903      	bls.n	801346a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013466:	4a0c      	ldr	r2, [pc, #48]	@ (8013498 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013468:	6013      	str	r3, [r2, #0]
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801346e:	4613      	mov	r3, r2
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	4413      	add	r3, r2
 8013474:	009b      	lsls	r3, r3, #2
 8013476:	4a07      	ldr	r2, [pc, #28]	@ (8013494 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013478:	441a      	add	r2, r3
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	3304      	adds	r3, #4
 801347e:	4619      	mov	r1, r3
 8013480:	4610      	mov	r0, r2
 8013482:	f7fd fc5a 	bl	8010d3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013486:	bf00      	nop
 8013488:	3720      	adds	r7, #32
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	24009a40 	.word	0x24009a40
 8013494:	24009a44 	.word	0x24009a44
 8013498:	24009f1c 	.word	0x24009f1c

0801349c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801349c:	b480      	push	{r7}
 801349e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80134a0:	4b07      	ldr	r3, [pc, #28]	@ (80134c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d004      	beq.n	80134b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80134a8:	4b05      	ldr	r3, [pc, #20]	@ (80134c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134ae:	3201      	adds	r2, #1
 80134b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80134b2:	4b03      	ldr	r3, [pc, #12]	@ (80134c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80134b4:	681b      	ldr	r3, [r3, #0]
	}
 80134b6:	4618      	mov	r0, r3
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr
 80134c0:	24009a40 	.word	0x24009a40

080134c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b084      	sub	sp, #16
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134ce:	4b21      	ldr	r3, [pc, #132]	@ (8013554 <prvAddCurrentTaskToDelayedList+0x90>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134d4:	4b20      	ldr	r3, [pc, #128]	@ (8013558 <prvAddCurrentTaskToDelayedList+0x94>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	3304      	adds	r3, #4
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fd fc8a 	bl	8010df4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134e6:	d10a      	bne.n	80134fe <prvAddCurrentTaskToDelayedList+0x3a>
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d007      	beq.n	80134fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134ee:	4b1a      	ldr	r3, [pc, #104]	@ (8013558 <prvAddCurrentTaskToDelayedList+0x94>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	3304      	adds	r3, #4
 80134f4:	4619      	mov	r1, r3
 80134f6:	4819      	ldr	r0, [pc, #100]	@ (801355c <prvAddCurrentTaskToDelayedList+0x98>)
 80134f8:	f7fd fc1f 	bl	8010d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80134fc:	e026      	b.n	801354c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80134fe:	68fa      	ldr	r2, [r7, #12]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	4413      	add	r3, r2
 8013504:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013506:	4b14      	ldr	r3, [pc, #80]	@ (8013558 <prvAddCurrentTaskToDelayedList+0x94>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	68ba      	ldr	r2, [r7, #8]
 801350c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801350e:	68ba      	ldr	r2, [r7, #8]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	429a      	cmp	r2, r3
 8013514:	d209      	bcs.n	801352a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013516:	4b12      	ldr	r3, [pc, #72]	@ (8013560 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	4b0f      	ldr	r3, [pc, #60]	@ (8013558 <prvAddCurrentTaskToDelayedList+0x94>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	3304      	adds	r3, #4
 8013520:	4619      	mov	r1, r3
 8013522:	4610      	mov	r0, r2
 8013524:	f7fd fc2d 	bl	8010d82 <vListInsert>
}
 8013528:	e010      	b.n	801354c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801352a:	4b0e      	ldr	r3, [pc, #56]	@ (8013564 <prvAddCurrentTaskToDelayedList+0xa0>)
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	4b0a      	ldr	r3, [pc, #40]	@ (8013558 <prvAddCurrentTaskToDelayedList+0x94>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	3304      	adds	r3, #4
 8013534:	4619      	mov	r1, r3
 8013536:	4610      	mov	r0, r2
 8013538:	f7fd fc23 	bl	8010d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801353c:	4b0a      	ldr	r3, [pc, #40]	@ (8013568 <prvAddCurrentTaskToDelayedList+0xa4>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	68ba      	ldr	r2, [r7, #8]
 8013542:	429a      	cmp	r2, r3
 8013544:	d202      	bcs.n	801354c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013546:	4a08      	ldr	r2, [pc, #32]	@ (8013568 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	6013      	str	r3, [r2, #0]
}
 801354c:	bf00      	nop
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	24009f18 	.word	0x24009f18
 8013558:	24009a40 	.word	0x24009a40
 801355c:	24009f00 	.word	0x24009f00
 8013560:	24009ed0 	.word	0x24009ed0
 8013564:	24009ecc 	.word	0x24009ecc
 8013568:	24009f34 	.word	0x24009f34

0801356c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b08a      	sub	sp, #40	@ 0x28
 8013570:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013572:	2300      	movs	r3, #0
 8013574:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013576:	f000 fb13 	bl	8013ba0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801357a:	4b1d      	ldr	r3, [pc, #116]	@ (80135f0 <xTimerCreateTimerTask+0x84>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d021      	beq.n	80135c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013582:	2300      	movs	r3, #0
 8013584:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013586:	2300      	movs	r3, #0
 8013588:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801358a:	1d3a      	adds	r2, r7, #4
 801358c:	f107 0108 	add.w	r1, r7, #8
 8013590:	f107 030c 	add.w	r3, r7, #12
 8013594:	4618      	mov	r0, r3
 8013596:	f7fd f99b 	bl	80108d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801359a:	6879      	ldr	r1, [r7, #4]
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	9202      	str	r2, [sp, #8]
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	2302      	movs	r3, #2
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	2300      	movs	r3, #0
 80135aa:	460a      	mov	r2, r1
 80135ac:	4911      	ldr	r1, [pc, #68]	@ (80135f4 <xTimerCreateTimerTask+0x88>)
 80135ae:	4812      	ldr	r0, [pc, #72]	@ (80135f8 <xTimerCreateTimerTask+0x8c>)
 80135b0:	f7fe ff80 	bl	80124b4 <xTaskCreateStatic>
 80135b4:	4603      	mov	r3, r0
 80135b6:	4a11      	ldr	r2, [pc, #68]	@ (80135fc <xTimerCreateTimerTask+0x90>)
 80135b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80135ba:	4b10      	ldr	r3, [pc, #64]	@ (80135fc <xTimerCreateTimerTask+0x90>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d001      	beq.n	80135c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80135c2:	2301      	movs	r3, #1
 80135c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10b      	bne.n	80135e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	613b      	str	r3, [r7, #16]
}
 80135de:	bf00      	nop
 80135e0:	bf00      	nop
 80135e2:	e7fd      	b.n	80135e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80135e4:	697b      	ldr	r3, [r7, #20]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3718      	adds	r7, #24
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	24009f70 	.word	0x24009f70
 80135f4:	08024f68 	.word	0x08024f68
 80135f8:	08013739 	.word	0x08013739
 80135fc:	24009f74 	.word	0x24009f74

08013600 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b08a      	sub	sp, #40	@ 0x28
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	607a      	str	r2, [r7, #4]
 801360c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801360e:	2300      	movs	r3, #0
 8013610:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d10b      	bne.n	8013630 <xTimerGenericCommand+0x30>
	__asm volatile
 8013618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801361c:	f383 8811 	msr	BASEPRI, r3
 8013620:	f3bf 8f6f 	isb	sy
 8013624:	f3bf 8f4f 	dsb	sy
 8013628:	623b      	str	r3, [r7, #32]
}
 801362a:	bf00      	nop
 801362c:	bf00      	nop
 801362e:	e7fd      	b.n	801362c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013630:	4b19      	ldr	r3, [pc, #100]	@ (8013698 <xTimerGenericCommand+0x98>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d02a      	beq.n	801368e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2b05      	cmp	r3, #5
 8013648:	dc18      	bgt.n	801367c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801364a:	f7ff fdad 	bl	80131a8 <xTaskGetSchedulerState>
 801364e:	4603      	mov	r3, r0
 8013650:	2b02      	cmp	r3, #2
 8013652:	d109      	bne.n	8013668 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013654:	4b10      	ldr	r3, [pc, #64]	@ (8013698 <xTimerGenericCommand+0x98>)
 8013656:	6818      	ldr	r0, [r3, #0]
 8013658:	f107 0110 	add.w	r1, r7, #16
 801365c:	2300      	movs	r3, #0
 801365e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013660:	f7fe f8b0 	bl	80117c4 <xQueueGenericSend>
 8013664:	6278      	str	r0, [r7, #36]	@ 0x24
 8013666:	e012      	b.n	801368e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013668:	4b0b      	ldr	r3, [pc, #44]	@ (8013698 <xTimerGenericCommand+0x98>)
 801366a:	6818      	ldr	r0, [r3, #0]
 801366c:	f107 0110 	add.w	r1, r7, #16
 8013670:	2300      	movs	r3, #0
 8013672:	2200      	movs	r2, #0
 8013674:	f7fe f8a6 	bl	80117c4 <xQueueGenericSend>
 8013678:	6278      	str	r0, [r7, #36]	@ 0x24
 801367a:	e008      	b.n	801368e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801367c:	4b06      	ldr	r3, [pc, #24]	@ (8013698 <xTimerGenericCommand+0x98>)
 801367e:	6818      	ldr	r0, [r3, #0]
 8013680:	f107 0110 	add.w	r1, r7, #16
 8013684:	2300      	movs	r3, #0
 8013686:	683a      	ldr	r2, [r7, #0]
 8013688:	f7fe f99e 	bl	80119c8 <xQueueGenericSendFromISR>
 801368c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013690:	4618      	mov	r0, r3
 8013692:	3728      	adds	r7, #40	@ 0x28
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	24009f70 	.word	0x24009f70

0801369c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b088      	sub	sp, #32
 80136a0:	af02      	add	r7, sp, #8
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136a6:	4b23      	ldr	r3, [pc, #140]	@ (8013734 <prvProcessExpiredTimer+0x98>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	3304      	adds	r3, #4
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fd fb9d 	bl	8010df4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80136c0:	f003 0304 	and.w	r3, r3, #4
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d023      	beq.n	8013710 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	699a      	ldr	r2, [r3, #24]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	18d1      	adds	r1, r2, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	683a      	ldr	r2, [r7, #0]
 80136d4:	6978      	ldr	r0, [r7, #20]
 80136d6:	f000 f8d5 	bl	8013884 <prvInsertTimerInActiveList>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d020      	beq.n	8013722 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80136e0:	2300      	movs	r3, #0
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	2300      	movs	r3, #0
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	2100      	movs	r1, #0
 80136ea:	6978      	ldr	r0, [r7, #20]
 80136ec:	f7ff ff88 	bl	8013600 <xTimerGenericCommand>
 80136f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d114      	bne.n	8013722 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80136f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136fc:	f383 8811 	msr	BASEPRI, r3
 8013700:	f3bf 8f6f 	isb	sy
 8013704:	f3bf 8f4f 	dsb	sy
 8013708:	60fb      	str	r3, [r7, #12]
}
 801370a:	bf00      	nop
 801370c:	bf00      	nop
 801370e:	e7fd      	b.n	801370c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013716:	f023 0301 	bic.w	r3, r3, #1
 801371a:	b2da      	uxtb	r2, r3
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	6a1b      	ldr	r3, [r3, #32]
 8013726:	6978      	ldr	r0, [r7, #20]
 8013728:	4798      	blx	r3
}
 801372a:	bf00      	nop
 801372c:	3718      	adds	r7, #24
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	24009f68 	.word	0x24009f68

08013738 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013740:	f107 0308 	add.w	r3, r7, #8
 8013744:	4618      	mov	r0, r3
 8013746:	f000 f859 	bl	80137fc <prvGetNextExpireTime>
 801374a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	4619      	mov	r1, r3
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f000 f805 	bl	8013760 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013756:	f000 f8d7 	bl	8013908 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801375a:	bf00      	nop
 801375c:	e7f0      	b.n	8013740 <prvTimerTask+0x8>
	...

08013760 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801376a:	f7ff f907 	bl	801297c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801376e:	f107 0308 	add.w	r3, r7, #8
 8013772:	4618      	mov	r0, r3
 8013774:	f000 f866 	bl	8013844 <prvSampleTimeNow>
 8013778:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d130      	bne.n	80137e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d10a      	bne.n	801379c <prvProcessTimerOrBlockTask+0x3c>
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	429a      	cmp	r2, r3
 801378c:	d806      	bhi.n	801379c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801378e:	f7ff f903 	bl	8012998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013792:	68f9      	ldr	r1, [r7, #12]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7ff ff81 	bl	801369c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801379a:	e024      	b.n	80137e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d008      	beq.n	80137b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80137a2:	4b13      	ldr	r3, [pc, #76]	@ (80137f0 <prvProcessTimerOrBlockTask+0x90>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d101      	bne.n	80137b0 <prvProcessTimerOrBlockTask+0x50>
 80137ac:	2301      	movs	r3, #1
 80137ae:	e000      	b.n	80137b2 <prvProcessTimerOrBlockTask+0x52>
 80137b0:	2300      	movs	r3, #0
 80137b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80137b4:	4b0f      	ldr	r3, [pc, #60]	@ (80137f4 <prvProcessTimerOrBlockTask+0x94>)
 80137b6:	6818      	ldr	r0, [r3, #0]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	683a      	ldr	r2, [r7, #0]
 80137c0:	4619      	mov	r1, r3
 80137c2:	f7fe fe43 	bl	801244c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80137c6:	f7ff f8e7 	bl	8012998 <xTaskResumeAll>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d10a      	bne.n	80137e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80137d0:	4b09      	ldr	r3, [pc, #36]	@ (80137f8 <prvProcessTimerOrBlockTask+0x98>)
 80137d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137d6:	601a      	str	r2, [r3, #0]
 80137d8:	f3bf 8f4f 	dsb	sy
 80137dc:	f3bf 8f6f 	isb	sy
}
 80137e0:	e001      	b.n	80137e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80137e2:	f7ff f8d9 	bl	8012998 <xTaskResumeAll>
}
 80137e6:	bf00      	nop
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	24009f6c 	.word	0x24009f6c
 80137f4:	24009f70 	.word	0x24009f70
 80137f8:	e000ed04 	.word	0xe000ed04

080137fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80137fc:	b480      	push	{r7}
 80137fe:	b085      	sub	sp, #20
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013804:	4b0e      	ldr	r3, [pc, #56]	@ (8013840 <prvGetNextExpireTime+0x44>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d101      	bne.n	8013812 <prvGetNextExpireTime+0x16>
 801380e:	2201      	movs	r2, #1
 8013810:	e000      	b.n	8013814 <prvGetNextExpireTime+0x18>
 8013812:	2200      	movs	r2, #0
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d105      	bne.n	801382c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013820:	4b07      	ldr	r3, [pc, #28]	@ (8013840 <prvGetNextExpireTime+0x44>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	60fb      	str	r3, [r7, #12]
 801382a:	e001      	b.n	8013830 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801382c:	2300      	movs	r3, #0
 801382e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013830:	68fb      	ldr	r3, [r7, #12]
}
 8013832:	4618      	mov	r0, r3
 8013834:	3714      	adds	r7, #20
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop
 8013840:	24009f68 	.word	0x24009f68

08013844 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b084      	sub	sp, #16
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801384c:	f7ff f942 	bl	8012ad4 <xTaskGetTickCount>
 8013850:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013852:	4b0b      	ldr	r3, [pc, #44]	@ (8013880 <prvSampleTimeNow+0x3c>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	429a      	cmp	r2, r3
 801385a:	d205      	bcs.n	8013868 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801385c:	f000 f93a 	bl	8013ad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2201      	movs	r2, #1
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	e002      	b.n	801386e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2200      	movs	r2, #0
 801386c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801386e:	4a04      	ldr	r2, [pc, #16]	@ (8013880 <prvSampleTimeNow+0x3c>)
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013874:	68fb      	ldr	r3, [r7, #12]
}
 8013876:	4618      	mov	r0, r3
 8013878:	3710      	adds	r7, #16
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	24009f78 	.word	0x24009f78

08013884 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b086      	sub	sp, #24
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	60b9      	str	r1, [r7, #8]
 801388e:	607a      	str	r2, [r7, #4]
 8013890:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013892:	2300      	movs	r3, #0
 8013894:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	68ba      	ldr	r2, [r7, #8]
 801389a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	68fa      	ldr	r2, [r7, #12]
 80138a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80138a2:	68ba      	ldr	r2, [r7, #8]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d812      	bhi.n	80138d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	1ad2      	subs	r2, r2, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	699b      	ldr	r3, [r3, #24]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d302      	bcc.n	80138be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80138b8:	2301      	movs	r3, #1
 80138ba:	617b      	str	r3, [r7, #20]
 80138bc:	e01b      	b.n	80138f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80138be:	4b10      	ldr	r3, [pc, #64]	@ (8013900 <prvInsertTimerInActiveList+0x7c>)
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	3304      	adds	r3, #4
 80138c6:	4619      	mov	r1, r3
 80138c8:	4610      	mov	r0, r2
 80138ca:	f7fd fa5a 	bl	8010d82 <vListInsert>
 80138ce:	e012      	b.n	80138f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d206      	bcs.n	80138e6 <prvInsertTimerInActiveList+0x62>
 80138d8:	68ba      	ldr	r2, [r7, #8]
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d302      	bcc.n	80138e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80138e0:	2301      	movs	r3, #1
 80138e2:	617b      	str	r3, [r7, #20]
 80138e4:	e007      	b.n	80138f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138e6:	4b07      	ldr	r3, [pc, #28]	@ (8013904 <prvInsertTimerInActiveList+0x80>)
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	3304      	adds	r3, #4
 80138ee:	4619      	mov	r1, r3
 80138f0:	4610      	mov	r0, r2
 80138f2:	f7fd fa46 	bl	8010d82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80138f6:	697b      	ldr	r3, [r7, #20]
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3718      	adds	r7, #24
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	24009f6c 	.word	0x24009f6c
 8013904:	24009f68 	.word	0x24009f68

08013908 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b08e      	sub	sp, #56	@ 0x38
 801390c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801390e:	e0ce      	b.n	8013aae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	da19      	bge.n	801394a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013916:	1d3b      	adds	r3, r7, #4
 8013918:	3304      	adds	r3, #4
 801391a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801391e:	2b00      	cmp	r3, #0
 8013920:	d10b      	bne.n	801393a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8013922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013926:	f383 8811 	msr	BASEPRI, r3
 801392a:	f3bf 8f6f 	isb	sy
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	61fb      	str	r3, [r7, #28]
}
 8013934:	bf00      	nop
 8013936:	bf00      	nop
 8013938:	e7fd      	b.n	8013936 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013940:	6850      	ldr	r0, [r2, #4]
 8013942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013944:	6892      	ldr	r2, [r2, #8]
 8013946:	4611      	mov	r1, r2
 8013948:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	f2c0 80ae 	blt.w	8013aae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d004      	beq.n	8013968 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013960:	3304      	adds	r3, #4
 8013962:	4618      	mov	r0, r3
 8013964:	f7fd fa46 	bl	8010df4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013968:	463b      	mov	r3, r7
 801396a:	4618      	mov	r0, r3
 801396c:	f7ff ff6a 	bl	8013844 <prvSampleTimeNow>
 8013970:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b09      	cmp	r3, #9
 8013976:	f200 8097 	bhi.w	8013aa8 <prvProcessReceivedCommands+0x1a0>
 801397a:	a201      	add	r2, pc, #4	@ (adr r2, 8013980 <prvProcessReceivedCommands+0x78>)
 801397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013980:	080139a9 	.word	0x080139a9
 8013984:	080139a9 	.word	0x080139a9
 8013988:	080139a9 	.word	0x080139a9
 801398c:	08013a1f 	.word	0x08013a1f
 8013990:	08013a33 	.word	0x08013a33
 8013994:	08013a7f 	.word	0x08013a7f
 8013998:	080139a9 	.word	0x080139a9
 801399c:	080139a9 	.word	0x080139a9
 80139a0:	08013a1f 	.word	0x08013a1f
 80139a4:	08013a33 	.word	0x08013a33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80139a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80139ae:	f043 0301 	orr.w	r3, r3, #1
 80139b2:	b2da      	uxtb	r2, r3
 80139b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80139ba:	68ba      	ldr	r2, [r7, #8]
 80139bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139be:	699b      	ldr	r3, [r3, #24]
 80139c0:	18d1      	adds	r1, r2, r3
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80139c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139c8:	f7ff ff5c 	bl	8013884 <prvInsertTimerInActiveList>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d06c      	beq.n	8013aac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139d4:	6a1b      	ldr	r3, [r3, #32]
 80139d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80139e0:	f003 0304 	and.w	r3, r3, #4
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d061      	beq.n	8013aac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80139e8:	68ba      	ldr	r2, [r7, #8]
 80139ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ec:	699b      	ldr	r3, [r3, #24]
 80139ee:	441a      	add	r2, r3
 80139f0:	2300      	movs	r3, #0
 80139f2:	9300      	str	r3, [sp, #0]
 80139f4:	2300      	movs	r3, #0
 80139f6:	2100      	movs	r1, #0
 80139f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139fa:	f7ff fe01 	bl	8013600 <xTimerGenericCommand>
 80139fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a00:	6a3b      	ldr	r3, [r7, #32]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d152      	bne.n	8013aac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8013a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a0a:	f383 8811 	msr	BASEPRI, r3
 8013a0e:	f3bf 8f6f 	isb	sy
 8013a12:	f3bf 8f4f 	dsb	sy
 8013a16:	61bb      	str	r3, [r7, #24]
}
 8013a18:	bf00      	nop
 8013a1a:	bf00      	nop
 8013a1c:	e7fd      	b.n	8013a1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013a24:	f023 0301 	bic.w	r3, r3, #1
 8013a28:	b2da      	uxtb	r2, r3
 8013a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013a30:	e03d      	b.n	8013aae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013a38:	f043 0301 	orr.w	r3, r3, #1
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013a44:	68ba      	ldr	r2, [r7, #8]
 8013a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a4c:	699b      	ldr	r3, [r3, #24]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10b      	bne.n	8013a6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8013a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a56:	f383 8811 	msr	BASEPRI, r3
 8013a5a:	f3bf 8f6f 	isb	sy
 8013a5e:	f3bf 8f4f 	dsb	sy
 8013a62:	617b      	str	r3, [r7, #20]
}
 8013a64:	bf00      	nop
 8013a66:	bf00      	nop
 8013a68:	e7fd      	b.n	8013a66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a6c:	699a      	ldr	r2, [r3, #24]
 8013a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a70:	18d1      	adds	r1, r2, r3
 8013a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a78:	f7ff ff04 	bl	8013884 <prvInsertTimerInActiveList>
					break;
 8013a7c:	e017      	b.n	8013aae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013a84:	f003 0302 	and.w	r3, r3, #2
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d103      	bne.n	8013a94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a8e:	f7fd f807 	bl	8010aa0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013a92:	e00c      	b.n	8013aae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013a9a:	f023 0301 	bic.w	r3, r3, #1
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013aa6:	e002      	b.n	8013aae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8013aa8:	bf00      	nop
 8013aaa:	e000      	b.n	8013aae <prvProcessReceivedCommands+0x1a6>
					break;
 8013aac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013aae:	4b08      	ldr	r3, [pc, #32]	@ (8013ad0 <prvProcessReceivedCommands+0x1c8>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	1d39      	adds	r1, r7, #4
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fe f8b4 	bl	8011c24 <xQueueReceive>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f47f af26 	bne.w	8013910 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013ac4:	bf00      	nop
 8013ac6:	bf00      	nop
 8013ac8:	3730      	adds	r7, #48	@ 0x30
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	24009f70 	.word	0x24009f70

08013ad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b088      	sub	sp, #32
 8013ad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ada:	e049      	b.n	8013b70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013adc:	4b2e      	ldr	r3, [pc, #184]	@ (8013b98 <prvSwitchTimerLists+0xc4>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	68db      	ldr	r3, [r3, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8013b98 <prvSwitchTimerLists+0xc4>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	3304      	adds	r3, #4
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fd f97d 	bl	8010df4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	6a1b      	ldr	r3, [r3, #32]
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b08:	f003 0304 	and.w	r3, r3, #4
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d02f      	beq.n	8013b70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	693a      	ldr	r2, [r7, #16]
 8013b16:	4413      	add	r3, r2
 8013b18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013b1a:	68ba      	ldr	r2, [r7, #8]
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d90e      	bls.n	8013b40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	68ba      	ldr	r2, [r7, #8]
 8013b26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	68fa      	ldr	r2, [r7, #12]
 8013b2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013b98 <prvSwitchTimerLists+0xc4>)
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	3304      	adds	r3, #4
 8013b36:	4619      	mov	r1, r3
 8013b38:	4610      	mov	r0, r2
 8013b3a:	f7fd f922 	bl	8010d82 <vListInsert>
 8013b3e:	e017      	b.n	8013b70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b40:	2300      	movs	r3, #0
 8013b42:	9300      	str	r3, [sp, #0]
 8013b44:	2300      	movs	r3, #0
 8013b46:	693a      	ldr	r2, [r7, #16]
 8013b48:	2100      	movs	r1, #0
 8013b4a:	68f8      	ldr	r0, [r7, #12]
 8013b4c:	f7ff fd58 	bl	8013600 <xTimerGenericCommand>
 8013b50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d10b      	bne.n	8013b70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8013b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b5c:	f383 8811 	msr	BASEPRI, r3
 8013b60:	f3bf 8f6f 	isb	sy
 8013b64:	f3bf 8f4f 	dsb	sy
 8013b68:	603b      	str	r3, [r7, #0]
}
 8013b6a:	bf00      	nop
 8013b6c:	bf00      	nop
 8013b6e:	e7fd      	b.n	8013b6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b70:	4b09      	ldr	r3, [pc, #36]	@ (8013b98 <prvSwitchTimerLists+0xc4>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d1b0      	bne.n	8013adc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013b7a:	4b07      	ldr	r3, [pc, #28]	@ (8013b98 <prvSwitchTimerLists+0xc4>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013b80:	4b06      	ldr	r3, [pc, #24]	@ (8013b9c <prvSwitchTimerLists+0xc8>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a04      	ldr	r2, [pc, #16]	@ (8013b98 <prvSwitchTimerLists+0xc4>)
 8013b86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013b88:	4a04      	ldr	r2, [pc, #16]	@ (8013b9c <prvSwitchTimerLists+0xc8>)
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	6013      	str	r3, [r2, #0]
}
 8013b8e:	bf00      	nop
 8013b90:	3718      	adds	r7, #24
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	24009f68 	.word	0x24009f68
 8013b9c:	24009f6c 	.word	0x24009f6c

08013ba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013ba6:	f7fd fa7f 	bl	80110a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013baa:	4b15      	ldr	r3, [pc, #84]	@ (8013c00 <prvCheckForValidListAndQueue+0x60>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d120      	bne.n	8013bf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013bb2:	4814      	ldr	r0, [pc, #80]	@ (8013c04 <prvCheckForValidListAndQueue+0x64>)
 8013bb4:	f7fd f894 	bl	8010ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013bb8:	4813      	ldr	r0, [pc, #76]	@ (8013c08 <prvCheckForValidListAndQueue+0x68>)
 8013bba:	f7fd f891 	bl	8010ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013bbe:	4b13      	ldr	r3, [pc, #76]	@ (8013c0c <prvCheckForValidListAndQueue+0x6c>)
 8013bc0:	4a10      	ldr	r2, [pc, #64]	@ (8013c04 <prvCheckForValidListAndQueue+0x64>)
 8013bc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013bc4:	4b12      	ldr	r3, [pc, #72]	@ (8013c10 <prvCheckForValidListAndQueue+0x70>)
 8013bc6:	4a10      	ldr	r2, [pc, #64]	@ (8013c08 <prvCheckForValidListAndQueue+0x68>)
 8013bc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013bca:	2300      	movs	r3, #0
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	4b11      	ldr	r3, [pc, #68]	@ (8013c14 <prvCheckForValidListAndQueue+0x74>)
 8013bd0:	4a11      	ldr	r2, [pc, #68]	@ (8013c18 <prvCheckForValidListAndQueue+0x78>)
 8013bd2:	2110      	movs	r1, #16
 8013bd4:	200a      	movs	r0, #10
 8013bd6:	f7fd fbf3 	bl	80113c0 <xQueueGenericCreateStatic>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	4a08      	ldr	r2, [pc, #32]	@ (8013c00 <prvCheckForValidListAndQueue+0x60>)
 8013bde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013be0:	4b07      	ldr	r3, [pc, #28]	@ (8013c00 <prvCheckForValidListAndQueue+0x60>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d005      	beq.n	8013bf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013be8:	4b05      	ldr	r3, [pc, #20]	@ (8013c00 <prvCheckForValidListAndQueue+0x60>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	490b      	ldr	r1, [pc, #44]	@ (8013c1c <prvCheckForValidListAndQueue+0x7c>)
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7fe fbd8 	bl	80123a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013bf4:	f7fd fa8a 	bl	801110c <vPortExitCritical>
}
 8013bf8:	bf00      	nop
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	24009f70 	.word	0x24009f70
 8013c04:	24009f40 	.word	0x24009f40
 8013c08:	24009f54 	.word	0x24009f54
 8013c0c:	24009f68 	.word	0x24009f68
 8013c10:	24009f6c 	.word	0x24009f6c
 8013c14:	2400a01c 	.word	0x2400a01c
 8013c18:	24009f7c 	.word	0x24009f7c
 8013c1c:	08024f70 	.word	0x08024f70

08013c20 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	330c      	adds	r3, #12
 8013c30:	461a      	mov	r2, r3
 8013c32:	6839      	ldr	r1, [r7, #0]
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f00c fc53 	bl	80204e0 <tcpip_send_msg_wait_sem>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8013c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d103      	bne.n	8013c4e <netconn_apimsg+0x2e>
    return apimsg->err;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013c4c:	e001      	b.n	8013c52 <netconn_apimsg+0x32>
  }
  return err;
 8013c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b084      	sub	sp, #16
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	60f8      	str	r0, [r7, #12]
 8013c62:	60b9      	str	r1, [r7, #8]
 8013c64:	607a      	str	r2, [r7, #4]
 8013c66:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d011      	beq.n	8013c92 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d002      	beq.n	8013c7a <netconn_sendto+0x20>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	e000      	b.n	8013c7c <netconn_sendto+0x22>
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	68ba      	ldr	r2, [r7, #8]
 8013c7e:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	887a      	ldrh	r2, [r7, #2]
 8013c84:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 8013c86:	68b9      	ldr	r1, [r7, #8]
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	f000 f809 	bl	8013ca0 <netconn_send>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	e001      	b.n	8013c96 <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8013c92:	f06f 0305 	mvn.w	r3, #5
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
	...

08013ca0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b08c      	sub	sp, #48	@ 0x30
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d109      	bne.n	8013cc4 <netconn_send+0x24>
 8013cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8013cec <netconn_send+0x4c>)
 8013cb2:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8013cb6:	490e      	ldr	r1, [pc, #56]	@ (8013cf0 <netconn_send+0x50>)
 8013cb8:	480e      	ldr	r0, [pc, #56]	@ (8013cf4 <netconn_send+0x54>)
 8013cba:	f00e f877 	bl	8021dac <iprintf>
 8013cbe:	f06f 030f 	mvn.w	r3, #15
 8013cc2:	e00e      	b.n	8013ce2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8013ccc:	f107 030c 	add.w	r3, r7, #12
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4809      	ldr	r0, [pc, #36]	@ (8013cf8 <netconn_send+0x58>)
 8013cd4:	f7ff ffa4 	bl	8013c20 <netconn_apimsg>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013cde:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3730      	adds	r7, #48	@ 0x30
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	08024f78 	.word	0x08024f78
 8013cf0:	08025260 	.word	0x08025260
 8013cf4:	08024ffc 	.word	0x08024ffc
 8013cf8:	08013d33 	.word	0x08013d33

08013cfc <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d101      	bne.n	8013d0e <netconn_err+0x12>
    return ERR_OK;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	e00d      	b.n	8013d2a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8013d0e:	f006 fa23 	bl	801a158 <sys_arch_protect>
 8013d12:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	7a1b      	ldrb	r3, [r3, #8]
 8013d18:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f006 fa27 	bl	801a174 <sys_arch_unprotect>
  return err;
 8013d26:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}

08013d32 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b084      	sub	sp, #16
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7ff ffda 	bl	8013cfc <netconn_err>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8013d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d134      	bne.n	8013dbe <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d02d      	beq.n	8013dba <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013d68:	2b20      	cmp	r3, #32
 8013d6a:	d123      	bne.n	8013db4 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	689b      	ldr	r3, [r3, #8]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d10c      	bne.n	8013d90 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	685a      	ldr	r2, [r3, #4]
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	689b      	ldr	r3, [r3, #8]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	4619      	mov	r1, r3
 8013d84:	4610      	mov	r0, r2
 8013d86:	f00c ffad 	bl	8020ce4 <udp_send>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8013d8e:	e016      	b.n	8013dbe <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	6858      	ldr	r0, [r3, #4]
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	6819      	ldr	r1, [r3, #0]
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	689b      	ldr	r3, [r3, #8]
 8013da0:	f103 0208 	add.w	r2, r3, #8
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	899b      	ldrh	r3, [r3, #12]
 8013daa:	f00c ffcf 	bl	8020d4c <udp_sendto>
 8013dae:	4603      	mov	r3, r0
 8013db0:	73fb      	strb	r3, [r7, #15]
          break;
 8013db2:	e004      	b.n	8013dbe <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8013db4:	23f5      	movs	r3, #245	@ 0xf5
 8013db6:	73fb      	strb	r3, [r7, #15]
          break;
 8013db8:	e001      	b.n	8013dbe <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8013dba:	23f5      	movs	r3, #245	@ 0xf5
 8013dbc:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	7bfa      	ldrb	r2, [r7, #15]
 8013dc2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8013dc4:	bf00      	nop
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013dd6:	88fb      	ldrh	r3, [r7, #6]
 8013dd8:	021b      	lsls	r3, r3, #8
 8013dda:	b21a      	sxth	r2, r3
 8013ddc:	88fb      	ldrh	r3, [r7, #6]
 8013dde:	0a1b      	lsrs	r3, r3, #8
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	b21b      	sxth	r3, r3
 8013de4:	4313      	orrs	r3, r2
 8013de6:	b21b      	sxth	r3, r3
 8013de8:	b29b      	uxth	r3, r3
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	370c      	adds	r7, #12
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr

08013df6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013df6:	b480      	push	{r7}
 8013df8:	b083      	sub	sp, #12
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	061a      	lsls	r2, r3, #24
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	021b      	lsls	r3, r3, #8
 8013e06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e0a:	431a      	orrs	r2, r3
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	0a1b      	lsrs	r3, r3, #8
 8013e10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e14:	431a      	orrs	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	0e1b      	lsrs	r3, r3, #24
 8013e1a:	4313      	orrs	r3, r2
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	370c      	adds	r7, #12
 8013e20:	46bd      	mov	sp, r7
 8013e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e26:	4770      	bx	lr

08013e28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e30:	4915      	ldr	r1, [pc, #84]	@ (8013e88 <etharp_free_entry+0x60>)
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	4613      	mov	r3, r2
 8013e36:	005b      	lsls	r3, r3, #1
 8013e38:	4413      	add	r3, r2
 8013e3a:	00db      	lsls	r3, r3, #3
 8013e3c:	440b      	add	r3, r1
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d013      	beq.n	8013e6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e44:	4910      	ldr	r1, [pc, #64]	@ (8013e88 <etharp_free_entry+0x60>)
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	4613      	mov	r3, r2
 8013e4a:	005b      	lsls	r3, r3, #1
 8013e4c:	4413      	add	r3, r2
 8013e4e:	00db      	lsls	r3, r3, #3
 8013e50:	440b      	add	r3, r1
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f005 fd9d 	bl	8019994 <pbuf_free>
    arp_table[i].q = NULL;
 8013e5a:	490b      	ldr	r1, [pc, #44]	@ (8013e88 <etharp_free_entry+0x60>)
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	4613      	mov	r3, r2
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	4413      	add	r3, r2
 8013e64:	00db      	lsls	r3, r3, #3
 8013e66:	440b      	add	r3, r1
 8013e68:	2200      	movs	r2, #0
 8013e6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013e6c:	4906      	ldr	r1, [pc, #24]	@ (8013e88 <etharp_free_entry+0x60>)
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	4613      	mov	r3, r2
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	4413      	add	r3, r2
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	440b      	add	r3, r1
 8013e7a:	3314      	adds	r3, #20
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013e80:	bf00      	nop
 8013e82:	3708      	adds	r7, #8
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	2400a06c 	.word	0x2400a06c

08013e8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b082      	sub	sp, #8
 8013e90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e92:	2300      	movs	r3, #0
 8013e94:	607b      	str	r3, [r7, #4]
 8013e96:	e096      	b.n	8013fc6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013e98:	494f      	ldr	r1, [pc, #316]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	4413      	add	r3, r2
 8013ea2:	00db      	lsls	r3, r3, #3
 8013ea4:	440b      	add	r3, r1
 8013ea6:	3314      	adds	r3, #20
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013eac:	78fb      	ldrb	r3, [r7, #3]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	f000 8086 	beq.w	8013fc0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013eb4:	4948      	ldr	r1, [pc, #288]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	440b      	add	r3, r1
 8013ec2:	3312      	adds	r3, #18
 8013ec4:	881b      	ldrh	r3, [r3, #0]
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	b298      	uxth	r0, r3
 8013eca:	4943      	ldr	r1, [pc, #268]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	4613      	mov	r3, r2
 8013ed0:	005b      	lsls	r3, r3, #1
 8013ed2:	4413      	add	r3, r2
 8013ed4:	00db      	lsls	r3, r3, #3
 8013ed6:	440b      	add	r3, r1
 8013ed8:	3312      	adds	r3, #18
 8013eda:	4602      	mov	r2, r0
 8013edc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ede:	493e      	ldr	r1, [pc, #248]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	4613      	mov	r3, r2
 8013ee4:	005b      	lsls	r3, r3, #1
 8013ee6:	4413      	add	r3, r2
 8013ee8:	00db      	lsls	r3, r3, #3
 8013eea:	440b      	add	r3, r1
 8013eec:	3312      	adds	r3, #18
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013ef4:	d215      	bcs.n	8013f22 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013ef6:	4938      	ldr	r1, [pc, #224]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	4613      	mov	r3, r2
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	4413      	add	r3, r2
 8013f00:	00db      	lsls	r3, r3, #3
 8013f02:	440b      	add	r3, r1
 8013f04:	3314      	adds	r3, #20
 8013f06:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f08:	2b01      	cmp	r3, #1
 8013f0a:	d10e      	bne.n	8013f2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f0c:	4932      	ldr	r1, [pc, #200]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	4613      	mov	r3, r2
 8013f12:	005b      	lsls	r3, r3, #1
 8013f14:	4413      	add	r3, r2
 8013f16:	00db      	lsls	r3, r3, #3
 8013f18:	440b      	add	r3, r1
 8013f1a:	3312      	adds	r3, #18
 8013f1c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f1e:	2b04      	cmp	r3, #4
 8013f20:	d903      	bls.n	8013f2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f7ff ff80 	bl	8013e28 <etharp_free_entry>
 8013f28:	e04a      	b.n	8013fc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f2a:	492b      	ldr	r1, [pc, #172]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	005b      	lsls	r3, r3, #1
 8013f32:	4413      	add	r3, r2
 8013f34:	00db      	lsls	r3, r3, #3
 8013f36:	440b      	add	r3, r1
 8013f38:	3314      	adds	r3, #20
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	2b03      	cmp	r3, #3
 8013f3e:	d10a      	bne.n	8013f56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f40:	4925      	ldr	r1, [pc, #148]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f42:	687a      	ldr	r2, [r7, #4]
 8013f44:	4613      	mov	r3, r2
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	4413      	add	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	440b      	add	r3, r1
 8013f4e:	3314      	adds	r3, #20
 8013f50:	2204      	movs	r2, #4
 8013f52:	701a      	strb	r2, [r3, #0]
 8013f54:	e034      	b.n	8013fc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f56:	4920      	ldr	r1, [pc, #128]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	440b      	add	r3, r1
 8013f64:	3314      	adds	r3, #20
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	2b04      	cmp	r3, #4
 8013f6a:	d10a      	bne.n	8013f82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013f6c:	491a      	ldr	r1, [pc, #104]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	440b      	add	r3, r1
 8013f7a:	3314      	adds	r3, #20
 8013f7c:	2202      	movs	r2, #2
 8013f7e:	701a      	strb	r2, [r3, #0]
 8013f80:	e01e      	b.n	8013fc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f82:	4915      	ldr	r1, [pc, #84]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	4613      	mov	r3, r2
 8013f88:	005b      	lsls	r3, r3, #1
 8013f8a:	4413      	add	r3, r2
 8013f8c:	00db      	lsls	r3, r3, #3
 8013f8e:	440b      	add	r3, r1
 8013f90:	3314      	adds	r3, #20
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d113      	bne.n	8013fc0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013f98:	490f      	ldr	r1, [pc, #60]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	4613      	mov	r3, r2
 8013f9e:	005b      	lsls	r3, r3, #1
 8013fa0:	4413      	add	r3, r2
 8013fa2:	00db      	lsls	r3, r3, #3
 8013fa4:	440b      	add	r3, r1
 8013fa6:	3308      	adds	r3, #8
 8013fa8:	6818      	ldr	r0, [r3, #0]
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	4613      	mov	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	4a08      	ldr	r2, [pc, #32]	@ (8013fd8 <etharp_tmr+0x14c>)
 8013fb6:	4413      	add	r3, r2
 8013fb8:	3304      	adds	r3, #4
 8013fba:	4619      	mov	r1, r3
 8013fbc:	f000 fe72 	bl	8014ca4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	3301      	adds	r3, #1
 8013fc4:	607b      	str	r3, [r7, #4]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2b09      	cmp	r3, #9
 8013fca:	f77f af65 	ble.w	8013e98 <etharp_tmr+0xc>
      }
    }
  }
}
 8013fce:	bf00      	nop
 8013fd0:	bf00      	nop
 8013fd2:	3708      	adds	r7, #8
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	2400a06c 	.word	0x2400a06c

08013fdc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b08a      	sub	sp, #40	@ 0x28
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	460b      	mov	r3, r1
 8013fe6:	607a      	str	r2, [r7, #4]
 8013fe8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013fea:	230a      	movs	r3, #10
 8013fec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013fee:	230a      	movs	r3, #10
 8013ff0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013ff2:	230a      	movs	r3, #10
 8013ff4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013ffa:	230a      	movs	r3, #10
 8013ffc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013ffe:	2300      	movs	r3, #0
 8014000:	83bb      	strh	r3, [r7, #28]
 8014002:	2300      	movs	r3, #0
 8014004:	837b      	strh	r3, [r7, #26]
 8014006:	2300      	movs	r3, #0
 8014008:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801400a:	2300      	movs	r3, #0
 801400c:	843b      	strh	r3, [r7, #32]
 801400e:	e0ae      	b.n	801416e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014014:	49a6      	ldr	r1, [pc, #664]	@ (80142b0 <etharp_find_entry+0x2d4>)
 8014016:	4613      	mov	r3, r2
 8014018:	005b      	lsls	r3, r3, #1
 801401a:	4413      	add	r3, r2
 801401c:	00db      	lsls	r3, r3, #3
 801401e:	440b      	add	r3, r1
 8014020:	3314      	adds	r3, #20
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014026:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801402a:	2b0a      	cmp	r3, #10
 801402c:	d105      	bne.n	801403a <etharp_find_entry+0x5e>
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d102      	bne.n	801403a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014034:	8c3b      	ldrh	r3, [r7, #32]
 8014036:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014038:	e095      	b.n	8014166 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801403a:	7dfb      	ldrb	r3, [r7, #23]
 801403c:	2b00      	cmp	r3, #0
 801403e:	f000 8092 	beq.w	8014166 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014042:	7dfb      	ldrb	r3, [r7, #23]
 8014044:	2b01      	cmp	r3, #1
 8014046:	d009      	beq.n	801405c <etharp_find_entry+0x80>
 8014048:	7dfb      	ldrb	r3, [r7, #23]
 801404a:	2b01      	cmp	r3, #1
 801404c:	d806      	bhi.n	801405c <etharp_find_entry+0x80>
 801404e:	4b99      	ldr	r3, [pc, #612]	@ (80142b4 <etharp_find_entry+0x2d8>)
 8014050:	f240 1223 	movw	r2, #291	@ 0x123
 8014054:	4998      	ldr	r1, [pc, #608]	@ (80142b8 <etharp_find_entry+0x2dc>)
 8014056:	4899      	ldr	r0, [pc, #612]	@ (80142bc <etharp_find_entry+0x2e0>)
 8014058:	f00d fea8 	bl	8021dac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d020      	beq.n	80140a4 <etharp_find_entry+0xc8>
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	6819      	ldr	r1, [r3, #0]
 8014066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801406a:	4891      	ldr	r0, [pc, #580]	@ (80142b0 <etharp_find_entry+0x2d4>)
 801406c:	4613      	mov	r3, r2
 801406e:	005b      	lsls	r3, r3, #1
 8014070:	4413      	add	r3, r2
 8014072:	00db      	lsls	r3, r3, #3
 8014074:	4403      	add	r3, r0
 8014076:	3304      	adds	r3, #4
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	4299      	cmp	r1, r3
 801407c:	d112      	bne.n	80140a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00c      	beq.n	801409e <etharp_find_entry+0xc2>
 8014084:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014088:	4989      	ldr	r1, [pc, #548]	@ (80142b0 <etharp_find_entry+0x2d4>)
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	440b      	add	r3, r1
 8014094:	3308      	adds	r3, #8
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	429a      	cmp	r2, r3
 801409c:	d102      	bne.n	80140a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801409e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140a2:	e100      	b.n	80142a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80140a4:	7dfb      	ldrb	r3, [r7, #23]
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d140      	bne.n	801412c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80140aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ae:	4980      	ldr	r1, [pc, #512]	@ (80142b0 <etharp_find_entry+0x2d4>)
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	440b      	add	r3, r1
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d01a      	beq.n	80140f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80140c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140c4:	497a      	ldr	r1, [pc, #488]	@ (80142b0 <etharp_find_entry+0x2d4>)
 80140c6:	4613      	mov	r3, r2
 80140c8:	005b      	lsls	r3, r3, #1
 80140ca:	4413      	add	r3, r2
 80140cc:	00db      	lsls	r3, r3, #3
 80140ce:	440b      	add	r3, r1
 80140d0:	3312      	adds	r3, #18
 80140d2:	881b      	ldrh	r3, [r3, #0]
 80140d4:	8bba      	ldrh	r2, [r7, #28]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d845      	bhi.n	8014166 <etharp_find_entry+0x18a>
            old_queue = i;
 80140da:	8c3b      	ldrh	r3, [r7, #32]
 80140dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80140de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e2:	4973      	ldr	r1, [pc, #460]	@ (80142b0 <etharp_find_entry+0x2d4>)
 80140e4:	4613      	mov	r3, r2
 80140e6:	005b      	lsls	r3, r3, #1
 80140e8:	4413      	add	r3, r2
 80140ea:	00db      	lsls	r3, r3, #3
 80140ec:	440b      	add	r3, r1
 80140ee:	3312      	adds	r3, #18
 80140f0:	881b      	ldrh	r3, [r3, #0]
 80140f2:	83bb      	strh	r3, [r7, #28]
 80140f4:	e037      	b.n	8014166 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80140f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140fa:	496d      	ldr	r1, [pc, #436]	@ (80142b0 <etharp_find_entry+0x2d4>)
 80140fc:	4613      	mov	r3, r2
 80140fe:	005b      	lsls	r3, r3, #1
 8014100:	4413      	add	r3, r2
 8014102:	00db      	lsls	r3, r3, #3
 8014104:	440b      	add	r3, r1
 8014106:	3312      	adds	r3, #18
 8014108:	881b      	ldrh	r3, [r3, #0]
 801410a:	8b7a      	ldrh	r2, [r7, #26]
 801410c:	429a      	cmp	r2, r3
 801410e:	d82a      	bhi.n	8014166 <etharp_find_entry+0x18a>
            old_pending = i;
 8014110:	8c3b      	ldrh	r3, [r7, #32]
 8014112:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014114:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014118:	4965      	ldr	r1, [pc, #404]	@ (80142b0 <etharp_find_entry+0x2d4>)
 801411a:	4613      	mov	r3, r2
 801411c:	005b      	lsls	r3, r3, #1
 801411e:	4413      	add	r3, r2
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	440b      	add	r3, r1
 8014124:	3312      	adds	r3, #18
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	837b      	strh	r3, [r7, #26]
 801412a:	e01c      	b.n	8014166 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801412c:	7dfb      	ldrb	r3, [r7, #23]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d919      	bls.n	8014166 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014132:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014136:	495e      	ldr	r1, [pc, #376]	@ (80142b0 <etharp_find_entry+0x2d4>)
 8014138:	4613      	mov	r3, r2
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	4413      	add	r3, r2
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	440b      	add	r3, r1
 8014142:	3312      	adds	r3, #18
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	8b3a      	ldrh	r2, [r7, #24]
 8014148:	429a      	cmp	r2, r3
 801414a:	d80c      	bhi.n	8014166 <etharp_find_entry+0x18a>
            old_stable = i;
 801414c:	8c3b      	ldrh	r3, [r7, #32]
 801414e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014150:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014154:	4956      	ldr	r1, [pc, #344]	@ (80142b0 <etharp_find_entry+0x2d4>)
 8014156:	4613      	mov	r3, r2
 8014158:	005b      	lsls	r3, r3, #1
 801415a:	4413      	add	r3, r2
 801415c:	00db      	lsls	r3, r3, #3
 801415e:	440b      	add	r3, r1
 8014160:	3312      	adds	r3, #18
 8014162:	881b      	ldrh	r3, [r3, #0]
 8014164:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014166:	8c3b      	ldrh	r3, [r7, #32]
 8014168:	3301      	adds	r3, #1
 801416a:	b29b      	uxth	r3, r3
 801416c:	843b      	strh	r3, [r7, #32]
 801416e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014172:	2b09      	cmp	r3, #9
 8014174:	f77f af4c 	ble.w	8014010 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014178:	7afb      	ldrb	r3, [r7, #11]
 801417a:	f003 0302 	and.w	r3, r3, #2
 801417e:	2b00      	cmp	r3, #0
 8014180:	d108      	bne.n	8014194 <etharp_find_entry+0x1b8>
 8014182:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014186:	2b0a      	cmp	r3, #10
 8014188:	d107      	bne.n	801419a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801418a:	7afb      	ldrb	r3, [r7, #11]
 801418c:	f003 0301 	and.w	r3, r3, #1
 8014190:	2b00      	cmp	r3, #0
 8014192:	d102      	bne.n	801419a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014194:	f04f 33ff 	mov.w	r3, #4294967295
 8014198:	e085      	b.n	80142a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801419a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801419e:	2b09      	cmp	r3, #9
 80141a0:	dc02      	bgt.n	80141a8 <etharp_find_entry+0x1cc>
    i = empty;
 80141a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80141a4:	843b      	strh	r3, [r7, #32]
 80141a6:	e039      	b.n	801421c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80141a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80141ac:	2b09      	cmp	r3, #9
 80141ae:	dc14      	bgt.n	80141da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80141b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80141b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80141b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141b8:	493d      	ldr	r1, [pc, #244]	@ (80142b0 <etharp_find_entry+0x2d4>)
 80141ba:	4613      	mov	r3, r2
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	4413      	add	r3, r2
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	440b      	add	r3, r1
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d018      	beq.n	80141fc <etharp_find_entry+0x220>
 80141ca:	4b3a      	ldr	r3, [pc, #232]	@ (80142b4 <etharp_find_entry+0x2d8>)
 80141cc:	f240 126d 	movw	r2, #365	@ 0x16d
 80141d0:	493b      	ldr	r1, [pc, #236]	@ (80142c0 <etharp_find_entry+0x2e4>)
 80141d2:	483a      	ldr	r0, [pc, #232]	@ (80142bc <etharp_find_entry+0x2e0>)
 80141d4:	f00d fdea 	bl	8021dac <iprintf>
 80141d8:	e010      	b.n	80141fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80141da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80141de:	2b09      	cmp	r3, #9
 80141e0:	dc02      	bgt.n	80141e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80141e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80141e4:	843b      	strh	r3, [r7, #32]
 80141e6:	e009      	b.n	80141fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80141e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80141ec:	2b09      	cmp	r3, #9
 80141ee:	dc02      	bgt.n	80141f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80141f0:	8bfb      	ldrh	r3, [r7, #30]
 80141f2:	843b      	strh	r3, [r7, #32]
 80141f4:	e002      	b.n	80141fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80141f6:	f04f 33ff 	mov.w	r3, #4294967295
 80141fa:	e054      	b.n	80142a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014200:	2b09      	cmp	r3, #9
 8014202:	dd06      	ble.n	8014212 <etharp_find_entry+0x236>
 8014204:	4b2b      	ldr	r3, [pc, #172]	@ (80142b4 <etharp_find_entry+0x2d8>)
 8014206:	f240 127f 	movw	r2, #383	@ 0x17f
 801420a:	492e      	ldr	r1, [pc, #184]	@ (80142c4 <etharp_find_entry+0x2e8>)
 801420c:	482b      	ldr	r0, [pc, #172]	@ (80142bc <etharp_find_entry+0x2e0>)
 801420e:	f00d fdcd 	bl	8021dac <iprintf>
    etharp_free_entry(i);
 8014212:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014216:	4618      	mov	r0, r3
 8014218:	f7ff fe06 	bl	8013e28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801421c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014220:	2b09      	cmp	r3, #9
 8014222:	dd06      	ble.n	8014232 <etharp_find_entry+0x256>
 8014224:	4b23      	ldr	r3, [pc, #140]	@ (80142b4 <etharp_find_entry+0x2d8>)
 8014226:	f240 1283 	movw	r2, #387	@ 0x183
 801422a:	4926      	ldr	r1, [pc, #152]	@ (80142c4 <etharp_find_entry+0x2e8>)
 801422c:	4823      	ldr	r0, [pc, #140]	@ (80142bc <etharp_find_entry+0x2e0>)
 801422e:	f00d fdbd 	bl	8021dac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014236:	491e      	ldr	r1, [pc, #120]	@ (80142b0 <etharp_find_entry+0x2d4>)
 8014238:	4613      	mov	r3, r2
 801423a:	005b      	lsls	r3, r3, #1
 801423c:	4413      	add	r3, r2
 801423e:	00db      	lsls	r3, r3, #3
 8014240:	440b      	add	r3, r1
 8014242:	3314      	adds	r3, #20
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d006      	beq.n	8014258 <etharp_find_entry+0x27c>
 801424a:	4b1a      	ldr	r3, [pc, #104]	@ (80142b4 <etharp_find_entry+0x2d8>)
 801424c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014250:	491d      	ldr	r1, [pc, #116]	@ (80142c8 <etharp_find_entry+0x2ec>)
 8014252:	481a      	ldr	r0, [pc, #104]	@ (80142bc <etharp_find_entry+0x2e0>)
 8014254:	f00d fdaa 	bl	8021dac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d00b      	beq.n	8014276 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801425e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	6819      	ldr	r1, [r3, #0]
 8014266:	4812      	ldr	r0, [pc, #72]	@ (80142b0 <etharp_find_entry+0x2d4>)
 8014268:	4613      	mov	r3, r2
 801426a:	005b      	lsls	r3, r3, #1
 801426c:	4413      	add	r3, r2
 801426e:	00db      	lsls	r3, r3, #3
 8014270:	4403      	add	r3, r0
 8014272:	3304      	adds	r3, #4
 8014274:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427a:	490d      	ldr	r1, [pc, #52]	@ (80142b0 <etharp_find_entry+0x2d4>)
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	3312      	adds	r3, #18
 8014288:	2200      	movs	r2, #0
 801428a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801428c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014290:	4907      	ldr	r1, [pc, #28]	@ (80142b0 <etharp_find_entry+0x2d4>)
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3308      	adds	r3, #8
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80142a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3728      	adds	r7, #40	@ 0x28
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	2400a06c 	.word	0x2400a06c
 80142b4:	080252fc 	.word	0x080252fc
 80142b8:	08025360 	.word	0x08025360
 80142bc:	080253a0 	.word	0x080253a0
 80142c0:	080253c8 	.word	0x080253c8
 80142c4:	080253e0 	.word	0x080253e0
 80142c8:	080253f4 	.word	0x080253f4

080142cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b088      	sub	sp, #32
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
 80142d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80142e0:	2b06      	cmp	r3, #6
 80142e2:	d006      	beq.n	80142f2 <etharp_update_arp_entry+0x26>
 80142e4:	4b48      	ldr	r3, [pc, #288]	@ (8014408 <etharp_update_arp_entry+0x13c>)
 80142e6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80142ea:	4948      	ldr	r1, [pc, #288]	@ (801440c <etharp_update_arp_entry+0x140>)
 80142ec:	4848      	ldr	r0, [pc, #288]	@ (8014410 <etharp_update_arp_entry+0x144>)
 80142ee:	f00d fd5d 	bl	8021dac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d012      	beq.n	801431e <etharp_update_arp_entry+0x52>
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d00e      	beq.n	801431e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	68f9      	ldr	r1, [r7, #12]
 8014306:	4618      	mov	r0, r3
 8014308:	f001 fad8 	bl	80158bc <ip4_addr_isbroadcast_u32>
 801430c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801430e:	2b00      	cmp	r3, #0
 8014310:	d105      	bne.n	801431e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801431a:	2be0      	cmp	r3, #224	@ 0xe0
 801431c:	d102      	bne.n	8014324 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801431e:	f06f 030f 	mvn.w	r3, #15
 8014322:	e06c      	b.n	80143fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014324:	78fb      	ldrb	r3, [r7, #3]
 8014326:	68fa      	ldr	r2, [r7, #12]
 8014328:	4619      	mov	r1, r3
 801432a:	68b8      	ldr	r0, [r7, #8]
 801432c:	f7ff fe56 	bl	8013fdc <etharp_find_entry>
 8014330:	4603      	mov	r3, r0
 8014332:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014334:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014338:	2b00      	cmp	r3, #0
 801433a:	da02      	bge.n	8014342 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801433c:	8afb      	ldrh	r3, [r7, #22]
 801433e:	b25b      	sxtb	r3, r3
 8014340:	e05d      	b.n	80143fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014342:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014346:	4933      	ldr	r1, [pc, #204]	@ (8014414 <etharp_update_arp_entry+0x148>)
 8014348:	4613      	mov	r3, r2
 801434a:	005b      	lsls	r3, r3, #1
 801434c:	4413      	add	r3, r2
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	440b      	add	r3, r1
 8014352:	3314      	adds	r3, #20
 8014354:	2202      	movs	r2, #2
 8014356:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801435c:	492d      	ldr	r1, [pc, #180]	@ (8014414 <etharp_update_arp_entry+0x148>)
 801435e:	4613      	mov	r3, r2
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	4413      	add	r3, r2
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	440b      	add	r3, r1
 8014368:	3308      	adds	r3, #8
 801436a:	68fa      	ldr	r2, [r7, #12]
 801436c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801436e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014372:	4613      	mov	r3, r2
 8014374:	005b      	lsls	r3, r3, #1
 8014376:	4413      	add	r3, r2
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	3308      	adds	r3, #8
 801437c:	4a25      	ldr	r2, [pc, #148]	@ (8014414 <etharp_update_arp_entry+0x148>)
 801437e:	4413      	add	r3, r2
 8014380:	3304      	adds	r3, #4
 8014382:	2206      	movs	r2, #6
 8014384:	6879      	ldr	r1, [r7, #4]
 8014386:	4618      	mov	r0, r3
 8014388:	f00d ffb1 	bl	80222ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801438c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014390:	4920      	ldr	r1, [pc, #128]	@ (8014414 <etharp_update_arp_entry+0x148>)
 8014392:	4613      	mov	r3, r2
 8014394:	005b      	lsls	r3, r3, #1
 8014396:	4413      	add	r3, r2
 8014398:	00db      	lsls	r3, r3, #3
 801439a:	440b      	add	r3, r1
 801439c:	3312      	adds	r3, #18
 801439e:	2200      	movs	r2, #0
 80143a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80143a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143a6:	491b      	ldr	r1, [pc, #108]	@ (8014414 <etharp_update_arp_entry+0x148>)
 80143a8:	4613      	mov	r3, r2
 80143aa:	005b      	lsls	r3, r3, #1
 80143ac:	4413      	add	r3, r2
 80143ae:	00db      	lsls	r3, r3, #3
 80143b0:	440b      	add	r3, r1
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d021      	beq.n	80143fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80143b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143bc:	4915      	ldr	r1, [pc, #84]	@ (8014414 <etharp_update_arp_entry+0x148>)
 80143be:	4613      	mov	r3, r2
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	4413      	add	r3, r2
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	440b      	add	r3, r1
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80143cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143d0:	4910      	ldr	r1, [pc, #64]	@ (8014414 <etharp_update_arp_entry+0x148>)
 80143d2:	4613      	mov	r3, r2
 80143d4:	005b      	lsls	r3, r3, #1
 80143d6:	4413      	add	r3, r2
 80143d8:	00db      	lsls	r3, r3, #3
 80143da:	440b      	add	r3, r1
 80143dc:	2200      	movs	r2, #0
 80143de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80143e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6939      	ldr	r1, [r7, #16]
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 fcf9 	bl	8014de8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80143f6:	6938      	ldr	r0, [r7, #16]
 80143f8:	f005 facc 	bl	8019994 <pbuf_free>
  }
  return ERR_OK;
 80143fc:	2300      	movs	r3, #0
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3718      	adds	r7, #24
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	080252fc 	.word	0x080252fc
 801440c:	08025420 	.word	0x08025420
 8014410:	080253a0 	.word	0x080253a0
 8014414:	2400a06c 	.word	0x2400a06c

08014418 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014420:	2300      	movs	r3, #0
 8014422:	60fb      	str	r3, [r7, #12]
 8014424:	e01e      	b.n	8014464 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014426:	4913      	ldr	r1, [pc, #76]	@ (8014474 <etharp_cleanup_netif+0x5c>)
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	4613      	mov	r3, r2
 801442c:	005b      	lsls	r3, r3, #1
 801442e:	4413      	add	r3, r2
 8014430:	00db      	lsls	r3, r3, #3
 8014432:	440b      	add	r3, r1
 8014434:	3314      	adds	r3, #20
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801443a:	7afb      	ldrb	r3, [r7, #11]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d00e      	beq.n	801445e <etharp_cleanup_netif+0x46>
 8014440:	490c      	ldr	r1, [pc, #48]	@ (8014474 <etharp_cleanup_netif+0x5c>)
 8014442:	68fa      	ldr	r2, [r7, #12]
 8014444:	4613      	mov	r3, r2
 8014446:	005b      	lsls	r3, r3, #1
 8014448:	4413      	add	r3, r2
 801444a:	00db      	lsls	r3, r3, #3
 801444c:	440b      	add	r3, r1
 801444e:	3308      	adds	r3, #8
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	429a      	cmp	r2, r3
 8014456:	d102      	bne.n	801445e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014458:	68f8      	ldr	r0, [r7, #12]
 801445a:	f7ff fce5 	bl	8013e28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	3301      	adds	r3, #1
 8014462:	60fb      	str	r3, [r7, #12]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	2b09      	cmp	r3, #9
 8014468:	dddd      	ble.n	8014426 <etharp_cleanup_netif+0xe>
    }
  }
}
 801446a:	bf00      	nop
 801446c:	bf00      	nop
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	2400a06c 	.word	0x2400a06c

08014478 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014478:	b5b0      	push	{r4, r5, r7, lr}
 801447a:	b08a      	sub	sp, #40	@ 0x28
 801447c:	af04      	add	r7, sp, #16
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 8014482:	f7fb fd0d 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d107      	bne.n	801449c <etharp_input+0x24>
 801448c:	4b3d      	ldr	r3, [pc, #244]	@ (8014584 <etharp_input+0x10c>)
 801448e:	f240 228a 	movw	r2, #650	@ 0x28a
 8014492:	493d      	ldr	r1, [pc, #244]	@ (8014588 <etharp_input+0x110>)
 8014494:	483d      	ldr	r0, [pc, #244]	@ (801458c <etharp_input+0x114>)
 8014496:	f00d fc89 	bl	8021dac <iprintf>
 801449a:	e06f      	b.n	801457c <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	881b      	ldrh	r3, [r3, #0]
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144ac:	d10c      	bne.n	80144c8 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144b2:	2b06      	cmp	r3, #6
 80144b4:	d108      	bne.n	80144c8 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144ba:	2b04      	cmp	r3, #4
 80144bc:	d104      	bne.n	80144c8 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	885b      	ldrh	r3, [r3, #2]
 80144c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144c4:	2b08      	cmp	r3, #8
 80144c6:	d003      	beq.n	80144d0 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f005 fa63 	bl	8019994 <pbuf_free>
    return;
 80144ce:	e055      	b.n	801457c <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	330e      	adds	r3, #14
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	3318      	adds	r3, #24
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	3304      	adds	r3, #4
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d102      	bne.n	80144f0 <etharp_input+0x78>
    for_us = 0;
 80144ea:	2300      	movs	r3, #0
 80144ec:	75fb      	strb	r3, [r7, #23]
 80144ee:	e009      	b.n	8014504 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	3304      	adds	r3, #4
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	bf0c      	ite	eq
 80144fc:	2301      	moveq	r3, #1
 80144fe:	2300      	movne	r3, #0
 8014500:	b2db      	uxtb	r3, r3
 8014502:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	f103 0208 	add.w	r2, r3, #8
 801450a:	7dfb      	ldrb	r3, [r7, #23]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d001      	beq.n	8014514 <etharp_input+0x9c>
 8014510:	2301      	movs	r3, #1
 8014512:	e000      	b.n	8014516 <etharp_input+0x9e>
 8014514:	2302      	movs	r3, #2
 8014516:	f107 010c 	add.w	r1, r7, #12
 801451a:	6838      	ldr	r0, [r7, #0]
 801451c:	f7ff fed6 	bl	80142cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	88db      	ldrh	r3, [r3, #6]
 8014524:	b29b      	uxth	r3, r3
 8014526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801452a:	d003      	beq.n	8014534 <etharp_input+0xbc>
 801452c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014530:	d01e      	beq.n	8014570 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014532:	e020      	b.n	8014576 <etharp_input+0xfe>
      if (for_us) {
 8014534:	7dfb      	ldrb	r3, [r7, #23]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d01c      	beq.n	8014574 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014550:	693a      	ldr	r2, [r7, #16]
 8014552:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014554:	2102      	movs	r1, #2
 8014556:	9103      	str	r1, [sp, #12]
 8014558:	f107 010c 	add.w	r1, r7, #12
 801455c:	9102      	str	r1, [sp, #8]
 801455e:	9201      	str	r2, [sp, #4]
 8014560:	9300      	str	r3, [sp, #0]
 8014562:	462b      	mov	r3, r5
 8014564:	4622      	mov	r2, r4
 8014566:	4601      	mov	r1, r0
 8014568:	6838      	ldr	r0, [r7, #0]
 801456a:	f000 faed 	bl	8014b48 <etharp_raw>
      break;
 801456e:	e001      	b.n	8014574 <etharp_input+0xfc>
      break;
 8014570:	bf00      	nop
 8014572:	e000      	b.n	8014576 <etharp_input+0xfe>
      break;
 8014574:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f005 fa0c 	bl	8019994 <pbuf_free>
}
 801457c:	3718      	adds	r7, #24
 801457e:	46bd      	mov	sp, r7
 8014580:	bdb0      	pop	{r4, r5, r7, pc}
 8014582:	bf00      	nop
 8014584:	080252fc 	.word	0x080252fc
 8014588:	08025478 	.word	0x08025478
 801458c:	080253a0 	.word	0x080253a0

08014590 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af02      	add	r7, sp, #8
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	4613      	mov	r3, r2
 801459c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801459e:	79fa      	ldrb	r2, [r7, #7]
 80145a0:	4944      	ldr	r1, [pc, #272]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 80145a2:	4613      	mov	r3, r2
 80145a4:	005b      	lsls	r3, r3, #1
 80145a6:	4413      	add	r3, r2
 80145a8:	00db      	lsls	r3, r3, #3
 80145aa:	440b      	add	r3, r1
 80145ac:	3314      	adds	r3, #20
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	2b01      	cmp	r3, #1
 80145b2:	d806      	bhi.n	80145c2 <etharp_output_to_arp_index+0x32>
 80145b4:	4b40      	ldr	r3, [pc, #256]	@ (80146b8 <etharp_output_to_arp_index+0x128>)
 80145b6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80145ba:	4940      	ldr	r1, [pc, #256]	@ (80146bc <etharp_output_to_arp_index+0x12c>)
 80145bc:	4840      	ldr	r0, [pc, #256]	@ (80146c0 <etharp_output_to_arp_index+0x130>)
 80145be:	f00d fbf5 	bl	8021dac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80145c2:	79fa      	ldrb	r2, [r7, #7]
 80145c4:	493b      	ldr	r1, [pc, #236]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 80145c6:	4613      	mov	r3, r2
 80145c8:	005b      	lsls	r3, r3, #1
 80145ca:	4413      	add	r3, r2
 80145cc:	00db      	lsls	r3, r3, #3
 80145ce:	440b      	add	r3, r1
 80145d0:	3314      	adds	r3, #20
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b02      	cmp	r3, #2
 80145d6:	d153      	bne.n	8014680 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80145d8:	79fa      	ldrb	r2, [r7, #7]
 80145da:	4936      	ldr	r1, [pc, #216]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 80145dc:	4613      	mov	r3, r2
 80145de:	005b      	lsls	r3, r3, #1
 80145e0:	4413      	add	r3, r2
 80145e2:	00db      	lsls	r3, r3, #3
 80145e4:	440b      	add	r3, r1
 80145e6:	3312      	adds	r3, #18
 80145e8:	881b      	ldrh	r3, [r3, #0]
 80145ea:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80145ee:	d919      	bls.n	8014624 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80145f0:	79fa      	ldrb	r2, [r7, #7]
 80145f2:	4613      	mov	r3, r2
 80145f4:	005b      	lsls	r3, r3, #1
 80145f6:	4413      	add	r3, r2
 80145f8:	00db      	lsls	r3, r3, #3
 80145fa:	4a2e      	ldr	r2, [pc, #184]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 80145fc:	4413      	add	r3, r2
 80145fe:	3304      	adds	r3, #4
 8014600:	4619      	mov	r1, r3
 8014602:	68f8      	ldr	r0, [r7, #12]
 8014604:	f000 fb4e 	bl	8014ca4 <etharp_request>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d138      	bne.n	8014680 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801460e:	79fa      	ldrb	r2, [r7, #7]
 8014610:	4928      	ldr	r1, [pc, #160]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	440b      	add	r3, r1
 801461c:	3314      	adds	r3, #20
 801461e:	2203      	movs	r2, #3
 8014620:	701a      	strb	r2, [r3, #0]
 8014622:	e02d      	b.n	8014680 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014624:	79fa      	ldrb	r2, [r7, #7]
 8014626:	4923      	ldr	r1, [pc, #140]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 8014628:	4613      	mov	r3, r2
 801462a:	005b      	lsls	r3, r3, #1
 801462c:	4413      	add	r3, r2
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	3312      	adds	r3, #18
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801463a:	d321      	bcc.n	8014680 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801463c:	79fa      	ldrb	r2, [r7, #7]
 801463e:	4613      	mov	r3, r2
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	4a1b      	ldr	r2, [pc, #108]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 8014648:	4413      	add	r3, r2
 801464a:	1d19      	adds	r1, r3, #4
 801464c:	79fa      	ldrb	r2, [r7, #7]
 801464e:	4613      	mov	r3, r2
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	4413      	add	r3, r2
 8014654:	00db      	lsls	r3, r3, #3
 8014656:	3308      	adds	r3, #8
 8014658:	4a16      	ldr	r2, [pc, #88]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 801465a:	4413      	add	r3, r2
 801465c:	3304      	adds	r3, #4
 801465e:	461a      	mov	r2, r3
 8014660:	68f8      	ldr	r0, [r7, #12]
 8014662:	f000 fafd 	bl	8014c60 <etharp_request_dst>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	d109      	bne.n	8014680 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801466c:	79fa      	ldrb	r2, [r7, #7]
 801466e:	4911      	ldr	r1, [pc, #68]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 8014670:	4613      	mov	r3, r2
 8014672:	005b      	lsls	r3, r3, #1
 8014674:	4413      	add	r3, r2
 8014676:	00db      	lsls	r3, r3, #3
 8014678:	440b      	add	r3, r1
 801467a:	3314      	adds	r3, #20
 801467c:	2203      	movs	r2, #3
 801467e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014686:	79fa      	ldrb	r2, [r7, #7]
 8014688:	4613      	mov	r3, r2
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	4413      	add	r3, r2
 801468e:	00db      	lsls	r3, r3, #3
 8014690:	3308      	adds	r3, #8
 8014692:	4a08      	ldr	r2, [pc, #32]	@ (80146b4 <etharp_output_to_arp_index+0x124>)
 8014694:	4413      	add	r3, r2
 8014696:	3304      	adds	r3, #4
 8014698:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801469c:	9200      	str	r2, [sp, #0]
 801469e:	460a      	mov	r2, r1
 80146a0:	68b9      	ldr	r1, [r7, #8]
 80146a2:	68f8      	ldr	r0, [r7, #12]
 80146a4:	f000 fba0 	bl	8014de8 <ethernet_output>
 80146a8:	4603      	mov	r3, r0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3710      	adds	r7, #16
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	2400a06c 	.word	0x2400a06c
 80146b8:	080252fc 	.word	0x080252fc
 80146bc:	08025498 	.word	0x08025498
 80146c0:	080253a0 	.word	0x080253a0

080146c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b08a      	sub	sp, #40	@ 0x28
 80146c8:	af02      	add	r7, sp, #8
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 80146d4:	f7fb fbe4 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d106      	bne.n	80146ec <etharp_output+0x28>
 80146de:	4b73      	ldr	r3, [pc, #460]	@ (80148ac <etharp_output+0x1e8>)
 80146e0:	f240 321e 	movw	r2, #798	@ 0x31e
 80146e4:	4972      	ldr	r1, [pc, #456]	@ (80148b0 <etharp_output+0x1ec>)
 80146e6:	4873      	ldr	r0, [pc, #460]	@ (80148b4 <etharp_output+0x1f0>)
 80146e8:	f00d fb60 	bl	8021dac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <etharp_output+0x3c>
 80146f2:	4b6e      	ldr	r3, [pc, #440]	@ (80148ac <etharp_output+0x1e8>)
 80146f4:	f240 321f 	movw	r2, #799	@ 0x31f
 80146f8:	496f      	ldr	r1, [pc, #444]	@ (80148b8 <etharp_output+0x1f4>)
 80146fa:	486e      	ldr	r0, [pc, #440]	@ (80148b4 <etharp_output+0x1f0>)
 80146fc:	f00d fb56 	bl	8021dac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d106      	bne.n	8014714 <etharp_output+0x50>
 8014706:	4b69      	ldr	r3, [pc, #420]	@ (80148ac <etharp_output+0x1e8>)
 8014708:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801470c:	496b      	ldr	r1, [pc, #428]	@ (80148bc <etharp_output+0x1f8>)
 801470e:	4869      	ldr	r0, [pc, #420]	@ (80148b4 <etharp_output+0x1f0>)
 8014710:	f00d fb4c 	bl	8021dac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	68f9      	ldr	r1, [r7, #12]
 801471a:	4618      	mov	r0, r3
 801471c:	f001 f8ce 	bl	80158bc <ip4_addr_isbroadcast_u32>
 8014720:	4603      	mov	r3, r0
 8014722:	2b00      	cmp	r3, #0
 8014724:	d002      	beq.n	801472c <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014726:	4b66      	ldr	r3, [pc, #408]	@ (80148c0 <etharp_output+0x1fc>)
 8014728:	61fb      	str	r3, [r7, #28]
 801472a:	e0af      	b.n	801488c <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014734:	2be0      	cmp	r3, #224	@ 0xe0
 8014736:	d118      	bne.n	801476a <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014738:	2301      	movs	r3, #1
 801473a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801473c:	2300      	movs	r3, #0
 801473e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014740:	235e      	movs	r3, #94	@ 0x5e
 8014742:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3301      	adds	r3, #1
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801474e:	b2db      	uxtb	r3, r3
 8014750:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3302      	adds	r3, #2
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	3303      	adds	r3, #3
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014762:	f107 0310 	add.w	r3, r7, #16
 8014766:	61fb      	str	r3, [r7, #28]
 8014768:	e090      	b.n	801488c <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	3304      	adds	r3, #4
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	405a      	eors	r2, r3
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	3308      	adds	r3, #8
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	4013      	ands	r3, r2
 801477e:	2b00      	cmp	r3, #0
 8014780:	d012      	beq.n	80147a8 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014788:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801478c:	4293      	cmp	r3, r2
 801478e:	d00b      	beq.n	80147a8 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	330c      	adds	r3, #12
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d003      	beq.n	80147a2 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	330c      	adds	r3, #12
 801479e:	61bb      	str	r3, [r7, #24]
 80147a0:	e002      	b.n	80147a8 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80147a2:	f06f 0303 	mvn.w	r3, #3
 80147a6:	e07d      	b.n	80148a4 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147a8:	4b46      	ldr	r3, [pc, #280]	@ (80148c4 <etharp_output+0x200>)
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	4619      	mov	r1, r3
 80147ae:	4a46      	ldr	r2, [pc, #280]	@ (80148c8 <etharp_output+0x204>)
 80147b0:	460b      	mov	r3, r1
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	440b      	add	r3, r1
 80147b6:	00db      	lsls	r3, r3, #3
 80147b8:	4413      	add	r3, r2
 80147ba:	3314      	adds	r3, #20
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	2b01      	cmp	r3, #1
 80147c0:	d925      	bls.n	801480e <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147c2:	4b40      	ldr	r3, [pc, #256]	@ (80148c4 <etharp_output+0x200>)
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	4619      	mov	r1, r3
 80147c8:	4a3f      	ldr	r2, [pc, #252]	@ (80148c8 <etharp_output+0x204>)
 80147ca:	460b      	mov	r3, r1
 80147cc:	005b      	lsls	r3, r3, #1
 80147ce:	440b      	add	r3, r1
 80147d0:	00db      	lsls	r3, r3, #3
 80147d2:	4413      	add	r3, r2
 80147d4:	3308      	adds	r3, #8
 80147d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147d8:	68fa      	ldr	r2, [r7, #12]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d117      	bne.n	801480e <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	4b38      	ldr	r3, [pc, #224]	@ (80148c4 <etharp_output+0x200>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	4618      	mov	r0, r3
 80147e8:	4937      	ldr	r1, [pc, #220]	@ (80148c8 <etharp_output+0x204>)
 80147ea:	4603      	mov	r3, r0
 80147ec:	005b      	lsls	r3, r3, #1
 80147ee:	4403      	add	r3, r0
 80147f0:	00db      	lsls	r3, r3, #3
 80147f2:	440b      	add	r3, r1
 80147f4:	3304      	adds	r3, #4
 80147f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d108      	bne.n	801480e <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80147fc:	4b31      	ldr	r3, [pc, #196]	@ (80148c4 <etharp_output+0x200>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	461a      	mov	r2, r3
 8014802:	68b9      	ldr	r1, [r7, #8]
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f7ff fec3 	bl	8014590 <etharp_output_to_arp_index>
 801480a:	4603      	mov	r3, r0
 801480c:	e04a      	b.n	80148a4 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801480e:	2300      	movs	r3, #0
 8014810:	75fb      	strb	r3, [r7, #23]
 8014812:	e031      	b.n	8014878 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014814:	7dfa      	ldrb	r2, [r7, #23]
 8014816:	492c      	ldr	r1, [pc, #176]	@ (80148c8 <etharp_output+0x204>)
 8014818:	4613      	mov	r3, r2
 801481a:	005b      	lsls	r3, r3, #1
 801481c:	4413      	add	r3, r2
 801481e:	00db      	lsls	r3, r3, #3
 8014820:	440b      	add	r3, r1
 8014822:	3314      	adds	r3, #20
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	2b01      	cmp	r3, #1
 8014828:	d923      	bls.n	8014872 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801482a:	7dfa      	ldrb	r2, [r7, #23]
 801482c:	4926      	ldr	r1, [pc, #152]	@ (80148c8 <etharp_output+0x204>)
 801482e:	4613      	mov	r3, r2
 8014830:	005b      	lsls	r3, r3, #1
 8014832:	4413      	add	r3, r2
 8014834:	00db      	lsls	r3, r3, #3
 8014836:	440b      	add	r3, r1
 8014838:	3308      	adds	r3, #8
 801483a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801483c:	68fa      	ldr	r2, [r7, #12]
 801483e:	429a      	cmp	r2, r3
 8014840:	d117      	bne.n	8014872 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014842:	69bb      	ldr	r3, [r7, #24]
 8014844:	6819      	ldr	r1, [r3, #0]
 8014846:	7dfa      	ldrb	r2, [r7, #23]
 8014848:	481f      	ldr	r0, [pc, #124]	@ (80148c8 <etharp_output+0x204>)
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	4403      	add	r3, r0
 8014854:	3304      	adds	r3, #4
 8014856:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014858:	4299      	cmp	r1, r3
 801485a:	d10a      	bne.n	8014872 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801485c:	4a19      	ldr	r2, [pc, #100]	@ (80148c4 <etharp_output+0x200>)
 801485e:	7dfb      	ldrb	r3, [r7, #23]
 8014860:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014862:	7dfb      	ldrb	r3, [r7, #23]
 8014864:	461a      	mov	r2, r3
 8014866:	68b9      	ldr	r1, [r7, #8]
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f7ff fe91 	bl	8014590 <etharp_output_to_arp_index>
 801486e:	4603      	mov	r3, r0
 8014870:	e018      	b.n	80148a4 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014872:	7dfb      	ldrb	r3, [r7, #23]
 8014874:	3301      	adds	r3, #1
 8014876:	75fb      	strb	r3, [r7, #23]
 8014878:	7dfb      	ldrb	r3, [r7, #23]
 801487a:	2b09      	cmp	r3, #9
 801487c:	d9ca      	bls.n	8014814 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801487e:	68ba      	ldr	r2, [r7, #8]
 8014880:	69b9      	ldr	r1, [r7, #24]
 8014882:	68f8      	ldr	r0, [r7, #12]
 8014884:	f000 f822 	bl	80148cc <etharp_query>
 8014888:	4603      	mov	r3, r0
 801488a:	e00b      	b.n	80148a4 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	68b9      	ldr	r1, [r7, #8]
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	f000 faa3 	bl	8014de8 <ethernet_output>
 80148a2:	4603      	mov	r3, r0
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3720      	adds	r7, #32
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	080252fc 	.word	0x080252fc
 80148b0:	08025478 	.word	0x08025478
 80148b4:	080253a0 	.word	0x080253a0
 80148b8:	080254c8 	.word	0x080254c8
 80148bc:	08025468 	.word	0x08025468
 80148c0:	08028a3c 	.word	0x08028a3c
 80148c4:	2400a15c 	.word	0x2400a15c
 80148c8:	2400a06c 	.word	0x2400a06c

080148cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b08c      	sub	sp, #48	@ 0x30
 80148d0:	af02      	add	r7, sp, #8
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	3326      	adds	r3, #38	@ 0x26
 80148dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80148de:	23ff      	movs	r3, #255	@ 0xff
 80148e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80148e4:	2300      	movs	r3, #0
 80148e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	68f9      	ldr	r1, [r7, #12]
 80148ee:	4618      	mov	r0, r3
 80148f0:	f000 ffe4 	bl	80158bc <ip4_addr_isbroadcast_u32>
 80148f4:	4603      	mov	r3, r0
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10c      	bne.n	8014914 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014902:	2be0      	cmp	r3, #224	@ 0xe0
 8014904:	d006      	beq.n	8014914 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d003      	beq.n	8014914 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d102      	bne.n	801491a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014914:	f06f 030f 	mvn.w	r3, #15
 8014918:	e101      	b.n	8014b1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801491a:	68fa      	ldr	r2, [r7, #12]
 801491c:	2101      	movs	r1, #1
 801491e:	68b8      	ldr	r0, [r7, #8]
 8014920:	f7ff fb5c 	bl	8013fdc <etharp_find_entry>
 8014924:	4603      	mov	r3, r0
 8014926:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801492c:	2b00      	cmp	r3, #0
 801492e:	da02      	bge.n	8014936 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014930:	8a7b      	ldrh	r3, [r7, #18]
 8014932:	b25b      	sxtb	r3, r3
 8014934:	e0f3      	b.n	8014b1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014936:	8a7b      	ldrh	r3, [r7, #18]
 8014938:	2b7e      	cmp	r3, #126	@ 0x7e
 801493a:	d906      	bls.n	801494a <etharp_query+0x7e>
 801493c:	4b7a      	ldr	r3, [pc, #488]	@ (8014b28 <etharp_query+0x25c>)
 801493e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014942:	497a      	ldr	r1, [pc, #488]	@ (8014b2c <etharp_query+0x260>)
 8014944:	487a      	ldr	r0, [pc, #488]	@ (8014b30 <etharp_query+0x264>)
 8014946:	f00d fa31 	bl	8021dac <iprintf>
  i = (netif_addr_idx_t)i_err;
 801494a:	8a7b      	ldrh	r3, [r7, #18]
 801494c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801494e:	7c7a      	ldrb	r2, [r7, #17]
 8014950:	4978      	ldr	r1, [pc, #480]	@ (8014b34 <etharp_query+0x268>)
 8014952:	4613      	mov	r3, r2
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	4413      	add	r3, r2
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	440b      	add	r3, r1
 801495c:	3314      	adds	r3, #20
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d115      	bne.n	8014990 <etharp_query+0xc4>
    is_new_entry = 1;
 8014964:	2301      	movs	r3, #1
 8014966:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014968:	7c7a      	ldrb	r2, [r7, #17]
 801496a:	4972      	ldr	r1, [pc, #456]	@ (8014b34 <etharp_query+0x268>)
 801496c:	4613      	mov	r3, r2
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	4413      	add	r3, r2
 8014972:	00db      	lsls	r3, r3, #3
 8014974:	440b      	add	r3, r1
 8014976:	3314      	adds	r3, #20
 8014978:	2201      	movs	r2, #1
 801497a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801497c:	7c7a      	ldrb	r2, [r7, #17]
 801497e:	496d      	ldr	r1, [pc, #436]	@ (8014b34 <etharp_query+0x268>)
 8014980:	4613      	mov	r3, r2
 8014982:	005b      	lsls	r3, r3, #1
 8014984:	4413      	add	r3, r2
 8014986:	00db      	lsls	r3, r3, #3
 8014988:	440b      	add	r3, r1
 801498a:	3308      	adds	r3, #8
 801498c:	68fa      	ldr	r2, [r7, #12]
 801498e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014990:	7c7a      	ldrb	r2, [r7, #17]
 8014992:	4968      	ldr	r1, [pc, #416]	@ (8014b34 <etharp_query+0x268>)
 8014994:	4613      	mov	r3, r2
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	440b      	add	r3, r1
 801499e:	3314      	adds	r3, #20
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	2b01      	cmp	r3, #1
 80149a4:	d011      	beq.n	80149ca <etharp_query+0xfe>
 80149a6:	7c7a      	ldrb	r2, [r7, #17]
 80149a8:	4962      	ldr	r1, [pc, #392]	@ (8014b34 <etharp_query+0x268>)
 80149aa:	4613      	mov	r3, r2
 80149ac:	005b      	lsls	r3, r3, #1
 80149ae:	4413      	add	r3, r2
 80149b0:	00db      	lsls	r3, r3, #3
 80149b2:	440b      	add	r3, r1
 80149b4:	3314      	adds	r3, #20
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d806      	bhi.n	80149ca <etharp_query+0xfe>
 80149bc:	4b5a      	ldr	r3, [pc, #360]	@ (8014b28 <etharp_query+0x25c>)
 80149be:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80149c2:	495d      	ldr	r1, [pc, #372]	@ (8014b38 <etharp_query+0x26c>)
 80149c4:	485a      	ldr	r0, [pc, #360]	@ (8014b30 <etharp_query+0x264>)
 80149c6:	f00d f9f1 	bl	8021dac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80149ca:	6a3b      	ldr	r3, [r7, #32]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d102      	bne.n	80149d6 <etharp_query+0x10a>
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d10c      	bne.n	80149f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80149d6:	68b9      	ldr	r1, [r7, #8]
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	f000 f963 	bl	8014ca4 <etharp_request>
 80149de:	4603      	mov	r3, r0
 80149e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d102      	bne.n	80149f0 <etharp_query+0x124>
      return result;
 80149ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80149ee:	e096      	b.n	8014b1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d106      	bne.n	8014a04 <etharp_query+0x138>
 80149f6:	4b4c      	ldr	r3, [pc, #304]	@ (8014b28 <etharp_query+0x25c>)
 80149f8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80149fc:	494f      	ldr	r1, [pc, #316]	@ (8014b3c <etharp_query+0x270>)
 80149fe:	484c      	ldr	r0, [pc, #304]	@ (8014b30 <etharp_query+0x264>)
 8014a00:	f00d f9d4 	bl	8021dac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a04:	7c7a      	ldrb	r2, [r7, #17]
 8014a06:	494b      	ldr	r1, [pc, #300]	@ (8014b34 <etharp_query+0x268>)
 8014a08:	4613      	mov	r3, r2
 8014a0a:	005b      	lsls	r3, r3, #1
 8014a0c:	4413      	add	r3, r2
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	440b      	add	r3, r1
 8014a12:	3314      	adds	r3, #20
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d917      	bls.n	8014a4a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a1a:	4a49      	ldr	r2, [pc, #292]	@ (8014b40 <etharp_query+0x274>)
 8014a1c:	7c7b      	ldrb	r3, [r7, #17]
 8014a1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a20:	7c7a      	ldrb	r2, [r7, #17]
 8014a22:	4613      	mov	r3, r2
 8014a24:	005b      	lsls	r3, r3, #1
 8014a26:	4413      	add	r3, r2
 8014a28:	00db      	lsls	r3, r3, #3
 8014a2a:	3308      	adds	r3, #8
 8014a2c:	4a41      	ldr	r2, [pc, #260]	@ (8014b34 <etharp_query+0x268>)
 8014a2e:	4413      	add	r3, r2
 8014a30:	3304      	adds	r3, #4
 8014a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014a36:	9200      	str	r2, [sp, #0]
 8014a38:	697a      	ldr	r2, [r7, #20]
 8014a3a:	6879      	ldr	r1, [r7, #4]
 8014a3c:	68f8      	ldr	r0, [r7, #12]
 8014a3e:	f000 f9d3 	bl	8014de8 <ethernet_output>
 8014a42:	4603      	mov	r3, r0
 8014a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014a48:	e067      	b.n	8014b1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a4a:	7c7a      	ldrb	r2, [r7, #17]
 8014a4c:	4939      	ldr	r1, [pc, #228]	@ (8014b34 <etharp_query+0x268>)
 8014a4e:	4613      	mov	r3, r2
 8014a50:	005b      	lsls	r3, r3, #1
 8014a52:	4413      	add	r3, r2
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	440b      	add	r3, r1
 8014a58:	3314      	adds	r3, #20
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d15c      	bne.n	8014b1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014a60:	2300      	movs	r3, #0
 8014a62:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a68:	e01c      	b.n	8014aa4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014a6a:	69fb      	ldr	r3, [r7, #28]
 8014a6c:	895a      	ldrh	r2, [r3, #10]
 8014a6e:	69fb      	ldr	r3, [r7, #28]
 8014a70:	891b      	ldrh	r3, [r3, #8]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d10a      	bne.n	8014a8c <etharp_query+0x1c0>
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d006      	beq.n	8014a8c <etharp_query+0x1c0>
 8014a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8014b28 <etharp_query+0x25c>)
 8014a80:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014a84:	492f      	ldr	r1, [pc, #188]	@ (8014b44 <etharp_query+0x278>)
 8014a86:	482a      	ldr	r0, [pc, #168]	@ (8014b30 <etharp_query+0x264>)
 8014a88:	f00d f990 	bl	8021dac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	7b1b      	ldrb	r3, [r3, #12]
 8014a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d002      	beq.n	8014a9e <etharp_query+0x1d2>
        copy_needed = 1;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	61bb      	str	r3, [r7, #24]
        break;
 8014a9c:	e005      	b.n	8014aaa <etharp_query+0x1de>
      }
      p = p->next;
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d1df      	bne.n	8014a6a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d007      	beq.n	8014ac0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014ab6:	200e      	movs	r0, #14
 8014ab8:	f005 fa0e 	bl	8019ed8 <pbuf_clone>
 8014abc:	61f8      	str	r0, [r7, #28]
 8014abe:	e004      	b.n	8014aca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ac4:	69f8      	ldr	r0, [r7, #28]
 8014ac6:	f005 f80b 	bl	8019ae0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d021      	beq.n	8014b14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014ad0:	7c7a      	ldrb	r2, [r7, #17]
 8014ad2:	4918      	ldr	r1, [pc, #96]	@ (8014b34 <etharp_query+0x268>)
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	440b      	add	r3, r1
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d00a      	beq.n	8014afa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014ae4:	7c7a      	ldrb	r2, [r7, #17]
 8014ae6:	4913      	ldr	r1, [pc, #76]	@ (8014b34 <etharp_query+0x268>)
 8014ae8:	4613      	mov	r3, r2
 8014aea:	005b      	lsls	r3, r3, #1
 8014aec:	4413      	add	r3, r2
 8014aee:	00db      	lsls	r3, r3, #3
 8014af0:	440b      	add	r3, r1
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f004 ff4d 	bl	8019994 <pbuf_free>
      }
      arp_table[i].q = p;
 8014afa:	7c7a      	ldrb	r2, [r7, #17]
 8014afc:	490d      	ldr	r1, [pc, #52]	@ (8014b34 <etharp_query+0x268>)
 8014afe:	4613      	mov	r3, r2
 8014b00:	005b      	lsls	r3, r3, #1
 8014b02:	4413      	add	r3, r2
 8014b04:	00db      	lsls	r3, r3, #3
 8014b06:	440b      	add	r3, r1
 8014b08:	69fa      	ldr	r2, [r7, #28]
 8014b0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b12:	e002      	b.n	8014b1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b14:	23ff      	movs	r3, #255	@ 0xff
 8014b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014b1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3728      	adds	r7, #40	@ 0x28
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	080252fc 	.word	0x080252fc
 8014b2c:	080254d4 	.word	0x080254d4
 8014b30:	080253a0 	.word	0x080253a0
 8014b34:	2400a06c 	.word	0x2400a06c
 8014b38:	080254e4 	.word	0x080254e4
 8014b3c:	080254c8 	.word	0x080254c8
 8014b40:	2400a15c 	.word	0x2400a15c
 8014b44:	0802550c 	.word	0x0802550c

08014b48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b08a      	sub	sp, #40	@ 0x28
 8014b4c:	af02      	add	r7, sp, #8
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
 8014b52:	607a      	str	r2, [r7, #4]
 8014b54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b56:	2300      	movs	r3, #0
 8014b58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d106      	bne.n	8014b6e <etharp_raw+0x26>
 8014b60:	4b3a      	ldr	r3, [pc, #232]	@ (8014c4c <etharp_raw+0x104>)
 8014b62:	f240 4257 	movw	r2, #1111	@ 0x457
 8014b66:	493a      	ldr	r1, [pc, #232]	@ (8014c50 <etharp_raw+0x108>)
 8014b68:	483a      	ldr	r0, [pc, #232]	@ (8014c54 <etharp_raw+0x10c>)
 8014b6a:	f00d f91f 	bl	8021dac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014b6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014b72:	211c      	movs	r1, #28
 8014b74:	200e      	movs	r0, #14
 8014b76:	f004 fc2b 	bl	80193d0 <pbuf_alloc>
 8014b7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014b7c:	69bb      	ldr	r3, [r7, #24]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d102      	bne.n	8014b88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014b82:	f04f 33ff 	mov.w	r3, #4294967295
 8014b86:	e05d      	b.n	8014c44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014b88:	69bb      	ldr	r3, [r7, #24]
 8014b8a:	895b      	ldrh	r3, [r3, #10]
 8014b8c:	2b1b      	cmp	r3, #27
 8014b8e:	d806      	bhi.n	8014b9e <etharp_raw+0x56>
 8014b90:	4b2e      	ldr	r3, [pc, #184]	@ (8014c4c <etharp_raw+0x104>)
 8014b92:	f240 4262 	movw	r2, #1122	@ 0x462
 8014b96:	4930      	ldr	r1, [pc, #192]	@ (8014c58 <etharp_raw+0x110>)
 8014b98:	482e      	ldr	r0, [pc, #184]	@ (8014c54 <etharp_raw+0x10c>)
 8014b9a:	f00d f907 	bl	8021dac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014b9e:	69bb      	ldr	r3, [r7, #24]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014ba4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7ff f910 	bl	8013dcc <lwip_htons>
 8014bac:	4603      	mov	r3, r0
 8014bae:	461a      	mov	r2, r3
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014bba:	2b06      	cmp	r3, #6
 8014bbc:	d006      	beq.n	8014bcc <etharp_raw+0x84>
 8014bbe:	4b23      	ldr	r3, [pc, #140]	@ (8014c4c <etharp_raw+0x104>)
 8014bc0:	f240 4269 	movw	r2, #1129	@ 0x469
 8014bc4:	4925      	ldr	r1, [pc, #148]	@ (8014c5c <etharp_raw+0x114>)
 8014bc6:	4823      	ldr	r0, [pc, #140]	@ (8014c54 <etharp_raw+0x10c>)
 8014bc8:	f00d f8f0 	bl	8021dac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	2206      	movs	r2, #6
 8014bd2:	6839      	ldr	r1, [r7, #0]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f00d fb8a 	bl	80222ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	3312      	adds	r3, #18
 8014bde:	2206      	movs	r2, #6
 8014be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014be2:	4618      	mov	r0, r3
 8014be4:	f00d fb83 	bl	80222ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	330e      	adds	r3, #14
 8014bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014bee:	6812      	ldr	r2, [r2, #0]
 8014bf0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	3318      	adds	r3, #24
 8014bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bf8:	6812      	ldr	r2, [r2, #0]
 8014bfa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	701a      	strb	r2, [r3, #0]
 8014c02:	2200      	movs	r2, #0
 8014c04:	f042 0201 	orr.w	r2, r2, #1
 8014c08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	f042 0208 	orr.w	r2, r2, #8
 8014c12:	709a      	strb	r2, [r3, #2]
 8014c14:	2200      	movs	r2, #0
 8014c16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	2206      	movs	r2, #6
 8014c1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	2204      	movs	r2, #4
 8014c22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c24:	f640 0306 	movw	r3, #2054	@ 0x806
 8014c28:	9300      	str	r3, [sp, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	68ba      	ldr	r2, [r7, #8]
 8014c2e:	69b9      	ldr	r1, [r7, #24]
 8014c30:	68f8      	ldr	r0, [r7, #12]
 8014c32:	f000 f8d9 	bl	8014de8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c36:	69b8      	ldr	r0, [r7, #24]
 8014c38:	f004 feac 	bl	8019994 <pbuf_free>
  p = NULL;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3720      	adds	r7, #32
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	080252fc 	.word	0x080252fc
 8014c50:	08025478 	.word	0x08025478
 8014c54:	080253a0 	.word	0x080253a0
 8014c58:	08025528 	.word	0x08025528
 8014c5c:	0802555c 	.word	0x0802555c

08014c60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b088      	sub	sp, #32
 8014c64:	af04      	add	r7, sp, #16
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	9203      	str	r2, [sp, #12]
 8014c80:	68ba      	ldr	r2, [r7, #8]
 8014c82:	9202      	str	r2, [sp, #8]
 8014c84:	4a06      	ldr	r2, [pc, #24]	@ (8014ca0 <etharp_request_dst+0x40>)
 8014c86:	9201      	str	r2, [sp, #4]
 8014c88:	9300      	str	r3, [sp, #0]
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	68f8      	ldr	r0, [r7, #12]
 8014c90:	f7ff ff5a 	bl	8014b48 <etharp_raw>
 8014c94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3710      	adds	r7, #16
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	08028a44 	.word	0x08028a44

08014ca4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014cae:	4a05      	ldr	r2, [pc, #20]	@ (8014cc4 <etharp_request+0x20>)
 8014cb0:	6839      	ldr	r1, [r7, #0]
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff ffd4 	bl	8014c60 <etharp_request_dst>
 8014cb8:	4603      	mov	r3, r0
}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	3708      	adds	r7, #8
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	08028a3c 	.word	0x08028a3c

08014cc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014cd2:	230e      	movs	r3, #14
 8014cd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 8014cd6:	f7fb f8e3 	bl	800fea0 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	895b      	ldrh	r3, [r3, #10]
 8014cde:	2b0e      	cmp	r3, #14
 8014ce0:	d96e      	bls.n	8014dc0 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	7bdb      	ldrb	r3, [r3, #15]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d106      	bne.n	8014cf8 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	b2da      	uxtb	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	7b1a      	ldrb	r2, [r3, #12]
 8014d02:	7b5b      	ldrb	r3, [r3, #13]
 8014d04:	021b      	lsls	r3, r3, #8
 8014d06:	4313      	orrs	r3, r2
 8014d08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	f003 0301 	and.w	r3, r3, #1
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d023      	beq.n	8014d5e <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	2b01      	cmp	r3, #1
 8014d1c:	d10f      	bne.n	8014d3e <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	785b      	ldrb	r3, [r3, #1]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d11b      	bne.n	8014d5e <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014d2a:	2b5e      	cmp	r3, #94	@ 0x5e
 8014d2c:	d117      	bne.n	8014d5e <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	7b5b      	ldrb	r3, [r3, #13]
 8014d32:	f043 0310 	orr.w	r3, r3, #16
 8014d36:	b2da      	uxtb	r2, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	735a      	strb	r2, [r3, #13]
 8014d3c:	e00f      	b.n	8014d5e <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	2206      	movs	r2, #6
 8014d42:	4928      	ldr	r1, [pc, #160]	@ (8014de4 <ethernet_input+0x11c>)
 8014d44:	4618      	mov	r0, r3
 8014d46:	f00d f9ad 	bl	80220a4 <memcmp>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d106      	bne.n	8014d5e <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	7b5b      	ldrb	r3, [r3, #13]
 8014d54:	f043 0308 	orr.w	r3, r3, #8
 8014d58:	b2da      	uxtb	r2, r3
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014d5e:	89fb      	ldrh	r3, [r7, #14]
 8014d60:	2b08      	cmp	r3, #8
 8014d62:	d003      	beq.n	8014d6c <ethernet_input+0xa4>
 8014d64:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014d68:	d014      	beq.n	8014d94 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014d6a:	e032      	b.n	8014dd2 <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d72:	f003 0308 	and.w	r3, r3, #8
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d024      	beq.n	8014dc4 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014d7a:	8afb      	ldrh	r3, [r7, #22]
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f004 fd82 	bl	8019888 <pbuf_remove_header>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d11e      	bne.n	8014dc8 <ethernet_input+0x100>
        ip4_input(p, netif);
 8014d8a:	6839      	ldr	r1, [r7, #0]
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f000 fb95 	bl	80154bc <ip4_input>
      break;
 8014d92:	e013      	b.n	8014dbc <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d9a:	f003 0308 	and.w	r3, r3, #8
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d014      	beq.n	8014dcc <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014da2:	8afb      	ldrh	r3, [r7, #22]
 8014da4:	4619      	mov	r1, r3
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f004 fd6e 	bl	8019888 <pbuf_remove_header>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d10e      	bne.n	8014dd0 <ethernet_input+0x108>
        etharp_input(p, netif);
 8014db2:	6839      	ldr	r1, [r7, #0]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7ff fb5f 	bl	8014478 <etharp_input>
      break;
 8014dba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	e00c      	b.n	8014dda <ethernet_input+0x112>
    goto free_and_return;
 8014dc0:	bf00      	nop
 8014dc2:	e006      	b.n	8014dd2 <ethernet_input+0x10a>
        goto free_and_return;
 8014dc4:	bf00      	nop
 8014dc6:	e004      	b.n	8014dd2 <ethernet_input+0x10a>
        goto free_and_return;
 8014dc8:	bf00      	nop
 8014dca:	e002      	b.n	8014dd2 <ethernet_input+0x10a>
        goto free_and_return;
 8014dcc:	bf00      	nop
 8014dce:	e000      	b.n	8014dd2 <ethernet_input+0x10a>
        goto free_and_return;
 8014dd0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f004 fdde 	bl	8019994 <pbuf_free>
  return ERR_OK;
 8014dd8:	2300      	movs	r3, #0
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3718      	adds	r7, #24
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	08028a3c 	.word	0x08028a3c

08014de8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
 8014df4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014df6:	8c3b      	ldrh	r3, [r7, #32]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7fe ffe7 	bl	8013dcc <lwip_htons>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014e02:	210e      	movs	r1, #14
 8014e04:	68b8      	ldr	r0, [r7, #8]
 8014e06:	f004 fd2f 	bl	8019868 <pbuf_add_header>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d127      	bne.n	8014e60 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8014e10:	f7fb f846 	bl	800fea0 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	8afa      	ldrh	r2, [r7, #22]
 8014e1e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	2206      	movs	r2, #6
 8014e24:	6839      	ldr	r1, [r7, #0]
 8014e26:	4618      	mov	r0, r3
 8014e28:	f00d fa61 	bl	80222ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	3306      	adds	r3, #6
 8014e30:	2206      	movs	r2, #6
 8014e32:	6879      	ldr	r1, [r7, #4]
 8014e34:	4618      	mov	r0, r3
 8014e36:	f00d fa5a 	bl	80222ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014e40:	2b06      	cmp	r3, #6
 8014e42:	d006      	beq.n	8014e52 <ethernet_output+0x6a>
 8014e44:	4b0a      	ldr	r3, [pc, #40]	@ (8014e70 <ethernet_output+0x88>)
 8014e46:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014e4a:	490a      	ldr	r1, [pc, #40]	@ (8014e74 <ethernet_output+0x8c>)
 8014e4c:	480a      	ldr	r0, [pc, #40]	@ (8014e78 <ethernet_output+0x90>)
 8014e4e:	f00c ffad 	bl	8021dac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	68b9      	ldr	r1, [r7, #8]
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	4798      	blx	r3
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	e002      	b.n	8014e66 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 8014e60:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014e62:	f06f 0301 	mvn.w	r3, #1
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3718      	adds	r7, #24
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	080255a0 	.word	0x080255a0
 8014e74:	08025604 	.word	0x08025604
 8014e78:	08025638 	.word	0x08025638

08014e7c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b08e      	sub	sp, #56	@ 0x38
 8014e80:	af04      	add	r7, sp, #16
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e86:	4b86      	ldr	r3, [pc, #536]	@ (80150a0 <icmp_input+0x224>)
 8014e88:	689b      	ldr	r3, [r3, #8]
 8014e8a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8014e8c:	6a3b      	ldr	r3, [r7, #32]
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	f003 030f 	and.w	r3, r3, #15
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	b2db      	uxtb	r3, r3
 8014e9a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8014e9c:	8bfb      	ldrh	r3, [r7, #30]
 8014e9e:	2b13      	cmp	r3, #19
 8014ea0:	f240 80ea 	bls.w	8015078 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	895b      	ldrh	r3, [r3, #10]
 8014ea8:	2b03      	cmp	r3, #3
 8014eaa:	f240 80e7 	bls.w	801507c <icmp_input+0x200>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014eb6:	7f7b      	ldrb	r3, [r7, #29]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	f000 80d6 	beq.w	801506a <icmp_input+0x1ee>
 8014ebe:	2b08      	cmp	r3, #8
 8014ec0:	f040 80d6 	bne.w	8015070 <icmp_input+0x1f4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014ec4:	4b77      	ldr	r3, [pc, #476]	@ (80150a4 <icmp_input+0x228>)
 8014ec6:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ec8:	4b75      	ldr	r3, [pc, #468]	@ (80150a0 <icmp_input+0x224>)
 8014eca:	695b      	ldr	r3, [r3, #20]
 8014ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014ed0:	2be0      	cmp	r3, #224	@ 0xe0
 8014ed2:	d102      	bne.n	8014eda <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	3304      	adds	r3, #4
 8014ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014eda:	4b71      	ldr	r3, [pc, #452]	@ (80150a0 <icmp_input+0x224>)
 8014edc:	695b      	ldr	r3, [r3, #20]
 8014ede:	4a70      	ldr	r2, [pc, #448]	@ (80150a0 <icmp_input+0x224>)
 8014ee0:	6812      	ldr	r2, [r2, #0]
 8014ee2:	4611      	mov	r1, r2
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f000 fce9 	bl	80158bc <ip4_addr_isbroadcast_u32>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d002      	beq.n	8014ef6 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	3304      	adds	r3, #4
 8014ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	891b      	ldrh	r3, [r3, #8]
 8014efa:	2b07      	cmp	r3, #7
 8014efc:	f240 80c0 	bls.w	8015080 <icmp_input+0x204>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f000 f9dc 	bl	80152be <inet_chksum_pbuf>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d003      	beq.n	8014f14 <icmp_input+0x98>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f004 fd41 	bl	8019994 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014f12:	e0c1      	b.n	8015098 <icmp_input+0x21c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f14:	8bfb      	ldrh	r3, [r7, #30]
 8014f16:	330e      	adds	r3, #14
 8014f18:	4619      	mov	r1, r3
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f004 fca4 	bl	8019868 <pbuf_add_header>
 8014f20:	4603      	mov	r3, r0
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d04b      	beq.n	8014fbe <icmp_input+0x142>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	891a      	ldrh	r2, [r3, #8]
 8014f2a:	8bfb      	ldrh	r3, [r7, #30]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	891b      	ldrh	r3, [r3, #8]
 8014f34:	8b7a      	ldrh	r2, [r7, #26]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	f0c0 80a7 	bcc.w	801508a <icmp_input+0x20e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014f3c:	8b7b      	ldrh	r3, [r7, #26]
 8014f3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f42:	4619      	mov	r1, r3
 8014f44:	200e      	movs	r0, #14
 8014f46:	f004 fa43 	bl	80193d0 <pbuf_alloc>
 8014f4a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	f000 809d 	beq.w	801508e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	895b      	ldrh	r3, [r3, #10]
 8014f58:	461a      	mov	r2, r3
 8014f5a:	8bfb      	ldrh	r3, [r7, #30]
 8014f5c:	3308      	adds	r3, #8
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d203      	bcs.n	8014f6a <icmp_input+0xee>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014f62:	6978      	ldr	r0, [r7, #20]
 8014f64:	f004 fd16 	bl	8019994 <pbuf_free>
          goto icmperr;
 8014f68:	e092      	b.n	8015090 <icmp_input+0x214>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	8bfa      	ldrh	r2, [r7, #30]
 8014f70:	6a39      	ldr	r1, [r7, #32]
 8014f72:	4618      	mov	r0, r3
 8014f74:	f00d f9bb 	bl	80222ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014f78:	8bfb      	ldrh	r3, [r7, #30]
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	6978      	ldr	r0, [r7, #20]
 8014f7e:	f004 fc83 	bl	8019888 <pbuf_remove_header>
 8014f82:	4603      	mov	r3, r0
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d009      	beq.n	8014f9c <icmp_input+0x120>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f88:	4b47      	ldr	r3, [pc, #284]	@ (80150a8 <icmp_input+0x22c>)
 8014f8a:	22b6      	movs	r2, #182	@ 0xb6
 8014f8c:	4947      	ldr	r1, [pc, #284]	@ (80150ac <icmp_input+0x230>)
 8014f8e:	4848      	ldr	r0, [pc, #288]	@ (80150b0 <icmp_input+0x234>)
 8014f90:	f00c ff0c 	bl	8021dac <iprintf>
          pbuf_free(r);
 8014f94:	6978      	ldr	r0, [r7, #20]
 8014f96:	f004 fcfd 	bl	8019994 <pbuf_free>
          goto icmperr;
 8014f9a:	e079      	b.n	8015090 <icmp_input+0x214>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f9c:	6879      	ldr	r1, [r7, #4]
 8014f9e:	6978      	ldr	r0, [r7, #20]
 8014fa0:	f004 fe2c 	bl	8019bfc <pbuf_copy>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d003      	beq.n	8014fb2 <icmp_input+0x136>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014faa:	6978      	ldr	r0, [r7, #20]
 8014fac:	f004 fcf2 	bl	8019994 <pbuf_free>
          goto icmperr;
 8014fb0:	e06e      	b.n	8015090 <icmp_input+0x214>
        }
        /* free the original p */
        pbuf_free(p);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f004 fcee 	bl	8019994 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	607b      	str	r3, [r7, #4]
 8014fbc:	e00f      	b.n	8014fde <icmp_input+0x162>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014fbe:	8bfb      	ldrh	r3, [r7, #30]
 8014fc0:	330e      	adds	r3, #14
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f004 fc5f 	bl	8019888 <pbuf_remove_header>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d006      	beq.n	8014fde <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014fd0:	4b35      	ldr	r3, [pc, #212]	@ (80150a8 <icmp_input+0x22c>)
 8014fd2:	22c7      	movs	r2, #199	@ 0xc7
 8014fd4:	4937      	ldr	r1, [pc, #220]	@ (80150b4 <icmp_input+0x238>)
 8014fd6:	4836      	ldr	r0, [pc, #216]	@ (80150b0 <icmp_input+0x234>)
 8014fd8:	f00c fee8 	bl	8021dac <iprintf>
          goto icmperr;
 8014fdc:	e058      	b.n	8015090 <icmp_input+0x214>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014fe4:	8bfb      	ldrh	r3, [r7, #30]
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f004 fc3d 	bl	8019868 <pbuf_add_header>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d13c      	bne.n	801506e <icmp_input+0x1f2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015002:	4b27      	ldr	r3, [pc, #156]	@ (80150a0 <icmp_input+0x224>)
 8015004:	691a      	ldr	r2, [r3, #16]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	2200      	movs	r2, #0
 801500e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	885b      	ldrh	r3, [r3, #2]
 8015014:	b29b      	uxth	r3, r3
 8015016:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801501a:	4293      	cmp	r3, r2
 801501c:	d907      	bls.n	801502e <icmp_input+0x1b2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	885b      	ldrh	r3, [r3, #2]
 8015022:	b29b      	uxth	r3, r3
 8015024:	3309      	adds	r3, #9
 8015026:	b29a      	uxth	r2, r3
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	805a      	strh	r2, [r3, #2]
 801502c:	e006      	b.n	801503c <icmp_input+0x1c0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	885b      	ldrh	r3, [r3, #2]
 8015032:	b29b      	uxth	r3, r3
 8015034:	3308      	adds	r3, #8
 8015036:	b29a      	uxth	r2, r3
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	22ff      	movs	r2, #255	@ 0xff
 8015040:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2200      	movs	r2, #0
 8015046:	729a      	strb	r2, [r3, #10]
 8015048:	2200      	movs	r2, #0
 801504a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	9302      	str	r3, [sp, #8]
 8015050:	2301      	movs	r3, #1
 8015052:	9301      	str	r3, [sp, #4]
 8015054:	2300      	movs	r3, #0
 8015056:	9300      	str	r3, [sp, #0]
 8015058:	23ff      	movs	r3, #255	@ 0xff
 801505a:	2200      	movs	r2, #0
 801505c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f000 fb52 	bl	8015708 <ip4_output_if>
 8015064:	4603      	mov	r3, r0
 8015066:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015068:	e001      	b.n	801506e <icmp_input+0x1f2>
      break;
 801506a:	bf00      	nop
 801506c:	e000      	b.n	8015070 <icmp_input+0x1f4>
      break;
 801506e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f004 fc8f 	bl	8019994 <pbuf_free>
  return;
 8015076:	e00f      	b.n	8015098 <icmp_input+0x21c>
    goto lenerr;
 8015078:	bf00      	nop
 801507a:	e002      	b.n	8015082 <icmp_input+0x206>
    goto lenerr;
 801507c:	bf00      	nop
 801507e:	e000      	b.n	8015082 <icmp_input+0x206>
        goto lenerr;
 8015080:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f004 fc86 	bl	8019994 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015088:	e006      	b.n	8015098 <icmp_input+0x21c>
          goto icmperr;
 801508a:	bf00      	nop
 801508c:	e000      	b.n	8015090 <icmp_input+0x214>
          goto icmperr;
 801508e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f004 fc7f 	bl	8019994 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015096:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015098:	3728      	adds	r7, #40	@ 0x28
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	2400a160 	.word	0x2400a160
 80150a4:	2400a174 	.word	0x2400a174
 80150a8:	08025660 	.word	0x08025660
 80150ac:	080256c4 	.word	0x080256c4
 80150b0:	080256fc 	.word	0x080256fc
 80150b4:	08025724 	.word	0x08025724

080150b8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	460b      	mov	r3, r1
 80150c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80150c4:	78fb      	ldrb	r3, [r7, #3]
 80150c6:	461a      	mov	r2, r3
 80150c8:	2103      	movs	r1, #3
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f000 f814 	bl	80150f8 <icmp_send_response>
}
 80150d0:	bf00      	nop
 80150d2:	3708      	adds	r7, #8
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	460b      	mov	r3, r1
 80150e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80150e4:	78fb      	ldrb	r3, [r7, #3]
 80150e6:	461a      	mov	r2, r3
 80150e8:	210b      	movs	r1, #11
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f000 f804 	bl	80150f8 <icmp_send_response>
}
 80150f0:	bf00      	nop
 80150f2:	3708      	adds	r7, #8
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b08c      	sub	sp, #48	@ 0x30
 80150fc:	af04      	add	r7, sp, #16
 80150fe:	6078      	str	r0, [r7, #4]
 8015100:	460b      	mov	r3, r1
 8015102:	70fb      	strb	r3, [r7, #3]
 8015104:	4613      	mov	r3, r2
 8015106:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015108:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801510c:	2124      	movs	r1, #36	@ 0x24
 801510e:	2022      	movs	r0, #34	@ 0x22
 8015110:	f004 f95e 	bl	80193d0 <pbuf_alloc>
 8015114:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d056      	beq.n	80151ca <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801511c:	69fb      	ldr	r3, [r7, #28]
 801511e:	895b      	ldrh	r3, [r3, #10]
 8015120:	2b23      	cmp	r3, #35	@ 0x23
 8015122:	d806      	bhi.n	8015132 <icmp_send_response+0x3a>
 8015124:	4b2b      	ldr	r3, [pc, #172]	@ (80151d4 <icmp_send_response+0xdc>)
 8015126:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801512a:	492b      	ldr	r1, [pc, #172]	@ (80151d8 <icmp_send_response+0xe0>)
 801512c:	482b      	ldr	r0, [pc, #172]	@ (80151dc <icmp_send_response+0xe4>)
 801512e:	f00c fe3d 	bl	8021dac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	78fa      	ldrb	r2, [r7, #3]
 8015142:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	78ba      	ldrb	r2, [r7, #2]
 8015148:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	2200      	movs	r2, #0
 801514e:	711a      	strb	r2, [r3, #4]
 8015150:	2200      	movs	r2, #0
 8015152:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	2200      	movs	r2, #0
 8015158:	719a      	strb	r2, [r3, #6]
 801515a:	2200      	movs	r2, #0
 801515c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	f103 0008 	add.w	r0, r3, #8
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	221c      	movs	r2, #28
 801516c:	4619      	mov	r1, r3
 801516e:	f00d f8be 	bl	80222ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015172:	69bb      	ldr	r3, [r7, #24]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015178:	f107 030c 	add.w	r3, r7, #12
 801517c:	4618      	mov	r0, r3
 801517e:	f000 f903 	bl	8015388 <ip4_route>
 8015182:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d01b      	beq.n	80151c2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	2200      	movs	r2, #0
 801518e:	709a      	strb	r2, [r3, #2]
 8015190:	2200      	movs	r2, #0
 8015192:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	895b      	ldrh	r3, [r3, #10]
 8015198:	4619      	mov	r1, r3
 801519a:	6978      	ldr	r0, [r7, #20]
 801519c:	f000 f87d 	bl	801529a <inet_chksum>
 80151a0:	4603      	mov	r3, r0
 80151a2:	461a      	mov	r2, r3
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80151a8:	f107 020c 	add.w	r2, r7, #12
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	9302      	str	r3, [sp, #8]
 80151b0:	2301      	movs	r3, #1
 80151b2:	9301      	str	r3, [sp, #4]
 80151b4:	2300      	movs	r3, #0
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	23ff      	movs	r3, #255	@ 0xff
 80151ba:	2100      	movs	r1, #0
 80151bc:	69f8      	ldr	r0, [r7, #28]
 80151be:	f000 faa3 	bl	8015708 <ip4_output_if>
  }
  pbuf_free(q);
 80151c2:	69f8      	ldr	r0, [r7, #28]
 80151c4:	f004 fbe6 	bl	8019994 <pbuf_free>
 80151c8:	e000      	b.n	80151cc <icmp_send_response+0xd4>
    return;
 80151ca:	bf00      	nop
}
 80151cc:	3720      	adds	r7, #32
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	08025660 	.word	0x08025660
 80151d8:	08025758 	.word	0x08025758
 80151dc:	080256fc 	.word	0x080256fc

080151e0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80151e0:	b480      	push	{r7}
 80151e2:	b089      	sub	sp, #36	@ 0x24
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80151ee:	2300      	movs	r3, #0
 80151f0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80151f2:	2300      	movs	r3, #0
 80151f4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80151f6:	69fb      	ldr	r3, [r7, #28]
 80151f8:	f003 0301 	and.w	r3, r3, #1
 80151fc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d00d      	beq.n	8015220 <lwip_standard_chksum+0x40>
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	2b00      	cmp	r3, #0
 8015208:	dd0a      	ble.n	8015220 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801520a:	69fa      	ldr	r2, [r7, #28]
 801520c:	1c53      	adds	r3, r2, #1
 801520e:	61fb      	str	r3, [r7, #28]
 8015210:	f107 030e 	add.w	r3, r7, #14
 8015214:	3301      	adds	r3, #1
 8015216:	7812      	ldrb	r2, [r2, #0]
 8015218:	701a      	strb	r2, [r3, #0]
    len--;
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	3b01      	subs	r3, #1
 801521e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8015220:	69fb      	ldr	r3, [r7, #28]
 8015222:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8015224:	e00a      	b.n	801523c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	1c9a      	adds	r2, r3, #2
 801522a:	61ba      	str	r2, [r7, #24]
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	461a      	mov	r2, r3
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	4413      	add	r3, r2
 8015234:	617b      	str	r3, [r7, #20]
    len -= 2;
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	3b02      	subs	r3, #2
 801523a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	2b01      	cmp	r3, #1
 8015240:	dcf1      	bgt.n	8015226 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	dd04      	ble.n	8015252 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8015248:	f107 030e 	add.w	r3, r7, #14
 801524c:	69ba      	ldr	r2, [r7, #24]
 801524e:	7812      	ldrb	r2, [r2, #0]
 8015250:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8015252:	89fb      	ldrh	r3, [r7, #14]
 8015254:	461a      	mov	r2, r3
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	4413      	add	r3, r2
 801525a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	0c1a      	lsrs	r2, r3, #16
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	b29b      	uxth	r3, r3
 8015264:	4413      	add	r3, r2
 8015266:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	0c1a      	lsrs	r2, r3, #16
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	b29b      	uxth	r3, r3
 8015270:	4413      	add	r3, r2
 8015272:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d007      	beq.n	801528a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	021b      	lsls	r3, r3, #8
 801527e:	b29a      	uxth	r2, r3
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	0a1b      	lsrs	r3, r3, #8
 8015284:	b2db      	uxtb	r3, r3
 8015286:	4313      	orrs	r3, r2
 8015288:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	b29b      	uxth	r3, r3
}
 801528e:	4618      	mov	r0, r3
 8015290:	3724      	adds	r7, #36	@ 0x24
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801529a:	b580      	push	{r7, lr}
 801529c:	b082      	sub	sp, #8
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
 80152a2:	460b      	mov	r3, r1
 80152a4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80152a6:	887b      	ldrh	r3, [r7, #2]
 80152a8:	4619      	mov	r1, r3
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f7ff ff98 	bl	80151e0 <lwip_standard_chksum>
 80152b0:	4603      	mov	r3, r0
 80152b2:	43db      	mvns	r3, r3
 80152b4:	b29b      	uxth	r3, r3
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}

080152be <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80152be:	b580      	push	{r7, lr}
 80152c0:	b086      	sub	sp, #24
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80152c6:	2300      	movs	r3, #0
 80152c8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80152ca:	2300      	movs	r3, #0
 80152cc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	613b      	str	r3, [r7, #16]
 80152d2:	e02b      	b.n	801532c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	685a      	ldr	r2, [r3, #4]
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	895b      	ldrh	r3, [r3, #10]
 80152dc:	4619      	mov	r1, r3
 80152de:	4610      	mov	r0, r2
 80152e0:	f7ff ff7e 	bl	80151e0 <lwip_standard_chksum>
 80152e4:	4603      	mov	r3, r0
 80152e6:	461a      	mov	r2, r3
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	4413      	add	r3, r2
 80152ec:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	0c1a      	lsrs	r2, r3, #16
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	4413      	add	r3, r2
 80152f8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	895b      	ldrh	r3, [r3, #10]
 80152fe:	f003 0301 	and.w	r3, r3, #1
 8015302:	b29b      	uxth	r3, r3
 8015304:	2b00      	cmp	r3, #0
 8015306:	d00e      	beq.n	8015326 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2b00      	cmp	r3, #0
 801530c:	bf0c      	ite	eq
 801530e:	2301      	moveq	r3, #1
 8015310:	2300      	movne	r3, #0
 8015312:	b2db      	uxtb	r3, r3
 8015314:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	021b      	lsls	r3, r3, #8
 801531a:	b29a      	uxth	r2, r3
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	0a1b      	lsrs	r3, r3, #8
 8015320:	b2db      	uxtb	r3, r3
 8015322:	4313      	orrs	r3, r2
 8015324:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	613b      	str	r3, [r7, #16]
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d1d0      	bne.n	80152d4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d007      	beq.n	8015348 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	021b      	lsls	r3, r3, #8
 801533c:	b29a      	uxth	r2, r3
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	0a1b      	lsrs	r3, r3, #8
 8015342:	b2db      	uxtb	r3, r3
 8015344:	4313      	orrs	r3, r2
 8015346:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	b29b      	uxth	r3, r3
 801534c:	43db      	mvns	r3, r3
 801534e:	b29b      	uxth	r3, r3
}
 8015350:	4618      	mov	r0, r3
 8015352:	3718      	adds	r7, #24
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801535e:	2300      	movs	r3, #0
 8015360:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8015362:	f004 fe9b 	bl	801a09c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015366:	f001 f9ed 	bl	8016744 <mem_init>
  memp_init();
 801536a:	f001 fd51 	bl	8016e10 <memp_init>
  pbuf_init();
  netif_init();
 801536e:	f003 fc8d 	bl	8018c8c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8015372:	f00b faf3 	bl	802095c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015376:	f004 ff0d 	bl	801a194 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801537a:	f00b f9f3 	bl	8020764 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801537e:	bf00      	nop
 8015380:	3708      	adds	r7, #8
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}
	...

08015388 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8015390:	f7fa fd86 	bl	800fea0 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015394:	4b32      	ldr	r3, [pc, #200]	@ (8015460 <ip4_route+0xd8>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	60fb      	str	r3, [r7, #12]
 801539a:	e036      	b.n	801540a <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153a2:	f003 0301 	and.w	r3, r3, #1
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d02b      	beq.n	8015404 <ip4_route+0x7c>
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153b2:	089b      	lsrs	r3, r3, #2
 80153b4:	f003 0301 	and.w	r3, r3, #1
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d022      	beq.n	8015404 <ip4_route+0x7c>
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	3304      	adds	r3, #4
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d01d      	beq.n	8015404 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	3304      	adds	r3, #4
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	405a      	eors	r2, r3
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	3308      	adds	r3, #8
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	4013      	ands	r3, r2
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d101      	bne.n	80153e4 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	e038      	b.n	8015456 <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153ea:	f003 0302 	and.w	r3, r3, #2
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d108      	bne.n	8015404 <ip4_route+0x7c>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	330c      	adds	r3, #12
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d101      	bne.n	8015404 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	e028      	b.n	8015456 <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	60fb      	str	r3, [r7, #12]
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d1c5      	bne.n	801539c <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015410:	4b14      	ldr	r3, [pc, #80]	@ (8015464 <ip4_route+0xdc>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d01a      	beq.n	801544e <ip4_route+0xc6>
 8015418:	4b12      	ldr	r3, [pc, #72]	@ (8015464 <ip4_route+0xdc>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015420:	f003 0301 	and.w	r3, r3, #1
 8015424:	2b00      	cmp	r3, #0
 8015426:	d012      	beq.n	801544e <ip4_route+0xc6>
 8015428:	4b0e      	ldr	r3, [pc, #56]	@ (8015464 <ip4_route+0xdc>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015430:	f003 0304 	and.w	r3, r3, #4
 8015434:	2b00      	cmp	r3, #0
 8015436:	d00a      	beq.n	801544e <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015438:	4b0a      	ldr	r3, [pc, #40]	@ (8015464 <ip4_route+0xdc>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	3304      	adds	r3, #4
 801543e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015440:	2b00      	cmp	r3, #0
 8015442:	d004      	beq.n	801544e <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b7f      	cmp	r3, #127	@ 0x7f
 801544c:	d101      	bne.n	8015452 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801544e:	2300      	movs	r3, #0
 8015450:	e001      	b.n	8015456 <ip4_route+0xce>
  }

  return netif_default;
 8015452:	4b04      	ldr	r3, [pc, #16]	@ (8015464 <ip4_route+0xdc>)
 8015454:	681b      	ldr	r3, [r3, #0]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	2401268c 	.word	0x2401268c
 8015464:	24012690 	.word	0x24012690

08015468 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015476:	f003 0301 	and.w	r3, r3, #1
 801547a:	b2db      	uxtb	r3, r3
 801547c:	2b00      	cmp	r3, #0
 801547e:	d016      	beq.n	80154ae <ip4_input_accept+0x46>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	3304      	adds	r3, #4
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d011      	beq.n	80154ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801548a:	4b0b      	ldr	r3, [pc, #44]	@ (80154b8 <ip4_input_accept+0x50>)
 801548c:	695a      	ldr	r2, [r3, #20]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	3304      	adds	r3, #4
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	429a      	cmp	r2, r3
 8015496:	d008      	beq.n	80154aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015498:	4b07      	ldr	r3, [pc, #28]	@ (80154b8 <ip4_input_accept+0x50>)
 801549a:	695b      	ldr	r3, [r3, #20]
 801549c:	6879      	ldr	r1, [r7, #4]
 801549e:	4618      	mov	r0, r3
 80154a0:	f000 fa0c 	bl	80158bc <ip4_addr_isbroadcast_u32>
 80154a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d001      	beq.n	80154ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80154aa:	2301      	movs	r3, #1
 80154ac:	e000      	b.n	80154b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80154ae:	2300      	movs	r3, #0
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	2400a160 	.word	0x2400a160

080154bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b086      	sub	sp, #24
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 80154c6:	f7fa fceb 	bl	800fea0 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	091b      	lsrs	r3, r3, #4
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	2b04      	cmp	r3, #4
 80154da:	d004      	beq.n	80154e6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f004 fa59 	bl	8019994 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80154e2:	2300      	movs	r3, #0
 80154e4:	e107      	b.n	80156f6 <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	f003 030f 	and.w	r3, r3, #15
 80154ee:	b2db      	uxtb	r3, r3
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	b2db      	uxtb	r3, r3
 80154f4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	885b      	ldrh	r3, [r3, #2]
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7fe fc65 	bl	8013dcc <lwip_htons>
 8015502:	4603      	mov	r3, r0
 8015504:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	891b      	ldrh	r3, [r3, #8]
 801550a:	89ba      	ldrh	r2, [r7, #12]
 801550c:	429a      	cmp	r2, r3
 801550e:	d204      	bcs.n	801551a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015510:	89bb      	ldrh	r3, [r7, #12]
 8015512:	4619      	mov	r1, r3
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f004 f8b9 	bl	801968c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	895b      	ldrh	r3, [r3, #10]
 801551e:	89fa      	ldrh	r2, [r7, #14]
 8015520:	429a      	cmp	r2, r3
 8015522:	d807      	bhi.n	8015534 <ip4_input+0x78>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	891b      	ldrh	r3, [r3, #8]
 8015528:	89ba      	ldrh	r2, [r7, #12]
 801552a:	429a      	cmp	r2, r3
 801552c:	d802      	bhi.n	8015534 <ip4_input+0x78>
 801552e:	89fb      	ldrh	r3, [r7, #14]
 8015530:	2b13      	cmp	r3, #19
 8015532:	d804      	bhi.n	801553e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f004 fa2d 	bl	8019994 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801553a:	2300      	movs	r3, #0
 801553c:	e0db      	b.n	80156f6 <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	691b      	ldr	r3, [r3, #16]
 8015542:	4a6f      	ldr	r2, [pc, #444]	@ (8015700 <ip4_input+0x244>)
 8015544:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	68db      	ldr	r3, [r3, #12]
 801554a:	4a6d      	ldr	r2, [pc, #436]	@ (8015700 <ip4_input+0x244>)
 801554c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801554e:	4b6c      	ldr	r3, [pc, #432]	@ (8015700 <ip4_input+0x244>)
 8015550:	695b      	ldr	r3, [r3, #20]
 8015552:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015556:	2be0      	cmp	r3, #224	@ 0xe0
 8015558:	d112      	bne.n	8015580 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015560:	f003 0301 	and.w	r3, r3, #1
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b00      	cmp	r3, #0
 8015568:	d007      	beq.n	801557a <ip4_input+0xbe>
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	3304      	adds	r3, #4
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d002      	beq.n	801557a <ip4_input+0xbe>
      netif = inp;
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	613b      	str	r3, [r7, #16]
 8015578:	e02a      	b.n	80155d0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801557a:	2300      	movs	r3, #0
 801557c:	613b      	str	r3, [r7, #16]
 801557e:	e027      	b.n	80155d0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015580:	6838      	ldr	r0, [r7, #0]
 8015582:	f7ff ff71 	bl	8015468 <ip4_input_accept>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	d002      	beq.n	8015592 <ip4_input+0xd6>
      netif = inp;
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	613b      	str	r3, [r7, #16]
 8015590:	e01e      	b.n	80155d0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015592:	2300      	movs	r3, #0
 8015594:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015596:	4b5a      	ldr	r3, [pc, #360]	@ (8015700 <ip4_input+0x244>)
 8015598:	695b      	ldr	r3, [r3, #20]
 801559a:	b2db      	uxtb	r3, r3
 801559c:	2b7f      	cmp	r3, #127	@ 0x7f
 801559e:	d017      	beq.n	80155d0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80155a0:	4b58      	ldr	r3, [pc, #352]	@ (8015704 <ip4_input+0x248>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	613b      	str	r3, [r7, #16]
 80155a6:	e00e      	b.n	80155c6 <ip4_input+0x10a>
          if (netif == inp) {
 80155a8:	693a      	ldr	r2, [r7, #16]
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	429a      	cmp	r2, r3
 80155ae:	d006      	beq.n	80155be <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80155b0:	6938      	ldr	r0, [r7, #16]
 80155b2:	f7ff ff59 	bl	8015468 <ip4_input_accept>
 80155b6:	4603      	mov	r3, r0
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d108      	bne.n	80155ce <ip4_input+0x112>
 80155bc:	e000      	b.n	80155c0 <ip4_input+0x104>
            continue;
 80155be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	613b      	str	r3, [r7, #16]
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d1ed      	bne.n	80155a8 <ip4_input+0xec>
 80155cc:	e000      	b.n	80155d0 <ip4_input+0x114>
            break;
 80155ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155d0:	4b4b      	ldr	r3, [pc, #300]	@ (8015700 <ip4_input+0x244>)
 80155d2:	691b      	ldr	r3, [r3, #16]
 80155d4:	6839      	ldr	r1, [r7, #0]
 80155d6:	4618      	mov	r0, r3
 80155d8:	f000 f970 	bl	80158bc <ip4_addr_isbroadcast_u32>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d105      	bne.n	80155ee <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80155e2:	4b47      	ldr	r3, [pc, #284]	@ (8015700 <ip4_input+0x244>)
 80155e4:	691b      	ldr	r3, [r3, #16]
 80155e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155ea:	2be0      	cmp	r3, #224	@ 0xe0
 80155ec:	d104      	bne.n	80155f8 <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f004 f9d0 	bl	8019994 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80155f4:	2300      	movs	r3, #0
 80155f6:	e07e      	b.n	80156f6 <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d104      	bne.n	8015608 <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f004 f9c8 	bl	8019994 <pbuf_free>
    return ERR_OK;
 8015604:	2300      	movs	r3, #0
 8015606:	e076      	b.n	80156f6 <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	88db      	ldrh	r3, [r3, #6]
 801560c:	b29b      	uxth	r3, r3
 801560e:	461a      	mov	r2, r3
 8015610:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015614:	4013      	ands	r3, r2
 8015616:	2b00      	cmp	r3, #0
 8015618:	d00b      	beq.n	8015632 <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 fc94 	bl	8015f48 <ip4_reass>
 8015620:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <ip4_input+0x170>
      return ERR_OK;
 8015628:	2300      	movs	r3, #0
 801562a:	e064      	b.n	80156f6 <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	685b      	ldr	r3, [r3, #4]
 8015630:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015632:	4a33      	ldr	r2, [pc, #204]	@ (8015700 <ip4_input+0x244>)
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015638:	4a31      	ldr	r2, [pc, #196]	@ (8015700 <ip4_input+0x244>)
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801563e:	4a30      	ldr	r2, [pc, #192]	@ (8015700 <ip4_input+0x244>)
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	f003 030f 	and.w	r3, r3, #15
 801564c:	b2db      	uxtb	r3, r3
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	b2db      	uxtb	r3, r3
 8015652:	461a      	mov	r2, r3
 8015654:	4b2a      	ldr	r3, [pc, #168]	@ (8015700 <ip4_input+0x244>)
 8015656:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015658:	89fb      	ldrh	r3, [r7, #14]
 801565a:	4619      	mov	r1, r3
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f004 f913 	bl	8019888 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	7a5b      	ldrb	r3, [r3, #9]
 8015666:	2b11      	cmp	r3, #17
 8015668:	d006      	beq.n	8015678 <ip4_input+0x1bc>
 801566a:	2b11      	cmp	r3, #17
 801566c:	dc13      	bgt.n	8015696 <ip4_input+0x1da>
 801566e:	2b01      	cmp	r3, #1
 8015670:	d00c      	beq.n	801568c <ip4_input+0x1d0>
 8015672:	2b06      	cmp	r3, #6
 8015674:	d005      	beq.n	8015682 <ip4_input+0x1c6>
 8015676:	e00e      	b.n	8015696 <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015678:	6839      	ldr	r1, [r7, #0]
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f00b fa1c 	bl	8020ab8 <udp_input>
        break;
 8015680:	e026      	b.n	80156d0 <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015682:	6839      	ldr	r1, [r7, #0]
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f006 fbe1 	bl	801be4c <tcp_input>
        break;
 801568a:	e021      	b.n	80156d0 <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801568c:	6839      	ldr	r1, [r7, #0]
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7ff fbf4 	bl	8014e7c <icmp_input>
        break;
 8015694:	e01c      	b.n	80156d0 <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015696:	4b1a      	ldr	r3, [pc, #104]	@ (8015700 <ip4_input+0x244>)
 8015698:	695b      	ldr	r3, [r3, #20]
 801569a:	6939      	ldr	r1, [r7, #16]
 801569c:	4618      	mov	r0, r3
 801569e:	f000 f90d 	bl	80158bc <ip4_addr_isbroadcast_u32>
 80156a2:	4603      	mov	r3, r0
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d10f      	bne.n	80156c8 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156a8:	4b15      	ldr	r3, [pc, #84]	@ (8015700 <ip4_input+0x244>)
 80156aa:	695b      	ldr	r3, [r3, #20]
 80156ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156b0:	2be0      	cmp	r3, #224	@ 0xe0
 80156b2:	d009      	beq.n	80156c8 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80156b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80156b8:	4619      	mov	r1, r3
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f004 f957 	bl	801996e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80156c0:	2102      	movs	r1, #2
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f7ff fcf8 	bl	80150b8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f004 f963 	bl	8019994 <pbuf_free>
        break;
 80156ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80156d0:	4b0b      	ldr	r3, [pc, #44]	@ (8015700 <ip4_input+0x244>)
 80156d2:	2200      	movs	r2, #0
 80156d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80156d6:	4b0a      	ldr	r3, [pc, #40]	@ (8015700 <ip4_input+0x244>)
 80156d8:	2200      	movs	r2, #0
 80156da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80156dc:	4b08      	ldr	r3, [pc, #32]	@ (8015700 <ip4_input+0x244>)
 80156de:	2200      	movs	r2, #0
 80156e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80156e2:	4b07      	ldr	r3, [pc, #28]	@ (8015700 <ip4_input+0x244>)
 80156e4:	2200      	movs	r2, #0
 80156e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80156e8:	4b05      	ldr	r3, [pc, #20]	@ (8015700 <ip4_input+0x244>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80156ee:	4b04      	ldr	r3, [pc, #16]	@ (8015700 <ip4_input+0x244>)
 80156f0:	2200      	movs	r2, #0
 80156f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80156f4:	2300      	movs	r3, #0
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3718      	adds	r7, #24
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	2400a160 	.word	0x2400a160
 8015704:	2401268c 	.word	0x2401268c

08015708 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08a      	sub	sp, #40	@ 0x28
 801570c:	af04      	add	r7, sp, #16
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
 8015714:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d009      	beq.n	8015734 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d003      	beq.n	801572e <ip4_output_if+0x26>
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d102      	bne.n	8015734 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015730:	3304      	adds	r3, #4
 8015732:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015734:	78fa      	ldrb	r2, [r7, #3]
 8015736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015738:	9302      	str	r3, [sp, #8]
 801573a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801573e:	9301      	str	r3, [sp, #4]
 8015740:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015744:	9300      	str	r3, [sp, #0]
 8015746:	4613      	mov	r3, r2
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	6979      	ldr	r1, [r7, #20]
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f000 f805 	bl	801575c <ip4_output_if_src>
 8015752:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015754:	4618      	mov	r0, r3
 8015756:	3718      	adds	r7, #24
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b088      	sub	sp, #32
 8015760:	af00      	add	r7, sp, #0
 8015762:	60f8      	str	r0, [r7, #12]
 8015764:	60b9      	str	r1, [r7, #8]
 8015766:	607a      	str	r2, [r7, #4]
 8015768:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 801576a:	f7fa fb99 	bl	800fea0 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	7b9b      	ldrb	r3, [r3, #14]
 8015772:	2b01      	cmp	r3, #1
 8015774:	d006      	beq.n	8015784 <ip4_output_if_src+0x28>
 8015776:	4b4b      	ldr	r3, [pc, #300]	@ (80158a4 <ip4_output_if_src+0x148>)
 8015778:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801577c:	494a      	ldr	r1, [pc, #296]	@ (80158a8 <ip4_output_if_src+0x14c>)
 801577e:	484b      	ldr	r0, [pc, #300]	@ (80158ac <ip4_output_if_src+0x150>)
 8015780:	f00c fb14 	bl	8021dac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d060      	beq.n	801584c <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 801578a:	2314      	movs	r3, #20
 801578c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801578e:	2114      	movs	r1, #20
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f004 f869 	bl	8019868 <pbuf_add_header>
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	d002      	beq.n	80157a2 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801579c:	f06f 0301 	mvn.w	r3, #1
 80157a0:	e07c      	b.n	801589c <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	685b      	ldr	r3, [r3, #4]
 80157a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	895b      	ldrh	r3, [r3, #10]
 80157ac:	2b13      	cmp	r3, #19
 80157ae:	d806      	bhi.n	80157be <ip4_output_if_src+0x62>
 80157b0:	4b3c      	ldr	r3, [pc, #240]	@ (80158a4 <ip4_output_if_src+0x148>)
 80157b2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80157b6:	493e      	ldr	r1, [pc, #248]	@ (80158b0 <ip4_output_if_src+0x154>)
 80157b8:	483c      	ldr	r0, [pc, #240]	@ (80158ac <ip4_output_if_src+0x150>)
 80157ba:	f00c faf7 	bl	8021dac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80157be:	69fb      	ldr	r3, [r7, #28]
 80157c0:	78fa      	ldrb	r2, [r7, #3]
 80157c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80157c4:	69fb      	ldr	r3, [r7, #28]
 80157c6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80157ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681a      	ldr	r2, [r3, #0]
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80157d4:	8b7b      	ldrh	r3, [r7, #26]
 80157d6:	089b      	lsrs	r3, r3, #2
 80157d8:	b29b      	uxth	r3, r3
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157e0:	b2da      	uxtb	r2, r3
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80157ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	891b      	ldrh	r3, [r3, #8]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fe faea 	bl	8013dcc <lwip_htons>
 80157f8:	4603      	mov	r3, r0
 80157fa:	461a      	mov	r2, r3
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015800:	69fb      	ldr	r3, [r7, #28]
 8015802:	2200      	movs	r2, #0
 8015804:	719a      	strb	r2, [r3, #6]
 8015806:	2200      	movs	r2, #0
 8015808:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801580a:	4b2a      	ldr	r3, [pc, #168]	@ (80158b4 <ip4_output_if_src+0x158>)
 801580c:	881b      	ldrh	r3, [r3, #0]
 801580e:	4618      	mov	r0, r3
 8015810:	f7fe fadc 	bl	8013dcc <lwip_htons>
 8015814:	4603      	mov	r3, r0
 8015816:	461a      	mov	r2, r3
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801581c:	4b25      	ldr	r3, [pc, #148]	@ (80158b4 <ip4_output_if_src+0x158>)
 801581e:	881b      	ldrh	r3, [r3, #0]
 8015820:	3301      	adds	r3, #1
 8015822:	b29a      	uxth	r2, r3
 8015824:	4b23      	ldr	r3, [pc, #140]	@ (80158b4 <ip4_output_if_src+0x158>)
 8015826:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d104      	bne.n	8015838 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801582e:	4b22      	ldr	r3, [pc, #136]	@ (80158b8 <ip4_output_if_src+0x15c>)
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	60da      	str	r2, [r3, #12]
 8015836:	e003      	b.n	8015840 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	681a      	ldr	r2, [r3, #0]
 801583c:	69fb      	ldr	r3, [r7, #28]
 801583e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015840:	69fb      	ldr	r3, [r7, #28]
 8015842:	2200      	movs	r2, #0
 8015844:	729a      	strb	r2, [r3, #10]
 8015846:	2200      	movs	r2, #0
 8015848:	72da      	strb	r2, [r3, #11]
 801584a:	e00f      	b.n	801586c <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	895b      	ldrh	r3, [r3, #10]
 8015850:	2b13      	cmp	r3, #19
 8015852:	d802      	bhi.n	801585a <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015854:	f06f 0301 	mvn.w	r3, #1
 8015858:	e020      	b.n	801589c <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015860:	69fb      	ldr	r3, [r7, #28]
 8015862:	691b      	ldr	r3, [r3, #16]
 8015864:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015866:	f107 0314 	add.w	r3, r7, #20
 801586a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801586e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015870:	2b00      	cmp	r3, #0
 8015872:	d00c      	beq.n	801588e <ip4_output_if_src+0x132>
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	891a      	ldrh	r2, [r3, #8]
 8015878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801587a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801587c:	429a      	cmp	r2, r3
 801587e:	d906      	bls.n	801588e <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015884:	68f8      	ldr	r0, [r7, #12]
 8015886:	f000 fd53 	bl	8016330 <ip4_frag>
 801588a:	4603      	mov	r3, r0
 801588c:	e006      	b.n	801589c <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015890:	695b      	ldr	r3, [r3, #20]
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	68f9      	ldr	r1, [r7, #12]
 8015896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015898:	4798      	blx	r3
 801589a:	4603      	mov	r3, r0
}
 801589c:	4618      	mov	r0, r3
 801589e:	3720      	adds	r7, #32
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	08025784 	.word	0x08025784
 80158a8:	080257e8 	.word	0x080257e8
 80158ac:	080257f4 	.word	0x080257f4
 80158b0:	0802581c 	.word	0x0802581c
 80158b4:	2400a178 	.word	0x2400a178
 80158b8:	08028a4c 	.word	0x08028a4c

080158bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80158bc:	b480      	push	{r7}
 80158be:	b085      	sub	sp, #20
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158d0:	d002      	beq.n	80158d8 <ip4_addr_isbroadcast_u32+0x1c>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d101      	bne.n	80158dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80158d8:	2301      	movs	r3, #1
 80158da:	e02a      	b.n	8015932 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158e2:	f003 0302 	and.w	r3, r3, #2
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d101      	bne.n	80158ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80158ea:	2300      	movs	r3, #0
 80158ec:	e021      	b.n	8015932 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	3304      	adds	r3, #4
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d101      	bne.n	80158fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80158fa:	2300      	movs	r3, #0
 80158fc:	e019      	b.n	8015932 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80158fe:	68fa      	ldr	r2, [r7, #12]
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	3304      	adds	r3, #4
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	405a      	eors	r2, r3
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	3308      	adds	r3, #8
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	4013      	ands	r3, r2
 8015910:	2b00      	cmp	r3, #0
 8015912:	d10d      	bne.n	8015930 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	3308      	adds	r3, #8
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	43da      	mvns	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	3308      	adds	r3, #8
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015928:	429a      	cmp	r2, r3
 801592a:	d101      	bne.n	8015930 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801592c:	2301      	movs	r3, #1
 801592e:	e000      	b.n	8015932 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015930:	2300      	movs	r3, #0
  }
}
 8015932:	4618      	mov	r0, r3
 8015934:	3714      	adds	r7, #20
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
	...

08015940 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015946:	2300      	movs	r3, #0
 8015948:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801594a:	4b12      	ldr	r3, [pc, #72]	@ (8015994 <ip_reass_tmr+0x54>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015950:	e018      	b.n	8015984 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	7fdb      	ldrb	r3, [r3, #31]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00b      	beq.n	8015972 <ip_reass_tmr+0x32>
      r->timer--;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	7fdb      	ldrb	r3, [r3, #31]
 801595e:	3b01      	subs	r3, #1
 8015960:	b2da      	uxtb	r2, r3
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	60fb      	str	r3, [r7, #12]
 8015970:	e008      	b.n	8015984 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801597c:	68b9      	ldr	r1, [r7, #8]
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 f80a 	bl	8015998 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1e3      	bne.n	8015952 <ip_reass_tmr+0x12>
    }
  }
}
 801598a:	bf00      	nop
 801598c:	bf00      	nop
 801598e:	3710      	adds	r7, #16
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}
 8015994:	2400a17c 	.word	0x2400a17c

08015998 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b088      	sub	sp, #32
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80159a2:	2300      	movs	r3, #0
 80159a4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80159a6:	683a      	ldr	r2, [r7, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d105      	bne.n	80159ba <ip_reass_free_complete_datagram+0x22>
 80159ae:	4b45      	ldr	r3, [pc, #276]	@ (8015ac4 <ip_reass_free_complete_datagram+0x12c>)
 80159b0:	22ab      	movs	r2, #171	@ 0xab
 80159b2:	4945      	ldr	r1, [pc, #276]	@ (8015ac8 <ip_reass_free_complete_datagram+0x130>)
 80159b4:	4845      	ldr	r0, [pc, #276]	@ (8015acc <ip_reass_free_complete_datagram+0x134>)
 80159b6:	f00c f9f9 	bl	8021dac <iprintf>
  if (prev != NULL) {
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d00a      	beq.n	80159d6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	687a      	ldr	r2, [r7, #4]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d005      	beq.n	80159d6 <ip_reass_free_complete_datagram+0x3e>
 80159ca:	4b3e      	ldr	r3, [pc, #248]	@ (8015ac4 <ip_reass_free_complete_datagram+0x12c>)
 80159cc:	22ad      	movs	r2, #173	@ 0xad
 80159ce:	4940      	ldr	r1, [pc, #256]	@ (8015ad0 <ip_reass_free_complete_datagram+0x138>)
 80159d0:	483e      	ldr	r0, [pc, #248]	@ (8015acc <ip_reass_free_complete_datagram+0x134>)
 80159d2:	f00c f9eb 	bl	8021dac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	889b      	ldrh	r3, [r3, #4]
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d12a      	bne.n	8015a3e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	6858      	ldr	r0, [r3, #4]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	3308      	adds	r3, #8
 80159fe:	2214      	movs	r2, #20
 8015a00:	4619      	mov	r1, r3
 8015a02:	f00c fc74 	bl	80222ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015a06:	2101      	movs	r1, #1
 8015a08:	69b8      	ldr	r0, [r7, #24]
 8015a0a:	f7ff fb65 	bl	80150d8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a0e:	69b8      	ldr	r0, [r7, #24]
 8015a10:	f004 f84e 	bl	8019ab0 <pbuf_clen>
 8015a14:	4603      	mov	r3, r0
 8015a16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a18:	8bfa      	ldrh	r2, [r7, #30]
 8015a1a:	8a7b      	ldrh	r3, [r7, #18]
 8015a1c:	4413      	add	r3, r2
 8015a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015a22:	db05      	blt.n	8015a30 <ip_reass_free_complete_datagram+0x98>
 8015a24:	4b27      	ldr	r3, [pc, #156]	@ (8015ac4 <ip_reass_free_complete_datagram+0x12c>)
 8015a26:	22bc      	movs	r2, #188	@ 0xbc
 8015a28:	492a      	ldr	r1, [pc, #168]	@ (8015ad4 <ip_reass_free_complete_datagram+0x13c>)
 8015a2a:	4828      	ldr	r0, [pc, #160]	@ (8015acc <ip_reass_free_complete_datagram+0x134>)
 8015a2c:	f00c f9be 	bl	8021dac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a30:	8bfa      	ldrh	r2, [r7, #30]
 8015a32:	8a7b      	ldrh	r3, [r7, #18]
 8015a34:	4413      	add	r3, r2
 8015a36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015a38:	69b8      	ldr	r0, [r7, #24]
 8015a3a:	f003 ffab 	bl	8019994 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	685b      	ldr	r3, [r3, #4]
 8015a42:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015a44:	e01f      	b.n	8015a86 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015a4c:	69bb      	ldr	r3, [r7, #24]
 8015a4e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015a56:	68f8      	ldr	r0, [r7, #12]
 8015a58:	f004 f82a 	bl	8019ab0 <pbuf_clen>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a60:	8bfa      	ldrh	r2, [r7, #30]
 8015a62:	8a7b      	ldrh	r3, [r7, #18]
 8015a64:	4413      	add	r3, r2
 8015a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015a6a:	db05      	blt.n	8015a78 <ip_reass_free_complete_datagram+0xe0>
 8015a6c:	4b15      	ldr	r3, [pc, #84]	@ (8015ac4 <ip_reass_free_complete_datagram+0x12c>)
 8015a6e:	22cc      	movs	r2, #204	@ 0xcc
 8015a70:	4918      	ldr	r1, [pc, #96]	@ (8015ad4 <ip_reass_free_complete_datagram+0x13c>)
 8015a72:	4816      	ldr	r0, [pc, #88]	@ (8015acc <ip_reass_free_complete_datagram+0x134>)
 8015a74:	f00c f99a 	bl	8021dac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a78:	8bfa      	ldrh	r2, [r7, #30]
 8015a7a:	8a7b      	ldrh	r3, [r7, #18]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f003 ff87 	bl	8019994 <pbuf_free>
  while (p != NULL) {
 8015a86:	69bb      	ldr	r3, [r7, #24]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d1dc      	bne.n	8015a46 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015a8c:	6839      	ldr	r1, [r7, #0]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f000 f8c2 	bl	8015c18 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015a94:	4b10      	ldr	r3, [pc, #64]	@ (8015ad8 <ip_reass_free_complete_datagram+0x140>)
 8015a96:	881b      	ldrh	r3, [r3, #0]
 8015a98:	8bfa      	ldrh	r2, [r7, #30]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d905      	bls.n	8015aaa <ip_reass_free_complete_datagram+0x112>
 8015a9e:	4b09      	ldr	r3, [pc, #36]	@ (8015ac4 <ip_reass_free_complete_datagram+0x12c>)
 8015aa0:	22d2      	movs	r2, #210	@ 0xd2
 8015aa2:	490e      	ldr	r1, [pc, #56]	@ (8015adc <ip_reass_free_complete_datagram+0x144>)
 8015aa4:	4809      	ldr	r0, [pc, #36]	@ (8015acc <ip_reass_free_complete_datagram+0x134>)
 8015aa6:	f00c f981 	bl	8021dac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8015ad8 <ip_reass_free_complete_datagram+0x140>)
 8015aac:	881a      	ldrh	r2, [r3, #0]
 8015aae:	8bfb      	ldrh	r3, [r7, #30]
 8015ab0:	1ad3      	subs	r3, r2, r3
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	4b08      	ldr	r3, [pc, #32]	@ (8015ad8 <ip_reass_free_complete_datagram+0x140>)
 8015ab6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015ab8:	8bfb      	ldrh	r3, [r7, #30]
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	3720      	adds	r7, #32
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}
 8015ac2:	bf00      	nop
 8015ac4:	0802584c 	.word	0x0802584c
 8015ac8:	080258b4 	.word	0x080258b4
 8015acc:	080258c0 	.word	0x080258c0
 8015ad0:	080258e8 	.word	0x080258e8
 8015ad4:	080258fc 	.word	0x080258fc
 8015ad8:	2400a180 	.word	0x2400a180
 8015adc:	0802591c 	.word	0x0802591c

08015ae0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b08a      	sub	sp, #40	@ 0x28
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015aea:	2300      	movs	r3, #0
 8015aec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015aee:	2300      	movs	r3, #0
 8015af0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015af2:	2300      	movs	r3, #0
 8015af4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015afa:	2300      	movs	r3, #0
 8015afc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015afe:	4b28      	ldr	r3, [pc, #160]	@ (8015ba0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015b04:	e030      	b.n	8015b68 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b08:	695a      	ldr	r2, [r3, #20]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	d10c      	bne.n	8015b2c <ip_reass_remove_oldest_datagram+0x4c>
 8015b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b14:	699a      	ldr	r2, [r3, #24]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	691b      	ldr	r3, [r3, #16]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d106      	bne.n	8015b2c <ip_reass_remove_oldest_datagram+0x4c>
 8015b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b20:	899a      	ldrh	r2, [r3, #12]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	889b      	ldrh	r3, [r3, #4]
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d014      	beq.n	8015b56 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	3301      	adds	r3, #1
 8015b30:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015b32:	6a3b      	ldr	r3, [r7, #32]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d104      	bne.n	8015b42 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b3a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	61bb      	str	r3, [r7, #24]
 8015b40:	e009      	b.n	8015b56 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b44:	7fda      	ldrb	r2, [r3, #31]
 8015b46:	6a3b      	ldr	r3, [r7, #32]
 8015b48:	7fdb      	ldrb	r3, [r3, #31]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d803      	bhi.n	8015b56 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b50:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b52:	69fb      	ldr	r3, [r7, #28]
 8015b54:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d001      	beq.n	8015b62 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b60:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d1cb      	bne.n	8015b06 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015b6e:	6a3b      	ldr	r3, [r7, #32]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d008      	beq.n	8015b86 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015b74:	69b9      	ldr	r1, [r7, #24]
 8015b76:	6a38      	ldr	r0, [r7, #32]
 8015b78:	f7ff ff0e 	bl	8015998 <ip_reass_free_complete_datagram>
 8015b7c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015b7e:	697a      	ldr	r2, [r7, #20]
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	4413      	add	r3, r2
 8015b84:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	da02      	bge.n	8015b94 <ip_reass_remove_oldest_datagram+0xb4>
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	dcac      	bgt.n	8015aee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015b94:	697b      	ldr	r3, [r7, #20]
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3728      	adds	r7, #40	@ 0x28
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	2400a17c 	.word	0x2400a17c

08015ba4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b084      	sub	sp, #16
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bae:	2004      	movs	r0, #4
 8015bb0:	f001 f99c 	bl	8016eec <memp_malloc>
 8015bb4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d110      	bne.n	8015bde <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015bbc:	6839      	ldr	r1, [r7, #0]
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f7ff ff8e 	bl	8015ae0 <ip_reass_remove_oldest_datagram>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	4293      	cmp	r3, r2
 8015bca:	dc03      	bgt.n	8015bd4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bcc:	2004      	movs	r0, #4
 8015bce:	f001 f98d 	bl	8016eec <memp_malloc>
 8015bd2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d101      	bne.n	8015bde <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	e016      	b.n	8015c0c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015bde:	2220      	movs	r2, #32
 8015be0:	2100      	movs	r1, #0
 8015be2:	68f8      	ldr	r0, [r7, #12]
 8015be4:	f00c fa88 	bl	80220f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	220f      	movs	r2, #15
 8015bec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015bee:	4b09      	ldr	r3, [pc, #36]	@ (8015c14 <ip_reass_enqueue_new_datagram+0x70>)
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015bf6:	4a07      	ldr	r2, [pc, #28]	@ (8015c14 <ip_reass_enqueue_new_datagram+0x70>)
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	3308      	adds	r3, #8
 8015c00:	2214      	movs	r2, #20
 8015c02:	6879      	ldr	r1, [r7, #4]
 8015c04:	4618      	mov	r0, r3
 8015c06:	f00c fb72 	bl	80222ee <memcpy>
  return ipr;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	3710      	adds	r7, #16
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	2400a17c 	.word	0x2400a17c

08015c18 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c22:	4b10      	ldr	r3, [pc, #64]	@ (8015c64 <ip_reass_dequeue_datagram+0x4c>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d104      	bne.n	8015c36 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	4a0c      	ldr	r2, [pc, #48]	@ (8015c64 <ip_reass_dequeue_datagram+0x4c>)
 8015c32:	6013      	str	r3, [r2, #0]
 8015c34:	e00d      	b.n	8015c52 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <ip_reass_dequeue_datagram+0x32>
 8015c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c68 <ip_reass_dequeue_datagram+0x50>)
 8015c3e:	f240 1245 	movw	r2, #325	@ 0x145
 8015c42:	490a      	ldr	r1, [pc, #40]	@ (8015c6c <ip_reass_dequeue_datagram+0x54>)
 8015c44:	480a      	ldr	r0, [pc, #40]	@ (8015c70 <ip_reass_dequeue_datagram+0x58>)
 8015c46:	f00c f8b1 	bl	8021dac <iprintf>
    prev->next = ipr->next;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015c52:	6879      	ldr	r1, [r7, #4]
 8015c54:	2004      	movs	r0, #4
 8015c56:	f001 f9bf 	bl	8016fd8 <memp_free>
}
 8015c5a:	bf00      	nop
 8015c5c:	3708      	adds	r7, #8
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}
 8015c62:	bf00      	nop
 8015c64:	2400a17c 	.word	0x2400a17c
 8015c68:	0802584c 	.word	0x0802584c
 8015c6c:	08025940 	.word	0x08025940
 8015c70:	080258c0 	.word	0x080258c0

08015c74 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b08c      	sub	sp, #48	@ 0x30
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	60f8      	str	r0, [r7, #12]
 8015c7c:	60b9      	str	r1, [r7, #8]
 8015c7e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015c80:	2300      	movs	r3, #0
 8015c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015c84:	2301      	movs	r3, #1
 8015c86:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	885b      	ldrh	r3, [r3, #2]
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fe f899 	bl	8013dcc <lwip_htons>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	f003 030f 	and.w	r3, r3, #15
 8015ca6:	b2db      	uxtb	r3, r3
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015cac:	7e7b      	ldrb	r3, [r7, #25]
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	8b7a      	ldrh	r2, [r7, #26]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d202      	bcs.n	8015cbc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cba:	e135      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015cbc:	7e7b      	ldrb	r3, [r7, #25]
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	8b7a      	ldrh	r2, [r7, #26]
 8015cc2:	1ad3      	subs	r3, r2, r3
 8015cc4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cc6:	69fb      	ldr	r3, [r7, #28]
 8015cc8:	88db      	ldrh	r3, [r3, #6]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7fe f87d 	bl	8013dcc <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	00db      	lsls	r3, r3, #3
 8015cdc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	701a      	strb	r2, [r3, #0]
 8015cea:	2200      	movs	r2, #0
 8015cec:	705a      	strb	r2, [r3, #1]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	709a      	strb	r2, [r3, #2]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf8:	8afa      	ldrh	r2, [r7, #22]
 8015cfa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015cfc:	8afa      	ldrh	r2, [r7, #22]
 8015cfe:	8b7b      	ldrh	r3, [r7, #26]
 8015d00:	4413      	add	r3, r2
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d06:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d0a:	88db      	ldrh	r3, [r3, #6]
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	8afa      	ldrh	r2, [r7, #22]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d902      	bls.n	8015d1a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d14:	f04f 33ff 	mov.w	r3, #4294967295
 8015d18:	e106      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015d20:	e068      	b.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d2a:	889b      	ldrh	r3, [r3, #4]
 8015d2c:	b29a      	uxth	r2, r3
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	889b      	ldrh	r3, [r3, #4]
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d235      	bcs.n	8015da4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d020      	beq.n	8015d86 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d46:	889b      	ldrh	r3, [r3, #4]
 8015d48:	b29a      	uxth	r2, r3
 8015d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d4c:	88db      	ldrh	r3, [r3, #6]
 8015d4e:	b29b      	uxth	r3, r3
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d307      	bcc.n	8015d64 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d56:	88db      	ldrh	r3, [r3, #6]
 8015d58:	b29a      	uxth	r2, r3
 8015d5a:	693b      	ldr	r3, [r7, #16]
 8015d5c:	889b      	ldrh	r3, [r3, #4]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d902      	bls.n	8015d6a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d64:	f04f 33ff 	mov.w	r3, #4294967295
 8015d68:	e0de      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d6c:	68ba      	ldr	r2, [r7, #8]
 8015d6e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d72:	88db      	ldrh	r3, [r3, #6]
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d78:	889b      	ldrh	r3, [r3, #4]
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d03d      	beq.n	8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015d84:	e03a      	b.n	8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d88:	88db      	ldrh	r3, [r3, #6]
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	889b      	ldrh	r3, [r3, #4]
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d902      	bls.n	8015d9c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d96:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9a:	e0c5      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	68ba      	ldr	r2, [r7, #8]
 8015da0:	605a      	str	r2, [r3, #4]
      break;
 8015da2:	e02b      	b.n	8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da6:	889b      	ldrh	r3, [r3, #4]
 8015da8:	b29a      	uxth	r2, r3
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	889b      	ldrh	r3, [r3, #4]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d102      	bne.n	8015dba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015db4:	f04f 33ff 	mov.w	r3, #4294967295
 8015db8:	e0b6      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dbc:	889b      	ldrh	r3, [r3, #4]
 8015dbe:	b29a      	uxth	r2, r3
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	88db      	ldrh	r3, [r3, #6]
 8015dc4:	b29b      	uxth	r3, r3
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d202      	bcs.n	8015dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dca:	f04f 33ff 	mov.w	r3, #4294967295
 8015dce:	e0ab      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d009      	beq.n	8015dea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dd8:	88db      	ldrh	r3, [r3, #6]
 8015dda:	b29a      	uxth	r2, r3
 8015ddc:	693b      	ldr	r3, [r7, #16]
 8015dde:	889b      	ldrh	r3, [r3, #4]
 8015de0:	b29b      	uxth	r3, r3
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d001      	beq.n	8015dea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015de6:	2300      	movs	r3, #0
 8015de8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d193      	bne.n	8015d22 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015dfa:	e000      	b.n	8015dfe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015dfc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d12d      	bne.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d01c      	beq.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e0c:	88db      	ldrh	r3, [r3, #6]
 8015e0e:	b29a      	uxth	r2, r3
 8015e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e12:	889b      	ldrh	r3, [r3, #4]
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d906      	bls.n	8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015e1a:	4b45      	ldr	r3, [pc, #276]	@ (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e1c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015e20:	4944      	ldr	r1, [pc, #272]	@ (8015f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e22:	4845      	ldr	r0, [pc, #276]	@ (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e24:	f00b ffc2 	bl	8021dac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e2a:	68ba      	ldr	r2, [r7, #8]
 8015e2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e30:	88db      	ldrh	r3, [r3, #6]
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e36:	889b      	ldrh	r3, [r3, #4]
 8015e38:	b29b      	uxth	r3, r3
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d010      	beq.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	623b      	str	r3, [r7, #32]
 8015e42:	e00d      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	685b      	ldr	r3, [r3, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d006      	beq.n	8015e5a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015e4c:	4b38      	ldr	r3, [pc, #224]	@ (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e4e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015e52:	493a      	ldr	r1, [pc, #232]	@ (8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015e54:	4838      	ldr	r0, [pc, #224]	@ (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e56:	f00b ffa9 	bl	8021dac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	68ba      	ldr	r2, [r7, #8]
 8015e5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d105      	bne.n	8015e72 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	7f9b      	ldrb	r3, [r3, #30]
 8015e6a:	f003 0301 	and.w	r3, r3, #1
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d059      	beq.n	8015f26 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015e72:	6a3b      	ldr	r3, [r7, #32]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d04f      	beq.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d006      	beq.n	8015e8e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	685b      	ldr	r3, [r3, #4]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	889b      	ldrh	r3, [r3, #4]
 8015e88:	b29b      	uxth	r3, r3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d002      	beq.n	8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	623b      	str	r3, [r7, #32]
 8015e92:	e041      	b.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e96:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015e9e:	e012      	b.n	8015ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea8:	88db      	ldrh	r3, [r3, #6]
 8015eaa:	b29a      	uxth	r2, r3
 8015eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eae:	889b      	ldrh	r3, [r3, #4]
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d002      	beq.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	623b      	str	r3, [r7, #32]
            break;
 8015eba:	e007      	b.n	8015ecc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d1e9      	bne.n	8015ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015ecc:	6a3b      	ldr	r3, [r7, #32]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d022      	beq.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d106      	bne.n	8015ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015eda:	4b15      	ldr	r3, [pc, #84]	@ (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015edc:	f240 12df 	movw	r2, #479	@ 0x1df
 8015ee0:	4917      	ldr	r1, [pc, #92]	@ (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ee2:	4815      	ldr	r0, [pc, #84]	@ (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ee4:	f00b ff62 	bl	8021dac <iprintf>
          LWIP_ASSERT("sanity check",
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d106      	bne.n	8015f02 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ef6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015efa:	4911      	ldr	r1, [pc, #68]	@ (8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015efc:	480e      	ldr	r0, [pc, #56]	@ (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015efe:	f00b ff55 	bl	8021dac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d006      	beq.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015f0a:	4b09      	ldr	r3, [pc, #36]	@ (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f0c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015f10:	490c      	ldr	r1, [pc, #48]	@ (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f12:	4809      	ldr	r0, [pc, #36]	@ (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f14:	f00b ff4a 	bl	8021dac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f18:	6a3b      	ldr	r3, [r7, #32]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	bf14      	ite	ne
 8015f1e:	2301      	movne	r3, #1
 8015f20:	2300      	moveq	r3, #0
 8015f22:	b2db      	uxtb	r3, r3
 8015f24:	e000      	b.n	8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f26:	2300      	movs	r3, #0
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3730      	adds	r7, #48	@ 0x30
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	0802584c 	.word	0x0802584c
 8015f34:	0802595c 	.word	0x0802595c
 8015f38:	080258c0 	.word	0x080258c0
 8015f3c:	0802597c 	.word	0x0802597c
 8015f40:	080259b4 	.word	0x080259b4
 8015f44:	080259c4 	.word	0x080259c4

08015f48 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b08e      	sub	sp, #56	@ 0x38
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	f003 030f 	and.w	r3, r3, #15
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	009b      	lsls	r3, r3, #2
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	2b14      	cmp	r3, #20
 8015f66:	f040 8171 	bne.w	801624c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f6c:	88db      	ldrh	r3, [r3, #6]
 8015f6e:	b29b      	uxth	r3, r3
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7fd ff2b 	bl	8013dcc <lwip_htons>
 8015f76:	4603      	mov	r3, r0
 8015f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f84:	885b      	ldrh	r3, [r3, #2]
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f7fd ff1f 	bl	8013dcc <lwip_htons>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	f003 030f 	and.w	r3, r3, #15
 8015f9a:	b2db      	uxtb	r3, r3
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015faa:	429a      	cmp	r2, r3
 8015fac:	f0c0 8150 	bcc.w	8016250 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015fb4:	b29b      	uxth	r3, r3
 8015fb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015fb8:	1ad3      	subs	r3, r2, r3
 8015fba:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f003 fd77 	bl	8019ab0 <pbuf_clen>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015fc6:	4b8c      	ldr	r3, [pc, #560]	@ (80161f8 <ip4_reass+0x2b0>)
 8015fc8:	881b      	ldrh	r3, [r3, #0]
 8015fca:	461a      	mov	r2, r3
 8015fcc:	8c3b      	ldrh	r3, [r7, #32]
 8015fce:	4413      	add	r3, r2
 8015fd0:	2b0a      	cmp	r3, #10
 8015fd2:	dd10      	ble.n	8015ff6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015fd4:	8c3b      	ldrh	r3, [r7, #32]
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015fda:	f7ff fd81 	bl	8015ae0 <ip_reass_remove_oldest_datagram>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	f000 8137 	beq.w	8016254 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015fe6:	4b84      	ldr	r3, [pc, #528]	@ (80161f8 <ip4_reass+0x2b0>)
 8015fe8:	881b      	ldrh	r3, [r3, #0]
 8015fea:	461a      	mov	r2, r3
 8015fec:	8c3b      	ldrh	r3, [r7, #32]
 8015fee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ff0:	2b0a      	cmp	r3, #10
 8015ff2:	f300 812f 	bgt.w	8016254 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ff6:	4b81      	ldr	r3, [pc, #516]	@ (80161fc <ip4_reass+0x2b4>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8015ffc:	e015      	b.n	801602a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016000:	695a      	ldr	r2, [r3, #20]
 8016002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016004:	68db      	ldr	r3, [r3, #12]
 8016006:	429a      	cmp	r2, r3
 8016008:	d10c      	bne.n	8016024 <ip4_reass+0xdc>
 801600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801600c:	699a      	ldr	r2, [r3, #24]
 801600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016010:	691b      	ldr	r3, [r3, #16]
 8016012:	429a      	cmp	r2, r3
 8016014:	d106      	bne.n	8016024 <ip4_reass+0xdc>
 8016016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016018:	899a      	ldrh	r2, [r3, #12]
 801601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801601c:	889b      	ldrh	r3, [r3, #4]
 801601e:	b29b      	uxth	r3, r3
 8016020:	429a      	cmp	r2, r3
 8016022:	d006      	beq.n	8016032 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	633b      	str	r3, [r7, #48]	@ 0x30
 801602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801602c:	2b00      	cmp	r3, #0
 801602e:	d1e6      	bne.n	8015ffe <ip4_reass+0xb6>
 8016030:	e000      	b.n	8016034 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016032:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016036:	2b00      	cmp	r3, #0
 8016038:	d109      	bne.n	801604e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801603a:	8c3b      	ldrh	r3, [r7, #32]
 801603c:	4619      	mov	r1, r3
 801603e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016040:	f7ff fdb0 	bl	8015ba4 <ip_reass_enqueue_new_datagram>
 8016044:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016048:	2b00      	cmp	r3, #0
 801604a:	d11c      	bne.n	8016086 <ip4_reass+0x13e>
      goto nullreturn;
 801604c:	e105      	b.n	801625a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016050:	88db      	ldrh	r3, [r3, #6]
 8016052:	b29b      	uxth	r3, r3
 8016054:	4618      	mov	r0, r3
 8016056:	f7fd feb9 	bl	8013dcc <lwip_htons>
 801605a:	4603      	mov	r3, r0
 801605c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016060:	2b00      	cmp	r3, #0
 8016062:	d110      	bne.n	8016086 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016066:	89db      	ldrh	r3, [r3, #14]
 8016068:	4618      	mov	r0, r3
 801606a:	f7fd feaf 	bl	8013dcc <lwip_htons>
 801606e:	4603      	mov	r3, r0
 8016070:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016074:	2b00      	cmp	r3, #0
 8016076:	d006      	beq.n	8016086 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801607a:	3308      	adds	r3, #8
 801607c:	2214      	movs	r2, #20
 801607e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016080:	4618      	mov	r0, r3
 8016082:	f00c f934 	bl	80222ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016088:	88db      	ldrh	r3, [r3, #6]
 801608a:	b29b      	uxth	r3, r3
 801608c:	f003 0320 	and.w	r3, r3, #32
 8016090:	2b00      	cmp	r3, #0
 8016092:	bf0c      	ite	eq
 8016094:	2301      	moveq	r3, #1
 8016096:	2300      	movne	r3, #0
 8016098:	b2db      	uxtb	r3, r3
 801609a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801609c:	69fb      	ldr	r3, [r7, #28]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d00e      	beq.n	80160c0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80160a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80160a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160a6:	4413      	add	r3, r2
 80160a8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80160aa:	8b7a      	ldrh	r2, [r7, #26]
 80160ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80160ae:	429a      	cmp	r2, r3
 80160b0:	f0c0 80a0 	bcc.w	80161f4 <ip4_reass+0x2ac>
 80160b4:	8b7b      	ldrh	r3, [r7, #26]
 80160b6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80160ba:	4293      	cmp	r3, r2
 80160bc:	f200 809a 	bhi.w	80161f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80160c0:	69fa      	ldr	r2, [r7, #28]
 80160c2:	6879      	ldr	r1, [r7, #4]
 80160c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80160c6:	f7ff fdd5 	bl	8015c74 <ip_reass_chain_frag_into_datagram_and_validate>
 80160ca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160d2:	f000 809b 	beq.w	801620c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80160d6:	4b48      	ldr	r3, [pc, #288]	@ (80161f8 <ip4_reass+0x2b0>)
 80160d8:	881a      	ldrh	r2, [r3, #0]
 80160da:	8c3b      	ldrh	r3, [r7, #32]
 80160dc:	4413      	add	r3, r2
 80160de:	b29a      	uxth	r2, r3
 80160e0:	4b45      	ldr	r3, [pc, #276]	@ (80161f8 <ip4_reass+0x2b0>)
 80160e2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d00d      	beq.n	8016106 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80160ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80160ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160ee:	4413      	add	r3, r2
 80160f0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80160f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160f4:	8a7a      	ldrh	r2, [r7, #18]
 80160f6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80160f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160fa:	7f9b      	ldrb	r3, [r3, #30]
 80160fc:	f043 0301 	orr.w	r3, r3, #1
 8016100:	b2da      	uxtb	r2, r3
 8016102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016104:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d171      	bne.n	80161f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801610e:	8b9b      	ldrh	r3, [r3, #28]
 8016110:	3314      	adds	r3, #20
 8016112:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016128:	3308      	adds	r3, #8
 801612a:	2214      	movs	r2, #20
 801612c:	4619      	mov	r1, r3
 801612e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016130:	f00c f8dd 	bl	80222ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016134:	8a3b      	ldrh	r3, [r7, #16]
 8016136:	4618      	mov	r0, r3
 8016138:	f7fd fe48 	bl	8013dcc <lwip_htons>
 801613c:	4603      	mov	r3, r0
 801613e:	461a      	mov	r2, r3
 8016140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016142:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016146:	2200      	movs	r2, #0
 8016148:	719a      	strb	r2, [r3, #6]
 801614a:	2200      	movs	r2, #0
 801614c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016150:	2200      	movs	r2, #0
 8016152:	729a      	strb	r2, [r3, #10]
 8016154:	2200      	movs	r2, #0
 8016156:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801615e:	e00d      	b.n	801617c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016166:	2114      	movs	r1, #20
 8016168:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801616a:	f003 fb8d 	bl	8019888 <pbuf_remove_header>
      pbuf_cat(p, r);
 801616e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f003 fcdd 	bl	8019b30 <pbuf_cat>
      r = iprh->next_pbuf;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801617c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801617e:	2b00      	cmp	r3, #0
 8016180:	d1ee      	bne.n	8016160 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016182:	4b1e      	ldr	r3, [pc, #120]	@ (80161fc <ip4_reass+0x2b4>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016188:	429a      	cmp	r2, r3
 801618a:	d102      	bne.n	8016192 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801618c:	2300      	movs	r3, #0
 801618e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016190:	e010      	b.n	80161b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016192:	4b1a      	ldr	r3, [pc, #104]	@ (80161fc <ip4_reass+0x2b4>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016198:	e007      	b.n	80161aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d006      	beq.n	80161b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80161aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d1f4      	bne.n	801619a <ip4_reass+0x252>
 80161b0:	e000      	b.n	80161b4 <ip4_reass+0x26c>
          break;
 80161b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80161b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80161b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80161b8:	f7ff fd2e 	bl	8015c18 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f003 fc77 	bl	8019ab0 <pbuf_clen>
 80161c2:	4603      	mov	r3, r0
 80161c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80161c6:	4b0c      	ldr	r3, [pc, #48]	@ (80161f8 <ip4_reass+0x2b0>)
 80161c8:	881b      	ldrh	r3, [r3, #0]
 80161ca:	8c3a      	ldrh	r2, [r7, #32]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d906      	bls.n	80161de <ip4_reass+0x296>
 80161d0:	4b0b      	ldr	r3, [pc, #44]	@ (8016200 <ip4_reass+0x2b8>)
 80161d2:	f240 229b 	movw	r2, #667	@ 0x29b
 80161d6:	490b      	ldr	r1, [pc, #44]	@ (8016204 <ip4_reass+0x2bc>)
 80161d8:	480b      	ldr	r0, [pc, #44]	@ (8016208 <ip4_reass+0x2c0>)
 80161da:	f00b fde7 	bl	8021dac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80161de:	4b06      	ldr	r3, [pc, #24]	@ (80161f8 <ip4_reass+0x2b0>)
 80161e0:	881a      	ldrh	r2, [r3, #0]
 80161e2:	8c3b      	ldrh	r3, [r7, #32]
 80161e4:	1ad3      	subs	r3, r2, r3
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	4b03      	ldr	r3, [pc, #12]	@ (80161f8 <ip4_reass+0x2b0>)
 80161ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	e038      	b.n	8016262 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80161f0:	2300      	movs	r3, #0
 80161f2:	e036      	b.n	8016262 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80161f4:	bf00      	nop
 80161f6:	e00a      	b.n	801620e <ip4_reass+0x2c6>
 80161f8:	2400a180 	.word	0x2400a180
 80161fc:	2400a17c 	.word	0x2400a17c
 8016200:	0802584c 	.word	0x0802584c
 8016204:	080259e8 	.word	0x080259e8
 8016208:	080258c0 	.word	0x080258c0
    goto nullreturn_ipr;
 801620c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016210:	2b00      	cmp	r3, #0
 8016212:	d106      	bne.n	8016222 <ip4_reass+0x2da>
 8016214:	4b15      	ldr	r3, [pc, #84]	@ (801626c <ip4_reass+0x324>)
 8016216:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801621a:	4915      	ldr	r1, [pc, #84]	@ (8016270 <ip4_reass+0x328>)
 801621c:	4815      	ldr	r0, [pc, #84]	@ (8016274 <ip4_reass+0x32c>)
 801621e:	f00b fdc5 	bl	8021dac <iprintf>
  if (ipr->p == NULL) {
 8016222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d116      	bne.n	8016258 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801622a:	4b13      	ldr	r3, [pc, #76]	@ (8016278 <ip4_reass+0x330>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016230:	429a      	cmp	r2, r3
 8016232:	d006      	beq.n	8016242 <ip4_reass+0x2fa>
 8016234:	4b0d      	ldr	r3, [pc, #52]	@ (801626c <ip4_reass+0x324>)
 8016236:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801623a:	4910      	ldr	r1, [pc, #64]	@ (801627c <ip4_reass+0x334>)
 801623c:	480d      	ldr	r0, [pc, #52]	@ (8016274 <ip4_reass+0x32c>)
 801623e:	f00b fdb5 	bl	8021dac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016242:	2100      	movs	r1, #0
 8016244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016246:	f7ff fce7 	bl	8015c18 <ip_reass_dequeue_datagram>
 801624a:	e006      	b.n	801625a <ip4_reass+0x312>
    goto nullreturn;
 801624c:	bf00      	nop
 801624e:	e004      	b.n	801625a <ip4_reass+0x312>
    goto nullreturn;
 8016250:	bf00      	nop
 8016252:	e002      	b.n	801625a <ip4_reass+0x312>
      goto nullreturn;
 8016254:	bf00      	nop
 8016256:	e000      	b.n	801625a <ip4_reass+0x312>
  }

nullreturn:
 8016258:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f003 fb9a 	bl	8019994 <pbuf_free>
  return NULL;
 8016260:	2300      	movs	r3, #0
}
 8016262:	4618      	mov	r0, r3
 8016264:	3738      	adds	r7, #56	@ 0x38
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	0802584c 	.word	0x0802584c
 8016270:	08025a04 	.word	0x08025a04
 8016274:	080258c0 	.word	0x080258c0
 8016278:	2400a17c 	.word	0x2400a17c
 801627c:	08025a10 	.word	0x08025a10

08016280 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016284:	2005      	movs	r0, #5
 8016286:	f000 fe31 	bl	8016eec <memp_malloc>
 801628a:	4603      	mov	r3, r0
}
 801628c:	4618      	mov	r0, r3
 801628e:	bd80      	pop	{r7, pc}

08016290 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d106      	bne.n	80162ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801629e:	4b07      	ldr	r3, [pc, #28]	@ (80162bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80162a0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80162a4:	4906      	ldr	r1, [pc, #24]	@ (80162c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80162a6:	4807      	ldr	r0, [pc, #28]	@ (80162c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80162a8:	f00b fd80 	bl	8021dac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80162ac:	6879      	ldr	r1, [r7, #4]
 80162ae:	2005      	movs	r0, #5
 80162b0:	f000 fe92 	bl	8016fd8 <memp_free>
}
 80162b4:	bf00      	nop
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	0802584c 	.word	0x0802584c
 80162c0:	08025a30 	.word	0x08025a30
 80162c4:	080258c0 	.word	0x080258c0

080162c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d106      	bne.n	80162e8 <ipfrag_free_pbuf_custom+0x20>
 80162da:	4b11      	ldr	r3, [pc, #68]	@ (8016320 <ipfrag_free_pbuf_custom+0x58>)
 80162dc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80162e0:	4910      	ldr	r1, [pc, #64]	@ (8016324 <ipfrag_free_pbuf_custom+0x5c>)
 80162e2:	4811      	ldr	r0, [pc, #68]	@ (8016328 <ipfrag_free_pbuf_custom+0x60>)
 80162e4:	f00b fd62 	bl	8021dac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80162e8:	68fa      	ldr	r2, [r7, #12]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d006      	beq.n	80162fe <ipfrag_free_pbuf_custom+0x36>
 80162f0:	4b0b      	ldr	r3, [pc, #44]	@ (8016320 <ipfrag_free_pbuf_custom+0x58>)
 80162f2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80162f6:	490d      	ldr	r1, [pc, #52]	@ (801632c <ipfrag_free_pbuf_custom+0x64>)
 80162f8:	480b      	ldr	r0, [pc, #44]	@ (8016328 <ipfrag_free_pbuf_custom+0x60>)
 80162fa:	f00b fd57 	bl	8021dac <iprintf>
  if (pcr->original != NULL) {
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	695b      	ldr	r3, [r3, #20]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d004      	beq.n	8016310 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	695b      	ldr	r3, [r3, #20]
 801630a:	4618      	mov	r0, r3
 801630c:	f003 fb42 	bl	8019994 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f7ff ffbd 	bl	8016290 <ip_frag_free_pbuf_custom_ref>
}
 8016316:	bf00      	nop
 8016318:	3710      	adds	r7, #16
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}
 801631e:	bf00      	nop
 8016320:	0802584c 	.word	0x0802584c
 8016324:	08025a3c 	.word	0x08025a3c
 8016328:	080258c0 	.word	0x080258c0
 801632c:	08025a48 	.word	0x08025a48

08016330 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b094      	sub	sp, #80	@ 0x50
 8016334:	af02      	add	r7, sp, #8
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801633c:	2300      	movs	r3, #0
 801633e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016346:	3b14      	subs	r3, #20
 8016348:	2b00      	cmp	r3, #0
 801634a:	da00      	bge.n	801634e <ip4_frag+0x1e>
 801634c:	3307      	adds	r3, #7
 801634e:	10db      	asrs	r3, r3, #3
 8016350:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016352:	2314      	movs	r3, #20
 8016354:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801635c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801635e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	f003 030f 	and.w	r3, r3, #15
 8016368:	b2db      	uxtb	r3, r3
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	b2db      	uxtb	r3, r3
 801636e:	2b14      	cmp	r3, #20
 8016370:	d002      	beq.n	8016378 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016372:	f06f 0305 	mvn.w	r3, #5
 8016376:	e110      	b.n	801659a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	895b      	ldrh	r3, [r3, #10]
 801637c:	2b13      	cmp	r3, #19
 801637e:	d809      	bhi.n	8016394 <ip4_frag+0x64>
 8016380:	4b88      	ldr	r3, [pc, #544]	@ (80165a4 <ip4_frag+0x274>)
 8016382:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016386:	4988      	ldr	r1, [pc, #544]	@ (80165a8 <ip4_frag+0x278>)
 8016388:	4888      	ldr	r0, [pc, #544]	@ (80165ac <ip4_frag+0x27c>)
 801638a:	f00b fd0f 	bl	8021dac <iprintf>
 801638e:	f06f 0305 	mvn.w	r3, #5
 8016392:	e102      	b.n	801659a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016396:	88db      	ldrh	r3, [r3, #6]
 8016398:	b29b      	uxth	r3, r3
 801639a:	4618      	mov	r0, r3
 801639c:	f7fd fd16 	bl	8013dcc <lwip_htons>
 80163a0:	4603      	mov	r3, r0
 80163a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80163a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80163a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80163ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80163b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80163b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	891b      	ldrh	r3, [r3, #8]
 80163ba:	3b14      	subs	r3, #20
 80163bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80163c0:	e0e1      	b.n	8016586 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80163c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80163c4:	00db      	lsls	r3, r3, #3
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80163cc:	4293      	cmp	r3, r2
 80163ce:	bf28      	it	cs
 80163d0:	4613      	movcs	r3, r2
 80163d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80163d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80163d8:	2114      	movs	r1, #20
 80163da:	200e      	movs	r0, #14
 80163dc:	f002 fff8 	bl	80193d0 <pbuf_alloc>
 80163e0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80163e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f000 80d5 	beq.w	8016594 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80163ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163ec:	895b      	ldrh	r3, [r3, #10]
 80163ee:	2b13      	cmp	r3, #19
 80163f0:	d806      	bhi.n	8016400 <ip4_frag+0xd0>
 80163f2:	4b6c      	ldr	r3, [pc, #432]	@ (80165a4 <ip4_frag+0x274>)
 80163f4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80163f8:	496d      	ldr	r1, [pc, #436]	@ (80165b0 <ip4_frag+0x280>)
 80163fa:	486c      	ldr	r0, [pc, #432]	@ (80165ac <ip4_frag+0x27c>)
 80163fc:	f00b fcd6 	bl	8021dac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016402:	685b      	ldr	r3, [r3, #4]
 8016404:	2214      	movs	r2, #20
 8016406:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016408:	4618      	mov	r0, r3
 801640a:	f00b ff70 	bl	80222ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016414:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016416:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801641a:	e064      	b.n	80164e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	895a      	ldrh	r2, [r3, #10]
 8016420:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016422:	1ad3      	subs	r3, r2, r3
 8016424:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	895b      	ldrh	r3, [r3, #10]
 801642a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801642c:	429a      	cmp	r2, r3
 801642e:	d906      	bls.n	801643e <ip4_frag+0x10e>
 8016430:	4b5c      	ldr	r3, [pc, #368]	@ (80165a4 <ip4_frag+0x274>)
 8016432:	f240 322d 	movw	r2, #813	@ 0x32d
 8016436:	495f      	ldr	r1, [pc, #380]	@ (80165b4 <ip4_frag+0x284>)
 8016438:	485c      	ldr	r0, [pc, #368]	@ (80165ac <ip4_frag+0x27c>)
 801643a:	f00b fcb7 	bl	8021dac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801643e:	8bfa      	ldrh	r2, [r7, #30]
 8016440:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016444:	4293      	cmp	r3, r2
 8016446:	bf28      	it	cs
 8016448:	4613      	movcs	r3, r2
 801644a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801644e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016452:	2b00      	cmp	r3, #0
 8016454:	d105      	bne.n	8016462 <ip4_frag+0x132>
        poff = 0;
 8016456:	2300      	movs	r3, #0
 8016458:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	60fb      	str	r3, [r7, #12]
        continue;
 8016460:	e041      	b.n	80164e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016462:	f7ff ff0d 	bl	8016280 <ip_frag_alloc_pbuf_custom_ref>
 8016466:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016468:	69bb      	ldr	r3, [r7, #24]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d103      	bne.n	8016476 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801646e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016470:	f003 fa90 	bl	8019994 <pbuf_free>
        goto memerr;
 8016474:	e08f      	b.n	8016596 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016476:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801647c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801647e:	4413      	add	r3, r2
 8016480:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016484:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016488:	9201      	str	r2, [sp, #4]
 801648a:	9300      	str	r3, [sp, #0]
 801648c:	4603      	mov	r3, r0
 801648e:	2241      	movs	r2, #65	@ 0x41
 8016490:	2000      	movs	r0, #0
 8016492:	f003 f8c7 	bl	8019624 <pbuf_alloced_custom>
 8016496:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016498:	697b      	ldr	r3, [r7, #20]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d106      	bne.n	80164ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801649e:	69b8      	ldr	r0, [r7, #24]
 80164a0:	f7ff fef6 	bl	8016290 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80164a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164a6:	f003 fa75 	bl	8019994 <pbuf_free>
        goto memerr;
 80164aa:	e074      	b.n	8016596 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80164ac:	68f8      	ldr	r0, [r7, #12]
 80164ae:	f003 fb17 	bl	8019ae0 <pbuf_ref>
      pcr->original = p;
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	68fa      	ldr	r2, [r7, #12]
 80164b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80164b8:	69bb      	ldr	r3, [r7, #24]
 80164ba:	4a3f      	ldr	r2, [pc, #252]	@ (80165b8 <ip4_frag+0x288>)
 80164bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80164be:	6979      	ldr	r1, [r7, #20]
 80164c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164c2:	f003 fb35 	bl	8019b30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80164c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80164ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80164ce:	1ad3      	subs	r3, r2, r3
 80164d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80164d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d004      	beq.n	80164e6 <ip4_frag+0x1b6>
        poff = 0;
 80164dc:	2300      	movs	r3, #0
 80164de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80164e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d196      	bne.n	801641c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80164ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80164f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80164f4:	4413      	add	r3, r2
 80164f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80164fc:	f1a3 0213 	sub.w	r2, r3, #19
 8016500:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016504:	429a      	cmp	r2, r3
 8016506:	bfcc      	ite	gt
 8016508:	2301      	movgt	r3, #1
 801650a:	2300      	movle	r3, #0
 801650c:	b2db      	uxtb	r3, r3
 801650e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016518:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801651a:	6a3b      	ldr	r3, [r7, #32]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d002      	beq.n	8016526 <ip4_frag+0x1f6>
 8016520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016522:	2b00      	cmp	r3, #0
 8016524:	d003      	beq.n	801652e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016526:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016528:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801652c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801652e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016530:	4618      	mov	r0, r3
 8016532:	f7fd fc4b 	bl	8013dcc <lwip_htons>
 8016536:	4603      	mov	r3, r0
 8016538:	461a      	mov	r2, r3
 801653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801653c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801653e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016540:	3314      	adds	r3, #20
 8016542:	b29b      	uxth	r3, r3
 8016544:	4618      	mov	r0, r3
 8016546:	f7fd fc41 	bl	8013dcc <lwip_htons>
 801654a:	4603      	mov	r3, r0
 801654c:	461a      	mov	r2, r3
 801654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016550:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016554:	2200      	movs	r2, #0
 8016556:	729a      	strb	r2, [r3, #10]
 8016558:	2200      	movs	r2, #0
 801655a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	695b      	ldr	r3, [r3, #20]
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016564:	68b8      	ldr	r0, [r7, #8]
 8016566:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801656a:	f003 fa13 	bl	8019994 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801656e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016572:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016574:	1ad3      	subs	r3, r2, r3
 8016576:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801657a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801657e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016580:	4413      	add	r3, r2
 8016582:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016586:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801658a:	2b00      	cmp	r3, #0
 801658c:	f47f af19 	bne.w	80163c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016590:	2300      	movs	r3, #0
 8016592:	e002      	b.n	801659a <ip4_frag+0x26a>
      goto memerr;
 8016594:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016596:	f04f 33ff 	mov.w	r3, #4294967295
}
 801659a:	4618      	mov	r0, r3
 801659c:	3748      	adds	r7, #72	@ 0x48
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	0802584c 	.word	0x0802584c
 80165a8:	08025a54 	.word	0x08025a54
 80165ac:	080258c0 	.word	0x080258c0
 80165b0:	08025a70 	.word	0x08025a70
 80165b4:	08025a90 	.word	0x08025a90
 80165b8:	080162c9 	.word	0x080162c9

080165bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80165bc:	b480      	push	{r7}
 80165be:	b083      	sub	sp, #12
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 80165c4:	4b04      	ldr	r3, [pc, #16]	@ (80165d8 <ptr_to_mem+0x1c>)
 80165c6:	681a      	ldr	r2, [r3, #0]
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	4413      	add	r3, r2
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	370c      	adds	r7, #12
 80165d0:	46bd      	mov	sp, r7
 80165d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d6:	4770      	bx	lr
 80165d8:	2400a184 	.word	0x2400a184

080165dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80165dc:	b480      	push	{r7}
 80165de:	b083      	sub	sp, #12
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80165e4:	4b04      	ldr	r3, [pc, #16]	@ (80165f8 <mem_to_ptr+0x1c>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	1ad3      	subs	r3, r2, r3
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	370c      	adds	r7, #12
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr
 80165f8:	2400a184 	.word	0x2400a184

080165fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80165fc:	b590      	push	{r4, r7, lr}
 80165fe:	b085      	sub	sp, #20
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016604:	4b45      	ldr	r3, [pc, #276]	@ (801671c <plug_holes+0x120>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	429a      	cmp	r2, r3
 801660c:	d206      	bcs.n	801661c <plug_holes+0x20>
 801660e:	4b44      	ldr	r3, [pc, #272]	@ (8016720 <plug_holes+0x124>)
 8016610:	f240 12df 	movw	r2, #479	@ 0x1df
 8016614:	4943      	ldr	r1, [pc, #268]	@ (8016724 <plug_holes+0x128>)
 8016616:	4844      	ldr	r0, [pc, #272]	@ (8016728 <plug_holes+0x12c>)
 8016618:	f00b fbc8 	bl	8021dac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801661c:	4b43      	ldr	r3, [pc, #268]	@ (801672c <plug_holes+0x130>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	429a      	cmp	r2, r3
 8016624:	d306      	bcc.n	8016634 <plug_holes+0x38>
 8016626:	4b3e      	ldr	r3, [pc, #248]	@ (8016720 <plug_holes+0x124>)
 8016628:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801662c:	4940      	ldr	r1, [pc, #256]	@ (8016730 <plug_holes+0x134>)
 801662e:	483e      	ldr	r0, [pc, #248]	@ (8016728 <plug_holes+0x12c>)
 8016630:	f00b fbbc 	bl	8021dac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	7a1b      	ldrb	r3, [r3, #8]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d006      	beq.n	801664a <plug_holes+0x4e>
 801663c:	4b38      	ldr	r3, [pc, #224]	@ (8016720 <plug_holes+0x124>)
 801663e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8016642:	493c      	ldr	r1, [pc, #240]	@ (8016734 <plug_holes+0x138>)
 8016644:	4838      	ldr	r0, [pc, #224]	@ (8016728 <plug_holes+0x12c>)
 8016646:	f00b fbb1 	bl	8021dac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	4a3a      	ldr	r2, [pc, #232]	@ (8016738 <plug_holes+0x13c>)
 8016650:	4293      	cmp	r3, r2
 8016652:	d906      	bls.n	8016662 <plug_holes+0x66>
 8016654:	4b32      	ldr	r3, [pc, #200]	@ (8016720 <plug_holes+0x124>)
 8016656:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801665a:	4938      	ldr	r1, [pc, #224]	@ (801673c <plug_holes+0x140>)
 801665c:	4832      	ldr	r0, [pc, #200]	@ (8016728 <plug_holes+0x12c>)
 801665e:	f00b fba5 	bl	8021dac <iprintf>

  nmem = ptr_to_mem(mem->next);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	4618      	mov	r0, r3
 8016668:	f7ff ffa8 	bl	80165bc <ptr_to_mem>
 801666c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	429a      	cmp	r2, r3
 8016674:	d024      	beq.n	80166c0 <plug_holes+0xc4>
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	7a1b      	ldrb	r3, [r3, #8]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d120      	bne.n	80166c0 <plug_holes+0xc4>
 801667e:	4b2b      	ldr	r3, [pc, #172]	@ (801672c <plug_holes+0x130>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	429a      	cmp	r2, r3
 8016686:	d01b      	beq.n	80166c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016688:	4b2d      	ldr	r3, [pc, #180]	@ (8016740 <plug_holes+0x144>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	68fa      	ldr	r2, [r7, #12]
 801668e:	429a      	cmp	r2, r3
 8016690:	d102      	bne.n	8016698 <plug_holes+0x9c>
      lfree = mem;
 8016692:	4a2b      	ldr	r2, [pc, #172]	@ (8016740 <plug_holes+0x144>)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	681a      	ldr	r2, [r3, #0]
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	4a24      	ldr	r2, [pc, #144]	@ (8016738 <plug_holes+0x13c>)
 80166a6:	4293      	cmp	r3, r2
 80166a8:	d00a      	beq.n	80166c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7ff ff84 	bl	80165bc <ptr_to_mem>
 80166b4:	4604      	mov	r4, r0
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f7ff ff90 	bl	80165dc <mem_to_ptr>
 80166bc:	4603      	mov	r3, r0
 80166be:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7ff ff79 	bl	80165bc <ptr_to_mem>
 80166ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80166cc:	68ba      	ldr	r2, [r7, #8]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	429a      	cmp	r2, r3
 80166d2:	d01f      	beq.n	8016714 <plug_holes+0x118>
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	7a1b      	ldrb	r3, [r3, #8]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d11b      	bne.n	8016714 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80166dc:	4b18      	ldr	r3, [pc, #96]	@ (8016740 <plug_holes+0x144>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	687a      	ldr	r2, [r7, #4]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d102      	bne.n	80166ec <plug_holes+0xf0>
      lfree = pmem;
 80166e6:	4a16      	ldr	r2, [pc, #88]	@ (8016740 <plug_holes+0x144>)
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4a0f      	ldr	r2, [pc, #60]	@ (8016738 <plug_holes+0x13c>)
 80166fa:	4293      	cmp	r3, r2
 80166fc:	d00a      	beq.n	8016714 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4618      	mov	r0, r3
 8016704:	f7ff ff5a 	bl	80165bc <ptr_to_mem>
 8016708:	4604      	mov	r4, r0
 801670a:	68b8      	ldr	r0, [r7, #8]
 801670c:	f7ff ff66 	bl	80165dc <mem_to_ptr>
 8016710:	4603      	mov	r3, r0
 8016712:	6063      	str	r3, [r4, #4]
    }
  }
}
 8016714:	bf00      	nop
 8016716:	3714      	adds	r7, #20
 8016718:	46bd      	mov	sp, r7
 801671a:	bd90      	pop	{r4, r7, pc}
 801671c:	2400a184 	.word	0x2400a184
 8016720:	08025aa0 	.word	0x08025aa0
 8016724:	08025afc 	.word	0x08025afc
 8016728:	08025b14 	.word	0x08025b14
 801672c:	2400a188 	.word	0x2400a188
 8016730:	08025b3c 	.word	0x08025b3c
 8016734:	08025b58 	.word	0x08025b58
 8016738:	0001ffe8 	.word	0x0001ffe8
 801673c:	08025b74 	.word	0x08025b74
 8016740:	2400a190 	.word	0x2400a190

08016744 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801674a:	4b1b      	ldr	r3, [pc, #108]	@ (80167b8 <mem_init+0x74>)
 801674c:	4a1b      	ldr	r2, [pc, #108]	@ (80167bc <mem_init+0x78>)
 801674e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8016750:	4b19      	ldr	r3, [pc, #100]	@ (80167b8 <mem_init+0x74>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	4a19      	ldr	r2, [pc, #100]	@ (80167c0 <mem_init+0x7c>)
 801675a:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2200      	movs	r2, #0
 8016766:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016768:	4815      	ldr	r0, [pc, #84]	@ (80167c0 <mem_init+0x7c>)
 801676a:	f7ff ff27 	bl	80165bc <ptr_to_mem>
 801676e:	4603      	mov	r3, r0
 8016770:	4a14      	ldr	r2, [pc, #80]	@ (80167c4 <mem_init+0x80>)
 8016772:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8016774:	4b13      	ldr	r3, [pc, #76]	@ (80167c4 <mem_init+0x80>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2201      	movs	r2, #1
 801677a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 801677c:	4b11      	ldr	r3, [pc, #68]	@ (80167c4 <mem_init+0x80>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	4a0f      	ldr	r2, [pc, #60]	@ (80167c0 <mem_init+0x7c>)
 8016782:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8016784:	4b0f      	ldr	r3, [pc, #60]	@ (80167c4 <mem_init+0x80>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	4a0d      	ldr	r2, [pc, #52]	@ (80167c0 <mem_init+0x7c>)
 801678a:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801678c:	4b0a      	ldr	r3, [pc, #40]	@ (80167b8 <mem_init+0x74>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	4a0d      	ldr	r2, [pc, #52]	@ (80167c8 <mem_init+0x84>)
 8016792:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8016794:	480d      	ldr	r0, [pc, #52]	@ (80167cc <mem_init+0x88>)
 8016796:	f003 fc8d 	bl	801a0b4 <sys_mutex_new>
 801679a:	4603      	mov	r3, r0
 801679c:	2b00      	cmp	r3, #0
 801679e:	d006      	beq.n	80167ae <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80167a0:	4b0b      	ldr	r3, [pc, #44]	@ (80167d0 <mem_init+0x8c>)
 80167a2:	f240 221f 	movw	r2, #543	@ 0x21f
 80167a6:	490b      	ldr	r1, [pc, #44]	@ (80167d4 <mem_init+0x90>)
 80167a8:	480b      	ldr	r0, [pc, #44]	@ (80167d8 <mem_init+0x94>)
 80167aa:	f00b faff 	bl	8021dac <iprintf>
  }
}
 80167ae:	bf00      	nop
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	2400a184 	.word	0x2400a184
 80167bc:	30020000 	.word	0x30020000
 80167c0:	0001ffe8 	.word	0x0001ffe8
 80167c4:	2400a188 	.word	0x2400a188
 80167c8:	2400a190 	.word	0x2400a190
 80167cc:	2400a18c 	.word	0x2400a18c
 80167d0:	08025aa0 	.word	0x08025aa0
 80167d4:	08025ba0 	.word	0x08025ba0
 80167d8:	08025b14 	.word	0x08025b14

080167dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b086      	sub	sp, #24
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f7ff fef9 	bl	80165dc <mem_to_ptr>
 80167ea:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7ff fee3 	bl	80165bc <ptr_to_mem>
 80167f6:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	685b      	ldr	r3, [r3, #4]
 80167fc:	4618      	mov	r0, r3
 80167fe:	f7ff fedd 	bl	80165bc <ptr_to_mem>
 8016802:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4a11      	ldr	r2, [pc, #68]	@ (8016850 <mem_link_valid+0x74>)
 801680a:	4293      	cmp	r3, r2
 801680c:	d818      	bhi.n	8016840 <mem_link_valid+0x64>
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	4a0f      	ldr	r2, [pc, #60]	@ (8016850 <mem_link_valid+0x74>)
 8016814:	4293      	cmp	r3, r2
 8016816:	d813      	bhi.n	8016840 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801681c:	697a      	ldr	r2, [r7, #20]
 801681e:	429a      	cmp	r2, r3
 8016820:	d004      	beq.n	801682c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	697a      	ldr	r2, [r7, #20]
 8016828:	429a      	cmp	r2, r3
 801682a:	d109      	bne.n	8016840 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801682c:	4b09      	ldr	r3, [pc, #36]	@ (8016854 <mem_link_valid+0x78>)
 801682e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016830:	693a      	ldr	r2, [r7, #16]
 8016832:	429a      	cmp	r2, r3
 8016834:	d006      	beq.n	8016844 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	697a      	ldr	r2, [r7, #20]
 801683c:	429a      	cmp	r2, r3
 801683e:	d001      	beq.n	8016844 <mem_link_valid+0x68>
    return 0;
 8016840:	2300      	movs	r3, #0
 8016842:	e000      	b.n	8016846 <mem_link_valid+0x6a>
  }
  return 1;
 8016844:	2301      	movs	r3, #1
}
 8016846:	4618      	mov	r0, r3
 8016848:	3718      	adds	r7, #24
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	0001ffe8 	.word	0x0001ffe8
 8016854:	2400a188 	.word	0x2400a188

08016858 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b088      	sub	sp, #32
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d070      	beq.n	8016948 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	f003 0303 	and.w	r3, r3, #3
 801686c:	2b00      	cmp	r3, #0
 801686e:	d00d      	beq.n	801688c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8016870:	4b37      	ldr	r3, [pc, #220]	@ (8016950 <mem_free+0xf8>)
 8016872:	f240 2273 	movw	r2, #627	@ 0x273
 8016876:	4937      	ldr	r1, [pc, #220]	@ (8016954 <mem_free+0xfc>)
 8016878:	4837      	ldr	r0, [pc, #220]	@ (8016958 <mem_free+0x100>)
 801687a:	f00b fa97 	bl	8021dac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801687e:	f003 fc6b 	bl	801a158 <sys_arch_protect>
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	68f8      	ldr	r0, [r7, #12]
 8016886:	f003 fc75 	bl	801a174 <sys_arch_unprotect>
    return;
 801688a:	e05e      	b.n	801694a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	3b0c      	subs	r3, #12
 8016890:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016892:	4b32      	ldr	r3, [pc, #200]	@ (801695c <mem_free+0x104>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	69fa      	ldr	r2, [r7, #28]
 8016898:	429a      	cmp	r2, r3
 801689a:	d306      	bcc.n	80168aa <mem_free+0x52>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f103 020c 	add.w	r2, r3, #12
 80168a2:	4b2f      	ldr	r3, [pc, #188]	@ (8016960 <mem_free+0x108>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d90d      	bls.n	80168c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80168aa:	4b29      	ldr	r3, [pc, #164]	@ (8016950 <mem_free+0xf8>)
 80168ac:	f240 227f 	movw	r2, #639	@ 0x27f
 80168b0:	492c      	ldr	r1, [pc, #176]	@ (8016964 <mem_free+0x10c>)
 80168b2:	4829      	ldr	r0, [pc, #164]	@ (8016958 <mem_free+0x100>)
 80168b4:	f00b fa7a 	bl	8021dac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80168b8:	f003 fc4e 	bl	801a158 <sys_arch_protect>
 80168bc:	6138      	str	r0, [r7, #16]
 80168be:	6938      	ldr	r0, [r7, #16]
 80168c0:	f003 fc58 	bl	801a174 <sys_arch_unprotect>
    return;
 80168c4:	e041      	b.n	801694a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80168c6:	4828      	ldr	r0, [pc, #160]	@ (8016968 <mem_free+0x110>)
 80168c8:	f003 fc0a 	bl	801a0e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80168cc:	69fb      	ldr	r3, [r7, #28]
 80168ce:	7a1b      	ldrb	r3, [r3, #8]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d110      	bne.n	80168f6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80168d4:	4b1e      	ldr	r3, [pc, #120]	@ (8016950 <mem_free+0xf8>)
 80168d6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80168da:	4924      	ldr	r1, [pc, #144]	@ (801696c <mem_free+0x114>)
 80168dc:	481e      	ldr	r0, [pc, #120]	@ (8016958 <mem_free+0x100>)
 80168de:	f00b fa65 	bl	8021dac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80168e2:	4821      	ldr	r0, [pc, #132]	@ (8016968 <mem_free+0x110>)
 80168e4:	f003 fc0b 	bl	801a0fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80168e8:	f003 fc36 	bl	801a158 <sys_arch_protect>
 80168ec:	6178      	str	r0, [r7, #20]
 80168ee:	6978      	ldr	r0, [r7, #20]
 80168f0:	f003 fc40 	bl	801a174 <sys_arch_unprotect>
    return;
 80168f4:	e029      	b.n	801694a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80168f6:	69f8      	ldr	r0, [r7, #28]
 80168f8:	f7ff ff70 	bl	80167dc <mem_link_valid>
 80168fc:	4603      	mov	r3, r0
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d110      	bne.n	8016924 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8016902:	4b13      	ldr	r3, [pc, #76]	@ (8016950 <mem_free+0xf8>)
 8016904:	f240 2295 	movw	r2, #661	@ 0x295
 8016908:	4919      	ldr	r1, [pc, #100]	@ (8016970 <mem_free+0x118>)
 801690a:	4813      	ldr	r0, [pc, #76]	@ (8016958 <mem_free+0x100>)
 801690c:	f00b fa4e 	bl	8021dac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016910:	4815      	ldr	r0, [pc, #84]	@ (8016968 <mem_free+0x110>)
 8016912:	f003 fbf4 	bl	801a0fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016916:	f003 fc1f 	bl	801a158 <sys_arch_protect>
 801691a:	61b8      	str	r0, [r7, #24]
 801691c:	69b8      	ldr	r0, [r7, #24]
 801691e:	f003 fc29 	bl	801a174 <sys_arch_unprotect>
    return;
 8016922:	e012      	b.n	801694a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	2200      	movs	r2, #0
 8016928:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 801692a:	4b12      	ldr	r3, [pc, #72]	@ (8016974 <mem_free+0x11c>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	69fa      	ldr	r2, [r7, #28]
 8016930:	429a      	cmp	r2, r3
 8016932:	d202      	bcs.n	801693a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016934:	4a0f      	ldr	r2, [pc, #60]	@ (8016974 <mem_free+0x11c>)
 8016936:	69fb      	ldr	r3, [r7, #28]
 8016938:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801693a:	69f8      	ldr	r0, [r7, #28]
 801693c:	f7ff fe5e 	bl	80165fc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016940:	4809      	ldr	r0, [pc, #36]	@ (8016968 <mem_free+0x110>)
 8016942:	f003 fbdc 	bl	801a0fe <sys_mutex_unlock>
 8016946:	e000      	b.n	801694a <mem_free+0xf2>
    return;
 8016948:	bf00      	nop
}
 801694a:	3720      	adds	r7, #32
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}
 8016950:	08025aa0 	.word	0x08025aa0
 8016954:	08025bbc 	.word	0x08025bbc
 8016958:	08025b14 	.word	0x08025b14
 801695c:	2400a184 	.word	0x2400a184
 8016960:	2400a188 	.word	0x2400a188
 8016964:	08025be0 	.word	0x08025be0
 8016968:	2400a18c 	.word	0x2400a18c
 801696c:	08025bfc 	.word	0x08025bfc
 8016970:	08025c24 	.word	0x08025c24
 8016974:	2400a190 	.word	0x2400a190

08016978 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b08a      	sub	sp, #40	@ 0x28
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	3303      	adds	r3, #3
 8016986:	f023 0303 	bic.w	r3, r3, #3
 801698a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 801698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801698e:	2b0b      	cmp	r3, #11
 8016990:	d801      	bhi.n	8016996 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8016992:	230c      	movs	r3, #12
 8016994:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8016996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016998:	4a6e      	ldr	r2, [pc, #440]	@ (8016b54 <mem_trim+0x1dc>)
 801699a:	4293      	cmp	r3, r2
 801699c:	d803      	bhi.n	80169a6 <mem_trim+0x2e>
 801699e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d201      	bcs.n	80169aa <mem_trim+0x32>
    return NULL;
 80169a6:	2300      	movs	r3, #0
 80169a8:	e0d0      	b.n	8016b4c <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80169aa:	4b6b      	ldr	r3, [pc, #428]	@ (8016b58 <mem_trim+0x1e0>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d304      	bcc.n	80169be <mem_trim+0x46>
 80169b4:	4b69      	ldr	r3, [pc, #420]	@ (8016b5c <mem_trim+0x1e4>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	687a      	ldr	r2, [r7, #4]
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d306      	bcc.n	80169cc <mem_trim+0x54>
 80169be:	4b68      	ldr	r3, [pc, #416]	@ (8016b60 <mem_trim+0x1e8>)
 80169c0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80169c4:	4967      	ldr	r1, [pc, #412]	@ (8016b64 <mem_trim+0x1ec>)
 80169c6:	4868      	ldr	r0, [pc, #416]	@ (8016b68 <mem_trim+0x1f0>)
 80169c8:	f00b f9f0 	bl	8021dac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80169cc:	4b62      	ldr	r3, [pc, #392]	@ (8016b58 <mem_trim+0x1e0>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	687a      	ldr	r2, [r7, #4]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d304      	bcc.n	80169e0 <mem_trim+0x68>
 80169d6:	4b61      	ldr	r3, [pc, #388]	@ (8016b5c <mem_trim+0x1e4>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d307      	bcc.n	80169f0 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80169e0:	f003 fbba 	bl	801a158 <sys_arch_protect>
 80169e4:	60b8      	str	r0, [r7, #8]
 80169e6:	68b8      	ldr	r0, [r7, #8]
 80169e8:	f003 fbc4 	bl	801a174 <sys_arch_unprotect>
    return rmem;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	e0ad      	b.n	8016b4c <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	3b0c      	subs	r3, #12
 80169f4:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80169f6:	6a38      	ldr	r0, [r7, #32]
 80169f8:	f7ff fdf0 	bl	80165dc <mem_to_ptr>
 80169fc:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80169fe:	6a3b      	ldr	r3, [r7, #32]
 8016a00:	681a      	ldr	r2, [r3, #0]
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	3b0c      	subs	r3, #12
 8016a08:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a0c:	69bb      	ldr	r3, [r7, #24]
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d906      	bls.n	8016a20 <mem_trim+0xa8>
 8016a12:	4b53      	ldr	r3, [pc, #332]	@ (8016b60 <mem_trim+0x1e8>)
 8016a14:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8016a18:	4954      	ldr	r1, [pc, #336]	@ (8016b6c <mem_trim+0x1f4>)
 8016a1a:	4853      	ldr	r0, [pc, #332]	@ (8016b68 <mem_trim+0x1f0>)
 8016a1c:	f00b f9c6 	bl	8021dac <iprintf>
  if (newsize > size) {
 8016a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a22:	69bb      	ldr	r3, [r7, #24]
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d901      	bls.n	8016a2c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8016a28:	2300      	movs	r3, #0
 8016a2a:	e08f      	b.n	8016b4c <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8016a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d101      	bne.n	8016a38 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	e089      	b.n	8016b4c <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016a38:	484d      	ldr	r0, [pc, #308]	@ (8016b70 <mem_trim+0x1f8>)
 8016a3a:	f003 fb51 	bl	801a0e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8016a3e:	6a3b      	ldr	r3, [r7, #32]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7ff fdba 	bl	80165bc <ptr_to_mem>
 8016a48:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	7a1b      	ldrb	r3, [r3, #8]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d13c      	bne.n	8016acc <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016a52:	6a3b      	ldr	r3, [r7, #32]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	4a3f      	ldr	r2, [pc, #252]	@ (8016b54 <mem_trim+0x1dc>)
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d106      	bne.n	8016a6a <mem_trim+0xf2>
 8016a5c:	4b40      	ldr	r3, [pc, #256]	@ (8016b60 <mem_trim+0x1e8>)
 8016a5e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8016a62:	4944      	ldr	r1, [pc, #272]	@ (8016b74 <mem_trim+0x1fc>)
 8016a64:	4840      	ldr	r0, [pc, #256]	@ (8016b68 <mem_trim+0x1f0>)
 8016a66:	f00b f9a1 	bl	8021dac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016a70:	69fa      	ldr	r2, [r7, #28]
 8016a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a74:	4413      	add	r3, r2
 8016a76:	330c      	adds	r3, #12
 8016a78:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8016a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8016b78 <mem_trim+0x200>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	697a      	ldr	r2, [r7, #20]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d105      	bne.n	8016a90 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8016a84:	6938      	ldr	r0, [r7, #16]
 8016a86:	f7ff fd99 	bl	80165bc <ptr_to_mem>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8016b78 <mem_trim+0x200>)
 8016a8e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8016a90:	6938      	ldr	r0, [r7, #16]
 8016a92:	f7ff fd93 	bl	80165bc <ptr_to_mem>
 8016a96:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	68fa      	ldr	r2, [r7, #12]
 8016aa2:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	69fa      	ldr	r2, [r7, #28]
 8016aa8:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8016aaa:	6a3b      	ldr	r3, [r7, #32]
 8016aac:	693a      	ldr	r2, [r7, #16]
 8016aae:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4a27      	ldr	r2, [pc, #156]	@ (8016b54 <mem_trim+0x1dc>)
 8016ab6:	4293      	cmp	r3, r2
 8016ab8:	d044      	beq.n	8016b44 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7ff fd7c 	bl	80165bc <ptr_to_mem>
 8016ac4:	4602      	mov	r2, r0
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	6053      	str	r3, [r2, #4]
 8016aca:	e03b      	b.n	8016b44 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8016acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ace:	3318      	adds	r3, #24
 8016ad0:	69ba      	ldr	r2, [r7, #24]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d336      	bcc.n	8016b44 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016ad6:	69fa      	ldr	r2, [r7, #28]
 8016ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ada:	4413      	add	r3, r2
 8016adc:	330c      	adds	r3, #12
 8016ade:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016ae0:	6a3b      	ldr	r3, [r7, #32]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8016b54 <mem_trim+0x1dc>)
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	d106      	bne.n	8016af8 <mem_trim+0x180>
 8016aea:	4b1d      	ldr	r3, [pc, #116]	@ (8016b60 <mem_trim+0x1e8>)
 8016aec:	f240 3216 	movw	r2, #790	@ 0x316
 8016af0:	4920      	ldr	r1, [pc, #128]	@ (8016b74 <mem_trim+0x1fc>)
 8016af2:	481d      	ldr	r0, [pc, #116]	@ (8016b68 <mem_trim+0x1f0>)
 8016af4:	f00b f95a 	bl	8021dac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8016af8:	6938      	ldr	r0, [r7, #16]
 8016afa:	f7ff fd5f 	bl	80165bc <ptr_to_mem>
 8016afe:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8016b00:	4b1d      	ldr	r3, [pc, #116]	@ (8016b78 <mem_trim+0x200>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	697a      	ldr	r2, [r7, #20]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d202      	bcs.n	8016b10 <mem_trim+0x198>
      lfree = mem2;
 8016b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8016b78 <mem_trim+0x200>)
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	2200      	movs	r2, #0
 8016b14:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8016b16:	6a3b      	ldr	r3, [r7, #32]
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	69fa      	ldr	r2, [r7, #28]
 8016b22:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8016b24:	6a3b      	ldr	r3, [r7, #32]
 8016b26:	693a      	ldr	r2, [r7, #16]
 8016b28:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	4a09      	ldr	r2, [pc, #36]	@ (8016b54 <mem_trim+0x1dc>)
 8016b30:	4293      	cmp	r3, r2
 8016b32:	d007      	beq.n	8016b44 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7ff fd3f 	bl	80165bc <ptr_to_mem>
 8016b3e:	4602      	mov	r2, r0
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016b44:	480a      	ldr	r0, [pc, #40]	@ (8016b70 <mem_trim+0x1f8>)
 8016b46:	f003 fada 	bl	801a0fe <sys_mutex_unlock>
  return rmem;
 8016b4a:	687b      	ldr	r3, [r7, #4]
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3728      	adds	r7, #40	@ 0x28
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}
 8016b54:	0001ffe8 	.word	0x0001ffe8
 8016b58:	2400a184 	.word	0x2400a184
 8016b5c:	2400a188 	.word	0x2400a188
 8016b60:	08025aa0 	.word	0x08025aa0
 8016b64:	08025c58 	.word	0x08025c58
 8016b68:	08025b14 	.word	0x08025b14
 8016b6c:	08025c70 	.word	0x08025c70
 8016b70:	2400a18c 	.word	0x2400a18c
 8016b74:	08025c90 	.word	0x08025c90
 8016b78:	2400a190 	.word	0x2400a190

08016b7c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b088      	sub	sp, #32
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d101      	bne.n	8016b8e <mem_malloc+0x12>
    return NULL;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	e0d9      	b.n	8016d42 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	3303      	adds	r3, #3
 8016b92:	f023 0303 	bic.w	r3, r3, #3
 8016b96:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	2b0b      	cmp	r3, #11
 8016b9c:	d801      	bhi.n	8016ba2 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8016b9e:	230c      	movs	r3, #12
 8016ba0:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	4a69      	ldr	r2, [pc, #420]	@ (8016d4c <mem_malloc+0x1d0>)
 8016ba6:	4293      	cmp	r3, r2
 8016ba8:	d803      	bhi.n	8016bb2 <mem_malloc+0x36>
 8016baa:	69ba      	ldr	r2, [r7, #24]
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	429a      	cmp	r2, r3
 8016bb0:	d201      	bcs.n	8016bb6 <mem_malloc+0x3a>
    return NULL;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	e0c5      	b.n	8016d42 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8016bb6:	4866      	ldr	r0, [pc, #408]	@ (8016d50 <mem_malloc+0x1d4>)
 8016bb8:	f003 fa92 	bl	801a0e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016bbc:	4b65      	ldr	r3, [pc, #404]	@ (8016d54 <mem_malloc+0x1d8>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7ff fd0b 	bl	80165dc <mem_to_ptr>
 8016bc6:	61f8      	str	r0, [r7, #28]
 8016bc8:	e0b0      	b.n	8016d2c <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8016bca:	69f8      	ldr	r0, [r7, #28]
 8016bcc:	f7ff fcf6 	bl	80165bc <ptr_to_mem>
 8016bd0:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8016bd2:	693b      	ldr	r3, [r7, #16]
 8016bd4:	7a1b      	ldrb	r3, [r3, #8]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	f040 80a2 	bne.w	8016d20 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	69fb      	ldr	r3, [r7, #28]
 8016be2:	1ad3      	subs	r3, r2, r3
 8016be4:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8016be6:	69ba      	ldr	r2, [r7, #24]
 8016be8:	429a      	cmp	r2, r3
 8016bea:	f200 8099 	bhi.w	8016d20 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8016bee:	693b      	ldr	r3, [r7, #16]
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	1ad3      	subs	r3, r2, r3
 8016bf6:	f1a3 020c 	sub.w	r2, r3, #12
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	3318      	adds	r3, #24
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d331      	bcc.n	8016c66 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016c02:	69fa      	ldr	r2, [r7, #28]
 8016c04:	69bb      	ldr	r3, [r7, #24]
 8016c06:	4413      	add	r3, r2
 8016c08:	330c      	adds	r3, #12
 8016c0a:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	4a4f      	ldr	r2, [pc, #316]	@ (8016d4c <mem_malloc+0x1d0>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d106      	bne.n	8016c22 <mem_malloc+0xa6>
 8016c14:	4b50      	ldr	r3, [pc, #320]	@ (8016d58 <mem_malloc+0x1dc>)
 8016c16:	f240 3287 	movw	r2, #903	@ 0x387
 8016c1a:	4950      	ldr	r1, [pc, #320]	@ (8016d5c <mem_malloc+0x1e0>)
 8016c1c:	4850      	ldr	r0, [pc, #320]	@ (8016d60 <mem_malloc+0x1e4>)
 8016c1e:	f00b f8c5 	bl	8021dac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7ff fcca 	bl	80165bc <ptr_to_mem>
 8016c28:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	69fa      	ldr	r2, [r7, #28]
 8016c3c:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	68fa      	ldr	r2, [r7, #12]
 8016c42:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	2201      	movs	r2, #1
 8016c48:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8016d4c <mem_malloc+0x1d0>)
 8016c50:	4293      	cmp	r3, r2
 8016c52:	d00b      	beq.n	8016c6c <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7ff fcaf 	bl	80165bc <ptr_to_mem>
 8016c5e:	4602      	mov	r2, r0
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	6053      	str	r3, [r2, #4]
 8016c64:	e002      	b.n	8016c6c <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8016c66:	693b      	ldr	r3, [r7, #16]
 8016c68:	2201      	movs	r2, #1
 8016c6a:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016c6c:	4b39      	ldr	r3, [pc, #228]	@ (8016d54 <mem_malloc+0x1d8>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	693a      	ldr	r2, [r7, #16]
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d127      	bne.n	8016cc6 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8016c76:	4b37      	ldr	r3, [pc, #220]	@ (8016d54 <mem_malloc+0x1d8>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8016c7c:	e005      	b.n	8016c8a <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7ff fc9a 	bl	80165bc <ptr_to_mem>
 8016c88:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	7a1b      	ldrb	r3, [r3, #8]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d004      	beq.n	8016c9c <mem_malloc+0x120>
 8016c92:	4b34      	ldr	r3, [pc, #208]	@ (8016d64 <mem_malloc+0x1e8>)
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	697a      	ldr	r2, [r7, #20]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d1f0      	bne.n	8016c7e <mem_malloc+0x102>
          }
          lfree = cur;
 8016c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8016d54 <mem_malloc+0x1d8>)
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8016d54 <mem_malloc+0x1d8>)
 8016ca4:	681a      	ldr	r2, [r3, #0]
 8016ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8016d64 <mem_malloc+0x1e8>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d00b      	beq.n	8016cc6 <mem_malloc+0x14a>
 8016cae:	4b29      	ldr	r3, [pc, #164]	@ (8016d54 <mem_malloc+0x1d8>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	7a1b      	ldrb	r3, [r3, #8]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d006      	beq.n	8016cc6 <mem_malloc+0x14a>
 8016cb8:	4b27      	ldr	r3, [pc, #156]	@ (8016d58 <mem_malloc+0x1dc>)
 8016cba:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8016cbe:	492a      	ldr	r1, [pc, #168]	@ (8016d68 <mem_malloc+0x1ec>)
 8016cc0:	4827      	ldr	r0, [pc, #156]	@ (8016d60 <mem_malloc+0x1e4>)
 8016cc2:	f00b f873 	bl	8021dac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8016cc6:	4822      	ldr	r0, [pc, #136]	@ (8016d50 <mem_malloc+0x1d4>)
 8016cc8:	f003 fa19 	bl	801a0fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016ccc:	693a      	ldr	r2, [r7, #16]
 8016cce:	69bb      	ldr	r3, [r7, #24]
 8016cd0:	4413      	add	r3, r2
 8016cd2:	330c      	adds	r3, #12
 8016cd4:	4a23      	ldr	r2, [pc, #140]	@ (8016d64 <mem_malloc+0x1e8>)
 8016cd6:	6812      	ldr	r2, [r2, #0]
 8016cd8:	4293      	cmp	r3, r2
 8016cda:	d906      	bls.n	8016cea <mem_malloc+0x16e>
 8016cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8016d58 <mem_malloc+0x1dc>)
 8016cde:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8016ce2:	4922      	ldr	r1, [pc, #136]	@ (8016d6c <mem_malloc+0x1f0>)
 8016ce4:	481e      	ldr	r0, [pc, #120]	@ (8016d60 <mem_malloc+0x1e4>)
 8016ce6:	f00b f861 	bl	8021dac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016cea:	693b      	ldr	r3, [r7, #16]
 8016cec:	f003 0303 	and.w	r3, r3, #3
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d006      	beq.n	8016d02 <mem_malloc+0x186>
 8016cf4:	4b18      	ldr	r3, [pc, #96]	@ (8016d58 <mem_malloc+0x1dc>)
 8016cf6:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8016cfa:	491d      	ldr	r1, [pc, #116]	@ (8016d70 <mem_malloc+0x1f4>)
 8016cfc:	4818      	ldr	r0, [pc, #96]	@ (8016d60 <mem_malloc+0x1e4>)
 8016cfe:	f00b f855 	bl	8021dac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	f003 0303 	and.w	r3, r3, #3
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d006      	beq.n	8016d1a <mem_malloc+0x19e>
 8016d0c:	4b12      	ldr	r3, [pc, #72]	@ (8016d58 <mem_malloc+0x1dc>)
 8016d0e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8016d12:	4918      	ldr	r1, [pc, #96]	@ (8016d74 <mem_malloc+0x1f8>)
 8016d14:	4812      	ldr	r0, [pc, #72]	@ (8016d60 <mem_malloc+0x1e4>)
 8016d16:	f00b f849 	bl	8021dac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	330c      	adds	r3, #12
 8016d1e:	e010      	b.n	8016d42 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 8016d20:	69f8      	ldr	r0, [r7, #28]
 8016d22:	f7ff fc4b 	bl	80165bc <ptr_to_mem>
 8016d26:	4603      	mov	r3, r0
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016d2c:	69ba      	ldr	r2, [r7, #24]
 8016d2e:	4b07      	ldr	r3, [pc, #28]	@ (8016d4c <mem_malloc+0x1d0>)
 8016d30:	1a9b      	subs	r3, r3, r2
 8016d32:	69fa      	ldr	r2, [r7, #28]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	f4ff af48 	bcc.w	8016bca <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016d3a:	4805      	ldr	r0, [pc, #20]	@ (8016d50 <mem_malloc+0x1d4>)
 8016d3c:	f003 f9df 	bl	801a0fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8016d40:	2300      	movs	r3, #0
}
 8016d42:	4618      	mov	r0, r3
 8016d44:	3720      	adds	r7, #32
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}
 8016d4a:	bf00      	nop
 8016d4c:	0001ffe8 	.word	0x0001ffe8
 8016d50:	2400a18c 	.word	0x2400a18c
 8016d54:	2400a190 	.word	0x2400a190
 8016d58:	08025aa0 	.word	0x08025aa0
 8016d5c:	08025c90 	.word	0x08025c90
 8016d60:	08025b14 	.word	0x08025b14
 8016d64:	2400a188 	.word	0x2400a188
 8016d68:	08025ca4 	.word	0x08025ca4
 8016d6c:	08025cc0 	.word	0x08025cc0
 8016d70:	08025cf0 	.word	0x08025cf0
 8016d74:	08025d20 	.word	0x08025d20

08016d78 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b084      	sub	sp, #16
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	6039      	str	r1, [r7, #0]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	683a      	ldr	r2, [r7, #0]
 8016d86:	fb02 f303 	mul.w	r3, r2, r3
 8016d8a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f7ff fef5 	bl	8016b7c <mem_malloc>
 8016d92:	60b8      	str	r0, [r7, #8]
  if (p) {
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d004      	beq.n	8016da4 <mem_calloc+0x2c>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8016d9a:	68fa      	ldr	r2, [r7, #12]
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	68b8      	ldr	r0, [r7, #8]
 8016da0:	f00b f9aa 	bl	80220f8 <memset>
  }
  return p;
 8016da4:	68bb      	ldr	r3, [r7, #8]
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	3710      	adds	r7, #16
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}

08016dae <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8016dae:	b480      	push	{r7}
 8016db0:	b085      	sub	sp, #20
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	689b      	ldr	r3, [r3, #8]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	3303      	adds	r3, #3
 8016dc4:	f023 0303 	bic.w	r3, r3, #3
 8016dc8:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8016dca:	2300      	movs	r3, #0
 8016dcc:	60fb      	str	r3, [r7, #12]
 8016dce:	e011      	b.n	8016df4 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	689b      	ldr	r3, [r3, #8]
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	689b      	ldr	r3, [r3, #8]
 8016dde:	68ba      	ldr	r2, [r7, #8]
 8016de0:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	881b      	ldrh	r3, [r3, #0]
 8016de6:	461a      	mov	r2, r3
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	4413      	add	r3, r2
 8016dec:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	3301      	adds	r3, #1
 8016df2:	60fb      	str	r3, [r7, #12]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	885b      	ldrh	r3, [r3, #2]
 8016df8:	461a      	mov	r2, r3
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	4293      	cmp	r3, r2
 8016dfe:	dbe7      	blt.n	8016dd0 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8016e00:	bf00      	nop
 8016e02:	bf00      	nop
 8016e04:	3714      	adds	r7, #20
 8016e06:	46bd      	mov	sp, r7
 8016e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0c:	4770      	bx	lr
	...

08016e10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016e16:	2300      	movs	r3, #0
 8016e18:	80fb      	strh	r3, [r7, #6]
 8016e1a:	e009      	b.n	8016e30 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8016e1c:	88fb      	ldrh	r3, [r7, #6]
 8016e1e:	4a08      	ldr	r2, [pc, #32]	@ (8016e40 <memp_init+0x30>)
 8016e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7ff ffc2 	bl	8016dae <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016e2a:	88fb      	ldrh	r3, [r7, #6]
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	80fb      	strh	r3, [r7, #6]
 8016e30:	88fb      	ldrh	r3, [r7, #6]
 8016e32:	2b0c      	cmp	r3, #12
 8016e34:	d9f2      	bls.n	8016e1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8016e36:	bf00      	nop
 8016e38:	bf00      	nop
 8016e3a:	3708      	adds	r7, #8
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	08028aec 	.word	0x08028aec

08016e44 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b084      	sub	sp, #16
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016e4c:	f003 f984 	bl	801a158 <sys_arch_protect>
 8016e50:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	689b      	ldr	r3, [r3, #8]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d015      	beq.n	8016e8c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	689b      	ldr	r3, [r3, #8]
 8016e64:	68ba      	ldr	r2, [r7, #8]
 8016e66:	6812      	ldr	r2, [r2, #0]
 8016e68:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	f003 0303 	and.w	r3, r3, #3
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d006      	beq.n	8016e82 <do_memp_malloc_pool+0x3e>
 8016e74:	4b09      	ldr	r3, [pc, #36]	@ (8016e9c <do_memp_malloc_pool+0x58>)
 8016e76:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8016e7a:	4909      	ldr	r1, [pc, #36]	@ (8016ea0 <do_memp_malloc_pool+0x5c>)
 8016e7c:	4809      	ldr	r0, [pc, #36]	@ (8016ea4 <do_memp_malloc_pool+0x60>)
 8016e7e:	f00a ff95 	bl	8021dac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016e82:	68f8      	ldr	r0, [r7, #12]
 8016e84:	f003 f976 	bl	801a174 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	e003      	b.n	8016e94 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016e8c:	68f8      	ldr	r0, [r7, #12]
 8016e8e:	f003 f971 	bl	801a174 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8016e92:	2300      	movs	r3, #0
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3710      	adds	r7, #16
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}
 8016e9c:	08025d44 	.word	0x08025d44
 8016ea0:	08025da4 	.word	0x08025da4
 8016ea4:	08025dc8 	.word	0x08025dc8

08016ea8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d106      	bne.n	8016ec4 <memp_malloc_pool+0x1c>
 8016eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8016ee0 <memp_malloc_pool+0x38>)
 8016eb8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8016ebc:	4909      	ldr	r1, [pc, #36]	@ (8016ee4 <memp_malloc_pool+0x3c>)
 8016ebe:	480a      	ldr	r0, [pc, #40]	@ (8016ee8 <memp_malloc_pool+0x40>)
 8016ec0:	f00a ff74 	bl	8021dac <iprintf>
  if (desc == NULL) {
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d101      	bne.n	8016ece <memp_malloc_pool+0x26>
    return NULL;
 8016eca:	2300      	movs	r3, #0
 8016ecc:	e003      	b.n	8016ed6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f7ff ffb8 	bl	8016e44 <do_memp_malloc_pool>
 8016ed4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3708      	adds	r7, #8
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	08025d44 	.word	0x08025d44
 8016ee4:	08025df0 	.word	0x08025df0
 8016ee8:	08025dc8 	.word	0x08025dc8

08016eec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b084      	sub	sp, #16
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016ef6:	79fb      	ldrb	r3, [r7, #7]
 8016ef8:	2b0c      	cmp	r3, #12
 8016efa:	d908      	bls.n	8016f0e <memp_malloc+0x22>
 8016efc:	4b0a      	ldr	r3, [pc, #40]	@ (8016f28 <memp_malloc+0x3c>)
 8016efe:	f240 1257 	movw	r2, #343	@ 0x157
 8016f02:	490a      	ldr	r1, [pc, #40]	@ (8016f2c <memp_malloc+0x40>)
 8016f04:	480a      	ldr	r0, [pc, #40]	@ (8016f30 <memp_malloc+0x44>)
 8016f06:	f00a ff51 	bl	8021dac <iprintf>
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	e008      	b.n	8016f20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8016f0e:	79fb      	ldrb	r3, [r7, #7]
 8016f10:	4a08      	ldr	r2, [pc, #32]	@ (8016f34 <memp_malloc+0x48>)
 8016f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7ff ff94 	bl	8016e44 <do_memp_malloc_pool>
 8016f1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3710      	adds	r7, #16
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	08025d44 	.word	0x08025d44
 8016f2c:	08025e04 	.word	0x08025e04
 8016f30:	08025dc8 	.word	0x08025dc8
 8016f34:	08028aec 	.word	0x08028aec

08016f38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	f003 0303 	and.w	r3, r3, #3
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d006      	beq.n	8016f5a <do_memp_free_pool+0x22>
 8016f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8016f84 <do_memp_free_pool+0x4c>)
 8016f4e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8016f52:	490d      	ldr	r1, [pc, #52]	@ (8016f88 <do_memp_free_pool+0x50>)
 8016f54:	480d      	ldr	r0, [pc, #52]	@ (8016f8c <do_memp_free_pool+0x54>)
 8016f56:	f00a ff29 	bl	8021dac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8016f5e:	f003 f8fb 	bl	801a158 <sys_arch_protect>
 8016f62:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	681a      	ldr	r2, [r3, #0]
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	689b      	ldr	r3, [r3, #8]
 8016f72:	68fa      	ldr	r2, [r7, #12]
 8016f74:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8016f76:	68b8      	ldr	r0, [r7, #8]
 8016f78:	f003 f8fc 	bl	801a174 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016f7c:	bf00      	nop
 8016f7e:	3710      	adds	r7, #16
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}
 8016f84:	08025d44 	.word	0x08025d44
 8016f88:	08025e24 	.word	0x08025e24
 8016f8c:	08025dc8 	.word	0x08025dc8

08016f90 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b082      	sub	sp, #8
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d106      	bne.n	8016fae <memp_free_pool+0x1e>
 8016fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8016fcc <memp_free_pool+0x3c>)
 8016fa2:	f240 1295 	movw	r2, #405	@ 0x195
 8016fa6:	490a      	ldr	r1, [pc, #40]	@ (8016fd0 <memp_free_pool+0x40>)
 8016fa8:	480a      	ldr	r0, [pc, #40]	@ (8016fd4 <memp_free_pool+0x44>)
 8016faa:	f00a feff 	bl	8021dac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d007      	beq.n	8016fc4 <memp_free_pool+0x34>
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d004      	beq.n	8016fc4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016fba:	6839      	ldr	r1, [r7, #0]
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f7ff ffbb 	bl	8016f38 <do_memp_free_pool>
 8016fc2:	e000      	b.n	8016fc6 <memp_free_pool+0x36>
    return;
 8016fc4:	bf00      	nop
}
 8016fc6:	3708      	adds	r7, #8
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd80      	pop	{r7, pc}
 8016fcc:	08025d44 	.word	0x08025d44
 8016fd0:	08025df0 	.word	0x08025df0
 8016fd4:	08025dc8 	.word	0x08025dc8

08016fd8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b082      	sub	sp, #8
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	4603      	mov	r3, r0
 8016fe0:	6039      	str	r1, [r7, #0]
 8016fe2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016fe4:	79fb      	ldrb	r3, [r7, #7]
 8016fe6:	2b0c      	cmp	r3, #12
 8016fe8:	d907      	bls.n	8016ffa <memp_free+0x22>
 8016fea:	4b0c      	ldr	r3, [pc, #48]	@ (801701c <memp_free+0x44>)
 8016fec:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8016ff0:	490b      	ldr	r1, [pc, #44]	@ (8017020 <memp_free+0x48>)
 8016ff2:	480c      	ldr	r0, [pc, #48]	@ (8017024 <memp_free+0x4c>)
 8016ff4:	f00a feda 	bl	8021dac <iprintf>
 8016ff8:	e00c      	b.n	8017014 <memp_free+0x3c>

  if (mem == NULL) {
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d008      	beq.n	8017012 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017000:	79fb      	ldrb	r3, [r7, #7]
 8017002:	4a09      	ldr	r2, [pc, #36]	@ (8017028 <memp_free+0x50>)
 8017004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017008:	6839      	ldr	r1, [r7, #0]
 801700a:	4618      	mov	r0, r3
 801700c:	f7ff ff94 	bl	8016f38 <do_memp_free_pool>
 8017010:	e000      	b.n	8017014 <memp_free+0x3c>
    return;
 8017012:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017014:	3708      	adds	r7, #8
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}
 801701a:	bf00      	nop
 801701c:	08025d44 	.word	0x08025d44
 8017020:	08025e44 	.word	0x08025e44
 8017024:	08025dc8 	.word	0x08025dc8
 8017028:	08028aec 	.word	0x08028aec

0801702c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 801702c:	b480      	push	{r7}
 801702e:	b083      	sub	sp, #12
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	88db      	ldrh	r3, [r3, #6]
 8017038:	3301      	adds	r3, #1
 801703a:	b29a      	uxth	r2, r3
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	88db      	ldrh	r3, [r3, #6]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d105      	bne.n	8017054 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	88db      	ldrh	r3, [r3, #6]
 801704c:	3301      	adds	r3, #1
 801704e:	b29a      	uxth	r2, r3
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	88db      	ldrh	r3, [r3, #6]
}
 8017058:	4618      	mov	r0, r3
 801705a:	370c      	adds	r7, #12
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8017064:	b480      	push	{r7}
 8017066:	b083      	sub	sp, #12
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	460b      	mov	r3, r1
 801706e:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	881b      	ldrh	r3, [r3, #0]
 8017074:	461a      	mov	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	4413      	add	r3, r2
 801707a:	78fa      	ldrb	r2, [r7, #3]
 801707c:	711a      	strb	r2, [r3, #4]
  rb->put++;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	881b      	ldrh	r3, [r3, #0]
 8017082:	3301      	adds	r3, #1
 8017084:	b29a      	uxth	r2, r3
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	881b      	ldrh	r3, [r3, #0]
 801708e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017092:	d302      	bcc.n	801709a <mqtt_ringbuf_put+0x36>
    rb->put = 0;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2200      	movs	r2, #0
 8017098:	801a      	strh	r2, [r3, #0]
  }
}
 801709a:	bf00      	nop
 801709c:	370c      	adds	r7, #12
 801709e:	46bd      	mov	sp, r7
 80170a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a4:	4770      	bx	lr

080170a6 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 80170a6:	b480      	push	{r7}
 80170a8:	b083      	sub	sp, #12
 80170aa:	af00      	add	r7, sp, #0
 80170ac:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	885b      	ldrh	r3, [r3, #2]
 80170b2:	461a      	mov	r2, r3
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	4413      	add	r3, r2
 80170b8:	3304      	adds	r3, #4
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	370c      	adds	r7, #12
 80170be:	46bd      	mov	sp, r7
 80170c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c4:	4770      	bx	lr
	...

080170c8 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b082      	sub	sp, #8
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	460b      	mov	r3, r1
 80170d2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80170d4:	887b      	ldrh	r3, [r7, #2]
 80170d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80170da:	d305      	bcc.n	80170e8 <mqtt_ringbuf_advance_get_idx+0x20>
 80170dc:	4b0e      	ldr	r3, [pc, #56]	@ (8017118 <mqtt_ringbuf_advance_get_idx+0x50>)
 80170de:	22cb      	movs	r2, #203	@ 0xcb
 80170e0:	490e      	ldr	r1, [pc, #56]	@ (801711c <mqtt_ringbuf_advance_get_idx+0x54>)
 80170e2:	480f      	ldr	r0, [pc, #60]	@ (8017120 <mqtt_ringbuf_advance_get_idx+0x58>)
 80170e4:	f00a fe62 	bl	8021dac <iprintf>

  rb->get += len;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	885a      	ldrh	r2, [r3, #2]
 80170ec:	887b      	ldrh	r3, [r7, #2]
 80170ee:	4413      	add	r3, r2
 80170f0:	b29a      	uxth	r2, r3
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	885b      	ldrh	r3, [r3, #2]
 80170fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80170fe:	d306      	bcc.n	801710e <mqtt_ringbuf_advance_get_idx+0x46>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	885b      	ldrh	r3, [r3, #2]
 8017104:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8017108:	b29a      	uxth	r2, r3
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	805a      	strh	r2, [r3, #2]
  }
}
 801710e:	bf00      	nop
 8017110:	3708      	adds	r7, #8
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}
 8017116:	bf00      	nop
 8017118:	08025e60 	.word	0x08025e60
 801711c:	08025ec4 	.word	0x08025ec4
 8017120:	08025f04 	.word	0x08025f04

08017124 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8017124:	b480      	push	{r7}
 8017126:	b085      	sub	sp, #20
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	881b      	ldrh	r3, [r3, #0]
 8017130:	461a      	mov	r2, r3
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	885b      	ldrh	r3, [r3, #2]
 8017136:	1ad3      	subs	r3, r2, r3
 8017138:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017140:	d303      	bcc.n	801714a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017148:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	b29b      	uxth	r3, r3
}
 801714e:	4618      	mov	r0, r3
 8017150:	3714      	adds	r7, #20
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr
	...

0801715c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 801715c:	b590      	push	{r4, r7, lr}
 801715e:	b085      	sub	sp, #20
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 801716a:	6878      	ldr	r0, [r7, #4]
 801716c:	f7ff ffda 	bl	8017124 <mqtt_ringbuf_len>
 8017170:	4603      	mov	r3, r0
 8017172:	461a      	mov	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	885b      	ldrh	r3, [r3, #2]
 8017178:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 801717c:	429a      	cmp	r2, r3
 801717e:	da04      	bge.n	801718a <mqtt_output_send+0x2e>
 8017180:	6878      	ldr	r0, [r7, #4]
 8017182:	f7ff ffcf 	bl	8017124 <mqtt_ringbuf_len>
 8017186:	4603      	mov	r3, r0
 8017188:	e004      	b.n	8017194 <mqtt_output_send+0x38>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	885b      	ldrh	r3, [r3, #2]
 801718e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8017192:	b29b      	uxth	r3, r3
 8017194:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801719c:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d105      	bne.n	80171b0 <mqtt_output_send+0x54>
 80171a4:	4b44      	ldr	r3, [pc, #272]	@ (80172b8 <mqtt_output_send+0x15c>)
 80171a6:	22f0      	movs	r2, #240	@ 0xf0
 80171a8:	4944      	ldr	r1, [pc, #272]	@ (80172bc <mqtt_output_send+0x160>)
 80171aa:	4845      	ldr	r0, [pc, #276]	@ (80172c0 <mqtt_output_send+0x164>)
 80171ac:	f00a fdfe 	bl	8021dac <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80171b0:	89bb      	ldrh	r3, [r7, #12]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d07c      	beq.n	80172b0 <mqtt_output_send+0x154>
 80171b6:	897b      	ldrh	r3, [r7, #10]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d079      	beq.n	80172b0 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 80171bc:	89ba      	ldrh	r2, [r7, #12]
 80171be:	897b      	ldrh	r3, [r7, #10]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d90d      	bls.n	80171e0 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80171c4:	897b      	ldrh	r3, [r7, #10]
 80171c6:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f7ff ffab 	bl	8017124 <mqtt_ringbuf_len>
 80171ce:	4603      	mov	r3, r0
 80171d0:	461a      	mov	r2, r3
 80171d2:	897b      	ldrh	r3, [r7, #10]
 80171d4:	4293      	cmp	r3, r2
 80171d6:	bf34      	ite	cc
 80171d8:	2301      	movcc	r3, #1
 80171da:	2300      	movcs	r3, #0
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f7ff ff60 	bl	80170a6 <mqtt_ringbuf_get_ptr>
 80171e6:	4601      	mov	r1, r0
 80171e8:	7bbb      	ldrb	r3, [r7, #14]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d001      	beq.n	80171f2 <mqtt_output_send+0x96>
 80171ee:	2303      	movs	r3, #3
 80171f0:	e000      	b.n	80171f4 <mqtt_output_send+0x98>
 80171f2:	2301      	movs	r3, #1
 80171f4:	89ba      	ldrh	r2, [r7, #12]
 80171f6:	6838      	ldr	r0, [r7, #0]
 80171f8:	f007 fade 	bl	801e7b8 <tcp_write>
 80171fc:	4603      	mov	r3, r0
 80171fe:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8017200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d146      	bne.n	8017296 <mqtt_output_send+0x13a>
 8017208:	7bbb      	ldrb	r3, [r7, #14]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d043      	beq.n	8017296 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 801720e:	89bb      	ldrh	r3, [r7, #12]
 8017210:	4619      	mov	r1, r3
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f7ff ff58 	bl	80170c8 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801721e:	461c      	mov	r4, r3
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f7ff ff7f 	bl	8017124 <mqtt_ringbuf_len>
 8017226:	4603      	mov	r3, r0
 8017228:	461a      	mov	r2, r3
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	885b      	ldrh	r3, [r3, #2]
 801722e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8017232:	429a      	cmp	r2, r3
 8017234:	da04      	bge.n	8017240 <mqtt_output_send+0xe4>
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f7ff ff74 	bl	8017124 <mqtt_ringbuf_len>
 801723c:	4603      	mov	r3, r0
 801723e:	e003      	b.n	8017248 <mqtt_output_send+0xec>
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	885b      	ldrh	r3, [r3, #2]
 8017244:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8017248:	42a3      	cmp	r3, r4
 801724a:	dd03      	ble.n	8017254 <mqtt_output_send+0xf8>
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017252:	e014      	b.n	801727e <mqtt_output_send+0x122>
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f7ff ff65 	bl	8017124 <mqtt_ringbuf_len>
 801725a:	4603      	mov	r3, r0
 801725c:	461a      	mov	r2, r3
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	885b      	ldrh	r3, [r3, #2]
 8017262:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8017266:	429a      	cmp	r2, r3
 8017268:	da04      	bge.n	8017274 <mqtt_output_send+0x118>
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f7ff ff5a 	bl	8017124 <mqtt_ringbuf_len>
 8017270:	4603      	mov	r3, r0
 8017272:	e004      	b.n	801727e <mqtt_output_send+0x122>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	885b      	ldrh	r3, [r3, #2]
 8017278:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 801727c:	b29b      	uxth	r3, r3
 801727e:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f7ff ff10 	bl	80170a6 <mqtt_ringbuf_get_ptr>
 8017286:	4601      	mov	r1, r0
 8017288:	89ba      	ldrh	r2, [r7, #12]
 801728a:	2301      	movs	r3, #1
 801728c:	6838      	ldr	r0, [r7, #0]
 801728e:	f007 fa93 	bl	801e7b8 <tcp_write>
 8017292:	4603      	mov	r3, r0
 8017294:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8017296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d109      	bne.n	80172b2 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 801729e:	89bb      	ldrh	r3, [r7, #12]
 80172a0:	4619      	mov	r1, r3
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7ff ff10 	bl	80170c8 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 80172a8:	6838      	ldr	r0, [r7, #0]
 80172aa:	f008 f871 	bl	801f390 <tcp_output>
 80172ae:	e000      	b.n	80172b2 <mqtt_output_send+0x156>
    return;
 80172b0:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 80172b2:	3714      	adds	r7, #20
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd90      	pop	{r4, r7, pc}
 80172b8:	08025e60 	.word	0x08025e60
 80172bc:	08025f2c 	.word	0x08025f2c
 80172c0:	08025f04 	.word	0x08025f04

080172c4 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b086      	sub	sp, #24
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	60b9      	str	r1, [r7, #8]
 80172ce:	603b      	str	r3, [r7, #0]
 80172d0:	4613      	mov	r3, r2
 80172d2:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 80172d4:	2300      	movs	r3, #0
 80172d6:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d106      	bne.n	80172ec <mqtt_create_request+0x28>
 80172de:	4b19      	ldr	r3, [pc, #100]	@ (8017344 <mqtt_create_request+0x80>)
 80172e0:	f240 1223 	movw	r2, #291	@ 0x123
 80172e4:	4918      	ldr	r1, [pc, #96]	@ (8017348 <mqtt_create_request+0x84>)
 80172e6:	4819      	ldr	r0, [pc, #100]	@ (801734c <mqtt_create_request+0x88>)
 80172e8:	f00a fd60 	bl	8021dac <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80172ec:	2300      	movs	r3, #0
 80172ee:	74fb      	strb	r3, [r7, #19]
 80172f0:	e01f      	b.n	8017332 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80172f2:	7cfb      	ldrb	r3, [r7, #19]
 80172f4:	011b      	lsls	r3, r3, #4
 80172f6:	68fa      	ldr	r2, [r7, #12]
 80172f8:	4413      	add	r3, r2
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	7cfb      	ldrb	r3, [r7, #19]
 80172fe:	011b      	lsls	r3, r3, #4
 8017300:	68f9      	ldr	r1, [r7, #12]
 8017302:	440b      	add	r3, r1
 8017304:	429a      	cmp	r2, r3
 8017306:	d111      	bne.n	801732c <mqtt_create_request+0x68>
      r = &r_objs[n];
 8017308:	7cfb      	ldrb	r3, [r7, #19]
 801730a:	011b      	lsls	r3, r3, #4
 801730c:	68fa      	ldr	r2, [r7, #12]
 801730e:	4413      	add	r3, r2
 8017310:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	2200      	movs	r2, #0
 8017316:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	683a      	ldr	r2, [r7, #0]
 801731c:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	6a3a      	ldr	r2, [r7, #32]
 8017322:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	88fa      	ldrh	r2, [r7, #6]
 8017328:	819a      	strh	r2, [r3, #12]
      break;
 801732a:	e006      	b.n	801733a <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 801732c:	7cfb      	ldrb	r3, [r7, #19]
 801732e:	3301      	adds	r3, #1
 8017330:	74fb      	strb	r3, [r7, #19]
 8017332:	7cfb      	ldrb	r3, [r7, #19]
 8017334:	68ba      	ldr	r2, [r7, #8]
 8017336:	429a      	cmp	r2, r3
 8017338:	d8db      	bhi.n	80172f2 <mqtt_create_request+0x2e>
    }
  }
  return r;
 801733a:	697b      	ldr	r3, [r7, #20]
}
 801733c:	4618      	mov	r0, r3
 801733e:	3718      	adds	r7, #24
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}
 8017344:	08025e60 	.word	0x08025e60
 8017348:	08025f4c 	.word	0x08025f4c
 801734c:	08025f04 	.word	0x08025f04

08017350 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b086      	sub	sp, #24
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 801735a:	2300      	movs	r3, #0
 801735c:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 801735e:	2300      	movs	r3, #0
 8017360:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d106      	bne.n	8017376 <mqtt_append_request+0x26>
 8017368:	4b1b      	ldr	r3, [pc, #108]	@ (80173d8 <mqtt_append_request+0x88>)
 801736a:	f240 123f 	movw	r2, #319	@ 0x13f
 801736e:	491b      	ldr	r1, [pc, #108]	@ (80173dc <mqtt_append_request+0x8c>)
 8017370:	481b      	ldr	r0, [pc, #108]	@ (80173e0 <mqtt_append_request+0x90>)
 8017372:	f00a fd1b 	bl	8021dac <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	60fb      	str	r3, [r7, #12]
 801737c:	e00a      	b.n	8017394 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	89da      	ldrh	r2, [r3, #14]
 8017382:	8a7b      	ldrh	r3, [r7, #18]
 8017384:	4413      	add	r3, r2
 8017386:	b29b      	uxth	r3, r3
 8017388:	827b      	strh	r3, [r7, #18]
    head = iter;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	60fb      	str	r3, [r7, #12]
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d1f1      	bne.n	801737e <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 801739a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801739e:	2b0a      	cmp	r3, #10
 80173a0:	dd06      	ble.n	80173b0 <mqtt_append_request+0x60>
 80173a2:	4b0d      	ldr	r3, [pc, #52]	@ (80173d8 <mqtt_append_request+0x88>)
 80173a4:	f240 1247 	movw	r2, #327	@ 0x147
 80173a8:	490e      	ldr	r1, [pc, #56]	@ (80173e4 <mqtt_append_request+0x94>)
 80173aa:	480d      	ldr	r0, [pc, #52]	@ (80173e0 <mqtt_append_request+0x90>)
 80173ac:	f00a fcfe 	bl	8021dac <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 80173b0:	8a7b      	ldrh	r3, [r7, #18]
 80173b2:	f1c3 030a 	rsb	r3, r3, #10
 80173b6:	b29a      	uxth	r2, r3
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d103      	bne.n	80173ca <mqtt_append_request+0x7a>
    *tail = r;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	683a      	ldr	r2, [r7, #0]
 80173c6:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 80173c8:	e002      	b.n	80173d0 <mqtt_append_request+0x80>
    head->next = r;
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	683a      	ldr	r2, [r7, #0]
 80173ce:	601a      	str	r2, [r3, #0]
}
 80173d0:	bf00      	nop
 80173d2:	3718      	adds	r7, #24
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	08025e60 	.word	0x08025e60
 80173dc:	08025f70 	.word	0x08025f70
 80173e0:	08025f04 	.word	0x08025f04
 80173e4:	08025f94 	.word	0x08025f94

080173e8 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80173e8:	b480      	push	{r7}
 80173ea:	b083      	sub	sp, #12
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d002      	beq.n	80173fc <mqtt_delete_request+0x14>
    r->next = r;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	687a      	ldr	r2, [r7, #4]
 80173fa:	601a      	str	r2, [r3, #0]
  }
}
 80173fc:	bf00      	nop
 80173fe:	370c      	adds	r7, #12
 8017400:	46bd      	mov	sp, r7
 8017402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017406:	4770      	bx	lr

08017408 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b084      	sub	sp, #16
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	460b      	mov	r3, r1
 8017412:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8017414:	2300      	movs	r3, #0
 8017416:	60fb      	str	r3, [r7, #12]
 8017418:	2300      	movs	r3, #0
 801741a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d106      	bne.n	8017430 <mqtt_take_request+0x28>
 8017422:	4b1f      	ldr	r3, [pc, #124]	@ (80174a0 <mqtt_take_request+0x98>)
 8017424:	f240 1267 	movw	r2, #359	@ 0x167
 8017428:	491e      	ldr	r1, [pc, #120]	@ (80174a4 <mqtt_take_request+0x9c>)
 801742a:	481f      	ldr	r0, [pc, #124]	@ (80174a8 <mqtt_take_request+0xa0>)
 801742c:	f00a fcbe 	bl	8021dac <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	60fb      	str	r3, [r7, #12]
 8017436:	e009      	b.n	801744c <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	899b      	ldrh	r3, [r3, #12]
 801743c:	887a      	ldrh	r2, [r7, #2]
 801743e:	429a      	cmp	r2, r3
 8017440:	d008      	beq.n	8017454 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	60fb      	str	r3, [r7, #12]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d1f2      	bne.n	8017438 <mqtt_take_request+0x30>
 8017452:	e000      	b.n	8017456 <mqtt_take_request+0x4e>
      break;
 8017454:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d01c      	beq.n	8017496 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d104      	bne.n	801746c <mqtt_take_request+0x64>
      *tail = iter->next;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	601a      	str	r2, [r3, #0]
 801746a:	e003      	b.n	8017474 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	681a      	ldr	r2, [r3, #0]
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d009      	beq.n	8017490 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	89d9      	ldrh	r1, [r3, #14]
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	89da      	ldrh	r2, [r3, #14]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	440a      	add	r2, r1
 801748c:	b292      	uxth	r2, r2
 801748e:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	2200      	movs	r2, #0
 8017494:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8017496:	68fb      	ldr	r3, [r7, #12]
}
 8017498:	4618      	mov	r0, r3
 801749a:	3710      	adds	r7, #16
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	08025e60 	.word	0x08025e60
 80174a4:	08025fcc 	.word	0x08025fcc
 80174a8:	08025f04 	.word	0x08025f04

080174ac <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b084      	sub	sp, #16
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	460b      	mov	r3, r1
 80174b6:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d106      	bne.n	80174cc <mqtt_request_time_elapsed+0x20>
 80174be:	4b21      	ldr	r3, [pc, #132]	@ (8017544 <mqtt_request_time_elapsed+0x98>)
 80174c0:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 80174c4:	4920      	ldr	r1, [pc, #128]	@ (8017548 <mqtt_request_time_elapsed+0x9c>)
 80174c6:	4821      	ldr	r0, [pc, #132]	@ (801754c <mqtt_request_time_elapsed+0xa0>)
 80174c8:	f00a fc70 	bl	8021dac <iprintf>
  r = *tail;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 80174d2:	e02c      	b.n	801752e <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 80174d4:	78fb      	ldrb	r3, [r7, #3]
 80174d6:	b29a      	uxth	r2, r3
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	89db      	ldrh	r3, [r3, #14]
 80174dc:	429a      	cmp	r2, r3
 80174de:	d31c      	bcc.n	801751a <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	89db      	ldrh	r3, [r3, #14]
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	78fa      	ldrb	r2, [r7, #3]
 80174e8:	1ad3      	subs	r3, r2, r3
 80174ea:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	681a      	ldr	r2, [r3, #0]
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	685b      	ldr	r3, [r3, #4]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d007      	beq.n	801750c <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	68fa      	ldr	r2, [r7, #12]
 8017502:	6892      	ldr	r2, [r2, #8]
 8017504:	f06f 0102 	mvn.w	r1, #2
 8017508:	4610      	mov	r0, r2
 801750a:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 801750c:	68f8      	ldr	r0, [r7, #12]
 801750e:	f7ff ff6b 	bl	80173e8 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	60fb      	str	r3, [r7, #12]
 8017518:	e009      	b.n	801752e <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	89da      	ldrh	r2, [r3, #14]
 801751e:	78fb      	ldrb	r3, [r7, #3]
 8017520:	b29b      	uxth	r3, r3
 8017522:	1ad3      	subs	r3, r2, r3
 8017524:	b29a      	uxth	r2, r3
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	81da      	strh	r2, [r3, #14]
      t = 0;
 801752a:	2300      	movs	r3, #0
 801752c:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 801752e:	78fb      	ldrb	r3, [r7, #3]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d002      	beq.n	801753a <mqtt_request_time_elapsed+0x8e>
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d1cc      	bne.n	80174d4 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 801753a:	bf00      	nop
 801753c:	3710      	adds	r7, #16
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
 8017542:	bf00      	nop
 8017544:	08025e60 	.word	0x08025e60
 8017548:	08025fec 	.word	0x08025fec
 801754c:	08025f04 	.word	0x08025f04

08017550 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b084      	sub	sp, #16
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d106      	bne.n	801756c <mqtt_clear_requests+0x1c>
 801755e:	4b0e      	ldr	r3, [pc, #56]	@ (8017598 <mqtt_clear_requests+0x48>)
 8017560:	f240 12a7 	movw	r2, #423	@ 0x1a7
 8017564:	490d      	ldr	r1, [pc, #52]	@ (801759c <mqtt_clear_requests+0x4c>)
 8017566:	480e      	ldr	r0, [pc, #56]	@ (80175a0 <mqtt_clear_requests+0x50>)
 8017568:	f00a fc20 	bl	8021dac <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	60fb      	str	r3, [r7, #12]
 8017572:	e007      	b.n	8017584 <mqtt_clear_requests+0x34>
    next = iter->next;
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 801757a:	68f8      	ldr	r0, [r7, #12]
 801757c:	f7ff ff34 	bl	80173e8 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	60fb      	str	r3, [r7, #12]
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d1f4      	bne.n	8017574 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2200      	movs	r2, #0
 801758e:	601a      	str	r2, [r3, #0]
}
 8017590:	bf00      	nop
 8017592:	3710      	adds	r7, #16
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}
 8017598:	08025e60 	.word	0x08025e60
 801759c:	08026014 	.word	0x08026014
 80175a0:	08025f04 	.word	0x08025f04

080175a4 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
 80175ac:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d106      	bne.n	80175c2 <mqtt_init_requests+0x1e>
 80175b4:	4b0f      	ldr	r3, [pc, #60]	@ (80175f4 <mqtt_init_requests+0x50>)
 80175b6:	f240 12b7 	movw	r2, #439	@ 0x1b7
 80175ba:	490f      	ldr	r1, [pc, #60]	@ (80175f8 <mqtt_init_requests+0x54>)
 80175bc:	480f      	ldr	r0, [pc, #60]	@ (80175fc <mqtt_init_requests+0x58>)
 80175be:	f00a fbf5 	bl	8021dac <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80175c2:	2300      	movs	r3, #0
 80175c4:	73fb      	strb	r3, [r7, #15]
 80175c6:	e00b      	b.n	80175e0 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 80175c8:	7bfb      	ldrb	r3, [r7, #15]
 80175ca:	011a      	lsls	r2, r3, #4
 80175cc:	7bfb      	ldrb	r3, [r7, #15]
 80175ce:	011b      	lsls	r3, r3, #4
 80175d0:	6879      	ldr	r1, [r7, #4]
 80175d2:	440b      	add	r3, r1
 80175d4:	6879      	ldr	r1, [r7, #4]
 80175d6:	440a      	add	r2, r1
 80175d8:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 80175da:	7bfb      	ldrb	r3, [r7, #15]
 80175dc:	3301      	adds	r3, #1
 80175de:	73fb      	strb	r3, [r7, #15]
 80175e0:	7bfb      	ldrb	r3, [r7, #15]
 80175e2:	683a      	ldr	r2, [r7, #0]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	d8ef      	bhi.n	80175c8 <mqtt_init_requests+0x24>
  }
}
 80175e8:	bf00      	nop
 80175ea:	bf00      	nop
 80175ec:	3710      	adds	r7, #16
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd80      	pop	{r7, pc}
 80175f2:	bf00      	nop
 80175f4:	08025e60 	.word	0x08025e60
 80175f8:	08026038 	.word	0x08026038
 80175fc:	08025f04 	.word	0x08025f04

08017600 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b082      	sub	sp, #8
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
 8017608:	460b      	mov	r3, r1
 801760a:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 801760c:	78fb      	ldrb	r3, [r7, #3]
 801760e:	4619      	mov	r1, r3
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f7ff fd27 	bl	8017064 <mqtt_ringbuf_put>
}
 8017616:	bf00      	nop
 8017618:	3708      	adds	r7, #8
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}

0801761e <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 801761e:	b580      	push	{r7, lr}
 8017620:	b082      	sub	sp, #8
 8017622:	af00      	add	r7, sp, #0
 8017624:	6078      	str	r0, [r7, #4]
 8017626:	460b      	mov	r3, r1
 8017628:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 801762a:	887b      	ldrh	r3, [r7, #2]
 801762c:	0a1b      	lsrs	r3, r3, #8
 801762e:	b29b      	uxth	r3, r3
 8017630:	b2db      	uxtb	r3, r3
 8017632:	4619      	mov	r1, r3
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f7ff fd15 	bl	8017064 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 801763a:	887b      	ldrh	r3, [r7, #2]
 801763c:	b2db      	uxtb	r3, r3
 801763e:	4619      	mov	r1, r3
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f7ff fd0f 	bl	8017064 <mqtt_ringbuf_put>
}
 8017646:	bf00      	nop
 8017648:	3708      	adds	r7, #8
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}

0801764e <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 801764e:	b580      	push	{r7, lr}
 8017650:	b086      	sub	sp, #24
 8017652:	af00      	add	r7, sp, #0
 8017654:	60f8      	str	r0, [r7, #12]
 8017656:	60b9      	str	r1, [r7, #8]
 8017658:	4613      	mov	r3, r2
 801765a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 801765c:	2300      	movs	r3, #0
 801765e:	82fb      	strh	r3, [r7, #22]
 8017660:	e00a      	b.n	8017678 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8017662:	8afb      	ldrh	r3, [r7, #22]
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	4413      	add	r3, r2
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	4619      	mov	r1, r3
 801766c:	68f8      	ldr	r0, [r7, #12]
 801766e:	f7ff fcf9 	bl	8017064 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8017672:	8afb      	ldrh	r3, [r7, #22]
 8017674:	3301      	adds	r3, #1
 8017676:	82fb      	strh	r3, [r7, #22]
 8017678:	8afa      	ldrh	r2, [r7, #22]
 801767a:	88fb      	ldrh	r3, [r7, #6]
 801767c:	429a      	cmp	r2, r3
 801767e:	d3f0      	bcc.n	8017662 <mqtt_output_append_buf+0x14>
  }
}
 8017680:	bf00      	nop
 8017682:	bf00      	nop
 8017684:	3718      	adds	r7, #24
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}

0801768a <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 801768a:	b580      	push	{r7, lr}
 801768c:	b086      	sub	sp, #24
 801768e:	af00      	add	r7, sp, #0
 8017690:	60f8      	str	r0, [r7, #12]
 8017692:	60b9      	str	r1, [r7, #8]
 8017694:	4613      	mov	r3, r2
 8017696:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8017698:	88fb      	ldrh	r3, [r7, #6]
 801769a:	0a1b      	lsrs	r3, r3, #8
 801769c:	b29b      	uxth	r3, r3
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	4619      	mov	r1, r3
 80176a2:	68f8      	ldr	r0, [r7, #12]
 80176a4:	f7ff fcde 	bl	8017064 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 80176a8:	88fb      	ldrh	r3, [r7, #6]
 80176aa:	b2db      	uxtb	r3, r3
 80176ac:	4619      	mov	r1, r3
 80176ae:	68f8      	ldr	r0, [r7, #12]
 80176b0:	f7ff fcd8 	bl	8017064 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80176b4:	2300      	movs	r3, #0
 80176b6:	82fb      	strh	r3, [r7, #22]
 80176b8:	e00a      	b.n	80176d0 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 80176ba:	8afb      	ldrh	r3, [r7, #22]
 80176bc:	68ba      	ldr	r2, [r7, #8]
 80176be:	4413      	add	r3, r2
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	4619      	mov	r1, r3
 80176c4:	68f8      	ldr	r0, [r7, #12]
 80176c6:	f7ff fccd 	bl	8017064 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80176ca:	8afb      	ldrh	r3, [r7, #22]
 80176cc:	3301      	adds	r3, #1
 80176ce:	82fb      	strh	r3, [r7, #22]
 80176d0:	8afa      	ldrh	r2, [r7, #22]
 80176d2:	88fb      	ldrh	r3, [r7, #6]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d3f0      	bcc.n	80176ba <mqtt_output_append_string+0x30>
  }
}
 80176d8:	bf00      	nop
 80176da:	bf00      	nop
 80176dc:	3718      	adds	r7, #24
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80176e2:	b580      	push	{r7, lr}
 80176e4:	b082      	sub	sp, #8
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	6078      	str	r0, [r7, #4]
 80176ea:	4608      	mov	r0, r1
 80176ec:	4611      	mov	r1, r2
 80176ee:	461a      	mov	r2, r3
 80176f0:	4603      	mov	r3, r0
 80176f2:	70fb      	strb	r3, [r7, #3]
 80176f4:	460b      	mov	r3, r1
 80176f6:	70bb      	strb	r3, [r7, #2]
 80176f8:	4613      	mov	r3, r2
 80176fa:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 80176fc:	78fb      	ldrb	r3, [r7, #3]
 80176fe:	011b      	lsls	r3, r3, #4
 8017700:	b25a      	sxtb	r2, r3
 8017702:	78bb      	ldrb	r3, [r7, #2]
 8017704:	00db      	lsls	r3, r3, #3
 8017706:	b25b      	sxtb	r3, r3
 8017708:	f003 0308 	and.w	r3, r3, #8
 801770c:	b25b      	sxtb	r3, r3
 801770e:	4313      	orrs	r3, r2
 8017710:	b25a      	sxtb	r2, r3
 8017712:	787b      	ldrb	r3, [r7, #1]
 8017714:	005b      	lsls	r3, r3, #1
 8017716:	b25b      	sxtb	r3, r3
 8017718:	f003 0306 	and.w	r3, r3, #6
 801771c:	b25b      	sxtb	r3, r3
 801771e:	4313      	orrs	r3, r2
 8017720:	b25a      	sxtb	r2, r3
 8017722:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8017726:	f003 0301 	and.w	r3, r3, #1
 801772a:	b25b      	sxtb	r3, r3
 801772c:	4313      	orrs	r3, r2
 801772e:	b25b      	sxtb	r3, r3
 8017730:	b2db      	uxtb	r3, r3
 8017732:	4619      	mov	r1, r3
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f7ff ff63 	bl	8017600 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 801773a:	8abb      	ldrh	r3, [r7, #20]
 801773c:	b25b      	sxtb	r3, r3
 801773e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017742:	b25b      	sxtb	r3, r3
 8017744:	8aba      	ldrh	r2, [r7, #20]
 8017746:	2a7f      	cmp	r2, #127	@ 0x7f
 8017748:	d902      	bls.n	8017750 <mqtt_output_append_fixed_header+0x6e>
 801774a:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 801774e:	e000      	b.n	8017752 <mqtt_output_append_fixed_header+0x70>
 8017750:	2200      	movs	r2, #0
 8017752:	4313      	orrs	r3, r2
 8017754:	b25b      	sxtb	r3, r3
 8017756:	b2db      	uxtb	r3, r3
 8017758:	4619      	mov	r1, r3
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f7ff ff50 	bl	8017600 <mqtt_output_append_u8>
    r_length >>= 7;
 8017760:	8abb      	ldrh	r3, [r7, #20]
 8017762:	09db      	lsrs	r3, r3, #7
 8017764:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8017766:	8abb      	ldrh	r3, [r7, #20]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d1e6      	bne.n	801773a <mqtt_output_append_fixed_header+0x58>
}
 801776c:	bf00      	nop
 801776e:	bf00      	nop
 8017770:	3708      	adds	r7, #8
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
	...

08017778 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8017778:	b590      	push	{r4, r7, lr}
 801777a:	b085      	sub	sp, #20
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
 8017780:	460b      	mov	r3, r1
 8017782:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8017784:	887b      	ldrh	r3, [r7, #2]
 8017786:	3301      	adds	r3, #1
 8017788:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d106      	bne.n	801779e <mqtt_output_check_space+0x26>
 8017790:	4b0f      	ldr	r3, [pc, #60]	@ (80177d0 <mqtt_output_check_space+0x58>)
 8017792:	f240 2207 	movw	r2, #519	@ 0x207
 8017796:	490f      	ldr	r1, [pc, #60]	@ (80177d4 <mqtt_output_check_space+0x5c>)
 8017798:	480f      	ldr	r0, [pc, #60]	@ (80177d8 <mqtt_output_check_space+0x60>)
 801779a:	f00a fb07 	bl	8021dac <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 801779e:	89fb      	ldrh	r3, [r7, #14]
 80177a0:	3301      	adds	r3, #1
 80177a2:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80177a4:	887b      	ldrh	r3, [r7, #2]
 80177a6:	09db      	lsrs	r3, r3, #7
 80177a8:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 80177aa:	887b      	ldrh	r3, [r7, #2]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d1f6      	bne.n	801779e <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 80177b0:	89fc      	ldrh	r4, [r7, #14]
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f7ff fcb6 	bl	8017124 <mqtt_ringbuf_len>
 80177b8:	4603      	mov	r3, r0
 80177ba:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80177be:	429c      	cmp	r4, r3
 80177c0:	bfd4      	ite	le
 80177c2:	2301      	movle	r3, #1
 80177c4:	2300      	movgt	r3, #0
 80177c6:	b2db      	uxtb	r3, r3
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3714      	adds	r7, #20
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd90      	pop	{r4, r7, pc}
 80177d0:	08025e60 	.word	0x08025e60
 80177d4:	0802605c 	.word	0x0802605c
 80177d8:	08025f04 	.word	0x08025f04

080177dc <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	460b      	mov	r3, r1
 80177e6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d106      	bne.n	80177fc <mqtt_close+0x20>
 80177ee:	4b27      	ldr	r3, [pc, #156]	@ (801788c <mqtt_close+0xb0>)
 80177f0:	f240 221b 	movw	r2, #539	@ 0x21b
 80177f4:	4926      	ldr	r1, [pc, #152]	@ (8017890 <mqtt_close+0xb4>)
 80177f6:	4827      	ldr	r0, [pc, #156]	@ (8017894 <mqtt_close+0xb8>)
 80177f8:	f00a fad8 	bl	8021dac <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d024      	beq.n	801784e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	68db      	ldr	r3, [r3, #12]
 8017808:	2100      	movs	r1, #0
 801780a:	4618      	mov	r0, r3
 801780c:	f004 f8b8 	bl	801b980 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	68db      	ldr	r3, [r3, #12]
 8017814:	2100      	movs	r1, #0
 8017816:	4618      	mov	r0, r3
 8017818:	f004 f8fa 	bl	801ba10 <tcp_err>
    altcp_sent(client->conn, NULL);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	2100      	movs	r1, #0
 8017822:	4618      	mov	r0, r3
 8017824:	f004 f8d0 	bl	801b9c8 <tcp_sent>
    res = altcp_close(client->conn);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	4618      	mov	r0, r3
 801782e:	f002 fec1 	bl	801a5b4 <tcp_close>
 8017832:	4603      	mov	r3, r0
 8017834:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8017836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d004      	beq.n	8017848 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	68db      	ldr	r3, [r3, #12]
 8017842:	4618      	mov	r0, r3
 8017844:	f002 ffa4 	bl	801a790 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2200      	movs	r2, #0
 801784c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	3318      	adds	r3, #24
 8017852:	4618      	mov	r0, r3
 8017854:	f7ff fe7c 	bl	8017550 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8017858:	6879      	ldr	r1, [r7, #4]
 801785a:	480f      	ldr	r0, [pc, #60]	@ (8017898 <mqtt_close+0xbc>)
 801785c:	f008 ffcc 	bl	80207f8 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	7a9b      	ldrb	r3, [r3, #10]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d00d      	beq.n	8017884 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2200      	movs	r2, #0
 801786c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	695b      	ldr	r3, [r3, #20]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d006      	beq.n	8017884 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	695b      	ldr	r3, [r3, #20]
 801787a:	687a      	ldr	r2, [r7, #4]
 801787c:	6911      	ldr	r1, [r2, #16]
 801787e:	887a      	ldrh	r2, [r7, #2]
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	4798      	blx	r3
    }
  }
}
 8017884:	bf00      	nop
 8017886:	3710      	adds	r7, #16
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}
 801788c:	08025e60 	.word	0x08025e60
 8017890:	08026080 	.word	0x08026080
 8017894:	08025f04 	.word	0x08025f04
 8017898:	0801789d 	.word	0x0801789d

0801789c <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b086      	sub	sp, #24
 80178a0:	af02      	add	r7, sp, #8
 80178a2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80178a4:	2301      	movs	r3, #1
 80178a6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d106      	bne.n	80178c0 <mqtt_cyclic_timer+0x24>
 80178b2:	4b3e      	ldr	r3, [pc, #248]	@ (80179ac <mqtt_cyclic_timer+0x110>)
 80178b4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80178b8:	493d      	ldr	r1, [pc, #244]	@ (80179b0 <mqtt_cyclic_timer+0x114>)
 80178ba:	483e      	ldr	r0, [pc, #248]	@ (80179b4 <mqtt_cyclic_timer+0x118>)
 80178bc:	f00a fa76 	bl	8021dac <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	7a9b      	ldrb	r3, [r3, #10]
 80178c4:	2b02      	cmp	r3, #2
 80178c6:	d112      	bne.n	80178ee <mqtt_cyclic_timer+0x52>
    client->cyclic_tick++;
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	881b      	ldrh	r3, [r3, #0]
 80178cc:	3301      	adds	r3, #1
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	881b      	ldrh	r3, [r3, #0]
 80178d8:	005b      	lsls	r3, r3, #1
 80178da:	2b09      	cmp	r3, #9
 80178dc:	dd59      	ble.n	8017992 <mqtt_cyclic_timer+0xf6>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80178de:	f240 1101 	movw	r1, #257	@ 0x101
 80178e2:	68b8      	ldr	r0, [r7, #8]
 80178e4:	f7ff ff7a 	bl	80177dc <mqtt_close>
      restart_timer = 0;
 80178e8:	2300      	movs	r3, #0
 80178ea:	73fb      	strb	r3, [r7, #15]
 80178ec:	e051      	b.n	8017992 <mqtt_cyclic_timer+0xf6>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	7a9b      	ldrb	r3, [r3, #10]
 80178f2:	2b03      	cmp	r3, #3
 80178f4:	d14b      	bne.n	801798e <mqtt_cyclic_timer+0xf2>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 80178f6:	68bb      	ldr	r3, [r7, #8]
 80178f8:	3318      	adds	r3, #24
 80178fa:	2102      	movs	r1, #2
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7ff fdd5 	bl	80174ac <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8017902:	68bb      	ldr	r3, [r7, #8]
 8017904:	885b      	ldrh	r3, [r3, #2]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d043      	beq.n	8017992 <mqtt_cyclic_timer+0xf6>

      client->server_watchdog++;
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	889b      	ldrh	r3, [r3, #4]
 801790e:	3301      	adds	r3, #1
 8017910:	b29a      	uxth	r2, r3
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	889b      	ldrh	r3, [r3, #4]
 801791a:	005a      	lsls	r2, r3, #1
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	885b      	ldrh	r3, [r3, #2]
 8017920:	4619      	mov	r1, r3
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	885b      	ldrh	r3, [r3, #2]
 8017926:	085b      	lsrs	r3, r3, #1
 8017928:	b29b      	uxth	r3, r3
 801792a:	440b      	add	r3, r1
 801792c:	429a      	cmp	r2, r3
 801792e:	dd06      	ble.n	801793e <mqtt_cyclic_timer+0xa2>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8017930:	f240 1101 	movw	r1, #257	@ 0x101
 8017934:	68b8      	ldr	r0, [r7, #8]
 8017936:	f7ff ff51 	bl	80177dc <mqtt_close>
        restart_timer = 0;
 801793a:	2300      	movs	r3, #0
 801793c:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	881b      	ldrh	r3, [r3, #0]
 8017942:	005b      	lsls	r3, r3, #1
 8017944:	68ba      	ldr	r2, [r7, #8]
 8017946:	8852      	ldrh	r2, [r2, #2]
 8017948:	4293      	cmp	r3, r2
 801794a:	db19      	blt.n	8017980 <mqtt_cyclic_timer+0xe4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8017952:	2100      	movs	r1, #0
 8017954:	4618      	mov	r0, r3
 8017956:	f7ff ff0f 	bl	8017778 <mqtt_output_check_space>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d018      	beq.n	8017992 <mqtt_cyclic_timer+0xf6>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8017960:	68bb      	ldr	r3, [r7, #8]
 8017962:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 8017966:	2300      	movs	r3, #0
 8017968:	9301      	str	r3, [sp, #4]
 801796a:	2300      	movs	r3, #0
 801796c:	9300      	str	r3, [sp, #0]
 801796e:	2300      	movs	r3, #0
 8017970:	2200      	movs	r2, #0
 8017972:	210c      	movs	r1, #12
 8017974:	f7ff feb5 	bl	80176e2 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	2200      	movs	r2, #0
 801797c:	801a      	strh	r2, [r3, #0]
 801797e:	e008      	b.n	8017992 <mqtt_cyclic_timer+0xf6>
        }
      } else {
        client->cyclic_tick++;
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	881b      	ldrh	r3, [r3, #0]
 8017984:	3301      	adds	r3, #1
 8017986:	b29a      	uxth	r2, r3
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	801a      	strh	r2, [r3, #0]
 801798c:	e001      	b.n	8017992 <mqtt_cyclic_timer+0xf6>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8017992:	7bfb      	ldrb	r3, [r7, #15]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d005      	beq.n	80179a4 <mqtt_cyclic_timer+0x108>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8017998:	687a      	ldr	r2, [r7, #4]
 801799a:	4907      	ldr	r1, [pc, #28]	@ (80179b8 <mqtt_cyclic_timer+0x11c>)
 801799c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80179a0:	f008 ff02 	bl	80207a8 <sys_timeout>
  }
}
 80179a4:	bf00      	nop
 80179a6:	3710      	adds	r7, #16
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	08025e60 	.word	0x08025e60
 80179b0:	0802609c 	.word	0x0802609c
 80179b4:	08025f04 	.word	0x08025f04
 80179b8:	0801789d 	.word	0x0801789d

080179bc <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b086      	sub	sp, #24
 80179c0:	af02      	add	r7, sp, #8
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	4608      	mov	r0, r1
 80179c6:	4611      	mov	r1, r2
 80179c8:	461a      	mov	r2, r3
 80179ca:	4603      	mov	r3, r0
 80179cc:	70fb      	strb	r3, [r7, #3]
 80179ce:	460b      	mov	r3, r1
 80179d0:	803b      	strh	r3, [r7, #0]
 80179d2:	4613      	mov	r3, r2
 80179d4:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 80179d6:	2300      	movs	r3, #0
 80179d8:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80179e0:	2102      	movs	r1, #2
 80179e2:	4618      	mov	r0, r3
 80179e4:	f7ff fec8 	bl	8017778 <mqtt_output_check_space>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d01d      	beq.n	8017a2a <pub_ack_rec_rel_response+0x6e>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 80179f4:	78bb      	ldrb	r3, [r7, #2]
 80179f6:	78f9      	ldrb	r1, [r7, #3]
 80179f8:	2202      	movs	r2, #2
 80179fa:	9201      	str	r2, [sp, #4]
 80179fc:	2200      	movs	r2, #0
 80179fe:	9200      	str	r2, [sp, #0]
 8017a00:	2200      	movs	r2, #0
 8017a02:	f7ff fe6e 	bl	80176e2 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8017a0c:	883a      	ldrh	r2, [r7, #0]
 8017a0e:	4611      	mov	r1, r2
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7ff fe04 	bl	801761e <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	68db      	ldr	r3, [r3, #12]
 8017a20:	4619      	mov	r1, r3
 8017a22:	4610      	mov	r0, r2
 8017a24:	f7ff fb9a 	bl	801715c <mqtt_output_send>
 8017a28:	e001      	b.n	8017a2e <pub_ack_rec_rel_response+0x72>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8017a2a:	23ff      	movs	r3, #255	@ 0xff
 8017a2c:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8017a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3710      	adds	r7, #16
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}

08017a3a <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8017a3a:	b580      	push	{r7, lr}
 8017a3c:	b082      	sub	sp, #8
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	6078      	str	r0, [r7, #4]
 8017a42:	460b      	mov	r3, r1
 8017a44:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d00c      	beq.n	8017a68 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	6890      	ldr	r0, [r2, #8]
 8017a56:	78fa      	ldrb	r2, [r7, #3]
 8017a58:	2a02      	cmp	r2, #2
 8017a5a:	d801      	bhi.n	8017a60 <mqtt_incomming_suback+0x26>
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	e001      	b.n	8017a64 <mqtt_incomming_suback+0x2a>
 8017a60:	f06f 020c 	mvn.w	r2, #12
 8017a64:	4611      	mov	r1, r2
 8017a66:	4798      	blx	r3
  }
}
 8017a68:	bf00      	nop
 8017a6a:	3708      	adds	r7, #8
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}

08017a70 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8017a70:	b590      	push	{r4, r7, lr}
 8017a72:	b08f      	sub	sp, #60	@ 0x3c
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	60f8      	str	r0, [r7, #12]
 8017a78:	607b      	str	r3, [r7, #4]
 8017a7a:	460b      	mov	r3, r1
 8017a7c:	72fb      	strb	r3, [r7, #11]
 8017a7e:	4613      	mov	r3, r2
 8017a80:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8017a82:	2300      	movs	r3, #0
 8017a84:	86fb      	strh	r3, [r7, #54]	@ 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8017a8c:	7afb      	ldrb	r3, [r7, #11]
 8017a8e:	4413      	add	r3, r2
 8017a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 8017a92:	7afb      	ldrb	r3, [r7, #11]
 8017a94:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8017a98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	f893 32ac 	ldrb.w	r3, [r3, #684]	@ 0x2ac
 8017aa0:	091b      	lsrs	r3, r3, #4
 8017aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u16_t pkt_id = 0;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8017ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ab4:	d306      	bcc.n	8017ac4 <mqtt_message_received+0x54>
 8017ab6:	4b9f      	ldr	r3, [pc, #636]	@ (8017d34 <mqtt_message_received+0x2c4>)
 8017ab8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017abc:	499e      	ldr	r1, [pc, #632]	@ (8017d38 <mqtt_message_received+0x2c8>)
 8017abe:	489f      	ldr	r0, [pc, #636]	@ (8017d3c <mqtt_message_received+0x2cc>)
 8017ac0:	f00a f974 	bl	8021dac <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8017ac4:	7afa      	ldrb	r2, [r7, #11]
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d906      	bls.n	8017ade <mqtt_message_received+0x6e>
 8017ad0:	4b98      	ldr	r3, [pc, #608]	@ (8017d34 <mqtt_message_received+0x2c4>)
 8017ad2:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 8017ad6:	499a      	ldr	r1, [pc, #616]	@ (8017d40 <mqtt_message_received+0x2d0>)
 8017ad8:	4898      	ldr	r0, [pc, #608]	@ (8017d3c <mqtt_message_received+0x2cc>)
 8017ada:	f00a f967 	bl	8021dac <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8017ade:	7afa      	ldrb	r2, [r7, #11]
 8017ae0:	893b      	ldrh	r3, [r7, #8]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ae8:	dd09      	ble.n	8017afe <mqtt_message_received+0x8e>
 8017aea:	4b92      	ldr	r3, [pc, #584]	@ (8017d34 <mqtt_message_received+0x2c4>)
 8017aec:	f240 22ad 	movw	r2, #685	@ 0x2ad
 8017af0:	4994      	ldr	r1, [pc, #592]	@ (8017d44 <mqtt_message_received+0x2d4>)
 8017af2:	4892      	ldr	r0, [pc, #584]	@ (8017d3c <mqtt_message_received+0x2cc>)
 8017af4:	f00a f95a 	bl	8021dac <iprintf>
 8017af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017afc:	e172      	b.n	8017de4 <mqtt_message_received+0x374>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8017afe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b02:	2b02      	cmp	r3, #2
 8017b04:	d123      	bne.n	8017b4e <mqtt_message_received+0xde>
    if (client->conn_state == MQTT_CONNECTING) {
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	7a9b      	ldrb	r3, [r3, #10]
 8017b0a:	2b02      	cmp	r3, #2
 8017b0c:	f040 8155 	bne.w	8017dba <mqtt_message_received+0x34a>
      if (length < 2) {
 8017b10:	893b      	ldrh	r3, [r7, #8]
 8017b12:	2b01      	cmp	r3, #1
 8017b14:	f240 8153 	bls.w	8017dbe <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8017b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b1a:	3301      	adds	r3, #1
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8017b20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f040 8149 	bne.w	8017dba <mqtt_message_received+0x34a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	2203      	movs	r2, #3
 8017b32:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	695b      	ldr	r3, [r3, #20]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	f000 813e 	beq.w	8017dba <mqtt_message_received+0x34a>
          client->connect_cb(client, client->connect_arg, res);
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	695b      	ldr	r3, [r3, #20]
 8017b42:	68fa      	ldr	r2, [r7, #12]
 8017b44:	6911      	ldr	r1, [r2, #16]
 8017b46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017b48:	68f8      	ldr	r0, [r7, #12]
 8017b4a:	4798      	blx	r3
 8017b4c:	e135      	b.n	8017dba <mqtt_message_received+0x34a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8017b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b52:	2b0d      	cmp	r3, #13
 8017b54:	f000 8131 	beq.w	8017dba <mqtt_message_received+0x34a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8017b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b5c:	2b03      	cmp	r3, #3
 8017b5e:	f040 80c4 	bne.w	8017cea <mqtt_message_received+0x27a>
    u16_t payload_offset = 0;
 8017b62:	2300      	movs	r3, #0
 8017b64:	86bb      	strh	r3, [r7, #52]	@ 0x34
    u16_t payload_length = length;
 8017b66:	893b      	ldrh	r3, [r7, #8]
 8017b68:	867b      	strh	r3, [r7, #50]	@ 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	f893 32ac 	ldrb.w	r3, [r3, #684]	@ 0x2ac
 8017b70:	105b      	asrs	r3, r3, #1
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	f003 0303 	and.w	r3, r3, #3
 8017b78:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8017b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017b84:	d87d      	bhi.n	8017c82 <mqtt_message_received+0x212>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8017b86:	7ffb      	ldrb	r3, [r7, #31]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d001      	beq.n	8017b90 <mqtt_message_received+0x120>
 8017b8c:	2302      	movs	r3, #2
 8017b8e:	e000      	b.n	8017b92 <mqtt_message_received+0x122>
 8017b90:	2300      	movs	r3, #0
 8017b92:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8017b94:	8bbb      	ldrh	r3, [r7, #28]
 8017b96:	1c5a      	adds	r2, r3, #1
 8017b98:	893b      	ldrh	r3, [r7, #8]
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	f280 8111 	bge.w	8017dc2 <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8017ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8017ba6:	8b7b      	ldrh	r3, [r7, #26]
 8017ba8:	021b      	lsls	r3, r3, #8
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017bae:	3201      	adds	r2, #1
 8017bb0:	7812      	ldrb	r2, [r2, #0]
 8017bb2:	4413      	add	r3, r2
 8017bb4:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8017bb6:	8b7a      	ldrh	r2, [r7, #26]
 8017bb8:	8939      	ldrh	r1, [r7, #8]
 8017bba:	8bbb      	ldrh	r3, [r7, #28]
 8017bbc:	3302      	adds	r3, #2
 8017bbe:	1acb      	subs	r3, r1, r3
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	f300 8100 	bgt.w	8017dc6 <mqtt_message_received+0x356>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8017bc6:	8b7a      	ldrh	r2, [r7, #26]
 8017bc8:	8bbb      	ldrh	r3, [r7, #28]
 8017bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017bcc:	1acb      	subs	r3, r1, r3
 8017bce:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	f200 80f8 	bhi.w	8017dc6 <mqtt_message_received+0x356>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8017bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bd8:	3302      	adds	r3, #2
 8017bda:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 8017bdc:	8b7b      	ldrh	r3, [r7, #26]
 8017bde:	3302      	adds	r3, #2
 8017be0:	863b      	strh	r3, [r7, #48]	@ 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8017be2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017be4:	7ffa      	ldrb	r2, [r7, #31]
 8017be6:	2a00      	cmp	r2, #0
 8017be8:	d001      	beq.n	8017bee <mqtt_message_received+0x17e>
 8017bea:	2202      	movs	r2, #2
 8017bec:	e000      	b.n	8017bf0 <mqtt_message_received+0x180>
 8017bee:	2201      	movs	r2, #1
 8017bf0:	4413      	add	r3, r2
 8017bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	f0c0 80e8 	bcc.w	8017dca <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8017bfa:	7ffb      	ldrb	r3, [r7, #31]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d018      	beq.n	8017c32 <mqtt_message_received+0x1c2>
        if (length < after_topic + 2U) {
 8017c00:	893a      	ldrh	r2, [r7, #8]
 8017c02:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c04:	3302      	adds	r3, #2
 8017c06:	429a      	cmp	r2, r3
 8017c08:	f0c0 80e1 	bcc.w	8017dce <mqtt_message_received+0x35e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8017c0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017c10:	4413      	add	r3, r2
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	021b      	lsls	r3, r3, #8
 8017c16:	b29b      	uxth	r3, r3
 8017c18:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8017c1a:	3201      	adds	r2, #1
 8017c1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017c1e:	440a      	add	r2, r1
 8017c20:	7812      	ldrb	r2, [r2, #0]
 8017c22:	4413      	add	r3, r2
 8017c24:	b29a      	uxth	r2, r3
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8017c2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c2c:	3302      	adds	r3, #2
 8017c2e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017c30:	e002      	b.n	8017c38 <mqtt_message_received+0x1c8>
      } else {
        client->inpub_pkt_id = 0;
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	2200      	movs	r2, #0
 8017c36:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8017c38:	8b7b      	ldrh	r3, [r7, #26]
 8017c3a:	697a      	ldr	r2, [r7, #20]
 8017c3c:	4413      	add	r3, r2
 8017c3e:	781b      	ldrb	r3, [r3, #0]
 8017c40:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8017c42:	8b7b      	ldrh	r3, [r7, #26]
 8017c44:	697a      	ldr	r2, [r7, #20]
 8017c46:	4413      	add	r3, r2
 8017c48:	2200      	movs	r2, #0
 8017c4a:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8017c4c:	893a      	ldrh	r2, [r7, #8]
 8017c4e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c50:	1ad3      	subs	r3, r2, r3
 8017c52:	867b      	strh	r3, [r7, #50]	@ 0x32
      payload_offset = after_topic;
 8017c54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c56:	86bb      	strh	r3, [r7, #52]	@ 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d00a      	beq.n	8017c78 <mqtt_message_received+0x208>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017c68:	68fa      	ldr	r2, [r7, #12]
 8017c6a:	f8d2 029c 	ldr.w	r0, [r2, #668]	@ 0x29c
 8017c6e:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8017c70:	687a      	ldr	r2, [r7, #4]
 8017c72:	440a      	add	r2, r1
 8017c74:	6979      	ldr	r1, [r7, #20]
 8017c76:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8017c78:	8b7b      	ldrh	r3, [r7, #26]
 8017c7a:	697a      	ldr	r2, [r7, #20]
 8017c7c:	4413      	add	r3, r2
 8017c7e:	7cfa      	ldrb	r2, [r7, #19]
 8017c80:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8017c82:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d103      	bne.n	8017c90 <mqtt_message_received+0x220>
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	f040 8095 	bne.w	8017dba <mqtt_message_received+0x34a>
      if (length < (size_t)(payload_offset + payload_length)) {
 8017c90:	893b      	ldrh	r3, [r7, #8]
 8017c92:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8017c94:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8017c96:	440a      	add	r2, r1
 8017c98:	4293      	cmp	r3, r2
 8017c9a:	f0c0 809a 	bcc.w	8017dd2 <mqtt_message_received+0x362>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	f8d3 42a0 	ldr.w	r4, [r3, #672]	@ 0x2a0
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	f8d3 029c 	ldr.w	r0, [r3, #668]	@ 0x29c
 8017caa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017cae:	18d1      	adds	r1, r2, r3
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	bf0c      	ite	eq
 8017cb6:	2301      	moveq	r3, #1
 8017cb8:	2300      	movne	r3, #0
 8017cba:	b2db      	uxtb	r3, r3
 8017cbc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8017cbe:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d179      	bne.n	8017dba <mqtt_message_received+0x34a>
 8017cc6:	7ffb      	ldrb	r3, [r7, #31]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d076      	beq.n	8017dba <mqtt_message_received+0x34a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8017ccc:	7ffb      	ldrb	r3, [r7, #31]
 8017cce:	2b01      	cmp	r3, #1
 8017cd0:	d101      	bne.n	8017cd6 <mqtt_message_received+0x266>
 8017cd2:	2304      	movs	r3, #4
 8017cd4:	e000      	b.n	8017cd8 <mqtt_message_received+0x268>
 8017cd6:	2305      	movs	r3, #5
 8017cd8:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	891a      	ldrh	r2, [r3, #8]
 8017cde:	7cb9      	ldrb	r1, [r7, #18]
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	68f8      	ldr	r0, [r7, #12]
 8017ce4:	f7ff fe6a 	bl	80179bc <pub_ack_rec_rel_response>
 8017ce8:	e067      	b.n	8017dba <mqtt_message_received+0x34a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8017cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cec:	781b      	ldrb	r3, [r3, #0]
 8017cee:	021b      	lsls	r3, r3, #8
 8017cf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8017cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cf4:	3301      	adds	r3, #1
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017cfc:	4313      	orrs	r3, r2
 8017cfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (pkt_id == 0) {
 8017d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d067      	beq.n	8017dd6 <mqtt_message_received+0x366>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8017d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d0a:	2b05      	cmp	r3, #5
 8017d0c:	d106      	bne.n	8017d1c <mqtt_message_received+0x2ac>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8017d0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017d10:	2301      	movs	r3, #1
 8017d12:	2106      	movs	r1, #6
 8017d14:	68f8      	ldr	r0, [r7, #12]
 8017d16:	f7ff fe51 	bl	80179bc <pub_ack_rec_rel_response>
 8017d1a:	e04e      	b.n	8017dba <mqtt_message_received+0x34a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8017d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d20:	2b06      	cmp	r3, #6
 8017d22:	d111      	bne.n	8017d48 <mqtt_message_received+0x2d8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8017d24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017d26:	2300      	movs	r3, #0
 8017d28:	2107      	movs	r1, #7
 8017d2a:	68f8      	ldr	r0, [r7, #12]
 8017d2c:	f7ff fe46 	bl	80179bc <pub_ack_rec_rel_response>
 8017d30:	e043      	b.n	8017dba <mqtt_message_received+0x34a>
 8017d32:	bf00      	nop
 8017d34:	08025e60 	.word	0x08025e60
 8017d38:	080260c0 	.word	0x080260c0
 8017d3c:	08025f04 	.word	0x08025f04
 8017d40:	080260f0 	.word	0x080260f0
 8017d44:	08026114 	.word	0x08026114

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8017d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d4c:	2b09      	cmp	r3, #9
 8017d4e:	d00b      	beq.n	8017d68 <mqtt_message_received+0x2f8>
 8017d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d54:	2b0b      	cmp	r3, #11
 8017d56:	d007      	beq.n	8017d68 <mqtt_message_received+0x2f8>
 8017d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d5c:	2b07      	cmp	r3, #7
 8017d5e:	d003      	beq.n	8017d68 <mqtt_message_received+0x2f8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8017d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d64:	2b04      	cmp	r3, #4
 8017d66:	d138      	bne.n	8017dda <mqtt_message_received+0x36a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	3318      	adds	r3, #24
 8017d6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017d6e:	4611      	mov	r1, r2
 8017d70:	4618      	mov	r0, r3
 8017d72:	f7ff fb49 	bl	8017408 <mqtt_take_request>
 8017d76:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8017d78:	6a3b      	ldr	r3, [r7, #32]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d01c      	beq.n	8017db8 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8017d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d82:	2b09      	cmp	r3, #9
 8017d84:	d10a      	bne.n	8017d9c <mqtt_message_received+0x32c>
          if (length < 3) {
 8017d86:	893b      	ldrh	r3, [r7, #8]
 8017d88:	2b02      	cmp	r3, #2
 8017d8a:	d928      	bls.n	8017dde <mqtt_message_received+0x36e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8017d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d8e:	3302      	adds	r3, #2
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	4619      	mov	r1, r3
 8017d94:	6a38      	ldr	r0, [r7, #32]
 8017d96:	f7ff fe50 	bl	8017a3a <mqtt_incomming_suback>
 8017d9a:	e00a      	b.n	8017db2 <mqtt_message_received+0x342>
          }
        } else if (r->cb != NULL) {
 8017d9c:	6a3b      	ldr	r3, [r7, #32]
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d006      	beq.n	8017db2 <mqtt_message_received+0x342>
          r->cb(r->arg, ERR_OK);
 8017da4:	6a3b      	ldr	r3, [r7, #32]
 8017da6:	685b      	ldr	r3, [r3, #4]
 8017da8:	6a3a      	ldr	r2, [r7, #32]
 8017daa:	6892      	ldr	r2, [r2, #8]
 8017dac:	2100      	movs	r1, #0
 8017dae:	4610      	mov	r0, r2
 8017db0:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8017db2:	6a38      	ldr	r0, [r7, #32]
 8017db4:	f7ff fb18 	bl	80173e8 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8017db8:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8017dba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017dbc:	e012      	b.n	8017de4 <mqtt_message_received+0x374>
        goto out_disconnect;
 8017dbe:	bf00      	nop
 8017dc0:	e00e      	b.n	8017de0 <mqtt_message_received+0x370>
        goto out_disconnect;
 8017dc2:	bf00      	nop
 8017dc4:	e00c      	b.n	8017de0 <mqtt_message_received+0x370>
        goto out_disconnect;
 8017dc6:	bf00      	nop
 8017dc8:	e00a      	b.n	8017de0 <mqtt_message_received+0x370>
        goto out_disconnect;
 8017dca:	bf00      	nop
 8017dcc:	e008      	b.n	8017de0 <mqtt_message_received+0x370>
          goto out_disconnect;
 8017dce:	bf00      	nop
 8017dd0:	e006      	b.n	8017de0 <mqtt_message_received+0x370>
        goto out_disconnect;
 8017dd2:	bf00      	nop
 8017dd4:	e004      	b.n	8017de0 <mqtt_message_received+0x370>
      goto out_disconnect;
 8017dd6:	bf00      	nop
 8017dd8:	e002      	b.n	8017de0 <mqtt_message_received+0x370>
      goto out_disconnect;
 8017dda:	bf00      	nop
 8017ddc:	e000      	b.n	8017de0 <mqtt_message_received+0x370>
            goto out_disconnect;
 8017dde:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8017de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	373c      	adds	r7, #60	@ 0x3c
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bd90      	pop	{r4, r7, pc}

08017dec <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b088      	sub	sp, #32
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
 8017df4:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8017e02:	2300      	movs	r3, #0
 8017e04:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8017e06:	e0c8      	b.n	8017f9a <mqtt_parse_incoming+0x1ae>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8017e08:	7dfb      	ldrb	r3, [r7, #23]
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d903      	bls.n	8017e16 <mqtt_parse_incoming+0x2a>
 8017e0e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	da53      	bge.n	8017ebe <mqtt_parse_incoming+0xd2>

      if (fixed_hdr_idx < client->msg_idx) {
 8017e16:	7dfa      	ldrb	r2, [r7, #23]
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d206      	bcs.n	8017e30 <mqtt_parse_incoming+0x44>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8017e22:	7dfb      	ldrb	r3, [r7, #23]
 8017e24:	687a      	ldr	r2, [r7, #4]
 8017e26:	4413      	add	r3, r2
 8017e28:	f893 32ac 	ldrb.w	r3, [r3, #684]	@ 0x2ac
 8017e2c:	75bb      	strb	r3, [r7, #22]
 8017e2e:	e014      	b.n	8017e5a <mqtt_parse_incoming+0x6e>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8017e30:	8bfb      	ldrh	r3, [r7, #30]
 8017e32:	1c5a      	adds	r2, r3, #1
 8017e34:	83fa      	strh	r2, [r7, #30]
 8017e36:	4619      	mov	r1, r3
 8017e38:	6838      	ldr	r0, [r7, #0]
 8017e3a:	f002 f87f 	bl	8019f3c <pbuf_get_at>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8017e48:	1c59      	adds	r1, r3, #1
 8017e4a:	687a      	ldr	r2, [r7, #4]
 8017e4c:	f8c2 12a8 	str.w	r1, [r2, #680]	@ 0x2a8
 8017e50:	687a      	ldr	r2, [r7, #4]
 8017e52:	4413      	add	r3, r2
 8017e54:	7dba      	ldrb	r2, [r7, #22]
 8017e56:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac
      }
      fixed_hdr_idx++;
 8017e5a:	7dfb      	ldrb	r3, [r7, #23]
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8017e60:	7dfb      	ldrb	r3, [r7, #23]
 8017e62:	2b01      	cmp	r3, #1
 8017e64:	f240 8098 	bls.w	8017f98 <mqtt_parse_incoming+0x1ac>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8017e68:	7dbb      	ldrb	r3, [r7, #22]
 8017e6a:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8017e6e:	7dfb      	ldrb	r3, [r7, #23]
 8017e70:	1e9a      	subs	r2, r3, #2
 8017e72:	4613      	mov	r3, r2
 8017e74:	00db      	lsls	r3, r3, #3
 8017e76:	1a9b      	subs	r3, r3, r2
 8017e78:	fa01 f303 	lsl.w	r3, r1, r3
 8017e7c:	69ba      	ldr	r2, [r7, #24]
 8017e7e:	4313      	orrs	r3, r2
 8017e80:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8017e82:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	f2c0 8086 	blt.w	8017f98 <mqtt_parse_incoming+0x1ac>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d10c      	bne.n	8017eac <mqtt_parse_incoming+0xc0>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8017e92:	7df9      	ldrb	r1, [r7, #23]
 8017e94:	2300      	movs	r3, #0
 8017e96:	2200      	movs	r2, #0
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f7ff fde9 	bl	8017a70 <mqtt_message_received>
            client->msg_idx = 0;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
            fixed_hdr_idx = 0;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	75fb      	strb	r3, [r7, #23]
      if (fixed_hdr_idx >= 2) {
 8017eaa:	e075      	b.n	8017f98 <mqtt_parse_incoming+0x1ac>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8017eac:	7dfa      	ldrb	r2, [r7, #23]
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	441a      	add	r2, r3
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8017eb8:	1ad3      	subs	r3, r2, r3
 8017eba:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8017ebc:	e06c      	b.n	8017f98 <mqtt_parse_incoming+0x1ac>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	f8d3 22a8 	ldr.w	r2, [r3, #680]	@ 0x2a8
 8017ec4:	7dfb      	ldrb	r3, [r7, #23]
 8017ec6:	1ad3      	subs	r3, r2, r3
 8017ec8:	7dfa      	ldrb	r2, [r7, #23]
 8017eca:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8017ece:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ed2:	fb01 f202 	mul.w	r2, r1, r2
 8017ed6:	1a9b      	subs	r3, r3, r2
 8017ed8:	b29a      	uxth	r2, r3
 8017eda:	7dfb      	ldrb	r3, [r7, #23]
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	4413      	add	r3, r2
 8017ee0:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8017ee2:	683b      	ldr	r3, [r7, #0]
 8017ee4:	891a      	ldrh	r2, [r3, #8]
 8017ee6:	8bfb      	ldrh	r3, [r7, #30]
 8017ee8:	1ad3      	subs	r3, r2, r3
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	461a      	mov	r2, r3
 8017eee:	69bb      	ldr	r3, [r7, #24]
 8017ef0:	4293      	cmp	r3, r2
 8017ef2:	d905      	bls.n	8017f00 <mqtt_parse_incoming+0x114>
 8017ef4:	683b      	ldr	r3, [r7, #0]
 8017ef6:	891a      	ldrh	r2, [r3, #8]
 8017ef8:	8bfb      	ldrh	r3, [r7, #30]
 8017efa:	1ad3      	subs	r3, r2, r3
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	e001      	b.n	8017f04 <mqtt_parse_incoming+0x118>
 8017f00:	69bb      	ldr	r3, [r7, #24]
 8017f02:	b29b      	uxth	r3, r3
 8017f04:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8017f06:	8a7b      	ldrh	r3, [r7, #18]
 8017f08:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8017f0c:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8017f0e:	8aba      	ldrh	r2, [r7, #20]
 8017f10:	8a3b      	ldrh	r3, [r7, #16]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d901      	bls.n	8017f1a <mqtt_parse_incoming+0x12e>
        cpy_len = buffer_space;
 8017f16:	8a3b      	ldrh	r3, [r7, #16]
 8017f18:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8017f20:	8a7b      	ldrh	r3, [r7, #18]
 8017f22:	18d1      	adds	r1, r2, r3
 8017f24:	8bfb      	ldrh	r3, [r7, #30]
 8017f26:	8aba      	ldrh	r2, [r7, #20]
 8017f28:	6838      	ldr	r0, [r7, #0]
 8017f2a:	f001 ff39 	bl	8019da0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f8d3 22a8 	ldr.w	r2, [r3, #680]	@ 0x2a8
 8017f34:	8abb      	ldrh	r3, [r7, #20]
 8017f36:	441a      	add	r2, r3
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
      in_offset += cpy_len;
 8017f3e:	8bfa      	ldrh	r2, [r7, #30]
 8017f40:	8abb      	ldrh	r3, [r7, #20]
 8017f42:	4413      	add	r3, r2
 8017f44:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8017f46:	8abb      	ldrh	r3, [r7, #20]
 8017f48:	69ba      	ldr	r2, [r7, #24]
 8017f4a:	1ad3      	subs	r3, r2, r3
 8017f4c:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d003      	beq.n	8017f5c <mqtt_parse_incoming+0x170>
 8017f54:	8aba      	ldrh	r2, [r7, #20]
 8017f56:	8a3b      	ldrh	r3, [r7, #16]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d11e      	bne.n	8017f9a <mqtt_parse_incoming+0x1ae>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8017f5c:	8a7a      	ldrh	r2, [r7, #18]
 8017f5e:	8abb      	ldrh	r3, [r7, #20]
 8017f60:	4413      	add	r3, r2
 8017f62:	b29a      	uxth	r2, r3
 8017f64:	7dfb      	ldrb	r3, [r7, #23]
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	1ad3      	subs	r3, r2, r3
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	7df9      	ldrb	r1, [r7, #23]
 8017f6e:	69bb      	ldr	r3, [r7, #24]
 8017f70:	6878      	ldr	r0, [r7, #4]
 8017f72:	f7ff fd7d 	bl	8017a70 <mqtt_message_received>
 8017f76:	4603      	mov	r3, r0
 8017f78:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8017f7a:	89fb      	ldrh	r3, [r7, #14]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d001      	beq.n	8017f84 <mqtt_parse_incoming+0x198>
          return res;
 8017f80:	89fb      	ldrh	r3, [r7, #14]
 8017f82:	e011      	b.n	8017fa8 <mqtt_parse_incoming+0x1bc>
        }
        if (msg_rem_len == 0) {
 8017f84:	69bb      	ldr	r3, [r7, #24]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d107      	bne.n	8017f9a <mqtt_parse_incoming+0x1ae>
          /* Reset parser state */
          client->msg_idx = 0;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8017f92:	2300      	movs	r3, #0
 8017f94:	75fb      	strb	r3, [r7, #23]
 8017f96:	e000      	b.n	8017f9a <mqtt_parse_incoming+0x1ae>
      if (fixed_hdr_idx >= 2) {
 8017f98:	bf00      	nop
  while (p->tot_len > in_offset) {
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	891b      	ldrh	r3, [r3, #8]
 8017f9e:	8bfa      	ldrh	r2, [r7, #30]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	f4ff af31 	bcc.w	8017e08 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8017fa6:	2300      	movs	r3, #0
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3720      	adds	r7, #32
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b086      	sub	sp, #24
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	607a      	str	r2, [r7, #4]
 8017fbc:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d106      	bne.n	8017fd6 <mqtt_tcp_recv_cb+0x26>
 8017fc8:	4b24      	ldr	r3, [pc, #144]	@ (801805c <mqtt_tcp_recv_cb+0xac>)
 8017fca:	f240 32a7 	movw	r2, #935	@ 0x3a7
 8017fce:	4924      	ldr	r1, [pc, #144]	@ (8018060 <mqtt_tcp_recv_cb+0xb0>)
 8017fd0:	4824      	ldr	r0, [pc, #144]	@ (8018064 <mqtt_tcp_recv_cb+0xb4>)
 8017fd2:	f009 feeb 	bl	8021dac <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	68db      	ldr	r3, [r3, #12]
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d006      	beq.n	8017fee <mqtt_tcp_recv_cb+0x3e>
 8017fe0:	4b1e      	ldr	r3, [pc, #120]	@ (801805c <mqtt_tcp_recv_cb+0xac>)
 8017fe2:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017fe6:	4920      	ldr	r1, [pc, #128]	@ (8018068 <mqtt_tcp_recv_cb+0xb8>)
 8017fe8:	481e      	ldr	r0, [pc, #120]	@ (8018064 <mqtt_tcp_recv_cb+0xb4>)
 8017fea:	f009 fedf 	bl	8021dac <iprintf>

  if (p == NULL) {
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d105      	bne.n	8018000 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8017ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017ff8:	6978      	ldr	r0, [r7, #20]
 8017ffa:	f7ff fbef 	bl	80177dc <mqtt_close>
 8017ffe:	e027      	b.n	8018050 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8018000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d005      	beq.n	8018014 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f001 fcc3 	bl	8019994 <pbuf_free>
      return err;
 801800e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018012:	e01e      	b.n	8018052 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	891b      	ldrh	r3, [r3, #8]
 8018018:	4619      	mov	r1, r3
 801801a:	68b8      	ldr	r0, [r7, #8]
 801801c:	f002 fcb8 	bl	801a990 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8018020:	6879      	ldr	r1, [r7, #4]
 8018022:	6978      	ldr	r0, [r7, #20]
 8018024:	f7ff fee2 	bl	8017dec <mqtt_parse_incoming>
 8018028:	4603      	mov	r3, r0
 801802a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	f001 fcb1 	bl	8019994 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8018032:	8a7b      	ldrh	r3, [r7, #18]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d004      	beq.n	8018042 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8018038:	8a7b      	ldrh	r3, [r7, #18]
 801803a:	4619      	mov	r1, r3
 801803c:	6978      	ldr	r0, [r7, #20]
 801803e:	f7ff fbcd 	bl	80177dc <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	885b      	ldrh	r3, [r3, #2]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d002      	beq.n	8018050 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	2200      	movs	r2, #0
 801804e:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8018050:	2300      	movs	r3, #0
}
 8018052:	4618      	mov	r0, r3
 8018054:	3718      	adds	r7, #24
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	08025e60 	.word	0x08025e60
 8018060:	0802612c 	.word	0x0802612c
 8018064:	08025f04 	.word	0x08025f04
 8018068:	08026150 	.word	0x08026150

0801806c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b086      	sub	sp, #24
 8018070:	af00      	add	r7, sp, #0
 8018072:	60f8      	str	r0, [r7, #12]
 8018074:	60b9      	str	r1, [r7, #8]
 8018076:	4613      	mov	r3, r2
 8018078:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	7a9b      	ldrb	r3, [r3, #10]
 8018082:	2b03      	cmp	r3, #3
 8018084:	d127      	bne.n	80180d6 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8018086:	697b      	ldr	r3, [r7, #20]
 8018088:	2200      	movs	r2, #0
 801808a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	2200      	movs	r2, #0
 8018090:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8018092:	e00d      	b.n	80180b0 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8018094:	693b      	ldr	r3, [r7, #16]
 8018096:	685b      	ldr	r3, [r3, #4]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d006      	beq.n	80180aa <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	685b      	ldr	r3, [r3, #4]
 80180a0:	693a      	ldr	r2, [r7, #16]
 80180a2:	6892      	ldr	r2, [r2, #8]
 80180a4:	2100      	movs	r1, #0
 80180a6:	4610      	mov	r0, r2
 80180a8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80180aa:	6938      	ldr	r0, [r7, #16]
 80180ac:	f7ff f99c 	bl	80173e8 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	3318      	adds	r3, #24
 80180b4:	2100      	movs	r1, #0
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7ff f9a6 	bl	8017408 <mqtt_take_request>
 80180bc:	6138      	str	r0, [r7, #16]
 80180be:	693b      	ldr	r3, [r7, #16]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d1e7      	bne.n	8018094 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	68db      	ldr	r3, [r3, #12]
 80180ce:	4619      	mov	r1, r3
 80180d0:	4610      	mov	r0, r2
 80180d2:	f7ff f843 	bl	801715c <mqtt_output_send>
  }
  return ERR_OK;
 80180d6:	2300      	movs	r3, #0
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3718      	adds	r7, #24
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}

080180e0 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b084      	sub	sp, #16
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
 80180e8:	460b      	mov	r3, r1
 80180ea:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d106      	bne.n	8018104 <mqtt_tcp_err_cb+0x24>
 80180f6:	4b09      	ldr	r3, [pc, #36]	@ (801811c <mqtt_tcp_err_cb+0x3c>)
 80180f8:	f240 32f6 	movw	r2, #1014	@ 0x3f6
 80180fc:	4908      	ldr	r1, [pc, #32]	@ (8018120 <mqtt_tcp_err_cb+0x40>)
 80180fe:	4809      	ldr	r0, [pc, #36]	@ (8018124 <mqtt_tcp_err_cb+0x44>)
 8018100:	f009 fe54 	bl	8021dac <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	2200      	movs	r2, #0
 8018108:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 801810a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801810e:	68f8      	ldr	r0, [r7, #12]
 8018110:	f7ff fb64 	bl	80177dc <mqtt_close>
}
 8018114:	bf00      	nop
 8018116:	3710      	adds	r7, #16
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}
 801811c:	08025e60 	.word	0x08025e60
 8018120:	08026178 	.word	0x08026178
 8018124:	08025f04 	.word	0x08025f04

08018128 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	7a9b      	ldrb	r3, [r3, #10]
 801813a:	2b03      	cmp	r3, #3
 801813c:	d106      	bne.n	801814c <mqtt_tcp_poll_cb+0x24>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8018144:	6839      	ldr	r1, [r7, #0]
 8018146:	4618      	mov	r0, r3
 8018148:	f7ff f808 	bl	801715c <mqtt_output_send>
  }
  return ERR_OK;
 801814c:	2300      	movs	r3, #0
}
 801814e:	4618      	mov	r0, r3
 8018150:	3710      	adds	r7, #16
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
	...

08018158 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b086      	sub	sp, #24
 801815c:	af00      	add	r7, sp, #0
 801815e:	60f8      	str	r0, [r7, #12]
 8018160:	60b9      	str	r1, [r7, #8]
 8018162:	4613      	mov	r3, r2
 8018164:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 801816a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d002      	beq.n	8018178 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8018172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018176:	e026      	b.n	80181c6 <mqtt_tcp_connect_cb+0x6e>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	2200      	movs	r2, #0
 801817c:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8018180:	4913      	ldr	r1, [pc, #76]	@ (80181d0 <mqtt_tcp_connect_cb+0x78>)
 8018182:	68b8      	ldr	r0, [r7, #8]
 8018184:	f003 fbfc 	bl	801b980 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8018188:	4912      	ldr	r1, [pc, #72]	@ (80181d4 <mqtt_tcp_connect_cb+0x7c>)
 801818a:	68b8      	ldr	r0, [r7, #8]
 801818c:	f003 fc1c 	bl	801b9c8 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8018190:	2202      	movs	r2, #2
 8018192:	4911      	ldr	r1, [pc, #68]	@ (80181d8 <mqtt_tcp_connect_cb+0x80>)
 8018194:	68b8      	ldr	r0, [r7, #8]
 8018196:	f003 fc5f 	bl	801ba58 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	2202      	movs	r2, #2
 801819e:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 80181a0:	697a      	ldr	r2, [r7, #20]
 80181a2:	490e      	ldr	r1, [pc, #56]	@ (80181dc <mqtt_tcp_connect_cb+0x84>)
 80181a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80181a8:	f008 fafe 	bl	80207a8 <sys_timeout>
  client->cyclic_tick = 0;
 80181ac:	697b      	ldr	r3, [r7, #20]
 80181ae:	2200      	movs	r2, #0
 80181b0:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 80181b2:	697b      	ldr	r3, [r7, #20]
 80181b4:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	68db      	ldr	r3, [r3, #12]
 80181bc:	4619      	mov	r1, r3
 80181be:	4610      	mov	r0, r2
 80181c0:	f7fe ffcc 	bl	801715c <mqtt_output_send>

  return ERR_OK;
 80181c4:	2300      	movs	r3, #0
}
 80181c6:	4618      	mov	r0, r3
 80181c8:	3718      	adds	r7, #24
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bd80      	pop	{r7, pc}
 80181ce:	bf00      	nop
 80181d0:	08017fb1 	.word	0x08017fb1
 80181d4:	0801806d 	.word	0x0801806d
 80181d8:	08018129 	.word	0x08018129
 80181dc:	0801789d 	.word	0x0801789d

080181e0 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b08c      	sub	sp, #48	@ 0x30
 80181e4:	af02      	add	r7, sp, #8
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	60b9      	str	r1, [r7, #8]
 80181ea:	607a      	str	r2, [r7, #4]
 80181ec:	807b      	strh	r3, [r7, #2]
  size_t topic_strlen;
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
 80181ee:	f7f7 fe57 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d106      	bne.n	8018206 <mqtt_publish+0x26>
 80181f8:	4b5f      	ldr	r3, [pc, #380]	@ (8018378 <mqtt_publish+0x198>)
 80181fa:	f240 4254 	movw	r2, #1108	@ 0x454
 80181fe:	495f      	ldr	r1, [pc, #380]	@ (801837c <mqtt_publish+0x19c>)
 8018200:	485f      	ldr	r0, [pc, #380]	@ (8018380 <mqtt_publish+0x1a0>)
 8018202:	f009 fdd3 	bl	8021dac <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d106      	bne.n	801821a <mqtt_publish+0x3a>
 801820c:	4b5a      	ldr	r3, [pc, #360]	@ (8018378 <mqtt_publish+0x198>)
 801820e:	f240 4255 	movw	r2, #1109	@ 0x455
 8018212:	495c      	ldr	r1, [pc, #368]	@ (8018384 <mqtt_publish+0x1a4>)
 8018214:	485a      	ldr	r0, [pc, #360]	@ (8018380 <mqtt_publish+0x1a0>)
 8018216:	f009 fdc9 	bl	8021dac <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	7a9b      	ldrb	r3, [r3, #10]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d109      	bne.n	8018236 <mqtt_publish+0x56>
 8018222:	4b55      	ldr	r3, [pc, #340]	@ (8018378 <mqtt_publish+0x198>)
 8018224:	f240 4256 	movw	r2, #1110	@ 0x456
 8018228:	4957      	ldr	r1, [pc, #348]	@ (8018388 <mqtt_publish+0x1a8>)
 801822a:	4855      	ldr	r0, [pc, #340]	@ (8018380 <mqtt_publish+0x1a0>)
 801822c:	f009 fdbe 	bl	8021dac <iprintf>
 8018230:	f06f 030a 	mvn.w	r3, #10
 8018234:	e09b      	b.n	801836e <mqtt_publish+0x18e>

  topic_strlen = strlen(topic);
 8018236:	68b8      	ldr	r0, [r7, #8]
 8018238:	f7e8 f8b2 	bl	80003a0 <strlen>
 801823c:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 801823e:	69fb      	ldr	r3, [r7, #28]
 8018240:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8018244:	4293      	cmp	r3, r2
 8018246:	d909      	bls.n	801825c <mqtt_publish+0x7c>
 8018248:	4b4b      	ldr	r3, [pc, #300]	@ (8018378 <mqtt_publish+0x198>)
 801824a:	f240 4259 	movw	r2, #1113	@ 0x459
 801824e:	494f      	ldr	r1, [pc, #316]	@ (801838c <mqtt_publish+0x1ac>)
 8018250:	484b      	ldr	r0, [pc, #300]	@ (8018380 <mqtt_publish+0x1a0>)
 8018252:	f009 fdab 	bl	8021dac <iprintf>
 8018256:	f06f 030f 	mvn.w	r3, #15
 801825a:	e088      	b.n	801836e <mqtt_publish+0x18e>
  topic_len = (u16_t)topic_strlen;
 801825c:	69fb      	ldr	r3, [r7, #28]
 801825e:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8018260:	8b7b      	ldrh	r3, [r7, #26]
 8018262:	1c9a      	adds	r2, r3, #2
 8018264:	887b      	ldrh	r3, [r7, #2]
 8018266:	4413      	add	r3, r2
 8018268:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 801826a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801826e:	2b00      	cmp	r3, #0
 8018270:	d008      	beq.n	8018284 <mqtt_publish+0xa4>
    total_len += 2;
 8018272:	6a3b      	ldr	r3, [r7, #32]
 8018274:	3302      	adds	r3, #2
 8018276:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8018278:	68f8      	ldr	r0, [r7, #12]
 801827a:	f7fe fed7 	bl	801702c <msg_generate_packet_id>
 801827e:	4603      	mov	r3, r0
 8018280:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018282:	e001      	b.n	8018288 <mqtt_publish+0xa8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8018284:	2300      	movs	r3, #0
 8018286:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8018288:	6a3b      	ldr	r3, [r7, #32]
 801828a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801828e:	d309      	bcc.n	80182a4 <mqtt_publish+0xc4>
 8018290:	4b39      	ldr	r3, [pc, #228]	@ (8018378 <mqtt_publish+0x198>)
 8018292:	f240 4265 	movw	r2, #1125	@ 0x465
 8018296:	493e      	ldr	r1, [pc, #248]	@ (8018390 <mqtt_publish+0x1b0>)
 8018298:	4839      	ldr	r0, [pc, #228]	@ (8018380 <mqtt_publish+0x1a0>)
 801829a:	f009 fd87 	bl	8021dac <iprintf>
 801829e:	f06f 030f 	mvn.w	r3, #15
 80182a2:	e064      	b.n	801836e <mqtt_publish+0x18e>
  remaining_length = (u16_t)total_len;
 80182a4:	6a3b      	ldr	r3, [r7, #32]
 80182a6:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	f103 001c 	add.w	r0, r3, #28
 80182ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80182b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182b6:	2128      	movs	r1, #40	@ 0x28
 80182b8:	f7ff f804 	bl	80172c4 <mqtt_create_request>
 80182bc:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80182be:	697b      	ldr	r3, [r7, #20]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d102      	bne.n	80182ca <mqtt_publish+0xea>
    return ERR_MEM;
 80182c4:	f04f 33ff 	mov.w	r3, #4294967295
 80182c8:	e051      	b.n	801836e <mqtt_publish+0x18e>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80182d0:	8b3a      	ldrh	r2, [r7, #24]
 80182d2:	4611      	mov	r1, r2
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7ff fa4f 	bl	8017778 <mqtt_output_check_space>
 80182da:	4603      	mov	r3, r0
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d105      	bne.n	80182ec <mqtt_publish+0x10c>
    mqtt_delete_request(r);
 80182e0:	6978      	ldr	r0, [r7, #20]
 80182e2:	f7ff f881 	bl	80173e8 <mqtt_delete_request>
    return ERR_MEM;
 80182e6:	f04f 33ff 	mov.w	r3, #4294967295
 80182ea:	e040      	b.n	801836e <mqtt_publish+0x18e>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 80182f2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80182f6:	8b3b      	ldrh	r3, [r7, #24]
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	4613      	mov	r3, r2
 8018302:	2200      	movs	r2, #0
 8018304:	2103      	movs	r1, #3
 8018306:	f7ff f9ec 	bl	80176e2 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8018310:	8b7a      	ldrh	r2, [r7, #26]
 8018312:	68b9      	ldr	r1, [r7, #8]
 8018314:	4618      	mov	r0, r3
 8018316:	f7ff f9b8 	bl	801768a <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 801831a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801831e:	2b00      	cmp	r3, #0
 8018320:	d007      	beq.n	8018332 <mqtt_publish+0x152>
    mqtt_output_append_u16(&client->output, pkt_id);
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8018328:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801832a:	4611      	mov	r1, r2
 801832c:	4618      	mov	r0, r3
 801832e:	f7ff f976 	bl	801761e <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d00a      	beq.n	801834e <mqtt_publish+0x16e>
 8018338:	887b      	ldrh	r3, [r7, #2]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d007      	beq.n	801834e <mqtt_publish+0x16e>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8018344:	887a      	ldrh	r2, [r7, #2]
 8018346:	6879      	ldr	r1, [r7, #4]
 8018348:	4618      	mov	r0, r3
 801834a:	f7ff f980 	bl	801764e <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	3318      	adds	r3, #24
 8018352:	6979      	ldr	r1, [r7, #20]
 8018354:	4618      	mov	r0, r3
 8018356:	f7fe fffb 	bl	8017350 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	68db      	ldr	r3, [r3, #12]
 8018364:	4619      	mov	r1, r3
 8018366:	4610      	mov	r0, r2
 8018368:	f7fe fef8 	bl	801715c <mqtt_output_send>
  return ERR_OK;
 801836c:	2300      	movs	r3, #0
}
 801836e:	4618      	mov	r0, r3
 8018370:	3728      	adds	r7, #40	@ 0x28
 8018372:	46bd      	mov	sp, r7
 8018374:	bd80      	pop	{r7, pc}
 8018376:	bf00      	nop
 8018378:	08025e60 	.word	0x08025e60
 801837c:	08026198 	.word	0x08026198
 8018380:	08025f04 	.word	0x08025f04
 8018384:	080261b8 	.word	0x080261b8
 8018388:	080261d4 	.word	0x080261d4
 801838c:	080261f4 	.word	0x080261f4
 8018390:	08026218 	.word	0x08026218

08018394 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b08c      	sub	sp, #48	@ 0x30
 8018398:	af02      	add	r7, sp, #8
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	60b9      	str	r1, [r7, #8]
 801839e:	603b      	str	r3, [r7, #0]
 80183a0:	4613      	mov	r3, r2
 80183a2:	71fb      	strb	r3, [r7, #7]
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
 80183a4:	f7f7 fd7c 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d106      	bne.n	80183bc <mqtt_sub_unsub+0x28>
 80183ae:	4b5f      	ldr	r3, [pc, #380]	@ (801852c <mqtt_sub_unsub+0x198>)
 80183b0:	f240 429f 	movw	r2, #1183	@ 0x49f
 80183b4:	495e      	ldr	r1, [pc, #376]	@ (8018530 <mqtt_sub_unsub+0x19c>)
 80183b6:	485f      	ldr	r0, [pc, #380]	@ (8018534 <mqtt_sub_unsub+0x1a0>)
 80183b8:	f009 fcf8 	bl	8021dac <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d106      	bne.n	80183d0 <mqtt_sub_unsub+0x3c>
 80183c2:	4b5a      	ldr	r3, [pc, #360]	@ (801852c <mqtt_sub_unsub+0x198>)
 80183c4:	f44f 6294 	mov.w	r2, #1184	@ 0x4a0
 80183c8:	495b      	ldr	r1, [pc, #364]	@ (8018538 <mqtt_sub_unsub+0x1a4>)
 80183ca:	485a      	ldr	r0, [pc, #360]	@ (8018534 <mqtt_sub_unsub+0x1a0>)
 80183cc:	f009 fcee 	bl	8021dac <iprintf>

  topic_strlen = strlen(topic);
 80183d0:	68b8      	ldr	r0, [r7, #8]
 80183d2:	f7e7 ffe5 	bl	80003a0 <strlen>
 80183d6:	6278      	str	r0, [r7, #36]	@ 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80183d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183da:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80183de:	4293      	cmp	r3, r2
 80183e0:	d909      	bls.n	80183f6 <mqtt_sub_unsub+0x62>
 80183e2:	4b52      	ldr	r3, [pc, #328]	@ (801852c <mqtt_sub_unsub+0x198>)
 80183e4:	f240 42a3 	movw	r2, #1187	@ 0x4a3
 80183e8:	4954      	ldr	r1, [pc, #336]	@ (801853c <mqtt_sub_unsub+0x1a8>)
 80183ea:	4852      	ldr	r0, [pc, #328]	@ (8018534 <mqtt_sub_unsub+0x1a0>)
 80183ec:	f009 fcde 	bl	8021dac <iprintf>
 80183f0:	f06f 030f 	mvn.w	r3, #15
 80183f4:	e096      	b.n	8018524 <mqtt_sub_unsub+0x190>
  topic_len = (u16_t)topic_strlen;
 80183f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 80183fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80183fc:	3304      	adds	r3, #4
 80183fe:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8018402:	2a00      	cmp	r2, #0
 8018404:	bf14      	ite	ne
 8018406:	2201      	movne	r2, #1
 8018408:	2200      	moveq	r2, #0
 801840a:	b2d2      	uxtb	r2, r2
 801840c:	4413      	add	r3, r2
 801840e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018416:	d309      	bcc.n	801842c <mqtt_sub_unsub+0x98>
 8018418:	4b44      	ldr	r3, [pc, #272]	@ (801852c <mqtt_sub_unsub+0x198>)
 801841a:	f240 42a7 	movw	r2, #1191	@ 0x4a7
 801841e:	4948      	ldr	r1, [pc, #288]	@ (8018540 <mqtt_sub_unsub+0x1ac>)
 8018420:	4844      	ldr	r0, [pc, #272]	@ (8018534 <mqtt_sub_unsub+0x1a0>)
 8018422:	f009 fcc3 	bl	8021dac <iprintf>
 8018426:	f06f 030f 	mvn.w	r3, #15
 801842a:	e07b      	b.n	8018524 <mqtt_sub_unsub+0x190>
  remaining_length = (u16_t)total_len;
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8018430:	79fb      	ldrb	r3, [r7, #7]
 8018432:	2b02      	cmp	r3, #2
 8018434:	d906      	bls.n	8018444 <mqtt_sub_unsub+0xb0>
 8018436:	4b3d      	ldr	r3, [pc, #244]	@ (801852c <mqtt_sub_unsub+0x198>)
 8018438:	f240 42aa 	movw	r2, #1194	@ 0x4aa
 801843c:	4941      	ldr	r1, [pc, #260]	@ (8018544 <mqtt_sub_unsub+0x1b0>)
 801843e:	483d      	ldr	r0, [pc, #244]	@ (8018534 <mqtt_sub_unsub+0x1a0>)
 8018440:	f009 fcb4 	bl	8021dac <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	7a9b      	ldrb	r3, [r3, #10]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d102      	bne.n	8018452 <mqtt_sub_unsub+0xbe>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 801844c:	f06f 030a 	mvn.w	r3, #10
 8018450:	e068      	b.n	8018524 <mqtt_sub_unsub+0x190>
  }

  pkt_id = msg_generate_packet_id(client);
 8018452:	68f8      	ldr	r0, [r7, #12]
 8018454:	f7fe fdea 	bl	801702c <msg_generate_packet_id>
 8018458:	4603      	mov	r3, r0
 801845a:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	f103 001c 	add.w	r0, r3, #28
 8018462:	8b3a      	ldrh	r2, [r7, #24]
 8018464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018466:	9300      	str	r3, [sp, #0]
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	2128      	movs	r1, #40	@ 0x28
 801846c:	f7fe ff2a 	bl	80172c4 <mqtt_create_request>
 8018470:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d102      	bne.n	801847e <mqtt_sub_unsub+0xea>
    return ERR_MEM;
 8018478:	f04f 33ff 	mov.w	r3, #4294967295
 801847c:	e052      	b.n	8018524 <mqtt_sub_unsub+0x190>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 8018484:	8b7a      	ldrh	r2, [r7, #26]
 8018486:	4611      	mov	r1, r2
 8018488:	4618      	mov	r0, r3
 801848a:	f7ff f975 	bl	8017778 <mqtt_output_check_space>
 801848e:	4603      	mov	r3, r0
 8018490:	2b00      	cmp	r3, #0
 8018492:	d105      	bne.n	80184a0 <mqtt_sub_unsub+0x10c>
    mqtt_delete_request(r);
 8018494:	6978      	ldr	r0, [r7, #20]
 8018496:	f7fe ffa7 	bl	80173e8 <mqtt_delete_request>
    return ERR_MEM;
 801849a:	f04f 33ff 	mov.w	r3, #4294967295
 801849e:	e041      	b.n	8018524 <mqtt_sub_unsub+0x190>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 80184a6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d001      	beq.n	80184b2 <mqtt_sub_unsub+0x11e>
 80184ae:	2108      	movs	r1, #8
 80184b0:	e000      	b.n	80184b4 <mqtt_sub_unsub+0x120>
 80184b2:	210a      	movs	r1, #10
 80184b4:	8b7b      	ldrh	r3, [r7, #26]
 80184b6:	9301      	str	r3, [sp, #4]
 80184b8:	2300      	movs	r3, #0
 80184ba:	9300      	str	r3, [sp, #0]
 80184bc:	2301      	movs	r3, #1
 80184be:	2200      	movs	r2, #0
 80184c0:	f7ff f90f 	bl	80176e2 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80184ca:	8b3a      	ldrh	r2, [r7, #24]
 80184cc:	4611      	mov	r1, r2
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7ff f8a5 	bl	801761e <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80184da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80184dc:	68b9      	ldr	r1, [r7, #8]
 80184de:	4618      	mov	r0, r3
 80184e0:	f7ff f8d3 	bl	801768a <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 80184e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d00b      	beq.n	8018504 <mqtt_sub_unsub+0x170>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 80184f2:	79fb      	ldrb	r3, [r7, #7]
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	bf28      	it	cs
 80184f8:	2302      	movcs	r3, #2
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	4619      	mov	r1, r3
 80184fe:	4610      	mov	r0, r2
 8018500:	f7ff f87e 	bl	8017600 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	3318      	adds	r3, #24
 8018508:	6979      	ldr	r1, [r7, #20]
 801850a:	4618      	mov	r0, r3
 801850c:	f7fe ff20 	bl	8017350 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	68db      	ldr	r3, [r3, #12]
 801851a:	4619      	mov	r1, r3
 801851c:	4610      	mov	r0, r2
 801851e:	f7fe fe1d 	bl	801715c <mqtt_output_send>
  return ERR_OK;
 8018522:	2300      	movs	r3, #0
}
 8018524:	4618      	mov	r0, r3
 8018526:	3728      	adds	r7, #40	@ 0x28
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}
 801852c:	08025e60 	.word	0x08025e60
 8018530:	0802623c 	.word	0x0802623c
 8018534:	08025f04 	.word	0x08025f04
 8018538:	0802625c 	.word	0x0802625c
 801853c:	0802627c 	.word	0x0802627c
 8018540:	080262a4 	.word	0x080262a4
 8018544:	080262cc 	.word	0x080262cc

08018548 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b084      	sub	sp, #16
 801854c:	af00      	add	r7, sp, #0
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	607a      	str	r2, [r7, #4]
 8018554:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8018556:	f7f7 fca3 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d106      	bne.n	801856e <mqtt_set_inpub_callback+0x26>
 8018560:	4b0b      	ldr	r3, [pc, #44]	@ (8018590 <mqtt_set_inpub_callback+0x48>)
 8018562:	f240 42da 	movw	r2, #1242	@ 0x4da
 8018566:	490b      	ldr	r1, [pc, #44]	@ (8018594 <mqtt_set_inpub_callback+0x4c>)
 8018568:	480b      	ldr	r0, [pc, #44]	@ (8018598 <mqtt_set_inpub_callback+0x50>)
 801856a:	f009 fc1f 	bl	8021dac <iprintf>
  client->data_cb = data_cb;
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
  client->pub_cb = pub_cb;
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	68ba      	ldr	r2, [r7, #8]
 801857a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  client->inpub_arg = arg;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	683a      	ldr	r2, [r7, #0]
 8018582:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
}
 8018586:	bf00      	nop
 8018588:	3710      	adds	r7, #16
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	08025e60 	.word	0x08025e60
 8018594:	080262e4 	.word	0x080262e4
 8018598:	08025f04 	.word	0x08025f04

0801859c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 80185a0:	f7f7 fc7e 	bl	800fea0 <sys_check_core_locking>
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80185a4:	f241 21b0 	movw	r1, #4784	@ 0x12b0
 80185a8:	2001      	movs	r0, #1
 80185aa:	f7fe fbe5 	bl	8016d78 <mem_calloc>
 80185ae:	4603      	mov	r3, r0
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	bd80      	pop	{r7, pc}

080185b4 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b08c      	sub	sp, #48	@ 0x30
 80185b8:	af02      	add	r7, sp, #8
 80185ba:	60f8      	str	r0, [r7, #12]
 80185bc:	60b9      	str	r1, [r7, #8]
 80185be:	603b      	str	r3, [r7, #0]
 80185c0:	4613      	mov	r3, r2
 80185c2:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80185c4:	230a      	movs	r3, #10
 80185c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80185c8:	2300      	movs	r3, #0
 80185ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80185ce:	2300      	movs	r3, #0
 80185d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80185d4:	2300      	movs	r3, #0
 80185d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	83fb      	strh	r3, [r7, #30]
 80185de:	2300      	movs	r3, #0
 80185e0:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
 80185e2:	f7f7 fc5d 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d106      	bne.n	80185fa <mqtt_client_connect+0x46>
 80185ec:	4b9e      	ldr	r3, [pc, #632]	@ (8018868 <mqtt_client_connect+0x2b4>)
 80185ee:	f240 520f 	movw	r2, #1295	@ 0x50f
 80185f2:	499e      	ldr	r1, [pc, #632]	@ (801886c <mqtt_client_connect+0x2b8>)
 80185f4:	489e      	ldr	r0, [pc, #632]	@ (8018870 <mqtt_client_connect+0x2bc>)
 80185f6:	f009 fbd9 	bl	8021dac <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80185fa:	68bb      	ldr	r3, [r7, #8]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d106      	bne.n	801860e <mqtt_client_connect+0x5a>
 8018600:	4b99      	ldr	r3, [pc, #612]	@ (8018868 <mqtt_client_connect+0x2b4>)
 8018602:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8018606:	499b      	ldr	r1, [pc, #620]	@ (8018874 <mqtt_client_connect+0x2c0>)
 8018608:	4899      	ldr	r0, [pc, #612]	@ (8018870 <mqtt_client_connect+0x2bc>)
 801860a:	f009 fbcf 	bl	8021dac <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 801860e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018610:	2b00      	cmp	r3, #0
 8018612:	d106      	bne.n	8018622 <mqtt_client_connect+0x6e>
 8018614:	4b94      	ldr	r3, [pc, #592]	@ (8018868 <mqtt_client_connect+0x2b4>)
 8018616:	f240 5211 	movw	r2, #1297	@ 0x511
 801861a:	4997      	ldr	r1, [pc, #604]	@ (8018878 <mqtt_client_connect+0x2c4>)
 801861c:	4894      	ldr	r0, [pc, #592]	@ (8018870 <mqtt_client_connect+0x2bc>)
 801861e:	f009 fbc5 	bl	8021dac <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8018622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <mqtt_client_connect+0x84>
 801862a:	4b8f      	ldr	r3, [pc, #572]	@ (8018868 <mqtt_client_connect+0x2b4>)
 801862c:	f240 5212 	movw	r2, #1298	@ 0x512
 8018630:	4992      	ldr	r1, [pc, #584]	@ (801887c <mqtt_client_connect+0x2c8>)
 8018632:	488f      	ldr	r0, [pc, #572]	@ (8018870 <mqtt_client_connect+0x2bc>)
 8018634:	f009 fbba 	bl	8021dac <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	7a9b      	ldrb	r3, [r3, #10]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d002      	beq.n	8018646 <mqtt_client_connect+0x92>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8018640:	f06f 0309 	mvn.w	r3, #9
 8018644:	e223      	b.n	8018a8e <mqtt_client_connect+0x4da>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8018646:	f241 22b0 	movw	r2, #4784	@ 0x12b0
 801864a:	2100      	movs	r1, #0
 801864c:	68f8      	ldr	r0, [r7, #12]
 801864e:	f009 fd53 	bl	80220f8 <memset>
  client->connect_arg = arg;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018656:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	683a      	ldr	r2, [r7, #0]
 801865c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 801865e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018660:	899a      	ldrh	r2, [r3, #12]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	331c      	adds	r3, #28
 801866a:	2128      	movs	r1, #40	@ 0x28
 801866c:	4618      	mov	r0, r3
 801866e:	f7fe ff99 	bl	80175a4 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8018672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018674:	691b      	ldr	r3, [r3, #16]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d073      	beq.n	8018762 <mqtt_client_connect+0x1ae>
 801867a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801867c:	695b      	ldr	r3, [r3, #20]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d06f      	beq.n	8018762 <mqtt_client_connect+0x1ae>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8018682:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018686:	f043 0304 	orr.w	r3, r3, #4
 801868a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    flags |= (client_info->will_qos & 3) << 3;
 801868e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018690:	7e1b      	ldrb	r3, [r3, #24]
 8018692:	00db      	lsls	r3, r3, #3
 8018694:	b25b      	sxtb	r3, r3
 8018696:	f003 0318 	and.w	r3, r3, #24
 801869a:	b25a      	sxtb	r2, r3
 801869c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80186a0:	4313      	orrs	r3, r2
 80186a2:	b25b      	sxtb	r3, r3
 80186a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (client_info->will_retain) {
 80186a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186aa:	7e5b      	ldrb	r3, [r3, #25]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d005      	beq.n	80186bc <mqtt_client_connect+0x108>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 80186b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80186b4:	f043 0320 	orr.w	r3, r3, #32
 80186b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    len = strlen(client_info->will_topic);
 80186bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186be:	691b      	ldr	r3, [r3, #16]
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7e7 fe6d 	bl	80003a0 <strlen>
 80186c6:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 80186c8:	69bb      	ldr	r3, [r7, #24]
 80186ca:	2bff      	cmp	r3, #255	@ 0xff
 80186cc:	d909      	bls.n	80186e2 <mqtt_client_connect+0x12e>
 80186ce:	4b66      	ldr	r3, [pc, #408]	@ (8018868 <mqtt_client_connect+0x2b4>)
 80186d0:	f44f 62a5 	mov.w	r2, #1320	@ 0x528
 80186d4:	496a      	ldr	r1, [pc, #424]	@ (8018880 <mqtt_client_connect+0x2cc>)
 80186d6:	4866      	ldr	r0, [pc, #408]	@ (8018870 <mqtt_client_connect+0x2bc>)
 80186d8:	f009 fb68 	bl	8021dac <iprintf>
 80186dc:	f06f 0305 	mvn.w	r3, #5
 80186e0:	e1d5      	b.n	8018a8e <mqtt_client_connect+0x4da>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d109      	bne.n	80186fc <mqtt_client_connect+0x148>
 80186e8:	4b5f      	ldr	r3, [pc, #380]	@ (8018868 <mqtt_client_connect+0x2b4>)
 80186ea:	f240 5229 	movw	r2, #1321	@ 0x529
 80186ee:	4965      	ldr	r1, [pc, #404]	@ (8018884 <mqtt_client_connect+0x2d0>)
 80186f0:	485f      	ldr	r0, [pc, #380]	@ (8018870 <mqtt_client_connect+0x2bc>)
 80186f2:	f009 fb5b 	bl	8021dac <iprintf>
 80186f6:	f06f 0305 	mvn.w	r3, #5
 80186fa:	e1c8      	b.n	8018a8e <mqtt_client_connect+0x4da>
    will_topic_len = (u8_t)len;
 80186fc:	69bb      	ldr	r3, [r7, #24]
 80186fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    len = strlen(client_info->will_msg);
 8018702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018704:	695b      	ldr	r3, [r3, #20]
 8018706:	4618      	mov	r0, r3
 8018708:	f7e7 fe4a 	bl	80003a0 <strlen>
 801870c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 801870e:	69bb      	ldr	r3, [r7, #24]
 8018710:	2bff      	cmp	r3, #255	@ 0xff
 8018712:	d909      	bls.n	8018728 <mqtt_client_connect+0x174>
 8018714:	4b54      	ldr	r3, [pc, #336]	@ (8018868 <mqtt_client_connect+0x2b4>)
 8018716:	f240 522c 	movw	r2, #1324	@ 0x52c
 801871a:	495b      	ldr	r1, [pc, #364]	@ (8018888 <mqtt_client_connect+0x2d4>)
 801871c:	4854      	ldr	r0, [pc, #336]	@ (8018870 <mqtt_client_connect+0x2bc>)
 801871e:	f009 fb45 	bl	8021dac <iprintf>
 8018722:	f06f 0305 	mvn.w	r3, #5
 8018726:	e1b2      	b.n	8018a8e <mqtt_client_connect+0x4da>
    will_msg_len = (u8_t)len;
 8018728:	69bb      	ldr	r3, [r7, #24]
 801872a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 801872e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018730:	1c9a      	adds	r2, r3, #2
 8018732:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018736:	4413      	add	r3, r2
 8018738:	1c9a      	adds	r2, r3, #2
 801873a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801873e:	4413      	add	r3, r2
 8018740:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8018742:	69bb      	ldr	r3, [r7, #24]
 8018744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018748:	d309      	bcc.n	801875e <mqtt_client_connect+0x1aa>
 801874a:	4b47      	ldr	r3, [pc, #284]	@ (8018868 <mqtt_client_connect+0x2b4>)
 801874c:	f240 522f 	movw	r2, #1327	@ 0x52f
 8018750:	494e      	ldr	r1, [pc, #312]	@ (801888c <mqtt_client_connect+0x2d8>)
 8018752:	4847      	ldr	r0, [pc, #284]	@ (8018870 <mqtt_client_connect+0x2bc>)
 8018754:	f009 fb2a 	bl	8021dac <iprintf>
 8018758:	f06f 0305 	mvn.w	r3, #5
 801875c:	e197      	b.n	8018a8e <mqtt_client_connect+0x4da>
    remaining_length = (u16_t)len;
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_user != NULL) {
 8018762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d03d      	beq.n	80187e6 <mqtt_client_connect+0x232>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 801876a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801876e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_user);
 8018776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018778:	685b      	ldr	r3, [r3, #4]
 801877a:	4618      	mov	r0, r3
 801877c:	f7e7 fe10 	bl	80003a0 <strlen>
 8018780:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8018782:	69bb      	ldr	r3, [r7, #24]
 8018784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018788:	d309      	bcc.n	801879e <mqtt_client_connect+0x1ea>
 801878a:	4b37      	ldr	r3, [pc, #220]	@ (8018868 <mqtt_client_connect+0x2b4>)
 801878c:	f240 5235 	movw	r2, #1333	@ 0x535
 8018790:	493f      	ldr	r1, [pc, #252]	@ (8018890 <mqtt_client_connect+0x2dc>)
 8018792:	4837      	ldr	r0, [pc, #220]	@ (8018870 <mqtt_client_connect+0x2bc>)
 8018794:	f009 fb0a 	bl	8021dac <iprintf>
 8018798:	f06f 0305 	mvn.w	r3, #5
 801879c:	e177      	b.n	8018a8e <mqtt_client_connect+0x4da>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d109      	bne.n	80187b8 <mqtt_client_connect+0x204>
 80187a4:	4b30      	ldr	r3, [pc, #192]	@ (8018868 <mqtt_client_connect+0x2b4>)
 80187a6:	f240 5236 	movw	r2, #1334	@ 0x536
 80187aa:	493a      	ldr	r1, [pc, #232]	@ (8018894 <mqtt_client_connect+0x2e0>)
 80187ac:	4830      	ldr	r0, [pc, #192]	@ (8018870 <mqtt_client_connect+0x2bc>)
 80187ae:	f009 fafd 	bl	8021dac <iprintf>
 80187b2:	f06f 0305 	mvn.w	r3, #5
 80187b6:	e16a      	b.n	8018a8e <mqtt_client_connect+0x4da>
    client_user_len = (u16_t)len;
 80187b8:	69bb      	ldr	r3, [r7, #24]
 80187ba:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 80187bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80187be:	1c9a      	adds	r2, r3, #2
 80187c0:	8bfb      	ldrh	r3, [r7, #30]
 80187c2:	4413      	add	r3, r2
 80187c4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80187c6:	69bb      	ldr	r3, [r7, #24]
 80187c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80187cc:	d309      	bcc.n	80187e2 <mqtt_client_connect+0x22e>
 80187ce:	4b26      	ldr	r3, [pc, #152]	@ (8018868 <mqtt_client_connect+0x2b4>)
 80187d0:	f240 5239 	movw	r2, #1337	@ 0x539
 80187d4:	492d      	ldr	r1, [pc, #180]	@ (801888c <mqtt_client_connect+0x2d8>)
 80187d6:	4826      	ldr	r0, [pc, #152]	@ (8018870 <mqtt_client_connect+0x2bc>)
 80187d8:	f009 fae8 	bl	8021dac <iprintf>
 80187dc:	f06f 0305 	mvn.w	r3, #5
 80187e0:	e155      	b.n	8018a8e <mqtt_client_connect+0x4da>
    remaining_length = (u16_t)len;
 80187e2:	69bb      	ldr	r3, [r7, #24]
 80187e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_pass != NULL) {
 80187e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187e8:	689b      	ldr	r3, [r3, #8]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d05a      	beq.n	80188a4 <mqtt_client_connect+0x2f0>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80187ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80187f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_pass);
 80187fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187fc:	689b      	ldr	r3, [r3, #8]
 80187fe:	4618      	mov	r0, r3
 8018800:	f7e7 fdce 	bl	80003a0 <strlen>
 8018804:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8018806:	69bb      	ldr	r3, [r7, #24]
 8018808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801880c:	d309      	bcc.n	8018822 <mqtt_client_connect+0x26e>
 801880e:	4b16      	ldr	r3, [pc, #88]	@ (8018868 <mqtt_client_connect+0x2b4>)
 8018810:	f240 523f 	movw	r2, #1343	@ 0x53f
 8018814:	4920      	ldr	r1, [pc, #128]	@ (8018898 <mqtt_client_connect+0x2e4>)
 8018816:	4816      	ldr	r0, [pc, #88]	@ (8018870 <mqtt_client_connect+0x2bc>)
 8018818:	f009 fac8 	bl	8021dac <iprintf>
 801881c:	f06f 0305 	mvn.w	r3, #5
 8018820:	e135      	b.n	8018a8e <mqtt_client_connect+0x4da>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8018822:	69bb      	ldr	r3, [r7, #24]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d109      	bne.n	801883c <mqtt_client_connect+0x288>
 8018828:	4b0f      	ldr	r3, [pc, #60]	@ (8018868 <mqtt_client_connect+0x2b4>)
 801882a:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 801882e:	491b      	ldr	r1, [pc, #108]	@ (801889c <mqtt_client_connect+0x2e8>)
 8018830:	480f      	ldr	r0, [pc, #60]	@ (8018870 <mqtt_client_connect+0x2bc>)
 8018832:	f009 fabb 	bl	8021dac <iprintf>
 8018836:	f06f 0305 	mvn.w	r3, #5
 801883a:	e128      	b.n	8018a8e <mqtt_client_connect+0x4da>
    client_pass_len = (u16_t)len;
 801883c:	69bb      	ldr	r3, [r7, #24]
 801883e:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8018840:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018842:	1c9a      	adds	r2, r3, #2
 8018844:	8bbb      	ldrh	r3, [r7, #28]
 8018846:	4413      	add	r3, r2
 8018848:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 801884a:	69bb      	ldr	r3, [r7, #24]
 801884c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018850:	d326      	bcc.n	80188a0 <mqtt_client_connect+0x2ec>
 8018852:	4b05      	ldr	r3, [pc, #20]	@ (8018868 <mqtt_client_connect+0x2b4>)
 8018854:	f240 5243 	movw	r2, #1347	@ 0x543
 8018858:	490c      	ldr	r1, [pc, #48]	@ (801888c <mqtt_client_connect+0x2d8>)
 801885a:	4805      	ldr	r0, [pc, #20]	@ (8018870 <mqtt_client_connect+0x2bc>)
 801885c:	f009 faa6 	bl	8021dac <iprintf>
 8018860:	f06f 0305 	mvn.w	r3, #5
 8018864:	e113      	b.n	8018a8e <mqtt_client_connect+0x4da>
 8018866:	bf00      	nop
 8018868:	08025e60 	.word	0x08025e60
 801886c:	0802630c 	.word	0x0802630c
 8018870:	08025f04 	.word	0x08025f04
 8018874:	08026330 	.word	0x08026330
 8018878:	08026358 	.word	0x08026358
 801887c:	08026384 	.word	0x08026384
 8018880:	080263b8 	.word	0x080263b8
 8018884:	080263f8 	.word	0x080263f8
 8018888:	08026438 	.word	0x08026438
 801888c:	08026474 	.word	0x08026474
 8018890:	080264a4 	.word	0x080264a4
 8018894:	080264e4 	.word	0x080264e4
 8018898:	08026528 	.word	0x08026528
 801889c:	08026568 	.word	0x08026568
    remaining_length = (u16_t)len;
 80188a0:	69bb      	ldr	r3, [r7, #24]
 80188a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80188a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80188a8:	f043 0302 	orr.w	r3, r3, #2
 80188ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  len = strlen(client_info->client_id);
 80188b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7e7 fd73 	bl	80003a0 <strlen>
 80188ba:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80188bc:	69bb      	ldr	r3, [r7, #24]
 80188be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80188c2:	d309      	bcc.n	80188d8 <mqtt_client_connect+0x324>
 80188c4:	4b74      	ldr	r3, [pc, #464]	@ (8018a98 <mqtt_client_connect+0x4e4>)
 80188c6:	f240 524b 	movw	r2, #1355	@ 0x54b
 80188ca:	4974      	ldr	r1, [pc, #464]	@ (8018a9c <mqtt_client_connect+0x4e8>)
 80188cc:	4874      	ldr	r0, [pc, #464]	@ (8018aa0 <mqtt_client_connect+0x4ec>)
 80188ce:	f009 fa6d 	bl	8021dac <iprintf>
 80188d2:	f06f 0305 	mvn.w	r3, #5
 80188d6:	e0da      	b.n	8018a8e <mqtt_client_connect+0x4da>
  client_id_length = (u16_t)len;
 80188d8:	69bb      	ldr	r3, [r7, #24]
 80188da:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 80188dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80188de:	1c9a      	adds	r2, r3, #2
 80188e0:	8afb      	ldrh	r3, [r7, #22]
 80188e2:	4413      	add	r3, r2
 80188e4:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80188e6:	69bb      	ldr	r3, [r7, #24]
 80188e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80188ec:	d309      	bcc.n	8018902 <mqtt_client_connect+0x34e>
 80188ee:	4b6a      	ldr	r3, [pc, #424]	@ (8018a98 <mqtt_client_connect+0x4e4>)
 80188f0:	f240 524e 	movw	r2, #1358	@ 0x54e
 80188f4:	496b      	ldr	r1, [pc, #428]	@ (8018aa4 <mqtt_client_connect+0x4f0>)
 80188f6:	486a      	ldr	r0, [pc, #424]	@ (8018aa0 <mqtt_client_connect+0x4ec>)
 80188f8:	f009 fa58 	bl	8021dac <iprintf>
 80188fc:	f06f 0305 	mvn.w	r3, #5
 8018900:	e0c5      	b.n	8018a8e <mqtt_client_connect+0x4da>
  remaining_length = (u16_t)len;
 8018902:	69bb      	ldr	r3, [r7, #24]
 8018904:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 801890c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801890e:	4611      	mov	r1, r2
 8018910:	4618      	mov	r0, r3
 8018912:	f7fe ff31 	bl	8017778 <mqtt_output_check_space>
 8018916:	4603      	mov	r3, r0
 8018918:	2b00      	cmp	r3, #0
 801891a:	d102      	bne.n	8018922 <mqtt_client_connect+0x36e>
    return ERR_MEM;
 801891c:	f04f 33ff 	mov.w	r3, #4294967295
 8018920:	e0b5      	b.n	8018a8e <mqtt_client_connect+0x4da>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8018922:	2000      	movs	r0, #0
 8018924:	f003 f80c 	bl	801b940 <tcp_new_ip_type>
 8018928:	4602      	mov	r2, r0
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	68db      	ldr	r3, [r3, #12]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d102      	bne.n	801893c <mqtt_client_connect+0x388>
    return ERR_MEM;
 8018936:	f04f 33ff 	mov.w	r3, #4294967295
 801893a:	e0a8      	b.n	8018a8e <mqtt_client_connect+0x4da>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	68f9      	ldr	r1, [r7, #12]
 8018942:	4618      	mov	r0, r3
 8018944:	f003 f80a 	bl	801b95c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	2200      	movs	r2, #0
 801894e:	4956      	ldr	r1, [pc, #344]	@ (8018aa8 <mqtt_client_connect+0x4f4>)
 8018950:	4618      	mov	r0, r3
 8018952:	f001 ff29 	bl	801a7a8 <tcp_bind>
 8018956:	4603      	mov	r3, r0
 8018958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801895c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018960:	2b00      	cmp	r3, #0
 8018962:	f040 8087 	bne.w	8018a74 <mqtt_client_connect+0x4c0>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	68d8      	ldr	r0, [r3, #12]
 801896a:	88fa      	ldrh	r2, [r7, #6]
 801896c:	4b4f      	ldr	r3, [pc, #316]	@ (8018aac <mqtt_client_connect+0x4f8>)
 801896e:	68b9      	ldr	r1, [r7, #8]
 8018970:	f002 f8a6 	bl	801aac0 <tcp_connect>
 8018974:	4603      	mov	r3, r0
 8018976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801897a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801897e:	2b00      	cmp	r3, #0
 8018980:	d17a      	bne.n	8018a78 <mqtt_client_connect+0x4c4>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	68db      	ldr	r3, [r3, #12]
 8018986:	494a      	ldr	r1, [pc, #296]	@ (8018ab0 <mqtt_client_connect+0x4fc>)
 8018988:	4618      	mov	r0, r3
 801898a:	f003 f841 	bl	801ba10 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	2201      	movs	r2, #1
 8018992:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 801899a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801899c:	9301      	str	r3, [sp, #4]
 801899e:	2300      	movs	r3, #0
 80189a0:	9300      	str	r3, [sp, #0]
 80189a2:	2300      	movs	r3, #0
 80189a4:	2200      	movs	r2, #0
 80189a6:	2101      	movs	r1, #1
 80189a8:	f7fe fe9b 	bl	80176e2 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80189b2:	2204      	movs	r2, #4
 80189b4:	493f      	ldr	r1, [pc, #252]	@ (8018ab4 <mqtt_client_connect+0x500>)
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7fe fe67 	bl	801768a <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80189c2:	2104      	movs	r1, #4
 80189c4:	4618      	mov	r0, r3
 80189c6:	f7fe fe1b 	bl	8017600 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	f603 23ac 	addw	r3, r3, #2732	@ 0xaac
 80189d0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80189d4:	4611      	mov	r1, r2
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7fe fe12 	bl	8017600 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	f603 22ac 	addw	r2, r3, #2732	@ 0xaac
 80189e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189e4:	899b      	ldrh	r3, [r3, #12]
 80189e6:	4619      	mov	r1, r3
 80189e8:	4610      	mov	r0, r2
 80189ea:	f7fe fe18 	bl	801761e <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 80189f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	8afa      	ldrh	r2, [r7, #22]
 80189fa:	4619      	mov	r1, r3
 80189fc:	f7fe fe45 	bl	801768a <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8018a00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018a04:	f003 0304 	and.w	r3, r3, #4
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d015      	beq.n	8018a38 <mqtt_client_connect+0x484>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 8018a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a14:	691b      	ldr	r3, [r3, #16]
 8018a16:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8018a1a:	b292      	uxth	r2, r2
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	f7fe fe34 	bl	801768a <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 8018a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a2a:	695b      	ldr	r3, [r3, #20]
 8018a2c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8018a30:	b292      	uxth	r2, r2
 8018a32:	4619      	mov	r1, r3
 8018a34:	f7fe fe29 	bl	801768a <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8018a38:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	da08      	bge.n	8018a52 <mqtt_client_connect+0x49e>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 8018a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a48:	685b      	ldr	r3, [r3, #4]
 8018a4a:	8bfa      	ldrh	r2, [r7, #30]
 8018a4c:	4619      	mov	r1, r3
 8018a4e:	f7fe fe1c 	bl	801768a <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8018a52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d008      	beq.n	8018a70 <mqtt_client_connect+0x4bc>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	f603 20ac 	addw	r0, r3, #2732	@ 0xaac
 8018a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a66:	689b      	ldr	r3, [r3, #8]
 8018a68:	8bba      	ldrh	r2, [r7, #28]
 8018a6a:	4619      	mov	r1, r3
 8018a6c:	f7fe fe0d 	bl	801768a <mqtt_output_append_string>
  }
  return ERR_OK;
 8018a70:	2300      	movs	r3, #0
 8018a72:	e00c      	b.n	8018a8e <mqtt_client_connect+0x4da>
    goto tcp_fail;
 8018a74:	bf00      	nop
 8018a76:	e000      	b.n	8018a7a <mqtt_client_connect+0x4c6>
    goto tcp_fail;
 8018a78:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	68db      	ldr	r3, [r3, #12]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f001 fe86 	bl	801a790 <tcp_abort>
  client->conn = NULL;
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	2200      	movs	r2, #0
 8018a88:	60da      	str	r2, [r3, #12]
  return err;
 8018a8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	3728      	adds	r7, #40	@ 0x28
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
 8018a96:	bf00      	nop
 8018a98:	08025e60 	.word	0x08025e60
 8018a9c:	080265ac 	.word	0x080265ac
 8018aa0:	08025f04 	.word	0x08025f04
 8018aa4:	08026474 	.word	0x08026474
 8018aa8:	08028a4c 	.word	0x08028a4c
 8018aac:	08018159 	.word	0x08018159
 8018ab0:	080180e1 	.word	0x080180e1
 8018ab4:	080265e8 	.word	0x080265e8

08018ab8 <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b082      	sub	sp, #8
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8018ac0:	f7f7 f9ee 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <mqtt_client_is_connected+0x20>
 8018aca:	4b09      	ldr	r3, [pc, #36]	@ (8018af0 <mqtt_client_is_connected+0x38>)
 8018acc:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8018ad0:	4908      	ldr	r1, [pc, #32]	@ (8018af4 <mqtt_client_is_connected+0x3c>)
 8018ad2:	4809      	ldr	r0, [pc, #36]	@ (8018af8 <mqtt_client_is_connected+0x40>)
 8018ad4:	f009 f96a 	bl	8021dac <iprintf>
  return client->conn_state == MQTT_CONNECTED;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	7a9b      	ldrb	r3, [r3, #10]
 8018adc:	2b03      	cmp	r3, #3
 8018ade:	bf0c      	ite	eq
 8018ae0:	2301      	moveq	r3, #1
 8018ae2:	2300      	movne	r3, #0
 8018ae4:	b2db      	uxtb	r3, r3
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	08025e60 	.word	0x08025e60
 8018af4:	08026610 	.word	0x08026610
 8018af8:	08025f04 	.word	0x08025f04

08018afc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b082      	sub	sp, #8
 8018b00:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8018b02:	2006      	movs	r0, #6
 8018b04:	f7fe f9f2 	bl	8016eec <memp_malloc>
 8018b08:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d004      	beq.n	8018b1a <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8018b10:	2210      	movs	r2, #16
 8018b12:	2100      	movs	r1, #0
 8018b14:	6878      	ldr	r0, [r7, #4]
 8018b16:	f009 faef 	bl	80220f8 <memset>
  }
  return buf;
 8018b1a:	687b      	ldr	r3, [r7, #4]
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	3708      	adds	r7, #8
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}

08018b24 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b082      	sub	sp, #8
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d013      	beq.n	8018b5a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d00b      	beq.n	8018b52 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f000 ff28 	bl	8019994 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	2200      	movs	r2, #0
 8018b48:	605a      	str	r2, [r3, #4]
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	685a      	ldr	r2, [r3, #4]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8018b52:	6879      	ldr	r1, [r7, #4]
 8018b54:	2006      	movs	r0, #6
 8018b56:	f7fe fa3f 	bl	8016fd8 <memp_free>
  }
}
 8018b5a:	bf00      	nop
 8018b5c:	3708      	adds	r7, #8
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
	...

08018b64 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b082      	sub	sp, #8
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	460b      	mov	r3, r1
 8018b6e:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d107      	bne.n	8018b86 <netbuf_alloc+0x22>
 8018b76:	4b1c      	ldr	r3, [pc, #112]	@ (8018be8 <netbuf_alloc+0x84>)
 8018b78:	2268      	movs	r2, #104	@ 0x68
 8018b7a:	491c      	ldr	r1, [pc, #112]	@ (8018bec <netbuf_alloc+0x88>)
 8018b7c:	481c      	ldr	r0, [pc, #112]	@ (8018bf0 <netbuf_alloc+0x8c>)
 8018b7e:	f009 f915 	bl	8021dac <iprintf>
 8018b82:	2300      	movs	r3, #0
 8018b84:	e02b      	b.n	8018bde <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d004      	beq.n	8018b98 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	4618      	mov	r0, r3
 8018b94:	f000 fefe 	bl	8019994 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8018b98:	887b      	ldrh	r3, [r7, #2]
 8018b9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018b9e:	4619      	mov	r1, r3
 8018ba0:	2036      	movs	r0, #54	@ 0x36
 8018ba2:	f000 fc15 	bl	80193d0 <pbuf_alloc>
 8018ba6:	4602      	mov	r2, r0
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d101      	bne.n	8018bb8 <netbuf_alloc+0x54>
    return NULL;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	e012      	b.n	8018bde <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	895b      	ldrh	r3, [r3, #10]
 8018bbe:	887a      	ldrh	r2, [r7, #2]
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	d905      	bls.n	8018bd0 <netbuf_alloc+0x6c>
 8018bc4:	4b08      	ldr	r3, [pc, #32]	@ (8018be8 <netbuf_alloc+0x84>)
 8018bc6:	2272      	movs	r2, #114	@ 0x72
 8018bc8:	490a      	ldr	r1, [pc, #40]	@ (8018bf4 <netbuf_alloc+0x90>)
 8018bca:	4809      	ldr	r0, [pc, #36]	@ (8018bf0 <netbuf_alloc+0x8c>)
 8018bcc:	f009 f8ee 	bl	8021dac <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681a      	ldr	r2, [r3, #0]
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	685b      	ldr	r3, [r3, #4]
}
 8018bde:	4618      	mov	r0, r3
 8018be0:	3708      	adds	r7, #8
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}
 8018be6:	bf00      	nop
 8018be8:	0802663c 	.word	0x0802663c
 8018bec:	0802669c 	.word	0x0802669c
 8018bf0:	080266b8 	.word	0x080266b8
 8018bf4:	080266e0 	.word	0x080266e0

08018bf8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b084      	sub	sp, #16
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	60f8      	str	r0, [r7, #12]
 8018c00:	60b9      	str	r1, [r7, #8]
 8018c02:	4613      	mov	r3, r2
 8018c04:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d108      	bne.n	8018c1e <netbuf_ref+0x26>
 8018c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8018c80 <netbuf_ref+0x88>)
 8018c0e:	2299      	movs	r2, #153	@ 0x99
 8018c10:	491c      	ldr	r1, [pc, #112]	@ (8018c84 <netbuf_ref+0x8c>)
 8018c12:	481d      	ldr	r0, [pc, #116]	@ (8018c88 <netbuf_ref+0x90>)
 8018c14:	f009 f8ca 	bl	8021dac <iprintf>
 8018c18:	f06f 030f 	mvn.w	r3, #15
 8018c1c:	e02b      	b.n	8018c76 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d004      	beq.n	8018c30 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f000 feb2 	bl	8019994 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8018c30:	2241      	movs	r2, #65	@ 0x41
 8018c32:	2100      	movs	r1, #0
 8018c34:	2036      	movs	r0, #54	@ 0x36
 8018c36:	f000 fbcb 	bl	80193d0 <pbuf_alloc>
 8018c3a:	4602      	mov	r2, r0
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d105      	bne.n	8018c54 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8018c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c52:	e010      	b.n	8018c76 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	68ba      	ldr	r2, [r7, #8]
 8018c5a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	88fa      	ldrh	r2, [r7, #6]
 8018c62:	811a      	strh	r2, [r3, #8]
 8018c64:	68fa      	ldr	r2, [r7, #12]
 8018c66:	6812      	ldr	r2, [r2, #0]
 8018c68:	891b      	ldrh	r3, [r3, #8]
 8018c6a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	681a      	ldr	r2, [r3, #0]
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8018c74:	2300      	movs	r3, #0
}
 8018c76:	4618      	mov	r0, r3
 8018c78:	3710      	adds	r7, #16
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	0802663c 	.word	0x0802663c
 8018c84:	08026720 	.word	0x08026720
 8018c88:	080266b8 	.word	0x080266b8

08018c8c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8018c90:	bf00      	nop
 8018c92:	46bd      	mov	sp, r7
 8018c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c98:	4770      	bx	lr
	...

08018c9c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b086      	sub	sp, #24
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
 8018ca8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 8018caa:	f7f7 f8f9 	bl	800fea0 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d108      	bne.n	8018cc6 <netif_add+0x2a>
 8018cb4:	4b57      	ldr	r3, [pc, #348]	@ (8018e14 <netif_add+0x178>)
 8018cb6:	f240 1227 	movw	r2, #295	@ 0x127
 8018cba:	4957      	ldr	r1, [pc, #348]	@ (8018e18 <netif_add+0x17c>)
 8018cbc:	4857      	ldr	r0, [pc, #348]	@ (8018e1c <netif_add+0x180>)
 8018cbe:	f009 f875 	bl	8021dac <iprintf>
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	e0a2      	b.n	8018e0c <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8018cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d108      	bne.n	8018cde <netif_add+0x42>
 8018ccc:	4b51      	ldr	r3, [pc, #324]	@ (8018e14 <netif_add+0x178>)
 8018cce:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8018cd2:	4953      	ldr	r1, [pc, #332]	@ (8018e20 <netif_add+0x184>)
 8018cd4:	4851      	ldr	r0, [pc, #324]	@ (8018e1c <netif_add+0x180>)
 8018cd6:	f009 f869 	bl	8021dac <iprintf>
 8018cda:	2300      	movs	r3, #0
 8018cdc:	e096      	b.n	8018e0c <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8018cde:	68bb      	ldr	r3, [r7, #8]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d101      	bne.n	8018ce8 <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8018ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8018e24 <netif_add+0x188>)
 8018ce6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d101      	bne.n	8018cf2 <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8018cee:	4b4d      	ldr	r3, [pc, #308]	@ (8018e24 <netif_add+0x188>)
 8018cf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d101      	bne.n	8018cfc <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8018cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8018e24 <netif_add+0x188>)
 8018cfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	2200      	movs	r2, #0
 8018d06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	4a45      	ldr	r2, [pc, #276]	@ (8018e28 <netif_add+0x18c>)
 8018d12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	2200      	movs	r2, #0
 8018d18:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	2200      	movs	r2, #0
 8018d26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	6a3a      	ldr	r2, [r7, #32]
 8018d2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8018d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8018e2c <netif_add+0x190>)
 8018d30:	781a      	ldrb	r2, [r3, #0]
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018d3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	68b9      	ldr	r1, [r7, #8]
 8018d44:	68f8      	ldr	r0, [r7, #12]
 8018d46:	f000 f913 	bl	8018f70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8018d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d4c:	68f8      	ldr	r0, [r7, #12]
 8018d4e:	4798      	blx	r3
 8018d50:	4603      	mov	r3, r0
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d001      	beq.n	8018d5a <netif_add+0xbe>
    return NULL;
 8018d56:	2300      	movs	r3, #0
 8018d58:	e058      	b.n	8018e0c <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018d60:	2bff      	cmp	r3, #255	@ 0xff
 8018d62:	d103      	bne.n	8018d6c <netif_add+0xd0>
        netif->num = 0;
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	2200      	movs	r2, #0
 8018d68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018d70:	4b2f      	ldr	r3, [pc, #188]	@ (8018e30 <netif_add+0x194>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	617b      	str	r3, [r7, #20]
 8018d76:	e02b      	b.n	8018dd0 <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018d78:	697a      	ldr	r2, [r7, #20]
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d106      	bne.n	8018d8e <netif_add+0xf2>
 8018d80:	4b24      	ldr	r3, [pc, #144]	@ (8018e14 <netif_add+0x178>)
 8018d82:	f240 128b 	movw	r2, #395	@ 0x18b
 8018d86:	492b      	ldr	r1, [pc, #172]	@ (8018e34 <netif_add+0x198>)
 8018d88:	4824      	ldr	r0, [pc, #144]	@ (8018e1c <netif_add+0x180>)
 8018d8a:	f009 f80f 	bl	8021dac <iprintf>
        num_netifs++;
 8018d8e:	693b      	ldr	r3, [r7, #16]
 8018d90:	3301      	adds	r3, #1
 8018d92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8018d94:	693b      	ldr	r3, [r7, #16]
 8018d96:	2bff      	cmp	r3, #255	@ 0xff
 8018d98:	dd06      	ble.n	8018da8 <netif_add+0x10c>
 8018d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8018e14 <netif_add+0x178>)
 8018d9c:	f240 128d 	movw	r2, #397	@ 0x18d
 8018da0:	4925      	ldr	r1, [pc, #148]	@ (8018e38 <netif_add+0x19c>)
 8018da2:	481e      	ldr	r0, [pc, #120]	@ (8018e1c <netif_add+0x180>)
 8018da4:	f009 f802 	bl	8021dac <iprintf>
        if (netif2->num == netif->num) {
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d108      	bne.n	8018dca <netif_add+0x12e>
          netif->num++;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018dbe:	3301      	adds	r3, #1
 8018dc0:	b2da      	uxtb	r2, r3
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8018dc8:	e005      	b.n	8018dd6 <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	617b      	str	r3, [r7, #20]
 8018dd0:	697b      	ldr	r3, [r7, #20]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d1d0      	bne.n	8018d78 <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 8018dd6:	697b      	ldr	r3, [r7, #20]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d1be      	bne.n	8018d5a <netif_add+0xbe>
  }
  if (netif->num == 254) {
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018de2:	2bfe      	cmp	r3, #254	@ 0xfe
 8018de4:	d103      	bne.n	8018dee <netif_add+0x152>
    netif_num = 0;
 8018de6:	4b11      	ldr	r3, [pc, #68]	@ (8018e2c <netif_add+0x190>)
 8018de8:	2200      	movs	r2, #0
 8018dea:	701a      	strb	r2, [r3, #0]
 8018dec:	e006      	b.n	8018dfc <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018df4:	3301      	adds	r3, #1
 8018df6:	b2da      	uxtb	r2, r3
 8018df8:	4b0c      	ldr	r3, [pc, #48]	@ (8018e2c <netif_add+0x190>)
 8018dfa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8018dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8018e30 <netif_add+0x194>)
 8018dfe:	681a      	ldr	r2, [r3, #0]
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8018e04:	4a0a      	ldr	r2, [pc, #40]	@ (8018e30 <netif_add+0x194>)
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8018e0a:	68fb      	ldr	r3, [r7, #12]
}
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	3718      	adds	r7, #24
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}
 8018e14:	08026800 	.word	0x08026800
 8018e18:	080268c0 	.word	0x080268c0
 8018e1c:	0802687c 	.word	0x0802687c
 8018e20:	080268dc 	.word	0x080268dc
 8018e24:	08028a4c 	.word	0x08028a4c
 8018e28:	0801925f 	.word	0x0801925f
 8018e2c:	24012694 	.word	0x24012694
 8018e30:	2401268c 	.word	0x2401268c
 8018e34:	08026900 	.word	0x08026900
 8018e38:	08026914 	.word	0x08026914

08018e3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b082      	sub	sp, #8
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
 8018e44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8018e46:	6839      	ldr	r1, [r7, #0]
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f002 ffad 	bl	801bda8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8018e4e:	6839      	ldr	r1, [r7, #0]
 8018e50:	6878      	ldr	r0, [r7, #4]
 8018e52:	f008 f9bd 	bl	80211d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8018e56:	bf00      	nop
 8018e58:	3708      	adds	r7, #8
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
	...

08018e60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b086      	sub	sp, #24
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	60f8      	str	r0, [r7, #12]
 8018e68:	60b9      	str	r1, [r7, #8]
 8018e6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d106      	bne.n	8018e80 <netif_do_set_ipaddr+0x20>
 8018e72:	4b1d      	ldr	r3, [pc, #116]	@ (8018ee8 <netif_do_set_ipaddr+0x88>)
 8018e74:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8018e78:	491c      	ldr	r1, [pc, #112]	@ (8018eec <netif_do_set_ipaddr+0x8c>)
 8018e7a:	481d      	ldr	r0, [pc, #116]	@ (8018ef0 <netif_do_set_ipaddr+0x90>)
 8018e7c:	f008 ff96 	bl	8021dac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d106      	bne.n	8018e94 <netif_do_set_ipaddr+0x34>
 8018e86:	4b18      	ldr	r3, [pc, #96]	@ (8018ee8 <netif_do_set_ipaddr+0x88>)
 8018e88:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8018e8c:	4917      	ldr	r1, [pc, #92]	@ (8018eec <netif_do_set_ipaddr+0x8c>)
 8018e8e:	4818      	ldr	r0, [pc, #96]	@ (8018ef0 <netif_do_set_ipaddr+0x90>)
 8018e90:	f008 ff8c 	bl	8021dac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	3304      	adds	r3, #4
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d01c      	beq.n	8018edc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8018ea2:	68bb      	ldr	r3, [r7, #8]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	3304      	adds	r3, #4
 8018eac:	681a      	ldr	r2, [r3, #0]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8018eb2:	f107 0314 	add.w	r3, r7, #20
 8018eb6:	4619      	mov	r1, r3
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	f7ff ffbf 	bl	8018e3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d002      	beq.n	8018eca <netif_do_set_ipaddr+0x6a>
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	e000      	b.n	8018ecc <netif_do_set_ipaddr+0x6c>
 8018eca:	2300      	movs	r3, #0
 8018ecc:	68fa      	ldr	r2, [r7, #12]
 8018ece:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8018ed0:	2101      	movs	r1, #1
 8018ed2:	68f8      	ldr	r0, [r7, #12]
 8018ed4:	f000 f8d6 	bl	8019084 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8018ed8:	2301      	movs	r3, #1
 8018eda:	e000      	b.n	8018ede <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8018edc:	2300      	movs	r3, #0
}
 8018ede:	4618      	mov	r0, r3
 8018ee0:	3718      	adds	r7, #24
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	08026800 	.word	0x08026800
 8018eec:	08026944 	.word	0x08026944
 8018ef0:	0802687c 	.word	0x0802687c

08018ef4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8018ef4:	b480      	push	{r7}
 8018ef6:	b085      	sub	sp, #20
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	60f8      	str	r0, [r7, #12]
 8018efc:	60b9      	str	r1, [r7, #8]
 8018efe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	3308      	adds	r3, #8
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	d00a      	beq.n	8018f24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8018f0e:	68bb      	ldr	r3, [r7, #8]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d002      	beq.n	8018f1a <netif_do_set_netmask+0x26>
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	e000      	b.n	8018f1c <netif_do_set_netmask+0x28>
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	68fa      	ldr	r2, [r7, #12]
 8018f1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8018f20:	2301      	movs	r3, #1
 8018f22:	e000      	b.n	8018f26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8018f24:	2300      	movs	r3, #0
}
 8018f26:	4618      	mov	r0, r3
 8018f28:	3714      	adds	r7, #20
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f30:	4770      	bx	lr

08018f32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8018f32:	b480      	push	{r7}
 8018f34:	b085      	sub	sp, #20
 8018f36:	af00      	add	r7, sp, #0
 8018f38:	60f8      	str	r0, [r7, #12]
 8018f3a:	60b9      	str	r1, [r7, #8]
 8018f3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8018f3e:	68bb      	ldr	r3, [r7, #8]
 8018f40:	681a      	ldr	r2, [r3, #0]
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	330c      	adds	r3, #12
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	d00a      	beq.n	8018f62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018f4c:	68bb      	ldr	r3, [r7, #8]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d002      	beq.n	8018f58 <netif_do_set_gw+0x26>
 8018f52:	68bb      	ldr	r3, [r7, #8]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	e000      	b.n	8018f5a <netif_do_set_gw+0x28>
 8018f58:	2300      	movs	r3, #0
 8018f5a:	68fa      	ldr	r2, [r7, #12]
 8018f5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8018f5e:	2301      	movs	r3, #1
 8018f60:	e000      	b.n	8018f64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8018f62:	2300      	movs	r3, #0
}
 8018f64:	4618      	mov	r0, r3
 8018f66:	3714      	adds	r7, #20
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr

08018f70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b088      	sub	sp, #32
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	60f8      	str	r0, [r7, #12]
 8018f78:	60b9      	str	r1, [r7, #8]
 8018f7a:	607a      	str	r2, [r7, #4]
 8018f7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8018f82:	2300      	movs	r3, #0
 8018f84:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 8018f86:	f7f6 ff8b 	bl	800fea0 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018f8a:	68bb      	ldr	r3, [r7, #8]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d101      	bne.n	8018f94 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 8018f90:	4b1c      	ldr	r3, [pc, #112]	@ (8019004 <netif_set_addr+0x94>)
 8018f92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d101      	bne.n	8018f9e <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 8018f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8019004 <netif_set_addr+0x94>)
 8018f9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d101      	bne.n	8018fa8 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 8018fa4:	4b17      	ldr	r3, [pc, #92]	@ (8019004 <netif_set_addr+0x94>)
 8018fa6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d003      	beq.n	8018fb6 <netif_set_addr+0x46>
 8018fae:	68bb      	ldr	r3, [r7, #8]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d101      	bne.n	8018fba <netif_set_addr+0x4a>
 8018fb6:	2301      	movs	r3, #1
 8018fb8:	e000      	b.n	8018fbc <netif_set_addr+0x4c>
 8018fba:	2300      	movs	r3, #0
 8018fbc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d006      	beq.n	8018fd2 <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018fc4:	f107 0310 	add.w	r3, r7, #16
 8018fc8:	461a      	mov	r2, r3
 8018fca:	68b9      	ldr	r1, [r7, #8]
 8018fcc:	68f8      	ldr	r0, [r7, #12]
 8018fce:	f7ff ff47 	bl	8018e60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8018fd2:	69fa      	ldr	r2, [r7, #28]
 8018fd4:	6879      	ldr	r1, [r7, #4]
 8018fd6:	68f8      	ldr	r0, [r7, #12]
 8018fd8:	f7ff ff8c 	bl	8018ef4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018fdc:	69ba      	ldr	r2, [r7, #24]
 8018fde:	6839      	ldr	r1, [r7, #0]
 8018fe0:	68f8      	ldr	r0, [r7, #12]
 8018fe2:	f7ff ffa6 	bl	8018f32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d106      	bne.n	8018ffa <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018fec:	f107 0310 	add.w	r3, r7, #16
 8018ff0:	461a      	mov	r2, r3
 8018ff2:	68b9      	ldr	r1, [r7, #8]
 8018ff4:	68f8      	ldr	r0, [r7, #12]
 8018ff6:	f7ff ff33 	bl	8018e60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018ffa:	bf00      	nop
 8018ffc:	3720      	adds	r7, #32
 8018ffe:	46bd      	mov	sp, r7
 8019000:	bd80      	pop	{r7, pc}
 8019002:	bf00      	nop
 8019004:	08028a4c 	.word	0x08028a4c

08019008 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8019010:	f7f6 ff46 	bl	800fea0 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8019014:	4a03      	ldr	r2, [pc, #12]	@ (8019024 <netif_set_default+0x1c>)
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801901a:	bf00      	nop
 801901c:	3708      	adds	r7, #8
 801901e:	46bd      	mov	sp, r7
 8019020:	bd80      	pop	{r7, pc}
 8019022:	bf00      	nop
 8019024:	24012690 	.word	0x24012690

08019028 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8019030:	f7f6 ff36 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d107      	bne.n	801904a <netif_set_up+0x22>
 801903a:	4b0f      	ldr	r3, [pc, #60]	@ (8019078 <netif_set_up+0x50>)
 801903c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8019040:	490e      	ldr	r1, [pc, #56]	@ (801907c <netif_set_up+0x54>)
 8019042:	480f      	ldr	r0, [pc, #60]	@ (8019080 <netif_set_up+0x58>)
 8019044:	f008 feb2 	bl	8021dac <iprintf>
 8019048:	e013      	b.n	8019072 <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019050:	f003 0301 	and.w	r3, r3, #1
 8019054:	2b00      	cmp	r3, #0
 8019056:	d10c      	bne.n	8019072 <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801905e:	f043 0301 	orr.w	r3, r3, #1
 8019062:	b2da      	uxtb	r2, r3
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801906a:	2103      	movs	r1, #3
 801906c:	6878      	ldr	r0, [r7, #4]
 801906e:	f000 f809 	bl	8019084 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8019072:	3708      	adds	r7, #8
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	08026800 	.word	0x08026800
 801907c:	080269b4 	.word	0x080269b4
 8019080:	0802687c 	.word	0x0802687c

08019084 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b082      	sub	sp, #8
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
 801908c:	460b      	mov	r3, r1
 801908e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d106      	bne.n	80190a4 <netif_issue_reports+0x20>
 8019096:	4b18      	ldr	r3, [pc, #96]	@ (80190f8 <netif_issue_reports+0x74>)
 8019098:	f240 326d 	movw	r2, #877	@ 0x36d
 801909c:	4917      	ldr	r1, [pc, #92]	@ (80190fc <netif_issue_reports+0x78>)
 801909e:	4818      	ldr	r0, [pc, #96]	@ (8019100 <netif_issue_reports+0x7c>)
 80190a0:	f008 fe84 	bl	8021dac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80190aa:	f003 0304 	and.w	r3, r3, #4
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d01e      	beq.n	80190f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80190b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d017      	beq.n	80190f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80190c0:	78fb      	ldrb	r3, [r7, #3]
 80190c2:	f003 0301 	and.w	r3, r3, #1
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d013      	beq.n	80190f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	3304      	adds	r3, #4
 80190ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d00e      	beq.n	80190f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80190da:	f003 0308 	and.w	r3, r3, #8
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d007      	beq.n	80190f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	3304      	adds	r3, #4
 80190e6:	4619      	mov	r1, r3
 80190e8:	6878      	ldr	r0, [r7, #4]
 80190ea:	f7fb fddb 	bl	8014ca4 <etharp_request>
 80190ee:	e000      	b.n	80190f2 <netif_issue_reports+0x6e>
    return;
 80190f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80190f2:	3708      	adds	r7, #8
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	08026800 	.word	0x08026800
 80190fc:	080269d0 	.word	0x080269d0
 8019100:	0802687c 	.word	0x0802687c

08019104 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b082      	sub	sp, #8
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 801910c:	f7f6 fec8 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d107      	bne.n	8019126 <netif_set_down+0x22>
 8019116:	4b12      	ldr	r3, [pc, #72]	@ (8019160 <netif_set_down+0x5c>)
 8019118:	f240 329b 	movw	r2, #923	@ 0x39b
 801911c:	4911      	ldr	r1, [pc, #68]	@ (8019164 <netif_set_down+0x60>)
 801911e:	4812      	ldr	r0, [pc, #72]	@ (8019168 <netif_set_down+0x64>)
 8019120:	f008 fe44 	bl	8021dac <iprintf>
 8019124:	e019      	b.n	801915a <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801912c:	f003 0301 	and.w	r3, r3, #1
 8019130:	2b00      	cmp	r3, #0
 8019132:	d012      	beq.n	801915a <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801913a:	f023 0301 	bic.w	r3, r3, #1
 801913e:	b2da      	uxtb	r2, r3
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801914c:	f003 0308 	and.w	r3, r3, #8
 8019150:	2b00      	cmp	r3, #0
 8019152:	d002      	beq.n	801915a <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 8019154:	6878      	ldr	r0, [r7, #4]
 8019156:	f7fb f95f 	bl	8014418 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801915a:	3708      	adds	r7, #8
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	08026800 	.word	0x08026800
 8019164:	080269f4 	.word	0x080269f4
 8019168:	0802687c 	.word	0x0802687c

0801916c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b082      	sub	sp, #8
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8019174:	f7f6 fe94 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d107      	bne.n	801918e <netif_set_link_up+0x22>
 801917e:	4b13      	ldr	r3, [pc, #76]	@ (80191cc <netif_set_link_up+0x60>)
 8019180:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8019184:	4912      	ldr	r1, [pc, #72]	@ (80191d0 <netif_set_link_up+0x64>)
 8019186:	4813      	ldr	r0, [pc, #76]	@ (80191d4 <netif_set_link_up+0x68>)
 8019188:	f008 fe10 	bl	8021dac <iprintf>
 801918c:	e01b      	b.n	80191c6 <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019194:	f003 0304 	and.w	r3, r3, #4
 8019198:	2b00      	cmp	r3, #0
 801919a:	d114      	bne.n	80191c6 <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80191a2:	f043 0304 	orr.w	r3, r3, #4
 80191a6:	b2da      	uxtb	r2, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80191ae:	2103      	movs	r1, #3
 80191b0:	6878      	ldr	r0, [r7, #4]
 80191b2:	f7ff ff67 	bl	8019084 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	69db      	ldr	r3, [r3, #28]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d003      	beq.n	80191c6 <netif_set_link_up+0x5a>
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	69db      	ldr	r3, [r3, #28]
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80191c6:	3708      	adds	r7, #8
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}
 80191cc:	08026800 	.word	0x08026800
 80191d0:	08026a14 	.word	0x08026a14
 80191d4:	0802687c 	.word	0x0802687c

080191d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b082      	sub	sp, #8
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80191e0:	f7f6 fe5e 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d107      	bne.n	80191fa <netif_set_link_down+0x22>
 80191ea:	4b11      	ldr	r3, [pc, #68]	@ (8019230 <netif_set_link_down+0x58>)
 80191ec:	f240 4206 	movw	r2, #1030	@ 0x406
 80191f0:	4910      	ldr	r1, [pc, #64]	@ (8019234 <netif_set_link_down+0x5c>)
 80191f2:	4811      	ldr	r0, [pc, #68]	@ (8019238 <netif_set_link_down+0x60>)
 80191f4:	f008 fdda 	bl	8021dac <iprintf>
 80191f8:	e017      	b.n	801922a <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019200:	f003 0304 	and.w	r3, r3, #4
 8019204:	2b00      	cmp	r3, #0
 8019206:	d010      	beq.n	801922a <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801920e:	f023 0304 	bic.w	r3, r3, #4
 8019212:	b2da      	uxtb	r2, r3
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	69db      	ldr	r3, [r3, #28]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d003      	beq.n	801922a <netif_set_link_down+0x52>
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	69db      	ldr	r3, [r3, #28]
 8019226:	6878      	ldr	r0, [r7, #4]
 8019228:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801922a:	3708      	adds	r7, #8
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}
 8019230:	08026800 	.word	0x08026800
 8019234:	08026a38 	.word	0x08026a38
 8019238:	0802687c 	.word	0x0802687c

0801923c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8019246:	f7f6 fe2b 	bl	800fea0 <sys_check_core_locking>

  if (netif) {
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d002      	beq.n	8019256 <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	683a      	ldr	r2, [r7, #0]
 8019254:	61da      	str	r2, [r3, #28]
  }
}
 8019256:	bf00      	nop
 8019258:	3708      	adds	r7, #8
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}

0801925e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801925e:	b480      	push	{r7}
 8019260:	b085      	sub	sp, #20
 8019262:	af00      	add	r7, sp, #0
 8019264:	60f8      	str	r0, [r7, #12]
 8019266:	60b9      	str	r1, [r7, #8]
 8019268:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801926a:	f06f 030b 	mvn.w	r3, #11
}
 801926e:	4618      	mov	r0, r3
 8019270:	3714      	adds	r7, #20
 8019272:	46bd      	mov	sp, r7
 8019274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019278:	4770      	bx	lr
	...

0801927c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	4603      	mov	r3, r0
 8019284:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8019286:	f7f6 fe0b 	bl	800fea0 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 801928a:	79fb      	ldrb	r3, [r7, #7]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d013      	beq.n	80192b8 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 8019290:	4b0c      	ldr	r3, [pc, #48]	@ (80192c4 <netif_get_by_index+0x48>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	60fb      	str	r3, [r7, #12]
 8019296:	e00c      	b.n	80192b2 <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801929e:	3301      	adds	r3, #1
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	79fa      	ldrb	r2, [r7, #7]
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d101      	bne.n	80192ac <netif_get_by_index+0x30>
        return netif; /* found! */
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	e006      	b.n	80192ba <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	60fb      	str	r3, [r7, #12]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d1ef      	bne.n	8019298 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 80192b8:	2300      	movs	r3, #0
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	3710      	adds	r7, #16
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}
 80192c2:	bf00      	nop
 80192c4:	2401268c 	.word	0x2401268c

080192c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b082      	sub	sp, #8
 80192cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80192ce:	f000 ff43 	bl	801a158 <sys_arch_protect>
 80192d2:	6038      	str	r0, [r7, #0]
 80192d4:	4b0d      	ldr	r3, [pc, #52]	@ (801930c <pbuf_free_ooseq+0x44>)
 80192d6:	2200      	movs	r2, #0
 80192d8:	701a      	strb	r2, [r3, #0]
 80192da:	6838      	ldr	r0, [r7, #0]
 80192dc:	f000 ff4a 	bl	801a174 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80192e0:	4b0b      	ldr	r3, [pc, #44]	@ (8019310 <pbuf_free_ooseq+0x48>)
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	607b      	str	r3, [r7, #4]
 80192e6:	e00a      	b.n	80192fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d003      	beq.n	80192f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80192f0:	6878      	ldr	r0, [r7, #4]
 80192f2:	f002 fd97 	bl	801be24 <tcp_free_ooseq>
      return;
 80192f6:	e005      	b.n	8019304 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	68db      	ldr	r3, [r3, #12]
 80192fc:	607b      	str	r3, [r7, #4]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d1f1      	bne.n	80192e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019304:	3708      	adds	r7, #8
 8019306:	46bd      	mov	sp, r7
 8019308:	bd80      	pop	{r7, pc}
 801930a:	bf00      	nop
 801930c:	24012695 	.word	0x24012695
 8019310:	240126a8 	.word	0x240126a8

08019314 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b082      	sub	sp, #8
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801931c:	f7ff ffd4 	bl	80192c8 <pbuf_free_ooseq>
}
 8019320:	bf00      	nop
 8019322:	3708      	adds	r7, #8
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}

08019328 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b082      	sub	sp, #8
 801932c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801932e:	f000 ff13 	bl	801a158 <sys_arch_protect>
 8019332:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019334:	4b0f      	ldr	r3, [pc, #60]	@ (8019374 <pbuf_pool_is_empty+0x4c>)
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801933a:	4b0e      	ldr	r3, [pc, #56]	@ (8019374 <pbuf_pool_is_empty+0x4c>)
 801933c:	2201      	movs	r2, #1
 801933e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019340:	6878      	ldr	r0, [r7, #4]
 8019342:	f000 ff17 	bl	801a174 <sys_arch_unprotect>

  if (!queued) {
 8019346:	78fb      	ldrb	r3, [r7, #3]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d10f      	bne.n	801936c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801934c:	2100      	movs	r1, #0
 801934e:	480a      	ldr	r0, [pc, #40]	@ (8019378 <pbuf_pool_is_empty+0x50>)
 8019350:	f007 f886 	bl	8020460 <tcpip_try_callback>
 8019354:	4603      	mov	r3, r0
 8019356:	2b00      	cmp	r3, #0
 8019358:	d008      	beq.n	801936c <pbuf_pool_is_empty+0x44>
 801935a:	f000 fefd 	bl	801a158 <sys_arch_protect>
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	4b04      	ldr	r3, [pc, #16]	@ (8019374 <pbuf_pool_is_empty+0x4c>)
 8019362:	2200      	movs	r2, #0
 8019364:	701a      	strb	r2, [r3, #0]
 8019366:	6878      	ldr	r0, [r7, #4]
 8019368:	f000 ff04 	bl	801a174 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801936c:	bf00      	nop
 801936e:	3708      	adds	r7, #8
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}
 8019374:	24012695 	.word	0x24012695
 8019378:	08019315 	.word	0x08019315

0801937c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801937c:	b480      	push	{r7}
 801937e:	b085      	sub	sp, #20
 8019380:	af00      	add	r7, sp, #0
 8019382:	60f8      	str	r0, [r7, #12]
 8019384:	60b9      	str	r1, [r7, #8]
 8019386:	4611      	mov	r1, r2
 8019388:	461a      	mov	r2, r3
 801938a:	460b      	mov	r3, r1
 801938c:	80fb      	strh	r3, [r7, #6]
 801938e:	4613      	mov	r3, r2
 8019390:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	2200      	movs	r2, #0
 8019396:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	68ba      	ldr	r2, [r7, #8]
 801939c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	88fa      	ldrh	r2, [r7, #6]
 80193a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	88ba      	ldrh	r2, [r7, #4]
 80193a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80193aa:	8b3b      	ldrh	r3, [r7, #24]
 80193ac:	b2da      	uxtb	r2, r3
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	7f3a      	ldrb	r2, [r7, #28]
 80193b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	2201      	movs	r2, #1
 80193bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	2200      	movs	r2, #0
 80193c2:	73da      	strb	r2, [r3, #15]
}
 80193c4:	bf00      	nop
 80193c6:	3714      	adds	r7, #20
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr

080193d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b08c      	sub	sp, #48	@ 0x30
 80193d4:	af02      	add	r7, sp, #8
 80193d6:	4603      	mov	r3, r0
 80193d8:	71fb      	strb	r3, [r7, #7]
 80193da:	460b      	mov	r3, r1
 80193dc:	80bb      	strh	r3, [r7, #4]
 80193de:	4613      	mov	r3, r2
 80193e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80193e2:	79fb      	ldrb	r3, [r7, #7]
 80193e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80193e6:	887b      	ldrh	r3, [r7, #2]
 80193e8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80193ec:	d07f      	beq.n	80194ee <pbuf_alloc+0x11e>
 80193ee:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80193f2:	f300 80c7 	bgt.w	8019584 <pbuf_alloc+0x1b4>
 80193f6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80193fa:	d010      	beq.n	801941e <pbuf_alloc+0x4e>
 80193fc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8019400:	f300 80c0 	bgt.w	8019584 <pbuf_alloc+0x1b4>
 8019404:	2b01      	cmp	r3, #1
 8019406:	d002      	beq.n	801940e <pbuf_alloc+0x3e>
 8019408:	2b41      	cmp	r3, #65	@ 0x41
 801940a:	f040 80bb 	bne.w	8019584 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801940e:	887a      	ldrh	r2, [r7, #2]
 8019410:	88bb      	ldrh	r3, [r7, #4]
 8019412:	4619      	mov	r1, r3
 8019414:	2000      	movs	r0, #0
 8019416:	f000 f8d1 	bl	80195bc <pbuf_alloc_reference>
 801941a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801941c:	e0bc      	b.n	8019598 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801941e:	2300      	movs	r3, #0
 8019420:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8019422:	2300      	movs	r3, #0
 8019424:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8019426:	88bb      	ldrh	r3, [r7, #4]
 8019428:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801942a:	200c      	movs	r0, #12
 801942c:	f7fd fd5e 	bl	8016eec <memp_malloc>
 8019430:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d109      	bne.n	801944c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8019438:	f7ff ff76 	bl	8019328 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801943e:	2b00      	cmp	r3, #0
 8019440:	d002      	beq.n	8019448 <pbuf_alloc+0x78>
            pbuf_free(p);
 8019442:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019444:	f000 faa6 	bl	8019994 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8019448:	2300      	movs	r3, #0
 801944a:	e0a6      	b.n	801959a <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801944c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801944e:	3303      	adds	r3, #3
 8019450:	b29b      	uxth	r3, r3
 8019452:	f023 0303 	bic.w	r3, r3, #3
 8019456:	b29b      	uxth	r3, r3
 8019458:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801945c:	b29b      	uxth	r3, r3
 801945e:	8b7a      	ldrh	r2, [r7, #26]
 8019460:	4293      	cmp	r3, r2
 8019462:	bf28      	it	cs
 8019464:	4613      	movcs	r3, r2
 8019466:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019468:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801946a:	3310      	adds	r3, #16
 801946c:	693a      	ldr	r2, [r7, #16]
 801946e:	4413      	add	r3, r2
 8019470:	3303      	adds	r3, #3
 8019472:	f023 0303 	bic.w	r3, r3, #3
 8019476:	4618      	mov	r0, r3
 8019478:	89f9      	ldrh	r1, [r7, #14]
 801947a:	8b7a      	ldrh	r2, [r7, #26]
 801947c:	2300      	movs	r3, #0
 801947e:	9301      	str	r3, [sp, #4]
 8019480:	887b      	ldrh	r3, [r7, #2]
 8019482:	9300      	str	r3, [sp, #0]
 8019484:	460b      	mov	r3, r1
 8019486:	4601      	mov	r1, r0
 8019488:	6938      	ldr	r0, [r7, #16]
 801948a:	f7ff ff77 	bl	801937c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	685b      	ldr	r3, [r3, #4]
 8019492:	f003 0303 	and.w	r3, r3, #3
 8019496:	2b00      	cmp	r3, #0
 8019498:	d006      	beq.n	80194a8 <pbuf_alloc+0xd8>
 801949a:	4b42      	ldr	r3, [pc, #264]	@ (80195a4 <pbuf_alloc+0x1d4>)
 801949c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80194a0:	4941      	ldr	r1, [pc, #260]	@ (80195a8 <pbuf_alloc+0x1d8>)
 80194a2:	4842      	ldr	r0, [pc, #264]	@ (80195ac <pbuf_alloc+0x1dc>)
 80194a4:	f008 fc82 	bl	8021dac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80194a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80194aa:	3303      	adds	r3, #3
 80194ac:	f023 0303 	bic.w	r3, r3, #3
 80194b0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80194b4:	d106      	bne.n	80194c4 <pbuf_alloc+0xf4>
 80194b6:	4b3b      	ldr	r3, [pc, #236]	@ (80195a4 <pbuf_alloc+0x1d4>)
 80194b8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80194bc:	493c      	ldr	r1, [pc, #240]	@ (80195b0 <pbuf_alloc+0x1e0>)
 80194be:	483b      	ldr	r0, [pc, #236]	@ (80195ac <pbuf_alloc+0x1dc>)
 80194c0:	f008 fc74 	bl	8021dac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80194c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d102      	bne.n	80194d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80194ce:	e002      	b.n	80194d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80194d0:	69fb      	ldr	r3, [r7, #28]
 80194d2:	693a      	ldr	r2, [r7, #16]
 80194d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80194da:	8b7a      	ldrh	r2, [r7, #26]
 80194dc:	89fb      	ldrh	r3, [r7, #14]
 80194de:	1ad3      	subs	r3, r2, r3
 80194e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80194e2:	2300      	movs	r3, #0
 80194e4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80194e6:	8b7b      	ldrh	r3, [r7, #26]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d19e      	bne.n	801942a <pbuf_alloc+0x5a>
      break;
 80194ec:	e054      	b.n	8019598 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80194ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80194f0:	3303      	adds	r3, #3
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	f023 0303 	bic.w	r3, r3, #3
 80194f8:	b29a      	uxth	r2, r3
 80194fa:	88bb      	ldrh	r3, [r7, #4]
 80194fc:	3303      	adds	r3, #3
 80194fe:	b29b      	uxth	r3, r3
 8019500:	f023 0303 	bic.w	r3, r3, #3
 8019504:	b29b      	uxth	r3, r3
 8019506:	4413      	add	r3, r2
 8019508:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801950a:	8b3b      	ldrh	r3, [r7, #24]
 801950c:	3310      	adds	r3, #16
 801950e:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019510:	8b3a      	ldrh	r2, [r7, #24]
 8019512:	88bb      	ldrh	r3, [r7, #4]
 8019514:	3303      	adds	r3, #3
 8019516:	f023 0303 	bic.w	r3, r3, #3
 801951a:	429a      	cmp	r2, r3
 801951c:	d306      	bcc.n	801952c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801951e:	88bb      	ldrh	r3, [r7, #4]
 8019520:	3303      	adds	r3, #3
 8019522:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019526:	697a      	ldr	r2, [r7, #20]
 8019528:	429a      	cmp	r2, r3
 801952a:	d201      	bcs.n	8019530 <pbuf_alloc+0x160>
        return NULL;
 801952c:	2300      	movs	r3, #0
 801952e:	e034      	b.n	801959a <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8019530:	6978      	ldr	r0, [r7, #20]
 8019532:	f7fd fb23 	bl	8016b7c <mem_malloc>
 8019536:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8019538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801953a:	2b00      	cmp	r3, #0
 801953c:	d101      	bne.n	8019542 <pbuf_alloc+0x172>
        return NULL;
 801953e:	2300      	movs	r3, #0
 8019540:	e02b      	b.n	801959a <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019542:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019544:	3310      	adds	r3, #16
 8019546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019548:	4413      	add	r3, r2
 801954a:	3303      	adds	r3, #3
 801954c:	f023 0303 	bic.w	r3, r3, #3
 8019550:	4618      	mov	r0, r3
 8019552:	88b9      	ldrh	r1, [r7, #4]
 8019554:	88ba      	ldrh	r2, [r7, #4]
 8019556:	2300      	movs	r3, #0
 8019558:	9301      	str	r3, [sp, #4]
 801955a:	887b      	ldrh	r3, [r7, #2]
 801955c:	9300      	str	r3, [sp, #0]
 801955e:	460b      	mov	r3, r1
 8019560:	4601      	mov	r1, r0
 8019562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019564:	f7ff ff0a 	bl	801937c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8019568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	f003 0303 	and.w	r3, r3, #3
 8019570:	2b00      	cmp	r3, #0
 8019572:	d010      	beq.n	8019596 <pbuf_alloc+0x1c6>
 8019574:	4b0b      	ldr	r3, [pc, #44]	@ (80195a4 <pbuf_alloc+0x1d4>)
 8019576:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801957a:	490e      	ldr	r1, [pc, #56]	@ (80195b4 <pbuf_alloc+0x1e4>)
 801957c:	480b      	ldr	r0, [pc, #44]	@ (80195ac <pbuf_alloc+0x1dc>)
 801957e:	f008 fc15 	bl	8021dac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8019582:	e008      	b.n	8019596 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019584:	4b07      	ldr	r3, [pc, #28]	@ (80195a4 <pbuf_alloc+0x1d4>)
 8019586:	f240 1227 	movw	r2, #295	@ 0x127
 801958a:	490b      	ldr	r1, [pc, #44]	@ (80195b8 <pbuf_alloc+0x1e8>)
 801958c:	4807      	ldr	r0, [pc, #28]	@ (80195ac <pbuf_alloc+0x1dc>)
 801958e:	f008 fc0d 	bl	8021dac <iprintf>
      return NULL;
 8019592:	2300      	movs	r3, #0
 8019594:	e001      	b.n	801959a <pbuf_alloc+0x1ca>
      break;
 8019596:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8019598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801959a:	4618      	mov	r0, r3
 801959c:	3728      	adds	r7, #40	@ 0x28
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}
 80195a2:	bf00      	nop
 80195a4:	08026a5c 	.word	0x08026a5c
 80195a8:	08026abc 	.word	0x08026abc
 80195ac:	08026aec 	.word	0x08026aec
 80195b0:	08026b14 	.word	0x08026b14
 80195b4:	08026b48 	.word	0x08026b48
 80195b8:	08026b74 	.word	0x08026b74

080195bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b086      	sub	sp, #24
 80195c0:	af02      	add	r7, sp, #8
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	460b      	mov	r3, r1
 80195c6:	807b      	strh	r3, [r7, #2]
 80195c8:	4613      	mov	r3, r2
 80195ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80195cc:	883b      	ldrh	r3, [r7, #0]
 80195ce:	2b41      	cmp	r3, #65	@ 0x41
 80195d0:	d009      	beq.n	80195e6 <pbuf_alloc_reference+0x2a>
 80195d2:	883b      	ldrh	r3, [r7, #0]
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d006      	beq.n	80195e6 <pbuf_alloc_reference+0x2a>
 80195d8:	4b0f      	ldr	r3, [pc, #60]	@ (8019618 <pbuf_alloc_reference+0x5c>)
 80195da:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80195de:	490f      	ldr	r1, [pc, #60]	@ (801961c <pbuf_alloc_reference+0x60>)
 80195e0:	480f      	ldr	r0, [pc, #60]	@ (8019620 <pbuf_alloc_reference+0x64>)
 80195e2:	f008 fbe3 	bl	8021dac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80195e6:	200b      	movs	r0, #11
 80195e8:	f7fd fc80 	bl	8016eec <memp_malloc>
 80195ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d101      	bne.n	80195f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80195f4:	2300      	movs	r3, #0
 80195f6:	e00b      	b.n	8019610 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80195f8:	8879      	ldrh	r1, [r7, #2]
 80195fa:	887a      	ldrh	r2, [r7, #2]
 80195fc:	2300      	movs	r3, #0
 80195fe:	9301      	str	r3, [sp, #4]
 8019600:	883b      	ldrh	r3, [r7, #0]
 8019602:	9300      	str	r3, [sp, #0]
 8019604:	460b      	mov	r3, r1
 8019606:	6879      	ldr	r1, [r7, #4]
 8019608:	68f8      	ldr	r0, [r7, #12]
 801960a:	f7ff feb7 	bl	801937c <pbuf_init_alloced_pbuf>
  return p;
 801960e:	68fb      	ldr	r3, [r7, #12]
}
 8019610:	4618      	mov	r0, r3
 8019612:	3710      	adds	r7, #16
 8019614:	46bd      	mov	sp, r7
 8019616:	bd80      	pop	{r7, pc}
 8019618:	08026a5c 	.word	0x08026a5c
 801961c:	08026b90 	.word	0x08026b90
 8019620:	08026aec 	.word	0x08026aec

08019624 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b088      	sub	sp, #32
 8019628:	af02      	add	r7, sp, #8
 801962a:	607b      	str	r3, [r7, #4]
 801962c:	4603      	mov	r3, r0
 801962e:	73fb      	strb	r3, [r7, #15]
 8019630:	460b      	mov	r3, r1
 8019632:	81bb      	strh	r3, [r7, #12]
 8019634:	4613      	mov	r3, r2
 8019636:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8019638:	7bfb      	ldrb	r3, [r7, #15]
 801963a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801963c:	8a7b      	ldrh	r3, [r7, #18]
 801963e:	3303      	adds	r3, #3
 8019640:	f023 0203 	bic.w	r2, r3, #3
 8019644:	89bb      	ldrh	r3, [r7, #12]
 8019646:	441a      	add	r2, r3
 8019648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801964a:	429a      	cmp	r2, r3
 801964c:	d901      	bls.n	8019652 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801964e:	2300      	movs	r3, #0
 8019650:	e018      	b.n	8019684 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8019652:	6a3b      	ldr	r3, [r7, #32]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d007      	beq.n	8019668 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8019658:	8a7b      	ldrh	r3, [r7, #18]
 801965a:	3303      	adds	r3, #3
 801965c:	f023 0303 	bic.w	r3, r3, #3
 8019660:	6a3a      	ldr	r2, [r7, #32]
 8019662:	4413      	add	r3, r2
 8019664:	617b      	str	r3, [r7, #20]
 8019666:	e001      	b.n	801966c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8019668:	2300      	movs	r3, #0
 801966a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	89b9      	ldrh	r1, [r7, #12]
 8019670:	89ba      	ldrh	r2, [r7, #12]
 8019672:	2302      	movs	r3, #2
 8019674:	9301      	str	r3, [sp, #4]
 8019676:	897b      	ldrh	r3, [r7, #10]
 8019678:	9300      	str	r3, [sp, #0]
 801967a:	460b      	mov	r3, r1
 801967c:	6979      	ldr	r1, [r7, #20]
 801967e:	f7ff fe7d 	bl	801937c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8019682:	687b      	ldr	r3, [r7, #4]
}
 8019684:	4618      	mov	r0, r3
 8019686:	3718      	adds	r7, #24
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}

0801968c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b084      	sub	sp, #16
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
 8019694:	460b      	mov	r3, r1
 8019696:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d106      	bne.n	80196ac <pbuf_realloc+0x20>
 801969e:	4b39      	ldr	r3, [pc, #228]	@ (8019784 <pbuf_realloc+0xf8>)
 80196a0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80196a4:	4938      	ldr	r1, [pc, #224]	@ (8019788 <pbuf_realloc+0xfc>)
 80196a6:	4839      	ldr	r0, [pc, #228]	@ (801978c <pbuf_realloc+0x100>)
 80196a8:	f008 fb80 	bl	8021dac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	891b      	ldrh	r3, [r3, #8]
 80196b0:	887a      	ldrh	r2, [r7, #2]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d261      	bcs.n	801977a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	891a      	ldrh	r2, [r3, #8]
 80196ba:	887b      	ldrh	r3, [r7, #2]
 80196bc:	1ad3      	subs	r3, r2, r3
 80196be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80196c0:	887b      	ldrh	r3, [r7, #2]
 80196c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80196c8:	e018      	b.n	80196fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	895b      	ldrh	r3, [r3, #10]
 80196ce:	897a      	ldrh	r2, [r7, #10]
 80196d0:	1ad3      	subs	r3, r2, r3
 80196d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	891a      	ldrh	r2, [r3, #8]
 80196d8:	893b      	ldrh	r3, [r7, #8]
 80196da:	1ad3      	subs	r3, r2, r3
 80196dc:	b29a      	uxth	r2, r3
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d106      	bne.n	80196fc <pbuf_realloc+0x70>
 80196ee:	4b25      	ldr	r3, [pc, #148]	@ (8019784 <pbuf_realloc+0xf8>)
 80196f0:	f240 12af 	movw	r2, #431	@ 0x1af
 80196f4:	4926      	ldr	r1, [pc, #152]	@ (8019790 <pbuf_realloc+0x104>)
 80196f6:	4825      	ldr	r0, [pc, #148]	@ (801978c <pbuf_realloc+0x100>)
 80196f8:	f008 fb58 	bl	8021dac <iprintf>
  while (rem_len > q->len) {
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	895b      	ldrh	r3, [r3, #10]
 8019700:	897a      	ldrh	r2, [r7, #10]
 8019702:	429a      	cmp	r2, r3
 8019704:	d8e1      	bhi.n	80196ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	7b1b      	ldrb	r3, [r3, #12]
 801970a:	f003 030f 	and.w	r3, r3, #15
 801970e:	2b00      	cmp	r3, #0
 8019710:	d11f      	bne.n	8019752 <pbuf_realloc+0xc6>
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	895b      	ldrh	r3, [r3, #10]
 8019716:	897a      	ldrh	r2, [r7, #10]
 8019718:	429a      	cmp	r2, r3
 801971a:	d01a      	beq.n	8019752 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	7b5b      	ldrb	r3, [r3, #13]
 8019720:	f003 0302 	and.w	r3, r3, #2
 8019724:	2b00      	cmp	r3, #0
 8019726:	d114      	bne.n	8019752 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	685a      	ldr	r2, [r3, #4]
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	1ad2      	subs	r2, r2, r3
 8019730:	897b      	ldrh	r3, [r7, #10]
 8019732:	4413      	add	r3, r2
 8019734:	4619      	mov	r1, r3
 8019736:	68f8      	ldr	r0, [r7, #12]
 8019738:	f7fd f91e 	bl	8016978 <mem_trim>
 801973c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d106      	bne.n	8019752 <pbuf_realloc+0xc6>
 8019744:	4b0f      	ldr	r3, [pc, #60]	@ (8019784 <pbuf_realloc+0xf8>)
 8019746:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801974a:	4912      	ldr	r1, [pc, #72]	@ (8019794 <pbuf_realloc+0x108>)
 801974c:	480f      	ldr	r0, [pc, #60]	@ (801978c <pbuf_realloc+0x100>)
 801974e:	f008 fb2d 	bl	8021dac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	897a      	ldrh	r2, [r7, #10]
 8019756:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	895a      	ldrh	r2, [r3, #10]
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d004      	beq.n	8019772 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	4618      	mov	r0, r3
 801976e:	f000 f911 	bl	8019994 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2200      	movs	r2, #0
 8019776:	601a      	str	r2, [r3, #0]
 8019778:	e000      	b.n	801977c <pbuf_realloc+0xf0>
    return;
 801977a:	bf00      	nop

}
 801977c:	3710      	adds	r7, #16
 801977e:	46bd      	mov	sp, r7
 8019780:	bd80      	pop	{r7, pc}
 8019782:	bf00      	nop
 8019784:	08026a5c 	.word	0x08026a5c
 8019788:	08026ba4 	.word	0x08026ba4
 801978c:	08026aec 	.word	0x08026aec
 8019790:	08026bbc 	.word	0x08026bbc
 8019794:	08026bd4 	.word	0x08026bd4

08019798 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b086      	sub	sp, #24
 801979c:	af00      	add	r7, sp, #0
 801979e:	60f8      	str	r0, [r7, #12]
 80197a0:	60b9      	str	r1, [r7, #8]
 80197a2:	4613      	mov	r3, r2
 80197a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d106      	bne.n	80197ba <pbuf_add_header_impl+0x22>
 80197ac:	4b2b      	ldr	r3, [pc, #172]	@ (801985c <pbuf_add_header_impl+0xc4>)
 80197ae:	f240 12df 	movw	r2, #479	@ 0x1df
 80197b2:	492b      	ldr	r1, [pc, #172]	@ (8019860 <pbuf_add_header_impl+0xc8>)
 80197b4:	482b      	ldr	r0, [pc, #172]	@ (8019864 <pbuf_add_header_impl+0xcc>)
 80197b6:	f008 faf9 	bl	8021dac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d003      	beq.n	80197c8 <pbuf_add_header_impl+0x30>
 80197c0:	68bb      	ldr	r3, [r7, #8]
 80197c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80197c6:	d301      	bcc.n	80197cc <pbuf_add_header_impl+0x34>
    return 1;
 80197c8:	2301      	movs	r3, #1
 80197ca:	e043      	b.n	8019854 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d101      	bne.n	80197d6 <pbuf_add_header_impl+0x3e>
    return 0;
 80197d2:	2300      	movs	r3, #0
 80197d4:	e03e      	b.n	8019854 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	891a      	ldrh	r2, [r3, #8]
 80197de:	8a7b      	ldrh	r3, [r7, #18]
 80197e0:	4413      	add	r3, r2
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	8a7a      	ldrh	r2, [r7, #18]
 80197e6:	429a      	cmp	r2, r3
 80197e8:	d901      	bls.n	80197ee <pbuf_add_header_impl+0x56>
    return 1;
 80197ea:	2301      	movs	r3, #1
 80197ec:	e032      	b.n	8019854 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	7b1b      	ldrb	r3, [r3, #12]
 80197f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80197f4:	8a3b      	ldrh	r3, [r7, #16]
 80197f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d00c      	beq.n	8019818 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	685a      	ldr	r2, [r3, #4]
 8019802:	68bb      	ldr	r3, [r7, #8]
 8019804:	425b      	negs	r3, r3
 8019806:	4413      	add	r3, r2
 8019808:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	3310      	adds	r3, #16
 801980e:	697a      	ldr	r2, [r7, #20]
 8019810:	429a      	cmp	r2, r3
 8019812:	d20d      	bcs.n	8019830 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8019814:	2301      	movs	r3, #1
 8019816:	e01d      	b.n	8019854 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8019818:	79fb      	ldrb	r3, [r7, #7]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d006      	beq.n	801982c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	685a      	ldr	r2, [r3, #4]
 8019822:	68bb      	ldr	r3, [r7, #8]
 8019824:	425b      	negs	r3, r3
 8019826:	4413      	add	r3, r2
 8019828:	617b      	str	r3, [r7, #20]
 801982a:	e001      	b.n	8019830 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801982c:	2301      	movs	r3, #1
 801982e:	e011      	b.n	8019854 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	697a      	ldr	r2, [r7, #20]
 8019834:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	895a      	ldrh	r2, [r3, #10]
 801983a:	8a7b      	ldrh	r3, [r7, #18]
 801983c:	4413      	add	r3, r2
 801983e:	b29a      	uxth	r2, r3
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	891a      	ldrh	r2, [r3, #8]
 8019848:	8a7b      	ldrh	r3, [r7, #18]
 801984a:	4413      	add	r3, r2
 801984c:	b29a      	uxth	r2, r3
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	811a      	strh	r2, [r3, #8]


  return 0;
 8019852:	2300      	movs	r3, #0
}
 8019854:	4618      	mov	r0, r3
 8019856:	3718      	adds	r7, #24
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}
 801985c:	08026a5c 	.word	0x08026a5c
 8019860:	08026bf0 	.word	0x08026bf0
 8019864:	08026aec 	.word	0x08026aec

08019868 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8019872:	2200      	movs	r2, #0
 8019874:	6839      	ldr	r1, [r7, #0]
 8019876:	6878      	ldr	r0, [r7, #4]
 8019878:	f7ff ff8e 	bl	8019798 <pbuf_add_header_impl>
 801987c:	4603      	mov	r3, r0
}
 801987e:	4618      	mov	r0, r3
 8019880:	3708      	adds	r7, #8
 8019882:	46bd      	mov	sp, r7
 8019884:	bd80      	pop	{r7, pc}
	...

08019888 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8019888:	b580      	push	{r7, lr}
 801988a:	b084      	sub	sp, #16
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
 8019890:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d106      	bne.n	80198a6 <pbuf_remove_header+0x1e>
 8019898:	4b20      	ldr	r3, [pc, #128]	@ (801991c <pbuf_remove_header+0x94>)
 801989a:	f240 224b 	movw	r2, #587	@ 0x24b
 801989e:	4920      	ldr	r1, [pc, #128]	@ (8019920 <pbuf_remove_header+0x98>)
 80198a0:	4820      	ldr	r0, [pc, #128]	@ (8019924 <pbuf_remove_header+0x9c>)
 80198a2:	f008 fa83 	bl	8021dac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d003      	beq.n	80198b4 <pbuf_remove_header+0x2c>
 80198ac:	683b      	ldr	r3, [r7, #0]
 80198ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80198b2:	d301      	bcc.n	80198b8 <pbuf_remove_header+0x30>
    return 1;
 80198b4:	2301      	movs	r3, #1
 80198b6:	e02c      	b.n	8019912 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80198b8:	683b      	ldr	r3, [r7, #0]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d101      	bne.n	80198c2 <pbuf_remove_header+0x3a>
    return 0;
 80198be:	2300      	movs	r3, #0
 80198c0:	e027      	b.n	8019912 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	895b      	ldrh	r3, [r3, #10]
 80198ca:	89fa      	ldrh	r2, [r7, #14]
 80198cc:	429a      	cmp	r2, r3
 80198ce:	d908      	bls.n	80198e2 <pbuf_remove_header+0x5a>
 80198d0:	4b12      	ldr	r3, [pc, #72]	@ (801991c <pbuf_remove_header+0x94>)
 80198d2:	f240 2255 	movw	r2, #597	@ 0x255
 80198d6:	4914      	ldr	r1, [pc, #80]	@ (8019928 <pbuf_remove_header+0xa0>)
 80198d8:	4812      	ldr	r0, [pc, #72]	@ (8019924 <pbuf_remove_header+0x9c>)
 80198da:	f008 fa67 	bl	8021dac <iprintf>
 80198de:	2301      	movs	r3, #1
 80198e0:	e017      	b.n	8019912 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	685b      	ldr	r3, [r3, #4]
 80198e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	685a      	ldr	r2, [r3, #4]
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	441a      	add	r2, r3
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	895a      	ldrh	r2, [r3, #10]
 80198f8:	89fb      	ldrh	r3, [r7, #14]
 80198fa:	1ad3      	subs	r3, r2, r3
 80198fc:	b29a      	uxth	r2, r3
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	891a      	ldrh	r2, [r3, #8]
 8019906:	89fb      	ldrh	r3, [r7, #14]
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	b29a      	uxth	r2, r3
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8019910:	2300      	movs	r3, #0
}
 8019912:	4618      	mov	r0, r3
 8019914:	3710      	adds	r7, #16
 8019916:	46bd      	mov	sp, r7
 8019918:	bd80      	pop	{r7, pc}
 801991a:	bf00      	nop
 801991c:	08026a5c 	.word	0x08026a5c
 8019920:	08026bf0 	.word	0x08026bf0
 8019924:	08026aec 	.word	0x08026aec
 8019928:	08026bfc 	.word	0x08026bfc

0801992c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
 8019934:	460b      	mov	r3, r1
 8019936:	807b      	strh	r3, [r7, #2]
 8019938:	4613      	mov	r3, r2
 801993a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801993c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019940:	2b00      	cmp	r3, #0
 8019942:	da08      	bge.n	8019956 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8019944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019948:	425b      	negs	r3, r3
 801994a:	4619      	mov	r1, r3
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	f7ff ff9b 	bl	8019888 <pbuf_remove_header>
 8019952:	4603      	mov	r3, r0
 8019954:	e007      	b.n	8019966 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8019956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801995a:	787a      	ldrb	r2, [r7, #1]
 801995c:	4619      	mov	r1, r3
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f7ff ff1a 	bl	8019798 <pbuf_add_header_impl>
 8019964:	4603      	mov	r3, r0
  }
}
 8019966:	4618      	mov	r0, r3
 8019968:	3708      	adds	r7, #8
 801996a:	46bd      	mov	sp, r7
 801996c:	bd80      	pop	{r7, pc}

0801996e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801996e:	b580      	push	{r7, lr}
 8019970:	b082      	sub	sp, #8
 8019972:	af00      	add	r7, sp, #0
 8019974:	6078      	str	r0, [r7, #4]
 8019976:	460b      	mov	r3, r1
 8019978:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801997a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801997e:	2201      	movs	r2, #1
 8019980:	4619      	mov	r1, r3
 8019982:	6878      	ldr	r0, [r7, #4]
 8019984:	f7ff ffd2 	bl	801992c <pbuf_header_impl>
 8019988:	4603      	mov	r3, r0
}
 801998a:	4618      	mov	r0, r3
 801998c:	3708      	adds	r7, #8
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}
	...

08019994 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b088      	sub	sp, #32
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d10b      	bne.n	80199ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d106      	bne.n	80199b6 <pbuf_free+0x22>
 80199a8:	4b3b      	ldr	r3, [pc, #236]	@ (8019a98 <pbuf_free+0x104>)
 80199aa:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80199ae:	493b      	ldr	r1, [pc, #236]	@ (8019a9c <pbuf_free+0x108>)
 80199b0:	483b      	ldr	r0, [pc, #236]	@ (8019aa0 <pbuf_free+0x10c>)
 80199b2:	f008 f9fb 	bl	8021dac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80199b6:	2300      	movs	r3, #0
 80199b8:	e069      	b.n	8019a8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80199ba:	2300      	movs	r3, #0
 80199bc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80199be:	e062      	b.n	8019a86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80199c0:	f000 fbca 	bl	801a158 <sys_arch_protect>
 80199c4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	7b9b      	ldrb	r3, [r3, #14]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d106      	bne.n	80199dc <pbuf_free+0x48>
 80199ce:	4b32      	ldr	r3, [pc, #200]	@ (8019a98 <pbuf_free+0x104>)
 80199d0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80199d4:	4933      	ldr	r1, [pc, #204]	@ (8019aa4 <pbuf_free+0x110>)
 80199d6:	4832      	ldr	r0, [pc, #200]	@ (8019aa0 <pbuf_free+0x10c>)
 80199d8:	f008 f9e8 	bl	8021dac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	7b9b      	ldrb	r3, [r3, #14]
 80199e0:	3b01      	subs	r3, #1
 80199e2:	b2da      	uxtb	r2, r3
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	739a      	strb	r2, [r3, #14]
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	7b9b      	ldrb	r3, [r3, #14]
 80199ec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80199ee:	69b8      	ldr	r0, [r7, #24]
 80199f0:	f000 fbc0 	bl	801a174 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80199f4:	7dfb      	ldrb	r3, [r7, #23]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d143      	bne.n	8019a82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	7b1b      	ldrb	r3, [r3, #12]
 8019a04:	f003 030f 	and.w	r3, r3, #15
 8019a08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	7b5b      	ldrb	r3, [r3, #13]
 8019a0e:	f003 0302 	and.w	r3, r3, #2
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d011      	beq.n	8019a3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	691b      	ldr	r3, [r3, #16]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d106      	bne.n	8019a30 <pbuf_free+0x9c>
 8019a22:	4b1d      	ldr	r3, [pc, #116]	@ (8019a98 <pbuf_free+0x104>)
 8019a24:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8019a28:	491f      	ldr	r1, [pc, #124]	@ (8019aa8 <pbuf_free+0x114>)
 8019a2a:	481d      	ldr	r0, [pc, #116]	@ (8019aa0 <pbuf_free+0x10c>)
 8019a2c:	f008 f9be 	bl	8021dac <iprintf>
        pc->custom_free_function(p);
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	691b      	ldr	r3, [r3, #16]
 8019a34:	6878      	ldr	r0, [r7, #4]
 8019a36:	4798      	blx	r3
 8019a38:	e01d      	b.n	8019a76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8019a3a:	7bfb      	ldrb	r3, [r7, #15]
 8019a3c:	2b02      	cmp	r3, #2
 8019a3e:	d104      	bne.n	8019a4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8019a40:	6879      	ldr	r1, [r7, #4]
 8019a42:	200c      	movs	r0, #12
 8019a44:	f7fd fac8 	bl	8016fd8 <memp_free>
 8019a48:	e015      	b.n	8019a76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8019a4a:	7bfb      	ldrb	r3, [r7, #15]
 8019a4c:	2b01      	cmp	r3, #1
 8019a4e:	d104      	bne.n	8019a5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8019a50:	6879      	ldr	r1, [r7, #4]
 8019a52:	200b      	movs	r0, #11
 8019a54:	f7fd fac0 	bl	8016fd8 <memp_free>
 8019a58:	e00d      	b.n	8019a76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8019a5a:	7bfb      	ldrb	r3, [r7, #15]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d103      	bne.n	8019a68 <pbuf_free+0xd4>
          mem_free(p);
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f7fc fef9 	bl	8016858 <mem_free>
 8019a66:	e006      	b.n	8019a76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8019a68:	4b0b      	ldr	r3, [pc, #44]	@ (8019a98 <pbuf_free+0x104>)
 8019a6a:	f240 320f 	movw	r2, #783	@ 0x30f
 8019a6e:	490f      	ldr	r1, [pc, #60]	@ (8019aac <pbuf_free+0x118>)
 8019a70:	480b      	ldr	r0, [pc, #44]	@ (8019aa0 <pbuf_free+0x10c>)
 8019a72:	f008 f99b 	bl	8021dac <iprintf>
        }
      }
      count++;
 8019a76:	7ffb      	ldrb	r3, [r7, #31]
 8019a78:	3301      	adds	r3, #1
 8019a7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8019a7c:	693b      	ldr	r3, [r7, #16]
 8019a7e:	607b      	str	r3, [r7, #4]
 8019a80:	e001      	b.n	8019a86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8019a82:	2300      	movs	r3, #0
 8019a84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d199      	bne.n	80199c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8019a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8019a8e:	4618      	mov	r0, r3
 8019a90:	3720      	adds	r7, #32
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd80      	pop	{r7, pc}
 8019a96:	bf00      	nop
 8019a98:	08026a5c 	.word	0x08026a5c
 8019a9c:	08026bf0 	.word	0x08026bf0
 8019aa0:	08026aec 	.word	0x08026aec
 8019aa4:	08026c1c 	.word	0x08026c1c
 8019aa8:	08026c34 	.word	0x08026c34
 8019aac:	08026c58 	.word	0x08026c58

08019ab0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8019ab0:	b480      	push	{r7}
 8019ab2:	b085      	sub	sp, #20
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8019ab8:	2300      	movs	r3, #0
 8019aba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8019abc:	e005      	b.n	8019aca <pbuf_clen+0x1a>
    ++len;
 8019abe:	89fb      	ldrh	r3, [r7, #14]
 8019ac0:	3301      	adds	r3, #1
 8019ac2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d1f6      	bne.n	8019abe <pbuf_clen+0xe>
  }
  return len;
 8019ad0:	89fb      	ldrh	r3, [r7, #14]
}
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	3714      	adds	r7, #20
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019adc:	4770      	bx	lr
	...

08019ae0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b084      	sub	sp, #16
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d016      	beq.n	8019b1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8019aee:	f000 fb33 	bl	801a158 <sys_arch_protect>
 8019af2:	60f8      	str	r0, [r7, #12]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	7b9b      	ldrb	r3, [r3, #14]
 8019af8:	3301      	adds	r3, #1
 8019afa:	b2da      	uxtb	r2, r3
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	739a      	strb	r2, [r3, #14]
 8019b00:	68f8      	ldr	r0, [r7, #12]
 8019b02:	f000 fb37 	bl	801a174 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	7b9b      	ldrb	r3, [r3, #14]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d106      	bne.n	8019b1c <pbuf_ref+0x3c>
 8019b0e:	4b05      	ldr	r3, [pc, #20]	@ (8019b24 <pbuf_ref+0x44>)
 8019b10:	f240 3242 	movw	r2, #834	@ 0x342
 8019b14:	4904      	ldr	r1, [pc, #16]	@ (8019b28 <pbuf_ref+0x48>)
 8019b16:	4805      	ldr	r0, [pc, #20]	@ (8019b2c <pbuf_ref+0x4c>)
 8019b18:	f008 f948 	bl	8021dac <iprintf>
  }
}
 8019b1c:	bf00      	nop
 8019b1e:	3710      	adds	r7, #16
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	08026a5c 	.word	0x08026a5c
 8019b28:	08026c6c 	.word	0x08026c6c
 8019b2c:	08026aec 	.word	0x08026aec

08019b30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
 8019b38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d002      	beq.n	8019b46 <pbuf_cat+0x16>
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d107      	bne.n	8019b56 <pbuf_cat+0x26>
 8019b46:	4b20      	ldr	r3, [pc, #128]	@ (8019bc8 <pbuf_cat+0x98>)
 8019b48:	f240 3259 	movw	r2, #857	@ 0x359
 8019b4c:	491f      	ldr	r1, [pc, #124]	@ (8019bcc <pbuf_cat+0x9c>)
 8019b4e:	4820      	ldr	r0, [pc, #128]	@ (8019bd0 <pbuf_cat+0xa0>)
 8019b50:	f008 f92c 	bl	8021dac <iprintf>
 8019b54:	e034      	b.n	8019bc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	60fb      	str	r3, [r7, #12]
 8019b5a:	e00a      	b.n	8019b72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	891a      	ldrh	r2, [r3, #8]
 8019b60:	683b      	ldr	r3, [r7, #0]
 8019b62:	891b      	ldrh	r3, [r3, #8]
 8019b64:	4413      	add	r3, r2
 8019b66:	b29a      	uxth	r2, r3
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	60fb      	str	r3, [r7, #12]
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d1f0      	bne.n	8019b5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	891a      	ldrh	r2, [r3, #8]
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	895b      	ldrh	r3, [r3, #10]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d006      	beq.n	8019b94 <pbuf_cat+0x64>
 8019b86:	4b10      	ldr	r3, [pc, #64]	@ (8019bc8 <pbuf_cat+0x98>)
 8019b88:	f240 3262 	movw	r2, #866	@ 0x362
 8019b8c:	4911      	ldr	r1, [pc, #68]	@ (8019bd4 <pbuf_cat+0xa4>)
 8019b8e:	4810      	ldr	r0, [pc, #64]	@ (8019bd0 <pbuf_cat+0xa0>)
 8019b90:	f008 f90c 	bl	8021dac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d006      	beq.n	8019baa <pbuf_cat+0x7a>
 8019b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8019bc8 <pbuf_cat+0x98>)
 8019b9e:	f240 3263 	movw	r2, #867	@ 0x363
 8019ba2:	490d      	ldr	r1, [pc, #52]	@ (8019bd8 <pbuf_cat+0xa8>)
 8019ba4:	480a      	ldr	r0, [pc, #40]	@ (8019bd0 <pbuf_cat+0xa0>)
 8019ba6:	f008 f901 	bl	8021dac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	891a      	ldrh	r2, [r3, #8]
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	891b      	ldrh	r3, [r3, #8]
 8019bb2:	4413      	add	r3, r2
 8019bb4:	b29a      	uxth	r2, r3
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	683a      	ldr	r2, [r7, #0]
 8019bbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8019bc0:	3710      	adds	r7, #16
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bd80      	pop	{r7, pc}
 8019bc6:	bf00      	nop
 8019bc8:	08026a5c 	.word	0x08026a5c
 8019bcc:	08026c80 	.word	0x08026c80
 8019bd0:	08026aec 	.word	0x08026aec
 8019bd4:	08026cb8 	.word	0x08026cb8
 8019bd8:	08026ce8 	.word	0x08026ce8

08019bdc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b082      	sub	sp, #8
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	6078      	str	r0, [r7, #4]
 8019be4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8019be6:	6839      	ldr	r1, [r7, #0]
 8019be8:	6878      	ldr	r0, [r7, #4]
 8019bea:	f7ff ffa1 	bl	8019b30 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8019bee:	6838      	ldr	r0, [r7, #0]
 8019bf0:	f7ff ff76 	bl	8019ae0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8019bf4:	bf00      	nop
 8019bf6:	3708      	adds	r7, #8
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}

08019bfc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b086      	sub	sp, #24
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
 8019c04:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8019c06:	2300      	movs	r3, #0
 8019c08:	617b      	str	r3, [r7, #20]
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d008      	beq.n	8019c26 <pbuf_copy+0x2a>
 8019c14:	683b      	ldr	r3, [r7, #0]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d005      	beq.n	8019c26 <pbuf_copy+0x2a>
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	891a      	ldrh	r2, [r3, #8]
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	891b      	ldrh	r3, [r3, #8]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d209      	bcs.n	8019c3a <pbuf_copy+0x3e>
 8019c26:	4b57      	ldr	r3, [pc, #348]	@ (8019d84 <pbuf_copy+0x188>)
 8019c28:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8019c2c:	4956      	ldr	r1, [pc, #344]	@ (8019d88 <pbuf_copy+0x18c>)
 8019c2e:	4857      	ldr	r0, [pc, #348]	@ (8019d8c <pbuf_copy+0x190>)
 8019c30:	f008 f8bc 	bl	8021dac <iprintf>
 8019c34:	f06f 030f 	mvn.w	r3, #15
 8019c38:	e09f      	b.n	8019d7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	895b      	ldrh	r3, [r3, #10]
 8019c3e:	461a      	mov	r2, r3
 8019c40:	697b      	ldr	r3, [r7, #20]
 8019c42:	1ad2      	subs	r2, r2, r3
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	895b      	ldrh	r3, [r3, #10]
 8019c48:	4619      	mov	r1, r3
 8019c4a:	693b      	ldr	r3, [r7, #16]
 8019c4c:	1acb      	subs	r3, r1, r3
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	d306      	bcc.n	8019c60 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	895b      	ldrh	r3, [r3, #10]
 8019c56:	461a      	mov	r2, r3
 8019c58:	693b      	ldr	r3, [r7, #16]
 8019c5a:	1ad3      	subs	r3, r2, r3
 8019c5c:	60fb      	str	r3, [r7, #12]
 8019c5e:	e005      	b.n	8019c6c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	895b      	ldrh	r3, [r3, #10]
 8019c64:	461a      	mov	r2, r3
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	1ad3      	subs	r3, r2, r3
 8019c6a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	685a      	ldr	r2, [r3, #4]
 8019c70:	697b      	ldr	r3, [r7, #20]
 8019c72:	18d0      	adds	r0, r2, r3
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	685a      	ldr	r2, [r3, #4]
 8019c78:	693b      	ldr	r3, [r7, #16]
 8019c7a:	4413      	add	r3, r2
 8019c7c:	68fa      	ldr	r2, [r7, #12]
 8019c7e:	4619      	mov	r1, r3
 8019c80:	f008 fb35 	bl	80222ee <memcpy>
    offset_to += len;
 8019c84:	697a      	ldr	r2, [r7, #20]
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	4413      	add	r3, r2
 8019c8a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8019c8c:	693a      	ldr	r2, [r7, #16]
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	4413      	add	r3, r2
 8019c92:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	895b      	ldrh	r3, [r3, #10]
 8019c98:	461a      	mov	r2, r3
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	4293      	cmp	r3, r2
 8019c9e:	d906      	bls.n	8019cae <pbuf_copy+0xb2>
 8019ca0:	4b38      	ldr	r3, [pc, #224]	@ (8019d84 <pbuf_copy+0x188>)
 8019ca2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8019ca6:	493a      	ldr	r1, [pc, #232]	@ (8019d90 <pbuf_copy+0x194>)
 8019ca8:	4838      	ldr	r0, [pc, #224]	@ (8019d8c <pbuf_copy+0x190>)
 8019caa:	f008 f87f 	bl	8021dac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	895b      	ldrh	r3, [r3, #10]
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	4293      	cmp	r3, r2
 8019cb8:	d906      	bls.n	8019cc8 <pbuf_copy+0xcc>
 8019cba:	4b32      	ldr	r3, [pc, #200]	@ (8019d84 <pbuf_copy+0x188>)
 8019cbc:	f240 32da 	movw	r2, #986	@ 0x3da
 8019cc0:	4934      	ldr	r1, [pc, #208]	@ (8019d94 <pbuf_copy+0x198>)
 8019cc2:	4832      	ldr	r0, [pc, #200]	@ (8019d8c <pbuf_copy+0x190>)
 8019cc4:	f008 f872 	bl	8021dac <iprintf>
    if (offset_from >= p_from->len) {
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	895b      	ldrh	r3, [r3, #10]
 8019ccc:	461a      	mov	r2, r3
 8019cce:	693b      	ldr	r3, [r7, #16]
 8019cd0:	4293      	cmp	r3, r2
 8019cd2:	d304      	bcc.n	8019cde <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8019cd8:	683b      	ldr	r3, [r7, #0]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	895b      	ldrh	r3, [r3, #10]
 8019ce2:	461a      	mov	r2, r3
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	4293      	cmp	r3, r2
 8019ce8:	d114      	bne.n	8019d14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8019cea:	2300      	movs	r3, #0
 8019cec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d10c      	bne.n	8019d14 <pbuf_copy+0x118>
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d009      	beq.n	8019d14 <pbuf_copy+0x118>
 8019d00:	4b20      	ldr	r3, [pc, #128]	@ (8019d84 <pbuf_copy+0x188>)
 8019d02:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8019d06:	4924      	ldr	r1, [pc, #144]	@ (8019d98 <pbuf_copy+0x19c>)
 8019d08:	4820      	ldr	r0, [pc, #128]	@ (8019d8c <pbuf_copy+0x190>)
 8019d0a:	f008 f84f 	bl	8021dac <iprintf>
 8019d0e:	f06f 030f 	mvn.w	r3, #15
 8019d12:	e032      	b.n	8019d7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d013      	beq.n	8019d42 <pbuf_copy+0x146>
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	895a      	ldrh	r2, [r3, #10]
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	891b      	ldrh	r3, [r3, #8]
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d10d      	bne.n	8019d42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d009      	beq.n	8019d42 <pbuf_copy+0x146>
 8019d2e:	4b15      	ldr	r3, [pc, #84]	@ (8019d84 <pbuf_copy+0x188>)
 8019d30:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8019d34:	4919      	ldr	r1, [pc, #100]	@ (8019d9c <pbuf_copy+0x1a0>)
 8019d36:	4815      	ldr	r0, [pc, #84]	@ (8019d8c <pbuf_copy+0x190>)
 8019d38:	f008 f838 	bl	8021dac <iprintf>
 8019d3c:	f06f 0305 	mvn.w	r3, #5
 8019d40:	e01b      	b.n	8019d7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d013      	beq.n	8019d70 <pbuf_copy+0x174>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	895a      	ldrh	r2, [r3, #10]
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	891b      	ldrh	r3, [r3, #8]
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d10d      	bne.n	8019d70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d009      	beq.n	8019d70 <pbuf_copy+0x174>
 8019d5c:	4b09      	ldr	r3, [pc, #36]	@ (8019d84 <pbuf_copy+0x188>)
 8019d5e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8019d62:	490e      	ldr	r1, [pc, #56]	@ (8019d9c <pbuf_copy+0x1a0>)
 8019d64:	4809      	ldr	r0, [pc, #36]	@ (8019d8c <pbuf_copy+0x190>)
 8019d66:	f008 f821 	bl	8021dac <iprintf>
 8019d6a:	f06f 0305 	mvn.w	r3, #5
 8019d6e:	e004      	b.n	8019d7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	f47f af61 	bne.w	8019c3a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8019d78:	2300      	movs	r3, #0
}
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	3718      	adds	r7, #24
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bd80      	pop	{r7, pc}
 8019d82:	bf00      	nop
 8019d84:	08026a5c 	.word	0x08026a5c
 8019d88:	08026d34 	.word	0x08026d34
 8019d8c:	08026aec 	.word	0x08026aec
 8019d90:	08026d64 	.word	0x08026d64
 8019d94:	08026d7c 	.word	0x08026d7c
 8019d98:	08026d98 	.word	0x08026d98
 8019d9c:	08026da8 	.word	0x08026da8

08019da0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b088      	sub	sp, #32
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	60f8      	str	r0, [r7, #12]
 8019da8:	60b9      	str	r1, [r7, #8]
 8019daa:	4611      	mov	r1, r2
 8019dac:	461a      	mov	r2, r3
 8019dae:	460b      	mov	r3, r1
 8019db0:	80fb      	strh	r3, [r7, #6]
 8019db2:	4613      	mov	r3, r2
 8019db4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8019db6:	2300      	movs	r3, #0
 8019db8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8019dba:	2300      	movs	r3, #0
 8019dbc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d108      	bne.n	8019dd6 <pbuf_copy_partial+0x36>
 8019dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8019e74 <pbuf_copy_partial+0xd4>)
 8019dc6:	f240 420a 	movw	r2, #1034	@ 0x40a
 8019dca:	492b      	ldr	r1, [pc, #172]	@ (8019e78 <pbuf_copy_partial+0xd8>)
 8019dcc:	482b      	ldr	r0, [pc, #172]	@ (8019e7c <pbuf_copy_partial+0xdc>)
 8019dce:	f007 ffed 	bl	8021dac <iprintf>
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	e04a      	b.n	8019e6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019dd6:	68bb      	ldr	r3, [r7, #8]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d108      	bne.n	8019dee <pbuf_copy_partial+0x4e>
 8019ddc:	4b25      	ldr	r3, [pc, #148]	@ (8019e74 <pbuf_copy_partial+0xd4>)
 8019dde:	f240 420b 	movw	r2, #1035	@ 0x40b
 8019de2:	4927      	ldr	r1, [pc, #156]	@ (8019e80 <pbuf_copy_partial+0xe0>)
 8019de4:	4825      	ldr	r0, [pc, #148]	@ (8019e7c <pbuf_copy_partial+0xdc>)
 8019de6:	f007 ffe1 	bl	8021dac <iprintf>
 8019dea:	2300      	movs	r3, #0
 8019dec:	e03e      	b.n	8019e6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	61fb      	str	r3, [r7, #28]
 8019df2:	e034      	b.n	8019e5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019df4:	88bb      	ldrh	r3, [r7, #4]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d00a      	beq.n	8019e10 <pbuf_copy_partial+0x70>
 8019dfa:	69fb      	ldr	r3, [r7, #28]
 8019dfc:	895b      	ldrh	r3, [r3, #10]
 8019dfe:	88ba      	ldrh	r2, [r7, #4]
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d305      	bcc.n	8019e10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019e04:	69fb      	ldr	r3, [r7, #28]
 8019e06:	895b      	ldrh	r3, [r3, #10]
 8019e08:	88ba      	ldrh	r2, [r7, #4]
 8019e0a:	1ad3      	subs	r3, r2, r3
 8019e0c:	80bb      	strh	r3, [r7, #4]
 8019e0e:	e023      	b.n	8019e58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8019e10:	69fb      	ldr	r3, [r7, #28]
 8019e12:	895a      	ldrh	r2, [r3, #10]
 8019e14:	88bb      	ldrh	r3, [r7, #4]
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8019e1a:	8b3a      	ldrh	r2, [r7, #24]
 8019e1c:	88fb      	ldrh	r3, [r7, #6]
 8019e1e:	429a      	cmp	r2, r3
 8019e20:	d901      	bls.n	8019e26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8019e22:	88fb      	ldrh	r3, [r7, #6]
 8019e24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019e26:	8b7b      	ldrh	r3, [r7, #26]
 8019e28:	68ba      	ldr	r2, [r7, #8]
 8019e2a:	18d0      	adds	r0, r2, r3
 8019e2c:	69fb      	ldr	r3, [r7, #28]
 8019e2e:	685a      	ldr	r2, [r3, #4]
 8019e30:	88bb      	ldrh	r3, [r7, #4]
 8019e32:	4413      	add	r3, r2
 8019e34:	8b3a      	ldrh	r2, [r7, #24]
 8019e36:	4619      	mov	r1, r3
 8019e38:	f008 fa59 	bl	80222ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8019e3c:	8afa      	ldrh	r2, [r7, #22]
 8019e3e:	8b3b      	ldrh	r3, [r7, #24]
 8019e40:	4413      	add	r3, r2
 8019e42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8019e44:	8b7a      	ldrh	r2, [r7, #26]
 8019e46:	8b3b      	ldrh	r3, [r7, #24]
 8019e48:	4413      	add	r3, r2
 8019e4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8019e4c:	88fa      	ldrh	r2, [r7, #6]
 8019e4e:	8b3b      	ldrh	r3, [r7, #24]
 8019e50:	1ad3      	subs	r3, r2, r3
 8019e52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8019e54:	2300      	movs	r3, #0
 8019e56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	61fb      	str	r3, [r7, #28]
 8019e5e:	88fb      	ldrh	r3, [r7, #6]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d002      	beq.n	8019e6a <pbuf_copy_partial+0xca>
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d1c4      	bne.n	8019df4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8019e6a:	8afb      	ldrh	r3, [r7, #22]
}
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	3720      	adds	r7, #32
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}
 8019e74:	08026a5c 	.word	0x08026a5c
 8019e78:	08026dd4 	.word	0x08026dd4
 8019e7c:	08026aec 	.word	0x08026aec
 8019e80:	08026df4 	.word	0x08026df4

08019e84 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8019e84:	b480      	push	{r7}
 8019e86:	b087      	sub	sp, #28
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	60f8      	str	r0, [r7, #12]
 8019e8c:	460b      	mov	r3, r1
 8019e8e:	607a      	str	r2, [r7, #4]
 8019e90:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8019e92:	897b      	ldrh	r3, [r7, #10]
 8019e94:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8019e9a:	e007      	b.n	8019eac <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	895b      	ldrh	r3, [r3, #10]
 8019ea0:	8afa      	ldrh	r2, [r7, #22]
 8019ea2:	1ad3      	subs	r3, r2, r3
 8019ea4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8019ea6:	693b      	ldr	r3, [r7, #16]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d004      	beq.n	8019ebc <pbuf_skip_const+0x38>
 8019eb2:	693b      	ldr	r3, [r7, #16]
 8019eb4:	895b      	ldrh	r3, [r3, #10]
 8019eb6:	8afa      	ldrh	r2, [r7, #22]
 8019eb8:	429a      	cmp	r2, r3
 8019eba:	d2ef      	bcs.n	8019e9c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d002      	beq.n	8019ec8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	8afa      	ldrh	r2, [r7, #22]
 8019ec6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8019ec8:	693b      	ldr	r3, [r7, #16]
}
 8019eca:	4618      	mov	r0, r3
 8019ecc:	371c      	adds	r7, #28
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed4:	4770      	bx	lr
	...

08019ed8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b084      	sub	sp, #16
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	4603      	mov	r3, r0
 8019ee0:	603a      	str	r2, [r7, #0]
 8019ee2:	71fb      	strb	r3, [r7, #7]
 8019ee4:	460b      	mov	r3, r1
 8019ee6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	8919      	ldrh	r1, [r3, #8]
 8019eec:	88ba      	ldrh	r2, [r7, #4]
 8019eee:	79fb      	ldrb	r3, [r7, #7]
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f7ff fa6d 	bl	80193d0 <pbuf_alloc>
 8019ef6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d101      	bne.n	8019f02 <pbuf_clone+0x2a>
    return NULL;
 8019efe:	2300      	movs	r3, #0
 8019f00:	e011      	b.n	8019f26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8019f02:	6839      	ldr	r1, [r7, #0]
 8019f04:	68f8      	ldr	r0, [r7, #12]
 8019f06:	f7ff fe79 	bl	8019bfc <pbuf_copy>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8019f0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d006      	beq.n	8019f24 <pbuf_clone+0x4c>
 8019f16:	4b06      	ldr	r3, [pc, #24]	@ (8019f30 <pbuf_clone+0x58>)
 8019f18:	f240 5224 	movw	r2, #1316	@ 0x524
 8019f1c:	4905      	ldr	r1, [pc, #20]	@ (8019f34 <pbuf_clone+0x5c>)
 8019f1e:	4806      	ldr	r0, [pc, #24]	@ (8019f38 <pbuf_clone+0x60>)
 8019f20:	f007 ff44 	bl	8021dac <iprintf>
  return q;
 8019f24:	68fb      	ldr	r3, [r7, #12]
}
 8019f26:	4618      	mov	r0, r3
 8019f28:	3710      	adds	r7, #16
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}
 8019f2e:	bf00      	nop
 8019f30:	08026a5c 	.word	0x08026a5c
 8019f34:	08026f00 	.word	0x08026f00
 8019f38:	08026aec 	.word	0x08026aec

08019f3c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b084      	sub	sp, #16
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	460b      	mov	r3, r1
 8019f46:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8019f48:	887b      	ldrh	r3, [r7, #2]
 8019f4a:	4619      	mov	r1, r3
 8019f4c:	6878      	ldr	r0, [r7, #4]
 8019f4e:	f000 f80c 	bl	8019f6a <pbuf_try_get_at>
 8019f52:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	db02      	blt.n	8019f60 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	b2db      	uxtb	r3, r3
 8019f5e:	e000      	b.n	8019f62 <pbuf_get_at+0x26>
  }
  return 0;
 8019f60:	2300      	movs	r3, #0
}
 8019f62:	4618      	mov	r0, r3
 8019f64:	3710      	adds	r7, #16
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}

08019f6a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8019f6a:	b580      	push	{r7, lr}
 8019f6c:	b084      	sub	sp, #16
 8019f6e:	af00      	add	r7, sp, #0
 8019f70:	6078      	str	r0, [r7, #4]
 8019f72:	460b      	mov	r3, r1
 8019f74:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8019f76:	f107 020a 	add.w	r2, r7, #10
 8019f7a:	887b      	ldrh	r3, [r7, #2]
 8019f7c:	4619      	mov	r1, r3
 8019f7e:	6878      	ldr	r0, [r7, #4]
 8019f80:	f7ff ff80 	bl	8019e84 <pbuf_skip_const>
 8019f84:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d00a      	beq.n	8019fa2 <pbuf_try_get_at+0x38>
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	895a      	ldrh	r2, [r3, #10]
 8019f90:	897b      	ldrh	r3, [r7, #10]
 8019f92:	429a      	cmp	r2, r3
 8019f94:	d905      	bls.n	8019fa2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	685b      	ldr	r3, [r3, #4]
 8019f9a:	897a      	ldrh	r2, [r7, #10]
 8019f9c:	4413      	add	r3, r2
 8019f9e:	781b      	ldrb	r3, [r3, #0]
 8019fa0:	e001      	b.n	8019fa6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8019fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	3710      	adds	r7, #16
 8019faa:	46bd      	mov	sp, r7
 8019fac:	bd80      	pop	{r7, pc}

08019fae <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019fae:	b580      	push	{r7, lr}
 8019fb0:	b082      	sub	sp, #8
 8019fb2:	af00      	add	r7, sp, #0
 8019fb4:	6078      	str	r0, [r7, #4]
 8019fb6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	2200      	movs	r2, #0
 8019fbc:	2104      	movs	r1, #4
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7f6 fb3a 	bl	8010638 <osMessageQueueNew>
 8019fc4:	4602      	mov	r2, r0
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d102      	bne.n	8019fd8 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd6:	e000      	b.n	8019fda <sys_mbox_new+0x2c>

  return ERR_OK;
 8019fd8:	2300      	movs	r3, #0
}
 8019fda:	4618      	mov	r0, r3
 8019fdc:	3708      	adds	r7, #8
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	bd80      	pop	{r7, pc}

08019fe2 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019fe2:	b580      	push	{r7, lr}
 8019fe4:	b084      	sub	sp, #16
 8019fe6:	af00      	add	r7, sp, #0
 8019fe8:	6078      	str	r0, [r7, #4]
 8019fea:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	6818      	ldr	r0, [r3, #0]
 8019ff0:	4639      	mov	r1, r7
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	f7f6 fb93 	bl	8010720 <osMessageQueuePut>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d102      	bne.n	801a006 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a000:	2300      	movs	r3, #0
 801a002:	73fb      	strb	r3, [r7, #15]
 801a004:	e001      	b.n	801a00a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a006:	23ff      	movs	r3, #255	@ 0xff
 801a008:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a00e:	4618      	mov	r0, r3
 801a010:	3710      	adds	r7, #16
 801a012:	46bd      	mov	sp, r7
 801a014:	bd80      	pop	{r7, pc}

0801a016 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a016:	b580      	push	{r7, lr}
 801a018:	b086      	sub	sp, #24
 801a01a:	af00      	add	r7, sp, #0
 801a01c:	60f8      	str	r0, [r7, #12]
 801a01e:	60b9      	str	r1, [r7, #8]
 801a020:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a022:	f7f6 f80d 	bl	8010040 <osKernelGetTickCount>
 801a026:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d013      	beq.n	801a056 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	6818      	ldr	r0, [r3, #0]
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2200      	movs	r2, #0
 801a036:	68b9      	ldr	r1, [r7, #8]
 801a038:	f7f6 fbd2 	bl	80107e0 <osMessageQueueGet>
 801a03c:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a03e:	693b      	ldr	r3, [r7, #16]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d105      	bne.n	801a050 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a044:	f7f5 fffc 	bl	8010040 <osKernelGetTickCount>
 801a048:	4602      	mov	r2, r0
 801a04a:	697b      	ldr	r3, [r7, #20]
 801a04c:	1ad3      	subs	r3, r2, r3
 801a04e:	e00f      	b.n	801a070 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a050:	f04f 33ff 	mov.w	r3, #4294967295
 801a054:	e00c      	b.n	801a070 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	6818      	ldr	r0, [r3, #0]
 801a05a:	f04f 33ff 	mov.w	r3, #4294967295
 801a05e:	2200      	movs	r2, #0
 801a060:	68b9      	ldr	r1, [r7, #8]
 801a062:	f7f6 fbbd 	bl	80107e0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a066:	f7f5 ffeb 	bl	8010040 <osKernelGetTickCount>
 801a06a:	4602      	mov	r2, r0
 801a06c:	697b      	ldr	r3, [r7, #20]
 801a06e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a070:	4618      	mov	r0, r3
 801a072:	3718      	adds	r7, #24
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}

0801a078 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a078:	b480      	push	{r7}
 801a07a:	b083      	sub	sp, #12
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d101      	bne.n	801a08c <sys_mbox_valid+0x14>
    return 0;
 801a088:	2300      	movs	r3, #0
 801a08a:	e000      	b.n	801a08e <sys_mbox_valid+0x16>
  else
    return 1;
 801a08c:	2301      	movs	r3, #1
}
 801a08e:	4618      	mov	r0, r3
 801a090:	370c      	adds	r7, #12
 801a092:	46bd      	mov	sp, r7
 801a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a098:	4770      	bx	lr
	...

0801a09c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a0a0:	2000      	movs	r0, #0
 801a0a2:	f7f6 f89b 	bl	80101dc <osMutexNew>
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	4a01      	ldr	r2, [pc, #4]	@ (801a0b0 <sys_init+0x14>)
 801a0aa:	6013      	str	r3, [r2, #0]
#endif
}
 801a0ac:	bf00      	nop
 801a0ae:	bd80      	pop	{r7, pc}
 801a0b0:	24012698 	.word	0x24012698

0801a0b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b082      	sub	sp, #8
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a0bc:	2000      	movs	r0, #0
 801a0be:	f7f6 f88d 	bl	80101dc <osMutexNew>
 801a0c2:	4602      	mov	r2, r0
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d102      	bne.n	801a0d6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a0d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a0d4:	e000      	b.n	801a0d8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a0d6:	2300      	movs	r3, #0
}
 801a0d8:	4618      	mov	r0, r3
 801a0da:	3708      	adds	r7, #8
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}

0801a0e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	f04f 31ff 	mov.w	r1, #4294967295
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f7f6 f8f9 	bl	80102e8 <osMutexAcquire>
#endif
}
 801a0f6:	bf00      	nop
 801a0f8:	3708      	adds	r7, #8
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	bd80      	pop	{r7, pc}

0801a0fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a0fe:	b580      	push	{r7, lr}
 801a100:	b082      	sub	sp, #8
 801a102:	af00      	add	r7, sp, #0
 801a104:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	4618      	mov	r0, r3
 801a10c:	f7f6 f937 	bl	801037e <osMutexRelease>
}
 801a110:	bf00      	nop
 801a112:	3708      	adds	r7, #8
 801a114:	46bd      	mov	sp, r7
 801a116:	bd80      	pop	{r7, pc}

0801a118 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b08e      	sub	sp, #56	@ 0x38
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	60f8      	str	r0, [r7, #12]
 801a120:	60b9      	str	r1, [r7, #8]
 801a122:	607a      	str	r2, [r7, #4]
 801a124:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a126:	f107 0314 	add.w	r3, r7, #20
 801a12a:	2224      	movs	r2, #36	@ 0x24
 801a12c:	2100      	movs	r1, #0
 801a12e:	4618      	mov	r0, r3
 801a130:	f007 ffe2 	bl	80220f8 <memset>
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	617b      	str	r3, [r7, #20]
 801a138:	683b      	ldr	r3, [r7, #0]
 801a13a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a140:	f107 0314 	add.w	r3, r7, #20
 801a144:	461a      	mov	r2, r3
 801a146:	6879      	ldr	r1, [r7, #4]
 801a148:	68b8      	ldr	r0, [r7, #8]
 801a14a:	f7f5 ff8e 	bl	801006a <osThreadNew>
 801a14e:	4603      	mov	r3, r0
#endif
}
 801a150:	4618      	mov	r0, r3
 801a152:	3738      	adds	r7, #56	@ 0x38
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801a15c:	4b04      	ldr	r3, [pc, #16]	@ (801a170 <sys_arch_protect+0x18>)
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	f04f 31ff 	mov.w	r1, #4294967295
 801a164:	4618      	mov	r0, r3
 801a166:	f7f6 f8bf 	bl	80102e8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801a16a:	2301      	movs	r3, #1
}
 801a16c:	4618      	mov	r0, r3
 801a16e:	bd80      	pop	{r7, pc}
 801a170:	24012698 	.word	0x24012698

0801a174 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b082      	sub	sp, #8
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a17c:	4b04      	ldr	r3, [pc, #16]	@ (801a190 <sys_arch_unprotect+0x1c>)
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	4618      	mov	r0, r3
 801a182:	f7f6 f8fc 	bl	801037e <osMutexRelease>
}
 801a186:	bf00      	nop
 801a188:	3708      	adds	r7, #8
 801a18a:	46bd      	mov	sp, r7
 801a18c:	bd80      	pop	{r7, pc}
 801a18e:	bf00      	nop
 801a190:	24012698 	.word	0x24012698

0801a194 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a198:	f007 f84e 	bl	8021238 <rand>
 801a19c:	4603      	mov	r3, r0
 801a19e:	b29b      	uxth	r3, r3
 801a1a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a1aa:	b29a      	uxth	r2, r3
 801a1ac:	4b01      	ldr	r3, [pc, #4]	@ (801a1b4 <tcp_init+0x20>)
 801a1ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a1b0:	bf00      	nop
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	24000048 	.word	0x24000048

0801a1b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	7d1b      	ldrb	r3, [r3, #20]
 801a1c4:	2b01      	cmp	r3, #1
 801a1c6:	d105      	bne.n	801a1d4 <tcp_free+0x1c>
 801a1c8:	4b06      	ldr	r3, [pc, #24]	@ (801a1e4 <tcp_free+0x2c>)
 801a1ca:	22d4      	movs	r2, #212	@ 0xd4
 801a1cc:	4906      	ldr	r1, [pc, #24]	@ (801a1e8 <tcp_free+0x30>)
 801a1ce:	4807      	ldr	r0, [pc, #28]	@ (801a1ec <tcp_free+0x34>)
 801a1d0:	f007 fdec 	bl	8021dac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801a1d4:	6879      	ldr	r1, [r7, #4]
 801a1d6:	2001      	movs	r0, #1
 801a1d8:	f7fc fefe 	bl	8016fd8 <memp_free>
}
 801a1dc:	bf00      	nop
 801a1de:	3708      	adds	r7, #8
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	08026f8c 	.word	0x08026f8c
 801a1e8:	08026fe8 	.word	0x08026fe8
 801a1ec:	08026ffc 	.word	0x08026ffc

0801a1f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b082      	sub	sp, #8
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	7d1b      	ldrb	r3, [r3, #20]
 801a1fc:	2b01      	cmp	r3, #1
 801a1fe:	d105      	bne.n	801a20c <tcp_free_listen+0x1c>
 801a200:	4b06      	ldr	r3, [pc, #24]	@ (801a21c <tcp_free_listen+0x2c>)
 801a202:	22df      	movs	r2, #223	@ 0xdf
 801a204:	4906      	ldr	r1, [pc, #24]	@ (801a220 <tcp_free_listen+0x30>)
 801a206:	4807      	ldr	r0, [pc, #28]	@ (801a224 <tcp_free_listen+0x34>)
 801a208:	f007 fdd0 	bl	8021dac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801a20c:	6879      	ldr	r1, [r7, #4]
 801a20e:	2002      	movs	r0, #2
 801a210:	f7fc fee2 	bl	8016fd8 <memp_free>
}
 801a214:	bf00      	nop
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	08026f8c 	.word	0x08026f8c
 801a220:	08027024 	.word	0x08027024
 801a224:	08026ffc 	.word	0x08026ffc

0801a228 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801a22c:	f001 f8a4 	bl	801b378 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801a230:	4b07      	ldr	r3, [pc, #28]	@ (801a250 <tcp_tmr+0x28>)
 801a232:	781b      	ldrb	r3, [r3, #0]
 801a234:	3301      	adds	r3, #1
 801a236:	b2da      	uxtb	r2, r3
 801a238:	4b05      	ldr	r3, [pc, #20]	@ (801a250 <tcp_tmr+0x28>)
 801a23a:	701a      	strb	r2, [r3, #0]
 801a23c:	4b04      	ldr	r3, [pc, #16]	@ (801a250 <tcp_tmr+0x28>)
 801a23e:	781b      	ldrb	r3, [r3, #0]
 801a240:	f003 0301 	and.w	r3, r3, #1
 801a244:	2b00      	cmp	r3, #0
 801a246:	d001      	beq.n	801a24c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801a248:	f000 fd54 	bl	801acf4 <tcp_slowtmr>
  }
}
 801a24c:	bf00      	nop
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	240126b1 	.word	0x240126b1

0801a254 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b084      	sub	sp, #16
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d105      	bne.n	801a270 <tcp_remove_listener+0x1c>
 801a264:	4b0d      	ldr	r3, [pc, #52]	@ (801a29c <tcp_remove_listener+0x48>)
 801a266:	22ff      	movs	r2, #255	@ 0xff
 801a268:	490d      	ldr	r1, [pc, #52]	@ (801a2a0 <tcp_remove_listener+0x4c>)
 801a26a:	480e      	ldr	r0, [pc, #56]	@ (801a2a4 <tcp_remove_listener+0x50>)
 801a26c:	f007 fd9e 	bl	8021dac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	60fb      	str	r3, [r7, #12]
 801a274:	e00a      	b.n	801a28c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a27a:	683a      	ldr	r2, [r7, #0]
 801a27c:	429a      	cmp	r2, r3
 801a27e:	d102      	bne.n	801a286 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	2200      	movs	r2, #0
 801a284:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	68db      	ldr	r3, [r3, #12]
 801a28a:	60fb      	str	r3, [r7, #12]
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d1f1      	bne.n	801a276 <tcp_remove_listener+0x22>
    }
  }
}
 801a292:	bf00      	nop
 801a294:	bf00      	nop
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	08026f8c 	.word	0x08026f8c
 801a2a0:	08027040 	.word	0x08027040
 801a2a4:	08026ffc 	.word	0x08026ffc

0801a2a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b084      	sub	sp, #16
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d106      	bne.n	801a2c4 <tcp_listen_closed+0x1c>
 801a2b6:	4b14      	ldr	r3, [pc, #80]	@ (801a308 <tcp_listen_closed+0x60>)
 801a2b8:	f240 1211 	movw	r2, #273	@ 0x111
 801a2bc:	4913      	ldr	r1, [pc, #76]	@ (801a30c <tcp_listen_closed+0x64>)
 801a2be:	4814      	ldr	r0, [pc, #80]	@ (801a310 <tcp_listen_closed+0x68>)
 801a2c0:	f007 fd74 	bl	8021dac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	7d1b      	ldrb	r3, [r3, #20]
 801a2c8:	2b01      	cmp	r3, #1
 801a2ca:	d006      	beq.n	801a2da <tcp_listen_closed+0x32>
 801a2cc:	4b0e      	ldr	r3, [pc, #56]	@ (801a308 <tcp_listen_closed+0x60>)
 801a2ce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801a2d2:	4910      	ldr	r1, [pc, #64]	@ (801a314 <tcp_listen_closed+0x6c>)
 801a2d4:	480e      	ldr	r0, [pc, #56]	@ (801a310 <tcp_listen_closed+0x68>)
 801a2d6:	f007 fd69 	bl	8021dac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801a2da:	2301      	movs	r3, #1
 801a2dc:	60fb      	str	r3, [r7, #12]
 801a2de:	e00b      	b.n	801a2f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801a2e0:	4a0d      	ldr	r2, [pc, #52]	@ (801a318 <tcp_listen_closed+0x70>)
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	6879      	ldr	r1, [r7, #4]
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7ff ffb1 	bl	801a254 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	3301      	adds	r3, #1
 801a2f6:	60fb      	str	r3, [r7, #12]
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	2b03      	cmp	r3, #3
 801a2fc:	d9f0      	bls.n	801a2e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801a2fe:	bf00      	nop
 801a300:	bf00      	nop
 801a302:	3710      	adds	r7, #16
 801a304:	46bd      	mov	sp, r7
 801a306:	bd80      	pop	{r7, pc}
 801a308:	08026f8c 	.word	0x08026f8c
 801a30c:	08027068 	.word	0x08027068
 801a310:	08026ffc 	.word	0x08026ffc
 801a314:	08027074 	.word	0x08027074
 801a318:	08028b38 	.word	0x08028b38

0801a31c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801a31c:	b5b0      	push	{r4, r5, r7, lr}
 801a31e:	b088      	sub	sp, #32
 801a320:	af04      	add	r7, sp, #16
 801a322:	6078      	str	r0, [r7, #4]
 801a324:	460b      	mov	r3, r1
 801a326:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d106      	bne.n	801a33c <tcp_close_shutdown+0x20>
 801a32e:	4b63      	ldr	r3, [pc, #396]	@ (801a4bc <tcp_close_shutdown+0x1a0>)
 801a330:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801a334:	4962      	ldr	r1, [pc, #392]	@ (801a4c0 <tcp_close_shutdown+0x1a4>)
 801a336:	4863      	ldr	r0, [pc, #396]	@ (801a4c4 <tcp_close_shutdown+0x1a8>)
 801a338:	f007 fd38 	bl	8021dac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801a33c:	78fb      	ldrb	r3, [r7, #3]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d066      	beq.n	801a410 <tcp_close_shutdown+0xf4>
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	7d1b      	ldrb	r3, [r3, #20]
 801a346:	2b04      	cmp	r3, #4
 801a348:	d003      	beq.n	801a352 <tcp_close_shutdown+0x36>
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	7d1b      	ldrb	r3, [r3, #20]
 801a34e:	2b07      	cmp	r3, #7
 801a350:	d15e      	bne.n	801a410 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a356:	2b00      	cmp	r3, #0
 801a358:	d104      	bne.n	801a364 <tcp_close_shutdown+0x48>
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a35e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801a362:	d055      	beq.n	801a410 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	8b5b      	ldrh	r3, [r3, #26]
 801a368:	f003 0310 	and.w	r3, r3, #16
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d106      	bne.n	801a37e <tcp_close_shutdown+0x62>
 801a370:	4b52      	ldr	r3, [pc, #328]	@ (801a4bc <tcp_close_shutdown+0x1a0>)
 801a372:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801a376:	4954      	ldr	r1, [pc, #336]	@ (801a4c8 <tcp_close_shutdown+0x1ac>)
 801a378:	4852      	ldr	r0, [pc, #328]	@ (801a4c4 <tcp_close_shutdown+0x1a8>)
 801a37a:	f007 fd17 	bl	8021dac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801a386:	687d      	ldr	r5, [r7, #4]
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	3304      	adds	r3, #4
 801a38c:	687a      	ldr	r2, [r7, #4]
 801a38e:	8ad2      	ldrh	r2, [r2, #22]
 801a390:	6879      	ldr	r1, [r7, #4]
 801a392:	8b09      	ldrh	r1, [r1, #24]
 801a394:	9102      	str	r1, [sp, #8]
 801a396:	9201      	str	r2, [sp, #4]
 801a398:	9300      	str	r3, [sp, #0]
 801a39a:	462b      	mov	r3, r5
 801a39c:	4622      	mov	r2, r4
 801a39e:	4601      	mov	r1, r0
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	f005 fdab 	bl	801fefc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	f001 fb88 	bl	801babc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801a3ac:	4b47      	ldr	r3, [pc, #284]	@ (801a4cc <tcp_close_shutdown+0x1b0>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	687a      	ldr	r2, [r7, #4]
 801a3b2:	429a      	cmp	r2, r3
 801a3b4:	d105      	bne.n	801a3c2 <tcp_close_shutdown+0xa6>
 801a3b6:	4b45      	ldr	r3, [pc, #276]	@ (801a4cc <tcp_close_shutdown+0x1b0>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	68db      	ldr	r3, [r3, #12]
 801a3bc:	4a43      	ldr	r2, [pc, #268]	@ (801a4cc <tcp_close_shutdown+0x1b0>)
 801a3be:	6013      	str	r3, [r2, #0]
 801a3c0:	e013      	b.n	801a3ea <tcp_close_shutdown+0xce>
 801a3c2:	4b42      	ldr	r3, [pc, #264]	@ (801a4cc <tcp_close_shutdown+0x1b0>)
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	60fb      	str	r3, [r7, #12]
 801a3c8:	e00c      	b.n	801a3e4 <tcp_close_shutdown+0xc8>
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	68db      	ldr	r3, [r3, #12]
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d104      	bne.n	801a3de <tcp_close_shutdown+0xc2>
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	68da      	ldr	r2, [r3, #12]
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	60da      	str	r2, [r3, #12]
 801a3dc:	e005      	b.n	801a3ea <tcp_close_shutdown+0xce>
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	68db      	ldr	r3, [r3, #12]
 801a3e2:	60fb      	str	r3, [r7, #12]
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d1ef      	bne.n	801a3ca <tcp_close_shutdown+0xae>
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	60da      	str	r2, [r3, #12]
 801a3f0:	4b37      	ldr	r3, [pc, #220]	@ (801a4d0 <tcp_close_shutdown+0x1b4>)
 801a3f2:	2201      	movs	r2, #1
 801a3f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801a3f6:	4b37      	ldr	r3, [pc, #220]	@ (801a4d4 <tcp_close_shutdown+0x1b8>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	687a      	ldr	r2, [r7, #4]
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d102      	bne.n	801a406 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801a400:	f004 f81e 	bl	801e440 <tcp_trigger_input_pcb_close>
 801a404:	e002      	b.n	801a40c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801a406:	6878      	ldr	r0, [r7, #4]
 801a408:	f7ff fed6 	bl	801a1b8 <tcp_free>
      }
      return ERR_OK;
 801a40c:	2300      	movs	r3, #0
 801a40e:	e050      	b.n	801a4b2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	7d1b      	ldrb	r3, [r3, #20]
 801a414:	2b02      	cmp	r3, #2
 801a416:	d03b      	beq.n	801a490 <tcp_close_shutdown+0x174>
 801a418:	2b02      	cmp	r3, #2
 801a41a:	dc44      	bgt.n	801a4a6 <tcp_close_shutdown+0x18a>
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d002      	beq.n	801a426 <tcp_close_shutdown+0x10a>
 801a420:	2b01      	cmp	r3, #1
 801a422:	d02a      	beq.n	801a47a <tcp_close_shutdown+0x15e>
 801a424:	e03f      	b.n	801a4a6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	8adb      	ldrh	r3, [r3, #22]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d021      	beq.n	801a472 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a42e:	4b2a      	ldr	r3, [pc, #168]	@ (801a4d8 <tcp_close_shutdown+0x1bc>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	429a      	cmp	r2, r3
 801a436:	d105      	bne.n	801a444 <tcp_close_shutdown+0x128>
 801a438:	4b27      	ldr	r3, [pc, #156]	@ (801a4d8 <tcp_close_shutdown+0x1bc>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	4a26      	ldr	r2, [pc, #152]	@ (801a4d8 <tcp_close_shutdown+0x1bc>)
 801a440:	6013      	str	r3, [r2, #0]
 801a442:	e013      	b.n	801a46c <tcp_close_shutdown+0x150>
 801a444:	4b24      	ldr	r3, [pc, #144]	@ (801a4d8 <tcp_close_shutdown+0x1bc>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	60bb      	str	r3, [r7, #8]
 801a44a:	e00c      	b.n	801a466 <tcp_close_shutdown+0x14a>
 801a44c:	68bb      	ldr	r3, [r7, #8]
 801a44e:	68db      	ldr	r3, [r3, #12]
 801a450:	687a      	ldr	r2, [r7, #4]
 801a452:	429a      	cmp	r2, r3
 801a454:	d104      	bne.n	801a460 <tcp_close_shutdown+0x144>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	68da      	ldr	r2, [r3, #12]
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	60da      	str	r2, [r3, #12]
 801a45e:	e005      	b.n	801a46c <tcp_close_shutdown+0x150>
 801a460:	68bb      	ldr	r3, [r7, #8]
 801a462:	68db      	ldr	r3, [r3, #12]
 801a464:	60bb      	str	r3, [r7, #8]
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d1ef      	bne.n	801a44c <tcp_close_shutdown+0x130>
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2200      	movs	r2, #0
 801a470:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801a472:	6878      	ldr	r0, [r7, #4]
 801a474:	f7ff fea0 	bl	801a1b8 <tcp_free>
      break;
 801a478:	e01a      	b.n	801a4b0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	f7ff ff14 	bl	801a2a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801a480:	6879      	ldr	r1, [r7, #4]
 801a482:	4816      	ldr	r0, [pc, #88]	@ (801a4dc <tcp_close_shutdown+0x1c0>)
 801a484:	f001 fb6a 	bl	801bb5c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801a488:	6878      	ldr	r0, [r7, #4]
 801a48a:	f7ff feb1 	bl	801a1f0 <tcp_free_listen>
      break;
 801a48e:	e00f      	b.n	801a4b0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a490:	6879      	ldr	r1, [r7, #4]
 801a492:	480e      	ldr	r0, [pc, #56]	@ (801a4cc <tcp_close_shutdown+0x1b0>)
 801a494:	f001 fb62 	bl	801bb5c <tcp_pcb_remove>
 801a498:	4b0d      	ldr	r3, [pc, #52]	@ (801a4d0 <tcp_close_shutdown+0x1b4>)
 801a49a:	2201      	movs	r2, #1
 801a49c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801a49e:	6878      	ldr	r0, [r7, #4]
 801a4a0:	f7ff fe8a 	bl	801a1b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801a4a4:	e004      	b.n	801a4b0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801a4a6:	6878      	ldr	r0, [r7, #4]
 801a4a8:	f000 f81a 	bl	801a4e0 <tcp_close_shutdown_fin>
 801a4ac:	4603      	mov	r3, r0
 801a4ae:	e000      	b.n	801a4b2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801a4b0:	2300      	movs	r3, #0
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	3710      	adds	r7, #16
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bdb0      	pop	{r4, r5, r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	08026f8c 	.word	0x08026f8c
 801a4c0:	0802708c 	.word	0x0802708c
 801a4c4:	08026ffc 	.word	0x08026ffc
 801a4c8:	080270ac 	.word	0x080270ac
 801a4cc:	240126a8 	.word	0x240126a8
 801a4d0:	240126b0 	.word	0x240126b0
 801a4d4:	240126e8 	.word	0x240126e8
 801a4d8:	240126a0 	.word	0x240126a0
 801a4dc:	240126a4 	.word	0x240126a4

0801a4e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b084      	sub	sp, #16
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d106      	bne.n	801a4fc <tcp_close_shutdown_fin+0x1c>
 801a4ee:	4b2e      	ldr	r3, [pc, #184]	@ (801a5a8 <tcp_close_shutdown_fin+0xc8>)
 801a4f0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801a4f4:	492d      	ldr	r1, [pc, #180]	@ (801a5ac <tcp_close_shutdown_fin+0xcc>)
 801a4f6:	482e      	ldr	r0, [pc, #184]	@ (801a5b0 <tcp_close_shutdown_fin+0xd0>)
 801a4f8:	f007 fc58 	bl	8021dac <iprintf>

  switch (pcb->state) {
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	7d1b      	ldrb	r3, [r3, #20]
 801a500:	2b07      	cmp	r3, #7
 801a502:	d020      	beq.n	801a546 <tcp_close_shutdown_fin+0x66>
 801a504:	2b07      	cmp	r3, #7
 801a506:	dc2b      	bgt.n	801a560 <tcp_close_shutdown_fin+0x80>
 801a508:	2b03      	cmp	r3, #3
 801a50a:	d002      	beq.n	801a512 <tcp_close_shutdown_fin+0x32>
 801a50c:	2b04      	cmp	r3, #4
 801a50e:	d00d      	beq.n	801a52c <tcp_close_shutdown_fin+0x4c>
 801a510:	e026      	b.n	801a560 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801a512:	6878      	ldr	r0, [r7, #4]
 801a514:	f004 fdfe 	bl	801f114 <tcp_send_fin>
 801a518:	4603      	mov	r3, r0
 801a51a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801a51c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d11f      	bne.n	801a564 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2205      	movs	r2, #5
 801a528:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a52a:	e01b      	b.n	801a564 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f004 fdf1 	bl	801f114 <tcp_send_fin>
 801a532:	4603      	mov	r3, r0
 801a534:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801a536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d114      	bne.n	801a568 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	2205      	movs	r2, #5
 801a542:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a544:	e010      	b.n	801a568 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801a546:	6878      	ldr	r0, [r7, #4]
 801a548:	f004 fde4 	bl	801f114 <tcp_send_fin>
 801a54c:	4603      	mov	r3, r0
 801a54e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801a550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d109      	bne.n	801a56c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2209      	movs	r2, #9
 801a55c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a55e:	e005      	b.n	801a56c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801a560:	2300      	movs	r3, #0
 801a562:	e01c      	b.n	801a59e <tcp_close_shutdown_fin+0xbe>
      break;
 801a564:	bf00      	nop
 801a566:	e002      	b.n	801a56e <tcp_close_shutdown_fin+0x8e>
      break;
 801a568:	bf00      	nop
 801a56a:	e000      	b.n	801a56e <tcp_close_shutdown_fin+0x8e>
      break;
 801a56c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801a56e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d103      	bne.n	801a57e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801a576:	6878      	ldr	r0, [r7, #4]
 801a578:	f004 ff0a 	bl	801f390 <tcp_output>
 801a57c:	e00d      	b.n	801a59a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801a57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a582:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a586:	d108      	bne.n	801a59a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	8b5b      	ldrh	r3, [r3, #26]
 801a58c:	f043 0308 	orr.w	r3, r3, #8
 801a590:	b29a      	uxth	r2, r3
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801a596:	2300      	movs	r3, #0
 801a598:	e001      	b.n	801a59e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801a59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a59e:	4618      	mov	r0, r3
 801a5a0:	3710      	adds	r7, #16
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	bd80      	pop	{r7, pc}
 801a5a6:	bf00      	nop
 801a5a8:	08026f8c 	.word	0x08026f8c
 801a5ac:	08027068 	.word	0x08027068
 801a5b0:	08026ffc 	.word	0x08026ffc

0801a5b4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b082      	sub	sp, #8
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 801a5bc:	f7f5 fc70 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d109      	bne.n	801a5da <tcp_close+0x26>
 801a5c6:	4b0f      	ldr	r3, [pc, #60]	@ (801a604 <tcp_close+0x50>)
 801a5c8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801a5cc:	490e      	ldr	r1, [pc, #56]	@ (801a608 <tcp_close+0x54>)
 801a5ce:	480f      	ldr	r0, [pc, #60]	@ (801a60c <tcp_close+0x58>)
 801a5d0:	f007 fbec 	bl	8021dac <iprintf>
 801a5d4:	f06f 030f 	mvn.w	r3, #15
 801a5d8:	e00f      	b.n	801a5fa <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	7d1b      	ldrb	r3, [r3, #20]
 801a5de:	2b01      	cmp	r3, #1
 801a5e0:	d006      	beq.n	801a5f0 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	8b5b      	ldrh	r3, [r3, #26]
 801a5e6:	f043 0310 	orr.w	r3, r3, #16
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801a5f0:	2101      	movs	r1, #1
 801a5f2:	6878      	ldr	r0, [r7, #4]
 801a5f4:	f7ff fe92 	bl	801a31c <tcp_close_shutdown>
 801a5f8:	4603      	mov	r3, r0
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	3708      	adds	r7, #8
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd80      	pop	{r7, pc}
 801a602:	bf00      	nop
 801a604:	08026f8c 	.word	0x08026f8c
 801a608:	080270c8 	.word	0x080270c8
 801a60c:	08026ffc 	.word	0x08026ffc

0801a610 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b08e      	sub	sp, #56	@ 0x38
 801a614:	af04      	add	r7, sp, #16
 801a616:	6078      	str	r0, [r7, #4]
 801a618:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 801a61a:	f7f5 fc41 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d107      	bne.n	801a634 <tcp_abandon+0x24>
 801a624:	4b52      	ldr	r3, [pc, #328]	@ (801a770 <tcp_abandon+0x160>)
 801a626:	f240 223d 	movw	r2, #573	@ 0x23d
 801a62a:	4952      	ldr	r1, [pc, #328]	@ (801a774 <tcp_abandon+0x164>)
 801a62c:	4852      	ldr	r0, [pc, #328]	@ (801a778 <tcp_abandon+0x168>)
 801a62e:	f007 fbbd 	bl	8021dac <iprintf>
 801a632:	e099      	b.n	801a768 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	7d1b      	ldrb	r3, [r3, #20]
 801a638:	2b01      	cmp	r3, #1
 801a63a:	d106      	bne.n	801a64a <tcp_abandon+0x3a>
 801a63c:	4b4c      	ldr	r3, [pc, #304]	@ (801a770 <tcp_abandon+0x160>)
 801a63e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801a642:	494e      	ldr	r1, [pc, #312]	@ (801a77c <tcp_abandon+0x16c>)
 801a644:	484c      	ldr	r0, [pc, #304]	@ (801a778 <tcp_abandon+0x168>)
 801a646:	f007 fbb1 	bl	8021dac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	7d1b      	ldrb	r3, [r3, #20]
 801a64e:	2b0a      	cmp	r3, #10
 801a650:	d107      	bne.n	801a662 <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801a652:	6879      	ldr	r1, [r7, #4]
 801a654:	484a      	ldr	r0, [pc, #296]	@ (801a780 <tcp_abandon+0x170>)
 801a656:	f001 fa81 	bl	801bb5c <tcp_pcb_remove>
    tcp_free(pcb);
 801a65a:	6878      	ldr	r0, [r7, #4]
 801a65c:	f7ff fdac 	bl	801a1b8 <tcp_free>
 801a660:	e082      	b.n	801a768 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 801a662:	2300      	movs	r3, #0
 801a664:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801a666:	2300      	movs	r3, #0
 801a668:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a66e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a674:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a67c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	691b      	ldr	r3, [r3, #16]
 801a682:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	7d1b      	ldrb	r3, [r3, #20]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d126      	bne.n	801a6da <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	8adb      	ldrh	r3, [r3, #22]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d02e      	beq.n	801a6f2 <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a694:	4b3b      	ldr	r3, [pc, #236]	@ (801a784 <tcp_abandon+0x174>)
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	687a      	ldr	r2, [r7, #4]
 801a69a:	429a      	cmp	r2, r3
 801a69c:	d105      	bne.n	801a6aa <tcp_abandon+0x9a>
 801a69e:	4b39      	ldr	r3, [pc, #228]	@ (801a784 <tcp_abandon+0x174>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	68db      	ldr	r3, [r3, #12]
 801a6a4:	4a37      	ldr	r2, [pc, #220]	@ (801a784 <tcp_abandon+0x174>)
 801a6a6:	6013      	str	r3, [r2, #0]
 801a6a8:	e013      	b.n	801a6d2 <tcp_abandon+0xc2>
 801a6aa:	4b36      	ldr	r3, [pc, #216]	@ (801a784 <tcp_abandon+0x174>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	61fb      	str	r3, [r7, #28]
 801a6b0:	e00c      	b.n	801a6cc <tcp_abandon+0xbc>
 801a6b2:	69fb      	ldr	r3, [r7, #28]
 801a6b4:	68db      	ldr	r3, [r3, #12]
 801a6b6:	687a      	ldr	r2, [r7, #4]
 801a6b8:	429a      	cmp	r2, r3
 801a6ba:	d104      	bne.n	801a6c6 <tcp_abandon+0xb6>
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	68da      	ldr	r2, [r3, #12]
 801a6c0:	69fb      	ldr	r3, [r7, #28]
 801a6c2:	60da      	str	r2, [r3, #12]
 801a6c4:	e005      	b.n	801a6d2 <tcp_abandon+0xc2>
 801a6c6:	69fb      	ldr	r3, [r7, #28]
 801a6c8:	68db      	ldr	r3, [r3, #12]
 801a6ca:	61fb      	str	r3, [r7, #28]
 801a6cc:	69fb      	ldr	r3, [r7, #28]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d1ef      	bne.n	801a6b2 <tcp_abandon+0xa2>
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	2200      	movs	r2, #0
 801a6d6:	60da      	str	r2, [r3, #12]
 801a6d8:	e00b      	b.n	801a6f2 <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	8adb      	ldrh	r3, [r3, #22]
 801a6e2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a6e4:	6879      	ldr	r1, [r7, #4]
 801a6e6:	4828      	ldr	r0, [pc, #160]	@ (801a788 <tcp_abandon+0x178>)
 801a6e8:	f001 fa38 	bl	801bb5c <tcp_pcb_remove>
 801a6ec:	4b27      	ldr	r3, [pc, #156]	@ (801a78c <tcp_abandon+0x17c>)
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d004      	beq.n	801a704 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6fe:	4618      	mov	r0, r3
 801a700:	f000 ff1a 	bl	801b538 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d004      	beq.n	801a716 <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a710:	4618      	mov	r0, r3
 801a712:	f000 ff11 	bl	801b538 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d004      	beq.n	801a728 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a722:	4618      	mov	r0, r3
 801a724:	f000 ff08 	bl	801b538 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801a728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d00e      	beq.n	801a74c <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801a72e:	6879      	ldr	r1, [r7, #4]
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	3304      	adds	r3, #4
 801a734:	687a      	ldr	r2, [r7, #4]
 801a736:	8b12      	ldrh	r2, [r2, #24]
 801a738:	9202      	str	r2, [sp, #8]
 801a73a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a73c:	9201      	str	r2, [sp, #4]
 801a73e:	9300      	str	r3, [sp, #0]
 801a740:	460b      	mov	r3, r1
 801a742:	697a      	ldr	r2, [r7, #20]
 801a744:	69b9      	ldr	r1, [r7, #24]
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f005 fbd8 	bl	801fefc <tcp_rst>
    }
    last_state = pcb->state;
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	7d1b      	ldrb	r3, [r3, #20]
 801a750:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f7ff fd30 	bl	801a1b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a758:	693b      	ldr	r3, [r7, #16]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d004      	beq.n	801a768 <tcp_abandon+0x158>
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	f06f 010c 	mvn.w	r1, #12
 801a764:	68f8      	ldr	r0, [r7, #12]
 801a766:	4798      	blx	r3
  }
}
 801a768:	3728      	adds	r7, #40	@ 0x28
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	08026f8c 	.word	0x08026f8c
 801a774:	080270fc 	.word	0x080270fc
 801a778:	08026ffc 	.word	0x08026ffc
 801a77c:	08027118 	.word	0x08027118
 801a780:	240126ac 	.word	0x240126ac
 801a784:	240126a0 	.word	0x240126a0
 801a788:	240126a8 	.word	0x240126a8
 801a78c:	240126b0 	.word	0x240126b0

0801a790 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b082      	sub	sp, #8
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801a798:	2101      	movs	r1, #1
 801a79a:	6878      	ldr	r0, [r7, #4]
 801a79c:	f7ff ff38 	bl	801a610 <tcp_abandon>
}
 801a7a0:	bf00      	nop
 801a7a2:	3708      	adds	r7, #8
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}

0801a7a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b088      	sub	sp, #32
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	60f8      	str	r0, [r7, #12]
 801a7b0:	60b9      	str	r1, [r7, #8]
 801a7b2:	4613      	mov	r3, r2
 801a7b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801a7b6:	2304      	movs	r3, #4
 801a7b8:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 801a7ba:	f7f5 fb71 	bl	800fea0 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d101      	bne.n	801a7c8 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 801a7c4:	4b3e      	ldr	r3, [pc, #248]	@ (801a8c0 <tcp_bind+0x118>)
 801a7c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d109      	bne.n	801a7e2 <tcp_bind+0x3a>
 801a7ce:	4b3d      	ldr	r3, [pc, #244]	@ (801a8c4 <tcp_bind+0x11c>)
 801a7d0:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801a7d4:	493c      	ldr	r1, [pc, #240]	@ (801a8c8 <tcp_bind+0x120>)
 801a7d6:	483d      	ldr	r0, [pc, #244]	@ (801a8cc <tcp_bind+0x124>)
 801a7d8:	f007 fae8 	bl	8021dac <iprintf>
 801a7dc:	f06f 030f 	mvn.w	r3, #15
 801a7e0:	e06a      	b.n	801a8b8 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	7d1b      	ldrb	r3, [r3, #20]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d009      	beq.n	801a7fe <tcp_bind+0x56>
 801a7ea:	4b36      	ldr	r3, [pc, #216]	@ (801a8c4 <tcp_bind+0x11c>)
 801a7ec:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a7f0:	4937      	ldr	r1, [pc, #220]	@ (801a8d0 <tcp_bind+0x128>)
 801a7f2:	4836      	ldr	r0, [pc, #216]	@ (801a8cc <tcp_bind+0x124>)
 801a7f4:	f007 fada 	bl	8021dac <iprintf>
 801a7f8:	f06f 0305 	mvn.w	r3, #5
 801a7fc:	e05c      	b.n	801a8b8 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801a7fe:	88fb      	ldrh	r3, [r7, #6]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d109      	bne.n	801a818 <tcp_bind+0x70>
    port = tcp_new_port();
 801a804:	f000 f916 	bl	801aa34 <tcp_new_port>
 801a808:	4603      	mov	r3, r0
 801a80a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a80c:	88fb      	ldrh	r3, [r7, #6]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d135      	bne.n	801a87e <tcp_bind+0xd6>
      return ERR_BUF;
 801a812:	f06f 0301 	mvn.w	r3, #1
 801a816:	e04f      	b.n	801a8b8 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801a818:	2300      	movs	r3, #0
 801a81a:	61fb      	str	r3, [r7, #28]
 801a81c:	e02b      	b.n	801a876 <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801a81e:	4a2d      	ldr	r2, [pc, #180]	@ (801a8d4 <tcp_bind+0x12c>)
 801a820:	69fb      	ldr	r3, [r7, #28]
 801a822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	61bb      	str	r3, [r7, #24]
 801a82a:	e01e      	b.n	801a86a <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 801a82c:	69bb      	ldr	r3, [r7, #24]
 801a82e:	8adb      	ldrh	r3, [r3, #22]
 801a830:	88fa      	ldrh	r2, [r7, #6]
 801a832:	429a      	cmp	r2, r3
 801a834:	d116      	bne.n	801a864 <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801a836:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d010      	beq.n	801a85e <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 801a83c:	69bb      	ldr	r3, [r7, #24]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d00c      	beq.n	801a85e <tcp_bind+0xb6>
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d009      	beq.n	801a85e <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d005      	beq.n	801a85e <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801a852:	69bb      	ldr	r3, [r7, #24]
 801a854:	681a      	ldr	r2, [r3, #0]
 801a856:	68bb      	ldr	r3, [r7, #8]
 801a858:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d102      	bne.n	801a864 <tcp_bind+0xbc>
              return ERR_USE;
 801a85e:	f06f 0307 	mvn.w	r3, #7
 801a862:	e029      	b.n	801a8b8 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801a864:	69bb      	ldr	r3, [r7, #24]
 801a866:	68db      	ldr	r3, [r3, #12]
 801a868:	61bb      	str	r3, [r7, #24]
 801a86a:	69bb      	ldr	r3, [r7, #24]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d1dd      	bne.n	801a82c <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 801a870:	69fb      	ldr	r3, [r7, #28]
 801a872:	3301      	adds	r3, #1
 801a874:	61fb      	str	r3, [r7, #28]
 801a876:	69fa      	ldr	r2, [r7, #28]
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	dbcf      	blt.n	801a81e <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801a87e:	68bb      	ldr	r3, [r7, #8]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d00c      	beq.n	801a89e <tcp_bind+0xf6>
 801a884:	68bb      	ldr	r3, [r7, #8]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d008      	beq.n	801a89e <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d002      	beq.n	801a898 <tcp_bind+0xf0>
 801a892:	68bb      	ldr	r3, [r7, #8]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	e000      	b.n	801a89a <tcp_bind+0xf2>
 801a898:	2300      	movs	r3, #0
 801a89a:	68fa      	ldr	r2, [r7, #12]
 801a89c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	88fa      	ldrh	r2, [r7, #6]
 801a8a2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801a8a4:	4b0c      	ldr	r3, [pc, #48]	@ (801a8d8 <tcp_bind+0x130>)
 801a8a6:	681a      	ldr	r2, [r3, #0]
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	60da      	str	r2, [r3, #12]
 801a8ac:	4a0a      	ldr	r2, [pc, #40]	@ (801a8d8 <tcp_bind+0x130>)
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	6013      	str	r3, [r2, #0]
 801a8b2:	f005 fe95 	bl	80205e0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801a8b6:	2300      	movs	r3, #0
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	3720      	adds	r7, #32
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}
 801a8c0:	08028a4c 	.word	0x08028a4c
 801a8c4:	08026f8c 	.word	0x08026f8c
 801a8c8:	0802714c 	.word	0x0802714c
 801a8cc:	08026ffc 	.word	0x08026ffc
 801a8d0:	08027164 	.word	0x08027164
 801a8d4:	08028b38 	.word	0x08028b38
 801a8d8:	240126a0 	.word	0x240126a0

0801a8dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b084      	sub	sp, #16
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d106      	bne.n	801a8f8 <tcp_update_rcv_ann_wnd+0x1c>
 801a8ea:	4b25      	ldr	r3, [pc, #148]	@ (801a980 <tcp_update_rcv_ann_wnd+0xa4>)
 801a8ec:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801a8f0:	4924      	ldr	r1, [pc, #144]	@ (801a984 <tcp_update_rcv_ann_wnd+0xa8>)
 801a8f2:	4825      	ldr	r0, [pc, #148]	@ (801a988 <tcp_update_rcv_ann_wnd+0xac>)
 801a8f4:	f007 fa5a 	bl	8021dac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8fc:	687a      	ldr	r2, [r7, #4]
 801a8fe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801a900:	4413      	add	r3, r2
 801a902:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a908:	687a      	ldr	r2, [r7, #4]
 801a90a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801a90c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801a910:	bf28      	it	cs
 801a912:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801a916:	b292      	uxth	r2, r2
 801a918:	4413      	add	r3, r2
 801a91a:	68fa      	ldr	r2, [r7, #12]
 801a91c:	1ad3      	subs	r3, r2, r3
 801a91e:	2b00      	cmp	r3, #0
 801a920:	db08      	blt.n	801a934 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a92e:	68fa      	ldr	r2, [r7, #12]
 801a930:	1ad3      	subs	r3, r2, r3
 801a932:	e020      	b.n	801a976 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a93c:	1ad3      	subs	r3, r2, r3
 801a93e:	2b00      	cmp	r3, #0
 801a940:	dd03      	ble.n	801a94a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	2200      	movs	r2, #0
 801a946:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801a948:	e014      	b.n	801a974 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a952:	1ad3      	subs	r3, r2, r3
 801a954:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a956:	68bb      	ldr	r3, [r7, #8]
 801a958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a95c:	d306      	bcc.n	801a96c <tcp_update_rcv_ann_wnd+0x90>
 801a95e:	4b08      	ldr	r3, [pc, #32]	@ (801a980 <tcp_update_rcv_ann_wnd+0xa4>)
 801a960:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801a964:	4909      	ldr	r1, [pc, #36]	@ (801a98c <tcp_update_rcv_ann_wnd+0xb0>)
 801a966:	4808      	ldr	r0, [pc, #32]	@ (801a988 <tcp_update_rcv_ann_wnd+0xac>)
 801a968:	f007 fa20 	bl	8021dac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801a96c:	68bb      	ldr	r3, [r7, #8]
 801a96e:	b29a      	uxth	r2, r3
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801a974:	2300      	movs	r3, #0
  }
}
 801a976:	4618      	mov	r0, r3
 801a978:	3710      	adds	r7, #16
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	bf00      	nop
 801a980:	08026f8c 	.word	0x08026f8c
 801a984:	08027214 	.word	0x08027214
 801a988:	08026ffc 	.word	0x08026ffc
 801a98c:	08027238 	.word	0x08027238

0801a990 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b084      	sub	sp, #16
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
 801a998:	460b      	mov	r3, r1
 801a99a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 801a99c:	f7f5 fa80 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d107      	bne.n	801a9b6 <tcp_recved+0x26>
 801a9a6:	4b1f      	ldr	r3, [pc, #124]	@ (801aa24 <tcp_recved+0x94>)
 801a9a8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801a9ac:	491e      	ldr	r1, [pc, #120]	@ (801aa28 <tcp_recved+0x98>)
 801a9ae:	481f      	ldr	r0, [pc, #124]	@ (801aa2c <tcp_recved+0x9c>)
 801a9b0:	f007 f9fc 	bl	8021dac <iprintf>
 801a9b4:	e032      	b.n	801aa1c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	7d1b      	ldrb	r3, [r3, #20]
 801a9ba:	2b01      	cmp	r3, #1
 801a9bc:	d106      	bne.n	801a9cc <tcp_recved+0x3c>
 801a9be:	4b19      	ldr	r3, [pc, #100]	@ (801aa24 <tcp_recved+0x94>)
 801a9c0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801a9c4:	491a      	ldr	r1, [pc, #104]	@ (801aa30 <tcp_recved+0xa0>)
 801a9c6:	4819      	ldr	r0, [pc, #100]	@ (801aa2c <tcp_recved+0x9c>)
 801a9c8:	f007 f9f0 	bl	8021dac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a9d0:	887b      	ldrh	r3, [r7, #2]
 801a9d2:	4413      	add	r3, r2
 801a9d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801a9d6:	89fb      	ldrh	r3, [r7, #14]
 801a9d8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801a9dc:	d804      	bhi.n	801a9e8 <tcp_recved+0x58>
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a9e2:	89fa      	ldrh	r2, [r7, #14]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d204      	bcs.n	801a9f2 <tcp_recved+0x62>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801a9ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 801a9f0:	e002      	b.n	801a9f8 <tcp_recved+0x68>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	89fa      	ldrh	r2, [r7, #14]
 801a9f6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801a9f8:	6878      	ldr	r0, [r7, #4]
 801a9fa:	f7ff ff6f 	bl	801a8dc <tcp_update_rcv_ann_wnd>
 801a9fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801aa06:	d309      	bcc.n	801aa1c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	8b5b      	ldrh	r3, [r3, #26]
 801aa0c:	f043 0302 	orr.w	r3, r3, #2
 801aa10:	b29a      	uxth	r2, r3
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801aa16:	6878      	ldr	r0, [r7, #4]
 801aa18:	f004 fcba 	bl	801f390 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801aa1c:	3710      	adds	r7, #16
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bd80      	pop	{r7, pc}
 801aa22:	bf00      	nop
 801aa24:	08026f8c 	.word	0x08026f8c
 801aa28:	08027254 	.word	0x08027254
 801aa2c:	08026ffc 	.word	0x08026ffc
 801aa30:	0802726c 	.word	0x0802726c

0801aa34 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801aa34:	b480      	push	{r7}
 801aa36:	b083      	sub	sp, #12
 801aa38:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801aa3a:	2300      	movs	r3, #0
 801aa3c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801aa3e:	4b1e      	ldr	r3, [pc, #120]	@ (801aab8 <tcp_new_port+0x84>)
 801aa40:	881b      	ldrh	r3, [r3, #0]
 801aa42:	3301      	adds	r3, #1
 801aa44:	b29a      	uxth	r2, r3
 801aa46:	4b1c      	ldr	r3, [pc, #112]	@ (801aab8 <tcp_new_port+0x84>)
 801aa48:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801aa4a:	4b1b      	ldr	r3, [pc, #108]	@ (801aab8 <tcp_new_port+0x84>)
 801aa4c:	881b      	ldrh	r3, [r3, #0]
 801aa4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801aa52:	4293      	cmp	r3, r2
 801aa54:	d103      	bne.n	801aa5e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801aa56:	4b18      	ldr	r3, [pc, #96]	@ (801aab8 <tcp_new_port+0x84>)
 801aa58:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801aa5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801aa5e:	2300      	movs	r3, #0
 801aa60:	71fb      	strb	r3, [r7, #7]
 801aa62:	e01e      	b.n	801aaa2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801aa64:	79fb      	ldrb	r3, [r7, #7]
 801aa66:	4a15      	ldr	r2, [pc, #84]	@ (801aabc <tcp_new_port+0x88>)
 801aa68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	603b      	str	r3, [r7, #0]
 801aa70:	e011      	b.n	801aa96 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	8ada      	ldrh	r2, [r3, #22]
 801aa76:	4b10      	ldr	r3, [pc, #64]	@ (801aab8 <tcp_new_port+0x84>)
 801aa78:	881b      	ldrh	r3, [r3, #0]
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d108      	bne.n	801aa90 <tcp_new_port+0x5c>
        n++;
 801aa7e:	88bb      	ldrh	r3, [r7, #4]
 801aa80:	3301      	adds	r3, #1
 801aa82:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801aa84:	88bb      	ldrh	r3, [r7, #4]
 801aa86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801aa8a:	d3d8      	bcc.n	801aa3e <tcp_new_port+0xa>
          return 0;
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	e00d      	b.n	801aaac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	68db      	ldr	r3, [r3, #12]
 801aa94:	603b      	str	r3, [r7, #0]
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d1ea      	bne.n	801aa72 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801aa9c:	79fb      	ldrb	r3, [r7, #7]
 801aa9e:	3301      	adds	r3, #1
 801aaa0:	71fb      	strb	r3, [r7, #7]
 801aaa2:	79fb      	ldrb	r3, [r7, #7]
 801aaa4:	2b03      	cmp	r3, #3
 801aaa6:	d9dd      	bls.n	801aa64 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801aaa8:	4b03      	ldr	r3, [pc, #12]	@ (801aab8 <tcp_new_port+0x84>)
 801aaaa:	881b      	ldrh	r3, [r3, #0]
}
 801aaac:	4618      	mov	r0, r3
 801aaae:	370c      	adds	r7, #12
 801aab0:	46bd      	mov	sp, r7
 801aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab6:	4770      	bx	lr
 801aab8:	24000048 	.word	0x24000048
 801aabc:	08028b38 	.word	0x08028b38

0801aac0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b08a      	sub	sp, #40	@ 0x28
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	60f8      	str	r0, [r7, #12]
 801aac8:	60b9      	str	r1, [r7, #8]
 801aaca:	603b      	str	r3, [r7, #0]
 801aacc:	4613      	mov	r3, r2
 801aace:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801aad0:	2300      	movs	r3, #0
 801aad2:	627b      	str	r3, [r7, #36]	@ 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 801aad4:	f7f5 f9e4 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d109      	bne.n	801aaf2 <tcp_connect+0x32>
 801aade:	4b7d      	ldr	r3, [pc, #500]	@ (801acd4 <tcp_connect+0x214>)
 801aae0:	f240 4235 	movw	r2, #1077	@ 0x435
 801aae4:	497c      	ldr	r1, [pc, #496]	@ (801acd8 <tcp_connect+0x218>)
 801aae6:	487d      	ldr	r0, [pc, #500]	@ (801acdc <tcp_connect+0x21c>)
 801aae8:	f007 f960 	bl	8021dac <iprintf>
 801aaec:	f06f 030f 	mvn.w	r3, #15
 801aaf0:	e0ec      	b.n	801accc <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d109      	bne.n	801ab0c <tcp_connect+0x4c>
 801aaf8:	4b76      	ldr	r3, [pc, #472]	@ (801acd4 <tcp_connect+0x214>)
 801aafa:	f240 4236 	movw	r2, #1078	@ 0x436
 801aafe:	4978      	ldr	r1, [pc, #480]	@ (801ace0 <tcp_connect+0x220>)
 801ab00:	4876      	ldr	r0, [pc, #472]	@ (801acdc <tcp_connect+0x21c>)
 801ab02:	f007 f953 	bl	8021dac <iprintf>
 801ab06:	f06f 030f 	mvn.w	r3, #15
 801ab0a:	e0df      	b.n	801accc <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	7d1b      	ldrb	r3, [r3, #20]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d009      	beq.n	801ab28 <tcp_connect+0x68>
 801ab14:	4b6f      	ldr	r3, [pc, #444]	@ (801acd4 <tcp_connect+0x214>)
 801ab16:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 801ab1a:	4972      	ldr	r1, [pc, #456]	@ (801ace4 <tcp_connect+0x224>)
 801ab1c:	486f      	ldr	r0, [pc, #444]	@ (801acdc <tcp_connect+0x21c>)
 801ab1e:	f007 f945 	bl	8021dac <iprintf>
 801ab22:	f06f 0309 	mvn.w	r3, #9
 801ab26:	e0d1      	b.n	801accc <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d002      	beq.n	801ab34 <tcp_connect+0x74>
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	e000      	b.n	801ab36 <tcp_connect+0x76>
 801ab34:	2300      	movs	r3, #0
 801ab36:	68fa      	ldr	r2, [r7, #12]
 801ab38:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	88fa      	ldrh	r2, [r7, #6]
 801ab3e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	7a1b      	ldrb	r3, [r3, #8]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d006      	beq.n	801ab56 <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	7a1b      	ldrb	r3, [r3, #8]
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f7fe fb95 	bl	801927c <netif_get_by_index>
 801ab52:	6278      	str	r0, [r7, #36]	@ 0x24
 801ab54:	e005      	b.n	801ab62 <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	3304      	adds	r3, #4
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f7fa fc14 	bl	8015388 <ip4_route>
 801ab60:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 801ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d102      	bne.n	801ab6e <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801ab68:	f06f 0303 	mvn.w	r3, #3
 801ab6c:	e0ae      	b.n	801accc <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d003      	beq.n	801ab7c <tcp_connect+0xbc>
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d111      	bne.n	801aba0 <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d002      	beq.n	801ab88 <tcp_connect+0xc8>
 801ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab84:	3304      	adds	r3, #4
 801ab86:	e000      	b.n	801ab8a <tcp_connect+0xca>
 801ab88:	2300      	movs	r3, #0
 801ab8a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801ab8c:	69fb      	ldr	r3, [r7, #28]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d102      	bne.n	801ab98 <tcp_connect+0xd8>
      return ERR_RTE;
 801ab92:	f06f 0303 	mvn.w	r3, #3
 801ab96:	e099      	b.n	801accc <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ab98:	69fb      	ldr	r3, [r7, #28]
 801ab9a:	681a      	ldr	r2, [r3, #0]
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	8adb      	ldrh	r3, [r3, #22]
 801aba4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	8adb      	ldrh	r3, [r3, #22]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d10c      	bne.n	801abc8 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 801abae:	f7ff ff41 	bl	801aa34 <tcp_new_port>
 801abb2:	4603      	mov	r3, r0
 801abb4:	461a      	mov	r2, r3
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	8adb      	ldrh	r3, [r3, #22]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d102      	bne.n	801abc8 <tcp_connect+0x108>
      return ERR_BUF;
 801abc2:	f06f 0301 	mvn.w	r3, #1
 801abc6:	e081      	b.n	801accc <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801abc8:	68f8      	ldr	r0, [r7, #12]
 801abca:	f001 f85b 	bl	801bc84 <tcp_next_iss>
 801abce:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	2200      	movs	r2, #0
 801abd4:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	697a      	ldr	r2, [r7, #20]
 801abda:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 801abdc:	697b      	ldr	r3, [r7, #20]
 801abde:	1e5a      	subs	r2, r3, #1
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 801abe4:	697b      	ldr	r3, [r7, #20]
 801abe6:	1e5a      	subs	r2, r3, #1
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	1e5a      	subs	r2, r3, #1
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801abfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801ac12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801ac1c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	3304      	adds	r3, #4
 801ac26:	461a      	mov	r2, r3
 801ac28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ac2a:	f001 f851 	bl	801bcd0 <tcp_eff_send_mss_netif>
 801ac2e:	4603      	mov	r3, r0
 801ac30:	461a      	mov	r2, r3
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	2201      	movs	r2, #1
 801ac3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	683a      	ldr	r2, [r7, #0]
 801ac42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801ac46:	2102      	movs	r1, #2
 801ac48:	68f8      	ldr	r0, [r7, #12]
 801ac4a:	f004 fab3 	bl	801f1b4 <tcp_enqueue_flags>
 801ac4e:	4603      	mov	r3, r0
 801ac50:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801ac52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d136      	bne.n	801acc8 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	2202      	movs	r2, #2
 801ac5e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801ac60:	8b7b      	ldrh	r3, [r7, #26]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d021      	beq.n	801acaa <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801ac66:	4b20      	ldr	r3, [pc, #128]	@ (801ace8 <tcp_connect+0x228>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	68fa      	ldr	r2, [r7, #12]
 801ac6c:	429a      	cmp	r2, r3
 801ac6e:	d105      	bne.n	801ac7c <tcp_connect+0x1bc>
 801ac70:	4b1d      	ldr	r3, [pc, #116]	@ (801ace8 <tcp_connect+0x228>)
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	68db      	ldr	r3, [r3, #12]
 801ac76:	4a1c      	ldr	r2, [pc, #112]	@ (801ace8 <tcp_connect+0x228>)
 801ac78:	6013      	str	r3, [r2, #0]
 801ac7a:	e013      	b.n	801aca4 <tcp_connect+0x1e4>
 801ac7c:	4b1a      	ldr	r3, [pc, #104]	@ (801ace8 <tcp_connect+0x228>)
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	623b      	str	r3, [r7, #32]
 801ac82:	e00c      	b.n	801ac9e <tcp_connect+0x1de>
 801ac84:	6a3b      	ldr	r3, [r7, #32]
 801ac86:	68db      	ldr	r3, [r3, #12]
 801ac88:	68fa      	ldr	r2, [r7, #12]
 801ac8a:	429a      	cmp	r2, r3
 801ac8c:	d104      	bne.n	801ac98 <tcp_connect+0x1d8>
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	68da      	ldr	r2, [r3, #12]
 801ac92:	6a3b      	ldr	r3, [r7, #32]
 801ac94:	60da      	str	r2, [r3, #12]
 801ac96:	e005      	b.n	801aca4 <tcp_connect+0x1e4>
 801ac98:	6a3b      	ldr	r3, [r7, #32]
 801ac9a:	68db      	ldr	r3, [r3, #12]
 801ac9c:	623b      	str	r3, [r7, #32]
 801ac9e:	6a3b      	ldr	r3, [r7, #32]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d1ef      	bne.n	801ac84 <tcp_connect+0x1c4>
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	2200      	movs	r2, #0
 801aca8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801acaa:	4b10      	ldr	r3, [pc, #64]	@ (801acec <tcp_connect+0x22c>)
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	60da      	str	r2, [r3, #12]
 801acb2:	4a0e      	ldr	r2, [pc, #56]	@ (801acec <tcp_connect+0x22c>)
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	6013      	str	r3, [r2, #0]
 801acb8:	f005 fc92 	bl	80205e0 <tcp_timer_needed>
 801acbc:	4b0c      	ldr	r3, [pc, #48]	@ (801acf0 <tcp_connect+0x230>)
 801acbe:	2201      	movs	r2, #1
 801acc0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801acc2:	68f8      	ldr	r0, [r7, #12]
 801acc4:	f004 fb64 	bl	801f390 <tcp_output>
  }
  return ret;
 801acc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801accc:	4618      	mov	r0, r3
 801acce:	3728      	adds	r7, #40	@ 0x28
 801acd0:	46bd      	mov	sp, r7
 801acd2:	bd80      	pop	{r7, pc}
 801acd4:	08026f8c 	.word	0x08026f8c
 801acd8:	08027294 	.word	0x08027294
 801acdc:	08026ffc 	.word	0x08026ffc
 801ace0:	080272b0 	.word	0x080272b0
 801ace4:	080272cc 	.word	0x080272cc
 801ace8:	240126a0 	.word	0x240126a0
 801acec:	240126a8 	.word	0x240126a8
 801acf0:	240126b0 	.word	0x240126b0

0801acf4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801acf4:	b5b0      	push	{r4, r5, r7, lr}
 801acf6:	b090      	sub	sp, #64	@ 0x40
 801acf8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801acfa:	2300      	movs	r3, #0
 801acfc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801ad00:	4b95      	ldr	r3, [pc, #596]	@ (801af58 <tcp_slowtmr+0x264>)
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	3301      	adds	r3, #1
 801ad06:	4a94      	ldr	r2, [pc, #592]	@ (801af58 <tcp_slowtmr+0x264>)
 801ad08:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801ad0a:	4b94      	ldr	r3, [pc, #592]	@ (801af5c <tcp_slowtmr+0x268>)
 801ad0c:	781b      	ldrb	r3, [r3, #0]
 801ad0e:	3301      	adds	r3, #1
 801ad10:	b2da      	uxtb	r2, r3
 801ad12:	4b92      	ldr	r3, [pc, #584]	@ (801af5c <tcp_slowtmr+0x268>)
 801ad14:	701a      	strb	r2, [r3, #0]
 801ad16:	e000      	b.n	801ad1a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801ad18:	bf00      	nop
  prev = NULL;
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801ad1e:	4b90      	ldr	r3, [pc, #576]	@ (801af60 <tcp_slowtmr+0x26c>)
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801ad24:	e29d      	b.n	801b262 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801ad26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad28:	7d1b      	ldrb	r3, [r3, #20]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d106      	bne.n	801ad3c <tcp_slowtmr+0x48>
 801ad2e:	4b8d      	ldr	r3, [pc, #564]	@ (801af64 <tcp_slowtmr+0x270>)
 801ad30:	f240 42be 	movw	r2, #1214	@ 0x4be
 801ad34:	498c      	ldr	r1, [pc, #560]	@ (801af68 <tcp_slowtmr+0x274>)
 801ad36:	488d      	ldr	r0, [pc, #564]	@ (801af6c <tcp_slowtmr+0x278>)
 801ad38:	f007 f838 	bl	8021dac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801ad3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad3e:	7d1b      	ldrb	r3, [r3, #20]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d106      	bne.n	801ad52 <tcp_slowtmr+0x5e>
 801ad44:	4b87      	ldr	r3, [pc, #540]	@ (801af64 <tcp_slowtmr+0x270>)
 801ad46:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801ad4a:	4989      	ldr	r1, [pc, #548]	@ (801af70 <tcp_slowtmr+0x27c>)
 801ad4c:	4887      	ldr	r0, [pc, #540]	@ (801af6c <tcp_slowtmr+0x278>)
 801ad4e:	f007 f82d 	bl	8021dac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801ad52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad54:	7d1b      	ldrb	r3, [r3, #20]
 801ad56:	2b0a      	cmp	r3, #10
 801ad58:	d106      	bne.n	801ad68 <tcp_slowtmr+0x74>
 801ad5a:	4b82      	ldr	r3, [pc, #520]	@ (801af64 <tcp_slowtmr+0x270>)
 801ad5c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801ad60:	4984      	ldr	r1, [pc, #528]	@ (801af74 <tcp_slowtmr+0x280>)
 801ad62:	4882      	ldr	r0, [pc, #520]	@ (801af6c <tcp_slowtmr+0x278>)
 801ad64:	f007 f822 	bl	8021dac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad6a:	7f9a      	ldrb	r2, [r3, #30]
 801ad6c:	4b7b      	ldr	r3, [pc, #492]	@ (801af5c <tcp_slowtmr+0x268>)
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	429a      	cmp	r2, r3
 801ad72:	d105      	bne.n	801ad80 <tcp_slowtmr+0x8c>
      prev = pcb;
 801ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad76:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801ad78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad7a:	68db      	ldr	r3, [r3, #12]
 801ad7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801ad7e:	e270      	b.n	801b262 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801ad80:	4b76      	ldr	r3, [pc, #472]	@ (801af5c <tcp_slowtmr+0x268>)
 801ad82:	781a      	ldrb	r2, [r3, #0]
 801ad84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad86:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801ad88:	2300      	movs	r3, #0
 801ad8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801ad94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad96:	7d1b      	ldrb	r3, [r3, #20]
 801ad98:	2b02      	cmp	r3, #2
 801ad9a:	d10a      	bne.n	801adb2 <tcp_slowtmr+0xbe>
 801ad9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ada2:	2b05      	cmp	r3, #5
 801ada4:	d905      	bls.n	801adb2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801ada6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adaa:	3301      	adds	r3, #1
 801adac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801adb0:	e11e      	b.n	801aff0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801adb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801adb8:	2b0b      	cmp	r3, #11
 801adba:	d905      	bls.n	801adc8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801adbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adc0:	3301      	adds	r3, #1
 801adc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801adc6:	e113      	b.n	801aff0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801adc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801adce:	2b00      	cmp	r3, #0
 801add0:	d075      	beq.n	801aebe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801add4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801add6:	2b00      	cmp	r3, #0
 801add8:	d006      	beq.n	801ade8 <tcp_slowtmr+0xf4>
 801adda:	4b62      	ldr	r3, [pc, #392]	@ (801af64 <tcp_slowtmr+0x270>)
 801addc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801ade0:	4965      	ldr	r1, [pc, #404]	@ (801af78 <tcp_slowtmr+0x284>)
 801ade2:	4862      	ldr	r0, [pc, #392]	@ (801af6c <tcp_slowtmr+0x278>)
 801ade4:	f006 ffe2 	bl	8021dac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801adec:	2b00      	cmp	r3, #0
 801adee:	d106      	bne.n	801adfe <tcp_slowtmr+0x10a>
 801adf0:	4b5c      	ldr	r3, [pc, #368]	@ (801af64 <tcp_slowtmr+0x270>)
 801adf2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801adf6:	4961      	ldr	r1, [pc, #388]	@ (801af7c <tcp_slowtmr+0x288>)
 801adf8:	485c      	ldr	r0, [pc, #368]	@ (801af6c <tcp_slowtmr+0x278>)
 801adfa:	f006 ffd7 	bl	8021dac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801adfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae00:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801ae04:	2b0b      	cmp	r3, #11
 801ae06:	d905      	bls.n	801ae14 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801ae08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae0c:	3301      	adds	r3, #1
 801ae0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae12:	e0ed      	b.n	801aff0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801ae14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae16:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801ae1a:	3b01      	subs	r3, #1
 801ae1c:	4a58      	ldr	r2, [pc, #352]	@ (801af80 <tcp_slowtmr+0x28c>)
 801ae1e:	5cd3      	ldrb	r3, [r2, r3]
 801ae20:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801ae22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801ae28:	7c7a      	ldrb	r2, [r7, #17]
 801ae2a:	429a      	cmp	r2, r3
 801ae2c:	d907      	bls.n	801ae3e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801ae2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae30:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801ae34:	3301      	adds	r3, #1
 801ae36:	b2da      	uxtb	r2, r3
 801ae38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae3a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801ae3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801ae44:	7c7a      	ldrb	r2, [r7, #17]
 801ae46:	429a      	cmp	r2, r3
 801ae48:	f200 80d2 	bhi.w	801aff0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801ae50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d108      	bne.n	801ae6c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801ae5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ae5c:	f005 f942 	bl	80200e4 <tcp_zero_window_probe>
 801ae60:	4603      	mov	r3, r0
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d014      	beq.n	801ae90 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801ae66:	2300      	movs	r3, #0
 801ae68:	623b      	str	r3, [r7, #32]
 801ae6a:	e011      	b.n	801ae90 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801ae6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ae72:	4619      	mov	r1, r3
 801ae74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ae76:	f004 f805 	bl	801ee84 <tcp_split_unsent_seg>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d107      	bne.n	801ae90 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801ae80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ae82:	f004 fa85 	bl	801f390 <tcp_output>
 801ae86:	4603      	mov	r3, r0
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d101      	bne.n	801ae90 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801ae90:	6a3b      	ldr	r3, [r7, #32]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	f000 80ac 	beq.w	801aff0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aea2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801aea6:	2b06      	cmp	r3, #6
 801aea8:	f200 80a2 	bhi.w	801aff0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801aeac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	b2da      	uxtb	r2, r3
 801aeb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeb8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801aebc:	e098      	b.n	801aff0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801aebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aec0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	db0f      	blt.n	801aee8 <tcp_slowtmr+0x1f4>
 801aec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801aece:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801aed2:	4293      	cmp	r3, r2
 801aed4:	d008      	beq.n	801aee8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801aed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aed8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801aedc:	b29b      	uxth	r3, r3
 801aede:	3301      	adds	r3, #1
 801aee0:	b29b      	uxth	r3, r3
 801aee2:	b21a      	sxth	r2, r3
 801aee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aee6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801aee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801aeee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aef0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801aef4:	429a      	cmp	r2, r3
 801aef6:	db7b      	blt.n	801aff0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801aef8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801aefa:	f004 fd3f 	bl	801f97c <tcp_rexmit_rto_prepare>
 801aefe:	4603      	mov	r3, r0
 801af00:	2b00      	cmp	r3, #0
 801af02:	d007      	beq.n	801af14 <tcp_slowtmr+0x220>
 801af04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d171      	bne.n	801aff0 <tcp_slowtmr+0x2fc>
 801af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801af10:	2b00      	cmp	r3, #0
 801af12:	d06d      	beq.n	801aff0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801af14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af16:	7d1b      	ldrb	r3, [r3, #20]
 801af18:	2b02      	cmp	r3, #2
 801af1a:	d03a      	beq.n	801af92 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801af1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801af22:	2b0c      	cmp	r3, #12
 801af24:	bf28      	it	cs
 801af26:	230c      	movcs	r3, #12
 801af28:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801af2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801af30:	10db      	asrs	r3, r3, #3
 801af32:	b21b      	sxth	r3, r3
 801af34:	461a      	mov	r2, r3
 801af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801af3c:	4413      	add	r3, r2
 801af3e:	7efa      	ldrb	r2, [r7, #27]
 801af40:	4910      	ldr	r1, [pc, #64]	@ (801af84 <tcp_slowtmr+0x290>)
 801af42:	5c8a      	ldrb	r2, [r1, r2]
 801af44:	4093      	lsls	r3, r2
 801af46:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801af4e:	4293      	cmp	r3, r2
 801af50:	dc1a      	bgt.n	801af88 <tcp_slowtmr+0x294>
 801af52:	697b      	ldr	r3, [r7, #20]
 801af54:	b21a      	sxth	r2, r3
 801af56:	e019      	b.n	801af8c <tcp_slowtmr+0x298>
 801af58:	2401269c 	.word	0x2401269c
 801af5c:	240126b2 	.word	0x240126b2
 801af60:	240126a8 	.word	0x240126a8
 801af64:	08026f8c 	.word	0x08026f8c
 801af68:	080272fc 	.word	0x080272fc
 801af6c:	08026ffc 	.word	0x08026ffc
 801af70:	08027328 	.word	0x08027328
 801af74:	08027354 	.word	0x08027354
 801af78:	08027384 	.word	0x08027384
 801af7c:	080273b8 	.word	0x080273b8
 801af80:	08028b30 	.word	0x08028b30
 801af84:	08028b20 	.word	0x08028b20
 801af88:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801af8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af94:	2200      	movs	r2, #0
 801af96:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801af9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801afa4:	4293      	cmp	r3, r2
 801afa6:	bf28      	it	cs
 801afa8:	4613      	movcs	r3, r2
 801afaa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801afac:	8a7b      	ldrh	r3, [r7, #18]
 801afae:	085b      	lsrs	r3, r3, #1
 801afb0:	b29a      	uxth	r2, r3
 801afb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afb4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801afb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801afbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801afc2:	005b      	lsls	r3, r3, #1
 801afc4:	b29b      	uxth	r3, r3
 801afc6:	429a      	cmp	r2, r3
 801afc8:	d206      	bcs.n	801afd8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801afce:	005b      	lsls	r3, r3, #1
 801afd0:	b29a      	uxth	r2, r3
 801afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afd4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afda:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801afdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afde:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801afe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afe4:	2200      	movs	r2, #0
 801afe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801afea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801afec:	f004 fd36 	bl	801fa5c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801aff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aff2:	7d1b      	ldrb	r3, [r3, #20]
 801aff4:	2b06      	cmp	r3, #6
 801aff6:	d111      	bne.n	801b01c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801affa:	8b5b      	ldrh	r3, [r3, #26]
 801affc:	f003 0310 	and.w	r3, r3, #16
 801b000:	2b00      	cmp	r3, #0
 801b002:	d00b      	beq.n	801b01c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b004:	4b9c      	ldr	r3, [pc, #624]	@ (801b278 <tcp_slowtmr+0x584>)
 801b006:	681a      	ldr	r2, [r3, #0]
 801b008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b00a:	6a1b      	ldr	r3, [r3, #32]
 801b00c:	1ad3      	subs	r3, r2, r3
 801b00e:	2b28      	cmp	r3, #40	@ 0x28
 801b010:	d904      	bls.n	801b01c <tcp_slowtmr+0x328>
          ++pcb_remove;
 801b012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b016:	3301      	adds	r3, #1
 801b018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b01e:	7a5b      	ldrb	r3, [r3, #9]
 801b020:	f003 0308 	and.w	r3, r3, #8
 801b024:	2b00      	cmp	r3, #0
 801b026:	d04a      	beq.n	801b0be <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801b028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b02a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b02c:	2b04      	cmp	r3, #4
 801b02e:	d003      	beq.n	801b038 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b032:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b034:	2b07      	cmp	r3, #7
 801b036:	d142      	bne.n	801b0be <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b038:	4b8f      	ldr	r3, [pc, #572]	@ (801b278 <tcp_slowtmr+0x584>)
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b03e:	6a1b      	ldr	r3, [r3, #32]
 801b040:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b044:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b048:	4b8c      	ldr	r3, [pc, #560]	@ (801b27c <tcp_slowtmr+0x588>)
 801b04a:	440b      	add	r3, r1
 801b04c:	498c      	ldr	r1, [pc, #560]	@ (801b280 <tcp_slowtmr+0x58c>)
 801b04e:	fba1 1303 	umull	r1, r3, r1, r3
 801b052:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b054:	429a      	cmp	r2, r3
 801b056:	d90a      	bls.n	801b06e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801b058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b05c:	3301      	adds	r3, #1
 801b05e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801b062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b066:	3301      	adds	r3, #1
 801b068:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b06c:	e027      	b.n	801b0be <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b06e:	4b82      	ldr	r3, [pc, #520]	@ (801b278 <tcp_slowtmr+0x584>)
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b074:	6a1b      	ldr	r3, [r3, #32]
 801b076:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b07a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b080:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b084:	4618      	mov	r0, r3
 801b086:	4b7f      	ldr	r3, [pc, #508]	@ (801b284 <tcp_slowtmr+0x590>)
 801b088:	fb00 f303 	mul.w	r3, r0, r3
 801b08c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b08e:	497c      	ldr	r1, [pc, #496]	@ (801b280 <tcp_slowtmr+0x58c>)
 801b090:	fba1 1303 	umull	r1, r3, r1, r3
 801b094:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b096:	429a      	cmp	r2, r3
 801b098:	d911      	bls.n	801b0be <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801b09a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b09c:	f004 ffe2 	bl	8020064 <tcp_keepalive>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801b0a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d107      	bne.n	801b0be <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801b0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0b0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b0b4:	3301      	adds	r3, #1
 801b0b6:	b2da      	uxtb	r2, r3
 801b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0ba:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d011      	beq.n	801b0ea <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b0c6:	4b6c      	ldr	r3, [pc, #432]	@ (801b278 <tcp_slowtmr+0x584>)
 801b0c8:	681a      	ldr	r2, [r3, #0]
 801b0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0cc:	6a1b      	ldr	r3, [r3, #32]
 801b0ce:	1ad2      	subs	r2, r2, r3
 801b0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b0d6:	4619      	mov	r1, r3
 801b0d8:	460b      	mov	r3, r1
 801b0da:	005b      	lsls	r3, r3, #1
 801b0dc:	440b      	add	r3, r1
 801b0de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b0e0:	429a      	cmp	r2, r3
 801b0e2:	d302      	bcc.n	801b0ea <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801b0e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b0e6:	f000 fe9d 	bl	801be24 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801b0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0ec:	7d1b      	ldrb	r3, [r3, #20]
 801b0ee:	2b03      	cmp	r3, #3
 801b0f0:	d10b      	bne.n	801b10a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b0f2:	4b61      	ldr	r3, [pc, #388]	@ (801b278 <tcp_slowtmr+0x584>)
 801b0f4:	681a      	ldr	r2, [r3, #0]
 801b0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0f8:	6a1b      	ldr	r3, [r3, #32]
 801b0fa:	1ad3      	subs	r3, r2, r3
 801b0fc:	2b28      	cmp	r3, #40	@ 0x28
 801b0fe:	d904      	bls.n	801b10a <tcp_slowtmr+0x416>
        ++pcb_remove;
 801b100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b104:	3301      	adds	r3, #1
 801b106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801b10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b10c:	7d1b      	ldrb	r3, [r3, #20]
 801b10e:	2b09      	cmp	r3, #9
 801b110:	d10b      	bne.n	801b12a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b112:	4b59      	ldr	r3, [pc, #356]	@ (801b278 <tcp_slowtmr+0x584>)
 801b114:	681a      	ldr	r2, [r3, #0]
 801b116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b118:	6a1b      	ldr	r3, [r3, #32]
 801b11a:	1ad3      	subs	r3, r2, r3
 801b11c:	2bf0      	cmp	r3, #240	@ 0xf0
 801b11e:	d904      	bls.n	801b12a <tcp_slowtmr+0x436>
        ++pcb_remove;
 801b120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b124:	3301      	adds	r3, #1
 801b126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801b12a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d060      	beq.n	801b1f4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801b132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b138:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801b13a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b13c:	f000 fcbe 	bl	801babc <tcp_pcb_purge>
      if (prev != NULL) {
 801b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b142:	2b00      	cmp	r3, #0
 801b144:	d010      	beq.n	801b168 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b146:	4b50      	ldr	r3, [pc, #320]	@ (801b288 <tcp_slowtmr+0x594>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b14c:	429a      	cmp	r2, r3
 801b14e:	d106      	bne.n	801b15e <tcp_slowtmr+0x46a>
 801b150:	4b4e      	ldr	r3, [pc, #312]	@ (801b28c <tcp_slowtmr+0x598>)
 801b152:	f240 526d 	movw	r2, #1389	@ 0x56d
 801b156:	494e      	ldr	r1, [pc, #312]	@ (801b290 <tcp_slowtmr+0x59c>)
 801b158:	484e      	ldr	r0, [pc, #312]	@ (801b294 <tcp_slowtmr+0x5a0>)
 801b15a:	f006 fe27 	bl	8021dac <iprintf>
        prev->next = pcb->next;
 801b15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b160:	68da      	ldr	r2, [r3, #12]
 801b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b164:	60da      	str	r2, [r3, #12]
 801b166:	e00f      	b.n	801b188 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b168:	4b47      	ldr	r3, [pc, #284]	@ (801b288 <tcp_slowtmr+0x594>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b16e:	429a      	cmp	r2, r3
 801b170:	d006      	beq.n	801b180 <tcp_slowtmr+0x48c>
 801b172:	4b46      	ldr	r3, [pc, #280]	@ (801b28c <tcp_slowtmr+0x598>)
 801b174:	f240 5271 	movw	r2, #1393	@ 0x571
 801b178:	4947      	ldr	r1, [pc, #284]	@ (801b298 <tcp_slowtmr+0x5a4>)
 801b17a:	4846      	ldr	r0, [pc, #280]	@ (801b294 <tcp_slowtmr+0x5a0>)
 801b17c:	f006 fe16 	bl	8021dac <iprintf>
        tcp_active_pcbs = pcb->next;
 801b180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b182:	68db      	ldr	r3, [r3, #12]
 801b184:	4a40      	ldr	r2, [pc, #256]	@ (801b288 <tcp_slowtmr+0x594>)
 801b186:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801b188:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d013      	beq.n	801b1b8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b192:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b196:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801b198:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b19c:	3304      	adds	r3, #4
 801b19e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b1a0:	8ad2      	ldrh	r2, [r2, #22]
 801b1a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b1a4:	8b09      	ldrh	r1, [r1, #24]
 801b1a6:	9102      	str	r1, [sp, #8]
 801b1a8:	9201      	str	r2, [sp, #4]
 801b1aa:	9300      	str	r3, [sp, #0]
 801b1ac:	462b      	mov	r3, r5
 801b1ae:	4622      	mov	r2, r4
 801b1b0:	4601      	mov	r1, r0
 801b1b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b1b4:	f004 fea2 	bl	801fefc <tcp_rst>
      err_arg = pcb->callback_arg;
 801b1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1ba:	691b      	ldr	r3, [r3, #16]
 801b1bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801b1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1c0:	7d1b      	ldrb	r3, [r3, #20]
 801b1c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801b1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1ca:	68db      	ldr	r3, [r3, #12]
 801b1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801b1ce:	6838      	ldr	r0, [r7, #0]
 801b1d0:	f7fe fff2 	bl	801a1b8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801b1d4:	4b31      	ldr	r3, [pc, #196]	@ (801b29c <tcp_slowtmr+0x5a8>)
 801b1d6:	2200      	movs	r2, #0
 801b1d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d004      	beq.n	801b1ea <tcp_slowtmr+0x4f6>
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	f06f 010c 	mvn.w	r1, #12
 801b1e6:	68b8      	ldr	r0, [r7, #8]
 801b1e8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801b1ea:	4b2c      	ldr	r3, [pc, #176]	@ (801b29c <tcp_slowtmr+0x5a8>)
 801b1ec:	781b      	ldrb	r3, [r3, #0]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d037      	beq.n	801b262 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801b1f2:	e592      	b.n	801ad1a <tcp_slowtmr+0x26>
      prev = pcb;
 801b1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1fa:	68db      	ldr	r3, [r3, #12]
 801b1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801b1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b200:	7f1b      	ldrb	r3, [r3, #28]
 801b202:	3301      	adds	r3, #1
 801b204:	b2da      	uxtb	r2, r3
 801b206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b208:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b20c:	7f1a      	ldrb	r2, [r3, #28]
 801b20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b210:	7f5b      	ldrb	r3, [r3, #29]
 801b212:	429a      	cmp	r2, r3
 801b214:	d325      	bcc.n	801b262 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b218:	2200      	movs	r2, #0
 801b21a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801b21c:	4b1f      	ldr	r3, [pc, #124]	@ (801b29c <tcp_slowtmr+0x5a8>)
 801b21e:	2200      	movs	r2, #0
 801b220:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801b222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d00b      	beq.n	801b244 <tcp_slowtmr+0x550>
 801b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b234:	6912      	ldr	r2, [r2, #16]
 801b236:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b238:	4610      	mov	r0, r2
 801b23a:	4798      	blx	r3
 801b23c:	4603      	mov	r3, r0
 801b23e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801b242:	e002      	b.n	801b24a <tcp_slowtmr+0x556>
 801b244:	2300      	movs	r3, #0
 801b246:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801b24a:	4b14      	ldr	r3, [pc, #80]	@ (801b29c <tcp_slowtmr+0x5a8>)
 801b24c:	781b      	ldrb	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	f47f ad62 	bne.w	801ad18 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801b254:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d102      	bne.n	801b262 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801b25c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b25e:	f004 f897 	bl	801f390 <tcp_output>
  while (pcb != NULL) {
 801b262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b264:	2b00      	cmp	r3, #0
 801b266:	f47f ad5e 	bne.w	801ad26 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801b26a:	2300      	movs	r3, #0
 801b26c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801b26e:	4b0c      	ldr	r3, [pc, #48]	@ (801b2a0 <tcp_slowtmr+0x5ac>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b274:	e069      	b.n	801b34a <tcp_slowtmr+0x656>
 801b276:	bf00      	nop
 801b278:	2401269c 	.word	0x2401269c
 801b27c:	000a4cb8 	.word	0x000a4cb8
 801b280:	10624dd3 	.word	0x10624dd3
 801b284:	000124f8 	.word	0x000124f8
 801b288:	240126a8 	.word	0x240126a8
 801b28c:	08026f8c 	.word	0x08026f8c
 801b290:	080273f0 	.word	0x080273f0
 801b294:	08026ffc 	.word	0x08026ffc
 801b298:	0802741c 	.word	0x0802741c
 801b29c:	240126b0 	.word	0x240126b0
 801b2a0:	240126ac 	.word	0x240126ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2a6:	7d1b      	ldrb	r3, [r3, #20]
 801b2a8:	2b0a      	cmp	r3, #10
 801b2aa:	d006      	beq.n	801b2ba <tcp_slowtmr+0x5c6>
 801b2ac:	4b2b      	ldr	r3, [pc, #172]	@ (801b35c <tcp_slowtmr+0x668>)
 801b2ae:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801b2b2:	492b      	ldr	r1, [pc, #172]	@ (801b360 <tcp_slowtmr+0x66c>)
 801b2b4:	482b      	ldr	r0, [pc, #172]	@ (801b364 <tcp_slowtmr+0x670>)
 801b2b6:	f006 fd79 	bl	8021dac <iprintf>
    pcb_remove = 0;
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b2c0:	4b29      	ldr	r3, [pc, #164]	@ (801b368 <tcp_slowtmr+0x674>)
 801b2c2:	681a      	ldr	r2, [r3, #0]
 801b2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2c6:	6a1b      	ldr	r3, [r3, #32]
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	2bf0      	cmp	r3, #240	@ 0xf0
 801b2cc:	d904      	bls.n	801b2d8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801b2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2d2:	3301      	adds	r3, #1
 801b2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d02f      	beq.n	801b340 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801b2e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b2e2:	f000 fbeb 	bl	801babc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d010      	beq.n	801b30e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b2ec:	4b1f      	ldr	r3, [pc, #124]	@ (801b36c <tcp_slowtmr+0x678>)
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b2f2:	429a      	cmp	r2, r3
 801b2f4:	d106      	bne.n	801b304 <tcp_slowtmr+0x610>
 801b2f6:	4b19      	ldr	r3, [pc, #100]	@ (801b35c <tcp_slowtmr+0x668>)
 801b2f8:	f240 52af 	movw	r2, #1455	@ 0x5af
 801b2fc:	491c      	ldr	r1, [pc, #112]	@ (801b370 <tcp_slowtmr+0x67c>)
 801b2fe:	4819      	ldr	r0, [pc, #100]	@ (801b364 <tcp_slowtmr+0x670>)
 801b300:	f006 fd54 	bl	8021dac <iprintf>
        prev->next = pcb->next;
 801b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b306:	68da      	ldr	r2, [r3, #12]
 801b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b30a:	60da      	str	r2, [r3, #12]
 801b30c:	e00f      	b.n	801b32e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801b30e:	4b17      	ldr	r3, [pc, #92]	@ (801b36c <tcp_slowtmr+0x678>)
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b314:	429a      	cmp	r2, r3
 801b316:	d006      	beq.n	801b326 <tcp_slowtmr+0x632>
 801b318:	4b10      	ldr	r3, [pc, #64]	@ (801b35c <tcp_slowtmr+0x668>)
 801b31a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801b31e:	4915      	ldr	r1, [pc, #84]	@ (801b374 <tcp_slowtmr+0x680>)
 801b320:	4810      	ldr	r0, [pc, #64]	@ (801b364 <tcp_slowtmr+0x670>)
 801b322:	f006 fd43 	bl	8021dac <iprintf>
        tcp_tw_pcbs = pcb->next;
 801b326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b328:	68db      	ldr	r3, [r3, #12]
 801b32a:	4a10      	ldr	r2, [pc, #64]	@ (801b36c <tcp_slowtmr+0x678>)
 801b32c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801b32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b330:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801b332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b334:	68db      	ldr	r3, [r3, #12]
 801b336:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801b338:	69f8      	ldr	r0, [r7, #28]
 801b33a:	f7fe ff3d 	bl	801a1b8 <tcp_free>
 801b33e:	e004      	b.n	801b34a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801b340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b342:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b346:	68db      	ldr	r3, [r3, #12]
 801b348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d1a9      	bne.n	801b2a4 <tcp_slowtmr+0x5b0>
    }
  }
}
 801b350:	bf00      	nop
 801b352:	bf00      	nop
 801b354:	3730      	adds	r7, #48	@ 0x30
 801b356:	46bd      	mov	sp, r7
 801b358:	bdb0      	pop	{r4, r5, r7, pc}
 801b35a:	bf00      	nop
 801b35c:	08026f8c 	.word	0x08026f8c
 801b360:	08027448 	.word	0x08027448
 801b364:	08026ffc 	.word	0x08026ffc
 801b368:	2401269c 	.word	0x2401269c
 801b36c:	240126ac 	.word	0x240126ac
 801b370:	08027478 	.word	0x08027478
 801b374:	080274a0 	.word	0x080274a0

0801b378 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b082      	sub	sp, #8
 801b37c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801b37e:	4b2d      	ldr	r3, [pc, #180]	@ (801b434 <tcp_fasttmr+0xbc>)
 801b380:	781b      	ldrb	r3, [r3, #0]
 801b382:	3301      	adds	r3, #1
 801b384:	b2da      	uxtb	r2, r3
 801b386:	4b2b      	ldr	r3, [pc, #172]	@ (801b434 <tcp_fasttmr+0xbc>)
 801b388:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801b38a:	4b2b      	ldr	r3, [pc, #172]	@ (801b438 <tcp_fasttmr+0xc0>)
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b390:	e048      	b.n	801b424 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	7f9a      	ldrb	r2, [r3, #30]
 801b396:	4b27      	ldr	r3, [pc, #156]	@ (801b434 <tcp_fasttmr+0xbc>)
 801b398:	781b      	ldrb	r3, [r3, #0]
 801b39a:	429a      	cmp	r2, r3
 801b39c:	d03f      	beq.n	801b41e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801b39e:	4b25      	ldr	r3, [pc, #148]	@ (801b434 <tcp_fasttmr+0xbc>)
 801b3a0:	781a      	ldrb	r2, [r3, #0]
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	8b5b      	ldrh	r3, [r3, #26]
 801b3aa:	f003 0301 	and.w	r3, r3, #1
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d010      	beq.n	801b3d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	8b5b      	ldrh	r3, [r3, #26]
 801b3b6:	f043 0302 	orr.w	r3, r3, #2
 801b3ba:	b29a      	uxth	r2, r3
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f003 ffe5 	bl	801f390 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	8b5b      	ldrh	r3, [r3, #26]
 801b3ca:	f023 0303 	bic.w	r3, r3, #3
 801b3ce:	b29a      	uxth	r2, r3
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	8b5b      	ldrh	r3, [r3, #26]
 801b3d8:	f003 0308 	and.w	r3, r3, #8
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d009      	beq.n	801b3f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	8b5b      	ldrh	r3, [r3, #26]
 801b3e4:	f023 0308 	bic.w	r3, r3, #8
 801b3e8:	b29a      	uxth	r2, r3
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801b3ee:	6878      	ldr	r0, [r7, #4]
 801b3f0:	f7ff f876 	bl	801a4e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	68db      	ldr	r3, [r3, #12]
 801b3f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d00a      	beq.n	801b418 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801b402:	4b0e      	ldr	r3, [pc, #56]	@ (801b43c <tcp_fasttmr+0xc4>)
 801b404:	2200      	movs	r2, #0
 801b406:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	f000 f819 	bl	801b440 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801b40e:	4b0b      	ldr	r3, [pc, #44]	@ (801b43c <tcp_fasttmr+0xc4>)
 801b410:	781b      	ldrb	r3, [r3, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d000      	beq.n	801b418 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801b416:	e7b8      	b.n	801b38a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	607b      	str	r3, [r7, #4]
 801b41c:	e002      	b.n	801b424 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	68db      	ldr	r3, [r3, #12]
 801b422:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d1b3      	bne.n	801b392 <tcp_fasttmr+0x1a>
    }
  }
}
 801b42a:	bf00      	nop
 801b42c:	bf00      	nop
 801b42e:	3708      	adds	r7, #8
 801b430:	46bd      	mov	sp, r7
 801b432:	bd80      	pop	{r7, pc}
 801b434:	240126b2 	.word	0x240126b2
 801b438:	240126a8 	.word	0x240126a8
 801b43c:	240126b0 	.word	0x240126b0

0801b440 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801b440:	b590      	push	{r4, r7, lr}
 801b442:	b085      	sub	sp, #20
 801b444:	af00      	add	r7, sp, #0
 801b446:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d109      	bne.n	801b462 <tcp_process_refused_data+0x22>
 801b44e:	4b37      	ldr	r3, [pc, #220]	@ (801b52c <tcp_process_refused_data+0xec>)
 801b450:	f240 6209 	movw	r2, #1545	@ 0x609
 801b454:	4936      	ldr	r1, [pc, #216]	@ (801b530 <tcp_process_refused_data+0xf0>)
 801b456:	4837      	ldr	r0, [pc, #220]	@ (801b534 <tcp_process_refused_data+0xf4>)
 801b458:	f006 fca8 	bl	8021dac <iprintf>
 801b45c:	f06f 030f 	mvn.w	r3, #15
 801b460:	e060      	b.n	801b524 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b466:	7b5b      	ldrb	r3, [r3, #13]
 801b468:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b46e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	2200      	movs	r2, #0
 801b474:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d00b      	beq.n	801b498 <tcp_process_refused_data+0x58>
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	6918      	ldr	r0, [r3, #16]
 801b48a:	2300      	movs	r3, #0
 801b48c:	68ba      	ldr	r2, [r7, #8]
 801b48e:	6879      	ldr	r1, [r7, #4]
 801b490:	47a0      	blx	r4
 801b492:	4603      	mov	r3, r0
 801b494:	73fb      	strb	r3, [r7, #15]
 801b496:	e007      	b.n	801b4a8 <tcp_process_refused_data+0x68>
 801b498:	2300      	movs	r3, #0
 801b49a:	68ba      	ldr	r2, [r7, #8]
 801b49c:	6879      	ldr	r1, [r7, #4]
 801b49e:	2000      	movs	r0, #0
 801b4a0:	f000 f8a4 	bl	801b5ec <tcp_recv_null>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801b4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d12a      	bne.n	801b506 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801b4b0:	7bbb      	ldrb	r3, [r7, #14]
 801b4b2:	f003 0320 	and.w	r3, r3, #32
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d033      	beq.n	801b522 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b4be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801b4c2:	d005      	beq.n	801b4d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b4c8:	3301      	adds	r3, #1
 801b4ca:	b29a      	uxth	r2, r3
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d00b      	beq.n	801b4f2 <tcp_process_refused_data+0xb2>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6918      	ldr	r0, [r3, #16]
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	6879      	ldr	r1, [r7, #4]
 801b4ea:	47a0      	blx	r4
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	73fb      	strb	r3, [r7, #15]
 801b4f0:	e001      	b.n	801b4f6 <tcp_process_refused_data+0xb6>
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801b4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4fa:	f113 0f0d 	cmn.w	r3, #13
 801b4fe:	d110      	bne.n	801b522 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801b500:	f06f 030c 	mvn.w	r3, #12
 801b504:	e00e      	b.n	801b524 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801b506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b50a:	f113 0f0d 	cmn.w	r3, #13
 801b50e:	d102      	bne.n	801b516 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801b510:	f06f 030c 	mvn.w	r3, #12
 801b514:	e006      	b.n	801b524 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	68ba      	ldr	r2, [r7, #8]
 801b51a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801b51c:	f06f 0304 	mvn.w	r3, #4
 801b520:	e000      	b.n	801b524 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801b522:	2300      	movs	r3, #0
}
 801b524:	4618      	mov	r0, r3
 801b526:	3714      	adds	r7, #20
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd90      	pop	{r4, r7, pc}
 801b52c:	08026f8c 	.word	0x08026f8c
 801b530:	080274c8 	.word	0x080274c8
 801b534:	08026ffc 	.word	0x08026ffc

0801b538 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b084      	sub	sp, #16
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801b540:	e007      	b.n	801b552 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801b548:	6878      	ldr	r0, [r7, #4]
 801b54a:	f000 f80a 	bl	801b562 <tcp_seg_free>
    seg = next;
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d1f4      	bne.n	801b542 <tcp_segs_free+0xa>
  }
}
 801b558:	bf00      	nop
 801b55a:	bf00      	nop
 801b55c:	3710      	adds	r7, #16
 801b55e:	46bd      	mov	sp, r7
 801b560:	bd80      	pop	{r7, pc}

0801b562 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801b562:	b580      	push	{r7, lr}
 801b564:	b082      	sub	sp, #8
 801b566:	af00      	add	r7, sp, #0
 801b568:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d00c      	beq.n	801b58a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	685b      	ldr	r3, [r3, #4]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d004      	beq.n	801b582 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	685b      	ldr	r3, [r3, #4]
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7fe fa09 	bl	8019994 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801b582:	6879      	ldr	r1, [r7, #4]
 801b584:	2003      	movs	r0, #3
 801b586:	f7fb fd27 	bl	8016fd8 <memp_free>
  }
}
 801b58a:	bf00      	nop
 801b58c:	3708      	adds	r7, #8
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
	...

0801b594 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b084      	sub	sp, #16
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d106      	bne.n	801b5b0 <tcp_seg_copy+0x1c>
 801b5a2:	4b0f      	ldr	r3, [pc, #60]	@ (801b5e0 <tcp_seg_copy+0x4c>)
 801b5a4:	f240 6282 	movw	r2, #1666	@ 0x682
 801b5a8:	490e      	ldr	r1, [pc, #56]	@ (801b5e4 <tcp_seg_copy+0x50>)
 801b5aa:	480f      	ldr	r0, [pc, #60]	@ (801b5e8 <tcp_seg_copy+0x54>)
 801b5ac:	f006 fbfe 	bl	8021dac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801b5b0:	2003      	movs	r0, #3
 801b5b2:	f7fb fc9b 	bl	8016eec <memp_malloc>
 801b5b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d101      	bne.n	801b5c2 <tcp_seg_copy+0x2e>
    return NULL;
 801b5be:	2300      	movs	r3, #0
 801b5c0:	e00a      	b.n	801b5d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b5c2:	2210      	movs	r2, #16
 801b5c4:	6879      	ldr	r1, [r7, #4]
 801b5c6:	68f8      	ldr	r0, [r7, #12]
 801b5c8:	f006 fe91 	bl	80222ee <memcpy>
  pbuf_ref(cseg->p);
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	685b      	ldr	r3, [r3, #4]
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f7fe fa85 	bl	8019ae0 <pbuf_ref>
  return cseg;
 801b5d6:	68fb      	ldr	r3, [r7, #12]
}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	3710      	adds	r7, #16
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	08026f8c 	.word	0x08026f8c
 801b5e4:	0802750c 	.word	0x0802750c
 801b5e8:	08026ffc 	.word	0x08026ffc

0801b5ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b084      	sub	sp, #16
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	60f8      	str	r0, [r7, #12]
 801b5f4:	60b9      	str	r1, [r7, #8]
 801b5f6:	607a      	str	r2, [r7, #4]
 801b5f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d109      	bne.n	801b614 <tcp_recv_null+0x28>
 801b600:	4b12      	ldr	r3, [pc, #72]	@ (801b64c <tcp_recv_null+0x60>)
 801b602:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801b606:	4912      	ldr	r1, [pc, #72]	@ (801b650 <tcp_recv_null+0x64>)
 801b608:	4812      	ldr	r0, [pc, #72]	@ (801b654 <tcp_recv_null+0x68>)
 801b60a:	f006 fbcf 	bl	8021dac <iprintf>
 801b60e:	f06f 030f 	mvn.w	r3, #15
 801b612:	e016      	b.n	801b642 <tcp_recv_null+0x56>

  if (p != NULL) {
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d009      	beq.n	801b62e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	891b      	ldrh	r3, [r3, #8]
 801b61e:	4619      	mov	r1, r3
 801b620:	68b8      	ldr	r0, [r7, #8]
 801b622:	f7ff f9b5 	bl	801a990 <tcp_recved>
    pbuf_free(p);
 801b626:	6878      	ldr	r0, [r7, #4]
 801b628:	f7fe f9b4 	bl	8019994 <pbuf_free>
 801b62c:	e008      	b.n	801b640 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801b62e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d104      	bne.n	801b640 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801b636:	68b8      	ldr	r0, [r7, #8]
 801b638:	f7fe ffbc 	bl	801a5b4 <tcp_close>
 801b63c:	4603      	mov	r3, r0
 801b63e:	e000      	b.n	801b642 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801b640:	2300      	movs	r3, #0
}
 801b642:	4618      	mov	r0, r3
 801b644:	3710      	adds	r7, #16
 801b646:	46bd      	mov	sp, r7
 801b648:	bd80      	pop	{r7, pc}
 801b64a:	bf00      	nop
 801b64c:	08026f8c 	.word	0x08026f8c
 801b650:	08027528 	.word	0x08027528
 801b654:	08026ffc 	.word	0x08026ffc

0801b658 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b086      	sub	sp, #24
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	4603      	mov	r3, r0
 801b660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801b662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b666:	2b00      	cmp	r3, #0
 801b668:	db01      	blt.n	801b66e <tcp_kill_prio+0x16>
 801b66a:	79fb      	ldrb	r3, [r7, #7]
 801b66c:	e000      	b.n	801b670 <tcp_kill_prio+0x18>
 801b66e:	237f      	movs	r3, #127	@ 0x7f
 801b670:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801b672:	7afb      	ldrb	r3, [r7, #11]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d034      	beq.n	801b6e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801b678:	7afb      	ldrb	r3, [r7, #11]
 801b67a:	3b01      	subs	r3, #1
 801b67c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801b67e:	2300      	movs	r3, #0
 801b680:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801b682:	2300      	movs	r3, #0
 801b684:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b686:	4b19      	ldr	r3, [pc, #100]	@ (801b6ec <tcp_kill_prio+0x94>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	617b      	str	r3, [r7, #20]
 801b68c:	e01f      	b.n	801b6ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	7d5b      	ldrb	r3, [r3, #21]
 801b692:	7afa      	ldrb	r2, [r7, #11]
 801b694:	429a      	cmp	r2, r3
 801b696:	d80c      	bhi.n	801b6b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b698:	697b      	ldr	r3, [r7, #20]
 801b69a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801b69c:	7afa      	ldrb	r2, [r7, #11]
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	d112      	bne.n	801b6c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b6a2:	4b13      	ldr	r3, [pc, #76]	@ (801b6f0 <tcp_kill_prio+0x98>)
 801b6a4:	681a      	ldr	r2, [r3, #0]
 801b6a6:	697b      	ldr	r3, [r7, #20]
 801b6a8:	6a1b      	ldr	r3, [r3, #32]
 801b6aa:	1ad3      	subs	r3, r2, r3
 801b6ac:	68fa      	ldr	r2, [r7, #12]
 801b6ae:	429a      	cmp	r2, r3
 801b6b0:	d80a      	bhi.n	801b6c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801b6b2:	4b0f      	ldr	r3, [pc, #60]	@ (801b6f0 <tcp_kill_prio+0x98>)
 801b6b4:	681a      	ldr	r2, [r3, #0]
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	6a1b      	ldr	r3, [r3, #32]
 801b6ba:	1ad3      	subs	r3, r2, r3
 801b6bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801b6c2:	697b      	ldr	r3, [r7, #20]
 801b6c4:	7d5b      	ldrb	r3, [r3, #21]
 801b6c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6c8:	697b      	ldr	r3, [r7, #20]
 801b6ca:	68db      	ldr	r3, [r3, #12]
 801b6cc:	617b      	str	r3, [r7, #20]
 801b6ce:	697b      	ldr	r3, [r7, #20]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d1dc      	bne.n	801b68e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801b6d4:	693b      	ldr	r3, [r7, #16]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d004      	beq.n	801b6e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801b6da:	6938      	ldr	r0, [r7, #16]
 801b6dc:	f7ff f858 	bl	801a790 <tcp_abort>
 801b6e0:	e000      	b.n	801b6e4 <tcp_kill_prio+0x8c>
    return;
 801b6e2:	bf00      	nop
  }
}
 801b6e4:	3718      	adds	r7, #24
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	bd80      	pop	{r7, pc}
 801b6ea:	bf00      	nop
 801b6ec:	240126a8 	.word	0x240126a8
 801b6f0:	2401269c 	.word	0x2401269c

0801b6f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b086      	sub	sp, #24
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801b6fe:	79fb      	ldrb	r3, [r7, #7]
 801b700:	2b08      	cmp	r3, #8
 801b702:	d009      	beq.n	801b718 <tcp_kill_state+0x24>
 801b704:	79fb      	ldrb	r3, [r7, #7]
 801b706:	2b09      	cmp	r3, #9
 801b708:	d006      	beq.n	801b718 <tcp_kill_state+0x24>
 801b70a:	4b1a      	ldr	r3, [pc, #104]	@ (801b774 <tcp_kill_state+0x80>)
 801b70c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801b710:	4919      	ldr	r1, [pc, #100]	@ (801b778 <tcp_kill_state+0x84>)
 801b712:	481a      	ldr	r0, [pc, #104]	@ (801b77c <tcp_kill_state+0x88>)
 801b714:	f006 fb4a 	bl	8021dac <iprintf>

  inactivity = 0;
 801b718:	2300      	movs	r3, #0
 801b71a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801b71c:	2300      	movs	r3, #0
 801b71e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b720:	4b17      	ldr	r3, [pc, #92]	@ (801b780 <tcp_kill_state+0x8c>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	617b      	str	r3, [r7, #20]
 801b726:	e017      	b.n	801b758 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801b728:	697b      	ldr	r3, [r7, #20]
 801b72a:	7d1b      	ldrb	r3, [r3, #20]
 801b72c:	79fa      	ldrb	r2, [r7, #7]
 801b72e:	429a      	cmp	r2, r3
 801b730:	d10f      	bne.n	801b752 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b732:	4b14      	ldr	r3, [pc, #80]	@ (801b784 <tcp_kill_state+0x90>)
 801b734:	681a      	ldr	r2, [r3, #0]
 801b736:	697b      	ldr	r3, [r7, #20]
 801b738:	6a1b      	ldr	r3, [r3, #32]
 801b73a:	1ad3      	subs	r3, r2, r3
 801b73c:	68fa      	ldr	r2, [r7, #12]
 801b73e:	429a      	cmp	r2, r3
 801b740:	d807      	bhi.n	801b752 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801b742:	4b10      	ldr	r3, [pc, #64]	@ (801b784 <tcp_kill_state+0x90>)
 801b744:	681a      	ldr	r2, [r3, #0]
 801b746:	697b      	ldr	r3, [r7, #20]
 801b748:	6a1b      	ldr	r3, [r3, #32]
 801b74a:	1ad3      	subs	r3, r2, r3
 801b74c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801b74e:	697b      	ldr	r3, [r7, #20]
 801b750:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b752:	697b      	ldr	r3, [r7, #20]
 801b754:	68db      	ldr	r3, [r3, #12]
 801b756:	617b      	str	r3, [r7, #20]
 801b758:	697b      	ldr	r3, [r7, #20]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d1e4      	bne.n	801b728 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801b75e:	693b      	ldr	r3, [r7, #16]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d003      	beq.n	801b76c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801b764:	2100      	movs	r1, #0
 801b766:	6938      	ldr	r0, [r7, #16]
 801b768:	f7fe ff52 	bl	801a610 <tcp_abandon>
  }
}
 801b76c:	bf00      	nop
 801b76e:	3718      	adds	r7, #24
 801b770:	46bd      	mov	sp, r7
 801b772:	bd80      	pop	{r7, pc}
 801b774:	08026f8c 	.word	0x08026f8c
 801b778:	08027544 	.word	0x08027544
 801b77c:	08026ffc 	.word	0x08026ffc
 801b780:	240126a8 	.word	0x240126a8
 801b784:	2401269c 	.word	0x2401269c

0801b788 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b084      	sub	sp, #16
 801b78c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801b78e:	2300      	movs	r3, #0
 801b790:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801b792:	2300      	movs	r3, #0
 801b794:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b796:	4b12      	ldr	r3, [pc, #72]	@ (801b7e0 <tcp_kill_timewait+0x58>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	60fb      	str	r3, [r7, #12]
 801b79c:	e012      	b.n	801b7c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b79e:	4b11      	ldr	r3, [pc, #68]	@ (801b7e4 <tcp_kill_timewait+0x5c>)
 801b7a0:	681a      	ldr	r2, [r3, #0]
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	6a1b      	ldr	r3, [r3, #32]
 801b7a6:	1ad3      	subs	r3, r2, r3
 801b7a8:	687a      	ldr	r2, [r7, #4]
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d807      	bhi.n	801b7be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801b7ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b7e4 <tcp_kill_timewait+0x5c>)
 801b7b0:	681a      	ldr	r2, [r3, #0]
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	6a1b      	ldr	r3, [r3, #32]
 801b7b6:	1ad3      	subs	r3, r2, r3
 801b7b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801b7ba:	68fb      	ldr	r3, [r7, #12]
 801b7bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	68db      	ldr	r3, [r3, #12]
 801b7c2:	60fb      	str	r3, [r7, #12]
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d1e9      	bne.n	801b79e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801b7ca:	68bb      	ldr	r3, [r7, #8]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d002      	beq.n	801b7d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801b7d0:	68b8      	ldr	r0, [r7, #8]
 801b7d2:	f7fe ffdd 	bl	801a790 <tcp_abort>
  }
}
 801b7d6:	bf00      	nop
 801b7d8:	3710      	adds	r7, #16
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	bd80      	pop	{r7, pc}
 801b7de:	bf00      	nop
 801b7e0:	240126ac 	.word	0x240126ac
 801b7e4:	2401269c 	.word	0x2401269c

0801b7e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b082      	sub	sp, #8
 801b7ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801b7ee:	4b10      	ldr	r3, [pc, #64]	@ (801b830 <tcp_handle_closepend+0x48>)
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b7f4:	e014      	b.n	801b820 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	68db      	ldr	r3, [r3, #12]
 801b7fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	8b5b      	ldrh	r3, [r3, #26]
 801b800:	f003 0308 	and.w	r3, r3, #8
 801b804:	2b00      	cmp	r3, #0
 801b806:	d009      	beq.n	801b81c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	8b5b      	ldrh	r3, [r3, #26]
 801b80c:	f023 0308 	bic.w	r3, r3, #8
 801b810:	b29a      	uxth	r2, r3
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801b816:	6878      	ldr	r0, [r7, #4]
 801b818:	f7fe fe62 	bl	801a4e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801b81c:	683b      	ldr	r3, [r7, #0]
 801b81e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	2b00      	cmp	r3, #0
 801b824:	d1e7      	bne.n	801b7f6 <tcp_handle_closepend+0xe>
  }
}
 801b826:	bf00      	nop
 801b828:	bf00      	nop
 801b82a:	3708      	adds	r7, #8
 801b82c:	46bd      	mov	sp, r7
 801b82e:	bd80      	pop	{r7, pc}
 801b830:	240126a8 	.word	0x240126a8

0801b834 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b084      	sub	sp, #16
 801b838:	af00      	add	r7, sp, #0
 801b83a:	4603      	mov	r3, r0
 801b83c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 801b83e:	f7f4 fb2f 	bl	800fea0 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b842:	2001      	movs	r0, #1
 801b844:	f7fb fb52 	bl	8016eec <memp_malloc>
 801b848:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d126      	bne.n	801b89e <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801b850:	f7ff ffca 	bl	801b7e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801b854:	f7ff ff98 	bl	801b788 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b858:	2001      	movs	r0, #1
 801b85a:	f7fb fb47 	bl	8016eec <memp_malloc>
 801b85e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d11b      	bne.n	801b89e <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801b866:	2009      	movs	r0, #9
 801b868:	f7ff ff44 	bl	801b6f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b86c:	2001      	movs	r0, #1
 801b86e:	f7fb fb3d 	bl	8016eec <memp_malloc>
 801b872:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d111      	bne.n	801b89e <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801b87a:	2008      	movs	r0, #8
 801b87c:	f7ff ff3a 	bl	801b6f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b880:	2001      	movs	r0, #1
 801b882:	f7fb fb33 	bl	8016eec <memp_malloc>
 801b886:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d107      	bne.n	801b89e <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801b88e:	79fb      	ldrb	r3, [r7, #7]
 801b890:	4618      	mov	r0, r3
 801b892:	f7ff fee1 	bl	801b658 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b896:	2001      	movs	r0, #1
 801b898:	f7fb fb28 	bl	8016eec <memp_malloc>
 801b89c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d03f      	beq.n	801b924 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b8a4:	229c      	movs	r2, #156	@ 0x9c
 801b8a6:	2100      	movs	r1, #0
 801b8a8:	68f8      	ldr	r0, [r7, #12]
 801b8aa:	f006 fc25 	bl	80220f8 <memset>
    pcb->prio = prio;
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	79fa      	ldrb	r2, [r7, #7]
 801b8b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801b8ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801b8c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	22ff      	movs	r2, #255	@ 0xff
 801b8d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801b8da:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	2206      	movs	r2, #6
 801b8e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	2206      	movs	r2, #6
 801b8e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b8f0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	2201      	movs	r2, #1
 801b8f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801b8fa:	4b0d      	ldr	r3, [pc, #52]	@ (801b930 <tcp_alloc+0xfc>)
 801b8fc:	681a      	ldr	r2, [r3, #0]
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801b902:	4b0c      	ldr	r3, [pc, #48]	@ (801b934 <tcp_alloc+0x100>)
 801b904:	781a      	ldrb	r2, [r3, #0]
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801b910:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801b914:	68fb      	ldr	r3, [r7, #12]
 801b916:	4a08      	ldr	r2, [pc, #32]	@ (801b938 <tcp_alloc+0x104>)
 801b918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	4a07      	ldr	r2, [pc, #28]	@ (801b93c <tcp_alloc+0x108>)
 801b920:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801b924:	68fb      	ldr	r3, [r7, #12]
}
 801b926:	4618      	mov	r0, r3
 801b928:	3710      	adds	r7, #16
 801b92a:	46bd      	mov	sp, r7
 801b92c:	bd80      	pop	{r7, pc}
 801b92e:	bf00      	nop
 801b930:	2401269c 	.word	0x2401269c
 801b934:	240126b2 	.word	0x240126b2
 801b938:	0801b5ed 	.word	0x0801b5ed
 801b93c:	006ddd00 	.word	0x006ddd00

0801b940 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b084      	sub	sp, #16
 801b944:	af00      	add	r7, sp, #0
 801b946:	4603      	mov	r3, r0
 801b948:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801b94a:	2040      	movs	r0, #64	@ 0x40
 801b94c:	f7ff ff72 	bl	801b834 <tcp_alloc>
 801b950:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b952:	68fb      	ldr	r3, [r7, #12]
}
 801b954:	4618      	mov	r0, r3
 801b956:	3710      	adds	r7, #16
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}

0801b95c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b082      	sub	sp, #8
 801b960:	af00      	add	r7, sp, #0
 801b962:	6078      	str	r0, [r7, #4]
 801b964:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801b966:	f7f4 fa9b 	bl	800fea0 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d002      	beq.n	801b976 <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	683a      	ldr	r2, [r7, #0]
 801b974:	611a      	str	r2, [r3, #16]
  }
}
 801b976:	bf00      	nop
 801b978:	3708      	adds	r7, #8
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
	...

0801b980 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b082      	sub	sp, #8
 801b984:	af00      	add	r7, sp, #0
 801b986:	6078      	str	r0, [r7, #4]
 801b988:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801b98a:	f7f4 fa89 	bl	800fea0 <sys_check_core_locking>
  if (pcb != NULL) {
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d00e      	beq.n	801b9b2 <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	7d1b      	ldrb	r3, [r3, #20]
 801b998:	2b01      	cmp	r3, #1
 801b99a:	d106      	bne.n	801b9aa <tcp_recv+0x2a>
 801b99c:	4b07      	ldr	r3, [pc, #28]	@ (801b9bc <tcp_recv+0x3c>)
 801b99e:	f240 72df 	movw	r2, #2015	@ 0x7df
 801b9a2:	4907      	ldr	r1, [pc, #28]	@ (801b9c0 <tcp_recv+0x40>)
 801b9a4:	4807      	ldr	r0, [pc, #28]	@ (801b9c4 <tcp_recv+0x44>)
 801b9a6:	f006 fa01 	bl	8021dac <iprintf>
    pcb->recv = recv;
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	683a      	ldr	r2, [r7, #0]
 801b9ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801b9b2:	bf00      	nop
 801b9b4:	3708      	adds	r7, #8
 801b9b6:	46bd      	mov	sp, r7
 801b9b8:	bd80      	pop	{r7, pc}
 801b9ba:	bf00      	nop
 801b9bc:	08026f8c 	.word	0x08026f8c
 801b9c0:	08027554 	.word	0x08027554
 801b9c4:	08026ffc 	.word	0x08026ffc

0801b9c8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b082      	sub	sp, #8
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
 801b9d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801b9d2:	f7f4 fa65 	bl	800fea0 <sys_check_core_locking>
  if (pcb != NULL) {
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d00e      	beq.n	801b9fa <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	7d1b      	ldrb	r3, [r3, #20]
 801b9e0:	2b01      	cmp	r3, #1
 801b9e2:	d106      	bne.n	801b9f2 <tcp_sent+0x2a>
 801b9e4:	4b07      	ldr	r3, [pc, #28]	@ (801ba04 <tcp_sent+0x3c>)
 801b9e6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801b9ea:	4907      	ldr	r1, [pc, #28]	@ (801ba08 <tcp_sent+0x40>)
 801b9ec:	4807      	ldr	r0, [pc, #28]	@ (801ba0c <tcp_sent+0x44>)
 801b9ee:	f006 f9dd 	bl	8021dac <iprintf>
    pcb->sent = sent;
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	683a      	ldr	r2, [r7, #0]
 801b9f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801b9fa:	bf00      	nop
 801b9fc:	3708      	adds	r7, #8
 801b9fe:	46bd      	mov	sp, r7
 801ba00:	bd80      	pop	{r7, pc}
 801ba02:	bf00      	nop
 801ba04:	08026f8c 	.word	0x08026f8c
 801ba08:	0802757c 	.word	0x0802757c
 801ba0c:	08026ffc 	.word	0x08026ffc

0801ba10 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b082      	sub	sp, #8
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
 801ba18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801ba1a:	f7f4 fa41 	bl	800fea0 <sys_check_core_locking>
  if (pcb != NULL) {
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d00e      	beq.n	801ba42 <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	7d1b      	ldrb	r3, [r3, #20]
 801ba28:	2b01      	cmp	r3, #1
 801ba2a:	d106      	bne.n	801ba3a <tcp_err+0x2a>
 801ba2c:	4b07      	ldr	r3, [pc, #28]	@ (801ba4c <tcp_err+0x3c>)
 801ba2e:	f640 020d 	movw	r2, #2061	@ 0x80d
 801ba32:	4907      	ldr	r1, [pc, #28]	@ (801ba50 <tcp_err+0x40>)
 801ba34:	4807      	ldr	r0, [pc, #28]	@ (801ba54 <tcp_err+0x44>)
 801ba36:	f006 f9b9 	bl	8021dac <iprintf>
    pcb->errf = err;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	683a      	ldr	r2, [r7, #0]
 801ba3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801ba42:	bf00      	nop
 801ba44:	3708      	adds	r7, #8
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd80      	pop	{r7, pc}
 801ba4a:	bf00      	nop
 801ba4c:	08026f8c 	.word	0x08026f8c
 801ba50:	080275a4 	.word	0x080275a4
 801ba54:	08026ffc 	.word	0x08026ffc

0801ba58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b084      	sub	sp, #16
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	60f8      	str	r0, [r7, #12]
 801ba60:	60b9      	str	r1, [r7, #8]
 801ba62:	4613      	mov	r3, r2
 801ba64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 801ba66:	f7f4 fa1b 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d107      	bne.n	801ba80 <tcp_poll+0x28>
 801ba70:	4b0e      	ldr	r3, [pc, #56]	@ (801baac <tcp_poll+0x54>)
 801ba72:	f640 023d 	movw	r2, #2109	@ 0x83d
 801ba76:	490e      	ldr	r1, [pc, #56]	@ (801bab0 <tcp_poll+0x58>)
 801ba78:	480e      	ldr	r0, [pc, #56]	@ (801bab4 <tcp_poll+0x5c>)
 801ba7a:	f006 f997 	bl	8021dac <iprintf>
 801ba7e:	e011      	b.n	801baa4 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	7d1b      	ldrb	r3, [r3, #20]
 801ba84:	2b01      	cmp	r3, #1
 801ba86:	d106      	bne.n	801ba96 <tcp_poll+0x3e>
 801ba88:	4b08      	ldr	r3, [pc, #32]	@ (801baac <tcp_poll+0x54>)
 801ba8a:	f640 023e 	movw	r2, #2110	@ 0x83e
 801ba8e:	490a      	ldr	r1, [pc, #40]	@ (801bab8 <tcp_poll+0x60>)
 801ba90:	4808      	ldr	r0, [pc, #32]	@ (801bab4 <tcp_poll+0x5c>)
 801ba92:	f006 f98b 	bl	8021dac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	68ba      	ldr	r2, [r7, #8]
 801ba9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	79fa      	ldrb	r2, [r7, #7]
 801baa2:	775a      	strb	r2, [r3, #29]
}
 801baa4:	3710      	adds	r7, #16
 801baa6:	46bd      	mov	sp, r7
 801baa8:	bd80      	pop	{r7, pc}
 801baaa:	bf00      	nop
 801baac:	08026f8c 	.word	0x08026f8c
 801bab0:	080275cc 	.word	0x080275cc
 801bab4:	08026ffc 	.word	0x08026ffc
 801bab8:	080275e4 	.word	0x080275e4

0801babc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b082      	sub	sp, #8
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d107      	bne.n	801bada <tcp_pcb_purge+0x1e>
 801baca:	4b21      	ldr	r3, [pc, #132]	@ (801bb50 <tcp_pcb_purge+0x94>)
 801bacc:	f640 0251 	movw	r2, #2129	@ 0x851
 801bad0:	4920      	ldr	r1, [pc, #128]	@ (801bb54 <tcp_pcb_purge+0x98>)
 801bad2:	4821      	ldr	r0, [pc, #132]	@ (801bb58 <tcp_pcb_purge+0x9c>)
 801bad4:	f006 f96a 	bl	8021dac <iprintf>
 801bad8:	e037      	b.n	801bb4a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	7d1b      	ldrb	r3, [r3, #20]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d033      	beq.n	801bb4a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801bae6:	2b0a      	cmp	r3, #10
 801bae8:	d02f      	beq.n	801bb4a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801baee:	2b01      	cmp	r3, #1
 801baf0:	d02b      	beq.n	801bb4a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d007      	beq.n	801bb0a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bafe:	4618      	mov	r0, r3
 801bb00:	f7fd ff48 	bl	8019994 <pbuf_free>
      pcb->refused_data = NULL;
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	2200      	movs	r2, #0
 801bb08:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d002      	beq.n	801bb18 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801bb12:	6878      	ldr	r0, [r7, #4]
 801bb14:	f000 f986 	bl	801be24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bb1e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bb24:	4618      	mov	r0, r3
 801bb26:	f7ff fd07 	bl	801b538 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb2e:	4618      	mov	r0, r3
 801bb30:	f7ff fd02 	bl	801b538 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	2200      	movs	r2, #0
 801bb38:	66da      	str	r2, [r3, #108]	@ 0x6c
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	2200      	movs	r2, #0
 801bb46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801bb4a:	3708      	adds	r7, #8
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	08026f8c 	.word	0x08026f8c
 801bb54:	08027604 	.word	0x08027604
 801bb58:	08026ffc 	.word	0x08026ffc

0801bb5c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b084      	sub	sp, #16
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
 801bb64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d106      	bne.n	801bb7a <tcp_pcb_remove+0x1e>
 801bb6c:	4b3e      	ldr	r3, [pc, #248]	@ (801bc68 <tcp_pcb_remove+0x10c>)
 801bb6e:	f640 0283 	movw	r2, #2179	@ 0x883
 801bb72:	493e      	ldr	r1, [pc, #248]	@ (801bc6c <tcp_pcb_remove+0x110>)
 801bb74:	483e      	ldr	r0, [pc, #248]	@ (801bc70 <tcp_pcb_remove+0x114>)
 801bb76:	f006 f919 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d106      	bne.n	801bb8e <tcp_pcb_remove+0x32>
 801bb80:	4b39      	ldr	r3, [pc, #228]	@ (801bc68 <tcp_pcb_remove+0x10c>)
 801bb82:	f640 0284 	movw	r2, #2180	@ 0x884
 801bb86:	493b      	ldr	r1, [pc, #236]	@ (801bc74 <tcp_pcb_remove+0x118>)
 801bb88:	4839      	ldr	r0, [pc, #228]	@ (801bc70 <tcp_pcb_remove+0x114>)
 801bb8a:	f006 f90f 	bl	8021dac <iprintf>

  TCP_RMV(pcblist, pcb);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	683a      	ldr	r2, [r7, #0]
 801bb94:	429a      	cmp	r2, r3
 801bb96:	d105      	bne.n	801bba4 <tcp_pcb_remove+0x48>
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	68da      	ldr	r2, [r3, #12]
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	601a      	str	r2, [r3, #0]
 801bba2:	e013      	b.n	801bbcc <tcp_pcb_remove+0x70>
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	60fb      	str	r3, [r7, #12]
 801bbaa:	e00c      	b.n	801bbc6 <tcp_pcb_remove+0x6a>
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	68db      	ldr	r3, [r3, #12]
 801bbb0:	683a      	ldr	r2, [r7, #0]
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	d104      	bne.n	801bbc0 <tcp_pcb_remove+0x64>
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	68da      	ldr	r2, [r3, #12]
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	60da      	str	r2, [r3, #12]
 801bbbe:	e005      	b.n	801bbcc <tcp_pcb_remove+0x70>
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	68db      	ldr	r3, [r3, #12]
 801bbc4:	60fb      	str	r3, [r7, #12]
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d1ef      	bne.n	801bbac <tcp_pcb_remove+0x50>
 801bbcc:	683b      	ldr	r3, [r7, #0]
 801bbce:	2200      	movs	r2, #0
 801bbd0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801bbd2:	6838      	ldr	r0, [r7, #0]
 801bbd4:	f7ff ff72 	bl	801babc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801bbd8:	683b      	ldr	r3, [r7, #0]
 801bbda:	7d1b      	ldrb	r3, [r3, #20]
 801bbdc:	2b0a      	cmp	r3, #10
 801bbde:	d013      	beq.n	801bc08 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801bbe0:	683b      	ldr	r3, [r7, #0]
 801bbe2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d00f      	beq.n	801bc08 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801bbe8:	683b      	ldr	r3, [r7, #0]
 801bbea:	8b5b      	ldrh	r3, [r3, #26]
 801bbec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d009      	beq.n	801bc08 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801bbf4:	683b      	ldr	r3, [r7, #0]
 801bbf6:	8b5b      	ldrh	r3, [r3, #26]
 801bbf8:	f043 0302 	orr.w	r3, r3, #2
 801bbfc:	b29a      	uxth	r2, r3
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bc02:	6838      	ldr	r0, [r7, #0]
 801bc04:	f003 fbc4 	bl	801f390 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801bc08:	683b      	ldr	r3, [r7, #0]
 801bc0a:	7d1b      	ldrb	r3, [r3, #20]
 801bc0c:	2b01      	cmp	r3, #1
 801bc0e:	d020      	beq.n	801bc52 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801bc10:	683b      	ldr	r3, [r7, #0]
 801bc12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d006      	beq.n	801bc26 <tcp_pcb_remove+0xca>
 801bc18:	4b13      	ldr	r3, [pc, #76]	@ (801bc68 <tcp_pcb_remove+0x10c>)
 801bc1a:	f640 0293 	movw	r2, #2195	@ 0x893
 801bc1e:	4916      	ldr	r1, [pc, #88]	@ (801bc78 <tcp_pcb_remove+0x11c>)
 801bc20:	4813      	ldr	r0, [pc, #76]	@ (801bc70 <tcp_pcb_remove+0x114>)
 801bc22:	f006 f8c3 	bl	8021dac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801bc26:	683b      	ldr	r3, [r7, #0]
 801bc28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d006      	beq.n	801bc3c <tcp_pcb_remove+0xe0>
 801bc2e:	4b0e      	ldr	r3, [pc, #56]	@ (801bc68 <tcp_pcb_remove+0x10c>)
 801bc30:	f640 0294 	movw	r2, #2196	@ 0x894
 801bc34:	4911      	ldr	r1, [pc, #68]	@ (801bc7c <tcp_pcb_remove+0x120>)
 801bc36:	480e      	ldr	r0, [pc, #56]	@ (801bc70 <tcp_pcb_remove+0x114>)
 801bc38:	f006 f8b8 	bl	8021dac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d006      	beq.n	801bc52 <tcp_pcb_remove+0xf6>
 801bc44:	4b08      	ldr	r3, [pc, #32]	@ (801bc68 <tcp_pcb_remove+0x10c>)
 801bc46:	f640 0296 	movw	r2, #2198	@ 0x896
 801bc4a:	490d      	ldr	r1, [pc, #52]	@ (801bc80 <tcp_pcb_remove+0x124>)
 801bc4c:	4808      	ldr	r0, [pc, #32]	@ (801bc70 <tcp_pcb_remove+0x114>)
 801bc4e:	f006 f8ad 	bl	8021dac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	2200      	movs	r2, #0
 801bc56:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801bc58:	683b      	ldr	r3, [r7, #0]
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801bc5e:	bf00      	nop
 801bc60:	3710      	adds	r7, #16
 801bc62:	46bd      	mov	sp, r7
 801bc64:	bd80      	pop	{r7, pc}
 801bc66:	bf00      	nop
 801bc68:	08026f8c 	.word	0x08026f8c
 801bc6c:	08027620 	.word	0x08027620
 801bc70:	08026ffc 	.word	0x08026ffc
 801bc74:	0802763c 	.word	0x0802763c
 801bc78:	0802765c 	.word	0x0802765c
 801bc7c:	08027674 	.word	0x08027674
 801bc80:	08027690 	.word	0x08027690

0801bc84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b082      	sub	sp, #8
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d106      	bne.n	801bca0 <tcp_next_iss+0x1c>
 801bc92:	4b0a      	ldr	r3, [pc, #40]	@ (801bcbc <tcp_next_iss+0x38>)
 801bc94:	f640 02af 	movw	r2, #2223	@ 0x8af
 801bc98:	4909      	ldr	r1, [pc, #36]	@ (801bcc0 <tcp_next_iss+0x3c>)
 801bc9a:	480a      	ldr	r0, [pc, #40]	@ (801bcc4 <tcp_next_iss+0x40>)
 801bc9c:	f006 f886 	bl	8021dac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801bca0:	4b09      	ldr	r3, [pc, #36]	@ (801bcc8 <tcp_next_iss+0x44>)
 801bca2:	681a      	ldr	r2, [r3, #0]
 801bca4:	4b09      	ldr	r3, [pc, #36]	@ (801bccc <tcp_next_iss+0x48>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	4413      	add	r3, r2
 801bcaa:	4a07      	ldr	r2, [pc, #28]	@ (801bcc8 <tcp_next_iss+0x44>)
 801bcac:	6013      	str	r3, [r2, #0]
  return iss;
 801bcae:	4b06      	ldr	r3, [pc, #24]	@ (801bcc8 <tcp_next_iss+0x44>)
 801bcb0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	3708      	adds	r7, #8
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd80      	pop	{r7, pc}
 801bcba:	bf00      	nop
 801bcbc:	08026f8c 	.word	0x08026f8c
 801bcc0:	080276a8 	.word	0x080276a8
 801bcc4:	08026ffc 	.word	0x08026ffc
 801bcc8:	2400004c 	.word	0x2400004c
 801bccc:	2401269c 	.word	0x2401269c

0801bcd0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b086      	sub	sp, #24
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	4603      	mov	r3, r0
 801bcd8:	60b9      	str	r1, [r7, #8]
 801bcda:	607a      	str	r2, [r7, #4]
 801bcdc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d106      	bne.n	801bcf2 <tcp_eff_send_mss_netif+0x22>
 801bce4:	4b14      	ldr	r3, [pc, #80]	@ (801bd38 <tcp_eff_send_mss_netif+0x68>)
 801bce6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801bcea:	4914      	ldr	r1, [pc, #80]	@ (801bd3c <tcp_eff_send_mss_netif+0x6c>)
 801bcec:	4814      	ldr	r0, [pc, #80]	@ (801bd40 <tcp_eff_send_mss_netif+0x70>)
 801bcee:	f006 f85d 	bl	8021dac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801bcf2:	68bb      	ldr	r3, [r7, #8]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d101      	bne.n	801bcfc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801bcf8:	89fb      	ldrh	r3, [r7, #14]
 801bcfa:	e019      	b.n	801bd30 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801bcfc:	68bb      	ldr	r3, [r7, #8]
 801bcfe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bd00:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801bd02:	8afb      	ldrh	r3, [r7, #22]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d012      	beq.n	801bd2e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801bd08:	2328      	movs	r3, #40	@ 0x28
 801bd0a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801bd0c:	8afa      	ldrh	r2, [r7, #22]
 801bd0e:	8abb      	ldrh	r3, [r7, #20]
 801bd10:	429a      	cmp	r2, r3
 801bd12:	d904      	bls.n	801bd1e <tcp_eff_send_mss_netif+0x4e>
 801bd14:	8afa      	ldrh	r2, [r7, #22]
 801bd16:	8abb      	ldrh	r3, [r7, #20]
 801bd18:	1ad3      	subs	r3, r2, r3
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	e000      	b.n	801bd20 <tcp_eff_send_mss_netif+0x50>
 801bd1e:	2300      	movs	r3, #0
 801bd20:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801bd22:	8a7a      	ldrh	r2, [r7, #18]
 801bd24:	89fb      	ldrh	r3, [r7, #14]
 801bd26:	4293      	cmp	r3, r2
 801bd28:	bf28      	it	cs
 801bd2a:	4613      	movcs	r3, r2
 801bd2c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801bd2e:	89fb      	ldrh	r3, [r7, #14]
}
 801bd30:	4618      	mov	r0, r3
 801bd32:	3718      	adds	r7, #24
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd80      	pop	{r7, pc}
 801bd38:	08026f8c 	.word	0x08026f8c
 801bd3c:	080276c4 	.word	0x080276c4
 801bd40:	08026ffc 	.word	0x08026ffc

0801bd44 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b084      	sub	sp, #16
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d119      	bne.n	801bd8c <tcp_netif_ip_addr_changed_pcblist+0x48>
 801bd58:	4b10      	ldr	r3, [pc, #64]	@ (801bd9c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801bd5a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801bd5e:	4910      	ldr	r1, [pc, #64]	@ (801bda0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801bd60:	4810      	ldr	r0, [pc, #64]	@ (801bda4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801bd62:	f006 f823 	bl	8021dac <iprintf>

  while (pcb != NULL) {
 801bd66:	e011      	b.n	801bd8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	681a      	ldr	r2, [r3, #0]
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	429a      	cmp	r2, r3
 801bd72:	d108      	bne.n	801bd86 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	68db      	ldr	r3, [r3, #12]
 801bd78:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801bd7a:	68f8      	ldr	r0, [r7, #12]
 801bd7c:	f7fe fd08 	bl	801a790 <tcp_abort>
      pcb = next;
 801bd80:	68bb      	ldr	r3, [r7, #8]
 801bd82:	60fb      	str	r3, [r7, #12]
 801bd84:	e002      	b.n	801bd8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	68db      	ldr	r3, [r3, #12]
 801bd8a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d1ea      	bne.n	801bd68 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801bd92:	bf00      	nop
 801bd94:	bf00      	nop
 801bd96:	3710      	adds	r7, #16
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	bd80      	pop	{r7, pc}
 801bd9c:	08026f8c 	.word	0x08026f8c
 801bda0:	080276ec 	.word	0x080276ec
 801bda4:	08026ffc 	.word	0x08026ffc

0801bda8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	b084      	sub	sp, #16
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
 801bdb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d02a      	beq.n	801be0e <tcp_netif_ip_addr_changed+0x66>
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d026      	beq.n	801be0e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801bdc0:	4b15      	ldr	r3, [pc, #84]	@ (801be18 <tcp_netif_ip_addr_changed+0x70>)
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	4619      	mov	r1, r3
 801bdc6:	6878      	ldr	r0, [r7, #4]
 801bdc8:	f7ff ffbc 	bl	801bd44 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801bdcc:	4b13      	ldr	r3, [pc, #76]	@ (801be1c <tcp_netif_ip_addr_changed+0x74>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	4619      	mov	r1, r3
 801bdd2:	6878      	ldr	r0, [r7, #4]
 801bdd4:	f7ff ffb6 	bl	801bd44 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801bdd8:	683b      	ldr	r3, [r7, #0]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d017      	beq.n	801be0e <tcp_netif_ip_addr_changed+0x66>
 801bdde:	683b      	ldr	r3, [r7, #0]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d013      	beq.n	801be0e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bde6:	4b0e      	ldr	r3, [pc, #56]	@ (801be20 <tcp_netif_ip_addr_changed+0x78>)
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	60fb      	str	r3, [r7, #12]
 801bdec:	e00c      	b.n	801be08 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	681a      	ldr	r2, [r3, #0]
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	429a      	cmp	r2, r3
 801bdf8:	d103      	bne.n	801be02 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	681a      	ldr	r2, [r3, #0]
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	68db      	ldr	r3, [r3, #12]
 801be06:	60fb      	str	r3, [r7, #12]
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d1ef      	bne.n	801bdee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801be0e:	bf00      	nop
 801be10:	3710      	adds	r7, #16
 801be12:	46bd      	mov	sp, r7
 801be14:	bd80      	pop	{r7, pc}
 801be16:	bf00      	nop
 801be18:	240126a8 	.word	0x240126a8
 801be1c:	240126a0 	.word	0x240126a0
 801be20:	240126a4 	.word	0x240126a4

0801be24 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801be24:	b580      	push	{r7, lr}
 801be26:	b082      	sub	sp, #8
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801be30:	2b00      	cmp	r3, #0
 801be32:	d007      	beq.n	801be44 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801be38:	4618      	mov	r0, r3
 801be3a:	f7ff fb7d 	bl	801b538 <tcp_segs_free>
    pcb->ooseq = NULL;
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	2200      	movs	r2, #0
 801be42:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801be44:	bf00      	nop
 801be46:	3708      	adds	r7, #8
 801be48:	46bd      	mov	sp, r7
 801be4a:	bd80      	pop	{r7, pc}

0801be4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801be4c:	b590      	push	{r4, r7, lr}
 801be4e:	b08d      	sub	sp, #52	@ 0x34
 801be50:	af04      	add	r7, sp, #16
 801be52:	6078      	str	r0, [r7, #4]
 801be54:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 801be56:	f7f4 f823 	bl	800fea0 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d105      	bne.n	801be6c <tcp_input+0x20>
 801be60:	4b9b      	ldr	r3, [pc, #620]	@ (801c0d0 <tcp_input+0x284>)
 801be62:	2283      	movs	r2, #131	@ 0x83
 801be64:	499b      	ldr	r1, [pc, #620]	@ (801c0d4 <tcp_input+0x288>)
 801be66:	489c      	ldr	r0, [pc, #624]	@ (801c0d8 <tcp_input+0x28c>)
 801be68:	f005 ffa0 	bl	8021dac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	685b      	ldr	r3, [r3, #4]
 801be70:	4a9a      	ldr	r2, [pc, #616]	@ (801c0dc <tcp_input+0x290>)
 801be72:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	895b      	ldrh	r3, [r3, #10]
 801be78:	2b13      	cmp	r3, #19
 801be7a:	f240 83d1 	bls.w	801c620 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801be7e:	4b98      	ldr	r3, [pc, #608]	@ (801c0e0 <tcp_input+0x294>)
 801be80:	695b      	ldr	r3, [r3, #20]
 801be82:	4a97      	ldr	r2, [pc, #604]	@ (801c0e0 <tcp_input+0x294>)
 801be84:	6812      	ldr	r2, [r2, #0]
 801be86:	4611      	mov	r1, r2
 801be88:	4618      	mov	r0, r3
 801be8a:	f7f9 fd17 	bl	80158bc <ip4_addr_isbroadcast_u32>
 801be8e:	4603      	mov	r3, r0
 801be90:	2b00      	cmp	r3, #0
 801be92:	f040 83c7 	bne.w	801c624 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801be96:	4b92      	ldr	r3, [pc, #584]	@ (801c0e0 <tcp_input+0x294>)
 801be98:	695b      	ldr	r3, [r3, #20]
 801be9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801be9e:	2be0      	cmp	r3, #224	@ 0xe0
 801bea0:	f000 83c0 	beq.w	801c624 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801bea4:	4b8d      	ldr	r3, [pc, #564]	@ (801c0dc <tcp_input+0x290>)
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	899b      	ldrh	r3, [r3, #12]
 801beaa:	b29b      	uxth	r3, r3
 801beac:	4618      	mov	r0, r3
 801beae:	f7f7 ff8d 	bl	8013dcc <lwip_htons>
 801beb2:	4603      	mov	r3, r0
 801beb4:	0b1b      	lsrs	r3, r3, #12
 801beb6:	b29b      	uxth	r3, r3
 801beb8:	b2db      	uxtb	r3, r3
 801beba:	009b      	lsls	r3, r3, #2
 801bebc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801bebe:	7cbb      	ldrb	r3, [r7, #18]
 801bec0:	2b13      	cmp	r3, #19
 801bec2:	f240 83b1 	bls.w	801c628 <tcp_input+0x7dc>
 801bec6:	7cbb      	ldrb	r3, [r7, #18]
 801bec8:	b29a      	uxth	r2, r3
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	891b      	ldrh	r3, [r3, #8]
 801bece:	429a      	cmp	r2, r3
 801bed0:	f200 83aa 	bhi.w	801c628 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801bed4:	7cbb      	ldrb	r3, [r7, #18]
 801bed6:	b29b      	uxth	r3, r3
 801bed8:	3b14      	subs	r3, #20
 801beda:	b29a      	uxth	r2, r3
 801bedc:	4b81      	ldr	r3, [pc, #516]	@ (801c0e4 <tcp_input+0x298>)
 801bede:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801bee0:	4b81      	ldr	r3, [pc, #516]	@ (801c0e8 <tcp_input+0x29c>)
 801bee2:	2200      	movs	r2, #0
 801bee4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	895a      	ldrh	r2, [r3, #10]
 801beea:	7cbb      	ldrb	r3, [r7, #18]
 801beec:	b29b      	uxth	r3, r3
 801beee:	429a      	cmp	r2, r3
 801bef0:	d309      	bcc.n	801bf06 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801bef2:	4b7c      	ldr	r3, [pc, #496]	@ (801c0e4 <tcp_input+0x298>)
 801bef4:	881a      	ldrh	r2, [r3, #0]
 801bef6:	4b7d      	ldr	r3, [pc, #500]	@ (801c0ec <tcp_input+0x2a0>)
 801bef8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801befa:	7cbb      	ldrb	r3, [r7, #18]
 801befc:	4619      	mov	r1, r3
 801befe:	6878      	ldr	r0, [r7, #4]
 801bf00:	f7fd fcc2 	bl	8019888 <pbuf_remove_header>
 801bf04:	e04e      	b.n	801bfa4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d105      	bne.n	801bf1a <tcp_input+0xce>
 801bf0e:	4b70      	ldr	r3, [pc, #448]	@ (801c0d0 <tcp_input+0x284>)
 801bf10:	22c2      	movs	r2, #194	@ 0xc2
 801bf12:	4977      	ldr	r1, [pc, #476]	@ (801c0f0 <tcp_input+0x2a4>)
 801bf14:	4870      	ldr	r0, [pc, #448]	@ (801c0d8 <tcp_input+0x28c>)
 801bf16:	f005 ff49 	bl	8021dac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801bf1a:	2114      	movs	r1, #20
 801bf1c:	6878      	ldr	r0, [r7, #4]
 801bf1e:	f7fd fcb3 	bl	8019888 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	895a      	ldrh	r2, [r3, #10]
 801bf26:	4b71      	ldr	r3, [pc, #452]	@ (801c0ec <tcp_input+0x2a0>)
 801bf28:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801bf2a:	4b6e      	ldr	r3, [pc, #440]	@ (801c0e4 <tcp_input+0x298>)
 801bf2c:	881a      	ldrh	r2, [r3, #0]
 801bf2e:	4b6f      	ldr	r3, [pc, #444]	@ (801c0ec <tcp_input+0x2a0>)
 801bf30:	881b      	ldrh	r3, [r3, #0]
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801bf36:	4b6d      	ldr	r3, [pc, #436]	@ (801c0ec <tcp_input+0x2a0>)
 801bf38:	881b      	ldrh	r3, [r3, #0]
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	6878      	ldr	r0, [r7, #4]
 801bf3e:	f7fd fca3 	bl	8019888 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	895b      	ldrh	r3, [r3, #10]
 801bf48:	8a3a      	ldrh	r2, [r7, #16]
 801bf4a:	429a      	cmp	r2, r3
 801bf4c:	f200 836e 	bhi.w	801c62c <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	685b      	ldr	r3, [r3, #4]
 801bf56:	4a64      	ldr	r2, [pc, #400]	@ (801c0e8 <tcp_input+0x29c>)
 801bf58:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	8a3a      	ldrh	r2, [r7, #16]
 801bf60:	4611      	mov	r1, r2
 801bf62:	4618      	mov	r0, r3
 801bf64:	f7fd fc90 	bl	8019888 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	891a      	ldrh	r2, [r3, #8]
 801bf6c:	8a3b      	ldrh	r3, [r7, #16]
 801bf6e:	1ad3      	subs	r3, r2, r3
 801bf70:	b29a      	uxth	r2, r3
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	895b      	ldrh	r3, [r3, #10]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d005      	beq.n	801bf8a <tcp_input+0x13e>
 801bf7e:	4b54      	ldr	r3, [pc, #336]	@ (801c0d0 <tcp_input+0x284>)
 801bf80:	22df      	movs	r2, #223	@ 0xdf
 801bf82:	495c      	ldr	r1, [pc, #368]	@ (801c0f4 <tcp_input+0x2a8>)
 801bf84:	4854      	ldr	r0, [pc, #336]	@ (801c0d8 <tcp_input+0x28c>)
 801bf86:	f005 ff11 	bl	8021dac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	891a      	ldrh	r2, [r3, #8]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	891b      	ldrh	r3, [r3, #8]
 801bf94:	429a      	cmp	r2, r3
 801bf96:	d005      	beq.n	801bfa4 <tcp_input+0x158>
 801bf98:	4b4d      	ldr	r3, [pc, #308]	@ (801c0d0 <tcp_input+0x284>)
 801bf9a:	22e0      	movs	r2, #224	@ 0xe0
 801bf9c:	4956      	ldr	r1, [pc, #344]	@ (801c0f8 <tcp_input+0x2ac>)
 801bf9e:	484e      	ldr	r0, [pc, #312]	@ (801c0d8 <tcp_input+0x28c>)
 801bfa0:	f005 ff04 	bl	8021dac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801bfa4:	4b4d      	ldr	r3, [pc, #308]	@ (801c0dc <tcp_input+0x290>)
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	881b      	ldrh	r3, [r3, #0]
 801bfaa:	b29b      	uxth	r3, r3
 801bfac:	4a4b      	ldr	r2, [pc, #300]	@ (801c0dc <tcp_input+0x290>)
 801bfae:	6814      	ldr	r4, [r2, #0]
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7f7 ff0b 	bl	8013dcc <lwip_htons>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801bfba:	4b48      	ldr	r3, [pc, #288]	@ (801c0dc <tcp_input+0x290>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	885b      	ldrh	r3, [r3, #2]
 801bfc0:	b29b      	uxth	r3, r3
 801bfc2:	4a46      	ldr	r2, [pc, #280]	@ (801c0dc <tcp_input+0x290>)
 801bfc4:	6814      	ldr	r4, [r2, #0]
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f7f7 ff00 	bl	8013dcc <lwip_htons>
 801bfcc:	4603      	mov	r3, r0
 801bfce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801bfd0:	4b42      	ldr	r3, [pc, #264]	@ (801c0dc <tcp_input+0x290>)
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	685b      	ldr	r3, [r3, #4]
 801bfd6:	4a41      	ldr	r2, [pc, #260]	@ (801c0dc <tcp_input+0x290>)
 801bfd8:	6814      	ldr	r4, [r2, #0]
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7f7 ff0b 	bl	8013df6 <lwip_htonl>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	6063      	str	r3, [r4, #4]
 801bfe4:	6863      	ldr	r3, [r4, #4]
 801bfe6:	4a45      	ldr	r2, [pc, #276]	@ (801c0fc <tcp_input+0x2b0>)
 801bfe8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801bfea:	4b3c      	ldr	r3, [pc, #240]	@ (801c0dc <tcp_input+0x290>)
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	689b      	ldr	r3, [r3, #8]
 801bff0:	4a3a      	ldr	r2, [pc, #232]	@ (801c0dc <tcp_input+0x290>)
 801bff2:	6814      	ldr	r4, [r2, #0]
 801bff4:	4618      	mov	r0, r3
 801bff6:	f7f7 fefe 	bl	8013df6 <lwip_htonl>
 801bffa:	4603      	mov	r3, r0
 801bffc:	60a3      	str	r3, [r4, #8]
 801bffe:	68a3      	ldr	r3, [r4, #8]
 801c000:	4a3f      	ldr	r2, [pc, #252]	@ (801c100 <tcp_input+0x2b4>)
 801c002:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c004:	4b35      	ldr	r3, [pc, #212]	@ (801c0dc <tcp_input+0x290>)
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	89db      	ldrh	r3, [r3, #14]
 801c00a:	b29b      	uxth	r3, r3
 801c00c:	4a33      	ldr	r2, [pc, #204]	@ (801c0dc <tcp_input+0x290>)
 801c00e:	6814      	ldr	r4, [r2, #0]
 801c010:	4618      	mov	r0, r3
 801c012:	f7f7 fedb 	bl	8013dcc <lwip_htons>
 801c016:	4603      	mov	r3, r0
 801c018:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c01a:	4b30      	ldr	r3, [pc, #192]	@ (801c0dc <tcp_input+0x290>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	899b      	ldrh	r3, [r3, #12]
 801c020:	b29b      	uxth	r3, r3
 801c022:	4618      	mov	r0, r3
 801c024:	f7f7 fed2 	bl	8013dcc <lwip_htons>
 801c028:	4603      	mov	r3, r0
 801c02a:	b2db      	uxtb	r3, r3
 801c02c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c030:	b2da      	uxtb	r2, r3
 801c032:	4b34      	ldr	r3, [pc, #208]	@ (801c104 <tcp_input+0x2b8>)
 801c034:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	891a      	ldrh	r2, [r3, #8]
 801c03a:	4b33      	ldr	r3, [pc, #204]	@ (801c108 <tcp_input+0x2bc>)
 801c03c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c03e:	4b31      	ldr	r3, [pc, #196]	@ (801c104 <tcp_input+0x2b8>)
 801c040:	781b      	ldrb	r3, [r3, #0]
 801c042:	f003 0303 	and.w	r3, r3, #3
 801c046:	2b00      	cmp	r3, #0
 801c048:	d00c      	beq.n	801c064 <tcp_input+0x218>
    tcplen++;
 801c04a:	4b2f      	ldr	r3, [pc, #188]	@ (801c108 <tcp_input+0x2bc>)
 801c04c:	881b      	ldrh	r3, [r3, #0]
 801c04e:	3301      	adds	r3, #1
 801c050:	b29a      	uxth	r2, r3
 801c052:	4b2d      	ldr	r3, [pc, #180]	@ (801c108 <tcp_input+0x2bc>)
 801c054:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	891a      	ldrh	r2, [r3, #8]
 801c05a:	4b2b      	ldr	r3, [pc, #172]	@ (801c108 <tcp_input+0x2bc>)
 801c05c:	881b      	ldrh	r3, [r3, #0]
 801c05e:	429a      	cmp	r2, r3
 801c060:	f200 82e6 	bhi.w	801c630 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c064:	2300      	movs	r3, #0
 801c066:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c068:	4b28      	ldr	r3, [pc, #160]	@ (801c10c <tcp_input+0x2c0>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	61fb      	str	r3, [r7, #28]
 801c06e:	e09d      	b.n	801c1ac <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c070:	69fb      	ldr	r3, [r7, #28]
 801c072:	7d1b      	ldrb	r3, [r3, #20]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d105      	bne.n	801c084 <tcp_input+0x238>
 801c078:	4b15      	ldr	r3, [pc, #84]	@ (801c0d0 <tcp_input+0x284>)
 801c07a:	22fb      	movs	r2, #251	@ 0xfb
 801c07c:	4924      	ldr	r1, [pc, #144]	@ (801c110 <tcp_input+0x2c4>)
 801c07e:	4816      	ldr	r0, [pc, #88]	@ (801c0d8 <tcp_input+0x28c>)
 801c080:	f005 fe94 	bl	8021dac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c084:	69fb      	ldr	r3, [r7, #28]
 801c086:	7d1b      	ldrb	r3, [r3, #20]
 801c088:	2b0a      	cmp	r3, #10
 801c08a:	d105      	bne.n	801c098 <tcp_input+0x24c>
 801c08c:	4b10      	ldr	r3, [pc, #64]	@ (801c0d0 <tcp_input+0x284>)
 801c08e:	22fc      	movs	r2, #252	@ 0xfc
 801c090:	4920      	ldr	r1, [pc, #128]	@ (801c114 <tcp_input+0x2c8>)
 801c092:	4811      	ldr	r0, [pc, #68]	@ (801c0d8 <tcp_input+0x28c>)
 801c094:	f005 fe8a 	bl	8021dac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c098:	69fb      	ldr	r3, [r7, #28]
 801c09a:	7d1b      	ldrb	r3, [r3, #20]
 801c09c:	2b01      	cmp	r3, #1
 801c09e:	d105      	bne.n	801c0ac <tcp_input+0x260>
 801c0a0:	4b0b      	ldr	r3, [pc, #44]	@ (801c0d0 <tcp_input+0x284>)
 801c0a2:	22fd      	movs	r2, #253	@ 0xfd
 801c0a4:	491c      	ldr	r1, [pc, #112]	@ (801c118 <tcp_input+0x2cc>)
 801c0a6:	480c      	ldr	r0, [pc, #48]	@ (801c0d8 <tcp_input+0x28c>)
 801c0a8:	f005 fe80 	bl	8021dac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c0ac:	69fb      	ldr	r3, [r7, #28]
 801c0ae:	7a1b      	ldrb	r3, [r3, #8]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d033      	beq.n	801c11c <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c0b4:	69fb      	ldr	r3, [r7, #28]
 801c0b6:	7a1a      	ldrb	r2, [r3, #8]
 801c0b8:	4b09      	ldr	r3, [pc, #36]	@ (801c0e0 <tcp_input+0x294>)
 801c0ba:	685b      	ldr	r3, [r3, #4]
 801c0bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c0c0:	3301      	adds	r3, #1
 801c0c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	d029      	beq.n	801c11c <tcp_input+0x2d0>
      prev = pcb;
 801c0c8:	69fb      	ldr	r3, [r7, #28]
 801c0ca:	61bb      	str	r3, [r7, #24]
      continue;
 801c0cc:	e06b      	b.n	801c1a6 <tcp_input+0x35a>
 801c0ce:	bf00      	nop
 801c0d0:	08027720 	.word	0x08027720
 801c0d4:	08027780 	.word	0x08027780
 801c0d8:	08027798 	.word	0x08027798
 801c0dc:	240126c4 	.word	0x240126c4
 801c0e0:	2400a160 	.word	0x2400a160
 801c0e4:	240126c8 	.word	0x240126c8
 801c0e8:	240126cc 	.word	0x240126cc
 801c0ec:	240126ca 	.word	0x240126ca
 801c0f0:	080277c0 	.word	0x080277c0
 801c0f4:	080277d0 	.word	0x080277d0
 801c0f8:	080277dc 	.word	0x080277dc
 801c0fc:	240126d4 	.word	0x240126d4
 801c100:	240126d8 	.word	0x240126d8
 801c104:	240126e0 	.word	0x240126e0
 801c108:	240126de 	.word	0x240126de
 801c10c:	240126a8 	.word	0x240126a8
 801c110:	080277fc 	.word	0x080277fc
 801c114:	08027824 	.word	0x08027824
 801c118:	08027850 	.word	0x08027850
    }

    if (pcb->remote_port == tcphdr->src &&
 801c11c:	69fb      	ldr	r3, [r7, #28]
 801c11e:	8b1a      	ldrh	r2, [r3, #24]
 801c120:	4b72      	ldr	r3, [pc, #456]	@ (801c2ec <tcp_input+0x4a0>)
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	881b      	ldrh	r3, [r3, #0]
 801c126:	b29b      	uxth	r3, r3
 801c128:	429a      	cmp	r2, r3
 801c12a:	d13a      	bne.n	801c1a2 <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 801c12c:	69fb      	ldr	r3, [r7, #28]
 801c12e:	8ada      	ldrh	r2, [r3, #22]
 801c130:	4b6e      	ldr	r3, [pc, #440]	@ (801c2ec <tcp_input+0x4a0>)
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	885b      	ldrh	r3, [r3, #2]
 801c136:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c138:	429a      	cmp	r2, r3
 801c13a:	d132      	bne.n	801c1a2 <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c13c:	69fb      	ldr	r3, [r7, #28]
 801c13e:	685a      	ldr	r2, [r3, #4]
 801c140:	4b6b      	ldr	r3, [pc, #428]	@ (801c2f0 <tcp_input+0x4a4>)
 801c142:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c144:	429a      	cmp	r2, r3
 801c146:	d12c      	bne.n	801c1a2 <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c148:	69fb      	ldr	r3, [r7, #28]
 801c14a:	681a      	ldr	r2, [r3, #0]
 801c14c:	4b68      	ldr	r3, [pc, #416]	@ (801c2f0 <tcp_input+0x4a4>)
 801c14e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c150:	429a      	cmp	r2, r3
 801c152:	d126      	bne.n	801c1a2 <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c154:	69fb      	ldr	r3, [r7, #28]
 801c156:	68db      	ldr	r3, [r3, #12]
 801c158:	69fa      	ldr	r2, [r7, #28]
 801c15a:	429a      	cmp	r2, r3
 801c15c:	d106      	bne.n	801c16c <tcp_input+0x320>
 801c15e:	4b65      	ldr	r3, [pc, #404]	@ (801c2f4 <tcp_input+0x4a8>)
 801c160:	f240 120d 	movw	r2, #269	@ 0x10d
 801c164:	4964      	ldr	r1, [pc, #400]	@ (801c2f8 <tcp_input+0x4ac>)
 801c166:	4865      	ldr	r0, [pc, #404]	@ (801c2fc <tcp_input+0x4b0>)
 801c168:	f005 fe20 	bl	8021dac <iprintf>
      if (prev != NULL) {
 801c16c:	69bb      	ldr	r3, [r7, #24]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d00a      	beq.n	801c188 <tcp_input+0x33c>
        prev->next = pcb->next;
 801c172:	69fb      	ldr	r3, [r7, #28]
 801c174:	68da      	ldr	r2, [r3, #12]
 801c176:	69bb      	ldr	r3, [r7, #24]
 801c178:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801c17a:	4b61      	ldr	r3, [pc, #388]	@ (801c300 <tcp_input+0x4b4>)
 801c17c:	681a      	ldr	r2, [r3, #0]
 801c17e:	69fb      	ldr	r3, [r7, #28]
 801c180:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801c182:	4a5f      	ldr	r2, [pc, #380]	@ (801c300 <tcp_input+0x4b4>)
 801c184:	69fb      	ldr	r3, [r7, #28]
 801c186:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c188:	69fb      	ldr	r3, [r7, #28]
 801c18a:	68db      	ldr	r3, [r3, #12]
 801c18c:	69fa      	ldr	r2, [r7, #28]
 801c18e:	429a      	cmp	r2, r3
 801c190:	d111      	bne.n	801c1b6 <tcp_input+0x36a>
 801c192:	4b58      	ldr	r3, [pc, #352]	@ (801c2f4 <tcp_input+0x4a8>)
 801c194:	f240 1215 	movw	r2, #277	@ 0x115
 801c198:	495a      	ldr	r1, [pc, #360]	@ (801c304 <tcp_input+0x4b8>)
 801c19a:	4858      	ldr	r0, [pc, #352]	@ (801c2fc <tcp_input+0x4b0>)
 801c19c:	f005 fe06 	bl	8021dac <iprintf>
      break;
 801c1a0:	e009      	b.n	801c1b6 <tcp_input+0x36a>
    }
    prev = pcb;
 801c1a2:	69fb      	ldr	r3, [r7, #28]
 801c1a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c1a6:	69fb      	ldr	r3, [r7, #28]
 801c1a8:	68db      	ldr	r3, [r3, #12]
 801c1aa:	61fb      	str	r3, [r7, #28]
 801c1ac:	69fb      	ldr	r3, [r7, #28]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	f47f af5e 	bne.w	801c070 <tcp_input+0x224>
 801c1b4:	e000      	b.n	801c1b8 <tcp_input+0x36c>
      break;
 801c1b6:	bf00      	nop
  }

  if (pcb == NULL) {
 801c1b8:	69fb      	ldr	r3, [r7, #28]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	f040 80aa 	bne.w	801c314 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c1c0:	4b51      	ldr	r3, [pc, #324]	@ (801c308 <tcp_input+0x4bc>)
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	61fb      	str	r3, [r7, #28]
 801c1c6:	e03f      	b.n	801c248 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c1c8:	69fb      	ldr	r3, [r7, #28]
 801c1ca:	7d1b      	ldrb	r3, [r3, #20]
 801c1cc:	2b0a      	cmp	r3, #10
 801c1ce:	d006      	beq.n	801c1de <tcp_input+0x392>
 801c1d0:	4b48      	ldr	r3, [pc, #288]	@ (801c2f4 <tcp_input+0x4a8>)
 801c1d2:	f240 121f 	movw	r2, #287	@ 0x11f
 801c1d6:	494d      	ldr	r1, [pc, #308]	@ (801c30c <tcp_input+0x4c0>)
 801c1d8:	4848      	ldr	r0, [pc, #288]	@ (801c2fc <tcp_input+0x4b0>)
 801c1da:	f005 fde7 	bl	8021dac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c1de:	69fb      	ldr	r3, [r7, #28]
 801c1e0:	7a1b      	ldrb	r3, [r3, #8]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d009      	beq.n	801c1fa <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c1e6:	69fb      	ldr	r3, [r7, #28]
 801c1e8:	7a1a      	ldrb	r2, [r3, #8]
 801c1ea:	4b41      	ldr	r3, [pc, #260]	@ (801c2f0 <tcp_input+0x4a4>)
 801c1ec:	685b      	ldr	r3, [r3, #4]
 801c1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c1f2:	3301      	adds	r3, #1
 801c1f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c1f6:	429a      	cmp	r2, r3
 801c1f8:	d122      	bne.n	801c240 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801c1fa:	69fb      	ldr	r3, [r7, #28]
 801c1fc:	8b1a      	ldrh	r2, [r3, #24]
 801c1fe:	4b3b      	ldr	r3, [pc, #236]	@ (801c2ec <tcp_input+0x4a0>)
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	881b      	ldrh	r3, [r3, #0]
 801c204:	b29b      	uxth	r3, r3
 801c206:	429a      	cmp	r2, r3
 801c208:	d11b      	bne.n	801c242 <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 801c20a:	69fb      	ldr	r3, [r7, #28]
 801c20c:	8ada      	ldrh	r2, [r3, #22]
 801c20e:	4b37      	ldr	r3, [pc, #220]	@ (801c2ec <tcp_input+0x4a0>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	885b      	ldrh	r3, [r3, #2]
 801c214:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801c216:	429a      	cmp	r2, r3
 801c218:	d113      	bne.n	801c242 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c21a:	69fb      	ldr	r3, [r7, #28]
 801c21c:	685a      	ldr	r2, [r3, #4]
 801c21e:	4b34      	ldr	r3, [pc, #208]	@ (801c2f0 <tcp_input+0x4a4>)
 801c220:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801c222:	429a      	cmp	r2, r3
 801c224:	d10d      	bne.n	801c242 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c226:	69fb      	ldr	r3, [r7, #28]
 801c228:	681a      	ldr	r2, [r3, #0]
 801c22a:	4b31      	ldr	r3, [pc, #196]	@ (801c2f0 <tcp_input+0x4a4>)
 801c22c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c22e:	429a      	cmp	r2, r3
 801c230:	d107      	bne.n	801c242 <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801c232:	69f8      	ldr	r0, [r7, #28]
 801c234:	f000 fb56 	bl	801c8e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 801c238:	6878      	ldr	r0, [r7, #4]
 801c23a:	f7fd fbab 	bl	8019994 <pbuf_free>
        return;
 801c23e:	e1fd      	b.n	801c63c <tcp_input+0x7f0>
        continue;
 801c240:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c242:	69fb      	ldr	r3, [r7, #28]
 801c244:	68db      	ldr	r3, [r3, #12]
 801c246:	61fb      	str	r3, [r7, #28]
 801c248:	69fb      	ldr	r3, [r7, #28]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d1bc      	bne.n	801c1c8 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801c24e:	2300      	movs	r3, #0
 801c250:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c252:	4b2f      	ldr	r3, [pc, #188]	@ (801c310 <tcp_input+0x4c4>)
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	617b      	str	r3, [r7, #20]
 801c258:	e02a      	b.n	801c2b0 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	7a1b      	ldrb	r3, [r3, #8]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d00c      	beq.n	801c27c <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c262:	697b      	ldr	r3, [r7, #20]
 801c264:	7a1a      	ldrb	r2, [r3, #8]
 801c266:	4b22      	ldr	r3, [pc, #136]	@ (801c2f0 <tcp_input+0x4a4>)
 801c268:	685b      	ldr	r3, [r3, #4]
 801c26a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c26e:	3301      	adds	r3, #1
 801c270:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c272:	429a      	cmp	r2, r3
 801c274:	d002      	beq.n	801c27c <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 801c276:	697b      	ldr	r3, [r7, #20]
 801c278:	61bb      	str	r3, [r7, #24]
        continue;
 801c27a:	e016      	b.n	801c2aa <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801c27c:	697b      	ldr	r3, [r7, #20]
 801c27e:	8ada      	ldrh	r2, [r3, #22]
 801c280:	4b1a      	ldr	r3, [pc, #104]	@ (801c2ec <tcp_input+0x4a0>)
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	885b      	ldrh	r3, [r3, #2]
 801c286:	b29b      	uxth	r3, r3
 801c288:	429a      	cmp	r2, r3
 801c28a:	d10c      	bne.n	801c2a6 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801c28c:	697b      	ldr	r3, [r7, #20]
 801c28e:	681a      	ldr	r2, [r3, #0]
 801c290:	4b17      	ldr	r3, [pc, #92]	@ (801c2f0 <tcp_input+0x4a4>)
 801c292:	695b      	ldr	r3, [r3, #20]
 801c294:	429a      	cmp	r2, r3
 801c296:	d00f      	beq.n	801c2b8 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d00d      	beq.n	801c2ba <tcp_input+0x46e>
 801c29e:	697b      	ldr	r3, [r7, #20]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d009      	beq.n	801c2ba <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801c2a6:	697b      	ldr	r3, [r7, #20]
 801c2a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c2aa:	697b      	ldr	r3, [r7, #20]
 801c2ac:	68db      	ldr	r3, [r3, #12]
 801c2ae:	617b      	str	r3, [r7, #20]
 801c2b0:	697b      	ldr	r3, [r7, #20]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d1d1      	bne.n	801c25a <tcp_input+0x40e>
 801c2b6:	e000      	b.n	801c2ba <tcp_input+0x46e>
            break;
 801c2b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801c2ba:	697b      	ldr	r3, [r7, #20]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d029      	beq.n	801c314 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801c2c0:	69bb      	ldr	r3, [r7, #24]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d00a      	beq.n	801c2dc <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801c2c6:	697b      	ldr	r3, [r7, #20]
 801c2c8:	68da      	ldr	r2, [r3, #12]
 801c2ca:	69bb      	ldr	r3, [r7, #24]
 801c2cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801c2ce:	4b10      	ldr	r3, [pc, #64]	@ (801c310 <tcp_input+0x4c4>)
 801c2d0:	681a      	ldr	r2, [r3, #0]
 801c2d2:	697b      	ldr	r3, [r7, #20]
 801c2d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801c2d6:	4a0e      	ldr	r2, [pc, #56]	@ (801c310 <tcp_input+0x4c4>)
 801c2d8:	697b      	ldr	r3, [r7, #20]
 801c2da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801c2dc:	6978      	ldr	r0, [r7, #20]
 801c2de:	f000 fa03 	bl	801c6e8 <tcp_listen_input>
      }
      pbuf_free(p);
 801c2e2:	6878      	ldr	r0, [r7, #4]
 801c2e4:	f7fd fb56 	bl	8019994 <pbuf_free>
      return;
 801c2e8:	e1a8      	b.n	801c63c <tcp_input+0x7f0>
 801c2ea:	bf00      	nop
 801c2ec:	240126c4 	.word	0x240126c4
 801c2f0:	2400a160 	.word	0x2400a160
 801c2f4:	08027720 	.word	0x08027720
 801c2f8:	08027878 	.word	0x08027878
 801c2fc:	08027798 	.word	0x08027798
 801c300:	240126a8 	.word	0x240126a8
 801c304:	080278a4 	.word	0x080278a4
 801c308:	240126ac 	.word	0x240126ac
 801c30c:	080278d0 	.word	0x080278d0
 801c310:	240126a4 	.word	0x240126a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801c314:	69fb      	ldr	r3, [r7, #28]
 801c316:	2b00      	cmp	r3, #0
 801c318:	f000 8158 	beq.w	801c5cc <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801c31c:	4b95      	ldr	r3, [pc, #596]	@ (801c574 <tcp_input+0x728>)
 801c31e:	2200      	movs	r2, #0
 801c320:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	891a      	ldrh	r2, [r3, #8]
 801c326:	4b93      	ldr	r3, [pc, #588]	@ (801c574 <tcp_input+0x728>)
 801c328:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801c32a:	4a92      	ldr	r2, [pc, #584]	@ (801c574 <tcp_input+0x728>)
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801c330:	4b91      	ldr	r3, [pc, #580]	@ (801c578 <tcp_input+0x72c>)
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	4a8f      	ldr	r2, [pc, #572]	@ (801c574 <tcp_input+0x728>)
 801c336:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801c338:	4b90      	ldr	r3, [pc, #576]	@ (801c57c <tcp_input+0x730>)
 801c33a:	2200      	movs	r2, #0
 801c33c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801c33e:	4b90      	ldr	r3, [pc, #576]	@ (801c580 <tcp_input+0x734>)
 801c340:	2200      	movs	r2, #0
 801c342:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801c344:	4b8f      	ldr	r3, [pc, #572]	@ (801c584 <tcp_input+0x738>)
 801c346:	2200      	movs	r2, #0
 801c348:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801c34a:	4b8f      	ldr	r3, [pc, #572]	@ (801c588 <tcp_input+0x73c>)
 801c34c:	781b      	ldrb	r3, [r3, #0]
 801c34e:	f003 0308 	and.w	r3, r3, #8
 801c352:	2b00      	cmp	r3, #0
 801c354:	d006      	beq.n	801c364 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	7b5b      	ldrb	r3, [r3, #13]
 801c35a:	f043 0301 	orr.w	r3, r3, #1
 801c35e:	b2da      	uxtb	r2, r3
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801c364:	69fb      	ldr	r3, [r7, #28]
 801c366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d017      	beq.n	801c39c <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c36c:	69f8      	ldr	r0, [r7, #28]
 801c36e:	f7ff f867 	bl	801b440 <tcp_process_refused_data>
 801c372:	4603      	mov	r3, r0
 801c374:	f113 0f0d 	cmn.w	r3, #13
 801c378:	d007      	beq.n	801c38a <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c37a:	69fb      	ldr	r3, [r7, #28]
 801c37c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d00c      	beq.n	801c39c <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c382:	4b82      	ldr	r3, [pc, #520]	@ (801c58c <tcp_input+0x740>)
 801c384:	881b      	ldrh	r3, [r3, #0]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d008      	beq.n	801c39c <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801c38a:	69fb      	ldr	r3, [r7, #28]
 801c38c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c38e:	2b00      	cmp	r3, #0
 801c390:	f040 80e3 	bne.w	801c55a <tcp_input+0x70e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801c394:	69f8      	ldr	r0, [r7, #28]
 801c396:	f003 fe03 	bl	801ffa0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801c39a:	e0de      	b.n	801c55a <tcp_input+0x70e>
      }
    }
    tcp_input_pcb = pcb;
 801c39c:	4a7c      	ldr	r2, [pc, #496]	@ (801c590 <tcp_input+0x744>)
 801c39e:	69fb      	ldr	r3, [r7, #28]
 801c3a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801c3a2:	69f8      	ldr	r0, [r7, #28]
 801c3a4:	f000 fb18 	bl	801c9d8 <tcp_process>
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801c3ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c3b0:	f113 0f0d 	cmn.w	r3, #13
 801c3b4:	f000 80d3 	beq.w	801c55e <tcp_input+0x712>
      if (recv_flags & TF_RESET) {
 801c3b8:	4b71      	ldr	r3, [pc, #452]	@ (801c580 <tcp_input+0x734>)
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	f003 0308 	and.w	r3, r3, #8
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d015      	beq.n	801c3f0 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801c3c4:	69fb      	ldr	r3, [r7, #28]
 801c3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d008      	beq.n	801c3e0 <tcp_input+0x594>
 801c3ce:	69fb      	ldr	r3, [r7, #28]
 801c3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c3d4:	69fa      	ldr	r2, [r7, #28]
 801c3d6:	6912      	ldr	r2, [r2, #16]
 801c3d8:	f06f 010d 	mvn.w	r1, #13
 801c3dc:	4610      	mov	r0, r2
 801c3de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c3e0:	69f9      	ldr	r1, [r7, #28]
 801c3e2:	486c      	ldr	r0, [pc, #432]	@ (801c594 <tcp_input+0x748>)
 801c3e4:	f7ff fbba 	bl	801bb5c <tcp_pcb_remove>
        tcp_free(pcb);
 801c3e8:	69f8      	ldr	r0, [r7, #28]
 801c3ea:	f7fd fee5 	bl	801a1b8 <tcp_free>
 801c3ee:	e0da      	b.n	801c5a6 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801c3f4:	4b63      	ldr	r3, [pc, #396]	@ (801c584 <tcp_input+0x738>)
 801c3f6:	881b      	ldrh	r3, [r3, #0]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d01d      	beq.n	801c438 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801c3fc:	4b61      	ldr	r3, [pc, #388]	@ (801c584 <tcp_input+0x738>)
 801c3fe:	881b      	ldrh	r3, [r3, #0]
 801c400:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801c402:	69fb      	ldr	r3, [r7, #28]
 801c404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d00a      	beq.n	801c422 <tcp_input+0x5d6>
 801c40c:	69fb      	ldr	r3, [r7, #28]
 801c40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c412:	69fa      	ldr	r2, [r7, #28]
 801c414:	6910      	ldr	r0, [r2, #16]
 801c416:	89fa      	ldrh	r2, [r7, #14]
 801c418:	69f9      	ldr	r1, [r7, #28]
 801c41a:	4798      	blx	r3
 801c41c:	4603      	mov	r3, r0
 801c41e:	74fb      	strb	r3, [r7, #19]
 801c420:	e001      	b.n	801c426 <tcp_input+0x5da>
 801c422:	2300      	movs	r3, #0
 801c424:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801c426:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c42a:	f113 0f0d 	cmn.w	r3, #13
 801c42e:	f000 8098 	beq.w	801c562 <tcp_input+0x716>
              goto aborted;
            }
          }
          recv_acked = 0;
 801c432:	4b54      	ldr	r3, [pc, #336]	@ (801c584 <tcp_input+0x738>)
 801c434:	2200      	movs	r2, #0
 801c436:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801c438:	69f8      	ldr	r0, [r7, #28]
 801c43a:	f000 f915 	bl	801c668 <tcp_input_delayed_close>
 801c43e:	4603      	mov	r3, r0
 801c440:	2b00      	cmp	r3, #0
 801c442:	f040 8090 	bne.w	801c566 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801c446:	4b4d      	ldr	r3, [pc, #308]	@ (801c57c <tcp_input+0x730>)
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d041      	beq.n	801c4d2 <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801c44e:	69fb      	ldr	r3, [r7, #28]
 801c450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c452:	2b00      	cmp	r3, #0
 801c454:	d006      	beq.n	801c464 <tcp_input+0x618>
 801c456:	4b50      	ldr	r3, [pc, #320]	@ (801c598 <tcp_input+0x74c>)
 801c458:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801c45c:	494f      	ldr	r1, [pc, #316]	@ (801c59c <tcp_input+0x750>)
 801c45e:	4850      	ldr	r0, [pc, #320]	@ (801c5a0 <tcp_input+0x754>)
 801c460:	f005 fca4 	bl	8021dac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801c464:	69fb      	ldr	r3, [r7, #28]
 801c466:	8b5b      	ldrh	r3, [r3, #26]
 801c468:	f003 0310 	and.w	r3, r3, #16
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d008      	beq.n	801c482 <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801c470:	4b42      	ldr	r3, [pc, #264]	@ (801c57c <tcp_input+0x730>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	4618      	mov	r0, r3
 801c476:	f7fd fa8d 	bl	8019994 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801c47a:	69f8      	ldr	r0, [r7, #28]
 801c47c:	f7fe f988 	bl	801a790 <tcp_abort>
            goto aborted;
 801c480:	e091      	b.n	801c5a6 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801c482:	69fb      	ldr	r3, [r7, #28]
 801c484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d00c      	beq.n	801c4a6 <tcp_input+0x65a>
 801c48c:	69fb      	ldr	r3, [r7, #28]
 801c48e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801c492:	69fb      	ldr	r3, [r7, #28]
 801c494:	6918      	ldr	r0, [r3, #16]
 801c496:	4b39      	ldr	r3, [pc, #228]	@ (801c57c <tcp_input+0x730>)
 801c498:	681a      	ldr	r2, [r3, #0]
 801c49a:	2300      	movs	r3, #0
 801c49c:	69f9      	ldr	r1, [r7, #28]
 801c49e:	47a0      	blx	r4
 801c4a0:	4603      	mov	r3, r0
 801c4a2:	74fb      	strb	r3, [r7, #19]
 801c4a4:	e008      	b.n	801c4b8 <tcp_input+0x66c>
 801c4a6:	4b35      	ldr	r3, [pc, #212]	@ (801c57c <tcp_input+0x730>)
 801c4a8:	681a      	ldr	r2, [r3, #0]
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	69f9      	ldr	r1, [r7, #28]
 801c4ae:	2000      	movs	r0, #0
 801c4b0:	f7ff f89c 	bl	801b5ec <tcp_recv_null>
 801c4b4:	4603      	mov	r3, r0
 801c4b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801c4b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c4bc:	f113 0f0d 	cmn.w	r3, #13
 801c4c0:	d053      	beq.n	801c56a <tcp_input+0x71e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801c4c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d003      	beq.n	801c4d2 <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801c4ca:	4b2c      	ldr	r3, [pc, #176]	@ (801c57c <tcp_input+0x730>)
 801c4cc:	681a      	ldr	r2, [r3, #0]
 801c4ce:	69fb      	ldr	r3, [r7, #28]
 801c4d0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801c4d2:	4b2b      	ldr	r3, [pc, #172]	@ (801c580 <tcp_input+0x734>)
 801c4d4:	781b      	ldrb	r3, [r3, #0]
 801c4d6:	f003 0320 	and.w	r3, r3, #32
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d030      	beq.n	801c540 <tcp_input+0x6f4>
          if (pcb->refused_data != NULL) {
 801c4de:	69fb      	ldr	r3, [r7, #28]
 801c4e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d009      	beq.n	801c4fa <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801c4e6:	69fb      	ldr	r3, [r7, #28]
 801c4e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4ea:	7b5a      	ldrb	r2, [r3, #13]
 801c4ec:	69fb      	ldr	r3, [r7, #28]
 801c4ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c4f0:	f042 0220 	orr.w	r2, r2, #32
 801c4f4:	b2d2      	uxtb	r2, r2
 801c4f6:	735a      	strb	r2, [r3, #13]
 801c4f8:	e022      	b.n	801c540 <tcp_input+0x6f4>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c4fa:	69fb      	ldr	r3, [r7, #28]
 801c4fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c4fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801c502:	d005      	beq.n	801c510 <tcp_input+0x6c4>
              pcb->rcv_wnd++;
 801c504:	69fb      	ldr	r3, [r7, #28]
 801c506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c508:	3301      	adds	r3, #1
 801c50a:	b29a      	uxth	r2, r3
 801c50c:	69fb      	ldr	r3, [r7, #28]
 801c50e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801c510:	69fb      	ldr	r3, [r7, #28]
 801c512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c516:	2b00      	cmp	r3, #0
 801c518:	d00b      	beq.n	801c532 <tcp_input+0x6e6>
 801c51a:	69fb      	ldr	r3, [r7, #28]
 801c51c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801c520:	69fb      	ldr	r3, [r7, #28]
 801c522:	6918      	ldr	r0, [r3, #16]
 801c524:	2300      	movs	r3, #0
 801c526:	2200      	movs	r2, #0
 801c528:	69f9      	ldr	r1, [r7, #28]
 801c52a:	47a0      	blx	r4
 801c52c:	4603      	mov	r3, r0
 801c52e:	74fb      	strb	r3, [r7, #19]
 801c530:	e001      	b.n	801c536 <tcp_input+0x6ea>
 801c532:	2300      	movs	r3, #0
 801c534:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801c536:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c53a:	f113 0f0d 	cmn.w	r3, #13
 801c53e:	d016      	beq.n	801c56e <tcp_input+0x722>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801c540:	4b13      	ldr	r3, [pc, #76]	@ (801c590 <tcp_input+0x744>)
 801c542:	2200      	movs	r2, #0
 801c544:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801c546:	69f8      	ldr	r0, [r7, #28]
 801c548:	f000 f88e 	bl	801c668 <tcp_input_delayed_close>
 801c54c:	4603      	mov	r3, r0
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d128      	bne.n	801c5a4 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801c552:	69f8      	ldr	r0, [r7, #28]
 801c554:	f002 ff1c 	bl	801f390 <tcp_output>
 801c558:	e025      	b.n	801c5a6 <tcp_input+0x75a>
        goto aborted;
 801c55a:	bf00      	nop
 801c55c:	e023      	b.n	801c5a6 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801c55e:	bf00      	nop
 801c560:	e021      	b.n	801c5a6 <tcp_input+0x75a>
              goto aborted;
 801c562:	bf00      	nop
 801c564:	e01f      	b.n	801c5a6 <tcp_input+0x75a>
          goto aborted;
 801c566:	bf00      	nop
 801c568:	e01d      	b.n	801c5a6 <tcp_input+0x75a>
            goto aborted;
 801c56a:	bf00      	nop
 801c56c:	e01b      	b.n	801c5a6 <tcp_input+0x75a>
              goto aborted;
 801c56e:	bf00      	nop
 801c570:	e019      	b.n	801c5a6 <tcp_input+0x75a>
 801c572:	bf00      	nop
 801c574:	240126b4 	.word	0x240126b4
 801c578:	240126c4 	.word	0x240126c4
 801c57c:	240126e4 	.word	0x240126e4
 801c580:	240126e1 	.word	0x240126e1
 801c584:	240126dc 	.word	0x240126dc
 801c588:	240126e0 	.word	0x240126e0
 801c58c:	240126de 	.word	0x240126de
 801c590:	240126e8 	.word	0x240126e8
 801c594:	240126a8 	.word	0x240126a8
 801c598:	08027720 	.word	0x08027720
 801c59c:	08027900 	.word	0x08027900
 801c5a0:	08027798 	.word	0x08027798
          goto aborted;
 801c5a4:	bf00      	nop
    tcp_input_pcb = NULL;
 801c5a6:	4b27      	ldr	r3, [pc, #156]	@ (801c644 <tcp_input+0x7f8>)
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801c5ac:	4b26      	ldr	r3, [pc, #152]	@ (801c648 <tcp_input+0x7fc>)
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801c5b2:	4b26      	ldr	r3, [pc, #152]	@ (801c64c <tcp_input+0x800>)
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d03f      	beq.n	801c63a <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 801c5ba:	4b24      	ldr	r3, [pc, #144]	@ (801c64c <tcp_input+0x800>)
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f7fd f9e8 	bl	8019994 <pbuf_free>
      inseg.p = NULL;
 801c5c4:	4b21      	ldr	r3, [pc, #132]	@ (801c64c <tcp_input+0x800>)
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801c5ca:	e036      	b.n	801c63a <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801c5cc:	4b20      	ldr	r3, [pc, #128]	@ (801c650 <tcp_input+0x804>)
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	899b      	ldrh	r3, [r3, #12]
 801c5d2:	b29b      	uxth	r3, r3
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	f7f7 fbf9 	bl	8013dcc <lwip_htons>
 801c5da:	4603      	mov	r3, r0
 801c5dc:	b2db      	uxtb	r3, r3
 801c5de:	f003 0304 	and.w	r3, r3, #4
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d118      	bne.n	801c618 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c5e6:	4b1b      	ldr	r3, [pc, #108]	@ (801c654 <tcp_input+0x808>)
 801c5e8:	6819      	ldr	r1, [r3, #0]
 801c5ea:	4b1b      	ldr	r3, [pc, #108]	@ (801c658 <tcp_input+0x80c>)
 801c5ec:	881b      	ldrh	r3, [r3, #0]
 801c5ee:	461a      	mov	r2, r3
 801c5f0:	4b1a      	ldr	r3, [pc, #104]	@ (801c65c <tcp_input+0x810>)
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c5f6:	4b16      	ldr	r3, [pc, #88]	@ (801c650 <tcp_input+0x804>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c5fa:	885b      	ldrh	r3, [r3, #2]
 801c5fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c5fe:	4a14      	ldr	r2, [pc, #80]	@ (801c650 <tcp_input+0x804>)
 801c600:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c602:	8812      	ldrh	r2, [r2, #0]
 801c604:	b292      	uxth	r2, r2
 801c606:	9202      	str	r2, [sp, #8]
 801c608:	9301      	str	r3, [sp, #4]
 801c60a:	4b15      	ldr	r3, [pc, #84]	@ (801c660 <tcp_input+0x814>)
 801c60c:	9300      	str	r3, [sp, #0]
 801c60e:	4b15      	ldr	r3, [pc, #84]	@ (801c664 <tcp_input+0x818>)
 801c610:	4602      	mov	r2, r0
 801c612:	2000      	movs	r0, #0
 801c614:	f003 fc72 	bl	801fefc <tcp_rst>
    pbuf_free(p);
 801c618:	6878      	ldr	r0, [r7, #4]
 801c61a:	f7fd f9bb 	bl	8019994 <pbuf_free>
  return;
 801c61e:	e00c      	b.n	801c63a <tcp_input+0x7ee>
    goto dropped;
 801c620:	bf00      	nop
 801c622:	e006      	b.n	801c632 <tcp_input+0x7e6>
    goto dropped;
 801c624:	bf00      	nop
 801c626:	e004      	b.n	801c632 <tcp_input+0x7e6>
    goto dropped;
 801c628:	bf00      	nop
 801c62a:	e002      	b.n	801c632 <tcp_input+0x7e6>
      goto dropped;
 801c62c:	bf00      	nop
 801c62e:	e000      	b.n	801c632 <tcp_input+0x7e6>
      goto dropped;
 801c630:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801c632:	6878      	ldr	r0, [r7, #4]
 801c634:	f7fd f9ae 	bl	8019994 <pbuf_free>
 801c638:	e000      	b.n	801c63c <tcp_input+0x7f0>
  return;
 801c63a:	bf00      	nop
}
 801c63c:	3724      	adds	r7, #36	@ 0x24
 801c63e:	46bd      	mov	sp, r7
 801c640:	bd90      	pop	{r4, r7, pc}
 801c642:	bf00      	nop
 801c644:	240126e8 	.word	0x240126e8
 801c648:	240126e4 	.word	0x240126e4
 801c64c:	240126b4 	.word	0x240126b4
 801c650:	240126c4 	.word	0x240126c4
 801c654:	240126d8 	.word	0x240126d8
 801c658:	240126de 	.word	0x240126de
 801c65c:	240126d4 	.word	0x240126d4
 801c660:	2400a170 	.word	0x2400a170
 801c664:	2400a174 	.word	0x2400a174

0801c668 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801c668:	b580      	push	{r7, lr}
 801c66a:	b082      	sub	sp, #8
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d106      	bne.n	801c684 <tcp_input_delayed_close+0x1c>
 801c676:	4b17      	ldr	r3, [pc, #92]	@ (801c6d4 <tcp_input_delayed_close+0x6c>)
 801c678:	f240 225a 	movw	r2, #602	@ 0x25a
 801c67c:	4916      	ldr	r1, [pc, #88]	@ (801c6d8 <tcp_input_delayed_close+0x70>)
 801c67e:	4817      	ldr	r0, [pc, #92]	@ (801c6dc <tcp_input_delayed_close+0x74>)
 801c680:	f005 fb94 	bl	8021dac <iprintf>

  if (recv_flags & TF_CLOSED) {
 801c684:	4b16      	ldr	r3, [pc, #88]	@ (801c6e0 <tcp_input_delayed_close+0x78>)
 801c686:	781b      	ldrb	r3, [r3, #0]
 801c688:	f003 0310 	and.w	r3, r3, #16
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d01c      	beq.n	801c6ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	8b5b      	ldrh	r3, [r3, #26]
 801c694:	f003 0310 	and.w	r3, r3, #16
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d10d      	bne.n	801c6b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d008      	beq.n	801c6b8 <tcp_input_delayed_close+0x50>
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c6ac:	687a      	ldr	r2, [r7, #4]
 801c6ae:	6912      	ldr	r2, [r2, #16]
 801c6b0:	f06f 010e 	mvn.w	r1, #14
 801c6b4:	4610      	mov	r0, r2
 801c6b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c6b8:	6879      	ldr	r1, [r7, #4]
 801c6ba:	480a      	ldr	r0, [pc, #40]	@ (801c6e4 <tcp_input_delayed_close+0x7c>)
 801c6bc:	f7ff fa4e 	bl	801bb5c <tcp_pcb_remove>
    tcp_free(pcb);
 801c6c0:	6878      	ldr	r0, [r7, #4]
 801c6c2:	f7fd fd79 	bl	801a1b8 <tcp_free>
    return 1;
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	e000      	b.n	801c6cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 801c6ca:	2300      	movs	r3, #0
}
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	3708      	adds	r7, #8
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	bd80      	pop	{r7, pc}
 801c6d4:	08027720 	.word	0x08027720
 801c6d8:	0802791c 	.word	0x0802791c
 801c6dc:	08027798 	.word	0x08027798
 801c6e0:	240126e1 	.word	0x240126e1
 801c6e4:	240126a8 	.word	0x240126a8

0801c6e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801c6e8:	b590      	push	{r4, r7, lr}
 801c6ea:	b08b      	sub	sp, #44	@ 0x2c
 801c6ec:	af04      	add	r7, sp, #16
 801c6ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801c6f0:	4b6f      	ldr	r3, [pc, #444]	@ (801c8b0 <tcp_listen_input+0x1c8>)
 801c6f2:	781b      	ldrb	r3, [r3, #0]
 801c6f4:	f003 0304 	and.w	r3, r3, #4
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	f040 80d2 	bne.w	801c8a2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d106      	bne.n	801c712 <tcp_listen_input+0x2a>
 801c704:	4b6b      	ldr	r3, [pc, #428]	@ (801c8b4 <tcp_listen_input+0x1cc>)
 801c706:	f240 2281 	movw	r2, #641	@ 0x281
 801c70a:	496b      	ldr	r1, [pc, #428]	@ (801c8b8 <tcp_listen_input+0x1d0>)
 801c70c:	486b      	ldr	r0, [pc, #428]	@ (801c8bc <tcp_listen_input+0x1d4>)
 801c70e:	f005 fb4d 	bl	8021dac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801c712:	4b67      	ldr	r3, [pc, #412]	@ (801c8b0 <tcp_listen_input+0x1c8>)
 801c714:	781b      	ldrb	r3, [r3, #0]
 801c716:	f003 0310 	and.w	r3, r3, #16
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d019      	beq.n	801c752 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c71e:	4b68      	ldr	r3, [pc, #416]	@ (801c8c0 <tcp_listen_input+0x1d8>)
 801c720:	6819      	ldr	r1, [r3, #0]
 801c722:	4b68      	ldr	r3, [pc, #416]	@ (801c8c4 <tcp_listen_input+0x1dc>)
 801c724:	881b      	ldrh	r3, [r3, #0]
 801c726:	461a      	mov	r2, r3
 801c728:	4b67      	ldr	r3, [pc, #412]	@ (801c8c8 <tcp_listen_input+0x1e0>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c72e:	4b67      	ldr	r3, [pc, #412]	@ (801c8cc <tcp_listen_input+0x1e4>)
 801c730:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c732:	885b      	ldrh	r3, [r3, #2]
 801c734:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c736:	4a65      	ldr	r2, [pc, #404]	@ (801c8cc <tcp_listen_input+0x1e4>)
 801c738:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c73a:	8812      	ldrh	r2, [r2, #0]
 801c73c:	b292      	uxth	r2, r2
 801c73e:	9202      	str	r2, [sp, #8]
 801c740:	9301      	str	r3, [sp, #4]
 801c742:	4b63      	ldr	r3, [pc, #396]	@ (801c8d0 <tcp_listen_input+0x1e8>)
 801c744:	9300      	str	r3, [sp, #0]
 801c746:	4b63      	ldr	r3, [pc, #396]	@ (801c8d4 <tcp_listen_input+0x1ec>)
 801c748:	4602      	mov	r2, r0
 801c74a:	6878      	ldr	r0, [r7, #4]
 801c74c:	f003 fbd6 	bl	801fefc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801c750:	e0a9      	b.n	801c8a6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801c752:	4b57      	ldr	r3, [pc, #348]	@ (801c8b0 <tcp_listen_input+0x1c8>)
 801c754:	781b      	ldrb	r3, [r3, #0]
 801c756:	f003 0302 	and.w	r3, r3, #2
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	f000 80a3 	beq.w	801c8a6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	7d5b      	ldrb	r3, [r3, #21]
 801c764:	4618      	mov	r0, r3
 801c766:	f7ff f865 	bl	801b834 <tcp_alloc>
 801c76a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801c76c:	697b      	ldr	r3, [r7, #20]
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d111      	bne.n	801c796 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	699b      	ldr	r3, [r3, #24]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d00a      	beq.n	801c790 <tcp_listen_input+0xa8>
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	699b      	ldr	r3, [r3, #24]
 801c77e:	687a      	ldr	r2, [r7, #4]
 801c780:	6910      	ldr	r0, [r2, #16]
 801c782:	f04f 32ff 	mov.w	r2, #4294967295
 801c786:	2100      	movs	r1, #0
 801c788:	4798      	blx	r3
 801c78a:	4603      	mov	r3, r0
 801c78c:	73bb      	strb	r3, [r7, #14]
      return;
 801c78e:	e08b      	b.n	801c8a8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c790:	23f0      	movs	r3, #240	@ 0xf0
 801c792:	73bb      	strb	r3, [r7, #14]
      return;
 801c794:	e088      	b.n	801c8a8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801c796:	4b50      	ldr	r3, [pc, #320]	@ (801c8d8 <tcp_listen_input+0x1f0>)
 801c798:	695a      	ldr	r2, [r3, #20]
 801c79a:	697b      	ldr	r3, [r7, #20]
 801c79c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801c79e:	4b4e      	ldr	r3, [pc, #312]	@ (801c8d8 <tcp_listen_input+0x1f0>)
 801c7a0:	691a      	ldr	r2, [r3, #16]
 801c7a2:	697b      	ldr	r3, [r7, #20]
 801c7a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	8ada      	ldrh	r2, [r3, #22]
 801c7aa:	697b      	ldr	r3, [r7, #20]
 801c7ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801c7ae:	4b47      	ldr	r3, [pc, #284]	@ (801c8cc <tcp_listen_input+0x1e4>)
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	881b      	ldrh	r3, [r3, #0]
 801c7b4:	b29a      	uxth	r2, r3
 801c7b6:	697b      	ldr	r3, [r7, #20]
 801c7b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	2203      	movs	r2, #3
 801c7be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801c7c0:	4b41      	ldr	r3, [pc, #260]	@ (801c8c8 <tcp_listen_input+0x1e0>)
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	1c5a      	adds	r2, r3, #1
 801c7c6:	697b      	ldr	r3, [r7, #20]
 801c7c8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801c7ca:	697b      	ldr	r3, [r7, #20]
 801c7cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801c7d2:	6978      	ldr	r0, [r7, #20]
 801c7d4:	f7ff fa56 	bl	801bc84 <tcp_next_iss>
 801c7d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801c7da:	697b      	ldr	r3, [r7, #20]
 801c7dc:	693a      	ldr	r2, [r7, #16]
 801c7de:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	693a      	ldr	r2, [r7, #16]
 801c7e4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801c7e6:	697b      	ldr	r3, [r7, #20]
 801c7e8:	693a      	ldr	r2, [r7, #16]
 801c7ea:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801c7ec:	697b      	ldr	r3, [r7, #20]
 801c7ee:	693a      	ldr	r2, [r7, #16]
 801c7f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801c7f2:	4b35      	ldr	r3, [pc, #212]	@ (801c8c8 <tcp_listen_input+0x1e0>)
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	1e5a      	subs	r2, r3, #1
 801c7f8:	697b      	ldr	r3, [r7, #20]
 801c7fa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	691a      	ldr	r2, [r3, #16]
 801c800:	697b      	ldr	r3, [r7, #20]
 801c802:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801c804:	697b      	ldr	r3, [r7, #20]
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	7a5b      	ldrb	r3, [r3, #9]
 801c80e:	f003 030c 	and.w	r3, r3, #12
 801c812:	b2da      	uxtb	r2, r3
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	7a1a      	ldrb	r2, [r3, #8]
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801c820:	4b2e      	ldr	r3, [pc, #184]	@ (801c8dc <tcp_listen_input+0x1f4>)
 801c822:	681a      	ldr	r2, [r3, #0]
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	60da      	str	r2, [r3, #12]
 801c828:	4a2c      	ldr	r2, [pc, #176]	@ (801c8dc <tcp_listen_input+0x1f4>)
 801c82a:	697b      	ldr	r3, [r7, #20]
 801c82c:	6013      	str	r3, [r2, #0]
 801c82e:	f003 fed7 	bl	80205e0 <tcp_timer_needed>
 801c832:	4b2b      	ldr	r3, [pc, #172]	@ (801c8e0 <tcp_listen_input+0x1f8>)
 801c834:	2201      	movs	r2, #1
 801c836:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801c838:	6978      	ldr	r0, [r7, #20]
 801c83a:	f001 fd8b 	bl	801e354 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801c83e:	4b23      	ldr	r3, [pc, #140]	@ (801c8cc <tcp_listen_input+0x1e4>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	89db      	ldrh	r3, [r3, #14]
 801c844:	b29a      	uxth	r2, r3
 801c846:	697b      	ldr	r3, [r7, #20]
 801c848:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801c852:	697b      	ldr	r3, [r7, #20]
 801c854:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801c858:	697b      	ldr	r3, [r7, #20]
 801c85a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801c85c:	697b      	ldr	r3, [r7, #20]
 801c85e:	3304      	adds	r3, #4
 801c860:	4618      	mov	r0, r3
 801c862:	f7f8 fd91 	bl	8015388 <ip4_route>
 801c866:	4601      	mov	r1, r0
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	3304      	adds	r3, #4
 801c86c:	461a      	mov	r2, r3
 801c86e:	4620      	mov	r0, r4
 801c870:	f7ff fa2e 	bl	801bcd0 <tcp_eff_send_mss_netif>
 801c874:	4603      	mov	r3, r0
 801c876:	461a      	mov	r2, r3
 801c878:	697b      	ldr	r3, [r7, #20]
 801c87a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801c87c:	2112      	movs	r1, #18
 801c87e:	6978      	ldr	r0, [r7, #20]
 801c880:	f002 fc98 	bl	801f1b4 <tcp_enqueue_flags>
 801c884:	4603      	mov	r3, r0
 801c886:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801c888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d004      	beq.n	801c89a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801c890:	2100      	movs	r1, #0
 801c892:	6978      	ldr	r0, [r7, #20]
 801c894:	f7fd febc 	bl	801a610 <tcp_abandon>
      return;
 801c898:	e006      	b.n	801c8a8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801c89a:	6978      	ldr	r0, [r7, #20]
 801c89c:	f002 fd78 	bl	801f390 <tcp_output>
  return;
 801c8a0:	e001      	b.n	801c8a6 <tcp_listen_input+0x1be>
    return;
 801c8a2:	bf00      	nop
 801c8a4:	e000      	b.n	801c8a8 <tcp_listen_input+0x1c0>
  return;
 801c8a6:	bf00      	nop
}
 801c8a8:	371c      	adds	r7, #28
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd90      	pop	{r4, r7, pc}
 801c8ae:	bf00      	nop
 801c8b0:	240126e0 	.word	0x240126e0
 801c8b4:	08027720 	.word	0x08027720
 801c8b8:	08027944 	.word	0x08027944
 801c8bc:	08027798 	.word	0x08027798
 801c8c0:	240126d8 	.word	0x240126d8
 801c8c4:	240126de 	.word	0x240126de
 801c8c8:	240126d4 	.word	0x240126d4
 801c8cc:	240126c4 	.word	0x240126c4
 801c8d0:	2400a170 	.word	0x2400a170
 801c8d4:	2400a174 	.word	0x2400a174
 801c8d8:	2400a160 	.word	0x2400a160
 801c8dc:	240126a8 	.word	0x240126a8
 801c8e0:	240126b0 	.word	0x240126b0

0801c8e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b086      	sub	sp, #24
 801c8e8:	af04      	add	r7, sp, #16
 801c8ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801c8ec:	4b2f      	ldr	r3, [pc, #188]	@ (801c9ac <tcp_timewait_input+0xc8>)
 801c8ee:	781b      	ldrb	r3, [r3, #0]
 801c8f0:	f003 0304 	and.w	r3, r3, #4
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d153      	bne.n	801c9a0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d106      	bne.n	801c90c <tcp_timewait_input+0x28>
 801c8fe:	4b2c      	ldr	r3, [pc, #176]	@ (801c9b0 <tcp_timewait_input+0xcc>)
 801c900:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801c904:	492b      	ldr	r1, [pc, #172]	@ (801c9b4 <tcp_timewait_input+0xd0>)
 801c906:	482c      	ldr	r0, [pc, #176]	@ (801c9b8 <tcp_timewait_input+0xd4>)
 801c908:	f005 fa50 	bl	8021dac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801c90c:	4b27      	ldr	r3, [pc, #156]	@ (801c9ac <tcp_timewait_input+0xc8>)
 801c90e:	781b      	ldrb	r3, [r3, #0]
 801c910:	f003 0302 	and.w	r3, r3, #2
 801c914:	2b00      	cmp	r3, #0
 801c916:	d02a      	beq.n	801c96e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801c918:	4b28      	ldr	r3, [pc, #160]	@ (801c9bc <tcp_timewait_input+0xd8>)
 801c91a:	681a      	ldr	r2, [r3, #0]
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c920:	1ad3      	subs	r3, r2, r3
 801c922:	2b00      	cmp	r3, #0
 801c924:	db2d      	blt.n	801c982 <tcp_timewait_input+0x9e>
 801c926:	4b25      	ldr	r3, [pc, #148]	@ (801c9bc <tcp_timewait_input+0xd8>)
 801c928:	681a      	ldr	r2, [r3, #0]
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c92e:	6879      	ldr	r1, [r7, #4]
 801c930:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801c932:	440b      	add	r3, r1
 801c934:	1ad3      	subs	r3, r2, r3
 801c936:	2b00      	cmp	r3, #0
 801c938:	dc23      	bgt.n	801c982 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c93a:	4b21      	ldr	r3, [pc, #132]	@ (801c9c0 <tcp_timewait_input+0xdc>)
 801c93c:	6819      	ldr	r1, [r3, #0]
 801c93e:	4b21      	ldr	r3, [pc, #132]	@ (801c9c4 <tcp_timewait_input+0xe0>)
 801c940:	881b      	ldrh	r3, [r3, #0]
 801c942:	461a      	mov	r2, r3
 801c944:	4b1d      	ldr	r3, [pc, #116]	@ (801c9bc <tcp_timewait_input+0xd8>)
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c94a:	4b1f      	ldr	r3, [pc, #124]	@ (801c9c8 <tcp_timewait_input+0xe4>)
 801c94c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c94e:	885b      	ldrh	r3, [r3, #2]
 801c950:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c952:	4a1d      	ldr	r2, [pc, #116]	@ (801c9c8 <tcp_timewait_input+0xe4>)
 801c954:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c956:	8812      	ldrh	r2, [r2, #0]
 801c958:	b292      	uxth	r2, r2
 801c95a:	9202      	str	r2, [sp, #8]
 801c95c:	9301      	str	r3, [sp, #4]
 801c95e:	4b1b      	ldr	r3, [pc, #108]	@ (801c9cc <tcp_timewait_input+0xe8>)
 801c960:	9300      	str	r3, [sp, #0]
 801c962:	4b1b      	ldr	r3, [pc, #108]	@ (801c9d0 <tcp_timewait_input+0xec>)
 801c964:	4602      	mov	r2, r0
 801c966:	6878      	ldr	r0, [r7, #4]
 801c968:	f003 fac8 	bl	801fefc <tcp_rst>
      return;
 801c96c:	e01b      	b.n	801c9a6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801c96e:	4b0f      	ldr	r3, [pc, #60]	@ (801c9ac <tcp_timewait_input+0xc8>)
 801c970:	781b      	ldrb	r3, [r3, #0]
 801c972:	f003 0301 	and.w	r3, r3, #1
 801c976:	2b00      	cmp	r3, #0
 801c978:	d003      	beq.n	801c982 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801c97a:	4b16      	ldr	r3, [pc, #88]	@ (801c9d4 <tcp_timewait_input+0xf0>)
 801c97c:	681a      	ldr	r2, [r3, #0]
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801c982:	4b10      	ldr	r3, [pc, #64]	@ (801c9c4 <tcp_timewait_input+0xe0>)
 801c984:	881b      	ldrh	r3, [r3, #0]
 801c986:	2b00      	cmp	r3, #0
 801c988:	d00c      	beq.n	801c9a4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	8b5b      	ldrh	r3, [r3, #26]
 801c98e:	f043 0302 	orr.w	r3, r3, #2
 801c992:	b29a      	uxth	r2, r3
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c998:	6878      	ldr	r0, [r7, #4]
 801c99a:	f002 fcf9 	bl	801f390 <tcp_output>
  }
  return;
 801c99e:	e001      	b.n	801c9a4 <tcp_timewait_input+0xc0>
    return;
 801c9a0:	bf00      	nop
 801c9a2:	e000      	b.n	801c9a6 <tcp_timewait_input+0xc2>
  return;
 801c9a4:	bf00      	nop
}
 801c9a6:	3708      	adds	r7, #8
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}
 801c9ac:	240126e0 	.word	0x240126e0
 801c9b0:	08027720 	.word	0x08027720
 801c9b4:	08027964 	.word	0x08027964
 801c9b8:	08027798 	.word	0x08027798
 801c9bc:	240126d4 	.word	0x240126d4
 801c9c0:	240126d8 	.word	0x240126d8
 801c9c4:	240126de 	.word	0x240126de
 801c9c8:	240126c4 	.word	0x240126c4
 801c9cc:	2400a170 	.word	0x2400a170
 801c9d0:	2400a174 	.word	0x2400a174
 801c9d4:	2401269c 	.word	0x2401269c

0801c9d8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801c9d8:	b590      	push	{r4, r7, lr}
 801c9da:	b08d      	sub	sp, #52	@ 0x34
 801c9dc:	af04      	add	r7, sp, #16
 801c9de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801c9e4:	2300      	movs	r3, #0
 801c9e6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d106      	bne.n	801c9fc <tcp_process+0x24>
 801c9ee:	4b9d      	ldr	r3, [pc, #628]	@ (801cc64 <tcp_process+0x28c>)
 801c9f0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801c9f4:	499c      	ldr	r1, [pc, #624]	@ (801cc68 <tcp_process+0x290>)
 801c9f6:	489d      	ldr	r0, [pc, #628]	@ (801cc6c <tcp_process+0x294>)
 801c9f8:	f005 f9d8 	bl	8021dac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801c9fc:	4b9c      	ldr	r3, [pc, #624]	@ (801cc70 <tcp_process+0x298>)
 801c9fe:	781b      	ldrb	r3, [r3, #0]
 801ca00:	f003 0304 	and.w	r3, r3, #4
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d04e      	beq.n	801caa6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	7d1b      	ldrb	r3, [r3, #20]
 801ca0c:	2b02      	cmp	r3, #2
 801ca0e:	d108      	bne.n	801ca22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ca14:	4b97      	ldr	r3, [pc, #604]	@ (801cc74 <tcp_process+0x29c>)
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	429a      	cmp	r2, r3
 801ca1a:	d123      	bne.n	801ca64 <tcp_process+0x8c>
        acceptable = 1;
 801ca1c:	2301      	movs	r3, #1
 801ca1e:	76fb      	strb	r3, [r7, #27]
 801ca20:	e020      	b.n	801ca64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ca26:	4b94      	ldr	r3, [pc, #592]	@ (801cc78 <tcp_process+0x2a0>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	429a      	cmp	r2, r3
 801ca2c:	d102      	bne.n	801ca34 <tcp_process+0x5c>
        acceptable = 1;
 801ca2e:	2301      	movs	r3, #1
 801ca30:	76fb      	strb	r3, [r7, #27]
 801ca32:	e017      	b.n	801ca64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ca34:	4b90      	ldr	r3, [pc, #576]	@ (801cc78 <tcp_process+0x2a0>)
 801ca36:	681a      	ldr	r2, [r3, #0]
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca3c:	1ad3      	subs	r3, r2, r3
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	db10      	blt.n	801ca64 <tcp_process+0x8c>
 801ca42:	4b8d      	ldr	r3, [pc, #564]	@ (801cc78 <tcp_process+0x2a0>)
 801ca44:	681a      	ldr	r2, [r3, #0]
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca4a:	6879      	ldr	r1, [r7, #4]
 801ca4c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801ca4e:	440b      	add	r3, r1
 801ca50:	1ad3      	subs	r3, r2, r3
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	dc06      	bgt.n	801ca64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	8b5b      	ldrh	r3, [r3, #26]
 801ca5a:	f043 0302 	orr.w	r3, r3, #2
 801ca5e:	b29a      	uxth	r2, r3
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801ca64:	7efb      	ldrb	r3, [r7, #27]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d01b      	beq.n	801caa2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	7d1b      	ldrb	r3, [r3, #20]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d106      	bne.n	801ca80 <tcp_process+0xa8>
 801ca72:	4b7c      	ldr	r3, [pc, #496]	@ (801cc64 <tcp_process+0x28c>)
 801ca74:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801ca78:	4980      	ldr	r1, [pc, #512]	@ (801cc7c <tcp_process+0x2a4>)
 801ca7a:	487c      	ldr	r0, [pc, #496]	@ (801cc6c <tcp_process+0x294>)
 801ca7c:	f005 f996 	bl	8021dac <iprintf>
      recv_flags |= TF_RESET;
 801ca80:	4b7f      	ldr	r3, [pc, #508]	@ (801cc80 <tcp_process+0x2a8>)
 801ca82:	781b      	ldrb	r3, [r3, #0]
 801ca84:	f043 0308 	orr.w	r3, r3, #8
 801ca88:	b2da      	uxtb	r2, r3
 801ca8a:	4b7d      	ldr	r3, [pc, #500]	@ (801cc80 <tcp_process+0x2a8>)
 801ca8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	8b5b      	ldrh	r3, [r3, #26]
 801ca92:	f023 0301 	bic.w	r3, r3, #1
 801ca96:	b29a      	uxth	r2, r3
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801ca9c:	f06f 030d 	mvn.w	r3, #13
 801caa0:	e37a      	b.n	801d198 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801caa2:	2300      	movs	r3, #0
 801caa4:	e378      	b.n	801d198 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801caa6:	4b72      	ldr	r3, [pc, #456]	@ (801cc70 <tcp_process+0x298>)
 801caa8:	781b      	ldrb	r3, [r3, #0]
 801caaa:	f003 0302 	and.w	r3, r3, #2
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d010      	beq.n	801cad4 <tcp_process+0xfc>
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	7d1b      	ldrb	r3, [r3, #20]
 801cab6:	2b02      	cmp	r3, #2
 801cab8:	d00c      	beq.n	801cad4 <tcp_process+0xfc>
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	7d1b      	ldrb	r3, [r3, #20]
 801cabe:	2b03      	cmp	r3, #3
 801cac0:	d008      	beq.n	801cad4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	8b5b      	ldrh	r3, [r3, #26]
 801cac6:	f043 0302 	orr.w	r3, r3, #2
 801caca:	b29a      	uxth	r2, r3
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801cad0:	2300      	movs	r3, #0
 801cad2:	e361      	b.n	801d198 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	8b5b      	ldrh	r3, [r3, #26]
 801cad8:	f003 0310 	and.w	r3, r3, #16
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d103      	bne.n	801cae8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801cae0:	4b68      	ldr	r3, [pc, #416]	@ (801cc84 <tcp_process+0x2ac>)
 801cae2:	681a      	ldr	r2, [r3, #0]
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	2200      	movs	r2, #0
 801caec:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	2200      	movs	r2, #0
 801caf4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801caf8:	6878      	ldr	r0, [r7, #4]
 801cafa:	f001 fc2b 	bl	801e354 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	7d1b      	ldrb	r3, [r3, #20]
 801cb02:	3b02      	subs	r3, #2
 801cb04:	2b07      	cmp	r3, #7
 801cb06:	f200 8337 	bhi.w	801d178 <tcp_process+0x7a0>
 801cb0a:	a201      	add	r2, pc, #4	@ (adr r2, 801cb10 <tcp_process+0x138>)
 801cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb10:	0801cb31 	.word	0x0801cb31
 801cb14:	0801cd61 	.word	0x0801cd61
 801cb18:	0801ced9 	.word	0x0801ced9
 801cb1c:	0801cf03 	.word	0x0801cf03
 801cb20:	0801d027 	.word	0x0801d027
 801cb24:	0801ced9 	.word	0x0801ced9
 801cb28:	0801d0b3 	.word	0x0801d0b3
 801cb2c:	0801d143 	.word	0x0801d143
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801cb30:	4b4f      	ldr	r3, [pc, #316]	@ (801cc70 <tcp_process+0x298>)
 801cb32:	781b      	ldrb	r3, [r3, #0]
 801cb34:	f003 0310 	and.w	r3, r3, #16
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	f000 80e4 	beq.w	801cd06 <tcp_process+0x32e>
 801cb3e:	4b4c      	ldr	r3, [pc, #304]	@ (801cc70 <tcp_process+0x298>)
 801cb40:	781b      	ldrb	r3, [r3, #0]
 801cb42:	f003 0302 	and.w	r3, r3, #2
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	f000 80dd 	beq.w	801cd06 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cb50:	1c5a      	adds	r2, r3, #1
 801cb52:	4b48      	ldr	r3, [pc, #288]	@ (801cc74 <tcp_process+0x29c>)
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	429a      	cmp	r2, r3
 801cb58:	f040 80d5 	bne.w	801cd06 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801cb5c:	4b46      	ldr	r3, [pc, #280]	@ (801cc78 <tcp_process+0x2a0>)
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	1c5a      	adds	r2, r3, #1
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801cb6e:	4b41      	ldr	r3, [pc, #260]	@ (801cc74 <tcp_process+0x29c>)
 801cb70:	681a      	ldr	r2, [r3, #0]
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801cb76:	4b44      	ldr	r3, [pc, #272]	@ (801cc88 <tcp_process+0x2b0>)
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	89db      	ldrh	r3, [r3, #14]
 801cb7c:	b29a      	uxth	r2, r3
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801cb90:	4b39      	ldr	r3, [pc, #228]	@ (801cc78 <tcp_process+0x2a0>)
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	1e5a      	subs	r2, r3, #1
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2204      	movs	r2, #4
 801cb9e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	3304      	adds	r3, #4
 801cba8:	4618      	mov	r0, r3
 801cbaa:	f7f8 fbed 	bl	8015388 <ip4_route>
 801cbae:	4601      	mov	r1, r0
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	3304      	adds	r3, #4
 801cbb4:	461a      	mov	r2, r3
 801cbb6:	4620      	mov	r0, r4
 801cbb8:	f7ff f88a 	bl	801bcd0 <tcp_eff_send_mss_netif>
 801cbbc:	4603      	mov	r3, r0
 801cbbe:	461a      	mov	r2, r3
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cbc8:	009a      	lsls	r2, r3, #2
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cbce:	005b      	lsls	r3, r3, #1
 801cbd0:	f241 111c 	movw	r1, #4380	@ 0x111c
 801cbd4:	428b      	cmp	r3, r1
 801cbd6:	bf38      	it	cc
 801cbd8:	460b      	movcc	r3, r1
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d204      	bcs.n	801cbe8 <tcp_process+0x210>
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cbe2:	009b      	lsls	r3, r3, #2
 801cbe4:	b29b      	uxth	r3, r3
 801cbe6:	e00d      	b.n	801cc04 <tcp_process+0x22c>
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cbec:	005b      	lsls	r3, r3, #1
 801cbee:	f241 121c 	movw	r2, #4380	@ 0x111c
 801cbf2:	4293      	cmp	r3, r2
 801cbf4:	d904      	bls.n	801cc00 <tcp_process+0x228>
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cbfa:	005b      	lsls	r3, r3, #1
 801cbfc:	b29b      	uxth	r3, r3
 801cbfe:	e001      	b.n	801cc04 <tcp_process+0x22c>
 801cc00:	f241 131c 	movw	r3, #4380	@ 0x111c
 801cc04:	687a      	ldr	r2, [r7, #4]
 801cc06:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d106      	bne.n	801cc22 <tcp_process+0x24a>
 801cc14:	4b13      	ldr	r3, [pc, #76]	@ (801cc64 <tcp_process+0x28c>)
 801cc16:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801cc1a:	491c      	ldr	r1, [pc, #112]	@ (801cc8c <tcp_process+0x2b4>)
 801cc1c:	4813      	ldr	r0, [pc, #76]	@ (801cc6c <tcp_process+0x294>)
 801cc1e:	f005 f8c5 	bl	8021dac <iprintf>
        --pcb->snd_queuelen;
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801cc28:	3b01      	subs	r3, #1
 801cc2a:	b29a      	uxth	r2, r3
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc36:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801cc38:	69fb      	ldr	r3, [r7, #28]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d12a      	bne.n	801cc94 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cc42:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801cc44:	69fb      	ldr	r3, [r7, #28]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d106      	bne.n	801cc58 <tcp_process+0x280>
 801cc4a:	4b06      	ldr	r3, [pc, #24]	@ (801cc64 <tcp_process+0x28c>)
 801cc4c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801cc50:	490f      	ldr	r1, [pc, #60]	@ (801cc90 <tcp_process+0x2b8>)
 801cc52:	4806      	ldr	r0, [pc, #24]	@ (801cc6c <tcp_process+0x294>)
 801cc54:	f005 f8aa 	bl	8021dac <iprintf>
          pcb->unsent = rseg->next;
 801cc58:	69fb      	ldr	r3, [r7, #28]
 801cc5a:	681a      	ldr	r2, [r3, #0]
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	66da      	str	r2, [r3, #108]	@ 0x6c
 801cc60:	e01c      	b.n	801cc9c <tcp_process+0x2c4>
 801cc62:	bf00      	nop
 801cc64:	08027720 	.word	0x08027720
 801cc68:	08027984 	.word	0x08027984
 801cc6c:	08027798 	.word	0x08027798
 801cc70:	240126e0 	.word	0x240126e0
 801cc74:	240126d8 	.word	0x240126d8
 801cc78:	240126d4 	.word	0x240126d4
 801cc7c:	080279a0 	.word	0x080279a0
 801cc80:	240126e1 	.word	0x240126e1
 801cc84:	2401269c 	.word	0x2401269c
 801cc88:	240126c4 	.word	0x240126c4
 801cc8c:	080279c0 	.word	0x080279c0
 801cc90:	080279d8 	.word	0x080279d8
        } else {
          pcb->unacked = rseg->next;
 801cc94:	69fb      	ldr	r3, [r7, #28]
 801cc96:	681a      	ldr	r2, [r3, #0]
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801cc9c:	69f8      	ldr	r0, [r7, #28]
 801cc9e:	f7fe fc60 	bl	801b562 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d104      	bne.n	801ccb4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ccb0:	861a      	strh	r2, [r3, #48]	@ 0x30
 801ccb2:	e006      	b.n	801ccc2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d00a      	beq.n	801cce2 <tcp_process+0x30a>
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ccd2:	687a      	ldr	r2, [r7, #4]
 801ccd4:	6910      	ldr	r0, [r2, #16]
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	6879      	ldr	r1, [r7, #4]
 801ccda:	4798      	blx	r3
 801ccdc:	4603      	mov	r3, r0
 801ccde:	76bb      	strb	r3, [r7, #26]
 801cce0:	e001      	b.n	801cce6 <tcp_process+0x30e>
 801cce2:	2300      	movs	r3, #0
 801cce4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801cce6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ccea:	f113 0f0d 	cmn.w	r3, #13
 801ccee:	d102      	bne.n	801ccf6 <tcp_process+0x31e>
          return ERR_ABRT;
 801ccf0:	f06f 030c 	mvn.w	r3, #12
 801ccf4:	e250      	b.n	801d198 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	8b5b      	ldrh	r3, [r3, #26]
 801ccfa:	f043 0302 	orr.w	r3, r3, #2
 801ccfe:	b29a      	uxth	r2, r3
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801cd04:	e23a      	b.n	801d17c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801cd06:	4b98      	ldr	r3, [pc, #608]	@ (801cf68 <tcp_process+0x590>)
 801cd08:	781b      	ldrb	r3, [r3, #0]
 801cd0a:	f003 0310 	and.w	r3, r3, #16
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	f000 8234 	beq.w	801d17c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd14:	4b95      	ldr	r3, [pc, #596]	@ (801cf6c <tcp_process+0x594>)
 801cd16:	6819      	ldr	r1, [r3, #0]
 801cd18:	4b95      	ldr	r3, [pc, #596]	@ (801cf70 <tcp_process+0x598>)
 801cd1a:	881b      	ldrh	r3, [r3, #0]
 801cd1c:	461a      	mov	r2, r3
 801cd1e:	4b95      	ldr	r3, [pc, #596]	@ (801cf74 <tcp_process+0x59c>)
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd24:	4b94      	ldr	r3, [pc, #592]	@ (801cf78 <tcp_process+0x5a0>)
 801cd26:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd28:	885b      	ldrh	r3, [r3, #2]
 801cd2a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd2c:	4a92      	ldr	r2, [pc, #584]	@ (801cf78 <tcp_process+0x5a0>)
 801cd2e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd30:	8812      	ldrh	r2, [r2, #0]
 801cd32:	b292      	uxth	r2, r2
 801cd34:	9202      	str	r2, [sp, #8]
 801cd36:	9301      	str	r3, [sp, #4]
 801cd38:	4b90      	ldr	r3, [pc, #576]	@ (801cf7c <tcp_process+0x5a4>)
 801cd3a:	9300      	str	r3, [sp, #0]
 801cd3c:	4b90      	ldr	r3, [pc, #576]	@ (801cf80 <tcp_process+0x5a8>)
 801cd3e:	4602      	mov	r2, r0
 801cd40:	6878      	ldr	r0, [r7, #4]
 801cd42:	f003 f8db 	bl	801fefc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801cd4c:	2b05      	cmp	r3, #5
 801cd4e:	f200 8215 	bhi.w	801d17c <tcp_process+0x7a4>
          pcb->rtime = 0;
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	2200      	movs	r2, #0
 801cd56:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801cd58:	6878      	ldr	r0, [r7, #4]
 801cd5a:	f002 fea7 	bl	801faac <tcp_rexmit_rto>
      break;
 801cd5e:	e20d      	b.n	801d17c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801cd60:	4b81      	ldr	r3, [pc, #516]	@ (801cf68 <tcp_process+0x590>)
 801cd62:	781b      	ldrb	r3, [r3, #0]
 801cd64:	f003 0310 	and.w	r3, r3, #16
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	f000 80a1 	beq.w	801ceb0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cd6e:	4b7f      	ldr	r3, [pc, #508]	@ (801cf6c <tcp_process+0x594>)
 801cd70:	681a      	ldr	r2, [r3, #0]
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cd76:	1ad3      	subs	r3, r2, r3
 801cd78:	3b01      	subs	r3, #1
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	db7e      	blt.n	801ce7c <tcp_process+0x4a4>
 801cd7e:	4b7b      	ldr	r3, [pc, #492]	@ (801cf6c <tcp_process+0x594>)
 801cd80:	681a      	ldr	r2, [r3, #0]
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cd86:	1ad3      	subs	r3, r2, r3
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	dc77      	bgt.n	801ce7c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	2204      	movs	r2, #4
 801cd90:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d102      	bne.n	801cda0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801cd9a:	23fa      	movs	r3, #250	@ 0xfa
 801cd9c:	76bb      	strb	r3, [r7, #26]
 801cd9e:	e01d      	b.n	801cddc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cda4:	699b      	ldr	r3, [r3, #24]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d106      	bne.n	801cdb8 <tcp_process+0x3e0>
 801cdaa:	4b76      	ldr	r3, [pc, #472]	@ (801cf84 <tcp_process+0x5ac>)
 801cdac:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801cdb0:	4975      	ldr	r1, [pc, #468]	@ (801cf88 <tcp_process+0x5b0>)
 801cdb2:	4876      	ldr	r0, [pc, #472]	@ (801cf8c <tcp_process+0x5b4>)
 801cdb4:	f004 fffa 	bl	8021dac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cdbc:	699b      	ldr	r3, [r3, #24]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d00a      	beq.n	801cdd8 <tcp_process+0x400>
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cdc6:	699b      	ldr	r3, [r3, #24]
 801cdc8:	687a      	ldr	r2, [r7, #4]
 801cdca:	6910      	ldr	r0, [r2, #16]
 801cdcc:	2200      	movs	r2, #0
 801cdce:	6879      	ldr	r1, [r7, #4]
 801cdd0:	4798      	blx	r3
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	76bb      	strb	r3, [r7, #26]
 801cdd6:	e001      	b.n	801cddc <tcp_process+0x404>
 801cdd8:	23f0      	movs	r3, #240	@ 0xf0
 801cdda:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801cddc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d00a      	beq.n	801cdfa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801cde4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801cde8:	f113 0f0d 	cmn.w	r3, #13
 801cdec:	d002      	beq.n	801cdf4 <tcp_process+0x41c>
              tcp_abort(pcb);
 801cdee:	6878      	ldr	r0, [r7, #4]
 801cdf0:	f7fd fcce 	bl	801a790 <tcp_abort>
            }
            return ERR_ABRT;
 801cdf4:	f06f 030c 	mvn.w	r3, #12
 801cdf8:	e1ce      	b.n	801d198 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801cdfa:	6878      	ldr	r0, [r7, #4]
 801cdfc:	f000 fae0 	bl	801d3c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801ce00:	4b63      	ldr	r3, [pc, #396]	@ (801cf90 <tcp_process+0x5b8>)
 801ce02:	881b      	ldrh	r3, [r3, #0]
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d005      	beq.n	801ce14 <tcp_process+0x43c>
            recv_acked--;
 801ce08:	4b61      	ldr	r3, [pc, #388]	@ (801cf90 <tcp_process+0x5b8>)
 801ce0a:	881b      	ldrh	r3, [r3, #0]
 801ce0c:	3b01      	subs	r3, #1
 801ce0e:	b29a      	uxth	r2, r3
 801ce10:	4b5f      	ldr	r3, [pc, #380]	@ (801cf90 <tcp_process+0x5b8>)
 801ce12:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ce18:	009a      	lsls	r2, r3, #2
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ce1e:	005b      	lsls	r3, r3, #1
 801ce20:	f241 111c 	movw	r1, #4380	@ 0x111c
 801ce24:	428b      	cmp	r3, r1
 801ce26:	bf38      	it	cc
 801ce28:	460b      	movcc	r3, r1
 801ce2a:	429a      	cmp	r2, r3
 801ce2c:	d204      	bcs.n	801ce38 <tcp_process+0x460>
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ce32:	009b      	lsls	r3, r3, #2
 801ce34:	b29b      	uxth	r3, r3
 801ce36:	e00d      	b.n	801ce54 <tcp_process+0x47c>
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ce3c:	005b      	lsls	r3, r3, #1
 801ce3e:	f241 121c 	movw	r2, #4380	@ 0x111c
 801ce42:	4293      	cmp	r3, r2
 801ce44:	d904      	bls.n	801ce50 <tcp_process+0x478>
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ce4a:	005b      	lsls	r3, r3, #1
 801ce4c:	b29b      	uxth	r3, r3
 801ce4e:	e001      	b.n	801ce54 <tcp_process+0x47c>
 801ce50:	f241 131c 	movw	r3, #4380	@ 0x111c
 801ce54:	687a      	ldr	r2, [r7, #4]
 801ce56:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801ce5a:	4b4e      	ldr	r3, [pc, #312]	@ (801cf94 <tcp_process+0x5bc>)
 801ce5c:	781b      	ldrb	r3, [r3, #0]
 801ce5e:	f003 0320 	and.w	r3, r3, #32
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d037      	beq.n	801ced6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	8b5b      	ldrh	r3, [r3, #26]
 801ce6a:	f043 0302 	orr.w	r3, r3, #2
 801ce6e:	b29a      	uxth	r2, r3
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2207      	movs	r2, #7
 801ce78:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801ce7a:	e02c      	b.n	801ced6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce7c:	4b3b      	ldr	r3, [pc, #236]	@ (801cf6c <tcp_process+0x594>)
 801ce7e:	6819      	ldr	r1, [r3, #0]
 801ce80:	4b3b      	ldr	r3, [pc, #236]	@ (801cf70 <tcp_process+0x598>)
 801ce82:	881b      	ldrh	r3, [r3, #0]
 801ce84:	461a      	mov	r2, r3
 801ce86:	4b3b      	ldr	r3, [pc, #236]	@ (801cf74 <tcp_process+0x59c>)
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce8c:	4b3a      	ldr	r3, [pc, #232]	@ (801cf78 <tcp_process+0x5a0>)
 801ce8e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce90:	885b      	ldrh	r3, [r3, #2]
 801ce92:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce94:	4a38      	ldr	r2, [pc, #224]	@ (801cf78 <tcp_process+0x5a0>)
 801ce96:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce98:	8812      	ldrh	r2, [r2, #0]
 801ce9a:	b292      	uxth	r2, r2
 801ce9c:	9202      	str	r2, [sp, #8]
 801ce9e:	9301      	str	r3, [sp, #4]
 801cea0:	4b36      	ldr	r3, [pc, #216]	@ (801cf7c <tcp_process+0x5a4>)
 801cea2:	9300      	str	r3, [sp, #0]
 801cea4:	4b36      	ldr	r3, [pc, #216]	@ (801cf80 <tcp_process+0x5a8>)
 801cea6:	4602      	mov	r2, r0
 801cea8:	6878      	ldr	r0, [r7, #4]
 801ceaa:	f003 f827 	bl	801fefc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801ceae:	e167      	b.n	801d180 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801ceb0:	4b2d      	ldr	r3, [pc, #180]	@ (801cf68 <tcp_process+0x590>)
 801ceb2:	781b      	ldrb	r3, [r3, #0]
 801ceb4:	f003 0302 	and.w	r3, r3, #2
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	f000 8161 	beq.w	801d180 <tcp_process+0x7a8>
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cec2:	1e5a      	subs	r2, r3, #1
 801cec4:	4b2b      	ldr	r3, [pc, #172]	@ (801cf74 <tcp_process+0x59c>)
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	429a      	cmp	r2, r3
 801ceca:	f040 8159 	bne.w	801d180 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801cece:	6878      	ldr	r0, [r7, #4]
 801ced0:	f002 fe0e 	bl	801faf0 <tcp_rexmit>
      break;
 801ced4:	e154      	b.n	801d180 <tcp_process+0x7a8>
 801ced6:	e153      	b.n	801d180 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801ced8:	6878      	ldr	r0, [r7, #4]
 801ceda:	f000 fa71 	bl	801d3c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801cede:	4b2d      	ldr	r3, [pc, #180]	@ (801cf94 <tcp_process+0x5bc>)
 801cee0:	781b      	ldrb	r3, [r3, #0]
 801cee2:	f003 0320 	and.w	r3, r3, #32
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	f000 814c 	beq.w	801d184 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	8b5b      	ldrh	r3, [r3, #26]
 801cef0:	f043 0302 	orr.w	r3, r3, #2
 801cef4:	b29a      	uxth	r2, r3
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2207      	movs	r2, #7
 801cefe:	751a      	strb	r2, [r3, #20]
      }
      break;
 801cf00:	e140      	b.n	801d184 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801cf02:	6878      	ldr	r0, [r7, #4]
 801cf04:	f000 fa5c 	bl	801d3c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801cf08:	4b22      	ldr	r3, [pc, #136]	@ (801cf94 <tcp_process+0x5bc>)
 801cf0a:	781b      	ldrb	r3, [r3, #0]
 801cf0c:	f003 0320 	and.w	r3, r3, #32
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d071      	beq.n	801cff8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801cf14:	4b14      	ldr	r3, [pc, #80]	@ (801cf68 <tcp_process+0x590>)
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	f003 0310 	and.w	r3, r3, #16
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d060      	beq.n	801cfe2 <tcp_process+0x60a>
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801cf24:	4b11      	ldr	r3, [pc, #68]	@ (801cf6c <tcp_process+0x594>)
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	429a      	cmp	r2, r3
 801cf2a:	d15a      	bne.n	801cfe2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d156      	bne.n	801cfe2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	8b5b      	ldrh	r3, [r3, #26]
 801cf38:	f043 0302 	orr.w	r3, r3, #2
 801cf3c:	b29a      	uxth	r2, r3
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801cf42:	6878      	ldr	r0, [r7, #4]
 801cf44:	f7fe fdba 	bl	801babc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801cf48:	4b13      	ldr	r3, [pc, #76]	@ (801cf98 <tcp_process+0x5c0>)
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	687a      	ldr	r2, [r7, #4]
 801cf4e:	429a      	cmp	r2, r3
 801cf50:	d105      	bne.n	801cf5e <tcp_process+0x586>
 801cf52:	4b11      	ldr	r3, [pc, #68]	@ (801cf98 <tcp_process+0x5c0>)
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	68db      	ldr	r3, [r3, #12]
 801cf58:	4a0f      	ldr	r2, [pc, #60]	@ (801cf98 <tcp_process+0x5c0>)
 801cf5a:	6013      	str	r3, [r2, #0]
 801cf5c:	e02e      	b.n	801cfbc <tcp_process+0x5e4>
 801cf5e:	4b0e      	ldr	r3, [pc, #56]	@ (801cf98 <tcp_process+0x5c0>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	617b      	str	r3, [r7, #20]
 801cf64:	e027      	b.n	801cfb6 <tcp_process+0x5de>
 801cf66:	bf00      	nop
 801cf68:	240126e0 	.word	0x240126e0
 801cf6c:	240126d8 	.word	0x240126d8
 801cf70:	240126de 	.word	0x240126de
 801cf74:	240126d4 	.word	0x240126d4
 801cf78:	240126c4 	.word	0x240126c4
 801cf7c:	2400a170 	.word	0x2400a170
 801cf80:	2400a174 	.word	0x2400a174
 801cf84:	08027720 	.word	0x08027720
 801cf88:	080279ec 	.word	0x080279ec
 801cf8c:	08027798 	.word	0x08027798
 801cf90:	240126dc 	.word	0x240126dc
 801cf94:	240126e1 	.word	0x240126e1
 801cf98:	240126a8 	.word	0x240126a8
 801cf9c:	697b      	ldr	r3, [r7, #20]
 801cf9e:	68db      	ldr	r3, [r3, #12]
 801cfa0:	687a      	ldr	r2, [r7, #4]
 801cfa2:	429a      	cmp	r2, r3
 801cfa4:	d104      	bne.n	801cfb0 <tcp_process+0x5d8>
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	68da      	ldr	r2, [r3, #12]
 801cfaa:	697b      	ldr	r3, [r7, #20]
 801cfac:	60da      	str	r2, [r3, #12]
 801cfae:	e005      	b.n	801cfbc <tcp_process+0x5e4>
 801cfb0:	697b      	ldr	r3, [r7, #20]
 801cfb2:	68db      	ldr	r3, [r3, #12]
 801cfb4:	617b      	str	r3, [r7, #20]
 801cfb6:	697b      	ldr	r3, [r7, #20]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d1ef      	bne.n	801cf9c <tcp_process+0x5c4>
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	2200      	movs	r2, #0
 801cfc0:	60da      	str	r2, [r3, #12]
 801cfc2:	4b77      	ldr	r3, [pc, #476]	@ (801d1a0 <tcp_process+0x7c8>)
 801cfc4:	2201      	movs	r2, #1
 801cfc6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	220a      	movs	r2, #10
 801cfcc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801cfce:	4b75      	ldr	r3, [pc, #468]	@ (801d1a4 <tcp_process+0x7cc>)
 801cfd0:	681a      	ldr	r2, [r3, #0]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	60da      	str	r2, [r3, #12]
 801cfd6:	4a73      	ldr	r2, [pc, #460]	@ (801d1a4 <tcp_process+0x7cc>)
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	6013      	str	r3, [r2, #0]
 801cfdc:	f003 fb00 	bl	80205e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801cfe0:	e0d2      	b.n	801d188 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	8b5b      	ldrh	r3, [r3, #26]
 801cfe6:	f043 0302 	orr.w	r3, r3, #2
 801cfea:	b29a      	uxth	r2, r3
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	2208      	movs	r2, #8
 801cff4:	751a      	strb	r2, [r3, #20]
      break;
 801cff6:	e0c7      	b.n	801d188 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801cff8:	4b6b      	ldr	r3, [pc, #428]	@ (801d1a8 <tcp_process+0x7d0>)
 801cffa:	781b      	ldrb	r3, [r3, #0]
 801cffc:	f003 0310 	and.w	r3, r3, #16
 801d000:	2b00      	cmp	r3, #0
 801d002:	f000 80c1 	beq.w	801d188 <tcp_process+0x7b0>
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d00a:	4b68      	ldr	r3, [pc, #416]	@ (801d1ac <tcp_process+0x7d4>)
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	429a      	cmp	r2, r3
 801d010:	f040 80ba 	bne.w	801d188 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d018:	2b00      	cmp	r3, #0
 801d01a:	f040 80b5 	bne.w	801d188 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	2206      	movs	r2, #6
 801d022:	751a      	strb	r2, [r3, #20]
      break;
 801d024:	e0b0      	b.n	801d188 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	f000 f9ca 	bl	801d3c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d02c:	4b60      	ldr	r3, [pc, #384]	@ (801d1b0 <tcp_process+0x7d8>)
 801d02e:	781b      	ldrb	r3, [r3, #0]
 801d030:	f003 0320 	and.w	r3, r3, #32
 801d034:	2b00      	cmp	r3, #0
 801d036:	f000 80a9 	beq.w	801d18c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	8b5b      	ldrh	r3, [r3, #26]
 801d03e:	f043 0302 	orr.w	r3, r3, #2
 801d042:	b29a      	uxth	r2, r3
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d048:	6878      	ldr	r0, [r7, #4]
 801d04a:	f7fe fd37 	bl	801babc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d04e:	4b59      	ldr	r3, [pc, #356]	@ (801d1b4 <tcp_process+0x7dc>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	687a      	ldr	r2, [r7, #4]
 801d054:	429a      	cmp	r2, r3
 801d056:	d105      	bne.n	801d064 <tcp_process+0x68c>
 801d058:	4b56      	ldr	r3, [pc, #344]	@ (801d1b4 <tcp_process+0x7dc>)
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	68db      	ldr	r3, [r3, #12]
 801d05e:	4a55      	ldr	r2, [pc, #340]	@ (801d1b4 <tcp_process+0x7dc>)
 801d060:	6013      	str	r3, [r2, #0]
 801d062:	e013      	b.n	801d08c <tcp_process+0x6b4>
 801d064:	4b53      	ldr	r3, [pc, #332]	@ (801d1b4 <tcp_process+0x7dc>)
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	613b      	str	r3, [r7, #16]
 801d06a:	e00c      	b.n	801d086 <tcp_process+0x6ae>
 801d06c:	693b      	ldr	r3, [r7, #16]
 801d06e:	68db      	ldr	r3, [r3, #12]
 801d070:	687a      	ldr	r2, [r7, #4]
 801d072:	429a      	cmp	r2, r3
 801d074:	d104      	bne.n	801d080 <tcp_process+0x6a8>
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	68da      	ldr	r2, [r3, #12]
 801d07a:	693b      	ldr	r3, [r7, #16]
 801d07c:	60da      	str	r2, [r3, #12]
 801d07e:	e005      	b.n	801d08c <tcp_process+0x6b4>
 801d080:	693b      	ldr	r3, [r7, #16]
 801d082:	68db      	ldr	r3, [r3, #12]
 801d084:	613b      	str	r3, [r7, #16]
 801d086:	693b      	ldr	r3, [r7, #16]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d1ef      	bne.n	801d06c <tcp_process+0x694>
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	2200      	movs	r2, #0
 801d090:	60da      	str	r2, [r3, #12]
 801d092:	4b43      	ldr	r3, [pc, #268]	@ (801d1a0 <tcp_process+0x7c8>)
 801d094:	2201      	movs	r2, #1
 801d096:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	220a      	movs	r2, #10
 801d09c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d09e:	4b41      	ldr	r3, [pc, #260]	@ (801d1a4 <tcp_process+0x7cc>)
 801d0a0:	681a      	ldr	r2, [r3, #0]
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	60da      	str	r2, [r3, #12]
 801d0a6:	4a3f      	ldr	r2, [pc, #252]	@ (801d1a4 <tcp_process+0x7cc>)
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	6013      	str	r3, [r2, #0]
 801d0ac:	f003 fa98 	bl	80205e0 <tcp_timer_needed>
      }
      break;
 801d0b0:	e06c      	b.n	801d18c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f000 f984 	bl	801d3c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d0b8:	4b3b      	ldr	r3, [pc, #236]	@ (801d1a8 <tcp_process+0x7d0>)
 801d0ba:	781b      	ldrb	r3, [r3, #0]
 801d0bc:	f003 0310 	and.w	r3, r3, #16
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d065      	beq.n	801d190 <tcp_process+0x7b8>
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d0c8:	4b38      	ldr	r3, [pc, #224]	@ (801d1ac <tcp_process+0x7d4>)
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	429a      	cmp	r2, r3
 801d0ce:	d15f      	bne.n	801d190 <tcp_process+0x7b8>
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d15b      	bne.n	801d190 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d0d8:	6878      	ldr	r0, [r7, #4]
 801d0da:	f7fe fcef 	bl	801babc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d0de:	4b35      	ldr	r3, [pc, #212]	@ (801d1b4 <tcp_process+0x7dc>)
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	687a      	ldr	r2, [r7, #4]
 801d0e4:	429a      	cmp	r2, r3
 801d0e6:	d105      	bne.n	801d0f4 <tcp_process+0x71c>
 801d0e8:	4b32      	ldr	r3, [pc, #200]	@ (801d1b4 <tcp_process+0x7dc>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	4a31      	ldr	r2, [pc, #196]	@ (801d1b4 <tcp_process+0x7dc>)
 801d0f0:	6013      	str	r3, [r2, #0]
 801d0f2:	e013      	b.n	801d11c <tcp_process+0x744>
 801d0f4:	4b2f      	ldr	r3, [pc, #188]	@ (801d1b4 <tcp_process+0x7dc>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	60fb      	str	r3, [r7, #12]
 801d0fa:	e00c      	b.n	801d116 <tcp_process+0x73e>
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	68db      	ldr	r3, [r3, #12]
 801d100:	687a      	ldr	r2, [r7, #4]
 801d102:	429a      	cmp	r2, r3
 801d104:	d104      	bne.n	801d110 <tcp_process+0x738>
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	68da      	ldr	r2, [r3, #12]
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	60da      	str	r2, [r3, #12]
 801d10e:	e005      	b.n	801d11c <tcp_process+0x744>
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	68db      	ldr	r3, [r3, #12]
 801d114:	60fb      	str	r3, [r7, #12]
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d1ef      	bne.n	801d0fc <tcp_process+0x724>
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	2200      	movs	r2, #0
 801d120:	60da      	str	r2, [r3, #12]
 801d122:	4b1f      	ldr	r3, [pc, #124]	@ (801d1a0 <tcp_process+0x7c8>)
 801d124:	2201      	movs	r2, #1
 801d126:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	220a      	movs	r2, #10
 801d12c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d12e:	4b1d      	ldr	r3, [pc, #116]	@ (801d1a4 <tcp_process+0x7cc>)
 801d130:	681a      	ldr	r2, [r3, #0]
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	60da      	str	r2, [r3, #12]
 801d136:	4a1b      	ldr	r2, [pc, #108]	@ (801d1a4 <tcp_process+0x7cc>)
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	6013      	str	r3, [r2, #0]
 801d13c:	f003 fa50 	bl	80205e0 <tcp_timer_needed>
      }
      break;
 801d140:	e026      	b.n	801d190 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d142:	6878      	ldr	r0, [r7, #4]
 801d144:	f000 f93c 	bl	801d3c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d148:	4b17      	ldr	r3, [pc, #92]	@ (801d1a8 <tcp_process+0x7d0>)
 801d14a:	781b      	ldrb	r3, [r3, #0]
 801d14c:	f003 0310 	and.w	r3, r3, #16
 801d150:	2b00      	cmp	r3, #0
 801d152:	d01f      	beq.n	801d194 <tcp_process+0x7bc>
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d158:	4b14      	ldr	r3, [pc, #80]	@ (801d1ac <tcp_process+0x7d4>)
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	429a      	cmp	r2, r3
 801d15e:	d119      	bne.n	801d194 <tcp_process+0x7bc>
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d164:	2b00      	cmp	r3, #0
 801d166:	d115      	bne.n	801d194 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d168:	4b11      	ldr	r3, [pc, #68]	@ (801d1b0 <tcp_process+0x7d8>)
 801d16a:	781b      	ldrb	r3, [r3, #0]
 801d16c:	f043 0310 	orr.w	r3, r3, #16
 801d170:	b2da      	uxtb	r2, r3
 801d172:	4b0f      	ldr	r3, [pc, #60]	@ (801d1b0 <tcp_process+0x7d8>)
 801d174:	701a      	strb	r2, [r3, #0]
      }
      break;
 801d176:	e00d      	b.n	801d194 <tcp_process+0x7bc>
    default:
      break;
 801d178:	bf00      	nop
 801d17a:	e00c      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d17c:	bf00      	nop
 801d17e:	e00a      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d180:	bf00      	nop
 801d182:	e008      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d184:	bf00      	nop
 801d186:	e006      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d188:	bf00      	nop
 801d18a:	e004      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d18c:	bf00      	nop
 801d18e:	e002      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d190:	bf00      	nop
 801d192:	e000      	b.n	801d196 <tcp_process+0x7be>
      break;
 801d194:	bf00      	nop
  }
  return ERR_OK;
 801d196:	2300      	movs	r3, #0
}
 801d198:	4618      	mov	r0, r3
 801d19a:	3724      	adds	r7, #36	@ 0x24
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bd90      	pop	{r4, r7, pc}
 801d1a0:	240126b0 	.word	0x240126b0
 801d1a4:	240126ac 	.word	0x240126ac
 801d1a8:	240126e0 	.word	0x240126e0
 801d1ac:	240126d8 	.word	0x240126d8
 801d1b0:	240126e1 	.word	0x240126e1
 801d1b4:	240126a8 	.word	0x240126a8

0801d1b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801d1b8:	b590      	push	{r4, r7, lr}
 801d1ba:	b085      	sub	sp, #20
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
 801d1c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d106      	bne.n	801d1d6 <tcp_oos_insert_segment+0x1e>
 801d1c8:	4b3b      	ldr	r3, [pc, #236]	@ (801d2b8 <tcp_oos_insert_segment+0x100>)
 801d1ca:	f240 421f 	movw	r2, #1055	@ 0x41f
 801d1ce:	493b      	ldr	r1, [pc, #236]	@ (801d2bc <tcp_oos_insert_segment+0x104>)
 801d1d0:	483b      	ldr	r0, [pc, #236]	@ (801d2c0 <tcp_oos_insert_segment+0x108>)
 801d1d2:	f004 fdeb 	bl	8021dac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	68db      	ldr	r3, [r3, #12]
 801d1da:	899b      	ldrh	r3, [r3, #12]
 801d1dc:	b29b      	uxth	r3, r3
 801d1de:	4618      	mov	r0, r3
 801d1e0:	f7f6 fdf4 	bl	8013dcc <lwip_htons>
 801d1e4:	4603      	mov	r3, r0
 801d1e6:	b2db      	uxtb	r3, r3
 801d1e8:	f003 0301 	and.w	r3, r3, #1
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d028      	beq.n	801d242 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801d1f0:	6838      	ldr	r0, [r7, #0]
 801d1f2:	f7fe f9a1 	bl	801b538 <tcp_segs_free>
    next = NULL;
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	603b      	str	r3, [r7, #0]
 801d1fa:	e056      	b.n	801d2aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d1fc:	683b      	ldr	r3, [r7, #0]
 801d1fe:	68db      	ldr	r3, [r3, #12]
 801d200:	899b      	ldrh	r3, [r3, #12]
 801d202:	b29b      	uxth	r3, r3
 801d204:	4618      	mov	r0, r3
 801d206:	f7f6 fde1 	bl	8013dcc <lwip_htons>
 801d20a:	4603      	mov	r3, r0
 801d20c:	b2db      	uxtb	r3, r3
 801d20e:	f003 0301 	and.w	r3, r3, #1
 801d212:	2b00      	cmp	r3, #0
 801d214:	d00d      	beq.n	801d232 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	68db      	ldr	r3, [r3, #12]
 801d21a:	899b      	ldrh	r3, [r3, #12]
 801d21c:	b29c      	uxth	r4, r3
 801d21e:	2001      	movs	r0, #1
 801d220:	f7f6 fdd4 	bl	8013dcc <lwip_htons>
 801d224:	4603      	mov	r3, r0
 801d226:	461a      	mov	r2, r3
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	68db      	ldr	r3, [r3, #12]
 801d22c:	4322      	orrs	r2, r4
 801d22e:	b292      	uxth	r2, r2
 801d230:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801d232:	683b      	ldr	r3, [r7, #0]
 801d234:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801d236:	683b      	ldr	r3, [r7, #0]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801d23c:	68f8      	ldr	r0, [r7, #12]
 801d23e:	f7fe f990 	bl	801b562 <tcp_seg_free>
    while (next &&
 801d242:	683b      	ldr	r3, [r7, #0]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d00e      	beq.n	801d266 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	891b      	ldrh	r3, [r3, #8]
 801d24c:	461a      	mov	r2, r3
 801d24e:	4b1d      	ldr	r3, [pc, #116]	@ (801d2c4 <tcp_oos_insert_segment+0x10c>)
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	441a      	add	r2, r3
 801d254:	683b      	ldr	r3, [r7, #0]
 801d256:	68db      	ldr	r3, [r3, #12]
 801d258:	685b      	ldr	r3, [r3, #4]
 801d25a:	6839      	ldr	r1, [r7, #0]
 801d25c:	8909      	ldrh	r1, [r1, #8]
 801d25e:	440b      	add	r3, r1
 801d260:	1ad3      	subs	r3, r2, r3
    while (next &&
 801d262:	2b00      	cmp	r3, #0
 801d264:	daca      	bge.n	801d1fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801d266:	683b      	ldr	r3, [r7, #0]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d01e      	beq.n	801d2aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	891b      	ldrh	r3, [r3, #8]
 801d270:	461a      	mov	r2, r3
 801d272:	4b14      	ldr	r3, [pc, #80]	@ (801d2c4 <tcp_oos_insert_segment+0x10c>)
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	441a      	add	r2, r3
 801d278:	683b      	ldr	r3, [r7, #0]
 801d27a:	68db      	ldr	r3, [r3, #12]
 801d27c:	685b      	ldr	r3, [r3, #4]
 801d27e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801d280:	2b00      	cmp	r3, #0
 801d282:	dd12      	ble.n	801d2aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801d284:	683b      	ldr	r3, [r7, #0]
 801d286:	68db      	ldr	r3, [r3, #12]
 801d288:	685b      	ldr	r3, [r3, #4]
 801d28a:	b29a      	uxth	r2, r3
 801d28c:	4b0d      	ldr	r3, [pc, #52]	@ (801d2c4 <tcp_oos_insert_segment+0x10c>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	b29b      	uxth	r3, r3
 801d292:	1ad3      	subs	r3, r2, r3
 801d294:	b29a      	uxth	r2, r3
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	685a      	ldr	r2, [r3, #4]
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	891b      	ldrh	r3, [r3, #8]
 801d2a2:	4619      	mov	r1, r3
 801d2a4:	4610      	mov	r0, r2
 801d2a6:	f7fc f9f1 	bl	801968c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	683a      	ldr	r2, [r7, #0]
 801d2ae:	601a      	str	r2, [r3, #0]
}
 801d2b0:	bf00      	nop
 801d2b2:	3714      	adds	r7, #20
 801d2b4:	46bd      	mov	sp, r7
 801d2b6:	bd90      	pop	{r4, r7, pc}
 801d2b8:	08027720 	.word	0x08027720
 801d2bc:	08027a0c 	.word	0x08027a0c
 801d2c0:	08027798 	.word	0x08027798
 801d2c4:	240126d4 	.word	0x240126d4

0801d2c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801d2c8:	b5b0      	push	{r4, r5, r7, lr}
 801d2ca:	b086      	sub	sp, #24
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	60f8      	str	r0, [r7, #12]
 801d2d0:	60b9      	str	r1, [r7, #8]
 801d2d2:	607a      	str	r2, [r7, #4]
 801d2d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801d2d6:	e03e      	b.n	801d356 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801d2d8:	68bb      	ldr	r3, [r7, #8]
 801d2da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801d2dc:	68bb      	ldr	r3, [r7, #8]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801d2e2:	697b      	ldr	r3, [r7, #20]
 801d2e4:	685b      	ldr	r3, [r3, #4]
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f7fc fbe2 	bl	8019ab0 <pbuf_clen>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d2f6:	8a7a      	ldrh	r2, [r7, #18]
 801d2f8:	429a      	cmp	r2, r3
 801d2fa:	d906      	bls.n	801d30a <tcp_free_acked_segments+0x42>
 801d2fc:	4b2a      	ldr	r3, [pc, #168]	@ (801d3a8 <tcp_free_acked_segments+0xe0>)
 801d2fe:	f240 4257 	movw	r2, #1111	@ 0x457
 801d302:	492a      	ldr	r1, [pc, #168]	@ (801d3ac <tcp_free_acked_segments+0xe4>)
 801d304:	482a      	ldr	r0, [pc, #168]	@ (801d3b0 <tcp_free_acked_segments+0xe8>)
 801d306:	f004 fd51 	bl	8021dac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801d310:	8a7b      	ldrh	r3, [r7, #18]
 801d312:	1ad3      	subs	r3, r2, r3
 801d314:	b29a      	uxth	r2, r3
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801d31c:	697b      	ldr	r3, [r7, #20]
 801d31e:	891a      	ldrh	r2, [r3, #8]
 801d320:	4b24      	ldr	r3, [pc, #144]	@ (801d3b4 <tcp_free_acked_segments+0xec>)
 801d322:	881b      	ldrh	r3, [r3, #0]
 801d324:	4413      	add	r3, r2
 801d326:	b29a      	uxth	r2, r3
 801d328:	4b22      	ldr	r3, [pc, #136]	@ (801d3b4 <tcp_free_acked_segments+0xec>)
 801d32a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801d32c:	6978      	ldr	r0, [r7, #20]
 801d32e:	f7fe f918 	bl	801b562 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d00c      	beq.n	801d356 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801d33c:	68bb      	ldr	r3, [r7, #8]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d109      	bne.n	801d356 <tcp_free_acked_segments+0x8e>
 801d342:	683b      	ldr	r3, [r7, #0]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d106      	bne.n	801d356 <tcp_free_acked_segments+0x8e>
 801d348:	4b17      	ldr	r3, [pc, #92]	@ (801d3a8 <tcp_free_acked_segments+0xe0>)
 801d34a:	f240 4261 	movw	r2, #1121	@ 0x461
 801d34e:	491a      	ldr	r1, [pc, #104]	@ (801d3b8 <tcp_free_acked_segments+0xf0>)
 801d350:	4817      	ldr	r0, [pc, #92]	@ (801d3b0 <tcp_free_acked_segments+0xe8>)
 801d352:	f004 fd2b 	bl	8021dac <iprintf>
  while (seg_list != NULL &&
 801d356:	68bb      	ldr	r3, [r7, #8]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d020      	beq.n	801d39e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801d35c:	68bb      	ldr	r3, [r7, #8]
 801d35e:	68db      	ldr	r3, [r3, #12]
 801d360:	685b      	ldr	r3, [r3, #4]
 801d362:	4618      	mov	r0, r3
 801d364:	f7f6 fd47 	bl	8013df6 <lwip_htonl>
 801d368:	4604      	mov	r4, r0
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	891b      	ldrh	r3, [r3, #8]
 801d36e:	461d      	mov	r5, r3
 801d370:	68bb      	ldr	r3, [r7, #8]
 801d372:	68db      	ldr	r3, [r3, #12]
 801d374:	899b      	ldrh	r3, [r3, #12]
 801d376:	b29b      	uxth	r3, r3
 801d378:	4618      	mov	r0, r3
 801d37a:	f7f6 fd27 	bl	8013dcc <lwip_htons>
 801d37e:	4603      	mov	r3, r0
 801d380:	b2db      	uxtb	r3, r3
 801d382:	f003 0303 	and.w	r3, r3, #3
 801d386:	2b00      	cmp	r3, #0
 801d388:	d001      	beq.n	801d38e <tcp_free_acked_segments+0xc6>
 801d38a:	2301      	movs	r3, #1
 801d38c:	e000      	b.n	801d390 <tcp_free_acked_segments+0xc8>
 801d38e:	2300      	movs	r3, #0
 801d390:	442b      	add	r3, r5
 801d392:	18e2      	adds	r2, r4, r3
 801d394:	4b09      	ldr	r3, [pc, #36]	@ (801d3bc <tcp_free_acked_segments+0xf4>)
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	dd9c      	ble.n	801d2d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801d39e:	68bb      	ldr	r3, [r7, #8]
}
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	3718      	adds	r7, #24
 801d3a4:	46bd      	mov	sp, r7
 801d3a6:	bdb0      	pop	{r4, r5, r7, pc}
 801d3a8:	08027720 	.word	0x08027720
 801d3ac:	08027a34 	.word	0x08027a34
 801d3b0:	08027798 	.word	0x08027798
 801d3b4:	240126dc 	.word	0x240126dc
 801d3b8:	08027a5c 	.word	0x08027a5c
 801d3bc:	240126d8 	.word	0x240126d8

0801d3c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801d3c0:	b5b0      	push	{r4, r5, r7, lr}
 801d3c2:	b094      	sub	sp, #80	@ 0x50
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d106      	bne.n	801d3e0 <tcp_receive+0x20>
 801d3d2:	4b91      	ldr	r3, [pc, #580]	@ (801d618 <tcp_receive+0x258>)
 801d3d4:	f240 427b 	movw	r2, #1147	@ 0x47b
 801d3d8:	4990      	ldr	r1, [pc, #576]	@ (801d61c <tcp_receive+0x25c>)
 801d3da:	4891      	ldr	r0, [pc, #580]	@ (801d620 <tcp_receive+0x260>)
 801d3dc:	f004 fce6 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	7d1b      	ldrb	r3, [r3, #20]
 801d3e4:	2b03      	cmp	r3, #3
 801d3e6:	d806      	bhi.n	801d3f6 <tcp_receive+0x36>
 801d3e8:	4b8b      	ldr	r3, [pc, #556]	@ (801d618 <tcp_receive+0x258>)
 801d3ea:	f240 427c 	movw	r2, #1148	@ 0x47c
 801d3ee:	498d      	ldr	r1, [pc, #564]	@ (801d624 <tcp_receive+0x264>)
 801d3f0:	488b      	ldr	r0, [pc, #556]	@ (801d620 <tcp_receive+0x260>)
 801d3f2:	f004 fcdb 	bl	8021dac <iprintf>

  if (flags & TCP_ACK) {
 801d3f6:	4b8c      	ldr	r3, [pc, #560]	@ (801d628 <tcp_receive+0x268>)
 801d3f8:	781b      	ldrb	r3, [r3, #0]
 801d3fa:	f003 0310 	and.w	r3, r3, #16
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	f000 8264 	beq.w	801d8cc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d40a:	461a      	mov	r2, r3
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d410:	4413      	add	r3, r2
 801d412:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d418:	4b84      	ldr	r3, [pc, #528]	@ (801d62c <tcp_receive+0x26c>)
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	1ad3      	subs	r3, r2, r3
 801d41e:	2b00      	cmp	r3, #0
 801d420:	db1b      	blt.n	801d45a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801d426:	4b81      	ldr	r3, [pc, #516]	@ (801d62c <tcp_receive+0x26c>)
 801d428:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d42a:	429a      	cmp	r2, r3
 801d42c:	d106      	bne.n	801d43c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801d432:	4b7f      	ldr	r3, [pc, #508]	@ (801d630 <tcp_receive+0x270>)
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	1ad3      	subs	r3, r2, r3
 801d438:	2b00      	cmp	r3, #0
 801d43a:	db0e      	blt.n	801d45a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801d440:	4b7b      	ldr	r3, [pc, #492]	@ (801d630 <tcp_receive+0x270>)
 801d442:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d444:	429a      	cmp	r2, r3
 801d446:	d125      	bne.n	801d494 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d448:	4b7a      	ldr	r3, [pc, #488]	@ (801d634 <tcp_receive+0x274>)
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	89db      	ldrh	r3, [r3, #14]
 801d44e:	b29a      	uxth	r2, r3
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d456:	429a      	cmp	r2, r3
 801d458:	d91c      	bls.n	801d494 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801d45a:	4b76      	ldr	r3, [pc, #472]	@ (801d634 <tcp_receive+0x274>)
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	89db      	ldrh	r3, [r3, #14]
 801d460:	b29a      	uxth	r2, r3
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d474:	429a      	cmp	r2, r3
 801d476:	d205      	bcs.n	801d484 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801d484:	4b69      	ldr	r3, [pc, #420]	@ (801d62c <tcp_receive+0x26c>)
 801d486:	681a      	ldr	r2, [r3, #0]
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801d48c:	4b68      	ldr	r3, [pc, #416]	@ (801d630 <tcp_receive+0x270>)
 801d48e:	681a      	ldr	r2, [r3, #0]
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801d494:	4b66      	ldr	r3, [pc, #408]	@ (801d630 <tcp_receive+0x270>)
 801d496:	681a      	ldr	r2, [r3, #0]
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d49c:	1ad3      	subs	r3, r2, r3
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	dc58      	bgt.n	801d554 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801d4a2:	4b65      	ldr	r3, [pc, #404]	@ (801d638 <tcp_receive+0x278>)
 801d4a4:	881b      	ldrh	r3, [r3, #0]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d14b      	bne.n	801d542 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d4ae:	687a      	ldr	r2, [r7, #4]
 801d4b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801d4b4:	4413      	add	r3, r2
 801d4b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	d142      	bne.n	801d542 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	db3d      	blt.n	801d542 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d4ca:	4b59      	ldr	r3, [pc, #356]	@ (801d630 <tcp_receive+0x270>)
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	429a      	cmp	r2, r3
 801d4d0:	d137      	bne.n	801d542 <tcp_receive+0x182>
              found_dupack = 1;
 801d4d2:	2301      	movs	r3, #1
 801d4d4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801d4dc:	2bff      	cmp	r3, #255	@ 0xff
 801d4de:	d007      	beq.n	801d4f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801d4e6:	3301      	adds	r3, #1
 801d4e8:	b2da      	uxtb	r2, r3
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801d4f6:	2b03      	cmp	r3, #3
 801d4f8:	d91b      	bls.n	801d532 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d504:	4413      	add	r3, r2
 801d506:	b29a      	uxth	r2, r3
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d50e:	429a      	cmp	r2, r3
 801d510:	d30a      	bcc.n	801d528 <tcp_receive+0x168>
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d51c:	4413      	add	r3, r2
 801d51e:	b29a      	uxth	r2, r3
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801d526:	e004      	b.n	801d532 <tcp_receive+0x172>
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d52e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801d538:	2b02      	cmp	r3, #2
 801d53a:	d902      	bls.n	801d542 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801d53c:	6878      	ldr	r0, [r7, #4]
 801d53e:	f002 fb43 	bl	801fbc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801d542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d544:	2b00      	cmp	r3, #0
 801d546:	f040 8161 	bne.w	801d80c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	2200      	movs	r2, #0
 801d54e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801d552:	e15b      	b.n	801d80c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d554:	4b36      	ldr	r3, [pc, #216]	@ (801d630 <tcp_receive+0x270>)
 801d556:	681a      	ldr	r2, [r3, #0]
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d55c:	1ad3      	subs	r3, r2, r3
 801d55e:	3b01      	subs	r3, #1
 801d560:	2b00      	cmp	r3, #0
 801d562:	f2c0 814e 	blt.w	801d802 <tcp_receive+0x442>
 801d566:	4b32      	ldr	r3, [pc, #200]	@ (801d630 <tcp_receive+0x270>)
 801d568:	681a      	ldr	r2, [r3, #0]
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d56e:	1ad3      	subs	r3, r2, r3
 801d570:	2b00      	cmp	r3, #0
 801d572:	f300 8146 	bgt.w	801d802 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	8b5b      	ldrh	r3, [r3, #26]
 801d57a:	f003 0304 	and.w	r3, r3, #4
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d010      	beq.n	801d5a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	8b5b      	ldrh	r3, [r3, #26]
 801d586:	f023 0304 	bic.w	r3, r3, #4
 801d58a:	b29a      	uxth	r2, r3
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	2200      	movs	r2, #0
 801d5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	2200      	movs	r2, #0
 801d5a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801d5b2:	10db      	asrs	r3, r3, #3
 801d5b4:	b21b      	sxth	r3, r3
 801d5b6:	b29a      	uxth	r2, r3
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801d5be:	b29b      	uxth	r3, r3
 801d5c0:	4413      	add	r3, r2
 801d5c2:	b29b      	uxth	r3, r3
 801d5c4:	b21a      	sxth	r2, r3
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801d5cc:	4b18      	ldr	r3, [pc, #96]	@ (801d630 <tcp_receive+0x270>)
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	b29a      	uxth	r2, r3
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	1ad3      	subs	r3, r2, r3
 801d5da:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	2200      	movs	r2, #0
 801d5e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801d5e4:	4b12      	ldr	r3, [pc, #72]	@ (801d630 <tcp_receive+0x270>)
 801d5e6:	681a      	ldr	r2, [r3, #0]
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	7d1b      	ldrb	r3, [r3, #20]
 801d5f0:	2b03      	cmp	r3, #3
 801d5f2:	f240 8097 	bls.w	801d724 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d602:	429a      	cmp	r2, r3
 801d604:	d245      	bcs.n	801d692 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	8b5b      	ldrh	r3, [r3, #26]
 801d60a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d014      	beq.n	801d63c <tcp_receive+0x27c>
 801d612:	2301      	movs	r3, #1
 801d614:	e013      	b.n	801d63e <tcp_receive+0x27e>
 801d616:	bf00      	nop
 801d618:	08027720 	.word	0x08027720
 801d61c:	08027a7c 	.word	0x08027a7c
 801d620:	08027798 	.word	0x08027798
 801d624:	08027a98 	.word	0x08027a98
 801d628:	240126e0 	.word	0x240126e0
 801d62c:	240126d4 	.word	0x240126d4
 801d630:	240126d8 	.word	0x240126d8
 801d634:	240126c4 	.word	0x240126c4
 801d638:	240126de 	.word	0x240126de
 801d63c:	2302      	movs	r3, #2
 801d63e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d642:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801d646:	b29a      	uxth	r2, r3
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d64c:	fb12 f303 	smulbb	r3, r2, r3
 801d650:	b29b      	uxth	r3, r3
 801d652:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d654:	4293      	cmp	r3, r2
 801d656:	bf28      	it	cs
 801d658:	4613      	movcs	r3, r2
 801d65a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d662:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d664:	4413      	add	r3, r2
 801d666:	b29a      	uxth	r2, r3
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d66e:	429a      	cmp	r2, r3
 801d670:	d309      	bcc.n	801d686 <tcp_receive+0x2c6>
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d678:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d67a:	4413      	add	r3, r2
 801d67c:	b29a      	uxth	r2, r3
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801d684:	e04e      	b.n	801d724 <tcp_receive+0x364>
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d68c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801d690:	e048      	b.n	801d724 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801d698:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d69a:	4413      	add	r3, r2
 801d69c:	b29a      	uxth	r2, r3
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801d6a4:	429a      	cmp	r2, r3
 801d6a6:	d309      	bcc.n	801d6bc <tcp_receive+0x2fc>
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801d6ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d6b0:	4413      	add	r3, r2
 801d6b2:	b29a      	uxth	r2, r3
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801d6ba:	e004      	b.n	801d6c6 <tcp_receive+0x306>
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d6c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d6d2:	429a      	cmp	r2, r3
 801d6d4:	d326      	bcc.n	801d724 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d6e2:	1ad3      	subs	r3, r2, r3
 801d6e4:	b29a      	uxth	r2, r3
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d6f6:	4413      	add	r3, r2
 801d6f8:	b29a      	uxth	r2, r3
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d700:	429a      	cmp	r2, r3
 801d702:	d30a      	bcc.n	801d71a <tcp_receive+0x35a>
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d70e:	4413      	add	r3, r2
 801d710:	b29a      	uxth	r2, r3
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801d718:	e004      	b.n	801d724 <tcp_receive+0x364>
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d720:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d72c:	4a98      	ldr	r2, [pc, #608]	@ (801d990 <tcp_receive+0x5d0>)
 801d72e:	6878      	ldr	r0, [r7, #4]
 801d730:	f7ff fdca 	bl	801d2c8 <tcp_free_acked_segments>
 801d734:	4602      	mov	r2, r0
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d742:	4a94      	ldr	r2, [pc, #592]	@ (801d994 <tcp_receive+0x5d4>)
 801d744:	6878      	ldr	r0, [r7, #4]
 801d746:	f7ff fdbf 	bl	801d2c8 <tcp_free_acked_segments>
 801d74a:	4602      	mov	r2, r0
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d754:	2b00      	cmp	r3, #0
 801d756:	d104      	bne.n	801d762 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d75e:	861a      	strh	r2, [r3, #48]	@ 0x30
 801d760:	e002      	b.n	801d768 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	2200      	movs	r2, #0
 801d766:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	2200      	movs	r2, #0
 801d76c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d772:	2b00      	cmp	r3, #0
 801d774:	d103      	bne.n	801d77e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	2200      	movs	r2, #0
 801d77a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801d784:	4b84      	ldr	r3, [pc, #528]	@ (801d998 <tcp_receive+0x5d8>)
 801d786:	881b      	ldrh	r3, [r3, #0]
 801d788:	4413      	add	r3, r2
 801d78a:	b29a      	uxth	r2, r3
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	8b5b      	ldrh	r3, [r3, #26]
 801d796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d035      	beq.n	801d80a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d118      	bne.n	801d7d8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d00c      	beq.n	801d7c8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d7b6:	68db      	ldr	r3, [r3, #12]
 801d7b8:	685b      	ldr	r3, [r3, #4]
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f7f6 fb1b 	bl	8013df6 <lwip_htonl>
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	dc20      	bgt.n	801d80a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	8b5b      	ldrh	r3, [r3, #26]
 801d7cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801d7d0:	b29a      	uxth	r2, r3
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d7d6:	e018      	b.n	801d80a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d7e0:	68db      	ldr	r3, [r3, #12]
 801d7e2:	685b      	ldr	r3, [r3, #4]
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	f7f6 fb06 	bl	8013df6 <lwip_htonl>
 801d7ea:	4603      	mov	r3, r0
 801d7ec:	1ae3      	subs	r3, r4, r3
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	dc0b      	bgt.n	801d80a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	8b5b      	ldrh	r3, [r3, #26]
 801d7f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801d7fa:	b29a      	uxth	r2, r3
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d800:	e003      	b.n	801d80a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801d802:	6878      	ldr	r0, [r7, #4]
 801d804:	f002 fbcc 	bl	801ffa0 <tcp_send_empty_ack>
 801d808:	e000      	b.n	801d80c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d80a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d810:	2b00      	cmp	r3, #0
 801d812:	d05b      	beq.n	801d8cc <tcp_receive+0x50c>
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d818:	4b60      	ldr	r3, [pc, #384]	@ (801d99c <tcp_receive+0x5dc>)
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	1ad3      	subs	r3, r2, r3
 801d81e:	2b00      	cmp	r3, #0
 801d820:	da54      	bge.n	801d8cc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d822:	4b5f      	ldr	r3, [pc, #380]	@ (801d9a0 <tcp_receive+0x5e0>)
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	b29a      	uxth	r2, r3
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	1ad3      	subs	r3, r2, r3
 801d830:	b29b      	uxth	r3, r3
 801d832:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801d836:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801d840:	10db      	asrs	r3, r3, #3
 801d842:	b21b      	sxth	r3, r3
 801d844:	b29b      	uxth	r3, r3
 801d846:	1ad3      	subs	r3, r2, r3
 801d848:	b29b      	uxth	r3, r3
 801d84a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801d854:	b29a      	uxth	r2, r3
 801d856:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801d85a:	4413      	add	r3, r2
 801d85c:	b29b      	uxth	r3, r3
 801d85e:	b21a      	sxth	r2, r3
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801d864:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801d868:	2b00      	cmp	r3, #0
 801d86a:	da05      	bge.n	801d878 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801d86c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801d870:	425b      	negs	r3, r3
 801d872:	b29b      	uxth	r3, r3
 801d874:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801d878:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801d882:	109b      	asrs	r3, r3, #2
 801d884:	b21b      	sxth	r3, r3
 801d886:	b29b      	uxth	r3, r3
 801d888:	1ad3      	subs	r3, r2, r3
 801d88a:	b29b      	uxth	r3, r3
 801d88c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801d896:	b29a      	uxth	r2, r3
 801d898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801d89c:	4413      	add	r3, r2
 801d89e:	b29b      	uxth	r3, r3
 801d8a0:	b21a      	sxth	r2, r3
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801d8ac:	10db      	asrs	r3, r3, #3
 801d8ae:	b21b      	sxth	r3, r3
 801d8b0:	b29a      	uxth	r2, r3
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801d8b8:	b29b      	uxth	r3, r3
 801d8ba:	4413      	add	r3, r2
 801d8bc:	b29b      	uxth	r3, r3
 801d8be:	b21a      	sxth	r2, r3
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d8cc:	4b35      	ldr	r3, [pc, #212]	@ (801d9a4 <tcp_receive+0x5e4>)
 801d8ce:	881b      	ldrh	r3, [r3, #0]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	f000 84df 	beq.w	801e294 <tcp_receive+0xed4>
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	7d1b      	ldrb	r3, [r3, #20]
 801d8da:	2b06      	cmp	r3, #6
 801d8dc:	f200 84da 	bhi.w	801e294 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d8e4:	4b30      	ldr	r3, [pc, #192]	@ (801d9a8 <tcp_receive+0x5e8>)
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	1ad3      	subs	r3, r2, r3
 801d8ea:	3b01      	subs	r3, #1
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	f2c0 808f 	blt.w	801da10 <tcp_receive+0x650>
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d8f6:	4b2b      	ldr	r3, [pc, #172]	@ (801d9a4 <tcp_receive+0x5e4>)
 801d8f8:	881b      	ldrh	r3, [r3, #0]
 801d8fa:	4619      	mov	r1, r3
 801d8fc:	4b2a      	ldr	r3, [pc, #168]	@ (801d9a8 <tcp_receive+0x5e8>)
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	440b      	add	r3, r1
 801d902:	1ad3      	subs	r3, r2, r3
 801d904:	3301      	adds	r3, #1
 801d906:	2b00      	cmp	r3, #0
 801d908:	f300 8082 	bgt.w	801da10 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801d90c:	4b27      	ldr	r3, [pc, #156]	@ (801d9ac <tcp_receive+0x5ec>)
 801d90e:	685b      	ldr	r3, [r3, #4]
 801d910:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d916:	4b24      	ldr	r3, [pc, #144]	@ (801d9a8 <tcp_receive+0x5e8>)
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	1ad3      	subs	r3, r2, r3
 801d91c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d91e:	4b23      	ldr	r3, [pc, #140]	@ (801d9ac <tcp_receive+0x5ec>)
 801d920:	685b      	ldr	r3, [r3, #4]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d106      	bne.n	801d934 <tcp_receive+0x574>
 801d926:	4b22      	ldr	r3, [pc, #136]	@ (801d9b0 <tcp_receive+0x5f0>)
 801d928:	f240 5294 	movw	r2, #1428	@ 0x594
 801d92c:	4921      	ldr	r1, [pc, #132]	@ (801d9b4 <tcp_receive+0x5f4>)
 801d92e:	4822      	ldr	r0, [pc, #136]	@ (801d9b8 <tcp_receive+0x5f8>)
 801d930:	f004 fa3c 	bl	8021dac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d936:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d93a:	4293      	cmp	r3, r2
 801d93c:	d906      	bls.n	801d94c <tcp_receive+0x58c>
 801d93e:	4b1c      	ldr	r3, [pc, #112]	@ (801d9b0 <tcp_receive+0x5f0>)
 801d940:	f240 5295 	movw	r2, #1429	@ 0x595
 801d944:	491d      	ldr	r1, [pc, #116]	@ (801d9bc <tcp_receive+0x5fc>)
 801d946:	481c      	ldr	r0, [pc, #112]	@ (801d9b8 <tcp_receive+0x5f8>)
 801d948:	f004 fa30 	bl	8021dac <iprintf>
      off = (u16_t)off32;
 801d94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d94e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d952:	4b16      	ldr	r3, [pc, #88]	@ (801d9ac <tcp_receive+0x5ec>)
 801d954:	685b      	ldr	r3, [r3, #4]
 801d956:	891b      	ldrh	r3, [r3, #8]
 801d958:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d95c:	429a      	cmp	r2, r3
 801d95e:	d906      	bls.n	801d96e <tcp_receive+0x5ae>
 801d960:	4b13      	ldr	r3, [pc, #76]	@ (801d9b0 <tcp_receive+0x5f0>)
 801d962:	f240 5297 	movw	r2, #1431	@ 0x597
 801d966:	4916      	ldr	r1, [pc, #88]	@ (801d9c0 <tcp_receive+0x600>)
 801d968:	4813      	ldr	r0, [pc, #76]	@ (801d9b8 <tcp_receive+0x5f8>)
 801d96a:	f004 fa1f 	bl	8021dac <iprintf>
      inseg.len -= off;
 801d96e:	4b0f      	ldr	r3, [pc, #60]	@ (801d9ac <tcp_receive+0x5ec>)
 801d970:	891a      	ldrh	r2, [r3, #8]
 801d972:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d976:	1ad3      	subs	r3, r2, r3
 801d978:	b29a      	uxth	r2, r3
 801d97a:	4b0c      	ldr	r3, [pc, #48]	@ (801d9ac <tcp_receive+0x5ec>)
 801d97c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d97e:	4b0b      	ldr	r3, [pc, #44]	@ (801d9ac <tcp_receive+0x5ec>)
 801d980:	685b      	ldr	r3, [r3, #4]
 801d982:	891a      	ldrh	r2, [r3, #8]
 801d984:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d988:	1ad3      	subs	r3, r2, r3
 801d98a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801d98c:	e02a      	b.n	801d9e4 <tcp_receive+0x624>
 801d98e:	bf00      	nop
 801d990:	08027ab4 	.word	0x08027ab4
 801d994:	08027abc 	.word	0x08027abc
 801d998:	240126dc 	.word	0x240126dc
 801d99c:	240126d8 	.word	0x240126d8
 801d9a0:	2401269c 	.word	0x2401269c
 801d9a4:	240126de 	.word	0x240126de
 801d9a8:	240126d4 	.word	0x240126d4
 801d9ac:	240126b4 	.word	0x240126b4
 801d9b0:	08027720 	.word	0x08027720
 801d9b4:	08027ac4 	.word	0x08027ac4
 801d9b8:	08027798 	.word	0x08027798
 801d9bc:	08027ad4 	.word	0x08027ad4
 801d9c0:	08027ae4 	.word	0x08027ae4
        off -= p->len;
 801d9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9c6:	895b      	ldrh	r3, [r3, #10]
 801d9c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d9cc:	1ad3      	subs	r3, r2, r3
 801d9ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801d9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d9d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801d9d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9da:	2200      	movs	r2, #0
 801d9dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801d9de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801d9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9e6:	895b      	ldrh	r3, [r3, #10]
 801d9e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d9ec:	429a      	cmp	r2, r3
 801d9ee:	d8e9      	bhi.n	801d9c4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801d9f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d9f4:	4619      	mov	r1, r3
 801d9f6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d9f8:	f7fb ff46 	bl	8019888 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da00:	4a90      	ldr	r2, [pc, #576]	@ (801dc44 <tcp_receive+0x884>)
 801da02:	6013      	str	r3, [r2, #0]
 801da04:	4b90      	ldr	r3, [pc, #576]	@ (801dc48 <tcp_receive+0x888>)
 801da06:	68db      	ldr	r3, [r3, #12]
 801da08:	4a8e      	ldr	r2, [pc, #568]	@ (801dc44 <tcp_receive+0x884>)
 801da0a:	6812      	ldr	r2, [r2, #0]
 801da0c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801da0e:	e00d      	b.n	801da2c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801da10:	4b8c      	ldr	r3, [pc, #560]	@ (801dc44 <tcp_receive+0x884>)
 801da12:	681a      	ldr	r2, [r3, #0]
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da18:	1ad3      	subs	r3, r2, r3
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	da06      	bge.n	801da2c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	8b5b      	ldrh	r3, [r3, #26]
 801da22:	f043 0302 	orr.w	r3, r3, #2
 801da26:	b29a      	uxth	r2, r3
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801da2c:	4b85      	ldr	r3, [pc, #532]	@ (801dc44 <tcp_receive+0x884>)
 801da2e:	681a      	ldr	r2, [r3, #0]
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da34:	1ad3      	subs	r3, r2, r3
 801da36:	2b00      	cmp	r3, #0
 801da38:	f2c0 8427 	blt.w	801e28a <tcp_receive+0xeca>
 801da3c:	4b81      	ldr	r3, [pc, #516]	@ (801dc44 <tcp_receive+0x884>)
 801da3e:	681a      	ldr	r2, [r3, #0]
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da44:	6879      	ldr	r1, [r7, #4]
 801da46:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801da48:	440b      	add	r3, r1
 801da4a:	1ad3      	subs	r3, r2, r3
 801da4c:	3301      	adds	r3, #1
 801da4e:	2b00      	cmp	r3, #0
 801da50:	f300 841b 	bgt.w	801e28a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801da58:	4b7a      	ldr	r3, [pc, #488]	@ (801dc44 <tcp_receive+0x884>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	429a      	cmp	r2, r3
 801da5e:	f040 8298 	bne.w	801df92 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801da62:	4b79      	ldr	r3, [pc, #484]	@ (801dc48 <tcp_receive+0x888>)
 801da64:	891c      	ldrh	r4, [r3, #8]
 801da66:	4b78      	ldr	r3, [pc, #480]	@ (801dc48 <tcp_receive+0x888>)
 801da68:	68db      	ldr	r3, [r3, #12]
 801da6a:	899b      	ldrh	r3, [r3, #12]
 801da6c:	b29b      	uxth	r3, r3
 801da6e:	4618      	mov	r0, r3
 801da70:	f7f6 f9ac 	bl	8013dcc <lwip_htons>
 801da74:	4603      	mov	r3, r0
 801da76:	b2db      	uxtb	r3, r3
 801da78:	f003 0303 	and.w	r3, r3, #3
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d001      	beq.n	801da84 <tcp_receive+0x6c4>
 801da80:	2301      	movs	r3, #1
 801da82:	e000      	b.n	801da86 <tcp_receive+0x6c6>
 801da84:	2300      	movs	r3, #0
 801da86:	4423      	add	r3, r4
 801da88:	b29a      	uxth	r2, r3
 801da8a:	4b70      	ldr	r3, [pc, #448]	@ (801dc4c <tcp_receive+0x88c>)
 801da8c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801da92:	4b6e      	ldr	r3, [pc, #440]	@ (801dc4c <tcp_receive+0x88c>)
 801da94:	881b      	ldrh	r3, [r3, #0]
 801da96:	429a      	cmp	r2, r3
 801da98:	d274      	bcs.n	801db84 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801da9a:	4b6b      	ldr	r3, [pc, #428]	@ (801dc48 <tcp_receive+0x888>)
 801da9c:	68db      	ldr	r3, [r3, #12]
 801da9e:	899b      	ldrh	r3, [r3, #12]
 801daa0:	b29b      	uxth	r3, r3
 801daa2:	4618      	mov	r0, r3
 801daa4:	f7f6 f992 	bl	8013dcc <lwip_htons>
 801daa8:	4603      	mov	r3, r0
 801daaa:	b2db      	uxtb	r3, r3
 801daac:	f003 0301 	and.w	r3, r3, #1
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d01e      	beq.n	801daf2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801dab4:	4b64      	ldr	r3, [pc, #400]	@ (801dc48 <tcp_receive+0x888>)
 801dab6:	68db      	ldr	r3, [r3, #12]
 801dab8:	899b      	ldrh	r3, [r3, #12]
 801daba:	b29b      	uxth	r3, r3
 801dabc:	b21b      	sxth	r3, r3
 801dabe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801dac2:	b21c      	sxth	r4, r3
 801dac4:	4b60      	ldr	r3, [pc, #384]	@ (801dc48 <tcp_receive+0x888>)
 801dac6:	68db      	ldr	r3, [r3, #12]
 801dac8:	899b      	ldrh	r3, [r3, #12]
 801daca:	b29b      	uxth	r3, r3
 801dacc:	4618      	mov	r0, r3
 801dace:	f7f6 f97d 	bl	8013dcc <lwip_htons>
 801dad2:	4603      	mov	r3, r0
 801dad4:	b2db      	uxtb	r3, r3
 801dad6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801dada:	b29b      	uxth	r3, r3
 801dadc:	4618      	mov	r0, r3
 801dade:	f7f6 f975 	bl	8013dcc <lwip_htons>
 801dae2:	4603      	mov	r3, r0
 801dae4:	b21b      	sxth	r3, r3
 801dae6:	4323      	orrs	r3, r4
 801dae8:	b21a      	sxth	r2, r3
 801daea:	4b57      	ldr	r3, [pc, #348]	@ (801dc48 <tcp_receive+0x888>)
 801daec:	68db      	ldr	r3, [r3, #12]
 801daee:	b292      	uxth	r2, r2
 801daf0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801daf6:	4b54      	ldr	r3, [pc, #336]	@ (801dc48 <tcp_receive+0x888>)
 801daf8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801dafa:	4b53      	ldr	r3, [pc, #332]	@ (801dc48 <tcp_receive+0x888>)
 801dafc:	68db      	ldr	r3, [r3, #12]
 801dafe:	899b      	ldrh	r3, [r3, #12]
 801db00:	b29b      	uxth	r3, r3
 801db02:	4618      	mov	r0, r3
 801db04:	f7f6 f962 	bl	8013dcc <lwip_htons>
 801db08:	4603      	mov	r3, r0
 801db0a:	b2db      	uxtb	r3, r3
 801db0c:	f003 0302 	and.w	r3, r3, #2
 801db10:	2b00      	cmp	r3, #0
 801db12:	d005      	beq.n	801db20 <tcp_receive+0x760>
            inseg.len -= 1;
 801db14:	4b4c      	ldr	r3, [pc, #304]	@ (801dc48 <tcp_receive+0x888>)
 801db16:	891b      	ldrh	r3, [r3, #8]
 801db18:	3b01      	subs	r3, #1
 801db1a:	b29a      	uxth	r2, r3
 801db1c:	4b4a      	ldr	r3, [pc, #296]	@ (801dc48 <tcp_receive+0x888>)
 801db1e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801db20:	4b49      	ldr	r3, [pc, #292]	@ (801dc48 <tcp_receive+0x888>)
 801db22:	685b      	ldr	r3, [r3, #4]
 801db24:	4a48      	ldr	r2, [pc, #288]	@ (801dc48 <tcp_receive+0x888>)
 801db26:	8912      	ldrh	r2, [r2, #8]
 801db28:	4611      	mov	r1, r2
 801db2a:	4618      	mov	r0, r3
 801db2c:	f7fb fdae 	bl	801968c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801db30:	4b45      	ldr	r3, [pc, #276]	@ (801dc48 <tcp_receive+0x888>)
 801db32:	891c      	ldrh	r4, [r3, #8]
 801db34:	4b44      	ldr	r3, [pc, #272]	@ (801dc48 <tcp_receive+0x888>)
 801db36:	68db      	ldr	r3, [r3, #12]
 801db38:	899b      	ldrh	r3, [r3, #12]
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7f6 f945 	bl	8013dcc <lwip_htons>
 801db42:	4603      	mov	r3, r0
 801db44:	b2db      	uxtb	r3, r3
 801db46:	f003 0303 	and.w	r3, r3, #3
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d001      	beq.n	801db52 <tcp_receive+0x792>
 801db4e:	2301      	movs	r3, #1
 801db50:	e000      	b.n	801db54 <tcp_receive+0x794>
 801db52:	2300      	movs	r3, #0
 801db54:	4423      	add	r3, r4
 801db56:	b29a      	uxth	r2, r3
 801db58:	4b3c      	ldr	r3, [pc, #240]	@ (801dc4c <tcp_receive+0x88c>)
 801db5a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801db5c:	4b3b      	ldr	r3, [pc, #236]	@ (801dc4c <tcp_receive+0x88c>)
 801db5e:	881b      	ldrh	r3, [r3, #0]
 801db60:	461a      	mov	r2, r3
 801db62:	4b38      	ldr	r3, [pc, #224]	@ (801dc44 <tcp_receive+0x884>)
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	441a      	add	r2, r3
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801db6c:	6879      	ldr	r1, [r7, #4]
 801db6e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801db70:	440b      	add	r3, r1
 801db72:	429a      	cmp	r2, r3
 801db74:	d006      	beq.n	801db84 <tcp_receive+0x7c4>
 801db76:	4b36      	ldr	r3, [pc, #216]	@ (801dc50 <tcp_receive+0x890>)
 801db78:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801db7c:	4935      	ldr	r1, [pc, #212]	@ (801dc54 <tcp_receive+0x894>)
 801db7e:	4836      	ldr	r0, [pc, #216]	@ (801dc58 <tcp_receive+0x898>)
 801db80:	f004 f914 	bl	8021dac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db88:	2b00      	cmp	r3, #0
 801db8a:	f000 80e6 	beq.w	801dd5a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801db8e:	4b2e      	ldr	r3, [pc, #184]	@ (801dc48 <tcp_receive+0x888>)
 801db90:	68db      	ldr	r3, [r3, #12]
 801db92:	899b      	ldrh	r3, [r3, #12]
 801db94:	b29b      	uxth	r3, r3
 801db96:	4618      	mov	r0, r3
 801db98:	f7f6 f918 	bl	8013dcc <lwip_htons>
 801db9c:	4603      	mov	r3, r0
 801db9e:	b2db      	uxtb	r3, r3
 801dba0:	f003 0301 	and.w	r3, r3, #1
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d010      	beq.n	801dbca <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801dba8:	e00a      	b.n	801dbc0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbae:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbb4:	681a      	ldr	r2, [r3, #0]
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801dbba:	68f8      	ldr	r0, [r7, #12]
 801dbbc:	f7fd fcd1 	bl	801b562 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d1f0      	bne.n	801dbaa <tcp_receive+0x7ea>
 801dbc8:	e0c7      	b.n	801dd5a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801dbd0:	e051      	b.n	801dc76 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801dbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dbd4:	68db      	ldr	r3, [r3, #12]
 801dbd6:	899b      	ldrh	r3, [r3, #12]
 801dbd8:	b29b      	uxth	r3, r3
 801dbda:	4618      	mov	r0, r3
 801dbdc:	f7f6 f8f6 	bl	8013dcc <lwip_htons>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	f003 0301 	and.w	r3, r3, #1
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d03c      	beq.n	801dc66 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801dbec:	4b16      	ldr	r3, [pc, #88]	@ (801dc48 <tcp_receive+0x888>)
 801dbee:	68db      	ldr	r3, [r3, #12]
 801dbf0:	899b      	ldrh	r3, [r3, #12]
 801dbf2:	b29b      	uxth	r3, r3
 801dbf4:	4618      	mov	r0, r3
 801dbf6:	f7f6 f8e9 	bl	8013dcc <lwip_htons>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	b2db      	uxtb	r3, r3
 801dbfe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d12f      	bne.n	801dc66 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801dc06:	4b10      	ldr	r3, [pc, #64]	@ (801dc48 <tcp_receive+0x888>)
 801dc08:	68db      	ldr	r3, [r3, #12]
 801dc0a:	899b      	ldrh	r3, [r3, #12]
 801dc0c:	b29c      	uxth	r4, r3
 801dc0e:	2001      	movs	r0, #1
 801dc10:	f7f6 f8dc 	bl	8013dcc <lwip_htons>
 801dc14:	4603      	mov	r3, r0
 801dc16:	461a      	mov	r2, r3
 801dc18:	4b0b      	ldr	r3, [pc, #44]	@ (801dc48 <tcp_receive+0x888>)
 801dc1a:	68db      	ldr	r3, [r3, #12]
 801dc1c:	4322      	orrs	r2, r4
 801dc1e:	b292      	uxth	r2, r2
 801dc20:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801dc22:	4b09      	ldr	r3, [pc, #36]	@ (801dc48 <tcp_receive+0x888>)
 801dc24:	891c      	ldrh	r4, [r3, #8]
 801dc26:	4b08      	ldr	r3, [pc, #32]	@ (801dc48 <tcp_receive+0x888>)
 801dc28:	68db      	ldr	r3, [r3, #12]
 801dc2a:	899b      	ldrh	r3, [r3, #12]
 801dc2c:	b29b      	uxth	r3, r3
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f7f6 f8cc 	bl	8013dcc <lwip_htons>
 801dc34:	4603      	mov	r3, r0
 801dc36:	b2db      	uxtb	r3, r3
 801dc38:	f003 0303 	and.w	r3, r3, #3
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d00d      	beq.n	801dc5c <tcp_receive+0x89c>
 801dc40:	2301      	movs	r3, #1
 801dc42:	e00c      	b.n	801dc5e <tcp_receive+0x89e>
 801dc44:	240126d4 	.word	0x240126d4
 801dc48:	240126b4 	.word	0x240126b4
 801dc4c:	240126de 	.word	0x240126de
 801dc50:	08027720 	.word	0x08027720
 801dc54:	08027af4 	.word	0x08027af4
 801dc58:	08027798 	.word	0x08027798
 801dc5c:	2300      	movs	r3, #0
 801dc5e:	4423      	add	r3, r4
 801dc60:	b29a      	uxth	r2, r3
 801dc62:	4b98      	ldr	r3, [pc, #608]	@ (801dec4 <tcp_receive+0xb04>)
 801dc64:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801dc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc68:	613b      	str	r3, [r7, #16]
              next = next->next;
 801dc6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801dc70:	6938      	ldr	r0, [r7, #16]
 801dc72:	f7fd fc76 	bl	801b562 <tcp_seg_free>
            while (next &&
 801dc76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d00e      	beq.n	801dc9a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801dc7c:	4b91      	ldr	r3, [pc, #580]	@ (801dec4 <tcp_receive+0xb04>)
 801dc7e:	881b      	ldrh	r3, [r3, #0]
 801dc80:	461a      	mov	r2, r3
 801dc82:	4b91      	ldr	r3, [pc, #580]	@ (801dec8 <tcp_receive+0xb08>)
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	441a      	add	r2, r3
 801dc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc8a:	68db      	ldr	r3, [r3, #12]
 801dc8c:	685b      	ldr	r3, [r3, #4]
 801dc8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801dc90:	8909      	ldrh	r1, [r1, #8]
 801dc92:	440b      	add	r3, r1
 801dc94:	1ad3      	subs	r3, r2, r3
            while (next &&
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	da9b      	bge.n	801dbd2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801dc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d059      	beq.n	801dd54 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801dca0:	4b88      	ldr	r3, [pc, #544]	@ (801dec4 <tcp_receive+0xb04>)
 801dca2:	881b      	ldrh	r3, [r3, #0]
 801dca4:	461a      	mov	r2, r3
 801dca6:	4b88      	ldr	r3, [pc, #544]	@ (801dec8 <tcp_receive+0xb08>)
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	441a      	add	r2, r3
 801dcac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dcae:	68db      	ldr	r3, [r3, #12]
 801dcb0:	685b      	ldr	r3, [r3, #4]
 801dcb2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	dd4d      	ble.n	801dd54 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801dcb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dcba:	68db      	ldr	r3, [r3, #12]
 801dcbc:	685b      	ldr	r3, [r3, #4]
 801dcbe:	b29a      	uxth	r2, r3
 801dcc0:	4b81      	ldr	r3, [pc, #516]	@ (801dec8 <tcp_receive+0xb08>)
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	b29b      	uxth	r3, r3
 801dcc6:	1ad3      	subs	r3, r2, r3
 801dcc8:	b29a      	uxth	r2, r3
 801dcca:	4b80      	ldr	r3, [pc, #512]	@ (801decc <tcp_receive+0xb0c>)
 801dccc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801dcce:	4b7f      	ldr	r3, [pc, #508]	@ (801decc <tcp_receive+0xb0c>)
 801dcd0:	68db      	ldr	r3, [r3, #12]
 801dcd2:	899b      	ldrh	r3, [r3, #12]
 801dcd4:	b29b      	uxth	r3, r3
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	f7f6 f878 	bl	8013dcc <lwip_htons>
 801dcdc:	4603      	mov	r3, r0
 801dcde:	b2db      	uxtb	r3, r3
 801dce0:	f003 0302 	and.w	r3, r3, #2
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d005      	beq.n	801dcf4 <tcp_receive+0x934>
                inseg.len -= 1;
 801dce8:	4b78      	ldr	r3, [pc, #480]	@ (801decc <tcp_receive+0xb0c>)
 801dcea:	891b      	ldrh	r3, [r3, #8]
 801dcec:	3b01      	subs	r3, #1
 801dcee:	b29a      	uxth	r2, r3
 801dcf0:	4b76      	ldr	r3, [pc, #472]	@ (801decc <tcp_receive+0xb0c>)
 801dcf2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801dcf4:	4b75      	ldr	r3, [pc, #468]	@ (801decc <tcp_receive+0xb0c>)
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	4a74      	ldr	r2, [pc, #464]	@ (801decc <tcp_receive+0xb0c>)
 801dcfa:	8912      	ldrh	r2, [r2, #8]
 801dcfc:	4611      	mov	r1, r2
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7fb fcc4 	bl	801968c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801dd04:	4b71      	ldr	r3, [pc, #452]	@ (801decc <tcp_receive+0xb0c>)
 801dd06:	891c      	ldrh	r4, [r3, #8]
 801dd08:	4b70      	ldr	r3, [pc, #448]	@ (801decc <tcp_receive+0xb0c>)
 801dd0a:	68db      	ldr	r3, [r3, #12]
 801dd0c:	899b      	ldrh	r3, [r3, #12]
 801dd0e:	b29b      	uxth	r3, r3
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7f6 f85b 	bl	8013dcc <lwip_htons>
 801dd16:	4603      	mov	r3, r0
 801dd18:	b2db      	uxtb	r3, r3
 801dd1a:	f003 0303 	and.w	r3, r3, #3
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d001      	beq.n	801dd26 <tcp_receive+0x966>
 801dd22:	2301      	movs	r3, #1
 801dd24:	e000      	b.n	801dd28 <tcp_receive+0x968>
 801dd26:	2300      	movs	r3, #0
 801dd28:	4423      	add	r3, r4
 801dd2a:	b29a      	uxth	r2, r3
 801dd2c:	4b65      	ldr	r3, [pc, #404]	@ (801dec4 <tcp_receive+0xb04>)
 801dd2e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801dd30:	4b64      	ldr	r3, [pc, #400]	@ (801dec4 <tcp_receive+0xb04>)
 801dd32:	881b      	ldrh	r3, [r3, #0]
 801dd34:	461a      	mov	r2, r3
 801dd36:	4b64      	ldr	r3, [pc, #400]	@ (801dec8 <tcp_receive+0xb08>)
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	441a      	add	r2, r3
 801dd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dd3e:	68db      	ldr	r3, [r3, #12]
 801dd40:	685b      	ldr	r3, [r3, #4]
 801dd42:	429a      	cmp	r2, r3
 801dd44:	d006      	beq.n	801dd54 <tcp_receive+0x994>
 801dd46:	4b62      	ldr	r3, [pc, #392]	@ (801ded0 <tcp_receive+0xb10>)
 801dd48:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801dd4c:	4961      	ldr	r1, [pc, #388]	@ (801ded4 <tcp_receive+0xb14>)
 801dd4e:	4862      	ldr	r0, [pc, #392]	@ (801ded8 <tcp_receive+0xb18>)
 801dd50:	f004 f82c 	bl	8021dac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801dd58:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801dd5a:	4b5a      	ldr	r3, [pc, #360]	@ (801dec4 <tcp_receive+0xb04>)
 801dd5c:	881b      	ldrh	r3, [r3, #0]
 801dd5e:	461a      	mov	r2, r3
 801dd60:	4b59      	ldr	r3, [pc, #356]	@ (801dec8 <tcp_receive+0xb08>)
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	441a      	add	r2, r3
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801dd6e:	4b55      	ldr	r3, [pc, #340]	@ (801dec4 <tcp_receive+0xb04>)
 801dd70:	881b      	ldrh	r3, [r3, #0]
 801dd72:	429a      	cmp	r2, r3
 801dd74:	d206      	bcs.n	801dd84 <tcp_receive+0x9c4>
 801dd76:	4b56      	ldr	r3, [pc, #344]	@ (801ded0 <tcp_receive+0xb10>)
 801dd78:	f240 6207 	movw	r2, #1543	@ 0x607
 801dd7c:	4957      	ldr	r1, [pc, #348]	@ (801dedc <tcp_receive+0xb1c>)
 801dd7e:	4856      	ldr	r0, [pc, #344]	@ (801ded8 <tcp_receive+0xb18>)
 801dd80:	f004 f814 	bl	8021dac <iprintf>
        pcb->rcv_wnd -= tcplen;
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801dd88:	4b4e      	ldr	r3, [pc, #312]	@ (801dec4 <tcp_receive+0xb04>)
 801dd8a:	881b      	ldrh	r3, [r3, #0]
 801dd8c:	1ad3      	subs	r3, r2, r3
 801dd8e:	b29a      	uxth	r2, r3
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801dd94:	6878      	ldr	r0, [r7, #4]
 801dd96:	f7fc fda1 	bl	801a8dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801dd9a:	4b4c      	ldr	r3, [pc, #304]	@ (801decc <tcp_receive+0xb0c>)
 801dd9c:	685b      	ldr	r3, [r3, #4]
 801dd9e:	891b      	ldrh	r3, [r3, #8]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d006      	beq.n	801ddb2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801dda4:	4b49      	ldr	r3, [pc, #292]	@ (801decc <tcp_receive+0xb0c>)
 801dda6:	685b      	ldr	r3, [r3, #4]
 801dda8:	4a4d      	ldr	r2, [pc, #308]	@ (801dee0 <tcp_receive+0xb20>)
 801ddaa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ddac:	4b47      	ldr	r3, [pc, #284]	@ (801decc <tcp_receive+0xb0c>)
 801ddae:	2200      	movs	r2, #0
 801ddb0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ddb2:	4b46      	ldr	r3, [pc, #280]	@ (801decc <tcp_receive+0xb0c>)
 801ddb4:	68db      	ldr	r3, [r3, #12]
 801ddb6:	899b      	ldrh	r3, [r3, #12]
 801ddb8:	b29b      	uxth	r3, r3
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7f6 f806 	bl	8013dcc <lwip_htons>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	b2db      	uxtb	r3, r3
 801ddc4:	f003 0301 	and.w	r3, r3, #1
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	f000 80b8 	beq.w	801df3e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ddce:	4b45      	ldr	r3, [pc, #276]	@ (801dee4 <tcp_receive+0xb24>)
 801ddd0:	781b      	ldrb	r3, [r3, #0]
 801ddd2:	f043 0320 	orr.w	r3, r3, #32
 801ddd6:	b2da      	uxtb	r2, r3
 801ddd8:	4b42      	ldr	r3, [pc, #264]	@ (801dee4 <tcp_receive+0xb24>)
 801ddda:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801dddc:	e0af      	b.n	801df3e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dde2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dde8:	68db      	ldr	r3, [r3, #12]
 801ddea:	685b      	ldr	r3, [r3, #4]
 801ddec:	4a36      	ldr	r2, [pc, #216]	@ (801dec8 <tcp_receive+0xb08>)
 801ddee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ddf0:	68bb      	ldr	r3, [r7, #8]
 801ddf2:	891b      	ldrh	r3, [r3, #8]
 801ddf4:	461c      	mov	r4, r3
 801ddf6:	68bb      	ldr	r3, [r7, #8]
 801ddf8:	68db      	ldr	r3, [r3, #12]
 801ddfa:	899b      	ldrh	r3, [r3, #12]
 801ddfc:	b29b      	uxth	r3, r3
 801ddfe:	4618      	mov	r0, r3
 801de00:	f7f5 ffe4 	bl	8013dcc <lwip_htons>
 801de04:	4603      	mov	r3, r0
 801de06:	b2db      	uxtb	r3, r3
 801de08:	f003 0303 	and.w	r3, r3, #3
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d001      	beq.n	801de14 <tcp_receive+0xa54>
 801de10:	2301      	movs	r3, #1
 801de12:	e000      	b.n	801de16 <tcp_receive+0xa56>
 801de14:	2300      	movs	r3, #0
 801de16:	191a      	adds	r2, r3, r4
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801de1c:	441a      	add	r2, r3
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801de26:	461c      	mov	r4, r3
 801de28:	68bb      	ldr	r3, [r7, #8]
 801de2a:	891b      	ldrh	r3, [r3, #8]
 801de2c:	461d      	mov	r5, r3
 801de2e:	68bb      	ldr	r3, [r7, #8]
 801de30:	68db      	ldr	r3, [r3, #12]
 801de32:	899b      	ldrh	r3, [r3, #12]
 801de34:	b29b      	uxth	r3, r3
 801de36:	4618      	mov	r0, r3
 801de38:	f7f5 ffc8 	bl	8013dcc <lwip_htons>
 801de3c:	4603      	mov	r3, r0
 801de3e:	b2db      	uxtb	r3, r3
 801de40:	f003 0303 	and.w	r3, r3, #3
 801de44:	2b00      	cmp	r3, #0
 801de46:	d001      	beq.n	801de4c <tcp_receive+0xa8c>
 801de48:	2301      	movs	r3, #1
 801de4a:	e000      	b.n	801de4e <tcp_receive+0xa8e>
 801de4c:	2300      	movs	r3, #0
 801de4e:	442b      	add	r3, r5
 801de50:	429c      	cmp	r4, r3
 801de52:	d206      	bcs.n	801de62 <tcp_receive+0xaa2>
 801de54:	4b1e      	ldr	r3, [pc, #120]	@ (801ded0 <tcp_receive+0xb10>)
 801de56:	f240 622b 	movw	r2, #1579	@ 0x62b
 801de5a:	4923      	ldr	r1, [pc, #140]	@ (801dee8 <tcp_receive+0xb28>)
 801de5c:	481e      	ldr	r0, [pc, #120]	@ (801ded8 <tcp_receive+0xb18>)
 801de5e:	f003 ffa5 	bl	8021dac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801de62:	68bb      	ldr	r3, [r7, #8]
 801de64:	891b      	ldrh	r3, [r3, #8]
 801de66:	461c      	mov	r4, r3
 801de68:	68bb      	ldr	r3, [r7, #8]
 801de6a:	68db      	ldr	r3, [r3, #12]
 801de6c:	899b      	ldrh	r3, [r3, #12]
 801de6e:	b29b      	uxth	r3, r3
 801de70:	4618      	mov	r0, r3
 801de72:	f7f5 ffab 	bl	8013dcc <lwip_htons>
 801de76:	4603      	mov	r3, r0
 801de78:	b2db      	uxtb	r3, r3
 801de7a:	f003 0303 	and.w	r3, r3, #3
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d001      	beq.n	801de86 <tcp_receive+0xac6>
 801de82:	2301      	movs	r3, #1
 801de84:	e000      	b.n	801de88 <tcp_receive+0xac8>
 801de86:	2300      	movs	r3, #0
 801de88:	1919      	adds	r1, r3, r4
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801de8e:	b28b      	uxth	r3, r1
 801de90:	1ad3      	subs	r3, r2, r3
 801de92:	b29a      	uxth	r2, r3
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801de98:	6878      	ldr	r0, [r7, #4]
 801de9a:	f7fc fd1f 	bl	801a8dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801de9e:	68bb      	ldr	r3, [r7, #8]
 801dea0:	685b      	ldr	r3, [r3, #4]
 801dea2:	891b      	ldrh	r3, [r3, #8]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d028      	beq.n	801defa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801dea8:	4b0d      	ldr	r3, [pc, #52]	@ (801dee0 <tcp_receive+0xb20>)
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	2b00      	cmp	r3, #0
 801deae:	d01d      	beq.n	801deec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801deb0:	4b0b      	ldr	r3, [pc, #44]	@ (801dee0 <tcp_receive+0xb20>)
 801deb2:	681a      	ldr	r2, [r3, #0]
 801deb4:	68bb      	ldr	r3, [r7, #8]
 801deb6:	685b      	ldr	r3, [r3, #4]
 801deb8:	4619      	mov	r1, r3
 801deba:	4610      	mov	r0, r2
 801debc:	f7fb fe38 	bl	8019b30 <pbuf_cat>
 801dec0:	e018      	b.n	801def4 <tcp_receive+0xb34>
 801dec2:	bf00      	nop
 801dec4:	240126de 	.word	0x240126de
 801dec8:	240126d4 	.word	0x240126d4
 801decc:	240126b4 	.word	0x240126b4
 801ded0:	08027720 	.word	0x08027720
 801ded4:	08027b2c 	.word	0x08027b2c
 801ded8:	08027798 	.word	0x08027798
 801dedc:	08027b68 	.word	0x08027b68
 801dee0:	240126e4 	.word	0x240126e4
 801dee4:	240126e1 	.word	0x240126e1
 801dee8:	08027b88 	.word	0x08027b88
            } else {
              recv_data = cseg->p;
 801deec:	68bb      	ldr	r3, [r7, #8]
 801deee:	685b      	ldr	r3, [r3, #4]
 801def0:	4a70      	ldr	r2, [pc, #448]	@ (801e0b4 <tcp_receive+0xcf4>)
 801def2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	2200      	movs	r2, #0
 801def8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	68db      	ldr	r3, [r3, #12]
 801defe:	899b      	ldrh	r3, [r3, #12]
 801df00:	b29b      	uxth	r3, r3
 801df02:	4618      	mov	r0, r3
 801df04:	f7f5 ff62 	bl	8013dcc <lwip_htons>
 801df08:	4603      	mov	r3, r0
 801df0a:	b2db      	uxtb	r3, r3
 801df0c:	f003 0301 	and.w	r3, r3, #1
 801df10:	2b00      	cmp	r3, #0
 801df12:	d00d      	beq.n	801df30 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801df14:	4b68      	ldr	r3, [pc, #416]	@ (801e0b8 <tcp_receive+0xcf8>)
 801df16:	781b      	ldrb	r3, [r3, #0]
 801df18:	f043 0320 	orr.w	r3, r3, #32
 801df1c:	b2da      	uxtb	r2, r3
 801df1e:	4b66      	ldr	r3, [pc, #408]	@ (801e0b8 <tcp_receive+0xcf8>)
 801df20:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	7d1b      	ldrb	r3, [r3, #20]
 801df26:	2b04      	cmp	r3, #4
 801df28:	d102      	bne.n	801df30 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	2207      	movs	r2, #7
 801df2e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801df30:	68bb      	ldr	r3, [r7, #8]
 801df32:	681a      	ldr	r2, [r3, #0]
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801df38:	68b8      	ldr	r0, [r7, #8]
 801df3a:	f7fd fb12 	bl	801b562 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df42:	2b00      	cmp	r3, #0
 801df44:	d008      	beq.n	801df58 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df4a:	68db      	ldr	r3, [r3, #12]
 801df4c:	685a      	ldr	r2, [r3, #4]
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801df52:	429a      	cmp	r2, r3
 801df54:	f43f af43 	beq.w	801ddde <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	8b5b      	ldrh	r3, [r3, #26]
 801df5c:	f003 0301 	and.w	r3, r3, #1
 801df60:	2b00      	cmp	r3, #0
 801df62:	d00e      	beq.n	801df82 <tcp_receive+0xbc2>
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	8b5b      	ldrh	r3, [r3, #26]
 801df68:	f023 0301 	bic.w	r3, r3, #1
 801df6c:	b29a      	uxth	r2, r3
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	835a      	strh	r2, [r3, #26]
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	8b5b      	ldrh	r3, [r3, #26]
 801df76:	f043 0302 	orr.w	r3, r3, #2
 801df7a:	b29a      	uxth	r2, r3
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801df80:	e187      	b.n	801e292 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	8b5b      	ldrh	r3, [r3, #26]
 801df86:	f043 0301 	orr.w	r3, r3, #1
 801df8a:	b29a      	uxth	r2, r3
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801df90:	e17f      	b.n	801e292 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df96:	2b00      	cmp	r3, #0
 801df98:	d106      	bne.n	801dfa8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801df9a:	4848      	ldr	r0, [pc, #288]	@ (801e0bc <tcp_receive+0xcfc>)
 801df9c:	f7fd fafa 	bl	801b594 <tcp_seg_copy>
 801dfa0:	4602      	mov	r2, r0
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	675a      	str	r2, [r3, #116]	@ 0x74
 801dfa6:	e16c      	b.n	801e282 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801dfa8:	2300      	movs	r3, #0
 801dfaa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dfb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dfb2:	e156      	b.n	801e262 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801dfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dfb6:	68db      	ldr	r3, [r3, #12]
 801dfb8:	685a      	ldr	r2, [r3, #4]
 801dfba:	4b41      	ldr	r3, [pc, #260]	@ (801e0c0 <tcp_receive+0xd00>)
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	429a      	cmp	r2, r3
 801dfc0:	d11d      	bne.n	801dffe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801dfc2:	4b3e      	ldr	r3, [pc, #248]	@ (801e0bc <tcp_receive+0xcfc>)
 801dfc4:	891a      	ldrh	r2, [r3, #8]
 801dfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dfc8:	891b      	ldrh	r3, [r3, #8]
 801dfca:	429a      	cmp	r2, r3
 801dfcc:	f240 814e 	bls.w	801e26c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801dfd0:	483a      	ldr	r0, [pc, #232]	@ (801e0bc <tcp_receive+0xcfc>)
 801dfd2:	f7fd fadf 	bl	801b594 <tcp_seg_copy>
 801dfd6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801dfd8:	697b      	ldr	r3, [r7, #20]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	f000 8148 	beq.w	801e270 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801dfe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d003      	beq.n	801dfee <tcp_receive+0xc2e>
                    prev->next = cseg;
 801dfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dfe8:	697a      	ldr	r2, [r7, #20]
 801dfea:	601a      	str	r2, [r3, #0]
 801dfec:	e002      	b.n	801dff4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	697a      	ldr	r2, [r7, #20]
 801dff2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801dff4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801dff6:	6978      	ldr	r0, [r7, #20]
 801dff8:	f7ff f8de 	bl	801d1b8 <tcp_oos_insert_segment>
                }
                break;
 801dffc:	e138      	b.n	801e270 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801dffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e000:	2b00      	cmp	r3, #0
 801e002:	d117      	bne.n	801e034 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e004:	4b2e      	ldr	r3, [pc, #184]	@ (801e0c0 <tcp_receive+0xd00>)
 801e006:	681a      	ldr	r2, [r3, #0]
 801e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e00a:	68db      	ldr	r3, [r3, #12]
 801e00c:	685b      	ldr	r3, [r3, #4]
 801e00e:	1ad3      	subs	r3, r2, r3
 801e010:	2b00      	cmp	r3, #0
 801e012:	da57      	bge.n	801e0c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e014:	4829      	ldr	r0, [pc, #164]	@ (801e0bc <tcp_receive+0xcfc>)
 801e016:	f7fd fabd 	bl	801b594 <tcp_seg_copy>
 801e01a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e01c:	69bb      	ldr	r3, [r7, #24]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	f000 8128 	beq.w	801e274 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	69ba      	ldr	r2, [r7, #24]
 801e028:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e02a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e02c:	69b8      	ldr	r0, [r7, #24]
 801e02e:	f7ff f8c3 	bl	801d1b8 <tcp_oos_insert_segment>
                  }
                  break;
 801e032:	e11f      	b.n	801e274 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e034:	4b22      	ldr	r3, [pc, #136]	@ (801e0c0 <tcp_receive+0xd00>)
 801e036:	681a      	ldr	r2, [r3, #0]
 801e038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e03a:	68db      	ldr	r3, [r3, #12]
 801e03c:	685b      	ldr	r3, [r3, #4]
 801e03e:	1ad3      	subs	r3, r2, r3
 801e040:	3b01      	subs	r3, #1
 801e042:	2b00      	cmp	r3, #0
 801e044:	db3e      	blt.n	801e0c4 <tcp_receive+0xd04>
 801e046:	4b1e      	ldr	r3, [pc, #120]	@ (801e0c0 <tcp_receive+0xd00>)
 801e048:	681a      	ldr	r2, [r3, #0]
 801e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e04c:	68db      	ldr	r3, [r3, #12]
 801e04e:	685b      	ldr	r3, [r3, #4]
 801e050:	1ad3      	subs	r3, r2, r3
 801e052:	3301      	adds	r3, #1
 801e054:	2b00      	cmp	r3, #0
 801e056:	dc35      	bgt.n	801e0c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e058:	4818      	ldr	r0, [pc, #96]	@ (801e0bc <tcp_receive+0xcfc>)
 801e05a:	f7fd fa9b 	bl	801b594 <tcp_seg_copy>
 801e05e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e060:	69fb      	ldr	r3, [r7, #28]
 801e062:	2b00      	cmp	r3, #0
 801e064:	f000 8108 	beq.w	801e278 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e06a:	68db      	ldr	r3, [r3, #12]
 801e06c:	685b      	ldr	r3, [r3, #4]
 801e06e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e070:	8912      	ldrh	r2, [r2, #8]
 801e072:	441a      	add	r2, r3
 801e074:	4b12      	ldr	r3, [pc, #72]	@ (801e0c0 <tcp_receive+0xd00>)
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	1ad3      	subs	r3, r2, r3
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	dd12      	ble.n	801e0a4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e07e:	4b10      	ldr	r3, [pc, #64]	@ (801e0c0 <tcp_receive+0xd00>)
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	b29a      	uxth	r2, r3
 801e084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e086:	68db      	ldr	r3, [r3, #12]
 801e088:	685b      	ldr	r3, [r3, #4]
 801e08a:	b29b      	uxth	r3, r3
 801e08c:	1ad3      	subs	r3, r2, r3
 801e08e:	b29a      	uxth	r2, r3
 801e090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e092:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e096:	685a      	ldr	r2, [r3, #4]
 801e098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e09a:	891b      	ldrh	r3, [r3, #8]
 801e09c:	4619      	mov	r1, r3
 801e09e:	4610      	mov	r0, r2
 801e0a0:	f7fb faf4 	bl	801968c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0a6:	69fa      	ldr	r2, [r7, #28]
 801e0a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e0aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e0ac:	69f8      	ldr	r0, [r7, #28]
 801e0ae:	f7ff f883 	bl	801d1b8 <tcp_oos_insert_segment>
                  }
                  break;
 801e0b2:	e0e1      	b.n	801e278 <tcp_receive+0xeb8>
 801e0b4:	240126e4 	.word	0x240126e4
 801e0b8:	240126e1 	.word	0x240126e1
 801e0bc:	240126b4 	.word	0x240126b4
 801e0c0:	240126d4 	.word	0x240126d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e0c6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	f040 80c5 	bne.w	801e25c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e0d2:	4b7f      	ldr	r3, [pc, #508]	@ (801e2d0 <tcp_receive+0xf10>)
 801e0d4:	681a      	ldr	r2, [r3, #0]
 801e0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e0d8:	68db      	ldr	r3, [r3, #12]
 801e0da:	685b      	ldr	r3, [r3, #4]
 801e0dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	f340 80bc 	ble.w	801e25c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e0e6:	68db      	ldr	r3, [r3, #12]
 801e0e8:	899b      	ldrh	r3, [r3, #12]
 801e0ea:	b29b      	uxth	r3, r3
 801e0ec:	4618      	mov	r0, r3
 801e0ee:	f7f5 fe6d 	bl	8013dcc <lwip_htons>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	b2db      	uxtb	r3, r3
 801e0f6:	f003 0301 	and.w	r3, r3, #1
 801e0fa:	2b00      	cmp	r3, #0
 801e0fc:	f040 80be 	bne.w	801e27c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e100:	4874      	ldr	r0, [pc, #464]	@ (801e2d4 <tcp_receive+0xf14>)
 801e102:	f7fd fa47 	bl	801b594 <tcp_seg_copy>
 801e106:	4602      	mov	r2, r0
 801e108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e10a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	2b00      	cmp	r3, #0
 801e112:	f000 80b5 	beq.w	801e280 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e118:	68db      	ldr	r3, [r3, #12]
 801e11a:	685b      	ldr	r3, [r3, #4]
 801e11c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e11e:	8912      	ldrh	r2, [r2, #8]
 801e120:	441a      	add	r2, r3
 801e122:	4b6b      	ldr	r3, [pc, #428]	@ (801e2d0 <tcp_receive+0xf10>)
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	1ad3      	subs	r3, r2, r3
 801e128:	2b00      	cmp	r3, #0
 801e12a:	dd12      	ble.n	801e152 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e12c:	4b68      	ldr	r3, [pc, #416]	@ (801e2d0 <tcp_receive+0xf10>)
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	b29a      	uxth	r2, r3
 801e132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e134:	68db      	ldr	r3, [r3, #12]
 801e136:	685b      	ldr	r3, [r3, #4]
 801e138:	b29b      	uxth	r3, r3
 801e13a:	1ad3      	subs	r3, r2, r3
 801e13c:	b29a      	uxth	r2, r3
 801e13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e140:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e144:	685a      	ldr	r2, [r3, #4]
 801e146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e148:	891b      	ldrh	r3, [r3, #8]
 801e14a:	4619      	mov	r1, r3
 801e14c:	4610      	mov	r0, r2
 801e14e:	f7fb fa9d 	bl	801968c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e152:	4b61      	ldr	r3, [pc, #388]	@ (801e2d8 <tcp_receive+0xf18>)
 801e154:	881b      	ldrh	r3, [r3, #0]
 801e156:	461a      	mov	r2, r3
 801e158:	4b5d      	ldr	r3, [pc, #372]	@ (801e2d0 <tcp_receive+0xf10>)
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	441a      	add	r2, r3
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e162:	6879      	ldr	r1, [r7, #4]
 801e164:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e166:	440b      	add	r3, r1
 801e168:	1ad3      	subs	r3, r2, r3
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	f340 8088 	ble.w	801e280 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	68db      	ldr	r3, [r3, #12]
 801e176:	899b      	ldrh	r3, [r3, #12]
 801e178:	b29b      	uxth	r3, r3
 801e17a:	4618      	mov	r0, r3
 801e17c:	f7f5 fe26 	bl	8013dcc <lwip_htons>
 801e180:	4603      	mov	r3, r0
 801e182:	b2db      	uxtb	r3, r3
 801e184:	f003 0301 	and.w	r3, r3, #1
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d021      	beq.n	801e1d0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	68db      	ldr	r3, [r3, #12]
 801e192:	899b      	ldrh	r3, [r3, #12]
 801e194:	b29b      	uxth	r3, r3
 801e196:	b21b      	sxth	r3, r3
 801e198:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e19c:	b21c      	sxth	r4, r3
 801e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	68db      	ldr	r3, [r3, #12]
 801e1a4:	899b      	ldrh	r3, [r3, #12]
 801e1a6:	b29b      	uxth	r3, r3
 801e1a8:	4618      	mov	r0, r3
 801e1aa:	f7f5 fe0f 	bl	8013dcc <lwip_htons>
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	b2db      	uxtb	r3, r3
 801e1b2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801e1b6:	b29b      	uxth	r3, r3
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	f7f5 fe07 	bl	8013dcc <lwip_htons>
 801e1be:	4603      	mov	r3, r0
 801e1c0:	b21b      	sxth	r3, r3
 801e1c2:	4323      	orrs	r3, r4
 801e1c4:	b21a      	sxth	r2, r3
 801e1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	68db      	ldr	r3, [r3, #12]
 801e1cc:	b292      	uxth	r2, r2
 801e1ce:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e1d4:	b29a      	uxth	r2, r3
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e1da:	4413      	add	r3, r2
 801e1dc:	b299      	uxth	r1, r3
 801e1de:	4b3c      	ldr	r3, [pc, #240]	@ (801e2d0 <tcp_receive+0xf10>)
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	b29a      	uxth	r2, r3
 801e1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	1a8a      	subs	r2, r1, r2
 801e1ea:	b292      	uxth	r2, r2
 801e1ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	685a      	ldr	r2, [r3, #4]
 801e1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	891b      	ldrh	r3, [r3, #8]
 801e1fa:	4619      	mov	r1, r3
 801e1fc:	4610      	mov	r0, r2
 801e1fe:	f7fb fa45 	bl	801968c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	891c      	ldrh	r4, [r3, #8]
 801e208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	68db      	ldr	r3, [r3, #12]
 801e20e:	899b      	ldrh	r3, [r3, #12]
 801e210:	b29b      	uxth	r3, r3
 801e212:	4618      	mov	r0, r3
 801e214:	f7f5 fdda 	bl	8013dcc <lwip_htons>
 801e218:	4603      	mov	r3, r0
 801e21a:	b2db      	uxtb	r3, r3
 801e21c:	f003 0303 	and.w	r3, r3, #3
 801e220:	2b00      	cmp	r3, #0
 801e222:	d001      	beq.n	801e228 <tcp_receive+0xe68>
 801e224:	2301      	movs	r3, #1
 801e226:	e000      	b.n	801e22a <tcp_receive+0xe6a>
 801e228:	2300      	movs	r3, #0
 801e22a:	4423      	add	r3, r4
 801e22c:	b29a      	uxth	r2, r3
 801e22e:	4b2a      	ldr	r3, [pc, #168]	@ (801e2d8 <tcp_receive+0xf18>)
 801e230:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e232:	4b29      	ldr	r3, [pc, #164]	@ (801e2d8 <tcp_receive+0xf18>)
 801e234:	881b      	ldrh	r3, [r3, #0]
 801e236:	461a      	mov	r2, r3
 801e238:	4b25      	ldr	r3, [pc, #148]	@ (801e2d0 <tcp_receive+0xf10>)
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	441a      	add	r2, r3
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e242:	6879      	ldr	r1, [r7, #4]
 801e244:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e246:	440b      	add	r3, r1
 801e248:	429a      	cmp	r2, r3
 801e24a:	d019      	beq.n	801e280 <tcp_receive+0xec0>
 801e24c:	4b23      	ldr	r3, [pc, #140]	@ (801e2dc <tcp_receive+0xf1c>)
 801e24e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801e252:	4923      	ldr	r1, [pc, #140]	@ (801e2e0 <tcp_receive+0xf20>)
 801e254:	4823      	ldr	r0, [pc, #140]	@ (801e2e4 <tcp_receive+0xf24>)
 801e256:	f003 fda9 	bl	8021dac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801e25a:	e011      	b.n	801e280 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e264:	2b00      	cmp	r3, #0
 801e266:	f47f aea5 	bne.w	801dfb4 <tcp_receive+0xbf4>
 801e26a:	e00a      	b.n	801e282 <tcp_receive+0xec2>
                break;
 801e26c:	bf00      	nop
 801e26e:	e008      	b.n	801e282 <tcp_receive+0xec2>
                break;
 801e270:	bf00      	nop
 801e272:	e006      	b.n	801e282 <tcp_receive+0xec2>
                  break;
 801e274:	bf00      	nop
 801e276:	e004      	b.n	801e282 <tcp_receive+0xec2>
                  break;
 801e278:	bf00      	nop
 801e27a:	e002      	b.n	801e282 <tcp_receive+0xec2>
                  break;
 801e27c:	bf00      	nop
 801e27e:	e000      	b.n	801e282 <tcp_receive+0xec2>
                break;
 801e280:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e282:	6878      	ldr	r0, [r7, #4]
 801e284:	f001 fe8c 	bl	801ffa0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801e288:	e003      	b.n	801e292 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801e28a:	6878      	ldr	r0, [r7, #4]
 801e28c:	f001 fe88 	bl	801ffa0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e290:	e01a      	b.n	801e2c8 <tcp_receive+0xf08>
 801e292:	e019      	b.n	801e2c8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e294:	4b0e      	ldr	r3, [pc, #56]	@ (801e2d0 <tcp_receive+0xf10>)
 801e296:	681a      	ldr	r2, [r3, #0]
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e29c:	1ad3      	subs	r3, r2, r3
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	db0a      	blt.n	801e2b8 <tcp_receive+0xef8>
 801e2a2:	4b0b      	ldr	r3, [pc, #44]	@ (801e2d0 <tcp_receive+0xf10>)
 801e2a4:	681a      	ldr	r2, [r3, #0]
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2aa:	6879      	ldr	r1, [r7, #4]
 801e2ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e2ae:	440b      	add	r3, r1
 801e2b0:	1ad3      	subs	r3, r2, r3
 801e2b2:	3301      	adds	r3, #1
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	dd07      	ble.n	801e2c8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	8b5b      	ldrh	r3, [r3, #26]
 801e2bc:	f043 0302 	orr.w	r3, r3, #2
 801e2c0:	b29a      	uxth	r2, r3
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801e2c6:	e7ff      	b.n	801e2c8 <tcp_receive+0xf08>
 801e2c8:	bf00      	nop
 801e2ca:	3750      	adds	r7, #80	@ 0x50
 801e2cc:	46bd      	mov	sp, r7
 801e2ce:	bdb0      	pop	{r4, r5, r7, pc}
 801e2d0:	240126d4 	.word	0x240126d4
 801e2d4:	240126b4 	.word	0x240126b4
 801e2d8:	240126de 	.word	0x240126de
 801e2dc:	08027720 	.word	0x08027720
 801e2e0:	08027af4 	.word	0x08027af4
 801e2e4:	08027798 	.word	0x08027798

0801e2e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801e2e8:	b480      	push	{r7}
 801e2ea:	b083      	sub	sp, #12
 801e2ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801e2ee:	4b15      	ldr	r3, [pc, #84]	@ (801e344 <tcp_get_next_optbyte+0x5c>)
 801e2f0:	881b      	ldrh	r3, [r3, #0]
 801e2f2:	1c5a      	adds	r2, r3, #1
 801e2f4:	b291      	uxth	r1, r2
 801e2f6:	4a13      	ldr	r2, [pc, #76]	@ (801e344 <tcp_get_next_optbyte+0x5c>)
 801e2f8:	8011      	strh	r1, [r2, #0]
 801e2fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e2fc:	4b12      	ldr	r3, [pc, #72]	@ (801e348 <tcp_get_next_optbyte+0x60>)
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	2b00      	cmp	r3, #0
 801e302:	d004      	beq.n	801e30e <tcp_get_next_optbyte+0x26>
 801e304:	4b11      	ldr	r3, [pc, #68]	@ (801e34c <tcp_get_next_optbyte+0x64>)
 801e306:	881b      	ldrh	r3, [r3, #0]
 801e308:	88fa      	ldrh	r2, [r7, #6]
 801e30a:	429a      	cmp	r2, r3
 801e30c:	d208      	bcs.n	801e320 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e30e:	4b10      	ldr	r3, [pc, #64]	@ (801e350 <tcp_get_next_optbyte+0x68>)
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	3314      	adds	r3, #20
 801e314:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801e316:	88fb      	ldrh	r3, [r7, #6]
 801e318:	683a      	ldr	r2, [r7, #0]
 801e31a:	4413      	add	r3, r2
 801e31c:	781b      	ldrb	r3, [r3, #0]
 801e31e:	e00b      	b.n	801e338 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e320:	88fb      	ldrh	r3, [r7, #6]
 801e322:	b2da      	uxtb	r2, r3
 801e324:	4b09      	ldr	r3, [pc, #36]	@ (801e34c <tcp_get_next_optbyte+0x64>)
 801e326:	881b      	ldrh	r3, [r3, #0]
 801e328:	b2db      	uxtb	r3, r3
 801e32a:	1ad3      	subs	r3, r2, r3
 801e32c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801e32e:	4b06      	ldr	r3, [pc, #24]	@ (801e348 <tcp_get_next_optbyte+0x60>)
 801e330:	681a      	ldr	r2, [r3, #0]
 801e332:	797b      	ldrb	r3, [r7, #5]
 801e334:	4413      	add	r3, r2
 801e336:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e338:	4618      	mov	r0, r3
 801e33a:	370c      	adds	r7, #12
 801e33c:	46bd      	mov	sp, r7
 801e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e342:	4770      	bx	lr
 801e344:	240126d0 	.word	0x240126d0
 801e348:	240126cc 	.word	0x240126cc
 801e34c:	240126ca 	.word	0x240126ca
 801e350:	240126c4 	.word	0x240126c4

0801e354 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801e354:	b580      	push	{r7, lr}
 801e356:	b084      	sub	sp, #16
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d106      	bne.n	801e370 <tcp_parseopt+0x1c>
 801e362:	4b32      	ldr	r3, [pc, #200]	@ (801e42c <tcp_parseopt+0xd8>)
 801e364:	f240 727d 	movw	r2, #1917	@ 0x77d
 801e368:	4931      	ldr	r1, [pc, #196]	@ (801e430 <tcp_parseopt+0xdc>)
 801e36a:	4832      	ldr	r0, [pc, #200]	@ (801e434 <tcp_parseopt+0xe0>)
 801e36c:	f003 fd1e 	bl	8021dac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801e370:	4b31      	ldr	r3, [pc, #196]	@ (801e438 <tcp_parseopt+0xe4>)
 801e372:	881b      	ldrh	r3, [r3, #0]
 801e374:	2b00      	cmp	r3, #0
 801e376:	d056      	beq.n	801e426 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e378:	4b30      	ldr	r3, [pc, #192]	@ (801e43c <tcp_parseopt+0xe8>)
 801e37a:	2200      	movs	r2, #0
 801e37c:	801a      	strh	r2, [r3, #0]
 801e37e:	e046      	b.n	801e40e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801e380:	f7ff ffb2 	bl	801e2e8 <tcp_get_next_optbyte>
 801e384:	4603      	mov	r3, r0
 801e386:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801e388:	7bfb      	ldrb	r3, [r7, #15]
 801e38a:	2b02      	cmp	r3, #2
 801e38c:	d006      	beq.n	801e39c <tcp_parseopt+0x48>
 801e38e:	2b02      	cmp	r3, #2
 801e390:	dc2a      	bgt.n	801e3e8 <tcp_parseopt+0x94>
 801e392:	2b00      	cmp	r3, #0
 801e394:	d042      	beq.n	801e41c <tcp_parseopt+0xc8>
 801e396:	2b01      	cmp	r3, #1
 801e398:	d038      	beq.n	801e40c <tcp_parseopt+0xb8>
 801e39a:	e025      	b.n	801e3e8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801e39c:	f7ff ffa4 	bl	801e2e8 <tcp_get_next_optbyte>
 801e3a0:	4603      	mov	r3, r0
 801e3a2:	2b04      	cmp	r3, #4
 801e3a4:	d13c      	bne.n	801e420 <tcp_parseopt+0xcc>
 801e3a6:	4b25      	ldr	r3, [pc, #148]	@ (801e43c <tcp_parseopt+0xe8>)
 801e3a8:	881b      	ldrh	r3, [r3, #0]
 801e3aa:	3301      	adds	r3, #1
 801e3ac:	4a22      	ldr	r2, [pc, #136]	@ (801e438 <tcp_parseopt+0xe4>)
 801e3ae:	8812      	ldrh	r2, [r2, #0]
 801e3b0:	4293      	cmp	r3, r2
 801e3b2:	da35      	bge.n	801e420 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e3b4:	f7ff ff98 	bl	801e2e8 <tcp_get_next_optbyte>
 801e3b8:	4603      	mov	r3, r0
 801e3ba:	021b      	lsls	r3, r3, #8
 801e3bc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801e3be:	f7ff ff93 	bl	801e2e8 <tcp_get_next_optbyte>
 801e3c2:	4603      	mov	r3, r0
 801e3c4:	461a      	mov	r2, r3
 801e3c6:	89bb      	ldrh	r3, [r7, #12]
 801e3c8:	4313      	orrs	r3, r2
 801e3ca:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801e3cc:	89bb      	ldrh	r3, [r7, #12]
 801e3ce:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801e3d2:	d804      	bhi.n	801e3de <tcp_parseopt+0x8a>
 801e3d4:	89bb      	ldrh	r3, [r7, #12]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d001      	beq.n	801e3de <tcp_parseopt+0x8a>
 801e3da:	89ba      	ldrh	r2, [r7, #12]
 801e3dc:	e001      	b.n	801e3e2 <tcp_parseopt+0x8e>
 801e3de:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801e3e6:	e012      	b.n	801e40e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801e3e8:	f7ff ff7e 	bl	801e2e8 <tcp_get_next_optbyte>
 801e3ec:	4603      	mov	r3, r0
 801e3ee:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801e3f0:	7afb      	ldrb	r3, [r7, #11]
 801e3f2:	2b01      	cmp	r3, #1
 801e3f4:	d916      	bls.n	801e424 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801e3f6:	7afb      	ldrb	r3, [r7, #11]
 801e3f8:	b29a      	uxth	r2, r3
 801e3fa:	4b10      	ldr	r3, [pc, #64]	@ (801e43c <tcp_parseopt+0xe8>)
 801e3fc:	881b      	ldrh	r3, [r3, #0]
 801e3fe:	4413      	add	r3, r2
 801e400:	b29b      	uxth	r3, r3
 801e402:	3b02      	subs	r3, #2
 801e404:	b29a      	uxth	r2, r3
 801e406:	4b0d      	ldr	r3, [pc, #52]	@ (801e43c <tcp_parseopt+0xe8>)
 801e408:	801a      	strh	r2, [r3, #0]
 801e40a:	e000      	b.n	801e40e <tcp_parseopt+0xba>
          break;
 801e40c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e40e:	4b0b      	ldr	r3, [pc, #44]	@ (801e43c <tcp_parseopt+0xe8>)
 801e410:	881a      	ldrh	r2, [r3, #0]
 801e412:	4b09      	ldr	r3, [pc, #36]	@ (801e438 <tcp_parseopt+0xe4>)
 801e414:	881b      	ldrh	r3, [r3, #0]
 801e416:	429a      	cmp	r2, r3
 801e418:	d3b2      	bcc.n	801e380 <tcp_parseopt+0x2c>
 801e41a:	e004      	b.n	801e426 <tcp_parseopt+0xd2>
          return;
 801e41c:	bf00      	nop
 801e41e:	e002      	b.n	801e426 <tcp_parseopt+0xd2>
            return;
 801e420:	bf00      	nop
 801e422:	e000      	b.n	801e426 <tcp_parseopt+0xd2>
            return;
 801e424:	bf00      	nop
      }
    }
  }
}
 801e426:	3710      	adds	r7, #16
 801e428:	46bd      	mov	sp, r7
 801e42a:	bd80      	pop	{r7, pc}
 801e42c:	08027720 	.word	0x08027720
 801e430:	08027bb0 	.word	0x08027bb0
 801e434:	08027798 	.word	0x08027798
 801e438:	240126c8 	.word	0x240126c8
 801e43c:	240126d0 	.word	0x240126d0

0801e440 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801e440:	b480      	push	{r7}
 801e442:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801e444:	4b05      	ldr	r3, [pc, #20]	@ (801e45c <tcp_trigger_input_pcb_close+0x1c>)
 801e446:	781b      	ldrb	r3, [r3, #0]
 801e448:	f043 0310 	orr.w	r3, r3, #16
 801e44c:	b2da      	uxtb	r2, r3
 801e44e:	4b03      	ldr	r3, [pc, #12]	@ (801e45c <tcp_trigger_input_pcb_close+0x1c>)
 801e450:	701a      	strb	r2, [r3, #0]
}
 801e452:	bf00      	nop
 801e454:	46bd      	mov	sp, r7
 801e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e45a:	4770      	bx	lr
 801e45c:	240126e1 	.word	0x240126e1

0801e460 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801e460:	b580      	push	{r7, lr}
 801e462:	b084      	sub	sp, #16
 801e464:	af00      	add	r7, sp, #0
 801e466:	60f8      	str	r0, [r7, #12]
 801e468:	60b9      	str	r1, [r7, #8]
 801e46a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	2b00      	cmp	r3, #0
 801e470:	d00a      	beq.n	801e488 <tcp_route+0x28>
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	7a1b      	ldrb	r3, [r3, #8]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d006      	beq.n	801e488 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	7a1b      	ldrb	r3, [r3, #8]
 801e47e:	4618      	mov	r0, r3
 801e480:	f7fa fefc 	bl	801927c <netif_get_by_index>
 801e484:	4603      	mov	r3, r0
 801e486:	e003      	b.n	801e490 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801e488:	6878      	ldr	r0, [r7, #4]
 801e48a:	f7f6 ff7d 	bl	8015388 <ip4_route>
 801e48e:	4603      	mov	r3, r0
  }
}
 801e490:	4618      	mov	r0, r3
 801e492:	3710      	adds	r7, #16
 801e494:	46bd      	mov	sp, r7
 801e496:	bd80      	pop	{r7, pc}

0801e498 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801e498:	b590      	push	{r4, r7, lr}
 801e49a:	b087      	sub	sp, #28
 801e49c:	af00      	add	r7, sp, #0
 801e49e:	60f8      	str	r0, [r7, #12]
 801e4a0:	60b9      	str	r1, [r7, #8]
 801e4a2:	603b      	str	r3, [r7, #0]
 801e4a4:	4613      	mov	r3, r2
 801e4a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d105      	bne.n	801e4ba <tcp_create_segment+0x22>
 801e4ae:	4b43      	ldr	r3, [pc, #268]	@ (801e5bc <tcp_create_segment+0x124>)
 801e4b0:	22a3      	movs	r2, #163	@ 0xa3
 801e4b2:	4943      	ldr	r1, [pc, #268]	@ (801e5c0 <tcp_create_segment+0x128>)
 801e4b4:	4843      	ldr	r0, [pc, #268]	@ (801e5c4 <tcp_create_segment+0x12c>)
 801e4b6:	f003 fc79 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e4ba:	68bb      	ldr	r3, [r7, #8]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d105      	bne.n	801e4cc <tcp_create_segment+0x34>
 801e4c0:	4b3e      	ldr	r3, [pc, #248]	@ (801e5bc <tcp_create_segment+0x124>)
 801e4c2:	22a4      	movs	r2, #164	@ 0xa4
 801e4c4:	4940      	ldr	r1, [pc, #256]	@ (801e5c8 <tcp_create_segment+0x130>)
 801e4c6:	483f      	ldr	r0, [pc, #252]	@ (801e5c4 <tcp_create_segment+0x12c>)
 801e4c8:	f003 fc70 	bl	8021dac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e4cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801e4d0:	009b      	lsls	r3, r3, #2
 801e4d2:	b2db      	uxtb	r3, r3
 801e4d4:	f003 0304 	and.w	r3, r3, #4
 801e4d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e4da:	2003      	movs	r0, #3
 801e4dc:	f7f8 fd06 	bl	8016eec <memp_malloc>
 801e4e0:	6138      	str	r0, [r7, #16]
 801e4e2:	693b      	ldr	r3, [r7, #16]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d104      	bne.n	801e4f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801e4e8:	68b8      	ldr	r0, [r7, #8]
 801e4ea:	f7fb fa53 	bl	8019994 <pbuf_free>
    return NULL;
 801e4ee:	2300      	movs	r3, #0
 801e4f0:	e060      	b.n	801e5b4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801e4f2:	693b      	ldr	r3, [r7, #16]
 801e4f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801e4f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801e4fa:	693b      	ldr	r3, [r7, #16]
 801e4fc:	2200      	movs	r2, #0
 801e4fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801e500:	693b      	ldr	r3, [r7, #16]
 801e502:	68ba      	ldr	r2, [r7, #8]
 801e504:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e506:	68bb      	ldr	r3, [r7, #8]
 801e508:	891a      	ldrh	r2, [r3, #8]
 801e50a:	7dfb      	ldrb	r3, [r7, #23]
 801e50c:	b29b      	uxth	r3, r3
 801e50e:	429a      	cmp	r2, r3
 801e510:	d205      	bcs.n	801e51e <tcp_create_segment+0x86>
 801e512:	4b2a      	ldr	r3, [pc, #168]	@ (801e5bc <tcp_create_segment+0x124>)
 801e514:	22b0      	movs	r2, #176	@ 0xb0
 801e516:	492d      	ldr	r1, [pc, #180]	@ (801e5cc <tcp_create_segment+0x134>)
 801e518:	482a      	ldr	r0, [pc, #168]	@ (801e5c4 <tcp_create_segment+0x12c>)
 801e51a:	f003 fc47 	bl	8021dac <iprintf>
  seg->len = p->tot_len - optlen;
 801e51e:	68bb      	ldr	r3, [r7, #8]
 801e520:	891a      	ldrh	r2, [r3, #8]
 801e522:	7dfb      	ldrb	r3, [r7, #23]
 801e524:	b29b      	uxth	r3, r3
 801e526:	1ad3      	subs	r3, r2, r3
 801e528:	b29a      	uxth	r2, r3
 801e52a:	693b      	ldr	r3, [r7, #16]
 801e52c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e52e:	2114      	movs	r1, #20
 801e530:	68b8      	ldr	r0, [r7, #8]
 801e532:	f7fb f999 	bl	8019868 <pbuf_add_header>
 801e536:	4603      	mov	r3, r0
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d004      	beq.n	801e546 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801e53c:	6938      	ldr	r0, [r7, #16]
 801e53e:	f7fd f810 	bl	801b562 <tcp_seg_free>
    return NULL;
 801e542:	2300      	movs	r3, #0
 801e544:	e036      	b.n	801e5b4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e546:	693b      	ldr	r3, [r7, #16]
 801e548:	685b      	ldr	r3, [r3, #4]
 801e54a:	685a      	ldr	r2, [r3, #4]
 801e54c:	693b      	ldr	r3, [r7, #16]
 801e54e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	8ada      	ldrh	r2, [r3, #22]
 801e554:	693b      	ldr	r3, [r7, #16]
 801e556:	68dc      	ldr	r4, [r3, #12]
 801e558:	4610      	mov	r0, r2
 801e55a:	f7f5 fc37 	bl	8013dcc <lwip_htons>
 801e55e:	4603      	mov	r3, r0
 801e560:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	8b1a      	ldrh	r2, [r3, #24]
 801e566:	693b      	ldr	r3, [r7, #16]
 801e568:	68dc      	ldr	r4, [r3, #12]
 801e56a:	4610      	mov	r0, r2
 801e56c:	f7f5 fc2e 	bl	8013dcc <lwip_htons>
 801e570:	4603      	mov	r3, r0
 801e572:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801e574:	693b      	ldr	r3, [r7, #16]
 801e576:	68dc      	ldr	r4, [r3, #12]
 801e578:	6838      	ldr	r0, [r7, #0]
 801e57a:	f7f5 fc3c 	bl	8013df6 <lwip_htonl>
 801e57e:	4603      	mov	r3, r0
 801e580:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e582:	7dfb      	ldrb	r3, [r7, #23]
 801e584:	089b      	lsrs	r3, r3, #2
 801e586:	b2db      	uxtb	r3, r3
 801e588:	3305      	adds	r3, #5
 801e58a:	b29b      	uxth	r3, r3
 801e58c:	031b      	lsls	r3, r3, #12
 801e58e:	b29a      	uxth	r2, r3
 801e590:	79fb      	ldrb	r3, [r7, #7]
 801e592:	b29b      	uxth	r3, r3
 801e594:	4313      	orrs	r3, r2
 801e596:	b29a      	uxth	r2, r3
 801e598:	693b      	ldr	r3, [r7, #16]
 801e59a:	68dc      	ldr	r4, [r3, #12]
 801e59c:	4610      	mov	r0, r2
 801e59e:	f7f5 fc15 	bl	8013dcc <lwip_htons>
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801e5a6:	693b      	ldr	r3, [r7, #16]
 801e5a8:	68db      	ldr	r3, [r3, #12]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	749a      	strb	r2, [r3, #18]
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	74da      	strb	r2, [r3, #19]
  return seg;
 801e5b2:	693b      	ldr	r3, [r7, #16]
}
 801e5b4:	4618      	mov	r0, r3
 801e5b6:	371c      	adds	r7, #28
 801e5b8:	46bd      	mov	sp, r7
 801e5ba:	bd90      	pop	{r4, r7, pc}
 801e5bc:	08027bcc 	.word	0x08027bcc
 801e5c0:	08027c2c 	.word	0x08027c2c
 801e5c4:	08027c4c 	.word	0x08027c4c
 801e5c8:	08027c74 	.word	0x08027c74
 801e5cc:	08027c98 	.word	0x08027c98

0801e5d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801e5d0:	b580      	push	{r7, lr}
 801e5d2:	b086      	sub	sp, #24
 801e5d4:	af00      	add	r7, sp, #0
 801e5d6:	607b      	str	r3, [r7, #4]
 801e5d8:	4603      	mov	r3, r0
 801e5da:	73fb      	strb	r3, [r7, #15]
 801e5dc:	460b      	mov	r3, r1
 801e5de:	81bb      	strh	r3, [r7, #12]
 801e5e0:	4613      	mov	r3, r2
 801e5e2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801e5e4:	89bb      	ldrh	r3, [r7, #12]
 801e5e6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d105      	bne.n	801e5fa <tcp_pbuf_prealloc+0x2a>
 801e5ee:	4b30      	ldr	r3, [pc, #192]	@ (801e6b0 <tcp_pbuf_prealloc+0xe0>)
 801e5f0:	22e8      	movs	r2, #232	@ 0xe8
 801e5f2:	4930      	ldr	r1, [pc, #192]	@ (801e6b4 <tcp_pbuf_prealloc+0xe4>)
 801e5f4:	4830      	ldr	r0, [pc, #192]	@ (801e6b8 <tcp_pbuf_prealloc+0xe8>)
 801e5f6:	f003 fbd9 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e5fa:	6a3b      	ldr	r3, [r7, #32]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d105      	bne.n	801e60c <tcp_pbuf_prealloc+0x3c>
 801e600:	4b2b      	ldr	r3, [pc, #172]	@ (801e6b0 <tcp_pbuf_prealloc+0xe0>)
 801e602:	22e9      	movs	r2, #233	@ 0xe9
 801e604:	492d      	ldr	r1, [pc, #180]	@ (801e6bc <tcp_pbuf_prealloc+0xec>)
 801e606:	482c      	ldr	r0, [pc, #176]	@ (801e6b8 <tcp_pbuf_prealloc+0xe8>)
 801e608:	f003 fbd0 	bl	8021dac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801e60c:	89ba      	ldrh	r2, [r7, #12]
 801e60e:	897b      	ldrh	r3, [r7, #10]
 801e610:	429a      	cmp	r2, r3
 801e612:	d221      	bcs.n	801e658 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e614:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801e618:	f003 0302 	and.w	r3, r3, #2
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d111      	bne.n	801e644 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801e620:	6a3b      	ldr	r3, [r7, #32]
 801e622:	8b5b      	ldrh	r3, [r3, #26]
 801e624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d115      	bne.n	801e658 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801e62c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801e630:	2b00      	cmp	r3, #0
 801e632:	d007      	beq.n	801e644 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801e634:	6a3b      	ldr	r3, [r7, #32]
 801e636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d103      	bne.n	801e644 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801e63c:	6a3b      	ldr	r3, [r7, #32]
 801e63e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801e640:	2b00      	cmp	r3, #0
 801e642:	d009      	beq.n	801e658 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801e644:	89bb      	ldrh	r3, [r7, #12]
 801e646:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801e64a:	f023 0203 	bic.w	r2, r3, #3
 801e64e:	897b      	ldrh	r3, [r7, #10]
 801e650:	4293      	cmp	r3, r2
 801e652:	bf28      	it	cs
 801e654:	4613      	movcs	r3, r2
 801e656:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801e658:	8af9      	ldrh	r1, [r7, #22]
 801e65a:	7bfb      	ldrb	r3, [r7, #15]
 801e65c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e660:	4618      	mov	r0, r3
 801e662:	f7fa feb5 	bl	80193d0 <pbuf_alloc>
 801e666:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e668:	693b      	ldr	r3, [r7, #16]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d101      	bne.n	801e672 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801e66e:	2300      	movs	r3, #0
 801e670:	e019      	b.n	801e6a6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801e672:	693b      	ldr	r3, [r7, #16]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d006      	beq.n	801e688 <tcp_pbuf_prealloc+0xb8>
 801e67a:	4b0d      	ldr	r3, [pc, #52]	@ (801e6b0 <tcp_pbuf_prealloc+0xe0>)
 801e67c:	f240 120b 	movw	r2, #267	@ 0x10b
 801e680:	490f      	ldr	r1, [pc, #60]	@ (801e6c0 <tcp_pbuf_prealloc+0xf0>)
 801e682:	480d      	ldr	r0, [pc, #52]	@ (801e6b8 <tcp_pbuf_prealloc+0xe8>)
 801e684:	f003 fb92 	bl	8021dac <iprintf>
  *oversize = p->len - length;
 801e688:	693b      	ldr	r3, [r7, #16]
 801e68a:	895a      	ldrh	r2, [r3, #10]
 801e68c:	89bb      	ldrh	r3, [r7, #12]
 801e68e:	1ad3      	subs	r3, r2, r3
 801e690:	b29a      	uxth	r2, r3
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e696:	693b      	ldr	r3, [r7, #16]
 801e698:	89ba      	ldrh	r2, [r7, #12]
 801e69a:	811a      	strh	r2, [r3, #8]
 801e69c:	693b      	ldr	r3, [r7, #16]
 801e69e:	891a      	ldrh	r2, [r3, #8]
 801e6a0:	693b      	ldr	r3, [r7, #16]
 801e6a2:	815a      	strh	r2, [r3, #10]
  return p;
 801e6a4:	693b      	ldr	r3, [r7, #16]
}
 801e6a6:	4618      	mov	r0, r3
 801e6a8:	3718      	adds	r7, #24
 801e6aa:	46bd      	mov	sp, r7
 801e6ac:	bd80      	pop	{r7, pc}
 801e6ae:	bf00      	nop
 801e6b0:	08027bcc 	.word	0x08027bcc
 801e6b4:	08027cb0 	.word	0x08027cb0
 801e6b8:	08027c4c 	.word	0x08027c4c
 801e6bc:	08027cd4 	.word	0x08027cd4
 801e6c0:	08027cf4 	.word	0x08027cf4

0801e6c4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801e6c4:	b580      	push	{r7, lr}
 801e6c6:	b082      	sub	sp, #8
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	6078      	str	r0, [r7, #4]
 801e6cc:	460b      	mov	r3, r1
 801e6ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d106      	bne.n	801e6e4 <tcp_write_checks+0x20>
 801e6d6:	4b33      	ldr	r3, [pc, #204]	@ (801e7a4 <tcp_write_checks+0xe0>)
 801e6d8:	f240 1233 	movw	r2, #307	@ 0x133
 801e6dc:	4932      	ldr	r1, [pc, #200]	@ (801e7a8 <tcp_write_checks+0xe4>)
 801e6de:	4833      	ldr	r0, [pc, #204]	@ (801e7ac <tcp_write_checks+0xe8>)
 801e6e0:	f003 fb64 	bl	8021dac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	7d1b      	ldrb	r3, [r3, #20]
 801e6e8:	2b04      	cmp	r3, #4
 801e6ea:	d00e      	beq.n	801e70a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801e6f0:	2b07      	cmp	r3, #7
 801e6f2:	d00a      	beq.n	801e70a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e6f8:	2b02      	cmp	r3, #2
 801e6fa:	d006      	beq.n	801e70a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801e700:	2b03      	cmp	r3, #3
 801e702:	d002      	beq.n	801e70a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801e704:	f06f 030a 	mvn.w	r3, #10
 801e708:	e048      	b.n	801e79c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801e70a:	887b      	ldrh	r3, [r7, #2]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d101      	bne.n	801e714 <tcp_write_checks+0x50>
    return ERR_OK;
 801e710:	2300      	movs	r3, #0
 801e712:	e043      	b.n	801e79c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801e71a:	887a      	ldrh	r2, [r7, #2]
 801e71c:	429a      	cmp	r2, r3
 801e71e:	d909      	bls.n	801e734 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	8b5b      	ldrh	r3, [r3, #26]
 801e724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e728:	b29a      	uxth	r2, r3
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801e72e:	f04f 33ff 	mov.w	r3, #4294967295
 801e732:	e033      	b.n	801e79c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e73a:	2b08      	cmp	r3, #8
 801e73c:	d909      	bls.n	801e752 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	8b5b      	ldrh	r3, [r3, #26]
 801e742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e746:	b29a      	uxth	r2, r3
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801e74c:	f04f 33ff 	mov.w	r3, #4294967295
 801e750:	e024      	b.n	801e79c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d00f      	beq.n	801e77c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e760:	2b00      	cmp	r3, #0
 801e762:	d11a      	bne.n	801e79a <tcp_write_checks+0xd6>
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d116      	bne.n	801e79a <tcp_write_checks+0xd6>
 801e76c:	4b0d      	ldr	r3, [pc, #52]	@ (801e7a4 <tcp_write_checks+0xe0>)
 801e76e:	f240 1255 	movw	r2, #341	@ 0x155
 801e772:	490f      	ldr	r1, [pc, #60]	@ (801e7b0 <tcp_write_checks+0xec>)
 801e774:	480d      	ldr	r0, [pc, #52]	@ (801e7ac <tcp_write_checks+0xe8>)
 801e776:	f003 fb19 	bl	8021dac <iprintf>
 801e77a:	e00e      	b.n	801e79a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e780:	2b00      	cmp	r3, #0
 801e782:	d103      	bne.n	801e78c <tcp_write_checks+0xc8>
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d006      	beq.n	801e79a <tcp_write_checks+0xd6>
 801e78c:	4b05      	ldr	r3, [pc, #20]	@ (801e7a4 <tcp_write_checks+0xe0>)
 801e78e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801e792:	4908      	ldr	r1, [pc, #32]	@ (801e7b4 <tcp_write_checks+0xf0>)
 801e794:	4805      	ldr	r0, [pc, #20]	@ (801e7ac <tcp_write_checks+0xe8>)
 801e796:	f003 fb09 	bl	8021dac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801e79a:	2300      	movs	r3, #0
}
 801e79c:	4618      	mov	r0, r3
 801e79e:	3708      	adds	r7, #8
 801e7a0:	46bd      	mov	sp, r7
 801e7a2:	bd80      	pop	{r7, pc}
 801e7a4:	08027bcc 	.word	0x08027bcc
 801e7a8:	08027d08 	.word	0x08027d08
 801e7ac:	08027c4c 	.word	0x08027c4c
 801e7b0:	08027d28 	.word	0x08027d28
 801e7b4:	08027d64 	.word	0x08027d64

0801e7b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801e7b8:	b590      	push	{r4, r7, lr}
 801e7ba:	b09b      	sub	sp, #108	@ 0x6c
 801e7bc:	af04      	add	r7, sp, #16
 801e7be:	60f8      	str	r0, [r7, #12]
 801e7c0:	60b9      	str	r1, [r7, #8]
 801e7c2:	4611      	mov	r1, r2
 801e7c4:	461a      	mov	r2, r3
 801e7c6:	460b      	mov	r3, r1
 801e7c8:	80fb      	strh	r3, [r7, #6]
 801e7ca:	4613      	mov	r3, r2
 801e7cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801e7d2:	2300      	movs	r3, #0
 801e7d4:	653b      	str	r3, [r7, #80]	@ 0x50
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e7da:	2300      	movs	r3, #0
 801e7dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e7de:	2300      	movs	r3, #0
 801e7e0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801e7e2:	2300      	movs	r3, #0
 801e7e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801e7e8:	2300      	movs	r3, #0
 801e7ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801e7f2:	2300      	movs	r3, #0
 801e7f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d109      	bne.n	801e814 <tcp_write+0x5c>
 801e800:	4ba5      	ldr	r3, [pc, #660]	@ (801ea98 <tcp_write+0x2e0>)
 801e802:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801e806:	49a5      	ldr	r1, [pc, #660]	@ (801ea9c <tcp_write+0x2e4>)
 801e808:	48a5      	ldr	r0, [pc, #660]	@ (801eaa0 <tcp_write+0x2e8>)
 801e80a:	f003 facf 	bl	8021dac <iprintf>
 801e80e:	f06f 030f 	mvn.w	r3, #15
 801e812:	e32c      	b.n	801ee6e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801e81a:	085b      	lsrs	r3, r3, #1
 801e81c:	b29a      	uxth	r2, r3
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e822:	4293      	cmp	r3, r2
 801e824:	bf28      	it	cs
 801e826:	4613      	movcs	r3, r2
 801e828:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801e82a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d102      	bne.n	801e836 <tcp_write+0x7e>
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e834:	e000      	b.n	801e838 <tcp_write+0x80>
 801e836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e838:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT_CORE_LOCKED();
 801e83a:	f7f1 fb31 	bl	800fea0 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e83e:	68bb      	ldr	r3, [r7, #8]
 801e840:	2b00      	cmp	r3, #0
 801e842:	d109      	bne.n	801e858 <tcp_write+0xa0>
 801e844:	4b94      	ldr	r3, [pc, #592]	@ (801ea98 <tcp_write+0x2e0>)
 801e846:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801e84a:	4996      	ldr	r1, [pc, #600]	@ (801eaa4 <tcp_write+0x2ec>)
 801e84c:	4894      	ldr	r0, [pc, #592]	@ (801eaa0 <tcp_write+0x2e8>)
 801e84e:	f003 faad 	bl	8021dac <iprintf>
 801e852:	f06f 030f 	mvn.w	r3, #15
 801e856:	e30a      	b.n	801ee6e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801e858:	88fb      	ldrh	r3, [r7, #6]
 801e85a:	4619      	mov	r1, r3
 801e85c:	68f8      	ldr	r0, [r7, #12]
 801e85e:	f7ff ff31 	bl	801e6c4 <tcp_write_checks>
 801e862:	4603      	mov	r3, r0
 801e864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801e868:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d002      	beq.n	801e876 <tcp_write+0xbe>
    return err;
 801e870:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801e874:	e2fb      	b.n	801ee6e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e87c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e880:	2300      	movs	r3, #0
 801e882:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801e886:	68fb      	ldr	r3, [r7, #12]
 801e888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f000 80f6 	beq.w	801ea7c <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e894:	653b      	str	r3, [r7, #80]	@ 0x50
 801e896:	e002      	b.n	801e89e <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 801e898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e89e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d1f8      	bne.n	801e898 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e8a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e8a8:	7a9b      	ldrb	r3, [r3, #10]
 801e8aa:	009b      	lsls	r3, r3, #2
 801e8ac:	b29b      	uxth	r3, r3
 801e8ae:	f003 0304 	and.w	r3, r3, #4
 801e8b2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e8b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e8b8:	891b      	ldrh	r3, [r3, #8]
 801e8ba:	4619      	mov	r1, r3
 801e8bc:	8c3b      	ldrh	r3, [r7, #32]
 801e8be:	440b      	add	r3, r1
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	da06      	bge.n	801e8d2 <tcp_write+0x11a>
 801e8c4:	4b74      	ldr	r3, [pc, #464]	@ (801ea98 <tcp_write+0x2e0>)
 801e8c6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801e8ca:	4977      	ldr	r1, [pc, #476]	@ (801eaa8 <tcp_write+0x2f0>)
 801e8cc:	4874      	ldr	r0, [pc, #464]	@ (801eaa0 <tcp_write+0x2e8>)
 801e8ce:	f003 fa6d 	bl	8021dac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e8d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e8d4:	891a      	ldrh	r2, [r3, #8]
 801e8d6:	8c3b      	ldrh	r3, [r7, #32]
 801e8d8:	4413      	add	r3, r2
 801e8da:	b29b      	uxth	r3, r3
 801e8dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e8de:	1ad3      	subs	r3, r2, r3
 801e8e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801e8e2:	68fb      	ldr	r3, [r7, #12]
 801e8e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801e8e8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801e8ea:	8a7b      	ldrh	r3, [r7, #18]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d026      	beq.n	801e93e <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e8f0:	8a7b      	ldrh	r3, [r7, #18]
 801e8f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801e8f4:	429a      	cmp	r2, r3
 801e8f6:	d206      	bcs.n	801e906 <tcp_write+0x14e>
 801e8f8:	4b67      	ldr	r3, [pc, #412]	@ (801ea98 <tcp_write+0x2e0>)
 801e8fa:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801e8fe:	496b      	ldr	r1, [pc, #428]	@ (801eaac <tcp_write+0x2f4>)
 801e900:	4867      	ldr	r0, [pc, #412]	@ (801eaa0 <tcp_write+0x2e8>)
 801e902:	f003 fa53 	bl	8021dac <iprintf>
      seg = last_unsent;
 801e906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e908:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e90a:	8a7b      	ldrh	r3, [r7, #18]
 801e90c:	88fa      	ldrh	r2, [r7, #6]
 801e90e:	4293      	cmp	r3, r2
 801e910:	bf28      	it	cs
 801e912:	4613      	movcs	r3, r2
 801e914:	b29b      	uxth	r3, r3
 801e916:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801e918:	4293      	cmp	r3, r2
 801e91a:	bf28      	it	cs
 801e91c:	4613      	movcs	r3, r2
 801e91e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801e920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e924:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e926:	4413      	add	r3, r2
 801e928:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801e92c:	8a7a      	ldrh	r2, [r7, #18]
 801e92e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e930:	1ad3      	subs	r3, r2, r3
 801e932:	b29b      	uxth	r3, r3
 801e934:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801e936:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801e938:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e93a:	1ad3      	subs	r3, r2, r3
 801e93c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e93e:	8a7b      	ldrh	r3, [r7, #18]
 801e940:	2b00      	cmp	r3, #0
 801e942:	d00b      	beq.n	801e95c <tcp_write+0x1a4>
 801e944:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e948:	88fb      	ldrh	r3, [r7, #6]
 801e94a:	429a      	cmp	r2, r3
 801e94c:	d006      	beq.n	801e95c <tcp_write+0x1a4>
 801e94e:	4b52      	ldr	r3, [pc, #328]	@ (801ea98 <tcp_write+0x2e0>)
 801e950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e954:	4956      	ldr	r1, [pc, #344]	@ (801eab0 <tcp_write+0x2f8>)
 801e956:	4852      	ldr	r0, [pc, #328]	@ (801eaa0 <tcp_write+0x2e8>)
 801e958:	f003 fa28 	bl	8021dac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e95c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e960:	88fb      	ldrh	r3, [r7, #6]
 801e962:	429a      	cmp	r2, r3
 801e964:	f080 8167 	bcs.w	801ec36 <tcp_write+0x47e>
 801e968:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	f000 8163 	beq.w	801ec36 <tcp_write+0x47e>
 801e970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e972:	891b      	ldrh	r3, [r3, #8]
 801e974:	2b00      	cmp	r3, #0
 801e976:	f000 815e 	beq.w	801ec36 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e97a:	88fa      	ldrh	r2, [r7, #6]
 801e97c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e980:	1ad2      	subs	r2, r2, r3
 801e982:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e984:	4293      	cmp	r3, r2
 801e986:	bfa8      	it	ge
 801e988:	4613      	movge	r3, r2
 801e98a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801e98c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e98e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e990:	797b      	ldrb	r3, [r7, #5]
 801e992:	f003 0301 	and.w	r3, r3, #1
 801e996:	2b00      	cmp	r3, #0
 801e998:	d027      	beq.n	801e9ea <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801e99a:	f107 0012 	add.w	r0, r7, #18
 801e99e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801e9a0:	8bf9      	ldrh	r1, [r7, #30]
 801e9a2:	2301      	movs	r3, #1
 801e9a4:	9302      	str	r3, [sp, #8]
 801e9a6:	797b      	ldrb	r3, [r7, #5]
 801e9a8:	9301      	str	r3, [sp, #4]
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	9300      	str	r3, [sp, #0]
 801e9ae:	4603      	mov	r3, r0
 801e9b0:	2000      	movs	r0, #0
 801e9b2:	f7ff fe0d 	bl	801e5d0 <tcp_pbuf_prealloc>
 801e9b6:	6578      	str	r0, [r7, #84]	@ 0x54
 801e9b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	f000 8225 	beq.w	801ee0a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801e9c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e9c2:	6858      	ldr	r0, [r3, #4]
 801e9c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e9c8:	68ba      	ldr	r2, [r7, #8]
 801e9ca:	4413      	add	r3, r2
 801e9cc:	8bfa      	ldrh	r2, [r7, #30]
 801e9ce:	4619      	mov	r1, r3
 801e9d0:	f003 fc8d 	bl	80222ee <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801e9d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e9d6:	f7fb f86b 	bl	8019ab0 <pbuf_clen>
 801e9da:	4603      	mov	r3, r0
 801e9dc:	461a      	mov	r2, r3
 801e9de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e9e2:	4413      	add	r3, r2
 801e9e4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801e9e8:	e041      	b.n	801ea6e <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801e9ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e9ec:	685b      	ldr	r3, [r3, #4]
 801e9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 801e9f0:	e002      	b.n	801e9f8 <tcp_write+0x240>
 801e9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	637b      	str	r3, [r7, #52]	@ 0x34
 801e9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9fa:	681b      	ldr	r3, [r3, #0]
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d1f8      	bne.n	801e9f2 <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ea00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea02:	7b1b      	ldrb	r3, [r3, #12]
 801ea04:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d115      	bne.n	801ea38 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ea0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea0e:	685b      	ldr	r3, [r3, #4]
 801ea10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ea12:	8952      	ldrh	r2, [r2, #10]
 801ea14:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ea16:	68ba      	ldr	r2, [r7, #8]
 801ea18:	429a      	cmp	r2, r3
 801ea1a:	d10d      	bne.n	801ea38 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ea1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d006      	beq.n	801ea32 <tcp_write+0x27a>
 801ea24:	4b1c      	ldr	r3, [pc, #112]	@ (801ea98 <tcp_write+0x2e0>)
 801ea26:	f240 2231 	movw	r2, #561	@ 0x231
 801ea2a:	4922      	ldr	r1, [pc, #136]	@ (801eab4 <tcp_write+0x2fc>)
 801ea2c:	481c      	ldr	r0, [pc, #112]	@ (801eaa0 <tcp_write+0x2e8>)
 801ea2e:	f003 f9bd 	bl	8021dac <iprintf>
          extendlen = seglen;
 801ea32:	8bfb      	ldrh	r3, [r7, #30]
 801ea34:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801ea36:	e01a      	b.n	801ea6e <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ea38:	8bfb      	ldrh	r3, [r7, #30]
 801ea3a:	2201      	movs	r2, #1
 801ea3c:	4619      	mov	r1, r3
 801ea3e:	2000      	movs	r0, #0
 801ea40:	f7fa fcc6 	bl	80193d0 <pbuf_alloc>
 801ea44:	6578      	str	r0, [r7, #84]	@ 0x54
 801ea46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	f000 81e0 	beq.w	801ee0e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ea4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea52:	68ba      	ldr	r2, [r7, #8]
 801ea54:	441a      	add	r2, r3
 801ea56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ea58:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ea5a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801ea5c:	f7fb f828 	bl	8019ab0 <pbuf_clen>
 801ea60:	4603      	mov	r3, r0
 801ea62:	461a      	mov	r2, r3
 801ea64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ea68:	4413      	add	r3, r2
 801ea6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ea6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea72:	8bfb      	ldrh	r3, [r7, #30]
 801ea74:	4413      	add	r3, r2
 801ea76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801ea7a:	e0dc      	b.n	801ec36 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	f000 80d7 	beq.w	801ec36 <tcp_write+0x47e>
 801ea88:	4b03      	ldr	r3, [pc, #12]	@ (801ea98 <tcp_write+0x2e0>)
 801ea8a:	f240 224a 	movw	r2, #586	@ 0x24a
 801ea8e:	490a      	ldr	r1, [pc, #40]	@ (801eab8 <tcp_write+0x300>)
 801ea90:	4803      	ldr	r0, [pc, #12]	@ (801eaa0 <tcp_write+0x2e8>)
 801ea92:	f003 f98b 	bl	8021dac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ea96:	e0ce      	b.n	801ec36 <tcp_write+0x47e>
 801ea98:	08027bcc 	.word	0x08027bcc
 801ea9c:	08027d98 	.word	0x08027d98
 801eaa0:	08027c4c 	.word	0x08027c4c
 801eaa4:	08027db0 	.word	0x08027db0
 801eaa8:	08027de4 	.word	0x08027de4
 801eaac:	08027dfc 	.word	0x08027dfc
 801eab0:	08027e1c 	.word	0x08027e1c
 801eab4:	08027e3c 	.word	0x08027e3c
 801eab8:	08027e68 	.word	0x08027e68
    struct pbuf *p;
    u16_t left = len - pos;
 801eabc:	88fa      	ldrh	r2, [r7, #6]
 801eabe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801eac2:	1ad3      	subs	r3, r2, r3
 801eac4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801eac6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eaca:	b29b      	uxth	r3, r3
 801eacc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801eace:	1ad3      	subs	r3, r2, r3
 801ead0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ead2:	8b7a      	ldrh	r2, [r7, #26]
 801ead4:	8bbb      	ldrh	r3, [r7, #28]
 801ead6:	4293      	cmp	r3, r2
 801ead8:	bf28      	it	cs
 801eada:	4613      	movcs	r3, r2
 801eadc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801eade:	797b      	ldrb	r3, [r7, #5]
 801eae0:	f003 0301 	and.w	r3, r3, #1
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d036      	beq.n	801eb56 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801eae8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eaec:	b29a      	uxth	r2, r3
 801eaee:	8b3b      	ldrh	r3, [r7, #24]
 801eaf0:	4413      	add	r3, r2
 801eaf2:	b299      	uxth	r1, r3
 801eaf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	bf0c      	ite	eq
 801eafa:	2301      	moveq	r3, #1
 801eafc:	2300      	movne	r3, #0
 801eafe:	b2db      	uxtb	r3, r3
 801eb00:	f107 0012 	add.w	r0, r7, #18
 801eb04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801eb06:	9302      	str	r3, [sp, #8]
 801eb08:	797b      	ldrb	r3, [r7, #5]
 801eb0a:	9301      	str	r3, [sp, #4]
 801eb0c:	68fb      	ldr	r3, [r7, #12]
 801eb0e:	9300      	str	r3, [sp, #0]
 801eb10:	4603      	mov	r3, r0
 801eb12:	2036      	movs	r0, #54	@ 0x36
 801eb14:	f7ff fd5c 	bl	801e5d0 <tcp_pbuf_prealloc>
 801eb18:	6338      	str	r0, [r7, #48]	@ 0x30
 801eb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	f000 8178 	beq.w	801ee12 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801eb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb24:	895b      	ldrh	r3, [r3, #10]
 801eb26:	8b3a      	ldrh	r2, [r7, #24]
 801eb28:	429a      	cmp	r2, r3
 801eb2a:	d906      	bls.n	801eb3a <tcp_write+0x382>
 801eb2c:	4b8c      	ldr	r3, [pc, #560]	@ (801ed60 <tcp_write+0x5a8>)
 801eb2e:	f240 2266 	movw	r2, #614	@ 0x266
 801eb32:	498c      	ldr	r1, [pc, #560]	@ (801ed64 <tcp_write+0x5ac>)
 801eb34:	488c      	ldr	r0, [pc, #560]	@ (801ed68 <tcp_write+0x5b0>)
 801eb36:	f003 f939 	bl	8021dac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801eb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb3c:	685a      	ldr	r2, [r3, #4]
 801eb3e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eb42:	18d0      	adds	r0, r2, r3
 801eb44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801eb48:	68ba      	ldr	r2, [r7, #8]
 801eb4a:	4413      	add	r3, r2
 801eb4c:	8b3a      	ldrh	r2, [r7, #24]
 801eb4e:	4619      	mov	r1, r3
 801eb50:	f003 fbcd 	bl	80222ee <memcpy>
 801eb54:	e02f      	b.n	801ebb6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801eb56:	8a7b      	ldrh	r3, [r7, #18]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d006      	beq.n	801eb6a <tcp_write+0x3b2>
 801eb5c:	4b80      	ldr	r3, [pc, #512]	@ (801ed60 <tcp_write+0x5a8>)
 801eb5e:	f240 2271 	movw	r2, #625	@ 0x271
 801eb62:	4982      	ldr	r1, [pc, #520]	@ (801ed6c <tcp_write+0x5b4>)
 801eb64:	4880      	ldr	r0, [pc, #512]	@ (801ed68 <tcp_write+0x5b0>)
 801eb66:	f003 f921 	bl	8021dac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801eb6a:	8b3b      	ldrh	r3, [r7, #24]
 801eb6c:	2201      	movs	r2, #1
 801eb6e:	4619      	mov	r1, r3
 801eb70:	2036      	movs	r0, #54	@ 0x36
 801eb72:	f7fa fc2d 	bl	80193d0 <pbuf_alloc>
 801eb76:	6178      	str	r0, [r7, #20]
 801eb78:	697b      	ldr	r3, [r7, #20]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	f000 814b 	beq.w	801ee16 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801eb80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801eb84:	68ba      	ldr	r2, [r7, #8]
 801eb86:	441a      	add	r2, r3
 801eb88:	697b      	ldr	r3, [r7, #20]
 801eb8a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801eb8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eb90:	b29b      	uxth	r3, r3
 801eb92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801eb96:	4619      	mov	r1, r3
 801eb98:	2036      	movs	r0, #54	@ 0x36
 801eb9a:	f7fa fc19 	bl	80193d0 <pbuf_alloc>
 801eb9e:	6338      	str	r0, [r7, #48]	@ 0x30
 801eba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d103      	bne.n	801ebae <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801eba6:	6978      	ldr	r0, [r7, #20]
 801eba8:	f7fa fef4 	bl	8019994 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801ebac:	e136      	b.n	801ee1c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801ebae:	6979      	ldr	r1, [r7, #20]
 801ebb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ebb2:	f7fa ffbd 	bl	8019b30 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801ebb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ebb8:	f7fa ff7a 	bl	8019ab0 <pbuf_clen>
 801ebbc:	4603      	mov	r3, r0
 801ebbe:	461a      	mov	r2, r3
 801ebc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ebc4:	4413      	add	r3, r2
 801ebc6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801ebca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ebce:	2b09      	cmp	r3, #9
 801ebd0:	d903      	bls.n	801ebda <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801ebd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ebd4:	f7fa fede 	bl	8019994 <pbuf_free>
      goto memerr;
 801ebd8:	e120      	b.n	801ee1c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801ebda:	68fb      	ldr	r3, [r7, #12]
 801ebdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801ebde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ebe2:	441a      	add	r2, r3
 801ebe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ebe8:	9300      	str	r3, [sp, #0]
 801ebea:	4613      	mov	r3, r2
 801ebec:	2200      	movs	r2, #0
 801ebee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ebf0:	68f8      	ldr	r0, [r7, #12]
 801ebf2:	f7ff fc51 	bl	801e498 <tcp_create_segment>
 801ebf6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801ebf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	f000 810d 	beq.w	801ee1a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801ec00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d102      	bne.n	801ec0c <tcp_write+0x454>
      queue = seg;
 801ec06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec08:	647b      	str	r3, [r7, #68]	@ 0x44
 801ec0a:	e00c      	b.n	801ec26 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ec0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d106      	bne.n	801ec20 <tcp_write+0x468>
 801ec12:	4b53      	ldr	r3, [pc, #332]	@ (801ed60 <tcp_write+0x5a8>)
 801ec14:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801ec18:	4955      	ldr	r1, [pc, #340]	@ (801ed70 <tcp_write+0x5b8>)
 801ec1a:	4853      	ldr	r0, [pc, #332]	@ (801ed68 <tcp_write+0x5b0>)
 801ec1c:	f003 f8c6 	bl	8021dac <iprintf>
      prev_seg->next = seg;
 801ec20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ec24:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801ec26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ec28:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801ec2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ec2e:	8b3b      	ldrh	r3, [r7, #24]
 801ec30:	4413      	add	r3, r2
 801ec32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801ec36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ec3a:	88fb      	ldrh	r3, [r7, #6]
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	f4ff af3d 	bcc.w	801eabc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801ec42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d02c      	beq.n	801eca2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801ec48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ec4a:	685b      	ldr	r3, [r3, #4]
 801ec4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ec4e:	e01e      	b.n	801ec8e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801ec50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec52:	891a      	ldrh	r2, [r3, #8]
 801ec54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ec56:	4413      	add	r3, r2
 801ec58:	b29a      	uxth	r2, r3
 801ec5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec5c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801ec5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d110      	bne.n	801ec88 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec68:	685b      	ldr	r3, [r3, #4]
 801ec6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ec6c:	8952      	ldrh	r2, [r2, #10]
 801ec6e:	4413      	add	r3, r2
 801ec70:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ec72:	68b9      	ldr	r1, [r7, #8]
 801ec74:	4618      	mov	r0, r3
 801ec76:	f003 fb3a 	bl	80222ee <memcpy>
        p->len += oversize_used;
 801ec7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec7c:	895a      	ldrh	r2, [r3, #10]
 801ec7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ec80:	4413      	add	r3, r2
 801ec82:	b29a      	uxth	r2, r3
 801ec84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec86:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ec88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ec8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d1dd      	bne.n	801ec50 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801ec94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ec96:	891a      	ldrh	r2, [r3, #8]
 801ec98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ec9a:	4413      	add	r3, r2
 801ec9c:	b29a      	uxth	r2, r3
 801ec9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eca0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801eca2:	8a7a      	ldrh	r2, [r7, #18]
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801ecaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d018      	beq.n	801ece2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ecb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d106      	bne.n	801ecc4 <tcp_write+0x50c>
 801ecb6:	4b2a      	ldr	r3, [pc, #168]	@ (801ed60 <tcp_write+0x5a8>)
 801ecb8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801ecbc:	492d      	ldr	r1, [pc, #180]	@ (801ed74 <tcp_write+0x5bc>)
 801ecbe:	482a      	ldr	r0, [pc, #168]	@ (801ed68 <tcp_write+0x5b0>)
 801ecc0:	f003 f874 	bl	8021dac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ecc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ecc6:	685b      	ldr	r3, [r3, #4]
 801ecc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ecca:	4618      	mov	r0, r3
 801eccc:	f7fa ff30 	bl	8019b30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801ecd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ecd2:	891a      	ldrh	r2, [r3, #8]
 801ecd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ecd6:	891b      	ldrh	r3, [r3, #8]
 801ecd8:	4413      	add	r3, r2
 801ecda:	b29a      	uxth	r2, r3
 801ecdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ecde:	811a      	strh	r2, [r3, #8]
 801ece0:	e037      	b.n	801ed52 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801ece2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	d034      	beq.n	801ed52 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ece8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	d003      	beq.n	801ecf6 <tcp_write+0x53e>
 801ecee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ecf0:	685b      	ldr	r3, [r3, #4]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d106      	bne.n	801ed04 <tcp_write+0x54c>
 801ecf6:	4b1a      	ldr	r3, [pc, #104]	@ (801ed60 <tcp_write+0x5a8>)
 801ecf8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801ecfc:	491e      	ldr	r1, [pc, #120]	@ (801ed78 <tcp_write+0x5c0>)
 801ecfe:	481a      	ldr	r0, [pc, #104]	@ (801ed68 <tcp_write+0x5b0>)
 801ed00:	f003 f854 	bl	8021dac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ed04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed06:	685b      	ldr	r3, [r3, #4]
 801ed08:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ed0a:	e009      	b.n	801ed20 <tcp_write+0x568>
      p->tot_len += extendlen;
 801ed0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed0e:	891a      	ldrh	r2, [r3, #8]
 801ed10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ed12:	4413      	add	r3, r2
 801ed14:	b29a      	uxth	r2, r3
 801ed16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed18:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ed1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ed20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d1f1      	bne.n	801ed0c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801ed28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed2a:	891a      	ldrh	r2, [r3, #8]
 801ed2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ed2e:	4413      	add	r3, r2
 801ed30:	b29a      	uxth	r2, r3
 801ed32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed34:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed38:	895a      	ldrh	r2, [r3, #10]
 801ed3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ed3c:	4413      	add	r3, r2
 801ed3e:	b29a      	uxth	r2, r3
 801ed40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed42:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ed44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed46:	891a      	ldrh	r2, [r3, #8]
 801ed48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ed4a:	4413      	add	r3, r2
 801ed4c:	b29a      	uxth	r2, r3
 801ed4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed50:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ed52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d111      	bne.n	801ed7c <tcp_write+0x5c4>
    pcb->unsent = queue;
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ed5c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801ed5e:	e010      	b.n	801ed82 <tcp_write+0x5ca>
 801ed60:	08027bcc 	.word	0x08027bcc
 801ed64:	08027e98 	.word	0x08027e98
 801ed68:	08027c4c 	.word	0x08027c4c
 801ed6c:	08027ed8 	.word	0x08027ed8
 801ed70:	08027ee8 	.word	0x08027ee8
 801ed74:	08027efc 	.word	0x08027efc
 801ed78:	08027f34 	.word	0x08027f34
  } else {
    last_unsent->next = queue;
 801ed7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ed7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ed80:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801ed86:	88fb      	ldrh	r3, [r7, #6]
 801ed88:	441a      	add	r2, r3
 801ed8a:	68fb      	ldr	r3, [r7, #12]
 801ed8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801ed94:	88fb      	ldrh	r3, [r7, #6]
 801ed96:	1ad3      	subs	r3, r2, r3
 801ed98:	b29a      	uxth	r2, r3
 801ed9a:	68fb      	ldr	r3, [r7, #12]
 801ed9c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801eda0:	68fb      	ldr	r3, [r7, #12]
 801eda2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801eda6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d00e      	beq.n	801edd2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801edb4:	68fb      	ldr	r3, [r7, #12]
 801edb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d10a      	bne.n	801edd2 <tcp_write+0x61a>
 801edbc:	68fb      	ldr	r3, [r7, #12]
 801edbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d106      	bne.n	801edd2 <tcp_write+0x61a>
 801edc4:	4b2c      	ldr	r3, [pc, #176]	@ (801ee78 <tcp_write+0x6c0>)
 801edc6:	f240 3212 	movw	r2, #786	@ 0x312
 801edca:	492c      	ldr	r1, [pc, #176]	@ (801ee7c <tcp_write+0x6c4>)
 801edcc:	482c      	ldr	r0, [pc, #176]	@ (801ee80 <tcp_write+0x6c8>)
 801edce:	f002 ffed 	bl	8021dac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801edd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d016      	beq.n	801ee06 <tcp_write+0x64e>
 801edd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edda:	68db      	ldr	r3, [r3, #12]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d012      	beq.n	801ee06 <tcp_write+0x64e>
 801ede0:	797b      	ldrb	r3, [r7, #5]
 801ede2:	f003 0302 	and.w	r3, r3, #2
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d10d      	bne.n	801ee06 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801edea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edec:	68db      	ldr	r3, [r3, #12]
 801edee:	899b      	ldrh	r3, [r3, #12]
 801edf0:	b29c      	uxth	r4, r3
 801edf2:	2008      	movs	r0, #8
 801edf4:	f7f4 ffea 	bl	8013dcc <lwip_htons>
 801edf8:	4603      	mov	r3, r0
 801edfa:	461a      	mov	r2, r3
 801edfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edfe:	68db      	ldr	r3, [r3, #12]
 801ee00:	4322      	orrs	r2, r4
 801ee02:	b292      	uxth	r2, r2
 801ee04:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801ee06:	2300      	movs	r3, #0
 801ee08:	e031      	b.n	801ee6e <tcp_write+0x6b6>
          goto memerr;
 801ee0a:	bf00      	nop
 801ee0c:	e006      	b.n	801ee1c <tcp_write+0x664>
            goto memerr;
 801ee0e:	bf00      	nop
 801ee10:	e004      	b.n	801ee1c <tcp_write+0x664>
        goto memerr;
 801ee12:	bf00      	nop
 801ee14:	e002      	b.n	801ee1c <tcp_write+0x664>
        goto memerr;
 801ee16:	bf00      	nop
 801ee18:	e000      	b.n	801ee1c <tcp_write+0x664>
      goto memerr;
 801ee1a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	8b5b      	ldrh	r3, [r3, #26]
 801ee20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee24:	b29a      	uxth	r2, r3
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801ee2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d002      	beq.n	801ee36 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801ee30:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801ee32:	f7fa fdaf 	bl	8019994 <pbuf_free>
  }
  if (queue != NULL) {
 801ee36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d002      	beq.n	801ee42 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801ee3c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ee3e:	f7fc fb7b 	bl	801b538 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d00e      	beq.n	801ee6a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d10a      	bne.n	801ee6a <tcp_write+0x6b2>
 801ee54:	68fb      	ldr	r3, [r7, #12]
 801ee56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d106      	bne.n	801ee6a <tcp_write+0x6b2>
 801ee5c:	4b06      	ldr	r3, [pc, #24]	@ (801ee78 <tcp_write+0x6c0>)
 801ee5e:	f240 3227 	movw	r2, #807	@ 0x327
 801ee62:	4906      	ldr	r1, [pc, #24]	@ (801ee7c <tcp_write+0x6c4>)
 801ee64:	4806      	ldr	r0, [pc, #24]	@ (801ee80 <tcp_write+0x6c8>)
 801ee66:	f002 ffa1 	bl	8021dac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801ee6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ee6e:	4618      	mov	r0, r3
 801ee70:	375c      	adds	r7, #92	@ 0x5c
 801ee72:	46bd      	mov	sp, r7
 801ee74:	bd90      	pop	{r4, r7, pc}
 801ee76:	bf00      	nop
 801ee78:	08027bcc 	.word	0x08027bcc
 801ee7c:	08027f6c 	.word	0x08027f6c
 801ee80:	08027c4c 	.word	0x08027c4c

0801ee84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801ee84:	b590      	push	{r4, r7, lr}
 801ee86:	b08b      	sub	sp, #44	@ 0x2c
 801ee88:	af02      	add	r7, sp, #8
 801ee8a:	6078      	str	r0, [r7, #4]
 801ee8c:	460b      	mov	r3, r1
 801ee8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ee90:	2300      	movs	r3, #0
 801ee92:	61fb      	str	r3, [r7, #28]
 801ee94:	2300      	movs	r3, #0
 801ee96:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ee98:	2300      	movs	r3, #0
 801ee9a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d106      	bne.n	801eeb0 <tcp_split_unsent_seg+0x2c>
 801eea2:	4b95      	ldr	r3, [pc, #596]	@ (801f0f8 <tcp_split_unsent_seg+0x274>)
 801eea4:	f240 324b 	movw	r2, #843	@ 0x34b
 801eea8:	4994      	ldr	r1, [pc, #592]	@ (801f0fc <tcp_split_unsent_seg+0x278>)
 801eeaa:	4895      	ldr	r0, [pc, #596]	@ (801f100 <tcp_split_unsent_seg+0x27c>)
 801eeac:	f002 ff7e 	bl	8021dac <iprintf>

  useg = pcb->unsent;
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eeb4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801eeb6:	697b      	ldr	r3, [r7, #20]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d102      	bne.n	801eec2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801eebc:	f04f 33ff 	mov.w	r3, #4294967295
 801eec0:	e116      	b.n	801f0f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801eec2:	887b      	ldrh	r3, [r7, #2]
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d109      	bne.n	801eedc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801eec8:	4b8b      	ldr	r3, [pc, #556]	@ (801f0f8 <tcp_split_unsent_seg+0x274>)
 801eeca:	f240 3253 	movw	r2, #851	@ 0x353
 801eece:	498d      	ldr	r1, [pc, #564]	@ (801f104 <tcp_split_unsent_seg+0x280>)
 801eed0:	488b      	ldr	r0, [pc, #556]	@ (801f100 <tcp_split_unsent_seg+0x27c>)
 801eed2:	f002 ff6b 	bl	8021dac <iprintf>
    return ERR_VAL;
 801eed6:	f06f 0305 	mvn.w	r3, #5
 801eeda:	e109      	b.n	801f0f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801eedc:	697b      	ldr	r3, [r7, #20]
 801eede:	891b      	ldrh	r3, [r3, #8]
 801eee0:	887a      	ldrh	r2, [r7, #2]
 801eee2:	429a      	cmp	r2, r3
 801eee4:	d301      	bcc.n	801eeea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801eee6:	2300      	movs	r3, #0
 801eee8:	e102      	b.n	801f0f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801eeee:	887a      	ldrh	r2, [r7, #2]
 801eef0:	429a      	cmp	r2, r3
 801eef2:	d906      	bls.n	801ef02 <tcp_split_unsent_seg+0x7e>
 801eef4:	4b80      	ldr	r3, [pc, #512]	@ (801f0f8 <tcp_split_unsent_seg+0x274>)
 801eef6:	f240 325b 	movw	r2, #859	@ 0x35b
 801eefa:	4983      	ldr	r1, [pc, #524]	@ (801f108 <tcp_split_unsent_seg+0x284>)
 801eefc:	4880      	ldr	r0, [pc, #512]	@ (801f100 <tcp_split_unsent_seg+0x27c>)
 801eefe:	f002 ff55 	bl	8021dac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ef02:	697b      	ldr	r3, [r7, #20]
 801ef04:	891b      	ldrh	r3, [r3, #8]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d106      	bne.n	801ef18 <tcp_split_unsent_seg+0x94>
 801ef0a:	4b7b      	ldr	r3, [pc, #492]	@ (801f0f8 <tcp_split_unsent_seg+0x274>)
 801ef0c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801ef10:	497e      	ldr	r1, [pc, #504]	@ (801f10c <tcp_split_unsent_seg+0x288>)
 801ef12:	487b      	ldr	r0, [pc, #492]	@ (801f100 <tcp_split_unsent_seg+0x27c>)
 801ef14:	f002 ff4a 	bl	8021dac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ef18:	697b      	ldr	r3, [r7, #20]
 801ef1a:	7a9b      	ldrb	r3, [r3, #10]
 801ef1c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ef1e:	7bfb      	ldrb	r3, [r7, #15]
 801ef20:	009b      	lsls	r3, r3, #2
 801ef22:	b2db      	uxtb	r3, r3
 801ef24:	f003 0304 	and.w	r3, r3, #4
 801ef28:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ef2a:	697b      	ldr	r3, [r7, #20]
 801ef2c:	891a      	ldrh	r2, [r3, #8]
 801ef2e:	887b      	ldrh	r3, [r7, #2]
 801ef30:	1ad3      	subs	r3, r2, r3
 801ef32:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ef34:	7bbb      	ldrb	r3, [r7, #14]
 801ef36:	b29a      	uxth	r2, r3
 801ef38:	89bb      	ldrh	r3, [r7, #12]
 801ef3a:	4413      	add	r3, r2
 801ef3c:	b29b      	uxth	r3, r3
 801ef3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ef42:	4619      	mov	r1, r3
 801ef44:	2036      	movs	r0, #54	@ 0x36
 801ef46:	f7fa fa43 	bl	80193d0 <pbuf_alloc>
 801ef4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ef4c:	693b      	ldr	r3, [r7, #16]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	f000 80b7 	beq.w	801f0c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ef54:	697b      	ldr	r3, [r7, #20]
 801ef56:	685b      	ldr	r3, [r3, #4]
 801ef58:	891a      	ldrh	r2, [r3, #8]
 801ef5a:	697b      	ldr	r3, [r7, #20]
 801ef5c:	891b      	ldrh	r3, [r3, #8]
 801ef5e:	1ad3      	subs	r3, r2, r3
 801ef60:	b29a      	uxth	r2, r3
 801ef62:	887b      	ldrh	r3, [r7, #2]
 801ef64:	4413      	add	r3, r2
 801ef66:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ef68:	697b      	ldr	r3, [r7, #20]
 801ef6a:	6858      	ldr	r0, [r3, #4]
 801ef6c:	693b      	ldr	r3, [r7, #16]
 801ef6e:	685a      	ldr	r2, [r3, #4]
 801ef70:	7bbb      	ldrb	r3, [r7, #14]
 801ef72:	18d1      	adds	r1, r2, r3
 801ef74:	897b      	ldrh	r3, [r7, #10]
 801ef76:	89ba      	ldrh	r2, [r7, #12]
 801ef78:	f7fa ff12 	bl	8019da0 <pbuf_copy_partial>
 801ef7c:	4603      	mov	r3, r0
 801ef7e:	461a      	mov	r2, r3
 801ef80:	89bb      	ldrh	r3, [r7, #12]
 801ef82:	4293      	cmp	r3, r2
 801ef84:	f040 809f 	bne.w	801f0c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ef88:	697b      	ldr	r3, [r7, #20]
 801ef8a:	68db      	ldr	r3, [r3, #12]
 801ef8c:	899b      	ldrh	r3, [r3, #12]
 801ef8e:	b29b      	uxth	r3, r3
 801ef90:	4618      	mov	r0, r3
 801ef92:	f7f4 ff1b 	bl	8013dcc <lwip_htons>
 801ef96:	4603      	mov	r3, r0
 801ef98:	b2db      	uxtb	r3, r3
 801ef9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ef9e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801efa0:	2300      	movs	r3, #0
 801efa2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801efa4:	7efb      	ldrb	r3, [r7, #27]
 801efa6:	f003 0308 	and.w	r3, r3, #8
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d007      	beq.n	801efbe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801efae:	7efb      	ldrb	r3, [r7, #27]
 801efb0:	f023 0308 	bic.w	r3, r3, #8
 801efb4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801efb6:	7ebb      	ldrb	r3, [r7, #26]
 801efb8:	f043 0308 	orr.w	r3, r3, #8
 801efbc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801efbe:	7efb      	ldrb	r3, [r7, #27]
 801efc0:	f003 0301 	and.w	r3, r3, #1
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d007      	beq.n	801efd8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801efc8:	7efb      	ldrb	r3, [r7, #27]
 801efca:	f023 0301 	bic.w	r3, r3, #1
 801efce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801efd0:	7ebb      	ldrb	r3, [r7, #26]
 801efd2:	f043 0301 	orr.w	r3, r3, #1
 801efd6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801efd8:	697b      	ldr	r3, [r7, #20]
 801efda:	68db      	ldr	r3, [r3, #12]
 801efdc:	685b      	ldr	r3, [r3, #4]
 801efde:	4618      	mov	r0, r3
 801efe0:	f7f4 ff09 	bl	8013df6 <lwip_htonl>
 801efe4:	4602      	mov	r2, r0
 801efe6:	887b      	ldrh	r3, [r7, #2]
 801efe8:	18d1      	adds	r1, r2, r3
 801efea:	7eba      	ldrb	r2, [r7, #26]
 801efec:	7bfb      	ldrb	r3, [r7, #15]
 801efee:	9300      	str	r3, [sp, #0]
 801eff0:	460b      	mov	r3, r1
 801eff2:	6939      	ldr	r1, [r7, #16]
 801eff4:	6878      	ldr	r0, [r7, #4]
 801eff6:	f7ff fa4f 	bl	801e498 <tcp_create_segment>
 801effa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801effc:	69fb      	ldr	r3, [r7, #28]
 801effe:	2b00      	cmp	r3, #0
 801f000:	d063      	beq.n	801f0ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f002:	697b      	ldr	r3, [r7, #20]
 801f004:	685b      	ldr	r3, [r3, #4]
 801f006:	4618      	mov	r0, r3
 801f008:	f7fa fd52 	bl	8019ab0 <pbuf_clen>
 801f00c:	4603      	mov	r3, r0
 801f00e:	461a      	mov	r2, r3
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f016:	1a9b      	subs	r3, r3, r2
 801f018:	b29a      	uxth	r2, r3
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f020:	697b      	ldr	r3, [r7, #20]
 801f022:	6858      	ldr	r0, [r3, #4]
 801f024:	697b      	ldr	r3, [r7, #20]
 801f026:	685b      	ldr	r3, [r3, #4]
 801f028:	891a      	ldrh	r2, [r3, #8]
 801f02a:	89bb      	ldrh	r3, [r7, #12]
 801f02c:	1ad3      	subs	r3, r2, r3
 801f02e:	b29b      	uxth	r3, r3
 801f030:	4619      	mov	r1, r3
 801f032:	f7fa fb2b 	bl	801968c <pbuf_realloc>
  useg->len -= remainder;
 801f036:	697b      	ldr	r3, [r7, #20]
 801f038:	891a      	ldrh	r2, [r3, #8]
 801f03a:	89bb      	ldrh	r3, [r7, #12]
 801f03c:	1ad3      	subs	r3, r2, r3
 801f03e:	b29a      	uxth	r2, r3
 801f040:	697b      	ldr	r3, [r7, #20]
 801f042:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f044:	697b      	ldr	r3, [r7, #20]
 801f046:	68db      	ldr	r3, [r3, #12]
 801f048:	899b      	ldrh	r3, [r3, #12]
 801f04a:	b29c      	uxth	r4, r3
 801f04c:	7efb      	ldrb	r3, [r7, #27]
 801f04e:	b29b      	uxth	r3, r3
 801f050:	4618      	mov	r0, r3
 801f052:	f7f4 febb 	bl	8013dcc <lwip_htons>
 801f056:	4603      	mov	r3, r0
 801f058:	461a      	mov	r2, r3
 801f05a:	697b      	ldr	r3, [r7, #20]
 801f05c:	68db      	ldr	r3, [r3, #12]
 801f05e:	4322      	orrs	r2, r4
 801f060:	b292      	uxth	r2, r2
 801f062:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f064:	697b      	ldr	r3, [r7, #20]
 801f066:	685b      	ldr	r3, [r3, #4]
 801f068:	4618      	mov	r0, r3
 801f06a:	f7fa fd21 	bl	8019ab0 <pbuf_clen>
 801f06e:	4603      	mov	r3, r0
 801f070:	461a      	mov	r2, r3
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f078:	4413      	add	r3, r2
 801f07a:	b29a      	uxth	r2, r3
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f082:	69fb      	ldr	r3, [r7, #28]
 801f084:	685b      	ldr	r3, [r3, #4]
 801f086:	4618      	mov	r0, r3
 801f088:	f7fa fd12 	bl	8019ab0 <pbuf_clen>
 801f08c:	4603      	mov	r3, r0
 801f08e:	461a      	mov	r2, r3
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f096:	4413      	add	r3, r2
 801f098:	b29a      	uxth	r2, r3
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801f0a0:	697b      	ldr	r3, [r7, #20]
 801f0a2:	681a      	ldr	r2, [r3, #0]
 801f0a4:	69fb      	ldr	r3, [r7, #28]
 801f0a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801f0a8:	697b      	ldr	r3, [r7, #20]
 801f0aa:	69fa      	ldr	r2, [r7, #28]
 801f0ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801f0ae:	69fb      	ldr	r3, [r7, #28]
 801f0b0:	681b      	ldr	r3, [r3, #0]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d103      	bne.n	801f0be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	2200      	movs	r2, #0
 801f0ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801f0be:	2300      	movs	r3, #0
 801f0c0:	e016      	b.n	801f0f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801f0c2:	bf00      	nop
 801f0c4:	e002      	b.n	801f0cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f0c6:	bf00      	nop
 801f0c8:	e000      	b.n	801f0cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f0ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801f0cc:	69fb      	ldr	r3, [r7, #28]
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	d006      	beq.n	801f0e0 <tcp_split_unsent_seg+0x25c>
 801f0d2:	4b09      	ldr	r3, [pc, #36]	@ (801f0f8 <tcp_split_unsent_seg+0x274>)
 801f0d4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801f0d8:	490d      	ldr	r1, [pc, #52]	@ (801f110 <tcp_split_unsent_seg+0x28c>)
 801f0da:	4809      	ldr	r0, [pc, #36]	@ (801f100 <tcp_split_unsent_seg+0x27c>)
 801f0dc:	f002 fe66 	bl	8021dac <iprintf>
  if (p != NULL) {
 801f0e0:	693b      	ldr	r3, [r7, #16]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d002      	beq.n	801f0ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801f0e6:	6938      	ldr	r0, [r7, #16]
 801f0e8:	f7fa fc54 	bl	8019994 <pbuf_free>
  }

  return ERR_MEM;
 801f0ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	3724      	adds	r7, #36	@ 0x24
 801f0f4:	46bd      	mov	sp, r7
 801f0f6:	bd90      	pop	{r4, r7, pc}
 801f0f8:	08027bcc 	.word	0x08027bcc
 801f0fc:	08027f8c 	.word	0x08027f8c
 801f100:	08027c4c 	.word	0x08027c4c
 801f104:	08027fb0 	.word	0x08027fb0
 801f108:	08027fd4 	.word	0x08027fd4
 801f10c:	08027fe4 	.word	0x08027fe4
 801f110:	08027ff4 	.word	0x08027ff4

0801f114 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801f114:	b590      	push	{r4, r7, lr}
 801f116:	b085      	sub	sp, #20
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d106      	bne.n	801f130 <tcp_send_fin+0x1c>
 801f122:	4b21      	ldr	r3, [pc, #132]	@ (801f1a8 <tcp_send_fin+0x94>)
 801f124:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801f128:	4920      	ldr	r1, [pc, #128]	@ (801f1ac <tcp_send_fin+0x98>)
 801f12a:	4821      	ldr	r0, [pc, #132]	@ (801f1b0 <tcp_send_fin+0x9c>)
 801f12c:	f002 fe3e 	bl	8021dac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f134:	2b00      	cmp	r3, #0
 801f136:	d02e      	beq.n	801f196 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f13c:	60fb      	str	r3, [r7, #12]
 801f13e:	e002      	b.n	801f146 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d1f8      	bne.n	801f140 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	68db      	ldr	r3, [r3, #12]
 801f152:	899b      	ldrh	r3, [r3, #12]
 801f154:	b29b      	uxth	r3, r3
 801f156:	4618      	mov	r0, r3
 801f158:	f7f4 fe38 	bl	8013dcc <lwip_htons>
 801f15c:	4603      	mov	r3, r0
 801f15e:	b2db      	uxtb	r3, r3
 801f160:	f003 0307 	and.w	r3, r3, #7
 801f164:	2b00      	cmp	r3, #0
 801f166:	d116      	bne.n	801f196 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f168:	68fb      	ldr	r3, [r7, #12]
 801f16a:	68db      	ldr	r3, [r3, #12]
 801f16c:	899b      	ldrh	r3, [r3, #12]
 801f16e:	b29c      	uxth	r4, r3
 801f170:	2001      	movs	r0, #1
 801f172:	f7f4 fe2b 	bl	8013dcc <lwip_htons>
 801f176:	4603      	mov	r3, r0
 801f178:	461a      	mov	r2, r3
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	68db      	ldr	r3, [r3, #12]
 801f17e:	4322      	orrs	r2, r4
 801f180:	b292      	uxth	r2, r2
 801f182:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	8b5b      	ldrh	r3, [r3, #26]
 801f188:	f043 0320 	orr.w	r3, r3, #32
 801f18c:	b29a      	uxth	r2, r3
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801f192:	2300      	movs	r3, #0
 801f194:	e004      	b.n	801f1a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f196:	2101      	movs	r1, #1
 801f198:	6878      	ldr	r0, [r7, #4]
 801f19a:	f000 f80b 	bl	801f1b4 <tcp_enqueue_flags>
 801f19e:	4603      	mov	r3, r0
}
 801f1a0:	4618      	mov	r0, r3
 801f1a2:	3714      	adds	r7, #20
 801f1a4:	46bd      	mov	sp, r7
 801f1a6:	bd90      	pop	{r4, r7, pc}
 801f1a8:	08027bcc 	.word	0x08027bcc
 801f1ac:	08028000 	.word	0x08028000
 801f1b0:	08027c4c 	.word	0x08027c4c

0801f1b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801f1b4:	b580      	push	{r7, lr}
 801f1b6:	b08a      	sub	sp, #40	@ 0x28
 801f1b8:	af02      	add	r7, sp, #8
 801f1ba:	6078      	str	r0, [r7, #4]
 801f1bc:	460b      	mov	r3, r1
 801f1be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801f1c4:	2300      	movs	r3, #0
 801f1c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f1c8:	78fb      	ldrb	r3, [r7, #3]
 801f1ca:	f003 0303 	and.w	r3, r3, #3
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d106      	bne.n	801f1e0 <tcp_enqueue_flags+0x2c>
 801f1d2:	4b67      	ldr	r3, [pc, #412]	@ (801f370 <tcp_enqueue_flags+0x1bc>)
 801f1d4:	f240 4211 	movw	r2, #1041	@ 0x411
 801f1d8:	4966      	ldr	r1, [pc, #408]	@ (801f374 <tcp_enqueue_flags+0x1c0>)
 801f1da:	4867      	ldr	r0, [pc, #412]	@ (801f378 <tcp_enqueue_flags+0x1c4>)
 801f1dc:	f002 fde6 	bl	8021dac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d106      	bne.n	801f1f4 <tcp_enqueue_flags+0x40>
 801f1e6:	4b62      	ldr	r3, [pc, #392]	@ (801f370 <tcp_enqueue_flags+0x1bc>)
 801f1e8:	f240 4213 	movw	r2, #1043	@ 0x413
 801f1ec:	4963      	ldr	r1, [pc, #396]	@ (801f37c <tcp_enqueue_flags+0x1c8>)
 801f1ee:	4862      	ldr	r0, [pc, #392]	@ (801f378 <tcp_enqueue_flags+0x1c4>)
 801f1f0:	f002 fddc 	bl	8021dac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801f1f4:	78fb      	ldrb	r3, [r7, #3]
 801f1f6:	f003 0302 	and.w	r3, r3, #2
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d001      	beq.n	801f202 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801f1fe:	2301      	movs	r3, #1
 801f200:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f202:	7ffb      	ldrb	r3, [r7, #31]
 801f204:	009b      	lsls	r3, r3, #2
 801f206:	b2db      	uxtb	r3, r3
 801f208:	f003 0304 	and.w	r3, r3, #4
 801f20c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f20e:	7dfb      	ldrb	r3, [r7, #23]
 801f210:	b29b      	uxth	r3, r3
 801f212:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f216:	4619      	mov	r1, r3
 801f218:	2036      	movs	r0, #54	@ 0x36
 801f21a:	f7fa f8d9 	bl	80193d0 <pbuf_alloc>
 801f21e:	6138      	str	r0, [r7, #16]
 801f220:	693b      	ldr	r3, [r7, #16]
 801f222:	2b00      	cmp	r3, #0
 801f224:	d109      	bne.n	801f23a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	8b5b      	ldrh	r3, [r3, #26]
 801f22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f22e:	b29a      	uxth	r2, r3
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801f234:	f04f 33ff 	mov.w	r3, #4294967295
 801f238:	e095      	b.n	801f366 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f23a:	693b      	ldr	r3, [r7, #16]
 801f23c:	895a      	ldrh	r2, [r3, #10]
 801f23e:	7dfb      	ldrb	r3, [r7, #23]
 801f240:	b29b      	uxth	r3, r3
 801f242:	429a      	cmp	r2, r3
 801f244:	d206      	bcs.n	801f254 <tcp_enqueue_flags+0xa0>
 801f246:	4b4a      	ldr	r3, [pc, #296]	@ (801f370 <tcp_enqueue_flags+0x1bc>)
 801f248:	f240 4239 	movw	r2, #1081	@ 0x439
 801f24c:	494c      	ldr	r1, [pc, #304]	@ (801f380 <tcp_enqueue_flags+0x1cc>)
 801f24e:	484a      	ldr	r0, [pc, #296]	@ (801f378 <tcp_enqueue_flags+0x1c4>)
 801f250:	f002 fdac 	bl	8021dac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801f258:	78fa      	ldrb	r2, [r7, #3]
 801f25a:	7ffb      	ldrb	r3, [r7, #31]
 801f25c:	9300      	str	r3, [sp, #0]
 801f25e:	460b      	mov	r3, r1
 801f260:	6939      	ldr	r1, [r7, #16]
 801f262:	6878      	ldr	r0, [r7, #4]
 801f264:	f7ff f918 	bl	801e498 <tcp_create_segment>
 801f268:	60f8      	str	r0, [r7, #12]
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d109      	bne.n	801f284 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	8b5b      	ldrh	r3, [r3, #26]
 801f274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f278:	b29a      	uxth	r2, r3
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801f27e:	f04f 33ff 	mov.w	r3, #4294967295
 801f282:	e070      	b.n	801f366 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	68db      	ldr	r3, [r3, #12]
 801f288:	f003 0303 	and.w	r3, r3, #3
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d006      	beq.n	801f29e <tcp_enqueue_flags+0xea>
 801f290:	4b37      	ldr	r3, [pc, #220]	@ (801f370 <tcp_enqueue_flags+0x1bc>)
 801f292:	f240 4242 	movw	r2, #1090	@ 0x442
 801f296:	493b      	ldr	r1, [pc, #236]	@ (801f384 <tcp_enqueue_flags+0x1d0>)
 801f298:	4837      	ldr	r0, [pc, #220]	@ (801f378 <tcp_enqueue_flags+0x1c4>)
 801f29a:	f002 fd87 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	891b      	ldrh	r3, [r3, #8]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d006      	beq.n	801f2b4 <tcp_enqueue_flags+0x100>
 801f2a6:	4b32      	ldr	r3, [pc, #200]	@ (801f370 <tcp_enqueue_flags+0x1bc>)
 801f2a8:	f240 4243 	movw	r2, #1091	@ 0x443
 801f2ac:	4936      	ldr	r1, [pc, #216]	@ (801f388 <tcp_enqueue_flags+0x1d4>)
 801f2ae:	4832      	ldr	r0, [pc, #200]	@ (801f378 <tcp_enqueue_flags+0x1c4>)
 801f2b0:	f002 fd7c 	bl	8021dac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d103      	bne.n	801f2c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	68fa      	ldr	r2, [r7, #12]
 801f2c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f2c2:	e00d      	b.n	801f2e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f2c8:	61bb      	str	r3, [r7, #24]
 801f2ca:	e002      	b.n	801f2d2 <tcp_enqueue_flags+0x11e>
 801f2cc:	69bb      	ldr	r3, [r7, #24]
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	61bb      	str	r3, [r7, #24]
 801f2d2:	69bb      	ldr	r3, [r7, #24]
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d1f8      	bne.n	801f2cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801f2da:	69bb      	ldr	r3, [r7, #24]
 801f2dc:	68fa      	ldr	r2, [r7, #12]
 801f2de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	2200      	movs	r2, #0
 801f2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801f2e8:	78fb      	ldrb	r3, [r7, #3]
 801f2ea:	f003 0302 	and.w	r3, r3, #2
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d104      	bne.n	801f2fc <tcp_enqueue_flags+0x148>
 801f2f2:	78fb      	ldrb	r3, [r7, #3]
 801f2f4:	f003 0301 	and.w	r3, r3, #1
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d004      	beq.n	801f306 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f300:	1c5a      	adds	r2, r3, #1
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801f306:	78fb      	ldrb	r3, [r7, #3]
 801f308:	f003 0301 	and.w	r3, r3, #1
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d006      	beq.n	801f31e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801f310:	687b      	ldr	r3, [r7, #4]
 801f312:	8b5b      	ldrh	r3, [r3, #26]
 801f314:	f043 0320 	orr.w	r3, r3, #32
 801f318:	b29a      	uxth	r2, r3
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f31e:	68fb      	ldr	r3, [r7, #12]
 801f320:	685b      	ldr	r3, [r3, #4]
 801f322:	4618      	mov	r0, r3
 801f324:	f7fa fbc4 	bl	8019ab0 <pbuf_clen>
 801f328:	4603      	mov	r3, r0
 801f32a:	461a      	mov	r2, r3
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f332:	4413      	add	r3, r2
 801f334:	b29a      	uxth	r2, r3
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f342:	2b00      	cmp	r3, #0
 801f344:	d00e      	beq.n	801f364 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d10a      	bne.n	801f364 <tcp_enqueue_flags+0x1b0>
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f352:	2b00      	cmp	r3, #0
 801f354:	d106      	bne.n	801f364 <tcp_enqueue_flags+0x1b0>
 801f356:	4b06      	ldr	r3, [pc, #24]	@ (801f370 <tcp_enqueue_flags+0x1bc>)
 801f358:	f240 4265 	movw	r2, #1125	@ 0x465
 801f35c:	490b      	ldr	r1, [pc, #44]	@ (801f38c <tcp_enqueue_flags+0x1d8>)
 801f35e:	4806      	ldr	r0, [pc, #24]	@ (801f378 <tcp_enqueue_flags+0x1c4>)
 801f360:	f002 fd24 	bl	8021dac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801f364:	2300      	movs	r3, #0
}
 801f366:	4618      	mov	r0, r3
 801f368:	3720      	adds	r7, #32
 801f36a:	46bd      	mov	sp, r7
 801f36c:	bd80      	pop	{r7, pc}
 801f36e:	bf00      	nop
 801f370:	08027bcc 	.word	0x08027bcc
 801f374:	0802801c 	.word	0x0802801c
 801f378:	08027c4c 	.word	0x08027c4c
 801f37c:	08028074 	.word	0x08028074
 801f380:	08028094 	.word	0x08028094
 801f384:	080280d0 	.word	0x080280d0
 801f388:	080280e8 	.word	0x080280e8
 801f38c:	08028114 	.word	0x08028114

0801f390 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801f390:	b5b0      	push	{r4, r5, r7, lr}
 801f392:	b08a      	sub	sp, #40	@ 0x28
 801f394:	af00      	add	r7, sp, #0
 801f396:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 801f398:	f7f0 fd82 	bl	800fea0 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	d106      	bne.n	801f3b0 <tcp_output+0x20>
 801f3a2:	4b8a      	ldr	r3, [pc, #552]	@ (801f5cc <tcp_output+0x23c>)
 801f3a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801f3a8:	4989      	ldr	r1, [pc, #548]	@ (801f5d0 <tcp_output+0x240>)
 801f3aa:	488a      	ldr	r0, [pc, #552]	@ (801f5d4 <tcp_output+0x244>)
 801f3ac:	f002 fcfe 	bl	8021dac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	7d1b      	ldrb	r3, [r3, #20]
 801f3b4:	2b01      	cmp	r3, #1
 801f3b6:	d106      	bne.n	801f3c6 <tcp_output+0x36>
 801f3b8:	4b84      	ldr	r3, [pc, #528]	@ (801f5cc <tcp_output+0x23c>)
 801f3ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801f3be:	4986      	ldr	r1, [pc, #536]	@ (801f5d8 <tcp_output+0x248>)
 801f3c0:	4884      	ldr	r0, [pc, #528]	@ (801f5d4 <tcp_output+0x244>)
 801f3c2:	f002 fcf3 	bl	8021dac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801f3c6:	4b85      	ldr	r3, [pc, #532]	@ (801f5dc <tcp_output+0x24c>)
 801f3c8:	681b      	ldr	r3, [r3, #0]
 801f3ca:	687a      	ldr	r2, [r7, #4]
 801f3cc:	429a      	cmp	r2, r3
 801f3ce:	d101      	bne.n	801f3d4 <tcp_output+0x44>
    return ERR_OK;
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	e1ce      	b.n	801f772 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801f3da:	687b      	ldr	r3, [r7, #4]
 801f3dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	bf28      	it	cs
 801f3e4:	4613      	movcs	r3, r2
 801f3e6:	b29b      	uxth	r3, r3
 801f3e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f3ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801f3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d10b      	bne.n	801f40e <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	8b5b      	ldrh	r3, [r3, #26]
 801f3fa:	f003 0302 	and.w	r3, r3, #2
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	f000 81aa 	beq.w	801f758 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801f404:	6878      	ldr	r0, [r7, #4]
 801f406:	f000 fdcb 	bl	801ffa0 <tcp_send_empty_ack>
 801f40a:	4603      	mov	r3, r0
 801f40c:	e1b1      	b.n	801f772 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801f40e:	6879      	ldr	r1, [r7, #4]
 801f410:	687b      	ldr	r3, [r7, #4]
 801f412:	3304      	adds	r3, #4
 801f414:	461a      	mov	r2, r3
 801f416:	6878      	ldr	r0, [r7, #4]
 801f418:	f7ff f822 	bl	801e460 <tcp_route>
 801f41c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801f41e:	697b      	ldr	r3, [r7, #20]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d102      	bne.n	801f42a <tcp_output+0x9a>
    return ERR_RTE;
 801f424:	f06f 0303 	mvn.w	r3, #3
 801f428:	e1a3      	b.n	801f772 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d003      	beq.n	801f438 <tcp_output+0xa8>
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	2b00      	cmp	r3, #0
 801f436:	d111      	bne.n	801f45c <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801f438:	697b      	ldr	r3, [r7, #20]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d002      	beq.n	801f444 <tcp_output+0xb4>
 801f43e:	697b      	ldr	r3, [r7, #20]
 801f440:	3304      	adds	r3, #4
 801f442:	e000      	b.n	801f446 <tcp_output+0xb6>
 801f444:	2300      	movs	r3, #0
 801f446:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801f448:	693b      	ldr	r3, [r7, #16]
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d102      	bne.n	801f454 <tcp_output+0xc4>
      return ERR_RTE;
 801f44e:	f06f 0303 	mvn.w	r3, #3
 801f452:	e18e      	b.n	801f772 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801f454:	693b      	ldr	r3, [r7, #16]
 801f456:	681a      	ldr	r2, [r3, #0]
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f45e:	68db      	ldr	r3, [r3, #12]
 801f460:	685b      	ldr	r3, [r3, #4]
 801f462:	4618      	mov	r0, r3
 801f464:	f7f4 fcc7 	bl	8013df6 <lwip_htonl>
 801f468:	4602      	mov	r2, r0
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f46e:	1ad3      	subs	r3, r2, r3
 801f470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f472:	8912      	ldrh	r2, [r2, #8]
 801f474:	4413      	add	r3, r2
 801f476:	69ba      	ldr	r2, [r7, #24]
 801f478:	429a      	cmp	r2, r3
 801f47a:	d227      	bcs.n	801f4cc <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f482:	461a      	mov	r2, r3
 801f484:	69bb      	ldr	r3, [r7, #24]
 801f486:	4293      	cmp	r3, r2
 801f488:	d114      	bne.n	801f4b4 <tcp_output+0x124>
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d110      	bne.n	801f4b4 <tcp_output+0x124>
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d10b      	bne.n	801f4b4 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	2200      	movs	r2, #0
 801f4a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	2201      	movs	r2, #1
 801f4a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	2200      	movs	r2, #0
 801f4b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	8b5b      	ldrh	r3, [r3, #26]
 801f4b8:	f003 0302 	and.w	r3, r3, #2
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	f000 814d 	beq.w	801f75c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801f4c2:	6878      	ldr	r0, [r7, #4]
 801f4c4:	f000 fd6c 	bl	801ffa0 <tcp_send_empty_ack>
 801f4c8:	4603      	mov	r3, r0
 801f4ca:	e152      	b.n	801f772 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	2200      	movs	r2, #0
 801f4d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f4d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801f4da:	6a3b      	ldr	r3, [r7, #32]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	f000 811c 	beq.w	801f71a <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801f4e2:	e002      	b.n	801f4ea <tcp_output+0x15a>
 801f4e4:	6a3b      	ldr	r3, [r7, #32]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	623b      	str	r3, [r7, #32]
 801f4ea:	6a3b      	ldr	r3, [r7, #32]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	d1f8      	bne.n	801f4e4 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801f4f2:	e112      	b.n	801f71a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801f4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4f6:	68db      	ldr	r3, [r3, #12]
 801f4f8:	899b      	ldrh	r3, [r3, #12]
 801f4fa:	b29b      	uxth	r3, r3
 801f4fc:	4618      	mov	r0, r3
 801f4fe:	f7f4 fc65 	bl	8013dcc <lwip_htons>
 801f502:	4603      	mov	r3, r0
 801f504:	b2db      	uxtb	r3, r3
 801f506:	f003 0304 	and.w	r3, r3, #4
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d006      	beq.n	801f51c <tcp_output+0x18c>
 801f50e:	4b2f      	ldr	r3, [pc, #188]	@ (801f5cc <tcp_output+0x23c>)
 801f510:	f240 5236 	movw	r2, #1334	@ 0x536
 801f514:	4932      	ldr	r1, [pc, #200]	@ (801f5e0 <tcp_output+0x250>)
 801f516:	482f      	ldr	r0, [pc, #188]	@ (801f5d4 <tcp_output+0x244>)
 801f518:	f002 fc48 	bl	8021dac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f520:	2b00      	cmp	r3, #0
 801f522:	d01f      	beq.n	801f564 <tcp_output+0x1d4>
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	8b5b      	ldrh	r3, [r3, #26]
 801f528:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d119      	bne.n	801f564 <tcp_output+0x1d4>
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f534:	2b00      	cmp	r3, #0
 801f536:	d00b      	beq.n	801f550 <tcp_output+0x1c0>
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d110      	bne.n	801f564 <tcp_output+0x1d4>
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f546:	891a      	ldrh	r2, [r3, #8]
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f54c:	429a      	cmp	r2, r3
 801f54e:	d209      	bcs.n	801f564 <tcp_output+0x1d4>
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801f556:	2b00      	cmp	r3, #0
 801f558:	d004      	beq.n	801f564 <tcp_output+0x1d4>
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f560:	2b08      	cmp	r3, #8
 801f562:	d901      	bls.n	801f568 <tcp_output+0x1d8>
 801f564:	2301      	movs	r3, #1
 801f566:	e000      	b.n	801f56a <tcp_output+0x1da>
 801f568:	2300      	movs	r3, #0
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d106      	bne.n	801f57c <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	8b5b      	ldrh	r3, [r3, #26]
 801f572:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f576:	2b00      	cmp	r3, #0
 801f578:	f000 80e4 	beq.w	801f744 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	7d1b      	ldrb	r3, [r3, #20]
 801f580:	2b02      	cmp	r3, #2
 801f582:	d00d      	beq.n	801f5a0 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f586:	68db      	ldr	r3, [r3, #12]
 801f588:	899b      	ldrh	r3, [r3, #12]
 801f58a:	b29c      	uxth	r4, r3
 801f58c:	2010      	movs	r0, #16
 801f58e:	f7f4 fc1d 	bl	8013dcc <lwip_htons>
 801f592:	4603      	mov	r3, r0
 801f594:	461a      	mov	r2, r3
 801f596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f598:	68db      	ldr	r3, [r3, #12]
 801f59a:	4322      	orrs	r2, r4
 801f59c:	b292      	uxth	r2, r2
 801f59e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801f5a0:	697a      	ldr	r2, [r7, #20]
 801f5a2:	6879      	ldr	r1, [r7, #4]
 801f5a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5a6:	f000 f909 	bl	801f7bc <tcp_output_segment>
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801f5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d016      	beq.n	801f5e4 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	8b5b      	ldrh	r3, [r3, #26]
 801f5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f5be:	b29a      	uxth	r2, r3
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	835a      	strh	r2, [r3, #26]
      return err;
 801f5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f5c8:	e0d3      	b.n	801f772 <tcp_output+0x3e2>
 801f5ca:	bf00      	nop
 801f5cc:	08027bcc 	.word	0x08027bcc
 801f5d0:	0802813c 	.word	0x0802813c
 801f5d4:	08027c4c 	.word	0x08027c4c
 801f5d8:	08028154 	.word	0x08028154
 801f5dc:	240126e8 	.word	0x240126e8
 801f5e0:	0802817c 	.word	0x0802817c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801f5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5e6:	681a      	ldr	r2, [r3, #0]
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	7d1b      	ldrb	r3, [r3, #20]
 801f5f0:	2b02      	cmp	r3, #2
 801f5f2:	d006      	beq.n	801f602 <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	8b5b      	ldrh	r3, [r3, #26]
 801f5f8:	f023 0303 	bic.w	r3, r3, #3
 801f5fc:	b29a      	uxth	r2, r3
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f604:	68db      	ldr	r3, [r3, #12]
 801f606:	685b      	ldr	r3, [r3, #4]
 801f608:	4618      	mov	r0, r3
 801f60a:	f7f4 fbf4 	bl	8013df6 <lwip_htonl>
 801f60e:	4604      	mov	r4, r0
 801f610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f612:	891b      	ldrh	r3, [r3, #8]
 801f614:	461d      	mov	r5, r3
 801f616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f618:	68db      	ldr	r3, [r3, #12]
 801f61a:	899b      	ldrh	r3, [r3, #12]
 801f61c:	b29b      	uxth	r3, r3
 801f61e:	4618      	mov	r0, r3
 801f620:	f7f4 fbd4 	bl	8013dcc <lwip_htons>
 801f624:	4603      	mov	r3, r0
 801f626:	b2db      	uxtb	r3, r3
 801f628:	f003 0303 	and.w	r3, r3, #3
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d001      	beq.n	801f634 <tcp_output+0x2a4>
 801f630:	2301      	movs	r3, #1
 801f632:	e000      	b.n	801f636 <tcp_output+0x2a6>
 801f634:	2300      	movs	r3, #0
 801f636:	442b      	add	r3, r5
 801f638:	4423      	add	r3, r4
 801f63a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f640:	68bb      	ldr	r3, [r7, #8]
 801f642:	1ad3      	subs	r3, r2, r3
 801f644:	2b00      	cmp	r3, #0
 801f646:	da02      	bge.n	801f64e <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	68ba      	ldr	r2, [r7, #8]
 801f64c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801f64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f650:	891b      	ldrh	r3, [r3, #8]
 801f652:	461c      	mov	r4, r3
 801f654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f656:	68db      	ldr	r3, [r3, #12]
 801f658:	899b      	ldrh	r3, [r3, #12]
 801f65a:	b29b      	uxth	r3, r3
 801f65c:	4618      	mov	r0, r3
 801f65e:	f7f4 fbb5 	bl	8013dcc <lwip_htons>
 801f662:	4603      	mov	r3, r0
 801f664:	b2db      	uxtb	r3, r3
 801f666:	f003 0303 	and.w	r3, r3, #3
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d001      	beq.n	801f672 <tcp_output+0x2e2>
 801f66e:	2301      	movs	r3, #1
 801f670:	e000      	b.n	801f674 <tcp_output+0x2e4>
 801f672:	2300      	movs	r3, #0
 801f674:	4423      	add	r3, r4
 801f676:	2b00      	cmp	r3, #0
 801f678:	d049      	beq.n	801f70e <tcp_output+0x37e>
      seg->next = NULL;
 801f67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f67c:	2200      	movs	r2, #0
 801f67e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f684:	2b00      	cmp	r3, #0
 801f686:	d105      	bne.n	801f694 <tcp_output+0x304>
        pcb->unacked = seg;
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f68c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801f68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f690:	623b      	str	r3, [r7, #32]
 801f692:	e03f      	b.n	801f714 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f696:	68db      	ldr	r3, [r3, #12]
 801f698:	685b      	ldr	r3, [r3, #4]
 801f69a:	4618      	mov	r0, r3
 801f69c:	f7f4 fbab 	bl	8013df6 <lwip_htonl>
 801f6a0:	4604      	mov	r4, r0
 801f6a2:	6a3b      	ldr	r3, [r7, #32]
 801f6a4:	68db      	ldr	r3, [r3, #12]
 801f6a6:	685b      	ldr	r3, [r3, #4]
 801f6a8:	4618      	mov	r0, r3
 801f6aa:	f7f4 fba4 	bl	8013df6 <lwip_htonl>
 801f6ae:	4603      	mov	r3, r0
 801f6b0:	1ae3      	subs	r3, r4, r3
 801f6b2:	2b00      	cmp	r3, #0
 801f6b4:	da24      	bge.n	801f700 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	3370      	adds	r3, #112	@ 0x70
 801f6ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f6bc:	e002      	b.n	801f6c4 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801f6be:	69fb      	ldr	r3, [r7, #28]
 801f6c0:	681b      	ldr	r3, [r3, #0]
 801f6c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f6c4:	69fb      	ldr	r3, [r7, #28]
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d011      	beq.n	801f6f0 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f6cc:	69fb      	ldr	r3, [r7, #28]
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	68db      	ldr	r3, [r3, #12]
 801f6d2:	685b      	ldr	r3, [r3, #4]
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	f7f4 fb8e 	bl	8013df6 <lwip_htonl>
 801f6da:	4604      	mov	r4, r0
 801f6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6de:	68db      	ldr	r3, [r3, #12]
 801f6e0:	685b      	ldr	r3, [r3, #4]
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	f7f4 fb87 	bl	8013df6 <lwip_htonl>
 801f6e8:	4603      	mov	r3, r0
 801f6ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	dbe6      	blt.n	801f6be <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 801f6f0:	69fb      	ldr	r3, [r7, #28]
 801f6f2:	681a      	ldr	r2, [r3, #0]
 801f6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801f6f8:	69fb      	ldr	r3, [r7, #28]
 801f6fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f6fc:	601a      	str	r2, [r3, #0]
 801f6fe:	e009      	b.n	801f714 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801f700:	6a3b      	ldr	r3, [r7, #32]
 801f702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f704:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801f706:	6a3b      	ldr	r3, [r7, #32]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	623b      	str	r3, [r7, #32]
 801f70c:	e002      	b.n	801f714 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801f70e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f710:	f7fb ff27 	bl	801b562 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f718:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801f71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d012      	beq.n	801f746 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f722:	68db      	ldr	r3, [r3, #12]
 801f724:	685b      	ldr	r3, [r3, #4]
 801f726:	4618      	mov	r0, r3
 801f728:	f7f4 fb65 	bl	8013df6 <lwip_htonl>
 801f72c:	4602      	mov	r2, r0
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f732:	1ad3      	subs	r3, r2, r3
 801f734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f736:	8912      	ldrh	r2, [r2, #8]
 801f738:	4413      	add	r3, r2
  while (seg != NULL &&
 801f73a:	69ba      	ldr	r2, [r7, #24]
 801f73c:	429a      	cmp	r2, r3
 801f73e:	f4bf aed9 	bcs.w	801f4f4 <tcp_output+0x164>
 801f742:	e000      	b.n	801f746 <tcp_output+0x3b6>
      break;
 801f744:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	d108      	bne.n	801f760 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	2200      	movs	r2, #0
 801f752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801f756:	e004      	b.n	801f762 <tcp_output+0x3d2>
    goto output_done;
 801f758:	bf00      	nop
 801f75a:	e002      	b.n	801f762 <tcp_output+0x3d2>
    goto output_done;
 801f75c:	bf00      	nop
 801f75e:	e000      	b.n	801f762 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801f760:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	8b5b      	ldrh	r3, [r3, #26]
 801f766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f76a:	b29a      	uxth	r2, r3
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801f770:	2300      	movs	r3, #0
}
 801f772:	4618      	mov	r0, r3
 801f774:	3728      	adds	r7, #40	@ 0x28
 801f776:	46bd      	mov	sp, r7
 801f778:	bdb0      	pop	{r4, r5, r7, pc}
 801f77a:	bf00      	nop

0801f77c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b082      	sub	sp, #8
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d106      	bne.n	801f798 <tcp_output_segment_busy+0x1c>
 801f78a:	4b09      	ldr	r3, [pc, #36]	@ (801f7b0 <tcp_output_segment_busy+0x34>)
 801f78c:	f240 529a 	movw	r2, #1434	@ 0x59a
 801f790:	4908      	ldr	r1, [pc, #32]	@ (801f7b4 <tcp_output_segment_busy+0x38>)
 801f792:	4809      	ldr	r0, [pc, #36]	@ (801f7b8 <tcp_output_segment_busy+0x3c>)
 801f794:	f002 fb0a 	bl	8021dac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	685b      	ldr	r3, [r3, #4]
 801f79c:	7b9b      	ldrb	r3, [r3, #14]
 801f79e:	2b01      	cmp	r3, #1
 801f7a0:	d001      	beq.n	801f7a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801f7a2:	2301      	movs	r3, #1
 801f7a4:	e000      	b.n	801f7a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801f7a6:	2300      	movs	r3, #0
}
 801f7a8:	4618      	mov	r0, r3
 801f7aa:	3708      	adds	r7, #8
 801f7ac:	46bd      	mov	sp, r7
 801f7ae:	bd80      	pop	{r7, pc}
 801f7b0:	08027bcc 	.word	0x08027bcc
 801f7b4:	08028194 	.word	0x08028194
 801f7b8:	08027c4c 	.word	0x08027c4c

0801f7bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801f7bc:	b5b0      	push	{r4, r5, r7, lr}
 801f7be:	b08c      	sub	sp, #48	@ 0x30
 801f7c0:	af04      	add	r7, sp, #16
 801f7c2:	60f8      	str	r0, [r7, #12]
 801f7c4:	60b9      	str	r1, [r7, #8]
 801f7c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d106      	bne.n	801f7dc <tcp_output_segment+0x20>
 801f7ce:	4b64      	ldr	r3, [pc, #400]	@ (801f960 <tcp_output_segment+0x1a4>)
 801f7d0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801f7d4:	4963      	ldr	r1, [pc, #396]	@ (801f964 <tcp_output_segment+0x1a8>)
 801f7d6:	4864      	ldr	r0, [pc, #400]	@ (801f968 <tcp_output_segment+0x1ac>)
 801f7d8:	f002 fae8 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801f7dc:	68bb      	ldr	r3, [r7, #8]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d106      	bne.n	801f7f0 <tcp_output_segment+0x34>
 801f7e2:	4b5f      	ldr	r3, [pc, #380]	@ (801f960 <tcp_output_segment+0x1a4>)
 801f7e4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801f7e8:	4960      	ldr	r1, [pc, #384]	@ (801f96c <tcp_output_segment+0x1b0>)
 801f7ea:	485f      	ldr	r0, [pc, #380]	@ (801f968 <tcp_output_segment+0x1ac>)
 801f7ec:	f002 fade 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d106      	bne.n	801f804 <tcp_output_segment+0x48>
 801f7f6:	4b5a      	ldr	r3, [pc, #360]	@ (801f960 <tcp_output_segment+0x1a4>)
 801f7f8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801f7fc:	495c      	ldr	r1, [pc, #368]	@ (801f970 <tcp_output_segment+0x1b4>)
 801f7fe:	485a      	ldr	r0, [pc, #360]	@ (801f968 <tcp_output_segment+0x1ac>)
 801f800:	f002 fad4 	bl	8021dac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801f804:	68f8      	ldr	r0, [r7, #12]
 801f806:	f7ff ffb9 	bl	801f77c <tcp_output_segment_busy>
 801f80a:	4603      	mov	r3, r0
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d001      	beq.n	801f814 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801f810:	2300      	movs	r3, #0
 801f812:	e0a1      	b.n	801f958 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f814:	68bb      	ldr	r3, [r7, #8]
 801f816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f818:	68fb      	ldr	r3, [r7, #12]
 801f81a:	68dc      	ldr	r4, [r3, #12]
 801f81c:	4610      	mov	r0, r2
 801f81e:	f7f4 faea 	bl	8013df6 <lwip_htonl>
 801f822:	4603      	mov	r3, r0
 801f824:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f826:	68bb      	ldr	r3, [r7, #8]
 801f828:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	68dc      	ldr	r4, [r3, #12]
 801f82e:	4610      	mov	r0, r2
 801f830:	f7f4 facc 	bl	8013dcc <lwip_htons>
 801f834:	4603      	mov	r3, r0
 801f836:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f838:	68bb      	ldr	r3, [r7, #8]
 801f83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f83c:	68ba      	ldr	r2, [r7, #8]
 801f83e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801f840:	441a      	add	r2, r3
 801f842:	68bb      	ldr	r3, [r7, #8]
 801f844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	68db      	ldr	r3, [r3, #12]
 801f84a:	3314      	adds	r3, #20
 801f84c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	7a9b      	ldrb	r3, [r3, #10]
 801f852:	f003 0301 	and.w	r3, r3, #1
 801f856:	2b00      	cmp	r3, #0
 801f858:	d015      	beq.n	801f886 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f85a:	68bb      	ldr	r3, [r7, #8]
 801f85c:	3304      	adds	r3, #4
 801f85e:	461a      	mov	r2, r3
 801f860:	6879      	ldr	r1, [r7, #4]
 801f862:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801f866:	f7fc fa33 	bl	801bcd0 <tcp_eff_send_mss_netif>
 801f86a:	4603      	mov	r3, r0
 801f86c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f86e:	8b7b      	ldrh	r3, [r7, #26]
 801f870:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801f874:	4618      	mov	r0, r3
 801f876:	f7f4 fabe 	bl	8013df6 <lwip_htonl>
 801f87a:	4602      	mov	r2, r0
 801f87c:	69fb      	ldr	r3, [r7, #28]
 801f87e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801f880:	69fb      	ldr	r3, [r7, #28]
 801f882:	3304      	adds	r3, #4
 801f884:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801f886:	68bb      	ldr	r3, [r7, #8]
 801f888:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	da02      	bge.n	801f896 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801f890:	68bb      	ldr	r3, [r7, #8]
 801f892:	2200      	movs	r2, #0
 801f894:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801f896:	68bb      	ldr	r3, [r7, #8]
 801f898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d10c      	bne.n	801f8b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801f89e:	4b35      	ldr	r3, [pc, #212]	@ (801f974 <tcp_output_segment+0x1b8>)
 801f8a0:	681a      	ldr	r2, [r3, #0]
 801f8a2:	68bb      	ldr	r3, [r7, #8]
 801f8a4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	68db      	ldr	r3, [r3, #12]
 801f8aa:	685b      	ldr	r3, [r3, #4]
 801f8ac:	4618      	mov	r0, r3
 801f8ae:	f7f4 faa2 	bl	8013df6 <lwip_htonl>
 801f8b2:	4602      	mov	r2, r0
 801f8b4:	68bb      	ldr	r3, [r7, #8]
 801f8b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f8b8:	68fb      	ldr	r3, [r7, #12]
 801f8ba:	68da      	ldr	r2, [r3, #12]
 801f8bc:	68fb      	ldr	r3, [r7, #12]
 801f8be:	685b      	ldr	r3, [r3, #4]
 801f8c0:	685b      	ldr	r3, [r3, #4]
 801f8c2:	1ad3      	subs	r3, r2, r3
 801f8c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801f8c6:	68fb      	ldr	r3, [r7, #12]
 801f8c8:	685b      	ldr	r3, [r3, #4]
 801f8ca:	8959      	ldrh	r1, [r3, #10]
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	685b      	ldr	r3, [r3, #4]
 801f8d0:	8b3a      	ldrh	r2, [r7, #24]
 801f8d2:	1a8a      	subs	r2, r1, r2
 801f8d4:	b292      	uxth	r2, r2
 801f8d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801f8d8:	68fb      	ldr	r3, [r7, #12]
 801f8da:	685b      	ldr	r3, [r3, #4]
 801f8dc:	8919      	ldrh	r1, [r3, #8]
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	685b      	ldr	r3, [r3, #4]
 801f8e2:	8b3a      	ldrh	r2, [r7, #24]
 801f8e4:	1a8a      	subs	r2, r1, r2
 801f8e6:	b292      	uxth	r2, r2
 801f8e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	685b      	ldr	r3, [r3, #4]
 801f8ee:	68fa      	ldr	r2, [r7, #12]
 801f8f0:	68d2      	ldr	r2, [r2, #12]
 801f8f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	68db      	ldr	r3, [r3, #12]
 801f8f8:	2200      	movs	r2, #0
 801f8fa:	741a      	strb	r2, [r3, #16]
 801f8fc:	2200      	movs	r2, #0
 801f8fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	68da      	ldr	r2, [r3, #12]
 801f904:	68fb      	ldr	r3, [r7, #12]
 801f906:	7a9b      	ldrb	r3, [r3, #10]
 801f908:	f003 0301 	and.w	r3, r3, #1
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d001      	beq.n	801f914 <tcp_output_segment+0x158>
 801f910:	2318      	movs	r3, #24
 801f912:	e000      	b.n	801f916 <tcp_output_segment+0x15a>
 801f914:	2314      	movs	r3, #20
 801f916:	4413      	add	r3, r2
 801f918:	69fa      	ldr	r2, [r7, #28]
 801f91a:	429a      	cmp	r2, r3
 801f91c:	d006      	beq.n	801f92c <tcp_output_segment+0x170>
 801f91e:	4b10      	ldr	r3, [pc, #64]	@ (801f960 <tcp_output_segment+0x1a4>)
 801f920:	f240 621c 	movw	r2, #1564	@ 0x61c
 801f924:	4914      	ldr	r1, [pc, #80]	@ (801f978 <tcp_output_segment+0x1bc>)
 801f926:	4810      	ldr	r0, [pc, #64]	@ (801f968 <tcp_output_segment+0x1ac>)
 801f928:	f002 fa40 	bl	8021dac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f92c:	68fb      	ldr	r3, [r7, #12]
 801f92e:	6858      	ldr	r0, [r3, #4]
 801f930:	68b9      	ldr	r1, [r7, #8]
 801f932:	68bb      	ldr	r3, [r7, #8]
 801f934:	1d1c      	adds	r4, r3, #4
 801f936:	68bb      	ldr	r3, [r7, #8]
 801f938:	7add      	ldrb	r5, [r3, #11]
 801f93a:	68bb      	ldr	r3, [r7, #8]
 801f93c:	7a9b      	ldrb	r3, [r3, #10]
 801f93e:	687a      	ldr	r2, [r7, #4]
 801f940:	9202      	str	r2, [sp, #8]
 801f942:	2206      	movs	r2, #6
 801f944:	9201      	str	r2, [sp, #4]
 801f946:	9300      	str	r3, [sp, #0]
 801f948:	462b      	mov	r3, r5
 801f94a:	4622      	mov	r2, r4
 801f94c:	f7f5 fedc 	bl	8015708 <ip4_output_if>
 801f950:	4603      	mov	r3, r0
 801f952:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801f954:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f958:	4618      	mov	r0, r3
 801f95a:	3720      	adds	r7, #32
 801f95c:	46bd      	mov	sp, r7
 801f95e:	bdb0      	pop	{r4, r5, r7, pc}
 801f960:	08027bcc 	.word	0x08027bcc
 801f964:	080281bc 	.word	0x080281bc
 801f968:	08027c4c 	.word	0x08027c4c
 801f96c:	080281dc 	.word	0x080281dc
 801f970:	080281fc 	.word	0x080281fc
 801f974:	2401269c 	.word	0x2401269c
 801f978:	08028220 	.word	0x08028220

0801f97c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801f97c:	b5b0      	push	{r4, r5, r7, lr}
 801f97e:	b084      	sub	sp, #16
 801f980:	af00      	add	r7, sp, #0
 801f982:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	2b00      	cmp	r3, #0
 801f988:	d106      	bne.n	801f998 <tcp_rexmit_rto_prepare+0x1c>
 801f98a:	4b31      	ldr	r3, [pc, #196]	@ (801fa50 <tcp_rexmit_rto_prepare+0xd4>)
 801f98c:	f240 6263 	movw	r2, #1635	@ 0x663
 801f990:	4930      	ldr	r1, [pc, #192]	@ (801fa54 <tcp_rexmit_rto_prepare+0xd8>)
 801f992:	4831      	ldr	r0, [pc, #196]	@ (801fa58 <tcp_rexmit_rto_prepare+0xdc>)
 801f994:	f002 fa0a 	bl	8021dac <iprintf>

  if (pcb->unacked == NULL) {
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d102      	bne.n	801f9a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801f9a0:	f06f 0305 	mvn.w	r3, #5
 801f9a4:	e050      	b.n	801fa48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f9aa:	60fb      	str	r3, [r7, #12]
 801f9ac:	e00b      	b.n	801f9c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801f9ae:	68f8      	ldr	r0, [r7, #12]
 801f9b0:	f7ff fee4 	bl	801f77c <tcp_output_segment_busy>
 801f9b4:	4603      	mov	r3, r0
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	d002      	beq.n	801f9c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801f9ba:	f06f 0305 	mvn.w	r3, #5
 801f9be:	e043      	b.n	801fa48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f9c0:	68fb      	ldr	r3, [r7, #12]
 801f9c2:	681b      	ldr	r3, [r3, #0]
 801f9c4:	60fb      	str	r3, [r7, #12]
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d1ef      	bne.n	801f9ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801f9ce:	68f8      	ldr	r0, [r7, #12]
 801f9d0:	f7ff fed4 	bl	801f77c <tcp_output_segment_busy>
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d002      	beq.n	801f9e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801f9da:	f06f 0305 	mvn.w	r3, #5
 801f9de:	e033      	b.n	801fa48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	2200      	movs	r2, #0
 801f9f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	8b5b      	ldrh	r3, [r3, #26]
 801f9fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801f9fe:	b29a      	uxth	r2, r3
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801fa04:	68fb      	ldr	r3, [r7, #12]
 801fa06:	68db      	ldr	r3, [r3, #12]
 801fa08:	685b      	ldr	r3, [r3, #4]
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	f7f4 f9f3 	bl	8013df6 <lwip_htonl>
 801fa10:	4604      	mov	r4, r0
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	891b      	ldrh	r3, [r3, #8]
 801fa16:	461d      	mov	r5, r3
 801fa18:	68fb      	ldr	r3, [r7, #12]
 801fa1a:	68db      	ldr	r3, [r3, #12]
 801fa1c:	899b      	ldrh	r3, [r3, #12]
 801fa1e:	b29b      	uxth	r3, r3
 801fa20:	4618      	mov	r0, r3
 801fa22:	f7f4 f9d3 	bl	8013dcc <lwip_htons>
 801fa26:	4603      	mov	r3, r0
 801fa28:	b2db      	uxtb	r3, r3
 801fa2a:	f003 0303 	and.w	r3, r3, #3
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d001      	beq.n	801fa36 <tcp_rexmit_rto_prepare+0xba>
 801fa32:	2301      	movs	r3, #1
 801fa34:	e000      	b.n	801fa38 <tcp_rexmit_rto_prepare+0xbc>
 801fa36:	2300      	movs	r3, #0
 801fa38:	442b      	add	r3, r5
 801fa3a:	18e2      	adds	r2, r4, r3
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801fa40:	687b      	ldr	r3, [r7, #4]
 801fa42:	2200      	movs	r2, #0
 801fa44:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801fa46:	2300      	movs	r3, #0
}
 801fa48:	4618      	mov	r0, r3
 801fa4a:	3710      	adds	r7, #16
 801fa4c:	46bd      	mov	sp, r7
 801fa4e:	bdb0      	pop	{r4, r5, r7, pc}
 801fa50:	08027bcc 	.word	0x08027bcc
 801fa54:	08028234 	.word	0x08028234
 801fa58:	08027c4c 	.word	0x08027c4c

0801fa5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801fa5c:	b580      	push	{r7, lr}
 801fa5e:	b082      	sub	sp, #8
 801fa60:	af00      	add	r7, sp, #0
 801fa62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d106      	bne.n	801fa78 <tcp_rexmit_rto_commit+0x1c>
 801fa6a:	4b0d      	ldr	r3, [pc, #52]	@ (801faa0 <tcp_rexmit_rto_commit+0x44>)
 801fa6c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801fa70:	490c      	ldr	r1, [pc, #48]	@ (801faa4 <tcp_rexmit_rto_commit+0x48>)
 801fa72:	480d      	ldr	r0, [pc, #52]	@ (801faa8 <tcp_rexmit_rto_commit+0x4c>)
 801fa74:	f002 f99a 	bl	8021dac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801fa78:	687b      	ldr	r3, [r7, #4]
 801fa7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801fa7e:	2bff      	cmp	r3, #255	@ 0xff
 801fa80:	d007      	beq.n	801fa92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801fa88:	3301      	adds	r3, #1
 801fa8a:	b2da      	uxtb	r2, r3
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801fa92:	6878      	ldr	r0, [r7, #4]
 801fa94:	f7ff fc7c 	bl	801f390 <tcp_output>
}
 801fa98:	bf00      	nop
 801fa9a:	3708      	adds	r7, #8
 801fa9c:	46bd      	mov	sp, r7
 801fa9e:	bd80      	pop	{r7, pc}
 801faa0:	08027bcc 	.word	0x08027bcc
 801faa4:	08028258 	.word	0x08028258
 801faa8:	08027c4c 	.word	0x08027c4c

0801faac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801faac:	b580      	push	{r7, lr}
 801faae:	b082      	sub	sp, #8
 801fab0:	af00      	add	r7, sp, #0
 801fab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	d106      	bne.n	801fac8 <tcp_rexmit_rto+0x1c>
 801faba:	4b0a      	ldr	r3, [pc, #40]	@ (801fae4 <tcp_rexmit_rto+0x38>)
 801fabc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801fac0:	4909      	ldr	r1, [pc, #36]	@ (801fae8 <tcp_rexmit_rto+0x3c>)
 801fac2:	480a      	ldr	r0, [pc, #40]	@ (801faec <tcp_rexmit_rto+0x40>)
 801fac4:	f002 f972 	bl	8021dac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801fac8:	6878      	ldr	r0, [r7, #4]
 801faca:	f7ff ff57 	bl	801f97c <tcp_rexmit_rto_prepare>
 801face:	4603      	mov	r3, r0
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d102      	bne.n	801fada <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801fad4:	6878      	ldr	r0, [r7, #4]
 801fad6:	f7ff ffc1 	bl	801fa5c <tcp_rexmit_rto_commit>
  }
}
 801fada:	bf00      	nop
 801fadc:	3708      	adds	r7, #8
 801fade:	46bd      	mov	sp, r7
 801fae0:	bd80      	pop	{r7, pc}
 801fae2:	bf00      	nop
 801fae4:	08027bcc 	.word	0x08027bcc
 801fae8:	0802827c 	.word	0x0802827c
 801faec:	08027c4c 	.word	0x08027c4c

0801faf0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801faf0:	b590      	push	{r4, r7, lr}
 801faf2:	b085      	sub	sp, #20
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d106      	bne.n	801fb0c <tcp_rexmit+0x1c>
 801fafe:	4b2f      	ldr	r3, [pc, #188]	@ (801fbbc <tcp_rexmit+0xcc>)
 801fb00:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801fb04:	492e      	ldr	r1, [pc, #184]	@ (801fbc0 <tcp_rexmit+0xd0>)
 801fb06:	482f      	ldr	r0, [pc, #188]	@ (801fbc4 <tcp_rexmit+0xd4>)
 801fb08:	f002 f950 	bl	8021dac <iprintf>

  if (pcb->unacked == NULL) {
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d102      	bne.n	801fb1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 801fb14:	f06f 0305 	mvn.w	r3, #5
 801fb18:	e04c      	b.n	801fbb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fb1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801fb20:	68b8      	ldr	r0, [r7, #8]
 801fb22:	f7ff fe2b 	bl	801f77c <tcp_output_segment_busy>
 801fb26:	4603      	mov	r3, r0
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d002      	beq.n	801fb32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801fb2c:	f06f 0305 	mvn.w	r3, #5
 801fb30:	e040      	b.n	801fbb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801fb32:	68bb      	ldr	r3, [r7, #8]
 801fb34:	681a      	ldr	r2, [r3, #0]
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	336c      	adds	r3, #108	@ 0x6c
 801fb3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801fb40:	e002      	b.n	801fb48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801fb42:	68fb      	ldr	r3, [r7, #12]
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801fb48:	68fb      	ldr	r3, [r7, #12]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	2b00      	cmp	r3, #0
 801fb4e:	d011      	beq.n	801fb74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801fb50:	68fb      	ldr	r3, [r7, #12]
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	68db      	ldr	r3, [r3, #12]
 801fb56:	685b      	ldr	r3, [r3, #4]
 801fb58:	4618      	mov	r0, r3
 801fb5a:	f7f4 f94c 	bl	8013df6 <lwip_htonl>
 801fb5e:	4604      	mov	r4, r0
 801fb60:	68bb      	ldr	r3, [r7, #8]
 801fb62:	68db      	ldr	r3, [r3, #12]
 801fb64:	685b      	ldr	r3, [r3, #4]
 801fb66:	4618      	mov	r0, r3
 801fb68:	f7f4 f945 	bl	8013df6 <lwip_htonl>
 801fb6c:	4603      	mov	r3, r0
 801fb6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	dbe6      	blt.n	801fb42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	681a      	ldr	r2, [r3, #0]
 801fb78:	68bb      	ldr	r3, [r7, #8]
 801fb7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	68ba      	ldr	r2, [r7, #8]
 801fb80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801fb82:	68bb      	ldr	r3, [r7, #8]
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	d103      	bne.n	801fb92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	2200      	movs	r2, #0
 801fb8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801fb98:	2bff      	cmp	r3, #255	@ 0xff
 801fb9a:	d007      	beq.n	801fbac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801fb9c:	687b      	ldr	r3, [r7, #4]
 801fb9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801fba2:	3301      	adds	r3, #1
 801fba4:	b2da      	uxtb	r2, r3
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	2200      	movs	r2, #0
 801fbb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801fbb2:	2300      	movs	r3, #0
}
 801fbb4:	4618      	mov	r0, r3
 801fbb6:	3714      	adds	r7, #20
 801fbb8:	46bd      	mov	sp, r7
 801fbba:	bd90      	pop	{r4, r7, pc}
 801fbbc:	08027bcc 	.word	0x08027bcc
 801fbc0:	08028298 	.word	0x08028298
 801fbc4:	08027c4c 	.word	0x08027c4c

0801fbc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801fbc8:	b580      	push	{r7, lr}
 801fbca:	b082      	sub	sp, #8
 801fbcc:	af00      	add	r7, sp, #0
 801fbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d106      	bne.n	801fbe4 <tcp_rexmit_fast+0x1c>
 801fbd6:	4b2a      	ldr	r3, [pc, #168]	@ (801fc80 <tcp_rexmit_fast+0xb8>)
 801fbd8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801fbdc:	4929      	ldr	r1, [pc, #164]	@ (801fc84 <tcp_rexmit_fast+0xbc>)
 801fbde:	482a      	ldr	r0, [pc, #168]	@ (801fc88 <tcp_rexmit_fast+0xc0>)
 801fbe0:	f002 f8e4 	bl	8021dac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d045      	beq.n	801fc78 <tcp_rexmit_fast+0xb0>
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	8b5b      	ldrh	r3, [r3, #26]
 801fbf0:	f003 0304 	and.w	r3, r3, #4
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d13f      	bne.n	801fc78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801fbf8:	6878      	ldr	r0, [r7, #4]
 801fbfa:	f7ff ff79 	bl	801faf0 <tcp_rexmit>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	d139      	bne.n	801fc78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801fc10:	4293      	cmp	r3, r2
 801fc12:	bf28      	it	cs
 801fc14:	4613      	movcs	r3, r2
 801fc16:	b29b      	uxth	r3, r3
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	da00      	bge.n	801fc1e <tcp_rexmit_fast+0x56>
 801fc1c:	3301      	adds	r3, #1
 801fc1e:	105b      	asrs	r3, r3, #1
 801fc20:	b29a      	uxth	r2, r3
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801fc2e:	461a      	mov	r2, r3
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fc34:	005b      	lsls	r3, r3, #1
 801fc36:	429a      	cmp	r2, r3
 801fc38:	d206      	bcs.n	801fc48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fc3e:	005b      	lsls	r3, r3, #1
 801fc40:	b29a      	uxth	r2, r3
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fc52:	4619      	mov	r1, r3
 801fc54:	0049      	lsls	r1, r1, #1
 801fc56:	440b      	add	r3, r1
 801fc58:	b29b      	uxth	r3, r3
 801fc5a:	4413      	add	r3, r2
 801fc5c:	b29a      	uxth	r2, r3
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	8b5b      	ldrh	r3, [r3, #26]
 801fc68:	f043 0304 	orr.w	r3, r3, #4
 801fc6c:	b29a      	uxth	r2, r3
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	2200      	movs	r2, #0
 801fc76:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801fc78:	bf00      	nop
 801fc7a:	3708      	adds	r7, #8
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	bd80      	pop	{r7, pc}
 801fc80:	08027bcc 	.word	0x08027bcc
 801fc84:	080282b0 	.word	0x080282b0
 801fc88:	08027c4c 	.word	0x08027c4c

0801fc8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801fc8c:	b580      	push	{r7, lr}
 801fc8e:	b086      	sub	sp, #24
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	60f8      	str	r0, [r7, #12]
 801fc94:	607b      	str	r3, [r7, #4]
 801fc96:	460b      	mov	r3, r1
 801fc98:	817b      	strh	r3, [r7, #10]
 801fc9a:	4613      	mov	r3, r2
 801fc9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fc9e:	897a      	ldrh	r2, [r7, #10]
 801fca0:	893b      	ldrh	r3, [r7, #8]
 801fca2:	4413      	add	r3, r2
 801fca4:	b29b      	uxth	r3, r3
 801fca6:	3314      	adds	r3, #20
 801fca8:	b29b      	uxth	r3, r3
 801fcaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801fcae:	4619      	mov	r1, r3
 801fcb0:	2022      	movs	r0, #34	@ 0x22
 801fcb2:	f7f9 fb8d 	bl	80193d0 <pbuf_alloc>
 801fcb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801fcb8:	697b      	ldr	r3, [r7, #20]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d04d      	beq.n	801fd5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fcbe:	897b      	ldrh	r3, [r7, #10]
 801fcc0:	3313      	adds	r3, #19
 801fcc2:	697a      	ldr	r2, [r7, #20]
 801fcc4:	8952      	ldrh	r2, [r2, #10]
 801fcc6:	4293      	cmp	r3, r2
 801fcc8:	db06      	blt.n	801fcd8 <tcp_output_alloc_header_common+0x4c>
 801fcca:	4b26      	ldr	r3, [pc, #152]	@ (801fd64 <tcp_output_alloc_header_common+0xd8>)
 801fccc:	f240 7223 	movw	r2, #1827	@ 0x723
 801fcd0:	4925      	ldr	r1, [pc, #148]	@ (801fd68 <tcp_output_alloc_header_common+0xdc>)
 801fcd2:	4826      	ldr	r0, [pc, #152]	@ (801fd6c <tcp_output_alloc_header_common+0xe0>)
 801fcd4:	f002 f86a 	bl	8021dac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801fcd8:	697b      	ldr	r3, [r7, #20]
 801fcda:	685b      	ldr	r3, [r3, #4]
 801fcdc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801fcde:	8c3b      	ldrh	r3, [r7, #32]
 801fce0:	4618      	mov	r0, r3
 801fce2:	f7f4 f873 	bl	8013dcc <lwip_htons>
 801fce6:	4603      	mov	r3, r0
 801fce8:	461a      	mov	r2, r3
 801fcea:	693b      	ldr	r3, [r7, #16]
 801fcec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801fcee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801fcf0:	4618      	mov	r0, r3
 801fcf2:	f7f4 f86b 	bl	8013dcc <lwip_htons>
 801fcf6:	4603      	mov	r3, r0
 801fcf8:	461a      	mov	r2, r3
 801fcfa:	693b      	ldr	r3, [r7, #16]
 801fcfc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801fcfe:	693b      	ldr	r3, [r7, #16]
 801fd00:	687a      	ldr	r2, [r7, #4]
 801fd02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801fd04:	68f8      	ldr	r0, [r7, #12]
 801fd06:	f7f4 f876 	bl	8013df6 <lwip_htonl>
 801fd0a:	4602      	mov	r2, r0
 801fd0c:	693b      	ldr	r3, [r7, #16]
 801fd0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fd10:	897b      	ldrh	r3, [r7, #10]
 801fd12:	089b      	lsrs	r3, r3, #2
 801fd14:	b29b      	uxth	r3, r3
 801fd16:	3305      	adds	r3, #5
 801fd18:	b29b      	uxth	r3, r3
 801fd1a:	031b      	lsls	r3, r3, #12
 801fd1c:	b29a      	uxth	r2, r3
 801fd1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801fd22:	b29b      	uxth	r3, r3
 801fd24:	4313      	orrs	r3, r2
 801fd26:	b29b      	uxth	r3, r3
 801fd28:	4618      	mov	r0, r3
 801fd2a:	f7f4 f84f 	bl	8013dcc <lwip_htons>
 801fd2e:	4603      	mov	r3, r0
 801fd30:	461a      	mov	r2, r3
 801fd32:	693b      	ldr	r3, [r7, #16]
 801fd34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801fd36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801fd38:	4618      	mov	r0, r3
 801fd3a:	f7f4 f847 	bl	8013dcc <lwip_htons>
 801fd3e:	4603      	mov	r3, r0
 801fd40:	461a      	mov	r2, r3
 801fd42:	693b      	ldr	r3, [r7, #16]
 801fd44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801fd46:	693b      	ldr	r3, [r7, #16]
 801fd48:	2200      	movs	r2, #0
 801fd4a:	741a      	strb	r2, [r3, #16]
 801fd4c:	2200      	movs	r2, #0
 801fd4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801fd50:	693b      	ldr	r3, [r7, #16]
 801fd52:	2200      	movs	r2, #0
 801fd54:	749a      	strb	r2, [r3, #18]
 801fd56:	2200      	movs	r2, #0
 801fd58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801fd5a:	697b      	ldr	r3, [r7, #20]
}
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	3718      	adds	r7, #24
 801fd60:	46bd      	mov	sp, r7
 801fd62:	bd80      	pop	{r7, pc}
 801fd64:	08027bcc 	.word	0x08027bcc
 801fd68:	080282d0 	.word	0x080282d0
 801fd6c:	08027c4c 	.word	0x08027c4c

0801fd70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801fd70:	b5b0      	push	{r4, r5, r7, lr}
 801fd72:	b08a      	sub	sp, #40	@ 0x28
 801fd74:	af04      	add	r7, sp, #16
 801fd76:	60f8      	str	r0, [r7, #12]
 801fd78:	607b      	str	r3, [r7, #4]
 801fd7a:	460b      	mov	r3, r1
 801fd7c:	817b      	strh	r3, [r7, #10]
 801fd7e:	4613      	mov	r3, r2
 801fd80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fd82:	68fb      	ldr	r3, [r7, #12]
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d106      	bne.n	801fd96 <tcp_output_alloc_header+0x26>
 801fd88:	4b15      	ldr	r3, [pc, #84]	@ (801fde0 <tcp_output_alloc_header+0x70>)
 801fd8a:	f240 7242 	movw	r2, #1858	@ 0x742
 801fd8e:	4915      	ldr	r1, [pc, #84]	@ (801fde4 <tcp_output_alloc_header+0x74>)
 801fd90:	4815      	ldr	r0, [pc, #84]	@ (801fde8 <tcp_output_alloc_header+0x78>)
 801fd92:	f002 f80b 	bl	8021dac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801fd96:	68fb      	ldr	r3, [r7, #12]
 801fd98:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	8adb      	ldrh	r3, [r3, #22]
 801fd9e:	68fa      	ldr	r2, [r7, #12]
 801fda0:	8b12      	ldrh	r2, [r2, #24]
 801fda2:	68f9      	ldr	r1, [r7, #12]
 801fda4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801fda6:	893d      	ldrh	r5, [r7, #8]
 801fda8:	897c      	ldrh	r4, [r7, #10]
 801fdaa:	9103      	str	r1, [sp, #12]
 801fdac:	2110      	movs	r1, #16
 801fdae:	9102      	str	r1, [sp, #8]
 801fdb0:	9201      	str	r2, [sp, #4]
 801fdb2:	9300      	str	r3, [sp, #0]
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	462a      	mov	r2, r5
 801fdb8:	4621      	mov	r1, r4
 801fdba:	f7ff ff67 	bl	801fc8c <tcp_output_alloc_header_common>
 801fdbe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801fdc0:	697b      	ldr	r3, [r7, #20]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d006      	beq.n	801fdd4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801fdc6:	68fb      	ldr	r3, [r7, #12]
 801fdc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fdca:	68fa      	ldr	r2, [r7, #12]
 801fdcc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801fdce:	441a      	add	r2, r3
 801fdd0:	68fb      	ldr	r3, [r7, #12]
 801fdd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801fdd4:	697b      	ldr	r3, [r7, #20]
}
 801fdd6:	4618      	mov	r0, r3
 801fdd8:	3718      	adds	r7, #24
 801fdda:	46bd      	mov	sp, r7
 801fddc:	bdb0      	pop	{r4, r5, r7, pc}
 801fdde:	bf00      	nop
 801fde0:	08027bcc 	.word	0x08027bcc
 801fde4:	08028300 	.word	0x08028300
 801fde8:	08027c4c 	.word	0x08027c4c

0801fdec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801fdec:	b580      	push	{r7, lr}
 801fdee:	b088      	sub	sp, #32
 801fdf0:	af00      	add	r7, sp, #0
 801fdf2:	60f8      	str	r0, [r7, #12]
 801fdf4:	60b9      	str	r1, [r7, #8]
 801fdf6:	4611      	mov	r1, r2
 801fdf8:	461a      	mov	r2, r3
 801fdfa:	460b      	mov	r3, r1
 801fdfc:	71fb      	strb	r3, [r7, #7]
 801fdfe:	4613      	mov	r3, r2
 801fe00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801fe02:	2300      	movs	r3, #0
 801fe04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801fe06:	68bb      	ldr	r3, [r7, #8]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d106      	bne.n	801fe1a <tcp_output_fill_options+0x2e>
 801fe0c:	4b12      	ldr	r3, [pc, #72]	@ (801fe58 <tcp_output_fill_options+0x6c>)
 801fe0e:	f240 7256 	movw	r2, #1878	@ 0x756
 801fe12:	4912      	ldr	r1, [pc, #72]	@ (801fe5c <tcp_output_fill_options+0x70>)
 801fe14:	4812      	ldr	r0, [pc, #72]	@ (801fe60 <tcp_output_fill_options+0x74>)
 801fe16:	f001 ffc9 	bl	8021dac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801fe1a:	68bb      	ldr	r3, [r7, #8]
 801fe1c:	685b      	ldr	r3, [r3, #4]
 801fe1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801fe20:	69bb      	ldr	r3, [r7, #24]
 801fe22:	3314      	adds	r3, #20
 801fe24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801fe26:	8bfb      	ldrh	r3, [r7, #30]
 801fe28:	009b      	lsls	r3, r3, #2
 801fe2a:	461a      	mov	r2, r3
 801fe2c:	79fb      	ldrb	r3, [r7, #7]
 801fe2e:	009b      	lsls	r3, r3, #2
 801fe30:	f003 0304 	and.w	r3, r3, #4
 801fe34:	4413      	add	r3, r2
 801fe36:	3314      	adds	r3, #20
 801fe38:	69ba      	ldr	r2, [r7, #24]
 801fe3a:	4413      	add	r3, r2
 801fe3c:	697a      	ldr	r2, [r7, #20]
 801fe3e:	429a      	cmp	r2, r3
 801fe40:	d006      	beq.n	801fe50 <tcp_output_fill_options+0x64>
 801fe42:	4b05      	ldr	r3, [pc, #20]	@ (801fe58 <tcp_output_fill_options+0x6c>)
 801fe44:	f240 7275 	movw	r2, #1909	@ 0x775
 801fe48:	4906      	ldr	r1, [pc, #24]	@ (801fe64 <tcp_output_fill_options+0x78>)
 801fe4a:	4805      	ldr	r0, [pc, #20]	@ (801fe60 <tcp_output_fill_options+0x74>)
 801fe4c:	f001 ffae 	bl	8021dac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801fe50:	bf00      	nop
 801fe52:	3720      	adds	r7, #32
 801fe54:	46bd      	mov	sp, r7
 801fe56:	bd80      	pop	{r7, pc}
 801fe58:	08027bcc 	.word	0x08027bcc
 801fe5c:	08028328 	.word	0x08028328
 801fe60:	08027c4c 	.word	0x08027c4c
 801fe64:	08028220 	.word	0x08028220

0801fe68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801fe68:	b580      	push	{r7, lr}
 801fe6a:	b08a      	sub	sp, #40	@ 0x28
 801fe6c:	af04      	add	r7, sp, #16
 801fe6e:	60f8      	str	r0, [r7, #12]
 801fe70:	60b9      	str	r1, [r7, #8]
 801fe72:	607a      	str	r2, [r7, #4]
 801fe74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fe76:	68bb      	ldr	r3, [r7, #8]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d106      	bne.n	801fe8a <tcp_output_control_segment+0x22>
 801fe7c:	4b1c      	ldr	r3, [pc, #112]	@ (801fef0 <tcp_output_control_segment+0x88>)
 801fe7e:	f240 7287 	movw	r2, #1927	@ 0x787
 801fe82:	491c      	ldr	r1, [pc, #112]	@ (801fef4 <tcp_output_control_segment+0x8c>)
 801fe84:	481c      	ldr	r0, [pc, #112]	@ (801fef8 <tcp_output_control_segment+0x90>)
 801fe86:	f001 ff91 	bl	8021dac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801fe8a:	683a      	ldr	r2, [r7, #0]
 801fe8c:	6879      	ldr	r1, [r7, #4]
 801fe8e:	68f8      	ldr	r0, [r7, #12]
 801fe90:	f7fe fae6 	bl	801e460 <tcp_route>
 801fe94:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801fe96:	693b      	ldr	r3, [r7, #16]
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d102      	bne.n	801fea2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801fe9c:	23fc      	movs	r3, #252	@ 0xfc
 801fe9e:	75fb      	strb	r3, [r7, #23]
 801fea0:	e01c      	b.n	801fedc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801fea2:	68fb      	ldr	r3, [r7, #12]
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d006      	beq.n	801feb6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801fea8:	68fb      	ldr	r3, [r7, #12]
 801feaa:	7adb      	ldrb	r3, [r3, #11]
 801feac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	7a9b      	ldrb	r3, [r3, #10]
 801feb2:	757b      	strb	r3, [r7, #21]
 801feb4:	e003      	b.n	801febe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801feb6:	23ff      	movs	r3, #255	@ 0xff
 801feb8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801feba:	2300      	movs	r3, #0
 801febc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801febe:	7dba      	ldrb	r2, [r7, #22]
 801fec0:	693b      	ldr	r3, [r7, #16]
 801fec2:	9302      	str	r3, [sp, #8]
 801fec4:	2306      	movs	r3, #6
 801fec6:	9301      	str	r3, [sp, #4]
 801fec8:	7d7b      	ldrb	r3, [r7, #21]
 801feca:	9300      	str	r3, [sp, #0]
 801fecc:	4613      	mov	r3, r2
 801fece:	683a      	ldr	r2, [r7, #0]
 801fed0:	6879      	ldr	r1, [r7, #4]
 801fed2:	68b8      	ldr	r0, [r7, #8]
 801fed4:	f7f5 fc18 	bl	8015708 <ip4_output_if>
 801fed8:	4603      	mov	r3, r0
 801feda:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801fedc:	68b8      	ldr	r0, [r7, #8]
 801fede:	f7f9 fd59 	bl	8019994 <pbuf_free>
  return err;
 801fee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fee6:	4618      	mov	r0, r3
 801fee8:	3718      	adds	r7, #24
 801feea:	46bd      	mov	sp, r7
 801feec:	bd80      	pop	{r7, pc}
 801feee:	bf00      	nop
 801fef0:	08027bcc 	.word	0x08027bcc
 801fef4:	08028350 	.word	0x08028350
 801fef8:	08027c4c 	.word	0x08027c4c

0801fefc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801fefc:	b590      	push	{r4, r7, lr}
 801fefe:	b08b      	sub	sp, #44	@ 0x2c
 801ff00:	af04      	add	r7, sp, #16
 801ff02:	60f8      	str	r0, [r7, #12]
 801ff04:	60b9      	str	r1, [r7, #8]
 801ff06:	607a      	str	r2, [r7, #4]
 801ff08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d106      	bne.n	801ff1e <tcp_rst+0x22>
 801ff10:	4b1f      	ldr	r3, [pc, #124]	@ (801ff90 <tcp_rst+0x94>)
 801ff12:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801ff16:	491f      	ldr	r1, [pc, #124]	@ (801ff94 <tcp_rst+0x98>)
 801ff18:	481f      	ldr	r0, [pc, #124]	@ (801ff98 <tcp_rst+0x9c>)
 801ff1a:	f001 ff47 	bl	8021dac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ff1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff20:	2b00      	cmp	r3, #0
 801ff22:	d106      	bne.n	801ff32 <tcp_rst+0x36>
 801ff24:	4b1a      	ldr	r3, [pc, #104]	@ (801ff90 <tcp_rst+0x94>)
 801ff26:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801ff2a:	491c      	ldr	r1, [pc, #112]	@ (801ff9c <tcp_rst+0xa0>)
 801ff2c:	481a      	ldr	r0, [pc, #104]	@ (801ff98 <tcp_rst+0x9c>)
 801ff2e:	f001 ff3d 	bl	8021dac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ff32:	2300      	movs	r3, #0
 801ff34:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ff36:	f246 0308 	movw	r3, #24584	@ 0x6008
 801ff3a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ff3c:	7dfb      	ldrb	r3, [r7, #23]
 801ff3e:	b29c      	uxth	r4, r3
 801ff40:	68b8      	ldr	r0, [r7, #8]
 801ff42:	f7f3 ff58 	bl	8013df6 <lwip_htonl>
 801ff46:	4602      	mov	r2, r0
 801ff48:	8abb      	ldrh	r3, [r7, #20]
 801ff4a:	9303      	str	r3, [sp, #12]
 801ff4c:	2314      	movs	r3, #20
 801ff4e:	9302      	str	r3, [sp, #8]
 801ff50:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ff52:	9301      	str	r3, [sp, #4]
 801ff54:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ff56:	9300      	str	r3, [sp, #0]
 801ff58:	4613      	mov	r3, r2
 801ff5a:	2200      	movs	r2, #0
 801ff5c:	4621      	mov	r1, r4
 801ff5e:	6878      	ldr	r0, [r7, #4]
 801ff60:	f7ff fe94 	bl	801fc8c <tcp_output_alloc_header_common>
 801ff64:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ff66:	693b      	ldr	r3, [r7, #16]
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d00c      	beq.n	801ff86 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ff6c:	7dfb      	ldrb	r3, [r7, #23]
 801ff6e:	2200      	movs	r2, #0
 801ff70:	6939      	ldr	r1, [r7, #16]
 801ff72:	68f8      	ldr	r0, [r7, #12]
 801ff74:	f7ff ff3a 	bl	801fdec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ff78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff7a:	683a      	ldr	r2, [r7, #0]
 801ff7c:	6939      	ldr	r1, [r7, #16]
 801ff7e:	68f8      	ldr	r0, [r7, #12]
 801ff80:	f7ff ff72 	bl	801fe68 <tcp_output_control_segment>
 801ff84:	e000      	b.n	801ff88 <tcp_rst+0x8c>
    return;
 801ff86:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ff88:	371c      	adds	r7, #28
 801ff8a:	46bd      	mov	sp, r7
 801ff8c:	bd90      	pop	{r4, r7, pc}
 801ff8e:	bf00      	nop
 801ff90:	08027bcc 	.word	0x08027bcc
 801ff94:	0802837c 	.word	0x0802837c
 801ff98:	08027c4c 	.word	0x08027c4c
 801ff9c:	08028398 	.word	0x08028398

0801ffa0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ffa0:	b590      	push	{r4, r7, lr}
 801ffa2:	b087      	sub	sp, #28
 801ffa4:	af00      	add	r7, sp, #0
 801ffa6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ffa8:	2300      	movs	r3, #0
 801ffaa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ffac:	2300      	movs	r3, #0
 801ffae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	d106      	bne.n	801ffc4 <tcp_send_empty_ack+0x24>
 801ffb6:	4b28      	ldr	r3, [pc, #160]	@ (8020058 <tcp_send_empty_ack+0xb8>)
 801ffb8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801ffbc:	4927      	ldr	r1, [pc, #156]	@ (802005c <tcp_send_empty_ack+0xbc>)
 801ffbe:	4828      	ldr	r0, [pc, #160]	@ (8020060 <tcp_send_empty_ack+0xc0>)
 801ffc0:	f001 fef4 	bl	8021dac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ffc4:	7dfb      	ldrb	r3, [r7, #23]
 801ffc6:	009b      	lsls	r3, r3, #2
 801ffc8:	b2db      	uxtb	r3, r3
 801ffca:	f003 0304 	and.w	r3, r3, #4
 801ffce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ffd0:	7d7b      	ldrb	r3, [r7, #21]
 801ffd2:	b29c      	uxth	r4, r3
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ffd8:	4618      	mov	r0, r3
 801ffda:	f7f3 ff0c 	bl	8013df6 <lwip_htonl>
 801ffde:	4603      	mov	r3, r0
 801ffe0:	2200      	movs	r2, #0
 801ffe2:	4621      	mov	r1, r4
 801ffe4:	6878      	ldr	r0, [r7, #4]
 801ffe6:	f7ff fec3 	bl	801fd70 <tcp_output_alloc_header>
 801ffea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ffec:	693b      	ldr	r3, [r7, #16]
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d109      	bne.n	8020006 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	8b5b      	ldrh	r3, [r3, #26]
 801fff6:	f043 0303 	orr.w	r3, r3, #3
 801fffa:	b29a      	uxth	r2, r3
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8020000:	f06f 0301 	mvn.w	r3, #1
 8020004:	e023      	b.n	802004e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8020006:	7dbb      	ldrb	r3, [r7, #22]
 8020008:	7dfa      	ldrb	r2, [r7, #23]
 802000a:	6939      	ldr	r1, [r7, #16]
 802000c:	6878      	ldr	r0, [r7, #4]
 802000e:	f7ff feed 	bl	801fdec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020012:	687a      	ldr	r2, [r7, #4]
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	3304      	adds	r3, #4
 8020018:	6939      	ldr	r1, [r7, #16]
 802001a:	6878      	ldr	r0, [r7, #4]
 802001c:	f7ff ff24 	bl	801fe68 <tcp_output_control_segment>
 8020020:	4603      	mov	r3, r0
 8020022:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8020024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020028:	2b00      	cmp	r3, #0
 802002a:	d007      	beq.n	802003c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	8b5b      	ldrh	r3, [r3, #26]
 8020030:	f043 0303 	orr.w	r3, r3, #3
 8020034:	b29a      	uxth	r2, r3
 8020036:	687b      	ldr	r3, [r7, #4]
 8020038:	835a      	strh	r2, [r3, #26]
 802003a:	e006      	b.n	802004a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	8b5b      	ldrh	r3, [r3, #26]
 8020040:	f023 0303 	bic.w	r3, r3, #3
 8020044:	b29a      	uxth	r2, r3
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	835a      	strh	r2, [r3, #26]
  }

  return err;
 802004a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802004e:	4618      	mov	r0, r3
 8020050:	371c      	adds	r7, #28
 8020052:	46bd      	mov	sp, r7
 8020054:	bd90      	pop	{r4, r7, pc}
 8020056:	bf00      	nop
 8020058:	08027bcc 	.word	0x08027bcc
 802005c:	080283b4 	.word	0x080283b4
 8020060:	08027c4c 	.word	0x08027c4c

08020064 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020064:	b590      	push	{r4, r7, lr}
 8020066:	b087      	sub	sp, #28
 8020068:	af00      	add	r7, sp, #0
 802006a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802006c:	2300      	movs	r3, #0
 802006e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d106      	bne.n	8020084 <tcp_keepalive+0x20>
 8020076:	4b18      	ldr	r3, [pc, #96]	@ (80200d8 <tcp_keepalive+0x74>)
 8020078:	f640 0224 	movw	r2, #2084	@ 0x824
 802007c:	4917      	ldr	r1, [pc, #92]	@ (80200dc <tcp_keepalive+0x78>)
 802007e:	4818      	ldr	r0, [pc, #96]	@ (80200e0 <tcp_keepalive+0x7c>)
 8020080:	f001 fe94 	bl	8021dac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020084:	7dfb      	ldrb	r3, [r7, #23]
 8020086:	b29c      	uxth	r4, r3
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802008c:	3b01      	subs	r3, #1
 802008e:	4618      	mov	r0, r3
 8020090:	f7f3 feb1 	bl	8013df6 <lwip_htonl>
 8020094:	4603      	mov	r3, r0
 8020096:	2200      	movs	r2, #0
 8020098:	4621      	mov	r1, r4
 802009a:	6878      	ldr	r0, [r7, #4]
 802009c:	f7ff fe68 	bl	801fd70 <tcp_output_alloc_header>
 80200a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80200a2:	693b      	ldr	r3, [r7, #16]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d102      	bne.n	80200ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80200a8:	f04f 33ff 	mov.w	r3, #4294967295
 80200ac:	e010      	b.n	80200d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80200ae:	7dfb      	ldrb	r3, [r7, #23]
 80200b0:	2200      	movs	r2, #0
 80200b2:	6939      	ldr	r1, [r7, #16]
 80200b4:	6878      	ldr	r0, [r7, #4]
 80200b6:	f7ff fe99 	bl	801fdec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80200ba:	687a      	ldr	r2, [r7, #4]
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	3304      	adds	r3, #4
 80200c0:	6939      	ldr	r1, [r7, #16]
 80200c2:	6878      	ldr	r0, [r7, #4]
 80200c4:	f7ff fed0 	bl	801fe68 <tcp_output_control_segment>
 80200c8:	4603      	mov	r3, r0
 80200ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80200cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80200d0:	4618      	mov	r0, r3
 80200d2:	371c      	adds	r7, #28
 80200d4:	46bd      	mov	sp, r7
 80200d6:	bd90      	pop	{r4, r7, pc}
 80200d8:	08027bcc 	.word	0x08027bcc
 80200dc:	080283d4 	.word	0x080283d4
 80200e0:	08027c4c 	.word	0x08027c4c

080200e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80200e4:	b590      	push	{r4, r7, lr}
 80200e6:	b08b      	sub	sp, #44	@ 0x2c
 80200e8:	af00      	add	r7, sp, #0
 80200ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80200ec:	2300      	movs	r3, #0
 80200ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d106      	bne.n	8020106 <tcp_zero_window_probe+0x22>
 80200f8:	4b4c      	ldr	r3, [pc, #304]	@ (802022c <tcp_zero_window_probe+0x148>)
 80200fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80200fe:	494c      	ldr	r1, [pc, #304]	@ (8020230 <tcp_zero_window_probe+0x14c>)
 8020100:	484c      	ldr	r0, [pc, #304]	@ (8020234 <tcp_zero_window_probe+0x150>)
 8020102:	f001 fe53 	bl	8021dac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802010a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 802010c:	6a3b      	ldr	r3, [r7, #32]
 802010e:	2b00      	cmp	r3, #0
 8020110:	d101      	bne.n	8020116 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8020112:	2300      	movs	r3, #0
 8020114:	e086      	b.n	8020224 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020116:	687b      	ldr	r3, [r7, #4]
 8020118:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 802011c:	2bff      	cmp	r3, #255	@ 0xff
 802011e:	d007      	beq.n	8020130 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8020126:	3301      	adds	r3, #1
 8020128:	b2da      	uxtb	r2, r3
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8020130:	6a3b      	ldr	r3, [r7, #32]
 8020132:	68db      	ldr	r3, [r3, #12]
 8020134:	899b      	ldrh	r3, [r3, #12]
 8020136:	b29b      	uxth	r3, r3
 8020138:	4618      	mov	r0, r3
 802013a:	f7f3 fe47 	bl	8013dcc <lwip_htons>
 802013e:	4603      	mov	r3, r0
 8020140:	b2db      	uxtb	r3, r3
 8020142:	f003 0301 	and.w	r3, r3, #1
 8020146:	2b00      	cmp	r3, #0
 8020148:	d005      	beq.n	8020156 <tcp_zero_window_probe+0x72>
 802014a:	6a3b      	ldr	r3, [r7, #32]
 802014c:	891b      	ldrh	r3, [r3, #8]
 802014e:	2b00      	cmp	r3, #0
 8020150:	d101      	bne.n	8020156 <tcp_zero_window_probe+0x72>
 8020152:	2301      	movs	r3, #1
 8020154:	e000      	b.n	8020158 <tcp_zero_window_probe+0x74>
 8020156:	2300      	movs	r3, #0
 8020158:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802015a:	7ffb      	ldrb	r3, [r7, #31]
 802015c:	2b00      	cmp	r3, #0
 802015e:	bf0c      	ite	eq
 8020160:	2301      	moveq	r3, #1
 8020162:	2300      	movne	r3, #0
 8020164:	b2db      	uxtb	r3, r3
 8020166:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802016c:	b299      	uxth	r1, r3
 802016e:	6a3b      	ldr	r3, [r7, #32]
 8020170:	68db      	ldr	r3, [r3, #12]
 8020172:	685b      	ldr	r3, [r3, #4]
 8020174:	8bba      	ldrh	r2, [r7, #28]
 8020176:	6878      	ldr	r0, [r7, #4]
 8020178:	f7ff fdfa 	bl	801fd70 <tcp_output_alloc_header>
 802017c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802017e:	69bb      	ldr	r3, [r7, #24]
 8020180:	2b00      	cmp	r3, #0
 8020182:	d102      	bne.n	802018a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8020184:	f04f 33ff 	mov.w	r3, #4294967295
 8020188:	e04c      	b.n	8020224 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 802018a:	69bb      	ldr	r3, [r7, #24]
 802018c:	685b      	ldr	r3, [r3, #4]
 802018e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8020190:	7ffb      	ldrb	r3, [r7, #31]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d011      	beq.n	80201ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8020196:	697b      	ldr	r3, [r7, #20]
 8020198:	899b      	ldrh	r3, [r3, #12]
 802019a:	b29b      	uxth	r3, r3
 802019c:	b21b      	sxth	r3, r3
 802019e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80201a2:	b21c      	sxth	r4, r3
 80201a4:	2011      	movs	r0, #17
 80201a6:	f7f3 fe11 	bl	8013dcc <lwip_htons>
 80201aa:	4603      	mov	r3, r0
 80201ac:	b21b      	sxth	r3, r3
 80201ae:	4323      	orrs	r3, r4
 80201b0:	b21b      	sxth	r3, r3
 80201b2:	b29a      	uxth	r2, r3
 80201b4:	697b      	ldr	r3, [r7, #20]
 80201b6:	819a      	strh	r2, [r3, #12]
 80201b8:	e010      	b.n	80201dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80201ba:	69bb      	ldr	r3, [r7, #24]
 80201bc:	685b      	ldr	r3, [r3, #4]
 80201be:	3314      	adds	r3, #20
 80201c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80201c2:	6a3b      	ldr	r3, [r7, #32]
 80201c4:	6858      	ldr	r0, [r3, #4]
 80201c6:	6a3b      	ldr	r3, [r7, #32]
 80201c8:	685b      	ldr	r3, [r3, #4]
 80201ca:	891a      	ldrh	r2, [r3, #8]
 80201cc:	6a3b      	ldr	r3, [r7, #32]
 80201ce:	891b      	ldrh	r3, [r3, #8]
 80201d0:	1ad3      	subs	r3, r2, r3
 80201d2:	b29b      	uxth	r3, r3
 80201d4:	2201      	movs	r2, #1
 80201d6:	6939      	ldr	r1, [r7, #16]
 80201d8:	f7f9 fde2 	bl	8019da0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80201dc:	6a3b      	ldr	r3, [r7, #32]
 80201de:	68db      	ldr	r3, [r3, #12]
 80201e0:	685b      	ldr	r3, [r3, #4]
 80201e2:	4618      	mov	r0, r3
 80201e4:	f7f3 fe07 	bl	8013df6 <lwip_htonl>
 80201e8:	4603      	mov	r3, r0
 80201ea:	3301      	adds	r3, #1
 80201ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	1ad3      	subs	r3, r2, r3
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	da02      	bge.n	8020200 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	68fa      	ldr	r2, [r7, #12]
 80201fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020204:	2200      	movs	r2, #0
 8020206:	69b9      	ldr	r1, [r7, #24]
 8020208:	6878      	ldr	r0, [r7, #4]
 802020a:	f7ff fdef 	bl	801fdec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802020e:	687a      	ldr	r2, [r7, #4]
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	3304      	adds	r3, #4
 8020214:	69b9      	ldr	r1, [r7, #24]
 8020216:	6878      	ldr	r0, [r7, #4]
 8020218:	f7ff fe26 	bl	801fe68 <tcp_output_control_segment>
 802021c:	4603      	mov	r3, r0
 802021e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020220:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020224:	4618      	mov	r0, r3
 8020226:	372c      	adds	r7, #44	@ 0x2c
 8020228:	46bd      	mov	sp, r7
 802022a:	bd90      	pop	{r4, r7, pc}
 802022c:	08027bcc 	.word	0x08027bcc
 8020230:	080283f0 	.word	0x080283f0
 8020234:	08027c4c 	.word	0x08027c4c

08020238 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8020238:	b580      	push	{r7, lr}
 802023a:	b084      	sub	sp, #16
 802023c:	af00      	add	r7, sp, #0
 802023e:	6078      	str	r0, [r7, #4]
 8020240:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 8020242:	f7ef fe2d 	bl	800fea0 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 8020246:	f000 fb4f 	bl	80208e8 <sys_timeouts_sleeptime>
 802024a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 802024c:	68fb      	ldr	r3, [r7, #12]
 802024e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020252:	d109      	bne.n	8020268 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8020254:	f7ef fe16 	bl	800fe84 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8020258:	2200      	movs	r2, #0
 802025a:	6839      	ldr	r1, [r7, #0]
 802025c:	6878      	ldr	r0, [r7, #4]
 802025e:	f7f9 feda 	bl	801a016 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8020262:	f7ef fdff 	bl	800fe64 <sys_lock_tcpip_core>
    return;
 8020266:	e016      	b.n	8020296 <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 8020268:	68fb      	ldr	r3, [r7, #12]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d102      	bne.n	8020274 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 802026e:	f000 faff 	bl	8020870 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8020272:	e7e6      	b.n	8020242 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8020274:	f7ef fe06 	bl	800fe84 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8020278:	68fa      	ldr	r2, [r7, #12]
 802027a:	6839      	ldr	r1, [r7, #0]
 802027c:	6878      	ldr	r0, [r7, #4]
 802027e:	f7f9 feca 	bl	801a016 <sys_arch_mbox_fetch>
 8020282:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8020284:	f7ef fdee 	bl	800fe64 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8020288:	68bb      	ldr	r3, [r7, #8]
 802028a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802028e:	d102      	bne.n	8020296 <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8020290:	f000 faee 	bl	8020870 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8020294:	e7d5      	b.n	8020242 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8020296:	3710      	adds	r7, #16
 8020298:	46bd      	mov	sp, r7
 802029a:	bd80      	pop	{r7, pc}

0802029c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 802029c:	b580      	push	{r7, lr}
 802029e:	b084      	sub	sp, #16
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 80202a4:	f7ef fe32 	bl	800ff0c <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 80202a8:	f7ef fddc 	bl	800fe64 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 80202ac:	4b0f      	ldr	r3, [pc, #60]	@ (80202ec <tcpip_thread+0x50>)
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	d005      	beq.n	80202c0 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 80202b4:	4b0d      	ldr	r3, [pc, #52]	@ (80202ec <tcpip_thread+0x50>)
 80202b6:	681b      	ldr	r3, [r3, #0]
 80202b8:	4a0d      	ldr	r2, [pc, #52]	@ (80202f0 <tcpip_thread+0x54>)
 80202ba:	6812      	ldr	r2, [r2, #0]
 80202bc:	4610      	mov	r0, r2
 80202be:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80202c0:	f107 030c 	add.w	r3, r7, #12
 80202c4:	4619      	mov	r1, r3
 80202c6:	480b      	ldr	r0, [pc, #44]	@ (80202f4 <tcpip_thread+0x58>)
 80202c8:	f7ff ffb6 	bl	8020238 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80202cc:	68fb      	ldr	r3, [r7, #12]
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	d106      	bne.n	80202e0 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80202d2:	4b09      	ldr	r3, [pc, #36]	@ (80202f8 <tcpip_thread+0x5c>)
 80202d4:	2291      	movs	r2, #145	@ 0x91
 80202d6:	4909      	ldr	r1, [pc, #36]	@ (80202fc <tcpip_thread+0x60>)
 80202d8:	4809      	ldr	r0, [pc, #36]	@ (8020300 <tcpip_thread+0x64>)
 80202da:	f001 fd67 	bl	8021dac <iprintf>
      continue;
 80202de:	e003      	b.n	80202e8 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 80202e0:	68fb      	ldr	r3, [r7, #12]
 80202e2:	4618      	mov	r0, r3
 80202e4:	f000 f80e 	bl	8020304 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80202e8:	e7ea      	b.n	80202c0 <tcpip_thread+0x24>
 80202ea:	bf00      	nop
 80202ec:	240126ec 	.word	0x240126ec
 80202f0:	240126f0 	.word	0x240126f0
 80202f4:	240126f4 	.word	0x240126f4
 80202f8:	08028414 	.word	0x08028414
 80202fc:	08028474 	.word	0x08028474
 8020300:	08028494 	.word	0x08028494

08020304 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8020304:	b580      	push	{r7, lr}
 8020306:	b082      	sub	sp, #8
 8020308:	af00      	add	r7, sp, #0
 802030a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	781b      	ldrb	r3, [r3, #0]
 8020310:	2b02      	cmp	r3, #2
 8020312:	d026      	beq.n	8020362 <tcpip_thread_handle_msg+0x5e>
 8020314:	2b02      	cmp	r3, #2
 8020316:	dc2b      	bgt.n	8020370 <tcpip_thread_handle_msg+0x6c>
 8020318:	2b00      	cmp	r3, #0
 802031a:	d002      	beq.n	8020322 <tcpip_thread_handle_msg+0x1e>
 802031c:	2b01      	cmp	r3, #1
 802031e:	d015      	beq.n	802034c <tcpip_thread_handle_msg+0x48>
 8020320:	e026      	b.n	8020370 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	68db      	ldr	r3, [r3, #12]
 8020326:	687a      	ldr	r2, [r7, #4]
 8020328:	6850      	ldr	r0, [r2, #4]
 802032a:	687a      	ldr	r2, [r7, #4]
 802032c:	6892      	ldr	r2, [r2, #8]
 802032e:	4611      	mov	r1, r2
 8020330:	4798      	blx	r3
 8020332:	4603      	mov	r3, r0
 8020334:	2b00      	cmp	r3, #0
 8020336:	d004      	beq.n	8020342 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	685b      	ldr	r3, [r3, #4]
 802033c:	4618      	mov	r0, r3
 802033e:	f7f9 fb29 	bl	8019994 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8020342:	6879      	ldr	r1, [r7, #4]
 8020344:	2009      	movs	r0, #9
 8020346:	f7f6 fe47 	bl	8016fd8 <memp_free>
      break;
 802034a:	e018      	b.n	802037e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	685b      	ldr	r3, [r3, #4]
 8020350:	687a      	ldr	r2, [r7, #4]
 8020352:	6892      	ldr	r2, [r2, #8]
 8020354:	4610      	mov	r0, r2
 8020356:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8020358:	6879      	ldr	r1, [r7, #4]
 802035a:	2008      	movs	r0, #8
 802035c:	f7f6 fe3c 	bl	8016fd8 <memp_free>
      break;
 8020360:	e00d      	b.n	802037e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	685b      	ldr	r3, [r3, #4]
 8020366:	687a      	ldr	r2, [r7, #4]
 8020368:	6892      	ldr	r2, [r2, #8]
 802036a:	4610      	mov	r0, r2
 802036c:	4798      	blx	r3
      break;
 802036e:	e006      	b.n	802037e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8020370:	4b05      	ldr	r3, [pc, #20]	@ (8020388 <tcpip_thread_handle_msg+0x84>)
 8020372:	22cf      	movs	r2, #207	@ 0xcf
 8020374:	4905      	ldr	r1, [pc, #20]	@ (802038c <tcpip_thread_handle_msg+0x88>)
 8020376:	4806      	ldr	r0, [pc, #24]	@ (8020390 <tcpip_thread_handle_msg+0x8c>)
 8020378:	f001 fd18 	bl	8021dac <iprintf>
      break;
 802037c:	bf00      	nop
  }
}
 802037e:	bf00      	nop
 8020380:	3708      	adds	r7, #8
 8020382:	46bd      	mov	sp, r7
 8020384:	bd80      	pop	{r7, pc}
 8020386:	bf00      	nop
 8020388:	08028414 	.word	0x08028414
 802038c:	08028474 	.word	0x08028474
 8020390:	08028494 	.word	0x08028494

08020394 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8020394:	b580      	push	{r7, lr}
 8020396:	b086      	sub	sp, #24
 8020398:	af00      	add	r7, sp, #0
 802039a:	60f8      	str	r0, [r7, #12]
 802039c:	60b9      	str	r1, [r7, #8]
 802039e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80203a0:	481a      	ldr	r0, [pc, #104]	@ (802040c <tcpip_inpkt+0x78>)
 80203a2:	f7f9 fe69 	bl	801a078 <sys_mbox_valid>
 80203a6:	4603      	mov	r3, r0
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d105      	bne.n	80203b8 <tcpip_inpkt+0x24>
 80203ac:	4b18      	ldr	r3, [pc, #96]	@ (8020410 <tcpip_inpkt+0x7c>)
 80203ae:	22fc      	movs	r2, #252	@ 0xfc
 80203b0:	4918      	ldr	r1, [pc, #96]	@ (8020414 <tcpip_inpkt+0x80>)
 80203b2:	4819      	ldr	r0, [pc, #100]	@ (8020418 <tcpip_inpkt+0x84>)
 80203b4:	f001 fcfa 	bl	8021dac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80203b8:	2009      	movs	r0, #9
 80203ba:	f7f6 fd97 	bl	8016eec <memp_malloc>
 80203be:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80203c0:	697b      	ldr	r3, [r7, #20]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d102      	bne.n	80203cc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80203c6:	f04f 33ff 	mov.w	r3, #4294967295
 80203ca:	e01a      	b.n	8020402 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80203cc:	697b      	ldr	r3, [r7, #20]
 80203ce:	2200      	movs	r2, #0
 80203d0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80203d2:	697b      	ldr	r3, [r7, #20]
 80203d4:	68fa      	ldr	r2, [r7, #12]
 80203d6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80203d8:	697b      	ldr	r3, [r7, #20]
 80203da:	68ba      	ldr	r2, [r7, #8]
 80203dc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80203de:	697b      	ldr	r3, [r7, #20]
 80203e0:	687a      	ldr	r2, [r7, #4]
 80203e2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80203e4:	6979      	ldr	r1, [r7, #20]
 80203e6:	4809      	ldr	r0, [pc, #36]	@ (802040c <tcpip_inpkt+0x78>)
 80203e8:	f7f9 fdfb 	bl	8019fe2 <sys_mbox_trypost>
 80203ec:	4603      	mov	r3, r0
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d006      	beq.n	8020400 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80203f2:	6979      	ldr	r1, [r7, #20]
 80203f4:	2009      	movs	r0, #9
 80203f6:	f7f6 fdef 	bl	8016fd8 <memp_free>
    return ERR_MEM;
 80203fa:	f04f 33ff 	mov.w	r3, #4294967295
 80203fe:	e000      	b.n	8020402 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8020400:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8020402:	4618      	mov	r0, r3
 8020404:	3718      	adds	r7, #24
 8020406:	46bd      	mov	sp, r7
 8020408:	bd80      	pop	{r7, pc}
 802040a:	bf00      	nop
 802040c:	240126f4 	.word	0x240126f4
 8020410:	08028414 	.word	0x08028414
 8020414:	080284bc 	.word	0x080284bc
 8020418:	08028494 	.word	0x08028494

0802041c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 802041c:	b580      	push	{r7, lr}
 802041e:	b082      	sub	sp, #8
 8020420:	af00      	add	r7, sp, #0
 8020422:	6078      	str	r0, [r7, #4]
 8020424:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8020426:	683b      	ldr	r3, [r7, #0]
 8020428:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802042c:	f003 0318 	and.w	r3, r3, #24
 8020430:	2b00      	cmp	r3, #0
 8020432:	d006      	beq.n	8020442 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8020434:	4a08      	ldr	r2, [pc, #32]	@ (8020458 <tcpip_input+0x3c>)
 8020436:	6839      	ldr	r1, [r7, #0]
 8020438:	6878      	ldr	r0, [r7, #4]
 802043a:	f7ff ffab 	bl	8020394 <tcpip_inpkt>
 802043e:	4603      	mov	r3, r0
 8020440:	e005      	b.n	802044e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8020442:	4a06      	ldr	r2, [pc, #24]	@ (802045c <tcpip_input+0x40>)
 8020444:	6839      	ldr	r1, [r7, #0]
 8020446:	6878      	ldr	r0, [r7, #4]
 8020448:	f7ff ffa4 	bl	8020394 <tcpip_inpkt>
 802044c:	4603      	mov	r3, r0
}
 802044e:	4618      	mov	r0, r3
 8020450:	3708      	adds	r7, #8
 8020452:	46bd      	mov	sp, r7
 8020454:	bd80      	pop	{r7, pc}
 8020456:	bf00      	nop
 8020458:	08014cc9 	.word	0x08014cc9
 802045c:	080154bd 	.word	0x080154bd

08020460 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8020460:	b580      	push	{r7, lr}
 8020462:	b084      	sub	sp, #16
 8020464:	af00      	add	r7, sp, #0
 8020466:	6078      	str	r0, [r7, #4]
 8020468:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 802046a:	4819      	ldr	r0, [pc, #100]	@ (80204d0 <tcpip_try_callback+0x70>)
 802046c:	f7f9 fe04 	bl	801a078 <sys_mbox_valid>
 8020470:	4603      	mov	r3, r0
 8020472:	2b00      	cmp	r3, #0
 8020474:	d106      	bne.n	8020484 <tcpip_try_callback+0x24>
 8020476:	4b17      	ldr	r3, [pc, #92]	@ (80204d4 <tcpip_try_callback+0x74>)
 8020478:	f240 125d 	movw	r2, #349	@ 0x15d
 802047c:	4916      	ldr	r1, [pc, #88]	@ (80204d8 <tcpip_try_callback+0x78>)
 802047e:	4817      	ldr	r0, [pc, #92]	@ (80204dc <tcpip_try_callback+0x7c>)
 8020480:	f001 fc94 	bl	8021dac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8020484:	2008      	movs	r0, #8
 8020486:	f7f6 fd31 	bl	8016eec <memp_malloc>
 802048a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	2b00      	cmp	r3, #0
 8020490:	d102      	bne.n	8020498 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8020492:	f04f 33ff 	mov.w	r3, #4294967295
 8020496:	e017      	b.n	80204c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8020498:	68fb      	ldr	r3, [r7, #12]
 802049a:	2201      	movs	r2, #1
 802049c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 802049e:	68fb      	ldr	r3, [r7, #12]
 80204a0:	687a      	ldr	r2, [r7, #4]
 80204a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	683a      	ldr	r2, [r7, #0]
 80204a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80204aa:	68f9      	ldr	r1, [r7, #12]
 80204ac:	4808      	ldr	r0, [pc, #32]	@ (80204d0 <tcpip_try_callback+0x70>)
 80204ae:	f7f9 fd98 	bl	8019fe2 <sys_mbox_trypost>
 80204b2:	4603      	mov	r3, r0
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d006      	beq.n	80204c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80204b8:	68f9      	ldr	r1, [r7, #12]
 80204ba:	2008      	movs	r0, #8
 80204bc:	f7f6 fd8c 	bl	8016fd8 <memp_free>
    return ERR_MEM;
 80204c0:	f04f 33ff 	mov.w	r3, #4294967295
 80204c4:	e000      	b.n	80204c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80204c6:	2300      	movs	r3, #0
}
 80204c8:	4618      	mov	r0, r3
 80204ca:	3710      	adds	r7, #16
 80204cc:	46bd      	mov	sp, r7
 80204ce:	bd80      	pop	{r7, pc}
 80204d0:	240126f4 	.word	0x240126f4
 80204d4:	08028414 	.word	0x08028414
 80204d8:	080284bc 	.word	0x080284bc
 80204dc:	08028494 	.word	0x08028494

080204e0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80204e0:	b580      	push	{r7, lr}
 80204e2:	b084      	sub	sp, #16
 80204e4:	af00      	add	r7, sp, #0
 80204e6:	60f8      	str	r0, [r7, #12]
 80204e8:	60b9      	str	r1, [r7, #8]
 80204ea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80204ec:	f7ef fcba 	bl	800fe64 <sys_lock_tcpip_core>
  fn(apimsg);
 80204f0:	68fb      	ldr	r3, [r7, #12]
 80204f2:	68b8      	ldr	r0, [r7, #8]
 80204f4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80204f6:	f7ef fcc5 	bl	800fe84 <sys_unlock_tcpip_core>
  return ERR_OK;
 80204fa:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80204fc:	4618      	mov	r0, r3
 80204fe:	3710      	adds	r7, #16
 8020500:	46bd      	mov	sp, r7
 8020502:	bd80      	pop	{r7, pc}

08020504 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8020504:	b580      	push	{r7, lr}
 8020506:	b084      	sub	sp, #16
 8020508:	af02      	add	r7, sp, #8
 802050a:	6078      	str	r0, [r7, #4]
 802050c:	6039      	str	r1, [r7, #0]
  lwip_init();
 802050e:	f7f4 ff23 	bl	8015358 <lwip_init>

  tcpip_init_done = initfunc;
 8020512:	4a17      	ldr	r2, [pc, #92]	@ (8020570 <tcpip_init+0x6c>)
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8020518:	4a16      	ldr	r2, [pc, #88]	@ (8020574 <tcpip_init+0x70>)
 802051a:	683b      	ldr	r3, [r7, #0]
 802051c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 802051e:	2110      	movs	r1, #16
 8020520:	4815      	ldr	r0, [pc, #84]	@ (8020578 <tcpip_init+0x74>)
 8020522:	f7f9 fd44 	bl	8019fae <sys_mbox_new>
 8020526:	4603      	mov	r3, r0
 8020528:	2b00      	cmp	r3, #0
 802052a:	d006      	beq.n	802053a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 802052c:	4b13      	ldr	r3, [pc, #76]	@ (802057c <tcpip_init+0x78>)
 802052e:	f240 2261 	movw	r2, #609	@ 0x261
 8020532:	4913      	ldr	r1, [pc, #76]	@ (8020580 <tcpip_init+0x7c>)
 8020534:	4813      	ldr	r0, [pc, #76]	@ (8020584 <tcpip_init+0x80>)
 8020536:	f001 fc39 	bl	8021dac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 802053a:	4813      	ldr	r0, [pc, #76]	@ (8020588 <tcpip_init+0x84>)
 802053c:	f7f9 fdba 	bl	801a0b4 <sys_mutex_new>
 8020540:	4603      	mov	r3, r0
 8020542:	2b00      	cmp	r3, #0
 8020544:	d006      	beq.n	8020554 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8020546:	4b0d      	ldr	r3, [pc, #52]	@ (802057c <tcpip_init+0x78>)
 8020548:	f240 2265 	movw	r2, #613	@ 0x265
 802054c:	490f      	ldr	r1, [pc, #60]	@ (802058c <tcpip_init+0x88>)
 802054e:	480d      	ldr	r0, [pc, #52]	@ (8020584 <tcpip_init+0x80>)
 8020550:	f001 fc2c 	bl	8021dac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8020554:	2318      	movs	r3, #24
 8020556:	9300      	str	r3, [sp, #0]
 8020558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802055c:	2200      	movs	r2, #0
 802055e:	490c      	ldr	r1, [pc, #48]	@ (8020590 <tcpip_init+0x8c>)
 8020560:	480c      	ldr	r0, [pc, #48]	@ (8020594 <tcpip_init+0x90>)
 8020562:	f7f9 fdd9 	bl	801a118 <sys_thread_new>
}
 8020566:	bf00      	nop
 8020568:	3708      	adds	r7, #8
 802056a:	46bd      	mov	sp, r7
 802056c:	bd80      	pop	{r7, pc}
 802056e:	bf00      	nop
 8020570:	240126ec 	.word	0x240126ec
 8020574:	240126f0 	.word	0x240126f0
 8020578:	240126f4 	.word	0x240126f4
 802057c:	08028414 	.word	0x08028414
 8020580:	080284cc 	.word	0x080284cc
 8020584:	08028494 	.word	0x08028494
 8020588:	240126f8 	.word	0x240126f8
 802058c:	080284f0 	.word	0x080284f0
 8020590:	0802029d 	.word	0x0802029d
 8020594:	08028514 	.word	0x08028514

08020598 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8020598:	b580      	push	{r7, lr}
 802059a:	b082      	sub	sp, #8
 802059c:	af00      	add	r7, sp, #0
 802059e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80205a0:	f7f9 fe42 	bl	801a228 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80205a4:	4b0a      	ldr	r3, [pc, #40]	@ (80205d0 <tcpip_tcp_timer+0x38>)
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d103      	bne.n	80205b4 <tcpip_tcp_timer+0x1c>
 80205ac:	4b09      	ldr	r3, [pc, #36]	@ (80205d4 <tcpip_tcp_timer+0x3c>)
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d005      	beq.n	80205c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80205b4:	2200      	movs	r2, #0
 80205b6:	4908      	ldr	r1, [pc, #32]	@ (80205d8 <tcpip_tcp_timer+0x40>)
 80205b8:	20fa      	movs	r0, #250	@ 0xfa
 80205ba:	f000 f8f5 	bl	80207a8 <sys_timeout>
 80205be:	e003      	b.n	80205c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80205c0:	4b06      	ldr	r3, [pc, #24]	@ (80205dc <tcpip_tcp_timer+0x44>)
 80205c2:	2200      	movs	r2, #0
 80205c4:	601a      	str	r2, [r3, #0]
  }
}
 80205c6:	bf00      	nop
 80205c8:	bf00      	nop
 80205ca:	3708      	adds	r7, #8
 80205cc:	46bd      	mov	sp, r7
 80205ce:	bd80      	pop	{r7, pc}
 80205d0:	240126a8 	.word	0x240126a8
 80205d4:	240126ac 	.word	0x240126ac
 80205d8:	08020599 	.word	0x08020599
 80205dc:	24012704 	.word	0x24012704

080205e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80205e0:	b580      	push	{r7, lr}
 80205e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 80205e4:	f7ef fc5c 	bl	800fea0 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80205e8:	4b0a      	ldr	r3, [pc, #40]	@ (8020614 <tcp_timer_needed+0x34>)
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d10f      	bne.n	8020610 <tcp_timer_needed+0x30>
 80205f0:	4b09      	ldr	r3, [pc, #36]	@ (8020618 <tcp_timer_needed+0x38>)
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d103      	bne.n	8020600 <tcp_timer_needed+0x20>
 80205f8:	4b08      	ldr	r3, [pc, #32]	@ (802061c <tcp_timer_needed+0x3c>)
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d007      	beq.n	8020610 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8020600:	4b04      	ldr	r3, [pc, #16]	@ (8020614 <tcp_timer_needed+0x34>)
 8020602:	2201      	movs	r2, #1
 8020604:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020606:	2200      	movs	r2, #0
 8020608:	4905      	ldr	r1, [pc, #20]	@ (8020620 <tcp_timer_needed+0x40>)
 802060a:	20fa      	movs	r0, #250	@ 0xfa
 802060c:	f000 f8cc 	bl	80207a8 <sys_timeout>
  }
}
 8020610:	bf00      	nop
 8020612:	bd80      	pop	{r7, pc}
 8020614:	24012704 	.word	0x24012704
 8020618:	240126a8 	.word	0x240126a8
 802061c:	240126ac 	.word	0x240126ac
 8020620:	08020599 	.word	0x08020599

08020624 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020624:	b580      	push	{r7, lr}
 8020626:	b086      	sub	sp, #24
 8020628:	af00      	add	r7, sp, #0
 802062a:	60f8      	str	r0, [r7, #12]
 802062c:	60b9      	str	r1, [r7, #8]
 802062e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020630:	200a      	movs	r0, #10
 8020632:	f7f6 fc5b 	bl	8016eec <memp_malloc>
 8020636:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8020638:	693b      	ldr	r3, [r7, #16]
 802063a:	2b00      	cmp	r3, #0
 802063c:	d109      	bne.n	8020652 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 802063e:	693b      	ldr	r3, [r7, #16]
 8020640:	2b00      	cmp	r3, #0
 8020642:	d151      	bne.n	80206e8 <sys_timeout_abs+0xc4>
 8020644:	4b2a      	ldr	r3, [pc, #168]	@ (80206f0 <sys_timeout_abs+0xcc>)
 8020646:	22be      	movs	r2, #190	@ 0xbe
 8020648:	492a      	ldr	r1, [pc, #168]	@ (80206f4 <sys_timeout_abs+0xd0>)
 802064a:	482b      	ldr	r0, [pc, #172]	@ (80206f8 <sys_timeout_abs+0xd4>)
 802064c:	f001 fbae 	bl	8021dac <iprintf>
    return;
 8020650:	e04a      	b.n	80206e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8020652:	693b      	ldr	r3, [r7, #16]
 8020654:	2200      	movs	r2, #0
 8020656:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8020658:	693b      	ldr	r3, [r7, #16]
 802065a:	68ba      	ldr	r2, [r7, #8]
 802065c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 802065e:	693b      	ldr	r3, [r7, #16]
 8020660:	687a      	ldr	r2, [r7, #4]
 8020662:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8020664:	693b      	ldr	r3, [r7, #16]
 8020666:	68fa      	ldr	r2, [r7, #12]
 8020668:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 802066a:	4b24      	ldr	r3, [pc, #144]	@ (80206fc <sys_timeout_abs+0xd8>)
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d103      	bne.n	802067a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8020672:	4a22      	ldr	r2, [pc, #136]	@ (80206fc <sys_timeout_abs+0xd8>)
 8020674:	693b      	ldr	r3, [r7, #16]
 8020676:	6013      	str	r3, [r2, #0]
    return;
 8020678:	e037      	b.n	80206ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 802067a:	693b      	ldr	r3, [r7, #16]
 802067c:	685a      	ldr	r2, [r3, #4]
 802067e:	4b1f      	ldr	r3, [pc, #124]	@ (80206fc <sys_timeout_abs+0xd8>)
 8020680:	681b      	ldr	r3, [r3, #0]
 8020682:	685b      	ldr	r3, [r3, #4]
 8020684:	1ad3      	subs	r3, r2, r3
 8020686:	0fdb      	lsrs	r3, r3, #31
 8020688:	f003 0301 	and.w	r3, r3, #1
 802068c:	b2db      	uxtb	r3, r3
 802068e:	2b00      	cmp	r3, #0
 8020690:	d007      	beq.n	80206a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8020692:	4b1a      	ldr	r3, [pc, #104]	@ (80206fc <sys_timeout_abs+0xd8>)
 8020694:	681a      	ldr	r2, [r3, #0]
 8020696:	693b      	ldr	r3, [r7, #16]
 8020698:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 802069a:	4a18      	ldr	r2, [pc, #96]	@ (80206fc <sys_timeout_abs+0xd8>)
 802069c:	693b      	ldr	r3, [r7, #16]
 802069e:	6013      	str	r3, [r2, #0]
 80206a0:	e023      	b.n	80206ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80206a2:	4b16      	ldr	r3, [pc, #88]	@ (80206fc <sys_timeout_abs+0xd8>)
 80206a4:	681b      	ldr	r3, [r3, #0]
 80206a6:	617b      	str	r3, [r7, #20]
 80206a8:	e01a      	b.n	80206e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80206aa:	697b      	ldr	r3, [r7, #20]
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d00b      	beq.n	80206ca <sys_timeout_abs+0xa6>
 80206b2:	693b      	ldr	r3, [r7, #16]
 80206b4:	685a      	ldr	r2, [r3, #4]
 80206b6:	697b      	ldr	r3, [r7, #20]
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	685b      	ldr	r3, [r3, #4]
 80206bc:	1ad3      	subs	r3, r2, r3
 80206be:	0fdb      	lsrs	r3, r3, #31
 80206c0:	f003 0301 	and.w	r3, r3, #1
 80206c4:	b2db      	uxtb	r3, r3
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d007      	beq.n	80206da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80206ca:	697b      	ldr	r3, [r7, #20]
 80206cc:	681a      	ldr	r2, [r3, #0]
 80206ce:	693b      	ldr	r3, [r7, #16]
 80206d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80206d2:	697b      	ldr	r3, [r7, #20]
 80206d4:	693a      	ldr	r2, [r7, #16]
 80206d6:	601a      	str	r2, [r3, #0]
        break;
 80206d8:	e007      	b.n	80206ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80206da:	697b      	ldr	r3, [r7, #20]
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	617b      	str	r3, [r7, #20]
 80206e0:	697b      	ldr	r3, [r7, #20]
 80206e2:	2b00      	cmp	r3, #0
 80206e4:	d1e1      	bne.n	80206aa <sys_timeout_abs+0x86>
 80206e6:	e000      	b.n	80206ea <sys_timeout_abs+0xc6>
    return;
 80206e8:	bf00      	nop
      }
    }
  }
}
 80206ea:	3718      	adds	r7, #24
 80206ec:	46bd      	mov	sp, r7
 80206ee:	bd80      	pop	{r7, pc}
 80206f0:	08028524 	.word	0x08028524
 80206f4:	08028588 	.word	0x08028588
 80206f8:	080285c8 	.word	0x080285c8
 80206fc:	240126fc 	.word	0x240126fc

08020700 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020700:	b580      	push	{r7, lr}
 8020702:	b086      	sub	sp, #24
 8020704:	af00      	add	r7, sp, #0
 8020706:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 802070c:	697b      	ldr	r3, [r7, #20]
 802070e:	685b      	ldr	r3, [r3, #4]
 8020710:	4798      	blx	r3

  now = sys_now();
 8020712:	f7ef f965 	bl	800f9e0 <sys_now>
 8020716:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020718:	697b      	ldr	r3, [r7, #20]
 802071a:	681a      	ldr	r2, [r3, #0]
 802071c:	4b0f      	ldr	r3, [pc, #60]	@ (802075c <lwip_cyclic_timer+0x5c>)
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	4413      	add	r3, r2
 8020722:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020724:	68fa      	ldr	r2, [r7, #12]
 8020726:	693b      	ldr	r3, [r7, #16]
 8020728:	1ad3      	subs	r3, r2, r3
 802072a:	0fdb      	lsrs	r3, r3, #31
 802072c:	f003 0301 	and.w	r3, r3, #1
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d009      	beq.n	802074a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020736:	697b      	ldr	r3, [r7, #20]
 8020738:	681a      	ldr	r2, [r3, #0]
 802073a:	693b      	ldr	r3, [r7, #16]
 802073c:	4413      	add	r3, r2
 802073e:	687a      	ldr	r2, [r7, #4]
 8020740:	4907      	ldr	r1, [pc, #28]	@ (8020760 <lwip_cyclic_timer+0x60>)
 8020742:	4618      	mov	r0, r3
 8020744:	f7ff ff6e 	bl	8020624 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020748:	e004      	b.n	8020754 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 802074a:	687a      	ldr	r2, [r7, #4]
 802074c:	4904      	ldr	r1, [pc, #16]	@ (8020760 <lwip_cyclic_timer+0x60>)
 802074e:	68f8      	ldr	r0, [r7, #12]
 8020750:	f7ff ff68 	bl	8020624 <sys_timeout_abs>
}
 8020754:	bf00      	nop
 8020756:	3718      	adds	r7, #24
 8020758:	46bd      	mov	sp, r7
 802075a:	bd80      	pop	{r7, pc}
 802075c:	24012700 	.word	0x24012700
 8020760:	08020701 	.word	0x08020701

08020764 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8020764:	b580      	push	{r7, lr}
 8020766:	b082      	sub	sp, #8
 8020768:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802076a:	2301      	movs	r3, #1
 802076c:	607b      	str	r3, [r7, #4]
 802076e:	e00e      	b.n	802078e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020770:	4a0b      	ldr	r2, [pc, #44]	@ (80207a0 <sys_timeouts_init+0x3c>)
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	00db      	lsls	r3, r3, #3
 802077c:	4a08      	ldr	r2, [pc, #32]	@ (80207a0 <sys_timeouts_init+0x3c>)
 802077e:	4413      	add	r3, r2
 8020780:	461a      	mov	r2, r3
 8020782:	4908      	ldr	r1, [pc, #32]	@ (80207a4 <sys_timeouts_init+0x40>)
 8020784:	f000 f810 	bl	80207a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	3301      	adds	r3, #1
 802078c:	607b      	str	r3, [r7, #4]
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	2b02      	cmp	r3, #2
 8020792:	d9ed      	bls.n	8020770 <sys_timeouts_init+0xc>
  }
}
 8020794:	bf00      	nop
 8020796:	bf00      	nop
 8020798:	3708      	adds	r7, #8
 802079a:	46bd      	mov	sp, r7
 802079c:	bd80      	pop	{r7, pc}
 802079e:	bf00      	nop
 80207a0:	08028b48 	.word	0x08028b48
 80207a4:	08020701 	.word	0x08020701

080207a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80207a8:	b580      	push	{r7, lr}
 80207aa:	b086      	sub	sp, #24
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	60f8      	str	r0, [r7, #12]
 80207b0:	60b9      	str	r1, [r7, #8]
 80207b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 80207b4:	f7ef fb74 	bl	800fea0 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80207be:	d306      	bcc.n	80207ce <sys_timeout+0x26>
 80207c0:	4b0a      	ldr	r3, [pc, #40]	@ (80207ec <sys_timeout+0x44>)
 80207c2:	f240 1229 	movw	r2, #297	@ 0x129
 80207c6:	490a      	ldr	r1, [pc, #40]	@ (80207f0 <sys_timeout+0x48>)
 80207c8:	480a      	ldr	r0, [pc, #40]	@ (80207f4 <sys_timeout+0x4c>)
 80207ca:	f001 faef 	bl	8021dac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80207ce:	f7ef f907 	bl	800f9e0 <sys_now>
 80207d2:	4602      	mov	r2, r0
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	4413      	add	r3, r2
 80207d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80207da:	687a      	ldr	r2, [r7, #4]
 80207dc:	68b9      	ldr	r1, [r7, #8]
 80207de:	6978      	ldr	r0, [r7, #20]
 80207e0:	f7ff ff20 	bl	8020624 <sys_timeout_abs>
#endif
}
 80207e4:	bf00      	nop
 80207e6:	3718      	adds	r7, #24
 80207e8:	46bd      	mov	sp, r7
 80207ea:	bd80      	pop	{r7, pc}
 80207ec:	08028524 	.word	0x08028524
 80207f0:	080285f0 	.word	0x080285f0
 80207f4:	080285c8 	.word	0x080285c8

080207f8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80207f8:	b580      	push	{r7, lr}
 80207fa:	b084      	sub	sp, #16
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	6078      	str	r0, [r7, #4]
 8020800:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();
 8020802:	f7ef fb4d 	bl	800fea0 <sys_check_core_locking>

  if (next_timeout == NULL) {
 8020806:	4b19      	ldr	r3, [pc, #100]	@ (802086c <sys_untimeout+0x74>)
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d029      	beq.n	8020862 <sys_untimeout+0x6a>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 802080e:	4b17      	ldr	r3, [pc, #92]	@ (802086c <sys_untimeout+0x74>)
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	60bb      	str	r3, [r7, #8]
 8020814:	2300      	movs	r3, #0
 8020816:	60fb      	str	r3, [r7, #12]
 8020818:	e01f      	b.n	802085a <sys_untimeout+0x62>
    if ((t->h == handler) && (t->arg == arg)) {
 802081a:	68bb      	ldr	r3, [r7, #8]
 802081c:	689b      	ldr	r3, [r3, #8]
 802081e:	687a      	ldr	r2, [r7, #4]
 8020820:	429a      	cmp	r2, r3
 8020822:	d115      	bne.n	8020850 <sys_untimeout+0x58>
 8020824:	68bb      	ldr	r3, [r7, #8]
 8020826:	68db      	ldr	r3, [r3, #12]
 8020828:	683a      	ldr	r2, [r7, #0]
 802082a:	429a      	cmp	r2, r3
 802082c:	d110      	bne.n	8020850 <sys_untimeout+0x58>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	2b00      	cmp	r3, #0
 8020832:	d104      	bne.n	802083e <sys_untimeout+0x46>
        next_timeout = t->next;
 8020834:	68bb      	ldr	r3, [r7, #8]
 8020836:	681b      	ldr	r3, [r3, #0]
 8020838:	4a0c      	ldr	r2, [pc, #48]	@ (802086c <sys_untimeout+0x74>)
 802083a:	6013      	str	r3, [r2, #0]
 802083c:	e003      	b.n	8020846 <sys_untimeout+0x4e>
      } else {
        prev_t->next = t->next;
 802083e:	68bb      	ldr	r3, [r7, #8]
 8020840:	681a      	ldr	r2, [r3, #0]
 8020842:	68fb      	ldr	r3, [r7, #12]
 8020844:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8020846:	68b9      	ldr	r1, [r7, #8]
 8020848:	200a      	movs	r0, #10
 802084a:	f7f6 fbc5 	bl	8016fd8 <memp_free>
      return;
 802084e:	e009      	b.n	8020864 <sys_untimeout+0x6c>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8020850:	68bb      	ldr	r3, [r7, #8]
 8020852:	60fb      	str	r3, [r7, #12]
 8020854:	68bb      	ldr	r3, [r7, #8]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	60bb      	str	r3, [r7, #8]
 802085a:	68bb      	ldr	r3, [r7, #8]
 802085c:	2b00      	cmp	r3, #0
 802085e:	d1dc      	bne.n	802081a <sys_untimeout+0x22>
    }
  }
  return;
 8020860:	e000      	b.n	8020864 <sys_untimeout+0x6c>
    return;
 8020862:	bf00      	nop
}
 8020864:	3710      	adds	r7, #16
 8020866:	46bd      	mov	sp, r7
 8020868:	bd80      	pop	{r7, pc}
 802086a:	bf00      	nop
 802086c:	240126fc 	.word	0x240126fc

08020870 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8020870:	b580      	push	{r7, lr}
 8020872:	b084      	sub	sp, #16
 8020874:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8020876:	f7ef fb13 	bl	800fea0 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802087a:	f7ef f8b1 	bl	800f9e0 <sys_now>
 802087e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8020880:	4b17      	ldr	r3, [pc, #92]	@ (80208e0 <sys_check_timeouts+0x70>)
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8020886:	68bb      	ldr	r3, [r7, #8]
 8020888:	2b00      	cmp	r3, #0
 802088a:	d022      	beq.n	80208d2 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 802088c:	68bb      	ldr	r3, [r7, #8]
 802088e:	685b      	ldr	r3, [r3, #4]
 8020890:	68fa      	ldr	r2, [r7, #12]
 8020892:	1ad3      	subs	r3, r2, r3
 8020894:	0fdb      	lsrs	r3, r3, #31
 8020896:	f003 0301 	and.w	r3, r3, #1
 802089a:	b2db      	uxtb	r3, r3
 802089c:	2b00      	cmp	r3, #0
 802089e:	d11a      	bne.n	80208d6 <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80208a0:	68bb      	ldr	r3, [r7, #8]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	4a0e      	ldr	r2, [pc, #56]	@ (80208e0 <sys_check_timeouts+0x70>)
 80208a6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80208a8:	68bb      	ldr	r3, [r7, #8]
 80208aa:	689b      	ldr	r3, [r3, #8]
 80208ac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80208ae:	68bb      	ldr	r3, [r7, #8]
 80208b0:	68db      	ldr	r3, [r3, #12]
 80208b2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80208b4:	68bb      	ldr	r3, [r7, #8]
 80208b6:	685b      	ldr	r3, [r3, #4]
 80208b8:	4a0a      	ldr	r2, [pc, #40]	@ (80208e4 <sys_check_timeouts+0x74>)
 80208ba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80208bc:	68b9      	ldr	r1, [r7, #8]
 80208be:	200a      	movs	r0, #10
 80208c0:	f7f6 fb8a 	bl	8016fd8 <memp_free>
    if (handler != NULL) {
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d0da      	beq.n	8020880 <sys_check_timeouts+0x10>
      handler(arg);
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	6838      	ldr	r0, [r7, #0]
 80208ce:	4798      	blx	r3
  do {
 80208d0:	e7d6      	b.n	8020880 <sys_check_timeouts+0x10>
      return;
 80208d2:	bf00      	nop
 80208d4:	e000      	b.n	80208d8 <sys_check_timeouts+0x68>
      return;
 80208d6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80208d8:	3710      	adds	r7, #16
 80208da:	46bd      	mov	sp, r7
 80208dc:	bd80      	pop	{r7, pc}
 80208de:	bf00      	nop
 80208e0:	240126fc 	.word	0x240126fc
 80208e4:	24012700 	.word	0x24012700

080208e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	b082      	sub	sp, #8
 80208ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 80208ee:	f7ef fad7 	bl	800fea0 <sys_check_core_locking>

  if (next_timeout == NULL) {
 80208f2:	4b16      	ldr	r3, [pc, #88]	@ (802094c <sys_timeouts_sleeptime+0x64>)
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	d102      	bne.n	8020900 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80208fa:	f04f 33ff 	mov.w	r3, #4294967295
 80208fe:	e020      	b.n	8020942 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8020900:	f7ef f86e 	bl	800f9e0 <sys_now>
 8020904:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020906:	4b11      	ldr	r3, [pc, #68]	@ (802094c <sys_timeouts_sleeptime+0x64>)
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	685a      	ldr	r2, [r3, #4]
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	1ad3      	subs	r3, r2, r3
 8020910:	0fdb      	lsrs	r3, r3, #31
 8020912:	f003 0301 	and.w	r3, r3, #1
 8020916:	b2db      	uxtb	r3, r3
 8020918:	2b00      	cmp	r3, #0
 802091a:	d001      	beq.n	8020920 <sys_timeouts_sleeptime+0x38>
    return 0;
 802091c:	2300      	movs	r3, #0
 802091e:	e010      	b.n	8020942 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020920:	4b0a      	ldr	r3, [pc, #40]	@ (802094c <sys_timeouts_sleeptime+0x64>)
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	685a      	ldr	r2, [r3, #4]
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	1ad3      	subs	r3, r2, r3
 802092a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 802092c:	683b      	ldr	r3, [r7, #0]
 802092e:	2b00      	cmp	r3, #0
 8020930:	da06      	bge.n	8020940 <sys_timeouts_sleeptime+0x58>
 8020932:	4b07      	ldr	r3, [pc, #28]	@ (8020950 <sys_timeouts_sleeptime+0x68>)
 8020934:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8020938:	4906      	ldr	r1, [pc, #24]	@ (8020954 <sys_timeouts_sleeptime+0x6c>)
 802093a:	4807      	ldr	r0, [pc, #28]	@ (8020958 <sys_timeouts_sleeptime+0x70>)
 802093c:	f001 fa36 	bl	8021dac <iprintf>
    return ret;
 8020940:	683b      	ldr	r3, [r7, #0]
  }
}
 8020942:	4618      	mov	r0, r3
 8020944:	3708      	adds	r7, #8
 8020946:	46bd      	mov	sp, r7
 8020948:	bd80      	pop	{r7, pc}
 802094a:	bf00      	nop
 802094c:	240126fc 	.word	0x240126fc
 8020950:	08028524 	.word	0x08028524
 8020954:	08028628 	.word	0x08028628
 8020958:	080285c8 	.word	0x080285c8

0802095c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 802095c:	b580      	push	{r7, lr}
 802095e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020960:	f000 fc6a 	bl	8021238 <rand>
 8020964:	4603      	mov	r3, r0
 8020966:	b29b      	uxth	r3, r3
 8020968:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802096c:	b29b      	uxth	r3, r3
 802096e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8020972:	b29a      	uxth	r2, r3
 8020974:	4b01      	ldr	r3, [pc, #4]	@ (802097c <udp_init+0x20>)
 8020976:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8020978:	bf00      	nop
 802097a:	bd80      	pop	{r7, pc}
 802097c:	24000050 	.word	0x24000050

08020980 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8020980:	b480      	push	{r7}
 8020982:	b083      	sub	sp, #12
 8020984:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8020986:	2300      	movs	r3, #0
 8020988:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802098a:	4b17      	ldr	r3, [pc, #92]	@ (80209e8 <udp_new_port+0x68>)
 802098c:	881b      	ldrh	r3, [r3, #0]
 802098e:	1c5a      	adds	r2, r3, #1
 8020990:	b291      	uxth	r1, r2
 8020992:	4a15      	ldr	r2, [pc, #84]	@ (80209e8 <udp_new_port+0x68>)
 8020994:	8011      	strh	r1, [r2, #0]
 8020996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802099a:	4293      	cmp	r3, r2
 802099c:	d103      	bne.n	80209a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 802099e:	4b12      	ldr	r3, [pc, #72]	@ (80209e8 <udp_new_port+0x68>)
 80209a0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80209a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80209a6:	4b11      	ldr	r3, [pc, #68]	@ (80209ec <udp_new_port+0x6c>)
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	603b      	str	r3, [r7, #0]
 80209ac:	e011      	b.n	80209d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80209ae:	683b      	ldr	r3, [r7, #0]
 80209b0:	8a5a      	ldrh	r2, [r3, #18]
 80209b2:	4b0d      	ldr	r3, [pc, #52]	@ (80209e8 <udp_new_port+0x68>)
 80209b4:	881b      	ldrh	r3, [r3, #0]
 80209b6:	429a      	cmp	r2, r3
 80209b8:	d108      	bne.n	80209cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80209ba:	88fb      	ldrh	r3, [r7, #6]
 80209bc:	3301      	adds	r3, #1
 80209be:	80fb      	strh	r3, [r7, #6]
 80209c0:	88fb      	ldrh	r3, [r7, #6]
 80209c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80209c6:	d3e0      	bcc.n	802098a <udp_new_port+0xa>
        return 0;
 80209c8:	2300      	movs	r3, #0
 80209ca:	e007      	b.n	80209dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80209cc:	683b      	ldr	r3, [r7, #0]
 80209ce:	68db      	ldr	r3, [r3, #12]
 80209d0:	603b      	str	r3, [r7, #0]
 80209d2:	683b      	ldr	r3, [r7, #0]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d1ea      	bne.n	80209ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80209d8:	4b03      	ldr	r3, [pc, #12]	@ (80209e8 <udp_new_port+0x68>)
 80209da:	881b      	ldrh	r3, [r3, #0]
}
 80209dc:	4618      	mov	r0, r3
 80209de:	370c      	adds	r7, #12
 80209e0:	46bd      	mov	sp, r7
 80209e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209e6:	4770      	bx	lr
 80209e8:	24000050 	.word	0x24000050
 80209ec:	24012708 	.word	0x24012708

080209f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80209f0:	b580      	push	{r7, lr}
 80209f2:	b084      	sub	sp, #16
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	60f8      	str	r0, [r7, #12]
 80209f8:	60b9      	str	r1, [r7, #8]
 80209fa:	4613      	mov	r3, r2
 80209fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80209fe:	68fb      	ldr	r3, [r7, #12]
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	d105      	bne.n	8020a10 <udp_input_local_match+0x20>
 8020a04:	4b27      	ldr	r3, [pc, #156]	@ (8020aa4 <udp_input_local_match+0xb4>)
 8020a06:	2287      	movs	r2, #135	@ 0x87
 8020a08:	4927      	ldr	r1, [pc, #156]	@ (8020aa8 <udp_input_local_match+0xb8>)
 8020a0a:	4828      	ldr	r0, [pc, #160]	@ (8020aac <udp_input_local_match+0xbc>)
 8020a0c:	f001 f9ce 	bl	8021dac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020a10:	68bb      	ldr	r3, [r7, #8]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d105      	bne.n	8020a22 <udp_input_local_match+0x32>
 8020a16:	4b23      	ldr	r3, [pc, #140]	@ (8020aa4 <udp_input_local_match+0xb4>)
 8020a18:	2288      	movs	r2, #136	@ 0x88
 8020a1a:	4925      	ldr	r1, [pc, #148]	@ (8020ab0 <udp_input_local_match+0xc0>)
 8020a1c:	4823      	ldr	r0, [pc, #140]	@ (8020aac <udp_input_local_match+0xbc>)
 8020a1e:	f001 f9c5 	bl	8021dac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020a22:	68fb      	ldr	r3, [r7, #12]
 8020a24:	7a1b      	ldrb	r3, [r3, #8]
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d00b      	beq.n	8020a42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	7a1a      	ldrb	r2, [r3, #8]
 8020a2e:	4b21      	ldr	r3, [pc, #132]	@ (8020ab4 <udp_input_local_match+0xc4>)
 8020a30:	685b      	ldr	r3, [r3, #4]
 8020a32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8020a36:	3301      	adds	r3, #1
 8020a38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020a3a:	429a      	cmp	r2, r3
 8020a3c:	d001      	beq.n	8020a42 <udp_input_local_match+0x52>
    return 0;
 8020a3e:	2300      	movs	r3, #0
 8020a40:	e02b      	b.n	8020a9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8020a42:	79fb      	ldrb	r3, [r7, #7]
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d018      	beq.n	8020a7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	d013      	beq.n	8020a76 <udp_input_local_match+0x86>
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d00f      	beq.n	8020a76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020a56:	4b17      	ldr	r3, [pc, #92]	@ (8020ab4 <udp_input_local_match+0xc4>)
 8020a58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020a5e:	d00a      	beq.n	8020a76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020a60:	68fb      	ldr	r3, [r7, #12]
 8020a62:	681a      	ldr	r2, [r3, #0]
 8020a64:	4b13      	ldr	r3, [pc, #76]	@ (8020ab4 <udp_input_local_match+0xc4>)
 8020a66:	695b      	ldr	r3, [r3, #20]
 8020a68:	405a      	eors	r2, r3
 8020a6a:	68bb      	ldr	r3, [r7, #8]
 8020a6c:	3308      	adds	r3, #8
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d110      	bne.n	8020a98 <udp_input_local_match+0xa8>
          return 1;
 8020a76:	2301      	movs	r3, #1
 8020a78:	e00f      	b.n	8020a9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020a7a:	68fb      	ldr	r3, [r7, #12]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d009      	beq.n	8020a94 <udp_input_local_match+0xa4>
 8020a80:	68fb      	ldr	r3, [r7, #12]
 8020a82:	681b      	ldr	r3, [r3, #0]
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	d005      	beq.n	8020a94 <udp_input_local_match+0xa4>
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	681a      	ldr	r2, [r3, #0]
 8020a8c:	4b09      	ldr	r3, [pc, #36]	@ (8020ab4 <udp_input_local_match+0xc4>)
 8020a8e:	695b      	ldr	r3, [r3, #20]
 8020a90:	429a      	cmp	r2, r3
 8020a92:	d101      	bne.n	8020a98 <udp_input_local_match+0xa8>
        return 1;
 8020a94:	2301      	movs	r3, #1
 8020a96:	e000      	b.n	8020a9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020a98:	2300      	movs	r3, #0
}
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	3710      	adds	r7, #16
 8020a9e:	46bd      	mov	sp, r7
 8020aa0:	bd80      	pop	{r7, pc}
 8020aa2:	bf00      	nop
 8020aa4:	0802863c 	.word	0x0802863c
 8020aa8:	08028698 	.word	0x08028698
 8020aac:	080286bc 	.word	0x080286bc
 8020ab0:	080286e4 	.word	0x080286e4
 8020ab4:	2400a160 	.word	0x2400a160

08020ab8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8020ab8:	b590      	push	{r4, r7, lr}
 8020aba:	b08d      	sub	sp, #52	@ 0x34
 8020abc:	af02      	add	r7, sp, #8
 8020abe:	6078      	str	r0, [r7, #4]
 8020ac0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8020ac2:	2300      	movs	r3, #0
 8020ac4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8020ac6:	f7ef f9eb 	bl	800fea0 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	d105      	bne.n	8020adc <udp_input+0x24>
 8020ad0:	4b7c      	ldr	r3, [pc, #496]	@ (8020cc4 <udp_input+0x20c>)
 8020ad2:	22cf      	movs	r2, #207	@ 0xcf
 8020ad4:	497c      	ldr	r1, [pc, #496]	@ (8020cc8 <udp_input+0x210>)
 8020ad6:	487d      	ldr	r0, [pc, #500]	@ (8020ccc <udp_input+0x214>)
 8020ad8:	f001 f968 	bl	8021dac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020adc:	683b      	ldr	r3, [r7, #0]
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	d105      	bne.n	8020aee <udp_input+0x36>
 8020ae2:	4b78      	ldr	r3, [pc, #480]	@ (8020cc4 <udp_input+0x20c>)
 8020ae4:	22d0      	movs	r2, #208	@ 0xd0
 8020ae6:	497a      	ldr	r1, [pc, #488]	@ (8020cd0 <udp_input+0x218>)
 8020ae8:	4878      	ldr	r0, [pc, #480]	@ (8020ccc <udp_input+0x214>)
 8020aea:	f001 f95f 	bl	8021dac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	895b      	ldrh	r3, [r3, #10]
 8020af2:	2b07      	cmp	r3, #7
 8020af4:	d803      	bhi.n	8020afe <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020af6:	6878      	ldr	r0, [r7, #4]
 8020af8:	f7f8 ff4c 	bl	8019994 <pbuf_free>
    goto end;
 8020afc:	e0de      	b.n	8020cbc <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	685b      	ldr	r3, [r3, #4]
 8020b02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020b04:	4b73      	ldr	r3, [pc, #460]	@ (8020cd4 <udp_input+0x21c>)
 8020b06:	695b      	ldr	r3, [r3, #20]
 8020b08:	4a72      	ldr	r2, [pc, #456]	@ (8020cd4 <udp_input+0x21c>)
 8020b0a:	6812      	ldr	r2, [r2, #0]
 8020b0c:	4611      	mov	r1, r2
 8020b0e:	4618      	mov	r0, r3
 8020b10:	f7f4 fed4 	bl	80158bc <ip4_addr_isbroadcast_u32>
 8020b14:	4603      	mov	r3, r0
 8020b16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020b18:	697b      	ldr	r3, [r7, #20]
 8020b1a:	881b      	ldrh	r3, [r3, #0]
 8020b1c:	b29b      	uxth	r3, r3
 8020b1e:	4618      	mov	r0, r3
 8020b20:	f7f3 f954 	bl	8013dcc <lwip_htons>
 8020b24:	4603      	mov	r3, r0
 8020b26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020b28:	697b      	ldr	r3, [r7, #20]
 8020b2a:	885b      	ldrh	r3, [r3, #2]
 8020b2c:	b29b      	uxth	r3, r3
 8020b2e:	4618      	mov	r0, r3
 8020b30:	f7f3 f94c 	bl	8013dcc <lwip_htons>
 8020b34:	4603      	mov	r3, r0
 8020b36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8020b38:	2300      	movs	r3, #0
 8020b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020b40:	2300      	movs	r3, #0
 8020b42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020b44:	4b64      	ldr	r3, [pc, #400]	@ (8020cd8 <udp_input+0x220>)
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8020b4a:	e054      	b.n	8020bf6 <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b4e:	8a5b      	ldrh	r3, [r3, #18]
 8020b50:	89fa      	ldrh	r2, [r7, #14]
 8020b52:	429a      	cmp	r2, r3
 8020b54:	d14a      	bne.n	8020bec <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020b56:	7cfb      	ldrb	r3, [r7, #19]
 8020b58:	461a      	mov	r2, r3
 8020b5a:	6839      	ldr	r1, [r7, #0]
 8020b5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020b5e:	f7ff ff47 	bl	80209f0 <udp_input_local_match>
 8020b62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d041      	beq.n	8020bec <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8020b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b6a:	7c1b      	ldrb	r3, [r3, #16]
 8020b6c:	f003 0304 	and.w	r3, r3, #4
 8020b70:	2b00      	cmp	r3, #0
 8020b72:	d11d      	bne.n	8020bb0 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8020b74:	69fb      	ldr	r3, [r7, #28]
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	d102      	bne.n	8020b80 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8020b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b7c:	61fb      	str	r3, [r7, #28]
 8020b7e:	e017      	b.n	8020bb0 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8020b80:	7cfb      	ldrb	r3, [r7, #19]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d014      	beq.n	8020bb0 <udp_input+0xf8>
 8020b86:	4b53      	ldr	r3, [pc, #332]	@ (8020cd4 <udp_input+0x21c>)
 8020b88:	695b      	ldr	r3, [r3, #20]
 8020b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b8e:	d10f      	bne.n	8020bb0 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8020b90:	69fb      	ldr	r3, [r7, #28]
 8020b92:	681a      	ldr	r2, [r3, #0]
 8020b94:	683b      	ldr	r3, [r7, #0]
 8020b96:	3304      	adds	r3, #4
 8020b98:	681b      	ldr	r3, [r3, #0]
 8020b9a:	429a      	cmp	r2, r3
 8020b9c:	d008      	beq.n	8020bb0 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8020b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ba0:	681a      	ldr	r2, [r3, #0]
 8020ba2:	683b      	ldr	r3, [r7, #0]
 8020ba4:	3304      	adds	r3, #4
 8020ba6:	681b      	ldr	r3, [r3, #0]
 8020ba8:	429a      	cmp	r2, r3
 8020baa:	d101      	bne.n	8020bb0 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8020bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8020bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bb2:	8a9b      	ldrh	r3, [r3, #20]
 8020bb4:	8a3a      	ldrh	r2, [r7, #16]
 8020bb6:	429a      	cmp	r2, r3
 8020bb8:	d118      	bne.n	8020bec <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bbc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d005      	beq.n	8020bce <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8020bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bc4:	685a      	ldr	r2, [r3, #4]
 8020bc6:	4b43      	ldr	r3, [pc, #268]	@ (8020cd4 <udp_input+0x21c>)
 8020bc8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020bca:	429a      	cmp	r2, r3
 8020bcc:	d10e      	bne.n	8020bec <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8020bce:	6a3b      	ldr	r3, [r7, #32]
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	d014      	beq.n	8020bfe <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8020bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bd6:	68da      	ldr	r2, [r3, #12]
 8020bd8:	6a3b      	ldr	r3, [r7, #32]
 8020bda:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8020bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8020cd8 <udp_input+0x220>)
 8020bde:	681a      	ldr	r2, [r3, #0]
 8020be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020be2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8020be4:	4a3c      	ldr	r2, [pc, #240]	@ (8020cd8 <udp_input+0x220>)
 8020be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020be8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8020bea:	e008      	b.n	8020bfe <udp_input+0x146>
      }
    }

    prev = pcb;
 8020bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bf2:	68db      	ldr	r3, [r3, #12]
 8020bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8020bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	d1a7      	bne.n	8020b4c <udp_input+0x94>
 8020bfc:	e000      	b.n	8020c00 <udp_input+0x148>
        break;
 8020bfe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8020c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d101      	bne.n	8020c0a <udp_input+0x152>
    pcb = uncon_pcb;
 8020c06:	69fb      	ldr	r3, [r7, #28]
 8020c08:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8020c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	d002      	beq.n	8020c16 <udp_input+0x15e>
    for_us = 1;
 8020c10:	2301      	movs	r3, #1
 8020c12:	76fb      	strb	r3, [r7, #27]
 8020c14:	e00a      	b.n	8020c2c <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	3304      	adds	r3, #4
 8020c1a:	681a      	ldr	r2, [r3, #0]
 8020c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8020cd4 <udp_input+0x21c>)
 8020c1e:	695b      	ldr	r3, [r3, #20]
 8020c20:	429a      	cmp	r2, r3
 8020c22:	bf0c      	ite	eq
 8020c24:	2301      	moveq	r3, #1
 8020c26:	2300      	movne	r3, #0
 8020c28:	b2db      	uxtb	r3, r3
 8020c2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8020c2c:	7efb      	ldrb	r3, [r7, #27]
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	d041      	beq.n	8020cb6 <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8020c32:	2108      	movs	r1, #8
 8020c34:	6878      	ldr	r0, [r7, #4]
 8020c36:	f7f8 fe27 	bl	8019888 <pbuf_remove_header>
 8020c3a:	4603      	mov	r3, r0
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	d00a      	beq.n	8020c56 <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8020c40:	4b20      	ldr	r3, [pc, #128]	@ (8020cc4 <udp_input+0x20c>)
 8020c42:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8020c46:	4925      	ldr	r1, [pc, #148]	@ (8020cdc <udp_input+0x224>)
 8020c48:	4820      	ldr	r0, [pc, #128]	@ (8020ccc <udp_input+0x214>)
 8020c4a:	f001 f8af 	bl	8021dac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8020c4e:	6878      	ldr	r0, [r7, #4]
 8020c50:	f7f8 fea0 	bl	8019994 <pbuf_free>
      goto end;
 8020c54:	e032      	b.n	8020cbc <udp_input+0x204>
    }

    if (pcb != NULL) {
 8020c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d012      	beq.n	8020c82 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8020c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c5e:	699b      	ldr	r3, [r3, #24]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d00a      	beq.n	8020c7a <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8020c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c66:	699c      	ldr	r4, [r3, #24]
 8020c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c6a:	69d8      	ldr	r0, [r3, #28]
 8020c6c:	8a3b      	ldrh	r3, [r7, #16]
 8020c6e:	9300      	str	r3, [sp, #0]
 8020c70:	4b1b      	ldr	r3, [pc, #108]	@ (8020ce0 <udp_input+0x228>)
 8020c72:	687a      	ldr	r2, [r7, #4]
 8020c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020c76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8020c78:	e021      	b.n	8020cbe <udp_input+0x206>
        pbuf_free(p);
 8020c7a:	6878      	ldr	r0, [r7, #4]
 8020c7c:	f7f8 fe8a 	bl	8019994 <pbuf_free>
        goto end;
 8020c80:	e01c      	b.n	8020cbc <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8020c82:	7cfb      	ldrb	r3, [r7, #19]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d112      	bne.n	8020cae <udp_input+0x1f6>
 8020c88:	4b12      	ldr	r3, [pc, #72]	@ (8020cd4 <udp_input+0x21c>)
 8020c8a:	695b      	ldr	r3, [r3, #20]
 8020c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020c90:	2be0      	cmp	r3, #224	@ 0xe0
 8020c92:	d00c      	beq.n	8020cae <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8020c94:	4b0f      	ldr	r3, [pc, #60]	@ (8020cd4 <udp_input+0x21c>)
 8020c96:	899b      	ldrh	r3, [r3, #12]
 8020c98:	3308      	adds	r3, #8
 8020c9a:	b29b      	uxth	r3, r3
 8020c9c:	b21b      	sxth	r3, r3
 8020c9e:	4619      	mov	r1, r3
 8020ca0:	6878      	ldr	r0, [r7, #4]
 8020ca2:	f7f8 fe64 	bl	801996e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8020ca6:	2103      	movs	r1, #3
 8020ca8:	6878      	ldr	r0, [r7, #4]
 8020caa:	f7f4 fa05 	bl	80150b8 <icmp_dest_unreach>
      pbuf_free(p);
 8020cae:	6878      	ldr	r0, [r7, #4]
 8020cb0:	f7f8 fe70 	bl	8019994 <pbuf_free>
  return;
 8020cb4:	e003      	b.n	8020cbe <udp_input+0x206>
    pbuf_free(p);
 8020cb6:	6878      	ldr	r0, [r7, #4]
 8020cb8:	f7f8 fe6c 	bl	8019994 <pbuf_free>
  return;
 8020cbc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8020cbe:	372c      	adds	r7, #44	@ 0x2c
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	bd90      	pop	{r4, r7, pc}
 8020cc4:	0802863c 	.word	0x0802863c
 8020cc8:	0802870c 	.word	0x0802870c
 8020ccc:	080286bc 	.word	0x080286bc
 8020cd0:	08028724 	.word	0x08028724
 8020cd4:	2400a160 	.word	0x2400a160
 8020cd8:	24012708 	.word	0x24012708
 8020cdc:	08028740 	.word	0x08028740
 8020ce0:	2400a170 	.word	0x2400a170

08020ce4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8020ce4:	b580      	push	{r7, lr}
 8020ce6:	b082      	sub	sp, #8
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	6078      	str	r0, [r7, #4]
 8020cec:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d109      	bne.n	8020d08 <udp_send+0x24>
 8020cf4:	4b11      	ldr	r3, [pc, #68]	@ (8020d3c <udp_send+0x58>)
 8020cf6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8020cfa:	4911      	ldr	r1, [pc, #68]	@ (8020d40 <udp_send+0x5c>)
 8020cfc:	4811      	ldr	r0, [pc, #68]	@ (8020d44 <udp_send+0x60>)
 8020cfe:	f001 f855 	bl	8021dac <iprintf>
 8020d02:	f06f 030f 	mvn.w	r3, #15
 8020d06:	e015      	b.n	8020d34 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8020d08:	683b      	ldr	r3, [r7, #0]
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	d109      	bne.n	8020d22 <udp_send+0x3e>
 8020d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8020d3c <udp_send+0x58>)
 8020d10:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8020d14:	490c      	ldr	r1, [pc, #48]	@ (8020d48 <udp_send+0x64>)
 8020d16:	480b      	ldr	r0, [pc, #44]	@ (8020d44 <udp_send+0x60>)
 8020d18:	f001 f848 	bl	8021dac <iprintf>
 8020d1c:	f06f 030f 	mvn.w	r3, #15
 8020d20:	e008      	b.n	8020d34 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	1d1a      	adds	r2, r3, #4
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	8a9b      	ldrh	r3, [r3, #20]
 8020d2a:	6839      	ldr	r1, [r7, #0]
 8020d2c:	6878      	ldr	r0, [r7, #4]
 8020d2e:	f000 f80d 	bl	8020d4c <udp_sendto>
 8020d32:	4603      	mov	r3, r0
}
 8020d34:	4618      	mov	r0, r3
 8020d36:	3708      	adds	r7, #8
 8020d38:	46bd      	mov	sp, r7
 8020d3a:	bd80      	pop	{r7, pc}
 8020d3c:	0802863c 	.word	0x0802863c
 8020d40:	0802875c 	.word	0x0802875c
 8020d44:	080286bc 	.word	0x080286bc
 8020d48:	08028774 	.word	0x08028774

08020d4c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b088      	sub	sp, #32
 8020d50:	af02      	add	r7, sp, #8
 8020d52:	60f8      	str	r0, [r7, #12]
 8020d54:	60b9      	str	r1, [r7, #8]
 8020d56:	607a      	str	r2, [r7, #4]
 8020d58:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d109      	bne.n	8020d74 <udp_sendto+0x28>
 8020d60:	4b23      	ldr	r3, [pc, #140]	@ (8020df0 <udp_sendto+0xa4>)
 8020d62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8020d66:	4923      	ldr	r1, [pc, #140]	@ (8020df4 <udp_sendto+0xa8>)
 8020d68:	4823      	ldr	r0, [pc, #140]	@ (8020df8 <udp_sendto+0xac>)
 8020d6a:	f001 f81f 	bl	8021dac <iprintf>
 8020d6e:	f06f 030f 	mvn.w	r3, #15
 8020d72:	e038      	b.n	8020de6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8020d74:	68bb      	ldr	r3, [r7, #8]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d109      	bne.n	8020d8e <udp_sendto+0x42>
 8020d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8020df0 <udp_sendto+0xa4>)
 8020d7c:	f240 2219 	movw	r2, #537	@ 0x219
 8020d80:	491e      	ldr	r1, [pc, #120]	@ (8020dfc <udp_sendto+0xb0>)
 8020d82:	481d      	ldr	r0, [pc, #116]	@ (8020df8 <udp_sendto+0xac>)
 8020d84:	f001 f812 	bl	8021dac <iprintf>
 8020d88:	f06f 030f 	mvn.w	r3, #15
 8020d8c:	e02b      	b.n	8020de6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020d8e:	687b      	ldr	r3, [r7, #4]
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d109      	bne.n	8020da8 <udp_sendto+0x5c>
 8020d94:	4b16      	ldr	r3, [pc, #88]	@ (8020df0 <udp_sendto+0xa4>)
 8020d96:	f240 221a 	movw	r2, #538	@ 0x21a
 8020d9a:	4919      	ldr	r1, [pc, #100]	@ (8020e00 <udp_sendto+0xb4>)
 8020d9c:	4816      	ldr	r0, [pc, #88]	@ (8020df8 <udp_sendto+0xac>)
 8020d9e:	f001 f805 	bl	8021dac <iprintf>
 8020da2:	f06f 030f 	mvn.w	r3, #15
 8020da6:	e01e      	b.n	8020de6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8020da8:	68fb      	ldr	r3, [r7, #12]
 8020daa:	7a1b      	ldrb	r3, [r3, #8]
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	d006      	beq.n	8020dbe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	7a1b      	ldrb	r3, [r3, #8]
 8020db4:	4618      	mov	r0, r3
 8020db6:	f7f8 fa61 	bl	801927c <netif_get_by_index>
 8020dba:	6178      	str	r0, [r7, #20]
 8020dbc:	e003      	b.n	8020dc6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8020dbe:	6878      	ldr	r0, [r7, #4]
 8020dc0:	f7f4 fae2 	bl	8015388 <ip4_route>
 8020dc4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8020dc6:	697b      	ldr	r3, [r7, #20]
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d102      	bne.n	8020dd2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8020dcc:	f06f 0303 	mvn.w	r3, #3
 8020dd0:	e009      	b.n	8020de6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8020dd2:	887a      	ldrh	r2, [r7, #2]
 8020dd4:	697b      	ldr	r3, [r7, #20]
 8020dd6:	9300      	str	r3, [sp, #0]
 8020dd8:	4613      	mov	r3, r2
 8020dda:	687a      	ldr	r2, [r7, #4]
 8020ddc:	68b9      	ldr	r1, [r7, #8]
 8020dde:	68f8      	ldr	r0, [r7, #12]
 8020de0:	f000 f810 	bl	8020e04 <udp_sendto_if>
 8020de4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	3718      	adds	r7, #24
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd80      	pop	{r7, pc}
 8020dee:	bf00      	nop
 8020df0:	0802863c 	.word	0x0802863c
 8020df4:	0802878c 	.word	0x0802878c
 8020df8:	080286bc 	.word	0x080286bc
 8020dfc:	080287a4 	.word	0x080287a4
 8020e00:	080287c0 	.word	0x080287c0

08020e04 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8020e04:	b580      	push	{r7, lr}
 8020e06:	b088      	sub	sp, #32
 8020e08:	af02      	add	r7, sp, #8
 8020e0a:	60f8      	str	r0, [r7, #12]
 8020e0c:	60b9      	str	r1, [r7, #8]
 8020e0e:	607a      	str	r2, [r7, #4]
 8020e10:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8020e12:	68fb      	ldr	r3, [r7, #12]
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d109      	bne.n	8020e2c <udp_sendto_if+0x28>
 8020e18:	4b2e      	ldr	r3, [pc, #184]	@ (8020ed4 <udp_sendto_if+0xd0>)
 8020e1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020e1e:	492e      	ldr	r1, [pc, #184]	@ (8020ed8 <udp_sendto_if+0xd4>)
 8020e20:	482e      	ldr	r0, [pc, #184]	@ (8020edc <udp_sendto_if+0xd8>)
 8020e22:	f000 ffc3 	bl	8021dac <iprintf>
 8020e26:	f06f 030f 	mvn.w	r3, #15
 8020e2a:	e04f      	b.n	8020ecc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8020e2c:	68bb      	ldr	r3, [r7, #8]
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	d109      	bne.n	8020e46 <udp_sendto_if+0x42>
 8020e32:	4b28      	ldr	r3, [pc, #160]	@ (8020ed4 <udp_sendto_if+0xd0>)
 8020e34:	f240 2281 	movw	r2, #641	@ 0x281
 8020e38:	4929      	ldr	r1, [pc, #164]	@ (8020ee0 <udp_sendto_if+0xdc>)
 8020e3a:	4828      	ldr	r0, [pc, #160]	@ (8020edc <udp_sendto_if+0xd8>)
 8020e3c:	f000 ffb6 	bl	8021dac <iprintf>
 8020e40:	f06f 030f 	mvn.w	r3, #15
 8020e44:	e042      	b.n	8020ecc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	d109      	bne.n	8020e60 <udp_sendto_if+0x5c>
 8020e4c:	4b21      	ldr	r3, [pc, #132]	@ (8020ed4 <udp_sendto_if+0xd0>)
 8020e4e:	f240 2282 	movw	r2, #642	@ 0x282
 8020e52:	4924      	ldr	r1, [pc, #144]	@ (8020ee4 <udp_sendto_if+0xe0>)
 8020e54:	4821      	ldr	r0, [pc, #132]	@ (8020edc <udp_sendto_if+0xd8>)
 8020e56:	f000 ffa9 	bl	8021dac <iprintf>
 8020e5a:	f06f 030f 	mvn.w	r3, #15
 8020e5e:	e035      	b.n	8020ecc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8020e60:	6a3b      	ldr	r3, [r7, #32]
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d109      	bne.n	8020e7a <udp_sendto_if+0x76>
 8020e66:	4b1b      	ldr	r3, [pc, #108]	@ (8020ed4 <udp_sendto_if+0xd0>)
 8020e68:	f240 2283 	movw	r2, #643	@ 0x283
 8020e6c:	491e      	ldr	r1, [pc, #120]	@ (8020ee8 <udp_sendto_if+0xe4>)
 8020e6e:	481b      	ldr	r0, [pc, #108]	@ (8020edc <udp_sendto_if+0xd8>)
 8020e70:	f000 ff9c 	bl	8021dac <iprintf>
 8020e74:	f06f 030f 	mvn.w	r3, #15
 8020e78:	e028      	b.n	8020ecc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020e7a:	68fb      	ldr	r3, [r7, #12]
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d009      	beq.n	8020e94 <udp_sendto_if+0x90>
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	d005      	beq.n	8020e94 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8020e88:	68fb      	ldr	r3, [r7, #12]
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020e90:	2be0      	cmp	r3, #224	@ 0xe0
 8020e92:	d103      	bne.n	8020e9c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8020e94:	6a3b      	ldr	r3, [r7, #32]
 8020e96:	3304      	adds	r3, #4
 8020e98:	617b      	str	r3, [r7, #20]
 8020e9a:	e00b      	b.n	8020eb4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	681a      	ldr	r2, [r3, #0]
 8020ea0:	6a3b      	ldr	r3, [r7, #32]
 8020ea2:	3304      	adds	r3, #4
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	429a      	cmp	r2, r3
 8020ea8:	d002      	beq.n	8020eb0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8020eaa:	f06f 0303 	mvn.w	r3, #3
 8020eae:	e00d      	b.n	8020ecc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8020eb0:	68fb      	ldr	r3, [r7, #12]
 8020eb2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8020eb4:	887a      	ldrh	r2, [r7, #2]
 8020eb6:	697b      	ldr	r3, [r7, #20]
 8020eb8:	9301      	str	r3, [sp, #4]
 8020eba:	6a3b      	ldr	r3, [r7, #32]
 8020ebc:	9300      	str	r3, [sp, #0]
 8020ebe:	4613      	mov	r3, r2
 8020ec0:	687a      	ldr	r2, [r7, #4]
 8020ec2:	68b9      	ldr	r1, [r7, #8]
 8020ec4:	68f8      	ldr	r0, [r7, #12]
 8020ec6:	f000 f811 	bl	8020eec <udp_sendto_if_src>
 8020eca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8020ecc:	4618      	mov	r0, r3
 8020ece:	3718      	adds	r7, #24
 8020ed0:	46bd      	mov	sp, r7
 8020ed2:	bd80      	pop	{r7, pc}
 8020ed4:	0802863c 	.word	0x0802863c
 8020ed8:	080287dc 	.word	0x080287dc
 8020edc:	080286bc 	.word	0x080286bc
 8020ee0:	080287f8 	.word	0x080287f8
 8020ee4:	08028814 	.word	0x08028814
 8020ee8:	08028834 	.word	0x08028834

08020eec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8020eec:	b580      	push	{r7, lr}
 8020eee:	b08c      	sub	sp, #48	@ 0x30
 8020ef0:	af04      	add	r7, sp, #16
 8020ef2:	60f8      	str	r0, [r7, #12]
 8020ef4:	60b9      	str	r1, [r7, #8]
 8020ef6:	607a      	str	r2, [r7, #4]
 8020ef8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 8020efa:	f7ee ffd1 	bl	800fea0 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8020efe:	68fb      	ldr	r3, [r7, #12]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d109      	bne.n	8020f18 <udp_sendto_if_src+0x2c>
 8020f04:	4b65      	ldr	r3, [pc, #404]	@ (802109c <udp_sendto_if_src+0x1b0>)
 8020f06:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8020f0a:	4965      	ldr	r1, [pc, #404]	@ (80210a0 <udp_sendto_if_src+0x1b4>)
 8020f0c:	4865      	ldr	r0, [pc, #404]	@ (80210a4 <udp_sendto_if_src+0x1b8>)
 8020f0e:	f000 ff4d 	bl	8021dac <iprintf>
 8020f12:	f06f 030f 	mvn.w	r3, #15
 8020f16:	e0bc      	b.n	8021092 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8020f18:	68bb      	ldr	r3, [r7, #8]
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d109      	bne.n	8020f32 <udp_sendto_if_src+0x46>
 8020f1e:	4b5f      	ldr	r3, [pc, #380]	@ (802109c <udp_sendto_if_src+0x1b0>)
 8020f20:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8020f24:	4960      	ldr	r1, [pc, #384]	@ (80210a8 <udp_sendto_if_src+0x1bc>)
 8020f26:	485f      	ldr	r0, [pc, #380]	@ (80210a4 <udp_sendto_if_src+0x1b8>)
 8020f28:	f000 ff40 	bl	8021dac <iprintf>
 8020f2c:	f06f 030f 	mvn.w	r3, #15
 8020f30:	e0af      	b.n	8021092 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d109      	bne.n	8020f4c <udp_sendto_if_src+0x60>
 8020f38:	4b58      	ldr	r3, [pc, #352]	@ (802109c <udp_sendto_if_src+0x1b0>)
 8020f3a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8020f3e:	495b      	ldr	r1, [pc, #364]	@ (80210ac <udp_sendto_if_src+0x1c0>)
 8020f40:	4858      	ldr	r0, [pc, #352]	@ (80210a4 <udp_sendto_if_src+0x1b8>)
 8020f42:	f000 ff33 	bl	8021dac <iprintf>
 8020f46:	f06f 030f 	mvn.w	r3, #15
 8020f4a:	e0a2      	b.n	8021092 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8020f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d109      	bne.n	8020f66 <udp_sendto_if_src+0x7a>
 8020f52:	4b52      	ldr	r3, [pc, #328]	@ (802109c <udp_sendto_if_src+0x1b0>)
 8020f54:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8020f58:	4955      	ldr	r1, [pc, #340]	@ (80210b0 <udp_sendto_if_src+0x1c4>)
 8020f5a:	4852      	ldr	r0, [pc, #328]	@ (80210a4 <udp_sendto_if_src+0x1b8>)
 8020f5c:	f000 ff26 	bl	8021dac <iprintf>
 8020f60:	f06f 030f 	mvn.w	r3, #15
 8020f64:	e095      	b.n	8021092 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8020f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d109      	bne.n	8020f80 <udp_sendto_if_src+0x94>
 8020f6c:	4b4b      	ldr	r3, [pc, #300]	@ (802109c <udp_sendto_if_src+0x1b0>)
 8020f6e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8020f72:	4950      	ldr	r1, [pc, #320]	@ (80210b4 <udp_sendto_if_src+0x1c8>)
 8020f74:	484b      	ldr	r0, [pc, #300]	@ (80210a4 <udp_sendto_if_src+0x1b8>)
 8020f76:	f000 ff19 	bl	8021dac <iprintf>
 8020f7a:	f06f 030f 	mvn.w	r3, #15
 8020f7e:	e088      	b.n	8021092 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8020f80:	68fb      	ldr	r3, [r7, #12]
 8020f82:	8a5b      	ldrh	r3, [r3, #18]
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d10f      	bne.n	8020fa8 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8020f88:	68f9      	ldr	r1, [r7, #12]
 8020f8a:	68fb      	ldr	r3, [r7, #12]
 8020f8c:	8a5b      	ldrh	r3, [r3, #18]
 8020f8e:	461a      	mov	r2, r3
 8020f90:	68f8      	ldr	r0, [r7, #12]
 8020f92:	f000 f893 	bl	80210bc <udp_bind>
 8020f96:	4603      	mov	r3, r0
 8020f98:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8020f9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d002      	beq.n	8020fa8 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8020fa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8020fa6:	e074      	b.n	8021092 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8020fa8:	68bb      	ldr	r3, [r7, #8]
 8020faa:	891b      	ldrh	r3, [r3, #8]
 8020fac:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8020fb0:	4293      	cmp	r3, r2
 8020fb2:	d902      	bls.n	8020fba <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8020fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8020fb8:	e06b      	b.n	8021092 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8020fba:	2108      	movs	r1, #8
 8020fbc:	68b8      	ldr	r0, [r7, #8]
 8020fbe:	f7f8 fc53 	bl	8019868 <pbuf_add_header>
 8020fc2:	4603      	mov	r3, r0
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d015      	beq.n	8020ff4 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8020fc8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020fcc:	2108      	movs	r1, #8
 8020fce:	2022      	movs	r0, #34	@ 0x22
 8020fd0:	f7f8 f9fe 	bl	80193d0 <pbuf_alloc>
 8020fd4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8020fd6:	69fb      	ldr	r3, [r7, #28]
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d102      	bne.n	8020fe2 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8020fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8020fe0:	e057      	b.n	8021092 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8020fe2:	68bb      	ldr	r3, [r7, #8]
 8020fe4:	891b      	ldrh	r3, [r3, #8]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d006      	beq.n	8020ff8 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8020fea:	68b9      	ldr	r1, [r7, #8]
 8020fec:	69f8      	ldr	r0, [r7, #28]
 8020fee:	f7f8 fdf5 	bl	8019bdc <pbuf_chain>
 8020ff2:	e001      	b.n	8020ff8 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8020ff4:	68bb      	ldr	r3, [r7, #8]
 8020ff6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8020ff8:	69fb      	ldr	r3, [r7, #28]
 8020ffa:	895b      	ldrh	r3, [r3, #10]
 8020ffc:	2b07      	cmp	r3, #7
 8020ffe:	d806      	bhi.n	802100e <udp_sendto_if_src+0x122>
 8021000:	4b26      	ldr	r3, [pc, #152]	@ (802109c <udp_sendto_if_src+0x1b0>)
 8021002:	f240 320d 	movw	r2, #781	@ 0x30d
 8021006:	492c      	ldr	r1, [pc, #176]	@ (80210b8 <udp_sendto_if_src+0x1cc>)
 8021008:	4826      	ldr	r0, [pc, #152]	@ (80210a4 <udp_sendto_if_src+0x1b8>)
 802100a:	f000 fecf 	bl	8021dac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802100e:	69fb      	ldr	r3, [r7, #28]
 8021010:	685b      	ldr	r3, [r3, #4]
 8021012:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021014:	68fb      	ldr	r3, [r7, #12]
 8021016:	8a5b      	ldrh	r3, [r3, #18]
 8021018:	4618      	mov	r0, r3
 802101a:	f7f2 fed7 	bl	8013dcc <lwip_htons>
 802101e:	4603      	mov	r3, r0
 8021020:	461a      	mov	r2, r3
 8021022:	697b      	ldr	r3, [r7, #20]
 8021024:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021026:	887b      	ldrh	r3, [r7, #2]
 8021028:	4618      	mov	r0, r3
 802102a:	f7f2 fecf 	bl	8013dcc <lwip_htons>
 802102e:	4603      	mov	r3, r0
 8021030:	461a      	mov	r2, r3
 8021032:	697b      	ldr	r3, [r7, #20]
 8021034:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021036:	697b      	ldr	r3, [r7, #20]
 8021038:	2200      	movs	r2, #0
 802103a:	719a      	strb	r2, [r3, #6]
 802103c:	2200      	movs	r2, #0
 802103e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8021040:	69fb      	ldr	r3, [r7, #28]
 8021042:	891b      	ldrh	r3, [r3, #8]
 8021044:	4618      	mov	r0, r3
 8021046:	f7f2 fec1 	bl	8013dcc <lwip_htons>
 802104a:	4603      	mov	r3, r0
 802104c:	461a      	mov	r2, r3
 802104e:	697b      	ldr	r3, [r7, #20]
 8021050:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8021052:	2311      	movs	r3, #17
 8021054:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8021056:	68fb      	ldr	r3, [r7, #12]
 8021058:	7adb      	ldrb	r3, [r3, #11]
 802105a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 802105c:	68fb      	ldr	r3, [r7, #12]
 802105e:	7a9b      	ldrb	r3, [r3, #10]
 8021060:	7cb9      	ldrb	r1, [r7, #18]
 8021062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021064:	9202      	str	r2, [sp, #8]
 8021066:	7cfa      	ldrb	r2, [r7, #19]
 8021068:	9201      	str	r2, [sp, #4]
 802106a:	9300      	str	r3, [sp, #0]
 802106c:	460b      	mov	r3, r1
 802106e:	687a      	ldr	r2, [r7, #4]
 8021070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021072:	69f8      	ldr	r0, [r7, #28]
 8021074:	f7f4 fb72 	bl	801575c <ip4_output_if_src>
 8021078:	4603      	mov	r3, r0
 802107a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 802107c:	69fa      	ldr	r2, [r7, #28]
 802107e:	68bb      	ldr	r3, [r7, #8]
 8021080:	429a      	cmp	r2, r3
 8021082:	d004      	beq.n	802108e <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8021084:	69f8      	ldr	r0, [r7, #28]
 8021086:	f7f8 fc85 	bl	8019994 <pbuf_free>
    q = NULL;
 802108a:	2300      	movs	r3, #0
 802108c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 802108e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8021092:	4618      	mov	r0, r3
 8021094:	3720      	adds	r7, #32
 8021096:	46bd      	mov	sp, r7
 8021098:	bd80      	pop	{r7, pc}
 802109a:	bf00      	nop
 802109c:	0802863c 	.word	0x0802863c
 80210a0:	08028854 	.word	0x08028854
 80210a4:	080286bc 	.word	0x080286bc
 80210a8:	08028874 	.word	0x08028874
 80210ac:	08028894 	.word	0x08028894
 80210b0:	080288b8 	.word	0x080288b8
 80210b4:	080288dc 	.word	0x080288dc
 80210b8:	08028900 	.word	0x08028900

080210bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80210bc:	b580      	push	{r7, lr}
 80210be:	b086      	sub	sp, #24
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	60f8      	str	r0, [r7, #12]
 80210c4:	60b9      	str	r1, [r7, #8]
 80210c6:	4613      	mov	r3, r2
 80210c8:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 80210ca:	f7ee fee9 	bl	800fea0 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80210ce:	68bb      	ldr	r3, [r7, #8]
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d101      	bne.n	80210d8 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80210d4:	4b39      	ldr	r3, [pc, #228]	@ (80211bc <udp_bind+0x100>)
 80210d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d109      	bne.n	80210f2 <udp_bind+0x36>
 80210de:	4b38      	ldr	r3, [pc, #224]	@ (80211c0 <udp_bind+0x104>)
 80210e0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80210e4:	4937      	ldr	r1, [pc, #220]	@ (80211c4 <udp_bind+0x108>)
 80210e6:	4838      	ldr	r0, [pc, #224]	@ (80211c8 <udp_bind+0x10c>)
 80210e8:	f000 fe60 	bl	8021dac <iprintf>
 80210ec:	f06f 030f 	mvn.w	r3, #15
 80210f0:	e060      	b.n	80211b4 <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80210f2:	2300      	movs	r3, #0
 80210f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80210f6:	4b35      	ldr	r3, [pc, #212]	@ (80211cc <udp_bind+0x110>)
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	617b      	str	r3, [r7, #20]
 80210fc:	e009      	b.n	8021112 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80210fe:	68fa      	ldr	r2, [r7, #12]
 8021100:	697b      	ldr	r3, [r7, #20]
 8021102:	429a      	cmp	r2, r3
 8021104:	d102      	bne.n	802110c <udp_bind+0x50>
      rebind = 1;
 8021106:	2301      	movs	r3, #1
 8021108:	74fb      	strb	r3, [r7, #19]
      break;
 802110a:	e005      	b.n	8021118 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802110c:	697b      	ldr	r3, [r7, #20]
 802110e:	68db      	ldr	r3, [r3, #12]
 8021110:	617b      	str	r3, [r7, #20]
 8021112:	697b      	ldr	r3, [r7, #20]
 8021114:	2b00      	cmp	r3, #0
 8021116:	d1f2      	bne.n	80210fe <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021118:	88fb      	ldrh	r3, [r7, #6]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d109      	bne.n	8021132 <udp_bind+0x76>
    port = udp_new_port();
 802111e:	f7ff fc2f 	bl	8020980 <udp_new_port>
 8021122:	4603      	mov	r3, r0
 8021124:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8021126:	88fb      	ldrh	r3, [r7, #6]
 8021128:	2b00      	cmp	r3, #0
 802112a:	d12c      	bne.n	8021186 <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 802112c:	f06f 0307 	mvn.w	r3, #7
 8021130:	e040      	b.n	80211b4 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021132:	4b26      	ldr	r3, [pc, #152]	@ (80211cc <udp_bind+0x110>)
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	617b      	str	r3, [r7, #20]
 8021138:	e022      	b.n	8021180 <udp_bind+0xc4>
      if (pcb != ipcb) {
 802113a:	68fa      	ldr	r2, [r7, #12]
 802113c:	697b      	ldr	r3, [r7, #20]
 802113e:	429a      	cmp	r2, r3
 8021140:	d01b      	beq.n	802117a <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8021142:	697b      	ldr	r3, [r7, #20]
 8021144:	8a5b      	ldrh	r3, [r3, #18]
 8021146:	88fa      	ldrh	r2, [r7, #6]
 8021148:	429a      	cmp	r2, r3
 802114a:	d116      	bne.n	802117a <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802114c:	697b      	ldr	r3, [r7, #20]
 802114e:	681a      	ldr	r2, [r3, #0]
 8021150:	68bb      	ldr	r3, [r7, #8]
 8021152:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8021154:	429a      	cmp	r2, r3
 8021156:	d00d      	beq.n	8021174 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021158:	68bb      	ldr	r3, [r7, #8]
 802115a:	2b00      	cmp	r3, #0
 802115c:	d00a      	beq.n	8021174 <udp_bind+0xb8>
 802115e:	68bb      	ldr	r3, [r7, #8]
 8021160:	681b      	ldr	r3, [r3, #0]
 8021162:	2b00      	cmp	r3, #0
 8021164:	d006      	beq.n	8021174 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 8021166:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021168:	2b00      	cmp	r3, #0
 802116a:	d003      	beq.n	8021174 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 802116c:	697b      	ldr	r3, [r7, #20]
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	2b00      	cmp	r3, #0
 8021172:	d102      	bne.n	802117a <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8021174:	f06f 0307 	mvn.w	r3, #7
 8021178:	e01c      	b.n	80211b4 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802117a:	697b      	ldr	r3, [r7, #20]
 802117c:	68db      	ldr	r3, [r3, #12]
 802117e:	617b      	str	r3, [r7, #20]
 8021180:	697b      	ldr	r3, [r7, #20]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d1d9      	bne.n	802113a <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021186:	68bb      	ldr	r3, [r7, #8]
 8021188:	2b00      	cmp	r3, #0
 802118a:	d002      	beq.n	8021192 <udp_bind+0xd6>
 802118c:	68bb      	ldr	r3, [r7, #8]
 802118e:	681b      	ldr	r3, [r3, #0]
 8021190:	e000      	b.n	8021194 <udp_bind+0xd8>
 8021192:	2300      	movs	r3, #0
 8021194:	68fa      	ldr	r2, [r7, #12]
 8021196:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021198:	68fb      	ldr	r3, [r7, #12]
 802119a:	88fa      	ldrh	r2, [r7, #6]
 802119c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 802119e:	7cfb      	ldrb	r3, [r7, #19]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d106      	bne.n	80211b2 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80211a4:	4b09      	ldr	r3, [pc, #36]	@ (80211cc <udp_bind+0x110>)
 80211a6:	681a      	ldr	r2, [r3, #0]
 80211a8:	68fb      	ldr	r3, [r7, #12]
 80211aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80211ac:	4a07      	ldr	r2, [pc, #28]	@ (80211cc <udp_bind+0x110>)
 80211ae:	68fb      	ldr	r3, [r7, #12]
 80211b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80211b2:	2300      	movs	r3, #0
}
 80211b4:	4618      	mov	r0, r3
 80211b6:	3718      	adds	r7, #24
 80211b8:	46bd      	mov	sp, r7
 80211ba:	bd80      	pop	{r7, pc}
 80211bc:	08028a4c 	.word	0x08028a4c
 80211c0:	0802863c 	.word	0x0802863c
 80211c4:	08028930 	.word	0x08028930
 80211c8:	080286bc 	.word	0x080286bc
 80211cc:	24012708 	.word	0x24012708

080211d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80211d0:	b480      	push	{r7}
 80211d2:	b085      	sub	sp, #20
 80211d4:	af00      	add	r7, sp, #0
 80211d6:	6078      	str	r0, [r7, #4]
 80211d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d01e      	beq.n	802121e <udp_netif_ip_addr_changed+0x4e>
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d01a      	beq.n	802121e <udp_netif_ip_addr_changed+0x4e>
 80211e8:	683b      	ldr	r3, [r7, #0]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d017      	beq.n	802121e <udp_netif_ip_addr_changed+0x4e>
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	d013      	beq.n	802121e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80211f6:	4b0d      	ldr	r3, [pc, #52]	@ (802122c <udp_netif_ip_addr_changed+0x5c>)
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	60fb      	str	r3, [r7, #12]
 80211fc:	e00c      	b.n	8021218 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80211fe:	68fb      	ldr	r3, [r7, #12]
 8021200:	681a      	ldr	r2, [r3, #0]
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	681b      	ldr	r3, [r3, #0]
 8021206:	429a      	cmp	r2, r3
 8021208:	d103      	bne.n	8021212 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802120a:	683b      	ldr	r3, [r7, #0]
 802120c:	681a      	ldr	r2, [r3, #0]
 802120e:	68fb      	ldr	r3, [r7, #12]
 8021210:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021212:	68fb      	ldr	r3, [r7, #12]
 8021214:	68db      	ldr	r3, [r3, #12]
 8021216:	60fb      	str	r3, [r7, #12]
 8021218:	68fb      	ldr	r3, [r7, #12]
 802121a:	2b00      	cmp	r3, #0
 802121c:	d1ef      	bne.n	80211fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802121e:	bf00      	nop
 8021220:	3714      	adds	r7, #20
 8021222:	46bd      	mov	sp, r7
 8021224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021228:	4770      	bx	lr
 802122a:	bf00      	nop
 802122c:	24012708 	.word	0x24012708

08021230 <atoi>:
 8021230:	220a      	movs	r2, #10
 8021232:	2100      	movs	r1, #0
 8021234:	f000 b8b8 	b.w	80213a8 <strtol>

08021238 <rand>:
 8021238:	4b16      	ldr	r3, [pc, #88]	@ (8021294 <rand+0x5c>)
 802123a:	b510      	push	{r4, lr}
 802123c:	681c      	ldr	r4, [r3, #0]
 802123e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021240:	b9b3      	cbnz	r3, 8021270 <rand+0x38>
 8021242:	2018      	movs	r0, #24
 8021244:	f001 fea8 	bl	8022f98 <malloc>
 8021248:	4602      	mov	r2, r0
 802124a:	6320      	str	r0, [r4, #48]	@ 0x30
 802124c:	b920      	cbnz	r0, 8021258 <rand+0x20>
 802124e:	4b12      	ldr	r3, [pc, #72]	@ (8021298 <rand+0x60>)
 8021250:	4812      	ldr	r0, [pc, #72]	@ (802129c <rand+0x64>)
 8021252:	2152      	movs	r1, #82	@ 0x52
 8021254:	f001 f85a 	bl	802230c <__assert_func>
 8021258:	4911      	ldr	r1, [pc, #68]	@ (80212a0 <rand+0x68>)
 802125a:	4b12      	ldr	r3, [pc, #72]	@ (80212a4 <rand+0x6c>)
 802125c:	e9c0 1300 	strd	r1, r3, [r0]
 8021260:	4b11      	ldr	r3, [pc, #68]	@ (80212a8 <rand+0x70>)
 8021262:	6083      	str	r3, [r0, #8]
 8021264:	230b      	movs	r3, #11
 8021266:	8183      	strh	r3, [r0, #12]
 8021268:	2100      	movs	r1, #0
 802126a:	2001      	movs	r0, #1
 802126c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021270:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021272:	480e      	ldr	r0, [pc, #56]	@ (80212ac <rand+0x74>)
 8021274:	690b      	ldr	r3, [r1, #16]
 8021276:	694c      	ldr	r4, [r1, #20]
 8021278:	4a0d      	ldr	r2, [pc, #52]	@ (80212b0 <rand+0x78>)
 802127a:	4358      	muls	r0, r3
 802127c:	fb02 0004 	mla	r0, r2, r4, r0
 8021280:	fba3 3202 	umull	r3, r2, r3, r2
 8021284:	3301      	adds	r3, #1
 8021286:	eb40 0002 	adc.w	r0, r0, r2
 802128a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802128e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021292:	bd10      	pop	{r4, pc}
 8021294:	24000060 	.word	0x24000060
 8021298:	08028b60 	.word	0x08028b60
 802129c:	08028b77 	.word	0x08028b77
 80212a0:	abcd330e 	.word	0xabcd330e
 80212a4:	e66d1234 	.word	0xe66d1234
 80212a8:	0005deec 	.word	0x0005deec
 80212ac:	5851f42d 	.word	0x5851f42d
 80212b0:	4c957f2d 	.word	0x4c957f2d

080212b4 <_strtol_l.constprop.0>:
 80212b4:	2b24      	cmp	r3, #36	@ 0x24
 80212b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212ba:	4686      	mov	lr, r0
 80212bc:	4690      	mov	r8, r2
 80212be:	d801      	bhi.n	80212c4 <_strtol_l.constprop.0+0x10>
 80212c0:	2b01      	cmp	r3, #1
 80212c2:	d106      	bne.n	80212d2 <_strtol_l.constprop.0+0x1e>
 80212c4:	f000 ffe6 	bl	8022294 <__errno>
 80212c8:	2316      	movs	r3, #22
 80212ca:	6003      	str	r3, [r0, #0]
 80212cc:	2000      	movs	r0, #0
 80212ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212d2:	4834      	ldr	r0, [pc, #208]	@ (80213a4 <_strtol_l.constprop.0+0xf0>)
 80212d4:	460d      	mov	r5, r1
 80212d6:	462a      	mov	r2, r5
 80212d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80212dc:	5d06      	ldrb	r6, [r0, r4]
 80212de:	f016 0608 	ands.w	r6, r6, #8
 80212e2:	d1f8      	bne.n	80212d6 <_strtol_l.constprop.0+0x22>
 80212e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80212e6:	d12d      	bne.n	8021344 <_strtol_l.constprop.0+0x90>
 80212e8:	782c      	ldrb	r4, [r5, #0]
 80212ea:	2601      	movs	r6, #1
 80212ec:	1c95      	adds	r5, r2, #2
 80212ee:	f033 0210 	bics.w	r2, r3, #16
 80212f2:	d109      	bne.n	8021308 <_strtol_l.constprop.0+0x54>
 80212f4:	2c30      	cmp	r4, #48	@ 0x30
 80212f6:	d12a      	bne.n	802134e <_strtol_l.constprop.0+0x9a>
 80212f8:	782a      	ldrb	r2, [r5, #0]
 80212fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80212fe:	2a58      	cmp	r2, #88	@ 0x58
 8021300:	d125      	bne.n	802134e <_strtol_l.constprop.0+0x9a>
 8021302:	786c      	ldrb	r4, [r5, #1]
 8021304:	2310      	movs	r3, #16
 8021306:	3502      	adds	r5, #2
 8021308:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802130c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021310:	2200      	movs	r2, #0
 8021312:	fbbc f9f3 	udiv	r9, ip, r3
 8021316:	4610      	mov	r0, r2
 8021318:	fb03 ca19 	mls	sl, r3, r9, ip
 802131c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8021320:	2f09      	cmp	r7, #9
 8021322:	d81b      	bhi.n	802135c <_strtol_l.constprop.0+0xa8>
 8021324:	463c      	mov	r4, r7
 8021326:	42a3      	cmp	r3, r4
 8021328:	dd27      	ble.n	802137a <_strtol_l.constprop.0+0xc6>
 802132a:	1c57      	adds	r7, r2, #1
 802132c:	d007      	beq.n	802133e <_strtol_l.constprop.0+0x8a>
 802132e:	4581      	cmp	r9, r0
 8021330:	d320      	bcc.n	8021374 <_strtol_l.constprop.0+0xc0>
 8021332:	d101      	bne.n	8021338 <_strtol_l.constprop.0+0x84>
 8021334:	45a2      	cmp	sl, r4
 8021336:	db1d      	blt.n	8021374 <_strtol_l.constprop.0+0xc0>
 8021338:	fb00 4003 	mla	r0, r0, r3, r4
 802133c:	2201      	movs	r2, #1
 802133e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021342:	e7eb      	b.n	802131c <_strtol_l.constprop.0+0x68>
 8021344:	2c2b      	cmp	r4, #43	@ 0x2b
 8021346:	bf04      	itt	eq
 8021348:	782c      	ldrbeq	r4, [r5, #0]
 802134a:	1c95      	addeq	r5, r2, #2
 802134c:	e7cf      	b.n	80212ee <_strtol_l.constprop.0+0x3a>
 802134e:	2b00      	cmp	r3, #0
 8021350:	d1da      	bne.n	8021308 <_strtol_l.constprop.0+0x54>
 8021352:	2c30      	cmp	r4, #48	@ 0x30
 8021354:	bf0c      	ite	eq
 8021356:	2308      	moveq	r3, #8
 8021358:	230a      	movne	r3, #10
 802135a:	e7d5      	b.n	8021308 <_strtol_l.constprop.0+0x54>
 802135c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8021360:	2f19      	cmp	r7, #25
 8021362:	d801      	bhi.n	8021368 <_strtol_l.constprop.0+0xb4>
 8021364:	3c37      	subs	r4, #55	@ 0x37
 8021366:	e7de      	b.n	8021326 <_strtol_l.constprop.0+0x72>
 8021368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802136c:	2f19      	cmp	r7, #25
 802136e:	d804      	bhi.n	802137a <_strtol_l.constprop.0+0xc6>
 8021370:	3c57      	subs	r4, #87	@ 0x57
 8021372:	e7d8      	b.n	8021326 <_strtol_l.constprop.0+0x72>
 8021374:	f04f 32ff 	mov.w	r2, #4294967295
 8021378:	e7e1      	b.n	802133e <_strtol_l.constprop.0+0x8a>
 802137a:	1c53      	adds	r3, r2, #1
 802137c:	d108      	bne.n	8021390 <_strtol_l.constprop.0+0xdc>
 802137e:	2322      	movs	r3, #34	@ 0x22
 8021380:	f8ce 3000 	str.w	r3, [lr]
 8021384:	4660      	mov	r0, ip
 8021386:	f1b8 0f00 	cmp.w	r8, #0
 802138a:	d0a0      	beq.n	80212ce <_strtol_l.constprop.0+0x1a>
 802138c:	1e69      	subs	r1, r5, #1
 802138e:	e006      	b.n	802139e <_strtol_l.constprop.0+0xea>
 8021390:	b106      	cbz	r6, 8021394 <_strtol_l.constprop.0+0xe0>
 8021392:	4240      	negs	r0, r0
 8021394:	f1b8 0f00 	cmp.w	r8, #0
 8021398:	d099      	beq.n	80212ce <_strtol_l.constprop.0+0x1a>
 802139a:	2a00      	cmp	r2, #0
 802139c:	d1f6      	bne.n	802138c <_strtol_l.constprop.0+0xd8>
 802139e:	f8c8 1000 	str.w	r1, [r8]
 80213a2:	e794      	b.n	80212ce <_strtol_l.constprop.0+0x1a>
 80213a4:	08028bd0 	.word	0x08028bd0

080213a8 <strtol>:
 80213a8:	4613      	mov	r3, r2
 80213aa:	460a      	mov	r2, r1
 80213ac:	4601      	mov	r1, r0
 80213ae:	4802      	ldr	r0, [pc, #8]	@ (80213b8 <strtol+0x10>)
 80213b0:	6800      	ldr	r0, [r0, #0]
 80213b2:	f7ff bf7f 	b.w	80212b4 <_strtol_l.constprop.0>
 80213b6:	bf00      	nop
 80213b8:	24000060 	.word	0x24000060

080213bc <__cvt>:
 80213bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213be:	ed2d 8b02 	vpush	{d8}
 80213c2:	eeb0 8b40 	vmov.f64	d8, d0
 80213c6:	b085      	sub	sp, #20
 80213c8:	4617      	mov	r7, r2
 80213ca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80213cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80213ce:	ee18 2a90 	vmov	r2, s17
 80213d2:	f025 0520 	bic.w	r5, r5, #32
 80213d6:	2a00      	cmp	r2, #0
 80213d8:	bfb6      	itet	lt
 80213da:	222d      	movlt	r2, #45	@ 0x2d
 80213dc:	2200      	movge	r2, #0
 80213de:	eeb1 8b40 	vneglt.f64	d8, d0
 80213e2:	2d46      	cmp	r5, #70	@ 0x46
 80213e4:	460c      	mov	r4, r1
 80213e6:	701a      	strb	r2, [r3, #0]
 80213e8:	d004      	beq.n	80213f4 <__cvt+0x38>
 80213ea:	2d45      	cmp	r5, #69	@ 0x45
 80213ec:	d100      	bne.n	80213f0 <__cvt+0x34>
 80213ee:	3401      	adds	r4, #1
 80213f0:	2102      	movs	r1, #2
 80213f2:	e000      	b.n	80213f6 <__cvt+0x3a>
 80213f4:	2103      	movs	r1, #3
 80213f6:	ab03      	add	r3, sp, #12
 80213f8:	9301      	str	r3, [sp, #4]
 80213fa:	ab02      	add	r3, sp, #8
 80213fc:	9300      	str	r3, [sp, #0]
 80213fe:	4622      	mov	r2, r4
 8021400:	4633      	mov	r3, r6
 8021402:	eeb0 0b48 	vmov.f64	d0, d8
 8021406:	f001 f827 	bl	8022458 <_dtoa_r>
 802140a:	2d47      	cmp	r5, #71	@ 0x47
 802140c:	d114      	bne.n	8021438 <__cvt+0x7c>
 802140e:	07fb      	lsls	r3, r7, #31
 8021410:	d50a      	bpl.n	8021428 <__cvt+0x6c>
 8021412:	1902      	adds	r2, r0, r4
 8021414:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802141c:	bf08      	it	eq
 802141e:	9203      	streq	r2, [sp, #12]
 8021420:	2130      	movs	r1, #48	@ 0x30
 8021422:	9b03      	ldr	r3, [sp, #12]
 8021424:	4293      	cmp	r3, r2
 8021426:	d319      	bcc.n	802145c <__cvt+0xa0>
 8021428:	9b03      	ldr	r3, [sp, #12]
 802142a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802142c:	1a1b      	subs	r3, r3, r0
 802142e:	6013      	str	r3, [r2, #0]
 8021430:	b005      	add	sp, #20
 8021432:	ecbd 8b02 	vpop	{d8}
 8021436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021438:	2d46      	cmp	r5, #70	@ 0x46
 802143a:	eb00 0204 	add.w	r2, r0, r4
 802143e:	d1e9      	bne.n	8021414 <__cvt+0x58>
 8021440:	7803      	ldrb	r3, [r0, #0]
 8021442:	2b30      	cmp	r3, #48	@ 0x30
 8021444:	d107      	bne.n	8021456 <__cvt+0x9a>
 8021446:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802144e:	bf1c      	itt	ne
 8021450:	f1c4 0401 	rsbne	r4, r4, #1
 8021454:	6034      	strne	r4, [r6, #0]
 8021456:	6833      	ldr	r3, [r6, #0]
 8021458:	441a      	add	r2, r3
 802145a:	e7db      	b.n	8021414 <__cvt+0x58>
 802145c:	1c5c      	adds	r4, r3, #1
 802145e:	9403      	str	r4, [sp, #12]
 8021460:	7019      	strb	r1, [r3, #0]
 8021462:	e7de      	b.n	8021422 <__cvt+0x66>

08021464 <__exponent>:
 8021464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021466:	2900      	cmp	r1, #0
 8021468:	bfba      	itte	lt
 802146a:	4249      	neglt	r1, r1
 802146c:	232d      	movlt	r3, #45	@ 0x2d
 802146e:	232b      	movge	r3, #43	@ 0x2b
 8021470:	2909      	cmp	r1, #9
 8021472:	7002      	strb	r2, [r0, #0]
 8021474:	7043      	strb	r3, [r0, #1]
 8021476:	dd29      	ble.n	80214cc <__exponent+0x68>
 8021478:	f10d 0307 	add.w	r3, sp, #7
 802147c:	461d      	mov	r5, r3
 802147e:	270a      	movs	r7, #10
 8021480:	461a      	mov	r2, r3
 8021482:	fbb1 f6f7 	udiv	r6, r1, r7
 8021486:	fb07 1416 	mls	r4, r7, r6, r1
 802148a:	3430      	adds	r4, #48	@ 0x30
 802148c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8021490:	460c      	mov	r4, r1
 8021492:	2c63      	cmp	r4, #99	@ 0x63
 8021494:	f103 33ff 	add.w	r3, r3, #4294967295
 8021498:	4631      	mov	r1, r6
 802149a:	dcf1      	bgt.n	8021480 <__exponent+0x1c>
 802149c:	3130      	adds	r1, #48	@ 0x30
 802149e:	1e94      	subs	r4, r2, #2
 80214a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80214a4:	1c41      	adds	r1, r0, #1
 80214a6:	4623      	mov	r3, r4
 80214a8:	42ab      	cmp	r3, r5
 80214aa:	d30a      	bcc.n	80214c2 <__exponent+0x5e>
 80214ac:	f10d 0309 	add.w	r3, sp, #9
 80214b0:	1a9b      	subs	r3, r3, r2
 80214b2:	42ac      	cmp	r4, r5
 80214b4:	bf88      	it	hi
 80214b6:	2300      	movhi	r3, #0
 80214b8:	3302      	adds	r3, #2
 80214ba:	4403      	add	r3, r0
 80214bc:	1a18      	subs	r0, r3, r0
 80214be:	b003      	add	sp, #12
 80214c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80214c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80214ca:	e7ed      	b.n	80214a8 <__exponent+0x44>
 80214cc:	2330      	movs	r3, #48	@ 0x30
 80214ce:	3130      	adds	r1, #48	@ 0x30
 80214d0:	7083      	strb	r3, [r0, #2]
 80214d2:	70c1      	strb	r1, [r0, #3]
 80214d4:	1d03      	adds	r3, r0, #4
 80214d6:	e7f1      	b.n	80214bc <__exponent+0x58>

080214d8 <_printf_float>:
 80214d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214dc:	b08d      	sub	sp, #52	@ 0x34
 80214de:	460c      	mov	r4, r1
 80214e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80214e4:	4616      	mov	r6, r2
 80214e6:	461f      	mov	r7, r3
 80214e8:	4605      	mov	r5, r0
 80214ea:	f000 fe33 	bl	8022154 <_localeconv_r>
 80214ee:	f8d0 b000 	ldr.w	fp, [r0]
 80214f2:	4658      	mov	r0, fp
 80214f4:	f7de ff54 	bl	80003a0 <strlen>
 80214f8:	2300      	movs	r3, #0
 80214fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80214fc:	f8d8 3000 	ldr.w	r3, [r8]
 8021500:	f894 9018 	ldrb.w	r9, [r4, #24]
 8021504:	6822      	ldr	r2, [r4, #0]
 8021506:	9005      	str	r0, [sp, #20]
 8021508:	3307      	adds	r3, #7
 802150a:	f023 0307 	bic.w	r3, r3, #7
 802150e:	f103 0108 	add.w	r1, r3, #8
 8021512:	f8c8 1000 	str.w	r1, [r8]
 8021516:	ed93 0b00 	vldr	d0, [r3]
 802151a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8021778 <_printf_float+0x2a0>
 802151e:	eeb0 7bc0 	vabs.f64	d7, d0
 8021522:	eeb4 7b46 	vcmp.f64	d7, d6
 8021526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802152a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 802152e:	dd24      	ble.n	802157a <_printf_float+0xa2>
 8021530:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021538:	d502      	bpl.n	8021540 <_printf_float+0x68>
 802153a:	232d      	movs	r3, #45	@ 0x2d
 802153c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021540:	498f      	ldr	r1, [pc, #572]	@ (8021780 <_printf_float+0x2a8>)
 8021542:	4b90      	ldr	r3, [pc, #576]	@ (8021784 <_printf_float+0x2ac>)
 8021544:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8021548:	bf94      	ite	ls
 802154a:	4688      	movls	r8, r1
 802154c:	4698      	movhi	r8, r3
 802154e:	f022 0204 	bic.w	r2, r2, #4
 8021552:	2303      	movs	r3, #3
 8021554:	6123      	str	r3, [r4, #16]
 8021556:	6022      	str	r2, [r4, #0]
 8021558:	f04f 0a00 	mov.w	sl, #0
 802155c:	9700      	str	r7, [sp, #0]
 802155e:	4633      	mov	r3, r6
 8021560:	aa0b      	add	r2, sp, #44	@ 0x2c
 8021562:	4621      	mov	r1, r4
 8021564:	4628      	mov	r0, r5
 8021566:	f000 f9d1 	bl	802190c <_printf_common>
 802156a:	3001      	adds	r0, #1
 802156c:	f040 8089 	bne.w	8021682 <_printf_float+0x1aa>
 8021570:	f04f 30ff 	mov.w	r0, #4294967295
 8021574:	b00d      	add	sp, #52	@ 0x34
 8021576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802157a:	eeb4 0b40 	vcmp.f64	d0, d0
 802157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021582:	d709      	bvc.n	8021598 <_printf_float+0xc0>
 8021584:	ee10 3a90 	vmov	r3, s1
 8021588:	2b00      	cmp	r3, #0
 802158a:	bfbc      	itt	lt
 802158c:	232d      	movlt	r3, #45	@ 0x2d
 802158e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8021592:	497d      	ldr	r1, [pc, #500]	@ (8021788 <_printf_float+0x2b0>)
 8021594:	4b7d      	ldr	r3, [pc, #500]	@ (802178c <_printf_float+0x2b4>)
 8021596:	e7d5      	b.n	8021544 <_printf_float+0x6c>
 8021598:	6863      	ldr	r3, [r4, #4]
 802159a:	1c59      	adds	r1, r3, #1
 802159c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80215a0:	d139      	bne.n	8021616 <_printf_float+0x13e>
 80215a2:	2306      	movs	r3, #6
 80215a4:	6063      	str	r3, [r4, #4]
 80215a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80215aa:	2300      	movs	r3, #0
 80215ac:	6022      	str	r2, [r4, #0]
 80215ae:	9303      	str	r3, [sp, #12]
 80215b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80215b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80215b6:	ab09      	add	r3, sp, #36	@ 0x24
 80215b8:	9300      	str	r3, [sp, #0]
 80215ba:	6861      	ldr	r1, [r4, #4]
 80215bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80215c0:	4628      	mov	r0, r5
 80215c2:	f7ff fefb 	bl	80213bc <__cvt>
 80215c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80215ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80215cc:	4680      	mov	r8, r0
 80215ce:	d129      	bne.n	8021624 <_printf_float+0x14c>
 80215d0:	1cc8      	adds	r0, r1, #3
 80215d2:	db02      	blt.n	80215da <_printf_float+0x102>
 80215d4:	6863      	ldr	r3, [r4, #4]
 80215d6:	4299      	cmp	r1, r3
 80215d8:	dd41      	ble.n	802165e <_printf_float+0x186>
 80215da:	f1a9 0902 	sub.w	r9, r9, #2
 80215de:	fa5f f989 	uxtb.w	r9, r9
 80215e2:	3901      	subs	r1, #1
 80215e4:	464a      	mov	r2, r9
 80215e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80215ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80215ec:	f7ff ff3a 	bl	8021464 <__exponent>
 80215f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80215f2:	1813      	adds	r3, r2, r0
 80215f4:	2a01      	cmp	r2, #1
 80215f6:	4682      	mov	sl, r0
 80215f8:	6123      	str	r3, [r4, #16]
 80215fa:	dc02      	bgt.n	8021602 <_printf_float+0x12a>
 80215fc:	6822      	ldr	r2, [r4, #0]
 80215fe:	07d2      	lsls	r2, r2, #31
 8021600:	d501      	bpl.n	8021606 <_printf_float+0x12e>
 8021602:	3301      	adds	r3, #1
 8021604:	6123      	str	r3, [r4, #16]
 8021606:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802160a:	2b00      	cmp	r3, #0
 802160c:	d0a6      	beq.n	802155c <_printf_float+0x84>
 802160e:	232d      	movs	r3, #45	@ 0x2d
 8021610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021614:	e7a2      	b.n	802155c <_printf_float+0x84>
 8021616:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802161a:	d1c4      	bne.n	80215a6 <_printf_float+0xce>
 802161c:	2b00      	cmp	r3, #0
 802161e:	d1c2      	bne.n	80215a6 <_printf_float+0xce>
 8021620:	2301      	movs	r3, #1
 8021622:	e7bf      	b.n	80215a4 <_printf_float+0xcc>
 8021624:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8021628:	d9db      	bls.n	80215e2 <_printf_float+0x10a>
 802162a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 802162e:	d118      	bne.n	8021662 <_printf_float+0x18a>
 8021630:	2900      	cmp	r1, #0
 8021632:	6863      	ldr	r3, [r4, #4]
 8021634:	dd0b      	ble.n	802164e <_printf_float+0x176>
 8021636:	6121      	str	r1, [r4, #16]
 8021638:	b913      	cbnz	r3, 8021640 <_printf_float+0x168>
 802163a:	6822      	ldr	r2, [r4, #0]
 802163c:	07d0      	lsls	r0, r2, #31
 802163e:	d502      	bpl.n	8021646 <_printf_float+0x16e>
 8021640:	3301      	adds	r3, #1
 8021642:	440b      	add	r3, r1
 8021644:	6123      	str	r3, [r4, #16]
 8021646:	65a1      	str	r1, [r4, #88]	@ 0x58
 8021648:	f04f 0a00 	mov.w	sl, #0
 802164c:	e7db      	b.n	8021606 <_printf_float+0x12e>
 802164e:	b913      	cbnz	r3, 8021656 <_printf_float+0x17e>
 8021650:	6822      	ldr	r2, [r4, #0]
 8021652:	07d2      	lsls	r2, r2, #31
 8021654:	d501      	bpl.n	802165a <_printf_float+0x182>
 8021656:	3302      	adds	r3, #2
 8021658:	e7f4      	b.n	8021644 <_printf_float+0x16c>
 802165a:	2301      	movs	r3, #1
 802165c:	e7f2      	b.n	8021644 <_printf_float+0x16c>
 802165e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8021662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021664:	4299      	cmp	r1, r3
 8021666:	db05      	blt.n	8021674 <_printf_float+0x19c>
 8021668:	6823      	ldr	r3, [r4, #0]
 802166a:	6121      	str	r1, [r4, #16]
 802166c:	07d8      	lsls	r0, r3, #31
 802166e:	d5ea      	bpl.n	8021646 <_printf_float+0x16e>
 8021670:	1c4b      	adds	r3, r1, #1
 8021672:	e7e7      	b.n	8021644 <_printf_float+0x16c>
 8021674:	2900      	cmp	r1, #0
 8021676:	bfd4      	ite	le
 8021678:	f1c1 0202 	rsble	r2, r1, #2
 802167c:	2201      	movgt	r2, #1
 802167e:	4413      	add	r3, r2
 8021680:	e7e0      	b.n	8021644 <_printf_float+0x16c>
 8021682:	6823      	ldr	r3, [r4, #0]
 8021684:	055a      	lsls	r2, r3, #21
 8021686:	d407      	bmi.n	8021698 <_printf_float+0x1c0>
 8021688:	6923      	ldr	r3, [r4, #16]
 802168a:	4642      	mov	r2, r8
 802168c:	4631      	mov	r1, r6
 802168e:	4628      	mov	r0, r5
 8021690:	47b8      	blx	r7
 8021692:	3001      	adds	r0, #1
 8021694:	d12a      	bne.n	80216ec <_printf_float+0x214>
 8021696:	e76b      	b.n	8021570 <_printf_float+0x98>
 8021698:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802169c:	f240 80e0 	bls.w	8021860 <_printf_float+0x388>
 80216a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80216a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80216a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216ac:	d133      	bne.n	8021716 <_printf_float+0x23e>
 80216ae:	4a38      	ldr	r2, [pc, #224]	@ (8021790 <_printf_float+0x2b8>)
 80216b0:	2301      	movs	r3, #1
 80216b2:	4631      	mov	r1, r6
 80216b4:	4628      	mov	r0, r5
 80216b6:	47b8      	blx	r7
 80216b8:	3001      	adds	r0, #1
 80216ba:	f43f af59 	beq.w	8021570 <_printf_float+0x98>
 80216be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80216c2:	4543      	cmp	r3, r8
 80216c4:	db02      	blt.n	80216cc <_printf_float+0x1f4>
 80216c6:	6823      	ldr	r3, [r4, #0]
 80216c8:	07d8      	lsls	r0, r3, #31
 80216ca:	d50f      	bpl.n	80216ec <_printf_float+0x214>
 80216cc:	9b05      	ldr	r3, [sp, #20]
 80216ce:	465a      	mov	r2, fp
 80216d0:	4631      	mov	r1, r6
 80216d2:	4628      	mov	r0, r5
 80216d4:	47b8      	blx	r7
 80216d6:	3001      	adds	r0, #1
 80216d8:	f43f af4a 	beq.w	8021570 <_printf_float+0x98>
 80216dc:	f04f 0900 	mov.w	r9, #0
 80216e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80216e4:	f104 0a1a 	add.w	sl, r4, #26
 80216e8:	45c8      	cmp	r8, r9
 80216ea:	dc09      	bgt.n	8021700 <_printf_float+0x228>
 80216ec:	6823      	ldr	r3, [r4, #0]
 80216ee:	079b      	lsls	r3, r3, #30
 80216f0:	f100 8107 	bmi.w	8021902 <_printf_float+0x42a>
 80216f4:	68e0      	ldr	r0, [r4, #12]
 80216f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216f8:	4298      	cmp	r0, r3
 80216fa:	bfb8      	it	lt
 80216fc:	4618      	movlt	r0, r3
 80216fe:	e739      	b.n	8021574 <_printf_float+0x9c>
 8021700:	2301      	movs	r3, #1
 8021702:	4652      	mov	r2, sl
 8021704:	4631      	mov	r1, r6
 8021706:	4628      	mov	r0, r5
 8021708:	47b8      	blx	r7
 802170a:	3001      	adds	r0, #1
 802170c:	f43f af30 	beq.w	8021570 <_printf_float+0x98>
 8021710:	f109 0901 	add.w	r9, r9, #1
 8021714:	e7e8      	b.n	80216e8 <_printf_float+0x210>
 8021716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021718:	2b00      	cmp	r3, #0
 802171a:	dc3b      	bgt.n	8021794 <_printf_float+0x2bc>
 802171c:	4a1c      	ldr	r2, [pc, #112]	@ (8021790 <_printf_float+0x2b8>)
 802171e:	2301      	movs	r3, #1
 8021720:	4631      	mov	r1, r6
 8021722:	4628      	mov	r0, r5
 8021724:	47b8      	blx	r7
 8021726:	3001      	adds	r0, #1
 8021728:	f43f af22 	beq.w	8021570 <_printf_float+0x98>
 802172c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8021730:	ea59 0303 	orrs.w	r3, r9, r3
 8021734:	d102      	bne.n	802173c <_printf_float+0x264>
 8021736:	6823      	ldr	r3, [r4, #0]
 8021738:	07d9      	lsls	r1, r3, #31
 802173a:	d5d7      	bpl.n	80216ec <_printf_float+0x214>
 802173c:	9b05      	ldr	r3, [sp, #20]
 802173e:	465a      	mov	r2, fp
 8021740:	4631      	mov	r1, r6
 8021742:	4628      	mov	r0, r5
 8021744:	47b8      	blx	r7
 8021746:	3001      	adds	r0, #1
 8021748:	f43f af12 	beq.w	8021570 <_printf_float+0x98>
 802174c:	f04f 0a00 	mov.w	sl, #0
 8021750:	f104 0b1a 	add.w	fp, r4, #26
 8021754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021756:	425b      	negs	r3, r3
 8021758:	4553      	cmp	r3, sl
 802175a:	dc01      	bgt.n	8021760 <_printf_float+0x288>
 802175c:	464b      	mov	r3, r9
 802175e:	e794      	b.n	802168a <_printf_float+0x1b2>
 8021760:	2301      	movs	r3, #1
 8021762:	465a      	mov	r2, fp
 8021764:	4631      	mov	r1, r6
 8021766:	4628      	mov	r0, r5
 8021768:	47b8      	blx	r7
 802176a:	3001      	adds	r0, #1
 802176c:	f43f af00 	beq.w	8021570 <_printf_float+0x98>
 8021770:	f10a 0a01 	add.w	sl, sl, #1
 8021774:	e7ee      	b.n	8021754 <_printf_float+0x27c>
 8021776:	bf00      	nop
 8021778:	ffffffff 	.word	0xffffffff
 802177c:	7fefffff 	.word	0x7fefffff
 8021780:	08028cd0 	.word	0x08028cd0
 8021784:	08028cd4 	.word	0x08028cd4
 8021788:	08028cd8 	.word	0x08028cd8
 802178c:	08028cdc 	.word	0x08028cdc
 8021790:	08028ce0 	.word	0x08028ce0
 8021794:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021796:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802179a:	4553      	cmp	r3, sl
 802179c:	bfa8      	it	ge
 802179e:	4653      	movge	r3, sl
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	4699      	mov	r9, r3
 80217a4:	dc37      	bgt.n	8021816 <_printf_float+0x33e>
 80217a6:	2300      	movs	r3, #0
 80217a8:	9307      	str	r3, [sp, #28]
 80217aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80217ae:	f104 021a 	add.w	r2, r4, #26
 80217b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80217b4:	9907      	ldr	r1, [sp, #28]
 80217b6:	9306      	str	r3, [sp, #24]
 80217b8:	eba3 0309 	sub.w	r3, r3, r9
 80217bc:	428b      	cmp	r3, r1
 80217be:	dc31      	bgt.n	8021824 <_printf_float+0x34c>
 80217c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217c2:	459a      	cmp	sl, r3
 80217c4:	dc3b      	bgt.n	802183e <_printf_float+0x366>
 80217c6:	6823      	ldr	r3, [r4, #0]
 80217c8:	07da      	lsls	r2, r3, #31
 80217ca:	d438      	bmi.n	802183e <_printf_float+0x366>
 80217cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217ce:	ebaa 0903 	sub.w	r9, sl, r3
 80217d2:	9b06      	ldr	r3, [sp, #24]
 80217d4:	ebaa 0303 	sub.w	r3, sl, r3
 80217d8:	4599      	cmp	r9, r3
 80217da:	bfa8      	it	ge
 80217dc:	4699      	movge	r9, r3
 80217de:	f1b9 0f00 	cmp.w	r9, #0
 80217e2:	dc34      	bgt.n	802184e <_printf_float+0x376>
 80217e4:	f04f 0800 	mov.w	r8, #0
 80217e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80217ec:	f104 0b1a 	add.w	fp, r4, #26
 80217f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217f2:	ebaa 0303 	sub.w	r3, sl, r3
 80217f6:	eba3 0309 	sub.w	r3, r3, r9
 80217fa:	4543      	cmp	r3, r8
 80217fc:	f77f af76 	ble.w	80216ec <_printf_float+0x214>
 8021800:	2301      	movs	r3, #1
 8021802:	465a      	mov	r2, fp
 8021804:	4631      	mov	r1, r6
 8021806:	4628      	mov	r0, r5
 8021808:	47b8      	blx	r7
 802180a:	3001      	adds	r0, #1
 802180c:	f43f aeb0 	beq.w	8021570 <_printf_float+0x98>
 8021810:	f108 0801 	add.w	r8, r8, #1
 8021814:	e7ec      	b.n	80217f0 <_printf_float+0x318>
 8021816:	4642      	mov	r2, r8
 8021818:	4631      	mov	r1, r6
 802181a:	4628      	mov	r0, r5
 802181c:	47b8      	blx	r7
 802181e:	3001      	adds	r0, #1
 8021820:	d1c1      	bne.n	80217a6 <_printf_float+0x2ce>
 8021822:	e6a5      	b.n	8021570 <_printf_float+0x98>
 8021824:	2301      	movs	r3, #1
 8021826:	4631      	mov	r1, r6
 8021828:	4628      	mov	r0, r5
 802182a:	9206      	str	r2, [sp, #24]
 802182c:	47b8      	blx	r7
 802182e:	3001      	adds	r0, #1
 8021830:	f43f ae9e 	beq.w	8021570 <_printf_float+0x98>
 8021834:	9b07      	ldr	r3, [sp, #28]
 8021836:	9a06      	ldr	r2, [sp, #24]
 8021838:	3301      	adds	r3, #1
 802183a:	9307      	str	r3, [sp, #28]
 802183c:	e7b9      	b.n	80217b2 <_printf_float+0x2da>
 802183e:	9b05      	ldr	r3, [sp, #20]
 8021840:	465a      	mov	r2, fp
 8021842:	4631      	mov	r1, r6
 8021844:	4628      	mov	r0, r5
 8021846:	47b8      	blx	r7
 8021848:	3001      	adds	r0, #1
 802184a:	d1bf      	bne.n	80217cc <_printf_float+0x2f4>
 802184c:	e690      	b.n	8021570 <_printf_float+0x98>
 802184e:	9a06      	ldr	r2, [sp, #24]
 8021850:	464b      	mov	r3, r9
 8021852:	4442      	add	r2, r8
 8021854:	4631      	mov	r1, r6
 8021856:	4628      	mov	r0, r5
 8021858:	47b8      	blx	r7
 802185a:	3001      	adds	r0, #1
 802185c:	d1c2      	bne.n	80217e4 <_printf_float+0x30c>
 802185e:	e687      	b.n	8021570 <_printf_float+0x98>
 8021860:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8021864:	f1b9 0f01 	cmp.w	r9, #1
 8021868:	dc01      	bgt.n	802186e <_printf_float+0x396>
 802186a:	07db      	lsls	r3, r3, #31
 802186c:	d536      	bpl.n	80218dc <_printf_float+0x404>
 802186e:	2301      	movs	r3, #1
 8021870:	4642      	mov	r2, r8
 8021872:	4631      	mov	r1, r6
 8021874:	4628      	mov	r0, r5
 8021876:	47b8      	blx	r7
 8021878:	3001      	adds	r0, #1
 802187a:	f43f ae79 	beq.w	8021570 <_printf_float+0x98>
 802187e:	9b05      	ldr	r3, [sp, #20]
 8021880:	465a      	mov	r2, fp
 8021882:	4631      	mov	r1, r6
 8021884:	4628      	mov	r0, r5
 8021886:	47b8      	blx	r7
 8021888:	3001      	adds	r0, #1
 802188a:	f43f ae71 	beq.w	8021570 <_printf_float+0x98>
 802188e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8021892:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802189a:	f109 39ff 	add.w	r9, r9, #4294967295
 802189e:	d018      	beq.n	80218d2 <_printf_float+0x3fa>
 80218a0:	464b      	mov	r3, r9
 80218a2:	f108 0201 	add.w	r2, r8, #1
 80218a6:	4631      	mov	r1, r6
 80218a8:	4628      	mov	r0, r5
 80218aa:	47b8      	blx	r7
 80218ac:	3001      	adds	r0, #1
 80218ae:	d10c      	bne.n	80218ca <_printf_float+0x3f2>
 80218b0:	e65e      	b.n	8021570 <_printf_float+0x98>
 80218b2:	2301      	movs	r3, #1
 80218b4:	465a      	mov	r2, fp
 80218b6:	4631      	mov	r1, r6
 80218b8:	4628      	mov	r0, r5
 80218ba:	47b8      	blx	r7
 80218bc:	3001      	adds	r0, #1
 80218be:	f43f ae57 	beq.w	8021570 <_printf_float+0x98>
 80218c2:	f108 0801 	add.w	r8, r8, #1
 80218c6:	45c8      	cmp	r8, r9
 80218c8:	dbf3      	blt.n	80218b2 <_printf_float+0x3da>
 80218ca:	4653      	mov	r3, sl
 80218cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80218d0:	e6dc      	b.n	802168c <_printf_float+0x1b4>
 80218d2:	f04f 0800 	mov.w	r8, #0
 80218d6:	f104 0b1a 	add.w	fp, r4, #26
 80218da:	e7f4      	b.n	80218c6 <_printf_float+0x3ee>
 80218dc:	2301      	movs	r3, #1
 80218de:	4642      	mov	r2, r8
 80218e0:	e7e1      	b.n	80218a6 <_printf_float+0x3ce>
 80218e2:	2301      	movs	r3, #1
 80218e4:	464a      	mov	r2, r9
 80218e6:	4631      	mov	r1, r6
 80218e8:	4628      	mov	r0, r5
 80218ea:	47b8      	blx	r7
 80218ec:	3001      	adds	r0, #1
 80218ee:	f43f ae3f 	beq.w	8021570 <_printf_float+0x98>
 80218f2:	f108 0801 	add.w	r8, r8, #1
 80218f6:	68e3      	ldr	r3, [r4, #12]
 80218f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80218fa:	1a5b      	subs	r3, r3, r1
 80218fc:	4543      	cmp	r3, r8
 80218fe:	dcf0      	bgt.n	80218e2 <_printf_float+0x40a>
 8021900:	e6f8      	b.n	80216f4 <_printf_float+0x21c>
 8021902:	f04f 0800 	mov.w	r8, #0
 8021906:	f104 0919 	add.w	r9, r4, #25
 802190a:	e7f4      	b.n	80218f6 <_printf_float+0x41e>

0802190c <_printf_common>:
 802190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021910:	4616      	mov	r6, r2
 8021912:	4698      	mov	r8, r3
 8021914:	688a      	ldr	r2, [r1, #8]
 8021916:	690b      	ldr	r3, [r1, #16]
 8021918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802191c:	4293      	cmp	r3, r2
 802191e:	bfb8      	it	lt
 8021920:	4613      	movlt	r3, r2
 8021922:	6033      	str	r3, [r6, #0]
 8021924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021928:	4607      	mov	r7, r0
 802192a:	460c      	mov	r4, r1
 802192c:	b10a      	cbz	r2, 8021932 <_printf_common+0x26>
 802192e:	3301      	adds	r3, #1
 8021930:	6033      	str	r3, [r6, #0]
 8021932:	6823      	ldr	r3, [r4, #0]
 8021934:	0699      	lsls	r1, r3, #26
 8021936:	bf42      	ittt	mi
 8021938:	6833      	ldrmi	r3, [r6, #0]
 802193a:	3302      	addmi	r3, #2
 802193c:	6033      	strmi	r3, [r6, #0]
 802193e:	6825      	ldr	r5, [r4, #0]
 8021940:	f015 0506 	ands.w	r5, r5, #6
 8021944:	d106      	bne.n	8021954 <_printf_common+0x48>
 8021946:	f104 0a19 	add.w	sl, r4, #25
 802194a:	68e3      	ldr	r3, [r4, #12]
 802194c:	6832      	ldr	r2, [r6, #0]
 802194e:	1a9b      	subs	r3, r3, r2
 8021950:	42ab      	cmp	r3, r5
 8021952:	dc26      	bgt.n	80219a2 <_printf_common+0x96>
 8021954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021958:	6822      	ldr	r2, [r4, #0]
 802195a:	3b00      	subs	r3, #0
 802195c:	bf18      	it	ne
 802195e:	2301      	movne	r3, #1
 8021960:	0692      	lsls	r2, r2, #26
 8021962:	d42b      	bmi.n	80219bc <_printf_common+0xb0>
 8021964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021968:	4641      	mov	r1, r8
 802196a:	4638      	mov	r0, r7
 802196c:	47c8      	blx	r9
 802196e:	3001      	adds	r0, #1
 8021970:	d01e      	beq.n	80219b0 <_printf_common+0xa4>
 8021972:	6823      	ldr	r3, [r4, #0]
 8021974:	6922      	ldr	r2, [r4, #16]
 8021976:	f003 0306 	and.w	r3, r3, #6
 802197a:	2b04      	cmp	r3, #4
 802197c:	bf02      	ittt	eq
 802197e:	68e5      	ldreq	r5, [r4, #12]
 8021980:	6833      	ldreq	r3, [r6, #0]
 8021982:	1aed      	subeq	r5, r5, r3
 8021984:	68a3      	ldr	r3, [r4, #8]
 8021986:	bf0c      	ite	eq
 8021988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802198c:	2500      	movne	r5, #0
 802198e:	4293      	cmp	r3, r2
 8021990:	bfc4      	itt	gt
 8021992:	1a9b      	subgt	r3, r3, r2
 8021994:	18ed      	addgt	r5, r5, r3
 8021996:	2600      	movs	r6, #0
 8021998:	341a      	adds	r4, #26
 802199a:	42b5      	cmp	r5, r6
 802199c:	d11a      	bne.n	80219d4 <_printf_common+0xc8>
 802199e:	2000      	movs	r0, #0
 80219a0:	e008      	b.n	80219b4 <_printf_common+0xa8>
 80219a2:	2301      	movs	r3, #1
 80219a4:	4652      	mov	r2, sl
 80219a6:	4641      	mov	r1, r8
 80219a8:	4638      	mov	r0, r7
 80219aa:	47c8      	blx	r9
 80219ac:	3001      	adds	r0, #1
 80219ae:	d103      	bne.n	80219b8 <_printf_common+0xac>
 80219b0:	f04f 30ff 	mov.w	r0, #4294967295
 80219b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219b8:	3501      	adds	r5, #1
 80219ba:	e7c6      	b.n	802194a <_printf_common+0x3e>
 80219bc:	18e1      	adds	r1, r4, r3
 80219be:	1c5a      	adds	r2, r3, #1
 80219c0:	2030      	movs	r0, #48	@ 0x30
 80219c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80219c6:	4422      	add	r2, r4
 80219c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80219cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80219d0:	3302      	adds	r3, #2
 80219d2:	e7c7      	b.n	8021964 <_printf_common+0x58>
 80219d4:	2301      	movs	r3, #1
 80219d6:	4622      	mov	r2, r4
 80219d8:	4641      	mov	r1, r8
 80219da:	4638      	mov	r0, r7
 80219dc:	47c8      	blx	r9
 80219de:	3001      	adds	r0, #1
 80219e0:	d0e6      	beq.n	80219b0 <_printf_common+0xa4>
 80219e2:	3601      	adds	r6, #1
 80219e4:	e7d9      	b.n	802199a <_printf_common+0x8e>
	...

080219e8 <_printf_i>:
 80219e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80219ec:	7e0f      	ldrb	r7, [r1, #24]
 80219ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80219f0:	2f78      	cmp	r7, #120	@ 0x78
 80219f2:	4691      	mov	r9, r2
 80219f4:	4680      	mov	r8, r0
 80219f6:	460c      	mov	r4, r1
 80219f8:	469a      	mov	sl, r3
 80219fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80219fe:	d807      	bhi.n	8021a10 <_printf_i+0x28>
 8021a00:	2f62      	cmp	r7, #98	@ 0x62
 8021a02:	d80a      	bhi.n	8021a1a <_printf_i+0x32>
 8021a04:	2f00      	cmp	r7, #0
 8021a06:	f000 80d2 	beq.w	8021bae <_printf_i+0x1c6>
 8021a0a:	2f58      	cmp	r7, #88	@ 0x58
 8021a0c:	f000 80b9 	beq.w	8021b82 <_printf_i+0x19a>
 8021a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021a18:	e03a      	b.n	8021a90 <_printf_i+0xa8>
 8021a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021a1e:	2b15      	cmp	r3, #21
 8021a20:	d8f6      	bhi.n	8021a10 <_printf_i+0x28>
 8021a22:	a101      	add	r1, pc, #4	@ (adr r1, 8021a28 <_printf_i+0x40>)
 8021a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021a28:	08021a81 	.word	0x08021a81
 8021a2c:	08021a95 	.word	0x08021a95
 8021a30:	08021a11 	.word	0x08021a11
 8021a34:	08021a11 	.word	0x08021a11
 8021a38:	08021a11 	.word	0x08021a11
 8021a3c:	08021a11 	.word	0x08021a11
 8021a40:	08021a95 	.word	0x08021a95
 8021a44:	08021a11 	.word	0x08021a11
 8021a48:	08021a11 	.word	0x08021a11
 8021a4c:	08021a11 	.word	0x08021a11
 8021a50:	08021a11 	.word	0x08021a11
 8021a54:	08021b95 	.word	0x08021b95
 8021a58:	08021abf 	.word	0x08021abf
 8021a5c:	08021b4f 	.word	0x08021b4f
 8021a60:	08021a11 	.word	0x08021a11
 8021a64:	08021a11 	.word	0x08021a11
 8021a68:	08021bb7 	.word	0x08021bb7
 8021a6c:	08021a11 	.word	0x08021a11
 8021a70:	08021abf 	.word	0x08021abf
 8021a74:	08021a11 	.word	0x08021a11
 8021a78:	08021a11 	.word	0x08021a11
 8021a7c:	08021b57 	.word	0x08021b57
 8021a80:	6833      	ldr	r3, [r6, #0]
 8021a82:	1d1a      	adds	r2, r3, #4
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	6032      	str	r2, [r6, #0]
 8021a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021a90:	2301      	movs	r3, #1
 8021a92:	e09d      	b.n	8021bd0 <_printf_i+0x1e8>
 8021a94:	6833      	ldr	r3, [r6, #0]
 8021a96:	6820      	ldr	r0, [r4, #0]
 8021a98:	1d19      	adds	r1, r3, #4
 8021a9a:	6031      	str	r1, [r6, #0]
 8021a9c:	0606      	lsls	r6, r0, #24
 8021a9e:	d501      	bpl.n	8021aa4 <_printf_i+0xbc>
 8021aa0:	681d      	ldr	r5, [r3, #0]
 8021aa2:	e003      	b.n	8021aac <_printf_i+0xc4>
 8021aa4:	0645      	lsls	r5, r0, #25
 8021aa6:	d5fb      	bpl.n	8021aa0 <_printf_i+0xb8>
 8021aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021aac:	2d00      	cmp	r5, #0
 8021aae:	da03      	bge.n	8021ab8 <_printf_i+0xd0>
 8021ab0:	232d      	movs	r3, #45	@ 0x2d
 8021ab2:	426d      	negs	r5, r5
 8021ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021ab8:	4859      	ldr	r0, [pc, #356]	@ (8021c20 <_printf_i+0x238>)
 8021aba:	230a      	movs	r3, #10
 8021abc:	e011      	b.n	8021ae2 <_printf_i+0xfa>
 8021abe:	6821      	ldr	r1, [r4, #0]
 8021ac0:	6833      	ldr	r3, [r6, #0]
 8021ac2:	0608      	lsls	r0, r1, #24
 8021ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8021ac8:	d402      	bmi.n	8021ad0 <_printf_i+0xe8>
 8021aca:	0649      	lsls	r1, r1, #25
 8021acc:	bf48      	it	mi
 8021ace:	b2ad      	uxthmi	r5, r5
 8021ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8021ad2:	4853      	ldr	r0, [pc, #332]	@ (8021c20 <_printf_i+0x238>)
 8021ad4:	6033      	str	r3, [r6, #0]
 8021ad6:	bf14      	ite	ne
 8021ad8:	230a      	movne	r3, #10
 8021ada:	2308      	moveq	r3, #8
 8021adc:	2100      	movs	r1, #0
 8021ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021ae2:	6866      	ldr	r6, [r4, #4]
 8021ae4:	60a6      	str	r6, [r4, #8]
 8021ae6:	2e00      	cmp	r6, #0
 8021ae8:	bfa2      	ittt	ge
 8021aea:	6821      	ldrge	r1, [r4, #0]
 8021aec:	f021 0104 	bicge.w	r1, r1, #4
 8021af0:	6021      	strge	r1, [r4, #0]
 8021af2:	b90d      	cbnz	r5, 8021af8 <_printf_i+0x110>
 8021af4:	2e00      	cmp	r6, #0
 8021af6:	d04b      	beq.n	8021b90 <_printf_i+0x1a8>
 8021af8:	4616      	mov	r6, r2
 8021afa:	fbb5 f1f3 	udiv	r1, r5, r3
 8021afe:	fb03 5711 	mls	r7, r3, r1, r5
 8021b02:	5dc7      	ldrb	r7, [r0, r7]
 8021b04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021b08:	462f      	mov	r7, r5
 8021b0a:	42bb      	cmp	r3, r7
 8021b0c:	460d      	mov	r5, r1
 8021b0e:	d9f4      	bls.n	8021afa <_printf_i+0x112>
 8021b10:	2b08      	cmp	r3, #8
 8021b12:	d10b      	bne.n	8021b2c <_printf_i+0x144>
 8021b14:	6823      	ldr	r3, [r4, #0]
 8021b16:	07df      	lsls	r7, r3, #31
 8021b18:	d508      	bpl.n	8021b2c <_printf_i+0x144>
 8021b1a:	6923      	ldr	r3, [r4, #16]
 8021b1c:	6861      	ldr	r1, [r4, #4]
 8021b1e:	4299      	cmp	r1, r3
 8021b20:	bfde      	ittt	le
 8021b22:	2330      	movle	r3, #48	@ 0x30
 8021b24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021b28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021b2c:	1b92      	subs	r2, r2, r6
 8021b2e:	6122      	str	r2, [r4, #16]
 8021b30:	f8cd a000 	str.w	sl, [sp]
 8021b34:	464b      	mov	r3, r9
 8021b36:	aa03      	add	r2, sp, #12
 8021b38:	4621      	mov	r1, r4
 8021b3a:	4640      	mov	r0, r8
 8021b3c:	f7ff fee6 	bl	802190c <_printf_common>
 8021b40:	3001      	adds	r0, #1
 8021b42:	d14a      	bne.n	8021bda <_printf_i+0x1f2>
 8021b44:	f04f 30ff 	mov.w	r0, #4294967295
 8021b48:	b004      	add	sp, #16
 8021b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b4e:	6823      	ldr	r3, [r4, #0]
 8021b50:	f043 0320 	orr.w	r3, r3, #32
 8021b54:	6023      	str	r3, [r4, #0]
 8021b56:	4833      	ldr	r0, [pc, #204]	@ (8021c24 <_printf_i+0x23c>)
 8021b58:	2778      	movs	r7, #120	@ 0x78
 8021b5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021b5e:	6823      	ldr	r3, [r4, #0]
 8021b60:	6831      	ldr	r1, [r6, #0]
 8021b62:	061f      	lsls	r7, r3, #24
 8021b64:	f851 5b04 	ldr.w	r5, [r1], #4
 8021b68:	d402      	bmi.n	8021b70 <_printf_i+0x188>
 8021b6a:	065f      	lsls	r7, r3, #25
 8021b6c:	bf48      	it	mi
 8021b6e:	b2ad      	uxthmi	r5, r5
 8021b70:	6031      	str	r1, [r6, #0]
 8021b72:	07d9      	lsls	r1, r3, #31
 8021b74:	bf44      	itt	mi
 8021b76:	f043 0320 	orrmi.w	r3, r3, #32
 8021b7a:	6023      	strmi	r3, [r4, #0]
 8021b7c:	b11d      	cbz	r5, 8021b86 <_printf_i+0x19e>
 8021b7e:	2310      	movs	r3, #16
 8021b80:	e7ac      	b.n	8021adc <_printf_i+0xf4>
 8021b82:	4827      	ldr	r0, [pc, #156]	@ (8021c20 <_printf_i+0x238>)
 8021b84:	e7e9      	b.n	8021b5a <_printf_i+0x172>
 8021b86:	6823      	ldr	r3, [r4, #0]
 8021b88:	f023 0320 	bic.w	r3, r3, #32
 8021b8c:	6023      	str	r3, [r4, #0]
 8021b8e:	e7f6      	b.n	8021b7e <_printf_i+0x196>
 8021b90:	4616      	mov	r6, r2
 8021b92:	e7bd      	b.n	8021b10 <_printf_i+0x128>
 8021b94:	6833      	ldr	r3, [r6, #0]
 8021b96:	6825      	ldr	r5, [r4, #0]
 8021b98:	6961      	ldr	r1, [r4, #20]
 8021b9a:	1d18      	adds	r0, r3, #4
 8021b9c:	6030      	str	r0, [r6, #0]
 8021b9e:	062e      	lsls	r6, r5, #24
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	d501      	bpl.n	8021ba8 <_printf_i+0x1c0>
 8021ba4:	6019      	str	r1, [r3, #0]
 8021ba6:	e002      	b.n	8021bae <_printf_i+0x1c6>
 8021ba8:	0668      	lsls	r0, r5, #25
 8021baa:	d5fb      	bpl.n	8021ba4 <_printf_i+0x1bc>
 8021bac:	8019      	strh	r1, [r3, #0]
 8021bae:	2300      	movs	r3, #0
 8021bb0:	6123      	str	r3, [r4, #16]
 8021bb2:	4616      	mov	r6, r2
 8021bb4:	e7bc      	b.n	8021b30 <_printf_i+0x148>
 8021bb6:	6833      	ldr	r3, [r6, #0]
 8021bb8:	1d1a      	adds	r2, r3, #4
 8021bba:	6032      	str	r2, [r6, #0]
 8021bbc:	681e      	ldr	r6, [r3, #0]
 8021bbe:	6862      	ldr	r2, [r4, #4]
 8021bc0:	2100      	movs	r1, #0
 8021bc2:	4630      	mov	r0, r6
 8021bc4:	f7de fb9c 	bl	8000300 <memchr>
 8021bc8:	b108      	cbz	r0, 8021bce <_printf_i+0x1e6>
 8021bca:	1b80      	subs	r0, r0, r6
 8021bcc:	6060      	str	r0, [r4, #4]
 8021bce:	6863      	ldr	r3, [r4, #4]
 8021bd0:	6123      	str	r3, [r4, #16]
 8021bd2:	2300      	movs	r3, #0
 8021bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021bd8:	e7aa      	b.n	8021b30 <_printf_i+0x148>
 8021bda:	6923      	ldr	r3, [r4, #16]
 8021bdc:	4632      	mov	r2, r6
 8021bde:	4649      	mov	r1, r9
 8021be0:	4640      	mov	r0, r8
 8021be2:	47d0      	blx	sl
 8021be4:	3001      	adds	r0, #1
 8021be6:	d0ad      	beq.n	8021b44 <_printf_i+0x15c>
 8021be8:	6823      	ldr	r3, [r4, #0]
 8021bea:	079b      	lsls	r3, r3, #30
 8021bec:	d413      	bmi.n	8021c16 <_printf_i+0x22e>
 8021bee:	68e0      	ldr	r0, [r4, #12]
 8021bf0:	9b03      	ldr	r3, [sp, #12]
 8021bf2:	4298      	cmp	r0, r3
 8021bf4:	bfb8      	it	lt
 8021bf6:	4618      	movlt	r0, r3
 8021bf8:	e7a6      	b.n	8021b48 <_printf_i+0x160>
 8021bfa:	2301      	movs	r3, #1
 8021bfc:	4632      	mov	r2, r6
 8021bfe:	4649      	mov	r1, r9
 8021c00:	4640      	mov	r0, r8
 8021c02:	47d0      	blx	sl
 8021c04:	3001      	adds	r0, #1
 8021c06:	d09d      	beq.n	8021b44 <_printf_i+0x15c>
 8021c08:	3501      	adds	r5, #1
 8021c0a:	68e3      	ldr	r3, [r4, #12]
 8021c0c:	9903      	ldr	r1, [sp, #12]
 8021c0e:	1a5b      	subs	r3, r3, r1
 8021c10:	42ab      	cmp	r3, r5
 8021c12:	dcf2      	bgt.n	8021bfa <_printf_i+0x212>
 8021c14:	e7eb      	b.n	8021bee <_printf_i+0x206>
 8021c16:	2500      	movs	r5, #0
 8021c18:	f104 0619 	add.w	r6, r4, #25
 8021c1c:	e7f5      	b.n	8021c0a <_printf_i+0x222>
 8021c1e:	bf00      	nop
 8021c20:	08028ce2 	.word	0x08028ce2
 8021c24:	08028cf3 	.word	0x08028cf3

08021c28 <std>:
 8021c28:	2300      	movs	r3, #0
 8021c2a:	b510      	push	{r4, lr}
 8021c2c:	4604      	mov	r4, r0
 8021c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8021c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021c36:	6083      	str	r3, [r0, #8]
 8021c38:	8181      	strh	r1, [r0, #12]
 8021c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8021c3c:	81c2      	strh	r2, [r0, #14]
 8021c3e:	6183      	str	r3, [r0, #24]
 8021c40:	4619      	mov	r1, r3
 8021c42:	2208      	movs	r2, #8
 8021c44:	305c      	adds	r0, #92	@ 0x5c
 8021c46:	f000 fa57 	bl	80220f8 <memset>
 8021c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8021c80 <std+0x58>)
 8021c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8021c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8021c84 <std+0x5c>)
 8021c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021c52:	4b0d      	ldr	r3, [pc, #52]	@ (8021c88 <std+0x60>)
 8021c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021c56:	4b0d      	ldr	r3, [pc, #52]	@ (8021c8c <std+0x64>)
 8021c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8021c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8021c90 <std+0x68>)
 8021c5c:	6224      	str	r4, [r4, #32]
 8021c5e:	429c      	cmp	r4, r3
 8021c60:	d006      	beq.n	8021c70 <std+0x48>
 8021c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021c66:	4294      	cmp	r4, r2
 8021c68:	d002      	beq.n	8021c70 <std+0x48>
 8021c6a:	33d0      	adds	r3, #208	@ 0xd0
 8021c6c:	429c      	cmp	r4, r3
 8021c6e:	d105      	bne.n	8021c7c <std+0x54>
 8021c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c78:	f000 bb36 	b.w	80222e8 <__retarget_lock_init_recursive>
 8021c7c:	bd10      	pop	{r4, pc}
 8021c7e:	bf00      	nop
 8021c80:	08021ef5 	.word	0x08021ef5
 8021c84:	08021f17 	.word	0x08021f17
 8021c88:	08021f4f 	.word	0x08021f4f
 8021c8c:	08021f73 	.word	0x08021f73
 8021c90:	2401270c 	.word	0x2401270c

08021c94 <stdio_exit_handler>:
 8021c94:	4a02      	ldr	r2, [pc, #8]	@ (8021ca0 <stdio_exit_handler+0xc>)
 8021c96:	4903      	ldr	r1, [pc, #12]	@ (8021ca4 <stdio_exit_handler+0x10>)
 8021c98:	4803      	ldr	r0, [pc, #12]	@ (8021ca8 <stdio_exit_handler+0x14>)
 8021c9a:	f000 b869 	b.w	8021d70 <_fwalk_sglue>
 8021c9e:	bf00      	nop
 8021ca0:	24000054 	.word	0x24000054
 8021ca4:	08023e45 	.word	0x08023e45
 8021ca8:	24000064 	.word	0x24000064

08021cac <cleanup_stdio>:
 8021cac:	6841      	ldr	r1, [r0, #4]
 8021cae:	4b0c      	ldr	r3, [pc, #48]	@ (8021ce0 <cleanup_stdio+0x34>)
 8021cb0:	4299      	cmp	r1, r3
 8021cb2:	b510      	push	{r4, lr}
 8021cb4:	4604      	mov	r4, r0
 8021cb6:	d001      	beq.n	8021cbc <cleanup_stdio+0x10>
 8021cb8:	f002 f8c4 	bl	8023e44 <_fflush_r>
 8021cbc:	68a1      	ldr	r1, [r4, #8]
 8021cbe:	4b09      	ldr	r3, [pc, #36]	@ (8021ce4 <cleanup_stdio+0x38>)
 8021cc0:	4299      	cmp	r1, r3
 8021cc2:	d002      	beq.n	8021cca <cleanup_stdio+0x1e>
 8021cc4:	4620      	mov	r0, r4
 8021cc6:	f002 f8bd 	bl	8023e44 <_fflush_r>
 8021cca:	68e1      	ldr	r1, [r4, #12]
 8021ccc:	4b06      	ldr	r3, [pc, #24]	@ (8021ce8 <cleanup_stdio+0x3c>)
 8021cce:	4299      	cmp	r1, r3
 8021cd0:	d004      	beq.n	8021cdc <cleanup_stdio+0x30>
 8021cd2:	4620      	mov	r0, r4
 8021cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cd8:	f002 b8b4 	b.w	8023e44 <_fflush_r>
 8021cdc:	bd10      	pop	{r4, pc}
 8021cde:	bf00      	nop
 8021ce0:	2401270c 	.word	0x2401270c
 8021ce4:	24012774 	.word	0x24012774
 8021ce8:	240127dc 	.word	0x240127dc

08021cec <global_stdio_init.part.0>:
 8021cec:	b510      	push	{r4, lr}
 8021cee:	4b0b      	ldr	r3, [pc, #44]	@ (8021d1c <global_stdio_init.part.0+0x30>)
 8021cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8021d20 <global_stdio_init.part.0+0x34>)
 8021cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8021d24 <global_stdio_init.part.0+0x38>)
 8021cf4:	601a      	str	r2, [r3, #0]
 8021cf6:	4620      	mov	r0, r4
 8021cf8:	2200      	movs	r2, #0
 8021cfa:	2104      	movs	r1, #4
 8021cfc:	f7ff ff94 	bl	8021c28 <std>
 8021d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021d04:	2201      	movs	r2, #1
 8021d06:	2109      	movs	r1, #9
 8021d08:	f7ff ff8e 	bl	8021c28 <std>
 8021d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021d10:	2202      	movs	r2, #2
 8021d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d16:	2112      	movs	r1, #18
 8021d18:	f7ff bf86 	b.w	8021c28 <std>
 8021d1c:	24012844 	.word	0x24012844
 8021d20:	2401270c 	.word	0x2401270c
 8021d24:	08021c95 	.word	0x08021c95

08021d28 <__sfp_lock_acquire>:
 8021d28:	4801      	ldr	r0, [pc, #4]	@ (8021d30 <__sfp_lock_acquire+0x8>)
 8021d2a:	f000 bade 	b.w	80222ea <__retarget_lock_acquire_recursive>
 8021d2e:	bf00      	nop
 8021d30:	2401284d 	.word	0x2401284d

08021d34 <__sfp_lock_release>:
 8021d34:	4801      	ldr	r0, [pc, #4]	@ (8021d3c <__sfp_lock_release+0x8>)
 8021d36:	f000 bad9 	b.w	80222ec <__retarget_lock_release_recursive>
 8021d3a:	bf00      	nop
 8021d3c:	2401284d 	.word	0x2401284d

08021d40 <__sinit>:
 8021d40:	b510      	push	{r4, lr}
 8021d42:	4604      	mov	r4, r0
 8021d44:	f7ff fff0 	bl	8021d28 <__sfp_lock_acquire>
 8021d48:	6a23      	ldr	r3, [r4, #32]
 8021d4a:	b11b      	cbz	r3, 8021d54 <__sinit+0x14>
 8021d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d50:	f7ff bff0 	b.w	8021d34 <__sfp_lock_release>
 8021d54:	4b04      	ldr	r3, [pc, #16]	@ (8021d68 <__sinit+0x28>)
 8021d56:	6223      	str	r3, [r4, #32]
 8021d58:	4b04      	ldr	r3, [pc, #16]	@ (8021d6c <__sinit+0x2c>)
 8021d5a:	681b      	ldr	r3, [r3, #0]
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	d1f5      	bne.n	8021d4c <__sinit+0xc>
 8021d60:	f7ff ffc4 	bl	8021cec <global_stdio_init.part.0>
 8021d64:	e7f2      	b.n	8021d4c <__sinit+0xc>
 8021d66:	bf00      	nop
 8021d68:	08021cad 	.word	0x08021cad
 8021d6c:	24012844 	.word	0x24012844

08021d70 <_fwalk_sglue>:
 8021d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d74:	4607      	mov	r7, r0
 8021d76:	4688      	mov	r8, r1
 8021d78:	4614      	mov	r4, r2
 8021d7a:	2600      	movs	r6, #0
 8021d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021d80:	f1b9 0901 	subs.w	r9, r9, #1
 8021d84:	d505      	bpl.n	8021d92 <_fwalk_sglue+0x22>
 8021d86:	6824      	ldr	r4, [r4, #0]
 8021d88:	2c00      	cmp	r4, #0
 8021d8a:	d1f7      	bne.n	8021d7c <_fwalk_sglue+0xc>
 8021d8c:	4630      	mov	r0, r6
 8021d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d92:	89ab      	ldrh	r3, [r5, #12]
 8021d94:	2b01      	cmp	r3, #1
 8021d96:	d907      	bls.n	8021da8 <_fwalk_sglue+0x38>
 8021d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021d9c:	3301      	adds	r3, #1
 8021d9e:	d003      	beq.n	8021da8 <_fwalk_sglue+0x38>
 8021da0:	4629      	mov	r1, r5
 8021da2:	4638      	mov	r0, r7
 8021da4:	47c0      	blx	r8
 8021da6:	4306      	orrs	r6, r0
 8021da8:	3568      	adds	r5, #104	@ 0x68
 8021daa:	e7e9      	b.n	8021d80 <_fwalk_sglue+0x10>

08021dac <iprintf>:
 8021dac:	b40f      	push	{r0, r1, r2, r3}
 8021dae:	b507      	push	{r0, r1, r2, lr}
 8021db0:	4906      	ldr	r1, [pc, #24]	@ (8021dcc <iprintf+0x20>)
 8021db2:	ab04      	add	r3, sp, #16
 8021db4:	6808      	ldr	r0, [r1, #0]
 8021db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dba:	6881      	ldr	r1, [r0, #8]
 8021dbc:	9301      	str	r3, [sp, #4]
 8021dbe:	f001 fea5 	bl	8023b0c <_vfiprintf_r>
 8021dc2:	b003      	add	sp, #12
 8021dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021dc8:	b004      	add	sp, #16
 8021dca:	4770      	bx	lr
 8021dcc:	24000060 	.word	0x24000060

08021dd0 <_puts_r>:
 8021dd0:	6a03      	ldr	r3, [r0, #32]
 8021dd2:	b570      	push	{r4, r5, r6, lr}
 8021dd4:	6884      	ldr	r4, [r0, #8]
 8021dd6:	4605      	mov	r5, r0
 8021dd8:	460e      	mov	r6, r1
 8021dda:	b90b      	cbnz	r3, 8021de0 <_puts_r+0x10>
 8021ddc:	f7ff ffb0 	bl	8021d40 <__sinit>
 8021de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021de2:	07db      	lsls	r3, r3, #31
 8021de4:	d405      	bmi.n	8021df2 <_puts_r+0x22>
 8021de6:	89a3      	ldrh	r3, [r4, #12]
 8021de8:	0598      	lsls	r0, r3, #22
 8021dea:	d402      	bmi.n	8021df2 <_puts_r+0x22>
 8021dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021dee:	f000 fa7c 	bl	80222ea <__retarget_lock_acquire_recursive>
 8021df2:	89a3      	ldrh	r3, [r4, #12]
 8021df4:	0719      	lsls	r1, r3, #28
 8021df6:	d502      	bpl.n	8021dfe <_puts_r+0x2e>
 8021df8:	6923      	ldr	r3, [r4, #16]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d135      	bne.n	8021e6a <_puts_r+0x9a>
 8021dfe:	4621      	mov	r1, r4
 8021e00:	4628      	mov	r0, r5
 8021e02:	f000 f8f9 	bl	8021ff8 <__swsetup_r>
 8021e06:	b380      	cbz	r0, 8021e6a <_puts_r+0x9a>
 8021e08:	f04f 35ff 	mov.w	r5, #4294967295
 8021e0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021e0e:	07da      	lsls	r2, r3, #31
 8021e10:	d405      	bmi.n	8021e1e <_puts_r+0x4e>
 8021e12:	89a3      	ldrh	r3, [r4, #12]
 8021e14:	059b      	lsls	r3, r3, #22
 8021e16:	d402      	bmi.n	8021e1e <_puts_r+0x4e>
 8021e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021e1a:	f000 fa67 	bl	80222ec <__retarget_lock_release_recursive>
 8021e1e:	4628      	mov	r0, r5
 8021e20:	bd70      	pop	{r4, r5, r6, pc}
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	da04      	bge.n	8021e30 <_puts_r+0x60>
 8021e26:	69a2      	ldr	r2, [r4, #24]
 8021e28:	429a      	cmp	r2, r3
 8021e2a:	dc17      	bgt.n	8021e5c <_puts_r+0x8c>
 8021e2c:	290a      	cmp	r1, #10
 8021e2e:	d015      	beq.n	8021e5c <_puts_r+0x8c>
 8021e30:	6823      	ldr	r3, [r4, #0]
 8021e32:	1c5a      	adds	r2, r3, #1
 8021e34:	6022      	str	r2, [r4, #0]
 8021e36:	7019      	strb	r1, [r3, #0]
 8021e38:	68a3      	ldr	r3, [r4, #8]
 8021e3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021e3e:	3b01      	subs	r3, #1
 8021e40:	60a3      	str	r3, [r4, #8]
 8021e42:	2900      	cmp	r1, #0
 8021e44:	d1ed      	bne.n	8021e22 <_puts_r+0x52>
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	da11      	bge.n	8021e6e <_puts_r+0x9e>
 8021e4a:	4622      	mov	r2, r4
 8021e4c:	210a      	movs	r1, #10
 8021e4e:	4628      	mov	r0, r5
 8021e50:	f000 f893 	bl	8021f7a <__swbuf_r>
 8021e54:	3001      	adds	r0, #1
 8021e56:	d0d7      	beq.n	8021e08 <_puts_r+0x38>
 8021e58:	250a      	movs	r5, #10
 8021e5a:	e7d7      	b.n	8021e0c <_puts_r+0x3c>
 8021e5c:	4622      	mov	r2, r4
 8021e5e:	4628      	mov	r0, r5
 8021e60:	f000 f88b 	bl	8021f7a <__swbuf_r>
 8021e64:	3001      	adds	r0, #1
 8021e66:	d1e7      	bne.n	8021e38 <_puts_r+0x68>
 8021e68:	e7ce      	b.n	8021e08 <_puts_r+0x38>
 8021e6a:	3e01      	subs	r6, #1
 8021e6c:	e7e4      	b.n	8021e38 <_puts_r+0x68>
 8021e6e:	6823      	ldr	r3, [r4, #0]
 8021e70:	1c5a      	adds	r2, r3, #1
 8021e72:	6022      	str	r2, [r4, #0]
 8021e74:	220a      	movs	r2, #10
 8021e76:	701a      	strb	r2, [r3, #0]
 8021e78:	e7ee      	b.n	8021e58 <_puts_r+0x88>
	...

08021e7c <puts>:
 8021e7c:	4b02      	ldr	r3, [pc, #8]	@ (8021e88 <puts+0xc>)
 8021e7e:	4601      	mov	r1, r0
 8021e80:	6818      	ldr	r0, [r3, #0]
 8021e82:	f7ff bfa5 	b.w	8021dd0 <_puts_r>
 8021e86:	bf00      	nop
 8021e88:	24000060 	.word	0x24000060

08021e8c <sniprintf>:
 8021e8c:	b40c      	push	{r2, r3}
 8021e8e:	b530      	push	{r4, r5, lr}
 8021e90:	4b17      	ldr	r3, [pc, #92]	@ (8021ef0 <sniprintf+0x64>)
 8021e92:	1e0c      	subs	r4, r1, #0
 8021e94:	681d      	ldr	r5, [r3, #0]
 8021e96:	b09d      	sub	sp, #116	@ 0x74
 8021e98:	da08      	bge.n	8021eac <sniprintf+0x20>
 8021e9a:	238b      	movs	r3, #139	@ 0x8b
 8021e9c:	602b      	str	r3, [r5, #0]
 8021e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8021ea2:	b01d      	add	sp, #116	@ 0x74
 8021ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021ea8:	b002      	add	sp, #8
 8021eaa:	4770      	bx	lr
 8021eac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021eb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021eb4:	bf14      	ite	ne
 8021eb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021eba:	4623      	moveq	r3, r4
 8021ebc:	9304      	str	r3, [sp, #16]
 8021ebe:	9307      	str	r3, [sp, #28]
 8021ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021ec4:	9002      	str	r0, [sp, #8]
 8021ec6:	9006      	str	r0, [sp, #24]
 8021ec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021ecc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021ece:	ab21      	add	r3, sp, #132	@ 0x84
 8021ed0:	a902      	add	r1, sp, #8
 8021ed2:	4628      	mov	r0, r5
 8021ed4:	9301      	str	r3, [sp, #4]
 8021ed6:	f001 fcf3 	bl	80238c0 <_svfiprintf_r>
 8021eda:	1c43      	adds	r3, r0, #1
 8021edc:	bfbc      	itt	lt
 8021ede:	238b      	movlt	r3, #139	@ 0x8b
 8021ee0:	602b      	strlt	r3, [r5, #0]
 8021ee2:	2c00      	cmp	r4, #0
 8021ee4:	d0dd      	beq.n	8021ea2 <sniprintf+0x16>
 8021ee6:	9b02      	ldr	r3, [sp, #8]
 8021ee8:	2200      	movs	r2, #0
 8021eea:	701a      	strb	r2, [r3, #0]
 8021eec:	e7d9      	b.n	8021ea2 <sniprintf+0x16>
 8021eee:	bf00      	nop
 8021ef0:	24000060 	.word	0x24000060

08021ef4 <__sread>:
 8021ef4:	b510      	push	{r4, lr}
 8021ef6:	460c      	mov	r4, r1
 8021ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021efc:	f000 f9a6 	bl	802224c <_read_r>
 8021f00:	2800      	cmp	r0, #0
 8021f02:	bfab      	itete	ge
 8021f04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021f06:	89a3      	ldrhlt	r3, [r4, #12]
 8021f08:	181b      	addge	r3, r3, r0
 8021f0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021f0e:	bfac      	ite	ge
 8021f10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021f12:	81a3      	strhlt	r3, [r4, #12]
 8021f14:	bd10      	pop	{r4, pc}

08021f16 <__swrite>:
 8021f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f1a:	461f      	mov	r7, r3
 8021f1c:	898b      	ldrh	r3, [r1, #12]
 8021f1e:	05db      	lsls	r3, r3, #23
 8021f20:	4605      	mov	r5, r0
 8021f22:	460c      	mov	r4, r1
 8021f24:	4616      	mov	r6, r2
 8021f26:	d505      	bpl.n	8021f34 <__swrite+0x1e>
 8021f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f2c:	2302      	movs	r3, #2
 8021f2e:	2200      	movs	r2, #0
 8021f30:	f000 f97a 	bl	8022228 <_lseek_r>
 8021f34:	89a3      	ldrh	r3, [r4, #12]
 8021f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021f3e:	81a3      	strh	r3, [r4, #12]
 8021f40:	4632      	mov	r2, r6
 8021f42:	463b      	mov	r3, r7
 8021f44:	4628      	mov	r0, r5
 8021f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f4a:	f000 b991 	b.w	8022270 <_write_r>

08021f4e <__sseek>:
 8021f4e:	b510      	push	{r4, lr}
 8021f50:	460c      	mov	r4, r1
 8021f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f56:	f000 f967 	bl	8022228 <_lseek_r>
 8021f5a:	1c43      	adds	r3, r0, #1
 8021f5c:	89a3      	ldrh	r3, [r4, #12]
 8021f5e:	bf15      	itete	ne
 8021f60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021f62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021f66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021f6a:	81a3      	strheq	r3, [r4, #12]
 8021f6c:	bf18      	it	ne
 8021f6e:	81a3      	strhne	r3, [r4, #12]
 8021f70:	bd10      	pop	{r4, pc}

08021f72 <__sclose>:
 8021f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f76:	f000 b8f1 	b.w	802215c <_close_r>

08021f7a <__swbuf_r>:
 8021f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f7c:	460e      	mov	r6, r1
 8021f7e:	4614      	mov	r4, r2
 8021f80:	4605      	mov	r5, r0
 8021f82:	b118      	cbz	r0, 8021f8c <__swbuf_r+0x12>
 8021f84:	6a03      	ldr	r3, [r0, #32]
 8021f86:	b90b      	cbnz	r3, 8021f8c <__swbuf_r+0x12>
 8021f88:	f7ff feda 	bl	8021d40 <__sinit>
 8021f8c:	69a3      	ldr	r3, [r4, #24]
 8021f8e:	60a3      	str	r3, [r4, #8]
 8021f90:	89a3      	ldrh	r3, [r4, #12]
 8021f92:	071a      	lsls	r2, r3, #28
 8021f94:	d501      	bpl.n	8021f9a <__swbuf_r+0x20>
 8021f96:	6923      	ldr	r3, [r4, #16]
 8021f98:	b943      	cbnz	r3, 8021fac <__swbuf_r+0x32>
 8021f9a:	4621      	mov	r1, r4
 8021f9c:	4628      	mov	r0, r5
 8021f9e:	f000 f82b 	bl	8021ff8 <__swsetup_r>
 8021fa2:	b118      	cbz	r0, 8021fac <__swbuf_r+0x32>
 8021fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8021fa8:	4638      	mov	r0, r7
 8021faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021fac:	6823      	ldr	r3, [r4, #0]
 8021fae:	6922      	ldr	r2, [r4, #16]
 8021fb0:	1a98      	subs	r0, r3, r2
 8021fb2:	6963      	ldr	r3, [r4, #20]
 8021fb4:	b2f6      	uxtb	r6, r6
 8021fb6:	4283      	cmp	r3, r0
 8021fb8:	4637      	mov	r7, r6
 8021fba:	dc05      	bgt.n	8021fc8 <__swbuf_r+0x4e>
 8021fbc:	4621      	mov	r1, r4
 8021fbe:	4628      	mov	r0, r5
 8021fc0:	f001 ff40 	bl	8023e44 <_fflush_r>
 8021fc4:	2800      	cmp	r0, #0
 8021fc6:	d1ed      	bne.n	8021fa4 <__swbuf_r+0x2a>
 8021fc8:	68a3      	ldr	r3, [r4, #8]
 8021fca:	3b01      	subs	r3, #1
 8021fcc:	60a3      	str	r3, [r4, #8]
 8021fce:	6823      	ldr	r3, [r4, #0]
 8021fd0:	1c5a      	adds	r2, r3, #1
 8021fd2:	6022      	str	r2, [r4, #0]
 8021fd4:	701e      	strb	r6, [r3, #0]
 8021fd6:	6962      	ldr	r2, [r4, #20]
 8021fd8:	1c43      	adds	r3, r0, #1
 8021fda:	429a      	cmp	r2, r3
 8021fdc:	d004      	beq.n	8021fe8 <__swbuf_r+0x6e>
 8021fde:	89a3      	ldrh	r3, [r4, #12]
 8021fe0:	07db      	lsls	r3, r3, #31
 8021fe2:	d5e1      	bpl.n	8021fa8 <__swbuf_r+0x2e>
 8021fe4:	2e0a      	cmp	r6, #10
 8021fe6:	d1df      	bne.n	8021fa8 <__swbuf_r+0x2e>
 8021fe8:	4621      	mov	r1, r4
 8021fea:	4628      	mov	r0, r5
 8021fec:	f001 ff2a 	bl	8023e44 <_fflush_r>
 8021ff0:	2800      	cmp	r0, #0
 8021ff2:	d0d9      	beq.n	8021fa8 <__swbuf_r+0x2e>
 8021ff4:	e7d6      	b.n	8021fa4 <__swbuf_r+0x2a>
	...

08021ff8 <__swsetup_r>:
 8021ff8:	b538      	push	{r3, r4, r5, lr}
 8021ffa:	4b29      	ldr	r3, [pc, #164]	@ (80220a0 <__swsetup_r+0xa8>)
 8021ffc:	4605      	mov	r5, r0
 8021ffe:	6818      	ldr	r0, [r3, #0]
 8022000:	460c      	mov	r4, r1
 8022002:	b118      	cbz	r0, 802200c <__swsetup_r+0x14>
 8022004:	6a03      	ldr	r3, [r0, #32]
 8022006:	b90b      	cbnz	r3, 802200c <__swsetup_r+0x14>
 8022008:	f7ff fe9a 	bl	8021d40 <__sinit>
 802200c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022010:	0719      	lsls	r1, r3, #28
 8022012:	d422      	bmi.n	802205a <__swsetup_r+0x62>
 8022014:	06da      	lsls	r2, r3, #27
 8022016:	d407      	bmi.n	8022028 <__swsetup_r+0x30>
 8022018:	2209      	movs	r2, #9
 802201a:	602a      	str	r2, [r5, #0]
 802201c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022020:	81a3      	strh	r3, [r4, #12]
 8022022:	f04f 30ff 	mov.w	r0, #4294967295
 8022026:	e033      	b.n	8022090 <__swsetup_r+0x98>
 8022028:	0758      	lsls	r0, r3, #29
 802202a:	d512      	bpl.n	8022052 <__swsetup_r+0x5a>
 802202c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802202e:	b141      	cbz	r1, 8022042 <__swsetup_r+0x4a>
 8022030:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022034:	4299      	cmp	r1, r3
 8022036:	d002      	beq.n	802203e <__swsetup_r+0x46>
 8022038:	4628      	mov	r0, r5
 802203a:	f000 ff63 	bl	8022f04 <_free_r>
 802203e:	2300      	movs	r3, #0
 8022040:	6363      	str	r3, [r4, #52]	@ 0x34
 8022042:	89a3      	ldrh	r3, [r4, #12]
 8022044:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022048:	81a3      	strh	r3, [r4, #12]
 802204a:	2300      	movs	r3, #0
 802204c:	6063      	str	r3, [r4, #4]
 802204e:	6923      	ldr	r3, [r4, #16]
 8022050:	6023      	str	r3, [r4, #0]
 8022052:	89a3      	ldrh	r3, [r4, #12]
 8022054:	f043 0308 	orr.w	r3, r3, #8
 8022058:	81a3      	strh	r3, [r4, #12]
 802205a:	6923      	ldr	r3, [r4, #16]
 802205c:	b94b      	cbnz	r3, 8022072 <__swsetup_r+0x7a>
 802205e:	89a3      	ldrh	r3, [r4, #12]
 8022060:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022068:	d003      	beq.n	8022072 <__swsetup_r+0x7a>
 802206a:	4621      	mov	r1, r4
 802206c:	4628      	mov	r0, r5
 802206e:	f001 ff49 	bl	8023f04 <__smakebuf_r>
 8022072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022076:	f013 0201 	ands.w	r2, r3, #1
 802207a:	d00a      	beq.n	8022092 <__swsetup_r+0x9a>
 802207c:	2200      	movs	r2, #0
 802207e:	60a2      	str	r2, [r4, #8]
 8022080:	6962      	ldr	r2, [r4, #20]
 8022082:	4252      	negs	r2, r2
 8022084:	61a2      	str	r2, [r4, #24]
 8022086:	6922      	ldr	r2, [r4, #16]
 8022088:	b942      	cbnz	r2, 802209c <__swsetup_r+0xa4>
 802208a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802208e:	d1c5      	bne.n	802201c <__swsetup_r+0x24>
 8022090:	bd38      	pop	{r3, r4, r5, pc}
 8022092:	0799      	lsls	r1, r3, #30
 8022094:	bf58      	it	pl
 8022096:	6962      	ldrpl	r2, [r4, #20]
 8022098:	60a2      	str	r2, [r4, #8]
 802209a:	e7f4      	b.n	8022086 <__swsetup_r+0x8e>
 802209c:	2000      	movs	r0, #0
 802209e:	e7f7      	b.n	8022090 <__swsetup_r+0x98>
 80220a0:	24000060 	.word	0x24000060

080220a4 <memcmp>:
 80220a4:	b510      	push	{r4, lr}
 80220a6:	3901      	subs	r1, #1
 80220a8:	4402      	add	r2, r0
 80220aa:	4290      	cmp	r0, r2
 80220ac:	d101      	bne.n	80220b2 <memcmp+0xe>
 80220ae:	2000      	movs	r0, #0
 80220b0:	e005      	b.n	80220be <memcmp+0x1a>
 80220b2:	7803      	ldrb	r3, [r0, #0]
 80220b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80220b8:	42a3      	cmp	r3, r4
 80220ba:	d001      	beq.n	80220c0 <memcmp+0x1c>
 80220bc:	1b18      	subs	r0, r3, r4
 80220be:	bd10      	pop	{r4, pc}
 80220c0:	3001      	adds	r0, #1
 80220c2:	e7f2      	b.n	80220aa <memcmp+0x6>

080220c4 <memmove>:
 80220c4:	4288      	cmp	r0, r1
 80220c6:	b510      	push	{r4, lr}
 80220c8:	eb01 0402 	add.w	r4, r1, r2
 80220cc:	d902      	bls.n	80220d4 <memmove+0x10>
 80220ce:	4284      	cmp	r4, r0
 80220d0:	4623      	mov	r3, r4
 80220d2:	d807      	bhi.n	80220e4 <memmove+0x20>
 80220d4:	1e43      	subs	r3, r0, #1
 80220d6:	42a1      	cmp	r1, r4
 80220d8:	d008      	beq.n	80220ec <memmove+0x28>
 80220da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80220de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80220e2:	e7f8      	b.n	80220d6 <memmove+0x12>
 80220e4:	4402      	add	r2, r0
 80220e6:	4601      	mov	r1, r0
 80220e8:	428a      	cmp	r2, r1
 80220ea:	d100      	bne.n	80220ee <memmove+0x2a>
 80220ec:	bd10      	pop	{r4, pc}
 80220ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80220f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80220f6:	e7f7      	b.n	80220e8 <memmove+0x24>

080220f8 <memset>:
 80220f8:	4402      	add	r2, r0
 80220fa:	4603      	mov	r3, r0
 80220fc:	4293      	cmp	r3, r2
 80220fe:	d100      	bne.n	8022102 <memset+0xa>
 8022100:	4770      	bx	lr
 8022102:	f803 1b01 	strb.w	r1, [r3], #1
 8022106:	e7f9      	b.n	80220fc <memset+0x4>

08022108 <strncmp>:
 8022108:	b510      	push	{r4, lr}
 802210a:	b16a      	cbz	r2, 8022128 <strncmp+0x20>
 802210c:	3901      	subs	r1, #1
 802210e:	1884      	adds	r4, r0, r2
 8022110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022114:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022118:	429a      	cmp	r2, r3
 802211a:	d103      	bne.n	8022124 <strncmp+0x1c>
 802211c:	42a0      	cmp	r0, r4
 802211e:	d001      	beq.n	8022124 <strncmp+0x1c>
 8022120:	2a00      	cmp	r2, #0
 8022122:	d1f5      	bne.n	8022110 <strncmp+0x8>
 8022124:	1ad0      	subs	r0, r2, r3
 8022126:	bd10      	pop	{r4, pc}
 8022128:	4610      	mov	r0, r2
 802212a:	e7fc      	b.n	8022126 <strncmp+0x1e>

0802212c <strncpy>:
 802212c:	b510      	push	{r4, lr}
 802212e:	3901      	subs	r1, #1
 8022130:	4603      	mov	r3, r0
 8022132:	b132      	cbz	r2, 8022142 <strncpy+0x16>
 8022134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022138:	f803 4b01 	strb.w	r4, [r3], #1
 802213c:	3a01      	subs	r2, #1
 802213e:	2c00      	cmp	r4, #0
 8022140:	d1f7      	bne.n	8022132 <strncpy+0x6>
 8022142:	441a      	add	r2, r3
 8022144:	2100      	movs	r1, #0
 8022146:	4293      	cmp	r3, r2
 8022148:	d100      	bne.n	802214c <strncpy+0x20>
 802214a:	bd10      	pop	{r4, pc}
 802214c:	f803 1b01 	strb.w	r1, [r3], #1
 8022150:	e7f9      	b.n	8022146 <strncpy+0x1a>
	...

08022154 <_localeconv_r>:
 8022154:	4800      	ldr	r0, [pc, #0]	@ (8022158 <_localeconv_r+0x4>)
 8022156:	4770      	bx	lr
 8022158:	240001a0 	.word	0x240001a0

0802215c <_close_r>:
 802215c:	b538      	push	{r3, r4, r5, lr}
 802215e:	4d06      	ldr	r5, [pc, #24]	@ (8022178 <_close_r+0x1c>)
 8022160:	2300      	movs	r3, #0
 8022162:	4604      	mov	r4, r0
 8022164:	4608      	mov	r0, r1
 8022166:	602b      	str	r3, [r5, #0]
 8022168:	f7e0 f904 	bl	8002374 <_close>
 802216c:	1c43      	adds	r3, r0, #1
 802216e:	d102      	bne.n	8022176 <_close_r+0x1a>
 8022170:	682b      	ldr	r3, [r5, #0]
 8022172:	b103      	cbz	r3, 8022176 <_close_r+0x1a>
 8022174:	6023      	str	r3, [r4, #0]
 8022176:	bd38      	pop	{r3, r4, r5, pc}
 8022178:	24012848 	.word	0x24012848

0802217c <_reclaim_reent>:
 802217c:	4b29      	ldr	r3, [pc, #164]	@ (8022224 <_reclaim_reent+0xa8>)
 802217e:	681b      	ldr	r3, [r3, #0]
 8022180:	4283      	cmp	r3, r0
 8022182:	b570      	push	{r4, r5, r6, lr}
 8022184:	4604      	mov	r4, r0
 8022186:	d04b      	beq.n	8022220 <_reclaim_reent+0xa4>
 8022188:	69c3      	ldr	r3, [r0, #28]
 802218a:	b1ab      	cbz	r3, 80221b8 <_reclaim_reent+0x3c>
 802218c:	68db      	ldr	r3, [r3, #12]
 802218e:	b16b      	cbz	r3, 80221ac <_reclaim_reent+0x30>
 8022190:	2500      	movs	r5, #0
 8022192:	69e3      	ldr	r3, [r4, #28]
 8022194:	68db      	ldr	r3, [r3, #12]
 8022196:	5959      	ldr	r1, [r3, r5]
 8022198:	2900      	cmp	r1, #0
 802219a:	d13b      	bne.n	8022214 <_reclaim_reent+0x98>
 802219c:	3504      	adds	r5, #4
 802219e:	2d80      	cmp	r5, #128	@ 0x80
 80221a0:	d1f7      	bne.n	8022192 <_reclaim_reent+0x16>
 80221a2:	69e3      	ldr	r3, [r4, #28]
 80221a4:	4620      	mov	r0, r4
 80221a6:	68d9      	ldr	r1, [r3, #12]
 80221a8:	f000 feac 	bl	8022f04 <_free_r>
 80221ac:	69e3      	ldr	r3, [r4, #28]
 80221ae:	6819      	ldr	r1, [r3, #0]
 80221b0:	b111      	cbz	r1, 80221b8 <_reclaim_reent+0x3c>
 80221b2:	4620      	mov	r0, r4
 80221b4:	f000 fea6 	bl	8022f04 <_free_r>
 80221b8:	6961      	ldr	r1, [r4, #20]
 80221ba:	b111      	cbz	r1, 80221c2 <_reclaim_reent+0x46>
 80221bc:	4620      	mov	r0, r4
 80221be:	f000 fea1 	bl	8022f04 <_free_r>
 80221c2:	69e1      	ldr	r1, [r4, #28]
 80221c4:	b111      	cbz	r1, 80221cc <_reclaim_reent+0x50>
 80221c6:	4620      	mov	r0, r4
 80221c8:	f000 fe9c 	bl	8022f04 <_free_r>
 80221cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80221ce:	b111      	cbz	r1, 80221d6 <_reclaim_reent+0x5a>
 80221d0:	4620      	mov	r0, r4
 80221d2:	f000 fe97 	bl	8022f04 <_free_r>
 80221d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80221d8:	b111      	cbz	r1, 80221e0 <_reclaim_reent+0x64>
 80221da:	4620      	mov	r0, r4
 80221dc:	f000 fe92 	bl	8022f04 <_free_r>
 80221e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80221e2:	b111      	cbz	r1, 80221ea <_reclaim_reent+0x6e>
 80221e4:	4620      	mov	r0, r4
 80221e6:	f000 fe8d 	bl	8022f04 <_free_r>
 80221ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80221ec:	b111      	cbz	r1, 80221f4 <_reclaim_reent+0x78>
 80221ee:	4620      	mov	r0, r4
 80221f0:	f000 fe88 	bl	8022f04 <_free_r>
 80221f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80221f6:	b111      	cbz	r1, 80221fe <_reclaim_reent+0x82>
 80221f8:	4620      	mov	r0, r4
 80221fa:	f000 fe83 	bl	8022f04 <_free_r>
 80221fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022200:	b111      	cbz	r1, 8022208 <_reclaim_reent+0x8c>
 8022202:	4620      	mov	r0, r4
 8022204:	f000 fe7e 	bl	8022f04 <_free_r>
 8022208:	6a23      	ldr	r3, [r4, #32]
 802220a:	b14b      	cbz	r3, 8022220 <_reclaim_reent+0xa4>
 802220c:	4620      	mov	r0, r4
 802220e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022212:	4718      	bx	r3
 8022214:	680e      	ldr	r6, [r1, #0]
 8022216:	4620      	mov	r0, r4
 8022218:	f000 fe74 	bl	8022f04 <_free_r>
 802221c:	4631      	mov	r1, r6
 802221e:	e7bb      	b.n	8022198 <_reclaim_reent+0x1c>
 8022220:	bd70      	pop	{r4, r5, r6, pc}
 8022222:	bf00      	nop
 8022224:	24000060 	.word	0x24000060

08022228 <_lseek_r>:
 8022228:	b538      	push	{r3, r4, r5, lr}
 802222a:	4d07      	ldr	r5, [pc, #28]	@ (8022248 <_lseek_r+0x20>)
 802222c:	4604      	mov	r4, r0
 802222e:	4608      	mov	r0, r1
 8022230:	4611      	mov	r1, r2
 8022232:	2200      	movs	r2, #0
 8022234:	602a      	str	r2, [r5, #0]
 8022236:	461a      	mov	r2, r3
 8022238:	f7e0 f8c3 	bl	80023c2 <_lseek>
 802223c:	1c43      	adds	r3, r0, #1
 802223e:	d102      	bne.n	8022246 <_lseek_r+0x1e>
 8022240:	682b      	ldr	r3, [r5, #0]
 8022242:	b103      	cbz	r3, 8022246 <_lseek_r+0x1e>
 8022244:	6023      	str	r3, [r4, #0]
 8022246:	bd38      	pop	{r3, r4, r5, pc}
 8022248:	24012848 	.word	0x24012848

0802224c <_read_r>:
 802224c:	b538      	push	{r3, r4, r5, lr}
 802224e:	4d07      	ldr	r5, [pc, #28]	@ (802226c <_read_r+0x20>)
 8022250:	4604      	mov	r4, r0
 8022252:	4608      	mov	r0, r1
 8022254:	4611      	mov	r1, r2
 8022256:	2200      	movs	r2, #0
 8022258:	602a      	str	r2, [r5, #0]
 802225a:	461a      	mov	r2, r3
 802225c:	f7e0 f86d 	bl	800233a <_read>
 8022260:	1c43      	adds	r3, r0, #1
 8022262:	d102      	bne.n	802226a <_read_r+0x1e>
 8022264:	682b      	ldr	r3, [r5, #0]
 8022266:	b103      	cbz	r3, 802226a <_read_r+0x1e>
 8022268:	6023      	str	r3, [r4, #0]
 802226a:	bd38      	pop	{r3, r4, r5, pc}
 802226c:	24012848 	.word	0x24012848

08022270 <_write_r>:
 8022270:	b538      	push	{r3, r4, r5, lr}
 8022272:	4d07      	ldr	r5, [pc, #28]	@ (8022290 <_write_r+0x20>)
 8022274:	4604      	mov	r4, r0
 8022276:	4608      	mov	r0, r1
 8022278:	4611      	mov	r1, r2
 802227a:	2200      	movs	r2, #0
 802227c:	602a      	str	r2, [r5, #0]
 802227e:	461a      	mov	r2, r3
 8022280:	f7de ffc3 	bl	800120a <_write>
 8022284:	1c43      	adds	r3, r0, #1
 8022286:	d102      	bne.n	802228e <_write_r+0x1e>
 8022288:	682b      	ldr	r3, [r5, #0]
 802228a:	b103      	cbz	r3, 802228e <_write_r+0x1e>
 802228c:	6023      	str	r3, [r4, #0]
 802228e:	bd38      	pop	{r3, r4, r5, pc}
 8022290:	24012848 	.word	0x24012848

08022294 <__errno>:
 8022294:	4b01      	ldr	r3, [pc, #4]	@ (802229c <__errno+0x8>)
 8022296:	6818      	ldr	r0, [r3, #0]
 8022298:	4770      	bx	lr
 802229a:	bf00      	nop
 802229c:	24000060 	.word	0x24000060

080222a0 <__libc_init_array>:
 80222a0:	b570      	push	{r4, r5, r6, lr}
 80222a2:	4d0d      	ldr	r5, [pc, #52]	@ (80222d8 <__libc_init_array+0x38>)
 80222a4:	4c0d      	ldr	r4, [pc, #52]	@ (80222dc <__libc_init_array+0x3c>)
 80222a6:	1b64      	subs	r4, r4, r5
 80222a8:	10a4      	asrs	r4, r4, #2
 80222aa:	2600      	movs	r6, #0
 80222ac:	42a6      	cmp	r6, r4
 80222ae:	d109      	bne.n	80222c4 <__libc_init_array+0x24>
 80222b0:	4d0b      	ldr	r5, [pc, #44]	@ (80222e0 <__libc_init_array+0x40>)
 80222b2:	4c0c      	ldr	r4, [pc, #48]	@ (80222e4 <__libc_init_array+0x44>)
 80222b4:	f001 ff48 	bl	8024148 <_init>
 80222b8:	1b64      	subs	r4, r4, r5
 80222ba:	10a4      	asrs	r4, r4, #2
 80222bc:	2600      	movs	r6, #0
 80222be:	42a6      	cmp	r6, r4
 80222c0:	d105      	bne.n	80222ce <__libc_init_array+0x2e>
 80222c2:	bd70      	pop	{r4, r5, r6, pc}
 80222c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80222c8:	4798      	blx	r3
 80222ca:	3601      	adds	r6, #1
 80222cc:	e7ee      	b.n	80222ac <__libc_init_array+0xc>
 80222ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80222d2:	4798      	blx	r3
 80222d4:	3601      	adds	r6, #1
 80222d6:	e7f2      	b.n	80222be <__libc_init_array+0x1e>
 80222d8:	08028f34 	.word	0x08028f34
 80222dc:	08028f34 	.word	0x08028f34
 80222e0:	08028f34 	.word	0x08028f34
 80222e4:	08028f38 	.word	0x08028f38

080222e8 <__retarget_lock_init_recursive>:
 80222e8:	4770      	bx	lr

080222ea <__retarget_lock_acquire_recursive>:
 80222ea:	4770      	bx	lr

080222ec <__retarget_lock_release_recursive>:
 80222ec:	4770      	bx	lr

080222ee <memcpy>:
 80222ee:	440a      	add	r2, r1
 80222f0:	4291      	cmp	r1, r2
 80222f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80222f6:	d100      	bne.n	80222fa <memcpy+0xc>
 80222f8:	4770      	bx	lr
 80222fa:	b510      	push	{r4, lr}
 80222fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022304:	4291      	cmp	r1, r2
 8022306:	d1f9      	bne.n	80222fc <memcpy+0xe>
 8022308:	bd10      	pop	{r4, pc}
	...

0802230c <__assert_func>:
 802230c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802230e:	4614      	mov	r4, r2
 8022310:	461a      	mov	r2, r3
 8022312:	4b09      	ldr	r3, [pc, #36]	@ (8022338 <__assert_func+0x2c>)
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	4605      	mov	r5, r0
 8022318:	68d8      	ldr	r0, [r3, #12]
 802231a:	b954      	cbnz	r4, 8022332 <__assert_func+0x26>
 802231c:	4b07      	ldr	r3, [pc, #28]	@ (802233c <__assert_func+0x30>)
 802231e:	461c      	mov	r4, r3
 8022320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022324:	9100      	str	r1, [sp, #0]
 8022326:	462b      	mov	r3, r5
 8022328:	4905      	ldr	r1, [pc, #20]	@ (8022340 <__assert_func+0x34>)
 802232a:	f001 fdb3 	bl	8023e94 <fiprintf>
 802232e:	f001 fe57 	bl	8023fe0 <abort>
 8022332:	4b04      	ldr	r3, [pc, #16]	@ (8022344 <__assert_func+0x38>)
 8022334:	e7f4      	b.n	8022320 <__assert_func+0x14>
 8022336:	bf00      	nop
 8022338:	24000060 	.word	0x24000060
 802233c:	08028d3f 	.word	0x08028d3f
 8022340:	08028d11 	.word	0x08028d11
 8022344:	08028d04 	.word	0x08028d04

08022348 <quorem>:
 8022348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802234c:	6903      	ldr	r3, [r0, #16]
 802234e:	690c      	ldr	r4, [r1, #16]
 8022350:	42a3      	cmp	r3, r4
 8022352:	4607      	mov	r7, r0
 8022354:	db7e      	blt.n	8022454 <quorem+0x10c>
 8022356:	3c01      	subs	r4, #1
 8022358:	f101 0814 	add.w	r8, r1, #20
 802235c:	00a3      	lsls	r3, r4, #2
 802235e:	f100 0514 	add.w	r5, r0, #20
 8022362:	9300      	str	r3, [sp, #0]
 8022364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022368:	9301      	str	r3, [sp, #4]
 802236a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802236e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022372:	3301      	adds	r3, #1
 8022374:	429a      	cmp	r2, r3
 8022376:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802237a:	fbb2 f6f3 	udiv	r6, r2, r3
 802237e:	d32e      	bcc.n	80223de <quorem+0x96>
 8022380:	f04f 0a00 	mov.w	sl, #0
 8022384:	46c4      	mov	ip, r8
 8022386:	46ae      	mov	lr, r5
 8022388:	46d3      	mov	fp, sl
 802238a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802238e:	b298      	uxth	r0, r3
 8022390:	fb06 a000 	mla	r0, r6, r0, sl
 8022394:	0c02      	lsrs	r2, r0, #16
 8022396:	0c1b      	lsrs	r3, r3, #16
 8022398:	fb06 2303 	mla	r3, r6, r3, r2
 802239c:	f8de 2000 	ldr.w	r2, [lr]
 80223a0:	b280      	uxth	r0, r0
 80223a2:	b292      	uxth	r2, r2
 80223a4:	1a12      	subs	r2, r2, r0
 80223a6:	445a      	add	r2, fp
 80223a8:	f8de 0000 	ldr.w	r0, [lr]
 80223ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80223b0:	b29b      	uxth	r3, r3
 80223b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80223b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80223ba:	b292      	uxth	r2, r2
 80223bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80223c0:	45e1      	cmp	r9, ip
 80223c2:	f84e 2b04 	str.w	r2, [lr], #4
 80223c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80223ca:	d2de      	bcs.n	802238a <quorem+0x42>
 80223cc:	9b00      	ldr	r3, [sp, #0]
 80223ce:	58eb      	ldr	r3, [r5, r3]
 80223d0:	b92b      	cbnz	r3, 80223de <quorem+0x96>
 80223d2:	9b01      	ldr	r3, [sp, #4]
 80223d4:	3b04      	subs	r3, #4
 80223d6:	429d      	cmp	r5, r3
 80223d8:	461a      	mov	r2, r3
 80223da:	d32f      	bcc.n	802243c <quorem+0xf4>
 80223dc:	613c      	str	r4, [r7, #16]
 80223de:	4638      	mov	r0, r7
 80223e0:	f001 f90a 	bl	80235f8 <__mcmp>
 80223e4:	2800      	cmp	r0, #0
 80223e6:	db25      	blt.n	8022434 <quorem+0xec>
 80223e8:	4629      	mov	r1, r5
 80223ea:	2000      	movs	r0, #0
 80223ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80223f0:	f8d1 c000 	ldr.w	ip, [r1]
 80223f4:	fa1f fe82 	uxth.w	lr, r2
 80223f8:	fa1f f38c 	uxth.w	r3, ip
 80223fc:	eba3 030e 	sub.w	r3, r3, lr
 8022400:	4403      	add	r3, r0
 8022402:	0c12      	lsrs	r2, r2, #16
 8022404:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8022408:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802240c:	b29b      	uxth	r3, r3
 802240e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022412:	45c1      	cmp	r9, r8
 8022414:	f841 3b04 	str.w	r3, [r1], #4
 8022418:	ea4f 4022 	mov.w	r0, r2, asr #16
 802241c:	d2e6      	bcs.n	80223ec <quorem+0xa4>
 802241e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022426:	b922      	cbnz	r2, 8022432 <quorem+0xea>
 8022428:	3b04      	subs	r3, #4
 802242a:	429d      	cmp	r5, r3
 802242c:	461a      	mov	r2, r3
 802242e:	d30b      	bcc.n	8022448 <quorem+0x100>
 8022430:	613c      	str	r4, [r7, #16]
 8022432:	3601      	adds	r6, #1
 8022434:	4630      	mov	r0, r6
 8022436:	b003      	add	sp, #12
 8022438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802243c:	6812      	ldr	r2, [r2, #0]
 802243e:	3b04      	subs	r3, #4
 8022440:	2a00      	cmp	r2, #0
 8022442:	d1cb      	bne.n	80223dc <quorem+0x94>
 8022444:	3c01      	subs	r4, #1
 8022446:	e7c6      	b.n	80223d6 <quorem+0x8e>
 8022448:	6812      	ldr	r2, [r2, #0]
 802244a:	3b04      	subs	r3, #4
 802244c:	2a00      	cmp	r2, #0
 802244e:	d1ef      	bne.n	8022430 <quorem+0xe8>
 8022450:	3c01      	subs	r4, #1
 8022452:	e7ea      	b.n	802242a <quorem+0xe2>
 8022454:	2000      	movs	r0, #0
 8022456:	e7ee      	b.n	8022436 <quorem+0xee>

08022458 <_dtoa_r>:
 8022458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802245c:	ed2d 8b02 	vpush	{d8}
 8022460:	69c7      	ldr	r7, [r0, #28]
 8022462:	b091      	sub	sp, #68	@ 0x44
 8022464:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022468:	ec55 4b10 	vmov	r4, r5, d0
 802246c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802246e:	9107      	str	r1, [sp, #28]
 8022470:	4681      	mov	r9, r0
 8022472:	9209      	str	r2, [sp, #36]	@ 0x24
 8022474:	930d      	str	r3, [sp, #52]	@ 0x34
 8022476:	b97f      	cbnz	r7, 8022498 <_dtoa_r+0x40>
 8022478:	2010      	movs	r0, #16
 802247a:	f000 fd8d 	bl	8022f98 <malloc>
 802247e:	4602      	mov	r2, r0
 8022480:	f8c9 001c 	str.w	r0, [r9, #28]
 8022484:	b920      	cbnz	r0, 8022490 <_dtoa_r+0x38>
 8022486:	4ba0      	ldr	r3, [pc, #640]	@ (8022708 <_dtoa_r+0x2b0>)
 8022488:	21ef      	movs	r1, #239	@ 0xef
 802248a:	48a0      	ldr	r0, [pc, #640]	@ (802270c <_dtoa_r+0x2b4>)
 802248c:	f7ff ff3e 	bl	802230c <__assert_func>
 8022490:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8022494:	6007      	str	r7, [r0, #0]
 8022496:	60c7      	str	r7, [r0, #12]
 8022498:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802249c:	6819      	ldr	r1, [r3, #0]
 802249e:	b159      	cbz	r1, 80224b8 <_dtoa_r+0x60>
 80224a0:	685a      	ldr	r2, [r3, #4]
 80224a2:	604a      	str	r2, [r1, #4]
 80224a4:	2301      	movs	r3, #1
 80224a6:	4093      	lsls	r3, r2
 80224a8:	608b      	str	r3, [r1, #8]
 80224aa:	4648      	mov	r0, r9
 80224ac:	f000 fe6a 	bl	8023184 <_Bfree>
 80224b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80224b4:	2200      	movs	r2, #0
 80224b6:	601a      	str	r2, [r3, #0]
 80224b8:	1e2b      	subs	r3, r5, #0
 80224ba:	bfbb      	ittet	lt
 80224bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80224c0:	9303      	strlt	r3, [sp, #12]
 80224c2:	2300      	movge	r3, #0
 80224c4:	2201      	movlt	r2, #1
 80224c6:	bfac      	ite	ge
 80224c8:	6033      	strge	r3, [r6, #0]
 80224ca:	6032      	strlt	r2, [r6, #0]
 80224cc:	4b90      	ldr	r3, [pc, #576]	@ (8022710 <_dtoa_r+0x2b8>)
 80224ce:	9e03      	ldr	r6, [sp, #12]
 80224d0:	43b3      	bics	r3, r6
 80224d2:	d110      	bne.n	80224f6 <_dtoa_r+0x9e>
 80224d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80224d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80224da:	6013      	str	r3, [r2, #0]
 80224dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80224e0:	4323      	orrs	r3, r4
 80224e2:	f000 84de 	beq.w	8022ea2 <_dtoa_r+0xa4a>
 80224e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80224e8:	4f8a      	ldr	r7, [pc, #552]	@ (8022714 <_dtoa_r+0x2bc>)
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	f000 84e0 	beq.w	8022eb0 <_dtoa_r+0xa58>
 80224f0:	1cfb      	adds	r3, r7, #3
 80224f2:	f000 bcdb 	b.w	8022eac <_dtoa_r+0xa54>
 80224f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80224fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80224fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022502:	d10a      	bne.n	802251a <_dtoa_r+0xc2>
 8022504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022506:	2301      	movs	r3, #1
 8022508:	6013      	str	r3, [r2, #0]
 802250a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802250c:	b113      	cbz	r3, 8022514 <_dtoa_r+0xbc>
 802250e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022510:	4b81      	ldr	r3, [pc, #516]	@ (8022718 <_dtoa_r+0x2c0>)
 8022512:	6013      	str	r3, [r2, #0]
 8022514:	4f81      	ldr	r7, [pc, #516]	@ (802271c <_dtoa_r+0x2c4>)
 8022516:	f000 bccb 	b.w	8022eb0 <_dtoa_r+0xa58>
 802251a:	aa0e      	add	r2, sp, #56	@ 0x38
 802251c:	a90f      	add	r1, sp, #60	@ 0x3c
 802251e:	4648      	mov	r0, r9
 8022520:	eeb0 0b48 	vmov.f64	d0, d8
 8022524:	f001 f918 	bl	8023758 <__d2b>
 8022528:	f3c6 530a 	ubfx	r3, r6, #20, #11
 802252c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802252e:	9001      	str	r0, [sp, #4]
 8022530:	2b00      	cmp	r3, #0
 8022532:	d045      	beq.n	80225c0 <_dtoa_r+0x168>
 8022534:	eeb0 7b48 	vmov.f64	d7, d8
 8022538:	ee18 1a90 	vmov	r1, s17
 802253c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8022540:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8022544:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8022548:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802254c:	2500      	movs	r5, #0
 802254e:	ee07 1a90 	vmov	s15, r1
 8022552:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8022556:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80226f0 <_dtoa_r+0x298>
 802255a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802255e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80226f8 <_dtoa_r+0x2a0>
 8022562:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022566:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8022700 <_dtoa_r+0x2a8>
 802256a:	ee07 3a90 	vmov	s15, r3
 802256e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8022572:	eeb0 7b46 	vmov.f64	d7, d6
 8022576:	eea4 7b05 	vfma.f64	d7, d4, d5
 802257a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802257e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022586:	ee16 8a90 	vmov	r8, s13
 802258a:	d508      	bpl.n	802259e <_dtoa_r+0x146>
 802258c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8022590:	eeb4 6b47 	vcmp.f64	d6, d7
 8022594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022598:	bf18      	it	ne
 802259a:	f108 38ff 	addne.w	r8, r8, #4294967295
 802259e:	f1b8 0f16 	cmp.w	r8, #22
 80225a2:	d82b      	bhi.n	80225fc <_dtoa_r+0x1a4>
 80225a4:	495e      	ldr	r1, [pc, #376]	@ (8022720 <_dtoa_r+0x2c8>)
 80225a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80225aa:	ed91 7b00 	vldr	d7, [r1]
 80225ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80225b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225b6:	d501      	bpl.n	80225bc <_dtoa_r+0x164>
 80225b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80225bc:	2100      	movs	r1, #0
 80225be:	e01e      	b.n	80225fe <_dtoa_r+0x1a6>
 80225c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80225c2:	4413      	add	r3, r2
 80225c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80225c8:	2920      	cmp	r1, #32
 80225ca:	bfc1      	itttt	gt
 80225cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80225d0:	408e      	lslgt	r6, r1
 80225d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80225d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80225da:	bfd6      	itet	le
 80225dc:	f1c1 0120 	rsble	r1, r1, #32
 80225e0:	4331      	orrgt	r1, r6
 80225e2:	fa04 f101 	lslle.w	r1, r4, r1
 80225e6:	ee07 1a90 	vmov	s15, r1
 80225ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80225ee:	3b01      	subs	r3, #1
 80225f0:	ee17 1a90 	vmov	r1, s15
 80225f4:	2501      	movs	r5, #1
 80225f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80225fa:	e7a8      	b.n	802254e <_dtoa_r+0xf6>
 80225fc:	2101      	movs	r1, #1
 80225fe:	1ad2      	subs	r2, r2, r3
 8022600:	1e53      	subs	r3, r2, #1
 8022602:	9306      	str	r3, [sp, #24]
 8022604:	bf45      	ittet	mi
 8022606:	f1c2 0301 	rsbmi	r3, r2, #1
 802260a:	9305      	strmi	r3, [sp, #20]
 802260c:	2300      	movpl	r3, #0
 802260e:	2300      	movmi	r3, #0
 8022610:	bf4c      	ite	mi
 8022612:	9306      	strmi	r3, [sp, #24]
 8022614:	9305      	strpl	r3, [sp, #20]
 8022616:	f1b8 0f00 	cmp.w	r8, #0
 802261a:	910c      	str	r1, [sp, #48]	@ 0x30
 802261c:	db18      	blt.n	8022650 <_dtoa_r+0x1f8>
 802261e:	9b06      	ldr	r3, [sp, #24]
 8022620:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8022624:	4443      	add	r3, r8
 8022626:	9306      	str	r3, [sp, #24]
 8022628:	2300      	movs	r3, #0
 802262a:	9a07      	ldr	r2, [sp, #28]
 802262c:	2a09      	cmp	r2, #9
 802262e:	d849      	bhi.n	80226c4 <_dtoa_r+0x26c>
 8022630:	2a05      	cmp	r2, #5
 8022632:	bfc4      	itt	gt
 8022634:	3a04      	subgt	r2, #4
 8022636:	9207      	strgt	r2, [sp, #28]
 8022638:	9a07      	ldr	r2, [sp, #28]
 802263a:	f1a2 0202 	sub.w	r2, r2, #2
 802263e:	bfcc      	ite	gt
 8022640:	2400      	movgt	r4, #0
 8022642:	2401      	movle	r4, #1
 8022644:	2a03      	cmp	r2, #3
 8022646:	d848      	bhi.n	80226da <_dtoa_r+0x282>
 8022648:	e8df f002 	tbb	[pc, r2]
 802264c:	3a2c2e0b 	.word	0x3a2c2e0b
 8022650:	9b05      	ldr	r3, [sp, #20]
 8022652:	2200      	movs	r2, #0
 8022654:	eba3 0308 	sub.w	r3, r3, r8
 8022658:	9305      	str	r3, [sp, #20]
 802265a:	920a      	str	r2, [sp, #40]	@ 0x28
 802265c:	f1c8 0300 	rsb	r3, r8, #0
 8022660:	e7e3      	b.n	802262a <_dtoa_r+0x1d2>
 8022662:	2200      	movs	r2, #0
 8022664:	9208      	str	r2, [sp, #32]
 8022666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022668:	2a00      	cmp	r2, #0
 802266a:	dc39      	bgt.n	80226e0 <_dtoa_r+0x288>
 802266c:	f04f 0b01 	mov.w	fp, #1
 8022670:	46da      	mov	sl, fp
 8022672:	465a      	mov	r2, fp
 8022674:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8022678:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802267c:	2100      	movs	r1, #0
 802267e:	2004      	movs	r0, #4
 8022680:	f100 0614 	add.w	r6, r0, #20
 8022684:	4296      	cmp	r6, r2
 8022686:	d930      	bls.n	80226ea <_dtoa_r+0x292>
 8022688:	6079      	str	r1, [r7, #4]
 802268a:	4648      	mov	r0, r9
 802268c:	9304      	str	r3, [sp, #16]
 802268e:	f000 fd39 	bl	8023104 <_Balloc>
 8022692:	9b04      	ldr	r3, [sp, #16]
 8022694:	4607      	mov	r7, r0
 8022696:	2800      	cmp	r0, #0
 8022698:	d146      	bne.n	8022728 <_dtoa_r+0x2d0>
 802269a:	4b22      	ldr	r3, [pc, #136]	@ (8022724 <_dtoa_r+0x2cc>)
 802269c:	4602      	mov	r2, r0
 802269e:	f240 11af 	movw	r1, #431	@ 0x1af
 80226a2:	e6f2      	b.n	802248a <_dtoa_r+0x32>
 80226a4:	2201      	movs	r2, #1
 80226a6:	e7dd      	b.n	8022664 <_dtoa_r+0x20c>
 80226a8:	2200      	movs	r2, #0
 80226aa:	9208      	str	r2, [sp, #32]
 80226ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80226ae:	eb08 0b02 	add.w	fp, r8, r2
 80226b2:	f10b 0a01 	add.w	sl, fp, #1
 80226b6:	4652      	mov	r2, sl
 80226b8:	2a01      	cmp	r2, #1
 80226ba:	bfb8      	it	lt
 80226bc:	2201      	movlt	r2, #1
 80226be:	e7db      	b.n	8022678 <_dtoa_r+0x220>
 80226c0:	2201      	movs	r2, #1
 80226c2:	e7f2      	b.n	80226aa <_dtoa_r+0x252>
 80226c4:	2401      	movs	r4, #1
 80226c6:	2200      	movs	r2, #0
 80226c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80226cc:	f04f 3bff 	mov.w	fp, #4294967295
 80226d0:	2100      	movs	r1, #0
 80226d2:	46da      	mov	sl, fp
 80226d4:	2212      	movs	r2, #18
 80226d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80226d8:	e7ce      	b.n	8022678 <_dtoa_r+0x220>
 80226da:	2201      	movs	r2, #1
 80226dc:	9208      	str	r2, [sp, #32]
 80226de:	e7f5      	b.n	80226cc <_dtoa_r+0x274>
 80226e0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80226e4:	46da      	mov	sl, fp
 80226e6:	465a      	mov	r2, fp
 80226e8:	e7c6      	b.n	8022678 <_dtoa_r+0x220>
 80226ea:	3101      	adds	r1, #1
 80226ec:	0040      	lsls	r0, r0, #1
 80226ee:	e7c7      	b.n	8022680 <_dtoa_r+0x228>
 80226f0:	636f4361 	.word	0x636f4361
 80226f4:	3fd287a7 	.word	0x3fd287a7
 80226f8:	8b60c8b3 	.word	0x8b60c8b3
 80226fc:	3fc68a28 	.word	0x3fc68a28
 8022700:	509f79fb 	.word	0x509f79fb
 8022704:	3fd34413 	.word	0x3fd34413
 8022708:	08028b60 	.word	0x08028b60
 802270c:	08028d4d 	.word	0x08028d4d
 8022710:	7ff00000 	.word	0x7ff00000
 8022714:	08028d49 	.word	0x08028d49
 8022718:	08028ce1 	.word	0x08028ce1
 802271c:	08028ce0 	.word	0x08028ce0
 8022720:	08028e48 	.word	0x08028e48
 8022724:	08028da5 	.word	0x08028da5
 8022728:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802272c:	f1ba 0f0e 	cmp.w	sl, #14
 8022730:	6010      	str	r0, [r2, #0]
 8022732:	d86f      	bhi.n	8022814 <_dtoa_r+0x3bc>
 8022734:	2c00      	cmp	r4, #0
 8022736:	d06d      	beq.n	8022814 <_dtoa_r+0x3bc>
 8022738:	f1b8 0f00 	cmp.w	r8, #0
 802273c:	f340 80c2 	ble.w	80228c4 <_dtoa_r+0x46c>
 8022740:	4aca      	ldr	r2, [pc, #808]	@ (8022a6c <_dtoa_r+0x614>)
 8022742:	f008 010f 	and.w	r1, r8, #15
 8022746:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802274a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802274e:	ed92 7b00 	vldr	d7, [r2]
 8022752:	ea4f 1128 	mov.w	r1, r8, asr #4
 8022756:	f000 80a9 	beq.w	80228ac <_dtoa_r+0x454>
 802275a:	4ac5      	ldr	r2, [pc, #788]	@ (8022a70 <_dtoa_r+0x618>)
 802275c:	ed92 6b08 	vldr	d6, [r2, #32]
 8022760:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8022764:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022768:	f001 010f 	and.w	r1, r1, #15
 802276c:	2203      	movs	r2, #3
 802276e:	48c0      	ldr	r0, [pc, #768]	@ (8022a70 <_dtoa_r+0x618>)
 8022770:	2900      	cmp	r1, #0
 8022772:	f040 809d 	bne.w	80228b0 <_dtoa_r+0x458>
 8022776:	ed9d 6b02 	vldr	d6, [sp, #8]
 802277a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802277e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022782:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022784:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022788:	2900      	cmp	r1, #0
 802278a:	f000 80c1 	beq.w	8022910 <_dtoa_r+0x4b8>
 802278e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8022792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802279a:	f140 80b9 	bpl.w	8022910 <_dtoa_r+0x4b8>
 802279e:	f1ba 0f00 	cmp.w	sl, #0
 80227a2:	f000 80b5 	beq.w	8022910 <_dtoa_r+0x4b8>
 80227a6:	f1bb 0f00 	cmp.w	fp, #0
 80227aa:	dd31      	ble.n	8022810 <_dtoa_r+0x3b8>
 80227ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80227b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80227b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80227b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80227bc:	9104      	str	r1, [sp, #16]
 80227be:	3201      	adds	r2, #1
 80227c0:	465c      	mov	r4, fp
 80227c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80227c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80227ca:	ee07 2a90 	vmov	s15, r2
 80227ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80227d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80227d6:	ee15 2a90 	vmov	r2, s11
 80227da:	ec51 0b15 	vmov	r0, r1, d5
 80227de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80227e2:	2c00      	cmp	r4, #0
 80227e4:	f040 8098 	bne.w	8022918 <_dtoa_r+0x4c0>
 80227e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80227ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80227f0:	ec41 0b17 	vmov	d7, r0, r1
 80227f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80227f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227fc:	f300 8261 	bgt.w	8022cc2 <_dtoa_r+0x86a>
 8022800:	eeb1 7b47 	vneg.f64	d7, d7
 8022804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802280c:	f100 80f5 	bmi.w	80229fa <_dtoa_r+0x5a2>
 8022810:	ed8d 8b02 	vstr	d8, [sp, #8]
 8022814:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022816:	2a00      	cmp	r2, #0
 8022818:	f2c0 812c 	blt.w	8022a74 <_dtoa_r+0x61c>
 802281c:	f1b8 0f0e 	cmp.w	r8, #14
 8022820:	f300 8128 	bgt.w	8022a74 <_dtoa_r+0x61c>
 8022824:	4b91      	ldr	r3, [pc, #580]	@ (8022a6c <_dtoa_r+0x614>)
 8022826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802282a:	ed93 6b00 	vldr	d6, [r3]
 802282e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022830:	2b00      	cmp	r3, #0
 8022832:	da03      	bge.n	802283c <_dtoa_r+0x3e4>
 8022834:	f1ba 0f00 	cmp.w	sl, #0
 8022838:	f340 80d2 	ble.w	80229e0 <_dtoa_r+0x588>
 802283c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8022840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022844:	463e      	mov	r6, r7
 8022846:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802284a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802284e:	ee15 3a10 	vmov	r3, s10
 8022852:	3330      	adds	r3, #48	@ 0x30
 8022854:	f806 3b01 	strb.w	r3, [r6], #1
 8022858:	1bf3      	subs	r3, r6, r7
 802285a:	459a      	cmp	sl, r3
 802285c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022860:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022864:	f040 80f8 	bne.w	8022a58 <_dtoa_r+0x600>
 8022868:	ee37 7b07 	vadd.f64	d7, d7, d7
 802286c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022874:	f300 80dd 	bgt.w	8022a32 <_dtoa_r+0x5da>
 8022878:	eeb4 7b46 	vcmp.f64	d7, d6
 802287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022880:	d104      	bne.n	802288c <_dtoa_r+0x434>
 8022882:	ee15 3a10 	vmov	r3, s10
 8022886:	07db      	lsls	r3, r3, #31
 8022888:	f100 80d3 	bmi.w	8022a32 <_dtoa_r+0x5da>
 802288c:	9901      	ldr	r1, [sp, #4]
 802288e:	4648      	mov	r0, r9
 8022890:	f000 fc78 	bl	8023184 <_Bfree>
 8022894:	2300      	movs	r3, #0
 8022896:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022898:	7033      	strb	r3, [r6, #0]
 802289a:	f108 0301 	add.w	r3, r8, #1
 802289e:	6013      	str	r3, [r2, #0]
 80228a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	f000 8304 	beq.w	8022eb0 <_dtoa_r+0xa58>
 80228a8:	601e      	str	r6, [r3, #0]
 80228aa:	e301      	b.n	8022eb0 <_dtoa_r+0xa58>
 80228ac:	2202      	movs	r2, #2
 80228ae:	e75e      	b.n	802276e <_dtoa_r+0x316>
 80228b0:	07cc      	lsls	r4, r1, #31
 80228b2:	d504      	bpl.n	80228be <_dtoa_r+0x466>
 80228b4:	ed90 6b00 	vldr	d6, [r0]
 80228b8:	3201      	adds	r2, #1
 80228ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80228be:	1049      	asrs	r1, r1, #1
 80228c0:	3008      	adds	r0, #8
 80228c2:	e755      	b.n	8022770 <_dtoa_r+0x318>
 80228c4:	d022      	beq.n	802290c <_dtoa_r+0x4b4>
 80228c6:	f1c8 0100 	rsb	r1, r8, #0
 80228ca:	4a68      	ldr	r2, [pc, #416]	@ (8022a6c <_dtoa_r+0x614>)
 80228cc:	f001 000f 	and.w	r0, r1, #15
 80228d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80228d4:	ed92 7b00 	vldr	d7, [r2]
 80228d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80228dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80228e0:	4863      	ldr	r0, [pc, #396]	@ (8022a70 <_dtoa_r+0x618>)
 80228e2:	1109      	asrs	r1, r1, #4
 80228e4:	2400      	movs	r4, #0
 80228e6:	2202      	movs	r2, #2
 80228e8:	b929      	cbnz	r1, 80228f6 <_dtoa_r+0x49e>
 80228ea:	2c00      	cmp	r4, #0
 80228ec:	f43f af49 	beq.w	8022782 <_dtoa_r+0x32a>
 80228f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80228f4:	e745      	b.n	8022782 <_dtoa_r+0x32a>
 80228f6:	07ce      	lsls	r6, r1, #31
 80228f8:	d505      	bpl.n	8022906 <_dtoa_r+0x4ae>
 80228fa:	ed90 6b00 	vldr	d6, [r0]
 80228fe:	3201      	adds	r2, #1
 8022900:	2401      	movs	r4, #1
 8022902:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022906:	1049      	asrs	r1, r1, #1
 8022908:	3008      	adds	r0, #8
 802290a:	e7ed      	b.n	80228e8 <_dtoa_r+0x490>
 802290c:	2202      	movs	r2, #2
 802290e:	e738      	b.n	8022782 <_dtoa_r+0x32a>
 8022910:	f8cd 8010 	str.w	r8, [sp, #16]
 8022914:	4654      	mov	r4, sl
 8022916:	e754      	b.n	80227c2 <_dtoa_r+0x36a>
 8022918:	4a54      	ldr	r2, [pc, #336]	@ (8022a6c <_dtoa_r+0x614>)
 802291a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 802291e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022922:	9a08      	ldr	r2, [sp, #32]
 8022924:	ec41 0b17 	vmov	d7, r0, r1
 8022928:	443c      	add	r4, r7
 802292a:	b34a      	cbz	r2, 8022980 <_dtoa_r+0x528>
 802292c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8022930:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8022934:	463e      	mov	r6, r7
 8022936:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802293a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802293e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022942:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022946:	ee14 2a90 	vmov	r2, s9
 802294a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802294e:	3230      	adds	r2, #48	@ 0x30
 8022950:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022954:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802295c:	f806 2b01 	strb.w	r2, [r6], #1
 8022960:	d438      	bmi.n	80229d4 <_dtoa_r+0x57c>
 8022962:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022966:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802296e:	d462      	bmi.n	8022a36 <_dtoa_r+0x5de>
 8022970:	42a6      	cmp	r6, r4
 8022972:	f43f af4d 	beq.w	8022810 <_dtoa_r+0x3b8>
 8022976:	ee27 7b03 	vmul.f64	d7, d7, d3
 802297a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802297e:	e7e0      	b.n	8022942 <_dtoa_r+0x4ea>
 8022980:	4621      	mov	r1, r4
 8022982:	463e      	mov	r6, r7
 8022984:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022988:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802298c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022990:	ee14 2a90 	vmov	r2, s9
 8022994:	3230      	adds	r2, #48	@ 0x30
 8022996:	f806 2b01 	strb.w	r2, [r6], #1
 802299a:	42a6      	cmp	r6, r4
 802299c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80229a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80229a4:	d119      	bne.n	80229da <_dtoa_r+0x582>
 80229a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80229aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80229ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80229b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229b6:	dc3e      	bgt.n	8022a36 <_dtoa_r+0x5de>
 80229b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80229bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80229c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229c4:	f57f af24 	bpl.w	8022810 <_dtoa_r+0x3b8>
 80229c8:	460e      	mov	r6, r1
 80229ca:	3901      	subs	r1, #1
 80229cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80229d0:	2b30      	cmp	r3, #48	@ 0x30
 80229d2:	d0f9      	beq.n	80229c8 <_dtoa_r+0x570>
 80229d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80229d8:	e758      	b.n	802288c <_dtoa_r+0x434>
 80229da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80229de:	e7d5      	b.n	802298c <_dtoa_r+0x534>
 80229e0:	d10b      	bne.n	80229fa <_dtoa_r+0x5a2>
 80229e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80229e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80229ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80229ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80229f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229f6:	f2c0 8161 	blt.w	8022cbc <_dtoa_r+0x864>
 80229fa:	2400      	movs	r4, #0
 80229fc:	4625      	mov	r5, r4
 80229fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a00:	43db      	mvns	r3, r3
 8022a02:	9304      	str	r3, [sp, #16]
 8022a04:	463e      	mov	r6, r7
 8022a06:	f04f 0800 	mov.w	r8, #0
 8022a0a:	4621      	mov	r1, r4
 8022a0c:	4648      	mov	r0, r9
 8022a0e:	f000 fbb9 	bl	8023184 <_Bfree>
 8022a12:	2d00      	cmp	r5, #0
 8022a14:	d0de      	beq.n	80229d4 <_dtoa_r+0x57c>
 8022a16:	f1b8 0f00 	cmp.w	r8, #0
 8022a1a:	d005      	beq.n	8022a28 <_dtoa_r+0x5d0>
 8022a1c:	45a8      	cmp	r8, r5
 8022a1e:	d003      	beq.n	8022a28 <_dtoa_r+0x5d0>
 8022a20:	4641      	mov	r1, r8
 8022a22:	4648      	mov	r0, r9
 8022a24:	f000 fbae 	bl	8023184 <_Bfree>
 8022a28:	4629      	mov	r1, r5
 8022a2a:	4648      	mov	r0, r9
 8022a2c:	f000 fbaa 	bl	8023184 <_Bfree>
 8022a30:	e7d0      	b.n	80229d4 <_dtoa_r+0x57c>
 8022a32:	f8cd 8010 	str.w	r8, [sp, #16]
 8022a36:	4633      	mov	r3, r6
 8022a38:	461e      	mov	r6, r3
 8022a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022a3e:	2a39      	cmp	r2, #57	@ 0x39
 8022a40:	d106      	bne.n	8022a50 <_dtoa_r+0x5f8>
 8022a42:	429f      	cmp	r7, r3
 8022a44:	d1f8      	bne.n	8022a38 <_dtoa_r+0x5e0>
 8022a46:	9a04      	ldr	r2, [sp, #16]
 8022a48:	3201      	adds	r2, #1
 8022a4a:	9204      	str	r2, [sp, #16]
 8022a4c:	2230      	movs	r2, #48	@ 0x30
 8022a4e:	703a      	strb	r2, [r7, #0]
 8022a50:	781a      	ldrb	r2, [r3, #0]
 8022a52:	3201      	adds	r2, #1
 8022a54:	701a      	strb	r2, [r3, #0]
 8022a56:	e7bd      	b.n	80229d4 <_dtoa_r+0x57c>
 8022a58:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022a5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a64:	f47f aeef 	bne.w	8022846 <_dtoa_r+0x3ee>
 8022a68:	e710      	b.n	802288c <_dtoa_r+0x434>
 8022a6a:	bf00      	nop
 8022a6c:	08028e48 	.word	0x08028e48
 8022a70:	08028e20 	.word	0x08028e20
 8022a74:	9908      	ldr	r1, [sp, #32]
 8022a76:	2900      	cmp	r1, #0
 8022a78:	f000 80e3 	beq.w	8022c42 <_dtoa_r+0x7ea>
 8022a7c:	9907      	ldr	r1, [sp, #28]
 8022a7e:	2901      	cmp	r1, #1
 8022a80:	f300 80c8 	bgt.w	8022c14 <_dtoa_r+0x7bc>
 8022a84:	2d00      	cmp	r5, #0
 8022a86:	f000 80c1 	beq.w	8022c0c <_dtoa_r+0x7b4>
 8022a8a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8022a8e:	9e05      	ldr	r6, [sp, #20]
 8022a90:	461c      	mov	r4, r3
 8022a92:	9304      	str	r3, [sp, #16]
 8022a94:	9b05      	ldr	r3, [sp, #20]
 8022a96:	4413      	add	r3, r2
 8022a98:	9305      	str	r3, [sp, #20]
 8022a9a:	9b06      	ldr	r3, [sp, #24]
 8022a9c:	2101      	movs	r1, #1
 8022a9e:	4413      	add	r3, r2
 8022aa0:	4648      	mov	r0, r9
 8022aa2:	9306      	str	r3, [sp, #24]
 8022aa4:	f000 fc22 	bl	80232ec <__i2b>
 8022aa8:	9b04      	ldr	r3, [sp, #16]
 8022aaa:	4605      	mov	r5, r0
 8022aac:	b166      	cbz	r6, 8022ac8 <_dtoa_r+0x670>
 8022aae:	9a06      	ldr	r2, [sp, #24]
 8022ab0:	2a00      	cmp	r2, #0
 8022ab2:	dd09      	ble.n	8022ac8 <_dtoa_r+0x670>
 8022ab4:	42b2      	cmp	r2, r6
 8022ab6:	9905      	ldr	r1, [sp, #20]
 8022ab8:	bfa8      	it	ge
 8022aba:	4632      	movge	r2, r6
 8022abc:	1a89      	subs	r1, r1, r2
 8022abe:	9105      	str	r1, [sp, #20]
 8022ac0:	9906      	ldr	r1, [sp, #24]
 8022ac2:	1ab6      	subs	r6, r6, r2
 8022ac4:	1a8a      	subs	r2, r1, r2
 8022ac6:	9206      	str	r2, [sp, #24]
 8022ac8:	b1fb      	cbz	r3, 8022b0a <_dtoa_r+0x6b2>
 8022aca:	9a08      	ldr	r2, [sp, #32]
 8022acc:	2a00      	cmp	r2, #0
 8022ace:	f000 80bc 	beq.w	8022c4a <_dtoa_r+0x7f2>
 8022ad2:	b19c      	cbz	r4, 8022afc <_dtoa_r+0x6a4>
 8022ad4:	4629      	mov	r1, r5
 8022ad6:	4622      	mov	r2, r4
 8022ad8:	4648      	mov	r0, r9
 8022ada:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022adc:	f000 fcc6 	bl	802346c <__pow5mult>
 8022ae0:	9a01      	ldr	r2, [sp, #4]
 8022ae2:	4601      	mov	r1, r0
 8022ae4:	4605      	mov	r5, r0
 8022ae6:	4648      	mov	r0, r9
 8022ae8:	f000 fc16 	bl	8023318 <__multiply>
 8022aec:	9901      	ldr	r1, [sp, #4]
 8022aee:	9004      	str	r0, [sp, #16]
 8022af0:	4648      	mov	r0, r9
 8022af2:	f000 fb47 	bl	8023184 <_Bfree>
 8022af6:	9a04      	ldr	r2, [sp, #16]
 8022af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022afa:	9201      	str	r2, [sp, #4]
 8022afc:	1b1a      	subs	r2, r3, r4
 8022afe:	d004      	beq.n	8022b0a <_dtoa_r+0x6b2>
 8022b00:	9901      	ldr	r1, [sp, #4]
 8022b02:	4648      	mov	r0, r9
 8022b04:	f000 fcb2 	bl	802346c <__pow5mult>
 8022b08:	9001      	str	r0, [sp, #4]
 8022b0a:	2101      	movs	r1, #1
 8022b0c:	4648      	mov	r0, r9
 8022b0e:	f000 fbed 	bl	80232ec <__i2b>
 8022b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b14:	4604      	mov	r4, r0
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	f000 81d0 	beq.w	8022ebc <_dtoa_r+0xa64>
 8022b1c:	461a      	mov	r2, r3
 8022b1e:	4601      	mov	r1, r0
 8022b20:	4648      	mov	r0, r9
 8022b22:	f000 fca3 	bl	802346c <__pow5mult>
 8022b26:	9b07      	ldr	r3, [sp, #28]
 8022b28:	2b01      	cmp	r3, #1
 8022b2a:	4604      	mov	r4, r0
 8022b2c:	f300 8095 	bgt.w	8022c5a <_dtoa_r+0x802>
 8022b30:	9b02      	ldr	r3, [sp, #8]
 8022b32:	2b00      	cmp	r3, #0
 8022b34:	f040 808b 	bne.w	8022c4e <_dtoa_r+0x7f6>
 8022b38:	9b03      	ldr	r3, [sp, #12]
 8022b3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022b3e:	2a00      	cmp	r2, #0
 8022b40:	f040 8087 	bne.w	8022c52 <_dtoa_r+0x7fa>
 8022b44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8022b48:	0d12      	lsrs	r2, r2, #20
 8022b4a:	0512      	lsls	r2, r2, #20
 8022b4c:	2a00      	cmp	r2, #0
 8022b4e:	f000 8082 	beq.w	8022c56 <_dtoa_r+0x7fe>
 8022b52:	9b05      	ldr	r3, [sp, #20]
 8022b54:	3301      	adds	r3, #1
 8022b56:	9305      	str	r3, [sp, #20]
 8022b58:	9b06      	ldr	r3, [sp, #24]
 8022b5a:	3301      	adds	r3, #1
 8022b5c:	9306      	str	r3, [sp, #24]
 8022b5e:	2301      	movs	r3, #1
 8022b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b64:	2b00      	cmp	r3, #0
 8022b66:	f000 81af 	beq.w	8022ec8 <_dtoa_r+0xa70>
 8022b6a:	6922      	ldr	r2, [r4, #16]
 8022b6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022b70:	6910      	ldr	r0, [r2, #16]
 8022b72:	f000 fb6f 	bl	8023254 <__hi0bits>
 8022b76:	f1c0 0020 	rsb	r0, r0, #32
 8022b7a:	9b06      	ldr	r3, [sp, #24]
 8022b7c:	4418      	add	r0, r3
 8022b7e:	f010 001f 	ands.w	r0, r0, #31
 8022b82:	d076      	beq.n	8022c72 <_dtoa_r+0x81a>
 8022b84:	f1c0 0220 	rsb	r2, r0, #32
 8022b88:	2a04      	cmp	r2, #4
 8022b8a:	dd69      	ble.n	8022c60 <_dtoa_r+0x808>
 8022b8c:	9b05      	ldr	r3, [sp, #20]
 8022b8e:	f1c0 001c 	rsb	r0, r0, #28
 8022b92:	4403      	add	r3, r0
 8022b94:	9305      	str	r3, [sp, #20]
 8022b96:	9b06      	ldr	r3, [sp, #24]
 8022b98:	4406      	add	r6, r0
 8022b9a:	4403      	add	r3, r0
 8022b9c:	9306      	str	r3, [sp, #24]
 8022b9e:	9b05      	ldr	r3, [sp, #20]
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	dd05      	ble.n	8022bb0 <_dtoa_r+0x758>
 8022ba4:	9901      	ldr	r1, [sp, #4]
 8022ba6:	461a      	mov	r2, r3
 8022ba8:	4648      	mov	r0, r9
 8022baa:	f000 fcb9 	bl	8023520 <__lshift>
 8022bae:	9001      	str	r0, [sp, #4]
 8022bb0:	9b06      	ldr	r3, [sp, #24]
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	dd05      	ble.n	8022bc2 <_dtoa_r+0x76a>
 8022bb6:	4621      	mov	r1, r4
 8022bb8:	461a      	mov	r2, r3
 8022bba:	4648      	mov	r0, r9
 8022bbc:	f000 fcb0 	bl	8023520 <__lshift>
 8022bc0:	4604      	mov	r4, r0
 8022bc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	d056      	beq.n	8022c76 <_dtoa_r+0x81e>
 8022bc8:	9801      	ldr	r0, [sp, #4]
 8022bca:	4621      	mov	r1, r4
 8022bcc:	f000 fd14 	bl	80235f8 <__mcmp>
 8022bd0:	2800      	cmp	r0, #0
 8022bd2:	da50      	bge.n	8022c76 <_dtoa_r+0x81e>
 8022bd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8022bd8:	9304      	str	r3, [sp, #16]
 8022bda:	9901      	ldr	r1, [sp, #4]
 8022bdc:	2300      	movs	r3, #0
 8022bde:	220a      	movs	r2, #10
 8022be0:	4648      	mov	r0, r9
 8022be2:	f000 faf1 	bl	80231c8 <__multadd>
 8022be6:	9b08      	ldr	r3, [sp, #32]
 8022be8:	9001      	str	r0, [sp, #4]
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	f000 816e 	beq.w	8022ecc <_dtoa_r+0xa74>
 8022bf0:	4629      	mov	r1, r5
 8022bf2:	2300      	movs	r3, #0
 8022bf4:	220a      	movs	r2, #10
 8022bf6:	4648      	mov	r0, r9
 8022bf8:	f000 fae6 	bl	80231c8 <__multadd>
 8022bfc:	f1bb 0f00 	cmp.w	fp, #0
 8022c00:	4605      	mov	r5, r0
 8022c02:	dc64      	bgt.n	8022cce <_dtoa_r+0x876>
 8022c04:	9b07      	ldr	r3, [sp, #28]
 8022c06:	2b02      	cmp	r3, #2
 8022c08:	dc3e      	bgt.n	8022c88 <_dtoa_r+0x830>
 8022c0a:	e060      	b.n	8022cce <_dtoa_r+0x876>
 8022c0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022c0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8022c12:	e73c      	b.n	8022a8e <_dtoa_r+0x636>
 8022c14:	f10a 34ff 	add.w	r4, sl, #4294967295
 8022c18:	42a3      	cmp	r3, r4
 8022c1a:	bfbf      	itttt	lt
 8022c1c:	1ae2      	sublt	r2, r4, r3
 8022c1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8022c20:	189b      	addlt	r3, r3, r2
 8022c22:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8022c24:	bfae      	itee	ge
 8022c26:	1b1c      	subge	r4, r3, r4
 8022c28:	4623      	movlt	r3, r4
 8022c2a:	2400      	movlt	r4, #0
 8022c2c:	f1ba 0f00 	cmp.w	sl, #0
 8022c30:	bfb5      	itete	lt
 8022c32:	9a05      	ldrlt	r2, [sp, #20]
 8022c34:	9e05      	ldrge	r6, [sp, #20]
 8022c36:	eba2 060a 	sublt.w	r6, r2, sl
 8022c3a:	4652      	movge	r2, sl
 8022c3c:	bfb8      	it	lt
 8022c3e:	2200      	movlt	r2, #0
 8022c40:	e727      	b.n	8022a92 <_dtoa_r+0x63a>
 8022c42:	9e05      	ldr	r6, [sp, #20]
 8022c44:	9d08      	ldr	r5, [sp, #32]
 8022c46:	461c      	mov	r4, r3
 8022c48:	e730      	b.n	8022aac <_dtoa_r+0x654>
 8022c4a:	461a      	mov	r2, r3
 8022c4c:	e758      	b.n	8022b00 <_dtoa_r+0x6a8>
 8022c4e:	2300      	movs	r3, #0
 8022c50:	e786      	b.n	8022b60 <_dtoa_r+0x708>
 8022c52:	9b02      	ldr	r3, [sp, #8]
 8022c54:	e784      	b.n	8022b60 <_dtoa_r+0x708>
 8022c56:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022c58:	e783      	b.n	8022b62 <_dtoa_r+0x70a>
 8022c5a:	2300      	movs	r3, #0
 8022c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022c5e:	e784      	b.n	8022b6a <_dtoa_r+0x712>
 8022c60:	d09d      	beq.n	8022b9e <_dtoa_r+0x746>
 8022c62:	9b05      	ldr	r3, [sp, #20]
 8022c64:	321c      	adds	r2, #28
 8022c66:	4413      	add	r3, r2
 8022c68:	9305      	str	r3, [sp, #20]
 8022c6a:	9b06      	ldr	r3, [sp, #24]
 8022c6c:	4416      	add	r6, r2
 8022c6e:	4413      	add	r3, r2
 8022c70:	e794      	b.n	8022b9c <_dtoa_r+0x744>
 8022c72:	4602      	mov	r2, r0
 8022c74:	e7f5      	b.n	8022c62 <_dtoa_r+0x80a>
 8022c76:	f1ba 0f00 	cmp.w	sl, #0
 8022c7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8022c7e:	46d3      	mov	fp, sl
 8022c80:	dc21      	bgt.n	8022cc6 <_dtoa_r+0x86e>
 8022c82:	9b07      	ldr	r3, [sp, #28]
 8022c84:	2b02      	cmp	r3, #2
 8022c86:	dd1e      	ble.n	8022cc6 <_dtoa_r+0x86e>
 8022c88:	f1bb 0f00 	cmp.w	fp, #0
 8022c8c:	f47f aeb7 	bne.w	80229fe <_dtoa_r+0x5a6>
 8022c90:	4621      	mov	r1, r4
 8022c92:	465b      	mov	r3, fp
 8022c94:	2205      	movs	r2, #5
 8022c96:	4648      	mov	r0, r9
 8022c98:	f000 fa96 	bl	80231c8 <__multadd>
 8022c9c:	4601      	mov	r1, r0
 8022c9e:	4604      	mov	r4, r0
 8022ca0:	9801      	ldr	r0, [sp, #4]
 8022ca2:	f000 fca9 	bl	80235f8 <__mcmp>
 8022ca6:	2800      	cmp	r0, #0
 8022ca8:	f77f aea9 	ble.w	80229fe <_dtoa_r+0x5a6>
 8022cac:	463e      	mov	r6, r7
 8022cae:	2331      	movs	r3, #49	@ 0x31
 8022cb0:	f806 3b01 	strb.w	r3, [r6], #1
 8022cb4:	9b04      	ldr	r3, [sp, #16]
 8022cb6:	3301      	adds	r3, #1
 8022cb8:	9304      	str	r3, [sp, #16]
 8022cba:	e6a4      	b.n	8022a06 <_dtoa_r+0x5ae>
 8022cbc:	f8cd 8010 	str.w	r8, [sp, #16]
 8022cc0:	4654      	mov	r4, sl
 8022cc2:	4625      	mov	r5, r4
 8022cc4:	e7f2      	b.n	8022cac <_dtoa_r+0x854>
 8022cc6:	9b08      	ldr	r3, [sp, #32]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	f000 8103 	beq.w	8022ed4 <_dtoa_r+0xa7c>
 8022cce:	2e00      	cmp	r6, #0
 8022cd0:	dd05      	ble.n	8022cde <_dtoa_r+0x886>
 8022cd2:	4629      	mov	r1, r5
 8022cd4:	4632      	mov	r2, r6
 8022cd6:	4648      	mov	r0, r9
 8022cd8:	f000 fc22 	bl	8023520 <__lshift>
 8022cdc:	4605      	mov	r5, r0
 8022cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	d058      	beq.n	8022d96 <_dtoa_r+0x93e>
 8022ce4:	6869      	ldr	r1, [r5, #4]
 8022ce6:	4648      	mov	r0, r9
 8022ce8:	f000 fa0c 	bl	8023104 <_Balloc>
 8022cec:	4606      	mov	r6, r0
 8022cee:	b928      	cbnz	r0, 8022cfc <_dtoa_r+0x8a4>
 8022cf0:	4b82      	ldr	r3, [pc, #520]	@ (8022efc <_dtoa_r+0xaa4>)
 8022cf2:	4602      	mov	r2, r0
 8022cf4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8022cf8:	f7ff bbc7 	b.w	802248a <_dtoa_r+0x32>
 8022cfc:	692a      	ldr	r2, [r5, #16]
 8022cfe:	3202      	adds	r2, #2
 8022d00:	0092      	lsls	r2, r2, #2
 8022d02:	f105 010c 	add.w	r1, r5, #12
 8022d06:	300c      	adds	r0, #12
 8022d08:	f7ff faf1 	bl	80222ee <memcpy>
 8022d0c:	2201      	movs	r2, #1
 8022d0e:	4631      	mov	r1, r6
 8022d10:	4648      	mov	r0, r9
 8022d12:	f000 fc05 	bl	8023520 <__lshift>
 8022d16:	1c7b      	adds	r3, r7, #1
 8022d18:	9305      	str	r3, [sp, #20]
 8022d1a:	eb07 030b 	add.w	r3, r7, fp
 8022d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d20:	9b02      	ldr	r3, [sp, #8]
 8022d22:	f003 0301 	and.w	r3, r3, #1
 8022d26:	46a8      	mov	r8, r5
 8022d28:	9308      	str	r3, [sp, #32]
 8022d2a:	4605      	mov	r5, r0
 8022d2c:	9b05      	ldr	r3, [sp, #20]
 8022d2e:	9801      	ldr	r0, [sp, #4]
 8022d30:	4621      	mov	r1, r4
 8022d32:	f103 3bff 	add.w	fp, r3, #4294967295
 8022d36:	f7ff fb07 	bl	8022348 <quorem>
 8022d3a:	4641      	mov	r1, r8
 8022d3c:	9002      	str	r0, [sp, #8]
 8022d3e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8022d42:	9801      	ldr	r0, [sp, #4]
 8022d44:	f000 fc58 	bl	80235f8 <__mcmp>
 8022d48:	462a      	mov	r2, r5
 8022d4a:	9006      	str	r0, [sp, #24]
 8022d4c:	4621      	mov	r1, r4
 8022d4e:	4648      	mov	r0, r9
 8022d50:	f000 fc6e 	bl	8023630 <__mdiff>
 8022d54:	68c2      	ldr	r2, [r0, #12]
 8022d56:	4606      	mov	r6, r0
 8022d58:	b9fa      	cbnz	r2, 8022d9a <_dtoa_r+0x942>
 8022d5a:	4601      	mov	r1, r0
 8022d5c:	9801      	ldr	r0, [sp, #4]
 8022d5e:	f000 fc4b 	bl	80235f8 <__mcmp>
 8022d62:	4602      	mov	r2, r0
 8022d64:	4631      	mov	r1, r6
 8022d66:	4648      	mov	r0, r9
 8022d68:	920a      	str	r2, [sp, #40]	@ 0x28
 8022d6a:	f000 fa0b 	bl	8023184 <_Bfree>
 8022d6e:	9b07      	ldr	r3, [sp, #28]
 8022d70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022d72:	9e05      	ldr	r6, [sp, #20]
 8022d74:	ea43 0102 	orr.w	r1, r3, r2
 8022d78:	9b08      	ldr	r3, [sp, #32]
 8022d7a:	4319      	orrs	r1, r3
 8022d7c:	d10f      	bne.n	8022d9e <_dtoa_r+0x946>
 8022d7e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8022d82:	d028      	beq.n	8022dd6 <_dtoa_r+0x97e>
 8022d84:	9b06      	ldr	r3, [sp, #24]
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	dd02      	ble.n	8022d90 <_dtoa_r+0x938>
 8022d8a:	9b02      	ldr	r3, [sp, #8]
 8022d8c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8022d90:	f88b a000 	strb.w	sl, [fp]
 8022d94:	e639      	b.n	8022a0a <_dtoa_r+0x5b2>
 8022d96:	4628      	mov	r0, r5
 8022d98:	e7bd      	b.n	8022d16 <_dtoa_r+0x8be>
 8022d9a:	2201      	movs	r2, #1
 8022d9c:	e7e2      	b.n	8022d64 <_dtoa_r+0x90c>
 8022d9e:	9b06      	ldr	r3, [sp, #24]
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	db04      	blt.n	8022dae <_dtoa_r+0x956>
 8022da4:	9907      	ldr	r1, [sp, #28]
 8022da6:	430b      	orrs	r3, r1
 8022da8:	9908      	ldr	r1, [sp, #32]
 8022daa:	430b      	orrs	r3, r1
 8022dac:	d120      	bne.n	8022df0 <_dtoa_r+0x998>
 8022dae:	2a00      	cmp	r2, #0
 8022db0:	ddee      	ble.n	8022d90 <_dtoa_r+0x938>
 8022db2:	9901      	ldr	r1, [sp, #4]
 8022db4:	2201      	movs	r2, #1
 8022db6:	4648      	mov	r0, r9
 8022db8:	f000 fbb2 	bl	8023520 <__lshift>
 8022dbc:	4621      	mov	r1, r4
 8022dbe:	9001      	str	r0, [sp, #4]
 8022dc0:	f000 fc1a 	bl	80235f8 <__mcmp>
 8022dc4:	2800      	cmp	r0, #0
 8022dc6:	dc03      	bgt.n	8022dd0 <_dtoa_r+0x978>
 8022dc8:	d1e2      	bne.n	8022d90 <_dtoa_r+0x938>
 8022dca:	f01a 0f01 	tst.w	sl, #1
 8022dce:	d0df      	beq.n	8022d90 <_dtoa_r+0x938>
 8022dd0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8022dd4:	d1d9      	bne.n	8022d8a <_dtoa_r+0x932>
 8022dd6:	2339      	movs	r3, #57	@ 0x39
 8022dd8:	f88b 3000 	strb.w	r3, [fp]
 8022ddc:	4633      	mov	r3, r6
 8022dde:	461e      	mov	r6, r3
 8022de0:	3b01      	subs	r3, #1
 8022de2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8022de6:	2a39      	cmp	r2, #57	@ 0x39
 8022de8:	d053      	beq.n	8022e92 <_dtoa_r+0xa3a>
 8022dea:	3201      	adds	r2, #1
 8022dec:	701a      	strb	r2, [r3, #0]
 8022dee:	e60c      	b.n	8022a0a <_dtoa_r+0x5b2>
 8022df0:	2a00      	cmp	r2, #0
 8022df2:	dd07      	ble.n	8022e04 <_dtoa_r+0x9ac>
 8022df4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8022df8:	d0ed      	beq.n	8022dd6 <_dtoa_r+0x97e>
 8022dfa:	f10a 0301 	add.w	r3, sl, #1
 8022dfe:	f88b 3000 	strb.w	r3, [fp]
 8022e02:	e602      	b.n	8022a0a <_dtoa_r+0x5b2>
 8022e04:	9b05      	ldr	r3, [sp, #20]
 8022e06:	9a05      	ldr	r2, [sp, #20]
 8022e08:	f803 ac01 	strb.w	sl, [r3, #-1]
 8022e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e0e:	4293      	cmp	r3, r2
 8022e10:	d029      	beq.n	8022e66 <_dtoa_r+0xa0e>
 8022e12:	9901      	ldr	r1, [sp, #4]
 8022e14:	2300      	movs	r3, #0
 8022e16:	220a      	movs	r2, #10
 8022e18:	4648      	mov	r0, r9
 8022e1a:	f000 f9d5 	bl	80231c8 <__multadd>
 8022e1e:	45a8      	cmp	r8, r5
 8022e20:	9001      	str	r0, [sp, #4]
 8022e22:	f04f 0300 	mov.w	r3, #0
 8022e26:	f04f 020a 	mov.w	r2, #10
 8022e2a:	4641      	mov	r1, r8
 8022e2c:	4648      	mov	r0, r9
 8022e2e:	d107      	bne.n	8022e40 <_dtoa_r+0x9e8>
 8022e30:	f000 f9ca 	bl	80231c8 <__multadd>
 8022e34:	4680      	mov	r8, r0
 8022e36:	4605      	mov	r5, r0
 8022e38:	9b05      	ldr	r3, [sp, #20]
 8022e3a:	3301      	adds	r3, #1
 8022e3c:	9305      	str	r3, [sp, #20]
 8022e3e:	e775      	b.n	8022d2c <_dtoa_r+0x8d4>
 8022e40:	f000 f9c2 	bl	80231c8 <__multadd>
 8022e44:	4629      	mov	r1, r5
 8022e46:	4680      	mov	r8, r0
 8022e48:	2300      	movs	r3, #0
 8022e4a:	220a      	movs	r2, #10
 8022e4c:	4648      	mov	r0, r9
 8022e4e:	f000 f9bb 	bl	80231c8 <__multadd>
 8022e52:	4605      	mov	r5, r0
 8022e54:	e7f0      	b.n	8022e38 <_dtoa_r+0x9e0>
 8022e56:	f1bb 0f00 	cmp.w	fp, #0
 8022e5a:	bfcc      	ite	gt
 8022e5c:	465e      	movgt	r6, fp
 8022e5e:	2601      	movle	r6, #1
 8022e60:	443e      	add	r6, r7
 8022e62:	f04f 0800 	mov.w	r8, #0
 8022e66:	9901      	ldr	r1, [sp, #4]
 8022e68:	2201      	movs	r2, #1
 8022e6a:	4648      	mov	r0, r9
 8022e6c:	f000 fb58 	bl	8023520 <__lshift>
 8022e70:	4621      	mov	r1, r4
 8022e72:	9001      	str	r0, [sp, #4]
 8022e74:	f000 fbc0 	bl	80235f8 <__mcmp>
 8022e78:	2800      	cmp	r0, #0
 8022e7a:	dcaf      	bgt.n	8022ddc <_dtoa_r+0x984>
 8022e7c:	d102      	bne.n	8022e84 <_dtoa_r+0xa2c>
 8022e7e:	f01a 0f01 	tst.w	sl, #1
 8022e82:	d1ab      	bne.n	8022ddc <_dtoa_r+0x984>
 8022e84:	4633      	mov	r3, r6
 8022e86:	461e      	mov	r6, r3
 8022e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022e8c:	2a30      	cmp	r2, #48	@ 0x30
 8022e8e:	d0fa      	beq.n	8022e86 <_dtoa_r+0xa2e>
 8022e90:	e5bb      	b.n	8022a0a <_dtoa_r+0x5b2>
 8022e92:	429f      	cmp	r7, r3
 8022e94:	d1a3      	bne.n	8022dde <_dtoa_r+0x986>
 8022e96:	9b04      	ldr	r3, [sp, #16]
 8022e98:	3301      	adds	r3, #1
 8022e9a:	9304      	str	r3, [sp, #16]
 8022e9c:	2331      	movs	r3, #49	@ 0x31
 8022e9e:	703b      	strb	r3, [r7, #0]
 8022ea0:	e5b3      	b.n	8022a0a <_dtoa_r+0x5b2>
 8022ea2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022ea4:	4f16      	ldr	r7, [pc, #88]	@ (8022f00 <_dtoa_r+0xaa8>)
 8022ea6:	b11b      	cbz	r3, 8022eb0 <_dtoa_r+0xa58>
 8022ea8:	f107 0308 	add.w	r3, r7, #8
 8022eac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022eae:	6013      	str	r3, [r2, #0]
 8022eb0:	4638      	mov	r0, r7
 8022eb2:	b011      	add	sp, #68	@ 0x44
 8022eb4:	ecbd 8b02 	vpop	{d8}
 8022eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ebc:	9b07      	ldr	r3, [sp, #28]
 8022ebe:	2b01      	cmp	r3, #1
 8022ec0:	f77f ae36 	ble.w	8022b30 <_dtoa_r+0x6d8>
 8022ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022ec8:	2001      	movs	r0, #1
 8022eca:	e656      	b.n	8022b7a <_dtoa_r+0x722>
 8022ecc:	f1bb 0f00 	cmp.w	fp, #0
 8022ed0:	f77f aed7 	ble.w	8022c82 <_dtoa_r+0x82a>
 8022ed4:	463e      	mov	r6, r7
 8022ed6:	9801      	ldr	r0, [sp, #4]
 8022ed8:	4621      	mov	r1, r4
 8022eda:	f7ff fa35 	bl	8022348 <quorem>
 8022ede:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8022ee2:	f806 ab01 	strb.w	sl, [r6], #1
 8022ee6:	1bf2      	subs	r2, r6, r7
 8022ee8:	4593      	cmp	fp, r2
 8022eea:	ddb4      	ble.n	8022e56 <_dtoa_r+0x9fe>
 8022eec:	9901      	ldr	r1, [sp, #4]
 8022eee:	2300      	movs	r3, #0
 8022ef0:	220a      	movs	r2, #10
 8022ef2:	4648      	mov	r0, r9
 8022ef4:	f000 f968 	bl	80231c8 <__multadd>
 8022ef8:	9001      	str	r0, [sp, #4]
 8022efa:	e7ec      	b.n	8022ed6 <_dtoa_r+0xa7e>
 8022efc:	08028da5 	.word	0x08028da5
 8022f00:	08028d40 	.word	0x08028d40

08022f04 <_free_r>:
 8022f04:	b538      	push	{r3, r4, r5, lr}
 8022f06:	4605      	mov	r5, r0
 8022f08:	2900      	cmp	r1, #0
 8022f0a:	d041      	beq.n	8022f90 <_free_r+0x8c>
 8022f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022f10:	1f0c      	subs	r4, r1, #4
 8022f12:	2b00      	cmp	r3, #0
 8022f14:	bfb8      	it	lt
 8022f16:	18e4      	addlt	r4, r4, r3
 8022f18:	f000 f8e8 	bl	80230ec <__malloc_lock>
 8022f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8022f94 <_free_r+0x90>)
 8022f1e:	6813      	ldr	r3, [r2, #0]
 8022f20:	b933      	cbnz	r3, 8022f30 <_free_r+0x2c>
 8022f22:	6063      	str	r3, [r4, #4]
 8022f24:	6014      	str	r4, [r2, #0]
 8022f26:	4628      	mov	r0, r5
 8022f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f2c:	f000 b8e4 	b.w	80230f8 <__malloc_unlock>
 8022f30:	42a3      	cmp	r3, r4
 8022f32:	d908      	bls.n	8022f46 <_free_r+0x42>
 8022f34:	6820      	ldr	r0, [r4, #0]
 8022f36:	1821      	adds	r1, r4, r0
 8022f38:	428b      	cmp	r3, r1
 8022f3a:	bf01      	itttt	eq
 8022f3c:	6819      	ldreq	r1, [r3, #0]
 8022f3e:	685b      	ldreq	r3, [r3, #4]
 8022f40:	1809      	addeq	r1, r1, r0
 8022f42:	6021      	streq	r1, [r4, #0]
 8022f44:	e7ed      	b.n	8022f22 <_free_r+0x1e>
 8022f46:	461a      	mov	r2, r3
 8022f48:	685b      	ldr	r3, [r3, #4]
 8022f4a:	b10b      	cbz	r3, 8022f50 <_free_r+0x4c>
 8022f4c:	42a3      	cmp	r3, r4
 8022f4e:	d9fa      	bls.n	8022f46 <_free_r+0x42>
 8022f50:	6811      	ldr	r1, [r2, #0]
 8022f52:	1850      	adds	r0, r2, r1
 8022f54:	42a0      	cmp	r0, r4
 8022f56:	d10b      	bne.n	8022f70 <_free_r+0x6c>
 8022f58:	6820      	ldr	r0, [r4, #0]
 8022f5a:	4401      	add	r1, r0
 8022f5c:	1850      	adds	r0, r2, r1
 8022f5e:	4283      	cmp	r3, r0
 8022f60:	6011      	str	r1, [r2, #0]
 8022f62:	d1e0      	bne.n	8022f26 <_free_r+0x22>
 8022f64:	6818      	ldr	r0, [r3, #0]
 8022f66:	685b      	ldr	r3, [r3, #4]
 8022f68:	6053      	str	r3, [r2, #4]
 8022f6a:	4408      	add	r0, r1
 8022f6c:	6010      	str	r0, [r2, #0]
 8022f6e:	e7da      	b.n	8022f26 <_free_r+0x22>
 8022f70:	d902      	bls.n	8022f78 <_free_r+0x74>
 8022f72:	230c      	movs	r3, #12
 8022f74:	602b      	str	r3, [r5, #0]
 8022f76:	e7d6      	b.n	8022f26 <_free_r+0x22>
 8022f78:	6820      	ldr	r0, [r4, #0]
 8022f7a:	1821      	adds	r1, r4, r0
 8022f7c:	428b      	cmp	r3, r1
 8022f7e:	bf04      	itt	eq
 8022f80:	6819      	ldreq	r1, [r3, #0]
 8022f82:	685b      	ldreq	r3, [r3, #4]
 8022f84:	6063      	str	r3, [r4, #4]
 8022f86:	bf04      	itt	eq
 8022f88:	1809      	addeq	r1, r1, r0
 8022f8a:	6021      	streq	r1, [r4, #0]
 8022f8c:	6054      	str	r4, [r2, #4]
 8022f8e:	e7ca      	b.n	8022f26 <_free_r+0x22>
 8022f90:	bd38      	pop	{r3, r4, r5, pc}
 8022f92:	bf00      	nop
 8022f94:	24012854 	.word	0x24012854

08022f98 <malloc>:
 8022f98:	4b02      	ldr	r3, [pc, #8]	@ (8022fa4 <malloc+0xc>)
 8022f9a:	4601      	mov	r1, r0
 8022f9c:	6818      	ldr	r0, [r3, #0]
 8022f9e:	f000 b825 	b.w	8022fec <_malloc_r>
 8022fa2:	bf00      	nop
 8022fa4:	24000060 	.word	0x24000060

08022fa8 <sbrk_aligned>:
 8022fa8:	b570      	push	{r4, r5, r6, lr}
 8022faa:	4e0f      	ldr	r6, [pc, #60]	@ (8022fe8 <sbrk_aligned+0x40>)
 8022fac:	460c      	mov	r4, r1
 8022fae:	6831      	ldr	r1, [r6, #0]
 8022fb0:	4605      	mov	r5, r0
 8022fb2:	b911      	cbnz	r1, 8022fba <sbrk_aligned+0x12>
 8022fb4:	f001 f804 	bl	8023fc0 <_sbrk_r>
 8022fb8:	6030      	str	r0, [r6, #0]
 8022fba:	4621      	mov	r1, r4
 8022fbc:	4628      	mov	r0, r5
 8022fbe:	f000 ffff 	bl	8023fc0 <_sbrk_r>
 8022fc2:	1c43      	adds	r3, r0, #1
 8022fc4:	d103      	bne.n	8022fce <sbrk_aligned+0x26>
 8022fc6:	f04f 34ff 	mov.w	r4, #4294967295
 8022fca:	4620      	mov	r0, r4
 8022fcc:	bd70      	pop	{r4, r5, r6, pc}
 8022fce:	1cc4      	adds	r4, r0, #3
 8022fd0:	f024 0403 	bic.w	r4, r4, #3
 8022fd4:	42a0      	cmp	r0, r4
 8022fd6:	d0f8      	beq.n	8022fca <sbrk_aligned+0x22>
 8022fd8:	1a21      	subs	r1, r4, r0
 8022fda:	4628      	mov	r0, r5
 8022fdc:	f000 fff0 	bl	8023fc0 <_sbrk_r>
 8022fe0:	3001      	adds	r0, #1
 8022fe2:	d1f2      	bne.n	8022fca <sbrk_aligned+0x22>
 8022fe4:	e7ef      	b.n	8022fc6 <sbrk_aligned+0x1e>
 8022fe6:	bf00      	nop
 8022fe8:	24012850 	.word	0x24012850

08022fec <_malloc_r>:
 8022fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ff0:	1ccd      	adds	r5, r1, #3
 8022ff2:	f025 0503 	bic.w	r5, r5, #3
 8022ff6:	3508      	adds	r5, #8
 8022ff8:	2d0c      	cmp	r5, #12
 8022ffa:	bf38      	it	cc
 8022ffc:	250c      	movcc	r5, #12
 8022ffe:	2d00      	cmp	r5, #0
 8023000:	4606      	mov	r6, r0
 8023002:	db01      	blt.n	8023008 <_malloc_r+0x1c>
 8023004:	42a9      	cmp	r1, r5
 8023006:	d904      	bls.n	8023012 <_malloc_r+0x26>
 8023008:	230c      	movs	r3, #12
 802300a:	6033      	str	r3, [r6, #0]
 802300c:	2000      	movs	r0, #0
 802300e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80230e8 <_malloc_r+0xfc>
 8023016:	f000 f869 	bl	80230ec <__malloc_lock>
 802301a:	f8d8 3000 	ldr.w	r3, [r8]
 802301e:	461c      	mov	r4, r3
 8023020:	bb44      	cbnz	r4, 8023074 <_malloc_r+0x88>
 8023022:	4629      	mov	r1, r5
 8023024:	4630      	mov	r0, r6
 8023026:	f7ff ffbf 	bl	8022fa8 <sbrk_aligned>
 802302a:	1c43      	adds	r3, r0, #1
 802302c:	4604      	mov	r4, r0
 802302e:	d158      	bne.n	80230e2 <_malloc_r+0xf6>
 8023030:	f8d8 4000 	ldr.w	r4, [r8]
 8023034:	4627      	mov	r7, r4
 8023036:	2f00      	cmp	r7, #0
 8023038:	d143      	bne.n	80230c2 <_malloc_r+0xd6>
 802303a:	2c00      	cmp	r4, #0
 802303c:	d04b      	beq.n	80230d6 <_malloc_r+0xea>
 802303e:	6823      	ldr	r3, [r4, #0]
 8023040:	4639      	mov	r1, r7
 8023042:	4630      	mov	r0, r6
 8023044:	eb04 0903 	add.w	r9, r4, r3
 8023048:	f000 ffba 	bl	8023fc0 <_sbrk_r>
 802304c:	4581      	cmp	r9, r0
 802304e:	d142      	bne.n	80230d6 <_malloc_r+0xea>
 8023050:	6821      	ldr	r1, [r4, #0]
 8023052:	1a6d      	subs	r5, r5, r1
 8023054:	4629      	mov	r1, r5
 8023056:	4630      	mov	r0, r6
 8023058:	f7ff ffa6 	bl	8022fa8 <sbrk_aligned>
 802305c:	3001      	adds	r0, #1
 802305e:	d03a      	beq.n	80230d6 <_malloc_r+0xea>
 8023060:	6823      	ldr	r3, [r4, #0]
 8023062:	442b      	add	r3, r5
 8023064:	6023      	str	r3, [r4, #0]
 8023066:	f8d8 3000 	ldr.w	r3, [r8]
 802306a:	685a      	ldr	r2, [r3, #4]
 802306c:	bb62      	cbnz	r2, 80230c8 <_malloc_r+0xdc>
 802306e:	f8c8 7000 	str.w	r7, [r8]
 8023072:	e00f      	b.n	8023094 <_malloc_r+0xa8>
 8023074:	6822      	ldr	r2, [r4, #0]
 8023076:	1b52      	subs	r2, r2, r5
 8023078:	d420      	bmi.n	80230bc <_malloc_r+0xd0>
 802307a:	2a0b      	cmp	r2, #11
 802307c:	d917      	bls.n	80230ae <_malloc_r+0xc2>
 802307e:	1961      	adds	r1, r4, r5
 8023080:	42a3      	cmp	r3, r4
 8023082:	6025      	str	r5, [r4, #0]
 8023084:	bf18      	it	ne
 8023086:	6059      	strne	r1, [r3, #4]
 8023088:	6863      	ldr	r3, [r4, #4]
 802308a:	bf08      	it	eq
 802308c:	f8c8 1000 	streq.w	r1, [r8]
 8023090:	5162      	str	r2, [r4, r5]
 8023092:	604b      	str	r3, [r1, #4]
 8023094:	4630      	mov	r0, r6
 8023096:	f000 f82f 	bl	80230f8 <__malloc_unlock>
 802309a:	f104 000b 	add.w	r0, r4, #11
 802309e:	1d23      	adds	r3, r4, #4
 80230a0:	f020 0007 	bic.w	r0, r0, #7
 80230a4:	1ac2      	subs	r2, r0, r3
 80230a6:	bf1c      	itt	ne
 80230a8:	1a1b      	subne	r3, r3, r0
 80230aa:	50a3      	strne	r3, [r4, r2]
 80230ac:	e7af      	b.n	802300e <_malloc_r+0x22>
 80230ae:	6862      	ldr	r2, [r4, #4]
 80230b0:	42a3      	cmp	r3, r4
 80230b2:	bf0c      	ite	eq
 80230b4:	f8c8 2000 	streq.w	r2, [r8]
 80230b8:	605a      	strne	r2, [r3, #4]
 80230ba:	e7eb      	b.n	8023094 <_malloc_r+0xa8>
 80230bc:	4623      	mov	r3, r4
 80230be:	6864      	ldr	r4, [r4, #4]
 80230c0:	e7ae      	b.n	8023020 <_malloc_r+0x34>
 80230c2:	463c      	mov	r4, r7
 80230c4:	687f      	ldr	r7, [r7, #4]
 80230c6:	e7b6      	b.n	8023036 <_malloc_r+0x4a>
 80230c8:	461a      	mov	r2, r3
 80230ca:	685b      	ldr	r3, [r3, #4]
 80230cc:	42a3      	cmp	r3, r4
 80230ce:	d1fb      	bne.n	80230c8 <_malloc_r+0xdc>
 80230d0:	2300      	movs	r3, #0
 80230d2:	6053      	str	r3, [r2, #4]
 80230d4:	e7de      	b.n	8023094 <_malloc_r+0xa8>
 80230d6:	230c      	movs	r3, #12
 80230d8:	6033      	str	r3, [r6, #0]
 80230da:	4630      	mov	r0, r6
 80230dc:	f000 f80c 	bl	80230f8 <__malloc_unlock>
 80230e0:	e794      	b.n	802300c <_malloc_r+0x20>
 80230e2:	6005      	str	r5, [r0, #0]
 80230e4:	e7d6      	b.n	8023094 <_malloc_r+0xa8>
 80230e6:	bf00      	nop
 80230e8:	24012854 	.word	0x24012854

080230ec <__malloc_lock>:
 80230ec:	4801      	ldr	r0, [pc, #4]	@ (80230f4 <__malloc_lock+0x8>)
 80230ee:	f7ff b8fc 	b.w	80222ea <__retarget_lock_acquire_recursive>
 80230f2:	bf00      	nop
 80230f4:	2401284c 	.word	0x2401284c

080230f8 <__malloc_unlock>:
 80230f8:	4801      	ldr	r0, [pc, #4]	@ (8023100 <__malloc_unlock+0x8>)
 80230fa:	f7ff b8f7 	b.w	80222ec <__retarget_lock_release_recursive>
 80230fe:	bf00      	nop
 8023100:	2401284c 	.word	0x2401284c

08023104 <_Balloc>:
 8023104:	b570      	push	{r4, r5, r6, lr}
 8023106:	69c6      	ldr	r6, [r0, #28]
 8023108:	4604      	mov	r4, r0
 802310a:	460d      	mov	r5, r1
 802310c:	b976      	cbnz	r6, 802312c <_Balloc+0x28>
 802310e:	2010      	movs	r0, #16
 8023110:	f7ff ff42 	bl	8022f98 <malloc>
 8023114:	4602      	mov	r2, r0
 8023116:	61e0      	str	r0, [r4, #28]
 8023118:	b920      	cbnz	r0, 8023124 <_Balloc+0x20>
 802311a:	4b18      	ldr	r3, [pc, #96]	@ (802317c <_Balloc+0x78>)
 802311c:	4818      	ldr	r0, [pc, #96]	@ (8023180 <_Balloc+0x7c>)
 802311e:	216b      	movs	r1, #107	@ 0x6b
 8023120:	f7ff f8f4 	bl	802230c <__assert_func>
 8023124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023128:	6006      	str	r6, [r0, #0]
 802312a:	60c6      	str	r6, [r0, #12]
 802312c:	69e6      	ldr	r6, [r4, #28]
 802312e:	68f3      	ldr	r3, [r6, #12]
 8023130:	b183      	cbz	r3, 8023154 <_Balloc+0x50>
 8023132:	69e3      	ldr	r3, [r4, #28]
 8023134:	68db      	ldr	r3, [r3, #12]
 8023136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802313a:	b9b8      	cbnz	r0, 802316c <_Balloc+0x68>
 802313c:	2101      	movs	r1, #1
 802313e:	fa01 f605 	lsl.w	r6, r1, r5
 8023142:	1d72      	adds	r2, r6, #5
 8023144:	0092      	lsls	r2, r2, #2
 8023146:	4620      	mov	r0, r4
 8023148:	f000 ff51 	bl	8023fee <_calloc_r>
 802314c:	b160      	cbz	r0, 8023168 <_Balloc+0x64>
 802314e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023152:	e00e      	b.n	8023172 <_Balloc+0x6e>
 8023154:	2221      	movs	r2, #33	@ 0x21
 8023156:	2104      	movs	r1, #4
 8023158:	4620      	mov	r0, r4
 802315a:	f000 ff48 	bl	8023fee <_calloc_r>
 802315e:	69e3      	ldr	r3, [r4, #28]
 8023160:	60f0      	str	r0, [r6, #12]
 8023162:	68db      	ldr	r3, [r3, #12]
 8023164:	2b00      	cmp	r3, #0
 8023166:	d1e4      	bne.n	8023132 <_Balloc+0x2e>
 8023168:	2000      	movs	r0, #0
 802316a:	bd70      	pop	{r4, r5, r6, pc}
 802316c:	6802      	ldr	r2, [r0, #0]
 802316e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023172:	2300      	movs	r3, #0
 8023174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023178:	e7f7      	b.n	802316a <_Balloc+0x66>
 802317a:	bf00      	nop
 802317c:	08028b60 	.word	0x08028b60
 8023180:	08028db6 	.word	0x08028db6

08023184 <_Bfree>:
 8023184:	b570      	push	{r4, r5, r6, lr}
 8023186:	69c6      	ldr	r6, [r0, #28]
 8023188:	4605      	mov	r5, r0
 802318a:	460c      	mov	r4, r1
 802318c:	b976      	cbnz	r6, 80231ac <_Bfree+0x28>
 802318e:	2010      	movs	r0, #16
 8023190:	f7ff ff02 	bl	8022f98 <malloc>
 8023194:	4602      	mov	r2, r0
 8023196:	61e8      	str	r0, [r5, #28]
 8023198:	b920      	cbnz	r0, 80231a4 <_Bfree+0x20>
 802319a:	4b09      	ldr	r3, [pc, #36]	@ (80231c0 <_Bfree+0x3c>)
 802319c:	4809      	ldr	r0, [pc, #36]	@ (80231c4 <_Bfree+0x40>)
 802319e:	218f      	movs	r1, #143	@ 0x8f
 80231a0:	f7ff f8b4 	bl	802230c <__assert_func>
 80231a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80231a8:	6006      	str	r6, [r0, #0]
 80231aa:	60c6      	str	r6, [r0, #12]
 80231ac:	b13c      	cbz	r4, 80231be <_Bfree+0x3a>
 80231ae:	69eb      	ldr	r3, [r5, #28]
 80231b0:	6862      	ldr	r2, [r4, #4]
 80231b2:	68db      	ldr	r3, [r3, #12]
 80231b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80231b8:	6021      	str	r1, [r4, #0]
 80231ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80231be:	bd70      	pop	{r4, r5, r6, pc}
 80231c0:	08028b60 	.word	0x08028b60
 80231c4:	08028db6 	.word	0x08028db6

080231c8 <__multadd>:
 80231c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231cc:	690d      	ldr	r5, [r1, #16]
 80231ce:	4607      	mov	r7, r0
 80231d0:	460c      	mov	r4, r1
 80231d2:	461e      	mov	r6, r3
 80231d4:	f101 0c14 	add.w	ip, r1, #20
 80231d8:	2000      	movs	r0, #0
 80231da:	f8dc 3000 	ldr.w	r3, [ip]
 80231de:	b299      	uxth	r1, r3
 80231e0:	fb02 6101 	mla	r1, r2, r1, r6
 80231e4:	0c1e      	lsrs	r6, r3, #16
 80231e6:	0c0b      	lsrs	r3, r1, #16
 80231e8:	fb02 3306 	mla	r3, r2, r6, r3
 80231ec:	b289      	uxth	r1, r1
 80231ee:	3001      	adds	r0, #1
 80231f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80231f4:	4285      	cmp	r5, r0
 80231f6:	f84c 1b04 	str.w	r1, [ip], #4
 80231fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80231fe:	dcec      	bgt.n	80231da <__multadd+0x12>
 8023200:	b30e      	cbz	r6, 8023246 <__multadd+0x7e>
 8023202:	68a3      	ldr	r3, [r4, #8]
 8023204:	42ab      	cmp	r3, r5
 8023206:	dc19      	bgt.n	802323c <__multadd+0x74>
 8023208:	6861      	ldr	r1, [r4, #4]
 802320a:	4638      	mov	r0, r7
 802320c:	3101      	adds	r1, #1
 802320e:	f7ff ff79 	bl	8023104 <_Balloc>
 8023212:	4680      	mov	r8, r0
 8023214:	b928      	cbnz	r0, 8023222 <__multadd+0x5a>
 8023216:	4602      	mov	r2, r0
 8023218:	4b0c      	ldr	r3, [pc, #48]	@ (802324c <__multadd+0x84>)
 802321a:	480d      	ldr	r0, [pc, #52]	@ (8023250 <__multadd+0x88>)
 802321c:	21ba      	movs	r1, #186	@ 0xba
 802321e:	f7ff f875 	bl	802230c <__assert_func>
 8023222:	6922      	ldr	r2, [r4, #16]
 8023224:	3202      	adds	r2, #2
 8023226:	f104 010c 	add.w	r1, r4, #12
 802322a:	0092      	lsls	r2, r2, #2
 802322c:	300c      	adds	r0, #12
 802322e:	f7ff f85e 	bl	80222ee <memcpy>
 8023232:	4621      	mov	r1, r4
 8023234:	4638      	mov	r0, r7
 8023236:	f7ff ffa5 	bl	8023184 <_Bfree>
 802323a:	4644      	mov	r4, r8
 802323c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023240:	3501      	adds	r5, #1
 8023242:	615e      	str	r6, [r3, #20]
 8023244:	6125      	str	r5, [r4, #16]
 8023246:	4620      	mov	r0, r4
 8023248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802324c:	08028da5 	.word	0x08028da5
 8023250:	08028db6 	.word	0x08028db6

08023254 <__hi0bits>:
 8023254:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8023258:	4603      	mov	r3, r0
 802325a:	bf36      	itet	cc
 802325c:	0403      	lslcc	r3, r0, #16
 802325e:	2000      	movcs	r0, #0
 8023260:	2010      	movcc	r0, #16
 8023262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8023266:	bf3c      	itt	cc
 8023268:	021b      	lslcc	r3, r3, #8
 802326a:	3008      	addcc	r0, #8
 802326c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023270:	bf3c      	itt	cc
 8023272:	011b      	lslcc	r3, r3, #4
 8023274:	3004      	addcc	r0, #4
 8023276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802327a:	bf3c      	itt	cc
 802327c:	009b      	lslcc	r3, r3, #2
 802327e:	3002      	addcc	r0, #2
 8023280:	2b00      	cmp	r3, #0
 8023282:	db05      	blt.n	8023290 <__hi0bits+0x3c>
 8023284:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8023288:	f100 0001 	add.w	r0, r0, #1
 802328c:	bf08      	it	eq
 802328e:	2020      	moveq	r0, #32
 8023290:	4770      	bx	lr

08023292 <__lo0bits>:
 8023292:	6803      	ldr	r3, [r0, #0]
 8023294:	4602      	mov	r2, r0
 8023296:	f013 0007 	ands.w	r0, r3, #7
 802329a:	d00b      	beq.n	80232b4 <__lo0bits+0x22>
 802329c:	07d9      	lsls	r1, r3, #31
 802329e:	d421      	bmi.n	80232e4 <__lo0bits+0x52>
 80232a0:	0798      	lsls	r0, r3, #30
 80232a2:	bf49      	itett	mi
 80232a4:	085b      	lsrmi	r3, r3, #1
 80232a6:	089b      	lsrpl	r3, r3, #2
 80232a8:	2001      	movmi	r0, #1
 80232aa:	6013      	strmi	r3, [r2, #0]
 80232ac:	bf5c      	itt	pl
 80232ae:	6013      	strpl	r3, [r2, #0]
 80232b0:	2002      	movpl	r0, #2
 80232b2:	4770      	bx	lr
 80232b4:	b299      	uxth	r1, r3
 80232b6:	b909      	cbnz	r1, 80232bc <__lo0bits+0x2a>
 80232b8:	0c1b      	lsrs	r3, r3, #16
 80232ba:	2010      	movs	r0, #16
 80232bc:	b2d9      	uxtb	r1, r3
 80232be:	b909      	cbnz	r1, 80232c4 <__lo0bits+0x32>
 80232c0:	3008      	adds	r0, #8
 80232c2:	0a1b      	lsrs	r3, r3, #8
 80232c4:	0719      	lsls	r1, r3, #28
 80232c6:	bf04      	itt	eq
 80232c8:	091b      	lsreq	r3, r3, #4
 80232ca:	3004      	addeq	r0, #4
 80232cc:	0799      	lsls	r1, r3, #30
 80232ce:	bf04      	itt	eq
 80232d0:	089b      	lsreq	r3, r3, #2
 80232d2:	3002      	addeq	r0, #2
 80232d4:	07d9      	lsls	r1, r3, #31
 80232d6:	d403      	bmi.n	80232e0 <__lo0bits+0x4e>
 80232d8:	085b      	lsrs	r3, r3, #1
 80232da:	f100 0001 	add.w	r0, r0, #1
 80232de:	d003      	beq.n	80232e8 <__lo0bits+0x56>
 80232e0:	6013      	str	r3, [r2, #0]
 80232e2:	4770      	bx	lr
 80232e4:	2000      	movs	r0, #0
 80232e6:	4770      	bx	lr
 80232e8:	2020      	movs	r0, #32
 80232ea:	4770      	bx	lr

080232ec <__i2b>:
 80232ec:	b510      	push	{r4, lr}
 80232ee:	460c      	mov	r4, r1
 80232f0:	2101      	movs	r1, #1
 80232f2:	f7ff ff07 	bl	8023104 <_Balloc>
 80232f6:	4602      	mov	r2, r0
 80232f8:	b928      	cbnz	r0, 8023306 <__i2b+0x1a>
 80232fa:	4b05      	ldr	r3, [pc, #20]	@ (8023310 <__i2b+0x24>)
 80232fc:	4805      	ldr	r0, [pc, #20]	@ (8023314 <__i2b+0x28>)
 80232fe:	f240 1145 	movw	r1, #325	@ 0x145
 8023302:	f7ff f803 	bl	802230c <__assert_func>
 8023306:	2301      	movs	r3, #1
 8023308:	6144      	str	r4, [r0, #20]
 802330a:	6103      	str	r3, [r0, #16]
 802330c:	bd10      	pop	{r4, pc}
 802330e:	bf00      	nop
 8023310:	08028da5 	.word	0x08028da5
 8023314:	08028db6 	.word	0x08028db6

08023318 <__multiply>:
 8023318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802331c:	4614      	mov	r4, r2
 802331e:	690a      	ldr	r2, [r1, #16]
 8023320:	6923      	ldr	r3, [r4, #16]
 8023322:	429a      	cmp	r2, r3
 8023324:	bfa8      	it	ge
 8023326:	4623      	movge	r3, r4
 8023328:	460f      	mov	r7, r1
 802332a:	bfa4      	itt	ge
 802332c:	460c      	movge	r4, r1
 802332e:	461f      	movge	r7, r3
 8023330:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8023334:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8023338:	68a3      	ldr	r3, [r4, #8]
 802333a:	6861      	ldr	r1, [r4, #4]
 802333c:	eb0a 0609 	add.w	r6, sl, r9
 8023340:	42b3      	cmp	r3, r6
 8023342:	b085      	sub	sp, #20
 8023344:	bfb8      	it	lt
 8023346:	3101      	addlt	r1, #1
 8023348:	f7ff fedc 	bl	8023104 <_Balloc>
 802334c:	b930      	cbnz	r0, 802335c <__multiply+0x44>
 802334e:	4602      	mov	r2, r0
 8023350:	4b44      	ldr	r3, [pc, #272]	@ (8023464 <__multiply+0x14c>)
 8023352:	4845      	ldr	r0, [pc, #276]	@ (8023468 <__multiply+0x150>)
 8023354:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8023358:	f7fe ffd8 	bl	802230c <__assert_func>
 802335c:	f100 0514 	add.w	r5, r0, #20
 8023360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8023364:	462b      	mov	r3, r5
 8023366:	2200      	movs	r2, #0
 8023368:	4543      	cmp	r3, r8
 802336a:	d321      	bcc.n	80233b0 <__multiply+0x98>
 802336c:	f107 0114 	add.w	r1, r7, #20
 8023370:	f104 0214 	add.w	r2, r4, #20
 8023374:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8023378:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802337c:	9302      	str	r3, [sp, #8]
 802337e:	1b13      	subs	r3, r2, r4
 8023380:	3b15      	subs	r3, #21
 8023382:	f023 0303 	bic.w	r3, r3, #3
 8023386:	3304      	adds	r3, #4
 8023388:	f104 0715 	add.w	r7, r4, #21
 802338c:	42ba      	cmp	r2, r7
 802338e:	bf38      	it	cc
 8023390:	2304      	movcc	r3, #4
 8023392:	9301      	str	r3, [sp, #4]
 8023394:	9b02      	ldr	r3, [sp, #8]
 8023396:	9103      	str	r1, [sp, #12]
 8023398:	428b      	cmp	r3, r1
 802339a:	d80c      	bhi.n	80233b6 <__multiply+0x9e>
 802339c:	2e00      	cmp	r6, #0
 802339e:	dd03      	ble.n	80233a8 <__multiply+0x90>
 80233a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80233a4:	2b00      	cmp	r3, #0
 80233a6:	d05b      	beq.n	8023460 <__multiply+0x148>
 80233a8:	6106      	str	r6, [r0, #16]
 80233aa:	b005      	add	sp, #20
 80233ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233b0:	f843 2b04 	str.w	r2, [r3], #4
 80233b4:	e7d8      	b.n	8023368 <__multiply+0x50>
 80233b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80233ba:	f1ba 0f00 	cmp.w	sl, #0
 80233be:	d024      	beq.n	802340a <__multiply+0xf2>
 80233c0:	f104 0e14 	add.w	lr, r4, #20
 80233c4:	46a9      	mov	r9, r5
 80233c6:	f04f 0c00 	mov.w	ip, #0
 80233ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80233ce:	f8d9 3000 	ldr.w	r3, [r9]
 80233d2:	fa1f fb87 	uxth.w	fp, r7
 80233d6:	b29b      	uxth	r3, r3
 80233d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80233dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80233e0:	f8d9 7000 	ldr.w	r7, [r9]
 80233e4:	4463      	add	r3, ip
 80233e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80233ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80233ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80233f2:	b29b      	uxth	r3, r3
 80233f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80233f8:	4572      	cmp	r2, lr
 80233fa:	f849 3b04 	str.w	r3, [r9], #4
 80233fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8023402:	d8e2      	bhi.n	80233ca <__multiply+0xb2>
 8023404:	9b01      	ldr	r3, [sp, #4]
 8023406:	f845 c003 	str.w	ip, [r5, r3]
 802340a:	9b03      	ldr	r3, [sp, #12]
 802340c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8023410:	3104      	adds	r1, #4
 8023412:	f1b9 0f00 	cmp.w	r9, #0
 8023416:	d021      	beq.n	802345c <__multiply+0x144>
 8023418:	682b      	ldr	r3, [r5, #0]
 802341a:	f104 0c14 	add.w	ip, r4, #20
 802341e:	46ae      	mov	lr, r5
 8023420:	f04f 0a00 	mov.w	sl, #0
 8023424:	f8bc b000 	ldrh.w	fp, [ip]
 8023428:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802342c:	fb09 770b 	mla	r7, r9, fp, r7
 8023430:	4457      	add	r7, sl
 8023432:	b29b      	uxth	r3, r3
 8023434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8023438:	f84e 3b04 	str.w	r3, [lr], #4
 802343c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8023440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023444:	f8be 3000 	ldrh.w	r3, [lr]
 8023448:	fb09 330a 	mla	r3, r9, sl, r3
 802344c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8023450:	4562      	cmp	r2, ip
 8023452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023456:	d8e5      	bhi.n	8023424 <__multiply+0x10c>
 8023458:	9f01      	ldr	r7, [sp, #4]
 802345a:	51eb      	str	r3, [r5, r7]
 802345c:	3504      	adds	r5, #4
 802345e:	e799      	b.n	8023394 <__multiply+0x7c>
 8023460:	3e01      	subs	r6, #1
 8023462:	e79b      	b.n	802339c <__multiply+0x84>
 8023464:	08028da5 	.word	0x08028da5
 8023468:	08028db6 	.word	0x08028db6

0802346c <__pow5mult>:
 802346c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023470:	4615      	mov	r5, r2
 8023472:	f012 0203 	ands.w	r2, r2, #3
 8023476:	4607      	mov	r7, r0
 8023478:	460e      	mov	r6, r1
 802347a:	d007      	beq.n	802348c <__pow5mult+0x20>
 802347c:	4c25      	ldr	r4, [pc, #148]	@ (8023514 <__pow5mult+0xa8>)
 802347e:	3a01      	subs	r2, #1
 8023480:	2300      	movs	r3, #0
 8023482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023486:	f7ff fe9f 	bl	80231c8 <__multadd>
 802348a:	4606      	mov	r6, r0
 802348c:	10ad      	asrs	r5, r5, #2
 802348e:	d03d      	beq.n	802350c <__pow5mult+0xa0>
 8023490:	69fc      	ldr	r4, [r7, #28]
 8023492:	b97c      	cbnz	r4, 80234b4 <__pow5mult+0x48>
 8023494:	2010      	movs	r0, #16
 8023496:	f7ff fd7f 	bl	8022f98 <malloc>
 802349a:	4602      	mov	r2, r0
 802349c:	61f8      	str	r0, [r7, #28]
 802349e:	b928      	cbnz	r0, 80234ac <__pow5mult+0x40>
 80234a0:	4b1d      	ldr	r3, [pc, #116]	@ (8023518 <__pow5mult+0xac>)
 80234a2:	481e      	ldr	r0, [pc, #120]	@ (802351c <__pow5mult+0xb0>)
 80234a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80234a8:	f7fe ff30 	bl	802230c <__assert_func>
 80234ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80234b0:	6004      	str	r4, [r0, #0]
 80234b2:	60c4      	str	r4, [r0, #12]
 80234b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80234b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80234bc:	b94c      	cbnz	r4, 80234d2 <__pow5mult+0x66>
 80234be:	f240 2171 	movw	r1, #625	@ 0x271
 80234c2:	4638      	mov	r0, r7
 80234c4:	f7ff ff12 	bl	80232ec <__i2b>
 80234c8:	2300      	movs	r3, #0
 80234ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80234ce:	4604      	mov	r4, r0
 80234d0:	6003      	str	r3, [r0, #0]
 80234d2:	f04f 0900 	mov.w	r9, #0
 80234d6:	07eb      	lsls	r3, r5, #31
 80234d8:	d50a      	bpl.n	80234f0 <__pow5mult+0x84>
 80234da:	4631      	mov	r1, r6
 80234dc:	4622      	mov	r2, r4
 80234de:	4638      	mov	r0, r7
 80234e0:	f7ff ff1a 	bl	8023318 <__multiply>
 80234e4:	4631      	mov	r1, r6
 80234e6:	4680      	mov	r8, r0
 80234e8:	4638      	mov	r0, r7
 80234ea:	f7ff fe4b 	bl	8023184 <_Bfree>
 80234ee:	4646      	mov	r6, r8
 80234f0:	106d      	asrs	r5, r5, #1
 80234f2:	d00b      	beq.n	802350c <__pow5mult+0xa0>
 80234f4:	6820      	ldr	r0, [r4, #0]
 80234f6:	b938      	cbnz	r0, 8023508 <__pow5mult+0x9c>
 80234f8:	4622      	mov	r2, r4
 80234fa:	4621      	mov	r1, r4
 80234fc:	4638      	mov	r0, r7
 80234fe:	f7ff ff0b 	bl	8023318 <__multiply>
 8023502:	6020      	str	r0, [r4, #0]
 8023504:	f8c0 9000 	str.w	r9, [r0]
 8023508:	4604      	mov	r4, r0
 802350a:	e7e4      	b.n	80234d6 <__pow5mult+0x6a>
 802350c:	4630      	mov	r0, r6
 802350e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023512:	bf00      	nop
 8023514:	08028e10 	.word	0x08028e10
 8023518:	08028b60 	.word	0x08028b60
 802351c:	08028db6 	.word	0x08028db6

08023520 <__lshift>:
 8023520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023524:	460c      	mov	r4, r1
 8023526:	6849      	ldr	r1, [r1, #4]
 8023528:	6923      	ldr	r3, [r4, #16]
 802352a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802352e:	68a3      	ldr	r3, [r4, #8]
 8023530:	4607      	mov	r7, r0
 8023532:	4691      	mov	r9, r2
 8023534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023538:	f108 0601 	add.w	r6, r8, #1
 802353c:	42b3      	cmp	r3, r6
 802353e:	db0b      	blt.n	8023558 <__lshift+0x38>
 8023540:	4638      	mov	r0, r7
 8023542:	f7ff fddf 	bl	8023104 <_Balloc>
 8023546:	4605      	mov	r5, r0
 8023548:	b948      	cbnz	r0, 802355e <__lshift+0x3e>
 802354a:	4602      	mov	r2, r0
 802354c:	4b28      	ldr	r3, [pc, #160]	@ (80235f0 <__lshift+0xd0>)
 802354e:	4829      	ldr	r0, [pc, #164]	@ (80235f4 <__lshift+0xd4>)
 8023550:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8023554:	f7fe feda 	bl	802230c <__assert_func>
 8023558:	3101      	adds	r1, #1
 802355a:	005b      	lsls	r3, r3, #1
 802355c:	e7ee      	b.n	802353c <__lshift+0x1c>
 802355e:	2300      	movs	r3, #0
 8023560:	f100 0114 	add.w	r1, r0, #20
 8023564:	f100 0210 	add.w	r2, r0, #16
 8023568:	4618      	mov	r0, r3
 802356a:	4553      	cmp	r3, sl
 802356c:	db33      	blt.n	80235d6 <__lshift+0xb6>
 802356e:	6920      	ldr	r0, [r4, #16]
 8023570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023574:	f104 0314 	add.w	r3, r4, #20
 8023578:	f019 091f 	ands.w	r9, r9, #31
 802357c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023584:	d02b      	beq.n	80235de <__lshift+0xbe>
 8023586:	f1c9 0e20 	rsb	lr, r9, #32
 802358a:	468a      	mov	sl, r1
 802358c:	2200      	movs	r2, #0
 802358e:	6818      	ldr	r0, [r3, #0]
 8023590:	fa00 f009 	lsl.w	r0, r0, r9
 8023594:	4310      	orrs	r0, r2
 8023596:	f84a 0b04 	str.w	r0, [sl], #4
 802359a:	f853 2b04 	ldr.w	r2, [r3], #4
 802359e:	459c      	cmp	ip, r3
 80235a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80235a4:	d8f3      	bhi.n	802358e <__lshift+0x6e>
 80235a6:	ebac 0304 	sub.w	r3, ip, r4
 80235aa:	3b15      	subs	r3, #21
 80235ac:	f023 0303 	bic.w	r3, r3, #3
 80235b0:	3304      	adds	r3, #4
 80235b2:	f104 0015 	add.w	r0, r4, #21
 80235b6:	4584      	cmp	ip, r0
 80235b8:	bf38      	it	cc
 80235ba:	2304      	movcc	r3, #4
 80235bc:	50ca      	str	r2, [r1, r3]
 80235be:	b10a      	cbz	r2, 80235c4 <__lshift+0xa4>
 80235c0:	f108 0602 	add.w	r6, r8, #2
 80235c4:	3e01      	subs	r6, #1
 80235c6:	4638      	mov	r0, r7
 80235c8:	612e      	str	r6, [r5, #16]
 80235ca:	4621      	mov	r1, r4
 80235cc:	f7ff fdda 	bl	8023184 <_Bfree>
 80235d0:	4628      	mov	r0, r5
 80235d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80235da:	3301      	adds	r3, #1
 80235dc:	e7c5      	b.n	802356a <__lshift+0x4a>
 80235de:	3904      	subs	r1, #4
 80235e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80235e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80235e8:	459c      	cmp	ip, r3
 80235ea:	d8f9      	bhi.n	80235e0 <__lshift+0xc0>
 80235ec:	e7ea      	b.n	80235c4 <__lshift+0xa4>
 80235ee:	bf00      	nop
 80235f0:	08028da5 	.word	0x08028da5
 80235f4:	08028db6 	.word	0x08028db6

080235f8 <__mcmp>:
 80235f8:	690a      	ldr	r2, [r1, #16]
 80235fa:	4603      	mov	r3, r0
 80235fc:	6900      	ldr	r0, [r0, #16]
 80235fe:	1a80      	subs	r0, r0, r2
 8023600:	b530      	push	{r4, r5, lr}
 8023602:	d10e      	bne.n	8023622 <__mcmp+0x2a>
 8023604:	3314      	adds	r3, #20
 8023606:	3114      	adds	r1, #20
 8023608:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802360c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023610:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023614:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023618:	4295      	cmp	r5, r2
 802361a:	d003      	beq.n	8023624 <__mcmp+0x2c>
 802361c:	d205      	bcs.n	802362a <__mcmp+0x32>
 802361e:	f04f 30ff 	mov.w	r0, #4294967295
 8023622:	bd30      	pop	{r4, r5, pc}
 8023624:	42a3      	cmp	r3, r4
 8023626:	d3f3      	bcc.n	8023610 <__mcmp+0x18>
 8023628:	e7fb      	b.n	8023622 <__mcmp+0x2a>
 802362a:	2001      	movs	r0, #1
 802362c:	e7f9      	b.n	8023622 <__mcmp+0x2a>
	...

08023630 <__mdiff>:
 8023630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023634:	4689      	mov	r9, r1
 8023636:	4606      	mov	r6, r0
 8023638:	4611      	mov	r1, r2
 802363a:	4648      	mov	r0, r9
 802363c:	4614      	mov	r4, r2
 802363e:	f7ff ffdb 	bl	80235f8 <__mcmp>
 8023642:	1e05      	subs	r5, r0, #0
 8023644:	d112      	bne.n	802366c <__mdiff+0x3c>
 8023646:	4629      	mov	r1, r5
 8023648:	4630      	mov	r0, r6
 802364a:	f7ff fd5b 	bl	8023104 <_Balloc>
 802364e:	4602      	mov	r2, r0
 8023650:	b928      	cbnz	r0, 802365e <__mdiff+0x2e>
 8023652:	4b3f      	ldr	r3, [pc, #252]	@ (8023750 <__mdiff+0x120>)
 8023654:	f240 2137 	movw	r1, #567	@ 0x237
 8023658:	483e      	ldr	r0, [pc, #248]	@ (8023754 <__mdiff+0x124>)
 802365a:	f7fe fe57 	bl	802230c <__assert_func>
 802365e:	2301      	movs	r3, #1
 8023660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023664:	4610      	mov	r0, r2
 8023666:	b003      	add	sp, #12
 8023668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802366c:	bfbc      	itt	lt
 802366e:	464b      	movlt	r3, r9
 8023670:	46a1      	movlt	r9, r4
 8023672:	4630      	mov	r0, r6
 8023674:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023678:	bfba      	itte	lt
 802367a:	461c      	movlt	r4, r3
 802367c:	2501      	movlt	r5, #1
 802367e:	2500      	movge	r5, #0
 8023680:	f7ff fd40 	bl	8023104 <_Balloc>
 8023684:	4602      	mov	r2, r0
 8023686:	b918      	cbnz	r0, 8023690 <__mdiff+0x60>
 8023688:	4b31      	ldr	r3, [pc, #196]	@ (8023750 <__mdiff+0x120>)
 802368a:	f240 2145 	movw	r1, #581	@ 0x245
 802368e:	e7e3      	b.n	8023658 <__mdiff+0x28>
 8023690:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023694:	6926      	ldr	r6, [r4, #16]
 8023696:	60c5      	str	r5, [r0, #12]
 8023698:	f109 0310 	add.w	r3, r9, #16
 802369c:	f109 0514 	add.w	r5, r9, #20
 80236a0:	f104 0e14 	add.w	lr, r4, #20
 80236a4:	f100 0b14 	add.w	fp, r0, #20
 80236a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80236ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80236b0:	9301      	str	r3, [sp, #4]
 80236b2:	46d9      	mov	r9, fp
 80236b4:	f04f 0c00 	mov.w	ip, #0
 80236b8:	9b01      	ldr	r3, [sp, #4]
 80236ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80236be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80236c2:	9301      	str	r3, [sp, #4]
 80236c4:	fa1f f38a 	uxth.w	r3, sl
 80236c8:	4619      	mov	r1, r3
 80236ca:	b283      	uxth	r3, r0
 80236cc:	1acb      	subs	r3, r1, r3
 80236ce:	0c00      	lsrs	r0, r0, #16
 80236d0:	4463      	add	r3, ip
 80236d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80236d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80236da:	b29b      	uxth	r3, r3
 80236dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80236e0:	4576      	cmp	r6, lr
 80236e2:	f849 3b04 	str.w	r3, [r9], #4
 80236e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80236ea:	d8e5      	bhi.n	80236b8 <__mdiff+0x88>
 80236ec:	1b33      	subs	r3, r6, r4
 80236ee:	3b15      	subs	r3, #21
 80236f0:	f023 0303 	bic.w	r3, r3, #3
 80236f4:	3415      	adds	r4, #21
 80236f6:	3304      	adds	r3, #4
 80236f8:	42a6      	cmp	r6, r4
 80236fa:	bf38      	it	cc
 80236fc:	2304      	movcc	r3, #4
 80236fe:	441d      	add	r5, r3
 8023700:	445b      	add	r3, fp
 8023702:	461e      	mov	r6, r3
 8023704:	462c      	mov	r4, r5
 8023706:	4544      	cmp	r4, r8
 8023708:	d30e      	bcc.n	8023728 <__mdiff+0xf8>
 802370a:	f108 0103 	add.w	r1, r8, #3
 802370e:	1b49      	subs	r1, r1, r5
 8023710:	f021 0103 	bic.w	r1, r1, #3
 8023714:	3d03      	subs	r5, #3
 8023716:	45a8      	cmp	r8, r5
 8023718:	bf38      	it	cc
 802371a:	2100      	movcc	r1, #0
 802371c:	440b      	add	r3, r1
 802371e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023722:	b191      	cbz	r1, 802374a <__mdiff+0x11a>
 8023724:	6117      	str	r7, [r2, #16]
 8023726:	e79d      	b.n	8023664 <__mdiff+0x34>
 8023728:	f854 1b04 	ldr.w	r1, [r4], #4
 802372c:	46e6      	mov	lr, ip
 802372e:	0c08      	lsrs	r0, r1, #16
 8023730:	fa1c fc81 	uxtah	ip, ip, r1
 8023734:	4471      	add	r1, lr
 8023736:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802373a:	b289      	uxth	r1, r1
 802373c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8023740:	f846 1b04 	str.w	r1, [r6], #4
 8023744:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023748:	e7dd      	b.n	8023706 <__mdiff+0xd6>
 802374a:	3f01      	subs	r7, #1
 802374c:	e7e7      	b.n	802371e <__mdiff+0xee>
 802374e:	bf00      	nop
 8023750:	08028da5 	.word	0x08028da5
 8023754:	08028db6 	.word	0x08028db6

08023758 <__d2b>:
 8023758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802375c:	460f      	mov	r7, r1
 802375e:	2101      	movs	r1, #1
 8023760:	ec59 8b10 	vmov	r8, r9, d0
 8023764:	4616      	mov	r6, r2
 8023766:	f7ff fccd 	bl	8023104 <_Balloc>
 802376a:	4604      	mov	r4, r0
 802376c:	b930      	cbnz	r0, 802377c <__d2b+0x24>
 802376e:	4602      	mov	r2, r0
 8023770:	4b23      	ldr	r3, [pc, #140]	@ (8023800 <__d2b+0xa8>)
 8023772:	4824      	ldr	r0, [pc, #144]	@ (8023804 <__d2b+0xac>)
 8023774:	f240 310f 	movw	r1, #783	@ 0x30f
 8023778:	f7fe fdc8 	bl	802230c <__assert_func>
 802377c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8023780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023784:	b10d      	cbz	r5, 802378a <__d2b+0x32>
 8023786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802378a:	9301      	str	r3, [sp, #4]
 802378c:	f1b8 0300 	subs.w	r3, r8, #0
 8023790:	d023      	beq.n	80237da <__d2b+0x82>
 8023792:	4668      	mov	r0, sp
 8023794:	9300      	str	r3, [sp, #0]
 8023796:	f7ff fd7c 	bl	8023292 <__lo0bits>
 802379a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802379e:	b1d0      	cbz	r0, 80237d6 <__d2b+0x7e>
 80237a0:	f1c0 0320 	rsb	r3, r0, #32
 80237a4:	fa02 f303 	lsl.w	r3, r2, r3
 80237a8:	430b      	orrs	r3, r1
 80237aa:	40c2      	lsrs	r2, r0
 80237ac:	6163      	str	r3, [r4, #20]
 80237ae:	9201      	str	r2, [sp, #4]
 80237b0:	9b01      	ldr	r3, [sp, #4]
 80237b2:	61a3      	str	r3, [r4, #24]
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	bf0c      	ite	eq
 80237b8:	2201      	moveq	r2, #1
 80237ba:	2202      	movne	r2, #2
 80237bc:	6122      	str	r2, [r4, #16]
 80237be:	b1a5      	cbz	r5, 80237ea <__d2b+0x92>
 80237c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80237c4:	4405      	add	r5, r0
 80237c6:	603d      	str	r5, [r7, #0]
 80237c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80237cc:	6030      	str	r0, [r6, #0]
 80237ce:	4620      	mov	r0, r4
 80237d0:	b003      	add	sp, #12
 80237d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80237d6:	6161      	str	r1, [r4, #20]
 80237d8:	e7ea      	b.n	80237b0 <__d2b+0x58>
 80237da:	a801      	add	r0, sp, #4
 80237dc:	f7ff fd59 	bl	8023292 <__lo0bits>
 80237e0:	9b01      	ldr	r3, [sp, #4]
 80237e2:	6163      	str	r3, [r4, #20]
 80237e4:	3020      	adds	r0, #32
 80237e6:	2201      	movs	r2, #1
 80237e8:	e7e8      	b.n	80237bc <__d2b+0x64>
 80237ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80237ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80237f2:	6038      	str	r0, [r7, #0]
 80237f4:	6918      	ldr	r0, [r3, #16]
 80237f6:	f7ff fd2d 	bl	8023254 <__hi0bits>
 80237fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80237fe:	e7e5      	b.n	80237cc <__d2b+0x74>
 8023800:	08028da5 	.word	0x08028da5
 8023804:	08028db6 	.word	0x08028db6

08023808 <__ssputs_r>:
 8023808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802380c:	688e      	ldr	r6, [r1, #8]
 802380e:	461f      	mov	r7, r3
 8023810:	42be      	cmp	r6, r7
 8023812:	680b      	ldr	r3, [r1, #0]
 8023814:	4682      	mov	sl, r0
 8023816:	460c      	mov	r4, r1
 8023818:	4690      	mov	r8, r2
 802381a:	d82d      	bhi.n	8023878 <__ssputs_r+0x70>
 802381c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023820:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8023824:	d026      	beq.n	8023874 <__ssputs_r+0x6c>
 8023826:	6965      	ldr	r5, [r4, #20]
 8023828:	6909      	ldr	r1, [r1, #16]
 802382a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802382e:	eba3 0901 	sub.w	r9, r3, r1
 8023832:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023836:	1c7b      	adds	r3, r7, #1
 8023838:	444b      	add	r3, r9
 802383a:	106d      	asrs	r5, r5, #1
 802383c:	429d      	cmp	r5, r3
 802383e:	bf38      	it	cc
 8023840:	461d      	movcc	r5, r3
 8023842:	0553      	lsls	r3, r2, #21
 8023844:	d527      	bpl.n	8023896 <__ssputs_r+0x8e>
 8023846:	4629      	mov	r1, r5
 8023848:	f7ff fbd0 	bl	8022fec <_malloc_r>
 802384c:	4606      	mov	r6, r0
 802384e:	b360      	cbz	r0, 80238aa <__ssputs_r+0xa2>
 8023850:	6921      	ldr	r1, [r4, #16]
 8023852:	464a      	mov	r2, r9
 8023854:	f7fe fd4b 	bl	80222ee <memcpy>
 8023858:	89a3      	ldrh	r3, [r4, #12]
 802385a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802385e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023862:	81a3      	strh	r3, [r4, #12]
 8023864:	6126      	str	r6, [r4, #16]
 8023866:	6165      	str	r5, [r4, #20]
 8023868:	444e      	add	r6, r9
 802386a:	eba5 0509 	sub.w	r5, r5, r9
 802386e:	6026      	str	r6, [r4, #0]
 8023870:	60a5      	str	r5, [r4, #8]
 8023872:	463e      	mov	r6, r7
 8023874:	42be      	cmp	r6, r7
 8023876:	d900      	bls.n	802387a <__ssputs_r+0x72>
 8023878:	463e      	mov	r6, r7
 802387a:	6820      	ldr	r0, [r4, #0]
 802387c:	4632      	mov	r2, r6
 802387e:	4641      	mov	r1, r8
 8023880:	f7fe fc20 	bl	80220c4 <memmove>
 8023884:	68a3      	ldr	r3, [r4, #8]
 8023886:	1b9b      	subs	r3, r3, r6
 8023888:	60a3      	str	r3, [r4, #8]
 802388a:	6823      	ldr	r3, [r4, #0]
 802388c:	4433      	add	r3, r6
 802388e:	6023      	str	r3, [r4, #0]
 8023890:	2000      	movs	r0, #0
 8023892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023896:	462a      	mov	r2, r5
 8023898:	f000 fbcf 	bl	802403a <_realloc_r>
 802389c:	4606      	mov	r6, r0
 802389e:	2800      	cmp	r0, #0
 80238a0:	d1e0      	bne.n	8023864 <__ssputs_r+0x5c>
 80238a2:	6921      	ldr	r1, [r4, #16]
 80238a4:	4650      	mov	r0, sl
 80238a6:	f7ff fb2d 	bl	8022f04 <_free_r>
 80238aa:	230c      	movs	r3, #12
 80238ac:	f8ca 3000 	str.w	r3, [sl]
 80238b0:	89a3      	ldrh	r3, [r4, #12]
 80238b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80238b6:	81a3      	strh	r3, [r4, #12]
 80238b8:	f04f 30ff 	mov.w	r0, #4294967295
 80238bc:	e7e9      	b.n	8023892 <__ssputs_r+0x8a>
	...

080238c0 <_svfiprintf_r>:
 80238c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238c4:	4698      	mov	r8, r3
 80238c6:	898b      	ldrh	r3, [r1, #12]
 80238c8:	061b      	lsls	r3, r3, #24
 80238ca:	b09d      	sub	sp, #116	@ 0x74
 80238cc:	4607      	mov	r7, r0
 80238ce:	460d      	mov	r5, r1
 80238d0:	4614      	mov	r4, r2
 80238d2:	d510      	bpl.n	80238f6 <_svfiprintf_r+0x36>
 80238d4:	690b      	ldr	r3, [r1, #16]
 80238d6:	b973      	cbnz	r3, 80238f6 <_svfiprintf_r+0x36>
 80238d8:	2140      	movs	r1, #64	@ 0x40
 80238da:	f7ff fb87 	bl	8022fec <_malloc_r>
 80238de:	6028      	str	r0, [r5, #0]
 80238e0:	6128      	str	r0, [r5, #16]
 80238e2:	b930      	cbnz	r0, 80238f2 <_svfiprintf_r+0x32>
 80238e4:	230c      	movs	r3, #12
 80238e6:	603b      	str	r3, [r7, #0]
 80238e8:	f04f 30ff 	mov.w	r0, #4294967295
 80238ec:	b01d      	add	sp, #116	@ 0x74
 80238ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238f2:	2340      	movs	r3, #64	@ 0x40
 80238f4:	616b      	str	r3, [r5, #20]
 80238f6:	2300      	movs	r3, #0
 80238f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80238fa:	2320      	movs	r3, #32
 80238fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023900:	f8cd 800c 	str.w	r8, [sp, #12]
 8023904:	2330      	movs	r3, #48	@ 0x30
 8023906:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8023aa4 <_svfiprintf_r+0x1e4>
 802390a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802390e:	f04f 0901 	mov.w	r9, #1
 8023912:	4623      	mov	r3, r4
 8023914:	469a      	mov	sl, r3
 8023916:	f813 2b01 	ldrb.w	r2, [r3], #1
 802391a:	b10a      	cbz	r2, 8023920 <_svfiprintf_r+0x60>
 802391c:	2a25      	cmp	r2, #37	@ 0x25
 802391e:	d1f9      	bne.n	8023914 <_svfiprintf_r+0x54>
 8023920:	ebba 0b04 	subs.w	fp, sl, r4
 8023924:	d00b      	beq.n	802393e <_svfiprintf_r+0x7e>
 8023926:	465b      	mov	r3, fp
 8023928:	4622      	mov	r2, r4
 802392a:	4629      	mov	r1, r5
 802392c:	4638      	mov	r0, r7
 802392e:	f7ff ff6b 	bl	8023808 <__ssputs_r>
 8023932:	3001      	adds	r0, #1
 8023934:	f000 80a7 	beq.w	8023a86 <_svfiprintf_r+0x1c6>
 8023938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802393a:	445a      	add	r2, fp
 802393c:	9209      	str	r2, [sp, #36]	@ 0x24
 802393e:	f89a 3000 	ldrb.w	r3, [sl]
 8023942:	2b00      	cmp	r3, #0
 8023944:	f000 809f 	beq.w	8023a86 <_svfiprintf_r+0x1c6>
 8023948:	2300      	movs	r3, #0
 802394a:	f04f 32ff 	mov.w	r2, #4294967295
 802394e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023952:	f10a 0a01 	add.w	sl, sl, #1
 8023956:	9304      	str	r3, [sp, #16]
 8023958:	9307      	str	r3, [sp, #28]
 802395a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802395e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023960:	4654      	mov	r4, sl
 8023962:	2205      	movs	r2, #5
 8023964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023968:	484e      	ldr	r0, [pc, #312]	@ (8023aa4 <_svfiprintf_r+0x1e4>)
 802396a:	f7dc fcc9 	bl	8000300 <memchr>
 802396e:	9a04      	ldr	r2, [sp, #16]
 8023970:	b9d8      	cbnz	r0, 80239aa <_svfiprintf_r+0xea>
 8023972:	06d0      	lsls	r0, r2, #27
 8023974:	bf44      	itt	mi
 8023976:	2320      	movmi	r3, #32
 8023978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802397c:	0711      	lsls	r1, r2, #28
 802397e:	bf44      	itt	mi
 8023980:	232b      	movmi	r3, #43	@ 0x2b
 8023982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023986:	f89a 3000 	ldrb.w	r3, [sl]
 802398a:	2b2a      	cmp	r3, #42	@ 0x2a
 802398c:	d015      	beq.n	80239ba <_svfiprintf_r+0xfa>
 802398e:	9a07      	ldr	r2, [sp, #28]
 8023990:	4654      	mov	r4, sl
 8023992:	2000      	movs	r0, #0
 8023994:	f04f 0c0a 	mov.w	ip, #10
 8023998:	4621      	mov	r1, r4
 802399a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802399e:	3b30      	subs	r3, #48	@ 0x30
 80239a0:	2b09      	cmp	r3, #9
 80239a2:	d94b      	bls.n	8023a3c <_svfiprintf_r+0x17c>
 80239a4:	b1b0      	cbz	r0, 80239d4 <_svfiprintf_r+0x114>
 80239a6:	9207      	str	r2, [sp, #28]
 80239a8:	e014      	b.n	80239d4 <_svfiprintf_r+0x114>
 80239aa:	eba0 0308 	sub.w	r3, r0, r8
 80239ae:	fa09 f303 	lsl.w	r3, r9, r3
 80239b2:	4313      	orrs	r3, r2
 80239b4:	9304      	str	r3, [sp, #16]
 80239b6:	46a2      	mov	sl, r4
 80239b8:	e7d2      	b.n	8023960 <_svfiprintf_r+0xa0>
 80239ba:	9b03      	ldr	r3, [sp, #12]
 80239bc:	1d19      	adds	r1, r3, #4
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	9103      	str	r1, [sp, #12]
 80239c2:	2b00      	cmp	r3, #0
 80239c4:	bfbb      	ittet	lt
 80239c6:	425b      	neglt	r3, r3
 80239c8:	f042 0202 	orrlt.w	r2, r2, #2
 80239cc:	9307      	strge	r3, [sp, #28]
 80239ce:	9307      	strlt	r3, [sp, #28]
 80239d0:	bfb8      	it	lt
 80239d2:	9204      	strlt	r2, [sp, #16]
 80239d4:	7823      	ldrb	r3, [r4, #0]
 80239d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80239d8:	d10a      	bne.n	80239f0 <_svfiprintf_r+0x130>
 80239da:	7863      	ldrb	r3, [r4, #1]
 80239dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80239de:	d132      	bne.n	8023a46 <_svfiprintf_r+0x186>
 80239e0:	9b03      	ldr	r3, [sp, #12]
 80239e2:	1d1a      	adds	r2, r3, #4
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	9203      	str	r2, [sp, #12]
 80239e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80239ec:	3402      	adds	r4, #2
 80239ee:	9305      	str	r3, [sp, #20]
 80239f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8023ab4 <_svfiprintf_r+0x1f4>
 80239f4:	7821      	ldrb	r1, [r4, #0]
 80239f6:	2203      	movs	r2, #3
 80239f8:	4650      	mov	r0, sl
 80239fa:	f7dc fc81 	bl	8000300 <memchr>
 80239fe:	b138      	cbz	r0, 8023a10 <_svfiprintf_r+0x150>
 8023a00:	9b04      	ldr	r3, [sp, #16]
 8023a02:	eba0 000a 	sub.w	r0, r0, sl
 8023a06:	2240      	movs	r2, #64	@ 0x40
 8023a08:	4082      	lsls	r2, r0
 8023a0a:	4313      	orrs	r3, r2
 8023a0c:	3401      	adds	r4, #1
 8023a0e:	9304      	str	r3, [sp, #16]
 8023a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a14:	4824      	ldr	r0, [pc, #144]	@ (8023aa8 <_svfiprintf_r+0x1e8>)
 8023a16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023a1a:	2206      	movs	r2, #6
 8023a1c:	f7dc fc70 	bl	8000300 <memchr>
 8023a20:	2800      	cmp	r0, #0
 8023a22:	d036      	beq.n	8023a92 <_svfiprintf_r+0x1d2>
 8023a24:	4b21      	ldr	r3, [pc, #132]	@ (8023aac <_svfiprintf_r+0x1ec>)
 8023a26:	bb1b      	cbnz	r3, 8023a70 <_svfiprintf_r+0x1b0>
 8023a28:	9b03      	ldr	r3, [sp, #12]
 8023a2a:	3307      	adds	r3, #7
 8023a2c:	f023 0307 	bic.w	r3, r3, #7
 8023a30:	3308      	adds	r3, #8
 8023a32:	9303      	str	r3, [sp, #12]
 8023a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a36:	4433      	add	r3, r6
 8023a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a3a:	e76a      	b.n	8023912 <_svfiprintf_r+0x52>
 8023a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8023a40:	460c      	mov	r4, r1
 8023a42:	2001      	movs	r0, #1
 8023a44:	e7a8      	b.n	8023998 <_svfiprintf_r+0xd8>
 8023a46:	2300      	movs	r3, #0
 8023a48:	3401      	adds	r4, #1
 8023a4a:	9305      	str	r3, [sp, #20]
 8023a4c:	4619      	mov	r1, r3
 8023a4e:	f04f 0c0a 	mov.w	ip, #10
 8023a52:	4620      	mov	r0, r4
 8023a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a58:	3a30      	subs	r2, #48	@ 0x30
 8023a5a:	2a09      	cmp	r2, #9
 8023a5c:	d903      	bls.n	8023a66 <_svfiprintf_r+0x1a6>
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d0c6      	beq.n	80239f0 <_svfiprintf_r+0x130>
 8023a62:	9105      	str	r1, [sp, #20]
 8023a64:	e7c4      	b.n	80239f0 <_svfiprintf_r+0x130>
 8023a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8023a6a:	4604      	mov	r4, r0
 8023a6c:	2301      	movs	r3, #1
 8023a6e:	e7f0      	b.n	8023a52 <_svfiprintf_r+0x192>
 8023a70:	ab03      	add	r3, sp, #12
 8023a72:	9300      	str	r3, [sp, #0]
 8023a74:	462a      	mov	r2, r5
 8023a76:	4b0e      	ldr	r3, [pc, #56]	@ (8023ab0 <_svfiprintf_r+0x1f0>)
 8023a78:	a904      	add	r1, sp, #16
 8023a7a:	4638      	mov	r0, r7
 8023a7c:	f7fd fd2c 	bl	80214d8 <_printf_float>
 8023a80:	1c42      	adds	r2, r0, #1
 8023a82:	4606      	mov	r6, r0
 8023a84:	d1d6      	bne.n	8023a34 <_svfiprintf_r+0x174>
 8023a86:	89ab      	ldrh	r3, [r5, #12]
 8023a88:	065b      	lsls	r3, r3, #25
 8023a8a:	f53f af2d 	bmi.w	80238e8 <_svfiprintf_r+0x28>
 8023a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023a90:	e72c      	b.n	80238ec <_svfiprintf_r+0x2c>
 8023a92:	ab03      	add	r3, sp, #12
 8023a94:	9300      	str	r3, [sp, #0]
 8023a96:	462a      	mov	r2, r5
 8023a98:	4b05      	ldr	r3, [pc, #20]	@ (8023ab0 <_svfiprintf_r+0x1f0>)
 8023a9a:	a904      	add	r1, sp, #16
 8023a9c:	4638      	mov	r0, r7
 8023a9e:	f7fd ffa3 	bl	80219e8 <_printf_i>
 8023aa2:	e7ed      	b.n	8023a80 <_svfiprintf_r+0x1c0>
 8023aa4:	08028f10 	.word	0x08028f10
 8023aa8:	08028f1a 	.word	0x08028f1a
 8023aac:	080214d9 	.word	0x080214d9
 8023ab0:	08023809 	.word	0x08023809
 8023ab4:	08028f16 	.word	0x08028f16

08023ab8 <__sfputc_r>:
 8023ab8:	6893      	ldr	r3, [r2, #8]
 8023aba:	3b01      	subs	r3, #1
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	b410      	push	{r4}
 8023ac0:	6093      	str	r3, [r2, #8]
 8023ac2:	da08      	bge.n	8023ad6 <__sfputc_r+0x1e>
 8023ac4:	6994      	ldr	r4, [r2, #24]
 8023ac6:	42a3      	cmp	r3, r4
 8023ac8:	db01      	blt.n	8023ace <__sfputc_r+0x16>
 8023aca:	290a      	cmp	r1, #10
 8023acc:	d103      	bne.n	8023ad6 <__sfputc_r+0x1e>
 8023ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ad2:	f7fe ba52 	b.w	8021f7a <__swbuf_r>
 8023ad6:	6813      	ldr	r3, [r2, #0]
 8023ad8:	1c58      	adds	r0, r3, #1
 8023ada:	6010      	str	r0, [r2, #0]
 8023adc:	7019      	strb	r1, [r3, #0]
 8023ade:	4608      	mov	r0, r1
 8023ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ae4:	4770      	bx	lr

08023ae6 <__sfputs_r>:
 8023ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ae8:	4606      	mov	r6, r0
 8023aea:	460f      	mov	r7, r1
 8023aec:	4614      	mov	r4, r2
 8023aee:	18d5      	adds	r5, r2, r3
 8023af0:	42ac      	cmp	r4, r5
 8023af2:	d101      	bne.n	8023af8 <__sfputs_r+0x12>
 8023af4:	2000      	movs	r0, #0
 8023af6:	e007      	b.n	8023b08 <__sfputs_r+0x22>
 8023af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023afc:	463a      	mov	r2, r7
 8023afe:	4630      	mov	r0, r6
 8023b00:	f7ff ffda 	bl	8023ab8 <__sfputc_r>
 8023b04:	1c43      	adds	r3, r0, #1
 8023b06:	d1f3      	bne.n	8023af0 <__sfputs_r+0xa>
 8023b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023b0c <_vfiprintf_r>:
 8023b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b10:	460d      	mov	r5, r1
 8023b12:	b09d      	sub	sp, #116	@ 0x74
 8023b14:	4614      	mov	r4, r2
 8023b16:	4698      	mov	r8, r3
 8023b18:	4606      	mov	r6, r0
 8023b1a:	b118      	cbz	r0, 8023b24 <_vfiprintf_r+0x18>
 8023b1c:	6a03      	ldr	r3, [r0, #32]
 8023b1e:	b90b      	cbnz	r3, 8023b24 <_vfiprintf_r+0x18>
 8023b20:	f7fe f90e 	bl	8021d40 <__sinit>
 8023b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023b26:	07d9      	lsls	r1, r3, #31
 8023b28:	d405      	bmi.n	8023b36 <_vfiprintf_r+0x2a>
 8023b2a:	89ab      	ldrh	r3, [r5, #12]
 8023b2c:	059a      	lsls	r2, r3, #22
 8023b2e:	d402      	bmi.n	8023b36 <_vfiprintf_r+0x2a>
 8023b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023b32:	f7fe fbda 	bl	80222ea <__retarget_lock_acquire_recursive>
 8023b36:	89ab      	ldrh	r3, [r5, #12]
 8023b38:	071b      	lsls	r3, r3, #28
 8023b3a:	d501      	bpl.n	8023b40 <_vfiprintf_r+0x34>
 8023b3c:	692b      	ldr	r3, [r5, #16]
 8023b3e:	b99b      	cbnz	r3, 8023b68 <_vfiprintf_r+0x5c>
 8023b40:	4629      	mov	r1, r5
 8023b42:	4630      	mov	r0, r6
 8023b44:	f7fe fa58 	bl	8021ff8 <__swsetup_r>
 8023b48:	b170      	cbz	r0, 8023b68 <_vfiprintf_r+0x5c>
 8023b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023b4c:	07dc      	lsls	r4, r3, #31
 8023b4e:	d504      	bpl.n	8023b5a <_vfiprintf_r+0x4e>
 8023b50:	f04f 30ff 	mov.w	r0, #4294967295
 8023b54:	b01d      	add	sp, #116	@ 0x74
 8023b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b5a:	89ab      	ldrh	r3, [r5, #12]
 8023b5c:	0598      	lsls	r0, r3, #22
 8023b5e:	d4f7      	bmi.n	8023b50 <_vfiprintf_r+0x44>
 8023b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023b62:	f7fe fbc3 	bl	80222ec <__retarget_lock_release_recursive>
 8023b66:	e7f3      	b.n	8023b50 <_vfiprintf_r+0x44>
 8023b68:	2300      	movs	r3, #0
 8023b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b6c:	2320      	movs	r3, #32
 8023b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8023b76:	2330      	movs	r3, #48	@ 0x30
 8023b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023d28 <_vfiprintf_r+0x21c>
 8023b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023b80:	f04f 0901 	mov.w	r9, #1
 8023b84:	4623      	mov	r3, r4
 8023b86:	469a      	mov	sl, r3
 8023b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023b8c:	b10a      	cbz	r2, 8023b92 <_vfiprintf_r+0x86>
 8023b8e:	2a25      	cmp	r2, #37	@ 0x25
 8023b90:	d1f9      	bne.n	8023b86 <_vfiprintf_r+0x7a>
 8023b92:	ebba 0b04 	subs.w	fp, sl, r4
 8023b96:	d00b      	beq.n	8023bb0 <_vfiprintf_r+0xa4>
 8023b98:	465b      	mov	r3, fp
 8023b9a:	4622      	mov	r2, r4
 8023b9c:	4629      	mov	r1, r5
 8023b9e:	4630      	mov	r0, r6
 8023ba0:	f7ff ffa1 	bl	8023ae6 <__sfputs_r>
 8023ba4:	3001      	adds	r0, #1
 8023ba6:	f000 80a7 	beq.w	8023cf8 <_vfiprintf_r+0x1ec>
 8023baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023bac:	445a      	add	r2, fp
 8023bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8023bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	f000 809f 	beq.w	8023cf8 <_vfiprintf_r+0x1ec>
 8023bba:	2300      	movs	r3, #0
 8023bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8023bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023bc4:	f10a 0a01 	add.w	sl, sl, #1
 8023bc8:	9304      	str	r3, [sp, #16]
 8023bca:	9307      	str	r3, [sp, #28]
 8023bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8023bd2:	4654      	mov	r4, sl
 8023bd4:	2205      	movs	r2, #5
 8023bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023bda:	4853      	ldr	r0, [pc, #332]	@ (8023d28 <_vfiprintf_r+0x21c>)
 8023bdc:	f7dc fb90 	bl	8000300 <memchr>
 8023be0:	9a04      	ldr	r2, [sp, #16]
 8023be2:	b9d8      	cbnz	r0, 8023c1c <_vfiprintf_r+0x110>
 8023be4:	06d1      	lsls	r1, r2, #27
 8023be6:	bf44      	itt	mi
 8023be8:	2320      	movmi	r3, #32
 8023bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023bee:	0713      	lsls	r3, r2, #28
 8023bf0:	bf44      	itt	mi
 8023bf2:	232b      	movmi	r3, #43	@ 0x2b
 8023bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8023bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8023bfe:	d015      	beq.n	8023c2c <_vfiprintf_r+0x120>
 8023c00:	9a07      	ldr	r2, [sp, #28]
 8023c02:	4654      	mov	r4, sl
 8023c04:	2000      	movs	r0, #0
 8023c06:	f04f 0c0a 	mov.w	ip, #10
 8023c0a:	4621      	mov	r1, r4
 8023c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023c10:	3b30      	subs	r3, #48	@ 0x30
 8023c12:	2b09      	cmp	r3, #9
 8023c14:	d94b      	bls.n	8023cae <_vfiprintf_r+0x1a2>
 8023c16:	b1b0      	cbz	r0, 8023c46 <_vfiprintf_r+0x13a>
 8023c18:	9207      	str	r2, [sp, #28]
 8023c1a:	e014      	b.n	8023c46 <_vfiprintf_r+0x13a>
 8023c1c:	eba0 0308 	sub.w	r3, r0, r8
 8023c20:	fa09 f303 	lsl.w	r3, r9, r3
 8023c24:	4313      	orrs	r3, r2
 8023c26:	9304      	str	r3, [sp, #16]
 8023c28:	46a2      	mov	sl, r4
 8023c2a:	e7d2      	b.n	8023bd2 <_vfiprintf_r+0xc6>
 8023c2c:	9b03      	ldr	r3, [sp, #12]
 8023c2e:	1d19      	adds	r1, r3, #4
 8023c30:	681b      	ldr	r3, [r3, #0]
 8023c32:	9103      	str	r1, [sp, #12]
 8023c34:	2b00      	cmp	r3, #0
 8023c36:	bfbb      	ittet	lt
 8023c38:	425b      	neglt	r3, r3
 8023c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8023c3e:	9307      	strge	r3, [sp, #28]
 8023c40:	9307      	strlt	r3, [sp, #28]
 8023c42:	bfb8      	it	lt
 8023c44:	9204      	strlt	r2, [sp, #16]
 8023c46:	7823      	ldrb	r3, [r4, #0]
 8023c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8023c4a:	d10a      	bne.n	8023c62 <_vfiprintf_r+0x156>
 8023c4c:	7863      	ldrb	r3, [r4, #1]
 8023c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c50:	d132      	bne.n	8023cb8 <_vfiprintf_r+0x1ac>
 8023c52:	9b03      	ldr	r3, [sp, #12]
 8023c54:	1d1a      	adds	r2, r3, #4
 8023c56:	681b      	ldr	r3, [r3, #0]
 8023c58:	9203      	str	r2, [sp, #12]
 8023c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023c5e:	3402      	adds	r4, #2
 8023c60:	9305      	str	r3, [sp, #20]
 8023c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023d38 <_vfiprintf_r+0x22c>
 8023c66:	7821      	ldrb	r1, [r4, #0]
 8023c68:	2203      	movs	r2, #3
 8023c6a:	4650      	mov	r0, sl
 8023c6c:	f7dc fb48 	bl	8000300 <memchr>
 8023c70:	b138      	cbz	r0, 8023c82 <_vfiprintf_r+0x176>
 8023c72:	9b04      	ldr	r3, [sp, #16]
 8023c74:	eba0 000a 	sub.w	r0, r0, sl
 8023c78:	2240      	movs	r2, #64	@ 0x40
 8023c7a:	4082      	lsls	r2, r0
 8023c7c:	4313      	orrs	r3, r2
 8023c7e:	3401      	adds	r4, #1
 8023c80:	9304      	str	r3, [sp, #16]
 8023c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c86:	4829      	ldr	r0, [pc, #164]	@ (8023d2c <_vfiprintf_r+0x220>)
 8023c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023c8c:	2206      	movs	r2, #6
 8023c8e:	f7dc fb37 	bl	8000300 <memchr>
 8023c92:	2800      	cmp	r0, #0
 8023c94:	d03f      	beq.n	8023d16 <_vfiprintf_r+0x20a>
 8023c96:	4b26      	ldr	r3, [pc, #152]	@ (8023d30 <_vfiprintf_r+0x224>)
 8023c98:	bb1b      	cbnz	r3, 8023ce2 <_vfiprintf_r+0x1d6>
 8023c9a:	9b03      	ldr	r3, [sp, #12]
 8023c9c:	3307      	adds	r3, #7
 8023c9e:	f023 0307 	bic.w	r3, r3, #7
 8023ca2:	3308      	adds	r3, #8
 8023ca4:	9303      	str	r3, [sp, #12]
 8023ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ca8:	443b      	add	r3, r7
 8023caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cac:	e76a      	b.n	8023b84 <_vfiprintf_r+0x78>
 8023cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8023cb2:	460c      	mov	r4, r1
 8023cb4:	2001      	movs	r0, #1
 8023cb6:	e7a8      	b.n	8023c0a <_vfiprintf_r+0xfe>
 8023cb8:	2300      	movs	r3, #0
 8023cba:	3401      	adds	r4, #1
 8023cbc:	9305      	str	r3, [sp, #20]
 8023cbe:	4619      	mov	r1, r3
 8023cc0:	f04f 0c0a 	mov.w	ip, #10
 8023cc4:	4620      	mov	r0, r4
 8023cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023cca:	3a30      	subs	r2, #48	@ 0x30
 8023ccc:	2a09      	cmp	r2, #9
 8023cce:	d903      	bls.n	8023cd8 <_vfiprintf_r+0x1cc>
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d0c6      	beq.n	8023c62 <_vfiprintf_r+0x156>
 8023cd4:	9105      	str	r1, [sp, #20]
 8023cd6:	e7c4      	b.n	8023c62 <_vfiprintf_r+0x156>
 8023cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8023cdc:	4604      	mov	r4, r0
 8023cde:	2301      	movs	r3, #1
 8023ce0:	e7f0      	b.n	8023cc4 <_vfiprintf_r+0x1b8>
 8023ce2:	ab03      	add	r3, sp, #12
 8023ce4:	9300      	str	r3, [sp, #0]
 8023ce6:	462a      	mov	r2, r5
 8023ce8:	4b12      	ldr	r3, [pc, #72]	@ (8023d34 <_vfiprintf_r+0x228>)
 8023cea:	a904      	add	r1, sp, #16
 8023cec:	4630      	mov	r0, r6
 8023cee:	f7fd fbf3 	bl	80214d8 <_printf_float>
 8023cf2:	4607      	mov	r7, r0
 8023cf4:	1c78      	adds	r0, r7, #1
 8023cf6:	d1d6      	bne.n	8023ca6 <_vfiprintf_r+0x19a>
 8023cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023cfa:	07d9      	lsls	r1, r3, #31
 8023cfc:	d405      	bmi.n	8023d0a <_vfiprintf_r+0x1fe>
 8023cfe:	89ab      	ldrh	r3, [r5, #12]
 8023d00:	059a      	lsls	r2, r3, #22
 8023d02:	d402      	bmi.n	8023d0a <_vfiprintf_r+0x1fe>
 8023d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023d06:	f7fe faf1 	bl	80222ec <__retarget_lock_release_recursive>
 8023d0a:	89ab      	ldrh	r3, [r5, #12]
 8023d0c:	065b      	lsls	r3, r3, #25
 8023d0e:	f53f af1f 	bmi.w	8023b50 <_vfiprintf_r+0x44>
 8023d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023d14:	e71e      	b.n	8023b54 <_vfiprintf_r+0x48>
 8023d16:	ab03      	add	r3, sp, #12
 8023d18:	9300      	str	r3, [sp, #0]
 8023d1a:	462a      	mov	r2, r5
 8023d1c:	4b05      	ldr	r3, [pc, #20]	@ (8023d34 <_vfiprintf_r+0x228>)
 8023d1e:	a904      	add	r1, sp, #16
 8023d20:	4630      	mov	r0, r6
 8023d22:	f7fd fe61 	bl	80219e8 <_printf_i>
 8023d26:	e7e4      	b.n	8023cf2 <_vfiprintf_r+0x1e6>
 8023d28:	08028f10 	.word	0x08028f10
 8023d2c:	08028f1a 	.word	0x08028f1a
 8023d30:	080214d9 	.word	0x080214d9
 8023d34:	08023ae7 	.word	0x08023ae7
 8023d38:	08028f16 	.word	0x08028f16

08023d3c <__sflush_r>:
 8023d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d44:	0716      	lsls	r6, r2, #28
 8023d46:	4605      	mov	r5, r0
 8023d48:	460c      	mov	r4, r1
 8023d4a:	d454      	bmi.n	8023df6 <__sflush_r+0xba>
 8023d4c:	684b      	ldr	r3, [r1, #4]
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	dc02      	bgt.n	8023d58 <__sflush_r+0x1c>
 8023d52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023d54:	2b00      	cmp	r3, #0
 8023d56:	dd48      	ble.n	8023dea <__sflush_r+0xae>
 8023d58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023d5a:	2e00      	cmp	r6, #0
 8023d5c:	d045      	beq.n	8023dea <__sflush_r+0xae>
 8023d5e:	2300      	movs	r3, #0
 8023d60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023d64:	682f      	ldr	r7, [r5, #0]
 8023d66:	6a21      	ldr	r1, [r4, #32]
 8023d68:	602b      	str	r3, [r5, #0]
 8023d6a:	d030      	beq.n	8023dce <__sflush_r+0x92>
 8023d6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023d6e:	89a3      	ldrh	r3, [r4, #12]
 8023d70:	0759      	lsls	r1, r3, #29
 8023d72:	d505      	bpl.n	8023d80 <__sflush_r+0x44>
 8023d74:	6863      	ldr	r3, [r4, #4]
 8023d76:	1ad2      	subs	r2, r2, r3
 8023d78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023d7a:	b10b      	cbz	r3, 8023d80 <__sflush_r+0x44>
 8023d7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023d7e:	1ad2      	subs	r2, r2, r3
 8023d80:	2300      	movs	r3, #0
 8023d82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023d84:	6a21      	ldr	r1, [r4, #32]
 8023d86:	4628      	mov	r0, r5
 8023d88:	47b0      	blx	r6
 8023d8a:	1c43      	adds	r3, r0, #1
 8023d8c:	89a3      	ldrh	r3, [r4, #12]
 8023d8e:	d106      	bne.n	8023d9e <__sflush_r+0x62>
 8023d90:	6829      	ldr	r1, [r5, #0]
 8023d92:	291d      	cmp	r1, #29
 8023d94:	d82b      	bhi.n	8023dee <__sflush_r+0xb2>
 8023d96:	4a2a      	ldr	r2, [pc, #168]	@ (8023e40 <__sflush_r+0x104>)
 8023d98:	410a      	asrs	r2, r1
 8023d9a:	07d6      	lsls	r6, r2, #31
 8023d9c:	d427      	bmi.n	8023dee <__sflush_r+0xb2>
 8023d9e:	2200      	movs	r2, #0
 8023da0:	6062      	str	r2, [r4, #4]
 8023da2:	04d9      	lsls	r1, r3, #19
 8023da4:	6922      	ldr	r2, [r4, #16]
 8023da6:	6022      	str	r2, [r4, #0]
 8023da8:	d504      	bpl.n	8023db4 <__sflush_r+0x78>
 8023daa:	1c42      	adds	r2, r0, #1
 8023dac:	d101      	bne.n	8023db2 <__sflush_r+0x76>
 8023dae:	682b      	ldr	r3, [r5, #0]
 8023db0:	b903      	cbnz	r3, 8023db4 <__sflush_r+0x78>
 8023db2:	6560      	str	r0, [r4, #84]	@ 0x54
 8023db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023db6:	602f      	str	r7, [r5, #0]
 8023db8:	b1b9      	cbz	r1, 8023dea <__sflush_r+0xae>
 8023dba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023dbe:	4299      	cmp	r1, r3
 8023dc0:	d002      	beq.n	8023dc8 <__sflush_r+0x8c>
 8023dc2:	4628      	mov	r0, r5
 8023dc4:	f7ff f89e 	bl	8022f04 <_free_r>
 8023dc8:	2300      	movs	r3, #0
 8023dca:	6363      	str	r3, [r4, #52]	@ 0x34
 8023dcc:	e00d      	b.n	8023dea <__sflush_r+0xae>
 8023dce:	2301      	movs	r3, #1
 8023dd0:	4628      	mov	r0, r5
 8023dd2:	47b0      	blx	r6
 8023dd4:	4602      	mov	r2, r0
 8023dd6:	1c50      	adds	r0, r2, #1
 8023dd8:	d1c9      	bne.n	8023d6e <__sflush_r+0x32>
 8023dda:	682b      	ldr	r3, [r5, #0]
 8023ddc:	2b00      	cmp	r3, #0
 8023dde:	d0c6      	beq.n	8023d6e <__sflush_r+0x32>
 8023de0:	2b1d      	cmp	r3, #29
 8023de2:	d001      	beq.n	8023de8 <__sflush_r+0xac>
 8023de4:	2b16      	cmp	r3, #22
 8023de6:	d11e      	bne.n	8023e26 <__sflush_r+0xea>
 8023de8:	602f      	str	r7, [r5, #0]
 8023dea:	2000      	movs	r0, #0
 8023dec:	e022      	b.n	8023e34 <__sflush_r+0xf8>
 8023dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023df2:	b21b      	sxth	r3, r3
 8023df4:	e01b      	b.n	8023e2e <__sflush_r+0xf2>
 8023df6:	690f      	ldr	r7, [r1, #16]
 8023df8:	2f00      	cmp	r7, #0
 8023dfa:	d0f6      	beq.n	8023dea <__sflush_r+0xae>
 8023dfc:	0793      	lsls	r3, r2, #30
 8023dfe:	680e      	ldr	r6, [r1, #0]
 8023e00:	bf08      	it	eq
 8023e02:	694b      	ldreq	r3, [r1, #20]
 8023e04:	600f      	str	r7, [r1, #0]
 8023e06:	bf18      	it	ne
 8023e08:	2300      	movne	r3, #0
 8023e0a:	eba6 0807 	sub.w	r8, r6, r7
 8023e0e:	608b      	str	r3, [r1, #8]
 8023e10:	f1b8 0f00 	cmp.w	r8, #0
 8023e14:	dde9      	ble.n	8023dea <__sflush_r+0xae>
 8023e16:	6a21      	ldr	r1, [r4, #32]
 8023e18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023e1a:	4643      	mov	r3, r8
 8023e1c:	463a      	mov	r2, r7
 8023e1e:	4628      	mov	r0, r5
 8023e20:	47b0      	blx	r6
 8023e22:	2800      	cmp	r0, #0
 8023e24:	dc08      	bgt.n	8023e38 <__sflush_r+0xfc>
 8023e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e2e:	81a3      	strh	r3, [r4, #12]
 8023e30:	f04f 30ff 	mov.w	r0, #4294967295
 8023e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e38:	4407      	add	r7, r0
 8023e3a:	eba8 0800 	sub.w	r8, r8, r0
 8023e3e:	e7e7      	b.n	8023e10 <__sflush_r+0xd4>
 8023e40:	dfbffffe 	.word	0xdfbffffe

08023e44 <_fflush_r>:
 8023e44:	b538      	push	{r3, r4, r5, lr}
 8023e46:	690b      	ldr	r3, [r1, #16]
 8023e48:	4605      	mov	r5, r0
 8023e4a:	460c      	mov	r4, r1
 8023e4c:	b913      	cbnz	r3, 8023e54 <_fflush_r+0x10>
 8023e4e:	2500      	movs	r5, #0
 8023e50:	4628      	mov	r0, r5
 8023e52:	bd38      	pop	{r3, r4, r5, pc}
 8023e54:	b118      	cbz	r0, 8023e5e <_fflush_r+0x1a>
 8023e56:	6a03      	ldr	r3, [r0, #32]
 8023e58:	b90b      	cbnz	r3, 8023e5e <_fflush_r+0x1a>
 8023e5a:	f7fd ff71 	bl	8021d40 <__sinit>
 8023e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	d0f3      	beq.n	8023e4e <_fflush_r+0xa>
 8023e66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023e68:	07d0      	lsls	r0, r2, #31
 8023e6a:	d404      	bmi.n	8023e76 <_fflush_r+0x32>
 8023e6c:	0599      	lsls	r1, r3, #22
 8023e6e:	d402      	bmi.n	8023e76 <_fflush_r+0x32>
 8023e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e72:	f7fe fa3a 	bl	80222ea <__retarget_lock_acquire_recursive>
 8023e76:	4628      	mov	r0, r5
 8023e78:	4621      	mov	r1, r4
 8023e7a:	f7ff ff5f 	bl	8023d3c <__sflush_r>
 8023e7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023e80:	07da      	lsls	r2, r3, #31
 8023e82:	4605      	mov	r5, r0
 8023e84:	d4e4      	bmi.n	8023e50 <_fflush_r+0xc>
 8023e86:	89a3      	ldrh	r3, [r4, #12]
 8023e88:	059b      	lsls	r3, r3, #22
 8023e8a:	d4e1      	bmi.n	8023e50 <_fflush_r+0xc>
 8023e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e8e:	f7fe fa2d 	bl	80222ec <__retarget_lock_release_recursive>
 8023e92:	e7dd      	b.n	8023e50 <_fflush_r+0xc>

08023e94 <fiprintf>:
 8023e94:	b40e      	push	{r1, r2, r3}
 8023e96:	b503      	push	{r0, r1, lr}
 8023e98:	4601      	mov	r1, r0
 8023e9a:	ab03      	add	r3, sp, #12
 8023e9c:	4805      	ldr	r0, [pc, #20]	@ (8023eb4 <fiprintf+0x20>)
 8023e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023ea2:	6800      	ldr	r0, [r0, #0]
 8023ea4:	9301      	str	r3, [sp, #4]
 8023ea6:	f7ff fe31 	bl	8023b0c <_vfiprintf_r>
 8023eaa:	b002      	add	sp, #8
 8023eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8023eb0:	b003      	add	sp, #12
 8023eb2:	4770      	bx	lr
 8023eb4:	24000060 	.word	0x24000060

08023eb8 <__swhatbuf_r>:
 8023eb8:	b570      	push	{r4, r5, r6, lr}
 8023eba:	460c      	mov	r4, r1
 8023ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ec0:	2900      	cmp	r1, #0
 8023ec2:	b096      	sub	sp, #88	@ 0x58
 8023ec4:	4615      	mov	r5, r2
 8023ec6:	461e      	mov	r6, r3
 8023ec8:	da0d      	bge.n	8023ee6 <__swhatbuf_r+0x2e>
 8023eca:	89a3      	ldrh	r3, [r4, #12]
 8023ecc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023ed0:	f04f 0100 	mov.w	r1, #0
 8023ed4:	bf14      	ite	ne
 8023ed6:	2340      	movne	r3, #64	@ 0x40
 8023ed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023edc:	2000      	movs	r0, #0
 8023ede:	6031      	str	r1, [r6, #0]
 8023ee0:	602b      	str	r3, [r5, #0]
 8023ee2:	b016      	add	sp, #88	@ 0x58
 8023ee4:	bd70      	pop	{r4, r5, r6, pc}
 8023ee6:	466a      	mov	r2, sp
 8023ee8:	f000 f848 	bl	8023f7c <_fstat_r>
 8023eec:	2800      	cmp	r0, #0
 8023eee:	dbec      	blt.n	8023eca <__swhatbuf_r+0x12>
 8023ef0:	9901      	ldr	r1, [sp, #4]
 8023ef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023ef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023efa:	4259      	negs	r1, r3
 8023efc:	4159      	adcs	r1, r3
 8023efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023f02:	e7eb      	b.n	8023edc <__swhatbuf_r+0x24>

08023f04 <__smakebuf_r>:
 8023f04:	898b      	ldrh	r3, [r1, #12]
 8023f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023f08:	079d      	lsls	r5, r3, #30
 8023f0a:	4606      	mov	r6, r0
 8023f0c:	460c      	mov	r4, r1
 8023f0e:	d507      	bpl.n	8023f20 <__smakebuf_r+0x1c>
 8023f10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023f14:	6023      	str	r3, [r4, #0]
 8023f16:	6123      	str	r3, [r4, #16]
 8023f18:	2301      	movs	r3, #1
 8023f1a:	6163      	str	r3, [r4, #20]
 8023f1c:	b003      	add	sp, #12
 8023f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f20:	ab01      	add	r3, sp, #4
 8023f22:	466a      	mov	r2, sp
 8023f24:	f7ff ffc8 	bl	8023eb8 <__swhatbuf_r>
 8023f28:	9f00      	ldr	r7, [sp, #0]
 8023f2a:	4605      	mov	r5, r0
 8023f2c:	4639      	mov	r1, r7
 8023f2e:	4630      	mov	r0, r6
 8023f30:	f7ff f85c 	bl	8022fec <_malloc_r>
 8023f34:	b948      	cbnz	r0, 8023f4a <__smakebuf_r+0x46>
 8023f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f3a:	059a      	lsls	r2, r3, #22
 8023f3c:	d4ee      	bmi.n	8023f1c <__smakebuf_r+0x18>
 8023f3e:	f023 0303 	bic.w	r3, r3, #3
 8023f42:	f043 0302 	orr.w	r3, r3, #2
 8023f46:	81a3      	strh	r3, [r4, #12]
 8023f48:	e7e2      	b.n	8023f10 <__smakebuf_r+0xc>
 8023f4a:	89a3      	ldrh	r3, [r4, #12]
 8023f4c:	6020      	str	r0, [r4, #0]
 8023f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023f52:	81a3      	strh	r3, [r4, #12]
 8023f54:	9b01      	ldr	r3, [sp, #4]
 8023f56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023f5a:	b15b      	cbz	r3, 8023f74 <__smakebuf_r+0x70>
 8023f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f60:	4630      	mov	r0, r6
 8023f62:	f000 f81d 	bl	8023fa0 <_isatty_r>
 8023f66:	b128      	cbz	r0, 8023f74 <__smakebuf_r+0x70>
 8023f68:	89a3      	ldrh	r3, [r4, #12]
 8023f6a:	f023 0303 	bic.w	r3, r3, #3
 8023f6e:	f043 0301 	orr.w	r3, r3, #1
 8023f72:	81a3      	strh	r3, [r4, #12]
 8023f74:	89a3      	ldrh	r3, [r4, #12]
 8023f76:	431d      	orrs	r5, r3
 8023f78:	81a5      	strh	r5, [r4, #12]
 8023f7a:	e7cf      	b.n	8023f1c <__smakebuf_r+0x18>

08023f7c <_fstat_r>:
 8023f7c:	b538      	push	{r3, r4, r5, lr}
 8023f7e:	4d07      	ldr	r5, [pc, #28]	@ (8023f9c <_fstat_r+0x20>)
 8023f80:	2300      	movs	r3, #0
 8023f82:	4604      	mov	r4, r0
 8023f84:	4608      	mov	r0, r1
 8023f86:	4611      	mov	r1, r2
 8023f88:	602b      	str	r3, [r5, #0]
 8023f8a:	f7de f9ff 	bl	800238c <_fstat>
 8023f8e:	1c43      	adds	r3, r0, #1
 8023f90:	d102      	bne.n	8023f98 <_fstat_r+0x1c>
 8023f92:	682b      	ldr	r3, [r5, #0]
 8023f94:	b103      	cbz	r3, 8023f98 <_fstat_r+0x1c>
 8023f96:	6023      	str	r3, [r4, #0]
 8023f98:	bd38      	pop	{r3, r4, r5, pc}
 8023f9a:	bf00      	nop
 8023f9c:	24012848 	.word	0x24012848

08023fa0 <_isatty_r>:
 8023fa0:	b538      	push	{r3, r4, r5, lr}
 8023fa2:	4d06      	ldr	r5, [pc, #24]	@ (8023fbc <_isatty_r+0x1c>)
 8023fa4:	2300      	movs	r3, #0
 8023fa6:	4604      	mov	r4, r0
 8023fa8:	4608      	mov	r0, r1
 8023faa:	602b      	str	r3, [r5, #0]
 8023fac:	f7de f9fe 	bl	80023ac <_isatty>
 8023fb0:	1c43      	adds	r3, r0, #1
 8023fb2:	d102      	bne.n	8023fba <_isatty_r+0x1a>
 8023fb4:	682b      	ldr	r3, [r5, #0]
 8023fb6:	b103      	cbz	r3, 8023fba <_isatty_r+0x1a>
 8023fb8:	6023      	str	r3, [r4, #0]
 8023fba:	bd38      	pop	{r3, r4, r5, pc}
 8023fbc:	24012848 	.word	0x24012848

08023fc0 <_sbrk_r>:
 8023fc0:	b538      	push	{r3, r4, r5, lr}
 8023fc2:	4d06      	ldr	r5, [pc, #24]	@ (8023fdc <_sbrk_r+0x1c>)
 8023fc4:	2300      	movs	r3, #0
 8023fc6:	4604      	mov	r4, r0
 8023fc8:	4608      	mov	r0, r1
 8023fca:	602b      	str	r3, [r5, #0]
 8023fcc:	f7de fa06 	bl	80023dc <_sbrk>
 8023fd0:	1c43      	adds	r3, r0, #1
 8023fd2:	d102      	bne.n	8023fda <_sbrk_r+0x1a>
 8023fd4:	682b      	ldr	r3, [r5, #0]
 8023fd6:	b103      	cbz	r3, 8023fda <_sbrk_r+0x1a>
 8023fd8:	6023      	str	r3, [r4, #0]
 8023fda:	bd38      	pop	{r3, r4, r5, pc}
 8023fdc:	24012848 	.word	0x24012848

08023fe0 <abort>:
 8023fe0:	b508      	push	{r3, lr}
 8023fe2:	2006      	movs	r0, #6
 8023fe4:	f000 f88c 	bl	8024100 <raise>
 8023fe8:	2001      	movs	r0, #1
 8023fea:	f7de f99b 	bl	8002324 <_exit>

08023fee <_calloc_r>:
 8023fee:	b570      	push	{r4, r5, r6, lr}
 8023ff0:	fba1 5402 	umull	r5, r4, r1, r2
 8023ff4:	b93c      	cbnz	r4, 8024006 <_calloc_r+0x18>
 8023ff6:	4629      	mov	r1, r5
 8023ff8:	f7fe fff8 	bl	8022fec <_malloc_r>
 8023ffc:	4606      	mov	r6, r0
 8023ffe:	b928      	cbnz	r0, 802400c <_calloc_r+0x1e>
 8024000:	2600      	movs	r6, #0
 8024002:	4630      	mov	r0, r6
 8024004:	bd70      	pop	{r4, r5, r6, pc}
 8024006:	220c      	movs	r2, #12
 8024008:	6002      	str	r2, [r0, #0]
 802400a:	e7f9      	b.n	8024000 <_calloc_r+0x12>
 802400c:	462a      	mov	r2, r5
 802400e:	4621      	mov	r1, r4
 8024010:	f7fe f872 	bl	80220f8 <memset>
 8024014:	e7f5      	b.n	8024002 <_calloc_r+0x14>

08024016 <__ascii_mbtowc>:
 8024016:	b082      	sub	sp, #8
 8024018:	b901      	cbnz	r1, 802401c <__ascii_mbtowc+0x6>
 802401a:	a901      	add	r1, sp, #4
 802401c:	b142      	cbz	r2, 8024030 <__ascii_mbtowc+0x1a>
 802401e:	b14b      	cbz	r3, 8024034 <__ascii_mbtowc+0x1e>
 8024020:	7813      	ldrb	r3, [r2, #0]
 8024022:	600b      	str	r3, [r1, #0]
 8024024:	7812      	ldrb	r2, [r2, #0]
 8024026:	1e10      	subs	r0, r2, #0
 8024028:	bf18      	it	ne
 802402a:	2001      	movne	r0, #1
 802402c:	b002      	add	sp, #8
 802402e:	4770      	bx	lr
 8024030:	4610      	mov	r0, r2
 8024032:	e7fb      	b.n	802402c <__ascii_mbtowc+0x16>
 8024034:	f06f 0001 	mvn.w	r0, #1
 8024038:	e7f8      	b.n	802402c <__ascii_mbtowc+0x16>

0802403a <_realloc_r>:
 802403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802403e:	4680      	mov	r8, r0
 8024040:	4615      	mov	r5, r2
 8024042:	460c      	mov	r4, r1
 8024044:	b921      	cbnz	r1, 8024050 <_realloc_r+0x16>
 8024046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802404a:	4611      	mov	r1, r2
 802404c:	f7fe bfce 	b.w	8022fec <_malloc_r>
 8024050:	b92a      	cbnz	r2, 802405e <_realloc_r+0x24>
 8024052:	f7fe ff57 	bl	8022f04 <_free_r>
 8024056:	2400      	movs	r4, #0
 8024058:	4620      	mov	r0, r4
 802405a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802405e:	f000 f86b 	bl	8024138 <_malloc_usable_size_r>
 8024062:	4285      	cmp	r5, r0
 8024064:	4606      	mov	r6, r0
 8024066:	d802      	bhi.n	802406e <_realloc_r+0x34>
 8024068:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802406c:	d8f4      	bhi.n	8024058 <_realloc_r+0x1e>
 802406e:	4629      	mov	r1, r5
 8024070:	4640      	mov	r0, r8
 8024072:	f7fe ffbb 	bl	8022fec <_malloc_r>
 8024076:	4607      	mov	r7, r0
 8024078:	2800      	cmp	r0, #0
 802407a:	d0ec      	beq.n	8024056 <_realloc_r+0x1c>
 802407c:	42b5      	cmp	r5, r6
 802407e:	462a      	mov	r2, r5
 8024080:	4621      	mov	r1, r4
 8024082:	bf28      	it	cs
 8024084:	4632      	movcs	r2, r6
 8024086:	f7fe f932 	bl	80222ee <memcpy>
 802408a:	4621      	mov	r1, r4
 802408c:	4640      	mov	r0, r8
 802408e:	f7fe ff39 	bl	8022f04 <_free_r>
 8024092:	463c      	mov	r4, r7
 8024094:	e7e0      	b.n	8024058 <_realloc_r+0x1e>

08024096 <__ascii_wctomb>:
 8024096:	4603      	mov	r3, r0
 8024098:	4608      	mov	r0, r1
 802409a:	b141      	cbz	r1, 80240ae <__ascii_wctomb+0x18>
 802409c:	2aff      	cmp	r2, #255	@ 0xff
 802409e:	d904      	bls.n	80240aa <__ascii_wctomb+0x14>
 80240a0:	228a      	movs	r2, #138	@ 0x8a
 80240a2:	601a      	str	r2, [r3, #0]
 80240a4:	f04f 30ff 	mov.w	r0, #4294967295
 80240a8:	4770      	bx	lr
 80240aa:	700a      	strb	r2, [r1, #0]
 80240ac:	2001      	movs	r0, #1
 80240ae:	4770      	bx	lr

080240b0 <_raise_r>:
 80240b0:	291f      	cmp	r1, #31
 80240b2:	b538      	push	{r3, r4, r5, lr}
 80240b4:	4605      	mov	r5, r0
 80240b6:	460c      	mov	r4, r1
 80240b8:	d904      	bls.n	80240c4 <_raise_r+0x14>
 80240ba:	2316      	movs	r3, #22
 80240bc:	6003      	str	r3, [r0, #0]
 80240be:	f04f 30ff 	mov.w	r0, #4294967295
 80240c2:	bd38      	pop	{r3, r4, r5, pc}
 80240c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80240c6:	b112      	cbz	r2, 80240ce <_raise_r+0x1e>
 80240c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80240cc:	b94b      	cbnz	r3, 80240e2 <_raise_r+0x32>
 80240ce:	4628      	mov	r0, r5
 80240d0:	f000 f830 	bl	8024134 <_getpid_r>
 80240d4:	4622      	mov	r2, r4
 80240d6:	4601      	mov	r1, r0
 80240d8:	4628      	mov	r0, r5
 80240da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80240de:	f000 b817 	b.w	8024110 <_kill_r>
 80240e2:	2b01      	cmp	r3, #1
 80240e4:	d00a      	beq.n	80240fc <_raise_r+0x4c>
 80240e6:	1c59      	adds	r1, r3, #1
 80240e8:	d103      	bne.n	80240f2 <_raise_r+0x42>
 80240ea:	2316      	movs	r3, #22
 80240ec:	6003      	str	r3, [r0, #0]
 80240ee:	2001      	movs	r0, #1
 80240f0:	e7e7      	b.n	80240c2 <_raise_r+0x12>
 80240f2:	2100      	movs	r1, #0
 80240f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80240f8:	4620      	mov	r0, r4
 80240fa:	4798      	blx	r3
 80240fc:	2000      	movs	r0, #0
 80240fe:	e7e0      	b.n	80240c2 <_raise_r+0x12>

08024100 <raise>:
 8024100:	4b02      	ldr	r3, [pc, #8]	@ (802410c <raise+0xc>)
 8024102:	4601      	mov	r1, r0
 8024104:	6818      	ldr	r0, [r3, #0]
 8024106:	f7ff bfd3 	b.w	80240b0 <_raise_r>
 802410a:	bf00      	nop
 802410c:	24000060 	.word	0x24000060

08024110 <_kill_r>:
 8024110:	b538      	push	{r3, r4, r5, lr}
 8024112:	4d07      	ldr	r5, [pc, #28]	@ (8024130 <_kill_r+0x20>)
 8024114:	2300      	movs	r3, #0
 8024116:	4604      	mov	r4, r0
 8024118:	4608      	mov	r0, r1
 802411a:	4611      	mov	r1, r2
 802411c:	602b      	str	r3, [r5, #0]
 802411e:	f7de f8ef 	bl	8002300 <_kill>
 8024122:	1c43      	adds	r3, r0, #1
 8024124:	d102      	bne.n	802412c <_kill_r+0x1c>
 8024126:	682b      	ldr	r3, [r5, #0]
 8024128:	b103      	cbz	r3, 802412c <_kill_r+0x1c>
 802412a:	6023      	str	r3, [r4, #0]
 802412c:	bd38      	pop	{r3, r4, r5, pc}
 802412e:	bf00      	nop
 8024130:	24012848 	.word	0x24012848

08024134 <_getpid_r>:
 8024134:	f7de b8dc 	b.w	80022f0 <_getpid>

08024138 <_malloc_usable_size_r>:
 8024138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802413c:	1f18      	subs	r0, r3, #4
 802413e:	2b00      	cmp	r3, #0
 8024140:	bfbc      	itt	lt
 8024142:	580b      	ldrlt	r3, [r1, r0]
 8024144:	18c0      	addlt	r0, r0, r3
 8024146:	4770      	bx	lr

08024148 <_init>:
 8024148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802414a:	bf00      	nop
 802414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802414e:	bc08      	pop	{r3}
 8024150:	469e      	mov	lr, r3
 8024152:	4770      	bx	lr

08024154 <_fini>:
 8024154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024156:	bf00      	nop
 8024158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802415a:	bc08      	pop	{r3}
 802415c:	469e      	mov	lr, r3
 802415e:	4770      	bx	lr
